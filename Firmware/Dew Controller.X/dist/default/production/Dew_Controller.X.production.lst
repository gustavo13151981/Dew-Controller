

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Feb 03 23:59:08 2020

Microchip MPLAB XC8 C Compiler v2.10 (Pro license) build 20190730164152 Og9f 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	plic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	stringtext13,global,class=STRCODE,delta=2
    20                           	psect	stringtext14,global,class=STRCODE,delta=2
    21                           	psect	stringtext15,global,class=STRCODE,delta=2
    22                           	psect	stringtext16,global,class=STRCODE,delta=2
    23                           	psect	stringtext17,global,class=STRCODE,delta=2
    24                           	psect	stringtext18,global,class=STRCODE,delta=2
    25                           	psect	stringtext19,global,class=STRCODE,delta=2
    26                           	psect	stringtext20,global,class=STRCODE,delta=2
    27                           	psect	stringtext21,global,class=STRCODE,delta=2
    28                           	psect	stringtext22,global,class=STRCODE,delta=2
    29                           	psect	stringtext23,global,class=STRCODE,delta=2
    30                           	psect	stringtext24,global,class=STRCODE,delta=2
    31                           	psect	stringtext25,global,class=STRCODE,delta=2
    32                           	psect	stringtext26,global,class=STRCODE,delta=2
    33                           	psect	stringtext27,global,class=STRCODE,delta=2
    34                           	psect	stringtext28,global,class=STRCODE,delta=2
    35                           	psect	stringtext29,global,class=STRCODE,delta=2
    36                           	psect	stringtext30,global,class=STRCODE,delta=2
    37                           	psect	stringtext31,global,class=STRCODE,delta=2
    38                           	psect	stringtext32,global,class=STRCODE,delta=2
    39                           	psect	stringtext33,global,class=STRCODE,delta=2
    40                           	psect	stringtext34,global,class=STRCODE,delta=2
    41                           	psect	stringtext35,global,class=STRCODE,delta=2
    42                           	psect	stringtext36,global,class=STRCODE,delta=2
    43                           	psect	stringtext37,global,class=STRCODE,delta=2
    44                           	psect	stringtext38,global,class=STRCODE,delta=2
    45                           	psect	stringtext39,global,class=STRCODE,delta=2
    46                           	psect	stringtext40,global,class=STRCODE,delta=2
    47                           	psect	stringtext41,global,class=STRCODE,delta=2
    48                           	psect	stringtext42,global,class=STRCODE,delta=2
    49                           	psect	stringtext43,global,class=STRCODE,delta=2
    50                           	psect	stringtext44,global,class=STRCODE,delta=2
    51                           	psect	stringtext45,global,class=STRCODE,delta=2
    52                           	psect	stringtext46,global,class=STRCODE,delta=2
    53                           	psect	stringtext47,global,class=STRCODE,delta=2
    54                           	psect	stringtext48,global,class=STRCODE,delta=2
    55                           	psect	stringtext49,global,class=STRCODE,delta=2
    56                           	psect	stringtext50,global,class=STRCODE,delta=2
    57                           	psect	stringtext51,global,class=STRCODE,delta=2
    58                           	psect	stringtext52,global,class=STRCODE,delta=2
    59                           	psect	stringtext53,global,class=STRCODE,delta=2
    60                           	psect	stringtext54,global,class=STRCODE,delta=2
    61                           	psect	stringtext55,global,class=STRCODE,delta=2
    62                           	psect	stringtext56,global,class=STRCODE,delta=2
    63                           	psect	stringtext57,global,class=STRCODE,delta=2
    64                           	psect	stringtext58,global,class=STRCODE,delta=2
    65                           	psect	stringtext59,global,class=STRCODE,delta=2
    66                           	psect	stringtext60,global,class=STRCODE,delta=2
    67                           	psect	stringtext61,global,class=STRCODE,delta=2
    68                           	psect	stringtext62,global,class=STRCODE,delta=2
    69                           	psect	stringtext63,global,class=STRCODE,delta=2
    70                           	psect	stringtext64,global,class=STRCODE,delta=2
    71                           	psect	stringtext65,global,class=STRCODE,delta=2
    72                           	psect	stringtext66,global,class=STRCODE,delta=2
    73                           	psect	stringtext67,global,class=STRCODE,delta=2
    74                           	psect	stringtext68,global,class=STRCODE,delta=2
    75                           	psect	stringtext69,global,class=STRCODE,delta=2
    76                           	psect	stringtext70,global,class=STRCODE,delta=2
    77                           	psect	stringtext71,global,class=STRCODE,delta=2
    78                           	psect	stringtext72,global,class=STRCODE,delta=2
    79                           	psect	stringtext73,global,class=STRCODE,delta=2
    80                           	psect	stringtext74,global,class=STRCODE,delta=2
    81                           	psect	stringtext75,global,class=STRCODE,delta=2
    82                           	psect	stringtext76,global,class=STRCODE,delta=2
    83                           	psect	stringtext77,global,class=STRCODE,delta=2
    84                           	psect	cinit,global,class=CODE,merge=1,delta=2
    85                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    86                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    87                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    88                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    89                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    90                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    91                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    92                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    93                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    94                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    95                           	psect	clrtext,global,class=CODE,delta=2
    96                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    97                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    98                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    99                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
   100                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
   101                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   102                           	psect	swtext1,local,class=CONST,delta=2
   103                           	psect	text3,local,class=CODE,merge=1,delta=2
   104                           	psect	text5,local,class=CODE,merge=1,delta=2
   105                           	psect	text8,local,class=CODE,merge=1,delta=2
   106                           	psect	text9,local,class=CODE,merge=1,delta=2
   107                           	psect	text11,local,class=CODE,merge=1,delta=2
   108                           	psect	text13,local,class=CODE,merge=1,delta=2
   109                           	psect	swtext2,local,class=CONST,delta=2
   110                           	psect	text29,local,class=CODE,merge=1,delta=2
   111                           	psect	text30,local,class=CODE,merge=1,delta=2
   112                           	psect	text32,local,class=CODE,merge=1,delta=2
   113                           	psect	text38,local,class=CODE,merge=1,delta=2
   114                           	psect	swtext3,local,class=CONST,delta=2
   115                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
   116                           	psect	text49,local,class=CODE,merge=1,delta=2
   117                           	psect	text50,local,class=CODE,merge=1,delta=2
   118                           	psect	text51,local,class=CODE,merge=1,delta=2
   119                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
   120                           	psect	intentry,global,class=CODE,delta=2
   121                           	psect	text73,local,class=CODE,merge=1,delta=2
   122                           	psect	text76,local,class=CODE,merge=1,delta=2
   123                           	psect	text77,local,class=CODE,merge=1,delta=2
   124                           	dabs	1,0xCA0,32
   125                           	dabs	1,0xC20,80
   126                           	dabs	1,0xBBA,54
   127                           	dabs	1,0x274A,0,_data
   128                           	dabs	1,0x7E,2
   129  0000                     
   130                           ; Version 2.10
   131                           ; Generated 31/07/2019 GMT
   132                           ; 
   133                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   134                           ; All rights reserved.
   135                           ; 
   136                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   137                           ; 
   138                           ; Redistribution and use in source and binary forms, with or without modification, are
   139                           ; permitted provided that the following conditions are met:
   140                           ; 
   141                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   142                           ;        conditions and the following disclaimer.
   143                           ; 
   144                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   145                           ;        of conditions and the following disclaimer in the documentation and/or other
   146                           ;        materials provided with the distribution.
   147                           ; 
   148                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   149                           ;        software without specific prior written permission.
   150                           ; 
   151                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   152                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   153                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   154                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   155                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   156                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   157                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   158                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   159                           ; 
   160                           ; 
   161                           ; Code-generator required, PIC16F15356 Definitions
   162                           ; 
   163                           ; SFR Addresses
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  0010                     	;# 
   180  0012                     	;# 
   181  0013                     	;# 
   182  0014                     	;# 
   183  0016                     	;# 
   184  0018                     	;# 
   185  0019                     	;# 
   186  001A                     	;# 
   187  009B                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0119                     	;# 
   194  0119                     	;# 
   195  0119                     	;# 
   196  011A                     	;# 
   197  011A                     	;# 
   198  011A                     	;# 
   199  011B                     	;# 
   200  011B                     	;# 
   201  011B                     	;# 
   202  011B                     	;# 
   203  011B                     	;# 
   204  011C                     	;# 
   205  011C                     	;# 
   206  011C                     	;# 
   207  011D                     	;# 
   208  011D                     	;# 
   209  011D                     	;# 
   210  011E                     	;# 
   211  011E                     	;# 
   212  011E                     	;# 
   213  011F                     	;# 
   214  011F                     	;# 
   215  011F                     	;# 
   216  011F                     	;# 
   217  011F                     	;# 
   218  018C                     	;# 
   219  018D                     	;# 
   220  018E                     	;# 
   221  018F                     	;# 
   222  0190                     	;# 
   223  0191                     	;# 
   224  0192                     	;# 
   225  0196                     	;# 
   226  0197                     	;# 
   227  0198                     	;# 
   228  0199                     	;# 
   229  019A                     	;# 
   230  019B                     	;# 
   231  019C                     	;# 
   232  020C                     	;# 
   233  020C                     	;# 
   234  020D                     	;# 
   235  020E                     	;# 
   236  020F                     	;# 
   237  020F                     	;# 
   238  0210                     	;# 
   239  0210                     	;# 
   240  0211                     	;# 
   241  0211                     	;# 
   242  028C                     	;# 
   243  028C                     	;# 
   244  028D                     	;# 
   245  028D                     	;# 
   246  028E                     	;# 
   247  028F                     	;# 
   248  0290                     	;# 
   249  0291                     	;# 
   250  030C                     	;# 
   251  030C                     	;# 
   252  030D                     	;# 
   253  030E                     	;# 
   254  030F                     	;# 
   255  0310                     	;# 
   256  0310                     	;# 
   257  0311                     	;# 
   258  0312                     	;# 
   259  0313                     	;# 
   260  0314                     	;# 
   261  0314                     	;# 
   262  0315                     	;# 
   263  0316                     	;# 
   264  0318                     	;# 
   265  0318                     	;# 
   266  0319                     	;# 
   267  031A                     	;# 
   268  031C                     	;# 
   269  031C                     	;# 
   270  031D                     	;# 
   271  031E                     	;# 
   272  038C                     	;# 
   273  038C                     	;# 
   274  038D                     	;# 
   275  038E                     	;# 
   276  058C                     	;# 
   277  058C                     	;# 
   278  058D                     	;# 
   279  058E                     	;# 
   280  058F                     	;# 
   281  058F                     	;# 
   282  0590                     	;# 
   283  0591                     	;# 
   284  0592                     	;# 
   285  0593                     	;# 
   286  059C                     	;# 
   287  059C                     	;# 
   288  059D                     	;# 
   289  059D                     	;# 
   290  059E                     	;# 
   291  059F                     	;# 
   292  060C                     	;# 
   293  060D                     	;# 
   294  060E                     	;# 
   295  060F                     	;# 
   296  0610                     	;# 
   297  0611                     	;# 
   298  0612                     	;# 
   299  0613                     	;# 
   300  0614                     	;# 
   301  070C                     	;# 
   302  070D                     	;# 
   303  070E                     	;# 
   304  070F                     	;# 
   305  0710                     	;# 
   306  0711                     	;# 
   307  0712                     	;# 
   308  0713                     	;# 
   309  0716                     	;# 
   310  0717                     	;# 
   311  0718                     	;# 
   312  0719                     	;# 
   313  071A                     	;# 
   314  071B                     	;# 
   315  071C                     	;# 
   316  071D                     	;# 
   317  0796                     	;# 
   318  0797                     	;# 
   319  0798                     	;# 
   320  0799                     	;# 
   321  079A                     	;# 
   322  079B                     	;# 
   323  080C                     	;# 
   324  080D                     	;# 
   325  080E                     	;# 
   326  080F                     	;# 
   327  0810                     	;# 
   328  0811                     	;# 
   329  0812                     	;# 
   330  0813                     	;# 
   331  0814                     	;# 
   332  081A                     	;# 
   333  081A                     	;# 
   334  081B                     	;# 
   335  081C                     	;# 
   336  081C                     	;# 
   337  081D                     	;# 
   338  081E                     	;# 
   339  081F                     	;# 
   340  088C                     	;# 
   341  088D                     	;# 
   342  088E                     	;# 
   343  088F                     	;# 
   344  0890                     	;# 
   345  0891                     	;# 
   346  0892                     	;# 
   347  0893                     	;# 
   348  0895                     	;# 
   349  0896                     	;# 
   350  090C                     	;# 
   351  090E                     	;# 
   352  090F                     	;# 
   353  091F                     	;# 
   354  098F                     	;# 
   355  098F                     	;# 
   356  0990                     	;# 
   357  0991                     	;# 
   358  0992                     	;# 
   359  0993                     	;# 
   360  0994                     	;# 
   361  0995                     	;# 
   362  0996                     	;# 
   363  0997                     	;# 
   364  0A19                     	;# 
   365  0A19                     	;# 
   366  0A1A                     	;# 
   367  0A1A                     	;# 
   368  0A1B                     	;# 
   369  0A1B                     	;# 
   370  0A1B                     	;# 
   371  0A1C                     	;# 
   372  0A1C                     	;# 
   373  0A1D                     	;# 
   374  0A1D                     	;# 
   375  0A1E                     	;# 
   376  0A1E                     	;# 
   377  0A1F                     	;# 
   378  0A1F                     	;# 
   379  0A1F                     	;# 
   380  1E0F                     	;# 
   381  1E10                     	;# 
   382  1E11                     	;# 
   383  1E12                     	;# 
   384  1E13                     	;# 
   385  1E14                     	;# 
   386  1E15                     	;# 
   387  1E16                     	;# 
   388  1E17                     	;# 
   389  1E18                     	;# 
   390  1E19                     	;# 
   391  1E1A                     	;# 
   392  1E1B                     	;# 
   393  1E1C                     	;# 
   394  1E1D                     	;# 
   395  1E1E                     	;# 
   396  1E1F                     	;# 
   397  1E20                     	;# 
   398  1E21                     	;# 
   399  1E22                     	;# 
   400  1E23                     	;# 
   401  1E24                     	;# 
   402  1E25                     	;# 
   403  1E26                     	;# 
   404  1E27                     	;# 
   405  1E28                     	;# 
   406  1E29                     	;# 
   407  1E2A                     	;# 
   408  1E2B                     	;# 
   409  1E2C                     	;# 
   410  1E2D                     	;# 
   411  1E2E                     	;# 
   412  1E2F                     	;# 
   413  1E30                     	;# 
   414  1E31                     	;# 
   415  1E32                     	;# 
   416  1E33                     	;# 
   417  1E34                     	;# 
   418  1E35                     	;# 
   419  1E36                     	;# 
   420  1E37                     	;# 
   421  1E8F                     	;# 
   422  1E90                     	;# 
   423  1E91                     	;# 
   424  1E92                     	;# 
   425  1E93                     	;# 
   426  1E9C                     	;# 
   427  1EA1                     	;# 
   428  1EA2                     	;# 
   429  1EB1                     	;# 
   430  1EBB                     	;# 
   431  1EBC                     	;# 
   432  1EBD                     	;# 
   433  1EBE                     	;# 
   434  1EC3                     	;# 
   435  1EC5                     	;# 
   436  1EC6                     	;# 
   437  1EC7                     	;# 
   438  1EC8                     	;# 
   439  1EC9                     	;# 
   440  1ECA                     	;# 
   441  1ECB                     	;# 
   442  1ECC                     	;# 
   443  1ECD                     	;# 
   444  1ECE                     	;# 
   445  1F10                     	;# 
   446  1F11                     	;# 
   447  1F12                     	;# 
   448  1F13                     	;# 
   449  1F14                     	;# 
   450  1F15                     	;# 
   451  1F16                     	;# 
   452  1F17                     	;# 
   453  1F18                     	;# 
   454  1F19                     	;# 
   455  1F1A                     	;# 
   456  1F1B                     	;# 
   457  1F1C                     	;# 
   458  1F1D                     	;# 
   459  1F1E                     	;# 
   460  1F1F                     	;# 
   461  1F20                     	;# 
   462  1F21                     	;# 
   463  1F22                     	;# 
   464  1F23                     	;# 
   465  1F24                     	;# 
   466  1F25                     	;# 
   467  1F26                     	;# 
   468  1F27                     	;# 
   469  1F38                     	;# 
   470  1F39                     	;# 
   471  1F3A                     	;# 
   472  1F3B                     	;# 
   473  1F3C                     	;# 
   474  1F3D                     	;# 
   475  1F3E                     	;# 
   476  1F3F                     	;# 
   477  1F43                     	;# 
   478  1F44                     	;# 
   479  1F45                     	;# 
   480  1F46                     	;# 
   481  1F47                     	;# 
   482  1F48                     	;# 
   483  1F49                     	;# 
   484  1F4A                     	;# 
   485  1F4E                     	;# 
   486  1F4F                     	;# 
   487  1F50                     	;# 
   488  1F51                     	;# 
   489  1F52                     	;# 
   490  1F53                     	;# 
   491  1F54                     	;# 
   492  1F55                     	;# 
   493  1F65                     	;# 
   494  1F68                     	;# 
   495  1F69                     	;# 
   496  1F6A                     	;# 
   497  1F6B                     	;# 
   498  1FE4                     	;# 
   499  1FE5                     	;# 
   500  1FE6                     	;# 
   501  1FE7                     	;# 
   502  1FE8                     	;# 
   503  1FE8                     	;# 
   504  1FE9                     	;# 
   505  1FEA                     	;# 
   506  1FEB                     	;# 
   507  1FED                     	;# 
   508  1FEE                     	;# 
   509  1FEF                     	;# 
   510  0000                     	;# 
   511  0001                     	;# 
   512  0002                     	;# 
   513  0003                     	;# 
   514  0004                     	;# 
   515  0005                     	;# 
   516  0006                     	;# 
   517  0007                     	;# 
   518  0008                     	;# 
   519  0009                     	;# 
   520  000A                     	;# 
   521  000B                     	;# 
   522  000C                     	;# 
   523  000D                     	;# 
   524  000E                     	;# 
   525  0010                     	;# 
   526  0012                     	;# 
   527  0013                     	;# 
   528  0014                     	;# 
   529  0016                     	;# 
   530  0018                     	;# 
   531  0019                     	;# 
   532  001A                     	;# 
   533  009B                     	;# 
   534  009B                     	;# 
   535  009C                     	;# 
   536  009D                     	;# 
   537  009E                     	;# 
   538  009F                     	;# 
   539  0119                     	;# 
   540  0119                     	;# 
   541  0119                     	;# 
   542  011A                     	;# 
   543  011A                     	;# 
   544  011A                     	;# 
   545  011B                     	;# 
   546  011B                     	;# 
   547  011B                     	;# 
   548  011B                     	;# 
   549  011B                     	;# 
   550  011C                     	;# 
   551  011C                     	;# 
   552  011C                     	;# 
   553  011D                     	;# 
   554  011D                     	;# 
   555  011D                     	;# 
   556  011E                     	;# 
   557  011E                     	;# 
   558  011E                     	;# 
   559  011F                     	;# 
   560  011F                     	;# 
   561  011F                     	;# 
   562  011F                     	;# 
   563  011F                     	;# 
   564  018C                     	;# 
   565  018D                     	;# 
   566  018E                     	;# 
   567  018F                     	;# 
   568  0190                     	;# 
   569  0191                     	;# 
   570  0192                     	;# 
   571  0196                     	;# 
   572  0197                     	;# 
   573  0198                     	;# 
   574  0199                     	;# 
   575  019A                     	;# 
   576  019B                     	;# 
   577  019C                     	;# 
   578  020C                     	;# 
   579  020C                     	;# 
   580  020D                     	;# 
   581  020E                     	;# 
   582  020F                     	;# 
   583  020F                     	;# 
   584  0210                     	;# 
   585  0210                     	;# 
   586  0211                     	;# 
   587  0211                     	;# 
   588  028C                     	;# 
   589  028C                     	;# 
   590  028D                     	;# 
   591  028D                     	;# 
   592  028E                     	;# 
   593  028F                     	;# 
   594  0290                     	;# 
   595  0291                     	;# 
   596  030C                     	;# 
   597  030C                     	;# 
   598  030D                     	;# 
   599  030E                     	;# 
   600  030F                     	;# 
   601  0310                     	;# 
   602  0310                     	;# 
   603  0311                     	;# 
   604  0312                     	;# 
   605  0313                     	;# 
   606  0314                     	;# 
   607  0314                     	;# 
   608  0315                     	;# 
   609  0316                     	;# 
   610  0318                     	;# 
   611  0318                     	;# 
   612  0319                     	;# 
   613  031A                     	;# 
   614  031C                     	;# 
   615  031C                     	;# 
   616  031D                     	;# 
   617  031E                     	;# 
   618  038C                     	;# 
   619  038C                     	;# 
   620  038D                     	;# 
   621  038E                     	;# 
   622  058C                     	;# 
   623  058C                     	;# 
   624  058D                     	;# 
   625  058E                     	;# 
   626  058F                     	;# 
   627  058F                     	;# 
   628  0590                     	;# 
   629  0591                     	;# 
   630  0592                     	;# 
   631  0593                     	;# 
   632  059C                     	;# 
   633  059C                     	;# 
   634  059D                     	;# 
   635  059D                     	;# 
   636  059E                     	;# 
   637  059F                     	;# 
   638  060C                     	;# 
   639  060D                     	;# 
   640  060E                     	;# 
   641  060F                     	;# 
   642  0610                     	;# 
   643  0611                     	;# 
   644  0612                     	;# 
   645  0613                     	;# 
   646  0614                     	;# 
   647  070C                     	;# 
   648  070D                     	;# 
   649  070E                     	;# 
   650  070F                     	;# 
   651  0710                     	;# 
   652  0711                     	;# 
   653  0712                     	;# 
   654  0713                     	;# 
   655  0716                     	;# 
   656  0717                     	;# 
   657  0718                     	;# 
   658  0719                     	;# 
   659  071A                     	;# 
   660  071B                     	;# 
   661  071C                     	;# 
   662  071D                     	;# 
   663  0796                     	;# 
   664  0797                     	;# 
   665  0798                     	;# 
   666  0799                     	;# 
   667  079A                     	;# 
   668  079B                     	;# 
   669  080C                     	;# 
   670  080D                     	;# 
   671  080E                     	;# 
   672  080F                     	;# 
   673  0810                     	;# 
   674  0811                     	;# 
   675  0812                     	;# 
   676  0813                     	;# 
   677  0814                     	;# 
   678  081A                     	;# 
   679  081A                     	;# 
   680  081B                     	;# 
   681  081C                     	;# 
   682  081C                     	;# 
   683  081D                     	;# 
   684  081E                     	;# 
   685  081F                     	;# 
   686  088C                     	;# 
   687  088D                     	;# 
   688  088E                     	;# 
   689  088F                     	;# 
   690  0890                     	;# 
   691  0891                     	;# 
   692  0892                     	;# 
   693  0893                     	;# 
   694  0895                     	;# 
   695  0896                     	;# 
   696  090C                     	;# 
   697  090E                     	;# 
   698  090F                     	;# 
   699  091F                     	;# 
   700  098F                     	;# 
   701  098F                     	;# 
   702  0990                     	;# 
   703  0991                     	;# 
   704  0992                     	;# 
   705  0993                     	;# 
   706  0994                     	;# 
   707  0995                     	;# 
   708  0996                     	;# 
   709  0997                     	;# 
   710  0A19                     	;# 
   711  0A19                     	;# 
   712  0A1A                     	;# 
   713  0A1A                     	;# 
   714  0A1B                     	;# 
   715  0A1B                     	;# 
   716  0A1B                     	;# 
   717  0A1C                     	;# 
   718  0A1C                     	;# 
   719  0A1D                     	;# 
   720  0A1D                     	;# 
   721  0A1E                     	;# 
   722  0A1E                     	;# 
   723  0A1F                     	;# 
   724  0A1F                     	;# 
   725  0A1F                     	;# 
   726  1E0F                     	;# 
   727  1E10                     	;# 
   728  1E11                     	;# 
   729  1E12                     	;# 
   730  1E13                     	;# 
   731  1E14                     	;# 
   732  1E15                     	;# 
   733  1E16                     	;# 
   734  1E17                     	;# 
   735  1E18                     	;# 
   736  1E19                     	;# 
   737  1E1A                     	;# 
   738  1E1B                     	;# 
   739  1E1C                     	;# 
   740  1E1D                     	;# 
   741  1E1E                     	;# 
   742  1E1F                     	;# 
   743  1E20                     	;# 
   744  1E21                     	;# 
   745  1E22                     	;# 
   746  1E23                     	;# 
   747  1E24                     	;# 
   748  1E25                     	;# 
   749  1E26                     	;# 
   750  1E27                     	;# 
   751  1E28                     	;# 
   752  1E29                     	;# 
   753  1E2A                     	;# 
   754  1E2B                     	;# 
   755  1E2C                     	;# 
   756  1E2D                     	;# 
   757  1E2E                     	;# 
   758  1E2F                     	;# 
   759  1E30                     	;# 
   760  1E31                     	;# 
   761  1E32                     	;# 
   762  1E33                     	;# 
   763  1E34                     	;# 
   764  1E35                     	;# 
   765  1E36                     	;# 
   766  1E37                     	;# 
   767  1E8F                     	;# 
   768  1E90                     	;# 
   769  1E91                     	;# 
   770  1E92                     	;# 
   771  1E93                     	;# 
   772  1E9C                     	;# 
   773  1EA1                     	;# 
   774  1EA2                     	;# 
   775  1EB1                     	;# 
   776  1EBB                     	;# 
   777  1EBC                     	;# 
   778  1EBD                     	;# 
   779  1EBE                     	;# 
   780  1EC3                     	;# 
   781  1EC5                     	;# 
   782  1EC6                     	;# 
   783  1EC7                     	;# 
   784  1EC8                     	;# 
   785  1EC9                     	;# 
   786  1ECA                     	;# 
   787  1ECB                     	;# 
   788  1ECC                     	;# 
   789  1ECD                     	;# 
   790  1ECE                     	;# 
   791  1F10                     	;# 
   792  1F11                     	;# 
   793  1F12                     	;# 
   794  1F13                     	;# 
   795  1F14                     	;# 
   796  1F15                     	;# 
   797  1F16                     	;# 
   798  1F17                     	;# 
   799  1F18                     	;# 
   800  1F19                     	;# 
   801  1F1A                     	;# 
   802  1F1B                     	;# 
   803  1F1C                     	;# 
   804  1F1D                     	;# 
   805  1F1E                     	;# 
   806  1F1F                     	;# 
   807  1F20                     	;# 
   808  1F21                     	;# 
   809  1F22                     	;# 
   810  1F23                     	;# 
   811  1F24                     	;# 
   812  1F25                     	;# 
   813  1F26                     	;# 
   814  1F27                     	;# 
   815  1F38                     	;# 
   816  1F39                     	;# 
   817  1F3A                     	;# 
   818  1F3B                     	;# 
   819  1F3C                     	;# 
   820  1F3D                     	;# 
   821  1F3E                     	;# 
   822  1F3F                     	;# 
   823  1F43                     	;# 
   824  1F44                     	;# 
   825  1F45                     	;# 
   826  1F46                     	;# 
   827  1F47                     	;# 
   828  1F48                     	;# 
   829  1F49                     	;# 
   830  1F4A                     	;# 
   831  1F4E                     	;# 
   832  1F4F                     	;# 
   833  1F50                     	;# 
   834  1F51                     	;# 
   835  1F52                     	;# 
   836  1F53                     	;# 
   837  1F54                     	;# 
   838  1F55                     	;# 
   839  1F65                     	;# 
   840  1F68                     	;# 
   841  1F69                     	;# 
   842  1F6A                     	;# 
   843  1F6B                     	;# 
   844  1FE4                     	;# 
   845  1FE5                     	;# 
   846  1FE6                     	;# 
   847  1FE7                     	;# 
   848  1FE8                     	;# 
   849  1FE8                     	;# 
   850  1FE9                     	;# 
   851  1FEA                     	;# 
   852  1FEB                     	;# 
   853  1FED                     	;# 
   854  1FEE                     	;# 
   855  1FEF                     	;# 
   856  0000                     	;# 
   857  0001                     	;# 
   858  0002                     	;# 
   859  0003                     	;# 
   860  0004                     	;# 
   861  0005                     	;# 
   862  0006                     	;# 
   863  0007                     	;# 
   864  0008                     	;# 
   865  0009                     	;# 
   866  000A                     	;# 
   867  000B                     	;# 
   868  000C                     	;# 
   869  000D                     	;# 
   870  000E                     	;# 
   871  0010                     	;# 
   872  0012                     	;# 
   873  0013                     	;# 
   874  0014                     	;# 
   875  0016                     	;# 
   876  0018                     	;# 
   877  0019                     	;# 
   878  001A                     	;# 
   879  009B                     	;# 
   880  009B                     	;# 
   881  009C                     	;# 
   882  009D                     	;# 
   883  009E                     	;# 
   884  009F                     	;# 
   885  0119                     	;# 
   886  0119                     	;# 
   887  0119                     	;# 
   888  011A                     	;# 
   889  011A                     	;# 
   890  011A                     	;# 
   891  011B                     	;# 
   892  011B                     	;# 
   893  011B                     	;# 
   894  011B                     	;# 
   895  011B                     	;# 
   896  011C                     	;# 
   897  011C                     	;# 
   898  011C                     	;# 
   899  011D                     	;# 
   900  011D                     	;# 
   901  011D                     	;# 
   902  011E                     	;# 
   903  011E                     	;# 
   904  011E                     	;# 
   905  011F                     	;# 
   906  011F                     	;# 
   907  011F                     	;# 
   908  011F                     	;# 
   909  011F                     	;# 
   910  018C                     	;# 
   911  018D                     	;# 
   912  018E                     	;# 
   913  018F                     	;# 
   914  0190                     	;# 
   915  0191                     	;# 
   916  0192                     	;# 
   917  0196                     	;# 
   918  0197                     	;# 
   919  0198                     	;# 
   920  0199                     	;# 
   921  019A                     	;# 
   922  019B                     	;# 
   923  019C                     	;# 
   924  020C                     	;# 
   925  020C                     	;# 
   926  020D                     	;# 
   927  020E                     	;# 
   928  020F                     	;# 
   929  020F                     	;# 
   930  0210                     	;# 
   931  0210                     	;# 
   932  0211                     	;# 
   933  0211                     	;# 
   934  028C                     	;# 
   935  028C                     	;# 
   936  028D                     	;# 
   937  028D                     	;# 
   938  028E                     	;# 
   939  028F                     	;# 
   940  0290                     	;# 
   941  0291                     	;# 
   942  030C                     	;# 
   943  030C                     	;# 
   944  030D                     	;# 
   945  030E                     	;# 
   946  030F                     	;# 
   947  0310                     	;# 
   948  0310                     	;# 
   949  0311                     	;# 
   950  0312                     	;# 
   951  0313                     	;# 
   952  0314                     	;# 
   953  0314                     	;# 
   954  0315                     	;# 
   955  0316                     	;# 
   956  0318                     	;# 
   957  0318                     	;# 
   958  0319                     	;# 
   959  031A                     	;# 
   960  031C                     	;# 
   961  031C                     	;# 
   962  031D                     	;# 
   963  031E                     	;# 
   964  038C                     	;# 
   965  038C                     	;# 
   966  038D                     	;# 
   967  038E                     	;# 
   968  058C                     	;# 
   969  058C                     	;# 
   970  058D                     	;# 
   971  058E                     	;# 
   972  058F                     	;# 
   973  058F                     	;# 
   974  0590                     	;# 
   975  0591                     	;# 
   976  0592                     	;# 
   977  0593                     	;# 
   978  059C                     	;# 
   979  059C                     	;# 
   980  059D                     	;# 
   981  059D                     	;# 
   982  059E                     	;# 
   983  059F                     	;# 
   984  060C                     	;# 
   985  060D                     	;# 
   986  060E                     	;# 
   987  060F                     	;# 
   988  0610                     	;# 
   989  0611                     	;# 
   990  0612                     	;# 
   991  0613                     	;# 
   992  0614                     	;# 
   993  070C                     	;# 
   994  070D                     	;# 
   995  070E                     	;# 
   996  070F                     	;# 
   997  0710                     	;# 
   998  0711                     	;# 
   999  0712                     	;# 
  1000  0713                     	;# 
  1001  0716                     	;# 
  1002  0717                     	;# 
  1003  0718                     	;# 
  1004  0719                     	;# 
  1005  071A                     	;# 
  1006  071B                     	;# 
  1007  071C                     	;# 
  1008  071D                     	;# 
  1009  0796                     	;# 
  1010  0797                     	;# 
  1011  0798                     	;# 
  1012  0799                     	;# 
  1013  079A                     	;# 
  1014  079B                     	;# 
  1015  080C                     	;# 
  1016  080D                     	;# 
  1017  080E                     	;# 
  1018  080F                     	;# 
  1019  0810                     	;# 
  1020  0811                     	;# 
  1021  0812                     	;# 
  1022  0813                     	;# 
  1023  0814                     	;# 
  1024  081A                     	;# 
  1025  081A                     	;# 
  1026  081B                     	;# 
  1027  081C                     	;# 
  1028  081C                     	;# 
  1029  081D                     	;# 
  1030  081E                     	;# 
  1031  081F                     	;# 
  1032  088C                     	;# 
  1033  088D                     	;# 
  1034  088E                     	;# 
  1035  088F                     	;# 
  1036  0890                     	;# 
  1037  0891                     	;# 
  1038  0892                     	;# 
  1039  0893                     	;# 
  1040  0895                     	;# 
  1041  0896                     	;# 
  1042  090C                     	;# 
  1043  090E                     	;# 
  1044  090F                     	;# 
  1045  091F                     	;# 
  1046  098F                     	;# 
  1047  098F                     	;# 
  1048  0990                     	;# 
  1049  0991                     	;# 
  1050  0992                     	;# 
  1051  0993                     	;# 
  1052  0994                     	;# 
  1053  0995                     	;# 
  1054  0996                     	;# 
  1055  0997                     	;# 
  1056  0A19                     	;# 
  1057  0A19                     	;# 
  1058  0A1A                     	;# 
  1059  0A1A                     	;# 
  1060  0A1B                     	;# 
  1061  0A1B                     	;# 
  1062  0A1B                     	;# 
  1063  0A1C                     	;# 
  1064  0A1C                     	;# 
  1065  0A1D                     	;# 
  1066  0A1D                     	;# 
  1067  0A1E                     	;# 
  1068  0A1E                     	;# 
  1069  0A1F                     	;# 
  1070  0A1F                     	;# 
  1071  0A1F                     	;# 
  1072  1E0F                     	;# 
  1073  1E10                     	;# 
  1074  1E11                     	;# 
  1075  1E12                     	;# 
  1076  1E13                     	;# 
  1077  1E14                     	;# 
  1078  1E15                     	;# 
  1079  1E16                     	;# 
  1080  1E17                     	;# 
  1081  1E18                     	;# 
  1082  1E19                     	;# 
  1083  1E1A                     	;# 
  1084  1E1B                     	;# 
  1085  1E1C                     	;# 
  1086  1E1D                     	;# 
  1087  1E1E                     	;# 
  1088  1E1F                     	;# 
  1089  1E20                     	;# 
  1090  1E21                     	;# 
  1091  1E22                     	;# 
  1092  1E23                     	;# 
  1093  1E24                     	;# 
  1094  1E25                     	;# 
  1095  1E26                     	;# 
  1096  1E27                     	;# 
  1097  1E28                     	;# 
  1098  1E29                     	;# 
  1099  1E2A                     	;# 
  1100  1E2B                     	;# 
  1101  1E2C                     	;# 
  1102  1E2D                     	;# 
  1103  1E2E                     	;# 
  1104  1E2F                     	;# 
  1105  1E30                     	;# 
  1106  1E31                     	;# 
  1107  1E32                     	;# 
  1108  1E33                     	;# 
  1109  1E34                     	;# 
  1110  1E35                     	;# 
  1111  1E36                     	;# 
  1112  1E37                     	;# 
  1113  1E8F                     	;# 
  1114  1E90                     	;# 
  1115  1E91                     	;# 
  1116  1E92                     	;# 
  1117  1E93                     	;# 
  1118  1E9C                     	;# 
  1119  1EA1                     	;# 
  1120  1EA2                     	;# 
  1121  1EB1                     	;# 
  1122  1EBB                     	;# 
  1123  1EBC                     	;# 
  1124  1EBD                     	;# 
  1125  1EBE                     	;# 
  1126  1EC3                     	;# 
  1127  1EC5                     	;# 
  1128  1EC6                     	;# 
  1129  1EC7                     	;# 
  1130  1EC8                     	;# 
  1131  1EC9                     	;# 
  1132  1ECA                     	;# 
  1133  1ECB                     	;# 
  1134  1ECC                     	;# 
  1135  1ECD                     	;# 
  1136  1ECE                     	;# 
  1137  1F10                     	;# 
  1138  1F11                     	;# 
  1139  1F12                     	;# 
  1140  1F13                     	;# 
  1141  1F14                     	;# 
  1142  1F15                     	;# 
  1143  1F16                     	;# 
  1144  1F17                     	;# 
  1145  1F18                     	;# 
  1146  1F19                     	;# 
  1147  1F1A                     	;# 
  1148  1F1B                     	;# 
  1149  1F1C                     	;# 
  1150  1F1D                     	;# 
  1151  1F1E                     	;# 
  1152  1F1F                     	;# 
  1153  1F20                     	;# 
  1154  1F21                     	;# 
  1155  1F22                     	;# 
  1156  1F23                     	;# 
  1157  1F24                     	;# 
  1158  1F25                     	;# 
  1159  1F26                     	;# 
  1160  1F27                     	;# 
  1161  1F38                     	;# 
  1162  1F39                     	;# 
  1163  1F3A                     	;# 
  1164  1F3B                     	;# 
  1165  1F3C                     	;# 
  1166  1F3D                     	;# 
  1167  1F3E                     	;# 
  1168  1F3F                     	;# 
  1169  1F43                     	;# 
  1170  1F44                     	;# 
  1171  1F45                     	;# 
  1172  1F46                     	;# 
  1173  1F47                     	;# 
  1174  1F48                     	;# 
  1175  1F49                     	;# 
  1176  1F4A                     	;# 
  1177  1F4E                     	;# 
  1178  1F4F                     	;# 
  1179  1F50                     	;# 
  1180  1F51                     	;# 
  1181  1F52                     	;# 
  1182  1F53                     	;# 
  1183  1F54                     	;# 
  1184  1F55                     	;# 
  1185  1F65                     	;# 
  1186  1F68                     	;# 
  1187  1F69                     	;# 
  1188  1F6A                     	;# 
  1189  1F6B                     	;# 
  1190  1FE4                     	;# 
  1191  1FE5                     	;# 
  1192  1FE6                     	;# 
  1193  1FE7                     	;# 
  1194  1FE8                     	;# 
  1195  1FE8                     	;# 
  1196  1FE9                     	;# 
  1197  1FEA                     	;# 
  1198  1FEB                     	;# 
  1199  1FED                     	;# 
  1200  1FEE                     	;# 
  1201  1FEF                     	;# 
  1202  0000                     	;# 
  1203  0001                     	;# 
  1204  0002                     	;# 
  1205  0003                     	;# 
  1206  0004                     	;# 
  1207  0005                     	;# 
  1208  0006                     	;# 
  1209  0007                     	;# 
  1210  0008                     	;# 
  1211  0009                     	;# 
  1212  000A                     	;# 
  1213  000B                     	;# 
  1214  000C                     	;# 
  1215  000D                     	;# 
  1216  000E                     	;# 
  1217  0010                     	;# 
  1218  0012                     	;# 
  1219  0013                     	;# 
  1220  0014                     	;# 
  1221  0016                     	;# 
  1222  0018                     	;# 
  1223  0019                     	;# 
  1224  001A                     	;# 
  1225  009B                     	;# 
  1226  009B                     	;# 
  1227  009C                     	;# 
  1228  009D                     	;# 
  1229  009E                     	;# 
  1230  009F                     	;# 
  1231  0119                     	;# 
  1232  0119                     	;# 
  1233  0119                     	;# 
  1234  011A                     	;# 
  1235  011A                     	;# 
  1236  011A                     	;# 
  1237  011B                     	;# 
  1238  011B                     	;# 
  1239  011B                     	;# 
  1240  011B                     	;# 
  1241  011B                     	;# 
  1242  011C                     	;# 
  1243  011C                     	;# 
  1244  011C                     	;# 
  1245  011D                     	;# 
  1246  011D                     	;# 
  1247  011D                     	;# 
  1248  011E                     	;# 
  1249  011E                     	;# 
  1250  011E                     	;# 
  1251  011F                     	;# 
  1252  011F                     	;# 
  1253  011F                     	;# 
  1254  011F                     	;# 
  1255  011F                     	;# 
  1256  018C                     	;# 
  1257  018D                     	;# 
  1258  018E                     	;# 
  1259  018F                     	;# 
  1260  0190                     	;# 
  1261  0191                     	;# 
  1262  0192                     	;# 
  1263  0196                     	;# 
  1264  0197                     	;# 
  1265  0198                     	;# 
  1266  0199                     	;# 
  1267  019A                     	;# 
  1268  019B                     	;# 
  1269  019C                     	;# 
  1270  020C                     	;# 
  1271  020C                     	;# 
  1272  020D                     	;# 
  1273  020E                     	;# 
  1274  020F                     	;# 
  1275  020F                     	;# 
  1276  0210                     	;# 
  1277  0210                     	;# 
  1278  0211                     	;# 
  1279  0211                     	;# 
  1280  028C                     	;# 
  1281  028C                     	;# 
  1282  028D                     	;# 
  1283  028D                     	;# 
  1284  028E                     	;# 
  1285  028F                     	;# 
  1286  0290                     	;# 
  1287  0291                     	;# 
  1288  030C                     	;# 
  1289  030C                     	;# 
  1290  030D                     	;# 
  1291  030E                     	;# 
  1292  030F                     	;# 
  1293  0310                     	;# 
  1294  0310                     	;# 
  1295  0311                     	;# 
  1296  0312                     	;# 
  1297  0313                     	;# 
  1298  0314                     	;# 
  1299  0314                     	;# 
  1300  0315                     	;# 
  1301  0316                     	;# 
  1302  0318                     	;# 
  1303  0318                     	;# 
  1304  0319                     	;# 
  1305  031A                     	;# 
  1306  031C                     	;# 
  1307  031C                     	;# 
  1308  031D                     	;# 
  1309  031E                     	;# 
  1310  038C                     	;# 
  1311  038C                     	;# 
  1312  038D                     	;# 
  1313  038E                     	;# 
  1314  058C                     	;# 
  1315  058C                     	;# 
  1316  058D                     	;# 
  1317  058E                     	;# 
  1318  058F                     	;# 
  1319  058F                     	;# 
  1320  0590                     	;# 
  1321  0591                     	;# 
  1322  0592                     	;# 
  1323  0593                     	;# 
  1324  059C                     	;# 
  1325  059C                     	;# 
  1326  059D                     	;# 
  1327  059D                     	;# 
  1328  059E                     	;# 
  1329  059F                     	;# 
  1330  060C                     	;# 
  1331  060D                     	;# 
  1332  060E                     	;# 
  1333  060F                     	;# 
  1334  0610                     	;# 
  1335  0611                     	;# 
  1336  0612                     	;# 
  1337  0613                     	;# 
  1338  0614                     	;# 
  1339  070C                     	;# 
  1340  070D                     	;# 
  1341  070E                     	;# 
  1342  070F                     	;# 
  1343  0710                     	;# 
  1344  0711                     	;# 
  1345  0712                     	;# 
  1346  0713                     	;# 
  1347  0716                     	;# 
  1348  0717                     	;# 
  1349  0718                     	;# 
  1350  0719                     	;# 
  1351  071A                     	;# 
  1352  071B                     	;# 
  1353  071C                     	;# 
  1354  071D                     	;# 
  1355  0796                     	;# 
  1356  0797                     	;# 
  1357  0798                     	;# 
  1358  0799                     	;# 
  1359  079A                     	;# 
  1360  079B                     	;# 
  1361  080C                     	;# 
  1362  080D                     	;# 
  1363  080E                     	;# 
  1364  080F                     	;# 
  1365  0810                     	;# 
  1366  0811                     	;# 
  1367  0812                     	;# 
  1368  0813                     	;# 
  1369  0814                     	;# 
  1370  081A                     	;# 
  1371  081A                     	;# 
  1372  081B                     	;# 
  1373  081C                     	;# 
  1374  081C                     	;# 
  1375  081D                     	;# 
  1376  081E                     	;# 
  1377  081F                     	;# 
  1378  088C                     	;# 
  1379  088D                     	;# 
  1380  088E                     	;# 
  1381  088F                     	;# 
  1382  0890                     	;# 
  1383  0891                     	;# 
  1384  0892                     	;# 
  1385  0893                     	;# 
  1386  0895                     	;# 
  1387  0896                     	;# 
  1388  090C                     	;# 
  1389  090E                     	;# 
  1390  090F                     	;# 
  1391  091F                     	;# 
  1392  098F                     	;# 
  1393  098F                     	;# 
  1394  0990                     	;# 
  1395  0991                     	;# 
  1396  0992                     	;# 
  1397  0993                     	;# 
  1398  0994                     	;# 
  1399  0995                     	;# 
  1400  0996                     	;# 
  1401  0997                     	;# 
  1402  0A19                     	;# 
  1403  0A19                     	;# 
  1404  0A1A                     	;# 
  1405  0A1A                     	;# 
  1406  0A1B                     	;# 
  1407  0A1B                     	;# 
  1408  0A1B                     	;# 
  1409  0A1C                     	;# 
  1410  0A1C                     	;# 
  1411  0A1D                     	;# 
  1412  0A1D                     	;# 
  1413  0A1E                     	;# 
  1414  0A1E                     	;# 
  1415  0A1F                     	;# 
  1416  0A1F                     	;# 
  1417  0A1F                     	;# 
  1418  1E0F                     	;# 
  1419  1E10                     	;# 
  1420  1E11                     	;# 
  1421  1E12                     	;# 
  1422  1E13                     	;# 
  1423  1E14                     	;# 
  1424  1E15                     	;# 
  1425  1E16                     	;# 
  1426  1E17                     	;# 
  1427  1E18                     	;# 
  1428  1E19                     	;# 
  1429  1E1A                     	;# 
  1430  1E1B                     	;# 
  1431  1E1C                     	;# 
  1432  1E1D                     	;# 
  1433  1E1E                     	;# 
  1434  1E1F                     	;# 
  1435  1E20                     	;# 
  1436  1E21                     	;# 
  1437  1E22                     	;# 
  1438  1E23                     	;# 
  1439  1E24                     	;# 
  1440  1E25                     	;# 
  1441  1E26                     	;# 
  1442  1E27                     	;# 
  1443  1E28                     	;# 
  1444  1E29                     	;# 
  1445  1E2A                     	;# 
  1446  1E2B                     	;# 
  1447  1E2C                     	;# 
  1448  1E2D                     	;# 
  1449  1E2E                     	;# 
  1450  1E2F                     	;# 
  1451  1E30                     	;# 
  1452  1E31                     	;# 
  1453  1E32                     	;# 
  1454  1E33                     	;# 
  1455  1E34                     	;# 
  1456  1E35                     	;# 
  1457  1E36                     	;# 
  1458  1E37                     	;# 
  1459  1E8F                     	;# 
  1460  1E90                     	;# 
  1461  1E91                     	;# 
  1462  1E92                     	;# 
  1463  1E93                     	;# 
  1464  1E9C                     	;# 
  1465  1EA1                     	;# 
  1466  1EA2                     	;# 
  1467  1EB1                     	;# 
  1468  1EBB                     	;# 
  1469  1EBC                     	;# 
  1470  1EBD                     	;# 
  1471  1EBE                     	;# 
  1472  1EC3                     	;# 
  1473  1EC5                     	;# 
  1474  1EC6                     	;# 
  1475  1EC7                     	;# 
  1476  1EC8                     	;# 
  1477  1EC9                     	;# 
  1478  1ECA                     	;# 
  1479  1ECB                     	;# 
  1480  1ECC                     	;# 
  1481  1ECD                     	;# 
  1482  1ECE                     	;# 
  1483  1F10                     	;# 
  1484  1F11                     	;# 
  1485  1F12                     	;# 
  1486  1F13                     	;# 
  1487  1F14                     	;# 
  1488  1F15                     	;# 
  1489  1F16                     	;# 
  1490  1F17                     	;# 
  1491  1F18                     	;# 
  1492  1F19                     	;# 
  1493  1F1A                     	;# 
  1494  1F1B                     	;# 
  1495  1F1C                     	;# 
  1496  1F1D                     	;# 
  1497  1F1E                     	;# 
  1498  1F1F                     	;# 
  1499  1F20                     	;# 
  1500  1F21                     	;# 
  1501  1F22                     	;# 
  1502  1F23                     	;# 
  1503  1F24                     	;# 
  1504  1F25                     	;# 
  1505  1F26                     	;# 
  1506  1F27                     	;# 
  1507  1F38                     	;# 
  1508  1F39                     	;# 
  1509  1F3A                     	;# 
  1510  1F3B                     	;# 
  1511  1F3C                     	;# 
  1512  1F3D                     	;# 
  1513  1F3E                     	;# 
  1514  1F3F                     	;# 
  1515  1F43                     	;# 
  1516  1F44                     	;# 
  1517  1F45                     	;# 
  1518  1F46                     	;# 
  1519  1F47                     	;# 
  1520  1F48                     	;# 
  1521  1F49                     	;# 
  1522  1F4A                     	;# 
  1523  1F4E                     	;# 
  1524  1F4F                     	;# 
  1525  1F50                     	;# 
  1526  1F51                     	;# 
  1527  1F52                     	;# 
  1528  1F53                     	;# 
  1529  1F54                     	;# 
  1530  1F55                     	;# 
  1531  1F65                     	;# 
  1532  1F68                     	;# 
  1533  1F69                     	;# 
  1534  1F6A                     	;# 
  1535  1F6B                     	;# 
  1536  1FE4                     	;# 
  1537  1FE5                     	;# 
  1538  1FE6                     	;# 
  1539  1FE7                     	;# 
  1540  1FE8                     	;# 
  1541  1FE8                     	;# 
  1542  1FE9                     	;# 
  1543  1FEA                     	;# 
  1544  1FEB                     	;# 
  1545  1FED                     	;# 
  1546  1FEE                     	;# 
  1547  1FEF                     	;# 
  1548  0000                     	;# 
  1549  0001                     	;# 
  1550  0002                     	;# 
  1551  0003                     	;# 
  1552  0004                     	;# 
  1553  0005                     	;# 
  1554  0006                     	;# 
  1555  0007                     	;# 
  1556  0008                     	;# 
  1557  0009                     	;# 
  1558  000A                     	;# 
  1559  000B                     	;# 
  1560  000C                     	;# 
  1561  000D                     	;# 
  1562  000E                     	;# 
  1563  0010                     	;# 
  1564  0012                     	;# 
  1565  0013                     	;# 
  1566  0014                     	;# 
  1567  0016                     	;# 
  1568  0018                     	;# 
  1569  0019                     	;# 
  1570  001A                     	;# 
  1571  009B                     	;# 
  1572  009B                     	;# 
  1573  009C                     	;# 
  1574  009D                     	;# 
  1575  009E                     	;# 
  1576  009F                     	;# 
  1577  0119                     	;# 
  1578  0119                     	;# 
  1579  0119                     	;# 
  1580  011A                     	;# 
  1581  011A                     	;# 
  1582  011A                     	;# 
  1583  011B                     	;# 
  1584  011B                     	;# 
  1585  011B                     	;# 
  1586  011B                     	;# 
  1587  011B                     	;# 
  1588  011C                     	;# 
  1589  011C                     	;# 
  1590  011C                     	;# 
  1591  011D                     	;# 
  1592  011D                     	;# 
  1593  011D                     	;# 
  1594  011E                     	;# 
  1595  011E                     	;# 
  1596  011E                     	;# 
  1597  011F                     	;# 
  1598  011F                     	;# 
  1599  011F                     	;# 
  1600  011F                     	;# 
  1601  011F                     	;# 
  1602  018C                     	;# 
  1603  018D                     	;# 
  1604  018E                     	;# 
  1605  018F                     	;# 
  1606  0190                     	;# 
  1607  0191                     	;# 
  1608  0192                     	;# 
  1609  0196                     	;# 
  1610  0197                     	;# 
  1611  0198                     	;# 
  1612  0199                     	;# 
  1613  019A                     	;# 
  1614  019B                     	;# 
  1615  019C                     	;# 
  1616  020C                     	;# 
  1617  020C                     	;# 
  1618  020D                     	;# 
  1619  020E                     	;# 
  1620  020F                     	;# 
  1621  020F                     	;# 
  1622  0210                     	;# 
  1623  0210                     	;# 
  1624  0211                     	;# 
  1625  0211                     	;# 
  1626  028C                     	;# 
  1627  028C                     	;# 
  1628  028D                     	;# 
  1629  028D                     	;# 
  1630  028E                     	;# 
  1631  028F                     	;# 
  1632  0290                     	;# 
  1633  0291                     	;# 
  1634  030C                     	;# 
  1635  030C                     	;# 
  1636  030D                     	;# 
  1637  030E                     	;# 
  1638  030F                     	;# 
  1639  0310                     	;# 
  1640  0310                     	;# 
  1641  0311                     	;# 
  1642  0312                     	;# 
  1643  0313                     	;# 
  1644  0314                     	;# 
  1645  0314                     	;# 
  1646  0315                     	;# 
  1647  0316                     	;# 
  1648  0318                     	;# 
  1649  0318                     	;# 
  1650  0319                     	;# 
  1651  031A                     	;# 
  1652  031C                     	;# 
  1653  031C                     	;# 
  1654  031D                     	;# 
  1655  031E                     	;# 
  1656  038C                     	;# 
  1657  038C                     	;# 
  1658  038D                     	;# 
  1659  038E                     	;# 
  1660  058C                     	;# 
  1661  058C                     	;# 
  1662  058D                     	;# 
  1663  058E                     	;# 
  1664  058F                     	;# 
  1665  058F                     	;# 
  1666  0590                     	;# 
  1667  0591                     	;# 
  1668  0592                     	;# 
  1669  0593                     	;# 
  1670  059C                     	;# 
  1671  059C                     	;# 
  1672  059D                     	;# 
  1673  059D                     	;# 
  1674  059E                     	;# 
  1675  059F                     	;# 
  1676  060C                     	;# 
  1677  060D                     	;# 
  1678  060E                     	;# 
  1679  060F                     	;# 
  1680  0610                     	;# 
  1681  0611                     	;# 
  1682  0612                     	;# 
  1683  0613                     	;# 
  1684  0614                     	;# 
  1685  070C                     	;# 
  1686  070D                     	;# 
  1687  070E                     	;# 
  1688  070F                     	;# 
  1689  0710                     	;# 
  1690  0711                     	;# 
  1691  0712                     	;# 
  1692  0713                     	;# 
  1693  0716                     	;# 
  1694  0717                     	;# 
  1695  0718                     	;# 
  1696  0719                     	;# 
  1697  071A                     	;# 
  1698  071B                     	;# 
  1699  071C                     	;# 
  1700  071D                     	;# 
  1701  0796                     	;# 
  1702  0797                     	;# 
  1703  0798                     	;# 
  1704  0799                     	;# 
  1705  079A                     	;# 
  1706  079B                     	;# 
  1707  080C                     	;# 
  1708  080D                     	;# 
  1709  080E                     	;# 
  1710  080F                     	;# 
  1711  0810                     	;# 
  1712  0811                     	;# 
  1713  0812                     	;# 
  1714  0813                     	;# 
  1715  0814                     	;# 
  1716  081A                     	;# 
  1717  081A                     	;# 
  1718  081B                     	;# 
  1719  081C                     	;# 
  1720  081C                     	;# 
  1721  081D                     	;# 
  1722  081E                     	;# 
  1723  081F                     	;# 
  1724  088C                     	;# 
  1725  088D                     	;# 
  1726  088E                     	;# 
  1727  088F                     	;# 
  1728  0890                     	;# 
  1729  0891                     	;# 
  1730  0892                     	;# 
  1731  0893                     	;# 
  1732  0895                     	;# 
  1733  0896                     	;# 
  1734  090C                     	;# 
  1735  090E                     	;# 
  1736  090F                     	;# 
  1737  091F                     	;# 
  1738  098F                     	;# 
  1739  098F                     	;# 
  1740  0990                     	;# 
  1741  0991                     	;# 
  1742  0992                     	;# 
  1743  0993                     	;# 
  1744  0994                     	;# 
  1745  0995                     	;# 
  1746  0996                     	;# 
  1747  0997                     	;# 
  1748  0A19                     	;# 
  1749  0A19                     	;# 
  1750  0A1A                     	;# 
  1751  0A1A                     	;# 
  1752  0A1B                     	;# 
  1753  0A1B                     	;# 
  1754  0A1B                     	;# 
  1755  0A1C                     	;# 
  1756  0A1C                     	;# 
  1757  0A1D                     	;# 
  1758  0A1D                     	;# 
  1759  0A1E                     	;# 
  1760  0A1E                     	;# 
  1761  0A1F                     	;# 
  1762  0A1F                     	;# 
  1763  0A1F                     	;# 
  1764  1E0F                     	;# 
  1765  1E10                     	;# 
  1766  1E11                     	;# 
  1767  1E12                     	;# 
  1768  1E13                     	;# 
  1769  1E14                     	;# 
  1770  1E15                     	;# 
  1771  1E16                     	;# 
  1772  1E17                     	;# 
  1773  1E18                     	;# 
  1774  1E19                     	;# 
  1775  1E1A                     	;# 
  1776  1E1B                     	;# 
  1777  1E1C                     	;# 
  1778  1E1D                     	;# 
  1779  1E1E                     	;# 
  1780  1E1F                     	;# 
  1781  1E20                     	;# 
  1782  1E21                     	;# 
  1783  1E22                     	;# 
  1784  1E23                     	;# 
  1785  1E24                     	;# 
  1786  1E25                     	;# 
  1787  1E26                     	;# 
  1788  1E27                     	;# 
  1789  1E28                     	;# 
  1790  1E29                     	;# 
  1791  1E2A                     	;# 
  1792  1E2B                     	;# 
  1793  1E2C                     	;# 
  1794  1E2D                     	;# 
  1795  1E2E                     	;# 
  1796  1E2F                     	;# 
  1797  1E30                     	;# 
  1798  1E31                     	;# 
  1799  1E32                     	;# 
  1800  1E33                     	;# 
  1801  1E34                     	;# 
  1802  1E35                     	;# 
  1803  1E36                     	;# 
  1804  1E37                     	;# 
  1805  1E8F                     	;# 
  1806  1E90                     	;# 
  1807  1E91                     	;# 
  1808  1E92                     	;# 
  1809  1E93                     	;# 
  1810  1E9C                     	;# 
  1811  1EA1                     	;# 
  1812  1EA2                     	;# 
  1813  1EB1                     	;# 
  1814  1EBB                     	;# 
  1815  1EBC                     	;# 
  1816  1EBD                     	;# 
  1817  1EBE                     	;# 
  1818  1EC3                     	;# 
  1819  1EC5                     	;# 
  1820  1EC6                     	;# 
  1821  1EC7                     	;# 
  1822  1EC8                     	;# 
  1823  1EC9                     	;# 
  1824  1ECA                     	;# 
  1825  1ECB                     	;# 
  1826  1ECC                     	;# 
  1827  1ECD                     	;# 
  1828  1ECE                     	;# 
  1829  1F10                     	;# 
  1830  1F11                     	;# 
  1831  1F12                     	;# 
  1832  1F13                     	;# 
  1833  1F14                     	;# 
  1834  1F15                     	;# 
  1835  1F16                     	;# 
  1836  1F17                     	;# 
  1837  1F18                     	;# 
  1838  1F19                     	;# 
  1839  1F1A                     	;# 
  1840  1F1B                     	;# 
  1841  1F1C                     	;# 
  1842  1F1D                     	;# 
  1843  1F1E                     	;# 
  1844  1F1F                     	;# 
  1845  1F20                     	;# 
  1846  1F21                     	;# 
  1847  1F22                     	;# 
  1848  1F23                     	;# 
  1849  1F24                     	;# 
  1850  1F25                     	;# 
  1851  1F26                     	;# 
  1852  1F27                     	;# 
  1853  1F38                     	;# 
  1854  1F39                     	;# 
  1855  1F3A                     	;# 
  1856  1F3B                     	;# 
  1857  1F3C                     	;# 
  1858  1F3D                     	;# 
  1859  1F3E                     	;# 
  1860  1F3F                     	;# 
  1861  1F43                     	;# 
  1862  1F44                     	;# 
  1863  1F45                     	;# 
  1864  1F46                     	;# 
  1865  1F47                     	;# 
  1866  1F48                     	;# 
  1867  1F49                     	;# 
  1868  1F4A                     	;# 
  1869  1F4E                     	;# 
  1870  1F4F                     	;# 
  1871  1F50                     	;# 
  1872  1F51                     	;# 
  1873  1F52                     	;# 
  1874  1F53                     	;# 
  1875  1F54                     	;# 
  1876  1F55                     	;# 
  1877  1F65                     	;# 
  1878  1F68                     	;# 
  1879  1F69                     	;# 
  1880  1F6A                     	;# 
  1881  1F6B                     	;# 
  1882  1FE4                     	;# 
  1883  1FE5                     	;# 
  1884  1FE6                     	;# 
  1885  1FE7                     	;# 
  1886  1FE8                     	;# 
  1887  1FE8                     	;# 
  1888  1FE9                     	;# 
  1889  1FEA                     	;# 
  1890  1FEB                     	;# 
  1891  1FED                     	;# 
  1892  1FEE                     	;# 
  1893  1FEF                     	;# 
  1894  0000                     	;# 
  1895  0001                     	;# 
  1896  0002                     	;# 
  1897  0003                     	;# 
  1898  0004                     	;# 
  1899  0005                     	;# 
  1900  0006                     	;# 
  1901  0007                     	;# 
  1902  0008                     	;# 
  1903  0009                     	;# 
  1904  000A                     	;# 
  1905  000B                     	;# 
  1906  000C                     	;# 
  1907  000D                     	;# 
  1908  000E                     	;# 
  1909  0010                     	;# 
  1910  0012                     	;# 
  1911  0013                     	;# 
  1912  0014                     	;# 
  1913  0016                     	;# 
  1914  0018                     	;# 
  1915  0019                     	;# 
  1916  001A                     	;# 
  1917  009B                     	;# 
  1918  009B                     	;# 
  1919  009C                     	;# 
  1920  009D                     	;# 
  1921  009E                     	;# 
  1922  009F                     	;# 
  1923  0119                     	;# 
  1924  0119                     	;# 
  1925  0119                     	;# 
  1926  011A                     	;# 
  1927  011A                     	;# 
  1928  011A                     	;# 
  1929  011B                     	;# 
  1930  011B                     	;# 
  1931  011B                     	;# 
  1932  011B                     	;# 
  1933  011B                     	;# 
  1934  011C                     	;# 
  1935  011C                     	;# 
  1936  011C                     	;# 
  1937  011D                     	;# 
  1938  011D                     	;# 
  1939  011D                     	;# 
  1940  011E                     	;# 
  1941  011E                     	;# 
  1942  011E                     	;# 
  1943  011F                     	;# 
  1944  011F                     	;# 
  1945  011F                     	;# 
  1946  011F                     	;# 
  1947  011F                     	;# 
  1948  018C                     	;# 
  1949  018D                     	;# 
  1950  018E                     	;# 
  1951  018F                     	;# 
  1952  0190                     	;# 
  1953  0191                     	;# 
  1954  0192                     	;# 
  1955  0196                     	;# 
  1956  0197                     	;# 
  1957  0198                     	;# 
  1958  0199                     	;# 
  1959  019A                     	;# 
  1960  019B                     	;# 
  1961  019C                     	;# 
  1962  020C                     	;# 
  1963  020C                     	;# 
  1964  020D                     	;# 
  1965  020E                     	;# 
  1966  020F                     	;# 
  1967  020F                     	;# 
  1968  0210                     	;# 
  1969  0210                     	;# 
  1970  0211                     	;# 
  1971  0211                     	;# 
  1972  028C                     	;# 
  1973  028C                     	;# 
  1974  028D                     	;# 
  1975  028D                     	;# 
  1976  028E                     	;# 
  1977  028F                     	;# 
  1978  0290                     	;# 
  1979  0291                     	;# 
  1980  030C                     	;# 
  1981  030C                     	;# 
  1982  030D                     	;# 
  1983  030E                     	;# 
  1984  030F                     	;# 
  1985  0310                     	;# 
  1986  0310                     	;# 
  1987  0311                     	;# 
  1988  0312                     	;# 
  1989  0313                     	;# 
  1990  0314                     	;# 
  1991  0314                     	;# 
  1992  0315                     	;# 
  1993  0316                     	;# 
  1994  0318                     	;# 
  1995  0318                     	;# 
  1996  0319                     	;# 
  1997  031A                     	;# 
  1998  031C                     	;# 
  1999  031C                     	;# 
  2000  031D                     	;# 
  2001  031E                     	;# 
  2002  038C                     	;# 
  2003  038C                     	;# 
  2004  038D                     	;# 
  2005  038E                     	;# 
  2006  058C                     	;# 
  2007  058C                     	;# 
  2008  058D                     	;# 
  2009  058E                     	;# 
  2010  058F                     	;# 
  2011  058F                     	;# 
  2012  0590                     	;# 
  2013  0591                     	;# 
  2014  0592                     	;# 
  2015  0593                     	;# 
  2016  059C                     	;# 
  2017  059C                     	;# 
  2018  059D                     	;# 
  2019  059D                     	;# 
  2020  059E                     	;# 
  2021  059F                     	;# 
  2022  060C                     	;# 
  2023  060D                     	;# 
  2024  060E                     	;# 
  2025  060F                     	;# 
  2026  0610                     	;# 
  2027  0611                     	;# 
  2028  0612                     	;# 
  2029  0613                     	;# 
  2030  0614                     	;# 
  2031  070C                     	;# 
  2032  070D                     	;# 
  2033  070E                     	;# 
  2034  070F                     	;# 
  2035  0710                     	;# 
  2036  0711                     	;# 
  2037  0712                     	;# 
  2038  0713                     	;# 
  2039  0716                     	;# 
  2040  0717                     	;# 
  2041  0718                     	;# 
  2042  0719                     	;# 
  2043  071A                     	;# 
  2044  071B                     	;# 
  2045  071C                     	;# 
  2046  071D                     	;# 
  2047  0796                     	;# 
  2048  0797                     	;# 
  2049  0798                     	;# 
  2050  0799                     	;# 
  2051  079A                     	;# 
  2052  079B                     	;# 
  2053  080C                     	;# 
  2054  080D                     	;# 
  2055  080E                     	;# 
  2056  080F                     	;# 
  2057  0810                     	;# 
  2058  0811                     	;# 
  2059  0812                     	;# 
  2060  0813                     	;# 
  2061  0814                     	;# 
  2062  081A                     	;# 
  2063  081A                     	;# 
  2064  081B                     	;# 
  2065  081C                     	;# 
  2066  081C                     	;# 
  2067  081D                     	;# 
  2068  081E                     	;# 
  2069  081F                     	;# 
  2070  088C                     	;# 
  2071  088D                     	;# 
  2072  088E                     	;# 
  2073  088F                     	;# 
  2074  0890                     	;# 
  2075  0891                     	;# 
  2076  0892                     	;# 
  2077  0893                     	;# 
  2078  0895                     	;# 
  2079  0896                     	;# 
  2080  090C                     	;# 
  2081  090E                     	;# 
  2082  090F                     	;# 
  2083  091F                     	;# 
  2084  098F                     	;# 
  2085  098F                     	;# 
  2086  0990                     	;# 
  2087  0991                     	;# 
  2088  0992                     	;# 
  2089  0993                     	;# 
  2090  0994                     	;# 
  2091  0995                     	;# 
  2092  0996                     	;# 
  2093  0997                     	;# 
  2094  0A19                     	;# 
  2095  0A19                     	;# 
  2096  0A1A                     	;# 
  2097  0A1A                     	;# 
  2098  0A1B                     	;# 
  2099  0A1B                     	;# 
  2100  0A1B                     	;# 
  2101  0A1C                     	;# 
  2102  0A1C                     	;# 
  2103  0A1D                     	;# 
  2104  0A1D                     	;# 
  2105  0A1E                     	;# 
  2106  0A1E                     	;# 
  2107  0A1F                     	;# 
  2108  0A1F                     	;# 
  2109  0A1F                     	;# 
  2110  1E0F                     	;# 
  2111  1E10                     	;# 
  2112  1E11                     	;# 
  2113  1E12                     	;# 
  2114  1E13                     	;# 
  2115  1E14                     	;# 
  2116  1E15                     	;# 
  2117  1E16                     	;# 
  2118  1E17                     	;# 
  2119  1E18                     	;# 
  2120  1E19                     	;# 
  2121  1E1A                     	;# 
  2122  1E1B                     	;# 
  2123  1E1C                     	;# 
  2124  1E1D                     	;# 
  2125  1E1E                     	;# 
  2126  1E1F                     	;# 
  2127  1E20                     	;# 
  2128  1E21                     	;# 
  2129  1E22                     	;# 
  2130  1E23                     	;# 
  2131  1E24                     	;# 
  2132  1E25                     	;# 
  2133  1E26                     	;# 
  2134  1E27                     	;# 
  2135  1E28                     	;# 
  2136  1E29                     	;# 
  2137  1E2A                     	;# 
  2138  1E2B                     	;# 
  2139  1E2C                     	;# 
  2140  1E2D                     	;# 
  2141  1E2E                     	;# 
  2142  1E2F                     	;# 
  2143  1E30                     	;# 
  2144  1E31                     	;# 
  2145  1E32                     	;# 
  2146  1E33                     	;# 
  2147  1E34                     	;# 
  2148  1E35                     	;# 
  2149  1E36                     	;# 
  2150  1E37                     	;# 
  2151  1E8F                     	;# 
  2152  1E90                     	;# 
  2153  1E91                     	;# 
  2154  1E92                     	;# 
  2155  1E93                     	;# 
  2156  1E9C                     	;# 
  2157  1EA1                     	;# 
  2158  1EA2                     	;# 
  2159  1EB1                     	;# 
  2160  1EBB                     	;# 
  2161  1EBC                     	;# 
  2162  1EBD                     	;# 
  2163  1EBE                     	;# 
  2164  1EC3                     	;# 
  2165  1EC5                     	;# 
  2166  1EC6                     	;# 
  2167  1EC7                     	;# 
  2168  1EC8                     	;# 
  2169  1EC9                     	;# 
  2170  1ECA                     	;# 
  2171  1ECB                     	;# 
  2172  1ECC                     	;# 
  2173  1ECD                     	;# 
  2174  1ECE                     	;# 
  2175  1F10                     	;# 
  2176  1F11                     	;# 
  2177  1F12                     	;# 
  2178  1F13                     	;# 
  2179  1F14                     	;# 
  2180  1F15                     	;# 
  2181  1F16                     	;# 
  2182  1F17                     	;# 
  2183  1F18                     	;# 
  2184  1F19                     	;# 
  2185  1F1A                     	;# 
  2186  1F1B                     	;# 
  2187  1F1C                     	;# 
  2188  1F1D                     	;# 
  2189  1F1E                     	;# 
  2190  1F1F                     	;# 
  2191  1F20                     	;# 
  2192  1F21                     	;# 
  2193  1F22                     	;# 
  2194  1F23                     	;# 
  2195  1F24                     	;# 
  2196  1F25                     	;# 
  2197  1F26                     	;# 
  2198  1F27                     	;# 
  2199  1F38                     	;# 
  2200  1F39                     	;# 
  2201  1F3A                     	;# 
  2202  1F3B                     	;# 
  2203  1F3C                     	;# 
  2204  1F3D                     	;# 
  2205  1F3E                     	;# 
  2206  1F3F                     	;# 
  2207  1F43                     	;# 
  2208  1F44                     	;# 
  2209  1F45                     	;# 
  2210  1F46                     	;# 
  2211  1F47                     	;# 
  2212  1F48                     	;# 
  2213  1F49                     	;# 
  2214  1F4A                     	;# 
  2215  1F4E                     	;# 
  2216  1F4F                     	;# 
  2217  1F50                     	;# 
  2218  1F51                     	;# 
  2219  1F52                     	;# 
  2220  1F53                     	;# 
  2221  1F54                     	;# 
  2222  1F55                     	;# 
  2223  1F65                     	;# 
  2224  1F68                     	;# 
  2225  1F69                     	;# 
  2226  1F6A                     	;# 
  2227  1F6B                     	;# 
  2228  1FE4                     	;# 
  2229  1FE5                     	;# 
  2230  1FE6                     	;# 
  2231  1FE7                     	;# 
  2232  1FE8                     	;# 
  2233  1FE8                     	;# 
  2234  1FE9                     	;# 
  2235  1FEA                     	;# 
  2236  1FEB                     	;# 
  2237  1FED                     	;# 
  2238  1FEE                     	;# 
  2239  1FEF                     	;# 
  2240  0000                     	;# 
  2241  0001                     	;# 
  2242  0002                     	;# 
  2243  0003                     	;# 
  2244  0004                     	;# 
  2245  0005                     	;# 
  2246  0006                     	;# 
  2247  0007                     	;# 
  2248  0008                     	;# 
  2249  0009                     	;# 
  2250  000A                     	;# 
  2251  000B                     	;# 
  2252  000C                     	;# 
  2253  000D                     	;# 
  2254  000E                     	;# 
  2255  0010                     	;# 
  2256  0012                     	;# 
  2257  0013                     	;# 
  2258  0014                     	;# 
  2259  0016                     	;# 
  2260  0018                     	;# 
  2261  0019                     	;# 
  2262  001A                     	;# 
  2263  009B                     	;# 
  2264  009B                     	;# 
  2265  009C                     	;# 
  2266  009D                     	;# 
  2267  009E                     	;# 
  2268  009F                     	;# 
  2269  0119                     	;# 
  2270  0119                     	;# 
  2271  0119                     	;# 
  2272  011A                     	;# 
  2273  011A                     	;# 
  2274  011A                     	;# 
  2275  011B                     	;# 
  2276  011B                     	;# 
  2277  011B                     	;# 
  2278  011B                     	;# 
  2279  011B                     	;# 
  2280  011C                     	;# 
  2281  011C                     	;# 
  2282  011C                     	;# 
  2283  011D                     	;# 
  2284  011D                     	;# 
  2285  011D                     	;# 
  2286  011E                     	;# 
  2287  011E                     	;# 
  2288  011E                     	;# 
  2289  011F                     	;# 
  2290  011F                     	;# 
  2291  011F                     	;# 
  2292  011F                     	;# 
  2293  011F                     	;# 
  2294  018C                     	;# 
  2295  018D                     	;# 
  2296  018E                     	;# 
  2297  018F                     	;# 
  2298  0190                     	;# 
  2299  0191                     	;# 
  2300  0192                     	;# 
  2301  0196                     	;# 
  2302  0197                     	;# 
  2303  0198                     	;# 
  2304  0199                     	;# 
  2305  019A                     	;# 
  2306  019B                     	;# 
  2307  019C                     	;# 
  2308  020C                     	;# 
  2309  020C                     	;# 
  2310  020D                     	;# 
  2311  020E                     	;# 
  2312  020F                     	;# 
  2313  020F                     	;# 
  2314  0210                     	;# 
  2315  0210                     	;# 
  2316  0211                     	;# 
  2317  0211                     	;# 
  2318  028C                     	;# 
  2319  028C                     	;# 
  2320  028D                     	;# 
  2321  028D                     	;# 
  2322  028E                     	;# 
  2323  028F                     	;# 
  2324  0290                     	;# 
  2325  0291                     	;# 
  2326  030C                     	;# 
  2327  030C                     	;# 
  2328  030D                     	;# 
  2329  030E                     	;# 
  2330  030F                     	;# 
  2331  0310                     	;# 
  2332  0310                     	;# 
  2333  0311                     	;# 
  2334  0312                     	;# 
  2335  0313                     	;# 
  2336  0314                     	;# 
  2337  0314                     	;# 
  2338  0315                     	;# 
  2339  0316                     	;# 
  2340  0318                     	;# 
  2341  0318                     	;# 
  2342  0319                     	;# 
  2343  031A                     	;# 
  2344  031C                     	;# 
  2345  031C                     	;# 
  2346  031D                     	;# 
  2347  031E                     	;# 
  2348  038C                     	;# 
  2349  038C                     	;# 
  2350  038D                     	;# 
  2351  038E                     	;# 
  2352  058C                     	;# 
  2353  058C                     	;# 
  2354  058D                     	;# 
  2355  058E                     	;# 
  2356  058F                     	;# 
  2357  058F                     	;# 
  2358  0590                     	;# 
  2359  0591                     	;# 
  2360  0592                     	;# 
  2361  0593                     	;# 
  2362  059C                     	;# 
  2363  059C                     	;# 
  2364  059D                     	;# 
  2365  059D                     	;# 
  2366  059E                     	;# 
  2367  059F                     	;# 
  2368  060C                     	;# 
  2369  060D                     	;# 
  2370  060E                     	;# 
  2371  060F                     	;# 
  2372  0610                     	;# 
  2373  0611                     	;# 
  2374  0612                     	;# 
  2375  0613                     	;# 
  2376  0614                     	;# 
  2377  070C                     	;# 
  2378  070D                     	;# 
  2379  070E                     	;# 
  2380  070F                     	;# 
  2381  0710                     	;# 
  2382  0711                     	;# 
  2383  0712                     	;# 
  2384  0713                     	;# 
  2385  0716                     	;# 
  2386  0717                     	;# 
  2387  0718                     	;# 
  2388  0719                     	;# 
  2389  071A                     	;# 
  2390  071B                     	;# 
  2391  071C                     	;# 
  2392  071D                     	;# 
  2393  0796                     	;# 
  2394  0797                     	;# 
  2395  0798                     	;# 
  2396  0799                     	;# 
  2397  079A                     	;# 
  2398  079B                     	;# 
  2399  080C                     	;# 
  2400  080D                     	;# 
  2401  080E                     	;# 
  2402  080F                     	;# 
  2403  0810                     	;# 
  2404  0811                     	;# 
  2405  0812                     	;# 
  2406  0813                     	;# 
  2407  0814                     	;# 
  2408  081A                     	;# 
  2409  081A                     	;# 
  2410  081B                     	;# 
  2411  081C                     	;# 
  2412  081C                     	;# 
  2413  081D                     	;# 
  2414  081E                     	;# 
  2415  081F                     	;# 
  2416  088C                     	;# 
  2417  088D                     	;# 
  2418  088E                     	;# 
  2419  088F                     	;# 
  2420  0890                     	;# 
  2421  0891                     	;# 
  2422  0892                     	;# 
  2423  0893                     	;# 
  2424  0895                     	;# 
  2425  0896                     	;# 
  2426  090C                     	;# 
  2427  090E                     	;# 
  2428  090F                     	;# 
  2429  091F                     	;# 
  2430  098F                     	;# 
  2431  098F                     	;# 
  2432  0990                     	;# 
  2433  0991                     	;# 
  2434  0992                     	;# 
  2435  0993                     	;# 
  2436  0994                     	;# 
  2437  0995                     	;# 
  2438  0996                     	;# 
  2439  0997                     	;# 
  2440  0A19                     	;# 
  2441  0A19                     	;# 
  2442  0A1A                     	;# 
  2443  0A1A                     	;# 
  2444  0A1B                     	;# 
  2445  0A1B                     	;# 
  2446  0A1B                     	;# 
  2447  0A1C                     	;# 
  2448  0A1C                     	;# 
  2449  0A1D                     	;# 
  2450  0A1D                     	;# 
  2451  0A1E                     	;# 
  2452  0A1E                     	;# 
  2453  0A1F                     	;# 
  2454  0A1F                     	;# 
  2455  0A1F                     	;# 
  2456  1E0F                     	;# 
  2457  1E10                     	;# 
  2458  1E11                     	;# 
  2459  1E12                     	;# 
  2460  1E13                     	;# 
  2461  1E14                     	;# 
  2462  1E15                     	;# 
  2463  1E16                     	;# 
  2464  1E17                     	;# 
  2465  1E18                     	;# 
  2466  1E19                     	;# 
  2467  1E1A                     	;# 
  2468  1E1B                     	;# 
  2469  1E1C                     	;# 
  2470  1E1D                     	;# 
  2471  1E1E                     	;# 
  2472  1E1F                     	;# 
  2473  1E20                     	;# 
  2474  1E21                     	;# 
  2475  1E22                     	;# 
  2476  1E23                     	;# 
  2477  1E24                     	;# 
  2478  1E25                     	;# 
  2479  1E26                     	;# 
  2480  1E27                     	;# 
  2481  1E28                     	;# 
  2482  1E29                     	;# 
  2483  1E2A                     	;# 
  2484  1E2B                     	;# 
  2485  1E2C                     	;# 
  2486  1E2D                     	;# 
  2487  1E2E                     	;# 
  2488  1E2F                     	;# 
  2489  1E30                     	;# 
  2490  1E31                     	;# 
  2491  1E32                     	;# 
  2492  1E33                     	;# 
  2493  1E34                     	;# 
  2494  1E35                     	;# 
  2495  1E36                     	;# 
  2496  1E37                     	;# 
  2497  1E8F                     	;# 
  2498  1E90                     	;# 
  2499  1E91                     	;# 
  2500  1E92                     	;# 
  2501  1E93                     	;# 
  2502  1E9C                     	;# 
  2503  1EA1                     	;# 
  2504  1EA2                     	;# 
  2505  1EB1                     	;# 
  2506  1EBB                     	;# 
  2507  1EBC                     	;# 
  2508  1EBD                     	;# 
  2509  1EBE                     	;# 
  2510  1EC3                     	;# 
  2511  1EC5                     	;# 
  2512  1EC6                     	;# 
  2513  1EC7                     	;# 
  2514  1EC8                     	;# 
  2515  1EC9                     	;# 
  2516  1ECA                     	;# 
  2517  1ECB                     	;# 
  2518  1ECC                     	;# 
  2519  1ECD                     	;# 
  2520  1ECE                     	;# 
  2521  1F10                     	;# 
  2522  1F11                     	;# 
  2523  1F12                     	;# 
  2524  1F13                     	;# 
  2525  1F14                     	;# 
  2526  1F15                     	;# 
  2527  1F16                     	;# 
  2528  1F17                     	;# 
  2529  1F18                     	;# 
  2530  1F19                     	;# 
  2531  1F1A                     	;# 
  2532  1F1B                     	;# 
  2533  1F1C                     	;# 
  2534  1F1D                     	;# 
  2535  1F1E                     	;# 
  2536  1F1F                     	;# 
  2537  1F20                     	;# 
  2538  1F21                     	;# 
  2539  1F22                     	;# 
  2540  1F23                     	;# 
  2541  1F24                     	;# 
  2542  1F25                     	;# 
  2543  1F26                     	;# 
  2544  1F27                     	;# 
  2545  1F38                     	;# 
  2546  1F39                     	;# 
  2547  1F3A                     	;# 
  2548  1F3B                     	;# 
  2549  1F3C                     	;# 
  2550  1F3D                     	;# 
  2551  1F3E                     	;# 
  2552  1F3F                     	;# 
  2553  1F43                     	;# 
  2554  1F44                     	;# 
  2555  1F45                     	;# 
  2556  1F46                     	;# 
  2557  1F47                     	;# 
  2558  1F48                     	;# 
  2559  1F49                     	;# 
  2560  1F4A                     	;# 
  2561  1F4E                     	;# 
  2562  1F4F                     	;# 
  2563  1F50                     	;# 
  2564  1F51                     	;# 
  2565  1F52                     	;# 
  2566  1F53                     	;# 
  2567  1F54                     	;# 
  2568  1F55                     	;# 
  2569  1F65                     	;# 
  2570  1F68                     	;# 
  2571  1F69                     	;# 
  2572  1F6A                     	;# 
  2573  1F6B                     	;# 
  2574  1FE4                     	;# 
  2575  1FE5                     	;# 
  2576  1FE6                     	;# 
  2577  1FE7                     	;# 
  2578  1FE8                     	;# 
  2579  1FE8                     	;# 
  2580  1FE9                     	;# 
  2581  1FEA                     	;# 
  2582  1FEB                     	;# 
  2583  1FED                     	;# 
  2584  1FEE                     	;# 
  2585  1FEF                     	;# 
  2586  0000                     	;# 
  2587  0001                     	;# 
  2588  0002                     	;# 
  2589  0003                     	;# 
  2590  0004                     	;# 
  2591  0005                     	;# 
  2592  0006                     	;# 
  2593  0007                     	;# 
  2594  0008                     	;# 
  2595  0009                     	;# 
  2596  000A                     	;# 
  2597  000B                     	;# 
  2598  000C                     	;# 
  2599  000D                     	;# 
  2600  000E                     	;# 
  2601  0010                     	;# 
  2602  0012                     	;# 
  2603  0013                     	;# 
  2604  0014                     	;# 
  2605  0016                     	;# 
  2606  0018                     	;# 
  2607  0019                     	;# 
  2608  001A                     	;# 
  2609  009B                     	;# 
  2610  009B                     	;# 
  2611  009C                     	;# 
  2612  009D                     	;# 
  2613  009E                     	;# 
  2614  009F                     	;# 
  2615  0119                     	;# 
  2616  0119                     	;# 
  2617  0119                     	;# 
  2618  011A                     	;# 
  2619  011A                     	;# 
  2620  011A                     	;# 
  2621  011B                     	;# 
  2622  011B                     	;# 
  2623  011B                     	;# 
  2624  011B                     	;# 
  2625  011B                     	;# 
  2626  011C                     	;# 
  2627  011C                     	;# 
  2628  011C                     	;# 
  2629  011D                     	;# 
  2630  011D                     	;# 
  2631  011D                     	;# 
  2632  011E                     	;# 
  2633  011E                     	;# 
  2634  011E                     	;# 
  2635  011F                     	;# 
  2636  011F                     	;# 
  2637  011F                     	;# 
  2638  011F                     	;# 
  2639  011F                     	;# 
  2640  018C                     	;# 
  2641  018D                     	;# 
  2642  018E                     	;# 
  2643  018F                     	;# 
  2644  0190                     	;# 
  2645  0191                     	;# 
  2646  0192                     	;# 
  2647  0196                     	;# 
  2648  0197                     	;# 
  2649  0198                     	;# 
  2650  0199                     	;# 
  2651  019A                     	;# 
  2652  019B                     	;# 
  2653  019C                     	;# 
  2654  020C                     	;# 
  2655  020C                     	;# 
  2656  020D                     	;# 
  2657  020E                     	;# 
  2658  020F                     	;# 
  2659  020F                     	;# 
  2660  0210                     	;# 
  2661  0210                     	;# 
  2662  0211                     	;# 
  2663  0211                     	;# 
  2664  028C                     	;# 
  2665  028C                     	;# 
  2666  028D                     	;# 
  2667  028D                     	;# 
  2668  028E                     	;# 
  2669  028F                     	;# 
  2670  0290                     	;# 
  2671  0291                     	;# 
  2672  030C                     	;# 
  2673  030C                     	;# 
  2674  030D                     	;# 
  2675  030E                     	;# 
  2676  030F                     	;# 
  2677  0310                     	;# 
  2678  0310                     	;# 
  2679  0311                     	;# 
  2680  0312                     	;# 
  2681  0313                     	;# 
  2682  0314                     	;# 
  2683  0314                     	;# 
  2684  0315                     	;# 
  2685  0316                     	;# 
  2686  0318                     	;# 
  2687  0318                     	;# 
  2688  0319                     	;# 
  2689  031A                     	;# 
  2690  031C                     	;# 
  2691  031C                     	;# 
  2692  031D                     	;# 
  2693  031E                     	;# 
  2694  038C                     	;# 
  2695  038C                     	;# 
  2696  038D                     	;# 
  2697  038E                     	;# 
  2698  058C                     	;# 
  2699  058C                     	;# 
  2700  058D                     	;# 
  2701  058E                     	;# 
  2702  058F                     	;# 
  2703  058F                     	;# 
  2704  0590                     	;# 
  2705  0591                     	;# 
  2706  0592                     	;# 
  2707  0593                     	;# 
  2708  059C                     	;# 
  2709  059C                     	;# 
  2710  059D                     	;# 
  2711  059D                     	;# 
  2712  059E                     	;# 
  2713  059F                     	;# 
  2714  060C                     	;# 
  2715  060D                     	;# 
  2716  060E                     	;# 
  2717  060F                     	;# 
  2718  0610                     	;# 
  2719  0611                     	;# 
  2720  0612                     	;# 
  2721  0613                     	;# 
  2722  0614                     	;# 
  2723  070C                     	;# 
  2724  070D                     	;# 
  2725  070E                     	;# 
  2726  070F                     	;# 
  2727  0710                     	;# 
  2728  0711                     	;# 
  2729  0712                     	;# 
  2730  0713                     	;# 
  2731  0716                     	;# 
  2732  0717                     	;# 
  2733  0718                     	;# 
  2734  0719                     	;# 
  2735  071A                     	;# 
  2736  071B                     	;# 
  2737  071C                     	;# 
  2738  071D                     	;# 
  2739  0796                     	;# 
  2740  0797                     	;# 
  2741  0798                     	;# 
  2742  0799                     	;# 
  2743  079A                     	;# 
  2744  079B                     	;# 
  2745  080C                     	;# 
  2746  080D                     	;# 
  2747  080E                     	;# 
  2748  080F                     	;# 
  2749  0810                     	;# 
  2750  0811                     	;# 
  2751  0812                     	;# 
  2752  0813                     	;# 
  2753  0814                     	;# 
  2754  081A                     	;# 
  2755  081A                     	;# 
  2756  081B                     	;# 
  2757  081C                     	;# 
  2758  081C                     	;# 
  2759  081D                     	;# 
  2760  081E                     	;# 
  2761  081F                     	;# 
  2762  088C                     	;# 
  2763  088D                     	;# 
  2764  088E                     	;# 
  2765  088F                     	;# 
  2766  0890                     	;# 
  2767  0891                     	;# 
  2768  0892                     	;# 
  2769  0893                     	;# 
  2770  0895                     	;# 
  2771  0896                     	;# 
  2772  090C                     	;# 
  2773  090E                     	;# 
  2774  090F                     	;# 
  2775  091F                     	;# 
  2776  098F                     	;# 
  2777  098F                     	;# 
  2778  0990                     	;# 
  2779  0991                     	;# 
  2780  0992                     	;# 
  2781  0993                     	;# 
  2782  0994                     	;# 
  2783  0995                     	;# 
  2784  0996                     	;# 
  2785  0997                     	;# 
  2786  0A19                     	;# 
  2787  0A19                     	;# 
  2788  0A1A                     	;# 
  2789  0A1A                     	;# 
  2790  0A1B                     	;# 
  2791  0A1B                     	;# 
  2792  0A1B                     	;# 
  2793  0A1C                     	;# 
  2794  0A1C                     	;# 
  2795  0A1D                     	;# 
  2796  0A1D                     	;# 
  2797  0A1E                     	;# 
  2798  0A1E                     	;# 
  2799  0A1F                     	;# 
  2800  0A1F                     	;# 
  2801  0A1F                     	;# 
  2802  1E0F                     	;# 
  2803  1E10                     	;# 
  2804  1E11                     	;# 
  2805  1E12                     	;# 
  2806  1E13                     	;# 
  2807  1E14                     	;# 
  2808  1E15                     	;# 
  2809  1E16                     	;# 
  2810  1E17                     	;# 
  2811  1E18                     	;# 
  2812  1E19                     	;# 
  2813  1E1A                     	;# 
  2814  1E1B                     	;# 
  2815  1E1C                     	;# 
  2816  1E1D                     	;# 
  2817  1E1E                     	;# 
  2818  1E1F                     	;# 
  2819  1E20                     	;# 
  2820  1E21                     	;# 
  2821  1E22                     	;# 
  2822  1E23                     	;# 
  2823  1E24                     	;# 
  2824  1E25                     	;# 
  2825  1E26                     	;# 
  2826  1E27                     	;# 
  2827  1E28                     	;# 
  2828  1E29                     	;# 
  2829  1E2A                     	;# 
  2830  1E2B                     	;# 
  2831  1E2C                     	;# 
  2832  1E2D                     	;# 
  2833  1E2E                     	;# 
  2834  1E2F                     	;# 
  2835  1E30                     	;# 
  2836  1E31                     	;# 
  2837  1E32                     	;# 
  2838  1E33                     	;# 
  2839  1E34                     	;# 
  2840  1E35                     	;# 
  2841  1E36                     	;# 
  2842  1E37                     	;# 
  2843  1E8F                     	;# 
  2844  1E90                     	;# 
  2845  1E91                     	;# 
  2846  1E92                     	;# 
  2847  1E93                     	;# 
  2848  1E9C                     	;# 
  2849  1EA1                     	;# 
  2850  1EA2                     	;# 
  2851  1EB1                     	;# 
  2852  1EBB                     	;# 
  2853  1EBC                     	;# 
  2854  1EBD                     	;# 
  2855  1EBE                     	;# 
  2856  1EC3                     	;# 
  2857  1EC5                     	;# 
  2858  1EC6                     	;# 
  2859  1EC7                     	;# 
  2860  1EC8                     	;# 
  2861  1EC9                     	;# 
  2862  1ECA                     	;# 
  2863  1ECB                     	;# 
  2864  1ECC                     	;# 
  2865  1ECD                     	;# 
  2866  1ECE                     	;# 
  2867  1F10                     	;# 
  2868  1F11                     	;# 
  2869  1F12                     	;# 
  2870  1F13                     	;# 
  2871  1F14                     	;# 
  2872  1F15                     	;# 
  2873  1F16                     	;# 
  2874  1F17                     	;# 
  2875  1F18                     	;# 
  2876  1F19                     	;# 
  2877  1F1A                     	;# 
  2878  1F1B                     	;# 
  2879  1F1C                     	;# 
  2880  1F1D                     	;# 
  2881  1F1E                     	;# 
  2882  1F1F                     	;# 
  2883  1F20                     	;# 
  2884  1F21                     	;# 
  2885  1F22                     	;# 
  2886  1F23                     	;# 
  2887  1F24                     	;# 
  2888  1F25                     	;# 
  2889  1F26                     	;# 
  2890  1F27                     	;# 
  2891  1F38                     	;# 
  2892  1F39                     	;# 
  2893  1F3A                     	;# 
  2894  1F3B                     	;# 
  2895  1F3C                     	;# 
  2896  1F3D                     	;# 
  2897  1F3E                     	;# 
  2898  1F3F                     	;# 
  2899  1F43                     	;# 
  2900  1F44                     	;# 
  2901  1F45                     	;# 
  2902  1F46                     	;# 
  2903  1F47                     	;# 
  2904  1F48                     	;# 
  2905  1F49                     	;# 
  2906  1F4A                     	;# 
  2907  1F4E                     	;# 
  2908  1F4F                     	;# 
  2909  1F50                     	;# 
  2910  1F51                     	;# 
  2911  1F52                     	;# 
  2912  1F53                     	;# 
  2913  1F54                     	;# 
  2914  1F55                     	;# 
  2915  1F65                     	;# 
  2916  1F68                     	;# 
  2917  1F69                     	;# 
  2918  1F6A                     	;# 
  2919  1F6B                     	;# 
  2920  1FE4                     	;# 
  2921  1FE5                     	;# 
  2922  1FE6                     	;# 
  2923  1FE7                     	;# 
  2924  1FE8                     	;# 
  2925  1FE8                     	;# 
  2926  1FE9                     	;# 
  2927  1FEA                     	;# 
  2928  1FEB                     	;# 
  2929  1FED                     	;# 
  2930  1FEE                     	;# 
  2931  1FEF                     	;# 
  2932  0000                     	;# 
  2933  0001                     	;# 
  2934  0002                     	;# 
  2935  0003                     	;# 
  2936  0004                     	;# 
  2937  0005                     	;# 
  2938  0006                     	;# 
  2939  0007                     	;# 
  2940  0008                     	;# 
  2941  0009                     	;# 
  2942  000A                     	;# 
  2943  000B                     	;# 
  2944  000C                     	;# 
  2945  000D                     	;# 
  2946  000E                     	;# 
  2947  0010                     	;# 
  2948  0012                     	;# 
  2949  0013                     	;# 
  2950  0014                     	;# 
  2951  0016                     	;# 
  2952  0018                     	;# 
  2953  0019                     	;# 
  2954  001A                     	;# 
  2955  009B                     	;# 
  2956  009B                     	;# 
  2957  009C                     	;# 
  2958  009D                     	;# 
  2959  009E                     	;# 
  2960  009F                     	;# 
  2961  0119                     	;# 
  2962  0119                     	;# 
  2963  0119                     	;# 
  2964  011A                     	;# 
  2965  011A                     	;# 
  2966  011A                     	;# 
  2967  011B                     	;# 
  2968  011B                     	;# 
  2969  011B                     	;# 
  2970  011B                     	;# 
  2971  011B                     	;# 
  2972  011C                     	;# 
  2973  011C                     	;# 
  2974  011C                     	;# 
  2975  011D                     	;# 
  2976  011D                     	;# 
  2977  011D                     	;# 
  2978  011E                     	;# 
  2979  011E                     	;# 
  2980  011E                     	;# 
  2981  011F                     	;# 
  2982  011F                     	;# 
  2983  011F                     	;# 
  2984  011F                     	;# 
  2985  011F                     	;# 
  2986  018C                     	;# 
  2987  018D                     	;# 
  2988  018E                     	;# 
  2989  018F                     	;# 
  2990  0190                     	;# 
  2991  0191                     	;# 
  2992  0192                     	;# 
  2993  0196                     	;# 
  2994  0197                     	;# 
  2995  0198                     	;# 
  2996  0199                     	;# 
  2997  019A                     	;# 
  2998  019B                     	;# 
  2999  019C                     	;# 
  3000  020C                     	;# 
  3001  020C                     	;# 
  3002  020D                     	;# 
  3003  020E                     	;# 
  3004  020F                     	;# 
  3005  020F                     	;# 
  3006  0210                     	;# 
  3007  0210                     	;# 
  3008  0211                     	;# 
  3009  0211                     	;# 
  3010  028C                     	;# 
  3011  028C                     	;# 
  3012  028D                     	;# 
  3013  028D                     	;# 
  3014  028E                     	;# 
  3015  028F                     	;# 
  3016  0290                     	;# 
  3017  0291                     	;# 
  3018  030C                     	;# 
  3019  030C                     	;# 
  3020  030D                     	;# 
  3021  030E                     	;# 
  3022  030F                     	;# 
  3023  0310                     	;# 
  3024  0310                     	;# 
  3025  0311                     	;# 
  3026  0312                     	;# 
  3027  0313                     	;# 
  3028  0314                     	;# 
  3029  0314                     	;# 
  3030  0315                     	;# 
  3031  0316                     	;# 
  3032  0318                     	;# 
  3033  0318                     	;# 
  3034  0319                     	;# 
  3035  031A                     	;# 
  3036  031C                     	;# 
  3037  031C                     	;# 
  3038  031D                     	;# 
  3039  031E                     	;# 
  3040  038C                     	;# 
  3041  038C                     	;# 
  3042  038D                     	;# 
  3043  038E                     	;# 
  3044  058C                     	;# 
  3045  058C                     	;# 
  3046  058D                     	;# 
  3047  058E                     	;# 
  3048  058F                     	;# 
  3049  058F                     	;# 
  3050  0590                     	;# 
  3051  0591                     	;# 
  3052  0592                     	;# 
  3053  0593                     	;# 
  3054  059C                     	;# 
  3055  059C                     	;# 
  3056  059D                     	;# 
  3057  059D                     	;# 
  3058  059E                     	;# 
  3059  059F                     	;# 
  3060  060C                     	;# 
  3061  060D                     	;# 
  3062  060E                     	;# 
  3063  060F                     	;# 
  3064  0610                     	;# 
  3065  0611                     	;# 
  3066  0612                     	;# 
  3067  0613                     	;# 
  3068  0614                     	;# 
  3069  070C                     	;# 
  3070  070D                     	;# 
  3071  070E                     	;# 
  3072  070F                     	;# 
  3073  0710                     	;# 
  3074  0711                     	;# 
  3075  0712                     	;# 
  3076  0713                     	;# 
  3077  0716                     	;# 
  3078  0717                     	;# 
  3079  0718                     	;# 
  3080  0719                     	;# 
  3081  071A                     	;# 
  3082  071B                     	;# 
  3083  071C                     	;# 
  3084  071D                     	;# 
  3085  0796                     	;# 
  3086  0797                     	;# 
  3087  0798                     	;# 
  3088  0799                     	;# 
  3089  079A                     	;# 
  3090  079B                     	;# 
  3091  080C                     	;# 
  3092  080D                     	;# 
  3093  080E                     	;# 
  3094  080F                     	;# 
  3095  0810                     	;# 
  3096  0811                     	;# 
  3097  0812                     	;# 
  3098  0813                     	;# 
  3099  0814                     	;# 
  3100  081A                     	;# 
  3101  081A                     	;# 
  3102  081B                     	;# 
  3103  081C                     	;# 
  3104  081C                     	;# 
  3105  081D                     	;# 
  3106  081E                     	;# 
  3107  081F                     	;# 
  3108  088C                     	;# 
  3109  088D                     	;# 
  3110  088E                     	;# 
  3111  088F                     	;# 
  3112  0890                     	;# 
  3113  0891                     	;# 
  3114  0892                     	;# 
  3115  0893                     	;# 
  3116  0895                     	;# 
  3117  0896                     	;# 
  3118  090C                     	;# 
  3119  090E                     	;# 
  3120  090F                     	;# 
  3121  091F                     	;# 
  3122  098F                     	;# 
  3123  098F                     	;# 
  3124  0990                     	;# 
  3125  0991                     	;# 
  3126  0992                     	;# 
  3127  0993                     	;# 
  3128  0994                     	;# 
  3129  0995                     	;# 
  3130  0996                     	;# 
  3131  0997                     	;# 
  3132  0A19                     	;# 
  3133  0A19                     	;# 
  3134  0A1A                     	;# 
  3135  0A1A                     	;# 
  3136  0A1B                     	;# 
  3137  0A1B                     	;# 
  3138  0A1B                     	;# 
  3139  0A1C                     	;# 
  3140  0A1C                     	;# 
  3141  0A1D                     	;# 
  3142  0A1D                     	;# 
  3143  0A1E                     	;# 
  3144  0A1E                     	;# 
  3145  0A1F                     	;# 
  3146  0A1F                     	;# 
  3147  0A1F                     	;# 
  3148  1E0F                     	;# 
  3149  1E10                     	;# 
  3150  1E11                     	;# 
  3151  1E12                     	;# 
  3152  1E13                     	;# 
  3153  1E14                     	;# 
  3154  1E15                     	;# 
  3155  1E16                     	;# 
  3156  1E17                     	;# 
  3157  1E18                     	;# 
  3158  1E19                     	;# 
  3159  1E1A                     	;# 
  3160  1E1B                     	;# 
  3161  1E1C                     	;# 
  3162  1E1D                     	;# 
  3163  1E1E                     	;# 
  3164  1E1F                     	;# 
  3165  1E20                     	;# 
  3166  1E21                     	;# 
  3167  1E22                     	;# 
  3168  1E23                     	;# 
  3169  1E24                     	;# 
  3170  1E25                     	;# 
  3171  1E26                     	;# 
  3172  1E27                     	;# 
  3173  1E28                     	;# 
  3174  1E29                     	;# 
  3175  1E2A                     	;# 
  3176  1E2B                     	;# 
  3177  1E2C                     	;# 
  3178  1E2D                     	;# 
  3179  1E2E                     	;# 
  3180  1E2F                     	;# 
  3181  1E30                     	;# 
  3182  1E31                     	;# 
  3183  1E32                     	;# 
  3184  1E33                     	;# 
  3185  1E34                     	;# 
  3186  1E35                     	;# 
  3187  1E36                     	;# 
  3188  1E37                     	;# 
  3189  1E8F                     	;# 
  3190  1E90                     	;# 
  3191  1E91                     	;# 
  3192  1E92                     	;# 
  3193  1E93                     	;# 
  3194  1E9C                     	;# 
  3195  1EA1                     	;# 
  3196  1EA2                     	;# 
  3197  1EB1                     	;# 
  3198  1EBB                     	;# 
  3199  1EBC                     	;# 
  3200  1EBD                     	;# 
  3201  1EBE                     	;# 
  3202  1EC3                     	;# 
  3203  1EC5                     	;# 
  3204  1EC6                     	;# 
  3205  1EC7                     	;# 
  3206  1EC8                     	;# 
  3207  1EC9                     	;# 
  3208  1ECA                     	;# 
  3209  1ECB                     	;# 
  3210  1ECC                     	;# 
  3211  1ECD                     	;# 
  3212  1ECE                     	;# 
  3213  1F10                     	;# 
  3214  1F11                     	;# 
  3215  1F12                     	;# 
  3216  1F13                     	;# 
  3217  1F14                     	;# 
  3218  1F15                     	;# 
  3219  1F16                     	;# 
  3220  1F17                     	;# 
  3221  1F18                     	;# 
  3222  1F19                     	;# 
  3223  1F1A                     	;# 
  3224  1F1B                     	;# 
  3225  1F1C                     	;# 
  3226  1F1D                     	;# 
  3227  1F1E                     	;# 
  3228  1F1F                     	;# 
  3229  1F20                     	;# 
  3230  1F21                     	;# 
  3231  1F22                     	;# 
  3232  1F23                     	;# 
  3233  1F24                     	;# 
  3234  1F25                     	;# 
  3235  1F26                     	;# 
  3236  1F27                     	;# 
  3237  1F38                     	;# 
  3238  1F39                     	;# 
  3239  1F3A                     	;# 
  3240  1F3B                     	;# 
  3241  1F3C                     	;# 
  3242  1F3D                     	;# 
  3243  1F3E                     	;# 
  3244  1F3F                     	;# 
  3245  1F43                     	;# 
  3246  1F44                     	;# 
  3247  1F45                     	;# 
  3248  1F46                     	;# 
  3249  1F47                     	;# 
  3250  1F48                     	;# 
  3251  1F49                     	;# 
  3252  1F4A                     	;# 
  3253  1F4E                     	;# 
  3254  1F4F                     	;# 
  3255  1F50                     	;# 
  3256  1F51                     	;# 
  3257  1F52                     	;# 
  3258  1F53                     	;# 
  3259  1F54                     	;# 
  3260  1F55                     	;# 
  3261  1F65                     	;# 
  3262  1F68                     	;# 
  3263  1F69                     	;# 
  3264  1F6A                     	;# 
  3265  1F6B                     	;# 
  3266  1FE4                     	;# 
  3267  1FE5                     	;# 
  3268  1FE6                     	;# 
  3269  1FE7                     	;# 
  3270  1FE8                     	;# 
  3271  1FE8                     	;# 
  3272  1FE9                     	;# 
  3273  1FEA                     	;# 
  3274  1FEB                     	;# 
  3275  1FED                     	;# 
  3276  1FEE                     	;# 
  3277  1FEF                     	;# 
  3278  0000                     	;# 
  3279  0001                     	;# 
  3280  0002                     	;# 
  3281  0003                     	;# 
  3282  0004                     	;# 
  3283  0005                     	;# 
  3284  0006                     	;# 
  3285  0007                     	;# 
  3286  0008                     	;# 
  3287  0009                     	;# 
  3288  000A                     	;# 
  3289  000B                     	;# 
  3290  000C                     	;# 
  3291  000D                     	;# 
  3292  000E                     	;# 
  3293  0010                     	;# 
  3294  0012                     	;# 
  3295  0013                     	;# 
  3296  0014                     	;# 
  3297  0016                     	;# 
  3298  0018                     	;# 
  3299  0019                     	;# 
  3300  001A                     	;# 
  3301  009B                     	;# 
  3302  009B                     	;# 
  3303  009C                     	;# 
  3304  009D                     	;# 
  3305  009E                     	;# 
  3306  009F                     	;# 
  3307  0119                     	;# 
  3308  0119                     	;# 
  3309  0119                     	;# 
  3310  011A                     	;# 
  3311  011A                     	;# 
  3312  011A                     	;# 
  3313  011B                     	;# 
  3314  011B                     	;# 
  3315  011B                     	;# 
  3316  011B                     	;# 
  3317  011B                     	;# 
  3318  011C                     	;# 
  3319  011C                     	;# 
  3320  011C                     	;# 
  3321  011D                     	;# 
  3322  011D                     	;# 
  3323  011D                     	;# 
  3324  011E                     	;# 
  3325  011E                     	;# 
  3326  011E                     	;# 
  3327  011F                     	;# 
  3328  011F                     	;# 
  3329  011F                     	;# 
  3330  011F                     	;# 
  3331  011F                     	;# 
  3332  018C                     	;# 
  3333  018D                     	;# 
  3334  018E                     	;# 
  3335  018F                     	;# 
  3336  0190                     	;# 
  3337  0191                     	;# 
  3338  0192                     	;# 
  3339  0196                     	;# 
  3340  0197                     	;# 
  3341  0198                     	;# 
  3342  0199                     	;# 
  3343  019A                     	;# 
  3344  019B                     	;# 
  3345  019C                     	;# 
  3346  020C                     	;# 
  3347  020C                     	;# 
  3348  020D                     	;# 
  3349  020E                     	;# 
  3350  020F                     	;# 
  3351  020F                     	;# 
  3352  0210                     	;# 
  3353  0210                     	;# 
  3354  0211                     	;# 
  3355  0211                     	;# 
  3356  028C                     	;# 
  3357  028C                     	;# 
  3358  028D                     	;# 
  3359  028D                     	;# 
  3360  028E                     	;# 
  3361  028F                     	;# 
  3362  0290                     	;# 
  3363  0291                     	;# 
  3364  030C                     	;# 
  3365  030C                     	;# 
  3366  030D                     	;# 
  3367  030E                     	;# 
  3368  030F                     	;# 
  3369  0310                     	;# 
  3370  0310                     	;# 
  3371  0311                     	;# 
  3372  0312                     	;# 
  3373  0313                     	;# 
  3374  0314                     	;# 
  3375  0314                     	;# 
  3376  0315                     	;# 
  3377  0316                     	;# 
  3378  0318                     	;# 
  3379  0318                     	;# 
  3380  0319                     	;# 
  3381  031A                     	;# 
  3382  031C                     	;# 
  3383  031C                     	;# 
  3384  031D                     	;# 
  3385  031E                     	;# 
  3386  038C                     	;# 
  3387  038C                     	;# 
  3388  038D                     	;# 
  3389  038E                     	;# 
  3390  058C                     	;# 
  3391  058C                     	;# 
  3392  058D                     	;# 
  3393  058E                     	;# 
  3394  058F                     	;# 
  3395  058F                     	;# 
  3396  0590                     	;# 
  3397  0591                     	;# 
  3398  0592                     	;# 
  3399  0593                     	;# 
  3400  059C                     	;# 
  3401  059C                     	;# 
  3402  059D                     	;# 
  3403  059D                     	;# 
  3404  059E                     	;# 
  3405  059F                     	;# 
  3406  060C                     	;# 
  3407  060D                     	;# 
  3408  060E                     	;# 
  3409  060F                     	;# 
  3410  0610                     	;# 
  3411  0611                     	;# 
  3412  0612                     	;# 
  3413  0613                     	;# 
  3414  0614                     	;# 
  3415  070C                     	;# 
  3416  070D                     	;# 
  3417  070E                     	;# 
  3418  070F                     	;# 
  3419  0710                     	;# 
  3420  0711                     	;# 
  3421  0712                     	;# 
  3422  0713                     	;# 
  3423  0716                     	;# 
  3424  0717                     	;# 
  3425  0718                     	;# 
  3426  0719                     	;# 
  3427  071A                     	;# 
  3428  071B                     	;# 
  3429  071C                     	;# 
  3430  071D                     	;# 
  3431  0796                     	;# 
  3432  0797                     	;# 
  3433  0798                     	;# 
  3434  0799                     	;# 
  3435  079A                     	;# 
  3436  079B                     	;# 
  3437  080C                     	;# 
  3438  080D                     	;# 
  3439  080E                     	;# 
  3440  080F                     	;# 
  3441  0810                     	;# 
  3442  0811                     	;# 
  3443  0812                     	;# 
  3444  0813                     	;# 
  3445  0814                     	;# 
  3446  081A                     	;# 
  3447  081A                     	;# 
  3448  081B                     	;# 
  3449  081C                     	;# 
  3450  081C                     	;# 
  3451  081D                     	;# 
  3452  081E                     	;# 
  3453  081F                     	;# 
  3454  088C                     	;# 
  3455  088D                     	;# 
  3456  088E                     	;# 
  3457  088F                     	;# 
  3458  0890                     	;# 
  3459  0891                     	;# 
  3460  0892                     	;# 
  3461  0893                     	;# 
  3462  0895                     	;# 
  3463  0896                     	;# 
  3464  090C                     	;# 
  3465  090E                     	;# 
  3466  090F                     	;# 
  3467  091F                     	;# 
  3468  098F                     	;# 
  3469  098F                     	;# 
  3470  0990                     	;# 
  3471  0991                     	;# 
  3472  0992                     	;# 
  3473  0993                     	;# 
  3474  0994                     	;# 
  3475  0995                     	;# 
  3476  0996                     	;# 
  3477  0997                     	;# 
  3478  0A19                     	;# 
  3479  0A19                     	;# 
  3480  0A1A                     	;# 
  3481  0A1A                     	;# 
  3482  0A1B                     	;# 
  3483  0A1B                     	;# 
  3484  0A1B                     	;# 
  3485  0A1C                     	;# 
  3486  0A1C                     	;# 
  3487  0A1D                     	;# 
  3488  0A1D                     	;# 
  3489  0A1E                     	;# 
  3490  0A1E                     	;# 
  3491  0A1F                     	;# 
  3492  0A1F                     	;# 
  3493  0A1F                     	;# 
  3494  1E0F                     	;# 
  3495  1E10                     	;# 
  3496  1E11                     	;# 
  3497  1E12                     	;# 
  3498  1E13                     	;# 
  3499  1E14                     	;# 
  3500  1E15                     	;# 
  3501  1E16                     	;# 
  3502  1E17                     	;# 
  3503  1E18                     	;# 
  3504  1E19                     	;# 
  3505  1E1A                     	;# 
  3506  1E1B                     	;# 
  3507  1E1C                     	;# 
  3508  1E1D                     	;# 
  3509  1E1E                     	;# 
  3510  1E1F                     	;# 
  3511  1E20                     	;# 
  3512  1E21                     	;# 
  3513  1E22                     	;# 
  3514  1E23                     	;# 
  3515  1E24                     	;# 
  3516  1E25                     	;# 
  3517  1E26                     	;# 
  3518  1E27                     	;# 
  3519  1E28                     	;# 
  3520  1E29                     	;# 
  3521  1E2A                     	;# 
  3522  1E2B                     	;# 
  3523  1E2C                     	;# 
  3524  1E2D                     	;# 
  3525  1E2E                     	;# 
  3526  1E2F                     	;# 
  3527  1E30                     	;# 
  3528  1E31                     	;# 
  3529  1E32                     	;# 
  3530  1E33                     	;# 
  3531  1E34                     	;# 
  3532  1E35                     	;# 
  3533  1E36                     	;# 
  3534  1E37                     	;# 
  3535  1E8F                     	;# 
  3536  1E90                     	;# 
  3537  1E91                     	;# 
  3538  1E92                     	;# 
  3539  1E93                     	;# 
  3540  1E9C                     	;# 
  3541  1EA1                     	;# 
  3542  1EA2                     	;# 
  3543  1EB1                     	;# 
  3544  1EBB                     	;# 
  3545  1EBC                     	;# 
  3546  1EBD                     	;# 
  3547  1EBE                     	;# 
  3548  1EC3                     	;# 
  3549  1EC5                     	;# 
  3550  1EC6                     	;# 
  3551  1EC7                     	;# 
  3552  1EC8                     	;# 
  3553  1EC9                     	;# 
  3554  1ECA                     	;# 
  3555  1ECB                     	;# 
  3556  1ECC                     	;# 
  3557  1ECD                     	;# 
  3558  1ECE                     	;# 
  3559  1F10                     	;# 
  3560  1F11                     	;# 
  3561  1F12                     	;# 
  3562  1F13                     	;# 
  3563  1F14                     	;# 
  3564  1F15                     	;# 
  3565  1F16                     	;# 
  3566  1F17                     	;# 
  3567  1F18                     	;# 
  3568  1F19                     	;# 
  3569  1F1A                     	;# 
  3570  1F1B                     	;# 
  3571  1F1C                     	;# 
  3572  1F1D                     	;# 
  3573  1F1E                     	;# 
  3574  1F1F                     	;# 
  3575  1F20                     	;# 
  3576  1F21                     	;# 
  3577  1F22                     	;# 
  3578  1F23                     	;# 
  3579  1F24                     	;# 
  3580  1F25                     	;# 
  3581  1F26                     	;# 
  3582  1F27                     	;# 
  3583  1F38                     	;# 
  3584  1F39                     	;# 
  3585  1F3A                     	;# 
  3586  1F3B                     	;# 
  3587  1F3C                     	;# 
  3588  1F3D                     	;# 
  3589  1F3E                     	;# 
  3590  1F3F                     	;# 
  3591  1F43                     	;# 
  3592  1F44                     	;# 
  3593  1F45                     	;# 
  3594  1F46                     	;# 
  3595  1F47                     	;# 
  3596  1F48                     	;# 
  3597  1F49                     	;# 
  3598  1F4A                     	;# 
  3599  1F4E                     	;# 
  3600  1F4F                     	;# 
  3601  1F50                     	;# 
  3602  1F51                     	;# 
  3603  1F52                     	;# 
  3604  1F53                     	;# 
  3605  1F54                     	;# 
  3606  1F55                     	;# 
  3607  1F65                     	;# 
  3608  1F68                     	;# 
  3609  1F69                     	;# 
  3610  1F6A                     	;# 
  3611  1F6B                     	;# 
  3612  1FE4                     	;# 
  3613  1FE5                     	;# 
  3614  1FE6                     	;# 
  3615  1FE7                     	;# 
  3616  1FE8                     	;# 
  3617  1FE8                     	;# 
  3618  1FE9                     	;# 
  3619  1FEA                     	;# 
  3620  1FEB                     	;# 
  3621  1FED                     	;# 
  3622  1FEE                     	;# 
  3623  1FEF                     	;# 
  3624  0000                     	;# 
  3625  0001                     	;# 
  3626  0002                     	;# 
  3627  0003                     	;# 
  3628  0004                     	;# 
  3629  0005                     	;# 
  3630  0006                     	;# 
  3631  0007                     	;# 
  3632  0008                     	;# 
  3633  0009                     	;# 
  3634  000A                     	;# 
  3635  000B                     	;# 
  3636  000C                     	;# 
  3637  000D                     	;# 
  3638  000E                     	;# 
  3639  0010                     	;# 
  3640  0012                     	;# 
  3641  0013                     	;# 
  3642  0014                     	;# 
  3643  0016                     	;# 
  3644  0018                     	;# 
  3645  0019                     	;# 
  3646  001A                     	;# 
  3647  009B                     	;# 
  3648  009B                     	;# 
  3649  009C                     	;# 
  3650  009D                     	;# 
  3651  009E                     	;# 
  3652  009F                     	;# 
  3653  0119                     	;# 
  3654  0119                     	;# 
  3655  0119                     	;# 
  3656  011A                     	;# 
  3657  011A                     	;# 
  3658  011A                     	;# 
  3659  011B                     	;# 
  3660  011B                     	;# 
  3661  011B                     	;# 
  3662  011B                     	;# 
  3663  011B                     	;# 
  3664  011C                     	;# 
  3665  011C                     	;# 
  3666  011C                     	;# 
  3667  011D                     	;# 
  3668  011D                     	;# 
  3669  011D                     	;# 
  3670  011E                     	;# 
  3671  011E                     	;# 
  3672  011E                     	;# 
  3673  011F                     	;# 
  3674  011F                     	;# 
  3675  011F                     	;# 
  3676  011F                     	;# 
  3677  011F                     	;# 
  3678  018C                     	;# 
  3679  018D                     	;# 
  3680  018E                     	;# 
  3681  018F                     	;# 
  3682  0190                     	;# 
  3683  0191                     	;# 
  3684  0192                     	;# 
  3685  0196                     	;# 
  3686  0197                     	;# 
  3687  0198                     	;# 
  3688  0199                     	;# 
  3689  019A                     	;# 
  3690  019B                     	;# 
  3691  019C                     	;# 
  3692  020C                     	;# 
  3693  020C                     	;# 
  3694  020D                     	;# 
  3695  020E                     	;# 
  3696  020F                     	;# 
  3697  020F                     	;# 
  3698  0210                     	;# 
  3699  0210                     	;# 
  3700  0211                     	;# 
  3701  0211                     	;# 
  3702  028C                     	;# 
  3703  028C                     	;# 
  3704  028D                     	;# 
  3705  028D                     	;# 
  3706  028E                     	;# 
  3707  028F                     	;# 
  3708  0290                     	;# 
  3709  0291                     	;# 
  3710  030C                     	;# 
  3711  030C                     	;# 
  3712  030D                     	;# 
  3713  030E                     	;# 
  3714  030F                     	;# 
  3715  0310                     	;# 
  3716  0310                     	;# 
  3717  0311                     	;# 
  3718  0312                     	;# 
  3719  0313                     	;# 
  3720  0314                     	;# 
  3721  0314                     	;# 
  3722  0315                     	;# 
  3723  0316                     	;# 
  3724  0318                     	;# 
  3725  0318                     	;# 
  3726  0319                     	;# 
  3727  031A                     	;# 
  3728  031C                     	;# 
  3729  031C                     	;# 
  3730  031D                     	;# 
  3731  031E                     	;# 
  3732  038C                     	;# 
  3733  038C                     	;# 
  3734  038D                     	;# 
  3735  038E                     	;# 
  3736  058C                     	;# 
  3737  058C                     	;# 
  3738  058D                     	;# 
  3739  058E                     	;# 
  3740  058F                     	;# 
  3741  058F                     	;# 
  3742  0590                     	;# 
  3743  0591                     	;# 
  3744  0592                     	;# 
  3745  0593                     	;# 
  3746  059C                     	;# 
  3747  059C                     	;# 
  3748  059D                     	;# 
  3749  059D                     	;# 
  3750  059E                     	;# 
  3751  059F                     	;# 
  3752  060C                     	;# 
  3753  060D                     	;# 
  3754  060E                     	;# 
  3755  060F                     	;# 
  3756  0610                     	;# 
  3757  0611                     	;# 
  3758  0612                     	;# 
  3759  0613                     	;# 
  3760  0614                     	;# 
  3761  070C                     	;# 
  3762  070D                     	;# 
  3763  070E                     	;# 
  3764  070F                     	;# 
  3765  0710                     	;# 
  3766  0711                     	;# 
  3767  0712                     	;# 
  3768  0713                     	;# 
  3769  0716                     	;# 
  3770  0717                     	;# 
  3771  0718                     	;# 
  3772  0719                     	;# 
  3773  071A                     	;# 
  3774  071B                     	;# 
  3775  071C                     	;# 
  3776  071D                     	;# 
  3777  0796                     	;# 
  3778  0797                     	;# 
  3779  0798                     	;# 
  3780  0799                     	;# 
  3781  079A                     	;# 
  3782  079B                     	;# 
  3783  080C                     	;# 
  3784  080D                     	;# 
  3785  080E                     	;# 
  3786  080F                     	;# 
  3787  0810                     	;# 
  3788  0811                     	;# 
  3789  0812                     	;# 
  3790  0813                     	;# 
  3791  0814                     	;# 
  3792  081A                     	;# 
  3793  081A                     	;# 
  3794  081B                     	;# 
  3795  081C                     	;# 
  3796  081C                     	;# 
  3797  081D                     	;# 
  3798  081E                     	;# 
  3799  081F                     	;# 
  3800  088C                     	;# 
  3801  088D                     	;# 
  3802  088E                     	;# 
  3803  088F                     	;# 
  3804  0890                     	;# 
  3805  0891                     	;# 
  3806  0892                     	;# 
  3807  0893                     	;# 
  3808  0895                     	;# 
  3809  0896                     	;# 
  3810  090C                     	;# 
  3811  090E                     	;# 
  3812  090F                     	;# 
  3813  091F                     	;# 
  3814  098F                     	;# 
  3815  098F                     	;# 
  3816  0990                     	;# 
  3817  0991                     	;# 
  3818  0992                     	;# 
  3819  0993                     	;# 
  3820  0994                     	;# 
  3821  0995                     	;# 
  3822  0996                     	;# 
  3823  0997                     	;# 
  3824  0A19                     	;# 
  3825  0A19                     	;# 
  3826  0A1A                     	;# 
  3827  0A1A                     	;# 
  3828  0A1B                     	;# 
  3829  0A1B                     	;# 
  3830  0A1B                     	;# 
  3831  0A1C                     	;# 
  3832  0A1C                     	;# 
  3833  0A1D                     	;# 
  3834  0A1D                     	;# 
  3835  0A1E                     	;# 
  3836  0A1E                     	;# 
  3837  0A1F                     	;# 
  3838  0A1F                     	;# 
  3839  0A1F                     	;# 
  3840  1E0F                     	;# 
  3841  1E10                     	;# 
  3842  1E11                     	;# 
  3843  1E12                     	;# 
  3844  1E13                     	;# 
  3845  1E14                     	;# 
  3846  1E15                     	;# 
  3847  1E16                     	;# 
  3848  1E17                     	;# 
  3849  1E18                     	;# 
  3850  1E19                     	;# 
  3851  1E1A                     	;# 
  3852  1E1B                     	;# 
  3853  1E1C                     	;# 
  3854  1E1D                     	;# 
  3855  1E1E                     	;# 
  3856  1E1F                     	;# 
  3857  1E20                     	;# 
  3858  1E21                     	;# 
  3859  1E22                     	;# 
  3860  1E23                     	;# 
  3861  1E24                     	;# 
  3862  1E25                     	;# 
  3863  1E26                     	;# 
  3864  1E27                     	;# 
  3865  1E28                     	;# 
  3866  1E29                     	;# 
  3867  1E2A                     	;# 
  3868  1E2B                     	;# 
  3869  1E2C                     	;# 
  3870  1E2D                     	;# 
  3871  1E2E                     	;# 
  3872  1E2F                     	;# 
  3873  1E30                     	;# 
  3874  1E31                     	;# 
  3875  1E32                     	;# 
  3876  1E33                     	;# 
  3877  1E34                     	;# 
  3878  1E35                     	;# 
  3879  1E36                     	;# 
  3880  1E37                     	;# 
  3881  1E8F                     	;# 
  3882  1E90                     	;# 
  3883  1E91                     	;# 
  3884  1E92                     	;# 
  3885  1E93                     	;# 
  3886  1E9C                     	;# 
  3887  1EA1                     	;# 
  3888  1EA2                     	;# 
  3889  1EB1                     	;# 
  3890  1EBB                     	;# 
  3891  1EBC                     	;# 
  3892  1EBD                     	;# 
  3893  1EBE                     	;# 
  3894  1EC3                     	;# 
  3895  1EC5                     	;# 
  3896  1EC6                     	;# 
  3897  1EC7                     	;# 
  3898  1EC8                     	;# 
  3899  1EC9                     	;# 
  3900  1ECA                     	;# 
  3901  1ECB                     	;# 
  3902  1ECC                     	;# 
  3903  1ECD                     	;# 
  3904  1ECE                     	;# 
  3905  1F10                     	;# 
  3906  1F11                     	;# 
  3907  1F12                     	;# 
  3908  1F13                     	;# 
  3909  1F14                     	;# 
  3910  1F15                     	;# 
  3911  1F16                     	;# 
  3912  1F17                     	;# 
  3913  1F18                     	;# 
  3914  1F19                     	;# 
  3915  1F1A                     	;# 
  3916  1F1B                     	;# 
  3917  1F1C                     	;# 
  3918  1F1D                     	;# 
  3919  1F1E                     	;# 
  3920  1F1F                     	;# 
  3921  1F20                     	;# 
  3922  1F21                     	;# 
  3923  1F22                     	;# 
  3924  1F23                     	;# 
  3925  1F24                     	;# 
  3926  1F25                     	;# 
  3927  1F26                     	;# 
  3928  1F27                     	;# 
  3929  1F38                     	;# 
  3930  1F39                     	;# 
  3931  1F3A                     	;# 
  3932  1F3B                     	;# 
  3933  1F3C                     	;# 
  3934  1F3D                     	;# 
  3935  1F3E                     	;# 
  3936  1F3F                     	;# 
  3937  1F43                     	;# 
  3938  1F44                     	;# 
  3939  1F45                     	;# 
  3940  1F46                     	;# 
  3941  1F47                     	;# 
  3942  1F48                     	;# 
  3943  1F49                     	;# 
  3944  1F4A                     	;# 
  3945  1F4E                     	;# 
  3946  1F4F                     	;# 
  3947  1F50                     	;# 
  3948  1F51                     	;# 
  3949  1F52                     	;# 
  3950  1F53                     	;# 
  3951  1F54                     	;# 
  3952  1F55                     	;# 
  3953  1F65                     	;# 
  3954  1F68                     	;# 
  3955  1F69                     	;# 
  3956  1F6A                     	;# 
  3957  1F6B                     	;# 
  3958  1FE4                     	;# 
  3959  1FE5                     	;# 
  3960  1FE6                     	;# 
  3961  1FE7                     	;# 
  3962  1FE8                     	;# 
  3963  1FE8                     	;# 
  3964  1FE9                     	;# 
  3965  1FEA                     	;# 
  3966  1FEB                     	;# 
  3967  1FED                     	;# 
  3968  1FEE                     	;# 
  3969  1FEF                     	;# 
  3970  0000                     	;# 
  3971  0001                     	;# 
  3972  0002                     	;# 
  3973  0003                     	;# 
  3974  0004                     	;# 
  3975  0005                     	;# 
  3976  0006                     	;# 
  3977  0007                     	;# 
  3978  0008                     	;# 
  3979  0009                     	;# 
  3980  000A                     	;# 
  3981  000B                     	;# 
  3982  000C                     	;# 
  3983  000D                     	;# 
  3984  000E                     	;# 
  3985  0010                     	;# 
  3986  0012                     	;# 
  3987  0013                     	;# 
  3988  0014                     	;# 
  3989  0016                     	;# 
  3990  0018                     	;# 
  3991  0019                     	;# 
  3992  001A                     	;# 
  3993  009B                     	;# 
  3994  009B                     	;# 
  3995  009C                     	;# 
  3996  009D                     	;# 
  3997  009E                     	;# 
  3998  009F                     	;# 
  3999  0119                     	;# 
  4000  0119                     	;# 
  4001  0119                     	;# 
  4002  011A                     	;# 
  4003  011A                     	;# 
  4004  011A                     	;# 
  4005  011B                     	;# 
  4006  011B                     	;# 
  4007  011B                     	;# 
  4008  011B                     	;# 
  4009  011B                     	;# 
  4010  011C                     	;# 
  4011  011C                     	;# 
  4012  011C                     	;# 
  4013  011D                     	;# 
  4014  011D                     	;# 
  4015  011D                     	;# 
  4016  011E                     	;# 
  4017  011E                     	;# 
  4018  011E                     	;# 
  4019  011F                     	;# 
  4020  011F                     	;# 
  4021  011F                     	;# 
  4022  011F                     	;# 
  4023  011F                     	;# 
  4024  018C                     	;# 
  4025  018D                     	;# 
  4026  018E                     	;# 
  4027  018F                     	;# 
  4028  0190                     	;# 
  4029  0191                     	;# 
  4030  0192                     	;# 
  4031  0196                     	;# 
  4032  0197                     	;# 
  4033  0198                     	;# 
  4034  0199                     	;# 
  4035  019A                     	;# 
  4036  019B                     	;# 
  4037  019C                     	;# 
  4038  020C                     	;# 
  4039  020C                     	;# 
  4040  020D                     	;# 
  4041  020E                     	;# 
  4042  020F                     	;# 
  4043  020F                     	;# 
  4044  0210                     	;# 
  4045  0210                     	;# 
  4046  0211                     	;# 
  4047  0211                     	;# 
  4048  028C                     	;# 
  4049  028C                     	;# 
  4050  028D                     	;# 
  4051  028D                     	;# 
  4052  028E                     	;# 
  4053  028F                     	;# 
  4054  0290                     	;# 
  4055  0291                     	;# 
  4056  030C                     	;# 
  4057  030C                     	;# 
  4058  030D                     	;# 
  4059  030E                     	;# 
  4060  030F                     	;# 
  4061  0310                     	;# 
  4062  0310                     	;# 
  4063  0311                     	;# 
  4064  0312                     	;# 
  4065  0313                     	;# 
  4066  0314                     	;# 
  4067  0314                     	;# 
  4068  0315                     	;# 
  4069  0316                     	;# 
  4070  0318                     	;# 
  4071  0318                     	;# 
  4072  0319                     	;# 
  4073  031A                     	;# 
  4074  031C                     	;# 
  4075  031C                     	;# 
  4076  031D                     	;# 
  4077  031E                     	;# 
  4078  038C                     	;# 
  4079  038C                     	;# 
  4080  038D                     	;# 
  4081  038E                     	;# 
  4082  058C                     	;# 
  4083  058C                     	;# 
  4084  058D                     	;# 
  4085  058E                     	;# 
  4086  058F                     	;# 
  4087  058F                     	;# 
  4088  0590                     	;# 
  4089  0591                     	;# 
  4090  0592                     	;# 
  4091  0593                     	;# 
  4092  059C                     	;# 
  4093  059C                     	;# 
  4094  059D                     	;# 
  4095  059D                     	;# 
  4096  059E                     	;# 
  4097  059F                     	;# 
  4098  060C                     	;# 
  4099  060D                     	;# 
  4100  060E                     	;# 
  4101  060F                     	;# 
  4102  0610                     	;# 
  4103  0611                     	;# 
  4104  0612                     	;# 
  4105  0613                     	;# 
  4106  0614                     	;# 
  4107  070C                     	;# 
  4108  070D                     	;# 
  4109  070E                     	;# 
  4110  070F                     	;# 
  4111  0710                     	;# 
  4112  0711                     	;# 
  4113  0712                     	;# 
  4114  0713                     	;# 
  4115  0716                     	;# 
  4116  0717                     	;# 
  4117  0718                     	;# 
  4118  0719                     	;# 
  4119  071A                     	;# 
  4120  071B                     	;# 
  4121  071C                     	;# 
  4122  071D                     	;# 
  4123  0796                     	;# 
  4124  0797                     	;# 
  4125  0798                     	;# 
  4126  0799                     	;# 
  4127  079A                     	;# 
  4128  079B                     	;# 
  4129  080C                     	;# 
  4130  080D                     	;# 
  4131  080E                     	;# 
  4132  080F                     	;# 
  4133  0810                     	;# 
  4134  0811                     	;# 
  4135  0812                     	;# 
  4136  0813                     	;# 
  4137  0814                     	;# 
  4138  081A                     	;# 
  4139  081A                     	;# 
  4140  081B                     	;# 
  4141  081C                     	;# 
  4142  081C                     	;# 
  4143  081D                     	;# 
  4144  081E                     	;# 
  4145  081F                     	;# 
  4146  088C                     	;# 
  4147  088D                     	;# 
  4148  088E                     	;# 
  4149  088F                     	;# 
  4150  0890                     	;# 
  4151  0891                     	;# 
  4152  0892                     	;# 
  4153  0893                     	;# 
  4154  0895                     	;# 
  4155  0896                     	;# 
  4156  090C                     	;# 
  4157  090E                     	;# 
  4158  090F                     	;# 
  4159  091F                     	;# 
  4160  098F                     	;# 
  4161  098F                     	;# 
  4162  0990                     	;# 
  4163  0991                     	;# 
  4164  0992                     	;# 
  4165  0993                     	;# 
  4166  0994                     	;# 
  4167  0995                     	;# 
  4168  0996                     	;# 
  4169  0997                     	;# 
  4170  0A19                     	;# 
  4171  0A19                     	;# 
  4172  0A1A                     	;# 
  4173  0A1A                     	;# 
  4174  0A1B                     	;# 
  4175  0A1B                     	;# 
  4176  0A1B                     	;# 
  4177  0A1C                     	;# 
  4178  0A1C                     	;# 
  4179  0A1D                     	;# 
  4180  0A1D                     	;# 
  4181  0A1E                     	;# 
  4182  0A1E                     	;# 
  4183  0A1F                     	;# 
  4184  0A1F                     	;# 
  4185  0A1F                     	;# 
  4186  1E0F                     	;# 
  4187  1E10                     	;# 
  4188  1E11                     	;# 
  4189  1E12                     	;# 
  4190  1E13                     	;# 
  4191  1E14                     	;# 
  4192  1E15                     	;# 
  4193  1E16                     	;# 
  4194  1E17                     	;# 
  4195  1E18                     	;# 
  4196  1E19                     	;# 
  4197  1E1A                     	;# 
  4198  1E1B                     	;# 
  4199  1E1C                     	;# 
  4200  1E1D                     	;# 
  4201  1E1E                     	;# 
  4202  1E1F                     	;# 
  4203  1E20                     	;# 
  4204  1E21                     	;# 
  4205  1E22                     	;# 
  4206  1E23                     	;# 
  4207  1E24                     	;# 
  4208  1E25                     	;# 
  4209  1E26                     	;# 
  4210  1E27                     	;# 
  4211  1E28                     	;# 
  4212  1E29                     	;# 
  4213  1E2A                     	;# 
  4214  1E2B                     	;# 
  4215  1E2C                     	;# 
  4216  1E2D                     	;# 
  4217  1E2E                     	;# 
  4218  1E2F                     	;# 
  4219  1E30                     	;# 
  4220  1E31                     	;# 
  4221  1E32                     	;# 
  4222  1E33                     	;# 
  4223  1E34                     	;# 
  4224  1E35                     	;# 
  4225  1E36                     	;# 
  4226  1E37                     	;# 
  4227  1E8F                     	;# 
  4228  1E90                     	;# 
  4229  1E91                     	;# 
  4230  1E92                     	;# 
  4231  1E93                     	;# 
  4232  1E9C                     	;# 
  4233  1EA1                     	;# 
  4234  1EA2                     	;# 
  4235  1EB1                     	;# 
  4236  1EBB                     	;# 
  4237  1EBC                     	;# 
  4238  1EBD                     	;# 
  4239  1EBE                     	;# 
  4240  1EC3                     	;# 
  4241  1EC5                     	;# 
  4242  1EC6                     	;# 
  4243  1EC7                     	;# 
  4244  1EC8                     	;# 
  4245  1EC9                     	;# 
  4246  1ECA                     	;# 
  4247  1ECB                     	;# 
  4248  1ECC                     	;# 
  4249  1ECD                     	;# 
  4250  1ECE                     	;# 
  4251  1F10                     	;# 
  4252  1F11                     	;# 
  4253  1F12                     	;# 
  4254  1F13                     	;# 
  4255  1F14                     	;# 
  4256  1F15                     	;# 
  4257  1F16                     	;# 
  4258  1F17                     	;# 
  4259  1F18                     	;# 
  4260  1F19                     	;# 
  4261  1F1A                     	;# 
  4262  1F1B                     	;# 
  4263  1F1C                     	;# 
  4264  1F1D                     	;# 
  4265  1F1E                     	;# 
  4266  1F1F                     	;# 
  4267  1F20                     	;# 
  4268  1F21                     	;# 
  4269  1F22                     	;# 
  4270  1F23                     	;# 
  4271  1F24                     	;# 
  4272  1F25                     	;# 
  4273  1F26                     	;# 
  4274  1F27                     	;# 
  4275  1F38                     	;# 
  4276  1F39                     	;# 
  4277  1F3A                     	;# 
  4278  1F3B                     	;# 
  4279  1F3C                     	;# 
  4280  1F3D                     	;# 
  4281  1F3E                     	;# 
  4282  1F3F                     	;# 
  4283  1F43                     	;# 
  4284  1F44                     	;# 
  4285  1F45                     	;# 
  4286  1F46                     	;# 
  4287  1F47                     	;# 
  4288  1F48                     	;# 
  4289  1F49                     	;# 
  4290  1F4A                     	;# 
  4291  1F4E                     	;# 
  4292  1F4F                     	;# 
  4293  1F50                     	;# 
  4294  1F51                     	;# 
  4295  1F52                     	;# 
  4296  1F53                     	;# 
  4297  1F54                     	;# 
  4298  1F55                     	;# 
  4299  1F65                     	;# 
  4300  1F68                     	;# 
  4301  1F69                     	;# 
  4302  1F6A                     	;# 
  4303  1F6B                     	;# 
  4304  1FE4                     	;# 
  4305  1FE5                     	;# 
  4306  1FE6                     	;# 
  4307  1FE7                     	;# 
  4308  1FE8                     	;# 
  4309  1FE8                     	;# 
  4310  1FE9                     	;# 
  4311  1FEA                     	;# 
  4312  1FEB                     	;# 
  4313  1FED                     	;# 
  4314  1FEE                     	;# 
  4315  1FEF                     	;_data
  4316                           
  4317                           	psect	idataBANK0
  4318  0000                     __pidataBANK0:	
  4319                           
  4320                           	psect	idataBANK3
  4321  0000                     __pidataBANK3:	
  4322                           
  4323                           	psect	idataBANK4
  4324  0000                     __pidataBANK4:	
  4325                           
  4326                           	psect	stringtext1
  4327  3000                     __pstringtext1:	
  4328  3000                     _nextStateTbl:	
  4329  3000  3400               	retlw	0
  4330  3001  34FF               	retlw	255
  4331  3002  3401               	retlw	1
  4332  3003  3405               	retlw	5
  4333  3004  3400               	retlw	0
  4334  3005  3400               	retlw	0
  4335  3006  3401               	retlw	1
  4336  3007  34FF               	retlw	255
  4337  3008  3400               	retlw	0
  4338  3009  3402               	retlw	2
  4339  300A  3401               	retlw	1
  4340  300B  3401               	retlw	1
  4341  300C  3402               	retlw	2
  4342  300D  3400               	retlw	0
  4343  300E  3403               	retlw	3
  4344  300F  3401               	retlw	1
  4345  3010  3401               	retlw	1
  4346  3011  3402               	retlw	2
  4347  3012  3402               	retlw	2
  4348  3013  3401               	retlw	1
  4349  3014  3404               	retlw	4
  4350  3015  3401               	retlw	1
  4351  3016  3401               	retlw	1
  4352  3017  3402               	retlw	2
  4353  3018  3402               	retlw	2
  4354  3019  3402               	retlw	2
  4355  301A  3402               	retlw	2
  4356  301B  3401               	retlw	1
  4357  301C  3401               	retlw	1
  4358  301D  3402               	retlw	2
  4359  301E  3403               	retlw	3
  4360  301F  3400               	retlw	0
  4361  3020  3402               	retlw	2
  4362  3021  3402               	retlw	2
  4363  3022  3402               	retlw	2
  4364  3023  3403               	retlw	3
  4365  3024  3403               	retlw	3
  4366  3025  3401               	retlw	1
  4367  3026  3402               	retlw	2
  4368  3027  3402               	retlw	2
  4369  3028  3402               	retlw	2
  4370  3029  3402               	retlw	2
  4371  302A  3404               	retlw	4
  4372  302B  3400               	retlw	0
  4373  302C  3402               	retlw	2
  4374  302D  3402               	retlw	2
  4375  302E  3402               	retlw	2
  4376  302F  3402               	retlw	2
  4377  3030  3404               	retlw	4
  4378  3031  3401               	retlw	1
  4379  3032  3402               	retlw	2
  4380  3033  3402               	retlw	2
  4381  3034  3402               	retlw	2
  4382  3035  3404               	retlw	4
  4383  3036  3405               	retlw	5
  4384  3037  3400               	retlw	0
  4385  3038  3406               	retlw	6
  4386  3039  3400               	retlw	0
  4387  303A  3400               	retlw	0
  4388  303B  3405               	retlw	5
  4389  303C  3405               	retlw	5
  4390  303D  3401               	retlw	1
  4391  303E  3407               	retlw	7
  4392  303F  3400               	retlw	0
  4393  3040  3400               	retlw	0
  4394  3041  3405               	retlw	5
  4395  3042  3405               	retlw	5
  4396  3043  3402               	retlw	2
  4397  3044  3408               	retlw	8
  4398  3045  3400               	retlw	0
  4399  3046  3400               	retlw	0
  4400  3047  3405               	retlw	5
  4401  3048  3406               	retlw	6
  4402  3049  3400               	retlw	0
  4403  304A  3406               	retlw	6
  4404  304B  3405               	retlw	5
  4405  304C  3405               	retlw	5
  4406  304D  3405               	retlw	5
  4407  304E  3406               	retlw	6
  4408  304F  3401               	retlw	1
  4409  3050  3405               	retlw	5
  4410  3051  3405               	retlw	5
  4411  3052  3405               	retlw	5
  4412  3053  3406               	retlw	6
  4413  3054  3407               	retlw	7
  4414  3055  3400               	retlw	0
  4415  3056  3407               	retlw	7
  4416  3057  3405               	retlw	5
  4417  3058  3405               	retlw	5
  4418  3059  3405               	retlw	5
  4419  305A  3407               	retlw	7
  4420  305B  3401               	retlw	1
  4421  305C  3405               	retlw	5
  4422  305D  3405               	retlw	5
  4423  305E  3405               	retlw	5
  4424  305F  3407               	retlw	7
  4425  3060  3408               	retlw	8
  4426  3061  3400               	retlw	0
  4427  3062  3408               	retlw	8
  4428  3063  3405               	retlw	5
  4429  3064  3405               	retlw	5
  4430  3065  3405               	retlw	5
  4431  3066  3408               	retlw	8
  4432  3067  3401               	retlw	1
  4433  3068  3405               	retlw	5
  4434  3069  3405               	retlw	5
  4435  306A  3405               	retlw	5
  4436  306B  3408               	retlw	8
  4437  306C                     __end_of_nextStateTbl:	
  4438                           
  4439                           	psect	stringtext2
  4440  30DC                     __pstringtext2:	
  4441  30DC                     _specialChars:	
  4442  30DC  3418               	retlw	24
  4443  30DD  3418               	retlw	24
  4444  30DE  3403               	retlw	3
  4445  30DF  3404               	retlw	4
  4446  30E0  3404               	retlw	4
  4447  30E1  3404               	retlw	4
  4448  30E2  3403               	retlw	3
  4449  30E3  3400               	retlw	0
  4450  30E4  3400               	retlw	0
  4451  30E5  3400               	retlw	0
  4452  30E6  3400               	retlw	0
  4453  30E7  3404               	retlw	4
  4454  30E8  3400               	retlw	0
  4455  30E9  3400               	retlw	0
  4456  30EA  3400               	retlw	0
  4457  30EB  3400               	retlw	0
  4458  30EC  3401               	retlw	1
  4459  30ED  3401               	retlw	1
  4460  30EE  3405               	retlw	5
  4461  30EF  3409               	retlw	9
  4462  30F0  341F               	retlw	31
  4463  30F1  3408               	retlw	8
  4464  30F2  3404               	retlw	4
  4465  30F3  3400               	retlw	0
  4466  30F4  3400               	retlw	0
  4467  30F5  3410               	retlw	16
  4468  30F6  3418               	retlw	24
  4469  30F7  341C               	retlw	28
  4470  30F8  3418               	retlw	24
  4471  30F9  3410               	retlw	16
  4472  30FA  3400               	retlw	0
  4473  30FB  3400               	retlw	0
  4474  30FC                     __end_of_specialChars:	
  4475                           
  4476                           	psect	stringtext3
  4477  30FC                     __pstringtext3:	
  4478  30FC                     _transition_table:	
  4479  30FC  3400               	retlw	0
  4480  30FD  3404               	retlw	4
  4481  30FE  3401               	retlw	1
  4482  30FF  3400               	retlw	0
  4483  3100  3482               	retlw	130
  4484  3101  3400               	retlw	0
  4485  3102  3401               	retlw	1
  4486  3103  3400               	retlw	0
  4487  3104  3402               	retlw	2
  4488  3105  3403               	retlw	3
  4489  3106  3401               	retlw	1
  4490  3107  3400               	retlw	0
  4491  3108  3402               	retlw	2
  4492  3109  3403               	retlw	3
  4493  310A  3400               	retlw	0
  4494  310B  3480               	retlw	128
  4495  310C  3445               	retlw	69
  4496  310D  3404               	retlw	4
  4497  310E  3400               	retlw	0
  4498  310F  3400               	retlw	0
  4499  3110  3405               	retlw	5
  4500  3111  3404               	retlw	4
  4501  3112  3406               	retlw	6
  4502  3113  3400               	retlw	0
  4503  3114  3405               	retlw	5
  4504  3115  3400               	retlw	0
  4505  3116  3406               	retlw	6
  4506  3117  3440               	retlw	64
  4507  3118                     __end_of_transition_table:	
  4508                           
  4509                           	psect	stringtext4
  4510  306C                     __pstringtext4:	
  4511  306C                     _stateFuncTbl:	
  4512  306C  3442               	retlw	low _statusView
  4513  306D  3414               	retlw	high _statusView
  4514  306E  3409               	retlw	low _channelView
  4515  306F  3408               	retlw	high _channelView
  4516  3070  3469               	retlw	low _channelSetup
  4517  3071  3411               	retlw	high _channelSetup
  4518  3072  342E               	retlw	low _setOutputPower
  4519  3073  3410               	retlw	high _setOutputPower
  4520  3074  349E               	retlw	low _setLensDia
  4521  3075  3405               	retlw	high _setLensDia
  4522  3076  341D               	retlw	low _setup
  4523  3077  3420               	retlw	high _setup
  4524  3078  3468               	retlw	low _setDPOffset
  4525  3079  3404               	retlw	high _setDPOffset
  4526  307A  34CE               	retlw	low _setSkyTemp
  4527  307B  3404               	retlw	high _setSkyTemp
  4528  307C  3435               	retlw	low _setFudgeFactor
  4529  307D  3405               	retlw	high _setFudgeFactor
  4530  307E                     __end_of_stateFuncTbl:	
  4531  0018                     _LATAbits	set	24
  4532  000B                     _INTCONbits	set	11
  4533  000E                     _PORTCbits	set	14
  4534  0014                     _TRISCbits	set	20
  4535  000B                     _INTCON	set	11
  4536  0018                     _LATA	set	24
  4537  0014                     _TRISC	set	20
  4538  0013                     _TRISB	set	19
  4539  0012                     _TRISA	set	18
  4540  000C                     _PORTAbits	set	12
  4541  001A                     _LATCbits	set	26
  4542  0019                     _LATBbits	set	25
  4543  009B                     _ADRESL	set	155
  4544  009C                     _ADRESH	set	156
  4545  009E                     _ADCON1	set	158
  4546  009D                     _ADCON0bits	set	157
  4547  0119                     _RC1REG	set	281
  4548  011D                     _RC1STAbits	set	285
  4549  011A                     _TX1REG	set	282
  4550  011E                     _TX1STA	set	286
  4551  011D                     _RC1STA	set	285
  4552  011B                     _SPBRGL	set	283
  4553  011F                     _BAUD1CON	set	287
  4554  020C                     _TMR1	set	524
  4555  0211                     _T1CLK	set	529
  4556  020E                     _T1CON	set	526
  4557  059C                     _TMR0	set	1436
  4558  059F                     _T0CON1	set	1439
  4559  059E                     _T0CON0	set	1438
  4560  070F                     _PIR3bits	set	1807
  4561  0719                     _PIE3bits	set	1817
  4562  0710                     _PIR4bits	set	1808
  4563  071A                     _PIE4bits	set	1818
  4564  070C                     _PIR0bits	set	1804
  4565  0716                     _PIE0bits	set	1814
  4566  071A                     _PIE4	set	1818
  4567  0719                     _PIE3	set	1817
  4568  0716                     _PIE0	set	1814
  4569  081F                     _NVMCON2	set	2079
  4570  081C                     _NVMDATL	set	2076
  4571  081D                     _NVMDATH	set	2077
  4572  081E                     _NVMCON1bits	set	2078
  4573  081B                     _NVMADRH	set	2075
  4574  081A                     _NVMADRL	set	2074
  4575  088F                     _OSCCON3bits	set	2191
  4576  088D                     _OSCCON1	set	2189
  4577  0893                     _OSCFRQ	set	2195
  4578  1ECB                     _RX1DTPPSbits	set	7883
  4579  1F3F                     _IOCAFbits	set	7999
  4580  1F54                     _IOCCN	set	8020
  4581  1F3E                     _IOCAN	set	7998
  4582  1F3D                     _IOCAP	set	7997
  4583  1F4E                     _ANSELC	set	8014
  4584  1F43                     _ANSELB	set	8003
  4585  1F38                     _ANSELA	set	7992
  4586  1F26                     _RC6PPS	set	7974
  4587  307E                     STR_1:	
  4588  307E  3454               	retlw	84	;'T'
  4589  307F  3465               	retlw	101	;'e'
  4590  3080  346D               	retlw	109	;'m'
  4591  3081  3470               	retlw	112	;'p'
  4592  3082  3465               	retlw	101	;'e'
  4593  3083  3472               	retlw	114	;'r'
  4594  3084  3461               	retlw	97	;'a'
  4595  3085  3474               	retlw	116	;'t'
  4596  3086  3475               	retlw	117	;'u'
  4597  3087  3472               	retlw	114	;'r'
  4598  3088  3465               	retlw	101	;'e'
  4599  3089  3420               	retlw	32	;' '
  4600  308A  3452               	retlw	82	;'R'
  4601  308B  3465               	retlw	101	;'e'
  4602  308C  346C               	retlw	108	;'l'
  4603  308D  342E               	retlw	46	;'.'
  4604  308E  3468               	retlw	104	;'h'
  4605  308F  3475               	retlw	117	;'u'
  4606  3090  346D               	retlw	109	;'m'
  4607  3091  3469               	retlw	105	;'i'
  4608  3092  3464               	retlw	100	;'d'
  4609  3093  3469               	retlw	105	;'i'
  4610  3094  3474               	retlw	116	;'t'
  4611  3095  3479               	retlw	121	;'y'
  4612  3096  3444               	retlw	68	;'D'
  4613  3097  3465               	retlw	101	;'e'
  4614  3098  3477               	retlw	119	;'w'
  4615  3099  3470               	retlw	112	;'p'
  4616  309A  346F               	retlw	111	;'o'
  4617  309B  3469               	retlw	105	;'i'
  4618  309C  346E               	retlw	110	;'n'
  4619  309D  3474               	retlw	116	;'t'
  4620  309E  3420               	retlw	32	;' '
  4621  309F  3420               	retlw	32	;' '
  4622  30A0  3420               	retlw	32	;' '
  4623  30A1  3420               	retlw	32	;' '
  4624  30A2  3442               	retlw	66	;'B'
  4625  30A3  3461               	retlw	97	;'a'
  4626  30A4  3474               	retlw	116	;'t'
  4627  30A5  342E               	retlw	46	;'.'
  4628  30A6  3420               	retlw	32	;' '
  4629  30A7  3420               	retlw	32	;' '
  4630  30A8  3420               	retlw	32	;' '
  4631  30A9  3450               	retlw	80	;'P'
  4632  30AA  346F               	retlw	111	;'o'
  4633  30AB  3477               	retlw	119	;'w'
  4634  30AC  3465               	retlw	101	;'e'
  4635  30AD  3472               	retlw	114	;'r'
  4636  30AE  3456               	retlw	86	;'V'
  4637  30AF  3465               	retlw	101	;'e'
  4638  30B0  3472               	retlw	114	;'r'
  4639  30B1  3473               	retlw	115	;'s'
  4640  30B2  3469               	retlw	105	;'i'
  4641  30B3  346F               	retlw	111	;'o'
  4642  30B4  346E               	retlw	110	;'n'
  4643  30B5  343A               	retlw	58	;':'
  4644  30B6  3400               	retlw	0
  4645                           
  4646                           	psect	stringtext5
  4647  30B7                     __pstringtext5:	
  4648  30B7                     STR_48:	
  4649  30B7  3444               	retlw	68	;'D'
  4650  30B8  3450               	retlw	80	;'P'
  4651  30B9  3420               	retlw	32	;' '
  4652  30BA  346F               	retlw	111	;'o'
  4653  30BB  3466               	retlw	102	;'f'
  4654  30BC  3466               	retlw	102	;'f'
  4655  30BD  3473               	retlw	115	;'s'
  4656  30BE  3465               	retlw	101	;'e'
  4657  30BF  3474               	retlw	116	;'t'
  4658  30C0  3420               	retlw	32	;' '
  4659  30C1  3420               	retlw	32	;' '
  4660  30C2  3420               	retlw	32	;' '
  4661  30C3  3453               	retlw	83	;'S'
  4662  30C4  346B               	retlw	107	;'k'
  4663  30C5  3479               	retlw	121	;'y'
  4664  30C6  3420               	retlw	32	;' '
  4665  30C7  3474               	retlw	116	;'t'
  4666  30C8  3465               	retlw	101	;'e'
  4667  30C9  346D               	retlw	109	;'m'
  4668  30CA  3470               	retlw	112	;'p'
  4669  30CB  342E               	retlw	46	;'.'
  4670  30CC  3420               	retlw	32	;' '
  4671  30CD  3420               	retlw	32	;' '
  4672  30CE  3420               	retlw	32	;' '
  4673  30CF  3446               	retlw	70	;'F'
  4674  30D0  3475               	retlw	117	;'u'
  4675  30D1  3464               	retlw	100	;'d'
  4676  30D2  3467               	retlw	103	;'g'
  4677  30D3  3465               	retlw	101	;'e'
  4678  30D4  3420               	retlw	32	;' '
  4679  30D5  3466               	retlw	102	;'f'
  4680  30D6  3461               	retlw	97	;'a'
  4681  30D7  3463               	retlw	99	;'c'
  4682  30D8  3474               	retlw	116	;'t'
  4683  30D9  346F               	retlw	111	;'o'
  4684  30DA  3472               	retlw	114	;'r'
  4685  30DB  3400               	retlw	0
  4686                           
  4687                           	psect	stringtext6
  4688  3118                     __pstringtext6:	
  4689  3118                     STR_74:	
  4690  3118  3448               	retlw	72	;'H'
  4691  3119  3465               	retlw	101	;'e'
  4692  311A  3461               	retlw	97	;'a'
  4693  311B  3474               	retlw	116	;'t'
  4694  311C  3465               	retlw	101	;'e'
  4695  311D  3472               	retlw	114	;'r'
  4696  311E  3420               	retlw	32	;' '
  4697  311F  3420               	retlw	32	;' '
  4698  3120  3420               	retlw	32	;' '
  4699  3121  3420               	retlw	32	;' '
  4700  3122  3420               	retlw	32	;' '
  4701  3123  3420               	retlw	32	;' '
  4702  3124  3400               	retlw	0
  4703                           
  4704                           	psect	stringtext7
  4705  3125                     __pstringtext7:	
  4706  3125                     STR_80:	
  4707  3125  3453               	retlw	83	;'S'
  4708  3126  3465               	retlw	101	;'e'
  4709  3127  346E               	retlw	110	;'n'
  4710  3128  3473               	retlw	115	;'s'
  4711  3129  346F               	retlw	111	;'o'
  4712  312A  3472               	retlw	114	;'r'
  4713  312B  3420               	retlw	32	;' '
  4714  312C  3420               	retlw	32	;' '
  4715  312D  3420               	retlw	32	;' '
  4716  312E  3420               	retlw	32	;' '
  4717  312F  3420               	retlw	32	;' '
  4718  3130  3420               	retlw	32	;' '
  4719  3131  3400               	retlw	0
  4720                           
  4721                           	psect	stringtext8
  4722  3132                     __pstringtext8:	
  4723  3132                     STR_70:	
  4724  3132  344F               	retlw	79	;'O'
  4725  3133  3475               	retlw	117	;'u'
  4726  3134  3474               	retlw	116	;'t'
  4727  3135  3470               	retlw	112	;'p'
  4728  3136  3475               	retlw	117	;'u'
  4729  3137  3474               	retlw	116	;'t'
  4730  3138  3420               	retlw	32	;' '
  4731  3139  3420               	retlw	32	;' '
  4732  313A  3420               	retlw	32	;' '
  4733  313B  3420               	retlw	32	;' '
  4734  313C  3420               	retlw	32	;' '
  4735  313D  3420               	retlw	32	;' '
  4736  313E  3400               	retlw	0
  4737                           
  4738                           	psect	stringtext9
  4739  313F                     __pstringtext9:	
  4740  313F                     STR_91:	
  4741  313F  3420               	retlw	32	;' '
  4742  3140  3420               	retlw	32	;' '
  4743  3141  3420               	retlw	32	;' '
  4744  3142  3420               	retlw	32	;' '
  4745  3143  343A               	retlw	58	;':'
  4746  3144  342D               	retlw	45	;'-'
  4747  3145  3429               	retlw	41	;')'
  4748  3146  3420               	retlw	32	;' '
  4749  3147  3420               	retlw	32	;' '
  4750  3148  3420               	retlw	32	;' '
  4751  3149  3420               	retlw	32	;' '
  4752  314A  3420               	retlw	32	;' '
  4753  314B  3400               	retlw	0
  4754                           
  4755                           	psect	stringtext10
  4756  314C                     __pstringtext10:	
  4757  314C                     STR_63:	
  4758  314C  3472               	retlw	114	;'r'
  4759  314D  3465               	retlw	101	;'e'
  4760  314E  346D               	retlw	109	;'m'
  4761  314F  346F               	retlw	111	;'o'
  4762  3150  3476               	retlw	118	;'v'
  4763  3151  3465               	retlw	101	;'e'
  4764  3152  3464               	retlw	100	;'d'
  4765  3153  3420               	retlw	32	;' '
  4766  3154  3420               	retlw	32	;' '
  4767  3155  3420               	retlw	32	;' '
  4768  3156  3420               	retlw	32	;' '
  4769  3157  3420               	retlw	32	;' '
  4770  3158  3400               	retlw	0
  4771                           
  4772                           	psect	stringtext11
  4773  3159                     __pstringtext11:	
  4774  3159                     STR_92:	
  4775  3159  3455               	retlw	85	;'U'
  4776  315A  346E               	retlw	110	;'n'
  4777  315B  346B               	retlw	107	;'k'
  4778  315C  346E               	retlw	110	;'n'
  4779  315D  346F               	retlw	111	;'o'
  4780  315E  3477               	retlw	119	;'w'
  4781  315F  346E               	retlw	110	;'n'
  4782  3160  3420               	retlw	32	;' '
  4783  3161  3420               	retlw	32	;' '
  4784  3162  3420               	retlw	32	;' '
  4785  3163  3420               	retlw	32	;' '
  4786  3164  3420               	retlw	32	;' '
  4787  3165  3400               	retlw	0
  4788                           
  4789                           	psect	stringtext12
  4790  3166                     __pstringtext12:	
  4791  3166                     STR_81:	
  4792  3166  3474               	retlw	116	;'t'
  4793  3167  3469               	retlw	105	;'i'
  4794  3168  346D               	retlw	109	;'m'
  4795  3169  3465               	retlw	101	;'e'
  4796  316A  346F               	retlw	111	;'o'
  4797  316B  3475               	retlw	117	;'u'
  4798  316C  3474               	retlw	116	;'t'
  4799  316D  3420               	retlw	32	;' '
  4800  316E  3420               	retlw	32	;' '
  4801  316F  3420               	retlw	32	;' '
  4802  3170  3420               	retlw	32	;' '
  4803  3171  3420               	retlw	32	;' '
  4804  3172  3400               	retlw	0
  4805                           
  4806                           	psect	stringtext13
  4807  3173                     __pstringtext13:	
  4808  3173                     STR_71:	
  4809  3173  3473               	retlw	115	;'s'
  4810  3174  3468               	retlw	104	;'h'
  4811  3175  346F               	retlw	111	;'o'
  4812  3176  3472               	retlw	114	;'r'
  4813  3177  3474               	retlw	116	;'t'
  4814  3178  3465               	retlw	101	;'e'
  4815  3179  3464               	retlw	100	;'d'
  4816  317A  3421               	retlw	33	;'!'
  4817  317B  3420               	retlw	32	;' '
  4818  317C  3420               	retlw	32	;' '
  4819  317D  3420               	retlw	32	;' '
  4820  317E  3420               	retlw	32	;' '
  4821  317F  3400               	retlw	0
  4822                           
  4823                           	psect	stringtext14
  4824  3180                     __pstringtext14:	
  4825  3180                     STR_79:	
  4826  3180  3474               	retlw	116	;'t'
  4827  3181  346F               	retlw	111	;'o'
  4828  3182  346F               	retlw	111	;'o'
  4829  3183  3420               	retlw	32	;' '
  4830  3184  346C               	retlw	108	;'l'
  4831  3185  346F               	retlw	111	;'o'
  4832  3186  3477               	retlw	119	;'w'
  4833  3187  3421               	retlw	33	;'!'
  4834  3188  3420               	retlw	32	;' '
  4835  3189  3420               	retlw	32	;' '
  4836  318A  3420               	retlw	32	;' '
  4837  318B  3420               	retlw	32	;' '
  4838  318C  3400               	retlw	0
  4839                           
  4840                           	psect	stringtext15
  4841  318D                     __pstringtext15:	
  4842  318D                     STR_62:	
  4843  318D  3448               	retlw	72	;'H'
  4844  318E  3465               	retlw	101	;'e'
  4845  318F  3461               	retlw	97	;'a'
  4846  3190  3474               	retlw	116	;'t'
  4847  3191  3465               	retlw	101	;'e'
  4848  3192  3472               	retlw	114	;'r'
  4849  3193  3420               	retlw	32	;' '
  4850  3194  3431               	retlw	49	;'1'
  4851  3195  3420               	retlw	32	;' '
  4852  3196  3420               	retlw	32	;' '
  4853  3197  3420               	retlw	32	;' '
  4854  3198  3420               	retlw	32	;' '
  4855  3199  3400               	retlw	0
  4856                           
  4857                           	psect	stringtext16
  4858  319A                     __pstringtext16:	
  4859  319A                     STR_64:	
  4860  319A  3448               	retlw	72	;'H'
  4861  319B  3465               	retlw	101	;'e'
  4862  319C  3461               	retlw	97	;'a'
  4863  319D  3474               	retlw	116	;'t'
  4864  319E  3465               	retlw	101	;'e'
  4865  319F  3472               	retlw	114	;'r'
  4866  31A0  3420               	retlw	32	;' '
  4867  31A1  3432               	retlw	50	;'2'
  4868  31A2  3420               	retlw	32	;' '
  4869  31A3  3420               	retlw	32	;' '
  4870  31A4  3420               	retlw	32	;' '
  4871  31A5  3420               	retlw	32	;' '
  4872  31A6  3400               	retlw	0
  4873                           
  4874                           	psect	stringtext17
  4875  31A7                     __pstringtext17:	
  4876  31A7                     STR_66:	
  4877  31A7  3448               	retlw	72	;'H'
  4878  31A8  3465               	retlw	101	;'e'
  4879  31A9  3461               	retlw	97	;'a'
  4880  31AA  3474               	retlw	116	;'t'
  4881  31AB  3465               	retlw	101	;'e'
  4882  31AC  3472               	retlw	114	;'r'
  4883  31AD  3420               	retlw	32	;' '
  4884  31AE  3433               	retlw	51	;'3'
  4885  31AF  3420               	retlw	32	;' '
  4886  31B0  3420               	retlw	32	;' '
  4887  31B1  3420               	retlw	32	;' '
  4888  31B2  3420               	retlw	32	;' '
  4889  31B3  3400               	retlw	0
  4890                           
  4891                           	psect	stringtext18
  4892  31B4                     __pstringtext18:	
  4893  31B4                     STR_68:	
  4894  31B4  3448               	retlw	72	;'H'
  4895  31B5  3465               	retlw	101	;'e'
  4896  31B6  3461               	retlw	97	;'a'
  4897  31B7  3474               	retlw	116	;'t'
  4898  31B8  3465               	retlw	101	;'e'
  4899  31B9  3472               	retlw	114	;'r'
  4900  31BA  3420               	retlw	32	;' '
  4901  31BB  3434               	retlw	52	;'4'
  4902  31BC  3420               	retlw	32	;' '
  4903  31BD  3420               	retlw	32	;' '
  4904  31BE  3420               	retlw	32	;' '
  4905  31BF  3420               	retlw	32	;' '
  4906  31C0  3400               	retlw	0
  4907                           
  4908                           	psect	stringtext19
  4909  31C1                     __pstringtext19:	
  4910  31C1                     STR_83:	
  4911  31C1  3463               	retlw	99	;'c'
  4912  31C2  3468               	retlw	104	;'h'
  4913  31C3  3465               	retlw	101	;'e'
  4914  31C4  3463               	retlw	99	;'c'
  4915  31C5  346B               	retlw	107	;'k'
  4916  31C6  3473               	retlw	115	;'s'
  4917  31C7  3475               	retlw	117	;'u'
  4918  31C8  346D               	retlw	109	;'m'
  4919  31C9  3420               	retlw	32	;' '
  4920  31CA  3420               	retlw	32	;' '
  4921  31CB  3420               	retlw	32	;' '
  4922  31CC  3420               	retlw	32	;' '
  4923  31CD  3400               	retlw	0
  4924                           
  4925                           	psect	stringtext20
  4926  31CE                     __pstringtext20:	
  4927  31CE                     STR_73:	
  4928  31CE  3464               	retlw	100	;'d'
  4929  31CF  3465               	retlw	101	;'e'
  4930  31D0  3474               	retlw	116	;'t'
  4931  31D1  3465               	retlw	101	;'e'
  4932  31D2  3463               	retlw	99	;'c'
  4933  31D3  3474               	retlw	116	;'t'
  4934  31D4  3465               	retlw	101	;'e'
  4935  31D5  3464               	retlw	100	;'d'
  4936  31D6  3421               	retlw	33	;'!'
  4937  31D7  3420               	retlw	32	;' '
  4938  31D8  3420               	retlw	32	;' '
  4939  31D9  3420               	retlw	32	;' '
  4940  31DA  3400               	retlw	0
  4941                           
  4942                           	psect	stringtext21
  4943  31DB                     __pstringtext21:	
  4944  31DB                     STR_77:	
  4945  31DB  3474               	retlw	116	;'t'
  4946  31DC  346F               	retlw	111	;'o'
  4947  31DD  346F               	retlw	111	;'o'
  4948  31DE  3420               	retlw	32	;' '
  4949  31DF  3468               	retlw	104	;'h'
  4950  31E0  3469               	retlw	105	;'i'
  4951  31E1  3467               	retlw	103	;'g'
  4952  31E2  3468               	retlw	104	;'h'
  4953  31E3  3421               	retlw	33	;'!'
  4954  31E4  3420               	retlw	32	;' '
  4955  31E5  3420               	retlw	32	;' '
  4956  31E6  3420               	retlw	32	;' '
  4957  31E7  3400               	retlw	0
  4958                           
  4959                           	psect	stringtext22
  4960  31E8                     __pstringtext22:	
  4961  31E8                     STR_93:	
  4962  31E8  3465               	retlw	101	;'e'
  4963  31E9  3472               	retlw	114	;'r'
  4964  31EA  3472               	retlw	114	;'r'
  4965  31EB  346F               	retlw	111	;'o'
  4966  31EC  3472               	retlw	114	;'r'
  4967  31ED  3420               	retlw	32	;' '
  4968  31EE  3463               	retlw	99	;'c'
  4969  31EF  346F               	retlw	111	;'o'
  4970  31F0  3464               	retlw	100	;'d'
  4971  31F1  3465               	retlw	101	;'e'
  4972  31F2  3420               	retlw	32	;' '
  4973  31F3  3420               	retlw	32	;' '
  4974  31F4  3400               	retlw	0
  4975                           
  4976                           	psect	stringtext23
  4977  31F5                     __pstringtext23:	
  4978  31F5                     STR_84:	
  4979  31F5  344F               	retlw	79	;'O'
  4980  31F6  3456               	retlw	86	;'V'
  4981  31F7  3445               	retlw	69	;'E'
  4982  31F8  3452               	retlw	82	;'R'
  4983  31F9  3443               	retlw	67	;'C'
  4984  31FA  3455               	retlw	85	;'U'
  4985  31FB  3452               	retlw	82	;'R'
  4986  31FC  3452               	retlw	82	;'R'
  4987  31FD  3445               	retlw	69	;'E'
  4988  31FE  344E               	retlw	78	;'N'
  4989  31FF  3454               	retlw	84	;'T'
  4990  3200  3420               	retlw	32	;' '
  4991  3201  3400               	retlw	0
  4992                           
  4993                           	psect	stringtext24
  4994  3202                     __pstringtext24:	
  4995  3202                     STR_90:	
  4996  3202  344D               	retlw	77	;'M'
  4997  3203  3465               	retlw	101	;'e'
  4998  3204  346E               	retlw	110	;'n'
  4999  3205  3475               	retlw	117	;'u'
  5000  3206  3420               	retlw	32	;' '
  5001  3207  3462               	retlw	98	;'b'
  5002  3208  3472               	retlw	114	;'r'
  5003  3209  346F               	retlw	111	;'o'
  5004  320A  346B               	retlw	107	;'k'
  5005  320B  3465               	retlw	101	;'e'
  5006  320C  346E               	retlw	110	;'n'
  5007  320D  3420               	retlw	32	;' '
  5008  320E  3400               	retlw	0
  5009                           
  5010                           	psect	stringtext25
  5011  320F                     __pstringtext25:	
  5012  320F                     STR_72:	
  5013  320F  344F               	retlw	79	;'O'
  5014  3210  3476               	retlw	118	;'v'
  5015  3211  3465               	retlw	101	;'e'
  5016  3212  3472               	retlw	114	;'r'
  5017  3213  3463               	retlw	99	;'c'
  5018  3214  3475               	retlw	117	;'u'
  5019  3215  3472               	retlw	114	;'r'
  5020  3216  3472               	retlw	114	;'r'
  5021  3217  3465               	retlw	101	;'e'
  5022  3218  346E               	retlw	110	;'n'
  5023  3219  3474               	retlw	116	;'t'
  5024  321A  3420               	retlw	32	;' '
  5025  321B  3400               	retlw	0
  5026                           
  5027                           	psect	stringtext26
  5028  321C                     __pstringtext26:	
  5029  321C                     STR_75:	
  5030  321C  346F               	retlw	111	;'o'
  5031  321D  3476               	retlw	118	;'v'
  5032  321E  3465               	retlw	101	;'e'
  5033  321F  3472               	retlw	114	;'r'
  5034  3220  3463               	retlw	99	;'c'
  5035  3221  3475               	retlw	117	;'u'
  5036  3222  3472               	retlw	114	;'r'
  5037  3223  3472               	retlw	114	;'r'
  5038  3224  3465               	retlw	101	;'e'
  5039  3225  346E               	retlw	110	;'n'
  5040  3226  3474               	retlw	116	;'t'
  5041  3227  3420               	retlw	32	;' '
  5042  3228  3400               	retlw	0
  5043                           
  5044                           	psect	stringtext27
  5045  3229                     __pstringtext27:	
  5046  3229                     STR_76:	
  5047  3229  3453               	retlw	83	;'S'
  5048  322A  3475               	retlw	117	;'u'
  5049  322B  3470               	retlw	112	;'p'
  5050  322C  3470               	retlw	112	;'p'
  5051  322D  346C               	retlw	108	;'l'
  5052  322E  3479               	retlw	121	;'y'
  5053  322F  3420               	retlw	32	;' '
  5054  3230  3476               	retlw	118	;'v'
  5055  3231  346F               	retlw	111	;'o'
  5056  3232  346C               	retlw	108	;'l'
  5057  3233  3474               	retlw	116	;'t'
  5058  3234  342E               	retlw	46	;'.'
  5059  3235  3400               	retlw	0
  5060                           
  5061                           	psect	stringtext28
  5062  3236                     __pstringtext28:	
  5063  3236                     STR_86:	
  5064  3236  3456               	retlw	86	;'V'
  5065  3237  344F               	retlw	79	;'O'
  5066  3238  344C               	retlw	76	;'L'
  5067  3239  3454               	retlw	84	;'T'
  5068  323A  3441               	retlw	65	;'A'
  5069  323B  3447               	retlw	71	;'G'
  5070  323C  3445               	retlw	69	;'E'
  5071  323D  3420               	retlw	32	;' '
  5072  323E  3448               	retlw	72	;'H'
  5073  323F  3449               	retlw	73	;'I'
  5074  3240  3447               	retlw	71	;'G'
  5075  3241  3448               	retlw	72	;'H'
  5076  3242  3400               	retlw	0
  5077                           
  5078                           	psect	stringtext29
  5079  3243                     __pstringtext29:	
  5080  3243                     STR_85:	
  5081  3243  3454               	retlw	84	;'T'
  5082  3244  3455               	retlw	85	;'U'
  5083  3245  3452               	retlw	82	;'R'
  5084  3246  344E               	retlw	78	;'N'
  5085  3247  3420               	retlw	32	;' '
  5086  3248  344F               	retlw	79	;'O'
  5087  3249  3446               	retlw	70	;'F'
  5088  324A  3446               	retlw	70	;'F'
  5089  324B  3420               	retlw	32	;' '
  5090  324C  344E               	retlw	78	;'N'
  5091  324D  344F               	retlw	79	;'O'
  5092  324E  3457               	retlw	87	;'W'
  5093  324F  3400               	retlw	0
  5094                           
  5095                           	psect	stringtext30
  5096  3250                     __pstringtext30:	
  5097  3250                     STR_82:	
  5098  3250  3453               	retlw	83	;'S'
  5099  3251  3465               	retlw	101	;'e'
  5100  3252  346E               	retlw	110	;'n'
  5101  3253  3473               	retlw	115	;'s'
  5102  3254  346F               	retlw	111	;'o'
  5103  3255  3472               	retlw	114	;'r'
  5104  3256  3420               	retlw	32	;' '
  5105  3257  3477               	retlw	119	;'w'
  5106  3258  3472               	retlw	114	;'r'
  5107  3259  346F               	retlw	111	;'o'
  5108  325A  346E               	retlw	110	;'n'
  5109  325B  3467               	retlw	103	;'g'
  5110  325C  3400               	retlw	0
  5111                           
  5112                           	psect	stringtext31
  5113  325D                     __pstringtext31:	
  5114  325D                     STR_89:	
  5115  325D  3450               	retlw	80	;'P'
  5116  325E  346C               	retlw	108	;'l'
  5117  325F  3465               	retlw	101	;'e'
  5118  3260  3461               	retlw	97	;'a'
  5119  3261  3473               	retlw	115	;'s'
  5120  3262  3465               	retlw	101	;'e'
  5121  3263  3420               	retlw	32	;' '
  5122  3264  3463               	retlw	99	;'c'
  5123  3265  3468               	retlw	104	;'h'
  5124  3266  3465               	retlw	101	;'e'
  5125  3267  3463               	retlw	99	;'c'
  5126  3268  346B               	retlw	107	;'k'
  5127  3269  3400               	retlw	0
  5128                           
  5129                           	psect	stringtext32
  5130  326A                     __pstringtext32:	
  5131  326A                     STR_28:	
  5132  326A  344E               	retlw	78	;'N'
  5133  326B  346F               	retlw	111	;'o'
  5134  326C  3474               	retlw	116	;'t'
  5135  326D  3420               	retlw	32	;' '
  5136  326E  3420               	retlw	32	;' '
  5137  326F  3420               	retlw	32	;' '
  5138  3270  3420               	retlw	32	;' '
  5139  3271  3420               	retlw	32	;' '
  5140  3272  3420               	retlw	32	;' '
  5141  3273  3420               	retlw	32	;' '
  5142  3274  3420               	retlw	32	;' '
  5143  3275  3420               	retlw	32	;' '
  5144  3276  3400               	retlw	0
  5145                           
  5146                           	psect	stringtext33
  5147  3277                     __pstringtext33:	
  5148  3277                     STR_32:	
  5149  3277  3452               	retlw	82	;'R'
  5150  3278  3465               	retlw	101	;'e'
  5151  3279  3473               	retlw	115	;'s'
  5152  327A  3465               	retlw	101	;'e'
  5153  327B  3474               	retlw	116	;'t'
  5154  327C  3420               	retlw	32	;' '
  5155  327D  3420               	retlw	32	;' '
  5156  327E  3420               	retlw	32	;' '
  5157  327F  3420               	retlw	32	;' '
  5158  3280  3420               	retlw	32	;' '
  5159  3281  3420               	retlw	32	;' '
  5160  3282  3420               	retlw	32	;' '
  5161  3283  3400               	retlw	0
  5162                           
  5163                           	psect	stringtext34
  5164  3284                     __pstringtext34:	
  5165  3284                     STR_30:	
  5166  3284  3454               	retlw	84	;'T'
  5167  3285  3465               	retlw	101	;'e'
  5168  3286  3473               	retlw	115	;'s'
  5169  3287  3474               	retlw	116	;'t'
  5170  3288  3469               	retlw	105	;'i'
  5171  3289  346E               	retlw	110	;'n'
  5172  328A  3467               	retlw	103	;'g'
  5173  328B  3420               	retlw	32	;' '
  5174  328C  3420               	retlw	32	;' '
  5175  328D  3420               	retlw	32	;' '
  5176  328E  3420               	retlw	32	;' '
  5177  328F  3420               	retlw	32	;' '
  5178  3290  3400               	retlw	0
  5179                           
  5180                           	psect	stringtext35
  5181  3291                     __pstringtext35:	
  5182  3291                     STR_33:	
  5183  3291  3463               	retlw	99	;'c'
  5184  3292  3468               	retlw	104	;'h'
  5185  3293  3461               	retlw	97	;'a'
  5186  3294  346E               	retlw	110	;'n'
  5187  3295  346E               	retlw	110	;'n'
  5188  3296  3465               	retlw	101	;'e'
  5189  3297  346C               	retlw	108	;'l'
  5190  3298  3420               	retlw	32	;' '
  5191  3299  3420               	retlw	32	;' '
  5192  329A  3420               	retlw	32	;' '
  5193  329B  3420               	retlw	32	;' '
  5194  329C  3420               	retlw	32	;' '
  5195  329D  3400               	retlw	0
  5196                           
  5197                           	psect	stringtext36
  5198  329E                     __pstringtext36:	
  5199  329E                     STR_19:	
  5200  329E  3453               	retlw	83	;'S'
  5201  329F  3468               	retlw	104	;'h'
  5202  32A0  346F               	retlw	111	;'o'
  5203  32A1  3472               	retlw	114	;'r'
  5204  32A2  3474               	retlw	116	;'t'
  5205  32A3  3465               	retlw	101	;'e'
  5206  32A4  3464               	retlw	100	;'d'
  5207  32A5  3421               	retlw	33	;'!'
  5208  32A6  3420               	retlw	32	;' '
  5209  32A7  3420               	retlw	32	;' '
  5210  32A8  3420               	retlw	32	;' '
  5211  32A9  3420               	retlw	32	;' '
  5212  32AA  3400               	retlw	0
  5213                           
  5214                           	psect	stringtext37
  5215  32AB                     __pstringtext37:	
  5216  32AB                     STR_14:	
  5217  32AB  3444               	retlw	68	;'D'
  5218  32AC  3469               	retlw	105	;'i'
  5219  32AD  3473               	retlw	115	;'s'
  5220  32AE  3461               	retlw	97	;'a'
  5221  32AF  3462               	retlw	98	;'b'
  5222  32B0  346C               	retlw	108	;'l'
  5223  32B1  3465               	retlw	101	;'e'
  5224  32B2  3464               	retlw	100	;'d'
  5225  32B3  3420               	retlw	32	;' '
  5226  32B4  3420               	retlw	32	;' '
  5227  32B5  3420               	retlw	32	;' '
  5228  32B6  3420               	retlw	32	;' '
  5229  32B7  3400               	retlw	0
  5230                           
  5231                           	psect	stringtext38
  5232  32B8                     __pstringtext38:	
  5233  32B8                     STR_31:	
  5234  32B8  3468               	retlw	104	;'h'
  5235  32B9  3465               	retlw	101	;'e'
  5236  32BA  3461               	retlw	97	;'a'
  5237  32BB  3474               	retlw	116	;'t'
  5238  32BC  3465               	retlw	101	;'e'
  5239  32BD  3472               	retlw	114	;'r'
  5240  32BE  342E               	retlw	46	;'.'
  5241  32BF  342E               	retlw	46	;'.'
  5242  32C0  342E               	retlw	46	;'.'
  5243  32C1  3420               	retlw	32	;' '
  5244  32C2  3420               	retlw	32	;' '
  5245  32C3  3420               	retlw	32	;' '
  5246  32C4  3400               	retlw	0
  5247                           
  5248                           	psect	stringtext39
  5249  32C5                     __pstringtext39:	
  5250  32C5                     STR_56:	
  5251  32C5  3453               	retlw	83	;'S'
  5252  32C6  346B               	retlw	107	;'k'
  5253  32C7  3479               	retlw	121	;'y'
  5254  32C8  3420               	retlw	32	;' '
  5255  32C9  3474               	retlw	116	;'t'
  5256  32CA  3465               	retlw	101	;'e'
  5257  32CB  346D               	retlw	109	;'m'
  5258  32CC  3470               	retlw	112	;'p'
  5259  32CD  342E               	retlw	46	;'.'
  5260  32CE  3420               	retlw	32	;' '
  5261  32CF  3420               	retlw	32	;' '
  5262  32D0  3420               	retlw	32	;' '
  5263  32D1  3400               	retlw	0
  5264                           
  5265                           	psect	stringtext40
  5266  32D2                     __pstringtext40:	
  5267  32D2                     STR_29:	
  5268  32D2  3463               	retlw	99	;'c'
  5269  32D3  346F               	retlw	111	;'o'
  5270  32D4  346E               	retlw	110	;'n'
  5271  32D5  346E               	retlw	110	;'n'
  5272  32D6  3465               	retlw	101	;'e'
  5273  32D7  3463               	retlw	99	;'c'
  5274  32D8  3474               	retlw	116	;'t'
  5275  32D9  3465               	retlw	101	;'e'
  5276  32DA  3464               	retlw	100	;'d'
  5277  32DB  3420               	retlw	32	;' '
  5278  32DC  3420               	retlw	32	;' '
  5279  32DD  3420               	retlw	32	;' '
  5280  32DE  3400               	retlw	0
  5281                           
  5282                           	psect	stringtext41
  5283  32DF                     __pstringtext41:	
  5284  32DF                     STR_53:	
  5285  32DF  3444               	retlw	68	;'D'
  5286  32E0  3450               	retlw	80	;'P'
  5287  32E1  3420               	retlw	32	;' '
  5288  32E2  346F               	retlw	111	;'o'
  5289  32E3  3466               	retlw	102	;'f'
  5290  32E4  3466               	retlw	102	;'f'
  5291  32E5  3473               	retlw	115	;'s'
  5292  32E6  3465               	retlw	101	;'e'
  5293  32E7  3474               	retlw	116	;'t'
  5294  32E8  3420               	retlw	32	;' '
  5295  32E9  3420               	retlw	32	;' '
  5296  32EA  3420               	retlw	32	;' '
  5297  32EB  3400               	retlw	0
  5298                           
  5299                           	psect	stringtext42
  5300  32EC                     __pstringtext42:	
  5301  32EC                     STR_34:	
  5302  32EC  344C               	retlw	76	;'L'
  5303  32ED  3465               	retlw	101	;'e'
  5304  32EE  346E               	retlw	110	;'n'
  5305  32EF  3473               	retlw	115	;'s'
  5306  32F0  3420               	retlw	32	;' '
  5307  32F1  3464               	retlw	100	;'d'
  5308  32F2  3469               	retlw	105	;'i'
  5309  32F3  3461               	retlw	97	;'a'
  5310  32F4  346D               	retlw	109	;'m'
  5311  32F5  342E               	retlw	46	;'.'
  5312  32F6  3420               	retlw	32	;' '
  5313  32F7  3420               	retlw	32	;' '
  5314  32F8  3400               	retlw	0
  5315                           
  5316                           	psect	stringtext43
  5317  32F9                     __pstringtext43:	
  5318  32F9                     STR_43:	
  5319  32F9  3448               	retlw	72	;'H'
  5320  32FA  346F               	retlw	111	;'o'
  5321  32FB  346C               	retlw	108	;'l'
  5322  32FC  3464               	retlw	100	;'d'
  5323  32FD  3420               	retlw	32	;' '
  5324  32FE  3462               	retlw	98	;'b'
  5325  32FF  3475               	retlw	117	;'u'
  5326  3300  3474               	retlw	116	;'t'
  5327  3301  3474               	retlw	116	;'t'
  5328  3302  346F               	retlw	111	;'o'
  5329  3303  346E               	retlw	110	;'n'
  5330  3304  3420               	retlw	32	;' '
  5331  3305  3400               	retlw	0
  5332                           
  5333                           	psect	stringtext44
  5334  3306                     __pstringtext44:	
  5335  3306                     STR_13:	
  5336  3306  3450               	retlw	80	;'P'
  5337  3307  346C               	retlw	108	;'l'
  5338  3308  3465               	retlw	101	;'e'
  5339  3309  3461               	retlw	97	;'a'
  5340  330A  3473               	retlw	115	;'s'
  5341  330B  3465               	retlw	101	;'e'
  5342  330C  3420               	retlw	32	;' '
  5343  330D  3477               	retlw	119	;'w'
  5344  330E  3461               	retlw	97	;'a'
  5345  330F  3469               	retlw	105	;'i'
  5346  3310  3474               	retlw	116	;'t'
  5347  3311  3421               	retlw	33	;'!'
  5348  3312  3400               	retlw	0
  5349                           
  5350                           	psect	stringtext45
  5351  3313                     __pstringtext45:	
  5352  3313                     STR_20:	
  5353  3313  344F               	retlw	79	;'O'
  5354  3314  3476               	retlw	118	;'v'
  5355  3315  3465               	retlw	101	;'e'
  5356  3316  3472               	retlw	114	;'r'
  5357  3317  3463               	retlw	99	;'c'
  5358  3318  3475               	retlw	117	;'u'
  5359  3319  3472               	retlw	114	;'r'
  5360  331A  3472               	retlw	114	;'r'
  5361  331B  3465               	retlw	101	;'e'
  5362  331C  346E               	retlw	110	;'n'
  5363  331D  3474               	retlw	116	;'t'
  5364  331E  3421               	retlw	33	;'!'
  5365  331F  3400               	retlw	0
  5366                           
  5367                           	psect	stringtext46
  5368  3320                     __pstringtext46:	
  5369  3320                     STR_18:	
  5370  3320  3444               	retlw	68	;'D'
  5371  3321  3469               	retlw	105	;'i'
  5372  3322  3473               	retlw	115	;'s'
  5373  3323  3463               	retlw	99	;'c'
  5374  3324  346F               	retlw	111	;'o'
  5375  3325  346E               	retlw	110	;'n'
  5376  3326  346E               	retlw	110	;'n'
  5377  3327  3465               	retlw	101	;'e'
  5378  3328  3463               	retlw	99	;'c'
  5379  3329  3474               	retlw	116	;'t'
  5380  332A  3465               	retlw	101	;'e'
  5381  332B  3464               	retlw	100	;'d'
  5382  332C  3400               	retlw	0
  5383                           
  5384                           	psect	stringtext47
  5385  332D                     __pstringtext47:	
  5386  332D                     STR_44:	
  5387  332D  3474               	retlw	116	;'t'
  5388  332E  346F               	retlw	111	;'o'
  5389  332F  3420               	retlw	32	;' '
  5390  3330  3472               	retlw	114	;'r'
  5391  3331  3465               	retlw	101	;'e'
  5392  3332  342D               	retlw	45	;'-'
  5393  3333  3465               	retlw	101	;'e'
  5394  3334  346E               	retlw	110	;'n'
  5395  3335  3461               	retlw	97	;'a'
  5396  3336  3462               	retlw	98	;'b'
  5397  3337  346C               	retlw	108	;'l'
  5398  3338  3465               	retlw	101	;'e'
  5399  3339  3400               	retlw	0
  5400                           
  5401                           	psect	stringtext48
  5402  333A                     __pstringtext48:	
  5403  333A                     STR_21:	
  5404  333A  344F               	retlw	79	;'O'
  5405  333B  346E               	retlw	110	;'n'
  5406  333C  3464               	retlw	100	;'d'
  5407  333D  3472               	retlw	114	;'r'
  5408  333E  3465               	retlw	101	;'e'
  5409  333F  3453               	retlw	83	;'S'
  5410  3340  3470               	retlw	112	;'p'
  5411  3341  3465               	retlw	101	;'e'
  5412  3342  3463               	retlw	99	;'c'
  5413  3343  3469               	retlw	105	;'i'
  5414  3344  3461               	retlw	97	;'a'
  5415  3345  346C               	retlw	108	;'l'
  5416  3346  3400               	retlw	0
  5417                           
  5418                           	psect	stringtext49
  5419  3347                     __pstringtext49:	
  5420  3347                     STR_22:	
  5421  3347  344F               	retlw	79	;'O'
  5422  3348  3475               	retlw	117	;'u'
  5423  3349  3474               	retlw	116	;'t'
  5424  334A  3470               	retlw	112	;'p'
  5425  334B  3475               	retlw	117	;'u'
  5426  334C  3474               	retlw	116	;'t'
  5427  334D  3420               	retlw	32	;' '
  5428  334E  3470               	retlw	112	;'p'
  5429  334F  346F               	retlw	111	;'o'
  5430  3350  3477               	retlw	119	;'w'
  5431  3351  3465               	retlw	101	;'e'
  5432  3352  3472               	retlw	114	;'r'
  5433  3353  3400               	retlw	0
  5434                           
  5435                           	psect	stringtext50
  5436  3354                     __pstringtext50:	
  5437  3354                     STR_51:	
  5438  3354  3401               	retlw	1
  5439  3355  3420               	retlw	32	;' '
  5440  3356  3420               	retlw	32	;' '
  5441  3357  3420               	retlw	32	;' '
  5442  3358  3420               	retlw	32	;' '
  5443  3359  3420               	retlw	32	;' '
  5444  335A  3420               	retlw	32	;' '
  5445  335B  3420               	retlw	32	;' '
  5446  335C  3420               	retlw	32	;' '
  5447  335D  3400               	retlw	0
  5448                           
  5449                           	psect	stringtext51
  5450  335E                     __pstringtext51:	
  5451  335E                     STR_58:	
  5452  335E  3401               	retlw	1
  5453  335F  3420               	retlw	32	;' '
  5454  3360  3403               	retlw	3
  5455  3361  3420               	retlw	32	;' '
  5456  3362  3420               	retlw	32	;' '
  5457  3363  3420               	retlw	32	;' '
  5458  3364  3420               	retlw	32	;' '
  5459  3365  3420               	retlw	32	;' '
  5460  3366  3400               	retlw	0
  5461                           
  5462                           	psect	stringtext52
  5463  3367                     __pstringtext52:	
  5464  3367                     STR_61:	
  5465  3367  3420               	retlw	32	;' '
  5466  3368  3403               	retlw	3
  5467  3369  3420               	retlw	32	;' '
  5468  336A  3420               	retlw	32	;' '
  5469  336B  3420               	retlw	32	;' '
  5470  336C  3420               	retlw	32	;' '
  5471  336D  3420               	retlw	32	;' '
  5472  336E  3420               	retlw	32	;' '
  5473  336F  3400               	retlw	0
  5474                           
  5475                           	psect	stringtext53
  5476  3370                     __pstringtext53:	
  5477  3370                     STR_17:	
  5478  3370  3457               	retlw	87	;'W'
  5479  3371  3420               	retlw	32	;' '
  5480  3372  346D               	retlw	109	;'m'
  5481  3373  3461               	retlw	97	;'a'
  5482  3374  346E               	retlw	110	;'n'
  5483  3375  3475               	retlw	117	;'u'
  5484  3376  3461               	retlw	97	;'a'
  5485  3377  346C               	retlw	108	;'l'
  5486  3378  3400               	retlw	0
  5487                           
  5488                           	psect	stringtext54
  5489  3379                     __pstringtext54:	
  5490  3379                     STR_47:	
  5491  3379  3420               	retlw	32	;' '
  5492  337A  3469               	retlw	105	;'i'
  5493  337B  346E               	retlw	110	;'n'
  5494  337C  3463               	retlw	99	;'c'
  5495  337D  3468               	retlw	104	;'h'
  5496  337E  3420               	retlw	32	;' '
  5497  337F  3403               	retlw	3
  5498  3380  3400               	retlw	0
  5499                           
  5500                           	psect	stringtext55
  5501  3381                     __pstringtext55:	
  5502  3381                     STR_42:	
  5503  3381  3457               	retlw	87	;'W'
  5504  3382  3420               	retlw	32	;' '
  5505  3383  346D               	retlw	109	;'m'
  5506  3384  3461               	retlw	97	;'a'
  5507  3385  346E               	retlw	110	;'n'
  5508  3386  342E               	retlw	46	;'.'
  5509  3387  3403               	retlw	3
  5510  3388  3400               	retlw	0
  5511                           
  5512                           	psect	stringtext56
  5513  3389                     __pstringtext56:	
  5514  3389                     STR_5:	
  5515  3389  3401               	retlw	1
  5516  338A  3420               	retlw	32	;' '
  5517  338B  3420               	retlw	32	;' '
  5518  338C  3420               	retlw	32	;' '
  5519  338D  3420               	retlw	32	;' '
  5520  338E  3420               	retlw	32	;' '
  5521  338F  3420               	retlw	32	;' '
  5522  3390  3400               	retlw	0
  5523                           
  5524                           	psect	stringtext57
  5525  3391                     __pstringtext57:	
  5526  3391                     STR_24:	
  5527  3391  3420               	retlw	32	;' '
  5528  3392  346F               	retlw	111	;'o'
  5529  3393  3466               	retlw	102	;'f'
  5530  3394  3466               	retlw	102	;'f'
  5531  3395  3420               	retlw	32	;' '
  5532  3396  3420               	retlw	32	;' '
  5533  3397  3420               	retlw	32	;' '
  5534  3398  3400               	retlw	0
  5535                           
  5536                           	psect	stringtext58
  5537  3399                     __pstringtext58:	
  5538  3399                     STR_35:	
  5539  3399  3420               	retlw	32	;' '
  5540  339A  3469               	retlw	105	;'i'
  5541  339B  346E               	retlw	110	;'n'
  5542  339C  3463               	retlw	99	;'c'
  5543  339D  3468               	retlw	104	;'h'
  5544  339E  3420               	retlw	32	;' '
  5545  339F  3420               	retlw	32	;' '
  5546  33A0  3400               	retlw	0
  5547                           
  5548                           	psect	stringtext59
  5549  33A1                     __pstringtext59:	
  5550  33A1                     STR_26:	
  5551  33A1  3420               	retlw	32	;' '
  5552  33A2  3461               	retlw	97	;'a'
  5553  33A3  3475               	retlw	117	;'u'
  5554  33A4  3474               	retlw	116	;'t'
  5555  33A5  346F               	retlw	111	;'o'
  5556  33A6  3420               	retlw	32	;' '
  5557  33A7  3420               	retlw	32	;' '
  5558  33A8  3400               	retlw	0
  5559                           
  5560                           	psect	stringtext60
  5561  33A9                     __pstringtext60:	
  5562  33A9                     STR_2:	
  5563  33A9  3453               	retlw	83	;'S'
  5564  33AA  3465               	retlw	101	;'e'
  5565  33AB  346E               	retlw	110	;'n'
  5566  33AC  3473               	retlw	115	;'s'
  5567  33AD  346F               	retlw	111	;'o'
  5568  33AE  3472               	retlw	114	;'r'
  5569  33AF  343A               	retlw	58	;':'
  5570  33B0  3400               	retlw	0
  5571                           
  5572                           	psect	stringtext61
  5573  33B1                     __pstringtext61:	
  5574  33B1                     STR_38:	
  5575  33B1  3420               	retlw	32	;' '
  5576  33B2  346F               	retlw	111	;'o'
  5577  33B3  3466               	retlw	102	;'f'
  5578  33B4  3466               	retlw	102	;'f'
  5579  33B5  3420               	retlw	32	;' '
  5580  33B6  3403               	retlw	3
  5581  33B7  3400               	retlw	0
  5582                           
  5583                           	psect	stringtext62
  5584  33B8                     __pstringtext62:	
  5585  33B8                     STR_40:	
  5586  33B8  3420               	retlw	32	;' '
  5587  33B9  3461               	retlw	97	;'a'
  5588  33BA  3475               	retlw	117	;'u'
  5589  33BB  3474               	retlw	116	;'t'
  5590  33BC  346F               	retlw	111	;'o'
  5591  33BD  3403               	retlw	3
  5592  33BE  3400               	retlw	0
  5593                           
  5594                           	psect	stringtext63
  5595  33BF                     __pstringtext63:	
  5596  33BF                     STR_54:	
  5597  33BF  3474               	retlw	116	;'t'
  5598  33C0  3465               	retlw	101	;'e'
  5599  33C1  346D               	retlw	109	;'m'
  5600  33C2  3470               	retlw	112	;'p'
  5601  33C3  342E               	retlw	46	;'.'
  5602  33C4  3404               	retlw	4
  5603  33C5  3400               	retlw	0
  5604                           
  5605                           	psect	stringtext64
  5606  33C6                     __pstringtext64:	
  5607  33C6                     STR_6:	
  5608  33C6  3425               	retlw	37	;'%'
  5609  33C7  3420               	retlw	32	;' '
  5610  33C8  3420               	retlw	32	;' '
  5611  33C9  3420               	retlw	32	;' '
  5612  33CA  3420               	retlw	32	;' '
  5613  33CB  3420               	retlw	32	;' '
  5614  33CC  3400               	retlw	0
  5615                           
  5616                           	psect	stringtext65
  5617  33CD                     __pstringtext65:	
  5618  33CD                     STR_49:	
  5619  33CD  3474               	retlw	116	;'t'
  5620  33CE  3465               	retlw	101	;'e'
  5621  33CF  346D               	retlw	109	;'m'
  5622  33D0  3470               	retlw	112	;'p'
  5623  33D1  342E               	retlw	46	;'.'
  5624  33D2  3420               	retlw	32	;' '
  5625  33D3  3400               	retlw	0
  5626                           
  5627                           	psect	stringtext66
  5628  33D4                     __pstringtext66:	
  5629  33D4                     STR_37:	
  5630  33D4  3404               	retlw	4
  5631  33D5  3443               	retlw	67	;'C'
  5632  33D6  3468               	retlw	104	;'h'
  5633  33D7  342E               	retlw	46	;'.'
  5634  33D8  3420               	retlw	32	;' '
  5635  33D9  3400               	retlw	0
  5636                           
  5637                           	psect	stringtext67
  5638  33DA                     __pstringtext67:	
  5639  33DA                     STR_3:	
  5640  33DA  3401               	retlw	1
  5641  33DB  3420               	retlw	32	;' '
  5642  33DC  3402               	retlw	2
  5643  33DD  3400               	retlw	0
  5644                           
  5645                           	psect	stringtext68
  5646  33DE                     __pstringtext68:	
  5647  33DE                     STR_8:	
  5648  33DE  3456               	retlw	86	;'V'
  5649  33DF  3420               	retlw	32	;' '
  5650  33E0  3420               	retlw	32	;' '
  5651  33E1  3400               	retlw	0
  5652                           
  5653                           	psect	stringtext69
  5654  33E2                     __pstringtext69:	
  5655  33E2                     STR_10:	
  5656  33E2  3443               	retlw	67	;'C'
  5657  33E3  3468               	retlw	104	;'h'
  5658  33E4  3420               	retlw	32	;' '
  5659  33E5  3400               	retlw	0
  5660                           
  5661                           	psect	stringtext70
  5662  33E6                     __pstringtext70:	
  5663  33E6                     STR_55:	
  5664  33E6  3401               	retlw	1
  5665  33E7  3403               	retlw	3
  5666  33E8  3400               	retlw	0
  5667                           
  5668                           	psect	stringtext71
  5669  33E9                     __pstringtext71:	
  5670  33E9                     STR_50:	
  5671  33E9  3401               	retlw	1
  5672  33EA  3420               	retlw	32	;' '
  5673  33EB  3400               	retlw	0
  5674                           
  5675                           	psect	stringtext72
  5676  33EC                     __pstringtext72:	
  5677  33EC                     STR_12:	
  5678  33EC  3422               	retlw	34	;'"'
  5679  33ED  3420               	retlw	32	;' '
  5680  33EE  3400               	retlw	0
  5681                           
  5682                           	psect	stringtext73
  5683  33EF                     __pstringtext73:	
  5684  33EF                     STR_11:	
  5685  33EF  343A               	retlw	58	;':'
  5686  33F0  3420               	retlw	32	;' '
  5687  33F1  3400               	retlw	0
  5688                           
  5689                           	psect	stringtext74
  5690  33F2                     __pstringtext74:	
  5691  33F2                     STR_15:	
  5692  33F2  3420               	retlw	32	;' '
  5693  33F3  3428               	retlw	40	;'('
  5694  33F4  3400               	retlw	0
  5695                           
  5696                           	psect	stringtext75
  5697  33F5                     __pstringtext75:	
  5698  33F5                     STR_16:	
  5699  33F5  3457               	retlw	87	;'W'
  5700  33F6  3429               	retlw	41	;')'
  5701  33F7  3400               	retlw	0
  5702                           
  5703                           	psect	stringtext76
  5704  33F8                     __pstringtext76:	
  5705  33F8                     STR_4:	
  5706  33F8  3401               	retlw	1
  5707  33F9  3400               	retlw	0
  5708                           
  5709                           	psect	stringtext77
  5710  0000                     __pstringtext77:	
  5711  33C4                     
  5712                           ; #config settings
  5713  0000                     
  5714                           	psect	cinit
  5715  0072                     start_initialization:	
  5716  0072                     __initialization:		;BIGRAM
  5717                           
  5718                           ;initializer for _g_screenRefresh
  5719  0072  3001               	movlw	1
  5720  0073  00EB               	movwf	__pdataBANK0& (0+127)
  5721                           
  5722                           ; Initialize objects allocated to BANK3
  5723  0074  0143               	movlb	3	; select bank3
  5724                           
  5725                           ;initializer for statusView@prevSensorStat
  5726  0075  00EF               	movwf	__pdataBANK3& (0+127)
  5727                           
  5728                           ; Initialize objects allocated to BANK4
  5729  0076  0144               	movlb	4	; select bank4
  5730                           
  5731                           ;initializer for checkSensor@sensorUpdateInterval
  5732  0077  3064               	movlw	100
  5733  0078  00DE               	movwf	__pdataBANK4& (0+127)
  5734  0079  3040               	movlw	64
  5735  007A  01DF               	clrf	(__pdataBANK4+1)& (0+127)
  5736  007B  01E0               	clrf	(__pdataBANK4+2)& (0+127)
  5737  007C  01E1               	clrf	(__pdataBANK4+3)& (0+127)
  5738                           
  5739                           ;initializer for OLED_print_xy@F7972
  5740  007D  01E2               	clrf	(__pdataBANK4+4)& (0+127)
  5741  007E  00E3               	movwf	(__pdataBANK4+5)& (0+127)
  5742  007F  3014               	movlw	20
  5743  0080  00E4               	movwf	(__pdataBANK4+6)& (0+127)
  5744  0081  3054               	movlw	84
  5745  0082  00E5               	movwf	(__pdataBANK4+7)& (0+127)
  5746                           
  5747                           ; Clear objects allocated to BIGRAM
  5748  0083  304A               	movlw	74
  5749  0084  0084               	movwf	4
  5750  0085  3027               	movlw	39
  5751  0086  0085               	movwf	5
  5752  0087  30A6               	movlw	166
  5753  0088  00FE               	movwf	126
  5754  0089  01FF               	clrf	127
  5755  008A  31A0  2011  3180   	fcall	clear_ram0
  5756                           
  5757                           ; Clear objects allocated to COMMON
  5758  008D  01FC               	clrf	__pbssCOMMON& (0+127)
  5759  008E  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  5760                           
  5761                           ; Clear objects allocated to BANK0
  5762  008F  0140               	movlb	0	; select bank0
  5763  0090  01E8               	clrf	__pbssBANK0& (0+127)
  5764  0091  01E9               	clrf	(__pbssBANK0+1)& (0+127)
  5765  0092  01EA               	clrf	(__pbssBANK0+2)& (0+127)
  5766                           
  5767                           ; Clear objects allocated to BANK1
  5768  0093  0141               	movlb	1	; select bank1
  5769  0094  3063               	movlw	low __pbssBANK2
  5770  0095  01ED               	clrf	__pbssBANK1& (0+127)
  5771  0096  01EE               	clrf	(__pbssBANK1+1)& (0+127)
  5772  0097  01EF               	clrf	(__pbssBANK1+2)& (0+127)
  5773                           
  5774                           ; Clear objects allocated to BANK2
  5775  0098  0084               	movwf	4
  5776  0099  3001               	movlw	high __pbssBANK2
  5777  009A  0085               	movwf	5
  5778  009B  300D               	movlw	13
  5779  009C  00FE               	movwf	126
  5780  009D  01FF               	clrf	127
  5781  009E  31A0  2011  3180   	fcall	clear_ram0
  5782                           
  5783                           ; Clear objects allocated to BANK3
  5784  00A1  30E0               	movlw	low __pbssBANK3
  5785  00A2  0084               	movwf	4
  5786  00A3  3001               	movlw	high __pbssBANK3
  5787  00A4  0085               	movwf	5
  5788  00A5  300F               	movlw	15
  5789  00A6  00FE               	movwf	126
  5790  00A7  01FF               	clrf	127
  5791  00A8  31A0  2011  3180   	fcall	clear_ram0
  5792                           
  5793                           ; Clear objects allocated to BANK4
  5794  00AB  3020               	movlw	low __pbssBANK4
  5795  00AC  0084               	movwf	4
  5796  00AD  3002               	movlw	high __pbssBANK4
  5797  00AE  0085               	movwf	5
  5798  00AF  3027               	movlw	39
  5799  00B0  00FE               	movwf	126
  5800  00B1  01FF               	clrf	127
  5801  00B2  31A0  2011  3180   	fcall	clear_ram0
  5802                           
  5803                           ; Clear objects allocated to BANK5
  5804  00B5  30A0               	movlw	low __pbssBANK5
  5805  00B6  0084               	movwf	4
  5806  00B7  3002               	movlw	high __pbssBANK5
  5807  00B8  0085               	movwf	5
  5808  00B9  3038               	movlw	56
  5809  00BA  00FE               	movwf	126
  5810  00BB  01FF               	clrf	127
  5811  00BC  31A0  2011  3180   	fcall	clear_ram0
  5812  00BF                     end_of_initialization:	
  5813                           ;End of C runtime variable initialization code
  5814                           
  5815  00BF                     __end_of__initialization:	
  5816  00BF  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  5817  00C0  0140               	movlb	0
  5818  00C1  28C2               	ljmp	l8618	;jump to C main() function
  5819  00C2                     __pmaintext:	
  5820                           ; 1 bytes @ 0x48
  5821 ;;
  5822 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  5823 ;;
  5824 ;; *************** function _main *****************
  5825 ;; Defined at:
  5826 ;;		line 29 in file "main.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;		None
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;  sysCheckInte    4   60[BANK2 ] unsigned long 
  5831 ;;  displayOff      1   66[BANK2 ] unsigned char 
  5832 ;;  controllerId    1   65[BANK2 ] unsigned char 
  5833 ;;  initDone        1   64[BANK2 ] unsigned char 
  5834 ;; Return value:  Size  Location     Type
  5835 ;;                  1    wreg      void 
  5836 ;; Registers used:
  5837 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5838 ;; Tracked objects:
  5839 ;;		On entry : B3F/0
  5840 ;;		On exit  : 0/0
  5841 ;;		Unchanged: 0/0
  5842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5843 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5844 ;;      Locals:         0       0       0       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5845 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5846 ;;      Totals:         0       0       1       7       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5847 ;;Total ram usage:        8 bytes
  5848 ;; Hardware stack levels required when called:    9
  5849 ;; This function calls:
  5850 ;;		_OLED_command
  5851 ;;		_OLED_init
  5852 ;;		_OLED_loadSpecialChars
  5853 ;;		_calcRequiredPower
  5854 ;;		_channelThing
  5855 ;;		_checkChannelStatus
  5856 ;;		_checkSensor
  5857 ;;		_controller
  5858 ;;		_getAnalogValues
  5859 ;;		_getLastError
  5860 ;;		_initGlobalData
  5861 ;;		_initialize
  5862 ;;		_menu
  5863 ;;		_readNVM
  5864 ;;		_systemCheck
  5865 ;;		_timeSince
  5866 ;;		_viewErrorMessage
  5867 ;; This function is called by:
  5868 ;;		Startup code after reset
  5869 ;; This function uses a non-reentrant model
  5870 ;;
  5871                           
  5872                           
  5873                           ;psect for function _main
  5874  00C2                     _main:	
  5875  00C2                     l8618:	
  5876                           ;incstack = 0
  5877                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5878                           
  5879                           
  5880                           ;main.c: 31:  uint32_t sysCheckInterval = 0;
  5881  00C2  0142               	movlb	2	; select bank2
  5882  00C3  01DC               	clrf	main@sysCheckInterval^(0+256)
  5883  00C4  01DD               	clrf	(main@sysCheckInterval+1)^(0+256)
  5884  00C5  01DE               	clrf	(main@sysCheckInterval+2)^(0+256)
  5885  00C6  01DF               	clrf	(main@sysCheckInterval+3)^(0+256)
  5886                           
  5887                           ;main.c: 32:  uint8_t controllerIdle = 1;
  5888  00C7  01E1               	clrf	main@controllerIdle^(0+256)
  5889  00C8  0AE1               	incf	main@controllerIdle^(0+256),f
  5890                           
  5891                           ;main.c: 33:  uint8_t initDone = 0;
  5892  00C9  01E0               	clrf	main@initDone^(0+256)
  5893                           
  5894                           ;main.c: 34:  uint8_t displayOff = 0;
  5895  00CA  01E2               	clrf	main@displayOff^(0+256)
  5896                           
  5897                           ;main.c: 36:  initialize();
  5898  00CB  3198  2036  3180   	fcall	_initialize
  5899                           
  5900                           ;main.c: 37:  LATBbits.LATB5 = 1;
  5901  00CE  0140               	movlb	0	; select bank0
  5902  00CF  1699               	bsf	25,5	;volatile
  5903                           
  5904                           ;main.c: 38:  OLED_init();
  5905  00D0  21F9  3180         	fcall	_OLED_init
  5906                           
  5907                           ;main.c: 39:  OLED_loadSpecialChars();
  5908  00D2  2283               	fcall	_OLED_loadSpecialChars
  5909                           
  5910                           ;main.c: 40:  OLED_command(0x02);
  5911  00D3  3002               	movlw	2
  5912  00D4  3193  237D  3180   	fcall	_OLED_command
  5913                           
  5914                           ;main.c: 41:  OLED_command(0x01);
  5915  00D7  3001               	movlw	1
  5916  00D8  3193  237D  3180   	fcall	_OLED_command
  5917                           
  5918                           ;main.c: 42:  initGlobalData();
  5919  00DB  31AA  22DE  3180   	fcall	_initGlobalData
  5920                           
  5921                           ;main.c: 43:  LATCbits.LATC3 = 1;
  5922  00DE  159A               	bsf	26,3	;volatile
  5923                           
  5924                           ;main.c: 46:  if (PORTAbits.RA7)
  5925  00DF  1F8C               	btfss	12,7	;volatile
  5926  00E0  28E4               	goto	l128
  5927                           
  5928                           ;main.c: 47:   readNVM();
  5929  00E1  31AA  2251  3180   	fcall	_readNVM
  5930  00E4                     l128:	
  5931                           ;main.c: 49:  while (1) {
  5932                           
  5933  00E4  0064               	clrwdt	;# 
  5934                           
  5935                           ;main.c: 54:   getAnalogValues();
  5936  00E5  3198  207E  3180   	fcall	_getAnalogValues
  5937                           
  5938                           ;main.c: 56:   if (timeSince(sysCheckInterval) > 5) {
  5939  00E8  0142               	movlb	2	; select bank2
  5940  00E9  085F               	movf	(main@sysCheckInterval+3)^(0+256),w
  5941  00EA  0140               	movlb	0	; select bank0
  5942  00EB  00A7               	movwf	timeSince@since+3
  5943  00EC  0142               	movlb	2	; select bank2
  5944  00ED  085E               	movf	(main@sysCheckInterval+2)^(0+256),w
  5945  00EE  0140               	movlb	0	; select bank0
  5946  00EF  00A6               	movwf	timeSince@since+2
  5947  00F0  0142               	movlb	2	; select bank2
  5948  00F1  085D               	movf	(main@sysCheckInterval+1)^(0+256),w
  5949  00F2  0140               	movlb	0	; select bank0
  5950  00F3  00A5               	movwf	timeSince@since+1
  5951  00F4  0142               	movlb	2	; select bank2
  5952  00F5  085C               	movf	main@sysCheckInterval^(0+256),w
  5953  00F6  0140               	movlb	0	; select bank0
  5954  00F7  00A4               	movwf	timeSince@since
  5955  00F8  21A0  3180         	fcall	_timeSince
  5956  00FA  0827               	movf	?_timeSince+3,w
  5957  00FB  1D03               	btfss	3,2
  5958  00FC  2907               	goto	l8646
  5959  00FD  0826               	movf	?_timeSince+2,w
  5960  00FE  1D03               	btfss	3,2
  5961  00FF  2907               	goto	l8646
  5962  0100  0825               	movf	?_timeSince+1,w
  5963  0101  1D03               	btfss	3,2
  5964  0102  2907               	goto	l8646
  5965  0103  3006               	movlw	6
  5966  0104  0224               	subwf	?_timeSince,w
  5967  0105  1C03               	btfss	3,0
  5968  0106  2913               	goto	l8650
  5969  0107                     l8646:	
  5970                           
  5971                           ;main.c: 57:    sysCheckInterval = tick100ms;
  5972  0107  0142               	movlb	2	; select bank2
  5973  0108  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
  5974  0109  00DF               	movwf	(main@sysCheckInterval+3)^(0+256)
  5975  010A  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
  5976  010B  00DE               	movwf	(main@sysCheckInterval+2)^(0+256)
  5977  010C  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
  5978  010D  00DD               	movwf	(main@sysCheckInterval+1)^(0+256)
  5979  010E  0867               	movf	_tick100ms^(0+256),w	;volatile
  5980  010F  00DC               	movwf	main@sysCheckInterval^(0+256)
  5981                           
  5982                           ;main.c: 58:    systemCheck();
  5983  0110  31A4  24A0  3180   	fcall	_systemCheck
  5984  0113                     l8650:	
  5985                           
  5986                           ;main.c: 62:   if (checkSensor()) {
  5987  0113  2299  3180         	fcall	_checkSensor
  5988  0115  3A00               	xorlw	0
  5989  0116  1903               	skipnz
  5990  0117  291E               	goto	l8656
  5991                           
  5992                           ;main.c: 64:    calcRequiredPower();
  5993  0118  319A  2204  3180   	fcall	_calcRequiredPower
  5994                           
  5995                           ;main.c: 65:    initDone = 1;
  5996  011B  0142               	movlb	2	; select bank2
  5997  011C  01E0               	clrf	main@initDone^(0+256)
  5998  011D  0AE0               	incf	main@initDone^(0+256),f
  5999  011E                     l8656:	
  6000                           
  6001                           ;main.c: 72:   if (controllerIdle) {
  6002  011E  0142               	movlb	2	; select bank2
  6003  011F  0861               	movf	main@controllerIdle^(0+256),w
  6004  0120  1903               	btfsc	3,2
  6005  0121  292E               	goto	l8664
  6006                           
  6007                           ;main.c: 73:    if (initDone) {
  6008  0122  0860               	movf	main@initDone^(0+256),w
  6009  0123  1903               	btfsc	3,2
  6010  0124  2932               	goto	l8666
  6011                           
  6012                           ;main.c: 76:     checkChannelStatus();
  6013  0125  31A0  20C0  3180   	fcall	_checkChannelStatus
  6014                           
  6015                           ;main.c: 77:     channelThing();
  6016  0128  318B  2340  3180   	fcall	_channelThing
  6017                           
  6018                           ;main.c: 78:     controllerIdle = 0;
  6019  012B  0142               	movlb	2	; select bank2
  6020  012C  01E1               	clrf	main@controllerIdle^(0+256)
  6021  012D  2932               	goto	l8666
  6022  012E                     l8664:	
  6023                           
  6024                           ;main.c: 82:    controllerIdle = controller();
  6025  012E  238C  3180         	fcall	_controller
  6026  0130  0142               	movlb	2	; select bank2
  6027  0131  00E1               	movwf	main@controllerIdle^(0+256)
  6028  0132                     l8666:	
  6029                           
  6030                           ;main.c: 85:   if (getLastError() != NO_ERROR) {
  6031  0132  244C  3180         	fcall	_getLastError
  6032  0134  3A00               	xorlw	0
  6033  0135  1903               	skipnz
  6034  0136  2944               	goto	l8672
  6035                           
  6036                           ;main.c: 86:    userActivity = tick100ms;
  6037  0137  0142               	movlb	2	; select bank2
  6038  0138  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
  6039  0139  00E6               	movwf	(_userActivity+3)^(0+256)	;volatile
  6040  013A  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
  6041  013B  00E5               	movwf	(_userActivity+2)^(0+256)	;volatile
  6042  013C  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
  6043  013D  00E4               	movwf	(_userActivity+1)^(0+256)	;volatile
  6044  013E  0867               	movf	_tick100ms^(0+256),w	;volatile
  6045  013F  00E3               	movwf	_userActivity^(0+256)	;volatile
  6046                           
  6047                           ;main.c: 87:    viewErrorMessage();
  6048  0140  3195  25C4  3180   	fcall	_viewErrorMessage
  6049                           
  6050                           ;main.c: 88:   } else if (! displayOff) {
  6051  0143  294B               	goto	l8676
  6052  0144                     l8672:	
  6053  0144  0142               	movlb	2	; select bank2
  6054  0145  0862               	movf	main@displayOff^(0+256),w
  6055  0146  1D03               	btfss	3,2
  6056  0147  294B               	goto	l8676
  6057                           
  6058                           ;main.c: 89:    menu();
  6059  0148  31AB  23B2  3180   	fcall	_menu
  6060  014B                     l8676:	
  6061                           
  6062                           ;main.c: 93:   if (displayOff && ((timeSince(userActivity) < 1200))) {
  6063  014B  0142               	movlb	2	; select bank2
  6064  014C  0862               	movf	main@displayOff^(0+256),w
  6065  014D  1903               	btfsc	3,2
  6066  014E  2970               	goto	l8684
  6067  014F  0866               	movf	(_userActivity+3)^(0+256),w	;volatile
  6068  0150  0140               	movlb	0	; select bank0
  6069  0151  00A7               	movwf	timeSince@since+3
  6070  0152  0142               	movlb	2	; select bank2
  6071  0153  0865               	movf	(_userActivity+2)^(0+256),w	;volatile
  6072  0154  0140               	movlb	0	; select bank0
  6073  0155  00A6               	movwf	timeSince@since+2
  6074  0156  0142               	movlb	2	; select bank2
  6075  0157  0864               	movf	(_userActivity+1)^(0+256),w	;volatile
  6076  0158  0140               	movlb	0	; select bank0
  6077  0159  00A5               	movwf	timeSince@since+1
  6078  015A  0142               	movlb	2	; select bank2
  6079  015B  0863               	movf	_userActivity^(0+256),w	;volatile
  6080  015C  0140               	movlb	0	; select bank0
  6081  015D  00A4               	movwf	timeSince@since
  6082  015E  21A0  3180         	fcall	_timeSince
  6083  0160  0827               	movf	?_timeSince+3,w
  6084  0161  1D03               	btfss	3,2
  6085  0162  2970               	goto	l8684
  6086  0163  0826               	movf	?_timeSince+2,w
  6087  0164  1D03               	btfss	3,2
  6088  0165  2970               	goto	l8684
  6089  0166  30B0               	movlw	176
  6090  0167  0224               	subwf	?_timeSince,w
  6091  0168  3004               	movlw	4
  6092  0169  3B25               	subwfb	?_timeSince+1,w
  6093  016A  1803               	btfsc	3,0
  6094  016B  2970               	goto	l8684
  6095                           
  6096                           ;main.c: 95:    displayOff = 0;
  6097  016C  0142               	movlb	2	; select bank2
  6098  016D  300C               	movlw	12
  6099  016E  01E2               	clrf	main@displayOff^(0+256)
  6100                           
  6101                           ;main.c: 96:    OLED_command(0x08 | 0x04);
  6102  016F  2992               	goto	L1
  6103  0170                     l8684:	
  6104                           ;main.c: 97:   } else if (timeSince(userActivity) > 1200) {
  6105                           
  6106  0170  0142               	movlb	2	; select bank2
  6107  0171  0866               	movf	(_userActivity+3)^(0+256),w	;volatile
  6108  0172  0140               	movlb	0	; select bank0
  6109  0173  00A7               	movwf	timeSince@since+3
  6110  0174  0142               	movlb	2	; select bank2
  6111  0175  0865               	movf	(_userActivity+2)^(0+256),w	;volatile
  6112  0176  0140               	movlb	0	; select bank0
  6113  0177  00A6               	movwf	timeSince@since+2
  6114  0178  0142               	movlb	2	; select bank2
  6115  0179  0864               	movf	(_userActivity+1)^(0+256),w	;volatile
  6116  017A  0140               	movlb	0	; select bank0
  6117  017B  00A5               	movwf	timeSince@since+1
  6118  017C  0142               	movlb	2	; select bank2
  6119  017D  0863               	movf	_userActivity^(0+256),w	;volatile
  6120  017E  0140               	movlb	0	; select bank0
  6121  017F  00A4               	movwf	timeSince@since
  6122  0180  21A0  3180         	fcall	_timeSince
  6123  0182  0827               	movf	?_timeSince+3,w
  6124  0183  1D03               	btfss	3,2
  6125  0184  298E               	goto	l8686
  6126  0185  0826               	movf	?_timeSince+2,w
  6127  0186  1D03               	btfss	3,2
  6128  0187  298E               	goto	l8686
  6129  0188  30B1               	movlw	177
  6130  0189  0224               	subwf	?_timeSince,w
  6131  018A  3004               	movlw	4
  6132  018B  3B25               	subwfb	?_timeSince+1,w
  6133  018C  1C03               	btfss	3,0
  6134  018D  2995               	goto	l8690
  6135  018E                     l8686:	
  6136                           
  6137                           ;main.c: 98:    displayOff = 1;
  6138  018E  0142               	movlb	2	; select bank2
  6139  018F  3008               	movlw	8
  6140  0190  01E2               	clrf	main@displayOff^(0+256)
  6141  0191  0AE2               	incf	main@displayOff^(0+256),f
  6142  0192                     L1:	
  6143                           ;main.c: 99:    OLED_command(0x08 | 0x00);
  6144                           
  6145  0192  3193  237D  3180   	fcall	_OLED_command
  6146  0195                     l8690:	
  6147                           
  6148                           ;main.c: 105:   _delay((unsigned long)((40)*(4000000UL/4000.0)));
  6149  0195  3034               	movlw	52
  6150  0196  0141               	movlb	1	; select bank1
  6151  0197  00EC               	movwf	??_main^(0+128)
  6152  0198  30F1               	movlw	241
  6153  0199                     u9417:	
  6154  0199  0B89               	decfsz	9,f
  6155  019A  2999               	goto	u9417
  6156  019B  0BEC               	decfsz	??_main^(0+128),f
  6157  019C  2999               	goto	u9417
  6158  019D  3200               	nop2
  6159                           
  6160                           ;main.c: 106:   __nop();
  6161  019E  0000               	nop
  6162  019F  28E4               	goto	l128
  6163  01A0                     __end_of_main:	
  6164  01A0                     __ptext37:	
  6165 ;; *************** function _timeSince *****************
  6166 ;; Defined at:
  6167 ;;		line 11 in file "interrupt.c"
  6168 ;; Parameters:    Size  Location     Type
  6169 ;;  since           4    4[BANK0 ] unsigned long 
  6170 ;; Auto vars:     Size  Location     Type
  6171 ;;  now             4   16[BANK0 ] unsigned long 
  6172 ;; Return value:  Size  Location     Type
  6173 ;;                  4    4[BANK0 ] unsigned long 
  6174 ;; Registers used:
  6175 ;;		wreg
  6176 ;; Tracked objects:
  6177 ;;		On entry : 3F/0
  6178 ;;		On exit  : 3F/0
  6179 ;;		Unchanged: 0/0
  6180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6181 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6182 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6183 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6184 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6185 ;;Total ram usage:       16 bytes
  6186 ;; Hardware stack levels used:    1
  6187 ;; Hardware stack levels required when called:    3
  6188 ;; This function calls:
  6189 ;;		Nothing
  6190 ;; This function is called by:
  6191 ;;		_main
  6192 ;;		_menu
  6193 ;;		_checkSensor
  6194 ;;		_controller
  6195 ;; This function uses a non-reentrant model
  6196 ;;
  6197                           
  6198                           
  6199                           ;psect for function _timeSince
  6200  01A0                     _timeSince:	
  6201                           
  6202                           ;interrupt.c: 11: uint32_t timeSince(uint32_t since);interrupt.c: 12: {;interrupt.c: 13:
      +                            uint32_t now = tick100ms;
  6203                           
  6204                           ;incstack = 0
  6205                           ; Regs used in _timeSince: [wreg]
  6206  01A0  0142               	movlb	2	; select bank2
  6207  01A1  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
  6208  01A2  0140               	movlb	0	; select bank0
  6209  01A3  00B3               	movwf	timeSince@now+3
  6210  01A4  0142               	movlb	2	; select bank2
  6211  01A5  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
  6212  01A6  0140               	movlb	0	; select bank0
  6213  01A7  00B2               	movwf	timeSince@now+2
  6214  01A8  0142               	movlb	2	; select bank2
  6215  01A9  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
  6216  01AA  0140               	movlb	0	; select bank0
  6217  01AB  00B1               	movwf	timeSince@now+1
  6218  01AC  0142               	movlb	2	; select bank2
  6219  01AD  0867               	movf	_tick100ms^(0+256),w	;volatile
  6220  01AE  0140               	movlb	0	; select bank0
  6221  01AF  00B0               	movwf	timeSince@now
  6222                           
  6223                           ;interrupt.c: 14:  if (now >= since)
  6224  01B0  0827               	movf	timeSince@since+3,w
  6225  01B1  0233               	subwf	timeSince@now+3,w
  6226  01B2  1D03               	skipz
  6227  01B3  29BE               	goto	u5365
  6228  01B4  0826               	movf	timeSince@since+2,w
  6229  01B5  0232               	subwf	timeSince@now+2,w
  6230  01B6  1D03               	skipz
  6231  01B7  29BE               	goto	u5365
  6232  01B8  0825               	movf	timeSince@since+1,w
  6233  01B9  0231               	subwf	timeSince@now+1,w
  6234  01BA  1D03               	skipz
  6235  01BB  29BE               	goto	u5365
  6236  01BC  0824               	movf	timeSince@since,w
  6237  01BD  0230               	subwf	timeSince@now,w
  6238  01BE                     u5365:	
  6239  01BE  1C03               	skipc
  6240  01BF  29D4               	goto	l5582
  6241                           
  6242                           ;interrupt.c: 15:   return (now - since);
  6243  01C0  0824               	movf	timeSince@since,w
  6244  01C1  0230               	subwf	timeSince@now,w
  6245  01C2  00A8               	movwf	??_timeSince
  6246  01C3  0825               	movf	timeSince@since+1,w
  6247  01C4  3B31               	subwfb	timeSince@now+1,w
  6248  01C5  00A9               	movwf	??_timeSince+1
  6249  01C6  0826               	movf	timeSince@since+2,w
  6250  01C7  3B32               	subwfb	timeSince@now+2,w
  6251  01C8  00AA               	movwf	??_timeSince+2
  6252  01C9  0827               	movf	timeSince@since+3,w
  6253  01CA  3B33               	subwfb	timeSince@now+3,w
  6254  01CB  00AB               	movwf	??_timeSince+3
  6255  01CC  00A7               	movwf	?_timeSince+3
  6256  01CD  082A               	movf	??_timeSince+2,w
  6257  01CE  00A6               	movwf	?_timeSince+2
  6258  01CF  0829               	movf	??_timeSince+1,w
  6259  01D0  00A5               	movwf	?_timeSince+1
  6260  01D1  0828               	movf	??_timeSince,w
  6261  01D2  00A4               	movwf	?_timeSince
  6262  01D3  0008               	return
  6263  01D4                     l5582:	
  6264                           
  6265                           ;interrupt.c: 17:  return (now + (1 + 1000000000UL - since));
  6266  01D4  3001               	movlw	1
  6267  01D5  00A8               	movwf	??_timeSince
  6268  01D6  30CA               	movlw	202
  6269  01D7  00A9               	movwf	??_timeSince+1
  6270  01D8  309A               	movlw	154
  6271  01D9  00AA               	movwf	??_timeSince+2
  6272  01DA  303B               	movlw	59
  6273  01DB  00AB               	movwf	??_timeSince+3
  6274  01DC  0824               	movf	timeSince@since,w
  6275  01DD  0230               	subwf	timeSince@now,w
  6276  01DE  00AC               	movwf	??_timeSince+4
  6277  01DF  0825               	movf	timeSince@since+1,w
  6278  01E0  3B31               	subwfb	timeSince@now+1,w
  6279  01E1  00AD               	movwf	??_timeSince+5
  6280  01E2  0826               	movf	timeSince@since+2,w
  6281  01E3  3B32               	subwfb	timeSince@now+2,w
  6282  01E4  00AE               	movwf	??_timeSince+6
  6283  01E5  0827               	movf	timeSince@since+3,w
  6284  01E6  3B33               	subwfb	timeSince@now+3,w
  6285  01E7  00AF               	movwf	??_timeSince+7
  6286  01E8  082C               	movf	??_timeSince+4,w
  6287  01E9  07A8               	addwf	??_timeSince,f
  6288  01EA  082D               	movf	??_timeSince+5,w
  6289  01EB  3DA9               	addwfc	??_timeSince+1,f
  6290  01EC  082E               	movf	??_timeSince+6,w
  6291  01ED  3DAA               	addwfc	??_timeSince+2,f
  6292  01EE  082F               	movf	??_timeSince+7,w
  6293  01EF  3DAB               	addwfc	??_timeSince+3,f
  6294  01F0  082B               	movf	??_timeSince+3,w
  6295  01F1  00A7               	movwf	?_timeSince+3
  6296  01F2  082A               	movf	??_timeSince+2,w
  6297  01F3  00A6               	movwf	?_timeSince+2
  6298  01F4  0829               	movf	??_timeSince+1,w
  6299  01F5  00A5               	movwf	?_timeSince+1
  6300  01F6  0828               	movf	??_timeSince,w
  6301  01F7  00A4               	movwf	?_timeSince
  6302  01F8  0008               	return
  6303  01F9                     __end_of_timeSince:	
  6304  01F9                     __ptext67:	
  6305 ;; *************** function _OLED_init *****************
  6306 ;; Defined at:
  6307 ;;		line 90 in file "oled.c"
  6308 ;; Parameters:    Size  Location     Type
  6309 ;;		None
  6310 ;; Auto vars:     Size  Location     Type
  6311 ;;		None
  6312 ;; Return value:  Size  Location     Type
  6313 ;;                  1    wreg      void 
  6314 ;; Registers used:
  6315 ;;		wreg, status,2, status,0, pclath, cstack
  6316 ;; Tracked objects:
  6317 ;;		On entry : B3F/0
  6318 ;;		On exit  : 0/0
  6319 ;;		Unchanged: 0/0
  6320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6322 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6323 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6324 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6325 ;;Total ram usage:        1 bytes
  6326 ;; Hardware stack levels used:    1
  6327 ;; Hardware stack levels required when called:    6
  6328 ;; This function calls:
  6329 ;;		_OLED_command
  6330 ;;		_OLED_write4bits
  6331 ;; This function is called by:
  6332 ;;		_main
  6333 ;; This function uses a non-reentrant model
  6334 ;;
  6335                           
  6336                           
  6337                           ;psect for function _OLED_init
  6338  01F9                     _OLED_init:	
  6339                           
  6340                           ;oled.c: 92:  LATBbits.LATB4 = 0;
  6341                           
  6342                           ;incstack = 0
  6343                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
  6344  01F9  1219               	bcf	25,4	;volatile
  6345                           
  6346                           ;oled.c: 93:  LATBbits.LATB2 = 0;
  6347  01FA  1119               	bcf	25,2	;volatile
  6348                           
  6349                           ;oled.c: 94:  LATBbits.LATB3 = 0;
  6350  01FB  1199               	bcf	25,3	;volatile
  6351                           
  6352                           ;oled.c: 96:  _delay((unsigned long)((50)*(4000000UL/4000.0)));
  6353  01FC  3041               	movlw	65
  6354  01FD  0140               	movlb	0	; select bank0
  6355  01FE  00AA               	movwf	??_OLED_init
  6356  01FF  30EE               	movlw	238
  6357  0200                     u9457:	
  6358  0200  0B89               	decfsz	9,f
  6359  0201  2A00               	goto	u9457
  6360  0202  0BAA               	decfsz	??_OLED_init,f
  6361  0203  2A00               	goto	u9457
  6362  0204  0000               	nop
  6363                           
  6364                           ;oled.c: 100:  LATBbits.LATB1 = 0;
  6365  0205  0140               	movlb	0	; select bank0
  6366  0206  1099               	bcf	25,1	;volatile
  6367                           
  6368                           ;oled.c: 101:  LATBbits.LATB0 = 0;
  6369  0207  1019               	bcf	25,0	;volatile
  6370                           
  6371                           ;oled.c: 102:  LATCbits.LATC5 = 0;
  6372  0208  129A               	bcf	26,5	;volatile
  6373                           
  6374                           ;oled.c: 103:  LATCbits.LATC4 = 0;
  6375  0209  121A               	bcf	26,4	;volatile
  6376                           
  6377                           ;oled.c: 114:  OLED_write4bits(0x03);
  6378  020A  3003               	movlw	3
  6379  020B  3193  2391  3180   	fcall	_OLED_write4bits
  6380                           
  6381                           ;oled.c: 115:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  6382  020E  3007               	movlw	7
  6383  020F  0140               	movlb	0	; select bank0
  6384  0210  00AA               	movwf	??_OLED_init
  6385  0211  307D               	movlw	125
  6386  0212                     u9467:	
  6387  0212  0B89               	decfsz	9,f
  6388  0213  2A12               	goto	u9467
  6389  0214  0BAA               	decfsz	??_OLED_init,f
  6390  0215  2A12               	goto	u9467
  6391                           
  6392                           ;oled.c: 116:  OLED_write4bits(0x08);
  6393  0216  3008               	movlw	8
  6394  0217  3193  2391  3180   	fcall	_OLED_write4bits
  6395                           
  6396                           ;oled.c: 117:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  6397  021A  3007               	movlw	7
  6398  021B  0140               	movlb	0	; select bank0
  6399  021C  00AA               	movwf	??_OLED_init
  6400  021D  307D               	movlw	125
  6401  021E                     u9477:	
  6402  021E  0B89               	decfsz	9,f
  6403  021F  2A1E               	goto	u9477
  6404  0220  0BAA               	decfsz	??_OLED_init,f
  6405  0221  2A1E               	goto	u9477
  6406                           
  6407                           ;oled.c: 119:  OLED_write4bits(0x02);
  6408  0222  3002               	movlw	2
  6409  0223  3193  2391  3180   	fcall	_OLED_write4bits
  6410                           
  6411                           ;oled.c: 120:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  6412  0226  3007               	movlw	7
  6413  0227  0140               	movlb	0	; select bank0
  6414  0228  00AA               	movwf	??_OLED_init
  6415  0229  307D               	movlw	125
  6416  022A                     u9487:	
  6417  022A  0B89               	decfsz	9,f
  6418  022B  2A2A               	goto	u9487
  6419  022C  0BAA               	decfsz	??_OLED_init,f
  6420  022D  2A2A               	goto	u9487
  6421                           
  6422                           ;oled.c: 121:  OLED_write4bits(0x02);
  6423  022E  3002               	movlw	2
  6424  022F  3193  2391  3180   	fcall	_OLED_write4bits
  6425                           
  6426                           ;oled.c: 122:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  6427  0232  3007               	movlw	7
  6428  0233  0140               	movlb	0	; select bank0
  6429  0234  00AA               	movwf	??_OLED_init
  6430  0235  307D               	movlw	125
  6431  0236                     u9497:	
  6432  0236  0B89               	decfsz	9,f
  6433  0237  2A36               	goto	u9497
  6434  0238  0BAA               	decfsz	??_OLED_init,f
  6435  0239  2A36               	goto	u9497
  6436                           
  6437                           ;oled.c: 123:  OLED_write4bits(0x08);
  6438  023A  3008               	movlw	8
  6439  023B  3193  2391  3180   	fcall	_OLED_write4bits
  6440                           
  6441                           ;oled.c: 124:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  6442  023E  3007               	movlw	7
  6443  023F  0140               	movlb	0	; select bank0
  6444  0240  00AA               	movwf	??_OLED_init
  6445  0241  307D               	movlw	125
  6446  0242                     u9507:	
  6447  0242  0B89               	decfsz	9,f
  6448  0243  2A42               	goto	u9507
  6449  0244  0BAA               	decfsz	??_OLED_init,f
  6450  0245  2A42               	goto	u9507
  6451                           
  6452                           ;oled.c: 126:  OLED_command(0x08);
  6453  0246  3008               	movlw	8
  6454  0247  3193  237D  3180   	fcall	_OLED_command
  6455                           
  6456                           ;oled.c: 127:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  6457  024A  3007               	movlw	7
  6458  024B  0140               	movlb	0	; select bank0
  6459  024C  00AA               	movwf	??_OLED_init
  6460  024D  307D               	movlw	125
  6461  024E                     u9517:	
  6462  024E  0B89               	decfsz	9,f
  6463  024F  2A4E               	goto	u9517
  6464  0250  0BAA               	decfsz	??_OLED_init,f
  6465  0251  2A4E               	goto	u9517
  6466                           
  6467                           ;oled.c: 128:  OLED_command(0x01);
  6468  0252  3001               	movlw	1
  6469  0253  3193  237D  3180   	fcall	_OLED_command
  6470                           
  6471                           ;oled.c: 129:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  6472  0256  3007               	movlw	7
  6473  0257  0140               	movlb	0	; select bank0
  6474  0258  00AA               	movwf	??_OLED_init
  6475  0259  307D               	movlw	125
  6476  025A                     u9527:	
  6477  025A  0B89               	decfsz	9,f
  6478  025B  2A5A               	goto	u9527
  6479  025C  0BAA               	decfsz	??_OLED_init,f
  6480  025D  2A5A               	goto	u9527
  6481                           
  6482                           ;oled.c: 130:  OLED_command(0x06);
  6483  025E  3006               	movlw	6
  6484  025F  3193  237D  3180   	fcall	_OLED_command
  6485                           
  6486                           ;oled.c: 131:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  6487  0262  3007               	movlw	7
  6488  0263  0140               	movlb	0	; select bank0
  6489  0264  00AA               	movwf	??_OLED_init
  6490  0265  307D               	movlw	125
  6491  0266                     u9537:	
  6492  0266  0B89               	decfsz	9,f
  6493  0267  2A66               	goto	u9537
  6494  0268  0BAA               	decfsz	??_OLED_init,f
  6495  0269  2A66               	goto	u9537
  6496                           
  6497                           ;oled.c: 132:  OLED_command(0x02);
  6498  026A  3002               	movlw	2
  6499  026B  3193  237D  3180   	fcall	_OLED_command
  6500                           
  6501                           ;oled.c: 133:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  6502  026E  3007               	movlw	7
  6503  026F  0140               	movlb	0	; select bank0
  6504  0270  00AA               	movwf	??_OLED_init
  6505  0271  307D               	movlw	125
  6506  0272                     u9547:	
  6507  0272  0B89               	decfsz	9,f
  6508  0273  2A72               	goto	u9547
  6509  0274  0BAA               	decfsz	??_OLED_init,f
  6510  0275  2A72               	goto	u9547
  6511                           
  6512                           ;oled.c: 134:  OLED_command(0x0C);
  6513  0276  300C               	movlw	12
  6514  0277  3193  237D  3180   	fcall	_OLED_command
  6515                           
  6516                           ;oled.c: 135:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
  6517  027A  3007               	movlw	7
  6518  027B  0140               	movlb	0	; select bank0
  6519  027C  00AA               	movwf	??_OLED_init
  6520  027D  307D               	movlw	125
  6521  027E                     u9557:	
  6522  027E  0B89               	decfsz	9,f
  6523  027F  2A7E               	goto	u9557
  6524  0280  0BAA               	decfsz	??_OLED_init,f
  6525  0281  2A7E               	goto	u9557
  6526  0282  0008               	return
  6527  0283                     __end_of_OLED_init:	
  6528  0283                     __ptext65:	
  6529 ;; *************** function _OLED_loadSpecialChars *****************
  6530 ;; Defined at:
  6531 ;;		line 163 in file "oled.c"
  6532 ;; Parameters:    Size  Location     Type
  6533 ;;		None
  6534 ;; Auto vars:     Size  Location     Type
  6535 ;;  n               1   10[BANK0 ] unsigned char 
  6536 ;; Return value:  Size  Location     Type
  6537 ;;                  1    wreg      void 
  6538 ;; Registers used:
  6539 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6540 ;; Tracked objects:
  6541 ;;		On entry : 0/0
  6542 ;;		On exit  : 3F/0
  6543 ;;		Unchanged: 0/0
  6544 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6546 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6548 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6549 ;;Total ram usage:        1 bytes
  6550 ;; Hardware stack levels used:    1
  6551 ;; Hardware stack levels required when called:    6
  6552 ;; This function calls:
  6553 ;;		_OLED_command
  6554 ;;		_OLED_write
  6555 ;; This function is called by:
  6556 ;;		_main
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           
  6561                           ;psect for function _OLED_loadSpecialChars
  6562  0283                     _OLED_loadSpecialChars:	
  6563                           
  6564                           ;oled.c: 165:  uint8_t n;;oled.c: 167:  OLED_command(0x40 + 8);
  6565                           
  6566                           ;incstack = 0
  6567                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6568  0283  3048               	movlw	72
  6569  0284  3193  237D  3180   	fcall	_OLED_command
  6570                           
  6571                           ;oled.c: 168:  for(n = 0; n < sizeof(specialChars); n++) {
  6572  0287  01AA               	clrf	OLED_loadSpecialChars@n
  6573  0288                     l6320:	
  6574                           
  6575                           ;oled.c: 169:   OLED_write(specialChars[n]);
  6576  0288  082A               	movf	OLED_loadSpecialChars@n,w
  6577  0289  3EDC               	addlw	low (_specialChars| (0+32768))
  6578  028A  0084               	movwf	4
  6579  028B  30B0               	movlw	high (_specialChars| (0+32768))
  6580  028C  1803               	skipnc
  6581  028D  3E01               	addlw	1
  6582  028E  0085               	movwf	5
  6583  028F  0800               	movf	0,w	;code access
  6584  0290  3197  2764  3180   	fcall	_OLED_write
  6585  0293  3020               	movlw	32
  6586                           
  6587                           ;oled.c: 170:  }
  6588  0294  0AAA               	incf	OLED_loadSpecialChars@n,f
  6589  0295  022A               	subwf	OLED_loadSpecialChars@n,w
  6590  0296  1803               	btfsc	3,0
  6591  0297  0008               	return
  6592  0298  2A88               	goto	l6320
  6593  0299                     __end_of_OLED_loadSpecialChars:	
  6594  0299                     __ptext34:	
  6595 ;; *************** function _checkSensor *****************
  6596 ;; Defined at:
  6597 ;;		line 206 in file "system.c"
  6598 ;; Parameters:    Size  Location     Type
  6599 ;;		None
  6600 ;; Auto vars:     Size  Location     Type
  6601 ;;		None
  6602 ;; Return value:  Size  Location     Type
  6603 ;;                  1    wreg      unsigned char 
  6604 ;; Registers used:
  6605 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6606 ;; Tracked objects:
  6607 ;;		On entry : 3E/0
  6608 ;;		On exit  : 30/0
  6609 ;;		Unchanged: 0/0
  6610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6613 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6614 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6615 ;;Total ram usage:        1 bytes
  6616 ;; Hardware stack levels used:    1
  6617 ;; Hardware stack levels required when called:    5
  6618 ;; This function calls:
  6619 ;;		___flge
  6620 ;;		_error
  6621 ;;		_timeSince
  6622 ;;		_uartReset
  6623 ;;		_uartSendByte
  6624 ;; This function is called by:
  6625 ;;		_main
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           
  6630                           ;psect for function _checkSensor
  6631  0299                     _checkSensor:	
  6632                           
  6633                           ;system.c: 208:  static uint32_t sensorUpdateInterval = 100;;system.c: 209:  static uint
      +                          32_t sensorTimeout = 0;;system.c: 212:  if ((data.tempAux < -30) || (data.tempAux > 60))
      +                           {
  6634                           
  6635                           ;incstack = 0
  6636                           ; Regs used in _checkSensor: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  6637  0299  304A               	movlw	74
  6638  029A  0086               	movwf	6
  6639  029B  3027               	movlw	39
  6640  029C  0087               	movwf	7
  6641  029D  314D               	addfsr 1,13
  6642  029E  3F40               	moviw [0]fsr1
  6643  029F  0141               	movlb	1	; select bank1
  6644  02A0  00AD               	movwf	___flge@ff1^(0+128)
  6645  02A1  3F41               	moviw [1]fsr1
  6646  02A2  00AE               	movwf	(___flge@ff1+1)^(0+128)
  6647  02A3  3F42               	moviw [2]fsr1
  6648  02A4  00AF               	movwf	(___flge@ff1+2)^(0+128)
  6649  02A5  3F43               	moviw [3]fsr1
  6650  02A6  00B0               	movwf	(___flge@ff1+3)^(0+128)
  6651  02A7  30C1               	movlw	193
  6652  02A8  00B4               	movwf	(___flge@ff2+3)^(0+128)
  6653  02A9  30F0               	movlw	240
  6654  02AA  00B3               	movwf	(___flge@ff2+2)^(0+128)
  6655  02AB  01B2               	clrf	(___flge@ff2+1)^(0+128)
  6656  02AC  01B1               	clrf	___flge@ff2^(0+128)
  6657  02AD  318E  26B1  3180   	fcall	___flge
  6658  02B0  1C03               	btfss	3,0
  6659  02B1  2ACA               	goto	l8238
  6660  02B2  3042               	movlw	66
  6661  02B3  00B0               	movwf	(___flge@ff1+3)^(0+128)
  6662  02B4  3070               	movlw	112
  6663  02B5  00AF               	movwf	(___flge@ff1+2)^(0+128)
  6664  02B6  304A               	movlw	74
  6665  02B7  01AE               	clrf	(___flge@ff1+1)^(0+128)
  6666  02B8  01AD               	clrf	___flge@ff1^(0+128)
  6667  02B9  0086               	movwf	6
  6668  02BA  3027               	movlw	39
  6669  02BB  0087               	movwf	7
  6670  02BC  314D               	addfsr 1,13
  6671  02BD  3F40               	moviw [0]fsr1
  6672  02BE  00B1               	movwf	___flge@ff2^(0+128)
  6673  02BF  3F41               	moviw [1]fsr1
  6674  02C0  00B2               	movwf	(___flge@ff2+1)^(0+128)
  6675  02C1  3F42               	moviw [2]fsr1
  6676  02C2  00B3               	movwf	(___flge@ff2+2)^(0+128)
  6677  02C3  3F43               	moviw [3]fsr1
  6678  02C4  00B4               	movwf	(___flge@ff2+3)^(0+128)
  6679  02C5  318E  26B1  3180   	fcall	___flge
  6680  02C8  1803               	btfsc	3,0
  6681  02C9  2AD0               	goto	l8240
  6682  02CA                     l8238:	
  6683                           
  6684                           ;system.c: 213:   data.status.AUX_SENSOR_OK = 0;
  6685  02CA  3073               	movlw	115
  6686  02CB  0086               	movwf	6
  6687  02CC  3027               	movlw	39
  6688  02CD  0087               	movwf	7
  6689  02CE  1201               	bcf	1,4
  6690                           
  6691                           ;system.c: 214:  } else
  6692  02CF  2AD5               	goto	l8242
  6693  02D0                     l8240:	
  6694                           
  6695                           ;system.c: 215:   data.status.AUX_SENSOR_OK = 1;
  6696  02D0  3073               	movlw	115
  6697  02D1  0086               	movwf	6
  6698  02D2  3027               	movlw	39
  6699  02D3  0087               	movwf	7
  6700  02D4  1601               	bsf	1,4
  6701  02D5                     l8242:	
  6702                           
  6703                           ;system.c: 218:  if ((uartDataReadyFlag == 0) && (timeSince(sensorUpdateInterval) >= 100
      +                          )) {
  6704  02D5  086F               	movf	_uartDataReadyFlag^(0+128),w	;volatile
  6705  02D6  1D03               	btfss	3,2
  6706  02D7  2B12               	goto	l8250
  6707  02D8  0144               	movlb	4	; select bank4
  6708  02D9  0861               	movf	(checkSensor@sensorUpdateInterval+3)^(0+512),w
  6709  02DA  0140               	movlb	0	; select bank0
  6710  02DB  00A7               	movwf	timeSince@since+3
  6711  02DC  0144               	movlb	4	; select bank4
  6712  02DD  0860               	movf	(checkSensor@sensorUpdateInterval+2)^(0+512),w
  6713  02DE  0140               	movlb	0	; select bank0
  6714  02DF  00A6               	movwf	timeSince@since+2
  6715  02E0  0144               	movlb	4	; select bank4
  6716  02E1  085F               	movf	(checkSensor@sensorUpdateInterval+1)^(0+512),w
  6717  02E2  0140               	movlb	0	; select bank0
  6718  02E3  00A5               	movwf	timeSince@since+1
  6719  02E4  0144               	movlb	4	; select bank4
  6720  02E5  085E               	movf	checkSensor@sensorUpdateInterval^(0+512),w
  6721  02E6  0140               	movlb	0	; select bank0
  6722  02E7  00A4               	movwf	timeSince@since
  6723  02E8  21A0  3180         	fcall	_timeSince
  6724  02EA  0827               	movf	?_timeSince+3,w
  6725  02EB  1D03               	btfss	3,2
  6726  02EC  2AF7               	goto	l8246
  6727  02ED  0826               	movf	?_timeSince+2,w
  6728  02EE  1D03               	btfss	3,2
  6729  02EF  2AF7               	goto	l8246
  6730  02F0  0825               	movf	?_timeSince+1,w
  6731  02F1  1D03               	btfss	3,2
  6732  02F2  2AF7               	goto	l8246
  6733  02F3  3064               	movlw	100
  6734  02F4  0224               	subwf	?_timeSince,w
  6735  02F5  1C03               	btfss	3,0
  6736  02F6  2B12               	goto	l8250
  6737  02F7                     l8246:	
  6738                           
  6739                           ;system.c: 219:   sensorUpdateInterval = sensorTimeout = tick100ms;
  6740  02F7  0142               	movlb	2	; select bank2
  6741  02F8  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
  6742  02F9  0144               	movlb	4	; select bank4
  6743  02FA  00B1               	movwf	(checkSensor@sensorTimeout+3)^(0+512)
  6744  02FB  0142               	movlb	2	; select bank2
  6745  02FC  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
  6746  02FD  0144               	movlb	4	; select bank4
  6747  02FE  00B0               	movwf	(checkSensor@sensorTimeout+2)^(0+512)
  6748  02FF  0142               	movlb	2	; select bank2
  6749  0300  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
  6750  0301  0144               	movlb	4	; select bank4
  6751  0302  00AF               	movwf	(checkSensor@sensorTimeout+1)^(0+512)
  6752  0303  0142               	movlb	2	; select bank2
  6753  0304  0867               	movf	_tick100ms^(0+256),w	;volatile
  6754  0305  0144               	movlb	4	; select bank4
  6755  0306  00AE               	movwf	checkSensor@sensorTimeout^(0+512)
  6756  0307  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
  6757  0308  00E1               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+512)
  6758  0309  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
  6759  030A  00E0               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+512)
  6760  030B  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
  6761  030C  00DF               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+512)
  6762  030D  082E               	movf	checkSensor@sensorTimeout^(0+512),w
  6763  030E  00DE               	movwf	checkSensor@sensorUpdateInterval^(0+512)
  6764                           
  6765                           ;system.c: 220:   uartSendByte('?');
  6766  030F  303F               	movlw	63
  6767  0310  245E               	fcall	_uartSendByte
  6768                           
  6769                           ;system.c: 221:  } else if (uartDataReadyFlag == 1) {
  6770  0311  3400               	retlw	0
  6771  0312                     l8250:	
  6772  0312  0141               	movlb	1	; select bank1
  6773  0313  0B6F               	decfsz	_uartDataReadyFlag^(0+128),w	;volatile
  6774  0314  3400               	retlw	0
  6775                           
  6776                           ;system.c: 222:   if (timeSince(sensorTimeout) > 20) {
  6777  0315  0144               	movlb	4	; select bank4
  6778  0316  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
  6779  0317  0140               	movlb	0	; select bank0
  6780  0318  00A7               	movwf	timeSince@since+3
  6781  0319  0144               	movlb	4	; select bank4
  6782  031A  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
  6783  031B  0140               	movlb	0	; select bank0
  6784  031C  00A6               	movwf	timeSince@since+2
  6785  031D  0144               	movlb	4	; select bank4
  6786  031E  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
  6787  031F  0140               	movlb	0	; select bank0
  6788  0320  00A5               	movwf	timeSince@since+1
  6789  0321  0144               	movlb	4	; select bank4
  6790  0322  082E               	movf	checkSensor@sensorTimeout^(0+512),w
  6791  0323  0140               	movlb	0	; select bank0
  6792  0324  00A4               	movwf	timeSince@since
  6793  0325  21A0  3180         	fcall	_timeSince
  6794  0327  0827               	movf	?_timeSince+3,w
  6795  0328  1D03               	btfss	3,2
  6796  0329  2B34               	goto	l8254
  6797  032A  0826               	movf	?_timeSince+2,w
  6798  032B  1D03               	btfss	3,2
  6799  032C  2B34               	goto	l8254
  6800  032D  0825               	movf	?_timeSince+1,w
  6801  032E  1D03               	btfss	3,2
  6802  032F  2B34               	goto	l8254
  6803  0330  3015               	movlw	21
  6804  0331  0224               	subwf	?_timeSince,w
  6805  0332  1C03               	btfss	3,0
  6806  0333  2B40               	goto	l8264
  6807  0334                     l8254:	
  6808                           
  6809                           ;system.c: 224:    uartDataReadyFlag = 0;
  6810  0334  0141               	movlb	1	; select bank1
  6811  0335  01EF               	clrf	_uartDataReadyFlag^(0+128)	;volatile
  6812                           
  6813                           ;system.c: 225:    uartReset();
  6814  0336  2384  3180         	fcall	_uartReset
  6815                           
  6816                           ;system.c: 226:    if (data.status.SENSOR_OK) {
  6817  0338  3073               	movlw	115
  6818  0339  0086               	movwf	6
  6819  033A  3027               	movlw	39
  6820  033B  0087               	movwf	7
  6821  033C  1D81               	btfss	1,3
  6822  033D  3400               	retlw	0
  6823                           
  6824                           ;system.c: 227:     data.status.SENSOR_OK = 0;
  6825  033E  300A               	movlw	10
  6826  033F  2B80               	goto	L16
  6827  0340                     l8264:	
  6828                           ;system.c: 228:     error(WARN_SENSOR_TIMEOUT);
  6829                           
  6830                           
  6831                           ;system.c: 231:    uartDataReadyFlag = 0;
  6832  0340  0141               	movlb	1	; select bank1
  6833  0341  01EF               	clrf	_uartDataReadyFlag^(0+128)	;volatile
  6834                           
  6835                           ;system.c: 233:    if ((dataPacket.header == 0xAA) && (dataPacket.status == 1)) {
  6836  0342  30AA               	movlw	170
  6837  0343  0144               	movlb	4	; select bank4
  6838  0344  0638               	xorwf	_dataPacket^(0+512),w	;volatile
  6839  0345  1D03               	btfss	3,2
  6840  0346  2B79               	goto	l8282
  6841  0347  0B3A               	decfsz	(_dataPacket^(0+512)+2),w	;volatile
  6842  0348  2B79               	goto	l8282
  6843                           
  6844                           ;system.c: 234:     data.tempC = dataPacket.tempC;
  6845  0349  304A               	movlw	74
  6846  034A  0086               	movwf	6
  6847  034B  3027               	movlw	39
  6848  034C  0087               	movwf	7
  6849  034D  083B               	movf	(_dataPacket^(0+512)+3),w	;volatile
  6850  034E  3FC0               	movwi [0]fsr1
  6851  034F  083C               	movf	((_dataPacket+1)^(0+512)+3),w	;volatile
  6852  0350  3FC1               	movwi [1]fsr1
  6853  0351  083D               	movf	((_dataPacket+2)^(0+512)+3),w	;volatile
  6854  0352  3FC2               	movwi [2]fsr1
  6855  0353  083E               	movf	((_dataPacket+3)^(0+512)+3),w	;volatile
  6856  0354  3FC3               	movwi [3]fsr1
  6857                           
  6858                           ;system.c: 235:     data.relHum = dataPacket.relHum;
  6859  0355  3144               	addfsr 1,4
  6860  0356  083F               	movf	(_dataPacket^(0+512)+7),w	;volatile
  6861  0357  3FC0               	movwi [0]fsr1
  6862  0358  0840               	movf	((_dataPacket+1)^(0+512)+7),w	;volatile
  6863  0359  3FC1               	movwi [1]fsr1
  6864  035A  0841               	movf	((_dataPacket+2)^(0+512)+7),w	;volatile
  6865  035B  3FC2               	movwi [2]fsr1
  6866  035C  0842               	movf	((_dataPacket+3)^(0+512)+7),w	;volatile
  6867  035D  3FC3               	movwi [3]fsr1
  6868                           
  6869                           ;system.c: 236:     data.dewPointC = dataPacket.dewPointC;
  6870  035E  304A               	movlw	74
  6871  035F  0086               	movwf	6
  6872  0360  3027               	movlw	39
  6873  0361  0087               	movwf	7
  6874  0362  3148               	addfsr 1,8
  6875  0363  0843               	movf	(_dataPacket^(0+512)+11),w	;volatile
  6876  0364  3FC0               	movwi [0]fsr1
  6877  0365  0844               	movf	((_dataPacket+1)^(0+512)+11),w	;volatile
  6878  0366  3FC1               	movwi [1]fsr1
  6879  0367  0845               	movf	((_dataPacket+2)^(0+512)+11),w	;volatile
  6880  0368  3FC2               	movwi [2]fsr1
  6881  0369  0846               	movf	((_dataPacket+3)^(0+512)+11),w	;volatile
  6882  036A  3FC3               	movwi [3]fsr1
  6883                           
  6884                           ;system.c: 237:     data.sensorVersion = dataPacket.version;
  6885  036B  0839               	movf	(_dataPacket^(0+512)+1),w	;volatile
  6886  036C  0141               	movlb	1	; select bank1
  6887  036D  00B9               	movwf	??_checkSensor^(0+128)
  6888  036E  3056               	movlw	86
  6889  036F  0086               	movwf	6
  6890  0370  3027               	movlw	39
  6891  0371  0087               	movwf	7
  6892  0372  0839               	movf	??_checkSensor^(0+128),w
  6893  0373  0081               	movwf	1
  6894                           
  6895                           ;system.c: 238:     data.status.SENSOR_OK = 1;
  6896  0374  3073               	movlw	115
  6897  0375  0086               	movwf	6
  6898  0376  3001               	movlw	1
  6899  0377  1581               	bsf	1,3
  6900                           
  6901                           ;system.c: 239:     return 1;
  6902  0378  0008               	return
  6903  0379                     l8282:	
  6904                           
  6905                           ;system.c: 242:     if (data.status.SENSOR_OK) {
  6906  0379  3073               	movlw	115
  6907  037A  0086               	movwf	6
  6908  037B  3027               	movlw	39
  6909  037C  0087               	movwf	7
  6910  037D  1D81               	btfss	1,3
  6911  037E  3400               	retlw	0
  6912                           
  6913                           ;system.c: 243:      data.status.SENSOR_OK = 0;
  6914  037F  300B               	movlw	11
  6915  0380                     L16:	
  6916  0380  1181               	bcf	1,3
  6917                           
  6918                           ;system.c: 244:      error(WARN_SENSOR_CHECKSUM);
  6919  0381  31A4  2431         	fcall	_error
  6920                           
  6921                           ;system.c: 249:  return 0;
  6922                           
  6923                           ;system.c: 248:  }
  6924  0383  3400               	retlw	0
  6925  0384                     __end_of_checkSensor:	
  6926  0384                     __ptext36:	
  6927 ;; *************** function _uartReset *****************
  6928 ;; Defined at:
  6929 ;;		line 64 in file "uart.c"
  6930 ;; Parameters:    Size  Location     Type
  6931 ;;		None
  6932 ;; Auto vars:     Size  Location     Type
  6933 ;;		None
  6934 ;; Return value:  Size  Location     Type
  6935 ;;                  1    wreg      void 
  6936 ;; Registers used:
  6937 ;;		status,2
  6938 ;; Tracked objects:
  6939 ;;		On entry : 3F/1
  6940 ;;		On exit  : 3F/0
  6941 ;;		Unchanged: 0/0
  6942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6947 ;;Total ram usage:        0 bytes
  6948 ;; Hardware stack levels used:    1
  6949 ;; Hardware stack levels required when called:    3
  6950 ;; This function calls:
  6951 ;;		Nothing
  6952 ;; This function is called by:
  6953 ;;		_checkSensor
  6954 ;; This function uses a non-reentrant model
  6955 ;;
  6956                           
  6957                           
  6958                           ;psect for function _uartReset
  6959  0384                     _uartReset:	
  6960                           
  6961                           ;uart.c: 69:  RC1STAbits.CREN = 0;
  6962                           
  6963                           ;incstack = 0
  6964                           ; Regs used in _uartReset: [status,2]
  6965  0384  0142               	movlb	2	; select bank2
  6966  0385  121D               	bcf	29,4	;volatile
  6967                           
  6968                           ;uart.c: 70:  RC1STAbits.CREN = 1;
  6969  0386  161D               	bsf	29,4	;volatile
  6970                           
  6971                           ;uart.c: 71:  RC1STAbits.SPEN = 0;
  6972  0387  139D               	bcf	29,7	;volatile
  6973                           
  6974                           ;uart.c: 72:  RC1STAbits.SPEN = 1;
  6975  0388  179D               	bsf	29,7	;volatile
  6976                           
  6977                           ;uart.c: 73:  rxCount = 0;
  6978  0389  0140               	movlb	0	; select bank0
  6979  038A  01E9               	clrf	_rxCount	;volatile
  6980  038B  0008               	return
  6981  038C                     __end_of_uartReset:	
  6982  038C                     __ptext33:	
  6983 ;; *************** function _controller *****************
  6984 ;; Defined at:
  6985 ;;		line 424 in file "system.c"
  6986 ;; Parameters:    Size  Location     Type
  6987 ;;		None
  6988 ;; Auto vars:     Size  Location     Type
  6989 ;;  timer           4   24[BANK0 ] unsigned long 
  6990 ;;  n               1   28[BANK0 ] unsigned char 
  6991 ;; Return value:  Size  Location     Type
  6992 ;;                  1    wreg      unsigned char 
  6993 ;; Registers used:
  6994 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6995 ;; Tracked objects:
  6996 ;;		On entry : 3F/2
  6997 ;;		On exit  : 3F/3
  6998 ;;		Unchanged: 0/0
  6999 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7001 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7002 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7003 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7004 ;;Total ram usage:        9 bytes
  7005 ;; Hardware stack levels used:    1
  7006 ;; Hardware stack levels required when called:    4
  7007 ;; This function calls:
  7008 ;;		___bmul
  7009 ;;		_setChannelSwitch
  7010 ;;		_timeSince
  7011 ;; This function is called by:
  7012 ;;		_main
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           
  7017                           ;psect for function _controller
  7018  038C                     _controller:	
  7019                           
  7020                           ;system.c: 426:  static uint32_t dutyCycleTimer;;system.c: 427:  uint32_t timer;;system.
      +                          c: 428:  static uint8_t idle;;system.c: 429:  uint8_t n;;system.c: 431:  if (idle) {
  7021                           
  7022                           ;incstack = 0
  7023                           ; Regs used in _controller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7024  038C  0143               	movlb	3	; select bank3
  7025  038D  0860               	movf	controller@idle^(0+384),w
  7026  038E  1903               	btfsc	3,2
  7027  038F  2BA2               	goto	l8534
  7028                           
  7029                           ;system.c: 432:   dutyCycleTimer = tick100ms;
  7030  0390  0142               	movlb	2	; select bank2
  7031  0391  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
  7032  0392  0144               	movlb	4	; select bank4
  7033  0393  00AD               	movwf	(controller@dutyCycleTimer+3)^(0+512)
  7034  0394  0142               	movlb	2	; select bank2
  7035  0395  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
  7036  0396  0144               	movlb	4	; select bank4
  7037  0397  00AC               	movwf	(controller@dutyCycleTimer+2)^(0+512)
  7038  0398  0142               	movlb	2	; select bank2
  7039  0399  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
  7040  039A  0144               	movlb	4	; select bank4
  7041  039B  00AB               	movwf	(controller@dutyCycleTimer+1)^(0+512)
  7042  039C  0142               	movlb	2	; select bank2
  7043  039D  0867               	movf	_tick100ms^(0+256),w	;volatile
  7044  039E  0144               	movlb	4	; select bank4
  7045  039F  00AA               	movwf	controller@dutyCycleTimer^(0+512)
  7046                           
  7047                           ;system.c: 433:   idle = 0;
  7048  03A0  0143               	movlb	3	; select bank3
  7049  03A1  01E0               	clrf	controller@idle^(0+384)
  7050  03A2                     l8534:	
  7051                           
  7052                           ;system.c: 436:  timer = timeSince(dutyCycleTimer);
  7053  03A2  0144               	movlb	4	; select bank4
  7054  03A3  082D               	movf	(controller@dutyCycleTimer+3)^(0+512),w
  7055  03A4  0140               	movlb	0	; select bank0
  7056  03A5  00A7               	movwf	timeSince@since+3
  7057  03A6  0144               	movlb	4	; select bank4
  7058  03A7  082C               	movf	(controller@dutyCycleTimer+2)^(0+512),w
  7059  03A8  0140               	movlb	0	; select bank0
  7060  03A9  00A6               	movwf	timeSince@since+2
  7061  03AA  0144               	movlb	4	; select bank4
  7062  03AB  082B               	movf	(controller@dutyCycleTimer+1)^(0+512),w
  7063  03AC  0140               	movlb	0	; select bank0
  7064  03AD  00A5               	movwf	timeSince@since+1
  7065  03AE  0144               	movlb	4	; select bank4
  7066  03AF  082A               	movf	controller@dutyCycleTimer^(0+512),w
  7067  03B0  0140               	movlb	0	; select bank0
  7068  03B1  00A4               	movwf	timeSince@since
  7069  03B2  21A0               	fcall	_timeSince
  7070  03B3  0827               	movf	?_timeSince+3,w
  7071  03B4  00BB               	movwf	controller@timer+3
  7072  03B5  0826               	movf	?_timeSince+2,w
  7073  03B6  00BA               	movwf	controller@timer+2
  7074  03B7  0825               	movf	?_timeSince+1,w
  7075  03B8  00B9               	movwf	controller@timer+1
  7076  03B9  0824               	movf	?_timeSince,w
  7077  03BA  00B8               	movwf	controller@timer
  7078                           
  7079                           ;system.c: 438:  for(n = 0; n < 4; n++) {
  7080  03BB  01BC               	clrf	controller@n
  7081  03BC                     l8542:	
  7082                           
  7083                           ;system.c: 439:   if (timer >= virtChannels[n].stop)
  7084  03BC  3009               	movlw	9
  7085  03BD  00AC               	movwf	___bmul@multiplicand
  7086  03BE  083C               	movf	controller@n,w
  7087  03BF  318E  268D  3180   	fcall	___bmul
  7088  03C2  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
  7089  03C3  0086               	movwf	6
  7090  03C4  3002               	movlw	2	; select bank5/6
  7091  03C5  0087               	movwf	7
  7092  03C6  0801               	movf	1,w
  7093  03C7  00B4               	movwf	??_controller
  7094  03C8  01B5               	clrf	??_controller+1
  7095  03C9  01B6               	clrf	??_controller+2
  7096  03CA  01B7               	clrf	??_controller+3
  7097  03CB  0837               	movf	??_controller+3,w
  7098  03CC  023B               	subwf	controller@timer+3,w
  7099  03CD  1D03               	skipz
  7100  03CE  2BD9               	goto	u8995
  7101  03CF  0836               	movf	??_controller+2,w
  7102  03D0  023A               	subwf	controller@timer+2,w
  7103  03D1  1D03               	skipz
  7104  03D2  2BD9               	goto	u8995
  7105  03D3  0835               	movf	??_controller+1,w
  7106  03D4  0239               	subwf	controller@timer+1,w
  7107  03D5  1D03               	skipz
  7108  03D6  2BD9               	goto	u8995
  7109  03D7  0834               	movf	??_controller,w
  7110  03D8  0238               	subwf	controller@timer,w
  7111  03D9                     u8995:	
  7112  03D9  3009               	movlw	9
  7113  03DA  1C03               	skipc
  7114  03DB  2BDE               	goto	L14
  7115                           
  7116                           ;system.c: 440:    setChannelSwitch(virtChannels[n].phyChanNum, 0);
  7117  03DC  01AF               	clrf	setChannelSwitch@state
  7118  03DD  2C1E               	goto	L13
  7119  03DE                     L14:	
  7120  03DE  00AC               	movwf	___bmul@multiplicand
  7121  03DF  083C               	movf	controller@n,w
  7122  03E0  318E  268D  3180   	fcall	___bmul
  7123  03E3  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
  7124  03E4  0086               	movwf	6
  7125  03E5  3002               	movlw	2	; select bank5/6
  7126  03E6  0087               	movwf	7
  7127  03E7  0801               	movf	1,w
  7128  03E8  00B4               	movwf	??_controller
  7129  03E9  01B5               	clrf	??_controller+1
  7130  03EA  01B6               	clrf	??_controller+2
  7131  03EB  01B7               	clrf	??_controller+3
  7132  03EC  0837               	movf	??_controller+3,w
  7133  03ED  023B               	subwf	controller@timer+3,w
  7134  03EE  1D03               	skipz
  7135  03EF  2BFA               	goto	u9005
  7136  03F0  0836               	movf	??_controller+2,w
  7137  03F1  023A               	subwf	controller@timer+2,w
  7138  03F2  1D03               	skipz
  7139  03F3  2BFA               	goto	u9005
  7140  03F4  0835               	movf	??_controller+1,w
  7141  03F5  0239               	subwf	controller@timer+1,w
  7142  03F6  1D03               	skipz
  7143  03F7  2BFA               	goto	u9005
  7144  03F8  0834               	movf	??_controller,w
  7145  03F9  0238               	subwf	controller@timer,w
  7146  03FA                     u9005:	
  7147  03FA  1C03               	skipc
  7148  03FB  2C2B               	goto	l8552
  7149  03FC  3009               	movlw	9
  7150  03FD  00AC               	movwf	___bmul@multiplicand
  7151  03FE  083C               	movf	controller@n,w
  7152  03FF  318E  268D  3180   	fcall	___bmul
  7153  0402  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
  7154  0403  0086               	movwf	6
  7155  0404  3002               	movlw	2	; select bank5/6
  7156  0405  0087               	movwf	7
  7157  0406  0801               	movf	1,w
  7158  0407  00B4               	movwf	??_controller
  7159  0408  01B5               	clrf	??_controller+1
  7160  0409  01B6               	clrf	??_controller+2
  7161  040A  01B7               	clrf	??_controller+3
  7162  040B  0837               	movf	??_controller+3,w
  7163  040C  023B               	subwf	controller@timer+3,w
  7164  040D  1D03               	skipz
  7165  040E  2C19               	goto	u9015
  7166  040F  0836               	movf	??_controller+2,w
  7167  0410  023A               	subwf	controller@timer+2,w
  7168  0411  1D03               	skipz
  7169  0412  2C19               	goto	u9015
  7170  0413  0835               	movf	??_controller+1,w
  7171  0414  0239               	subwf	controller@timer+1,w
  7172  0415  1D03               	skipz
  7173  0416  2C19               	goto	u9015
  7174  0417  0834               	movf	??_controller,w
  7175  0418  0238               	subwf	controller@timer,w
  7176  0419                     u9015:	
  7177  0419  1803               	skipnc
  7178  041A  2C2B               	goto	l8552
  7179  041B  3009               	movlw	9
  7180                           
  7181                           ;system.c: 442:    setChannelSwitch(virtChannels[n].phyChanNum, 1);
  7182  041C  01AF               	clrf	setChannelSwitch@state
  7183  041D  0AAF               	incf	setChannelSwitch@state,f
  7184  041E                     L13:	
  7185  041E  00AC               	movwf	___bmul@multiplicand
  7186  041F  083C               	movf	controller@n,w
  7187  0420  318E  268D  3180   	fcall	___bmul
  7188  0423  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
  7189  0424  0086               	movwf	6
  7190  0425  3002               	movlw	2	; select bank5/6
  7191  0426  0087               	movwf	7
  7192  0427  0801               	movf	1,w
  7193  0428  31A4  245D  3180   	fcall	_setChannelSwitch
  7194  042B                     l8552:	
  7195  042B  3004               	movlw	4
  7196                           
  7197                           ;system.c: 443:  }
  7198  042C  0ABC               	incf	controller@n,f
  7199  042D  023C               	subwf	controller@n,w
  7200  042E  1C03               	skipc
  7201  042F  2BBC               	goto	l8542
  7202                           
  7203                           ;system.c: 444:  if (timer >= 100) {
  7204  0430  083B               	movf	controller@timer+3,w
  7205  0431  1D03               	btfss	3,2
  7206  0432  2C3D               	goto	l8558
  7207  0433  083A               	movf	controller@timer+2,w
  7208  0434  1D03               	btfss	3,2
  7209  0435  2C3D               	goto	l8558
  7210  0436  0839               	movf	controller@timer+1,w
  7211  0437  1D03               	btfss	3,2
  7212  0438  2C3D               	goto	l8558
  7213  0439  3064               	movlw	100
  7214  043A  0238               	subwf	controller@timer,w
  7215  043B  1C03               	btfss	3,0
  7216  043C  2C49               	goto	l8566
  7217  043D                     l8558:	
  7218                           
  7219                           ;system.c: 445:   idle = 1;
  7220  043D  0143               	movlb	3	; select bank3
  7221  043E  01E0               	clrf	controller@idle^(0+384)
  7222  043F  0AE0               	incf	controller@idle^(0+384),f
  7223                           
  7224                           ;system.c: 447:   if (LATAbits.LATA0 || LATAbits.LATA1 || LATAbits.LATA2 || LATAbits.LAT
      +                          A3)
  7225  0440  0140               	movlb	0	; select bank0
  7226  0441  1C18               	btfss	24,0	;volatile
  7227  0442  1898               	btfsc	24,1	;volatile
  7228  0443  2C48               	goto	l920
  7229  0444  1918               	btfsc	24,2	;volatile
  7230  0445  2C48               	goto	l920
  7231  0446  1D98               	btfss	24,3	;volatile
  7232  0447  2C49               	goto	l8566
  7233  0448                     l920:	
  7234                           
  7235                           ;system.c: 448:    __nop();
  7236  0448  0000               	nop
  7237  0449                     l8566:	
  7238                           
  7239                           ;system.c: 451:  return idle;
  7240  0449  0143               	movlb	3	; select bank3
  7241  044A  0860               	movf	controller@idle^(0+384),w
  7242  044B  0008               	return
  7243  044C                     __end_of_controller:	
  7244  044C                     __ptext31:	
  7245 ;; *************** function _getLastError *****************
  7246 ;; Defined at:
  7247 ;;		line 28 in file "error.c"
  7248 ;; Parameters:    Size  Location     Type
  7249 ;;		None
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;		None
  7252 ;; Return value:  Size  Location     Type
  7253 ;;                  1    wreg      enum E7825
  7254 ;; Registers used:
  7255 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  7256 ;; Tracked objects:
  7257 ;;		On entry : 3F/2
  7258 ;;		On exit  : 3F/0
  7259 ;;		Unchanged: 0/0
  7260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7262 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7264 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7265 ;;Total ram usage:        2 bytes
  7266 ;; Hardware stack levels used:    1
  7267 ;; Hardware stack levels required when called:    3
  7268 ;; This function calls:
  7269 ;;		Nothing
  7270 ;; This function is called by:
  7271 ;;		_main
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275                           
  7276                           ;psect for function _getLastError
  7277  044C                     _getLastError:	
  7278                           
  7279                           ;error.c: 30:  return (head == tail) ? NO_ERROR : errorMessageQueue[tail];
  7280                           
  7281                           ;incstack = 0
  7282                           ; Regs used in _getLastError: [wreg+fsr1l+fsr1h+status,2+status,0]
  7283  044C  0141               	movlb	1	; select bank1
  7284  044D  086D               	movf	_head^(0+128),w
  7285  044E  0140               	movlb	0	; select bank0
  7286  044F  0668               	xorwf	_tail,w
  7287  0450  1903               	skipnz
  7288  0451  2C5A               	goto	l6780
  7289  0452  0868               	movf	_tail,w
  7290  0453  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
  7291  0454  0086               	movwf	6
  7292  0455  3002               	movlw	2	; select bank4/5
  7293  0456  0087               	movwf	7
  7294  0457  0801               	movf	1,w
  7295  0458  00A4               	movwf	_getLastError$1384
  7296  0459  2C5B               	goto	L12
  7297  045A                     l6780:	
  7298  045A  01A4               	clrf	_getLastError$1384
  7299  045B                     L12:	
  7300  045B  01A5               	clrf	_getLastError$1384+1
  7301  045C  0824               	movf	_getLastError$1384,w
  7302  045D  0008               	return
  7303  045E                     __end_of_getLastError:	
  7304  045E                     __ptext35:	
  7305 ;; *************** function _uartSendByte *****************
  7306 ;; Defined at:
  7307 ;;		line 16 in file "uart.c"
  7308 ;; Parameters:    Size  Location     Type
  7309 ;;  s               1    wreg     unsigned char 
  7310 ;; Auto vars:     Size  Location     Type
  7311 ;;  s               1    4[BANK0 ] unsigned char 
  7312 ;; Return value:  Size  Location     Type
  7313 ;;                  1    wreg      void 
  7314 ;; Registers used:
  7315 ;;		wreg
  7316 ;; Tracked objects:
  7317 ;;		On entry : 3F/4
  7318 ;;		On exit  : 3F/E
  7319 ;;		Unchanged: 0/0
  7320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7324 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7325 ;;Total ram usage:        1 bytes
  7326 ;; Hardware stack levels used:    1
  7327 ;; Hardware stack levels required when called:    3
  7328 ;; This function calls:
  7329 ;;		Nothing
  7330 ;; This function is called by:
  7331 ;;		_checkSensor
  7332 ;; This function uses a non-reentrant model
  7333 ;;
  7334                           
  7335                           
  7336                           ;psect for function _uartSendByte
  7337  045E                     _uartSendByte:	
  7338                           
  7339                           ;incstack = 0
  7340                           ; Regs used in _uartSendByte: [wreg]
  7341                           ;uartSendByte@s stored from wreg
  7342  045E  0140               	movlb	0	; select bank0
  7343  045F  00A4               	movwf	uartSendByte@s
  7344                           
  7345                           ;uart.c: 16: void uartSendByte(char s);uart.c: 17: {;uart.c: 18:  TX1REG = s;
  7346  0460  0824               	movf	uartSendByte@s,w
  7347  0461  0142               	movlb	2	; select bank2
  7348  0462  009A               	movwf	26	;volatile
  7349                           
  7350                           ;uart.c: 19:  __nop();
  7351  0463  0000               	nop
  7352  0464                     l380:	
  7353                           ;uart.c: 20:  while (!PIR3bits.TX1IF);
  7354                           
  7355  0464  014E               	movlb	14	; select bank14
  7356  0465  1A0F               	btfsc	15,4	;volatile
  7357  0466  0008               	return
  7358  0467  2C64               	goto	l380
  7359  0468                     __end_of_uartSendByte:	
  7360                           
  7361                           	psect	bssCOMMON
  7362  007C                     __pbssCOMMON:	
  7363  007C                     _pbState:	
  7364  007C                     	ds	1
  7365  007D                     _tick10ms:	
  7366  007D                     	ds	1
  7367                           
  7368                           	psect	bssBANK0
  7369  0068                     __pbssBANK0:	
  7370  0068                     _tail:	
  7371  0068                     	ds	1
  7372  0069                     _rxCount:	
  7373  0069                     	ds	1
  7374  006A                     _curRotState:	
  7375  006A                     	ds	1
  7376                           
  7377                           	psect	dataBANK0
  7378  006B                     __pdataBANK0:	
  7379  006B                     _g_screenRefresh:	
  7380  006B                     	ds	1
  7381                           
  7382                           	psect	bssBANK1
  7383  00ED                     __pbssBANK1:	
  7384  00ED                     _head:	
  7385  00ED                     	ds	1
  7386  00EE                     _selectedChannel:	
  7387  00EE                     	ds	1
  7388  00EF                     _uartDataReadyFlag:	
  7389  00EF                     	ds	1
  7390                           
  7391                           	psect	bssBANK2
  7392  0163                     __pbssBANK2:	
  7393  0163                     _userActivity:	
  7394  0163                     	ds	4
  7395  0167                     _tick100ms:	
  7396  0167                     	ds	4
  7397  016B                     menu@state:	
  7398  016B                     	ds	1
  7399  016C                     setup@page:	
  7400  016C                     	ds	1
  7401  016D                     channelSetup@page:	
  7402  016D                     	ds	1
  7403  016E                     channelView@page:	
  7404  016E                     	ds	1
  7405  016F                     statusView@page:	
  7406  016F                     	ds	1
  7407                           
  7408                           	psect	bssBANK3
  7409  01E0                     __pbssBANK3:	
  7410  01E0                     controller@idle:	
  7411  01E0                     	ds	1
  7412  01E1                     _checksum:	
  7413  01E1                     	ds	1
  7414  01E2                     _rxOErrCount:	
  7415  01E2                     	ds	1
  7416  01E3                     _rxFErrCount:	
  7417  01E3                     	ds	1
  7418  01E4                     _rotDir:	
  7419  01E4                     	ds	1
  7420  01E5                     _str:	
  7421  01E5                     	ds	10
  7422                           
  7423                           	psect	dataBANK3
  7424  01EF                     __pdataBANK3:	
  7425  01EF                     statusView@prevSensorStat:	
  7426  01EF                     	ds	1
  7427                           
  7428                           	psect	bssBANK4
  7429  0220                     __pbssBANK4:	
  7430  0220                     _errorMessageQueue:	
  7431  0220                     	ds	10
  7432  022A                     controller@dutyCycleTimer:	
  7433  022A                     	ds	4
  7434  022E                     checkSensor@sensorTimeout:	
  7435  022E                     	ds	4
  7436  0232                     getAnalogValues@avgI:	
  7437  0232                     	ds	2
  7438  0234                     getAnalogValues@avgV:	
  7439  0234                     	ds	2
  7440  0236                     getAnalogValues@avgT:	
  7441  0236                     	ds	2
  7442  0238                     _dataPacket:	
  7443  0238                     	ds	15
  7444                           
  7445                           	psect	dataBANK4
  7446  025E                     __pdataBANK4:	
  7447  025E                     checkSensor@sensorUpdateInterval:	
  7448  025E                     	ds	4
  7449  0262                     OLED_print_xy@F7972:	
  7450  0262                     	ds	4
  7451                           
  7452                           	psect	bssBANK5
  7453  02A0                     __pbssBANK5:	
  7454  02A0                     _virtChannels:	
  7455  02A0                     	ds	36
  7456  02C4                     _buffer:	
  7457  02C4                     	ds	20
  7458                           
  7459                           	psect	clrtext
  7460  2011                     clear_ram0:	
  7461                           ;	Called with FSR0 containing the base address, and
  7462                           ;	btemp/btemp+1 has the size to clear
  7463                           
  7464  2011  0064               	clrwdt	;clear the watchdog before getting into this loop
  7465  2012                     clrloop0:	
  7466  2012  3001               	movlw	1
  7467  2013  0180               	clrf	0	;clear RAM location pointed to by FSR
  7468  2014  3101               	addfsr 0,1
  7469  2015  02FE               	subwf	126,f
  7470  2016  3000               	movlw	0
  7471  2017  3BFF               	subwfb	127,f
  7472  2018  087F               	movf	127,w
  7473  2019  047E               	iorwf	126,w
  7474  201A  1903               	btfsc	3,2
  7475  201B  3400               	retlw	0	;all done for this memory range, return
  7476  201C  2812               	goto	clrloop0	;have we reached the end yet?
  7477                           
  7478                           	psect	cstackBANK4
  7479  0247                     __pcstackBANK4:	
  7480  0247                     channelThing@total:	
  7481                           
  7482                           ; 4 bytes @ 0x0
  7483  0247                     	ds	4
  7484  024B                     channelThing@totalGrpA:	
  7485                           
  7486                           ; 4 bytes @ 0x4
  7487  024B                     	ds	4
  7488  024F                     channelThing@totalGrpB:	
  7489                           
  7490                           ; 4 bytes @ 0x8
  7491  024F                     	ds	4
  7492  0253                     channelThing@grpA:	
  7493                           
  7494                           ; 4 bytes @ 0xC
  7495  0253                     	ds	4
  7496  0257                     channelThing@numGrpA:	
  7497                           
  7498                           ; 1 bytes @ 0x10
  7499  0257                     	ds	1
  7500  0258                     channelThing@numGrpB:	
  7501                           
  7502                           ; 1 bytes @ 0x11
  7503  0258                     	ds	1
  7504  0259                     channelThing@grpB:	
  7505                           
  7506                           ; 4 bytes @ 0x12
  7507  0259                     	ds	4
  7508  025D                     channelThing@n:	
  7509                           
  7510                           ; 1 bytes @ 0x16
  7511  025D                     	ds	1
  7512                           
  7513                           	psect	cstackBANK3
  7514  01A0                     __pcstackBANK3:	
  7515  01A0                     qsort@stack:	
  7516                           
  7517                           ; 64 bytes @ 0x0
  7518  01A0                     	ds	64
  7519                           
  7520                           	psect	cstackBANK2
  7521  0120                     __pcstackBANK2:	
  7522  0120                     storeNVM@nvm:	
  7523  0120                     qsort@xbuf:	
  7524                           ; 32 bytes @ 0x0
  7525                           
  7526                           
  7527                           ; 60 bytes @ 0x0
  7528  0120                     	ds	60
  7529  015C                     main@sysCheckInterval:	
  7530                           
  7531                           ; 4 bytes @ 0x3C
  7532  015C                     	ds	4
  7533  0160                     main@initDone:	
  7534                           
  7535                           ; 1 bytes @ 0x40
  7536  0160                     	ds	1
  7537  0161                     main@controllerIdle:	
  7538                           
  7539                           ; 1 bytes @ 0x41
  7540  0161                     	ds	1
  7541  0162                     main@displayOff:	
  7542                           
  7543                           ; 1 bytes @ 0x42
  7544  0162                     	ds	1
  7545                           
  7546                           	psect	cstackBANK1
  7547  00A0                     __pcstackBANK1:	
  7548  00A0                     ??___fladd:	
  7549  00A0                     ___fldiv@rem:	
  7550                           ; 1 bytes @ 0x0
  7551                           
  7552  00A0                     readNVM@nvm:	
  7553                           ; 4 bytes @ 0x0
  7554                           
  7555  00A0                     storeNVM@buf:	
  7556                           ; 32 bytes @ 0x0
  7557                           
  7558                           
  7559                           ; 64 bytes @ 0x0
  7560  00A0                     	ds	4
  7561  00A4                     ___fldiv@sign:	
  7562                           
  7563                           ; 1 bytes @ 0x4
  7564  00A4                     	ds	1
  7565  00A5                     ___fldiv@new_exp:	
  7566                           
  7567                           ; 2 bytes @ 0x5
  7568  00A5                     	ds	2
  7569  00A7                     ___fldiv@grs:	
  7570                           
  7571                           ; 4 bytes @ 0x7
  7572  00A7                     	ds	1
  7573  00A8                     ?___flsub:	
  7574  00A8                     ___flsub@a:	
  7575                           ; 4 bytes @ 0x8
  7576                           
  7577                           
  7578                           ; 4 bytes @ 0x8
  7579  00A8                     	ds	3
  7580  00AB                     ___fldiv@bexp:	
  7581                           
  7582                           ; 1 bytes @ 0xB
  7583  00AB                     	ds	1
  7584  00AC                     ___fldiv@aexp:	
  7585  00AC                     ___flsub@b:	
  7586                           ; 1 bytes @ 0xC
  7587                           
  7588                           
  7589                           ; 4 bytes @ 0xC
  7590  00AC                     	ds	1
  7591  00AD                     ?___flge:	
  7592  00AD                     ___flge@ff1:	
  7593                           ; 1 bit 
  7594                           
  7595  00AD                     _getAnalogValues$2769:	
  7596                           ; 4 bytes @ 0xD
  7597                           
  7598                           
  7599                           ; 4 bytes @ 0xD
  7600  00AD                     	ds	3
  7601  00B0                     ??_calcRequiredPower:	
  7602  00B0                     ?___fltol:	
  7603                           ; 1 bytes @ 0x10
  7604                           
  7605  00B0                     ___fltol@f1:	
  7606                           ; 4 bytes @ 0x10
  7607                           
  7608                           
  7609                           ; 4 bytes @ 0x10
  7610  00B0                     	ds	1
  7611  00B1                     getAnalogValues@adc:	
  7612  00B1                     ___flge@ff2:	
  7613                           ; 2 bytes @ 0x11
  7614                           
  7615                           
  7616                           ; 4 bytes @ 0x11
  7617  00B1                     	ds	1
  7618  00B2                     calcRequiredPower@p:	
  7619                           
  7620                           ; 4 bytes @ 0x12
  7621  00B2                     	ds	2
  7622  00B4                     ??___fltol:	
  7623                           
  7624                           ; 1 bytes @ 0x14
  7625  00B4                     	ds	1
  7626  00B5                     ??___flge:	
  7627                           
  7628                           ; 1 bytes @ 0x15
  7629  00B5                     	ds	1
  7630  00B6                     calcRequiredPower@Rth:	
  7631                           
  7632                           ; 4 bytes @ 0x16
  7633  00B6                     	ds	2
  7634  00B8                     ___fltol@sign1:	
  7635                           
  7636                           ; 1 bytes @ 0x18
  7637  00B8                     	ds	1
  7638  00B9                     ??_systemCheck:	
  7639  00B9                     ??_checkSensor:	
  7640                           ; 1 bytes @ 0x19
  7641                           
  7642  00B9                     ?_spinInput:	
  7643                           ; 1 bytes @ 0x19
  7644                           
  7645  00B9                     ___fltol@exp1:	
  7646                           ; 1 bytes @ 0x19
  7647                           
  7648  00B9                     spinInput@input:	
  7649                           ; 1 bytes @ 0x19
  7650                           
  7651                           
  7652                           ; 2 bytes @ 0x19
  7653  00B9                     	ds	1
  7654  00BA                     ??_checkChannelStatus:	
  7655  00BA                     ?_ftoa:	
  7656                           ; 1 bytes @ 0x1A
  7657                           
  7658  00BA                     ?_sortDC:	
  7659                           ; 1 bytes @ 0x1A
  7660                           
  7661  00BA                     ?_sortDCRev:	
  7662                           ; 2 bytes @ 0x1A
  7663                           
  7664  00BA                     ?_sortCur:	
  7665                           ; 2 bytes @ 0x1A
  7666                           
  7667  00BA                     sortDC@cmp1:	
  7668                           ; 2 bytes @ 0x1A
  7669                           
  7670  00BA                     sortDCRev@cmp1:	
  7671                           ; 2 bytes @ 0x1A
  7672                           
  7673  00BA                     sortCur@cmp1:	
  7674                           ; 2 bytes @ 0x1A
  7675                           
  7676  00BA                     ftoa@fValue:	
  7677                           ; 2 bytes @ 0x1A
  7678                           
  7679  00BA                     _calcRequiredPower$2763:	
  7680                           ; 4 bytes @ 0x1A
  7681                           
  7682                           
  7683                           ; 4 bytes @ 0x1A
  7684  00BA                     	ds	1
  7685  00BB                     spinInput@min:	
  7686                           
  7687                           ; 4 bytes @ 0x1B
  7688  00BB                     	ds	1
  7689  00BC                     sortDC@cmp2:	
  7690  00BC                     sortDCRev@cmp2:	
  7691                           ; 2 bytes @ 0x1C
  7692                           
  7693  00BC                     sortCur@cmp2:	
  7694                           ; 2 bytes @ 0x1C
  7695                           
  7696                           
  7697                           ; 2 bytes @ 0x1C
  7698  00BC                     	ds	2
  7699  00BE                     sortDC@a:	
  7700  00BE                     sortDCRev@a:	
  7701                           ; 1 bytes @ 0x1E
  7702                           
  7703  00BE                     ftoa@width:	
  7704                           ; 1 bytes @ 0x1E
  7705                           
  7706  00BE                     checkChannelStatus@adc:	
  7707                           ; 1 bytes @ 0x1E
  7708                           
  7709  00BE                     sortCur@a:	
  7710                           ; 2 bytes @ 0x1E
  7711                           
  7712  00BE                     _calcRequiredPower$2764:	
  7713                           ; 2 bytes @ 0x1E
  7714                           
  7715                           
  7716                           ; 4 bytes @ 0x1E
  7717  00BE                     	ds	1
  7718  00BF                     sortDC@b:	
  7719  00BF                     sortDCRev@b:	
  7720                           ; 1 bytes @ 0x1F
  7721                           
  7722  00BF                     ftoa@prec:	
  7723                           ; 1 bytes @ 0x1F
  7724                           
  7725  00BF                     spinInput@max:	
  7726                           ; 1 bytes @ 0x1F
  7727                           
  7728                           
  7729                           ; 4 bytes @ 0x1F
  7730  00BF                     	ds	1
  7731  00C0                     ??_ftoa:	
  7732  00C0                     sortCur@b:	
  7733                           ; 1 bytes @ 0x20
  7734                           
  7735  00C0                     _checkChannelStatus$1893:	
  7736                           ; 2 bytes @ 0x20
  7737                           
  7738                           
  7739                           ; 4 bytes @ 0x20
  7740  00C0                     	ds	1
  7741  00C1                     ftoa@len:	
  7742                           
  7743                           ; 1 bytes @ 0x21
  7744  00C1                     	ds	1
  7745  00C2                     ?_qsort:	
  7746  00C2                     ftoa@sign:	
  7747                           ; 1 bytes @ 0x22
  7748                           
  7749  00C2                     qsort@nel:	
  7750                           ; 1 bytes @ 0x22
  7751                           
  7752  00C2                     _calcRequiredPower$2765:	
  7753                           ; 2 bytes @ 0x22
  7754                           
  7755                           
  7756                           ; 4 bytes @ 0x22
  7757  00C2                     	ds	1
  7758  00C3                     ftoa@intValue:	
  7759  00C3                     spinInput@step:	
  7760                           ; 1 bytes @ 0x23
  7761                           
  7762                           
  7763                           ; 4 bytes @ 0x23
  7764  00C3                     	ds	1
  7765  00C4                     ftoa@w:	
  7766  00C4                     qsort@width:	
  7767                           ; 1 bytes @ 0x24
  7768                           
  7769  00C4                     _checkChannelStatus$1894:	
  7770                           ; 2 bytes @ 0x24
  7771                           
  7772                           
  7773                           ; 4 bytes @ 0x24
  7774  00C4                     	ds	1
  7775  00C5                     ftoa@pos:	
  7776                           
  7777                           ; 1 bytes @ 0x25
  7778  00C5                     	ds	1
  7779  00C6                     ftoa@str:	
  7780  00C6                     qsort@compar:	
  7781                           ; 1 bytes @ 0x26
  7782                           
  7783  00C6                     _calcRequiredPower$2766:	
  7784                           ; 2 bytes @ 0x26
  7785                           
  7786                           
  7787                           ; 4 bytes @ 0x26
  7788  00C6                     	ds	1
  7789  00C7                     ??_statusView:	
  7790  00C7                     ??_channelView:	
  7791                           ; 1 bytes @ 0x27
  7792                           
  7793  00C7                     spinInput@dir:	
  7794                           ; 1 bytes @ 0x27
  7795                           
  7796  00C7                     channelSetup@heater:	
  7797                           ; 1 bytes @ 0x27
  7798                           
  7799                           
  7800                           ; 2 bytes @ 0x27
  7801  00C7                     	ds	1
  7802  00C8                     ??_qsort:	
  7803  00C8                     ??_setOutputPower:	
  7804                           ; 1 bytes @ 0x28
  7805                           
  7806  00C8                     checkChannelStatus@samples:	
  7807                           ; 1 bytes @ 0x28
  7808                           
  7809                           
  7810                           ; 1 bytes @ 0x28
  7811  00C8                     	ds	1
  7812  00C9                     checkChannelStatus@avg:	
  7813                           
  7814                           ; 2 bytes @ 0x29
  7815  00C9                     	ds	1
  7816  00CA                     setOutputPower@heater:	
  7817  00CA                     _calcRequiredPower$2767:	
  7818                           ; 2 bytes @ 0x2A
  7819                           
  7820                           
  7821                           ; 4 bytes @ 0x2A
  7822  00CA                     	ds	1
  7823  00CB                     checkChannelStatus@current:	
  7824  00CB                     _channelView$2760:	
  7825                           ; 4 bytes @ 0x2B
  7826                           
  7827                           
  7828                           ; 4 bytes @ 0x2B
  7829  00CB                     	ds	2
  7830  00CD                     _qsort$2814:	
  7831                           
  7832                           ; 1 bytes @ 0x2D
  7833  00CD                     	ds	1
  7834  00CE                     qsort@vbase:	
  7835  00CE                     _calcRequiredPower$2768:	
  7836                           ; 1 bytes @ 0x2E
  7837                           
  7838                           
  7839                           ; 4 bytes @ 0x2E
  7840  00CE                     	ds	1
  7841  00CF                     channelView@n:	
  7842  00CF                     checkChannelStatus@channel:	
  7843                           ; 1 bytes @ 0x2F
  7844                           
  7845  00CF                     qsort@x:	
  7846                           ; 1 bytes @ 0x2F
  7847                           
  7848                           
  7849                           ; 1 bytes @ 0x2F
  7850  00CF                     	ds	1
  7851  00D0                     qsort@base:	
  7852  00D0                     checkChannelStatus@heater:	
  7853                           ; 1 bytes @ 0x30
  7854                           
  7855                           
  7856                           ; 2 bytes @ 0x30
  7857  00D0                     	ds	1
  7858  00D1                     qsort@l:	
  7859                           
  7860                           ; 2 bytes @ 0x31
  7861  00D1                     	ds	1
  7862  00D2                     calcRequiredPower@d:	
  7863                           
  7864                           ; 4 bytes @ 0x32
  7865  00D2                     	ds	1
  7866  00D3                     qsort@r:	
  7867                           
  7868                           ; 2 bytes @ 0x33
  7869  00D3                     	ds	2
  7870  00D5                     qsort@s:	
  7871                           
  7872                           ; 2 bytes @ 0x35
  7873  00D5                     	ds	1
  7874  00D6                     calcRequiredPower@phi:	
  7875                           
  7876                           ; 4 bytes @ 0x36
  7877  00D6                     	ds	1
  7878  00D7                     qsort@i:	
  7879                           
  7880                           ; 2 bytes @ 0x37
  7881  00D7                     	ds	2
  7882  00D9                     qsort@j:	
  7883                           
  7884                           ; 2 bytes @ 0x39
  7885  00D9                     	ds	1
  7886  00DA                     calcRequiredPower@A:	
  7887                           
  7888                           ; 4 bytes @ 0x3A
  7889  00DA                     	ds	1
  7890  00DB                     ??_channelThing:	
  7891                           
  7892                           ; 1 bytes @ 0x3B
  7893  00DB                     	ds	3
  7894  00DE                     _calcRequiredPower$2762:	
  7895                           
  7896                           ; 4 bytes @ 0x3E
  7897  00DE                     	ds	2
  7898  00E0                     ??_setLensDia:	
  7899                           
  7900                           ; 1 bytes @ 0x40
  7901  00E0                     	ds	2
  7902  00E2                     calcRequiredPower@T1:	
  7903  00E2                     _setLensDia$2761:	
  7904                           ; 4 bytes @ 0x42
  7905                           
  7906                           
  7907                           ; 4 bytes @ 0x42
  7908  00E2                     	ds	4
  7909  00E6                     ??_menu:	
  7910  00E6                     calcRequiredPower@T2:	
  7911                           ; 1 bytes @ 0x46
  7912                           
  7913                           
  7914                           ; 4 bytes @ 0x46
  7915  00E6                     	ds	4
  7916  00EA                     menu@page:	
  7917  00EA                     calcRequiredPower@n:	
  7918                           ; 1 bytes @ 0x4A
  7919                           
  7920                           
  7921                           ; 1 bytes @ 0x4A
  7922  00EA                     	ds	1
  7923  00EB                     menu@nextState:	
  7924                           
  7925                           ; 1 bytes @ 0x4B
  7926  00EB                     	ds	1
  7927  00EC                     ??_main:	
  7928                           
  7929                           ; 1 bytes @ 0x4C
  7930  00EC                     	ds	1
  7931                           
  7932                           	psect	cstackCOMMON
  7933  0070                     __pcstackCOMMON:	
  7934  0070                     ?i1___flge:	
  7935  0070                     ?_initialize:	
  7936                           ; 1 bit 
  7937                           
  7938  0070                     ?_OLED_init:	
  7939                           ; 1 bytes @ 0x0
  7940                           
  7941  0070                     ?_OLED_loadSpecialChars:	
  7942                           ; 1 bytes @ 0x0
  7943                           
  7944  0070                     ?_OLED_command:	
  7945                           ; 1 bytes @ 0x0
  7946                           
  7947  0070                     ?_initGlobalData:	
  7948                           ; 1 bytes @ 0x0
  7949                           
  7950  0070                     ?_readNVM:	
  7951                           ; 1 bytes @ 0x0
  7952                           
  7953  0070                     ?_getAnalogValues:	
  7954                           ; 1 bytes @ 0x0
  7955                           
  7956  0070                     ?_systemCheck:	
  7957                           ; 1 bytes @ 0x0
  7958                           
  7959  0070                     ?_checkSensor:	
  7960                           ; 1 bytes @ 0x0
  7961                           
  7962  0070                     ?_calcRequiredPower:	
  7963                           ; 1 bytes @ 0x0
  7964                           
  7965  0070                     ?_checkChannelStatus:	
  7966                           ; 1 bytes @ 0x0
  7967                           
  7968  0070                     ?_channelThing:	
  7969                           ; 1 bytes @ 0x0
  7970                           
  7971  0070                     ?_controller:	
  7972                           ; 1 bytes @ 0x0
  7973                           
  7974  0070                     ?_getLastError:	
  7975                           ; 1 bytes @ 0x0
  7976                           
  7977  0070                     ?_viewErrorMessage:	
  7978                           ; 1 bytes @ 0x0
  7979                           
  7980  0070                     ?_menu:	
  7981                           ; 1 bytes @ 0x0
  7982                           
  7983  0070                     ?_pushButtonISR:	
  7984                           ; 1 bytes @ 0x0
  7985                           
  7986  0070                     ??_pushButtonISR:	
  7987                           ; 1 bytes @ 0x0
  7988                           
  7989  0070                     ?_rotISR:	
  7990                           ; 1 bytes @ 0x0
  7991                           
  7992  0070                     ??_rotISR:	
  7993                           ; 1 bytes @ 0x0
  7994                           
  7995  0070                     ?_uartReceiveISR:	
  7996                           ; 1 bytes @ 0x0
  7997                           
  7998  0070                     ?_returnToPage:	
  7999                           ; 1 bytes @ 0x0
  8000                           
  8001  0070                     ?_storeNVM:	
  8002                           ; 1 bytes @ 0x0
  8003                           
  8004  0070                     ?_main:	
  8005                           ; 1 bytes @ 0x0
  8006                           
  8007  0070                     ?_OLED_write4bits:	
  8008                           ; 1 bytes @ 0x0
  8009                           
  8010  0070                     ?_OLED_waitForReady:	
  8011                           ; 1 bytes @ 0x0
  8012                           
  8013  0070                     ?_OLED_write:	
  8014                           ; 1 bytes @ 0x0
  8015                           
  8016  0070                     ?_ISR:	
  8017                           ; 1 bytes @ 0x0
  8018                           
  8019  0070                     ?_getRotDir:	
  8020                           ; 1 bytes @ 0x0
  8021                           
  8022  0070                     ?_getPB:	
  8023                           ; 1 bytes @ 0x0
  8024                           
  8025  0070                     ?_uartSendByte:	
  8026                           ; 1 bytes @ 0x0
  8027                           
  8028  0070                     ?_uartReset:	
  8029                           ; 1 bytes @ 0x0
  8030                           
  8031  0070                     ?_statusView:	
  8032                           ; 1 bytes @ 0x0
  8033                           
  8034  0070                     ?_channelView:	
  8035                           ; 1 bytes @ 0x0
  8036                           
  8037  0070                     ?_channelSetup:	
  8038                           ; 1 bytes @ 0x0
  8039                           
  8040  0070                     ?_setOutputPower:	
  8041                           ; 1 bytes @ 0x0
  8042                           
  8043  0070                     ?_setLensDia:	
  8044                           ; 1 bytes @ 0x0
  8045                           
  8046  0070                     ?_setup:	
  8047                           ; 1 bytes @ 0x0
  8048                           
  8049  0070                     ?_setDPOffset:	
  8050                           ; 1 bytes @ 0x0
  8051                           
  8052  0070                     ?_setSkyTemp:	
  8053                           ; 1 bytes @ 0x0
  8054                           
  8055  0070                     ?_setFudgeFactor:	
  8056                           ; 1 bytes @ 0x0
  8057                           
  8058  0070                     ?_error:	
  8059                           ; 1 bytes @ 0x0
  8060                           
  8061  0070                     ?i1_memcpy:	
  8062                           ; 1 bytes @ 0x0
  8063                           
  8064  0070                     i1memcpy@d1:	
  8065                           ; 1 bytes @ 0x0
  8066                           
  8067  0070                     i1___flge@ff1:	
  8068                           ; 2 bytes @ 0x0
  8069                           
  8070                           
  8071                           ; 4 bytes @ 0x0
  8072  0070                     	ds	2
  8073  0072                     i1memcpy@s1:	
  8074                           
  8075                           ; 1 bytes @ 0x2
  8076  0072                     	ds	1
  8077  0073                     i1memcpy@n:	
  8078                           
  8079                           ; 2 bytes @ 0x3
  8080  0073                     	ds	1
  8081  0074                     i1___flge@ff2:	
  8082                           
  8083                           ; 4 bytes @ 0x4
  8084  0074                     	ds	1
  8085  0075                     ??i1_memcpy:	
  8086  0075                     i1memcpy@tmp:	
  8087                           ; 1 bytes @ 0x5
  8088                           
  8089                           
  8090                           ; 1 bytes @ 0x5
  8091  0075                     	ds	1
  8092  0076                     i1memcpy@d:	
  8093                           
  8094                           ; 2 bytes @ 0x6
  8095  0076                     	ds	2
  8096  0078                     ??i1___flge:	
  8097  0078                     i1memcpy@s:	
  8098                           ; 1 bytes @ 0x8
  8099                           
  8100                           
  8101                           ; 1 bytes @ 0x8
  8102  0078                     	ds	4
  8103  007C                     ??_uartReceiveISR:	
  8104                           
  8105                           	psect	cstackBANK0
  8106  0020                     __pcstackBANK0:	
  8107                           ; 1 bytes @ 0xC
  8108                           
  8109  0020                     ??_ISR:	
  8110                           
  8111                           ; 1 bytes @ 0x0
  8112  0020                     	ds	4
  8113  0024                     ?___fleq:	
  8114  0024                     ??_initialize:	
  8115                           ; 1 bit 
  8116                           
  8117  0024                     ??_getLastError:	
  8118                           ; 1 bytes @ 0x4
  8119                           
  8120  0024                     ?_FLASH_EraseBlock:	
  8121                           ; 1 bytes @ 0x4
  8122                           
  8123  0024                     ??_OLED_write4bits:	
  8124                           ; 1 bytes @ 0x4
  8125                           
  8126  0024                     ??_OLED_waitForReady:	
  8127                           ; 1 bytes @ 0x4
  8128                           
  8129  0024                     ??_getRotDir:	
  8130                           ; 1 bytes @ 0x4
  8131                           
  8132  0024                     ??_getPB:	
  8133                           ; 1 bytes @ 0x4
  8134                           
  8135  0024                     ??_uartSendByte:	
  8136                           ; 1 bytes @ 0x4
  8137                           
  8138  0024                     ??_uartReset:	
  8139                           ; 1 bytes @ 0x4
  8140                           
  8141  0024                     ?___lbdiv:	
  8142                           ; 1 bytes @ 0x4
  8143                           
  8144  0024                     ?___lbmod:	
  8145                           ; 1 bytes @ 0x4
  8146                           
  8147  0024                     ?_FLASH_ReadWord:	
  8148                           ; 1 bytes @ 0x4
  8149                           
  8150  0024                     ?__Umul8_16:	
  8151                           ; 2 bytes @ 0x4
  8152                           
  8153  0024                     ?_getAnalogValue:	
  8154                           ; 2 bytes @ 0x4
  8155                           
  8156  0024                     ?___awdiv:	
  8157                           ; 2 bytes @ 0x4
  8158                           
  8159  0024                     ?___awmod:	
  8160                           ; 2 bytes @ 0x4
  8161                           
  8162  0024                     ?_timeSince:	
  8163                           ; 2 bytes @ 0x4
  8164                           
  8165  0024                     ?___lmul:	
  8166                           ; 4 bytes @ 0x4
  8167                           
  8168  0024                     OLED_waitForReady@busy:	
  8169                           ; 4 bytes @ 0x4
  8170                           
  8171  0024                     getRotDir@ret:	
  8172                           ; 1 bytes @ 0x4
  8173                           
  8174  0024                     getPB@ret:	
  8175                           ; 1 bytes @ 0x4
  8176                           
  8177  0024                     uartSendByte@s:	
  8178                           ; 1 bytes @ 0x4
  8179                           
  8180  0024                     ___lbdiv@divisor:	
  8181                           ; 1 bytes @ 0x4
  8182                           
  8183  0024                     ___lbmod@divisor:	
  8184                           ; 1 bytes @ 0x4
  8185                           
  8186  0024                     __Umul8_16@multiplicand:	
  8187                           ; 1 bytes @ 0x4
  8188                           
  8189  0024                     _getLastError$1384:	
  8190                           ; 1 bytes @ 0x4
  8191                           
  8192  0024                     FLASH_ReadWord@flashAddr:	
  8193                           ; 2 bytes @ 0x4
  8194                           
  8195  0024                     FLASH_EraseBlock@startAddr:	
  8196                           ; 2 bytes @ 0x4
  8197                           
  8198  0024                     ___awdiv@divisor:	
  8199                           ; 2 bytes @ 0x4
  8200                           
  8201  0024                     ___awmod@divisor:	
  8202                           ; 2 bytes @ 0x4
  8203                           
  8204  0024                     timeSince@since:	
  8205                           ; 2 bytes @ 0x4
  8206                           
  8207  0024                     ___lmul@multiplier:	
  8208                           ; 4 bytes @ 0x4
  8209                           
  8210  0024                     ___fleq@ff1:	
  8211                           ; 4 bytes @ 0x4
  8212                           
  8213                           
  8214                           ; 4 bytes @ 0x4
  8215  0024                     	ds	1
  8216  0025                     ??___lbdiv:	
  8217  0025                     ??___lbmod:	
  8218                           ; 1 bytes @ 0x5
  8219                           
  8220  0025                     ___lbdiv@dividend:	
  8221                           ; 1 bytes @ 0x5
  8222                           
  8223                           
  8224                           ; 1 bytes @ 0x5
  8225  0025                     	ds	1
  8226  0026                     ??_FLASH_EraseBlock:	
  8227  0026                     ??_FLASH_ReadWord:	
  8228                           ; 1 bytes @ 0x6
  8229                           
  8230  0026                     ??_getAnalogValue:	
  8231                           ; 1 bytes @ 0x6
  8232                           
  8233  0026                     OLED_write4bits@value:	
  8234                           ; 1 bytes @ 0x6
  8235                           
  8236  0026                     FLASH_ReadWord@GIEBitValue:	
  8237                           ; 1 bytes @ 0x6
  8238                           
  8239  0026                     FLASH_EraseBlock@GIEBitValue:	
  8240                           ; 1 bytes @ 0x6
  8241                           
  8242  0026                     ___lbdiv@counter:	
  8243                           ; 1 bytes @ 0x6
  8244                           
  8245  0026                     ___lbmod@dividend:	
  8246                           ; 1 bytes @ 0x6
  8247                           
  8248  0026                     ___awdiv@dividend:	
  8249                           ; 1 bytes @ 0x6
  8250                           
  8251  0026                     ___awmod@dividend:	
  8252                           ; 2 bytes @ 0x6
  8253                           
  8254                           
  8255                           ; 2 bytes @ 0x6
  8256  0026                     	ds	1
  8257  0027                     ??_readNVM:	
  8258  0027                     ?_FLASH_WriteBlock:	
  8259                           ; 1 bytes @ 0x7
  8260                           
  8261  0027                     ??__Umul8_16:	
  8262                           ; 1 bytes @ 0x7
  8263                           
  8264  0027                     ?_OLED_send:	
  8265                           ; 1 bytes @ 0x7
  8266                           
  8267  0027                     OLED_send@mode:	
  8268                           ; 1 bytes @ 0x7
  8269                           
  8270  0027                     getAnalogValue@channel:	
  8271                           ; 1 bytes @ 0x7
  8272                           
  8273  0027                     ___lbdiv@quotient:	
  8274                           ; 1 bytes @ 0x7
  8275                           
  8276  0027                     ___lbmod@counter:	
  8277                           ; 1 bytes @ 0x7
  8278                           
  8279  0027                     FLASH_WriteBlock@writeAddr:	
  8280                           ; 1 bytes @ 0x7
  8281                           
  8282  0027                     __Umul8_16@product:	
  8283                           ; 2 bytes @ 0x7
  8284                           
  8285  0027                     readNVM@buf:	
  8286                           ; 2 bytes @ 0x7
  8287                           
  8288                           
  8289                           ; 64 bytes @ 0x7
  8290  0027                     	ds	1
  8291  0028                     ??_timeSince:	
  8292  0028                     ??_OLED_send:	
  8293                           ; 1 bytes @ 0x8
  8294                           
  8295  0028                     ??___awdiv:	
  8296                           ; 1 bytes @ 0x8
  8297                           
  8298  0028                     ??___awmod:	
  8299                           ; 1 bytes @ 0x8
  8300                           
  8301  0028                     OLED_send@value:	
  8302                           ; 1 bytes @ 0x8
  8303                           
  8304  0028                     ___awdiv@counter:	
  8305                           ; 1 bytes @ 0x8
  8306                           
  8307  0028                     ___awmod@counter:	
  8308                           ; 1 bytes @ 0x8
  8309                           
  8310  0028                     ___lbmod@rem:	
  8311                           ; 1 bytes @ 0x8
  8312                           
  8313  0028                     ___lmul@multiplicand:	
  8314                           ; 1 bytes @ 0x8
  8315                           
  8316  0028                     ___fleq@ff2:	
  8317                           ; 4 bytes @ 0x8
  8318                           
  8319                           
  8320                           ; 4 bytes @ 0x8
  8321  0028                     	ds	1
  8322  0029                     ??_OLED_command:	
  8323  0029                     ?_itoa:	
  8324                           ; 1 bytes @ 0x9
  8325                           
  8326  0029                     ??_OLED_write:	
  8327                           ; 1 bytes @ 0x9
  8328                           
  8329  0029                     OLED_command@value:	
  8330                           ; 1 bytes @ 0x9
  8331                           
  8332  0029                     OLED_write@value:	
  8333                           ; 1 bytes @ 0x9
  8334                           
  8335  0029                     itoa@value:	
  8336                           ; 1 bytes @ 0x9
  8337                           
  8338  0029                     FLASH_WriteBlock@flashWordArray:	
  8339                           ; 1 bytes @ 0x9
  8340                           
  8341  0029                     ___awdiv@sign:	
  8342                           ; 1 bytes @ 0x9
  8343                           
  8344  0029                     ___awmod@sign:	
  8345                           ; 1 bytes @ 0x9
  8346                           
  8347  0029                     __Umul8_16@multiplier:	
  8348                           ; 1 bytes @ 0x9
  8349                           
  8350                           
  8351                           ; 1 bytes @ 0x9
  8352  0029                     	ds	1
  8353  002A                     ??_OLED_init:	
  8354  002A                     ??_OLED_loadSpecialChars:	
  8355                           ; 1 bytes @ 0xA
  8356                           
  8357  002A                     ?_paging:	
  8358                           ; 1 bytes @ 0xA
  8359                           
  8360  002A                     ??_FLASH_WriteBlock:	
  8361                           ; 1 bytes @ 0xA
  8362                           
  8363  002A                     ??_error:	
  8364                           ; 1 bytes @ 0xA
  8365                           
  8366  002A                     OLED_loadSpecialChars@n:	
  8367                           ; 1 bytes @ 0xA
  8368                           
  8369  002A                     error@code:	
  8370                           ; 1 bytes @ 0xA
  8371                           
  8372  002A                     paging@lastPage:	
  8373                           ; 1 bytes @ 0xA
  8374                           
  8375  002A                     itoa@width:	
  8376                           ; 1 bytes @ 0xA
  8377                           
  8378  002A                     ___awdiv@quotient:	
  8379                           ; 1 bytes @ 0xA
  8380                           
  8381  002A                     __Umul8_16@word_mpld:	
  8382                           ; 2 bytes @ 0xA
  8383                           
  8384                           
  8385                           ; 2 bytes @ 0xA
  8386  002A                     	ds	1
  8387  002B                     ??_itoa:	
  8388  002B                     ??_paging:	
  8389                           ; 1 bytes @ 0xB
  8390                           
  8391                           
  8392                           ; 1 bytes @ 0xB
  8393  002B                     	ds	1
  8394  002C                     ??___lmul:	
  8395  002C                     ?___bmul:	
  8396                           ; 1 bytes @ 0xC
  8397                           
  8398  002C                     ??___fleq:	
  8399                           ; 1 bytes @ 0xC
  8400                           
  8401  002C                     itoa@str:	
  8402                           ; 1 bytes @ 0xC
  8403                           
  8404  002C                     ___bmul@multiplicand:	
  8405                           ; 1 bytes @ 0xC
  8406                           
  8407  002C                     ___lmul@product:	
  8408                           ; 1 bytes @ 0xC
  8409                           
  8410                           
  8411                           ; 4 bytes @ 0xC
  8412  002C                     	ds	1
  8413  002D                     ??___bmul:	
  8414  002D                     paging@dir:	
  8415                           ; 1 bytes @ 0xD
  8416                           
  8417  002D                     FLASH_WriteBlock@GIEBitValue:	
  8418                           ; 1 bytes @ 0xD
  8419                           
  8420  002D                     ___bmul@product:	
  8421                           ; 1 bytes @ 0xD
  8422                           
  8423                           
  8424                           ; 1 bytes @ 0xD
  8425  002D                     	ds	1
  8426  002E                     paging@currentPage:	
  8427  002E                     ___bmul@multiplier:	
  8428                           ; 1 bytes @ 0xE
  8429                           
  8430  002E                     FLASH_WriteBlock@blockStartAddr:	
  8431                           ; 1 bytes @ 0xE
  8432                           
  8433                           
  8434                           ; 2 bytes @ 0xE
  8435  002E                     	ds	1
  8436  002F                     ?_OLED_print_xy:	
  8437  002F                     ?_setChannelSwitch:	
  8438                           ; 1 bytes @ 0xF
  8439                           
  8440  002F                     ?_swap:	
  8441                           ; 1 bytes @ 0xF
  8442                           
  8443  002F                     ?_memcpy:	
  8444                           ; 1 bytes @ 0xF
  8445                           
  8446  002F                     ?___wmul:	
  8447                           ; 2 bytes @ 0xF
  8448                           
  8449  002F                     OLED_print_xy@row:	
  8450                           ; 2 bytes @ 0xF
  8451                           
  8452  002F                     paging@n:	
  8453                           ; 1 bytes @ 0xF
  8454                           
  8455  002F                     setChannelSwitch@state:	
  8456                           ; 1 bytes @ 0xF
  8457                           
  8458  002F                     ___wmul@multiplier:	
  8459                           ; 1 bytes @ 0xF
  8460                           
  8461  002F                     memcpy@d1:	
  8462                           ; 2 bytes @ 0xF
  8463                           
  8464  002F                     swap@len:	
  8465                           ; 2 bytes @ 0xF
  8466                           
  8467                           
  8468                           ; 2 bytes @ 0xF
  8469  002F                     	ds	1
  8470  0030                     ??_setChannelSwitch:	
  8471  0030                     ?_ema:	
  8472                           ; 1 bytes @ 0x10
  8473                           
  8474  0030                     FLASH_WriteBlock@i:	
  8475                           ; 2 bytes @ 0x10
  8476                           
  8477  0030                     OLED_print_xy@s:	
  8478                           ; 1 bytes @ 0x10
  8479                           
  8480  0030                     ema@in:	
  8481                           ; 2 bytes @ 0x10
  8482                           
  8483  0030                     timeSince@now:	
  8484                           ; 2 bytes @ 0x10
  8485                           
  8486                           
  8487                           ; 4 bytes @ 0x10
  8488  0030                     	ds	1
  8489  0031                     ??_storeNVM:	
  8490  0031                     memcpy@s1:	
  8491                           ; 1 bytes @ 0x11
  8492                           
  8493  0031                     swap@s1:	
  8494                           ; 1 bytes @ 0x11
  8495                           
  8496  0031                     ___wmul@multiplicand:	
  8497                           ; 1 bytes @ 0x11
  8498                           
  8499                           
  8500                           ; 2 bytes @ 0x11
  8501  0031                     	ds	1
  8502  0032                     ??_OLED_print_xy:	
  8503  0032                     setChannelSwitch@channel:	
  8504                           ; 1 bytes @ 0x12
  8505                           
  8506  0032                     swap@s2:	
  8507                           ; 1 bytes @ 0x12
  8508                           
  8509  0032                     ema@average:	
  8510                           ; 1 bytes @ 0x12
  8511                           
  8512  0032                     memcpy@n:	
  8513                           ; 2 bytes @ 0x12
  8514                           
  8515                           
  8516                           ; 2 bytes @ 0x12
  8517  0032                     	ds	1
  8518  0033                     ??___wmul:	
  8519  0033                     ??_swap:	
  8520                           ; 1 bytes @ 0x13
  8521                           
  8522  0033                     storeNVM@n:	
  8523                           ; 1 bytes @ 0x13
  8524                           
  8525  0033                     swap@c:	
  8526                           ; 1 bytes @ 0x13
  8527                           
  8528  0033                     ___wmul@product:	
  8529                           ; 1 bytes @ 0x13
  8530                           
  8531  0033                     OLED_print_xy@row_offsets:	
  8532                           ; 2 bytes @ 0x13
  8533                           
  8534                           
  8535                           ; 4 bytes @ 0x13
  8536  0033                     	ds	1
  8537  0034                     ??_controller:	
  8538  0034                     ??_memcpy:	
  8539                           ; 1 bytes @ 0x14
  8540                           
  8541  0034                     memcpy@tmp:	
  8542                           ; 1 bytes @ 0x14
  8543                           
  8544  0034                     ema@alpha:	
  8545                           ; 1 bytes @ 0x14
  8546                           
  8547                           
  8548                           ; 4 bytes @ 0x14
  8549  0034                     	ds	1
  8550  0035                     ??_initGlobalData:	
  8551  0035                     ??_returnToPage:	
  8552                           ; 1 bytes @ 0x15
  8553                           
  8554  0035                     ?_getNextState:	
  8555                           ; 1 bytes @ 0x15
  8556                           
  8557  0035                     ?___xxtofl:	
  8558                           ; 1 bytes @ 0x15
  8559                           
  8560  0035                     getNextState@intState:	
  8561                           ; 4 bytes @ 0x15
  8562                           
  8563  0035                     returnToPage@page:	
  8564                           ; 1 bytes @ 0x15
  8565                           
  8566  0035                     memcpy@d:	
  8567                           ; 1 bytes @ 0x15
  8568                           
  8569  0035                     ___xxtofl@val:	
  8570                           ; 2 bytes @ 0x15
  8571                           
  8572                           
  8573                           ; 4 bytes @ 0x15
  8574  0035                     	ds	1
  8575  0036                     getNextState@pb:	
  8576  0036                     returnToPage@n:	
  8577                           ; 1 bytes @ 0x16
  8578                           
  8579                           
  8580                           ; 1 bytes @ 0x16
  8581  0036                     	ds	1
  8582  0037                     initGlobalData@n:	
  8583  0037                     OLED_print_xy@col:	
  8584                           ; 1 bytes @ 0x17
  8585                           
  8586  0037                     getNextState@timeout:	
  8587                           ; 1 bytes @ 0x17
  8588                           
  8589  0037                     memcpy@s:	
  8590                           ; 1 bytes @ 0x17
  8591                           
  8592                           
  8593                           ; 1 bytes @ 0x17
  8594  0037                     	ds	1
  8595  0038                     ??_viewErrorMessage:	
  8596  0038                     ??_getNextState:	
  8597                           ; 1 bytes @ 0x18
  8598                           
  8599  0038                     ??_ema:	
  8600                           ; 1 bytes @ 0x18
  8601                           
  8602  0038                     initGlobalData@heater:	
  8603                           ; 1 bytes @ 0x18
  8604                           
  8605  0038                     controller@timer:	
  8606                           ; 2 bytes @ 0x18
  8607                           
  8608                           
  8609                           ; 4 bytes @ 0x18
  8610  0038                     	ds	1
  8611  0039                     ??___xxtofl:	
  8612  0039                     getNextState@state:	
  8613                           ; 1 bytes @ 0x19
  8614                           
  8615                           
  8616                           ; 1 bytes @ 0x19
  8617  0039                     	ds	1
  8618  003A                     getNextState@n:	
  8619  003A                     _viewErrorMessage$1387:	
  8620                           ; 1 bytes @ 0x1A
  8621                           
  8622                           
  8623                           ; 2 bytes @ 0x1A
  8624  003A                     	ds	2
  8625  003C                     viewErrorMessage@errorCode:	
  8626  003C                     controller@n:	
  8627                           ; 1 bytes @ 0x1C
  8628                           
  8629  003C                     ema@tmp0:	
  8630                           ; 1 bytes @ 0x1C
  8631                           
  8632                           
  8633                           ; 4 bytes @ 0x1C
  8634  003C                     	ds	1
  8635  003D                     ___xxtofl@sign:	
  8636                           
  8637                           ; 1 bytes @ 0x1D
  8638  003D                     	ds	1
  8639  003E                     ___xxtofl@exp:	
  8640                           
  8641                           ; 1 bytes @ 0x1E
  8642  003E                     	ds	1
  8643  003F                     ___xxtofl@arg:	
  8644                           
  8645                           ; 4 bytes @ 0x1F
  8646  003F                     	ds	4
  8647  0043                     ?___flmul:	
  8648  0043                     ___flmul@b:	
  8649                           ; 4 bytes @ 0x23
  8650                           
  8651                           
  8652                           ; 4 bytes @ 0x23
  8653  0043                     	ds	4
  8654  0047                     ___flmul@a:	
  8655                           
  8656                           ; 4 bytes @ 0x27
  8657  0047                     	ds	4
  8658  004B                     ??___flmul:	
  8659                           
  8660                           ; 1 bytes @ 0x2B
  8661  004B                     	ds	4
  8662  004F                     ___flmul@sign:	
  8663                           
  8664                           ; 1 bytes @ 0x2F
  8665  004F                     	ds	1
  8666  0050                     ___flmul@aexp:	
  8667                           
  8668                           ; 1 bytes @ 0x30
  8669  0050                     	ds	1
  8670  0051                     ___flmul@grs:	
  8671                           
  8672                           ; 4 bytes @ 0x31
  8673  0051                     	ds	4
  8674  0055                     ___flmul@bexp:	
  8675                           
  8676                           ; 1 bytes @ 0x35
  8677  0055                     	ds	1
  8678  0056                     ___flmul@prod:	
  8679                           
  8680                           ; 4 bytes @ 0x36
  8681  0056                     	ds	4
  8682  005A                     ___flmul@temp:	
  8683                           
  8684                           ; 2 bytes @ 0x3A
  8685  005A                     	ds	2
  8686  005C                     ?___fladd:	
  8687  005C                     ?___fldiv:	
  8688                           ; 4 bytes @ 0x3C
  8689                           
  8690  005C                     ___fladd@b:	
  8691                           ; 4 bytes @ 0x3C
  8692                           
  8693  005C                     ___fldiv@a:	
  8694                           ; 4 bytes @ 0x3C
  8695                           
  8696                           
  8697                           ; 4 bytes @ 0x3C
  8698  005C                     	ds	4
  8699  0060                     ___fladd@a:	
  8700  0060                     ___fldiv@b:	
  8701                           ; 4 bytes @ 0x40
  8702                           
  8703                           
  8704                           ; 4 bytes @ 0x40
  8705  0060                     	ds	4
  8706  0064                     ??___fldiv:	
  8707  0064                     ___fladd@signs:	
  8708                           ; 1 bytes @ 0x44
  8709                           
  8710                           
  8711                           ; 1 bytes @ 0x44
  8712  0064                     	ds	1
  8713  0065                     ___fladd@aexp:	
  8714                           
  8715                           ; 1 bytes @ 0x45
  8716  0065                     	ds	1
  8717  0066                     ___fladd@bexp:	
  8718                           
  8719                           ; 1 bytes @ 0x46
  8720  0066                     	ds	1
  8721  0067                     readNVM@n:	
  8722  0067                     ___fladd@grs:	
  8723                           ; 1 bytes @ 0x47
  8724                           
  8725                           
  8726                           ; 1 bytes @ 0x47
  8727  0067                     	ds	1
  8728  0068                     ??_getAnalogValues:	
  8729  0068                     ??_spinInput:	
  8730                           ; 1 bytes @ 0x48
  8731                           
  8732  0068                     ??_channelSetup:	
  8733                           ; 1 bytes @ 0x48
  8734                           
  8735  0068                     ??_setup:	
  8736                           ; 1 bytes @ 0x48
  8737                           
  8738  0068                     ??_setDPOffset:	
  8739                           ; 1 bytes @ 0x48
  8740                           
  8741  0068                     ??_setSkyTemp:	
  8742                           ; 1 bytes @ 0x48
  8743                           
  8744  0068                     ??_setFudgeFactor:	
  8745                           ; 1 bytes @ 0x48
  8746                           
  8747  0068                     ??_sortDC:	
  8748                           ; 1 bytes @ 0x48
  8749                           
  8750  0068                     ??_sortDCRev:	
  8751                           ; 1 bytes @ 0x48
  8752                           
  8753  0068                     ??_sortCur:	
  8754                           ; 1 bytes @ 0x48
  8755                           
  8756  0068                     ??___flsub:	
  8757                           ; 1 bytes @ 0x48
  8758                           
  8759                           
  8760                           	psect	swtext1
  8761  2800                     __pswtext1:	
  8762  2800                     S8886:	
  8763  2800  3195  2DDA         	ljmp	l6796
  8764  2802  3195  2DEC         	ljmp	l6798
  8765  2804  3195  2DFE         	ljmp	l6800
  8766  2806  3196  2E10         	ljmp	l6802
  8767  2808  3196  2E22         	ljmp	l6804
  8768  280A  3196  2E34         	ljmp	l6806
  8769  280C  3196  2E46         	ljmp	l6808
  8770  280E  3196  2E58         	ljmp	l6810
  8771  2810  3196  2E6A         	ljmp	l6812
  8772  2812  3196  2E7C         	ljmp	l6814
  8773  2814  3196  2E8E         	ljmp	l6816
  8774  2816  3196  2EA0         	ljmp	l6818
  8775  2818  3196  2EC4         	ljmp	l6822
  8776  281A  3196  2EB2         	ljmp	l6820
  8777  281C  3196  2EDC         	ljmp	l6828
  8778                           
  8779                           	psect	text3
  8780  2A51                     __ptext3:	
  8781 ;; *************** function _readNVM *****************
  8782 ;; Defined at:
  8783 ;;		line 480 in file "system.c"
  8784 ;; Parameters:    Size  Location     Type
  8785 ;;		None
  8786 ;; Auto vars:     Size  Location     Type
  8787 ;;  buf            64    7[BANK0 ] unsigned short [32]
  8788 ;;  nvm            32    0[BANK1 ] struct .
  8789 ;;  n               1   71[BANK0 ] unsigned char 
  8790 ;; Return value:  Size  Location     Type
  8791 ;;                  1    wreg      void 
  8792 ;; Registers used:
  8793 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8794 ;; Tracked objects:
  8795 ;;		On entry : 3F/0
  8796 ;;		On exit  : 3F/1
  8797 ;;		Unchanged: 0/0
  8798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8799 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8800 ;;      Locals:         0      65      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8801 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8802 ;;      Totals:         0      65      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8803 ;;Total ram usage:       97 bytes
  8804 ;; Hardware stack levels used:    1
  8805 ;; Hardware stack levels required when called:    4
  8806 ;; This function calls:
  8807 ;;		_FLASH_ReadWord
  8808 ;; This function is called by:
  8809 ;;		_main
  8810 ;; This function uses a non-reentrant model
  8811 ;;
  8812                           
  8813                           
  8814                           ;psect for function _readNVM
  8815  2A51                     _readNVM:	
  8816                           
  8817                           ;system.c: 482:  uint8_t n;;system.c: 483:  t_nvmData nvm;;system.c: 484:  uint16_t buf[
      +                          32];;system.c: 486:  for(n = 0; n < 32; n++) {
  8818                           
  8819                           ;incstack = 0
  8820                           ; Regs used in _readNVM: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8821  2A51  01E7               	clrf	readNVM@n
  8822  2A52                     l6380:	
  8823                           
  8824                           ;system.c: 487:   buf[n] = FLASH_ReadWord(0x3F80 + n);
  8825  2A52  0867               	movf	readNVM@n,w
  8826  2A53  00A4               	movwf	FLASH_ReadWord@flashAddr
  8827  2A54  3080               	movlw	128
  8828  2A55  01A5               	clrf	FLASH_ReadWord@flashAddr+1
  8829  2A56  07A4               	addwf	FLASH_ReadWord@flashAddr,f
  8830  2A57  303F               	movlw	63
  8831  2A58  3DA5               	addwfc	FLASH_ReadWord@flashAddr+1,f
  8832  2A59  22BE  31AA         	fcall	_FLASH_ReadWord
  8833  2A5B  3567               	lslf	readNVM@n,w
  8834  2A5C  3E27               	addlw	(low (readNVM@buf| 0))& (0+255)
  8835  2A5D  0086               	movwf	6
  8836  2A5E  0187               	clrf	7
  8837  2A5F  0824               	movf	?_FLASH_ReadWord,w
  8838  2A60  3FC0               	movwi [0]fsr1
  8839  2A61  0825               	movf	?_FLASH_ReadWord+1,w
  8840  2A62  3FC1               	movwi [1]fsr1
  8841                           
  8842                           ;system.c: 488:   nvm.raw[n] = (uint8_t)(buf[n] & 0x00ff);
  8843  2A63  0867               	movf	readNVM@n,w
  8844  2A64  3EA0               	addlw	(low (readNVM@nvm| 0))& (0+255)
  8845  2A65  0086               	movwf	6
  8846  2A66  3567               	lslf	readNVM@n,w
  8847  2A67  3E27               	addlw	(low (readNVM@buf| 0))& (0+255)
  8848  2A68  0084               	movwf	4
  8849  2A69  0185               	clrf	5
  8850  2A6A  0800               	movf	0,w
  8851  2A6B  0081               	movwf	1
  8852  2A6C  3020               	movlw	32
  8853                           
  8854                           ;system.c: 489:  }
  8855  2A6D  0AE7               	incf	readNVM@n,f
  8856  2A6E  0267               	subwf	readNVM@n,w
  8857  2A6F  1C03               	skipc
  8858  2A70  2A52               	goto	l6380
  8859                           
  8860                           ;system.c: 491:  data.heater[0].lensDia = nvm.lensDia[0];
  8861  2A71  3089               	movlw	137
  8862  2A72  0086               	movwf	6
  8863  2A73  3027               	movlw	39
  8864  2A74  0087               	movwf	7
  8865  2A75  0141               	movlb	1	; select bank1
  8866  2A76  0820               	movf	readNVM@nvm^(0+128),w
  8867  2A77  3FC0               	movwi [0]fsr1
  8868  2A78  0821               	movf	(readNVM@nvm+1)^(0+128),w
  8869  2A79  3FC1               	movwi [1]fsr1
  8870  2A7A  0822               	movf	(readNVM@nvm+2)^(0+128),w
  8871  2A7B  3FC2               	movwi [2]fsr1
  8872  2A7C  0823               	movf	(readNVM@nvm+3)^(0+128),w
  8873  2A7D  3FC3               	movwi [3]fsr1
  8874                           
  8875                           ;system.c: 492:  data.heater[1].lensDia = nvm.lensDia[1];
  8876  2A7E  30A8               	movlw	168
  8877  2A7F  0086               	movwf	6
  8878  2A80  0824               	movf	(readNVM@nvm^(0+128)+4),w
  8879  2A81  3FC0               	movwi [0]fsr1
  8880  2A82  0825               	movf	((readNVM@nvm+1)^(0+128)+4),w
  8881  2A83  3FC1               	movwi [1]fsr1
  8882  2A84  0826               	movf	((readNVM@nvm+2)^(0+128)+4),w
  8883  2A85  3FC2               	movwi [2]fsr1
  8884  2A86  0827               	movf	((readNVM@nvm+3)^(0+128)+4),w
  8885  2A87  3FC3               	movwi [3]fsr1
  8886                           
  8887                           ;system.c: 493:  data.heater[2].lensDia = nvm.lensDia[2];
  8888  2A88  30C7               	movlw	199
  8889  2A89  0086               	movwf	6
  8890  2A8A  0828               	movf	(readNVM@nvm^(0+128)+8),w
  8891  2A8B  3FC0               	movwi [0]fsr1
  8892  2A8C  0829               	movf	((readNVM@nvm+1)^(0+128)+8),w
  8893  2A8D  3FC1               	movwi [1]fsr1
  8894  2A8E  082A               	movf	((readNVM@nvm+2)^(0+128)+8),w
  8895  2A8F  3FC2               	movwi [2]fsr1
  8896  2A90  082B               	movf	((readNVM@nvm+3)^(0+128)+8),w
  8897  2A91  3FC3               	movwi [3]fsr1
  8898                           
  8899                           ;system.c: 494:  data.heater[3].lensDia = nvm.lensDia[3];
  8900  2A92  30E6               	movlw	230
  8901  2A93  0086               	movwf	6
  8902  2A94  082C               	movf	(readNVM@nvm^(0+128)+12),w
  8903  2A95  3FC0               	movwi [0]fsr1
  8904  2A96  082D               	movf	((readNVM@nvm+1)^(0+128)+12),w
  8905  2A97  3FC1               	movwi [1]fsr1
  8906  2A98  082E               	movf	((readNVM@nvm+2)^(0+128)+12),w
  8907  2A99  3FC2               	movwi [2]fsr1
  8908  2A9A  082F               	movf	((readNVM@nvm+3)^(0+128)+12),w
  8909  2A9B  3FC3               	movwi [3]fsr1
  8910                           
  8911                           ;system.c: 495:  data.dpOffset = nvm.dpOffset;
  8912  2A9C  304A               	movlw	74
  8913  2A9D  0086               	movwf	6
  8914  2A9E  315D               	addfsr 1,29
  8915  2A9F  0830               	movf	(readNVM@nvm^(0+128)+16),w
  8916  2AA0  3FC0               	movwi [0]fsr1
  8917  2AA1  0831               	movf	((readNVM@nvm+1)^(0+128)+16),w
  8918  2AA2  3FC1               	movwi [1]fsr1
  8919  2AA3  0832               	movf	((readNVM@nvm+2)^(0+128)+16),w
  8920  2AA4  3FC2               	movwi [2]fsr1
  8921  2AA5  0833               	movf	((readNVM@nvm+3)^(0+128)+16),w
  8922  2AA6  3FC3               	movwi [3]fsr1
  8923                           
  8924                           ;system.c: 496:  data.skyTemp = nvm.skyTemp;
  8925  2AA7  306B               	movlw	107
  8926  2AA8  0086               	movwf	6
  8927  2AA9  3027               	movlw	39
  8928  2AAA  0087               	movwf	7
  8929  2AAB  0834               	movf	(readNVM@nvm^(0+128)+20),w
  8930  2AAC  3FC0               	movwi [0]fsr1
  8931  2AAD  0835               	movf	((readNVM@nvm+1)^(0+128)+20),w
  8932  2AAE  3FC1               	movwi [1]fsr1
  8933  2AAF  0836               	movf	((readNVM@nvm+2)^(0+128)+20),w
  8934  2AB0  3FC2               	movwi [2]fsr1
  8935  2AB1  0837               	movf	((readNVM@nvm+3)^(0+128)+20),w
  8936  2AB2  3FC3               	movwi [3]fsr1
  8937                           
  8938                           ;system.c: 497:  data.fudgeFactor = nvm.fudgeFactor;
  8939  2AB3  306F               	movlw	111
  8940  2AB4  0086               	movwf	6
  8941  2AB5  0838               	movf	(readNVM@nvm^(0+128)+24),w
  8942  2AB6  3FC0               	movwi [0]fsr1
  8943  2AB7  0839               	movf	((readNVM@nvm+1)^(0+128)+24),w
  8944  2AB8  3FC1               	movwi [1]fsr1
  8945  2AB9  083A               	movf	((readNVM@nvm+2)^(0+128)+24),w
  8946  2ABA  3FC2               	movwi [2]fsr1
  8947  2ABB  083B               	movf	((readNVM@nvm+3)^(0+128)+24),w
  8948  2ABC  3FC3               	movwi [3]fsr1
  8949  2ABD  0008               	return
  8950  2ABE                     __end_of_readNVM:	
  8951  2ABE                     __ptext4:	
  8952 ;; *************** function _FLASH_ReadWord *****************
  8953 ;; Defined at:
  8954 ;;		line 8 in file "memory.c"
  8955 ;; Parameters:    Size  Location     Type
  8956 ;;  flashAddr       2    4[BANK0 ] unsigned short 
  8957 ;; Auto vars:     Size  Location     Type
  8958 ;;  GIEBitValue     1    6[BANK0 ] unsigned char 
  8959 ;; Return value:  Size  Location     Type
  8960 ;;                  2    4[BANK0 ] unsigned short 
  8961 ;; Registers used:
  8962 ;;		wreg, status,2, status,0
  8963 ;; Tracked objects:
  8964 ;;		On entry : 3F/0
  8965 ;;		On exit  : 3F/0
  8966 ;;		Unchanged: 0/0
  8967 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8968 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8969 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8971 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8972 ;;Total ram usage:        3 bytes
  8973 ;; Hardware stack levels used:    1
  8974 ;; Hardware stack levels required when called:    3
  8975 ;; This function calls:
  8976 ;;		Nothing
  8977 ;; This function is called by:
  8978 ;;		_readNVM
  8979 ;; This function uses a non-reentrant model
  8980 ;;
  8981                           
  8982                           
  8983                           ;psect for function _FLASH_ReadWord
  8984  2ABE                     _FLASH_ReadWord:	
  8985                           
  8986                           ;memory.c: 8: uint16_t FLASH_ReadWord(uint16_t flashAddr);memory.c: 9: {;memory.c: 10:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
  8987                           
  8988                           ;incstack = 0
  8989                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  8990  2ABE  3000               	movlw	0
  8991  2ABF  1B8B               	btfsc	11,7	;volatile
  8992  2AC0  3001               	movlw	1
  8993  2AC1  00A6               	movwf	FLASH_ReadWord@GIEBitValue
  8994                           
  8995                           ;memory.c: 12:  INTCONbits.GIE = 0;
  8996  2AC2  138B               	bcf	11,7	;volatile
  8997                           
  8998                           ;memory.c: 13:  NVMADRL = (flashAddr & 0x00FF);
  8999  2AC3  0824               	movf	FLASH_ReadWord@flashAddr,w
  9000  2AC4  0150               	movlb	16	; select bank16
  9001  2AC5  009A               	movwf	26	;volatile
  9002                           
  9003                           ;memory.c: 14:  NVMADRH = ((flashAddr & 0xFF00) >> 8);
  9004  2AC6  0140               	movlb	0	; select bank0
  9005  2AC7  0825               	movf	FLASH_ReadWord@flashAddr+1,w
  9006  2AC8  0150               	movlb	16	; select bank16
  9007  2AC9  009B               	movwf	27	;volatile
  9008                           
  9009                           ;memory.c: 16:  NVMCON1bits.NVMREGS = 0;
  9010  2ACA  131E               	bcf	30,6	;volsfr
  9011                           
  9012                           ;memory.c: 17:  NVMCON1bits.RD = 1;
  9013  2ACB  141E               	bsf	30,0	;volsfr
  9014                           
  9015                           ;memory.c: 18:  __nop();
  9016  2ACC  0000               	nop
  9017                           
  9018                           ;memory.c: 19:  __nop();
  9019  2ACD  0000               	nop
  9020                           
  9021                           ;memory.c: 20:  INTCONbits.GIE = GIEBitValue;
  9022  2ACE  0140               	movlb	0	; select bank0
  9023  2ACF  0C26               	rrf	FLASH_ReadWord@GIEBitValue,w
  9024  2AD0  1C03               	skipc
  9025  2AD1  138B               	bcf	11,7	;volatile
  9026  2AD2  1803               	skipnc
  9027  2AD3  178B               	bsf	11,7	;volatile
  9028                           
  9029                           ;memory.c: 22:  return((uint16_t) ((NVMDATH << 8) | NVMDATL));
  9030  2AD4  0150               	movlb	16	; select bank16
  9031  2AD5  081D               	movf	29,w	;volatile
  9032  2AD6  0140               	movlb	0	; select bank0
  9033  2AD7  00A5               	movwf	?_FLASH_ReadWord+1
  9034  2AD8  01A4               	clrf	?_FLASH_ReadWord
  9035  2AD9  0150               	movlb	16	; select bank16
  9036  2ADA  081C               	movf	28,w	;volatile
  9037  2ADB  0140               	movlb	0	; select bank0
  9038  2ADC  04A4               	iorwf	?_FLASH_ReadWord,f
  9039  2ADD  0008               	return
  9040  2ADE                     __end_of_FLASH_ReadWord:	
  9041                           
  9042                           	psect	text5
  9043  2BB2                     __ptext5:	
  9044 ;; *************** function _menu *****************
  9045 ;; Defined at:
  9046 ;;		line 98 in file "menuhelper.c"
  9047 ;; Parameters:    Size  Location     Type
  9048 ;;		None
  9049 ;; Auto vars:     Size  Location     Type
  9050 ;;  nextState       1   75[BANK1 ] char 
  9051 ;;  page            1   74[BANK1 ] char 
  9052 ;; Return value:  Size  Location     Type
  9053 ;;                  1    wreg      void 
  9054 ;; Registers used:
  9055 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9056 ;; Tracked objects:
  9057 ;;		On entry : 3F/2
  9058 ;;		On exit  : 3C/0
  9059 ;;		Unchanged: 0/0
  9060 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9061 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9062 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9063 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9064 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9065 ;;Total ram usage:        6 bytes
  9066 ;; Hardware stack levels used:    1
  9067 ;; Hardware stack levels required when called:    8
  9068 ;; This function calls:
  9069 ;;		_channelSetup
  9070 ;;		_channelView
  9071 ;;		_error
  9072 ;;		_getNextState
  9073 ;;		_getPB
  9074 ;;		_setDPOffset
  9075 ;;		_setFudgeFactor
  9076 ;;		_setLensDia
  9077 ;;		_setOutputPower
  9078 ;;		_setSkyTemp
  9079 ;;		_setup
  9080 ;;		_statusView
  9081 ;;		_timeSince
  9082 ;; This function is called by:
  9083 ;;		_main
  9084 ;; This function uses a non-reentrant model
  9085 ;;
  9086                           
  9087                           
  9088                           ;psect for function _menu
  9089  2BB2                     _menu:	
  9090                           
  9091                           ;menuhelper.c: 100:  static uint8_t state = ST_STATUS_VIEW;;menuhelper.c: 101:  int8_t p
      +                          age, nextState;;menuhelper.c: 114:  page = (*stateFuncTbl[state])();
  9092                           
  9093                           ;incstack = 0
  9094                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9095  2BB2  086B               	movf	menu@state^(0+256),w
  9096  2BB3  0141               	movlb	1	; select bank1
  9097  2BB4  00E6               	movwf	??_menu^(0+128)
  9098  2BB5  306C               	movlw	low (_stateFuncTbl| (0+32768))
  9099  2BB6  01E7               	clrf	(??_menu^(0+128)+1)
  9100  2BB7  35E6               	lslf	??_menu^(0+128),f
  9101  2BB8  0DE7               	rlf	(??_menu^(0+128)+1),f
  9102  2BB9  0766               	addwf	??_menu^(0+128),w
  9103  2BBA  0084               	movwf	4
  9104  2BBB  30B0               	movlw	high (_stateFuncTbl| (0+32768))
  9105  2BBC  3D67               	addwfc	(??_menu+1)^(0+128),w
  9106  2BBD  0085               	movwf	5
  9107  2BBE  3F01               	moviw [1]fsr0
  9108  2BBF  008A               	movwf	10
  9109  2BC0  3F00               	moviw [0]fsr0
  9110  2BC1  000A               	callw
  9111  2BC2  0141               	movlb	1	; select bank1
  9112  2BC3  00EA               	movwf	menu@page^(0+128)
  9113                           
  9114                           ;menuhelper.c: 116:  g_screenRefresh = 0;
  9115  2BC4  0140               	movlb	0	; select bank0
  9116  2BC5  01EB               	clrf	_g_screenRefresh
  9117                           
  9118                           ;menuhelper.c: 120:  nextState = getNextState(state, page, getPB(),
  9119  2BC6  0141               	movlb	1	; select bank1
  9120  2BC7  086A               	movf	menu@page^(0+128),w
  9121  2BC8  0140               	movlb	0	; select bank0
  9122  2BC9  00B5               	movwf	getNextState@intState
  9123  2BCA  3197  275C  31AB   	fcall	_getPB
  9124  2BCD  00B6               	movwf	getNextState@pb
  9125  2BCE  0142               	movlb	2	; select bank2
  9126  2BCF  0866               	movf	(_userActivity+3)^(0+256),w	;volatile
  9127  2BD0  0140               	movlb	0	; select bank0
  9128  2BD1  00A7               	movwf	timeSince@since+3
  9129  2BD2  0142               	movlb	2	; select bank2
  9130  2BD3  0865               	movf	(_userActivity+2)^(0+256),w	;volatile
  9131  2BD4  0140               	movlb	0	; select bank0
  9132  2BD5  00A6               	movwf	timeSince@since+2
  9133  2BD6  0142               	movlb	2	; select bank2
  9134  2BD7  0864               	movf	(_userActivity+1)^(0+256),w	;volatile
  9135  2BD8  0140               	movlb	0	; select bank0
  9136  2BD9  00A5               	movwf	timeSince@since+1
  9137  2BDA  0142               	movlb	2	; select bank2
  9138  2BDB  0863               	movf	_userActivity^(0+256),w	;volatile
  9139  2BDC  0140               	movlb	0	; select bank0
  9140  2BDD  00A4               	movwf	timeSince@since
  9141  2BDE  3181  21A0  31AB   	fcall	_timeSince
  9142  2BE1  0827               	movf	?_timeSince+3,w
  9143  2BE2  1D03               	btfss	3,2
  9144  2BE3  2BED               	goto	u9081
  9145  2BE4  0826               	movf	?_timeSince+2,w
  9146  2BE5  1D03               	btfss	3,2
  9147  2BE6  2BED               	goto	u9081
  9148  2BE7  30B1               	movlw	177
  9149  2BE8  0224               	subwf	?_timeSince,w
  9150  2BE9  3004               	movlw	4
  9151  2BEA  3B25               	subwfb	?_timeSince+1,w
  9152  2BEB  1C03               	btfss	3,0
  9153  2BEC  2BEF               	goto	u9080
  9154  2BED                     u9081:	
  9155  2BED  3001               	movlw	1
  9156  2BEE  2BF0               	goto	u9090
  9157  2BEF                     u9080:	
  9158  2BEF  3000               	movlw	0
  9159  2BF0                     u9090:	
  9160  2BF0  00B7               	movwf	getNextState@timeout
  9161  2BF1  0142               	movlb	2	; select bank2
  9162  2BF2  086B               	movf	menu@state^(0+256),w
  9163  2BF3  2416  31AB         	fcall	_getNextState
  9164  2BF5  0141               	movlb	1	; select bank1
  9165  2BF6  00EB               	movwf	menu@nextState^(0+128)
  9166                           
  9167                           ;menuhelper.c: 123:  if (nextState > -1) {
  9168  2BF7  1BEB               	btfsc	menu@nextState^(0+128),7
  9169  2BF8  2C13               	goto	l8584
  9170                           
  9171                           ;menuhelper.c: 125:   if (state != nextState) {
  9172  2BF9  086B               	movf	menu@nextState^(0+128),w
  9173  2BFA  00E6               	movwf	??_menu^(0+128)
  9174  2BFB  01E7               	clrf	(??_menu^(0+128)+1)
  9175  2BFC  1BE6               	btfsc	??_menu^(0+128),7
  9176  2BFD  03E7               	decf	(??_menu^(0+128)+1),f
  9177  2BFE  0142               	movlb	2	; select bank2
  9178  2BFF  086B               	movf	menu@state^(0+256),w
  9179  2C00  0141               	movlb	1	; select bank1
  9180  2C01  00E8               	movwf	(??_menu+2)^(0+128)
  9181  2C02  01E9               	clrf	((??_menu+2)^(0+128)+1)
  9182  2C03  0867               	movf	(??_menu+1)^(0+128),w
  9183  2C04  0669               	xorwf	(??_menu+3)^(0+128),w
  9184  2C05  1D03               	skipz
  9185  2C06  2C09               	goto	u9115
  9186  2C07  0866               	movf	??_menu^(0+128),w
  9187  2C08  0668               	xorwf	(??_menu+2)^(0+128),w
  9188  2C09                     u9115:	
  9189  2C09  1903               	skipnz
  9190  2C0A  0008               	return
  9191                           
  9192                           ;menuhelper.c: 126:    g_screenRefresh = 1;
  9193  2C0B  0140               	movlb	0	; select bank0
  9194  2C0C  01EB               	clrf	_g_screenRefresh
  9195  2C0D  0AEB               	incf	_g_screenRefresh,f
  9196                           
  9197                           ;menuhelper.c: 127:    state = nextState;
  9198  2C0E  0141               	movlb	1	; select bank1
  9199  2C0F  086B               	movf	menu@nextState^(0+128),w
  9200  2C10  0142               	movlb	2	; select bank2
  9201  2C11  00EB               	movwf	menu@state^(0+256)
  9202  2C12  0008               	return
  9203  2C13                     l8584:	
  9204                           
  9205                           ;menuhelper.c: 130:   error(ERR_MENU);
  9206  2C13  300F               	movlw	15
  9207  2C14  31A4  2C31         	ljmp	_error
  9208  2C16                     __end_of_menu:	
  9209  2C16                     __ptext20:	
  9210 ;; *************** function _getNextState *****************
  9211 ;; Defined at:
  9212 ;;		line 138 in file "menuhelper.c"
  9213 ;; Parameters:    Size  Location     Type
  9214 ;;  state           1    wreg     enum E7963
  9215 ;;  intState        1   21[BANK0 ] unsigned char 
  9216 ;;  pb              1   22[BANK0 ] enum E7872
  9217 ;;  timeout         1   23[BANK0 ] unsigned char 
  9218 ;; Auto vars:     Size  Location     Type
  9219 ;;  state           1   25[BANK0 ] enum E7963
  9220 ;;  n               1   26[BANK0 ] unsigned char 
  9221 ;; Return value:  Size  Location     Type
  9222 ;;                  1    wreg      char 
  9223 ;; Registers used:
  9224 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9225 ;; Tracked objects:
  9226 ;;		On entry : 3F/2
  9227 ;;		On exit  : 3F/0
  9228 ;;		Unchanged: 0/0
  9229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9230 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9231 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9232 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9233 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9234 ;;Total ram usage:        6 bytes
  9235 ;; Hardware stack levels used:    1
  9236 ;; Hardware stack levels required when called:    4
  9237 ;; This function calls:
  9238 ;;		___wmul
  9239 ;; This function is called by:
  9240 ;;		_menu
  9241 ;; This function uses a non-reentrant model
  9242 ;;
  9243                           
  9244                           
  9245                           ;psect for function _getNextState
  9246  2C16                     _getNextState:	
  9247                           
  9248                           ;incstack = 0
  9249                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9250                           ;getNextState@state stored from wreg
  9251  2C16  0140               	movlb	0	; select bank0
  9252  2C17  00B9               	movwf	getNextState@state
  9253                           
  9254                           ;menuhelper.c: 138: int8_t getNextState(enum e_menuStates state, uint8_t intState,;menuh
      +                          elper.c: 139:    enum e_buttonPress pb, uint8_t timeout);menuhelper.c: 140: {;menuhelper
      +                          .c: 141:  uint8_t n;;menuhelper.c: 144:  for(n = 0; n < sizeof(nextStateTbl)/sizeof(next
      +                          StateTbl[0]); n++) {
  9255  2C18  01BA               	clrf	getNextState@n
  9256  2C19                     l6014:	
  9257                           
  9258                           ;menuhelper.c: 145:   if ((nextStateTbl[n].state == state)) {
  9259  2C19  083A               	movf	getNextState@n,w
  9260  2C1A  00AF               	movwf	___wmul@multiplier
  9261  2C1B  3006               	movlw	6
  9262  2C1C  01B0               	clrf	___wmul@multiplier+1
  9263  2C1D  00B1               	movwf	___wmul@multiplicand
  9264  2C1E  01B2               	clrf	___wmul@multiplicand+1
  9265  2C1F  318A  2206  31AB   	fcall	___wmul
  9266  2C22  0830               	movf	?___wmul+1,w
  9267  2C23  0085               	movwf	5
  9268  2C24  082F               	movf	?___wmul,w
  9269  2C25  0084               	movwf	4
  9270  2C26  3000               	movlw	low (_nextStateTbl| (0+32768))
  9271  2C27  0784               	addwf	4,f
  9272  2C28  30B0               	movlw	high (_nextStateTbl| (0+32768))
  9273  2C29  3D85               	addwfc	5,f
  9274  2C2A  0800               	movf	0,w	;code access
  9275  2C2B  0639               	xorwf	getNextState@state,w
  9276  2C2C  1D03               	skipz
  9277  2C2D  2CA9               	goto	l6046
  9278                           
  9279                           ;menuhelper.c: 147:    if ((nextStateTbl[n].intState == intState) ||
  9280  2C2E  083A               	movf	getNextState@n,w
  9281  2C2F  00AF               	movwf	___wmul@multiplier
  9282  2C30  3006               	movlw	6
  9283  2C31  01B0               	clrf	___wmul@multiplier+1
  9284  2C32  00B1               	movwf	___wmul@multiplicand
  9285  2C33  01B2               	clrf	___wmul@multiplicand+1
  9286  2C34  318A  2206  31AB   	fcall	___wmul
  9287  2C37  0830               	movf	?___wmul+1,w
  9288  2C38  0085               	movwf	5
  9289  2C39  082F               	movf	?___wmul,w
  9290  2C3A  0084               	movwf	4
  9291  2C3B  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
  9292  2C3C  0784               	addwf	4,f
  9293  2C3D  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
  9294  2C3E  3D85               	addwfc	5,f
  9295  2C3F  0800               	movf	0,w	;code access
  9296  2C40  0635               	xorwf	getNextState@intState,w
  9297  2C41  1903               	skipnz
  9298  2C42  2C58               	goto	l6020
  9299  2C43  083A               	movf	getNextState@n,w
  9300  2C44  00AF               	movwf	___wmul@multiplier
  9301  2C45  3006               	movlw	6
  9302  2C46  01B0               	clrf	___wmul@multiplier+1
  9303  2C47  00B1               	movwf	___wmul@multiplicand
  9304  2C48  01B2               	clrf	___wmul@multiplicand+1
  9305  2C49  318A  2206  31AB   	fcall	___wmul
  9306  2C4C  0830               	movf	?___wmul+1,w
  9307  2C4D  0085               	movwf	5
  9308  2C4E  082F               	movf	?___wmul,w
  9309  2C4F  0084               	movwf	4
  9310  2C50  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
  9311  2C51  0784               	addwf	4,f
  9312  2C52  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
  9313  2C53  3D85               	addwfc	5,f
  9314  2C54  0012               	moviw fsr0++
  9315  2C55  3AFF               	xorlw	255
  9316  2C56  1D03               	btfss	3,2
  9317  2C57  2CA9               	goto	l6046
  9318  2C58                     l6020:	
  9319                           
  9320                           ;menuhelper.c: 148:     (nextStateTbl[n].intState == 255)) {;menuhelper.c: 149:     if (
      +                          timeout)
  9321  2C58  0837               	movf	getNextState@timeout,w
  9322  2C59  1903               	btfsc	3,2
  9323  2C5A  2C6D               	goto	l6026
  9324                           
  9325                           ;menuhelper.c: 150:      return nextStateTbl[n].timeout;
  9326  2C5B  083A               	movf	getNextState@n,w
  9327  2C5C  00AF               	movwf	___wmul@multiplier
  9328  2C5D  3006               	movlw	6
  9329  2C5E  01B0               	clrf	___wmul@multiplier+1
  9330  2C5F  00B1               	movwf	___wmul@multiplicand
  9331  2C60  01B2               	clrf	___wmul@multiplicand+1
  9332  2C61  318A  2206         	fcall	___wmul
  9333  2C63  0830               	movf	?___wmul+1,w
  9334  2C64  0085               	movwf	5
  9335  2C65  082F               	movf	?___wmul,w
  9336  2C66  0084               	movwf	4
  9337  2C67  3004               	movlw	low ((_nextStateTbl+4)| (0+32768))
  9338  2C68  0784               	addwf	4,f
  9339  2C69  30B0               	movlw	high ((_nextStateTbl+4)| (0+32768))
  9340  2C6A  3D85               	addwfc	5,f
  9341  2C6B  0800               	movf	0,w	;code access
  9342  2C6C  0008               	return
  9343  2C6D                     l6026:	
  9344                           
  9345                           ;menuhelper.c: 152:     if (pb == PB_SHORT)
  9346  2C6D  0B36               	decfsz	getNextState@pb,w
  9347  2C6E  2C81               	goto	l6034
  9348                           
  9349                           ;menuhelper.c: 153:      return nextStateTbl[n].pbShort;
  9350  2C6F  083A               	movf	getNextState@n,w
  9351  2C70  00AF               	movwf	___wmul@multiplier
  9352  2C71  3006               	movlw	6
  9353  2C72  01B0               	clrf	___wmul@multiplier+1
  9354  2C73  00B1               	movwf	___wmul@multiplicand
  9355  2C74  01B2               	clrf	___wmul@multiplicand+1
  9356  2C75  318A  2206         	fcall	___wmul
  9357  2C77  0830               	movf	?___wmul+1,w
  9358  2C78  0085               	movwf	5
  9359  2C79  082F               	movf	?___wmul,w
  9360  2C7A  0084               	movwf	4
  9361  2C7B  3002               	movlw	low ((_nextStateTbl+2)| (0+32768))
  9362  2C7C  0784               	addwf	4,f
  9363  2C7D  30B0               	movlw	high ((_nextStateTbl+2)| (0+32768))
  9364  2C7E  3D85               	addwfc	5,f
  9365  2C7F  0800               	movf	0,w	;code access
  9366  2C80  0008               	return
  9367  2C81                     l6034:	
  9368  2C81  3002               	movlw	2
  9369  2C82  0636               	xorwf	getNextState@pb,w
  9370  2C83  1D03               	btfss	3,2
  9371  2C84  2C97               	goto	l6042
  9372                           
  9373                           ;menuhelper.c: 155:      return nextStateTbl[n].pbLong;
  9374  2C85  083A               	movf	getNextState@n,w
  9375  2C86  00AF               	movwf	___wmul@multiplier
  9376  2C87  3006               	movlw	6
  9377  2C88  01B0               	clrf	___wmul@multiplier+1
  9378  2C89  00B1               	movwf	___wmul@multiplicand
  9379  2C8A  01B2               	clrf	___wmul@multiplicand+1
  9380  2C8B  318A  2206         	fcall	___wmul
  9381  2C8D  0830               	movf	?___wmul+1,w
  9382  2C8E  0085               	movwf	5
  9383  2C8F  082F               	movf	?___wmul,w
  9384  2C90  0084               	movwf	4
  9385  2C91  3003               	movlw	low ((_nextStateTbl+3)| (0+32768))
  9386  2C92  0784               	addwf	4,f
  9387  2C93  30B0               	movlw	high ((_nextStateTbl+3)| (0+32768))
  9388  2C94  3D85               	addwfc	5,f
  9389  2C95  0800               	movf	0,w	;code access
  9390  2C96  0008               	return
  9391  2C97                     l6042:	
  9392                           
  9393                           ;menuhelper.c: 157:      return nextStateTbl[n].noAction;
  9394  2C97  083A               	movf	getNextState@n,w
  9395  2C98  00AF               	movwf	___wmul@multiplier
  9396  2C99  3006               	movlw	6
  9397  2C9A  01B0               	clrf	___wmul@multiplier+1
  9398  2C9B  00B1               	movwf	___wmul@multiplicand
  9399  2C9C  01B2               	clrf	___wmul@multiplicand+1
  9400  2C9D  318A  2206         	fcall	___wmul
  9401  2C9F  0830               	movf	?___wmul+1,w
  9402  2CA0  0085               	movwf	5
  9403  2CA1  082F               	movf	?___wmul,w
  9404  2CA2  0084               	movwf	4
  9405  2CA3  3005               	movlw	low ((_nextStateTbl+5)| (0+32768))
  9406  2CA4  0784               	addwf	4,f
  9407  2CA5  30B0               	movlw	high ((_nextStateTbl+5)| (0+32768))
  9408  2CA6  3D85               	addwfc	5,f
  9409  2CA7  0800               	movf	0,w	;code access
  9410  2CA8  0008               	return
  9411  2CA9                     l6046:	
  9412  2CA9  3012               	movlw	18
  9413                           
  9414                           ;menuhelper.c: 160:  }
  9415  2CAA  0ABA               	incf	getNextState@n,f
  9416  2CAB  023A               	subwf	getNextState@n,w
  9417  2CAC  1803               	btfsc	3,0
  9418                           
  9419                           ;menuhelper.c: 161:  return -1;
  9420  2CAD  34FF               	retlw	255
  9421  2CAE  2C19               	goto	l6014
  9422  2CAF                     __end_of_getNextState:	
  9423                           
  9424                           	psect	text8
  9425  0468                     __ptext8:	
  9426 ;; *************** function _setDPOffset *****************
  9427 ;; Defined at:
  9428 ;;		line 291 in file "menu.c"
  9429 ;; Parameters:    Size  Location     Type
  9430 ;;		None
  9431 ;; Auto vars:     Size  Location     Type
  9432 ;;		None
  9433 ;; Return value:  Size  Location     Type
  9434 ;;                  1    wreg      unsigned char 
  9435 ;; Registers used:
  9436 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9437 ;; Tracked objects:
  9438 ;;		On entry : 3F/1
  9439 ;;		On exit  : 3F/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9442 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9443 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9444 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9445 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9446 ;;Total ram usage:        0 bytes
  9447 ;; Hardware stack levels used:    1
  9448 ;; Hardware stack levels required when called:    7
  9449 ;; This function calls:
  9450 ;;		_OLED_print_xy
  9451 ;;		_ftoa
  9452 ;;		_getPB
  9453 ;;		_returnToPage
  9454 ;;		_spinInput
  9455 ;;		_storeNVM
  9456 ;; This function is called by:
  9457 ;;		_menu
  9458 ;; This function uses a non-reentrant model
  9459 ;;
  9460                           
  9461                           
  9462                           ;psect for function _setDPOffset
  9463  0468                     _setDPOffset:	
  9464                           
  9465                           ;menu.c: 293:  returnToPage(0);
  9466                           
  9467                           ;incstack = 0
  9468                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9469  0468  3000               	movlw	0
  9470  0469  3193  235B  3184   	fcall	_returnToPage
  9471                           
  9472                           ;menu.c: 294:  if (g_screenRefresh)
  9473  046C  0140               	movlb	0	; select bank0
  9474  046D  086B               	movf	_g_screenRefresh,w
  9475  046E  1903               	btfsc	3,2
  9476  046F  2C79               	goto	l8052
  9477  0470  30DF               	movlw	low (STR_53| (0+32768))
  9478                           
  9479                           ;menu.c: 295:   OLED_print_xy(0, 0, "DP offset   ");
  9480  0471  01AF               	clrf	OLED_print_xy@row
  9481  0472  00B0               	movwf	OLED_print_xy@s
  9482  0473  30B2               	movlw	high (STR_53| (0+32768))
  9483  0474  00B1               	movwf	OLED_print_xy@s+1
  9484  0475  3000               	movlw	0
  9485  0476  3197  2730  3184   	fcall	_OLED_print_xy
  9486  0479                     l8052:	
  9487                           
  9488                           ;menu.c: 296:  spinInput(&data.dpOffset, 0, 10, 0.5);
  9489  0479  3067               	movlw	103
  9490  047A  0141               	movlb	1	; select bank1
  9491  047B  00B9               	movwf	spinInput@input^(0+128)
  9492  047C  3027               	movlw	39
  9493  047D  00BA               	movwf	(spinInput@input^(0+128)+1)
  9494  047E  3041               	movlw	65
  9495  047F  01BB               	clrf	spinInput@min^(0+128)
  9496  0480  01BC               	clrf	(spinInput@min+1)^(0+128)
  9497  0481  01BD               	clrf	(spinInput@min+2)^(0+128)
  9498  0482  01BE               	clrf	(spinInput@min+3)^(0+128)
  9499  0483  00C2               	movwf	(spinInput@max+3)^(0+128)
  9500  0484  3020               	movlw	32
  9501  0485  00C1               	movwf	(spinInput@max+2)^(0+128)
  9502  0486  303F               	movlw	63
  9503  0487  01C0               	clrf	(spinInput@max+1)^(0+128)
  9504  0488  01BF               	clrf	spinInput@max^(0+128)
  9505  0489  00C6               	movwf	(spinInput@step+3)^(0+128)
  9506  048A  3000               	movlw	0
  9507  048B  01C5               	clrf	(spinInput@step+2)^(0+128)
  9508  048C  01C4               	clrf	(spinInput@step+1)^(0+128)
  9509  048D  01C3               	clrf	spinInput@step^(0+128)
  9510  048E  3197  2774  3184   	fcall	_spinInput
  9511                           
  9512                           ;menu.c: 297:  ftoa(str, data.dpOffset, 4, 1);
  9513  0491  304A               	movlw	74
  9514  0492  0086               	movwf	6
  9515  0493  3027               	movlw	39
  9516  0494  0087               	movwf	7
  9517  0495  315D               	addfsr 1,29
  9518  0496  3F40               	moviw [0]fsr1
  9519  0497  0141               	movlb	1	; select bank1
  9520  0498  00BA               	movwf	ftoa@fValue^(0+128)
  9521  0499  3F41               	moviw [1]fsr1
  9522  049A  00BB               	movwf	(ftoa@fValue+1)^(0+128)
  9523  049B  3F42               	moviw [2]fsr1
  9524  049C  00BC               	movwf	(ftoa@fValue+2)^(0+128)
  9525  049D  3F43               	moviw [3]fsr1
  9526  049E  00BD               	movwf	(ftoa@fValue+3)^(0+128)
  9527  049F  3004               	movlw	4
  9528  04A0  00BE               	movwf	ftoa@width^(0+128)
  9529  04A1  30E5               	movlw	(low (_str| (0+256)))& (0+255)
  9530  04A2  01BF               	clrf	ftoa@prec^(0+128)
  9531  04A3  0ABF               	incf	ftoa@prec^(0+128),f
  9532  04A4  318A  221B  3184   	fcall	_ftoa
  9533                           
  9534                           ;menu.c: 298:  OLED_print_xy(0, 1, "temp.\004");
  9535  04A7  0140               	movlb	0	; select bank0
  9536  04A8  30BF               	movlw	low (STR_54| (0+32768))
  9537  04A9  01AF               	clrf	OLED_print_xy@row
  9538  04AA  0AAF               	incf	OLED_print_xy@row,f
  9539  04AB  00B0               	movwf	OLED_print_xy@s
  9540  04AC  30B3               	movlw	high (STR_54| (0+32768))
  9541  04AD  00B1               	movwf	OLED_print_xy@s+1
  9542  04AE  3000               	movlw	0
  9543  04AF  3197  2730  3184   	fcall	_OLED_print_xy
  9544  04B2  30E5               	movlw	low _str
  9545                           
  9546                           ;menu.c: 299:  OLED_print_xy(6, 1, str);
  9547  04B3  01AF               	clrf	OLED_print_xy@row
  9548  04B4  0AAF               	incf	OLED_print_xy@row,f
  9549  04B5  00B0               	movwf	OLED_print_xy@s
  9550  04B6  3001               	movlw	high _str
  9551  04B7  00B1               	movwf	OLED_print_xy@s+1
  9552  04B8  3006               	movlw	6
  9553  04B9  3197  2730  3184   	fcall	_OLED_print_xy
  9554  04BC  30E6               	movlw	low (STR_55| (0+32768))
  9555                           
  9556                           ;menu.c: 300:  OLED_print_xy(10, 1, "\001\003");
  9557  04BD  01AF               	clrf	OLED_print_xy@row
  9558  04BE  0AAF               	incf	OLED_print_xy@row,f
  9559  04BF  00B0               	movwf	OLED_print_xy@s
  9560  04C0  30B3               	movlw	high (STR_55| (0+32768))
  9561  04C1  00B1               	movwf	OLED_print_xy@s+1
  9562  04C2  300A               	movlw	10
  9563  04C3  3197  2730  3184   	fcall	_OLED_print_xy
  9564                           
  9565                           ;menu.c: 301:  if (getPB() == PB_SHORT) {
  9566  04C6  3197  275C  3184   	fcall	_getPB
  9567  04C9  3A01               	xorlw	1
  9568  04CA  1D03               	skipz
  9569  04CB  3401               	retlw	1
  9570                           
  9571                           ;menu.c: 302:   storeNVM();
  9572  04CC  2636               	fcall	_storeNVM
  9573                           
  9574                           ;menu.c: 303:   return 0;
  9575  04CD  3400               	retlw	0
  9576  04CE                     __end_of_setDPOffset:	
  9577                           ;menu.c: 305:  return 1;
  9578                           
  9579  04CE                     __ptext7:	
  9580 ;; *************** function _setSkyTemp *****************
  9581 ;; Defined at:
  9582 ;;		line 312 in file "menu.c"
  9583 ;; Parameters:    Size  Location     Type
  9584 ;;		None
  9585 ;; Auto vars:     Size  Location     Type
  9586 ;;		None
  9587 ;; Return value:  Size  Location     Type
  9588 ;;                  1    wreg      unsigned char 
  9589 ;; Registers used:
  9590 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9591 ;; Tracked objects:
  9592 ;;		On entry : 3F/1
  9593 ;;		On exit  : 3F/0
  9594 ;;		Unchanged: 0/0
  9595 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9600 ;;Total ram usage:        0 bytes
  9601 ;; Hardware stack levels used:    1
  9602 ;; Hardware stack levels required when called:    7
  9603 ;; This function calls:
  9604 ;;		_OLED_print_xy
  9605 ;;		_ftoa
  9606 ;;		_getPB
  9607 ;;		_returnToPage
  9608 ;;		_spinInput
  9609 ;;		_storeNVM
  9610 ;; This function is called by:
  9611 ;;		_menu
  9612 ;; This function uses a non-reentrant model
  9613 ;;
  9614                           
  9615                           
  9616                           ;psect for function _setSkyTemp
  9617  04CE                     _setSkyTemp:	
  9618                           
  9619                           ;menu.c: 314:  returnToPage(0);
  9620                           
  9621                           ;incstack = 0
  9622                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9623  04CE  3000               	movlw	0
  9624  04CF  3193  235B  3184   	fcall	_returnToPage
  9625                           
  9626                           ;menu.c: 315:  if (g_screenRefresh)
  9627  04D2  0140               	movlb	0	; select bank0
  9628  04D3  086B               	movf	_g_screenRefresh,w
  9629  04D4  1903               	btfsc	3,2
  9630  04D5  2CDF               	goto	l8074
  9631  04D6  30C5               	movlw	low (STR_56| (0+32768))
  9632                           
  9633                           ;menu.c: 316:   OLED_print_xy(0, 0, "Sky temp.   ");
  9634  04D7  01AF               	clrf	OLED_print_xy@row
  9635  04D8  00B0               	movwf	OLED_print_xy@s
  9636  04D9  30B2               	movlw	high (STR_56| (0+32768))
  9637  04DA  00B1               	movwf	OLED_print_xy@s+1
  9638  04DB  3000               	movlw	0
  9639  04DC  3197  2730  3184   	fcall	_OLED_print_xy
  9640  04DF                     l8074:	
  9641                           
  9642                           ;menu.c: 317:  spinInput(&data.skyTemp, -50, -20, 1);
  9643  04DF  306B               	movlw	107
  9644  04E0  0141               	movlb	1	; select bank1
  9645  04E1  00B9               	movwf	spinInput@input^(0+128)
  9646  04E2  3027               	movlw	39
  9647  04E3  00BA               	movwf	(spinInput@input^(0+128)+1)
  9648  04E4  30C2               	movlw	194
  9649  04E5  00BE               	movwf	(spinInput@min+3)^(0+128)
  9650  04E6  3048               	movlw	72
  9651  04E7  00BD               	movwf	(spinInput@min+2)^(0+128)
  9652  04E8  30C1               	movlw	193
  9653  04E9  01BC               	clrf	(spinInput@min+1)^(0+128)
  9654  04EA  01BB               	clrf	spinInput@min^(0+128)
  9655  04EB  00C2               	movwf	(spinInput@max+3)^(0+128)
  9656  04EC  30A0               	movlw	160
  9657  04ED  00C1               	movwf	(spinInput@max+2)^(0+128)
  9658  04EE  303F               	movlw	63
  9659  04EF  01C0               	clrf	(spinInput@max+1)^(0+128)
  9660  04F0  01BF               	clrf	spinInput@max^(0+128)
  9661  04F1  00C6               	movwf	(spinInput@step+3)^(0+128)
  9662  04F2  3080               	movlw	128
  9663  04F3  00C5               	movwf	(spinInput@step+2)^(0+128)
  9664  04F4  3000               	movlw	0
  9665  04F5  01C4               	clrf	(spinInput@step+1)^(0+128)
  9666  04F6  01C3               	clrf	spinInput@step^(0+128)
  9667  04F7  3197  2774  3184   	fcall	_spinInput
  9668                           
  9669                           ;menu.c: 318:  ftoa(str, data.skyTemp, 3, 0);
  9670  04FA  306B               	movlw	107
  9671  04FB  0086               	movwf	6
  9672  04FC  3027               	movlw	39
  9673  04FD  0087               	movwf	7
  9674  04FE  3F40               	moviw [0]fsr1
  9675  04FF  0141               	movlb	1	; select bank1
  9676  0500  00BA               	movwf	ftoa@fValue^(0+128)
  9677  0501  3F41               	moviw [1]fsr1
  9678  0502  00BB               	movwf	(ftoa@fValue+1)^(0+128)
  9679  0503  3F42               	moviw [2]fsr1
  9680  0504  00BC               	movwf	(ftoa@fValue+2)^(0+128)
  9681  0505  3F43               	moviw [3]fsr1
  9682  0506  00BD               	movwf	(ftoa@fValue+3)^(0+128)
  9683  0507  3003               	movlw	3
  9684  0508  00BE               	movwf	ftoa@width^(0+128)
  9685  0509  30E5               	movlw	(low (_str| (0+256)))& (0+255)
  9686  050A  01BF               	clrf	ftoa@prec^(0+128)
  9687  050B  318A  221B  3184   	fcall	_ftoa
  9688                           
  9689                           ;menu.c: 319:  OLED_print_xy(0, 1, "\004");
  9690  050E  0140               	movlb	0	; select bank0
  9691  050F  30C4               	movlw	low ((STR_54+5)| (0+32768))
  9692  0510  01AF               	clrf	OLED_print_xy@row
  9693  0511  0AAF               	incf	OLED_print_xy@row,f
  9694  0512  00B0               	movwf	OLED_print_xy@s
  9695  0513  30B3               	movlw	high ((STR_54+5)| (0+32768))
  9696  0514  00B1               	movwf	OLED_print_xy@s+1
  9697  0515  3000               	movlw	0
  9698  0516  3197  2730  3184   	fcall	_OLED_print_xy
  9699  0519  30E5               	movlw	low _str
  9700                           
  9701                           ;menu.c: 320:  OLED_print_xy(1, 1, str);
  9702  051A  01AF               	clrf	OLED_print_xy@row
  9703  051B  0AAF               	incf	OLED_print_xy@row,f
  9704  051C  00B0               	movwf	OLED_print_xy@s
  9705  051D  3001               	movlw	high _str
  9706  051E  00B1               	movwf	OLED_print_xy@s+1
  9707  051F  3001               	movlw	1
  9708  0520  3197  2730  3184   	fcall	_OLED_print_xy
  9709  0523  305E               	movlw	low (STR_58| (0+32768))
  9710                           
  9711                           ;menu.c: 321:  OLED_print_xy(4, 1, "\001 \003     ");
  9712  0524  01AF               	clrf	OLED_print_xy@row
  9713  0525  0AAF               	incf	OLED_print_xy@row,f
  9714  0526  00B0               	movwf	OLED_print_xy@s
  9715  0527  30B3               	movlw	high (STR_58| (0+32768))
  9716  0528  00B1               	movwf	OLED_print_xy@s+1
  9717  0529  3004               	movlw	4
  9718  052A  3197  2730  3184   	fcall	_OLED_print_xy
  9719                           
  9720                           ;menu.c: 322:  if (getPB() == PB_SHORT) {
  9721  052D  3197  275C  3184   	fcall	_getPB
  9722  0530  3A01               	xorlw	1
  9723  0531  1D03               	skipz
  9724  0532  3401               	retlw	1
  9725                           
  9726                           ;menu.c: 323:   storeNVM();
  9727  0533  2636               	fcall	_storeNVM
  9728                           
  9729                           ;menu.c: 324:   return 0;
  9730  0534  3400               	retlw	0
  9731  0535                     __end_of_setSkyTemp:	
  9732                           ;menu.c: 326:  return 1;
  9733                           
  9734  0535                     __ptext6:	
  9735 ;; *************** function _setFudgeFactor *****************
  9736 ;; Defined at:
  9737 ;;		line 333 in file "menu.c"
  9738 ;; Parameters:    Size  Location     Type
  9739 ;;		None
  9740 ;; Auto vars:     Size  Location     Type
  9741 ;;		None
  9742 ;; Return value:  Size  Location     Type
  9743 ;;                  1    wreg      unsigned char 
  9744 ;; Registers used:
  9745 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9746 ;; Tracked objects:
  9747 ;;		On entry : 3F/1
  9748 ;;		On exit  : 3F/0
  9749 ;;		Unchanged: 0/0
  9750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9752 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9754 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9755 ;;Total ram usage:        0 bytes
  9756 ;; Hardware stack levels used:    1
  9757 ;; Hardware stack levels required when called:    7
  9758 ;; This function calls:
  9759 ;;		_OLED_print_xy
  9760 ;;		_ftoa
  9761 ;;		_getPB
  9762 ;;		_returnToPage
  9763 ;;		_spinInput
  9764 ;;		_storeNVM
  9765 ;; This function is called by:
  9766 ;;		_menu
  9767 ;; This function uses a non-reentrant model
  9768 ;;
  9769                           
  9770                           
  9771                           ;psect for function _setFudgeFactor
  9772  0535                     _setFudgeFactor:	
  9773                           
  9774                           ;menu.c: 335:  returnToPage(0);
  9775                           
  9776                           ;incstack = 0
  9777                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9778  0535  3000               	movlw	0
  9779  0536  3193  235B  3184   	fcall	_returnToPage
  9780                           
  9781                           ;menu.c: 336:  if (g_screenRefresh)
  9782  0539  0140               	movlb	0	; select bank0
  9783  053A  086B               	movf	_g_screenRefresh,w
  9784  053B  1903               	btfsc	3,2
  9785  053C  2D46               	goto	l8096
  9786  053D  30CF               	movlw	low ((STR_48+24)| (0+32768))
  9787                           
  9788                           ;menu.c: 337:   OLED_print_xy(0, 0, "Fudge factor");
  9789  053E  01AF               	clrf	OLED_print_xy@row
  9790  053F  00B0               	movwf	OLED_print_xy@s
  9791  0540  30B0               	movlw	high ((STR_48+24)| (0+32768))
  9792  0541  00B1               	movwf	OLED_print_xy@s+1
  9793  0542  3000               	movlw	0
  9794  0543  3197  2730  3184   	fcall	_OLED_print_xy
  9795  0546                     l8096:	
  9796                           
  9797                           ;menu.c: 338:  spinInput(&data.fudgeFactor, 0.1, 5.0, 0.1);
  9798  0546  306F               	movlw	111
  9799  0547  0141               	movlb	1	; select bank1
  9800  0548  00B9               	movwf	spinInput@input^(0+128)
  9801  0549  3027               	movlw	39
  9802  054A  00BA               	movwf	(spinInput@input^(0+128)+1)
  9803  054B  303D               	movlw	61
  9804  054C  00BE               	movwf	(spinInput@min+3)^(0+128)
  9805  054D  30CC               	movlw	204
  9806  054E  00BD               	movwf	(spinInput@min+2)^(0+128)
  9807  054F  00BC               	movwf	(spinInput@min+1)^(0+128)
  9808  0550  30CD               	movlw	205
  9809  0551  00BB               	movwf	spinInput@min^(0+128)
  9810  0552  3040               	movlw	64
  9811  0553  00C2               	movwf	(spinInput@max+3)^(0+128)
  9812  0554  30A0               	movlw	160
  9813  0555  00C1               	movwf	(spinInput@max+2)^(0+128)
  9814  0556  303D               	movlw	61
  9815  0557  01C0               	clrf	(spinInput@max+1)^(0+128)
  9816  0558  01BF               	clrf	spinInput@max^(0+128)
  9817  0559  00C6               	movwf	(spinInput@step+3)^(0+128)
  9818  055A  30CC               	movlw	204
  9819  055B  00C5               	movwf	(spinInput@step+2)^(0+128)
  9820  055C  00C4               	movwf	(spinInput@step+1)^(0+128)
  9821  055D  30CD               	movlw	205
  9822  055E  00C3               	movwf	spinInput@step^(0+128)
  9823  055F  3197  2774  3184   	fcall	_spinInput
  9824                           
  9825                           ;menu.c: 339:  ftoa(str, data.fudgeFactor, 3, 1);
  9826  0562  306F               	movlw	111
  9827  0563  0086               	movwf	6
  9828  0564  3027               	movlw	39
  9829  0565  0087               	movwf	7
  9830  0566  3F40               	moviw [0]fsr1
  9831  0567  0141               	movlb	1	; select bank1
  9832  0568  00BA               	movwf	ftoa@fValue^(0+128)
  9833  0569  3F41               	moviw [1]fsr1
  9834  056A  00BB               	movwf	(ftoa@fValue+1)^(0+128)
  9835  056B  3F42               	moviw [2]fsr1
  9836  056C  00BC               	movwf	(ftoa@fValue+2)^(0+128)
  9837  056D  3F43               	moviw [3]fsr1
  9838  056E  00BD               	movwf	(ftoa@fValue+3)^(0+128)
  9839  056F  3003               	movlw	3
  9840  0570  00BE               	movwf	ftoa@width^(0+128)
  9841  0571  30E5               	movlw	(low (_str| (0+256)))& (0+255)
  9842  0572  01BF               	clrf	ftoa@prec^(0+128)
  9843  0573  0ABF               	incf	ftoa@prec^(0+128),f
  9844  0574  318A  221B  3184   	fcall	_ftoa
  9845                           
  9846                           ;menu.c: 340:  OLED_print_xy(0, 1, "\004");
  9847  0577  0140               	movlb	0	; select bank0
  9848  0578  30C4               	movlw	low ((STR_54+5)| (0+32768))
  9849  0579  01AF               	clrf	OLED_print_xy@row
  9850  057A  0AAF               	incf	OLED_print_xy@row,f
  9851  057B  00B0               	movwf	OLED_print_xy@s
  9852  057C  30B3               	movlw	high ((STR_54+5)| (0+32768))
  9853  057D  00B1               	movwf	OLED_print_xy@s+1
  9854  057E  3000               	movlw	0
  9855  057F  3197  2730  3184   	fcall	_OLED_print_xy
  9856  0582  30E5               	movlw	low _str
  9857                           
  9858                           ;menu.c: 341:  OLED_print_xy(1, 1, str);
  9859  0583  01AF               	clrf	OLED_print_xy@row
  9860  0584  0AAF               	incf	OLED_print_xy@row,f
  9861  0585  00B0               	movwf	OLED_print_xy@s
  9862  0586  3001               	movlw	high _str
  9863  0587  00B1               	movwf	OLED_print_xy@s+1
  9864  0588  3001               	movlw	1
  9865  0589  3197  2730  3184   	fcall	_OLED_print_xy
  9866  058C  3067               	movlw	low (STR_61| (0+32768))
  9867                           
  9868                           ;menu.c: 342:  OLED_print_xy(4, 1, " \003      ");
  9869  058D  01AF               	clrf	OLED_print_xy@row
  9870  058E  0AAF               	incf	OLED_print_xy@row,f
  9871  058F  00B0               	movwf	OLED_print_xy@s
  9872  0590  30B3               	movlw	high (STR_61| (0+32768))
  9873  0591  00B1               	movwf	OLED_print_xy@s+1
  9874  0592  3004               	movlw	4
  9875  0593  3197  2730  3184   	fcall	_OLED_print_xy
  9876                           
  9877                           ;menu.c: 343:  if (getPB() == PB_SHORT) {
  9878  0596  3197  275C  3184   	fcall	_getPB
  9879  0599  3A01               	xorlw	1
  9880  059A  1D03               	skipz
  9881  059B  3401               	retlw	1
  9882                           
  9883                           ;menu.c: 344:   storeNVM();
  9884  059C  2636               	fcall	_storeNVM
  9885                           
  9886                           ;menu.c: 345:   return 0;
  9887  059D  3400               	retlw	0
  9888  059E                     __end_of_setFudgeFactor:	
  9889                           ;menu.c: 347:  return 1;
  9890                           
  9891  059E                     __ptext10:	
  9892 ;; *************** function _setLensDia *****************
  9893 ;; Defined at:
  9894 ;;		line 246 in file "menu.c"
  9895 ;; Parameters:    Size  Location     Type
  9896 ;;		None
  9897 ;; Auto vars:     Size  Location     Type
  9898 ;;		None
  9899 ;; Return value:  Size  Location     Type
  9900 ;;                  1    wreg      unsigned char 
  9901 ;; Registers used:
  9902 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9903 ;; Tracked objects:
  9904 ;;		On entry : 3F/1
  9905 ;;		On exit  : 3F/0
  9906 ;;		Unchanged: 0/0
  9907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9909 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9910 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9911 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9912 ;;Total ram usage:        6 bytes
  9913 ;; Hardware stack levels used:    1
  9914 ;; Hardware stack levels required when called:    7
  9915 ;; This function calls:
  9916 ;;		_OLED_print_xy
  9917 ;;		___wmul
  9918 ;;		_ftoa
  9919 ;;		_getPB
  9920 ;;		_returnToPage
  9921 ;;		_spinInput
  9922 ;;		_storeNVM
  9923 ;; This function is called by:
  9924 ;;		_menu
  9925 ;; This function uses a non-reentrant model
  9926 ;;
  9927                           
  9928                           
  9929                           ;psect for function _setLensDia
  9930  059E                     _setLensDia:	
  9931                           
  9932                           ;menu.c: 248:  returnToPage(0);
  9933                           
  9934                           ;incstack = 0
  9935                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9936  059E  3000               	movlw	0
  9937  059F  3193  235B  3184   	fcall	_returnToPage
  9938                           
  9939                           ;menu.c: 249:  if (g_screenRefresh)
  9940  05A2  0140               	movlb	0	; select bank0
  9941  05A3  086B               	movf	_g_screenRefresh,w
  9942  05A4  1903               	btfsc	3,2
  9943  05A5  2DAF               	goto	l7996
  9944  05A6  30EC               	movlw	low (STR_34| (0+32768))
  9945                           
  9946                           ;menu.c: 250:   OLED_print_xy(0, 0, "Lens diam.  ");
  9947  05A7  01AF               	clrf	OLED_print_xy@row
  9948  05A8  00B0               	movwf	OLED_print_xy@s
  9949  05A9  30B2               	movlw	high (STR_34| (0+32768))
  9950  05AA  00B1               	movwf	OLED_print_xy@s+1
  9951  05AB  3000               	movlw	0
  9952  05AC  3197  2730  3184   	fcall	_OLED_print_xy
  9953  05AF                     l7996:	
  9954                           
  9955                           ;menu.c: 251:  spinInput(&data.heater[selectedChannel].lensDia, 1, 16, 0.5);
  9956  05AF  3089               	movlw	137
  9957  05B0  0141               	movlb	1	; select bank1
  9958  05B1  00B9               	movwf	spinInput@input^(0+128)
  9959  05B2  3027               	movlw	39
  9960  05B3  00BA               	movwf	(spinInput@input^(0+128)+1)
  9961  05B4  086E               	movf	_selectedChannel^(0+128),w
  9962  05B5  0140               	movlb	0	; select bank0
  9963  05B6  00AF               	movwf	___wmul@multiplier
  9964  05B7  301F               	movlw	31
  9965  05B8  01B0               	clrf	___wmul@multiplier+1
  9966  05B9  00B1               	movwf	___wmul@multiplicand
  9967  05BA  01B2               	clrf	___wmul@multiplicand+1
  9968  05BB  318A  2206  3184   	fcall	___wmul
  9969  05BE  082F               	movf	?___wmul,w
  9970  05BF  0141               	movlb	1	; select bank1
  9971  05C0  00E0               	movwf	??_setLensDia^(0+128)
  9972  05C1  0140               	movlb	0	; select bank0
  9973  05C2  0830               	movf	?___wmul+1,w
  9974  05C3  0141               	movlb	1	; select bank1
  9975  05C4  00E1               	movwf	(??_setLensDia^(0+128)+1)
  9976  05C5  0860               	movf	??_setLensDia^(0+128),w
  9977  05C6  07B9               	addwf	spinInput@input^(0+128),f
  9978  05C7  0861               	movf	(??_setLensDia^(0+128)+1),w
  9979  05C8  3DBA               	addwfc	(spinInput@input+1)^(0+128),f
  9980  05C9  303F               	movlw	63
  9981  05CA  00BE               	movwf	(spinInput@min+3)^(0+128)
  9982  05CB  3080               	movlw	128
  9983  05CC  00BD               	movwf	(spinInput@min+2)^(0+128)
  9984  05CD  3041               	movlw	65
  9985  05CE  01BC               	clrf	(spinInput@min+1)^(0+128)
  9986  05CF  01BB               	clrf	spinInput@min^(0+128)
  9987  05D0  00C2               	movwf	(spinInput@max+3)^(0+128)
  9988  05D1  3080               	movlw	128
  9989  05D2  00C1               	movwf	(spinInput@max+2)^(0+128)
  9990  05D3  303F               	movlw	63
  9991  05D4  01C0               	clrf	(spinInput@max+1)^(0+128)
  9992  05D5  01BF               	clrf	spinInput@max^(0+128)
  9993  05D6  00C6               	movwf	(spinInput@step+3)^(0+128)
  9994  05D7  3000               	movlw	0
  9995  05D8  01C5               	clrf	(spinInput@step+2)^(0+128)
  9996  05D9  01C4               	clrf	(spinInput@step+1)^(0+128)
  9997  05DA  01C3               	clrf	spinInput@step^(0+128)
  9998  05DB  3197  2774  3184   	fcall	_spinInput
  9999                           
 10000                           ;menu.c: 252:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
 10001  05DE  0141               	movlb	1	; select bank1
 10002  05DF  086E               	movf	_selectedChannel^(0+128),w
 10003  05E0  0140               	movlb	0	; select bank0
 10004  05E1  00AF               	movwf	___wmul@multiplier
 10005  05E2  301F               	movlw	31
 10006  05E3  01B0               	clrf	___wmul@multiplier+1
 10007  05E4  00B1               	movwf	___wmul@multiplicand
 10008  05E5  01B2               	clrf	___wmul@multiplicand+1
 10009  05E6  318A  2206  3184   	fcall	___wmul
 10010  05E9  3089               	movlw	137
 10011  05EA  0141               	movlb	1	; select bank1
 10012  05EB  00E0               	movwf	??_setLensDia^(0+128)
 10013  05EC  3027               	movlw	39
 10014  05ED  00E1               	movwf	(??_setLensDia^(0+128)+1)
 10015  05EE  0140               	movlb	0	; select bank0
 10016  05EF  082F               	movf	?___wmul,w
 10017  05F0  0141               	movlb	1	; select bank1
 10018  05F1  0760               	addwf	??_setLensDia^(0+128),w
 10019  05F2  0086               	movwf	6
 10020  05F3  0140               	movlb	0	; select bank0
 10021  05F4  0830               	movf	?___wmul+1,w
 10022  05F5  0141               	movlb	1	; select bank1
 10023  05F6  3D61               	addwfc	(??_setLensDia+1)^(0+128),w
 10024  05F7  0087               	movwf	7
 10025  05F8  3F40               	moviw [0]fsr1
 10026  05F9  00E2               	movwf	_setLensDia$2761^(0+128)
 10027  05FA  3F41               	moviw [1]fsr1
 10028  05FB  00E3               	movwf	(_setLensDia$2761+1)^(0+128)
 10029  05FC  3F42               	moviw [2]fsr1
 10030  05FD  00E4               	movwf	(_setLensDia$2761+2)^(0+128)
 10031  05FE  3F43               	moviw [3]fsr1
 10032  05FF  00E5               	movwf	(_setLensDia$2761+3)^(0+128)
 10033                           
 10034                           ;menu.c: 252:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
 10035  0600  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 10036  0601  0864               	movf	(_setLensDia$2761+2)^(0+128),w
 10037  0602  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 10038  0603  0863               	movf	(_setLensDia$2761+1)^(0+128),w
 10039  0604  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 10040  0605  0862               	movf	_setLensDia$2761^(0+128),w
 10041  0606  00BA               	movwf	ftoa@fValue^(0+128)
 10042  0607  3004               	movlw	4
 10043  0608  00BE               	movwf	ftoa@width^(0+128)
 10044  0609  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 10045  060A  01BF               	clrf	ftoa@prec^(0+128)
 10046  060B  0ABF               	incf	ftoa@prec^(0+128),f
 10047  060C  318A  221B  3184   	fcall	_ftoa
 10048                           
 10049                           ;menu.c: 253:  OLED_print_xy(0, 1, "\004");
 10050  060F  0140               	movlb	0	; select bank0
 10051  0610  30C4               	movlw	low ((STR_54+5)| (0+32768))
 10052  0611  01AF               	clrf	OLED_print_xy@row
 10053  0612  0AAF               	incf	OLED_print_xy@row,f
 10054  0613  00B0               	movwf	OLED_print_xy@s
 10055  0614  30B3               	movlw	high ((STR_54+5)| (0+32768))
 10056  0615  00B1               	movwf	OLED_print_xy@s+1
 10057  0616  3000               	movlw	0
 10058  0617  3197  2730  3184   	fcall	_OLED_print_xy
 10059  061A  30E5               	movlw	low _str
 10060                           
 10061                           ;menu.c: 254:  OLED_print_xy(1, 1, str);
 10062  061B  01AF               	clrf	OLED_print_xy@row
 10063  061C  0AAF               	incf	OLED_print_xy@row,f
 10064  061D  00B0               	movwf	OLED_print_xy@s
 10065  061E  3001               	movlw	high _str
 10066  061F  00B1               	movwf	OLED_print_xy@s+1
 10067  0620  3001               	movlw	1
 10068  0621  3197  2730  3184   	fcall	_OLED_print_xy
 10069  0624  3079               	movlw	low (STR_47| (0+32768))
 10070                           
 10071                           ;menu.c: 255:  OLED_print_xy(5, 1, " inch \003");
 10072  0625  01AF               	clrf	OLED_print_xy@row
 10073  0626  0AAF               	incf	OLED_print_xy@row,f
 10074  0627  00B0               	movwf	OLED_print_xy@s
 10075  0628  30B3               	movlw	high (STR_47| (0+32768))
 10076  0629  00B1               	movwf	OLED_print_xy@s+1
 10077  062A  3005               	movlw	5
 10078  062B  3197  2730  3184   	fcall	_OLED_print_xy
 10079                           
 10080                           ;menu.c: 256:  if (getPB() == PB_SHORT) {
 10081  062E  3197  275C  3184   	fcall	_getPB
 10082  0631  3A01               	xorlw	1
 10083  0632  1D03               	skipz
 10084  0633  3401               	retlw	1
 10085                           
 10086                           ;menu.c: 257:   storeNVM();
 10087  0634  2636               	fcall	_storeNVM
 10088                           
 10089                           ;menu.c: 258:   return 0;
 10090  0635  3400               	retlw	0
 10091  0636                     __end_of_setLensDia:	
 10092                           ;menu.c: 261:  return 1;
 10093                           
 10094  0636                     __ptext15:	
 10095 ;; *************** function _storeNVM *****************
 10096 ;; Defined at:
 10097 ;;		line 455 in file "system.c"
 10098 ;; Parameters:    Size  Location     Type
 10099 ;;		None
 10100 ;; Auto vars:     Size  Location     Type
 10101 ;;  buf            64    0[BANK1 ] unsigned short [32]
 10102 ;;  nvm            32    0[BANK2 ] struct .
 10103 ;;  n               1   19[BANK0 ] unsigned char 
 10104 ;; Return value:  Size  Location     Type
 10105 ;;                  1    wreg      unsigned char 
 10106 ;; Registers used:
 10107 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10108 ;; Tracked objects:
 10109 ;;		On entry : 3F/0
 10110 ;;		On exit  : 3F/0
 10111 ;;		Unchanged: 0/0
 10112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10114 ;;      Locals:         0       1      64      32       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10115 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10116 ;;      Totals:         0       3      64      32       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10117 ;;Total ram usage:       99 bytes
 10118 ;; Hardware stack levels used:    1
 10119 ;; Hardware stack levels required when called:    5
 10120 ;; This function calls:
 10121 ;;		_FLASH_EraseBlock
 10122 ;;		_FLASH_WriteBlock
 10123 ;; This function is called by:
 10124 ;;		_setLensDia
 10125 ;;		_setDPOffset
 10126 ;;		_setSkyTemp
 10127 ;;		_setFudgeFactor
 10128 ;; This function uses a non-reentrant model
 10129 ;;
 10130                           
 10131                           
 10132                           ;psect for function _storeNVM
 10133  0636                     _storeNVM:	
 10134                           
 10135                           ;system.c: 457:  uint8_t n;;system.c: 458:  t_nvmData nvm;;system.c: 459:  uint16_t buf[
      +                          32];;system.c: 461:  nvm.lensDia[0] = data.heater[0].lensDia;
 10136                           
 10137                           ;incstack = 0
 10138                           ; Regs used in _storeNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10139  0636  3089               	movlw	137
 10140  0637  0086               	movwf	6
 10141  0638  3027               	movlw	39
 10142  0639  0087               	movwf	7
 10143  063A  3F40               	moviw [0]fsr1
 10144  063B  0142               	movlb	2	; select bank2
 10145  063C  00A0               	movwf	storeNVM@nvm^(0+256)
 10146  063D  3F41               	moviw [1]fsr1
 10147  063E  00A1               	movwf	(storeNVM@nvm+1)^(0+256)
 10148  063F  3F42               	moviw [2]fsr1
 10149  0640  00A2               	movwf	(storeNVM@nvm+2)^(0+256)
 10150  0641  3F43               	moviw [3]fsr1
 10151  0642  00A3               	movwf	(storeNVM@nvm+3)^(0+256)
 10152                           
 10153                           ;system.c: 462:  nvm.lensDia[1] = data.heater[1].lensDia;
 10154  0643  30A8               	movlw	168
 10155  0644  0086               	movwf	6
 10156  0645  3F40               	moviw [0]fsr1
 10157  0646  00A4               	movwf	(storeNVM@nvm^(0+256)+4)
 10158  0647  3F41               	moviw [1]fsr1
 10159  0648  00A5               	movwf	((storeNVM@nvm+1)^(0+256)+4)
 10160  0649  3F42               	moviw [2]fsr1
 10161  064A  00A6               	movwf	((storeNVM@nvm+2)^(0+256)+4)
 10162  064B  3F43               	moviw [3]fsr1
 10163  064C  00A7               	movwf	((storeNVM@nvm+3)^(0+256)+4)
 10164                           
 10165                           ;system.c: 463:  nvm.lensDia[2] = data.heater[2].lensDia;
 10166  064D  30C7               	movlw	199
 10167  064E  0086               	movwf	6
 10168  064F  3F40               	moviw [0]fsr1
 10169  0650  00A8               	movwf	(storeNVM@nvm^(0+256)+8)
 10170  0651  3F41               	moviw [1]fsr1
 10171  0652  00A9               	movwf	((storeNVM@nvm+1)^(0+256)+8)
 10172  0653  3F42               	moviw [2]fsr1
 10173  0654  00AA               	movwf	((storeNVM@nvm+2)^(0+256)+8)
 10174  0655  3F43               	moviw [3]fsr1
 10175  0656  00AB               	movwf	((storeNVM@nvm+3)^(0+256)+8)
 10176                           
 10177                           ;system.c: 464:  nvm.lensDia[3] = data.heater[3].lensDia;
 10178  0657  30E6               	movlw	230
 10179  0658  0086               	movwf	6
 10180  0659  3F40               	moviw [0]fsr1
 10181  065A  00AC               	movwf	(storeNVM@nvm^(0+256)+12)
 10182  065B  3F41               	moviw [1]fsr1
 10183  065C  00AD               	movwf	((storeNVM@nvm+1)^(0+256)+12)
 10184  065D  3F42               	moviw [2]fsr1
 10185  065E  00AE               	movwf	((storeNVM@nvm+2)^(0+256)+12)
 10186  065F  3F43               	moviw [3]fsr1
 10187  0660  00AF               	movwf	((storeNVM@nvm+3)^(0+256)+12)
 10188                           
 10189                           ;system.c: 465:  nvm.dpOffset = data.dpOffset;
 10190  0661  304A               	movlw	74
 10191  0662  0086               	movwf	6
 10192  0663  315D               	addfsr 1,29
 10193  0664  3F40               	moviw [0]fsr1
 10194  0665  00B0               	movwf	(storeNVM@nvm^(0+256)+16)
 10195  0666  3F41               	moviw [1]fsr1
 10196  0667  00B1               	movwf	((storeNVM@nvm+1)^(0+256)+16)
 10197  0668  3F42               	moviw [2]fsr1
 10198  0669  00B2               	movwf	((storeNVM@nvm+2)^(0+256)+16)
 10199  066A  3F43               	moviw [3]fsr1
 10200  066B  00B3               	movwf	((storeNVM@nvm+3)^(0+256)+16)
 10201                           
 10202                           ;system.c: 466:  nvm.skyTemp = data.skyTemp;
 10203  066C  306B               	movlw	107
 10204  066D  0086               	movwf	6
 10205  066E  3027               	movlw	39
 10206  066F  0087               	movwf	7
 10207  0670  3F40               	moviw [0]fsr1
 10208  0671  00B4               	movwf	(storeNVM@nvm^(0+256)+20)
 10209  0672  3F41               	moviw [1]fsr1
 10210  0673  00B5               	movwf	((storeNVM@nvm+1)^(0+256)+20)
 10211  0674  3F42               	moviw [2]fsr1
 10212  0675  00B6               	movwf	((storeNVM@nvm+2)^(0+256)+20)
 10213  0676  3F43               	moviw [3]fsr1
 10214  0677  00B7               	movwf	((storeNVM@nvm+3)^(0+256)+20)
 10215                           
 10216                           ;system.c: 467:  nvm.fudgeFactor = data.fudgeFactor;
 10217  0678  306F               	movlw	111
 10218  0679  0086               	movwf	6
 10219  067A  3F40               	moviw [0]fsr1
 10220  067B  00B8               	movwf	(storeNVM@nvm^(0+256)+24)
 10221  067C  3F41               	moviw [1]fsr1
 10222  067D  00B9               	movwf	((storeNVM@nvm+1)^(0+256)+24)
 10223  067E  3F42               	moviw [2]fsr1
 10224  067F  00BA               	movwf	((storeNVM@nvm+2)^(0+256)+24)
 10225  0680  3F43               	moviw [3]fsr1
 10226  0681  00BB               	movwf	((storeNVM@nvm+3)^(0+256)+24)
 10227                           
 10228                           ;system.c: 469:  for(n = 0; n < 32; n++) {
 10229  0682  0140               	movlb	0	; select bank0
 10230  0683  01B3               	clrf	storeNVM@n
 10231  0684                     l5424:	
 10232                           
 10233                           ;system.c: 470:   buf[n] = (uint16_t)nvm.raw[n];
 10234  0684  0833               	movf	storeNVM@n,w
 10235  0685  3E20               	addlw	(low (storeNVM@nvm| (0+256)))& (0+255)
 10236  0686  0086               	movwf	6
 10237  0687  3001               	movlw	1	; select bank2/3
 10238  0688  0087               	movwf	7
 10239  0689  0801               	movf	1,w
 10240  068A  00B1               	movwf	??_storeNVM
 10241  068B  01B2               	clrf	??_storeNVM+1
 10242  068C  3533               	lslf	storeNVM@n,w
 10243  068D  3EA0               	addlw	(low (storeNVM@buf| 0))& (0+255)
 10244  068E  0086               	movwf	6
 10245  068F  0187               	clrf	7
 10246  0690  0831               	movf	??_storeNVM,w
 10247  0691  3FC0               	movwi [0]fsr1
 10248  0692  0832               	movf	??_storeNVM+1,w
 10249  0693  3FC1               	movwi [1]fsr1
 10250  0694  3020               	movlw	32
 10251                           
 10252                           ;system.c: 471:  }
 10253  0695  0AB3               	incf	storeNVM@n,f
 10254  0696  0233               	subwf	storeNVM@n,w
 10255  0697  1C03               	skipc
 10256  0698  2E84               	goto	l5424
 10257                           
 10258                           ;system.c: 473:  FLASH_EraseBlock(0x3f80);
 10259  0699  3080               	movlw	128
 10260  069A  00A4               	movwf	FLASH_EraseBlock@startAddr
 10261  069B  303F               	movlw	63
 10262  069C  00A5               	movwf	FLASH_EraseBlock@startAddr+1
 10263  069D  26A6  3184         	fcall	_FLASH_EraseBlock
 10264                           
 10265                           ;system.c: 474:  FLASH_WriteBlock(0x3f80, buf);
 10266  069F  3080               	movlw	128
 10267  06A0  00A7               	movwf	FLASH_WriteBlock@writeAddr
 10268  06A1  303F               	movlw	63
 10269  06A2  00A8               	movwf	FLASH_WriteBlock@writeAddr+1
 10270  06A3  30A0               	movlw	(low (storeNVM@buf| 0))& (0+255)
 10271  06A4  00A9               	movwf	FLASH_WriteBlock@flashWordArray
 10272  06A5  2EC5               	ljmp	l4710
 10273  06A6                     __end_of_storeNVM:	
 10274  06A6                     __ptext17:	
 10275 ;; *************** function _FLASH_EraseBlock *****************
 10276 ;; Defined at:
 10277 ;;		line 95 in file "memory.c"
 10278 ;; Parameters:    Size  Location     Type
 10279 ;;  startAddr       2    4[BANK0 ] unsigned short 
 10280 ;; Auto vars:     Size  Location     Type
 10281 ;;  GIEBitValue     1    6[BANK0 ] unsigned char 
 10282 ;; Return value:  Size  Location     Type
 10283 ;;                  1    wreg      void 
 10284 ;; Registers used:
 10285 ;;		wreg, status,2, status,0
 10286 ;; Tracked objects:
 10287 ;;		On entry : 3F/0
 10288 ;;		On exit  : 3F/0
 10289 ;;		Unchanged: 0/0
 10290 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10291 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10292 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10293 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10294 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10295 ;;Total ram usage:        3 bytes
 10296 ;; Hardware stack levels used:    1
 10297 ;; Hardware stack levels required when called:    3
 10298 ;; This function calls:
 10299 ;;		Nothing
 10300 ;; This function is called by:
 10301 ;;		_storeNVM
 10302 ;;		_FLASH_WriteBlock
 10303 ;; This function uses a non-reentrant model
 10304 ;;
 10305                           
 10306                           
 10307                           ;psect for function _FLASH_EraseBlock
 10308  06A6                     _FLASH_EraseBlock:	
 10309                           
 10310                           ;memory.c: 95: void FLASH_EraseBlock(uint16_t startAddr);memory.c: 96: {;memory.c: 97:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
 10311                           
 10312                           ;incstack = 0
 10313                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 10314  06A6  3000               	movlw	0
 10315  06A7  1B8B               	btfsc	11,7	;volatile
 10316  06A8  3001               	movlw	1
 10317  06A9  00A6               	movwf	FLASH_EraseBlock@GIEBitValue
 10318                           
 10319                           ;memory.c: 100:  INTCONbits.GIE = 0;
 10320  06AA  138B               	bcf	11,7	;volatile
 10321                           
 10322                           ;memory.c: 102:  NVMADRL = (startAddr & 0xFF);
 10323  06AB  0824               	movf	FLASH_EraseBlock@startAddr,w
 10324  06AC  0150               	movlb	16	; select bank16
 10325  06AD  009A               	movwf	26	;volatile
 10326                           
 10327                           ;memory.c: 104:  NVMADRH = ((startAddr & 0xFF00) >> 8);
 10328  06AE  0140               	movlb	0	; select bank0
 10329  06AF  0825               	movf	FLASH_EraseBlock@startAddr+1,w
 10330  06B0  0150               	movlb	16	; select bank16
 10331  06B1  009B               	movwf	27	;volatile
 10332                           
 10333                           ;memory.c: 107:  NVMCON1bits.NVMREGS = 0;
 10334  06B2  131E               	bcf	30,6	;volsfr
 10335                           
 10336                           ;memory.c: 108:  NVMCON1bits.FREE = 1;
 10337  06B3  161E               	bsf	30,4	;volsfr
 10338                           
 10339                           ;memory.c: 109:  NVMCON1bits.WREN = 1;
 10340  06B4  151E               	bsf	30,2	;volsfr
 10341                           
 10342                           ;memory.c: 112:  NVMCON2 = 0x55;
 10343  06B5  3055               	movlw	85
 10344  06B6  009F               	movwf	31	;volsfr
 10345                           
 10346                           ;memory.c: 113:  NVMCON2 = 0xAA;
 10347  06B7  30AA               	movlw	170
 10348  06B8  009F               	movwf	31	;volsfr
 10349                           
 10350                           ;memory.c: 114:  NVMCON1bits.WR = 1;
 10351  06B9  149E               	bsf	30,1	;volsfr
 10352                           
 10353                           ;memory.c: 115:  __nop();
 10354  06BA  0000               	nop
 10355                           
 10356                           ;memory.c: 116:  __nop();
 10357  06BB  0000               	nop
 10358                           
 10359                           ;memory.c: 118:  NVMCON1bits.WREN = 0;
 10360  06BC  0150               	movlb	16	; select bank16
 10361  06BD  111E               	bcf	30,2	;volsfr
 10362                           
 10363                           ;memory.c: 119:  INTCONbits.GIE = GIEBitValue;
 10364  06BE  0140               	movlb	0	; select bank0
 10365  06BF  0C26               	rrf	FLASH_EraseBlock@GIEBitValue,w
 10366  06C0  1C03               	skipc
 10367  06C1  138B               	bcf	11,7	;volatile
 10368  06C2  1803               	skipnc
 10369  06C3  178B               	bsf	11,7	;volatile
 10370  06C4  0008               	return
 10371  06C5                     __end_of_FLASH_EraseBlock:	
 10372  06C5                     __ptext16:	
 10373 ;; *************** function _FLASH_WriteBlock *****************
 10374 ;; Defined at:
 10375 ;;		line 43 in file "memory.c"
 10376 ;; Parameters:    Size  Location     Type
 10377 ;;  writeAddr       2    7[BANK0 ] unsigned short 
 10378 ;;  flashWordArr    1    9[BANK0 ] PTR unsigned short 
 10379 ;;		 -> storeNVM@buf(64), 
 10380 ;; Auto vars:     Size  Location     Type
 10381 ;;  blockStartAd    2   14[BANK0 ] unsigned short 
 10382 ;;  i               1   16[BANK0 ] unsigned char 
 10383 ;;  GIEBitValue     1   13[BANK0 ] unsigned char 
 10384 ;; Return value:  Size  Location     Type
 10385 ;;                  1    wreg      char 
 10386 ;; Registers used:
 10387 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10388 ;; Tracked objects:
 10389 ;;		On entry : 3F/0
 10390 ;;		On exit  : 3F/0
 10391 ;;		Unchanged: 0/0
 10392 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10393 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10394 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10395 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10396 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10397 ;;Total ram usage:       10 bytes
 10398 ;; Hardware stack levels used:    1
 10399 ;; Hardware stack levels required when called:    4
 10400 ;; This function calls:
 10401 ;;		_FLASH_EraseBlock
 10402 ;; This function is called by:
 10403 ;;		_storeNVM
 10404 ;; This function uses a non-reentrant model
 10405 ;;
 10406                           
 10407                           
 10408                           ;psect for function _FLASH_WriteBlock
 10409  06C5                     _FLASH_WriteBlock:	
 10410  06C5                     l4710:	
 10411                           ;incstack = 0
 10412                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 10413                           
 10414                           
 10415                           ;memory.c: 43: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t *flashWordArray);mem
      +                          ory.c: 44: {;memory.c: 45:  uint16_t blockStartAddr = (uint16_t) (writeAddr & ((0x4000 -
      +                           1) ^ (32 - 1)));
 10416  06C5  30FF               	movlw	255
 10417  06C6  00AE               	movwf	FLASH_WriteBlock@blockStartAddr
 10418  06C7  303F               	movlw	63
 10419  06C8  00AF               	movwf	FLASH_WriteBlock@blockStartAddr+1
 10420  06C9  301F               	movlw	31
 10421  06CA  06AE               	xorwf	FLASH_WriteBlock@blockStartAddr,f
 10422  06CB  0827               	movf	FLASH_WriteBlock@writeAddr,w
 10423  06CC  05AE               	andwf	FLASH_WriteBlock@blockStartAddr,f
 10424  06CD  0828               	movf	FLASH_WriteBlock@writeAddr+1,w
 10425  06CE  05AF               	andwf	FLASH_WriteBlock@blockStartAddr+1,f
 10426                           
 10427                           ;memory.c: 46:  uint8_t GIEBitValue = INTCONbits.GIE;
 10428  06CF  3000               	movlw	0
 10429  06D0  1B8B               	btfsc	11,7	;volatile
 10430  06D1  3001               	movlw	1
 10431  06D2  00AD               	movwf	FLASH_WriteBlock@GIEBitValue
 10432                           
 10433                           ;memory.c: 47:  uint8_t i;;memory.c: 51:  if (writeAddr != blockStartAddr) {
 10434  06D3  082F               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 10435  06D4  0628               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 10436  06D5  1D03               	skipz
 10437  06D6  2ED9               	goto	u4055
 10438  06D7  082E               	movf	FLASH_WriteBlock@blockStartAddr,w
 10439  06D8  0627               	xorwf	FLASH_WriteBlock@writeAddr,w
 10440  06D9                     u4055:	
 10441  06D9  1D03               	btfss	3,2
 10442  06DA  0008               	return
 10443                           
 10444                           ;memory.c: 55:  INTCONbits.GIE = 0;
 10445                           
 10446                           ;memory.c: 53:  }
 10447  06DB  138B               	bcf	11,7	;volatile
 10448                           
 10449                           ;memory.c: 58:  FLASH_EraseBlock(writeAddr);
 10450  06DC  0828               	movf	FLASH_WriteBlock@writeAddr+1,w
 10451  06DD  00A5               	movwf	FLASH_EraseBlock@startAddr+1
 10452  06DE  0827               	movf	FLASH_WriteBlock@writeAddr,w
 10453  06DF  00A4               	movwf	FLASH_EraseBlock@startAddr
 10454  06E0  26A6  3184         	fcall	_FLASH_EraseBlock
 10455                           
 10456                           ;memory.c: 61:  NVMCON1bits.NVMREGS = 0;
 10457  06E2  0150               	movlb	16	; select bank16
 10458  06E3  131E               	bcf	30,6	;volsfr
 10459                           
 10460                           ;memory.c: 62:  NVMCON1bits.WREN = 1;
 10461  06E4  151E               	bsf	30,2	;volsfr
 10462                           
 10463                           ;memory.c: 63:  NVMCON1bits.LWLO = 1;
 10464  06E5  169E               	bsf	30,5	;volsfr
 10465                           
 10466                           ;memory.c: 65:  for (i = 0; i < 32; i++) {
 10467  06E6  0140               	movlb	0	; select bank0
 10468  06E7  01B0               	clrf	FLASH_WriteBlock@i
 10469  06E8                     l4732:	
 10470                           
 10471                           ;memory.c: 67:   NVMADRL = (writeAddr & 0xFF);
 10472  06E8  0827               	movf	FLASH_WriteBlock@writeAddr,w
 10473  06E9  0150               	movlb	16	; select bank16
 10474  06EA  009A               	movwf	26	;volatile
 10475                           
 10476                           ;memory.c: 69:   NVMADRH = ((writeAddr & 0xFF00) >> 8);
 10477  06EB  0140               	movlb	0	; select bank0
 10478  06EC  0828               	movf	FLASH_WriteBlock@writeAddr+1,w
 10479  06ED  0150               	movlb	16	; select bank16
 10480  06EE  009B               	movwf	27	;volatile
 10481                           
 10482                           ;memory.c: 72:   NVMDATL = flashWordArray[i];
 10483  06EF  0140               	movlb	0	; select bank0
 10484  06F0  3530               	lslf	FLASH_WriteBlock@i,w
 10485  06F1  0729               	addwf	FLASH_WriteBlock@flashWordArray,w
 10486  06F2  00AA               	movwf	??_FLASH_WriteBlock
 10487  06F3  0086               	movwf	6
 10488  06F4  0187               	clrf	7
 10489  06F5  0801               	movf	1,w
 10490  06F6  0150               	movlb	16	; select bank16
 10491  06F7  009C               	movwf	28	;volatile
 10492                           
 10493                           ;memory.c: 73:   NVMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 10494  06F8  0140               	movlb	0	; select bank0
 10495  06F9  3530               	lslf	FLASH_WriteBlock@i,w
 10496  06FA  0729               	addwf	FLASH_WriteBlock@flashWordArray,w
 10497  06FB  00AA               	movwf	??_FLASH_WriteBlock
 10498  06FC  0086               	movwf	6
 10499  06FD  3F40               	moviw [0]fsr1
 10500  06FE  00AB               	movwf	??_FLASH_WriteBlock+1
 10501  06FF  3F41               	moviw [1]fsr1
 10502  0700  00AC               	movwf	??_FLASH_WriteBlock+2
 10503  0701  0150               	movlb	16	; select bank16
 10504  0702  009D               	movwf	29	;volatile
 10505                           
 10506                           ;memory.c: 75:   if (i == (32 - 1)) {
 10507  0703  301F               	movlw	31
 10508  0704  0140               	movlb	0	; select bank0
 10509  0705  0630               	xorwf	FLASH_WriteBlock@i,w
 10510  0706  1D03               	btfss	3,2
 10511  0707  2F0A               	goto	l4742
 10512                           
 10513                           ;memory.c: 77:    NVMCON1bits.LWLO = 0;
 10514  0708  0150               	movlb	16	; select bank16
 10515  0709  129E               	bcf	30,5	;volsfr
 10516  070A                     l4742:	
 10517                           
 10518                           ;memory.c: 80:   NVMCON2 = 0x55;
 10519  070A  3055               	movlw	85
 10520  070B  0150               	movlb	16	; select bank16
 10521  070C  009F               	movwf	31	;volsfr
 10522                           
 10523                           ;memory.c: 81:   NVMCON2 = 0xAA;
 10524  070D  30AA               	movlw	170
 10525  070E  009F               	movwf	31	;volsfr
 10526                           
 10527                           ;memory.c: 82:   NVMCON1bits.WR = 1;
 10528  070F  149E               	bsf	30,1	;volsfr
 10529                           
 10530                           ;memory.c: 83:   __nop();
 10531  0710  0000               	nop
 10532                           
 10533                           ;memory.c: 84:   __nop();
 10534  0711  0000               	nop
 10535                           
 10536                           ;memory.c: 86:   writeAddr++;
 10537  0712  0140               	movlb	0	; select bank0
 10538  0713  0AA7               	incf	FLASH_WriteBlock@writeAddr,f
 10539  0714  1903               	skipnz
 10540  0715  0AA8               	incf	FLASH_WriteBlock@writeAddr+1,f
 10541  0716  3020               	movlw	32
 10542                           
 10543                           ;memory.c: 87:  }
 10544  0717  0AB0               	incf	FLASH_WriteBlock@i,f
 10545  0718  0230               	subwf	FLASH_WriteBlock@i,w
 10546  0719  1C03               	skipc
 10547  071A  2EE8               	goto	l4732
 10548                           
 10549                           ;memory.c: 89:  NVMCON1bits.WREN = 0;
 10550  071B  0150               	movlb	16	; select bank16
 10551  071C  111E               	bcf	30,2	;volsfr
 10552                           
 10553                           ;memory.c: 90:  INTCONbits.GIE = GIEBitValue;
 10554  071D  0140               	movlb	0	; select bank0
 10555  071E  0C2D               	rrf	FLASH_WriteBlock@GIEBitValue,w
 10556  071F  1C03               	skipc
 10557  0720  138B               	bcf	11,7	;volatile
 10558  0721  1803               	skipnc
 10559  0722  178B               	bsf	11,7	;volatile
 10560  0723  0008               	return
 10561  0724                     __end_of_FLASH_WriteBlock:	
 10562                           
 10563                           	psect	text9
 10564  201D                     __ptext9:	
 10565 ;; *************** function _setup *****************
 10566 ;; Defined at:
 10567 ;;		line 267 in file "menu.c"
 10568 ;; Parameters:    Size  Location     Type
 10569 ;;		None
 10570 ;; Auto vars:     Size  Location     Type
 10571 ;;		None
 10572 ;; Return value:  Size  Location     Type
 10573 ;;                  1    wreg      unsigned char 
 10574 ;; Registers used:
 10575 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10576 ;; Tracked objects:
 10577 ;;		On entry : 3F/1
 10578 ;;		On exit  : 3F/2
 10579 ;;		Unchanged: 0/0
 10580 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10585 ;;Total ram usage:        0 bytes
 10586 ;; Hardware stack levels used:    1
 10587 ;; Hardware stack levels required when called:    7
 10588 ;; This function calls:
 10589 ;;		_OLED_print_xy
 10590 ;;		_ftoa
 10591 ;;		_paging
 10592 ;;		_returnToPage
 10593 ;; This function is called by:
 10594 ;;		_menu
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           
 10599                           ;psect for function _setup
 10600  201D                     _setup:	
 10601                           
 10602                           ;menu.c: 269:  static uint8_t page = 0;;menu.c: 271:  returnToPage(page);
 10603                           
 10604                           ;incstack = 0
 10605                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10606  201D  0142               	movlb	2	; select bank2
 10607  201E  086C               	movf	setup@page^(0+256),w
 10608  201F  3193  235B  31A0   	fcall	_returnToPage
 10609                           
 10610                           ;menu.c: 272:  if (g_screenRefresh) {
 10611  2022  0140               	movlb	0	; select bank0
 10612  2023  086B               	movf	_g_screenRefresh,w
 10613  2024  1903               	btfsc	3,2
 10614  2025  28B7               	goto	l8040
 10615  2026  30B7               	movlw	low (STR_48| (0+32768))
 10616                           
 10617                           ;menu.c: 273:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
 10618  2027  01AF               	clrf	OLED_print_xy@row
 10619  2028  00B0               	movwf	OLED_print_xy@s
 10620  2029  30B0               	movlw	high (STR_48| (0+32768))
 10621  202A  00B1               	movwf	OLED_print_xy@s+1
 10622  202B  3000               	movlw	0
 10623  202C  3197  2730  31A0   	fcall	_OLED_print_xy
 10624  202F  30CD               	movlw	low (STR_49| (0+32768))
 10625                           
 10626                           ;menu.c: 274:   OLED_print_xy(0, 1, "temp. ");
 10627  2030  01AF               	clrf	OLED_print_xy@row
 10628  2031  0AAF               	incf	OLED_print_xy@row,f
 10629  2032  00B0               	movwf	OLED_print_xy@s
 10630  2033  30B3               	movlw	high (STR_49| (0+32768))
 10631  2034  00B1               	movwf	OLED_print_xy@s+1
 10632  2035  3000               	movlw	0
 10633  2036  3197  2730  31A0   	fcall	_OLED_print_xy
 10634                           
 10635                           ;menu.c: 275:   ftoa(str, data.dpOffset, 4, 1);
 10636  2039  304A               	movlw	74
 10637  203A  0086               	movwf	6
 10638  203B  3027               	movlw	39
 10639  203C  0087               	movwf	7
 10640  203D  315D               	addfsr 1,29
 10641  203E  3F40               	moviw [0]fsr1
 10642  203F  0141               	movlb	1	; select bank1
 10643  2040  00BA               	movwf	ftoa@fValue^(0+128)
 10644  2041  3F41               	moviw [1]fsr1
 10645  2042  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 10646  2043  3F42               	moviw [2]fsr1
 10647  2044  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 10648  2045  3F43               	moviw [3]fsr1
 10649  2046  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 10650  2047  3004               	movlw	4
 10651  2048  00BE               	movwf	ftoa@width^(0+128)
 10652  2049  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 10653  204A  01BF               	clrf	ftoa@prec^(0+128)
 10654  204B  0ABF               	incf	ftoa@prec^(0+128),f
 10655  204C  318A  221B  31A0   	fcall	_ftoa
 10656                           
 10657                           ;menu.c: 276:   OLED_print_xy(6, 1, str);
 10658  204F  0140               	movlb	0	; select bank0
 10659  2050  30E5               	movlw	low _str
 10660  2051  01AF               	clrf	OLED_print_xy@row
 10661  2052  0AAF               	incf	OLED_print_xy@row,f
 10662  2053  00B0               	movwf	OLED_print_xy@s
 10663  2054  3001               	movlw	high _str
 10664  2055  00B1               	movwf	OLED_print_xy@s+1
 10665  2056  3006               	movlw	6
 10666  2057  3197  2730  31A0   	fcall	_OLED_print_xy
 10667  205A  30E9               	movlw	low (STR_50| (0+32768))
 10668                           
 10669                           ;menu.c: 277:   OLED_print_xy(10, 1, "\001 ");
 10670  205B  01AF               	clrf	OLED_print_xy@row
 10671  205C  0AAF               	incf	OLED_print_xy@row,f
 10672  205D  00B0               	movwf	OLED_print_xy@s
 10673  205E  30B3               	movlw	high (STR_50| (0+32768))
 10674  205F  00B1               	movwf	OLED_print_xy@s+1
 10675  2060  300A               	movlw	10
 10676  2061  3197  2730  31A0   	fcall	_OLED_print_xy
 10677                           
 10678                           ;menu.c: 278:   ftoa(str, data.skyTemp, 3, 0);
 10679  2064  306B               	movlw	107
 10680  2065  0086               	movwf	6
 10681  2066  3027               	movlw	39
 10682  2067  0087               	movwf	7
 10683  2068  3F40               	moviw [0]fsr1
 10684  2069  0141               	movlb	1	; select bank1
 10685  206A  00BA               	movwf	ftoa@fValue^(0+128)
 10686  206B  3F41               	moviw [1]fsr1
 10687  206C  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 10688  206D  3F42               	moviw [2]fsr1
 10689  206E  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 10690  206F  3F43               	moviw [3]fsr1
 10691  2070  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 10692  2071  3003               	movlw	3
 10693  2072  00BE               	movwf	ftoa@width^(0+128)
 10694  2073  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 10695  2074  01BF               	clrf	ftoa@prec^(0+128)
 10696  2075  318A  221B  31A0   	fcall	_ftoa
 10697                           
 10698                           ;menu.c: 279:   OLED_print_xy(12 + 0, 1, str);
 10699  2078  0140               	movlb	0	; select bank0
 10700  2079  30E5               	movlw	low _str
 10701  207A  01AF               	clrf	OLED_print_xy@row
 10702  207B  0AAF               	incf	OLED_print_xy@row,f
 10703  207C  00B0               	movwf	OLED_print_xy@s
 10704  207D  3001               	movlw	high _str
 10705  207E  00B1               	movwf	OLED_print_xy@s+1
 10706  207F  300C               	movlw	12
 10707  2080  3197  2730  31A0   	fcall	_OLED_print_xy
 10708  2083  3054               	movlw	low (STR_51| (0+32768))
 10709                           
 10710                           ;menu.c: 280:   OLED_print_xy(12 + 3, 1, "\001        ");
 10711  2084  01AF               	clrf	OLED_print_xy@row
 10712  2085  0AAF               	incf	OLED_print_xy@row,f
 10713  2086  00B0               	movwf	OLED_print_xy@s
 10714  2087  30B3               	movlw	high (STR_51| (0+32768))
 10715  2088  00B1               	movwf	OLED_print_xy@s+1
 10716  2089  300F               	movlw	15
 10717  208A  3197  2730  31A0   	fcall	_OLED_print_xy
 10718                           
 10719                           ;menu.c: 281:   ftoa(str, data.fudgeFactor, 3, 1);
 10720  208D  306F               	movlw	111
 10721  208E  0086               	movwf	6
 10722  208F  3027               	movlw	39
 10723  2090  0087               	movwf	7
 10724  2091  3F40               	moviw [0]fsr1
 10725  2092  0141               	movlb	1	; select bank1
 10726  2093  00BA               	movwf	ftoa@fValue^(0+128)
 10727  2094  3F41               	moviw [1]fsr1
 10728  2095  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 10729  2096  3F42               	moviw [2]fsr1
 10730  2097  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 10731  2098  3F43               	moviw [3]fsr1
 10732  2099  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 10733  209A  3003               	movlw	3
 10734  209B  00BE               	movwf	ftoa@width^(0+128)
 10735  209C  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 10736  209D  01BF               	clrf	ftoa@prec^(0+128)
 10737  209E  0ABF               	incf	ftoa@prec^(0+128),f
 10738  209F  318A  221B  31A0   	fcall	_ftoa
 10739                           
 10740                           ;menu.c: 282:   OLED_print_xy(2 * 12 + 0, 1, str);
 10741  20A2  0140               	movlb	0	; select bank0
 10742  20A3  30E5               	movlw	low _str
 10743  20A4  01AF               	clrf	OLED_print_xy@row
 10744  20A5  0AAF               	incf	OLED_print_xy@row,f
 10745  20A6  00B0               	movwf	OLED_print_xy@s
 10746  20A7  3001               	movlw	high _str
 10747  20A8  00B1               	movwf	OLED_print_xy@s+1
 10748  20A9  3018               	movlw	24
 10749  20AA  3197  2730  31A0   	fcall	_OLED_print_xy
 10750  20AD  306D               	movlw	low ((STR_28+3)| (0+32768))
 10751                           
 10752                           ;menu.c: 283:   OLED_print_xy(2 * 12 + 4, 1, "         ");
 10753  20AE  01AF               	clrf	OLED_print_xy@row
 10754  20AF  0AAF               	incf	OLED_print_xy@row,f
 10755  20B0  00B0               	movwf	OLED_print_xy@s
 10756  20B1  30B2               	movlw	high ((STR_28+3)| (0+32768))
 10757  20B2  00B1               	movwf	OLED_print_xy@s+1
 10758  20B3  301C               	movlw	28
 10759  20B4  3197  2730  31A0   	fcall	_OLED_print_xy
 10760  20B7                     l8040:	
 10761                           
 10762                           ;menu.c: 285:  page = paging(page, 3);
 10763  20B7  3003               	movlw	3
 10764  20B8  00AA               	movwf	paging@lastPage
 10765  20B9  0142               	movlb	2	; select bank2
 10766  20BA  086C               	movf	setup@page^(0+256),w
 10767  20BB  3193  23F5         	fcall	_paging
 10768  20BD  0142               	movlb	2	; select bank2
 10769  20BE  00EC               	movwf	setup@page^(0+256)
 10770                           
 10771                           ;menu.c: 286:  return page;
 10772  20BF  0008               	return
 10773  20C0                     __end_of_setup:	
 10774                           
 10775                           	psect	text11
 10776  102E                     __ptext11:	
 10777 ;; *************** function _setOutputPower *****************
 10778 ;; Defined at:
 10779 ;;		line 198 in file "menu.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;		None
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;  heater          2   42[BANK1 ] PTR struct .
 10784 ;;		 -> data.heater(124), data(166), 
 10785 ;; Return value:  Size  Location     Type
 10786 ;;                  1    wreg      unsigned char 
 10787 ;; Registers used:
 10788 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10789 ;; Tracked objects:
 10790 ;;		On entry : 3F/1
 10791 ;;		On exit  : 3E/0
 10792 ;;		Unchanged: 0/0
 10793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10795 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10796 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10797 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10798 ;;Total ram usage:        4 bytes
 10799 ;; Hardware stack levels used:    1
 10800 ;; Hardware stack levels required when called:    7
 10801 ;; This function calls:
 10802 ;;		_OLED_print_xy
 10803 ;;		___fleq
 10804 ;;		___flge
 10805 ;;		___wmul
 10806 ;;		_ftoa
 10807 ;;		_getPB
 10808 ;;		_itoa
 10809 ;;		_returnToPage
 10810 ;;		_spinInput
 10811 ;; This function is called by:
 10812 ;;		_menu
 10813 ;; This function uses a non-reentrant model
 10814 ;;
 10815                           
 10816                           
 10817                           ;psect for function _setOutputPower
 10818  102E                     _setOutputPower:	
 10819                           
 10820                           ;menu.c: 200:  t_heater *heater = &(data.heater)[selectedChannel];
 10821                           
 10822                           ;incstack = 0
 10823                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10824  102E  3074               	movlw	116
 10825  102F  00CA               	movwf	setOutputPower@heater^(0+128)
 10826  1030  3027               	movlw	39
 10827  1031  00CB               	movwf	(setOutputPower@heater^(0+128)+1)
 10828  1032  086E               	movf	_selectedChannel^(0+128),w
 10829  1033  0140               	movlb	0	; select bank0
 10830  1034  00AF               	movwf	___wmul@multiplier
 10831  1035  301F               	movlw	31
 10832  1036  01B0               	clrf	___wmul@multiplier+1
 10833  1037  00B1               	movwf	___wmul@multiplicand
 10834  1038  01B2               	clrf	___wmul@multiplicand+1
 10835  1039  318A  2206  3190   	fcall	___wmul
 10836  103C  082F               	movf	?___wmul,w
 10837  103D  0141               	movlb	1	; select bank1
 10838  103E  07CA               	addwf	setOutputPower@heater^(0+128),f
 10839  103F  0140               	movlb	0	; select bank0
 10840  1040  0830               	movf	?___wmul+1,w
 10841  1041  0141               	movlb	1	; select bank1
 10842  1042  3DCB               	addwfc	(setOutputPower@heater+1)^(0+128),f
 10843                           
 10844                           ;menu.c: 202:  returnToPage(0);
 10845  1043  3000               	movlw	0
 10846  1044  235B  3190         	fcall	_returnToPage
 10847                           
 10848                           ;menu.c: 204:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 10849  1046  0141               	movlb	1	; select bank1
 10850  1047  084A               	movf	setOutputPower@heater^(0+128),w
 10851  1048  0086               	movwf	6
 10852  1049  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 10853  104A  0087               	movwf	7
 10854  104B  315E               	addfsr 1,30
 10855  104C  0301               	decf	1,w
 10856  104D  1903               	btfsc	3,2
 10857  104E  2857               	goto	l7930
 10858  104F  084A               	movf	setOutputPower@heater^(0+128),w
 10859  1050  0086               	movwf	6
 10860  1051  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 10861  1052  0087               	movwf	7
 10862  1053  315E               	addfsr 1,30
 10863  1054  0801               	movf	1,w
 10864  1055  1D03               	btfss	3,2
 10865  1056  292F               	goto	l7964
 10866  1057                     l7930:	
 10867                           
 10868                           ;menu.c: 206:   if (g_screenRefresh)
 10869  1057  0140               	movlb	0	; select bank0
 10870  1058  086B               	movf	_g_screenRefresh,w
 10871  1059  1903               	btfsc	3,2
 10872  105A  2863               	goto	l7934
 10873  105B  3047               	movlw	low (STR_22| (0+32768))
 10874                           
 10875                           ;menu.c: 207:    OLED_print_xy(0, 0, "Output power");
 10876  105C  01AF               	clrf	OLED_print_xy@row
 10877  105D  00B0               	movwf	OLED_print_xy@s
 10878  105E  30B3               	movlw	high (STR_22| (0+32768))
 10879  105F  00B1               	movwf	OLED_print_xy@s+1
 10880  1060  3000               	movlw	0
 10881  1061  2730  3190         	fcall	_OLED_print_xy
 10882  1063                     l7934:	
 10883                           
 10884                           ;menu.c: 208:   spinInput(&heater->Pset, -0.25, heater->Pmax, 0.25);
 10885  1063  0141               	movlb	1	; select bank1
 10886  1064  084A               	movf	setOutputPower@heater^(0+128),w
 10887  1065  3E10               	addlw	16
 10888  1066  00B9               	movwf	spinInput@input^(0+128)
 10889  1067  3000               	movlw	0
 10890  1068  3D4B               	addwfc	(setOutputPower@heater+1)^(0+128),w
 10891  1069  00BA               	movwf	(spinInput@input+1)^(0+128)
 10892  106A  30BE               	movlw	190
 10893  106B  00BE               	movwf	(spinInput@min+3)^(0+128)
 10894  106C  3080               	movlw	128
 10895  106D  00BD               	movwf	(spinInput@min+2)^(0+128)
 10896  106E  01BC               	clrf	(spinInput@min+1)^(0+128)
 10897  106F  01BB               	clrf	spinInput@min^(0+128)
 10898  1070  084A               	movf	setOutputPower@heater^(0+128),w
 10899  1071  0086               	movwf	6
 10900  1072  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 10901  1073  0087               	movwf	7
 10902  1074  3144               	addfsr 1,4
 10903  1075  3F40               	moviw [0]fsr1
 10904  1076  00BF               	movwf	spinInput@max^(0+128)
 10905  1077  3F41               	moviw [1]fsr1
 10906  1078  00C0               	movwf	(spinInput@max+1)^(0+128)
 10907  1079  3F42               	moviw [2]fsr1
 10908  107A  00C1               	movwf	(spinInput@max+2)^(0+128)
 10909  107B  3F43               	moviw [3]fsr1
 10910  107C  00C2               	movwf	(spinInput@max+3)^(0+128)
 10911  107D  303E               	movlw	62
 10912  107E  00C6               	movwf	(spinInput@step+3)^(0+128)
 10913  107F  3080               	movlw	128
 10914  1080  00C5               	movwf	(spinInput@step+2)^(0+128)
 10915  1081  3000               	movlw	0
 10916  1082  01C4               	clrf	(spinInput@step+1)^(0+128)
 10917  1083  01C3               	clrf	spinInput@step^(0+128)
 10918  1084  2774  3190         	fcall	_spinInput
 10919                           
 10920                           ;menu.c: 209:   if (heater->Pset == 0) {
 10921  1086  0141               	movlb	1	; select bank1
 10922  1087  084A               	movf	setOutputPower@heater^(0+128),w
 10923  1088  0086               	movwf	6
 10924  1089  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 10925  108A  0087               	movwf	7
 10926  108B  3150               	addfsr 1,16
 10927  108C  3F40               	moviw [0]fsr1
 10928  108D  0140               	movlb	0	; select bank0
 10929  108E  00A4               	movwf	___fleq@ff1
 10930  108F  3F41               	moviw [1]fsr1
 10931  1090  00A5               	movwf	___fleq@ff1+1
 10932  1091  3F42               	moviw [2]fsr1
 10933  1092  00A6               	movwf	___fleq@ff1+2
 10934  1093  3F43               	moviw [3]fsr1
 10935  1094  00A7               	movwf	___fleq@ff1+3
 10936  1095  01A8               	clrf	___fleq@ff2
 10937  1096  01A9               	clrf	___fleq@ff2+1
 10938  1097  01AA               	clrf	___fleq@ff2+2
 10939  1098  01AB               	clrf	___fleq@ff2+3
 10940  1099  22F5  3190         	fcall	___fleq
 10941  109B  1C03               	btfss	3,0
 10942  109C  28C2               	goto	l7946
 10943                           
 10944                           ;menu.c: 210:    itoa(str, selectedChannel + 1, 1);
 10945  109D  0141               	movlb	1	; select bank1
 10946  109E  086E               	movf	_selectedChannel^(0+128),w
 10947  109F  3E01               	addlw	1
 10948  10A0  0140               	movlb	0	; select bank0
 10949  10A1  00A9               	movwf	itoa@value
 10950  10A2  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 10951  10A3  01AA               	clrf	itoa@width
 10952  10A4  0AAA               	incf	itoa@width,f
 10953  10A5  22C5  3190         	fcall	_itoa
 10954  10A7  30D4               	movlw	low (STR_37| (0+32768))
 10955                           
 10956                           ;menu.c: 211:    OLED_print_xy(0, 1, "\004Ch. ");
 10957  10A8  01AF               	clrf	OLED_print_xy@row
 10958  10A9  0AAF               	incf	OLED_print_xy@row,f
 10959  10AA  00B0               	movwf	OLED_print_xy@s
 10960  10AB  30B3               	movlw	high (STR_37| (0+32768))
 10961  10AC  00B1               	movwf	OLED_print_xy@s+1
 10962  10AD  3000               	movlw	0
 10963  10AE  2730  3190         	fcall	_OLED_print_xy
 10964  10B0  30E5               	movlw	low _str
 10965                           
 10966                           ;menu.c: 212:    OLED_print_xy(5, 1, str);
 10967  10B1  01AF               	clrf	OLED_print_xy@row
 10968  10B2  0AAF               	incf	OLED_print_xy@row,f
 10969  10B3  00B0               	movwf	OLED_print_xy@s
 10970  10B4  3001               	movlw	high _str
 10971  10B5  00B1               	movwf	OLED_print_xy@s+1
 10972  10B6  3005               	movlw	5
 10973  10B7  2730  3190         	fcall	_OLED_print_xy
 10974  10B9  30B1               	movlw	low (STR_38| (0+32768))
 10975                           
 10976                           ;menu.c: 213:    OLED_print_xy(6, 1, " off \003");
 10977  10BA  01AF               	clrf	OLED_print_xy@row
 10978  10BB  0AAF               	incf	OLED_print_xy@row,f
 10979  10BC  00B0               	movwf	OLED_print_xy@s
 10980  10BD  30B3               	movlw	high (STR_38| (0+32768))
 10981  10BE  00B1               	movwf	OLED_print_xy@s+1
 10982  10BF  3006               	movlw	6
 10983  10C0  2730               	fcall	_OLED_print_xy
 10984                           
 10985                           ;menu.c: 214:   } else if (heater->Pset < 0) {
 10986  10C1  3400               	retlw	0
 10987  10C2                     l7946:	
 10988  10C2  0141               	movlb	1	; select bank1
 10989  10C3  084A               	movf	setOutputPower@heater^(0+128),w
 10990  10C4  0086               	movwf	6
 10991  10C5  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 10992  10C6  0087               	movwf	7
 10993  10C7  3150               	addfsr 1,16
 10994  10C8  3F40               	moviw [0]fsr1
 10995  10C9  00AD               	movwf	___flge@ff1^(0+128)
 10996  10CA  3F41               	moviw [1]fsr1
 10997  10CB  00AE               	movwf	(___flge@ff1+1)^(0+128)
 10998  10CC  3F42               	moviw [2]fsr1
 10999  10CD  00AF               	movwf	(___flge@ff1+2)^(0+128)
 11000  10CE  3F43               	moviw [3]fsr1
 11001  10CF  00B0               	movwf	(___flge@ff1+3)^(0+128)
 11002  10D0  01B1               	clrf	___flge@ff2^(0+128)
 11003  10D1  01B2               	clrf	(___flge@ff2+1)^(0+128)
 11004  10D2  01B3               	clrf	(___flge@ff2+2)^(0+128)
 11005  10D3  01B4               	clrf	(___flge@ff2+3)^(0+128)
 11006  10D4  318E  26B1  3190   	fcall	___flge
 11007  10D7  1803               	btfsc	3,0
 11008  10D8  28FD               	goto	l7956
 11009                           
 11010                           ;menu.c: 215:    itoa(str, selectedChannel + 1, 1);
 11011  10D9  086E               	movf	_selectedChannel^(0+128),w
 11012  10DA  3E01               	addlw	1
 11013  10DB  0140               	movlb	0	; select bank0
 11014  10DC  00A9               	movwf	itoa@value
 11015  10DD  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 11016  10DE  01AA               	clrf	itoa@width
 11017  10DF  0AAA               	incf	itoa@width,f
 11018  10E0  22C5  3190         	fcall	_itoa
 11019  10E2  30D4               	movlw	low (STR_37| (0+32768))
 11020                           
 11021                           ;menu.c: 216:    OLED_print_xy(0, 1, "\004Ch. ");
 11022  10E3  01AF               	clrf	OLED_print_xy@row
 11023  10E4  0AAF               	incf	OLED_print_xy@row,f
 11024  10E5  00B0               	movwf	OLED_print_xy@s
 11025  10E6  30B3               	movlw	high (STR_37| (0+32768))
 11026  10E7  00B1               	movwf	OLED_print_xy@s+1
 11027  10E8  3000               	movlw	0
 11028  10E9  2730  3190         	fcall	_OLED_print_xy
 11029  10EB  30E5               	movlw	low _str
 11030                           
 11031                           ;menu.c: 217:    OLED_print_xy(5, 1, str);
 11032  10EC  01AF               	clrf	OLED_print_xy@row
 11033  10ED  0AAF               	incf	OLED_print_xy@row,f
 11034  10EE  00B0               	movwf	OLED_print_xy@s
 11035  10EF  3001               	movlw	high _str
 11036  10F0  00B1               	movwf	OLED_print_xy@s+1
 11037  10F1  3005               	movlw	5
 11038  10F2  2730  3190         	fcall	_OLED_print_xy
 11039  10F4  30B8               	movlw	low (STR_40| (0+32768))
 11040                           
 11041                           ;menu.c: 218:    OLED_print_xy(6, 1, " auto\003");
 11042  10F5  01AF               	clrf	OLED_print_xy@row
 11043  10F6  0AAF               	incf	OLED_print_xy@row,f
 11044  10F7  00B0               	movwf	OLED_print_xy@s
 11045  10F8  30B3               	movlw	high (STR_40| (0+32768))
 11046  10F9  00B1               	movwf	OLED_print_xy@s+1
 11047  10FA  3006               	movlw	6
 11048  10FB  2730               	fcall	_OLED_print_xy
 11049                           
 11050                           ;menu.c: 219:   } else {
 11051  10FC  3400               	retlw	0
 11052  10FD                     l7956:	
 11053                           
 11054                           ;menu.c: 220:    OLED_print_xy(0, 1, "\004");
 11055  10FD  0140               	movlb	0	; select bank0
 11056  10FE  30C4               	movlw	low ((STR_54+5)| (0+32768))
 11057  10FF  01AF               	clrf	OLED_print_xy@row
 11058  1100  0AAF               	incf	OLED_print_xy@row,f
 11059  1101  00B0               	movwf	OLED_print_xy@s
 11060  1102  30B3               	movlw	high ((STR_54+5)| (0+32768))
 11061  1103  00B1               	movwf	OLED_print_xy@s+1
 11062  1104  3000               	movlw	0
 11063  1105  2730               	fcall	_OLED_print_xy
 11064                           
 11065                           ;menu.c: 221:    ftoa(str, heater->Pset, 4, 1);
 11066  1106  0141               	movlb	1	; select bank1
 11067  1107  084A               	movf	setOutputPower@heater^(0+128),w
 11068  1108  0086               	movwf	6
 11069  1109  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 11070  110A  0087               	movwf	7
 11071  110B  3150               	addfsr 1,16
 11072  110C  3F40               	moviw [0]fsr1
 11073  110D  00BA               	movwf	ftoa@fValue^(0+128)
 11074  110E  3F41               	moviw [1]fsr1
 11075  110F  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 11076  1110  3F42               	moviw [2]fsr1
 11077  1111  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 11078  1112  3F43               	moviw [3]fsr1
 11079  1113  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 11080  1114  3004               	movlw	4
 11081  1115  00BE               	movwf	ftoa@width^(0+128)
 11082  1116  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 11083  1117  01BF               	clrf	ftoa@prec^(0+128)
 11084  1118  0ABF               	incf	ftoa@prec^(0+128),f
 11085  1119  318A  221B  3190   	fcall	_ftoa
 11086                           
 11087                           ;menu.c: 222:    OLED_print_xy(1, 1, str);
 11088  111C  0140               	movlb	0	; select bank0
 11089  111D  30E5               	movlw	low _str
 11090  111E  01AF               	clrf	OLED_print_xy@row
 11091  111F  0AAF               	incf	OLED_print_xy@row,f
 11092  1120  00B0               	movwf	OLED_print_xy@s
 11093  1121  3001               	movlw	high _str
 11094  1122  00B1               	movwf	OLED_print_xy@s+1
 11095  1123  3001               	movlw	1
 11096  1124  2730  3190         	fcall	_OLED_print_xy
 11097  1126  3081               	movlw	low (STR_42| (0+32768))
 11098                           
 11099                           ;menu.c: 223:    OLED_print_xy(5, 1, "W man.\003");
 11100  1127  01AF               	clrf	OLED_print_xy@row
 11101  1128  0AAF               	incf	OLED_print_xy@row,f
 11102  1129  00B0               	movwf	OLED_print_xy@s
 11103  112A  30B3               	movlw	high (STR_42| (0+32768))
 11104  112B  00B1               	movwf	OLED_print_xy@s+1
 11105  112C  3005               	movlw	5
 11106  112D  2730               	fcall	_OLED_print_xy
 11107  112E  3400               	retlw	0
 11108  112F                     l7964:	
 11109  112F  084A               	movf	setOutputPower@heater^(0+128),w
 11110  1130  0086               	movwf	6
 11111  1131  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 11112  1132  0087               	movwf	7
 11113  1133  3004               	movlw	4
 11114  1134  315E               	addfsr 1,30
 11115  1135  0601               	xorwf	1,w
 11116  1136  1903               	btfsc	3,2
 11117  1137  2941               	goto	l7968
 11118  1138  084A               	movf	setOutputPower@heater^(0+128),w
 11119  1139  0086               	movwf	6
 11120  113A  084B               	movf	(setOutputPower@heater+1)^(0+128),w
 11121  113B  0087               	movwf	7
 11122  113C  3003               	movlw	3
 11123  113D  315E               	addfsr 1,30
 11124  113E  0601               	xorwf	1,w
 11125  113F  1D03               	btfss	3,2
 11126  1140  3401               	retlw	1
 11127  1141                     l7968:	
 11128                           
 11129                           ;menu.c: 228:   if (g_screenRefresh) {
 11130  1141  0140               	movlb	0	; select bank0
 11131  1142  086B               	movf	_g_screenRefresh,w
 11132  1143  1903               	btfsc	3,2
 11133  1144  2956               	goto	l7972
 11134  1145  30F9               	movlw	low (STR_43| (0+32768))
 11135                           
 11136                           ;menu.c: 229:    OLED_print_xy(0, 0, "Hold button ");
 11137  1146  01AF               	clrf	OLED_print_xy@row
 11138  1147  00B0               	movwf	OLED_print_xy@s
 11139  1148  30B2               	movlw	high (STR_43| (0+32768))
 11140  1149  00B1               	movwf	OLED_print_xy@s+1
 11141  114A  3000               	movlw	0
 11142  114B  2730  3190         	fcall	_OLED_print_xy
 11143  114D  302D               	movlw	low (STR_44| (0+32768))
 11144                           
 11145                           ;menu.c: 230:    OLED_print_xy(0, 1, "to re-enable");
 11146  114E  01AF               	clrf	OLED_print_xy@row
 11147  114F  0AAF               	incf	OLED_print_xy@row,f
 11148  1150  00B0               	movwf	OLED_print_xy@s
 11149  1151  30B3               	movlw	high (STR_44| (0+32768))
 11150  1152  00B1               	movwf	OLED_print_xy@s+1
 11151  1153  3000               	movlw	0
 11152  1154  2730  3190         	fcall	_OLED_print_xy
 11153  1156                     l7972:	
 11154                           
 11155                           ;menu.c: 232:   if (getPB() == PB_LONG)
 11156  1156  275C  3190         	fcall	_getPB
 11157  1158  3A02               	xorlw	2
 11158  1159  1D03               	skipz
 11159  115A  3400               	retlw	0
 11160                           
 11161                           ;menu.c: 233:    heater->status = CH_UNCHECKED;
 11162  115B  0141               	movlb	1	; select bank1
 11163  115C  084A               	movf	setOutputPower@heater^(0+128),w
 11164  115D  3E1E               	addlw	30
 11165  115E  00C8               	movwf	??_setOutputPower^(0+128)
 11166  115F  3000               	movlw	0
 11167  1160  3D4B               	addwfc	(setOutputPower@heater+1)^(0+128),w
 11168  1161  00C9               	movwf	(??_setOutputPower+1)^(0+128)
 11169  1162  0848               	movf	??_setOutputPower^(0+128),w
 11170  1163  0086               	movwf	6
 11171  1164  0849               	movf	(??_setOutputPower+1)^(0+128),w
 11172  1165  0087               	movwf	7
 11173  1166  3005               	movlw	5
 11174  1167  0081               	movwf	1
 11175                           
 11176                           ;menu.c: 234:   return 0;
 11177  1168  3400               	retlw	0
 11178  1169                     __end_of_setOutputPower:	
 11179                           ;menu.c: 238:   return 1;
 11180                           
 11181  1169                     __ptext12:	
 11182 ;; *************** function _channelSetup *****************
 11183 ;; Defined at:
 11184 ;;		line 143 in file "menu.c"
 11185 ;; Parameters:    Size  Location     Type
 11186 ;;		None
 11187 ;; Auto vars:     Size  Location     Type
 11188 ;;  heater          2   39[BANK1 ] PTR struct .
 11189 ;;		 -> data.heater(124), data(166), 
 11190 ;; Return value:  Size  Location     Type
 11191 ;;                  1    wreg      unsigned char 
 11192 ;; Registers used:
 11193 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11194 ;; Tracked objects:
 11195 ;;		On entry : 3F/1
 11196 ;;		On exit  : 3F/2
 11197 ;;		Unchanged: 0/0
 11198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11199 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11200 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11201 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11202 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11203 ;;Total ram usage:        2 bytes
 11204 ;; Hardware stack levels used:    1
 11205 ;; Hardware stack levels required when called:    7
 11206 ;; This function calls:
 11207 ;;		_OLED_print_xy
 11208 ;;		___fleq
 11209 ;;		___flge
 11210 ;;		___wmul
 11211 ;;		_ftoa
 11212 ;;		_itoa
 11213 ;;		_paging
 11214 ;;		_returnToPage
 11215 ;; This function is called by:
 11216 ;;		_menu
 11217 ;; This function uses a non-reentrant model
 11218 ;;
 11219                           
 11220                           
 11221                           ;psect for function _channelSetup
 11222  1169                     _channelSetup:	
 11223                           
 11224                           ;menu.c: 145:  static uint8_t page = 0;;menu.c: 146:  t_heater *heater = &(data.heater)[
      +                          selectedChannel];
 11225                           
 11226                           ;incstack = 0
 11227                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11228  1169  3074               	movlw	116
 11229  116A  00C7               	movwf	channelSetup@heater^(0+128)
 11230  116B  3027               	movlw	39
 11231  116C  00C8               	movwf	(channelSetup@heater^(0+128)+1)
 11232  116D  086E               	movf	_selectedChannel^(0+128),w
 11233  116E  0140               	movlb	0	; select bank0
 11234  116F  00AF               	movwf	___wmul@multiplier
 11235  1170  301F               	movlw	31
 11236  1171  01B0               	clrf	___wmul@multiplier+1
 11237  1172  00B1               	movwf	___wmul@multiplicand
 11238  1173  01B2               	clrf	___wmul@multiplicand+1
 11239  1174  318A  2206  3190   	fcall	___wmul
 11240  1177  082F               	movf	?___wmul,w
 11241  1178  0141               	movlb	1	; select bank1
 11242  1179  07C7               	addwf	channelSetup@heater^(0+128),f
 11243  117A  0140               	movlb	0	; select bank0
 11244  117B  0830               	movf	?___wmul+1,w
 11245  117C  0141               	movlb	1	; select bank1
 11246  117D  3DC8               	addwfc	(channelSetup@heater+1)^(0+128),f
 11247                           
 11248                           ;menu.c: 148:  returnToPage(page);
 11249  117E  0142               	movlb	2	; select bank2
 11250  117F  086D               	movf	channelSetup@page^(0+256),w
 11251  1180  235B  3190         	fcall	_returnToPage
 11252                           
 11253                           ;menu.c: 150:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 11254  1182  0141               	movlb	1	; select bank1
 11255  1183  0847               	movf	channelSetup@heater^(0+128),w
 11256  1184  0086               	movwf	6
 11257  1185  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11258  1186  0087               	movwf	7
 11259  1187  315E               	addfsr 1,30
 11260  1188  0301               	decf	1,w
 11261  1189  1903               	btfsc	3,2
 11262  118A  2993               	goto	l7866
 11263  118B  0847               	movf	channelSetup@heater^(0+128),w
 11264  118C  0086               	movwf	6
 11265  118D  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11266  118E  0087               	movwf	7
 11267  118F  315E               	addfsr 1,30
 11268  1190  0801               	movf	1,w
 11269  1191  1D03               	btfss	3,2
 11270  1192  2A38               	goto	l7894
 11271  1193                     l7866:	
 11272                           
 11273                           ;menu.c: 151:   OLED_print_xy(0, 0, "Output power");
 11274  1193  0140               	movlb	0	; select bank0
 11275  1194  3047               	movlw	low (STR_22| (0+32768))
 11276  1195  01AF               	clrf	OLED_print_xy@row
 11277  1196  00B0               	movwf	OLED_print_xy@s
 11278  1197  30B3               	movlw	high (STR_22| (0+32768))
 11279  1198  00B1               	movwf	OLED_print_xy@s+1
 11280  1199  3000               	movlw	0
 11281  119A  2730  3190         	fcall	_OLED_print_xy
 11282                           
 11283                           ;menu.c: 152:   if (heater->Pset == 0) {
 11284  119C  0141               	movlb	1	; select bank1
 11285  119D  0847               	movf	channelSetup@heater^(0+128),w
 11286  119E  0086               	movwf	6
 11287  119F  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11288  11A0  0087               	movwf	7
 11289  11A1  3150               	addfsr 1,16
 11290  11A2  3F40               	moviw [0]fsr1
 11291  11A3  0140               	movlb	0	; select bank0
 11292  11A4  00A4               	movwf	___fleq@ff1
 11293  11A5  3F41               	moviw [1]fsr1
 11294  11A6  00A5               	movwf	___fleq@ff1+1
 11295  11A7  3F42               	moviw [2]fsr1
 11296  11A8  00A6               	movwf	___fleq@ff1+2
 11297  11A9  3F43               	moviw [3]fsr1
 11298  11AA  00A7               	movwf	___fleq@ff1+3
 11299  11AB  01A8               	clrf	___fleq@ff2
 11300  11AC  01A9               	clrf	___fleq@ff2+1
 11301  11AD  01AA               	clrf	___fleq@ff2+2
 11302  11AE  01AB               	clrf	___fleq@ff2+3
 11303  11AF  22F5  3190         	fcall	___fleq
 11304  11B1  1C03               	btfss	3,0
 11305  11B2  29D5               	goto	l7878
 11306  11B3  30D5               	movlw	low ((STR_37+1)| (0+32768))
 11307                           
 11308                           ;menu.c: 153:    OLED_print_xy(0, 1, "Ch. ");
 11309  11B4  01AF               	clrf	OLED_print_xy@row
 11310  11B5  0AAF               	incf	OLED_print_xy@row,f
 11311  11B6  00B0               	movwf	OLED_print_xy@s
 11312  11B7  30B3               	movlw	high ((STR_37+1)| (0+32768))
 11313  11B8  00B1               	movwf	OLED_print_xy@s+1
 11314  11B9  3000               	movlw	0
 11315  11BA  2730  3190         	fcall	_OLED_print_xy
 11316                           
 11317                           ;menu.c: 154:    itoa(str, selectedChannel + 1, 1);
 11318  11BC  0141               	movlb	1	; select bank1
 11319  11BD  086E               	movf	_selectedChannel^(0+128),w
 11320  11BE  3E01               	addlw	1
 11321  11BF  0140               	movlb	0	; select bank0
 11322  11C0  00A9               	movwf	itoa@value
 11323  11C1  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 11324  11C2  01AA               	clrf	itoa@width
 11325  11C3  0AAA               	incf	itoa@width,f
 11326  11C4  22C5  3190         	fcall	_itoa
 11327  11C6  30E5               	movlw	low _str
 11328                           
 11329                           ;menu.c: 155:    OLED_print_xy(4, 1, str);
 11330  11C7  01AF               	clrf	OLED_print_xy@row
 11331  11C8  0AAF               	incf	OLED_print_xy@row,f
 11332  11C9  00B0               	movwf	OLED_print_xy@s
 11333  11CA  3001               	movlw	high _str
 11334  11CB  00B1               	movwf	OLED_print_xy@s+1
 11335  11CC  3004               	movlw	4
 11336  11CD  2730  3190         	fcall	_OLED_print_xy
 11337  11CF  3091               	movlw	low (STR_24| (0+32768))
 11338                           
 11339                           ;menu.c: 156:    OLED_print_xy(5, 1, " off   ");
 11340  11D0  01AF               	clrf	OLED_print_xy@row
 11341  11D1  0AAF               	incf	OLED_print_xy@row,f
 11342  11D2  00B0               	movwf	OLED_print_xy@s
 11343  11D3  30B3               	movlw	high (STR_24| (0+32768))
 11344  11D4  2A0E               	goto	L7
 11345  11D5                     l7878:	
 11346                           ;menu.c: 157:   } else if (heater->Pset < 0) {
 11347                           
 11348  11D5  0141               	movlb	1	; select bank1
 11349  11D6  0847               	movf	channelSetup@heater^(0+128),w
 11350  11D7  0086               	movwf	6
 11351  11D8  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11352  11D9  0087               	movwf	7
 11353  11DA  3150               	addfsr 1,16
 11354  11DB  3F40               	moviw [0]fsr1
 11355  11DC  00AD               	movwf	___flge@ff1^(0+128)
 11356  11DD  3F41               	moviw [1]fsr1
 11357  11DE  00AE               	movwf	(___flge@ff1+1)^(0+128)
 11358  11DF  3F42               	moviw [2]fsr1
 11359  11E0  00AF               	movwf	(___flge@ff1+2)^(0+128)
 11360  11E1  3F43               	moviw [3]fsr1
 11361  11E2  00B0               	movwf	(___flge@ff1+3)^(0+128)
 11362  11E3  01B1               	clrf	___flge@ff2^(0+128)
 11363  11E4  01B2               	clrf	(___flge@ff2+1)^(0+128)
 11364  11E5  01B3               	clrf	(___flge@ff2+2)^(0+128)
 11365  11E6  01B4               	clrf	(___flge@ff2+3)^(0+128)
 11366  11E7  318E  26B1  3190   	fcall	___flge
 11367  11EA  1803               	btfsc	3,0
 11368  11EB  2A11               	goto	l7888
 11369                           
 11370                           ;menu.c: 158:    OLED_print_xy(0, 1, "Ch. ");
 11371  11EC  0140               	movlb	0	; select bank0
 11372  11ED  30D5               	movlw	low ((STR_37+1)| (0+32768))
 11373  11EE  01AF               	clrf	OLED_print_xy@row
 11374  11EF  0AAF               	incf	OLED_print_xy@row,f
 11375  11F0  00B0               	movwf	OLED_print_xy@s
 11376  11F1  30B3               	movlw	high ((STR_37+1)| (0+32768))
 11377  11F2  00B1               	movwf	OLED_print_xy@s+1
 11378  11F3  3000               	movlw	0
 11379  11F4  2730  3190         	fcall	_OLED_print_xy
 11380                           
 11381                           ;menu.c: 159:    itoa(str, selectedChannel + 1, 1);
 11382  11F6  0141               	movlb	1	; select bank1
 11383  11F7  086E               	movf	_selectedChannel^(0+128),w
 11384  11F8  3E01               	addlw	1
 11385  11F9  0140               	movlb	0	; select bank0
 11386  11FA  00A9               	movwf	itoa@value
 11387  11FB  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 11388  11FC  01AA               	clrf	itoa@width
 11389  11FD  0AAA               	incf	itoa@width,f
 11390  11FE  22C5  3190         	fcall	_itoa
 11391  1200  30E5               	movlw	low _str
 11392                           
 11393                           ;menu.c: 160:    OLED_print_xy(4, 1, str);
 11394  1201  01AF               	clrf	OLED_print_xy@row
 11395  1202  0AAF               	incf	OLED_print_xy@row,f
 11396  1203  00B0               	movwf	OLED_print_xy@s
 11397  1204  3001               	movlw	high _str
 11398  1205  00B1               	movwf	OLED_print_xy@s+1
 11399  1206  3004               	movlw	4
 11400  1207  2730  3190         	fcall	_OLED_print_xy
 11401  1209  30A1               	movlw	low (STR_26| (0+32768))
 11402                           
 11403                           ;menu.c: 161:    OLED_print_xy(5, 1, " auto  ");
 11404  120A  01AF               	clrf	OLED_print_xy@row
 11405  120B  0AAF               	incf	OLED_print_xy@row,f
 11406  120C  00B0               	movwf	OLED_print_xy@s
 11407  120D  30B3               	movlw	high (STR_26| (0+32768))
 11408  120E                     L7:	
 11409  120E  00B1               	movwf	OLED_print_xy@s+1
 11410  120F  3005               	movlw	5
 11411  1210  2A8A               	goto	L6
 11412  1211                     l7888:	
 11413                           ;menu.c: 162:   } else {
 11414                           
 11415                           
 11416                           ;menu.c: 163:    ftoa(str, heater->Pset, 4, 1);
 11417  1211  0847               	movf	channelSetup@heater^(0+128),w
 11418  1212  0086               	movwf	6
 11419  1213  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11420  1214  0087               	movwf	7
 11421  1215  3150               	addfsr 1,16
 11422  1216  3F40               	moviw [0]fsr1
 11423  1217  00BA               	movwf	ftoa@fValue^(0+128)
 11424  1218  3F41               	moviw [1]fsr1
 11425  1219  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 11426  121A  3F42               	moviw [2]fsr1
 11427  121B  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 11428  121C  3F43               	moviw [3]fsr1
 11429  121D  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 11430  121E  3004               	movlw	4
 11431  121F  00BE               	movwf	ftoa@width^(0+128)
 11432  1220  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 11433  1221  01BF               	clrf	ftoa@prec^(0+128)
 11434  1222  0ABF               	incf	ftoa@prec^(0+128),f
 11435  1223  318A  221B  3190   	fcall	_ftoa
 11436                           
 11437                           ;menu.c: 164:    OLED_print_xy(0, 1, str);
 11438  1226  0140               	movlb	0	; select bank0
 11439  1227  30E5               	movlw	low _str
 11440  1228  01AF               	clrf	OLED_print_xy@row
 11441  1229  0AAF               	incf	OLED_print_xy@row,f
 11442  122A  00B0               	movwf	OLED_print_xy@s
 11443  122B  3001               	movlw	high _str
 11444  122C  00B1               	movwf	OLED_print_xy@s+1
 11445  122D  3000               	movlw	0
 11446  122E  2730  3190         	fcall	_OLED_print_xy
 11447  1230  3070               	movlw	low (STR_17| (0+32768))
 11448                           
 11449                           ;menu.c: 165:    OLED_print_xy(4, 1, "W manual");
 11450  1231  01AF               	clrf	OLED_print_xy@row
 11451  1232  0AAF               	incf	OLED_print_xy@row,f
 11452  1233  00B0               	movwf	OLED_print_xy@s
 11453  1234  30B3               	movlw	high (STR_17| (0+32768))
 11454  1235  00B1               	movwf	OLED_print_xy@s+1
 11455  1236  3004               	movlw	4
 11456  1237  2A8A               	goto	L6
 11457  1238                     l7894:	
 11458  1238  0847               	movf	channelSetup@heater^(0+128),w
 11459  1239  0086               	movwf	6
 11460  123A  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11461  123B  0087               	movwf	7
 11462  123C  3002               	movlw	2
 11463  123D  315E               	addfsr 1,30
 11464  123E  0601               	xorwf	1,w
 11465  123F  1D03               	btfss	3,2
 11466  1240  2A50               	goto	l7898
 11467                           
 11468                           ;menu.c: 170:   OLED_print_xy(0, 0, "Not         ");
 11469  1241  0140               	movlb	0	; select bank0
 11470  1242  306A               	movlw	low (STR_28| (0+32768))
 11471  1243  01AF               	clrf	OLED_print_xy@row
 11472  1244  00B0               	movwf	OLED_print_xy@s
 11473  1245  30B2               	movlw	high (STR_28| (0+32768))
 11474  1246  00B1               	movwf	OLED_print_xy@s+1
 11475  1247  3000               	movlw	0
 11476  1248  2730  3190         	fcall	_OLED_print_xy
 11477  124A  30D2               	movlw	low (STR_29| (0+32768))
 11478                           
 11479                           ;menu.c: 171:   OLED_print_xy(0, 1, "connected   ");
 11480  124B  01AF               	clrf	OLED_print_xy@row
 11481  124C  0AAF               	incf	OLED_print_xy@row,f
 11482  124D  00B0               	movwf	OLED_print_xy@s
 11483  124E  30B2               	movlw	high (STR_29| (0+32768))
 11484  124F  2A88               	goto	L8
 11485  1250                     l7898:	
 11486                           ;menu.c: 173:  } else if (heater->status == CH_UNCHECKED) {
 11487                           
 11488  1250  0847               	movf	channelSetup@heater^(0+128),w
 11489  1251  0086               	movwf	6
 11490  1252  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11491  1253  0087               	movwf	7
 11492  1254  3005               	movlw	5
 11493  1255  315E               	addfsr 1,30
 11494  1256  0601               	xorwf	1,w
 11495  1257  1D03               	btfss	3,2
 11496  1258  2A68               	goto	l7902
 11497                           
 11498                           ;menu.c: 175:   OLED_print_xy(0, 0, "Testing     ");
 11499  1259  0140               	movlb	0	; select bank0
 11500  125A  3084               	movlw	low (STR_30| (0+32768))
 11501  125B  01AF               	clrf	OLED_print_xy@row
 11502  125C  00B0               	movwf	OLED_print_xy@s
 11503  125D  30B2               	movlw	high (STR_30| (0+32768))
 11504  125E  00B1               	movwf	OLED_print_xy@s+1
 11505  125F  3000               	movlw	0
 11506  1260  2730  3190         	fcall	_OLED_print_xy
 11507  1262  30B8               	movlw	low (STR_31| (0+32768))
 11508                           
 11509                           ;menu.c: 176:   OLED_print_xy(0, 1, "heater...   ");
 11510  1263  01AF               	clrf	OLED_print_xy@row
 11511  1264  0AAF               	incf	OLED_print_xy@row,f
 11512  1265  00B0               	movwf	OLED_print_xy@s
 11513  1266  30B2               	movlw	high (STR_31| (0+32768))
 11514  1267  2A88               	goto	L8
 11515  1268                     l7902:	
 11516                           ;menu.c: 178:  } else if ((heater->status == CH_OVERCURRENT) || (heater->status == CH_SH
      +                          ORTED)) {
 11517                           
 11518  1268  0847               	movf	channelSetup@heater^(0+128),w
 11519  1269  0086               	movwf	6
 11520  126A  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11521  126B  0087               	movwf	7
 11522  126C  3004               	movlw	4
 11523  126D  315E               	addfsr 1,30
 11524  126E  0601               	xorwf	1,w
 11525  126F  1903               	btfsc	3,2
 11526  1270  2A7A               	goto	l7906
 11527  1271  0847               	movf	channelSetup@heater^(0+128),w
 11528  1272  0086               	movwf	6
 11529  1273  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11530  1274  0087               	movwf	7
 11531  1275  3003               	movlw	3
 11532  1276  315E               	addfsr 1,30
 11533  1277  0601               	xorwf	1,w
 11534  1278  1D03               	btfss	3,2
 11535  1279  2A8C               	goto	l478
 11536  127A                     l7906:	
 11537                           
 11538                           ;menu.c: 180:   OLED_print_xy(0, 0, "Reset       ");
 11539  127A  0140               	movlb	0	; select bank0
 11540  127B  3077               	movlw	low (STR_32| (0+32768))
 11541  127C  01AF               	clrf	OLED_print_xy@row
 11542  127D  00B0               	movwf	OLED_print_xy@s
 11543  127E  30B2               	movlw	high (STR_32| (0+32768))
 11544  127F  00B1               	movwf	OLED_print_xy@s+1
 11545  1280  3000               	movlw	0
 11546  1281  2730  3190         	fcall	_OLED_print_xy
 11547  1283  3091               	movlw	low (STR_33| (0+32768))
 11548                           
 11549                           ;menu.c: 181:   OLED_print_xy(0, 1, "channel     ");
 11550  1284  01AF               	clrf	OLED_print_xy@row
 11551  1285  0AAF               	incf	OLED_print_xy@row,f
 11552  1286  00B0               	movwf	OLED_print_xy@s
 11553  1287  30B2               	movlw	high (STR_33| (0+32768))
 11554  1288                     L8:	
 11555  1288  00B1               	movwf	OLED_print_xy@s+1
 11556  1289  3000               	movlw	0
 11557  128A                     L6:	
 11558  128A  2730  3190         	fcall	_OLED_print_xy
 11559  128C                     l478:	
 11560                           
 11561                           ;menu.c: 185:  OLED_print_xy(12, 0, "Lens diam.  ");
 11562  128C  0140               	movlb	0	; select bank0
 11563  128D  30EC               	movlw	low (STR_34| (0+32768))
 11564  128E  01AF               	clrf	OLED_print_xy@row
 11565  128F  00B0               	movwf	OLED_print_xy@s
 11566  1290  30B2               	movlw	high (STR_34| (0+32768))
 11567  1291  00B1               	movwf	OLED_print_xy@s+1
 11568  1292  300C               	movlw	12
 11569  1293  2730               	fcall	_OLED_print_xy
 11570                           
 11571                           ;menu.c: 186:  ftoa(str, heater->lensDia, 4, 1);
 11572  1294  0141               	movlb	1	; select bank1
 11573  1295  0847               	movf	channelSetup@heater^(0+128),w
 11574  1296  0086               	movwf	6
 11575  1297  0848               	movf	(channelSetup@heater+1)^(0+128),w
 11576  1298  0087               	movwf	7
 11577  1299  3155               	addfsr 1,21
 11578  129A  3F40               	moviw [0]fsr1
 11579  129B  00BA               	movwf	ftoa@fValue^(0+128)
 11580  129C  3F41               	moviw [1]fsr1
 11581  129D  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 11582  129E  3F42               	moviw [2]fsr1
 11583  129F  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 11584  12A0  3F43               	moviw [3]fsr1
 11585  12A1  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 11586  12A2  3004               	movlw	4
 11587  12A3  00BE               	movwf	ftoa@width^(0+128)
 11588  12A4  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 11589  12A5  01BF               	clrf	ftoa@prec^(0+128)
 11590  12A6  0ABF               	incf	ftoa@prec^(0+128),f
 11591  12A7  318A  221B  3190   	fcall	_ftoa
 11592                           
 11593                           ;menu.c: 187:  OLED_print_xy(12 + 0, 1, str);
 11594  12AA  0140               	movlb	0	; select bank0
 11595  12AB  30E5               	movlw	low _str
 11596  12AC  01AF               	clrf	OLED_print_xy@row
 11597  12AD  0AAF               	incf	OLED_print_xy@row,f
 11598  12AE  00B0               	movwf	OLED_print_xy@s
 11599  12AF  3001               	movlw	high _str
 11600  12B0  00B1               	movwf	OLED_print_xy@s+1
 11601  12B1  300C               	movlw	12
 11602  12B2  2730  3190         	fcall	_OLED_print_xy
 11603  12B4  3099               	movlw	low (STR_35| (0+32768))
 11604                           
 11605                           ;menu.c: 188:  OLED_print_xy(12 + 5, 1, " inch  ");
 11606  12B5  01AF               	clrf	OLED_print_xy@row
 11607  12B6  0AAF               	incf	OLED_print_xy@row,f
 11608  12B7  00B0               	movwf	OLED_print_xy@s
 11609  12B8  30B3               	movlw	high (STR_35| (0+32768))
 11610  12B9  00B1               	movwf	OLED_print_xy@s+1
 11611  12BA  3011               	movlw	17
 11612  12BB  2730  3190         	fcall	_OLED_print_xy
 11613                           
 11614                           ;menu.c: 190:  page = paging(page, 2);
 11615  12BD  3002               	movlw	2
 11616  12BE  00AA               	movwf	paging@lastPage
 11617  12BF  0142               	movlb	2	; select bank2
 11618  12C0  086D               	movf	channelSetup@page^(0+256),w
 11619  12C1  23F5               	fcall	_paging
 11620  12C2  0142               	movlb	2	; select bank2
 11621  12C3  00ED               	movwf	channelSetup@page^(0+256)
 11622                           
 11623                           ;menu.c: 192:  return page;
 11624  12C4  0008               	return
 11625  12C5                     __end_of_channelSetup:	
 11626  12C5                     __ptext24:	
 11627 ;; *************** function _itoa *****************
 11628 ;; Defined at:
 11629 ;;		line 47 in file "common.c"
 11630 ;; Parameters:    Size  Location     Type
 11631 ;;  str             1    wreg     PTR unsigned char 
 11632 ;;		 -> str(10), 
 11633 ;;  value           1    9[BANK0 ] unsigned char 
 11634 ;;  width           1   10[BANK0 ] unsigned char 
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;  str             1   12[BANK0 ] PTR unsigned char 
 11637 ;;		 -> str(10), 
 11638 ;; Return value:  Size  Location     Type
 11639 ;;                  1    wreg      void 
 11640 ;; Registers used:
 11641 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11642 ;; Tracked objects:
 11643 ;;		On entry : 3F/0
 11644 ;;		On exit  : 3F/0
 11645 ;;		Unchanged: 0/0
 11646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11647 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11648 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11649 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11650 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11651 ;;Total ram usage:        4 bytes
 11652 ;; Hardware stack levels used:    1
 11653 ;; Hardware stack levels required when called:    4
 11654 ;; This function calls:
 11655 ;;		___lbdiv
 11656 ;;		___lbmod
 11657 ;; This function is called by:
 11658 ;;		_statusView
 11659 ;;		_channelView
 11660 ;;		_channelSetup
 11661 ;;		_setOutputPower
 11662 ;; This function uses a non-reentrant model
 11663 ;;
 11664                           
 11665                           
 11666                           ;psect for function _itoa
 11667  12C5                     _itoa:	
 11668                           
 11669                           ;incstack = 0
 11670                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11671                           ;itoa@str stored from wreg
 11672  12C5  00AC               	movwf	itoa@str
 11673                           
 11674                           ;common.c: 47: void itoa(char *str, uint8_t value, uint8_t width);common.c: 48: {;common
      +                          .c: 49:  str[width] = '\0';
 11675  12C6  082A               	movf	itoa@width,w
 11676  12C7  072C               	addwf	itoa@str,w
 11677  12C8  00AB               	movwf	??_itoa
 11678  12C9  0086               	movwf	6
 11679  12CA  3001               	movlw	1	; select bank2/3
 11680  12CB  0087               	movwf	7
 11681  12CC  0181               	clrf	1
 11682  12CD                     l5354:	
 11683                           ;common.c: 50:  while (value && width > 0) {
 11684                           
 11685                           
 11686                           ;common.c: 50:  while (value && width > 0) {
 11687  12CD  0829               	movf	itoa@value,w
 11688  12CE  1903               	btfsc	3,2
 11689  12CF  2AF1               	goto	l5360
 11690  12D0  082A               	movf	itoa@width,w
 11691  12D1  1903               	btfsc	3,2
 11692  12D2  2AF1               	goto	l5360
 11693                           
 11694                           ;common.c: 51:   str[--width] = (value % 10) + '0';
 11695  12D3  03AA               	decf	itoa@width,f
 11696  12D4  082A               	movf	itoa@width,w
 11697  12D5  072C               	addwf	itoa@str,w
 11698  12D6  00AB               	movwf	??_itoa
 11699  12D7  0086               	movwf	6
 11700  12D8  3001               	movlw	1	; select bank2/3
 11701  12D9  0087               	movwf	7
 11702  12DA  300A               	movlw	10
 11703  12DB  00A4               	movwf	___lbmod@divisor
 11704  12DC  0829               	movf	itoa@value,w
 11705  12DD  2343  3190         	fcall	___lbmod
 11706  12DF  3E30               	addlw	48
 11707  12E0  0081               	movwf	1
 11708                           
 11709                           ;common.c: 52:   value = value / 10;
 11710  12E1  300A               	movlw	10
 11711  12E2  00A4               	movwf	___lbdiv@divisor
 11712  12E3  0829               	movf	itoa@value,w
 11713  12E4  232B  3190         	fcall	___lbdiv
 11714  12E6  00A9               	movwf	itoa@value
 11715  12E7  2ACD               	goto	l5354
 11716  12E8                     l5358:	
 11717                           
 11718                           ;common.c: 55:   str[--width] = ' ';
 11719  12E8  03AA               	decf	itoa@width,f
 11720  12E9  082A               	movf	itoa@width,w
 11721  12EA  072C               	addwf	itoa@str,w
 11722  12EB  00AB               	movwf	??_itoa
 11723  12EC  0086               	movwf	6
 11724  12ED  3001               	movlw	1	; select bank2/3
 11725  12EE  0087               	movwf	7
 11726  12EF  3020               	movlw	32
 11727  12F0  0081               	movwf	1
 11728  12F1                     l5360:	
 11729                           
 11730                           ;common.c: 54:  while(width)
 11731  12F1  082A               	movf	itoa@width,w
 11732  12F2  1903               	btfsc	3,2
 11733  12F3  0008               	return
 11734  12F4  2AE8               	goto	l5358
 11735  12F5                     __end_of_itoa:	
 11736  12F5                     __ptext45:	
 11737 ;; *************** function ___fleq *****************
 11738 ;; Defined at:
 11739 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 11740 ;; Parameters:    Size  Location     Type
 11741 ;;  ff1             4    4[BANK0 ] unsigned long 
 11742 ;;  ff2             4    8[BANK0 ] unsigned long 
 11743 ;; Auto vars:     Size  Location     Type
 11744 ;;		None
 11745 ;; Return value:  Size  Location     Type
 11746 ;;		None               void
 11747 ;; Registers used:
 11748 ;;		wreg, status,2, status,0
 11749 ;; Tracked objects:
 11750 ;;		On entry : 3F/0
 11751 ;;		On exit  : 3F/0
 11752 ;;		Unchanged: 0/0
 11753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11754 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11756 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11757 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11758 ;;Total ram usage:       12 bytes
 11759 ;; Hardware stack levels used:    1
 11760 ;; Hardware stack levels required when called:    3
 11761 ;; This function calls:
 11762 ;;		Nothing
 11763 ;; This function is called by:
 11764 ;;		_channelSetup
 11765 ;;		_setOutputPower
 11766 ;;		_checkChannelStatus
 11767 ;; This function uses a non-reentrant model
 11768 ;;
 11769                           
 11770                           
 11771                           ;psect for function ___fleq
 11772  12F5                     ___fleq:	
 11773                           
 11774                           ;incstack = 0
 11775                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 11776  12F5  3080               	movlw	128
 11777  12F6  01AC               	clrf	??___fleq
 11778  12F7  01AD               	clrf	??___fleq+1
 11779  12F8  0526               	andwf	___fleq@ff1+2,w
 11780  12F9  00AE               	movwf	??___fleq+2
 11781  12FA  307F               	movlw	127
 11782  12FB  0527               	andwf	___fleq@ff1+3,w
 11783  12FC  00AF               	movwf	??___fleq+3
 11784  12FD  042E               	iorwf	??___fleq+2,w
 11785  12FE  042D               	iorwf	??___fleq+1,w
 11786  12FF  042C               	iorwf	??___fleq,w
 11787  1300  1D03               	skipz
 11788  1301  2B06               	goto	l5550
 11789  1302  01A4               	clrf	___fleq@ff1
 11790  1303  01A5               	clrf	___fleq@ff1+1
 11791  1304  01A6               	clrf	___fleq@ff1+2
 11792  1305  01A7               	clrf	___fleq@ff1+3
 11793  1306                     l5550:	
 11794  1306  3080               	movlw	128
 11795  1307  01AC               	clrf	??___fleq
 11796  1308  01AD               	clrf	??___fleq+1
 11797  1309  052A               	andwf	___fleq@ff2+2,w
 11798  130A  00AE               	movwf	??___fleq+2
 11799  130B  307F               	movlw	127
 11800  130C  052B               	andwf	___fleq@ff2+3,w
 11801  130D  00AF               	movwf	??___fleq+3
 11802  130E  042E               	iorwf	??___fleq+2,w
 11803  130F  042D               	iorwf	??___fleq+1,w
 11804  1310  042C               	iorwf	??___fleq,w
 11805  1311  1D03               	skipz
 11806  1312  2B17               	goto	l5554
 11807  1313  01A8               	clrf	___fleq@ff2
 11808  1314  01A9               	clrf	___fleq@ff2+1
 11809  1315  01AA               	clrf	___fleq@ff2+2
 11810  1316  01AB               	clrf	___fleq@ff2+3
 11811  1317                     l5554:	
 11812  1317  082B               	movf	___fleq@ff2+3,w
 11813  1318  0627               	xorwf	___fleq@ff1+3,w
 11814  1319  1D03               	skipz
 11815  131A  2B25               	goto	u5345
 11816  131B  082A               	movf	___fleq@ff2+2,w
 11817  131C  0626               	xorwf	___fleq@ff1+2,w
 11818  131D  1D03               	skipz
 11819  131E  2B25               	goto	u5345
 11820  131F  0829               	movf	___fleq@ff2+1,w
 11821  1320  0625               	xorwf	___fleq@ff1+1,w
 11822  1321  1D03               	skipz
 11823  1322  2B25               	goto	u5345
 11824  1323  0828               	movf	___fleq@ff2,w
 11825  1324  0624               	xorwf	___fleq@ff1,w
 11826  1325                     u5345:	
 11827  1325  1903               	skipnz
 11828  1326  2B29               	goto	l5558
 11829  1327  1003               	clrc
 11830  1328  0008               	return
 11831  1329                     l5558:	
 11832  1329  1403               	setc
 11833  132A  0008               	return
 11834  132B                     __end_of___fleq:	
 11835  132B                     __ptext26:	
 11836 ;; *************** function ___lbdiv *****************
 11837 ;; Defined at:
 11838 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lbdiv.c"
 11839 ;; Parameters:    Size  Location     Type
 11840 ;;  dividend        1    wreg     unsigned char 
 11841 ;;  divisor         1    4[BANK0 ] unsigned char 
 11842 ;; Auto vars:     Size  Location     Type
 11843 ;;  dividend        1    5[BANK0 ] unsigned char 
 11844 ;;  quotient        1    7[BANK0 ] unsigned char 
 11845 ;;  counter         1    6[BANK0 ] unsigned char 
 11846 ;; Return value:  Size  Location     Type
 11847 ;;                  1    wreg      unsigned char 
 11848 ;; Registers used:
 11849 ;;		wreg, status,2, status,0
 11850 ;; Tracked objects:
 11851 ;;		On entry : 3F/0
 11852 ;;		On exit  : 3F/0
 11853 ;;		Unchanged: 0/0
 11854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11855 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11856 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11857 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11858 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11859 ;;Total ram usage:        4 bytes
 11860 ;; Hardware stack levels used:    1
 11861 ;; Hardware stack levels required when called:    3
 11862 ;; This function calls:
 11863 ;;		Nothing
 11864 ;; This function is called by:
 11865 ;;		_itoa
 11866 ;; This function uses a non-reentrant model
 11867 ;;
 11868                           
 11869                           
 11870                           ;psect for function ___lbdiv
 11871  132B                     ___lbdiv:	
 11872                           
 11873                           ;incstack = 0
 11874                           ; Regs used in ___lbdiv: [wreg+status,2+status,0]
 11875                           ;___lbdiv@dividend stored from wreg
 11876  132B  00A5               	movwf	___lbdiv@dividend
 11877  132C  01A7               	clrf	___lbdiv@quotient
 11878  132D  0824               	movf	___lbdiv@divisor,w
 11879  132E  1903               	btfsc	3,2
 11880  132F  2B41               	goto	l4900
 11881  1330  01A6               	clrf	___lbdiv@counter
 11882  1331                     l4886:	
 11883  1331  0AA6               	incf	___lbdiv@counter,f
 11884  1332  1BA4               	btfsc	___lbdiv@divisor,7
 11885  1333  2B36               	goto	l1322
 11886  1334  35A4               	lslf	___lbdiv@divisor,f
 11887  1335  2B31               	goto	l4886
 11888  1336                     l1322:	
 11889  1336  35A7               	lslf	___lbdiv@quotient,f
 11890  1337  0824               	movf	___lbdiv@divisor,w
 11891  1338  0225               	subwf	___lbdiv@dividend,w
 11892  1339  1C03               	skipc
 11893  133A  2B3E               	goto	l4896
 11894  133B  0824               	movf	___lbdiv@divisor,w
 11895  133C  02A5               	subwf	___lbdiv@dividend,f
 11896  133D  1427               	bsf	___lbdiv@quotient,0
 11897  133E                     l4896:	
 11898  133E  36A4               	lsrf	___lbdiv@divisor,f
 11899  133F  0BA6               	decfsz	___lbdiv@counter,f
 11900  1340  2B36               	goto	l1322
 11901  1341                     l4900:	
 11902  1341  0827               	movf	___lbdiv@quotient,w
 11903  1342  0008               	return
 11904  1343                     __end_of___lbdiv:	
 11905  1343                     __ptext25:	
 11906 ;; *************** function ___lbmod *****************
 11907 ;; Defined at:
 11908 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\lbmod.c"
 11909 ;; Parameters:    Size  Location     Type
 11910 ;;  dividend        1    wreg     unsigned char 
 11911 ;;  divisor         1    4[BANK0 ] unsigned char 
 11912 ;; Auto vars:     Size  Location     Type
 11913 ;;  dividend        1    6[BANK0 ] unsigned char 
 11914 ;;  rem             1    8[BANK0 ] unsigned char 
 11915 ;;  counter         1    7[BANK0 ] unsigned char 
 11916 ;; Return value:  Size  Location     Type
 11917 ;;                  1    wreg      unsigned char 
 11918 ;; Registers used:
 11919 ;;		wreg, status,2, status,0
 11920 ;; Tracked objects:
 11921 ;;		On entry : 3F/0
 11922 ;;		On exit  : 3F/0
 11923 ;;		Unchanged: 0/0
 11924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11925 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11926 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11927 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11928 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11929 ;;Total ram usage:        5 bytes
 11930 ;; Hardware stack levels used:    1
 11931 ;; Hardware stack levels required when called:    3
 11932 ;; This function calls:
 11933 ;;		Nothing
 11934 ;; This function is called by:
 11935 ;;		_itoa
 11936 ;; This function uses a non-reentrant model
 11937 ;;
 11938                           
 11939                           
 11940                           ;psect for function ___lbmod
 11941  1343                     ___lbmod:	
 11942                           
 11943                           ;incstack = 0
 11944                           ; Regs used in ___lbmod: [wreg+status,2+status,0]
 11945                           ;___lbmod@dividend stored from wreg
 11946  1343  00A6               	movwf	___lbmod@dividend
 11947  1344  3008               	movlw	8
 11948  1345  00A7               	movwf	___lbmod@counter
 11949  1346  01A8               	clrf	___lbmod@rem
 11950  1347                     l4908:	
 11951  1347  0826               	movf	___lbmod@dividend,w
 11952  1348  00A5               	movwf	??___lbmod
 11953  1349  3007               	movlw	7
 11954  134A                     u4355:	
 11955  134A  36A5               	lsrf	??___lbmod,f
 11956  134B  0B89               	decfsz	9,f
 11957  134C  2B4A               	goto	u4355
 11958  134D  3528               	lslf	___lbmod@rem,w
 11959  134E  0425               	iorwf	??___lbmod,w
 11960  134F  00A8               	movwf	___lbmod@rem
 11961  1350  35A6               	lslf	___lbmod@dividend,f
 11962  1351  0824               	movf	___lbmod@divisor,w
 11963  1352  0228               	subwf	___lbmod@rem,w
 11964  1353  1C03               	skipc
 11965  1354  2B57               	goto	l4916
 11966  1355  0824               	movf	___lbmod@divisor,w
 11967  1356  02A8               	subwf	___lbmod@rem,f
 11968  1357                     l4916:	
 11969  1357  0BA7               	decfsz	___lbmod@counter,f
 11970  1358  2B47               	goto	l4908
 11971  1359  0828               	movf	___lbmod@rem,w
 11972  135A  0008               	return
 11973  135B                     __end_of___lbmod:	
 11974  135B                     __ptext21:	
 11975 ;; *************** function _returnToPage *****************
 11976 ;; Defined at:
 11977 ;;		line 209 in file "menuhelper.c"
 11978 ;; Parameters:    Size  Location     Type
 11979 ;;  page            1    wreg     unsigned char 
 11980 ;; Auto vars:     Size  Location     Type
 11981 ;;  page            1   21[BANK0 ] unsigned char 
 11982 ;;  n               1   22[BANK0 ] unsigned char 
 11983 ;; Return value:  Size  Location     Type
 11984 ;;                  1    wreg      void 
 11985 ;; Registers used:
 11986 ;;		wreg, status,2, status,0, pclath, cstack
 11987 ;; Tracked objects:
 11988 ;;		On entry : 3C/2
 11989 ;;		On exit  : 0/0
 11990 ;;		Unchanged: 0/0
 11991 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11993 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11995 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11996 ;;Total ram usage:        2 bytes
 11997 ;; Hardware stack levels used:    1
 11998 ;; Hardware stack levels required when called:    6
 11999 ;; This function calls:
 12000 ;;		_OLED_command
 12001 ;;		___wmul
 12002 ;; This function is called by:
 12003 ;;		_statusView
 12004 ;;		_channelView
 12005 ;;		_channelSetup
 12006 ;;		_setOutputPower
 12007 ;;		_setLensDia
 12008 ;;		_setup
 12009 ;;		_setDPOffset
 12010 ;;		_setSkyTemp
 12011 ;;		_setFudgeFactor
 12012 ;; This function uses a non-reentrant model
 12013 ;;
 12014                           
 12015                           
 12016                           ;psect for function _returnToPage
 12017  135B                     _returnToPage:	
 12018                           
 12019                           ;incstack = 0
 12020                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 12021                           ;returnToPage@page stored from wreg
 12022  135B  0140               	movlb	0	; select bank0
 12023  135C  00B5               	movwf	returnToPage@page
 12024                           
 12025                           ;menuhelper.c: 209: void returnToPage(uint8_t page);menuhelper.c: 210: {;menuhelper.c: 2
      +                          11:  uint8_t n;;menuhelper.c: 213:  if (! g_screenRefresh)
 12026  135D  086B               	movf	_g_screenRefresh,w
 12027  135E  1903               	btfsc	3,2
 12028  135F  0008               	return
 12029                           
 12030                           ;menuhelper.c: 215:  OLED_command(0x01);
 12031  1360  3001               	movlw	1
 12032  1361  237D  3190         	fcall	_OLED_command
 12033                           
 12034                           ;menuhelper.c: 216:  OLED_command(0x02);
 12035  1363  3002               	movlw	2
 12036  1364  237D               	fcall	_OLED_command
 12037                           
 12038                           ;menuhelper.c: 217:  for(n = 0; n < 12 * page; n++) {
 12039  1365  01B6               	clrf	returnToPage@n
 12040  1366                     l5288:	
 12041  1366  0835               	movf	returnToPage@page,w
 12042  1367  00AF               	movwf	___wmul@multiplier
 12043  1368  300C               	movlw	12
 12044  1369  01B0               	clrf	___wmul@multiplier+1
 12045  136A  00B1               	movwf	___wmul@multiplicand
 12046  136B  01B2               	clrf	___wmul@multiplicand+1
 12047  136C  318A  2206  3190   	fcall	___wmul
 12048  136F  0830               	movf	?___wmul+1,w
 12049  1370  3A80               	xorlw	128
 12050  1371  3C80               	sublw	128
 12051  1372  1D03               	skipz
 12052  1373  2B76               	goto	u4975
 12053  1374  082F               	movf	?___wmul,w
 12054  1375  0236               	subwf	returnToPage@n,w
 12055  1376                     u4975:	
 12056  1376  1803               	btfsc	3,0
 12057  1377  0008               	return
 12058                           
 12059                           ;menuhelper.c: 218:   OLED_command(0x10 | 0x08 | 0x00);
 12060  1378  3018               	movlw	24
 12061  1379  237D  3190         	fcall	_OLED_command
 12062                           
 12063                           ;menuhelper.c: 219:  }
 12064  137B  0AB6               	incf	returnToPage@n,f
 12065  137C  2B66               	goto	l5288
 12066  137D                     __end_of_returnToPage:	
 12067  137D                     __ptext68:	
 12068 ;; *************** function _OLED_command *****************
 12069 ;; Defined at:
 12070 ;;		line 78 in file "oled.c"
 12071 ;; Parameters:    Size  Location     Type
 12072 ;;  value           1    wreg     unsigned char 
 12073 ;; Auto vars:     Size  Location     Type
 12074 ;;  value           1    9[BANK0 ] unsigned char 
 12075 ;; Return value:  Size  Location     Type
 12076 ;;                  1    wreg      void 
 12077 ;; Registers used:
 12078 ;;		wreg, status,2, status,0, pclath, cstack
 12079 ;; Tracked objects:
 12080 ;;		On entry : 0/0
 12081 ;;		On exit  : 3F/0
 12082 ;;		Unchanged: 0/0
 12083 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12085 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12087 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12088 ;;Total ram usage:        1 bytes
 12089 ;; Hardware stack levels used:    1
 12090 ;; Hardware stack levels required when called:    5
 12091 ;; This function calls:
 12092 ;;		_OLED_send
 12093 ;;		_OLED_waitForReady
 12094 ;; This function is called by:
 12095 ;;		_main
 12096 ;;		_OLED_init
 12097 ;;		_OLED_print_xy
 12098 ;;		_OLED_loadSpecialChars
 12099 ;;		_viewErrorMessage
 12100 ;;		_paging
 12101 ;;		_returnToPage
 12102 ;; This function uses a non-reentrant model
 12103 ;;
 12104                           
 12105                           
 12106                           ;psect for function _OLED_command
 12107  137D                     _OLED_command:	
 12108                           
 12109                           ;incstack = 0
 12110                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 12111                           ;OLED_command@value stored from wreg
 12112  137D  0140               	movlb	0	; select bank0
 12113  137E  00A9               	movwf	OLED_command@value
 12114                           
 12115                           ;oled.c: 78: void OLED_command(uint8_t value);oled.c: 79: {;oled.c: 80:  OLED_send(value
      +                          , 0);
 12116  137F  01A7               	clrf	OLED_send@mode
 12117  1380  0829               	movf	OLED_command@value,w
 12118  1381  2384  3190         	fcall	_OLED_send
 12119                           
 12120                           ;oled.c: 81:  OLED_waitForReady();
 12121  1383  2BCF               	ljmp	l4420
 12122  1384                     __end_of_OLED_command:	
 12123  1384                     __ptext70:	
 12124 ;; *************** function _OLED_send *****************
 12125 ;; Defined at:
 12126 ;;		line 39 in file "oled.c"
 12127 ;; Parameters:    Size  Location     Type
 12128 ;;  value           1    wreg     unsigned char 
 12129 ;;  mode            1    7[BANK0 ] unsigned char 
 12130 ;; Auto vars:     Size  Location     Type
 12131 ;;  value           1    8[BANK0 ] unsigned char 
 12132 ;; Return value:  Size  Location     Type
 12133 ;;                  1    wreg      void 
 12134 ;; Registers used:
 12135 ;;		wreg, status,2, status,0, pclath, cstack
 12136 ;; Tracked objects:
 12137 ;;		On entry : 3F/0
 12138 ;;		On exit  : 3F/0
 12139 ;;		Unchanged: 0/0
 12140 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12141 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12142 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12143 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12144 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12145 ;;Total ram usage:        2 bytes
 12146 ;; Hardware stack levels used:    1
 12147 ;; Hardware stack levels required when called:    4
 12148 ;; This function calls:
 12149 ;;		_OLED_write4bits
 12150 ;; This function is called by:
 12151 ;;		_OLED_command
 12152 ;;		_OLED_write
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           
 12157                           ;psect for function _OLED_send
 12158  1384                     _OLED_send:	
 12159                           
 12160                           ;incstack = 0
 12161                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 12162                           ;OLED_send@value stored from wreg
 12163  1384  00A8               	movwf	OLED_send@value
 12164                           
 12165                           ;oled.c: 39: void OLED_send(uint8_t value, uint8_t mode);oled.c: 40: {;oled.c: 41:  LATB
      +                          bits.LATB4 = mode;
 12166  1385  0C27               	rrf	OLED_send@mode,w
 12167  1386  1C03               	skipc
 12168  1387  1219               	bcf	25,4	;volatile
 12169  1388  1803               	skipnc
 12170  1389  1619               	bsf	25,4	;volatile
 12171                           
 12172                           ;oled.c: 42:  LATBbits.LATB3 = 0;
 12173  138A  1199               	bcf	25,3	;volatile
 12174                           
 12175                           ;oled.c: 44:  OLED_write4bits(value >> 4);
 12176  138B  0E28               	swapf	OLED_send@value,w
 12177  138C  390F               	andlw	15
 12178  138D  2391  3190         	fcall	_OLED_write4bits
 12179                           
 12180                           ;oled.c: 45:  OLED_write4bits(value);
 12181  138F  0828               	movf	OLED_send@value,w
 12182  1390  2B91               	ljmp	_OLED_write4bits
 12183  1391                     __end_of_OLED_send:	
 12184  1391                     __ptext71:	
 12185 ;; *************** function _OLED_write4bits *****************
 12186 ;; Defined at:
 12187 ;;		line 26 in file "oled.c"
 12188 ;; Parameters:    Size  Location     Type
 12189 ;;  value           1    wreg     unsigned char 
 12190 ;; Auto vars:     Size  Location     Type
 12191 ;;  value           1    6[BANK0 ] unsigned char 
 12192 ;; Return value:  Size  Location     Type
 12193 ;;                  1    wreg      void 
 12194 ;; Registers used:
 12195 ;;		wreg, status,2, status,0
 12196 ;; Tracked objects:
 12197 ;;		On entry : 0/0
 12198 ;;		On exit  : 3F/0
 12199 ;;		Unchanged: 0/0
 12200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12203 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12204 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12205 ;;Total ram usage:        3 bytes
 12206 ;; Hardware stack levels used:    1
 12207 ;; Hardware stack levels required when called:    3
 12208 ;; This function calls:
 12209 ;;		Nothing
 12210 ;; This function is called by:
 12211 ;;		_OLED_send
 12212 ;;		_OLED_init
 12213 ;; This function uses a non-reentrant model
 12214 ;;
 12215                           
 12216                           
 12217                           ;psect for function _OLED_write4bits
 12218  1391                     _OLED_write4bits:	
 12219                           
 12220                           ;incstack = 0
 12221                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0]
 12222                           ;OLED_write4bits@value stored from wreg
 12223  1391  0140               	movlb	0	; select bank0
 12224  1392  00A6               	movwf	OLED_write4bits@value
 12225                           
 12226                           ;oled.c: 26: void OLED_write4bits(uint8_t value);oled.c: 27: {;oled.c: 28:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 12227  1393  3901               	andlw	1
 12228  1394  00A4               	movwf	??_OLED_write4bits
 12229  1395  0DA4               	rlf	??_OLED_write4bits,f
 12230  1396  0819               	movf	25,w	;volatile
 12231  1397  0624               	xorwf	??_OLED_write4bits,w
 12232  1398  39FD               	andlw	-3
 12233  1399  0624               	xorwf	??_OLED_write4bits,w
 12234  139A  0099               	movwf	25	;volatile
 12235                           
 12236                           ;oled.c: 29:  LATBbits.LATB0 = (value >> 1) & 0x01;
 12237  139B  0826               	movf	OLED_write4bits@value,w
 12238  139C  00A4               	movwf	??_OLED_write4bits
 12239  139D  3001               	movlw	1
 12240  139E  36A4               	lsrf	??_OLED_write4bits,f
 12241  139F  0524               	andwf	??_OLED_write4bits,w
 12242  13A0  00A5               	movwf	??_OLED_write4bits+1
 12243  13A1  0819               	movf	25,w	;volatile
 12244  13A2  0625               	xorwf	??_OLED_write4bits+1,w
 12245  13A3  39FE               	andlw	-2
 12246  13A4  0625               	xorwf	??_OLED_write4bits+1,w
 12247  13A5  0099               	movwf	25	;volatile
 12248                           
 12249                           ;oled.c: 30:  LATCbits.LATC5 = (value >> 2) & 0x01;
 12250  13A6  0826               	movf	OLED_write4bits@value,w
 12251  13A7  00A4               	movwf	??_OLED_write4bits
 12252  13A8  36A4               	lsrf	??_OLED_write4bits,f
 12253  13A9  36A4               	lsrf	??_OLED_write4bits,f
 12254  13AA  0824               	movf	??_OLED_write4bits,w
 12255  13AB  3901               	andlw	1
 12256  13AC  00A5               	movwf	??_OLED_write4bits+1
 12257  13AD  0EA5               	swapf	??_OLED_write4bits+1,f
 12258  13AE  0DA5               	rlf	??_OLED_write4bits+1,f
 12259  13AF  081A               	movf	26,w	;volatile
 12260  13B0  0625               	xorwf	??_OLED_write4bits+1,w
 12261  13B1  39DF               	andlw	-33
 12262  13B2  0625               	xorwf	??_OLED_write4bits+1,w
 12263  13B3  009A               	movwf	26	;volatile
 12264                           
 12265                           ;oled.c: 31:  LATCbits.LATC4 = (value >> 3) & 0x01;
 12266  13B4  0826               	movf	OLED_write4bits@value,w
 12267  13B5  00A4               	movwf	??_OLED_write4bits
 12268  13B6  36A4               	lsrf	??_OLED_write4bits,f
 12269  13B7  36A4               	lsrf	??_OLED_write4bits,f
 12270  13B8  36A4               	lsrf	??_OLED_write4bits,f
 12271  13B9  0824               	movf	??_OLED_write4bits,w
 12272  13BA  3901               	andlw	1
 12273  13BB  00A5               	movwf	??_OLED_write4bits+1
 12274  13BC  0EA5               	swapf	??_OLED_write4bits+1,f
 12275  13BD  081A               	movf	26,w	;volatile
 12276  13BE  0625               	xorwf	??_OLED_write4bits+1,w
 12277  13BF  39EF               	andlw	-17
 12278  13C0  0625               	xorwf	??_OLED_write4bits+1,w
 12279  13C1  009A               	movwf	26	;volatile
 12280                           
 12281                           ;oled.c: 33:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 12282  13C2  3010               	movlw	16
 12283  13C3                     u9607:	
 12284  13C3  0B89               	decfsz	9,f
 12285  13C4  2BC3               	goto	u9607
 12286  13C5  3200               	nop2
 12287                           
 12288                           ;oled.c: 34:  LATBbits.LATB2 = 1;
 12289  13C6  0140               	movlb	0	; select bank0
 12290  13C7  1519               	bsf	25,2	;volatile
 12291                           
 12292                           ;oled.c: 35:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 12293  13C8  3010               	movlw	16
 12294  13C9                     u9617:	
 12295  13C9  0B89               	decfsz	9,f
 12296  13CA  2BC9               	goto	u9617
 12297  13CB  3200               	nop2
 12298                           
 12299                           ;oled.c: 36:  LATBbits.LATB2 = 0;
 12300  13CC  0140               	movlb	0	; select bank0
 12301  13CD  1119               	bcf	25,2	;volatile
 12302  13CE  0008               	return
 12303  13CF                     __end_of_OLED_write4bits:	
 12304  13CF                     __ptext69:	
 12305 ;; *************** function _OLED_waitForReady *****************
 12306 ;; Defined at:
 12307 ;;		line 50 in file "oled.c"
 12308 ;; Parameters:    Size  Location     Type
 12309 ;;		None
 12310 ;; Auto vars:     Size  Location     Type
 12311 ;;  busy            1    4[BANK0 ] unsigned char 
 12312 ;; Return value:  Size  Location     Type
 12313 ;;                  1    wreg      void 
 12314 ;; Registers used:
 12315 ;;		wreg, status,2, status,0
 12316 ;; Tracked objects:
 12317 ;;		On entry : 3F/0
 12318 ;;		On exit  : 3F/0
 12319 ;;		Unchanged: 0/0
 12320 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12324 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12325 ;;Total ram usage:        1 bytes
 12326 ;; Hardware stack levels used:    1
 12327 ;; Hardware stack levels required when called:    3
 12328 ;; This function calls:
 12329 ;;		Nothing
 12330 ;; This function is called by:
 12331 ;;		_OLED_command
 12332 ;;		_OLED_write
 12333 ;; This function uses a non-reentrant model
 12334 ;;
 12335                           
 12336                           
 12337                           ;psect for function _OLED_waitForReady
 12338  13CF                     _OLED_waitForReady:	
 12339  13CF                     l4420:	
 12340                           ;incstack = 0
 12341                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0]
 12342                           
 12343                           
 12344                           ;oled.c: 54:  TRISCbits.TRISC4 = 1;
 12345  13CF  1614               	bsf	20,4	;volatile
 12346                           
 12347                           ;oled.c: 55:  LATBbits.LATB4 = 0;
 12348  13D0  1219               	bcf	25,4	;volatile
 12349                           
 12350                           ;oled.c: 56:  LATBbits.LATB3 = 1;
 12351  13D1  1599               	bsf	25,3	;volatile
 12352  13D2                     l193:	
 12353                           ;oled.c: 58:  do {
 12354                           
 12355                           
 12356                           ;oled.c: 59:   LATBbits.LATB2 = 0;
 12357  13D2  1119               	bcf	25,2	;volatile
 12358                           
 12359                           ;oled.c: 60:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 12360  13D3  3003               	movlw	3
 12361  13D4                     u9567:	
 12362  13D4  0B89               	decfsz	9,f
 12363  13D5  2BD4               	goto	u9567
 12364  13D6  0000               	nop
 12365                           
 12366                           ;oled.c: 61:   LATBbits.LATB2 = 1;
 12367  13D7  0140               	movlb	0	; select bank0
 12368  13D8  1519               	bsf	25,2	;volatile
 12369                           
 12370                           ;oled.c: 63:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 12371  13D9  3003               	movlw	3
 12372  13DA                     u9577:	
 12373  13DA  0B89               	decfsz	9,f
 12374  13DB  2BDA               	goto	u9577
 12375  13DC  0000               	nop
 12376                           
 12377                           ;oled.c: 64:   busy = PORTCbits.RC4;
 12378  13DD  3000               	movlw	0
 12379  13DE  0140               	movlb	0	; select bank0
 12380  13DF  1A0E               	btfsc	14,4	;volatile
 12381  13E0  3001               	movlw	1
 12382  13E1  00A4               	movwf	OLED_waitForReady@busy
 12383                           
 12384                           ;oled.c: 66:   LATBbits.LATB2 = 0;
 12385  13E2  1119               	bcf	25,2	;volatile
 12386                           
 12387                           ;oled.c: 67:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 12388  13E3  3003               	movlw	3
 12389  13E4                     u9587:	
 12390  13E4  0B89               	decfsz	9,f
 12391  13E5  2BE4               	goto	u9587
 12392  13E6  0000               	nop
 12393                           
 12394                           ;oled.c: 69:   LATBbits.LATB2 = 1;
 12395  13E7  0140               	movlb	0	; select bank0
 12396  13E8  1519               	bsf	25,2	;volatile
 12397                           
 12398                           ;oled.c: 70:   _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 12399  13E9  3010               	movlw	16
 12400  13EA                     u9597:	
 12401  13EA  0B89               	decfsz	9,f
 12402  13EB  2BEA               	goto	u9597
 12403  13EC  3200               	nop2
 12404                           
 12405                           ;oled.c: 71:   LATBbits.LATB2 = 0;
 12406  13ED  0140               	movlb	0	; select bank0
 12407  13EE  1119               	bcf	25,2	;volatile
 12408                           
 12409                           ;oled.c: 72:  } while (busy);
 12410  13EF  0824               	movf	OLED_waitForReady@busy,w
 12411  13F0  1D03               	btfss	3,2
 12412  13F1  2BD2               	goto	l193
 12413                           
 12414                           ;oled.c: 74:  TRISCbits.TRISC4 = 0;
 12415  13F2  1214               	bcf	20,4	;volatile
 12416                           
 12417                           ;oled.c: 75:  LATBbits.LATB3 = 0;
 12418  13F3  1199               	bcf	25,3	;volatile
 12419  13F4  0008               	return
 12420  13F5                     __end_of_OLED_waitForReady:	
 12421  13F5                     __ptext22:	
 12422 ;; *************** function _paging *****************
 12423 ;; Defined at:
 12424 ;;		line 168 in file "menuhelper.c"
 12425 ;; Parameters:    Size  Location     Type
 12426 ;;  currentPage     1    wreg     unsigned char 
 12427 ;;  lastPage        1   10[BANK0 ] const unsigned char 
 12428 ;; Auto vars:     Size  Location     Type
 12429 ;;  currentPage     1   14[BANK0 ] unsigned char 
 12430 ;;  n               1   15[BANK0 ] unsigned char 
 12431 ;;  dir             1   13[BANK0 ] enum E7868
 12432 ;; Return value:  Size  Location     Type
 12433 ;;                  1    wreg      unsigned char 
 12434 ;; Registers used:
 12435 ;;		wreg, status,2, status,0, pclath, cstack
 12436 ;; Tracked objects:
 12437 ;;		On entry : 3F/2
 12438 ;;		On exit  : 3F/0
 12439 ;;		Unchanged: 0/0
 12440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12441 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12442 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12443 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12444 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12445 ;;Total ram usage:        6 bytes
 12446 ;; Hardware stack levels used:    1
 12447 ;; Hardware stack levels required when called:    6
 12448 ;; This function calls:
 12449 ;;		_OLED_command
 12450 ;;		_getRotDir
 12451 ;; This function is called by:
 12452 ;;		_statusView
 12453 ;;		_channelView
 12454 ;;		_channelSetup
 12455 ;;		_setup
 12456 ;; This function uses a non-reentrant model
 12457 ;;
 12458                           
 12459                           
 12460                           ;psect for function _paging
 12461  13F5                     _paging:	
 12462                           
 12463                           ;incstack = 0
 12464                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 12465                           ;paging@currentPage stored from wreg
 12466  13F5  0140               	movlb	0	; select bank0
 12467  13F6  00AE               	movwf	paging@currentPage
 12468                           
 12469                           ;menuhelper.c: 168: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 169: {;menuhelper.c: 170:  uint8_t n;;menuhelper.c: 171:  enum e_direction dir;;me
      +                          nuhelper.c: 175:  PIE0bits.IOCIE = 0;
 12470  13F7  014E               	movlb	14	; select bank14
 12471  13F8  1216               	bcf	22,4	;volatile
 12472                           
 12473                           ;menuhelper.c: 177:  dir = getRotDir();
 12474  13F9  276B  3190         	fcall	_getRotDir
 12475  13FB  00AD               	movwf	paging@dir
 12476                           
 12477                           ;menuhelper.c: 182:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 12478  13FC  0B2D               	decfsz	paging@dir,w
 12479  13FD  2C22               	goto	l7606
 12480  13FE  082A               	movf	paging@lastPage,w
 12481  13FF  3EFF               	addlw	255
 12482  1400  00AB               	movwf	??_paging
 12483  1401  30FF               	movlw	255
 12484  1402  1803               	skipnc
 12485  1403  3000               	movlw	0
 12486  1404  00AC               	movwf	??_paging+1
 12487  1405  3A80               	xorlw	128
 12488  1406  3C80               	sublw	128
 12489  1407  1D03               	skipz
 12490  1408  2C0B               	goto	u7875
 12491  1409  082B               	movf	??_paging,w
 12492  140A  022E               	subwf	paging@currentPage,w
 12493  140B                     u7875:	
 12494  140B  1803               	skipnc
 12495  140C  2C22               	goto	l7606
 12496                           
 12497                           ;menuhelper.c: 183:    currentPage++;
 12498  140D  0140               	movlb	0	; select bank0
 12499  140E  0AAE               	incf	paging@currentPage,f
 12500                           
 12501                           ;menuhelper.c: 184:    for(n = 0; n < 12; n++) {
 12502  140F  01AF               	clrf	paging@n
 12503  1410                     l7598:	
 12504                           
 12505                           ;menuhelper.c: 185:     OLED_command(0x10 | 0x08 | 0x00);
 12506  1410  3018               	movlw	24
 12507  1411  237D  3190         	fcall	_OLED_command
 12508                           
 12509                           ;menuhelper.c: 186:     _delay((unsigned long)((30)*(4000000UL/4000.0)));
 12510  1413  3027               	movlw	39
 12511  1414  0140               	movlb	0	; select bank0
 12512  1415  00AB               	movwf	??_paging
 12513  1416  30F5               	movlw	245
 12514  1417                     u9427:	
 12515  1417  0B89               	decfsz	9,f
 12516  1418  2C17               	goto	u9427
 12517  1419  0BAB               	decfsz	??_paging,f
 12518  141A  2C17               	goto	u9427
 12519                           
 12520                           ;menuhelper.c: 187:    }
 12521  141B  0140               	movlb	0	; select bank0
 12522  141C  300C               	movlw	12
 12523  141D  0AAF               	incf	paging@n,f
 12524  141E  022F               	subwf	paging@n,w
 12525  141F  1803               	btfsc	3,0
 12526  1420  2C3D               	goto	l681
 12527  1421  2C10               	goto	l7598
 12528  1422                     l7606:	
 12529  1422  3002               	movlw	2
 12530  1423  0140               	movlb	0	; select bank0
 12531  1424  062D               	xorwf	paging@dir,w
 12532  1425  1D03               	btfss	3,2
 12533  1426  2C3D               	goto	l681
 12534  1427  082E               	movf	paging@currentPage,w
 12535  1428  1903               	btfsc	3,2
 12536  1429  2C3D               	goto	l681
 12537                           
 12538                           ;menuhelper.c: 191:    currentPage--;
 12539  142A  03AE               	decf	paging@currentPage,f
 12540                           
 12541                           ;menuhelper.c: 192:    for(n = 0; n < 12; n++) {
 12542  142B  01AF               	clrf	paging@n
 12543  142C                     l7618:	
 12544                           
 12545                           ;menuhelper.c: 193:     OLED_command(0x10 | 0x08 | 0x04);;
 12546  142C  301C               	movlw	28
 12547  142D  237D  3190         	fcall	_OLED_command
 12548                           
 12549                           ;menuhelper.c: 194:     _delay((unsigned long)((30)*(4000000UL/4000.0)));
 12550  142F  3027               	movlw	39
 12551  1430  0140               	movlb	0	; select bank0
 12552  1431  00AB               	movwf	??_paging
 12553  1432  30F5               	movlw	245
 12554  1433                     u9437:	
 12555  1433  0B89               	decfsz	9,f
 12556  1434  2C33               	goto	u9437
 12557  1435  0BAB               	decfsz	??_paging,f
 12558  1436  2C33               	goto	u9437
 12559                           
 12560                           ;menuhelper.c: 195:    }
 12561  1437  0140               	movlb	0	; select bank0
 12562  1438  300C               	movlw	12
 12563  1439  0AAF               	incf	paging@n,f
 12564  143A  022F               	subwf	paging@n,w
 12565  143B  1C03               	skipc
 12566  143C  2C2C               	goto	l7618
 12567  143D                     l681:	
 12568                           
 12569                           ;menuhelper.c: 200:  PIE0bits.IOCIE = 1;
 12570  143D  014E               	movlb	14	; select bank14
 12571  143E  1616               	bsf	22,4	;volatile
 12572                           
 12573                           ;menuhelper.c: 202:  return currentPage;
 12574  143F  0140               	movlb	0	; select bank0
 12575  1440  082E               	movf	paging@currentPage,w
 12576  1441  0008               	return
 12577  1442                     __end_of_paging:	
 12578  1442                     __ptext14:	
 12579 ;; *************** function _statusView *****************
 12580 ;; Defined at:
 12581 ;;		line 19 in file "menu.c"
 12582 ;; Parameters:    Size  Location     Type
 12583 ;;		None
 12584 ;; Auto vars:     Size  Location     Type
 12585 ;;		None
 12586 ;; Return value:  Size  Location     Type
 12587 ;;                  1    wreg      unsigned char 
 12588 ;; Registers used:
 12589 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12590 ;; Tracked objects:
 12591 ;;		On entry : 3F/1
 12592 ;;		On exit  : 3F/2
 12593 ;;		Unchanged: 0/0
 12594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12597 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12598 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12599 ;;Total ram usage:        1 bytes
 12600 ;; Hardware stack levels used:    1
 12601 ;; Hardware stack levels required when called:    7
 12602 ;; This function calls:
 12603 ;;		_OLED_print_xy
 12604 ;;		_ftoa
 12605 ;;		_itoa
 12606 ;;		_paging
 12607 ;;		_returnToPage
 12608 ;; This function is called by:
 12609 ;;		_menu
 12610 ;; This function uses a non-reentrant model
 12611 ;;
 12612                           
 12613                           
 12614                           ;psect for function _statusView
 12615  1442                     _statusView:	
 12616                           
 12617                           ;menu.c: 21:  static uint8_t page = 0;;menu.c: 22:  static uint8_t prevSensorStat = 1;;m
      +                          enu.c: 25:  if (prevSensorStat != data.status.SENSOR_OK) {
 12618                           
 12619                           ;incstack = 0
 12620                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12621  1442  3073               	movlw	115
 12622  1443  0086               	movwf	6
 12623  1444  3027               	movlw	39
 12624  1445  0087               	movwf	7
 12625  1446  0C01               	rrf	1,w
 12626  1447  00C7               	movwf	??_statusView^(0+128)
 12627  1448  0CC7               	rrf	??_statusView^(0+128),f
 12628  1449  0C47               	rrf	??_statusView^(0+128),w
 12629  144A  3901               	andlw	1
 12630  144B  0143               	movlb	3	; select bank3
 12631  144C  066F               	xorwf	statusView@prevSensorStat^(0+384),w
 12632  144D  1903               	skipnz
 12633  144E  2C60               	goto	l7716
 12634                           
 12635                           ;menu.c: 26:   prevSensorStat = data.status.SENSOR_OK;
 12636  144F  3073               	movlw	115
 12637  1450  0086               	movwf	6
 12638  1451  3000               	movlw	0
 12639  1452  1981               	btfsc	1,3
 12640  1453  3001               	movlw	1
 12641  1454  00EF               	movwf	statusView@prevSensorStat^(0+384)
 12642                           
 12643                           ;menu.c: 28:   if (data.status.SENSOR_OK)
 12644  1455  1D81               	btfss	1,3
 12645  1456  2C5A               	goto	l7712
 12646                           
 12647                           ;menu.c: 29:    page = 0;
 12648  1457  0142               	movlb	2	; select bank2
 12649  1458  01EF               	clrf	statusView@page^(0+256)
 12650  1459  2C5D               	goto	l7714
 12651  145A                     l7712:	
 12652                           
 12653                           ;menu.c: 31:    page = 3;
 12654  145A  3003               	movlw	3
 12655  145B  0142               	movlb	2	; select bank2
 12656  145C  00EF               	movwf	statusView@page^(0+256)
 12657  145D                     l7714:	
 12658                           
 12659                           ;menu.c: 32:   g_screenRefresh = 1;
 12660  145D  0140               	movlb	0	; select bank0
 12661  145E  01EB               	clrf	_g_screenRefresh
 12662  145F  0AEB               	incf	_g_screenRefresh,f
 12663  1460                     l7716:	
 12664                           
 12665                           ;menu.c: 35:  returnToPage(page);
 12666  1460  0142               	movlb	2	; select bank2
 12667  1461  086F               	movf	statusView@page^(0+256),w
 12668  1462  235B  3190         	fcall	_returnToPage
 12669                           
 12670                           ;menu.c: 36:  if (g_screenRefresh) {
 12671  1464  0140               	movlb	0	; select bank0
 12672  1465  086B               	movf	_g_screenRefresh,w
 12673  1466  1903               	btfsc	3,2
 12674  1467  2C79               	goto	l7722
 12675  1468  307E               	movlw	low (STR_1| (0+32768))
 12676                           
 12677                           ;menu.c: 37:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   PowerVers
      +                          ion:");
 12678  1469  01AF               	clrf	OLED_print_xy@row
 12679  146A  00B0               	movwf	OLED_print_xy@s
 12680  146B  30B0               	movlw	high (STR_1| (0+32768))
 12681  146C  00B1               	movwf	OLED_print_xy@s+1
 12682  146D  3000               	movlw	0
 12683  146E  2730  3190         	fcall	_OLED_print_xy
 12684  1470  30A9               	movlw	low (STR_2| (0+32768))
 12685                           
 12686                           ;menu.c: 38:   OLED_print_xy(4 * 12, 1, "Sensor:");
 12687  1471  01AF               	clrf	OLED_print_xy@row
 12688  1472  0AAF               	incf	OLED_print_xy@row,f
 12689  1473  00B0               	movwf	OLED_print_xy@s
 12690  1474  30B3               	movlw	high (STR_2| (0+32768))
 12691  1475  00B1               	movwf	OLED_print_xy@s+1
 12692  1476  3030               	movlw	48
 12693  1477  2730  3190         	fcall	_OLED_print_xy
 12694  1479                     l7722:	
 12695                           
 12696                           ;menu.c: 40:  if (data.status.AUX_SENSOR_OK) {
 12697  1479  3073               	movlw	115
 12698  147A  0086               	movwf	6
 12699  147B  3027               	movlw	39
 12700  147C  0087               	movwf	7
 12701                           
 12702                           ;menu.c: 41:   ftoa(str, data.tempC, 5, 1);
 12703  147D  304A               	movlw	74
 12704  147E  1E01               	btfss	1,4
 12705  147F  2CCB               	goto	L10
 12706  1480  0086               	movwf	6
 12707  1481  3F40               	moviw [0]fsr1
 12708  1482  0141               	movlb	1	; select bank1
 12709  1483  00BA               	movwf	ftoa@fValue^(0+128)
 12710  1484  3F41               	moviw [1]fsr1
 12711  1485  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 12712  1486  3F42               	moviw [2]fsr1
 12713  1487  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 12714  1488  3F43               	moviw [3]fsr1
 12715  1489  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 12716  148A  3005               	movlw	5
 12717  148B  00BE               	movwf	ftoa@width^(0+128)
 12718  148C  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 12719  148D  01BF               	clrf	ftoa@prec^(0+128)
 12720  148E  0ABF               	incf	ftoa@prec^(0+128),f
 12721  148F  318A  221B  3190   	fcall	_ftoa
 12722                           
 12723                           ;menu.c: 42:   OLED_print_xy(0, 1, str);
 12724  1492  0140               	movlb	0	; select bank0
 12725  1493  30E5               	movlw	low _str
 12726  1494  01AF               	clrf	OLED_print_xy@row
 12727  1495  0AAF               	incf	OLED_print_xy@row,f
 12728  1496  00B0               	movwf	OLED_print_xy@s
 12729  1497  3001               	movlw	high _str
 12730  1498  00B1               	movwf	OLED_print_xy@s+1
 12731  1499  3000               	movlw	0
 12732  149A  2730  3190         	fcall	_OLED_print_xy
 12733  149C  30DA               	movlw	low (STR_3| (0+32768))
 12734                           
 12735                           ;menu.c: 43:   OLED_print_xy(5, 1, "\001 \002");
 12736  149D  01AF               	clrf	OLED_print_xy@row
 12737  149E  0AAF               	incf	OLED_print_xy@row,f
 12738  149F  00B0               	movwf	OLED_print_xy@s
 12739  14A0  30B3               	movlw	high (STR_3| (0+32768))
 12740  14A1  00B1               	movwf	OLED_print_xy@s+1
 12741  14A2  3005               	movlw	5
 12742  14A3  2730               	fcall	_OLED_print_xy
 12743                           
 12744                           ;menu.c: 44:   ftoa(str, data.tempAux, 3, 0);
 12745  14A4  304A               	movlw	74
 12746  14A5  0086               	movwf	6
 12747  14A6  3027               	movlw	39
 12748  14A7  0087               	movwf	7
 12749  14A8  314D               	addfsr 1,13
 12750  14A9  3F40               	moviw [0]fsr1
 12751  14AA  0141               	movlb	1	; select bank1
 12752  14AB  00BA               	movwf	ftoa@fValue^(0+128)
 12753  14AC  3F41               	moviw [1]fsr1
 12754  14AD  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 12755  14AE  3F42               	moviw [2]fsr1
 12756  14AF  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 12757  14B0  3F43               	moviw [3]fsr1
 12758  14B1  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 12759  14B2  3003               	movlw	3
 12760  14B3  00BE               	movwf	ftoa@width^(0+128)
 12761  14B4  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 12762  14B5  01BF               	clrf	ftoa@prec^(0+128)
 12763  14B6  318A  221B  3190   	fcall	_ftoa
 12764                           
 12765                           ;menu.c: 45:   OLED_print_xy(8, 1, str);
 12766  14B9  0140               	movlb	0	; select bank0
 12767  14BA  30E5               	movlw	low _str
 12768  14BB  01AF               	clrf	OLED_print_xy@row
 12769  14BC  0AAF               	incf	OLED_print_xy@row,f
 12770  14BD  00B0               	movwf	OLED_print_xy@s
 12771  14BE  3001               	movlw	high _str
 12772  14BF  00B1               	movwf	OLED_print_xy@s+1
 12773  14C0  3008               	movlw	8
 12774  14C1  2730  3190         	fcall	_OLED_print_xy
 12775  14C3  30F8               	movlw	low (STR_4| (0+32768))
 12776                           
 12777                           ;menu.c: 46:   OLED_print_xy(11, 1, "\001");
 12778  14C4  01AF               	clrf	OLED_print_xy@row
 12779  14C5  0AAF               	incf	OLED_print_xy@row,f
 12780  14C6  00B0               	movwf	OLED_print_xy@s
 12781  14C7  30B3               	movlw	high (STR_4| (0+32768))
 12782  14C8  00B1               	movwf	OLED_print_xy@s+1
 12783  14C9  300B               	movlw	11
 12784  14CA  2CF0               	goto	L9
 12785  14CB                     L10:	
 12786                           ;menu.c: 48:   ftoa(str, data.tempC, 5, 1);
 12787                           
 12788                           ;menu.c: 47:  } else {
 12789                           
 12790  14CB  0086               	movwf	6
 12791  14CC  3027               	movlw	39
 12792  14CD  0087               	movwf	7
 12793  14CE  3F40               	moviw [0]fsr1
 12794  14CF  0141               	movlb	1	; select bank1
 12795  14D0  00BA               	movwf	ftoa@fValue^(0+128)
 12796  14D1  3F41               	moviw [1]fsr1
 12797  14D2  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 12798  14D3  3F42               	moviw [2]fsr1
 12799  14D4  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 12800  14D5  3F43               	moviw [3]fsr1
 12801  14D6  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 12802  14D7  3005               	movlw	5
 12803  14D8  00BE               	movwf	ftoa@width^(0+128)
 12804  14D9  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 12805  14DA  01BF               	clrf	ftoa@prec^(0+128)
 12806  14DB  0ABF               	incf	ftoa@prec^(0+128),f
 12807  14DC  318A  221B  3190   	fcall	_ftoa
 12808                           
 12809                           ;menu.c: 49:   OLED_print_xy(0, 1, str);
 12810  14DF  0140               	movlb	0	; select bank0
 12811  14E0  30E5               	movlw	low _str
 12812  14E1  01AF               	clrf	OLED_print_xy@row
 12813  14E2  0AAF               	incf	OLED_print_xy@row,f
 12814  14E3  00B0               	movwf	OLED_print_xy@s
 12815  14E4  3001               	movlw	high _str
 12816  14E5  00B1               	movwf	OLED_print_xy@s+1
 12817  14E6  3000               	movlw	0
 12818  14E7  2730  3190         	fcall	_OLED_print_xy
 12819  14E9  3089               	movlw	low (STR_5| (0+32768))
 12820                           
 12821                           ;menu.c: 50:   OLED_print_xy(5, 1, "\001      ");
 12822  14EA  01AF               	clrf	OLED_print_xy@row
 12823  14EB  0AAF               	incf	OLED_print_xy@row,f
 12824  14EC  00B0               	movwf	OLED_print_xy@s
 12825  14ED  30B3               	movlw	high (STR_5| (0+32768))
 12826  14EE  00B1               	movwf	OLED_print_xy@s+1
 12827  14EF  3005               	movlw	5
 12828  14F0                     L9:	
 12829  14F0  2730               	fcall	_OLED_print_xy
 12830                           
 12831                           ;menu.c: 52:  ftoa(str, data.relHum, 5, 1);
 12832                           
 12833                           ;menu.c: 51:  }
 12834  14F1  304A               	movlw	74
 12835  14F2  0086               	movwf	6
 12836  14F3  3027               	movlw	39
 12837  14F4  0087               	movwf	7
 12838  14F5  3144               	addfsr 1,4
 12839  14F6  3F40               	moviw [0]fsr1
 12840  14F7  0141               	movlb	1	; select bank1
 12841  14F8  00BA               	movwf	ftoa@fValue^(0+128)
 12842  14F9  3F41               	moviw [1]fsr1
 12843  14FA  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 12844  14FB  3F42               	moviw [2]fsr1
 12845  14FC  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 12846  14FD  3F43               	moviw [3]fsr1
 12847  14FE  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 12848  14FF  3005               	movlw	5
 12849  1500  00BE               	movwf	ftoa@width^(0+128)
 12850  1501  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 12851  1502  01BF               	clrf	ftoa@prec^(0+128)
 12852  1503  0ABF               	incf	ftoa@prec^(0+128),f
 12853  1504  318A  221B  3190   	fcall	_ftoa
 12854                           
 12855                           ;menu.c: 53:  OLED_print_xy(12, 1, str);
 12856  1507  0140               	movlb	0	; select bank0
 12857  1508  30E5               	movlw	low _str
 12858  1509  01AF               	clrf	OLED_print_xy@row
 12859  150A  0AAF               	incf	OLED_print_xy@row,f
 12860  150B  00B0               	movwf	OLED_print_xy@s
 12861  150C  3001               	movlw	high _str
 12862  150D  00B1               	movwf	OLED_print_xy@s+1
 12863  150E  300C               	movlw	12
 12864  150F  2730  3190         	fcall	_OLED_print_xy
 12865  1511  30C6               	movlw	low (STR_6| (0+32768))
 12866                           
 12867                           ;menu.c: 54:  OLED_print_xy(12 + 5, 1, "%     ");
 12868  1512  01AF               	clrf	OLED_print_xy@row
 12869  1513  0AAF               	incf	OLED_print_xy@row,f
 12870  1514  00B0               	movwf	OLED_print_xy@s
 12871  1515  30B3               	movlw	high (STR_6| (0+32768))
 12872  1516  00B1               	movwf	OLED_print_xy@s+1
 12873  1517  3011               	movlw	17
 12874  1518  2730               	fcall	_OLED_print_xy
 12875                           
 12876                           ;menu.c: 55:  ftoa(str, data.dewPointC, 5, 1);
 12877  1519  304A               	movlw	74
 12878  151A  0086               	movwf	6
 12879  151B  3027               	movlw	39
 12880  151C  0087               	movwf	7
 12881  151D  3148               	addfsr 1,8
 12882  151E  3F40               	moviw [0]fsr1
 12883  151F  0141               	movlb	1	; select bank1
 12884  1520  00BA               	movwf	ftoa@fValue^(0+128)
 12885  1521  3F41               	moviw [1]fsr1
 12886  1522  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 12887  1523  3F42               	moviw [2]fsr1
 12888  1524  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 12889  1525  3F43               	moviw [3]fsr1
 12890  1526  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 12891  1527  3005               	movlw	5
 12892  1528  00BE               	movwf	ftoa@width^(0+128)
 12893  1529  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 12894  152A  01BF               	clrf	ftoa@prec^(0+128)
 12895  152B  0ABF               	incf	ftoa@prec^(0+128),f
 12896  152C  318A  221B  3190   	fcall	_ftoa
 12897                           
 12898                           ;menu.c: 56:  OLED_print_xy(2 * 12, 1, str);
 12899  152F  0140               	movlb	0	; select bank0
 12900  1530  30E5               	movlw	low _str
 12901  1531  01AF               	clrf	OLED_print_xy@row
 12902  1532  0AAF               	incf	OLED_print_xy@row,f
 12903  1533  00B0               	movwf	OLED_print_xy@s
 12904  1534  3001               	movlw	high _str
 12905  1535  00B1               	movwf	OLED_print_xy@s+1
 12906  1536  3018               	movlw	24
 12907  1537  2730  3190         	fcall	_OLED_print_xy
 12908  1539  3089               	movlw	low (STR_5| (0+32768))
 12909                           
 12910                           ;menu.c: 57:  OLED_print_xy(2 * 12 + 5, 1, "\001      ");
 12911  153A  01AF               	clrf	OLED_print_xy@row
 12912  153B  0AAF               	incf	OLED_print_xy@row,f
 12913  153C  00B0               	movwf	OLED_print_xy@s
 12914  153D  30B3               	movlw	high (STR_5| (0+32768))
 12915  153E  00B1               	movwf	OLED_print_xy@s+1
 12916  153F  301D               	movlw	29
 12917  1540  2730               	fcall	_OLED_print_xy
 12918                           
 12919                           ;menu.c: 58:  ftoa(str, data.voltage, 4, 1);
 12920  1541  304A               	movlw	74
 12921  1542  0086               	movwf	6
 12922  1543  3027               	movlw	39
 12923  1544  0087               	movwf	7
 12924  1545  3151               	addfsr 1,17
 12925  1546  3F40               	moviw [0]fsr1
 12926  1547  0141               	movlb	1	; select bank1
 12927  1548  00BA               	movwf	ftoa@fValue^(0+128)
 12928  1549  3F41               	moviw [1]fsr1
 12929  154A  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 12930  154B  3F42               	moviw [2]fsr1
 12931  154C  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 12932  154D  3F43               	moviw [3]fsr1
 12933  154E  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 12934  154F  3004               	movlw	4
 12935  1550  00BE               	movwf	ftoa@width^(0+128)
 12936  1551  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 12937  1552  01BF               	clrf	ftoa@prec^(0+128)
 12938  1553  0ABF               	incf	ftoa@prec^(0+128),f
 12939  1554  318A  221B  3190   	fcall	_ftoa
 12940                           
 12941                           ;menu.c: 59:  OLED_print_xy(3 * 12, 1, str);
 12942  1557  0140               	movlb	0	; select bank0
 12943  1558  30E5               	movlw	low _str
 12944  1559  01AF               	clrf	OLED_print_xy@row
 12945  155A  0AAF               	incf	OLED_print_xy@row,f
 12946  155B  00B0               	movwf	OLED_print_xy@s
 12947  155C  3001               	movlw	high _str
 12948  155D  00B1               	movwf	OLED_print_xy@s+1
 12949  155E  3024               	movlw	36
 12950  155F  2730  3190         	fcall	_OLED_print_xy
 12951  1561  30DE               	movlw	low (STR_8| (0+32768))
 12952                           
 12953                           ;menu.c: 60:  OLED_print_xy(3 * 12 + 4, 1, "V  ");
 12954  1562  01AF               	clrf	OLED_print_xy@row
 12955  1563  0AAF               	incf	OLED_print_xy@row,f
 12956  1564  00B0               	movwf	OLED_print_xy@s
 12957  1565  30B3               	movlw	high (STR_8| (0+32768))
 12958  1566  00B1               	movwf	OLED_print_xy@s+1
 12959  1567  3028               	movlw	40
 12960  1568  2730               	fcall	_OLED_print_xy
 12961                           
 12962                           ;menu.c: 61:  ftoa(str, data.power, 4, 1);
 12963  1569  304A               	movlw	74
 12964  156A  0086               	movwf	6
 12965  156B  3027               	movlw	39
 12966  156C  0087               	movwf	7
 12967  156D  3159               	addfsr 1,25
 12968  156E  3F40               	moviw [0]fsr1
 12969  156F  0141               	movlb	1	; select bank1
 12970  1570  00BA               	movwf	ftoa@fValue^(0+128)
 12971  1571  3F41               	moviw [1]fsr1
 12972  1572  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 12973  1573  3F42               	moviw [2]fsr1
 12974  1574  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 12975  1575  3F43               	moviw [3]fsr1
 12976  1576  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 12977  1577  3004               	movlw	4
 12978  1578  00BE               	movwf	ftoa@width^(0+128)
 12979  1579  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 12980  157A  01BF               	clrf	ftoa@prec^(0+128)
 12981  157B  0ABF               	incf	ftoa@prec^(0+128),f
 12982  157C  318A  221B  3190   	fcall	_ftoa
 12983                           
 12984                           ;menu.c: 62:  OLED_print_xy(3 * 12 + 7, 1, str);
 12985  157F  0140               	movlb	0	; select bank0
 12986  1580  30E5               	movlw	low _str
 12987  1581  01AF               	clrf	OLED_print_xy@row
 12988  1582  0AAF               	incf	OLED_print_xy@row,f
 12989  1583  00B0               	movwf	OLED_print_xy@s
 12990  1584  3001               	movlw	high _str
 12991  1585  00B1               	movwf	OLED_print_xy@s+1
 12992  1586  302B               	movlw	43
 12993  1587  2730  3190         	fcall	_OLED_print_xy
 12994  1589  304E               	movlw	low ((STR_85+11)| (0+32768))
 12995                           
 12996                           ;menu.c: 63:  OLED_print_xy(3 * 12 + 11, 1, "W");
 12997  158A  01AF               	clrf	OLED_print_xy@row
 12998  158B  0AAF               	incf	OLED_print_xy@row,f
 12999  158C  00B0               	movwf	OLED_print_xy@s
 13000  158D  30B2               	movlw	high ((STR_85+11)| (0+32768))
 13001  158E  00B1               	movwf	OLED_print_xy@s+1
 13002  158F  302F               	movlw	47
 13003  1590  2730  3190         	fcall	_OLED_print_xy
 13004  1592  3003               	movlw	3
 13005                           
 13006                           ;menu.c: 64:  itoa(str, 1, 3);
 13007  1593  01A9               	clrf	itoa@value
 13008  1594  0AA9               	incf	itoa@value,f
 13009  1595  00AA               	movwf	itoa@width
 13010  1596  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 13011  1597  22C5  3190         	fcall	_itoa
 13012  1599  30E5               	movlw	low _str
 13013                           
 13014                           ;menu.c: 65:  OLED_print_xy(4 * 12 + 8, 0, str);
 13015  159A  01AF               	clrf	OLED_print_xy@row
 13016  159B  00B0               	movwf	OLED_print_xy@s
 13017  159C  3001               	movlw	high _str
 13018  159D  00B1               	movwf	OLED_print_xy@s+1
 13019  159E  3038               	movlw	56
 13020  159F  2730  3190         	fcall	_OLED_print_xy
 13021                           
 13022                           ;menu.c: 67:  if (data.status.SENSOR_OK) {
 13023  15A1  3073               	movlw	115
 13024  15A2  0086               	movwf	6
 13025  15A3  3027               	movlw	39
 13026  15A4  0087               	movwf	7
 13027  15A5  1D81               	btfss	1,3
 13028  15A6  2DC1               	goto	l7766
 13029                           
 13030                           ;menu.c: 68:   itoa(str, data.sensorVersion, 3);
 13031  15A7  304A               	movlw	74
 13032  15A8  0086               	movwf	6
 13033  15A9  314C               	addfsr 1,12
 13034  15AA  0801               	movf	1,w
 13035  15AB  00A9               	movwf	itoa@value
 13036  15AC  3003               	movlw	3
 13037  15AD  00AA               	movwf	itoa@width
 13038  15AE  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 13039  15AF  22C5  3190         	fcall	_itoa
 13040  15B1  30E5               	movlw	low _str
 13041                           
 13042                           ;menu.c: 69:   OLED_print_xy(4 * 12 + 8, 1, str);
 13043  15B2  01AF               	clrf	OLED_print_xy@row
 13044  15B3  0AAF               	incf	OLED_print_xy@row,f
 13045  15B4  00B0               	movwf	OLED_print_xy@s
 13046  15B5  3001               	movlw	high _str
 13047  15B6  00B1               	movwf	OLED_print_xy@s+1
 13048  15B7  3038               	movlw	56
 13049  15B8  2730  3190         	fcall	_OLED_print_xy
 13050                           
 13051                           ;menu.c: 70:   page = paging(page, 5);
 13052  15BA  3005               	movlw	5
 13053  15BB  00AA               	movwf	paging@lastPage
 13054  15BC  0142               	movlb	2	; select bank2
 13055  15BD  086F               	movf	statusView@page^(0+256),w
 13056  15BE  23F5               	fcall	_paging
 13057  15BF  0142               	movlb	2	; select bank2
 13058  15C0  00EF               	movwf	statusView@page^(0+256)
 13059  15C1                     l7766:	
 13060                           
 13061                           ;menu.c: 72:  return page;
 13062  15C1  0142               	movlb	2	; select bank2
 13063  15C2  086F               	movf	statusView@page^(0+256),w
 13064  15C3  0008               	return
 13065  15C4                     __end_of_statusView:	
 13066  15C4                     __ptext1:	
 13067 ;; *************** function _viewErrorMessage *****************
 13068 ;; Defined at:
 13069 ;;		line 36 in file "error.c"
 13070 ;; Parameters:    Size  Location     Type
 13071 ;;		None
 13072 ;; Auto vars:     Size  Location     Type
 13073 ;;  errorCode       1   28[BANK0 ] enum E7825
 13074 ;; Return value:  Size  Location     Type
 13075 ;;                  1    wreg      void 
 13076 ;; Registers used:
 13077 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13078 ;; Tracked objects:
 13079 ;;		On entry : 3F/2
 13080 ;;		On exit  : 3F/0
 13081 ;;		Unchanged: 0/0
 13082 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13083 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13084 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13085 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13086 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13087 ;;Total ram usage:        5 bytes
 13088 ;; Hardware stack levels used:    1
 13089 ;; Hardware stack levels required when called:    7
 13090 ;; This function calls:
 13091 ;;		_OLED_command
 13092 ;;		_OLED_print_xy
 13093 ;;		___awmod
 13094 ;;		_getPB
 13095 ;; This function is called by:
 13096 ;;		_main
 13097 ;; This function uses a non-reentrant model
 13098 ;;
 13099                           
 13100                           
 13101                           ;psect for function _viewErrorMessage
 13102  15C4                     _viewErrorMessage:	
 13103                           
 13104                           ;error.c: 38:  enum e_errorcode errorCode;;error.c: 40:  errorCode = (head == tail) ? NO
      +                          _ERROR : errorMessageQueue[tail];
 13105                           
 13106                           ;incstack = 0
 13107                           ; Regs used in _viewErrorMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13108  15C4  0141               	movlb	1	; select bank1
 13109  15C5  086D               	movf	_head^(0+128),w
 13110  15C6  0140               	movlb	0	; select bank0
 13111  15C7  0668               	xorwf	_tail,w
 13112  15C8  1903               	skipnz
 13113  15C9  2DD2               	goto	l6790
 13114  15CA  0868               	movf	_tail,w
 13115  15CB  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 13116  15CC  0086               	movwf	6
 13117  15CD  3002               	movlw	2	; select bank4/5
 13118  15CE  0087               	movwf	7
 13119  15CF  0801               	movf	1,w
 13120  15D0  00BA               	movwf	_viewErrorMessage$1387
 13121  15D1  2DD3               	goto	L2
 13122  15D2                     l6790:	
 13123  15D2  01BA               	clrf	_viewErrorMessage$1387
 13124  15D3                     L2:	
 13125  15D3  01BB               	clrf	_viewErrorMessage$1387+1
 13126  15D4  083A               	movf	_viewErrorMessage$1387,w
 13127  15D5  00BC               	movwf	viewErrorMessage@errorCode
 13128                           
 13129                           ;error.c: 42:  OLED_command(0x02);
 13130  15D6  3002               	movlw	2
 13131  15D7  237D  3190         	fcall	_OLED_command
 13132                           
 13133                           ;error.c: 43:  switch(errorCode) {
 13134  15D9  2F00               	goto	l6832
 13135  15DA                     l6796:	
 13136  15DA  308D               	movlw	low (STR_62| (0+32768))
 13137                           
 13138                           ;error.c: 45:   OLED_print_xy(0, 0, "Heater 1    ");
 13139  15DB  01AF               	clrf	OLED_print_xy@row
 13140  15DC  00B0               	movwf	OLED_print_xy@s
 13141  15DD  30B1               	movlw	high (STR_62| (0+32768))
 13142  15DE  00B1               	movwf	OLED_print_xy@s+1
 13143  15DF  3000               	movlw	0
 13144  15E0  2730  3190         	fcall	_OLED_print_xy
 13145  15E2  304C               	movlw	low (STR_63| (0+32768))
 13146                           
 13147                           ;error.c: 46:   OLED_print_xy(0, 1, "removed     ");
 13148  15E3  01AF               	clrf	OLED_print_xy@row
 13149  15E4  0AAF               	incf	OLED_print_xy@row,f
 13150  15E5  00B0               	movwf	OLED_print_xy@s
 13151  15E6  30B1               	movlw	high (STR_63| (0+32768))
 13152  15E7  00B1               	movwf	OLED_print_xy@s+1
 13153  15E8  3000               	movlw	0
 13154  15E9  2730  3190         	fcall	_OLED_print_xy
 13155                           
 13156                           ;error.c: 47:   break;
 13157  15EB  2F15               	goto	l6834
 13158  15EC                     l6798:	
 13159  15EC  309A               	movlw	low (STR_64| (0+32768))
 13160                           
 13161                           ;error.c: 49:   OLED_print_xy(0, 0, "Heater 2    ");
 13162  15ED  01AF               	clrf	OLED_print_xy@row
 13163  15EE  00B0               	movwf	OLED_print_xy@s
 13164  15EF  30B1               	movlw	high (STR_64| (0+32768))
 13165  15F0  00B1               	movwf	OLED_print_xy@s+1
 13166  15F1  3000               	movlw	0
 13167  15F2  2730  3190         	fcall	_OLED_print_xy
 13168  15F4  304C               	movlw	low (STR_63| (0+32768))
 13169                           
 13170                           ;error.c: 50:   OLED_print_xy(0, 1, "removed     ");
 13171  15F5  01AF               	clrf	OLED_print_xy@row
 13172  15F6  0AAF               	incf	OLED_print_xy@row,f
 13173  15F7  00B0               	movwf	OLED_print_xy@s
 13174  15F8  30B1               	movlw	high (STR_63| (0+32768))
 13175  15F9  00B1               	movwf	OLED_print_xy@s+1
 13176  15FA  3000               	movlw	0
 13177  15FB  2730  3190         	fcall	_OLED_print_xy
 13178                           
 13179                           ;error.c: 51:   break;
 13180  15FD  2F15               	goto	l6834
 13181  15FE                     l6800:	
 13182  15FE  30A7               	movlw	low (STR_66| (0+32768))
 13183                           
 13184                           ;error.c: 53:   OLED_print_xy(0, 0, "Heater 3    ");
 13185  15FF  01AF               	clrf	OLED_print_xy@row
 13186  1600  00B0               	movwf	OLED_print_xy@s
 13187  1601  30B1               	movlw	high (STR_66| (0+32768))
 13188  1602  00B1               	movwf	OLED_print_xy@s+1
 13189  1603  3000               	movlw	0
 13190  1604  2730  3190         	fcall	_OLED_print_xy
 13191  1606  304C               	movlw	low (STR_63| (0+32768))
 13192                           
 13193                           ;error.c: 54:   OLED_print_xy(0, 1, "removed     ");
 13194  1607  01AF               	clrf	OLED_print_xy@row
 13195  1608  0AAF               	incf	OLED_print_xy@row,f
 13196  1609  00B0               	movwf	OLED_print_xy@s
 13197  160A  30B1               	movlw	high (STR_63| (0+32768))
 13198  160B  00B1               	movwf	OLED_print_xy@s+1
 13199  160C  3000               	movlw	0
 13200  160D  2730  3190         	fcall	_OLED_print_xy
 13201                           
 13202                           ;error.c: 55:   break;
 13203  160F  2F15               	goto	l6834
 13204  1610                     l6802:	
 13205  1610  30B4               	movlw	low (STR_68| (0+32768))
 13206                           
 13207                           ;error.c: 57:   OLED_print_xy(0, 0, "Heater 4    ");
 13208  1611  01AF               	clrf	OLED_print_xy@row
 13209  1612  00B0               	movwf	OLED_print_xy@s
 13210  1613  30B1               	movlw	high (STR_68| (0+32768))
 13211  1614  00B1               	movwf	OLED_print_xy@s+1
 13212  1615  3000               	movlw	0
 13213  1616  2730  3190         	fcall	_OLED_print_xy
 13214  1618  304C               	movlw	low (STR_63| (0+32768))
 13215                           
 13216                           ;error.c: 58:   OLED_print_xy(0, 1, "removed     ");
 13217  1619  01AF               	clrf	OLED_print_xy@row
 13218  161A  0AAF               	incf	OLED_print_xy@row,f
 13219  161B  00B0               	movwf	OLED_print_xy@s
 13220  161C  30B1               	movlw	high (STR_63| (0+32768))
 13221  161D  00B1               	movwf	OLED_print_xy@s+1
 13222  161E  3000               	movlw	0
 13223  161F  2730  3190         	fcall	_OLED_print_xy
 13224                           
 13225                           ;error.c: 59:   break;
 13226  1621  2F15               	goto	l6834
 13227  1622                     l6804:	
 13228  1622  3032               	movlw	low (STR_70| (0+32768))
 13229                           
 13230                           ;error.c: 61:   OLED_print_xy(0, 0, "Output      ");
 13231  1623  01AF               	clrf	OLED_print_xy@row
 13232  1624  00B0               	movwf	OLED_print_xy@s
 13233  1625  30B1               	movlw	high (STR_70| (0+32768))
 13234  1626  00B1               	movwf	OLED_print_xy@s+1
 13235  1627  3000               	movlw	0
 13236  1628  2730  3190         	fcall	_OLED_print_xy
 13237  162A  3073               	movlw	low (STR_71| (0+32768))
 13238                           
 13239                           ;error.c: 62:   OLED_print_xy(0, 1, "shorted!    ");
 13240  162B  01AF               	clrf	OLED_print_xy@row
 13241  162C  0AAF               	incf	OLED_print_xy@row,f
 13242  162D  00B0               	movwf	OLED_print_xy@s
 13243  162E  30B1               	movlw	high (STR_71| (0+32768))
 13244  162F  00B1               	movwf	OLED_print_xy@s+1
 13245  1630  3000               	movlw	0
 13246  1631  2730  3190         	fcall	_OLED_print_xy
 13247                           
 13248                           ;error.c: 63:   break;
 13249  1633  2F15               	goto	l6834
 13250  1634                     l6806:	
 13251  1634  300F               	movlw	low (STR_72| (0+32768))
 13252                           
 13253                           ;error.c: 65:   OLED_print_xy(0, 0, "Overcurrent ");
 13254  1635  01AF               	clrf	OLED_print_xy@row
 13255  1636  00B0               	movwf	OLED_print_xy@s
 13256  1637  30B2               	movlw	high (STR_72| (0+32768))
 13257  1638  00B1               	movwf	OLED_print_xy@s+1
 13258  1639  3000               	movlw	0
 13259  163A  2730  3190         	fcall	_OLED_print_xy
 13260  163C  30CE               	movlw	low (STR_73| (0+32768))
 13261                           
 13262                           ;error.c: 66:   OLED_print_xy(0, 1, "detected!   ");
 13263  163D  01AF               	clrf	OLED_print_xy@row
 13264  163E  0AAF               	incf	OLED_print_xy@row,f
 13265  163F  00B0               	movwf	OLED_print_xy@s
 13266  1640  30B1               	movlw	high (STR_73| (0+32768))
 13267  1641  00B1               	movwf	OLED_print_xy@s+1
 13268  1642  3000               	movlw	0
 13269  1643  2730  3190         	fcall	_OLED_print_xy
 13270                           
 13271                           ;error.c: 67:   break;
 13272  1645  2F15               	goto	l6834
 13273  1646                     l6808:	
 13274  1646  3018               	movlw	low (STR_74| (0+32768))
 13275                           
 13276                           ;error.c: 69:   OLED_print_xy(0, 0, "Heater      ");
 13277  1647  01AF               	clrf	OLED_print_xy@row
 13278  1648  00B0               	movwf	OLED_print_xy@s
 13279  1649  30B1               	movlw	high (STR_74| (0+32768))
 13280  164A  00B1               	movwf	OLED_print_xy@s+1
 13281  164B  3000               	movlw	0
 13282  164C  2730  3190         	fcall	_OLED_print_xy
 13283  164E  301C               	movlw	low (STR_75| (0+32768))
 13284                           
 13285                           ;error.c: 70:   OLED_print_xy(0, 1, "overcurrent ");
 13286  164F  01AF               	clrf	OLED_print_xy@row
 13287  1650  0AAF               	incf	OLED_print_xy@row,f
 13288  1651  00B0               	movwf	OLED_print_xy@s
 13289  1652  30B2               	movlw	high (STR_75| (0+32768))
 13290  1653  00B1               	movwf	OLED_print_xy@s+1
 13291  1654  3000               	movlw	0
 13292  1655  2730  3190         	fcall	_OLED_print_xy
 13293                           
 13294                           ;error.c: 71:   break;
 13295  1657  2F15               	goto	l6834
 13296  1658                     l6810:	
 13297  1658  3029               	movlw	low (STR_76| (0+32768))
 13298                           
 13299                           ;error.c: 73:   OLED_print_xy(0, 0, "Supply volt.");
 13300  1659  01AF               	clrf	OLED_print_xy@row
 13301  165A  00B0               	movwf	OLED_print_xy@s
 13302  165B  30B2               	movlw	high (STR_76| (0+32768))
 13303  165C  00B1               	movwf	OLED_print_xy@s+1
 13304  165D  3000               	movlw	0
 13305  165E  2730  3190         	fcall	_OLED_print_xy
 13306  1660  30DB               	movlw	low (STR_77| (0+32768))
 13307                           
 13308                           ;error.c: 74:   OLED_print_xy(0, 1, "too high!   ");
 13309  1661  01AF               	clrf	OLED_print_xy@row
 13310  1662  0AAF               	incf	OLED_print_xy@row,f
 13311  1663  00B0               	movwf	OLED_print_xy@s
 13312  1664  30B1               	movlw	high (STR_77| (0+32768))
 13313  1665  00B1               	movwf	OLED_print_xy@s+1
 13314  1666  3000               	movlw	0
 13315  1667  2730  3190         	fcall	_OLED_print_xy
 13316                           
 13317                           ;error.c: 75:   break;
 13318  1669  2F15               	goto	l6834
 13319  166A                     l6812:	
 13320  166A  3029               	movlw	low (STR_76| (0+32768))
 13321                           
 13322                           ;error.c: 77:   OLED_print_xy(0, 0, "Supply volt.");
 13323  166B  01AF               	clrf	OLED_print_xy@row
 13324  166C  00B0               	movwf	OLED_print_xy@s
 13325  166D  30B2               	movlw	high (STR_76| (0+32768))
 13326  166E  00B1               	movwf	OLED_print_xy@s+1
 13327  166F  3000               	movlw	0
 13328  1670  2730  3190         	fcall	_OLED_print_xy
 13329  1672  3080               	movlw	low (STR_79| (0+32768))
 13330                           
 13331                           ;error.c: 78:   OLED_print_xy(0, 1, "too low!    ");
 13332  1673  01AF               	clrf	OLED_print_xy@row
 13333  1674  0AAF               	incf	OLED_print_xy@row,f
 13334  1675  00B0               	movwf	OLED_print_xy@s
 13335  1676  30B1               	movlw	high (STR_79| (0+32768))
 13336  1677  00B1               	movwf	OLED_print_xy@s+1
 13337  1678  3000               	movlw	0
 13338  1679  2730  3190         	fcall	_OLED_print_xy
 13339                           
 13340                           ;error.c: 79:   break;
 13341  167B  2F15               	goto	l6834
 13342  167C                     l6814:	
 13343  167C  3025               	movlw	low (STR_80| (0+32768))
 13344                           
 13345                           ;error.c: 81:   OLED_print_xy(0, 0, "Sensor      ");
 13346  167D  01AF               	clrf	OLED_print_xy@row
 13347  167E  00B0               	movwf	OLED_print_xy@s
 13348  167F  30B1               	movlw	high (STR_80| (0+32768))
 13349  1680  00B1               	movwf	OLED_print_xy@s+1
 13350  1681  3000               	movlw	0
 13351  1682  2730  3190         	fcall	_OLED_print_xy
 13352  1684  3066               	movlw	low (STR_81| (0+32768))
 13353                           
 13354                           ;error.c: 82:   OLED_print_xy(0, 1, "timeout     ");
 13355  1685  01AF               	clrf	OLED_print_xy@row
 13356  1686  0AAF               	incf	OLED_print_xy@row,f
 13357  1687  00B0               	movwf	OLED_print_xy@s
 13358  1688  30B1               	movlw	high (STR_81| (0+32768))
 13359  1689  00B1               	movwf	OLED_print_xy@s+1
 13360  168A  3000               	movlw	0
 13361  168B  2730  3190         	fcall	_OLED_print_xy
 13362                           
 13363                           ;error.c: 83:   break;
 13364  168D  2F15               	goto	l6834
 13365  168E                     l6816:	
 13366  168E  3050               	movlw	low (STR_82| (0+32768))
 13367                           
 13368                           ;error.c: 85:   OLED_print_xy(0, 0, "Sensor wrong");
 13369  168F  01AF               	clrf	OLED_print_xy@row
 13370  1690  00B0               	movwf	OLED_print_xy@s
 13371  1691  30B2               	movlw	high (STR_82| (0+32768))
 13372  1692  00B1               	movwf	OLED_print_xy@s+1
 13373  1693  3000               	movlw	0
 13374  1694  2730  3190         	fcall	_OLED_print_xy
 13375  1696  30C1               	movlw	low (STR_83| (0+32768))
 13376                           
 13377                           ;error.c: 86:   OLED_print_xy(0, 1, "checksum    ");
 13378  1697  01AF               	clrf	OLED_print_xy@row
 13379  1698  0AAF               	incf	OLED_print_xy@row,f
 13380  1699  00B0               	movwf	OLED_print_xy@s
 13381  169A  30B1               	movlw	high (STR_83| (0+32768))
 13382  169B  00B1               	movwf	OLED_print_xy@s+1
 13383  169C  3000               	movlw	0
 13384  169D  2730  3190         	fcall	_OLED_print_xy
 13385                           
 13386                           ;error.c: 87:   break;
 13387  169F  2F15               	goto	l6834
 13388  16A0                     l6818:	
 13389  16A0  30F5               	movlw	low (STR_84| (0+32768))
 13390                           
 13391                           ;error.c: 89:   OLED_print_xy(0, 0, "OVERCURRENT ");
 13392  16A1  01AF               	clrf	OLED_print_xy@row
 13393  16A2  00B0               	movwf	OLED_print_xy@s
 13394  16A3  30B1               	movlw	high (STR_84| (0+32768))
 13395  16A4  00B1               	movwf	OLED_print_xy@s+1
 13396  16A5  3000               	movlw	0
 13397  16A6  2730  3190         	fcall	_OLED_print_xy
 13398  16A8  3043               	movlw	low (STR_85| (0+32768))
 13399                           
 13400                           ;error.c: 90:   OLED_print_xy(0, 1, "TURN OFF NOW");
 13401  16A9  01AF               	clrf	OLED_print_xy@row
 13402  16AA  0AAF               	incf	OLED_print_xy@row,f
 13403  16AB  00B0               	movwf	OLED_print_xy@s
 13404  16AC  30B2               	movlw	high (STR_85| (0+32768))
 13405  16AD  00B1               	movwf	OLED_print_xy@s+1
 13406  16AE  3000               	movlw	0
 13407  16AF  2730  3190         	fcall	_OLED_print_xy
 13408                           
 13409                           ;error.c: 91:   break;
 13410  16B1  2F15               	goto	l6834
 13411  16B2                     l6820:	
 13412  16B2  3036               	movlw	low (STR_86| (0+32768))
 13413                           
 13414                           ;error.c: 93:   OLED_print_xy(0, 0, "VOLTAGE HIGH");
 13415  16B3  01AF               	clrf	OLED_print_xy@row
 13416  16B4  00B0               	movwf	OLED_print_xy@s
 13417  16B5  30B2               	movlw	high (STR_86| (0+32768))
 13418  16B6  00B1               	movwf	OLED_print_xy@s+1
 13419  16B7  3000               	movlw	0
 13420  16B8  2730  3190         	fcall	_OLED_print_xy
 13421  16BA  3043               	movlw	low (STR_85| (0+32768))
 13422                           
 13423                           ;error.c: 94:   OLED_print_xy(0, 1, "TURN OFF NOW");
 13424  16BB  01AF               	clrf	OLED_print_xy@row
 13425  16BC  0AAF               	incf	OLED_print_xy@row,f
 13426  16BD  00B0               	movwf	OLED_print_xy@s
 13427  16BE  30B2               	movlw	high (STR_85| (0+32768))
 13428  16BF  00B1               	movwf	OLED_print_xy@s+1
 13429  16C0  3000               	movlw	0
 13430  16C1  2730  3190         	fcall	_OLED_print_xy
 13431                           
 13432                           ;error.c: 113:   break;
 13433  16C3  2F15               	goto	l6834
 13434  16C4                     l6822:	
 13435  16C4  300F               	movlw	low (STR_72| (0+32768))
 13436                           
 13437                           ;error.c: 115:   OLED_print_xy(0, 0, "Overcurrent ");
 13438  16C5  01AF               	clrf	OLED_print_xy@row
 13439  16C6  00B0               	movwf	OLED_print_xy@s
 13440  16C7  30B2               	movlw	high (STR_72| (0+32768))
 13441  16C8  00B1               	movwf	OLED_print_xy@s+1
 13442  16C9  3000               	movlw	0
 13443  16CA  2730  3190         	fcall	_OLED_print_xy
 13444  16CC  305D               	movlw	low (STR_89| (0+32768))
 13445                           
 13446                           ;error.c: 116:   OLED_print_xy(0, 1, "Please check");
 13447  16CD  01AF               	clrf	OLED_print_xy@row
 13448  16CE  0AAF               	incf	OLED_print_xy@row,f
 13449  16CF  00B0               	movwf	OLED_print_xy@s
 13450  16D0  30B2               	movlw	high (STR_89| (0+32768))
 13451  16D1  00B1               	movwf	OLED_print_xy@s+1
 13452  16D2  3000               	movlw	0
 13453  16D3  2730  3190         	fcall	_OLED_print_xy
 13454                           
 13455                           ;error.c: 117:   if (getPB() == PB_SHORT)
 13456  16D5  275C  3190         	fcall	_getPB
 13457  16D7  3A01               	xorlw	1
 13458  16D8  1D03               	skipz
 13459  16D9  2F15               	goto	l6834
 13460                           
 13461                           ;error.c: 118:    LATCbits.LATC3 = 1;
 13462  16DA  159A               	bsf	26,3	;volatile
 13463  16DB  2F15               	goto	l6834
 13464  16DC                     l6828:	
 13465  16DC  3002               	movlw	low (STR_90| (0+32768))
 13466                           
 13467                           ;error.c: 121:   OLED_print_xy(0, 0, "Menu broken ");
 13468  16DD  01AF               	clrf	OLED_print_xy@row
 13469  16DE  00B0               	movwf	OLED_print_xy@s
 13470  16DF  30B2               	movlw	high (STR_90| (0+32768))
 13471  16E0  00B1               	movwf	OLED_print_xy@s+1
 13472  16E1  3000               	movlw	0
 13473  16E2  2730  3190         	fcall	_OLED_print_xy
 13474  16E4  303F               	movlw	low (STR_91| (0+32768))
 13475                           
 13476                           ;error.c: 122:   OLED_print_xy(0, 1, "    :-)     ");
 13477  16E5  01AF               	clrf	OLED_print_xy@row
 13478  16E6  0AAF               	incf	OLED_print_xy@row,f
 13479  16E7  00B0               	movwf	OLED_print_xy@s
 13480  16E8  30B1               	movlw	high (STR_91| (0+32768))
 13481  16E9  00B1               	movwf	OLED_print_xy@s+1
 13482  16EA  3000               	movlw	0
 13483  16EB  2730  3190         	fcall	_OLED_print_xy
 13484                           
 13485                           ;error.c: 123:   break;
 13486  16ED  2F15               	goto	l6834
 13487  16EE                     l6830:	
 13488  16EE  3059               	movlw	low (STR_92| (0+32768))
 13489                           
 13490                           ;error.c: 125:   OLED_print_xy(0, 0, "Unknown     ");
 13491  16EF  01AF               	clrf	OLED_print_xy@row
 13492  16F0  00B0               	movwf	OLED_print_xy@s
 13493  16F1  30B1               	movlw	high (STR_92| (0+32768))
 13494  16F2  00B1               	movwf	OLED_print_xy@s+1
 13495  16F3  3000               	movlw	0
 13496  16F4  2730  3190         	fcall	_OLED_print_xy
 13497  16F6  30E8               	movlw	low (STR_93| (0+32768))
 13498                           
 13499                           ;error.c: 126:   OLED_print_xy(0, 1, "error code  ");
 13500  16F7  01AF               	clrf	OLED_print_xy@row
 13501  16F8  0AAF               	incf	OLED_print_xy@row,f
 13502  16F9  00B0               	movwf	OLED_print_xy@s
 13503  16FA  30B1               	movlw	high (STR_93| (0+32768))
 13504  16FB  00B1               	movwf	OLED_print_xy@s+1
 13505  16FC  3000               	movlw	0
 13506  16FD  2730  3190         	fcall	_OLED_print_xy
 13507                           
 13508                           ;error.c: 127:  }
 13509  16FF  2F15               	goto	l6834
 13510  1700                     l6832:	
 13511  1700  083C               	movf	viewErrorMessage@errorCode,w
 13512  1701  00B8               	movwf	??_viewErrorMessage
 13513  1702  01B9               	clrf	??_viewErrorMessage+1
 13514                           
 13515                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13516                           ; Switch size 1, requested type "speed"
 13517                           ; Number of cases is 1, Range of values is 0 to 0
 13518                           ; switch strategies available:
 13519                           ; Name         Instructions Cycles
 13520                           ; simple_byte            4     3 (average)
 13521                           ; direct_byte            8     6 (fixed)
 13522                           ; jumptable            260     6 (fixed)
 13523                           ;	Chosen strategy is simple_byte
 13524  1703  0839               	movf	??_viewErrorMessage+1,w
 13525  1704  3A00               	xorlw	0	; case 0
 13526  1705  1903               	skipnz
 13527  1706  2F08               	goto	l8884
 13528  1707  2EEE               	goto	l6830
 13529  1708                     l8884:	
 13530                           
 13531                           ; Switch size 1, requested type "speed"
 13532                           ; Number of cases is 15, Range of values is 1 to 15
 13533                           ; switch strategies available:
 13534                           ; Name         Instructions Cycles
 13535                           ; direct_byte           39     9 (fixed)
 13536                           ; simple_byte           46    24 (average)
 13537                           ; jumptable            263     9 (fixed)
 13538                           ;	Chosen strategy is direct_byte
 13539  1708  0838               	movf	??_viewErrorMessage,w
 13540  1709  3EFF               	addlw	-1
 13541  170A  1C03               	skipc
 13542  170B  2EEE               	goto	l6830
 13543  170C  0084               	movwf	4
 13544  170D  300F               	movlw	15
 13545  170E  0204               	subwf	4,w
 13546  170F  1803               	skipnc
 13547  1710  2EEE               	goto	l6830
 13548  1711  31A8               	movlp	high S8886
 13549  1712  3504               	lslf	4,w
 13550  1713  3E00               	addlw	low S8886
 13551  1714  0082               	movwf	2
 13552  1715                     l6834:	
 13553                           
 13554                           ;error.c: 129:  if (getPB() == PB_SHORT) {
 13555  1715  275C  3190         	fcall	_getPB
 13556  1717  3A01               	xorlw	1
 13557  1718  1D03               	skipz
 13558  1719  2F2D               	goto	l6840
 13559                           
 13560                           ;error.c: 130:   if (head != tail)
 13561  171A  0141               	movlb	1	; select bank1
 13562  171B  086D               	movf	_head^(0+128),w
 13563  171C  0140               	movlb	0	; select bank0
 13564  171D  0668               	xorwf	_tail,w
 13565  171E  1903               	skipnz
 13566  171F  2F2D               	goto	l6840
 13567                           
 13568                           ;error.c: 131:    tail = (tail + 1) % 10;
 13569  1720  0868               	movf	_tail,w
 13570  1721  00A6               	movwf	___awmod@dividend
 13571  1722  01A7               	clrf	___awmod@dividend+1
 13572  1723  0AA6               	incf	___awmod@dividend,f
 13573  1724  1903               	skipnz
 13574  1725  0AA7               	incf	___awmod@dividend+1,f
 13575  1726  300A               	movlw	10
 13576  1727  00A4               	movwf	___awmod@divisor
 13577  1728  01A5               	clrf	___awmod@divisor+1
 13578  1729  31A7  2757         	fcall	___awmod
 13579  172B  0824               	movf	?___awmod,w
 13580  172C  00E8               	movwf	_tail
 13581  172D                     l6840:	
 13582                           
 13583                           ;error.c: 134:  g_screenRefresh = 1;
 13584  172D  01EB               	clrf	_g_screenRefresh
 13585  172E  0AEB               	incf	_g_screenRefresh,f
 13586  172F  0008               	return
 13587  1730                     __end_of_viewErrorMessage:	
 13588  1730                     __ptext28:	
 13589 ;; *************** function _OLED_print_xy *****************
 13590 ;; Defined at:
 13591 ;;		line 152 in file "oled.c"
 13592 ;; Parameters:    Size  Location     Type
 13593 ;;  col             1    wreg     unsigned char 
 13594 ;;  row             1   15[BANK0 ] unsigned char 
 13595 ;;  s               2   16[BANK0 ] PTR unsigned char 
 13596 ;;		 -> STR_93(13), STR_92(13), STR_91(13), STR_90(13), 
 13597 ;;		 -> STR_89(13), STR_88(13), STR_87(13), STR_86(13), 
 13598 ;;		 -> STR_85(13), STR_84(13), STR_83(13), STR_82(13), 
 13599 ;;		 -> STR_81(13), STR_80(13), STR_79(13), STR_78(13), 
 13600 ;;		 -> STR_77(13), STR_76(13), STR_75(13), STR_74(13), 
 13601 ;;		 -> STR_73(13), STR_72(13), STR_71(13), STR_70(13), 
 13602 ;;		 -> STR_69(13), STR_68(13), STR_67(13), STR_66(13), 
 13603 ;;		 -> STR_65(13), STR_64(13), STR_63(13), STR_62(13), 
 13604 ;;		 -> STR_61(9), STR_60(2), STR_59(13), STR_58(9), 
 13605 ;;		 -> STR_57(2), STR_56(13), STR_55(3), STR_54(7), 
 13606 ;;		 -> STR_53(13), STR_52(10), STR_51(10), STR_50(3), 
 13607 ;;		 -> STR_49(7), STR_48(37), STR_47(8), STR_46(2), 
 13608 ;;		 -> STR_45(13), STR_44(13), STR_43(13), STR_42(8), 
 13609 ;;		 -> STR_41(2), STR_40(7), STR_39(6), STR_38(7), 
 13610 ;;		 -> STR_37(6), STR_36(13), STR_35(8), STR_34(13), 
 13611 ;;		 -> STR_33(13), STR_32(13), STR_31(13), STR_30(13), 
 13612 ;;		 -> STR_29(13), STR_28(13), STR_27(9), STR_26(8), 
 13613 ;;		 -> STR_25(5), STR_24(8), STR_23(5), STR_22(13), 
 13614 ;;		 -> STR_21(13), STR_20(13), STR_19(13), STR_18(13), 
 13615 ;;		 -> STR_17(9), STR_16(3), STR_15(3), STR_14(13), 
 13616 ;;		 -> STR_13(13), STR_12(3), STR_11(3), STR_10(4), 
 13617 ;;		 -> STR_9(2), STR_8(4), STR_7(8), STR_6(7), 
 13618 ;;		 -> STR_5(8), STR_4(2), STR_3(4), str(10), 
 13619 ;;		 -> STR_2(8), STR_1(57), 
 13620 ;; Auto vars:     Size  Location     Type
 13621 ;;  col             1   23[BANK0 ] unsigned char 
 13622 ;;  row_offsets     4   19[BANK0 ] unsigned char [4]
 13623 ;; Return value:  Size  Location     Type
 13624 ;;                  1    wreg      void 
 13625 ;; Registers used:
 13626 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13627 ;; Tracked objects:
 13628 ;;		On entry : 3F/0
 13629 ;;		On exit  : 3F/0
 13630 ;;		Unchanged: 0/0
 13631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13632 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13633 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13634 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13635 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13636 ;;Total ram usage:        9 bytes
 13637 ;; Hardware stack levels used:    1
 13638 ;; Hardware stack levels required when called:    6
 13639 ;; This function calls:
 13640 ;;		_OLED_command
 13641 ;;		_OLED_write
 13642 ;; This function is called by:
 13643 ;;		_statusView
 13644 ;;		_channelView
 13645 ;;		_channelSetup
 13646 ;;		_setOutputPower
 13647 ;;		_setLensDia
 13648 ;;		_setup
 13649 ;;		_setDPOffset
 13650 ;;		_setSkyTemp
 13651 ;;		_setFudgeFactor
 13652 ;;		_viewErrorMessage
 13653 ;; This function uses a non-reentrant model
 13654 ;;
 13655                           
 13656                           
 13657                           ;psect for function _OLED_print_xy
 13658  1730                     _OLED_print_xy:	
 13659                           
 13660                           ;incstack = 0
 13661                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13662                           ;OLED_print_xy@col stored from wreg
 13663  1730  00B7               	movwf	OLED_print_xy@col
 13664                           
 13665                           ;oled.c: 152: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 153: {;oled.
      +                          c: 154:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 13666  1731  0144               	movlb	4	; select bank4
 13667  1732  0865               	movf	(OLED_print_xy@F7972+3)^(0+512),w
 13668  1733  0140               	movlb	0	; select bank0
 13669  1734  00B6               	movwf	OLED_print_xy@row_offsets+3
 13670  1735  0144               	movlb	4	; select bank4
 13671  1736  0864               	movf	(OLED_print_xy@F7972+2)^(0+512),w
 13672  1737  0140               	movlb	0	; select bank0
 13673  1738  00B5               	movwf	OLED_print_xy@row_offsets+2
 13674  1739  0144               	movlb	4	; select bank4
 13675  173A  0863               	movf	(OLED_print_xy@F7972+1)^(0+512),w
 13676  173B  0140               	movlb	0	; select bank0
 13677  173C  00B4               	movwf	OLED_print_xy@row_offsets+1
 13678  173D  0144               	movlb	4	; select bank4
 13679  173E  0862               	movf	OLED_print_xy@F7972^(0+512),w
 13680  173F  0140               	movlb	0	; select bank0
 13681  1740  00B3               	movwf	OLED_print_xy@row_offsets
 13682                           
 13683                           ;oled.c: 156:  OLED_command(0x80 | (col + row_offsets[row]));
 13684  1741  082F               	movf	OLED_print_xy@row,w
 13685  1742  3E33               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 13686  1743  0086               	movwf	6
 13687  1744  0187               	clrf	7
 13688  1745  0801               	movf	1,w
 13689  1746  0737               	addwf	OLED_print_xy@col,w
 13690  1747  3880               	iorlw	128
 13691  1748  237D  3190         	fcall	_OLED_command
 13692  174A                     l5240:	
 13693                           ;oled.c: 157:  while (*s != (char) ((void*)0)) {
 13694                           
 13695                           
 13696                           ;oled.c: 157:  while (*s != (char) ((void*)0)) {
 13697  174A  0830               	movf	OLED_print_xy@s,w
 13698  174B  0084               	movwf	4
 13699  174C  0831               	movf	OLED_print_xy@s+1,w
 13700  174D  0085               	movwf	5
 13701  174E  0012               	moviw fsr0++
 13702  174F  1903               	btfsc	3,2
 13703  1750  0008               	return
 13704                           
 13705                           ;oled.c: 158:   OLED_write(*s++);
 13706  1751  0830               	movf	OLED_print_xy@s,w
 13707  1752  0084               	movwf	4
 13708  1753  0831               	movf	OLED_print_xy@s+1,w
 13709  1754  0085               	movwf	5
 13710  1755  0800               	movf	0,w	;code access
 13711  1756  2764  3190         	fcall	_OLED_write
 13712  1758  0AB0               	incf	OLED_print_xy@s,f
 13713  1759  1903               	skipnz
 13714  175A  0AB1               	incf	OLED_print_xy@s+1,f
 13715  175B  2F4A               	goto	l5240
 13716  175C                     __end_of_OLED_print_xy:	
 13717  175C                     __ptext19:	
 13718 ;; *************** function _getPB *****************
 13719 ;; Defined at:
 13720 ;;		line 89 in file "inputs.c"
 13721 ;; Parameters:    Size  Location     Type
 13722 ;;		None
 13723 ;; Auto vars:     Size  Location     Type
 13724 ;;  ret             1    4[BANK0 ] enum E7872
 13725 ;; Return value:  Size  Location     Type
 13726 ;;                  1    wreg      enum E7872
 13727 ;; Registers used:
 13728 ;;		wreg, status,2, status,0
 13729 ;; Tracked objects:
 13730 ;;		On entry : 3F/0
 13731 ;;		On exit  : 3F/0
 13732 ;;		Unchanged: 0/0
 13733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13735 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13736 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13737 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13738 ;;Total ram usage:        1 bytes
 13739 ;; Hardware stack levels used:    1
 13740 ;; Hardware stack levels required when called:    3
 13741 ;; This function calls:
 13742 ;;		Nothing
 13743 ;; This function is called by:
 13744 ;;		_setOutputPower
 13745 ;;		_setLensDia
 13746 ;;		_setDPOffset
 13747 ;;		_setSkyTemp
 13748 ;;		_setFudgeFactor
 13749 ;;		_viewErrorMessage
 13750 ;;		_menu
 13751 ;; This function uses a non-reentrant model
 13752 ;;
 13753                           
 13754                           
 13755                           ;psect for function _getPB
 13756  175C                     _getPB:	
 13757                           
 13758                           ;inputs.c: 91:  enum e_buttonPress ret = pbState;
 13759                           
 13760                           ;incstack = 0
 13761                           ; Regs used in _getPB: [wreg+status,2+status,0]
 13762  175C  087C               	movf	_pbState,w	;volatile
 13763  175D  00A4               	movwf	getPB@ret
 13764                           
 13765                           ;inputs.c: 92:  if (pbState != PB_WAIT)
 13766  175E  3004               	movlw	4
 13767  175F  067C               	xorwf	_pbState,w
 13768  1760  1D03               	btfss	3,2
 13769                           
 13770                           ;inputs.c: 93:   pbState = PB_NONE;
 13771  1761  01FC               	clrf	_pbState	;volatile
 13772                           
 13773                           ;inputs.c: 94:  return ret;
 13774  1762  0824               	movf	getPB@ret,w
 13775  1763  0008               	return
 13776  1764                     __end_of_getPB:	
 13777  1764                     __ptext66:	
 13778 ;; *************** function _OLED_write *****************
 13779 ;; Defined at:
 13780 ;;		line 84 in file "oled.c"
 13781 ;; Parameters:    Size  Location     Type
 13782 ;;  value           1    wreg     unsigned char 
 13783 ;; Auto vars:     Size  Location     Type
 13784 ;;  value           1    9[BANK0 ] unsigned char 
 13785 ;; Return value:  Size  Location     Type
 13786 ;;                  1    wreg      void 
 13787 ;; Registers used:
 13788 ;;		wreg, status,2, status,0, pclath, cstack
 13789 ;; Tracked objects:
 13790 ;;		On entry : 3F/0
 13791 ;;		On exit  : 3F/0
 13792 ;;		Unchanged: 0/0
 13793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13797 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13798 ;;Total ram usage:        1 bytes
 13799 ;; Hardware stack levels used:    1
 13800 ;; Hardware stack levels required when called:    5
 13801 ;; This function calls:
 13802 ;;		_OLED_send
 13803 ;;		_OLED_waitForReady
 13804 ;; This function is called by:
 13805 ;;		_OLED_print_xy
 13806 ;;		_OLED_loadSpecialChars
 13807 ;; This function uses a non-reentrant model
 13808 ;;
 13809                           
 13810                           
 13811                           ;psect for function _OLED_write
 13812  1764                     _OLED_write:	
 13813                           
 13814                           ;incstack = 0
 13815                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 13816                           ;OLED_write@value stored from wreg
 13817  1764  00A9               	movwf	OLED_write@value
 13818                           
 13819                           ;oled.c: 84: void OLED_write(uint8_t value);oled.c: 85: {;oled.c: 86:  OLED_send(value, 
      +                          1);
 13820  1765  01A7               	clrf	OLED_send@mode
 13821  1766  0AA7               	incf	OLED_send@mode,f
 13822  1767  0829               	movf	OLED_write@value,w
 13823  1768  2384  3190         	fcall	_OLED_send
 13824                           
 13825                           ;oled.c: 87:  OLED_waitForReady();
 13826  176A  2BCF               	ljmp	l4420
 13827  176B                     __end_of_OLED_write:	
 13828  176B                     __ptext23:	
 13829 ;; *************** function _getRotDir *****************
 13830 ;; Defined at:
 13831 ;;		line 79 in file "inputs.c"
 13832 ;; Parameters:    Size  Location     Type
 13833 ;;		None
 13834 ;; Auto vars:     Size  Location     Type
 13835 ;;  ret             1    4[BANK0 ] enum E7868
 13836 ;; Return value:  Size  Location     Type
 13837 ;;                  1    wreg      enum E7868
 13838 ;; Registers used:
 13839 ;;		wreg, status,2
 13840 ;; Tracked objects:
 13841 ;;		On entry : 30/1
 13842 ;;		On exit  : 3F/0
 13843 ;;		Unchanged: 0/0
 13844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13845 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13848 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13849 ;;Total ram usage:        1 bytes
 13850 ;; Hardware stack levels used:    1
 13851 ;; Hardware stack levels required when called:    3
 13852 ;; This function calls:
 13853 ;;		Nothing
 13854 ;; This function is called by:
 13855 ;;		_spinInput
 13856 ;;		_paging
 13857 ;; This function uses a non-reentrant model
 13858 ;;
 13859                           
 13860                           
 13861                           ;psect for function _getRotDir
 13862  176B                     _getRotDir:	
 13863                           
 13864                           ;inputs.c: 81:  enum e_direction ret = rotDir;
 13865                           
 13866                           ;incstack = 0
 13867                           ; Regs used in _getRotDir: [wreg+status,2]
 13868  176B  0143               	movlb	3	; select bank3
 13869  176C  0864               	movf	_rotDir^(0+384),w	;volatile
 13870  176D  0140               	movlb	0	; select bank0
 13871  176E  00A4               	movwf	getRotDir@ret
 13872                           
 13873                           ;inputs.c: 82:  rotDir = ROT_STOP;
 13874  176F  0143               	movlb	3	; select bank3
 13875  1770  01E4               	clrf	_rotDir^(0+384)	;volatile
 13876                           
 13877                           ;inputs.c: 83:  return ret;
 13878  1771  0140               	movlb	0	; select bank0
 13879  1772  0824               	movf	getRotDir@ret,w
 13880  1773  0008               	return
 13881  1774                     __end_of_getRotDir:	
 13882  1774                     __ptext18:	
 13883 ;; *************** function _spinInput *****************
 13884 ;; Defined at:
 13885 ;;		line 100 in file "inputs.c"
 13886 ;; Parameters:    Size  Location     Type
 13887 ;;  input           2   25[BANK1 ] PTR float 
 13888 ;;		 -> data.heater(124), data(166), 
 13889 ;;  min             4   27[BANK1 ] float 
 13890 ;;  max             4   31[BANK1 ] float 
 13891 ;;  step            4   35[BANK1 ] float 
 13892 ;; Auto vars:     Size  Location     Type
 13893 ;;  dir             1   39[BANK1 ] enum E7868
 13894 ;; Return value:  Size  Location     Type
 13895 ;;                  1    wreg      void 
 13896 ;; Registers used:
 13897 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13898 ;; Tracked objects:
 13899 ;;		On entry : 3F/1
 13900 ;;		On exit  : 3E/0
 13901 ;;		Unchanged: 0/0
 13902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13903 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13904 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13906 ;;      Totals:         0       0      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13907 ;;Total ram usage:       15 bytes
 13908 ;; Hardware stack levels used:    1
 13909 ;; Hardware stack levels required when called:    5
 13910 ;; This function calls:
 13911 ;;		___fladd
 13912 ;;		___flge
 13913 ;;		___flsub
 13914 ;;		_getRotDir
 13915 ;; This function is called by:
 13916 ;;		_setOutputPower
 13917 ;;		_setLensDia
 13918 ;;		_setDPOffset
 13919 ;;		_setSkyTemp
 13920 ;;		_setFudgeFactor
 13921 ;; This function uses a non-reentrant model
 13922 ;;
 13923                           
 13924                           
 13925                           ;psect for function _spinInput
 13926  1774                     _spinInput:	
 13927                           
 13928                           ;inputs.c: 100: void spinInput(float *input, float min, float max, float step);inputs.c:
      +                           101: {;inputs.c: 102:  enum e_direction dir = getRotDir();
 13929                           
 13930                           ;incstack = 0
 13931                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13932  1774  276B  3190         	fcall	_getRotDir
 13933  1776  0141               	movlb	1	; select bank1
 13934  1777  00C7               	movwf	spinInput@dir^(0+128)
 13935                           
 13936                           ;inputs.c: 104:  if ((dir == ROT_CCW) && (*input > min))
 13937  1778  3A02               	xorlw	2
 13938  1779  1D03               	btfss	3,2
 13939  177A  2FB7               	goto	l7508
 13940  177B  083E               	movf	(spinInput@min+3)^(0+128),w
 13941  177C  00B0               	movwf	(___flge@ff1+3)^(0+128)
 13942  177D  083D               	movf	(spinInput@min+2)^(0+128),w
 13943  177E  00AF               	movwf	(___flge@ff1+2)^(0+128)
 13944  177F  083C               	movf	(spinInput@min+1)^(0+128),w
 13945  1780  00AE               	movwf	(___flge@ff1+1)^(0+128)
 13946  1781  083B               	movf	spinInput@min^(0+128),w
 13947  1782  00AD               	movwf	___flge@ff1^(0+128)
 13948  1783  0839               	movf	spinInput@input^(0+128),w
 13949  1784  0086               	movwf	6
 13950  1785  083A               	movf	(spinInput@input+1)^(0+128),w
 13951  1786  0087               	movwf	7
 13952  1787  3F40               	moviw [0]fsr1
 13953  1788  00B1               	movwf	___flge@ff2^(0+128)
 13954  1789  3F41               	moviw [1]fsr1
 13955  178A  00B2               	movwf	(___flge@ff2+1)^(0+128)
 13956  178B  3F42               	moviw [2]fsr1
 13957  178C  00B3               	movwf	(___flge@ff2+2)^(0+128)
 13958  178D  3F43               	moviw [3]fsr1
 13959  178E  00B4               	movwf	(___flge@ff2+3)^(0+128)
 13960  178F  318E  26B1  3190   	fcall	___flge
 13961  1792  1803               	btfsc	3,0
 13962  1793  2FB7               	goto	l7508
 13963                           
 13964                           ;inputs.c: 105:   *input -= step;
 13965  1794  0846               	movf	(spinInput@step+3)^(0+128),w
 13966  1795  00AB               	movwf	(___flsub@a+3)^(0+128)
 13967  1796  0845               	movf	(spinInput@step+2)^(0+128),w
 13968  1797  00AA               	movwf	(___flsub@a+2)^(0+128)
 13969  1798  0844               	movf	(spinInput@step+1)^(0+128),w
 13970  1799  00A9               	movwf	(___flsub@a+1)^(0+128)
 13971  179A  0843               	movf	spinInput@step^(0+128),w
 13972  179B  00A8               	movwf	___flsub@a^(0+128)
 13973  179C  0839               	movf	spinInput@input^(0+128),w
 13974  179D  0086               	movwf	6
 13975  179E  083A               	movf	(spinInput@input+1)^(0+128),w
 13976  179F  0087               	movwf	7
 13977  17A0  3F40               	moviw [0]fsr1
 13978  17A1  00AC               	movwf	___flsub@b^(0+128)
 13979  17A2  3F41               	moviw [1]fsr1
 13980  17A3  00AD               	movwf	(___flsub@b+1)^(0+128)
 13981  17A4  3F42               	moviw [2]fsr1
 13982  17A5  00AE               	movwf	(___flsub@b+2)^(0+128)
 13983  17A6  3F43               	moviw [3]fsr1
 13984  17A7  00AF               	movwf	(___flsub@b+3)^(0+128)
 13985  17A8  318F  2782         	fcall	___flsub
 13986  17AA  0839               	movf	spinInput@input^(0+128),w
 13987  17AB  0086               	movwf	6
 13988  17AC  083A               	movf	(spinInput@input+1)^(0+128),w
 13989  17AD  0087               	movwf	7
 13990  17AE  0828               	movf	?___flsub^(0+128),w
 13991  17AF  3FC0               	movwi [0]fsr1
 13992  17B0  0829               	movf	(?___flsub+1)^(0+128),w
 13993  17B1  3FC1               	movwi [1]fsr1
 13994  17B2  082A               	movf	(?___flsub+2)^(0+128),w
 13995  17B3  3FC2               	movwi [2]fsr1
 13996  17B4  082B               	movf	(?___flsub+3)^(0+128),w
 13997  17B5  3FC3               	movwi [3]fsr1
 13998  17B6  0008               	return
 13999  17B7                     l7508:	
 14000  17B7  0B47               	decfsz	spinInput@dir^(0+128),w
 14001  17B8  0008               	return
 14002  17B9  0839               	movf	spinInput@input^(0+128),w
 14003  17BA  0086               	movwf	6
 14004  17BB  083A               	movf	(spinInput@input+1)^(0+128),w
 14005  17BC  0087               	movwf	7
 14006  17BD  3F40               	moviw [0]fsr1
 14007  17BE  00AD               	movwf	___flge@ff1^(0+128)
 14008  17BF  3F41               	moviw [1]fsr1
 14009  17C0  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14010  17C1  3F42               	moviw [2]fsr1
 14011  17C2  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14012  17C3  3F43               	moviw [3]fsr1
 14013  17C4  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14014  17C5  0842               	movf	(spinInput@max+3)^(0+128),w
 14015  17C6  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14016  17C7  0841               	movf	(spinInput@max+2)^(0+128),w
 14017  17C8  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14018  17C9  0840               	movf	(spinInput@max+1)^(0+128),w
 14019  17CA  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14020  17CB  083F               	movf	spinInput@max^(0+128),w
 14021  17CC  00B1               	movwf	___flge@ff2^(0+128)
 14022  17CD  318E  26B1  3190   	fcall	___flge
 14023  17D0  1803               	btfsc	3,0
 14024  17D1  0008               	return
 14025                           
 14026                           ;inputs.c: 107:   *input += step;
 14027  17D2  0846               	movf	(spinInput@step+3)^(0+128),w
 14028  17D3  0140               	movlb	0	; select bank0
 14029  17D4  00DF               	movwf	___fladd@b+3
 14030  17D5  0141               	movlb	1	; select bank1
 14031  17D6  0845               	movf	(spinInput@step+2)^(0+128),w
 14032  17D7  0140               	movlb	0	; select bank0
 14033  17D8  00DE               	movwf	___fladd@b+2
 14034  17D9  0141               	movlb	1	; select bank1
 14035  17DA  0844               	movf	(spinInput@step+1)^(0+128),w
 14036  17DB  0140               	movlb	0	; select bank0
 14037  17DC  00DD               	movwf	___fladd@b+1
 14038  17DD  0141               	movlb	1	; select bank1
 14039  17DE  0843               	movf	spinInput@step^(0+128),w
 14040  17DF  0140               	movlb	0	; select bank0
 14041  17E0  00DC               	movwf	___fladd@b
 14042  17E1  0141               	movlb	1	; select bank1
 14043  17E2  0839               	movf	spinInput@input^(0+128),w
 14044  17E3  0086               	movwf	6
 14045  17E4  083A               	movf	(spinInput@input+1)^(0+128),w
 14046  17E5  0087               	movwf	7
 14047  17E6  3F40               	moviw [0]fsr1
 14048  17E7  0140               	movlb	0	; select bank0
 14049  17E8  00E0               	movwf	___fladd@a
 14050  17E9  3F41               	moviw [1]fsr1
 14051  17EA  00E1               	movwf	___fladd@a+1
 14052  17EB  3F42               	moviw [2]fsr1
 14053  17EC  00E2               	movwf	___fladd@a+2
 14054  17ED  3F43               	moviw [3]fsr1
 14055  17EE  00E3               	movwf	___fladd@a+3
 14056  17EF  31AC  24AF         	fcall	___fladd
 14057  17F1  0141               	movlb	1	; select bank1
 14058  17F2  0839               	movf	spinInput@input^(0+128),w
 14059  17F3  0086               	movwf	6
 14060  17F4  083A               	movf	(spinInput@input+1)^(0+128),w
 14061  17F5  0087               	movwf	7
 14062  17F6  0140               	movlb	0	; select bank0
 14063  17F7  085C               	movf	?___fladd,w
 14064  17F8  3FC0               	movwi [0]fsr1
 14065  17F9  085D               	movf	?___fladd+1,w
 14066  17FA  3FC1               	movwi [1]fsr1
 14067  17FB  085E               	movf	?___fladd+2,w
 14068  17FC  3FC2               	movwi [2]fsr1
 14069  17FD  085F               	movf	?___fladd+3,w
 14070  17FE  3FC3               	movwi [3]fsr1
 14071  17FF  0008               	return
 14072  1800                     __end_of_spinInput:	
 14073                           
 14074                           	psect	text13
 14075  0809                     __ptext13:	
 14076 ;; *************** function _channelView *****************
 14077 ;; Defined at:
 14078 ;;		line 78 in file "menu.c"
 14079 ;; Parameters:    Size  Location     Type
 14080 ;;		None
 14081 ;; Auto vars:     Size  Location     Type
 14082 ;;  n               1   47[BANK1 ] unsigned char 
 14083 ;; Return value:  Size  Location     Type
 14084 ;;                  1    wreg      unsigned char 
 14085 ;; Registers used:
 14086 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14087 ;; Tracked objects:
 14088 ;;		On entry : 3F/1
 14089 ;;		On exit  : 3F/2
 14090 ;;		Unchanged: 0/0
 14091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14092 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14093 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14094 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14095 ;;      Totals:         0       0       9       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14096 ;;Total ram usage:        9 bytes
 14097 ;; Hardware stack levels used:    1
 14098 ;; Hardware stack levels required when called:    7
 14099 ;; This function calls:
 14100 ;;		_OLED_print_xy
 14101 ;;		___bmul
 14102 ;;		___wmul
 14103 ;;		_ftoa
 14104 ;;		_itoa
 14105 ;;		_paging
 14106 ;;		_returnToPage
 14107 ;; This function is called by:
 14108 ;;		_menu
 14109 ;; This function uses a non-reentrant model
 14110 ;;
 14111                           
 14112                           
 14113                           ;psect for function _channelView
 14114  0809                     _channelView:	
 14115                           
 14116                           ;menu.c: 80:  static uint8_t page = 0;;menu.c: 81:  uint8_t n;;menu.c: 83:  returnToPage
      +                          (page);
 14117                           
 14118                           ;incstack = 0
 14119                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14120  0809  0142               	movlb	2	; select bank2
 14121  080A  086E               	movf	channelView@page^(0+256),w
 14122  080B  3193  235B  3188   	fcall	_returnToPage
 14123                           
 14124                           ;menu.c: 84:  if (g_screenRefresh) {
 14125  080E  0140               	movlb	0	; select bank0
 14126  080F  086B               	movf	_g_screenRefresh,w
 14127  0810  1903               	btfsc	3,2
 14128  0811  289C               	goto	l7800
 14129                           
 14130                           ;menu.c: 85:   for (n = 0; n < 4; n++) {
 14131  0812  0141               	movlb	1	; select bank1
 14132  0813  01CF               	clrf	channelView@n^(0+128)
 14133  0814                     l7776:	
 14134  0814  3004               	movlw	4
 14135  0815  024F               	subwf	channelView@n^(0+128),w
 14136  0816  1803               	btfsc	3,0
 14137  0817  289C               	goto	l7800
 14138                           
 14139                           ;menu.c: 86:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
 14140  0818  0140               	movlb	0	; select bank0
 14141  0819  30E2               	movlw	low (STR_10| (0+32768))
 14142  081A  01AF               	clrf	OLED_print_xy@row
 14143  081B  00B0               	movwf	OLED_print_xy@s
 14144  081C  30B3               	movlw	high (STR_10| (0+32768))
 14145  081D  00B1               	movwf	OLED_print_xy@s+1
 14146  081E  300C               	movlw	12
 14147  081F  00AC               	movwf	___bmul@multiplicand
 14148  0820  0141               	movlb	1	; select bank1
 14149  0821  084F               	movf	channelView@n^(0+128),w
 14150  0822  268D               	fcall	___bmul
 14151  0823  3197  2730  3188   	fcall	_OLED_print_xy
 14152                           
 14153                           ;menu.c: 87:    itoa(str, n + 1, 1);
 14154  0826  0141               	movlb	1	; select bank1
 14155  0827  084F               	movf	channelView@n^(0+128),w
 14156  0828  3E01               	addlw	1
 14157  0829  0140               	movlb	0	; select bank0
 14158  082A  00A9               	movwf	itoa@value
 14159  082B  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 14160  082C  01AA               	clrf	itoa@width
 14161  082D  0AAA               	incf	itoa@width,f
 14162  082E  3192  22C5  3188   	fcall	_itoa
 14163  0831  30E5               	movlw	low _str
 14164                           
 14165                           ;menu.c: 88:    OLED_print_xy(n * 12 + 3, 0, str);
 14166  0832  01AF               	clrf	OLED_print_xy@row
 14167  0833  00B0               	movwf	OLED_print_xy@s
 14168  0834  3001               	movlw	high _str
 14169  0835  00B1               	movwf	OLED_print_xy@s+1
 14170  0836  300C               	movlw	12
 14171  0837  00AC               	movwf	___bmul@multiplicand
 14172  0838  0141               	movlb	1	; select bank1
 14173  0839  084F               	movf	channelView@n^(0+128),w
 14174  083A  268D               	fcall	___bmul
 14175  083B  3E03               	addlw	3
 14176  083C  3197  2730  3188   	fcall	_OLED_print_xy
 14177  083F  30EF               	movlw	low (STR_11| (0+32768))
 14178                           
 14179                           ;menu.c: 89:    OLED_print_xy(n * 12 + 4, 0, ": ");
 14180  0840  01AF               	clrf	OLED_print_xy@row
 14181  0841  00B0               	movwf	OLED_print_xy@s
 14182  0842  30B3               	movlw	high (STR_11| (0+32768))
 14183  0843  00B1               	movwf	OLED_print_xy@s+1
 14184  0844  300C               	movlw	12
 14185  0845  00AC               	movwf	___bmul@multiplicand
 14186  0846  0141               	movlb	1	; select bank1
 14187  0847  084F               	movf	channelView@n^(0+128),w
 14188  0848  268D               	fcall	___bmul
 14189  0849  3E04               	addlw	4
 14190  084A  3197  2730  3188   	fcall	_OLED_print_xy
 14191                           
 14192                           ;menu.c: 90:    ftoa(str, data.heater[n].lensDia, 4, 1);
 14193  084D  0141               	movlb	1	; select bank1
 14194  084E  084F               	movf	channelView@n^(0+128),w
 14195  084F  0140               	movlb	0	; select bank0
 14196  0850  00AF               	movwf	___wmul@multiplier
 14197  0851  301F               	movlw	31
 14198  0852  01B0               	clrf	___wmul@multiplier+1
 14199  0853  00B1               	movwf	___wmul@multiplicand
 14200  0854  01B2               	clrf	___wmul@multiplicand+1
 14201  0855  2206  3188         	fcall	___wmul
 14202  0857  3089               	movlw	137
 14203  0858  0141               	movlb	1	; select bank1
 14204  0859  00C7               	movwf	??_channelView^(0+128)
 14205  085A  3027               	movlw	39
 14206  085B  00C8               	movwf	(??_channelView^(0+128)+1)
 14207  085C  0140               	movlb	0	; select bank0
 14208  085D  082F               	movf	?___wmul,w
 14209  085E  0141               	movlb	1	; select bank1
 14210  085F  0747               	addwf	??_channelView^(0+128),w
 14211  0860  0086               	movwf	6
 14212  0861  0140               	movlb	0	; select bank0
 14213  0862  0830               	movf	?___wmul+1,w
 14214  0863  0141               	movlb	1	; select bank1
 14215  0864  3D48               	addwfc	(??_channelView+1)^(0+128),w
 14216  0865  0087               	movwf	7
 14217  0866  3F40               	moviw [0]fsr1
 14218  0867  00CB               	movwf	_channelView$2760^(0+128)
 14219  0868  3F41               	moviw [1]fsr1
 14220  0869  00CC               	movwf	(_channelView$2760+1)^(0+128)
 14221  086A  3F42               	moviw [2]fsr1
 14222  086B  00CD               	movwf	(_channelView$2760+2)^(0+128)
 14223  086C  3F43               	moviw [3]fsr1
 14224  086D  00CE               	movwf	(_channelView$2760+3)^(0+128)
 14225                           
 14226                           ;menu.c: 90:    ftoa(str, data.heater[n].lensDia, 4, 1);
 14227  086E  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 14228  086F  084D               	movf	(_channelView$2760+2)^(0+128),w
 14229  0870  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 14230  0871  084C               	movf	(_channelView$2760+1)^(0+128),w
 14231  0872  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 14232  0873  084B               	movf	_channelView$2760^(0+128),w
 14233  0874  00BA               	movwf	ftoa@fValue^(0+128)
 14234  0875  3004               	movlw	4
 14235  0876  00BE               	movwf	ftoa@width^(0+128)
 14236  0877  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 14237  0878  01BF               	clrf	ftoa@prec^(0+128)
 14238  0879  0ABF               	incf	ftoa@prec^(0+128),f
 14239  087A  221B  3188         	fcall	_ftoa
 14240                           
 14241                           ;menu.c: 91:    OLED_print_xy(n * 12 + 6, 0, str);
 14242  087C  0140               	movlb	0	; select bank0
 14243  087D  30E5               	movlw	low _str
 14244  087E  01AF               	clrf	OLED_print_xy@row
 14245  087F  00B0               	movwf	OLED_print_xy@s
 14246  0880  3001               	movlw	high _str
 14247  0881  00B1               	movwf	OLED_print_xy@s+1
 14248  0882  300C               	movlw	12
 14249  0883  00AC               	movwf	___bmul@multiplicand
 14250  0884  0141               	movlb	1	; select bank1
 14251  0885  084F               	movf	channelView@n^(0+128),w
 14252  0886  268D               	fcall	___bmul
 14253  0887  3E06               	addlw	6
 14254  0888  3197  2730  3188   	fcall	_OLED_print_xy
 14255  088B  30EC               	movlw	low (STR_12| (0+32768))
 14256                           
 14257                           ;menu.c: 92:    OLED_print_xy(n * 12 + 10, 0, "\" ");
 14258  088C  01AF               	clrf	OLED_print_xy@row
 14259  088D  00B0               	movwf	OLED_print_xy@s
 14260  088E  30B3               	movlw	high (STR_12| (0+32768))
 14261  088F  00B1               	movwf	OLED_print_xy@s+1
 14262  0890  300C               	movlw	12
 14263  0891  00AC               	movwf	___bmul@multiplicand
 14264  0892  0141               	movlb	1	; select bank1
 14265  0893  084F               	movf	channelView@n^(0+128),w
 14266  0894  268D               	fcall	___bmul
 14267  0895  3E0A               	addlw	10
 14268  0896  3197  2730  3188   	fcall	_OLED_print_xy
 14269                           
 14270                           ;menu.c: 93:   }
 14271  0899  0141               	movlb	1	; select bank1
 14272  089A  0ACF               	incf	channelView@n^(0+128),f
 14273  089B  2814               	goto	l7776
 14274  089C                     l7800:	
 14275                           
 14276                           ;menu.c: 96:  for (n = 0; n < 4; n++) {
 14277  089C  0141               	movlb	1	; select bank1
 14278  089D  01CF               	clrf	channelView@n^(0+128)
 14279  089E                     l7802:	
 14280  089E  3004               	movlw	4
 14281  089F  024F               	subwf	channelView@n^(0+128),w
 14282  08A0  1803               	btfsc	3,0
 14283  08A1  29F8               	goto	l7840
 14284  08A2  29CB               	goto	l7834
 14285  08A3                     l7806:	
 14286                           
 14287                           ;menu.c: 99:    OLED_print_xy(n * 12 + 0, 1, "Please wait!");
 14288  08A3  0140               	movlb	0	; select bank0
 14289  08A4  3006               	movlw	low (STR_13| (0+32768))
 14290  08A5  01AF               	clrf	OLED_print_xy@row
 14291  08A6  0AAF               	incf	OLED_print_xy@row,f
 14292  08A7  00B0               	movwf	OLED_print_xy@s
 14293  08A8  30B3               	movlw	high (STR_13| (0+32768))
 14294  08A9  00B1               	movwf	OLED_print_xy@s+1
 14295  08AA  300C               	movlw	12
 14296  08AB  00AC               	movwf	___bmul@multiplicand
 14297  08AC  0141               	movlb	1	; select bank1
 14298  08AD  084F               	movf	channelView@n^(0+128),w
 14299  08AE  268D               	fcall	___bmul
 14300  08AF  3197  2730  3188   	fcall	_OLED_print_xy
 14301                           
 14302                           ;menu.c: 100:    break;
 14303  08B2  29F5               	goto	l7836
 14304  08B3                     l7808:	
 14305                           
 14306                           ;menu.c: 102:    OLED_print_xy(n * 12 + 0, 1, "Disabled    ");
 14307  08B3  0140               	movlb	0	; select bank0
 14308  08B4  30AB               	movlw	low (STR_14| (0+32768))
 14309  08B5  01AF               	clrf	OLED_print_xy@row
 14310  08B6  0AAF               	incf	OLED_print_xy@row,f
 14311  08B7  00B0               	movwf	OLED_print_xy@s
 14312  08B8  30B2               	movlw	high (STR_14| (0+32768))
 14313  08B9  00B1               	movwf	OLED_print_xy@s+1
 14314  08BA  300C               	movlw	12
 14315  08BB  00AC               	movwf	___bmul@multiplicand
 14316  08BC  0141               	movlb	1	; select bank1
 14317  08BD  084F               	movf	channelView@n^(0+128),w
 14318  08BE  268D               	fcall	___bmul
 14319  08BF  3197  2730  3188   	fcall	_OLED_print_xy
 14320                           
 14321                           ;menu.c: 103:    break;
 14322  08C2  29F5               	goto	l7836
 14323  08C3                     l7810:	
 14324                           
 14325                           ;menu.c: 105:    ftoa(str, data.heater[n].Patt, 4, 1);
 14326  08C3  084F               	movf	channelView@n^(0+128),w
 14327  08C4  0140               	movlb	0	; select bank0
 14328  08C5  00AF               	movwf	___wmul@multiplier
 14329  08C6  301F               	movlw	31
 14330  08C7  01B0               	clrf	___wmul@multiplier+1
 14331  08C8  00B1               	movwf	___wmul@multiplicand
 14332  08C9  01B2               	clrf	___wmul@multiplicand+1
 14333  08CA  2206  3188         	fcall	___wmul
 14334  08CC  3080               	movlw	128
 14335  08CD  0141               	movlb	1	; select bank1
 14336  08CE  00C7               	movwf	??_channelView^(0+128)
 14337  08CF  3027               	movlw	39
 14338  08D0  00C8               	movwf	(??_channelView^(0+128)+1)
 14339  08D1  0140               	movlb	0	; select bank0
 14340  08D2  082F               	movf	?___wmul,w
 14341  08D3  0141               	movlb	1	; select bank1
 14342  08D4  0747               	addwf	??_channelView^(0+128),w
 14343  08D5  0086               	movwf	6
 14344  08D6  0140               	movlb	0	; select bank0
 14345  08D7  0830               	movf	?___wmul+1,w
 14346  08D8  0141               	movlb	1	; select bank1
 14347  08D9  3D48               	addwfc	(??_channelView+1)^(0+128),w
 14348  08DA  0087               	movwf	7
 14349  08DB  3F40               	moviw [0]fsr1
 14350  08DC  00CB               	movwf	_channelView$2760^(0+128)
 14351  08DD  3F41               	moviw [1]fsr1
 14352  08DE  00CC               	movwf	(_channelView$2760+1)^(0+128)
 14353  08DF  3F42               	moviw [2]fsr1
 14354  08E0  00CD               	movwf	(_channelView$2760+2)^(0+128)
 14355  08E1  3F43               	moviw [3]fsr1
 14356  08E2  00CE               	movwf	(_channelView$2760+3)^(0+128)
 14357                           
 14358                           ;menu.c: 105:    ftoa(str, data.heater[n].Patt, 4, 1);
 14359  08E3  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 14360  08E4  084D               	movf	(_channelView$2760+2)^(0+128),w
 14361  08E5  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 14362  08E6  084C               	movf	(_channelView$2760+1)^(0+128),w
 14363  08E7  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 14364  08E8  084B               	movf	_channelView$2760^(0+128),w
 14365  08E9  00BA               	movwf	ftoa@fValue^(0+128)
 14366  08EA  3004               	movlw	4
 14367  08EB  00BE               	movwf	ftoa@width^(0+128)
 14368  08EC  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 14369  08ED  01BF               	clrf	ftoa@prec^(0+128)
 14370  08EE  0ABF               	incf	ftoa@prec^(0+128),f
 14371  08EF  221B  3188         	fcall	_ftoa
 14372                           
 14373                           ;menu.c: 107:    OLED_print_xy(n * 12 + 0, 1, str);
 14374  08F1  0140               	movlb	0	; select bank0
 14375  08F2  30E5               	movlw	low _str
 14376  08F3  01AF               	clrf	OLED_print_xy@row
 14377  08F4  0AAF               	incf	OLED_print_xy@row,f
 14378  08F5  00B0               	movwf	OLED_print_xy@s
 14379  08F6  3001               	movlw	high _str
 14380  08F7  00B1               	movwf	OLED_print_xy@s+1
 14381  08F8  300C               	movlw	12
 14382  08F9  00AC               	movwf	___bmul@multiplicand
 14383  08FA  0141               	movlb	1	; select bank1
 14384  08FB  084F               	movf	channelView@n^(0+128),w
 14385  08FC  268D               	fcall	___bmul
 14386  08FD  3197  2730  3188   	fcall	_OLED_print_xy
 14387                           
 14388                           ;menu.c: 111:    if (data.heater[n].mode == MODE_AUTO) {
 14389  0900  0141               	movlb	1	; select bank1
 14390  0901  084F               	movf	channelView@n^(0+128),w
 14391  0902  0140               	movlb	0	; select bank0
 14392  0903  00AF               	movwf	___wmul@multiplier
 14393  0904  301F               	movlw	31
 14394  0905  01B0               	clrf	___wmul@multiplier+1
 14395  0906  00B1               	movwf	___wmul@multiplicand
 14396  0907  01B2               	clrf	___wmul@multiplicand+1
 14397  0908  2206  3188         	fcall	___wmul
 14398  090A  3091               	movlw	145
 14399  090B  0141               	movlb	1	; select bank1
 14400  090C  00C7               	movwf	??_channelView^(0+128)
 14401  090D  3027               	movlw	39
 14402  090E  00C8               	movwf	(??_channelView^(0+128)+1)
 14403  090F  0140               	movlb	0	; select bank0
 14404  0910  082F               	movf	?___wmul,w
 14405  0911  0141               	movlb	1	; select bank1
 14406  0912  0747               	addwf	??_channelView^(0+128),w
 14407  0913  0086               	movwf	6
 14408  0914  0140               	movlb	0	; select bank0
 14409  0915  0830               	movf	?___wmul+1,w
 14410  0916  0141               	movlb	1	; select bank1
 14411  0917  3D48               	addwfc	(??_channelView+1)^(0+128),w
 14412  0918  0087               	movwf	7
 14413  0919  0B01               	decfsz	1,w
 14414  091A  297A               	goto	l7822
 14415                           
 14416                           ;menu.c: 112:     OLED_print_xy(n * 12 + 4, 1, " (");
 14417  091B  0140               	movlb	0	; select bank0
 14418  091C  30F2               	movlw	low (STR_15| (0+32768))
 14419  091D  01AF               	clrf	OLED_print_xy@row
 14420  091E  0AAF               	incf	OLED_print_xy@row,f
 14421  091F  00B0               	movwf	OLED_print_xy@s
 14422  0920  30B3               	movlw	high (STR_15| (0+32768))
 14423  0921  00B1               	movwf	OLED_print_xy@s+1
 14424  0922  300C               	movlw	12
 14425  0923  00AC               	movwf	___bmul@multiplicand
 14426  0924  0141               	movlb	1	; select bank1
 14427  0925  084F               	movf	channelView@n^(0+128),w
 14428  0926  268D               	fcall	___bmul
 14429  0927  3E04               	addlw	4
 14430  0928  3197  2730  3188   	fcall	_OLED_print_xy
 14431                           
 14432                           ;menu.c: 113:     ftoa(str, data.heater[n].Preq, 4,1);
 14433  092B  0141               	movlb	1	; select bank1
 14434  092C  084F               	movf	channelView@n^(0+128),w
 14435  092D  0140               	movlb	0	; select bank0
 14436  092E  00AF               	movwf	___wmul@multiplier
 14437  092F  301F               	movlw	31
 14438  0930  01B0               	clrf	___wmul@multiplier+1
 14439  0931  00B1               	movwf	___wmul@multiplicand
 14440  0932  01B2               	clrf	___wmul@multiplicand+1
 14441  0933  2206  3188         	fcall	___wmul
 14442  0935  307C               	movlw	124
 14443  0936  0141               	movlb	1	; select bank1
 14444  0937  00C7               	movwf	??_channelView^(0+128)
 14445  0938  3027               	movlw	39
 14446  0939  00C8               	movwf	(??_channelView^(0+128)+1)
 14447  093A  0140               	movlb	0	; select bank0
 14448  093B  082F               	movf	?___wmul,w
 14449  093C  0141               	movlb	1	; select bank1
 14450  093D  0747               	addwf	??_channelView^(0+128),w
 14451  093E  0086               	movwf	6
 14452  093F  0140               	movlb	0	; select bank0
 14453  0940  0830               	movf	?___wmul+1,w
 14454  0941  0141               	movlb	1	; select bank1
 14455  0942  3D48               	addwfc	(??_channelView+1)^(0+128),w
 14456  0943  0087               	movwf	7
 14457  0944  3F40               	moviw [0]fsr1
 14458  0945  00CB               	movwf	_channelView$2760^(0+128)
 14459  0946  3F41               	moviw [1]fsr1
 14460  0947  00CC               	movwf	(_channelView$2760+1)^(0+128)
 14461  0948  3F42               	moviw [2]fsr1
 14462  0949  00CD               	movwf	(_channelView$2760+2)^(0+128)
 14463  094A  3F43               	moviw [3]fsr1
 14464  094B  00CE               	movwf	(_channelView$2760+3)^(0+128)
 14465                           
 14466                           ;menu.c: 113:     ftoa(str, data.heater[n].Preq, 4,1);
 14467  094C  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 14468  094D  084D               	movf	(_channelView$2760+2)^(0+128),w
 14469  094E  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 14470  094F  084C               	movf	(_channelView$2760+1)^(0+128),w
 14471  0950  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 14472  0951  084B               	movf	_channelView$2760^(0+128),w
 14473  0952  00BA               	movwf	ftoa@fValue^(0+128)
 14474  0953  3004               	movlw	4
 14475  0954  00BE               	movwf	ftoa@width^(0+128)
 14476  0955  30E5               	movlw	(low (_str| (0+256)))& (0+255)
 14477  0956  01BF               	clrf	ftoa@prec^(0+128)
 14478  0957  0ABF               	incf	ftoa@prec^(0+128),f
 14479  0958  221B  3188         	fcall	_ftoa
 14480                           
 14481                           ;menu.c: 114:     OLED_print_xy(n * 12 + 6, 1, str);
 14482  095A  0140               	movlb	0	; select bank0
 14483  095B  30E5               	movlw	low _str
 14484  095C  01AF               	clrf	OLED_print_xy@row
 14485  095D  0AAF               	incf	OLED_print_xy@row,f
 14486  095E  00B0               	movwf	OLED_print_xy@s
 14487  095F  3001               	movlw	high _str
 14488  0960  00B1               	movwf	OLED_print_xy@s+1
 14489  0961  300C               	movlw	12
 14490  0962  00AC               	movwf	___bmul@multiplicand
 14491  0963  0141               	movlb	1	; select bank1
 14492  0964  084F               	movf	channelView@n^(0+128),w
 14493  0965  268D               	fcall	___bmul
 14494  0966  3E06               	addlw	6
 14495  0967  3197  2730  3188   	fcall	_OLED_print_xy
 14496  096A  30F5               	movlw	low (STR_16| (0+32768))
 14497                           
 14498                           ;menu.c: 115:     OLED_print_xy(n * 12 + 10, 1, "W)");
 14499  096B  01AF               	clrf	OLED_print_xy@row
 14500  096C  0AAF               	incf	OLED_print_xy@row,f
 14501  096D  00B0               	movwf	OLED_print_xy@s
 14502  096E  30B3               	movlw	high (STR_16| (0+32768))
 14503  096F  00B1               	movwf	OLED_print_xy@s+1
 14504  0970  300C               	movlw	12
 14505  0971  00AC               	movwf	___bmul@multiplicand
 14506  0972  0141               	movlb	1	; select bank1
 14507  0973  084F               	movf	channelView@n^(0+128),w
 14508  0974  268D               	fcall	___bmul
 14509  0975  3E0A               	addlw	10
 14510  0976  3197  2730  3188   	fcall	_OLED_print_xy
 14511                           
 14512                           ;menu.c: 116:    } else {
 14513  0979  29F5               	goto	l7836
 14514  097A                     l7822:	
 14515                           
 14516                           ;menu.c: 117:     OLED_print_xy(n * 12 + 4, 1, "W manual");
 14517  097A  0140               	movlb	0	; select bank0
 14518  097B  3070               	movlw	low (STR_17| (0+32768))
 14519  097C  01AF               	clrf	OLED_print_xy@row
 14520  097D  0AAF               	incf	OLED_print_xy@row,f
 14521  097E  00B0               	movwf	OLED_print_xy@s
 14522  097F  30B3               	movlw	high (STR_17| (0+32768))
 14523  0980  00B1               	movwf	OLED_print_xy@s+1
 14524  0981  300C               	movlw	12
 14525  0982  00AC               	movwf	___bmul@multiplicand
 14526  0983  0141               	movlb	1	; select bank1
 14527  0984  084F               	movf	channelView@n^(0+128),w
 14528  0985  268D               	fcall	___bmul
 14529  0986  3E04               	addlw	4
 14530  0987  3197  2730  3188   	fcall	_OLED_print_xy
 14531  098A  29F5               	goto	l7836
 14532  098B                     l7824:	
 14533                           
 14534                           ;menu.c: 121:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
 14535  098B  0140               	movlb	0	; select bank0
 14536  098C  3020               	movlw	low (STR_18| (0+32768))
 14537  098D  01AF               	clrf	OLED_print_xy@row
 14538  098E  0AAF               	incf	OLED_print_xy@row,f
 14539  098F  00B0               	movwf	OLED_print_xy@s
 14540  0990  30B3               	movlw	high (STR_18| (0+32768))
 14541  0991  00B1               	movwf	OLED_print_xy@s+1
 14542  0992  300C               	movlw	12
 14543  0993  00AC               	movwf	___bmul@multiplicand
 14544  0994  0141               	movlb	1	; select bank1
 14545  0995  084F               	movf	channelView@n^(0+128),w
 14546  0996  268D               	fcall	___bmul
 14547  0997  3197  2730  3188   	fcall	_OLED_print_xy
 14548                           
 14549                           ;menu.c: 122:    break;
 14550  099A  29F5               	goto	l7836
 14551  099B                     l7826:	
 14552                           
 14553                           ;menu.c: 124:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
 14554  099B  0140               	movlb	0	; select bank0
 14555  099C  309E               	movlw	low (STR_19| (0+32768))
 14556  099D  01AF               	clrf	OLED_print_xy@row
 14557  099E  0AAF               	incf	OLED_print_xy@row,f
 14558  099F  00B0               	movwf	OLED_print_xy@s
 14559  09A0  30B2               	movlw	high (STR_19| (0+32768))
 14560  09A1  00B1               	movwf	OLED_print_xy@s+1
 14561  09A2  300C               	movlw	12
 14562  09A3  00AC               	movwf	___bmul@multiplicand
 14563  09A4  0141               	movlb	1	; select bank1
 14564  09A5  084F               	movf	channelView@n^(0+128),w
 14565  09A6  268D               	fcall	___bmul
 14566  09A7  3197  2730  3188   	fcall	_OLED_print_xy
 14567                           
 14568                           ;menu.c: 125:    break;
 14569  09AA  29F5               	goto	l7836
 14570  09AB                     l7828:	
 14571                           
 14572                           ;menu.c: 127:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
 14573  09AB  0140               	movlb	0	; select bank0
 14574  09AC  3013               	movlw	low (STR_20| (0+32768))
 14575  09AD  01AF               	clrf	OLED_print_xy@row
 14576  09AE  0AAF               	incf	OLED_print_xy@row,f
 14577  09AF  00B0               	movwf	OLED_print_xy@s
 14578  09B0  30B3               	movlw	high (STR_20| (0+32768))
 14579  09B1  00B1               	movwf	OLED_print_xy@s+1
 14580  09B2  300C               	movlw	12
 14581  09B3  00AC               	movwf	___bmul@multiplicand
 14582  09B4  0141               	movlb	1	; select bank1
 14583  09B5  084F               	movf	channelView@n^(0+128),w
 14584  09B6  268D               	fcall	___bmul
 14585  09B7  3197  2730  3188   	fcall	_OLED_print_xy
 14586                           
 14587                           ;menu.c: 128:    break;
 14588  09BA  29F5               	goto	l7836
 14589  09BB                     l7830:	
 14590                           
 14591                           ;menu.c: 130:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
 14592  09BB  0140               	movlb	0	; select bank0
 14593  09BC  303A               	movlw	low (STR_21| (0+32768))
 14594  09BD  01AF               	clrf	OLED_print_xy@row
 14595  09BE  0AAF               	incf	OLED_print_xy@row,f
 14596  09BF  00B0               	movwf	OLED_print_xy@s
 14597  09C0  30B3               	movlw	high (STR_21| (0+32768))
 14598  09C1  00B1               	movwf	OLED_print_xy@s+1
 14599  09C2  300C               	movlw	12
 14600  09C3  00AC               	movwf	___bmul@multiplicand
 14601  09C4  0141               	movlb	1	; select bank1
 14602  09C5  084F               	movf	channelView@n^(0+128),w
 14603  09C6  268D               	fcall	___bmul
 14604  09C7  3197  2730  3188   	fcall	_OLED_print_xy
 14605                           
 14606                           ;menu.c: 131:    break;
 14607  09CA  29F5               	goto	l7836
 14608  09CB                     l7834:	
 14609  09CB  084F               	movf	channelView@n^(0+128),w
 14610  09CC  0140               	movlb	0	; select bank0
 14611  09CD  00AF               	movwf	___wmul@multiplier
 14612  09CE  301F               	movlw	31
 14613  09CF  01B0               	clrf	___wmul@multiplier+1
 14614  09D0  00B1               	movwf	___wmul@multiplicand
 14615  09D1  01B2               	clrf	___wmul@multiplicand+1
 14616  09D2  2206  3188         	fcall	___wmul
 14617  09D4  3092               	movlw	146
 14618  09D5  0141               	movlb	1	; select bank1
 14619  09D6  00C7               	movwf	??_channelView^(0+128)
 14620  09D7  3027               	movlw	39
 14621  09D8  00C8               	movwf	(??_channelView^(0+128)+1)
 14622  09D9  0140               	movlb	0	; select bank0
 14623  09DA  082F               	movf	?___wmul,w
 14624  09DB  0141               	movlb	1	; select bank1
 14625  09DC  0747               	addwf	??_channelView^(0+128),w
 14626  09DD  0086               	movwf	6
 14627  09DE  0140               	movlb	0	; select bank0
 14628  09DF  0830               	movf	?___wmul+1,w
 14629  09E0  0141               	movlb	1	; select bank1
 14630  09E1  3D48               	addwfc	(??_channelView+1)^(0+128),w
 14631  09E2  0087               	movwf	7
 14632  09E3  0801               	movf	1,w
 14633  09E4  00C9               	movwf	(??_channelView+2)^(0+128)
 14634  09E5  01CA               	clrf	((??_channelView+2)^(0+128)+1)
 14635                           
 14636                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14637                           ; Switch size 1, requested type "speed"
 14638                           ; Number of cases is 1, Range of values is 0 to 0
 14639                           ; switch strategies available:
 14640                           ; Name         Instructions Cycles
 14641                           ; simple_byte            4     3 (average)
 14642                           ; direct_byte            8     6 (fixed)
 14643                           ; jumptable            260     6 (fixed)
 14644                           ;	Chosen strategy is simple_byte
 14645  09E6  084A               	movf	(??_channelView+3)^(0+128),w
 14646  09E7  3A00               	xorlw	0	; case 0
 14647  09E8  1903               	skipnz
 14648  09E9  29EB               	goto	l8888
 14649  09EA  29BB               	goto	l7830
 14650  09EB                     l8888:	
 14651                           
 14652                           ; Switch size 1, requested type "speed"
 14653                           ; Number of cases is 6, Range of values is 0 to 5
 14654                           ; switch strategies available:
 14655                           ; Name         Instructions Cycles
 14656                           ; direct_byte           18     6 (fixed)
 14657                           ; simple_byte           19    10 (average)
 14658                           ; jumptable            260     6 (fixed)
 14659                           ;	Chosen strategy is direct_byte
 14660  09EB  0849               	movf	(??_channelView+2)^(0+128),w
 14661  09EC  0084               	movwf	4
 14662  09ED  3006               	movlw	6
 14663  09EE  0204               	subwf	4,w
 14664  09EF  1803               	skipnc
 14665  09F0  29BB               	goto	l7830
 14666  09F1  31A0               	movlp	high S8890
 14667  09F2  3504               	lslf	4,w
 14668  09F3  3E00               	addlw	low S8890
 14669  09F4  0082               	movwf	2
 14670  09F5                     l7836:	
 14671                           
 14672                           ;menu.c: 133:  }
 14673  09F5  0141               	movlb	1	; select bank1
 14674  09F6  0ACF               	incf	channelView@n^(0+128),f
 14675  09F7  289E               	goto	l7802
 14676  09F8                     l7840:	
 14677                           
 14678                           ;menu.c: 134:  page = paging(page, 4);
 14679  09F8  3004               	movlw	4
 14680  09F9  0140               	movlb	0	; select bank0
 14681  09FA  00AA               	movwf	paging@lastPage
 14682  09FB  0142               	movlb	2	; select bank2
 14683  09FC  086E               	movf	channelView@page^(0+256),w
 14684  09FD  3193  23F5         	fcall	_paging
 14685  09FF  0142               	movlb	2	; select bank2
 14686  0A00  00EE               	movwf	channelView@page^(0+256)
 14687                           
 14688                           ;menu.c: 135:  selectedChannel = page;
 14689  0A01  0141               	movlb	1	; select bank1
 14690  0A02  00EE               	movwf	_selectedChannel^(0+128)
 14691                           
 14692                           ;menu.c: 137:  return page;
 14693  0A03  0142               	movlb	2	; select bank2
 14694  0A04  086E               	movf	channelView@page^(0+256),w
 14695  0A05  0008               	return
 14696  0A06                     __end_of_channelView:	
 14697  0A06                     __ptext59:	
 14698 ;; *************** function ___wmul *****************
 14699 ;; Defined at:
 14700 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 14701 ;; Parameters:    Size  Location     Type
 14702 ;;  multiplier      2   15[BANK0 ] unsigned int 
 14703 ;;  multiplicand    2   17[BANK0 ] unsigned int 
 14704 ;; Auto vars:     Size  Location     Type
 14705 ;;  product         2   19[BANK0 ] unsigned int 
 14706 ;; Return value:  Size  Location     Type
 14707 ;;                  2   15[BANK0 ] unsigned int 
 14708 ;; Registers used:
 14709 ;;		wreg, status,2, status,0
 14710 ;; Tracked objects:
 14711 ;;		On entry : 3F/0
 14712 ;;		On exit  : 3F/0
 14713 ;;		Unchanged: 0/0
 14714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14715 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14716 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14718 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14719 ;;Total ram usage:        6 bytes
 14720 ;; Hardware stack levels used:    1
 14721 ;; Hardware stack levels required when called:    3
 14722 ;; This function calls:
 14723 ;;		Nothing
 14724 ;; This function is called by:
 14725 ;;		_initGlobalData
 14726 ;;		_channelView
 14727 ;;		_channelSetup
 14728 ;;		_setOutputPower
 14729 ;;		_setLensDia
 14730 ;;		_getNextState
 14731 ;;		_returnToPage
 14732 ;;		_checkChannelStatus
 14733 ;;		_calcRequiredPower
 14734 ;;		_channelThing
 14735 ;;		_ftoa
 14736 ;;		_qsort
 14737 ;; This function uses a non-reentrant model
 14738 ;;
 14739                           
 14740                           
 14741                           ;psect for function ___wmul
 14742  0A06                     ___wmul:	
 14743                           
 14744                           ;incstack = 0
 14745                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 14746  0A06  01B3               	clrf	___wmul@product
 14747  0A07  01B4               	clrf	___wmul@product+1
 14748  0A08                     l4760:	
 14749  0A08  1C2F               	btfss	___wmul@multiplier,0
 14750  0A09  2A0E               	goto	l4764
 14751  0A0A  0831               	movf	___wmul@multiplicand,w
 14752  0A0B  07B3               	addwf	___wmul@product,f
 14753  0A0C  0832               	movf	___wmul@multiplicand+1,w
 14754  0A0D  3DB4               	addwfc	___wmul@product+1,f
 14755  0A0E                     l4764:	
 14756  0A0E  35B1               	lslf	___wmul@multiplicand,f
 14757  0A0F  0DB2               	rlf	___wmul@multiplicand+1,f
 14758  0A10  36B0               	lsrf	___wmul@multiplier+1,f
 14759  0A11  0CAF               	rrf	___wmul@multiplier,f
 14760  0A12  082F               	movf	___wmul@multiplier,w
 14761  0A13  0430               	iorwf	___wmul@multiplier+1,w
 14762  0A14  1D03               	btfss	3,2
 14763  0A15  2A08               	goto	l4760
 14764  0A16  0834               	movf	___wmul@product+1,w
 14765  0A17  00B0               	movwf	?___wmul+1
 14766  0A18  0833               	movf	___wmul@product,w
 14767  0A19  00AF               	movwf	?___wmul
 14768  0A1A  0008               	return
 14769  0A1B                     __end_of___wmul:	
 14770  0A1B                     __ptext27:	
 14771 ;; *************** function _ftoa *****************
 14772 ;; Defined at:
 14773 ;;		line 8 in file "common.c"
 14774 ;; Parameters:    Size  Location     Type
 14775 ;;  str             1    wreg     PTR unsigned char 
 14776 ;;		 -> str(10), 
 14777 ;;  fValue          4   26[BANK1 ] float 
 14778 ;;  width           1   30[BANK1 ] unsigned char 
 14779 ;;  prec            1   31[BANK1 ] unsigned char 
 14780 ;; Auto vars:     Size  Location     Type
 14781 ;;  str             1   38[BANK1 ] PTR unsigned char 
 14782 ;;		 -> str(10), 
 14783 ;;  pos             1   37[BANK1 ] unsigned char 
 14784 ;;  w               1   36[BANK1 ] unsigned char 
 14785 ;;  intValue        1   35[BANK1 ] unsigned char 
 14786 ;;  sign            1   34[BANK1 ] unsigned char 
 14787 ;;  len             1   33[BANK1 ] unsigned char 
 14788 ;; Return value:  Size  Location     Type
 14789 ;;                  1    wreg      void 
 14790 ;; Registers used:
 14791 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14792 ;; Tracked objects:
 14793 ;;		On entry : 3F/1
 14794 ;;		On exit  : 3F/1
 14795 ;;		Unchanged: 0/0
 14796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14797 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14798 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14799 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14800 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14801 ;;Total ram usage:       13 bytes
 14802 ;; Hardware stack levels used:    1
 14803 ;; Hardware stack levels required when called:    5
 14804 ;; This function calls:
 14805 ;;		___fldiv
 14806 ;;		___flge
 14807 ;;		___flmul
 14808 ;;		___flsub
 14809 ;;		___fltol
 14810 ;;		___wmul
 14811 ;;		___xxtofl
 14812 ;; This function is called by:
 14813 ;;		_statusView
 14814 ;;		_channelView
 14815 ;;		_channelSetup
 14816 ;;		_setOutputPower
 14817 ;;		_setLensDia
 14818 ;;		_setup
 14819 ;;		_setDPOffset
 14820 ;;		_setSkyTemp
 14821 ;;		_setFudgeFactor
 14822 ;; This function uses a non-reentrant model
 14823 ;;
 14824                           
 14825                           
 14826                           ;psect for function _ftoa
 14827  0A1B                     _ftoa:	
 14828                           
 14829                           ;incstack = 0
 14830                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14831                           ;ftoa@str stored from wreg
 14832  0A1B  00C6               	movwf	ftoa@str^(0+128)
 14833                           
 14834                           ;common.c: 8: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          9: {;common.c: 10:  uint8_t len = 1;
 14835  0A1C  01C1               	clrf	ftoa@len^(0+128)
 14836  0A1D  0AC1               	incf	ftoa@len^(0+128),f
 14837                           
 14838                           ;common.c: 12:  uint8_t pos = 0;
 14839  0A1E  01C5               	clrf	ftoa@pos^(0+128)
 14840                           
 14841                           ;common.c: 14:  uint8_t sign = 0;
 14842  0A1F  01C2               	clrf	ftoa@sign^(0+128)
 14843                           
 14844                           ;common.c: 16:  if (fValue < 0) {
 14845  0A20  083D               	movf	(ftoa@fValue+3)^(0+128),w
 14846  0A21  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14847  0A22  083C               	movf	(ftoa@fValue+2)^(0+128),w
 14848  0A23  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14849  0A24  083B               	movf	(ftoa@fValue+1)^(0+128),w
 14850  0A25  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14851  0A26  083A               	movf	ftoa@fValue^(0+128),w
 14852  0A27  00AD               	movwf	___flge@ff1^(0+128)
 14853  0A28  01B1               	clrf	___flge@ff2^(0+128)
 14854  0A29  01B2               	clrf	(___flge@ff2+1)^(0+128)
 14855  0A2A  01B3               	clrf	(___flge@ff2+2)^(0+128)
 14856  0A2B  01B4               	clrf	(___flge@ff2+3)^(0+128)
 14857  0A2C  26B1  3188         	fcall	___flge
 14858  0A2E  1803               	btfsc	3,0
 14859  0A2F  2A5C               	goto	l7546
 14860                           
 14861                           ;common.c: 17:   fValue *= -1;
 14862  0A30  30BF               	movlw	191
 14863  0A31  0140               	movlb	0	; select bank0
 14864  0A32  00C6               	movwf	___flmul@b+3
 14865  0A33  3080               	movlw	128
 14866  0A34  00C5               	movwf	___flmul@b+2
 14867  0A35  01C4               	clrf	___flmul@b+1
 14868  0A36  01C3               	clrf	___flmul@b
 14869  0A37  0141               	movlb	1	; select bank1
 14870  0A38  083D               	movf	(ftoa@fValue+3)^(0+128),w
 14871  0A39  0140               	movlb	0	; select bank0
 14872  0A3A  00CA               	movwf	___flmul@a+3
 14873  0A3B  0141               	movlb	1	; select bank1
 14874  0A3C  083C               	movf	(ftoa@fValue+2)^(0+128),w
 14875  0A3D  0140               	movlb	0	; select bank0
 14876  0A3E  00C9               	movwf	___flmul@a+2
 14877  0A3F  0141               	movlb	1	; select bank1
 14878  0A40  083B               	movf	(ftoa@fValue+1)^(0+128),w
 14879  0A41  0140               	movlb	0	; select bank0
 14880  0A42  00C8               	movwf	___flmul@a+1
 14881  0A43  0141               	movlb	1	; select bank1
 14882  0A44  083A               	movf	ftoa@fValue^(0+128),w
 14883  0A45  0140               	movlb	0	; select bank0
 14884  0A46  00C7               	movwf	___flmul@a
 14885  0A47  319E  2635  3188   	fcall	___flmul
 14886  0A4A  0846               	movf	?___flmul+3,w
 14887  0A4B  0141               	movlb	1	; select bank1
 14888  0A4C  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 14889  0A4D  0140               	movlb	0	; select bank0
 14890  0A4E  0845               	movf	?___flmul+2,w
 14891  0A4F  0141               	movlb	1	; select bank1
 14892  0A50  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 14893  0A51  0140               	movlb	0	; select bank0
 14894  0A52  0844               	movf	?___flmul+1,w
 14895  0A53  0141               	movlb	1	; select bank1
 14896  0A54  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 14897  0A55  0140               	movlb	0	; select bank0
 14898  0A56  0843               	movf	?___flmul,w
 14899  0A57  0141               	movlb	1	; select bank1
 14900  0A58  00BA               	movwf	ftoa@fValue^(0+128)
 14901                           
 14902                           ;common.c: 18:   sign = 1;
 14903  0A59  01C2               	clrf	ftoa@sign^(0+128)
 14904  0A5A  0AC2               	incf	ftoa@sign^(0+128),f
 14905                           
 14906                           ;common.c: 19:   width--;
 14907  0A5B  03BE               	decf	ftoa@width^(0+128),f
 14908  0A5C                     l7546:	
 14909                           
 14910                           ;common.c: 21:  while(fValue >= 10.0) {
 14911  0A5C  083D               	movf	(ftoa@fValue+3)^(0+128),w
 14912  0A5D  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14913  0A5E  083C               	movf	(ftoa@fValue+2)^(0+128),w
 14914  0A5F  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14915  0A60  083B               	movf	(ftoa@fValue+1)^(0+128),w
 14916  0A61  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14917  0A62  083A               	movf	ftoa@fValue^(0+128),w
 14918  0A63  00AD               	movwf	___flge@ff1^(0+128)
 14919  0A64  3041               	movlw	65
 14920  0A65  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14921  0A66  3020               	movlw	32
 14922  0A67  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14923  0A68  01B2               	clrf	(___flge@ff2+1)^(0+128)
 14924  0A69  01B1               	clrf	___flge@ff2^(0+128)
 14925  0A6A  26B1  3188         	fcall	___flge
 14926  0A6C  1C03               	btfss	3,0
 14927  0A6D  2A99               	goto	l7548
 14928                           
 14929                           ;common.c: 22:   fValue /= 10;
 14930  0A6E  3041               	movlw	65
 14931  0A6F  0140               	movlb	0	; select bank0
 14932  0A70  00DF               	movwf	___fldiv@a+3
 14933  0A71  3020               	movlw	32
 14934  0A72  00DE               	movwf	___fldiv@a+2
 14935  0A73  01DD               	clrf	___fldiv@a+1
 14936  0A74  01DC               	clrf	___fldiv@a
 14937  0A75  0141               	movlb	1	; select bank1
 14938  0A76  083D               	movf	(ftoa@fValue+3)^(0+128),w
 14939  0A77  0140               	movlb	0	; select bank0
 14940  0A78  00E3               	movwf	___fldiv@b+3
 14941  0A79  0141               	movlb	1	; select bank1
 14942  0A7A  083C               	movf	(ftoa@fValue+2)^(0+128),w
 14943  0A7B  0140               	movlb	0	; select bank0
 14944  0A7C  00E2               	movwf	___fldiv@b+2
 14945  0A7D  0141               	movlb	1	; select bank1
 14946  0A7E  083B               	movf	(ftoa@fValue+1)^(0+128),w
 14947  0A7F  0140               	movlb	0	; select bank0
 14948  0A80  00E1               	movwf	___fldiv@b+1
 14949  0A81  0141               	movlb	1	; select bank1
 14950  0A82  083A               	movf	ftoa@fValue^(0+128),w
 14951  0A83  0140               	movlb	0	; select bank0
 14952  0A84  00E0               	movwf	___fldiv@b
 14953  0A85  31A5  25DA  3188   	fcall	___fldiv
 14954  0A88  085F               	movf	?___fldiv+3,w
 14955  0A89  0141               	movlb	1	; select bank1
 14956  0A8A  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 14957  0A8B  0140               	movlb	0	; select bank0
 14958  0A8C  085E               	movf	?___fldiv+2,w
 14959  0A8D  0141               	movlb	1	; select bank1
 14960  0A8E  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 14961  0A8F  0140               	movlb	0	; select bank0
 14962  0A90  085D               	movf	?___fldiv+1,w
 14963  0A91  0141               	movlb	1	; select bank1
 14964  0A92  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 14965  0A93  0140               	movlb	0	; select bank0
 14966  0A94  085C               	movf	?___fldiv,w
 14967  0A95  0141               	movlb	1	; select bank1
 14968  0A96  00BA               	movwf	ftoa@fValue^(0+128)
 14969                           
 14970                           ;common.c: 23:   len++;
 14971  0A97  0AC1               	incf	ftoa@len^(0+128),f
 14972  0A98  2A5C               	goto	l7546
 14973  0A99                     l7548:	
 14974                           
 14975                           ;common.c: 25:  w = len + prec;
 14976  0A99  0841               	movf	ftoa@len^(0+128),w
 14977  0A9A  073F               	addwf	ftoa@prec^(0+128),w
 14978  0A9B  00C4               	movwf	ftoa@w^(0+128)
 14979                           
 14980                           ;common.c: 26:  if (prec == 0)
 14981  0A9C  083F               	movf	ftoa@prec^(0+128),w
 14982  0A9D  1903               	btfsc	3,2
 14983                           
 14984                           ;common.c: 27:   width++;
 14985  0A9E  0ABE               	incf	ftoa@width^(0+128),f
 14986  0A9F                     l7556:	
 14987                           
 14988                           ;common.c: 28:  while(--width > w)
 14989  0A9F  03BE               	decf	ftoa@width^(0+128),f
 14990  0AA0  083E               	movf	ftoa@width^(0+128),w
 14991  0AA1  0244               	subwf	ftoa@w^(0+128),w
 14992  0AA2  1803               	btfsc	3,0
 14993  0AA3  2AAE               	goto	l7558
 14994                           
 14995                           ;common.c: 29:   str[pos++] = ' ';
 14996  0AA4  0845               	movf	ftoa@pos^(0+128),w
 14997  0AA5  0746               	addwf	ftoa@str^(0+128),w
 14998  0AA6  00C0               	movwf	??_ftoa^(0+128)
 14999  0AA7  0086               	movwf	6
 15000  0AA8  3001               	movlw	1	; select bank2/3
 15001  0AA9  0087               	movwf	7
 15002  0AAA  3020               	movlw	32
 15003  0AAB  0081               	movwf	1
 15004  0AAC  0AC5               	incf	ftoa@pos^(0+128),f
 15005  0AAD  2A9F               	goto	l7556
 15006  0AAE                     l7558:	
 15007                           
 15008                           ;common.c: 30:  if (sign)
 15009  0AAE  0842               	movf	ftoa@sign^(0+128),w
 15010  0AAF  1903               	btfsc	3,2
 15011  0AB0  2B35               	goto	l7578
 15012                           
 15013                           ;common.c: 31:   str[pos++] = '-';
 15014  0AB1  0845               	movf	ftoa@pos^(0+128),w
 15015  0AB2  0746               	addwf	ftoa@str^(0+128),w
 15016  0AB3  00C0               	movwf	??_ftoa^(0+128)
 15017  0AB4  0086               	movwf	6
 15018  0AB5  3001               	movlw	1	; select bank2/3
 15019  0AB6  0087               	movwf	7
 15020  0AB7  302D               	movlw	45
 15021  0AB8  2B33               	goto	L11
 15022  0AB9                     l7564:	
 15023                           
 15024                           ;common.c: 33:   intValue = fValue;
 15025  0AB9  083D               	movf	(ftoa@fValue+3)^(0+128),w
 15026  0ABA  00B3               	movwf	(___fltol@f1+3)^(0+128)
 15027  0ABB  083C               	movf	(ftoa@fValue+2)^(0+128),w
 15028  0ABC  00B2               	movwf	(___fltol@f1+2)^(0+128)
 15029  0ABD  083B               	movf	(ftoa@fValue+1)^(0+128),w
 15030  0ABE  00B1               	movwf	(___fltol@f1+1)^(0+128)
 15031  0ABF  083A               	movf	ftoa@fValue^(0+128),w
 15032  0AC0  00B0               	movwf	___fltol@f1^(0+128)
 15033  0AC1  27B5  3188         	fcall	___fltol
 15034  0AC3  0830               	movf	?___fltol^(0+128),w
 15035  0AC4  00C3               	movwf	ftoa@intValue^(0+128)
 15036                           
 15037                           ;common.c: 34:   fValue = fValue * 10 - (10 * intValue);
 15038  0AC5  300A               	movlw	10
 15039  0AC6  0140               	movlb	0	; select bank0
 15040  0AC7  00B1               	movwf	___wmul@multiplicand
 15041  0AC8  01B2               	clrf	___wmul@multiplicand+1
 15042  0AC9  0141               	movlb	1	; select bank1
 15043  0ACA  0843               	movf	ftoa@intValue^(0+128),w
 15044  0ACB  0140               	movlb	0	; select bank0
 15045  0ACC  00AF               	movwf	___wmul@multiplier
 15046  0ACD  01B0               	clrf	___wmul@multiplier+1
 15047  0ACE  2206  3188         	fcall	___wmul
 15048  0AD0  082F               	movf	?___wmul,w
 15049  0AD1  00B5               	movwf	___xxtofl@val
 15050  0AD2  0830               	movf	?___wmul+1,w
 15051  0AD3  00B6               	movwf	___xxtofl@val+1
 15052  0AD4  0D89               	rlf	9,f
 15053  0AD5  3B89               	subwfb	9,f
 15054  0AD6  0989               	comf	9,f
 15055  0AD7  00B7               	movwf	___xxtofl@val+2
 15056  0AD8  00B8               	movwf	___xxtofl@val+3
 15057  0AD9  3001               	movlw	1
 15058  0ADA  2715               	fcall	___xxtofl
 15059  0ADB  0838               	movf	?___xxtofl+3,w
 15060  0ADC  0141               	movlb	1	; select bank1
 15061  0ADD  00AB               	movwf	(___flsub@a+3)^(0+128)
 15062  0ADE  0140               	movlb	0	; select bank0
 15063  0ADF  0837               	movf	?___xxtofl+2,w
 15064  0AE0  0141               	movlb	1	; select bank1
 15065  0AE1  00AA               	movwf	(___flsub@a+2)^(0+128)
 15066  0AE2  0140               	movlb	0	; select bank0
 15067  0AE3  0836               	movf	?___xxtofl+1,w
 15068  0AE4  0141               	movlb	1	; select bank1
 15069  0AE5  00A9               	movwf	(___flsub@a+1)^(0+128)
 15070  0AE6  0140               	movlb	0	; select bank0
 15071  0AE7  0835               	movf	?___xxtofl,w
 15072  0AE8  0141               	movlb	1	; select bank1
 15073  0AE9  00A8               	movwf	___flsub@a^(0+128)
 15074  0AEA  3041               	movlw	65
 15075  0AEB  0140               	movlb	0	; select bank0
 15076  0AEC  00C6               	movwf	___flmul@b+3
 15077  0AED  3020               	movlw	32
 15078  0AEE  00C5               	movwf	___flmul@b+2
 15079  0AEF  01C4               	clrf	___flmul@b+1
 15080  0AF0  01C3               	clrf	___flmul@b
 15081  0AF1  0141               	movlb	1	; select bank1
 15082  0AF2  083D               	movf	(ftoa@fValue+3)^(0+128),w
 15083  0AF3  0140               	movlb	0	; select bank0
 15084  0AF4  00CA               	movwf	___flmul@a+3
 15085  0AF5  0141               	movlb	1	; select bank1
 15086  0AF6  083C               	movf	(ftoa@fValue+2)^(0+128),w
 15087  0AF7  0140               	movlb	0	; select bank0
 15088  0AF8  00C9               	movwf	___flmul@a+2
 15089  0AF9  0141               	movlb	1	; select bank1
 15090  0AFA  083B               	movf	(ftoa@fValue+1)^(0+128),w
 15091  0AFB  0140               	movlb	0	; select bank0
 15092  0AFC  00C8               	movwf	___flmul@a+1
 15093  0AFD  0141               	movlb	1	; select bank1
 15094  0AFE  083A               	movf	ftoa@fValue^(0+128),w
 15095  0AFF  0140               	movlb	0	; select bank0
 15096  0B00  00C7               	movwf	___flmul@a
 15097  0B01  319E  2635  3188   	fcall	___flmul
 15098  0B04  0846               	movf	?___flmul+3,w
 15099  0B05  0141               	movlb	1	; select bank1
 15100  0B06  00AF               	movwf	(___flsub@b+3)^(0+128)
 15101  0B07  0140               	movlb	0	; select bank0
 15102  0B08  0845               	movf	?___flmul+2,w
 15103  0B09  0141               	movlb	1	; select bank1
 15104  0B0A  00AE               	movwf	(___flsub@b+2)^(0+128)
 15105  0B0B  0140               	movlb	0	; select bank0
 15106  0B0C  0844               	movf	?___flmul+1,w
 15107  0B0D  0141               	movlb	1	; select bank1
 15108  0B0E  00AD               	movwf	(___flsub@b+1)^(0+128)
 15109  0B0F  0140               	movlb	0	; select bank0
 15110  0B10  0843               	movf	?___flmul,w
 15111  0B11  0141               	movlb	1	; select bank1
 15112  0B12  00AC               	movwf	___flsub@b^(0+128)
 15113  0B13  2782  3188         	fcall	___flsub
 15114  0B15  082B               	movf	(?___flsub+3)^(0+128),w
 15115  0B16  00BD               	movwf	(ftoa@fValue+3)^(0+128)
 15116  0B17  082A               	movf	(?___flsub+2)^(0+128),w
 15117  0B18  00BC               	movwf	(ftoa@fValue+2)^(0+128)
 15118  0B19  0829               	movf	(?___flsub+1)^(0+128),w
 15119  0B1A  00BB               	movwf	(ftoa@fValue+1)^(0+128)
 15120  0B1B  0828               	movf	?___flsub^(0+128),w
 15121  0B1C  00BA               	movwf	ftoa@fValue^(0+128)
 15122                           
 15123                           ;common.c: 35:   str[pos++] = intValue + '0';
 15124  0B1D  0845               	movf	ftoa@pos^(0+128),w
 15125  0B1E  0746               	addwf	ftoa@str^(0+128),w
 15126  0B1F  00C0               	movwf	??_ftoa^(0+128)
 15127  0B20  0086               	movwf	6
 15128  0B21  3001               	movlw	1	; select bank2/3
 15129  0B22  0087               	movwf	7
 15130  0B23  0843               	movf	ftoa@intValue^(0+128),w
 15131  0B24  3E30               	addlw	48
 15132  0B25  0081               	movwf	1
 15133  0B26  0AC5               	incf	ftoa@pos^(0+128),f
 15134                           
 15135                           ;common.c: 36:   if (w && (w == prec))
 15136  0B27  0844               	movf	ftoa@w^(0+128),w
 15137  0B28  1903               	btfsc	3,2
 15138  0B29  2B35               	goto	l7578
 15139  0B2A  0844               	movf	ftoa@w^(0+128),w
 15140  0B2B  063F               	xorwf	ftoa@prec^(0+128),w
 15141  0B2C  1D03               	skipz
 15142  0B2D  2B35               	goto	l7578
 15143                           
 15144                           ;common.c: 37:    str[pos++] = '.';
 15145  0B2E  0845               	movf	ftoa@pos^(0+128),w
 15146  0B2F  0746               	addwf	ftoa@str^(0+128),w
 15147  0B30  00C0               	movwf	??_ftoa^(0+128)
 15148  0B31  0086               	movwf	6
 15149  0B32  302E               	movlw	46
 15150  0B33                     L11:	
 15151  0B33  0081               	movwf	1
 15152  0B34  0AC5               	incf	ftoa@pos^(0+128),f
 15153  0B35                     l7578:	
 15154                           
 15155                           ;common.c: 32:  while(w--) {
 15156  0B35  03C4               	decf	ftoa@w^(0+128),f
 15157  0B36  0F44               	incfsz	ftoa@w^(0+128),w
 15158  0B37  2AB9               	goto	l7564
 15159                           
 15160                           ;common.c: 40:  str[pos] = '\0';
 15161  0B38  0845               	movf	ftoa@pos^(0+128),w
 15162  0B39  0746               	addwf	ftoa@str^(0+128),w
 15163  0B3A  00C0               	movwf	??_ftoa^(0+128)
 15164  0B3B  0086               	movwf	6
 15165  0B3C  3001               	movlw	1	; select bank2/3
 15166  0B3D  0087               	movwf	7
 15167  0B3E  0181               	clrf	1
 15168  0B3F  0008               	return
 15169  0B40                     __end_of_ftoa:	
 15170  0B40                     __ptext46:	
 15171 ;; *************** function _channelThing *****************
 15172 ;; Defined at:
 15173 ;;		line 356 in file "system.c"
 15174 ;; Parameters:    Size  Location     Type
 15175 ;;		None
 15176 ;; Auto vars:     Size  Location     Type
 15177 ;;  grpB            4   18[BANK4 ] char [4]
 15178 ;;  grpA            4   12[BANK4 ] char [4]
 15179 ;;  totalGrpB       4    8[BANK4 ] float 
 15180 ;;  totalGrpA       4    4[BANK4 ] float 
 15181 ;;  total           4    0[BANK4 ] float 
 15182 ;;  n               1   22[BANK4 ] unsigned char 
 15183 ;;  numGrpB         1   17[BANK4 ] unsigned char 
 15184 ;;  numGrpA         1   16[BANK4 ] unsigned char 
 15185 ;; Return value:  Size  Location     Type
 15186 ;;                  1    wreg      void 
 15187 ;; Registers used:
 15188 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15189 ;; Tracked objects:
 15190 ;;		On entry : 3F/1
 15191 ;;		On exit  : 3F/4
 15192 ;;		Unchanged: 0/0
 15193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15195 ;;      Locals:         0       0       0       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15196 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15197 ;;      Totals:         0       0       6       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15198 ;;Total ram usage:       29 bytes
 15199 ;; Hardware stack levels used:    1
 15200 ;; Hardware stack levels required when called:    7
 15201 ;; This function calls:
 15202 ;;		___bmul
 15203 ;;		___fladd
 15204 ;;		___fldiv
 15205 ;;		___flge
 15206 ;;		___flmul
 15207 ;;		___wmul
 15208 ;;		___xxtofl
 15209 ;;		_qsort
 15210 ;; This function is called by:
 15211 ;;		_main
 15212 ;; This function uses a non-reentrant model
 15213 ;;
 15214                           
 15215                           
 15216                           ;psect for function _channelThing
 15217  0B40                     _channelThing:	
 15218                           
 15219                           ;system.c: 358:  uint8_t n;;system.c: 359:  float total, totalGrpA, totalGrpB;;system.c:
      +                           360:  uint8_t numGrpA, numGrpB;;system.c: 361:  int8_t grpA[4], grpB[4];;system.c: 364:
      +                            for(n = 0; n < 4; n++) {
 15220                           
 15221                           ;incstack = 0
 15222                           ; Regs used in _channelThing: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15223  0B40  0144               	movlb	4	; select bank4
 15224  0B41  01DD               	clrf	channelThing@n^(0+512)
 15225  0B42                     l8444:	
 15226                           
 15227                           ;system.c: 365:   grpA[n] = -1;
 15228  0B42  085D               	movf	channelThing@n^(0+512),w
 15229  0B43  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 15230  0B44  0086               	movwf	6
 15231  0B45  3002               	movlw	2	; select bank4/5
 15232  0B46  0087               	movwf	7
 15233  0B47  0181               	clrf	1
 15234  0B48  0381               	decf	1,f
 15235                           
 15236                           ;system.c: 366:   grpB[n] = -1;
 15237  0B49  085D               	movf	channelThing@n^(0+512),w
 15238  0B4A  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 15239  0B4B  0086               	movwf	6
 15240  0B4C  0181               	clrf	1
 15241  0B4D  0381               	decf	1,f
 15242                           
 15243                           ;system.c: 368:   virtChannels[n].phyChanNum = n;
 15244  0B4E  085D               	movf	channelThing@n^(0+512),w
 15245  0B4F  0141               	movlb	1	; select bank1
 15246  0B50  00DB               	movwf	??_channelThing^(0+128)
 15247  0B51  3009               	movlw	9
 15248  0B52  01DC               	clrf	(??_channelThing^(0+128)+1)
 15249  0B53  0140               	movlb	0	; select bank0
 15250  0B54  00AC               	movwf	___bmul@multiplicand
 15251  0B55  0144               	movlb	4	; select bank4
 15252  0B56  085D               	movf	channelThing@n^(0+512),w
 15253  0B57  268D  3188         	fcall	___bmul
 15254  0B59  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 15255  0B5A  0086               	movwf	6
 15256  0B5B  3002               	movlw	2	; select bank5/6
 15257  0B5C  0087               	movwf	7
 15258  0B5D  0141               	movlb	1	; select bank1
 15259  0B5E  085B               	movf	??_channelThing^(0+128),w
 15260  0B5F  3FC0               	movwi [0]fsr1
 15261  0B60  085C               	movf	(??_channelThing+1)^(0+128),w
 15262  0B61  3FC1               	movwi [1]fsr1
 15263                           
 15264                           ;system.c: 369:   virtChannels[n].current = data.heater[n].current;
 15265  0B62  0144               	movlb	4	; select bank4
 15266  0B63  085D               	movf	channelThing@n^(0+512),w
 15267  0B64  0140               	movlb	0	; select bank0
 15268  0B65  00AF               	movwf	___wmul@multiplier
 15269  0B66  301F               	movlw	31
 15270  0B67  01B0               	clrf	___wmul@multiplier+1
 15271  0B68  00B1               	movwf	___wmul@multiplicand
 15272  0B69  01B2               	clrf	___wmul@multiplicand+1
 15273  0B6A  2206  3188         	fcall	___wmul
 15274  0B6C  3074               	movlw	116
 15275  0B6D  0141               	movlb	1	; select bank1
 15276  0B6E  00DB               	movwf	??_channelThing^(0+128)
 15277  0B6F  3027               	movlw	39
 15278  0B70  00DC               	movwf	(??_channelThing^(0+128)+1)
 15279  0B71  0140               	movlb	0	; select bank0
 15280  0B72  082F               	movf	?___wmul,w
 15281  0B73  0141               	movlb	1	; select bank1
 15282  0B74  075B               	addwf	??_channelThing^(0+128),w
 15283  0B75  0086               	movwf	6
 15284  0B76  0140               	movlb	0	; select bank0
 15285  0B77  0830               	movf	?___wmul+1,w
 15286  0B78  0141               	movlb	1	; select bank1
 15287  0B79  3D5C               	addwfc	(??_channelThing+1)^(0+128),w
 15288  0B7A  0087               	movwf	7
 15289  0B7B  3F40               	moviw [0]fsr1
 15290  0B7C  00DD               	movwf	(??_channelThing+2)^(0+128)
 15291  0B7D  3F41               	moviw [1]fsr1
 15292  0B7E  00DE               	movwf	((??_channelThing+2)^(0+128)+1)
 15293  0B7F  3F42               	moviw [2]fsr1
 15294  0B80  00DF               	movwf	((??_channelThing+2)^(0+128)+2)
 15295  0B81  3F43               	moviw [3]fsr1
 15296  0B82  00E0               	movwf	((??_channelThing+2)^(0+128)+3)
 15297  0B83  3009               	movlw	9
 15298  0B84  0140               	movlb	0	; select bank0
 15299  0B85  00AC               	movwf	___bmul@multiplicand
 15300  0B86  0144               	movlb	4	; select bank4
 15301  0B87  085D               	movf	channelThing@n^(0+512),w
 15302  0B88  268D  3188         	fcall	___bmul
 15303  0B8A  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 15304  0B8B  0086               	movwf	6
 15305  0B8C  3002               	movlw	2	; select bank5/6
 15306  0B8D  0087               	movwf	7
 15307  0B8E  0141               	movlb	1	; select bank1
 15308  0B8F  085D               	movf	(??_channelThing+2)^(0+128),w
 15309  0B90  3FC0               	movwi [0]fsr1
 15310  0B91  085E               	movf	(??_channelThing+3)^(0+128),w
 15311  0B92  3FC1               	movwi [1]fsr1
 15312  0B93  085F               	movf	(??_channelThing+4)^(0+128),w
 15313  0B94  3FC2               	movwi [2]fsr1
 15314  0B95  0860               	movf	(??_channelThing+5)^(0+128),w
 15315  0B96  3FC3               	movwi [3]fsr1
 15316                           
 15317                           ;system.c: 370:   virtChannels[n].DC = data.heater[n].DCreq;
 15318  0B97  3009               	movlw	9
 15319  0B98  0140               	movlb	0	; select bank0
 15320  0B99  00AC               	movwf	___bmul@multiplicand
 15321  0B9A  0144               	movlb	4	; select bank4
 15322  0B9B  085D               	movf	channelThing@n^(0+512),w
 15323  0B9C  268D  3188         	fcall	___bmul
 15324  0B9E  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 15325  0B9F  0086               	movwf	6
 15326  0BA0  3002               	movlw	2	; select bank5/6
 15327  0BA1  0087               	movwf	7
 15328  0BA2  0144               	movlb	4	; select bank4
 15329  0BA3  085D               	movf	channelThing@n^(0+512),w
 15330  0BA4  0140               	movlb	0	; select bank0
 15331  0BA5  00AF               	movwf	___wmul@multiplier
 15332  0BA6  301F               	movlw	31
 15333  0BA7  01B0               	clrf	___wmul@multiplier+1
 15334  0BA8  00B1               	movwf	___wmul@multiplicand
 15335  0BA9  01B2               	clrf	___wmul@multiplicand+1
 15336  0BAA  2206  3188         	fcall	___wmul
 15337  0BAC  3088               	movlw	136
 15338  0BAD  0141               	movlb	1	; select bank1
 15339  0BAE  00DB               	movwf	??_channelThing^(0+128)
 15340  0BAF  3027               	movlw	39
 15341  0BB0  00DC               	movwf	(??_channelThing^(0+128)+1)
 15342  0BB1  0140               	movlb	0	; select bank0
 15343  0BB2  082F               	movf	?___wmul,w
 15344  0BB3  0141               	movlb	1	; select bank1
 15345  0BB4  075B               	addwf	??_channelThing^(0+128),w
 15346  0BB5  0084               	movwf	4
 15347  0BB6  0140               	movlb	0	; select bank0
 15348  0BB7  0830               	movf	?___wmul+1,w
 15349  0BB8  0141               	movlb	1	; select bank1
 15350  0BB9  3D5C               	addwfc	(??_channelThing+1)^(0+128),w
 15351  0BBA  0085               	movwf	5
 15352  0BBB  0800               	movf	0,w
 15353  0BBC  0081               	movwf	1
 15354                           
 15355                           ;system.c: 371:  }
 15356  0BBD  0144               	movlb	4	; select bank4
 15357  0BBE  3004               	movlw	4
 15358  0BBF  0ADD               	incf	channelThing@n^(0+512),f
 15359  0BC0  025D               	subwf	channelThing@n^(0+512),w
 15360  0BC1  1C03               	skipc
 15361  0BC2  2B42               	goto	l8444
 15362                           
 15363                           ;system.c: 374:  qsort(virtChannels, 4, sizeof(virtChannels[0]), sortCur);
 15364  0BC3  3004               	movlw	4
 15365  0BC4  0141               	movlb	1	; select bank1
 15366  0BC5  00C2               	movwf	qsort@nel^(0+128)
 15367  0BC6  3009               	movlw	9
 15368  0BC7  01C3               	clrf	(qsort@nel+1)^(0+128)
 15369  0BC8  00C4               	movwf	qsort@width^(0+128)
 15370  0BC9  3003               	movlw	low _sortCur
 15371  0BCA  01C5               	clrf	(qsort@width+1)^(0+128)
 15372  0BCB  00C6               	movwf	qsort@compar^(0+128)
 15373  0BCC  3018               	movlw	high _sortCur
 15374  0BCD  00C7               	movwf	(qsort@compar^(0+128)+1)
 15375  0BCE  30A0               	movlw	(low (_virtChannels| (0+512)))& (0+255)
 15376  0BCF  31AE  2616  3188   	fcall	_qsort
 15377                           
 15378                           ;system.c: 376:  total = totalGrpA = totalGrpB = 0;
 15379  0BD2  0144               	movlb	4	; select bank4
 15380  0BD3  01CF               	clrf	channelThing@totalGrpB^(0+512)
 15381  0BD4  01D0               	clrf	(channelThing@totalGrpB+1)^(0+512)
 15382  0BD5  01D1               	clrf	(channelThing@totalGrpB+2)^(0+512)
 15383  0BD6  01D2               	clrf	(channelThing@totalGrpB+3)^(0+512)
 15384  0BD7  0852               	movf	(channelThing@totalGrpB+3)^(0+512),w
 15385  0BD8  00CE               	movwf	(channelThing@totalGrpA+3)^(0+512)
 15386  0BD9  0851               	movf	(channelThing@totalGrpB+2)^(0+512),w
 15387  0BDA  00CD               	movwf	(channelThing@totalGrpA+2)^(0+512)
 15388  0BDB  0850               	movf	(channelThing@totalGrpB+1)^(0+512),w
 15389  0BDC  00CC               	movwf	(channelThing@totalGrpA+1)^(0+512)
 15390  0BDD  084F               	movf	channelThing@totalGrpB^(0+512),w
 15391  0BDE  00CB               	movwf	channelThing@totalGrpA^(0+512)
 15392  0BDF  084E               	movf	(channelThing@totalGrpA+3)^(0+512),w
 15393  0BE0  00CA               	movwf	(channelThing@total+3)^(0+512)
 15394  0BE1  084D               	movf	(channelThing@totalGrpA+2)^(0+512),w
 15395  0BE2  00C9               	movwf	(channelThing@total+2)^(0+512)
 15396  0BE3  084C               	movf	(channelThing@totalGrpA+1)^(0+512),w
 15397  0BE4  00C8               	movwf	(channelThing@total+1)^(0+512)
 15398  0BE5  084B               	movf	channelThing@totalGrpA^(0+512),w
 15399  0BE6  00C7               	movwf	channelThing@total^(0+512)
 15400                           
 15401                           ;system.c: 377:  numGrpA = numGrpB = 0;
 15402  0BE7  01D8               	clrf	channelThing@numGrpB^(0+512)
 15403  0BE8  01D7               	clrf	channelThing@numGrpA^(0+512)
 15404                           
 15405                           ;system.c: 381:  for(n = 0; n < 4; n++) {
 15406  0BE9  01DD               	clrf	channelThing@n^(0+512)
 15407  0BEA                     l8468:	
 15408                           
 15409                           ;system.c: 382:   total += virtChannels[n].current;
 15410  0BEA  3009               	movlw	9
 15411  0BEB  0140               	movlb	0	; select bank0
 15412  0BEC  00AC               	movwf	___bmul@multiplicand
 15413  0BED  0144               	movlb	4	; select bank4
 15414  0BEE  085D               	movf	channelThing@n^(0+512),w
 15415  0BEF  268D               	fcall	___bmul
 15416  0BF0  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 15417  0BF1  0086               	movwf	6
 15418  0BF2  3002               	movlw	2	; select bank5/6
 15419  0BF3  0087               	movwf	7
 15420  0BF4  3F40               	moviw [0]fsr1
 15421  0BF5  00DC               	movwf	___fladd@b
 15422  0BF6  3F41               	moviw [1]fsr1
 15423  0BF7  00DD               	movwf	___fladd@b+1
 15424  0BF8  3F42               	moviw [2]fsr1
 15425  0BF9  00DE               	movwf	___fladd@b+2
 15426  0BFA  3F43               	moviw [3]fsr1
 15427  0BFB  00DF               	movwf	___fladd@b+3
 15428  0BFC  0144               	movlb	4	; select bank4
 15429  0BFD  084A               	movf	(channelThing@total+3)^(0+512),w
 15430  0BFE  0140               	movlb	0	; select bank0
 15431  0BFF  00E3               	movwf	___fladd@a+3
 15432  0C00  0144               	movlb	4	; select bank4
 15433  0C01  0849               	movf	(channelThing@total+2)^(0+512),w
 15434  0C02  0140               	movlb	0	; select bank0
 15435  0C03  00E2               	movwf	___fladd@a+2
 15436  0C04  0144               	movlb	4	; select bank4
 15437  0C05  0848               	movf	(channelThing@total+1)^(0+512),w
 15438  0C06  0140               	movlb	0	; select bank0
 15439  0C07  00E1               	movwf	___fladd@a+1
 15440  0C08  0144               	movlb	4	; select bank4
 15441  0C09  0847               	movf	channelThing@total^(0+512),w
 15442  0C0A  0140               	movlb	0	; select bank0
 15443  0C0B  00E0               	movwf	___fladd@a
 15444  0C0C  31AC  24AF  3188   	fcall	___fladd
 15445  0C0F  085F               	movf	?___fladd+3,w
 15446  0C10  0144               	movlb	4	; select bank4
 15447  0C11  00CA               	movwf	(channelThing@total+3)^(0+512)
 15448  0C12  0140               	movlb	0	; select bank0
 15449  0C13  085E               	movf	?___fladd+2,w
 15450  0C14  0144               	movlb	4	; select bank4
 15451  0C15  00C9               	movwf	(channelThing@total+2)^(0+512)
 15452  0C16  0140               	movlb	0	; select bank0
 15453  0C17  085D               	movf	?___fladd+1,w
 15454  0C18  0144               	movlb	4	; select bank4
 15455  0C19  00C8               	movwf	(channelThing@total+1)^(0+512)
 15456  0C1A  0140               	movlb	0	; select bank0
 15457  0C1B  085C               	movf	?___fladd,w
 15458  0C1C  0144               	movlb	4	; select bank4
 15459  0C1D  00C7               	movwf	channelThing@total^(0+512)
 15460                           
 15461                           ;system.c: 383:   if (totalGrpA + virtChannels[n].current <= 3.5) {
 15462  0C1E  3040               	movlw	64
 15463  0C1F  0141               	movlb	1	; select bank1
 15464  0C20  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15465  0C21  3060               	movlw	96
 15466  0C22  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15467  0C23  01AE               	clrf	(___flge@ff1+1)^(0+128)
 15468  0C24  01AD               	clrf	___flge@ff1^(0+128)
 15469  0C25  0144               	movlb	4	; select bank4
 15470  0C26  084E               	movf	(channelThing@totalGrpA+3)^(0+512),w
 15471  0C27  0140               	movlb	0	; select bank0
 15472  0C28  00DF               	movwf	___fladd@b+3
 15473  0C29  0144               	movlb	4	; select bank4
 15474  0C2A  084D               	movf	(channelThing@totalGrpA+2)^(0+512),w
 15475  0C2B  0140               	movlb	0	; select bank0
 15476  0C2C  00DE               	movwf	___fladd@b+2
 15477  0C2D  0144               	movlb	4	; select bank4
 15478  0C2E  084C               	movf	(channelThing@totalGrpA+1)^(0+512),w
 15479  0C2F  0140               	movlb	0	; select bank0
 15480  0C30  00DD               	movwf	___fladd@b+1
 15481  0C31  0144               	movlb	4	; select bank4
 15482  0C32  084B               	movf	channelThing@totalGrpA^(0+512),w
 15483  0C33  0140               	movlb	0	; select bank0
 15484  0C34  00DC               	movwf	___fladd@b
 15485  0C35  3009               	movlw	9
 15486  0C36  00AC               	movwf	___bmul@multiplicand
 15487  0C37  0144               	movlb	4	; select bank4
 15488  0C38  085D               	movf	channelThing@n^(0+512),w
 15489  0C39  268D               	fcall	___bmul
 15490  0C3A  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 15491  0C3B  0086               	movwf	6
 15492  0C3C  3002               	movlw	2	; select bank5/6
 15493  0C3D  0087               	movwf	7
 15494  0C3E  3F40               	moviw [0]fsr1
 15495  0C3F  00E0               	movwf	___fladd@a
 15496  0C40  3F41               	moviw [1]fsr1
 15497  0C41  00E1               	movwf	___fladd@a+1
 15498  0C42  3F42               	moviw [2]fsr1
 15499  0C43  00E2               	movwf	___fladd@a+2
 15500  0C44  3F43               	moviw [3]fsr1
 15501  0C45  00E3               	movwf	___fladd@a+3
 15502  0C46  31AC  24AF  3188   	fcall	___fladd
 15503  0C49  085F               	movf	?___fladd+3,w
 15504  0C4A  0141               	movlb	1	; select bank1
 15505  0C4B  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15506  0C4C  0140               	movlb	0	; select bank0
 15507  0C4D  085E               	movf	?___fladd+2,w
 15508  0C4E  0141               	movlb	1	; select bank1
 15509  0C4F  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15510  0C50  0140               	movlb	0	; select bank0
 15511  0C51  085D               	movf	?___fladd+1,w
 15512  0C52  0141               	movlb	1	; select bank1
 15513  0C53  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15514  0C54  0140               	movlb	0	; select bank0
 15515  0C55  085C               	movf	?___fladd,w
 15516  0C56  0141               	movlb	1	; select bank1
 15517  0C57  00B1               	movwf	___flge@ff2^(0+128)
 15518  0C58  26B1  3188         	fcall	___flge
 15519  0C5A  1C03               	btfss	3,0
 15520  0C5B  2C99               	goto	l8476
 15521                           
 15522                           ;system.c: 384:    totalGrpA += virtChannels[n].current;
 15523  0C5C  3009               	movlw	9
 15524  0C5D  0140               	movlb	0	; select bank0
 15525  0C5E  00AC               	movwf	___bmul@multiplicand
 15526  0C5F  0144               	movlb	4	; select bank4
 15527  0C60  085D               	movf	channelThing@n^(0+512),w
 15528  0C61  268D               	fcall	___bmul
 15529  0C62  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 15530  0C63  0086               	movwf	6
 15531  0C64  3002               	movlw	2	; select bank5/6
 15532  0C65  0087               	movwf	7
 15533  0C66  3F40               	moviw [0]fsr1
 15534  0C67  00DC               	movwf	___fladd@b
 15535  0C68  3F41               	moviw [1]fsr1
 15536  0C69  00DD               	movwf	___fladd@b+1
 15537  0C6A  3F42               	moviw [2]fsr1
 15538  0C6B  00DE               	movwf	___fladd@b+2
 15539  0C6C  3F43               	moviw [3]fsr1
 15540  0C6D  00DF               	movwf	___fladd@b+3
 15541  0C6E  0144               	movlb	4	; select bank4
 15542  0C6F  084E               	movf	(channelThing@totalGrpA+3)^(0+512),w
 15543  0C70  0140               	movlb	0	; select bank0
 15544  0C71  00E3               	movwf	___fladd@a+3
 15545  0C72  0144               	movlb	4	; select bank4
 15546  0C73  084D               	movf	(channelThing@totalGrpA+2)^(0+512),w
 15547  0C74  0140               	movlb	0	; select bank0
 15548  0C75  00E2               	movwf	___fladd@a+2
 15549  0C76  0144               	movlb	4	; select bank4
 15550  0C77  084C               	movf	(channelThing@totalGrpA+1)^(0+512),w
 15551  0C78  0140               	movlb	0	; select bank0
 15552  0C79  00E1               	movwf	___fladd@a+1
 15553  0C7A  0144               	movlb	4	; select bank4
 15554  0C7B  084B               	movf	channelThing@totalGrpA^(0+512),w
 15555  0C7C  0140               	movlb	0	; select bank0
 15556  0C7D  00E0               	movwf	___fladd@a
 15557  0C7E  31AC  24AF  3188   	fcall	___fladd
 15558  0C81  085F               	movf	?___fladd+3,w
 15559  0C82  0144               	movlb	4	; select bank4
 15560  0C83  00CE               	movwf	(channelThing@totalGrpA+3)^(0+512)
 15561  0C84  0140               	movlb	0	; select bank0
 15562  0C85  085E               	movf	?___fladd+2,w
 15563  0C86  0144               	movlb	4	; select bank4
 15564  0C87  00CD               	movwf	(channelThing@totalGrpA+2)^(0+512)
 15565  0C88  0140               	movlb	0	; select bank0
 15566  0C89  085D               	movf	?___fladd+1,w
 15567  0C8A  0144               	movlb	4	; select bank4
 15568  0C8B  00CC               	movwf	(channelThing@totalGrpA+1)^(0+512)
 15569  0C8C  0140               	movlb	0	; select bank0
 15570  0C8D  085C               	movf	?___fladd,w
 15571  0C8E  0144               	movlb	4	; select bank4
 15572  0C8F  00CB               	movwf	channelThing@totalGrpA^(0+512)
 15573                           
 15574                           ;system.c: 385:    grpA[numGrpA++] = n;
 15575  0C90  0857               	movf	channelThing@numGrpA^(0+512),w
 15576  0C91  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 15577  0C92  0086               	movwf	6
 15578  0C93  3002               	movlw	2	; select bank4/5
 15579  0C94  0087               	movwf	7
 15580  0C95  085D               	movf	channelThing@n^(0+512),w
 15581  0C96  0081               	movwf	1
 15582  0C97  0AD7               	incf	channelThing@numGrpA^(0+512),f
 15583                           
 15584                           ;system.c: 386:   } else if (totalGrpB + virtChannels[n].current <= 3.5) {
 15585  0C98  2D12               	goto	l8484
 15586  0C99                     l8476:	
 15587  0C99  3040               	movlw	64
 15588  0C9A  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15589  0C9B  3060               	movlw	96
 15590  0C9C  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15591  0C9D  01AE               	clrf	(___flge@ff1+1)^(0+128)
 15592  0C9E  01AD               	clrf	___flge@ff1^(0+128)
 15593  0C9F  0144               	movlb	4	; select bank4
 15594  0CA0  0852               	movf	(channelThing@totalGrpB+3)^(0+512),w
 15595  0CA1  0140               	movlb	0	; select bank0
 15596  0CA2  00DF               	movwf	___fladd@b+3
 15597  0CA3  0144               	movlb	4	; select bank4
 15598  0CA4  0851               	movf	(channelThing@totalGrpB+2)^(0+512),w
 15599  0CA5  0140               	movlb	0	; select bank0
 15600  0CA6  00DE               	movwf	___fladd@b+2
 15601  0CA7  0144               	movlb	4	; select bank4
 15602  0CA8  0850               	movf	(channelThing@totalGrpB+1)^(0+512),w
 15603  0CA9  0140               	movlb	0	; select bank0
 15604  0CAA  00DD               	movwf	___fladd@b+1
 15605  0CAB  0144               	movlb	4	; select bank4
 15606  0CAC  084F               	movf	channelThing@totalGrpB^(0+512),w
 15607  0CAD  0140               	movlb	0	; select bank0
 15608  0CAE  00DC               	movwf	___fladd@b
 15609  0CAF  3009               	movlw	9
 15610  0CB0  00AC               	movwf	___bmul@multiplicand
 15611  0CB1  0144               	movlb	4	; select bank4
 15612  0CB2  085D               	movf	channelThing@n^(0+512),w
 15613  0CB3  268D               	fcall	___bmul
 15614  0CB4  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 15615  0CB5  0086               	movwf	6
 15616  0CB6  3002               	movlw	2	; select bank5/6
 15617  0CB7  0087               	movwf	7
 15618  0CB8  3F40               	moviw [0]fsr1
 15619  0CB9  00E0               	movwf	___fladd@a
 15620  0CBA  3F41               	moviw [1]fsr1
 15621  0CBB  00E1               	movwf	___fladd@a+1
 15622  0CBC  3F42               	moviw [2]fsr1
 15623  0CBD  00E2               	movwf	___fladd@a+2
 15624  0CBE  3F43               	moviw [3]fsr1
 15625  0CBF  00E3               	movwf	___fladd@a+3
 15626  0CC0  31AC  24AF  3188   	fcall	___fladd
 15627  0CC3  085F               	movf	?___fladd+3,w
 15628  0CC4  0141               	movlb	1	; select bank1
 15629  0CC5  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15630  0CC6  0140               	movlb	0	; select bank0
 15631  0CC7  085E               	movf	?___fladd+2,w
 15632  0CC8  0141               	movlb	1	; select bank1
 15633  0CC9  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15634  0CCA  0140               	movlb	0	; select bank0
 15635  0CCB  085D               	movf	?___fladd+1,w
 15636  0CCC  0141               	movlb	1	; select bank1
 15637  0CCD  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15638  0CCE  0140               	movlb	0	; select bank0
 15639  0CCF  085C               	movf	?___fladd,w
 15640  0CD0  0141               	movlb	1	; select bank1
 15641  0CD1  00B1               	movwf	___flge@ff2^(0+128)
 15642  0CD2  26B1  3188         	fcall	___flge
 15643  0CD4  1C03               	btfss	3,0
 15644  0CD5  2D12               	goto	l8484
 15645                           
 15646                           ;system.c: 387:    totalGrpB += virtChannels[n].current;
 15647  0CD6  3009               	movlw	9
 15648  0CD7  0140               	movlb	0	; select bank0
 15649  0CD8  00AC               	movwf	___bmul@multiplicand
 15650  0CD9  0144               	movlb	4	; select bank4
 15651  0CDA  085D               	movf	channelThing@n^(0+512),w
 15652  0CDB  268D               	fcall	___bmul
 15653  0CDC  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 15654  0CDD  0086               	movwf	6
 15655  0CDE  3002               	movlw	2	; select bank5/6
 15656  0CDF  0087               	movwf	7
 15657  0CE0  3F40               	moviw [0]fsr1
 15658  0CE1  00DC               	movwf	___fladd@b
 15659  0CE2  3F41               	moviw [1]fsr1
 15660  0CE3  00DD               	movwf	___fladd@b+1
 15661  0CE4  3F42               	moviw [2]fsr1
 15662  0CE5  00DE               	movwf	___fladd@b+2
 15663  0CE6  3F43               	moviw [3]fsr1
 15664  0CE7  00DF               	movwf	___fladd@b+3
 15665  0CE8  0144               	movlb	4	; select bank4
 15666  0CE9  0852               	movf	(channelThing@totalGrpB+3)^(0+512),w
 15667  0CEA  0140               	movlb	0	; select bank0
 15668  0CEB  00E3               	movwf	___fladd@a+3
 15669  0CEC  0144               	movlb	4	; select bank4
 15670  0CED  0851               	movf	(channelThing@totalGrpB+2)^(0+512),w
 15671  0CEE  0140               	movlb	0	; select bank0
 15672  0CEF  00E2               	movwf	___fladd@a+2
 15673  0CF0  0144               	movlb	4	; select bank4
 15674  0CF1  0850               	movf	(channelThing@totalGrpB+1)^(0+512),w
 15675  0CF2  0140               	movlb	0	; select bank0
 15676  0CF3  00E1               	movwf	___fladd@a+1
 15677  0CF4  0144               	movlb	4	; select bank4
 15678  0CF5  084F               	movf	channelThing@totalGrpB^(0+512),w
 15679  0CF6  0140               	movlb	0	; select bank0
 15680  0CF7  00E0               	movwf	___fladd@a
 15681  0CF8  31AC  24AF  3188   	fcall	___fladd
 15682  0CFB  085F               	movf	?___fladd+3,w
 15683  0CFC  0144               	movlb	4	; select bank4
 15684  0CFD  00D2               	movwf	(channelThing@totalGrpB+3)^(0+512)
 15685  0CFE  0140               	movlb	0	; select bank0
 15686  0CFF  085E               	movf	?___fladd+2,w
 15687  0D00  0144               	movlb	4	; select bank4
 15688  0D01  00D1               	movwf	(channelThing@totalGrpB+2)^(0+512)
 15689  0D02  0140               	movlb	0	; select bank0
 15690  0D03  085D               	movf	?___fladd+1,w
 15691  0D04  0144               	movlb	4	; select bank4
 15692  0D05  00D0               	movwf	(channelThing@totalGrpB+1)^(0+512)
 15693  0D06  0140               	movlb	0	; select bank0
 15694  0D07  085C               	movf	?___fladd,w
 15695  0D08  0144               	movlb	4	; select bank4
 15696  0D09  00CF               	movwf	channelThing@totalGrpB^(0+512)
 15697                           
 15698                           ;system.c: 388:    grpB[numGrpB++] = n;
 15699  0D0A  0858               	movf	channelThing@numGrpB^(0+512),w
 15700  0D0B  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 15701  0D0C  0086               	movwf	6
 15702  0D0D  3002               	movlw	2	; select bank4/5
 15703  0D0E  0087               	movwf	7
 15704  0D0F  085D               	movf	channelThing@n^(0+512),w
 15705  0D10  0081               	movwf	1
 15706  0D11  0AD8               	incf	channelThing@numGrpB^(0+512),f
 15707  0D12                     l8484:	
 15708                           
 15709                           ;system.c: 390:  }
 15710  0D12  0144               	movlb	4	; select bank4
 15711  0D13  3004               	movlw	4
 15712  0D14  0ADD               	incf	channelThing@n^(0+512),f
 15713  0D15  025D               	subwf	channelThing@n^(0+512),w
 15714  0D16  1C03               	skipc
 15715  0D17  2BEA               	goto	l8468
 15716                           
 15717                           ;system.c: 393:  qsort(grpA, numGrpA, sizeof(grpA[0]), sortDC);
 15718  0D18  0857               	movf	channelThing@numGrpA^(0+512),w
 15719  0D19  0141               	movlb	1	; select bank1
 15720  0D1A  00C2               	movwf	qsort@nel^(0+128)
 15721  0D1B  3004               	movlw	low _sortDC
 15722  0D1C  01C3               	clrf	(qsort@nel+1)^(0+128)
 15723  0D1D  01C4               	clrf	qsort@width^(0+128)
 15724  0D1E  0AC4               	incf	qsort@width^(0+128),f
 15725  0D1F  01C5               	clrf	(qsort@width+1)^(0+128)
 15726  0D20  00C6               	movwf	qsort@compar^(0+128)
 15727  0D21  3010               	movlw	high _sortDC
 15728  0D22  00C7               	movwf	(qsort@compar^(0+128)+1)
 15729  0D23  3053               	movlw	(low (channelThing@grpA| (0+512)))& (0+255)
 15730  0D24  31AE  2616  3188   	fcall	_qsort
 15731                           
 15732                           ;system.c: 394:  qsort(grpB, numGrpB, sizeof(grpB[0]), sortDCRev);
 15733  0D27  0144               	movlb	4	; select bank4
 15734  0D28  0858               	movf	channelThing@numGrpB^(0+512),w
 15735  0D29  0141               	movlb	1	; select bank1
 15736  0D2A  00C2               	movwf	qsort@nel^(0+128)
 15737  0D2B  30B5               	movlw	low _sortDCRev
 15738  0D2C  01C3               	clrf	(qsort@nel+1)^(0+128)
 15739  0D2D  01C4               	clrf	qsort@width^(0+128)
 15740  0D2E  0AC4               	incf	qsort@width^(0+128),f
 15741  0D2F  01C5               	clrf	(qsort@width+1)^(0+128)
 15742  0D30  00C6               	movwf	qsort@compar^(0+128)
 15743  0D31  3029               	movlw	high _sortDCRev
 15744  0D32  00C7               	movwf	(qsort@compar^(0+128)+1)
 15745  0D33  3059               	movlw	(low (channelThing@grpB| (0+512)))& (0+255)
 15746  0D34  31AE  2616  3188   	fcall	_qsort
 15747                           
 15748                           ;system.c: 397:  for(n = 0; n < numGrpA; n++) {
 15749  0D37  0144               	movlb	4	; select bank4
 15750  0D38  01DD               	clrf	channelThing@n^(0+512)
 15751  0D39                     l8504:	
 15752  0D39  0857               	movf	channelThing@numGrpA^(0+512),w
 15753  0D3A  025D               	subwf	channelThing@n^(0+512),w
 15754  0D3B  1803               	btfsc	3,0
 15755  0D3C  2DC6               	goto	l8506
 15756                           
 15757                           ;system.c: 398:   if (grpB[n] > -1) {
 15758  0D3D  085D               	movf	channelThing@n^(0+512),w
 15759  0D3E  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 15760  0D3F  0086               	movwf	6
 15761  0D40  3002               	movlw	2	; select bank4/5
 15762  0D41  0087               	movwf	7
 15763                           
 15764                           ;system.c: 399:    if (virtChannels[grpA[n]].DC + virtChannels[grpB[n]].DC > 100)
 15765  0D42  3009               	movlw	9
 15766  0D43  1B81               	btfsc	1,7
 15767  0D44  2D95               	goto	L24
 15768  0D45  0140               	movlb	0	; select bank0
 15769  0D46  00AC               	movwf	___bmul@multiplicand
 15770  0D47  0144               	movlb	4	; select bank4
 15771  0D48  085D               	movf	channelThing@n^(0+512),w
 15772  0D49  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 15773  0D4A  0086               	movwf	6
 15774  0D4B  0801               	movf	1,w
 15775  0D4C  268D  3188         	fcall	___bmul
 15776  0D4E  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 15777  0D4F  0086               	movwf	6
 15778  0D50  3002               	movlw	2	; select bank5/6
 15779  0D51  0087               	movwf	7
 15780  0D52  3009               	movlw	9
 15781  0D53  00AC               	movwf	___bmul@multiplicand
 15782  0D54  0144               	movlb	4	; select bank4
 15783  0D55  085D               	movf	channelThing@n^(0+512),w
 15784  0D56  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 15785  0D57  0084               	movwf	4
 15786  0D58  3002               	movlw	2	; select bank4/5
 15787  0D59  0085               	movwf	5
 15788  0D5A  0800               	movf	0,w
 15789  0D5B  268D  3188         	fcall	___bmul
 15790  0D5D  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 15791  0D5E  0084               	movwf	4
 15792  0D5F  3002               	movlw	2	; select bank5/6
 15793  0D60  0085               	movwf	5
 15794  0D61  0800               	movf	0,w
 15795  0D62  0701               	addwf	1,w
 15796  0D63  0141               	movlb	1	; select bank1
 15797  0D64  00DB               	movwf	??_channelThing^(0+128)
 15798  0D65  01DC               	clrf	(??_channelThing^(0+128)+1)
 15799  0D66  0DDC               	rlf	(??_channelThing+1)^(0+128),f
 15800  0D67  085C               	movf	(??_channelThing+1)^(0+128),w
 15801  0D68  3A80               	xorlw	128
 15802  0D69  00DD               	movwf	(??_channelThing+2)^(0+128)
 15803  0D6A  3080               	movlw	128
 15804  0D6B  025D               	subwf	(??_channelThing+2)^(0+128),w
 15805  0D6C  1D03               	skipz
 15806  0D6D  2D70               	goto	u8945
 15807  0D6E  3065               	movlw	101
 15808  0D6F  025B               	subwf	??_channelThing^(0+128),w
 15809  0D70                     u8945:	
 15810                           
 15811                           ;system.c: 400:     virtChannels[grpB[n]].DC = 100 - virtChannels[grpA[n]].DC;
 15812  0D70  3009               	movlw	9
 15813  0D71  1C03               	skipc
 15814  0D72  2D95               	goto	L24
 15815  0D73  0140               	movlb	0	; select bank0
 15816  0D74  00AC               	movwf	___bmul@multiplicand
 15817  0D75  0144               	movlb	4	; select bank4
 15818  0D76  085D               	movf	channelThing@n^(0+512),w
 15819  0D77  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 15820  0D78  0086               	movwf	6
 15821  0D79  3002               	movlw	2	; select bank4/5
 15822  0D7A  0087               	movwf	7
 15823  0D7B  0801               	movf	1,w
 15824  0D7C  268D  3188         	fcall	___bmul
 15825  0D7E  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 15826  0D7F  0086               	movwf	6
 15827  0D80  3002               	movlw	2	; select bank5/6
 15828  0D81  0087               	movwf	7
 15829  0D82  3009               	movlw	9
 15830  0D83  00AC               	movwf	___bmul@multiplicand
 15831  0D84  0144               	movlb	4	; select bank4
 15832  0D85  085D               	movf	channelThing@n^(0+512),w
 15833  0D86  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 15834  0D87  0084               	movwf	4
 15835  0D88  3002               	movlw	2	; select bank4/5
 15836  0D89  0085               	movwf	5
 15837  0D8A  0800               	movf	0,w
 15838  0D8B  268D  3188         	fcall	___bmul
 15839  0D8D  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 15840  0D8E  0084               	movwf	4
 15841  0D8F  3002               	movlw	2	; select bank5/6
 15842  0D90  0085               	movwf	5
 15843  0D91  0800               	movf	0,w
 15844  0D92  3C64               	sublw	100
 15845  0D93  0081               	movwf	1
 15846                           
 15847                           ;system.c: 404:   virtChannels[grpA[n]].start = 0;
 15848  0D94  3009               	movlw	9
 15849  0D95                     L24:	
 15850  0D95  0140               	movlb	0	; select bank0
 15851  0D96  00AC               	movwf	___bmul@multiplicand
 15852  0D97  0144               	movlb	4	; select bank4
 15853  0D98  085D               	movf	channelThing@n^(0+512),w
 15854  0D99  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 15855  0D9A  0086               	movwf	6
 15856  0D9B  3002               	movlw	2	; select bank4/5
 15857  0D9C  0087               	movwf	7
 15858  0D9D  0801               	movf	1,w
 15859  0D9E  268D  3188         	fcall	___bmul
 15860  0DA0  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 15861  0DA1  0086               	movwf	6
 15862  0DA2  3002               	movlw	2	; select bank5/6
 15863  0DA3  0087               	movwf	7
 15864  0DA4  3009               	movlw	9
 15865  0DA5  0181               	clrf	1
 15866                           
 15867                           ;system.c: 405:   virtChannels[grpA[n]].stop = virtChannels[grpA[n]].DC;
 15868  0DA6  00AC               	movwf	___bmul@multiplicand
 15869  0DA7  0144               	movlb	4	; select bank4
 15870  0DA8  085D               	movf	channelThing@n^(0+512),w
 15871  0DA9  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 15872  0DAA  0086               	movwf	6
 15873  0DAB  0801               	movf	1,w
 15874  0DAC  268D  3188         	fcall	___bmul
 15875  0DAE  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 15876  0DAF  0086               	movwf	6
 15877  0DB0  3002               	movlw	2	; select bank5/6
 15878  0DB1  0087               	movwf	7
 15879  0DB2  3009               	movlw	9
 15880  0DB3  00AC               	movwf	___bmul@multiplicand
 15881  0DB4  0144               	movlb	4	; select bank4
 15882  0DB5  085D               	movf	channelThing@n^(0+512),w
 15883  0DB6  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 15884  0DB7  0084               	movwf	4
 15885  0DB8  3002               	movlw	2	; select bank4/5
 15886  0DB9  0085               	movwf	5
 15887  0DBA  0800               	movf	0,w
 15888  0DBB  268D  3188         	fcall	___bmul
 15889  0DBD  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 15890  0DBE  0084               	movwf	4
 15891  0DBF  3002               	movlw	2	; select bank5/6
 15892  0DC0  0085               	movwf	5
 15893  0DC1  0800               	movf	0,w
 15894  0DC2  0081               	movwf	1
 15895                           
 15896                           ;system.c: 406:  }
 15897  0DC3  0144               	movlb	4	; select bank4
 15898  0DC4  0ADD               	incf	channelThing@n^(0+512),f
 15899  0DC5  2D39               	goto	l8504
 15900  0DC6                     l8506:	
 15901                           
 15902                           ;system.c: 408:  for(n = 0; n < numGrpB; n++) {
 15903  0DC6  01DD               	clrf	channelThing@n^(0+512)
 15904  0DC7                     l8514:	
 15905  0DC7  0858               	movf	channelThing@numGrpB^(0+512),w
 15906  0DC8  025D               	subwf	channelThing@n^(0+512),w
 15907  0DC9  1803               	btfsc	3,0
 15908  0DCA  2E01               	goto	l8516
 15909                           
 15910                           ;system.c: 409:   virtChannels[grpB[n]].start = 100 - virtChannels[grpB[n]].DC ;
 15911  0DCB  3009               	movlw	9
 15912  0DCC  0140               	movlb	0	; select bank0
 15913  0DCD  00AC               	movwf	___bmul@multiplicand
 15914  0DCE  0144               	movlb	4	; select bank4
 15915  0DCF  085D               	movf	channelThing@n^(0+512),w
 15916  0DD0  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 15917  0DD1  0086               	movwf	6
 15918  0DD2  3002               	movlw	2	; select bank4/5
 15919  0DD3  0087               	movwf	7
 15920  0DD4  0801               	movf	1,w
 15921  0DD5  268D  3188         	fcall	___bmul
 15922  0DD7  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 15923  0DD8  0086               	movwf	6
 15924  0DD9  3002               	movlw	2	; select bank5/6
 15925  0DDA  0087               	movwf	7
 15926  0DDB  3009               	movlw	9
 15927  0DDC  00AC               	movwf	___bmul@multiplicand
 15928  0DDD  0144               	movlb	4	; select bank4
 15929  0DDE  085D               	movf	channelThing@n^(0+512),w
 15930  0DDF  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 15931  0DE0  0084               	movwf	4
 15932  0DE1  3002               	movlw	2	; select bank4/5
 15933  0DE2  0085               	movwf	5
 15934  0DE3  0800               	movf	0,w
 15935  0DE4  268D  3188         	fcall	___bmul
 15936  0DE6  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 15937  0DE7  0084               	movwf	4
 15938  0DE8  3002               	movlw	2	; select bank5/6
 15939  0DE9  0085               	movwf	5
 15940  0DEA  0800               	movf	0,w
 15941  0DEB  3C64               	sublw	100
 15942  0DEC  0081               	movwf	1
 15943                           
 15944                           ;system.c: 410:   virtChannels[grpB[n]].stop = 100;
 15945  0DED  3009               	movlw	9
 15946  0DEE  00AC               	movwf	___bmul@multiplicand
 15947  0DEF  0144               	movlb	4	; select bank4
 15948  0DF0  085D               	movf	channelThing@n^(0+512),w
 15949  0DF1  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 15950  0DF2  0086               	movwf	6
 15951  0DF3  3002               	movlw	2	; select bank4/5
 15952  0DF4  0087               	movwf	7
 15953  0DF5  0801               	movf	1,w
 15954  0DF6  268D  3188         	fcall	___bmul
 15955  0DF8  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 15956  0DF9  0086               	movwf	6
 15957  0DFA  3002               	movlw	2	; select bank5/6
 15958  0DFB  0087               	movwf	7
 15959  0DFC  3064               	movlw	100
 15960  0DFD  0081               	movwf	1
 15961                           
 15962                           ;system.c: 411:  }
 15963  0DFE  0144               	movlb	4	; select bank4
 15964  0DFF  0ADD               	incf	channelThing@n^(0+512),f
 15965  0E00  2DC7               	goto	l8514
 15966  0E01                     l8516:	
 15967                           
 15968                           ;system.c: 414:  for(n = 0; n < 4; n++) {
 15969  0E01  01DD               	clrf	channelThing@n^(0+512)
 15970  0E02                     l8522:	
 15971                           
 15972                           ;system.c: 415:   data.heater[virtChannels[n].phyChanNum].Patt =
 15973  0E02  3009               	movlw	9
 15974  0E03  0140               	movlb	0	; select bank0
 15975  0E04  00AC               	movwf	___bmul@multiplicand
 15976  0E05  0144               	movlb	4	; select bank4
 15977  0E06  085D               	movf	channelThing@n^(0+512),w
 15978  0E07  268D  3188         	fcall	___bmul
 15979  0E09  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 15980  0E0A  0086               	movwf	6
 15981  0E0B  3002               	movlw	2	; select bank5/6
 15982  0E0C  0087               	movwf	7
 15983  0E0D  3F40               	moviw [0]fsr1
 15984  0E0E  00AF               	movwf	___wmul@multiplier
 15985  0E0F  3F41               	moviw [1]fsr1
 15986  0E10  00B0               	movwf	___wmul@multiplier+1
 15987  0E11  301F               	movlw	31
 15988  0E12  00B1               	movwf	___wmul@multiplicand
 15989  0E13  01B2               	clrf	___wmul@multiplicand+1
 15990  0E14  2206  3188         	fcall	___wmul
 15991  0E16  3080               	movlw	128
 15992  0E17  0141               	movlb	1	; select bank1
 15993  0E18  00DB               	movwf	??_channelThing^(0+128)
 15994  0E19  3027               	movlw	39
 15995  0E1A  00DC               	movwf	(??_channelThing^(0+128)+1)
 15996  0E1B  0140               	movlb	0	; select bank0
 15997  0E1C  082F               	movf	?___wmul,w
 15998  0E1D  0141               	movlb	1	; select bank1
 15999  0E1E  075B               	addwf	??_channelThing^(0+128),w
 16000  0E1F  0086               	movwf	6
 16001  0E20  0140               	movlb	0	; select bank0
 16002  0E21  0830               	movf	?___wmul+1,w
 16003  0E22  0141               	movlb	1	; select bank1
 16004  0E23  3D5C               	addwfc	(??_channelThing+1)^(0+128),w
 16005  0E24  0087               	movwf	7
 16006  0E25  3042               	movlw	66
 16007  0E26  0140               	movlb	0	; select bank0
 16008  0E27  00DF               	movwf	___fldiv@a+3
 16009  0E28  30C8               	movlw	200
 16010  0E29  00DE               	movwf	___fldiv@a+2
 16011  0E2A  301F               	movlw	31
 16012  0E2B  01DD               	clrf	___fldiv@a+1
 16013  0E2C  01DC               	clrf	___fldiv@a
 16014  0E2D  00B1               	movwf	___wmul@multiplicand
 16015  0E2E  3009               	movlw	9
 16016  0E2F  01B2               	clrf	___wmul@multiplicand+1
 16017  0E30  00AC               	movwf	___bmul@multiplicand
 16018  0E31  0144               	movlb	4	; select bank4
 16019  0E32  085D               	movf	channelThing@n^(0+512),w
 16020  0E33  268D  3188         	fcall	___bmul
 16021  0E35  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 16022  0E36  0084               	movwf	4
 16023  0E37  3002               	movlw	2	; select bank5/6
 16024  0E38  0085               	movwf	5
 16025  0E39  3F00               	moviw [0]fsr0
 16026  0E3A  00AF               	movwf	___wmul@multiplier
 16027  0E3B  3F01               	moviw [1]fsr0
 16028  0E3C  00B0               	movwf	___wmul@multiplier+1
 16029  0E3D  2206  3188         	fcall	___wmul
 16030  0E3F  3078               	movlw	120
 16031  0E40  0141               	movlb	1	; select bank1
 16032  0E41  00DD               	movwf	(??_channelThing+2)^(0+128)
 16033  0E42  3027               	movlw	39
 16034  0E43  00DE               	movwf	((??_channelThing+2)^(0+128)+1)
 16035  0E44  0140               	movlb	0	; select bank0
 16036  0E45  082F               	movf	?___wmul,w
 16037  0E46  0141               	movlb	1	; select bank1
 16038  0E47  075D               	addwf	(??_channelThing+2)^(0+128),w
 16039  0E48  0084               	movwf	4
 16040  0E49  0140               	movlb	0	; select bank0
 16041  0E4A  0830               	movf	?___wmul+1,w
 16042  0E4B  0141               	movlb	1	; select bank1
 16043  0E4C  3D5E               	addwfc	(??_channelThing+3)^(0+128),w
 16044  0E4D  0085               	movwf	5
 16045  0E4E  3F00               	moviw [0]fsr0
 16046  0E4F  0140               	movlb	0	; select bank0
 16047  0E50  00C3               	movwf	___flmul@b
 16048  0E51  3F01               	moviw [1]fsr0
 16049  0E52  00C4               	movwf	___flmul@b+1
 16050  0E53  3F02               	moviw [2]fsr0
 16051  0E54  00C5               	movwf	___flmul@b+2
 16052  0E55  3F03               	moviw [3]fsr0
 16053  0E56  00C6               	movwf	___flmul@b+3
 16054  0E57  3009               	movlw	9
 16055  0E58  00AC               	movwf	___bmul@multiplicand
 16056  0E59  0144               	movlb	4	; select bank4
 16057  0E5A  085D               	movf	channelThing@n^(0+512),w
 16058  0E5B  268D  3188         	fcall	___bmul
 16059  0E5D  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 16060  0E5E  0084               	movwf	4
 16061  0E5F  3002               	movlw	2	; select bank5/6
 16062  0E60  0085               	movwf	5
 16063  0E61  0800               	movf	0,w
 16064  0E62  00B5               	movwf	___xxtofl@val
 16065  0E63  3001               	movlw	1
 16066  0E64  01B6               	clrf	___xxtofl@val+1
 16067  0E65  01B7               	clrf	___xxtofl@val+2
 16068  0E66  01B8               	clrf	___xxtofl@val+3
 16069  0E67  2715               	fcall	___xxtofl
 16070  0E68  0838               	movf	?___xxtofl+3,w
 16071  0E69  00CA               	movwf	___flmul@a+3
 16072  0E6A  0837               	movf	?___xxtofl+2,w
 16073  0E6B  00C9               	movwf	___flmul@a+2
 16074  0E6C  0836               	movf	?___xxtofl+1,w
 16075  0E6D  00C8               	movwf	___flmul@a+1
 16076  0E6E  0835               	movf	?___xxtofl,w
 16077  0E6F  00C7               	movwf	___flmul@a
 16078  0E70  319E  2635  3188   	fcall	___flmul
 16079  0E73  0846               	movf	?___flmul+3,w
 16080  0E74  00E3               	movwf	___fldiv@b+3
 16081  0E75  0845               	movf	?___flmul+2,w
 16082  0E76  00E2               	movwf	___fldiv@b+2
 16083  0E77  0844               	movf	?___flmul+1,w
 16084  0E78  00E1               	movwf	___fldiv@b+1
 16085  0E79  0843               	movf	?___flmul,w
 16086  0E7A  00E0               	movwf	___fldiv@b
 16087  0E7B  31A5  25DA  3188   	fcall	___fldiv
 16088  0E7E  085C               	movf	?___fldiv,w
 16089  0E7F  3FC0               	movwi [0]fsr1
 16090  0E80  085D               	movf	?___fldiv+1,w
 16091  0E81  3FC1               	movwi [1]fsr1
 16092  0E82  085E               	movf	?___fldiv+2,w
 16093  0E83  3FC2               	movwi [2]fsr1
 16094  0E84  085F               	movf	?___fldiv+3,w
 16095  0E85  3FC3               	movwi [3]fsr1
 16096                           
 16097                           ;system.c: 417:  }
 16098  0E86  0144               	movlb	4	; select bank4
 16099  0E87  3004               	movlw	4
 16100  0E88  0ADD               	incf	channelThing@n^(0+512),f
 16101  0E89  025D               	subwf	channelThing@n^(0+512),w
 16102  0E8A  1803               	btfsc	3,0
 16103  0E8B  0008               	return
 16104  0E8C  2E02               	goto	l8522
 16105  0E8D                     __end_of_channelThing:	
 16106  0E8D                     __ptext52:	
 16107 ;; *************** function ___bmul *****************
 16108 ;; Defined at:
 16109 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 16110 ;; Parameters:    Size  Location     Type
 16111 ;;  multiplier      1    wreg     unsigned char 
 16112 ;;  multiplicand    1   12[BANK0 ] unsigned char 
 16113 ;; Auto vars:     Size  Location     Type
 16114 ;;  multiplier      1   14[BANK0 ] unsigned char 
 16115 ;;  product         1   13[BANK0 ] unsigned char 
 16116 ;; Return value:  Size  Location     Type
 16117 ;;                  1    wreg      unsigned char 
 16118 ;; Registers used:
 16119 ;;		wreg, status,2, status,0
 16120 ;; Tracked objects:
 16121 ;;		On entry : 3A/1
 16122 ;;		On exit  : 3F/0
 16123 ;;		Unchanged: 0/0
 16124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16125 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16126 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16127 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16128 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16129 ;;Total ram usage:        3 bytes
 16130 ;; Hardware stack levels used:    1
 16131 ;; Hardware stack levels required when called:    3
 16132 ;; This function calls:
 16133 ;;		Nothing
 16134 ;; This function is called by:
 16135 ;;		_channelView
 16136 ;;		_sortDC
 16137 ;;		_sortDCRev
 16138 ;;		_channelThing
 16139 ;;		_controller
 16140 ;;		_qsort
 16141 ;; This function uses a non-reentrant model
 16142 ;;
 16143                           
 16144                           
 16145                           ;psect for function ___bmul
 16146  0E8D                     ___bmul:	
 16147                           
 16148                           ;incstack = 0
 16149                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 16150                           ;___bmul@multiplier stored from wreg
 16151  0E8D  0140               	movlb	0	; select bank0
 16152  0E8E  00AE               	movwf	___bmul@multiplier
 16153  0E8F  01AD               	clrf	___bmul@product
 16154  0E90  082C               	movf	___bmul@multiplicand,w
 16155  0E91  182E               	btfsc	___bmul@multiplier,0
 16156  0E92  07AD               	addwf	___bmul@product,f
 16157  0E93  35AC               	lslf	___bmul@multiplicand,f
 16158  0E94  082C               	movf	___bmul@multiplicand,w
 16159  0E95  18AE               	btfsc	___bmul@multiplier,1
 16160  0E96  07AD               	addwf	___bmul@product,f
 16161  0E97  35AC               	lslf	___bmul@multiplicand,f
 16162  0E98  082C               	movf	___bmul@multiplicand,w
 16163  0E99  192E               	btfsc	___bmul@multiplier,2
 16164  0E9A  07AD               	addwf	___bmul@product,f
 16165  0E9B  35AC               	lslf	___bmul@multiplicand,f
 16166  0E9C  082C               	movf	___bmul@multiplicand,w
 16167  0E9D  19AE               	btfsc	___bmul@multiplier,3
 16168  0E9E  07AD               	addwf	___bmul@product,f
 16169  0E9F  35AC               	lslf	___bmul@multiplicand,f
 16170  0EA0  082C               	movf	___bmul@multiplicand,w
 16171  0EA1  1A2E               	btfsc	___bmul@multiplier,4
 16172  0EA2  07AD               	addwf	___bmul@product,f
 16173  0EA3  35AC               	lslf	___bmul@multiplicand,f
 16174  0EA4  082C               	movf	___bmul@multiplicand,w
 16175  0EA5  1AAE               	btfsc	___bmul@multiplier,5
 16176  0EA6  07AD               	addwf	___bmul@product,f
 16177  0EA7  35AC               	lslf	___bmul@multiplicand,f
 16178  0EA8  082C               	movf	___bmul@multiplicand,w
 16179  0EA9  1B2E               	btfsc	___bmul@multiplier,6
 16180  0EAA  07AD               	addwf	___bmul@product,f
 16181  0EAB  35AC               	lslf	___bmul@multiplicand,f
 16182  0EAC  082C               	movf	___bmul@multiplicand,w
 16183  0EAD  1BAE               	btfsc	___bmul@multiplier,7
 16184  0EAE  07AD               	addwf	___bmul@product,f
 16185  0EAF  082D               	movf	___bmul@product,w
 16186  0EB0  0008               	return
 16187  0EB1                     __end_of___bmul:	
 16188  0EB1                     __ptext57:	
 16189 ;; *************** function ___flge *****************
 16190 ;; Defined at:
 16191 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 16192 ;; Parameters:    Size  Location     Type
 16193 ;;  ff1             4   13[BANK1 ] unsigned char 
 16194 ;;  ff2             4   17[BANK1 ] unsigned char 
 16195 ;; Auto vars:     Size  Location     Type
 16196 ;;		None
 16197 ;; Return value:  Size  Location     Type
 16198 ;;		None               void
 16199 ;; Registers used:
 16200 ;;		wreg, status,2, status,0
 16201 ;; Tracked objects:
 16202 ;;		On entry : 3F/1
 16203 ;;		On exit  : 3F/1
 16204 ;;		Unchanged: 0/0
 16205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16206 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16208 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16209 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16210 ;;Total ram usage:       12 bytes
 16211 ;; Hardware stack levels used:    1
 16212 ;; Hardware stack levels required when called:    3
 16213 ;; This function calls:
 16214 ;;		Nothing
 16215 ;; This function is called by:
 16216 ;;		_spinInput
 16217 ;;		_channelSetup
 16218 ;;		_setOutputPower
 16219 ;;		_checkChannelStatus
 16220 ;;		_systemCheck
 16221 ;;		_checkSensor
 16222 ;;		_channelThing
 16223 ;;		_ftoa
 16224 ;; This function uses a non-reentrant model
 16225 ;;
 16226                           
 16227                           
 16228                           ;psect for function ___flge
 16229  0EB1                     ___flge:	
 16230                           
 16231                           ;incstack = 0
 16232                           ; Regs used in ___flge: [wreg+status,2+status,0]
 16233  0EB1  3080               	movlw	128
 16234  0EB2  01B5               	clrf	??___flge^(0+128)
 16235  0EB3  01B6               	clrf	(??___flge^(0+128)+1)
 16236  0EB4  052F               	andwf	(___flge@ff1+2)^(0+128),w
 16237  0EB5  00B7               	movwf	(??___flge^(0+128)+2)
 16238  0EB6  307F               	movlw	127
 16239  0EB7  0530               	andwf	(___flge@ff1+3)^(0+128),w
 16240  0EB8  00B8               	movwf	(??___flge^(0+128)+3)
 16241  0EB9  0838               	movf	(??___flge+3)^(0+128),w
 16242  0EBA  0437               	iorwf	(??___flge+2)^(0+128),w
 16243  0EBB  0436               	iorwf	(??___flge+1)^(0+128),w
 16244  0EBC  0435               	iorwf	??___flge^(0+128),w
 16245  0EBD  1D03               	skipz
 16246  0EBE  2EC3               	goto	l7444
 16247  0EBF  01AD               	clrf	___flge@ff1^(0+128)
 16248  0EC0  01AE               	clrf	(___flge@ff1+1)^(0+128)
 16249  0EC1  01AF               	clrf	(___flge@ff1+2)^(0+128)
 16250  0EC2  01B0               	clrf	(___flge@ff1+3)^(0+128)
 16251  0EC3                     l7444:	
 16252  0EC3  3080               	movlw	128
 16253  0EC4  01B5               	clrf	??___flge^(0+128)
 16254  0EC5  01B6               	clrf	(??___flge^(0+128)+1)
 16255  0EC6  0533               	andwf	(___flge@ff2+2)^(0+128),w
 16256  0EC7  00B7               	movwf	(??___flge^(0+128)+2)
 16257  0EC8  307F               	movlw	127
 16258  0EC9  0534               	andwf	(___flge@ff2+3)^(0+128),w
 16259  0ECA  00B8               	movwf	(??___flge^(0+128)+3)
 16260  0ECB  0838               	movf	(??___flge+3)^(0+128),w
 16261  0ECC  0437               	iorwf	(??___flge+2)^(0+128),w
 16262  0ECD  0436               	iorwf	(??___flge+1)^(0+128),w
 16263  0ECE  0435               	iorwf	??___flge^(0+128),w
 16264  0ECF  1D03               	skipz
 16265  0ED0  2ED5               	goto	l1290
 16266  0ED1  01B1               	clrf	___flge@ff2^(0+128)
 16267  0ED2  01B2               	clrf	(___flge@ff2+1)^(0+128)
 16268  0ED3  01B3               	clrf	(___flge@ff2+2)^(0+128)
 16269  0ED4  01B4               	clrf	(___flge@ff2+3)^(0+128)
 16270  0ED5                     l1290:	
 16271  0ED5  1FB0               	btfss	(___flge@ff1+3)^(0+128),7
 16272  0ED6  2EEC               	goto	l7450
 16273  0ED7  3080               	movlw	128
 16274  0ED8  01B5               	clrf	??___flge^(0+128)
 16275  0ED9  01B6               	clrf	(??___flge^(0+128)+1)
 16276  0EDA  01B7               	clrf	(??___flge^(0+128)+2)
 16277  0EDB  00B8               	movwf	(??___flge^(0+128)+3)
 16278  0EDC  082D               	movf	___flge@ff1^(0+128),w
 16279  0EDD  02B5               	subwf	??___flge^(0+128),f
 16280  0EDE  082E               	movf	(___flge@ff1+1)^(0+128),w
 16281  0EDF  3BB6               	subwfb	(??___flge^(0+128)+1),f
 16282  0EE0  082F               	movf	(___flge@ff1+2)^(0+128),w
 16283  0EE1  3BB7               	subwfb	(??___flge^(0+128)+2),f
 16284  0EE2  0830               	movf	(___flge@ff1+3)^(0+128),w
 16285  0EE3  3BB8               	subwfb	(??___flge^(0+128)+3),f
 16286  0EE4  0838               	movf	(??___flge+3)^(0+128),w
 16287  0EE5  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16288  0EE6  0837               	movf	(??___flge+2)^(0+128),w
 16289  0EE7  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16290  0EE8  0836               	movf	(??___flge+1)^(0+128),w
 16291  0EE9  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16292  0EEA  0835               	movf	??___flge^(0+128),w
 16293  0EEB  00AD               	movwf	___flge@ff1^(0+128)
 16294  0EEC                     l7450:	
 16295  0EEC  1FB4               	btfss	(___flge@ff2+3)^(0+128),7
 16296  0EED  2F03               	goto	l1292
 16297  0EEE  3080               	movlw	128
 16298  0EEF  01B5               	clrf	??___flge^(0+128)
 16299  0EF0  01B6               	clrf	(??___flge^(0+128)+1)
 16300  0EF1  01B7               	clrf	(??___flge^(0+128)+2)
 16301  0EF2  00B8               	movwf	(??___flge^(0+128)+3)
 16302  0EF3  0831               	movf	___flge@ff2^(0+128),w
 16303  0EF4  02B5               	subwf	??___flge^(0+128),f
 16304  0EF5  0832               	movf	(___flge@ff2+1)^(0+128),w
 16305  0EF6  3BB6               	subwfb	(??___flge^(0+128)+1),f
 16306  0EF7  0833               	movf	(___flge@ff2+2)^(0+128),w
 16307  0EF8  3BB7               	subwfb	(??___flge^(0+128)+2),f
 16308  0EF9  0834               	movf	(___flge@ff2+3)^(0+128),w
 16309  0EFA  3BB8               	subwfb	(??___flge^(0+128)+3),f
 16310  0EFB  0838               	movf	(??___flge+3)^(0+128),w
 16311  0EFC  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16312  0EFD  0837               	movf	(??___flge+2)^(0+128),w
 16313  0EFE  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16314  0EFF  0836               	movf	(??___flge+1)^(0+128),w
 16315  0F00  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16316  0F01  0835               	movf	??___flge^(0+128),w
 16317  0F02  00B1               	movwf	___flge@ff2^(0+128)
 16318  0F03                     l1292:	
 16319  0F03  3080               	movlw	128
 16320  0F04  06B0               	xorwf	(___flge@ff1+3)^(0+128),f
 16321  0F05  06B4               	xorwf	(___flge@ff2+3)^(0+128),f
 16322  0F06  0834               	movf	(___flge@ff2+3)^(0+128),w
 16323  0F07  0230               	subwf	(___flge@ff1+3)^(0+128),w
 16324  0F08  1D03               	skipz
 16325  0F09  0008               	return
 16326  0F0A  0833               	movf	(___flge@ff2+2)^(0+128),w
 16327  0F0B  022F               	subwf	(___flge@ff1+2)^(0+128),w
 16328  0F0C  1D03               	skipz
 16329  0F0D  0008               	return
 16330  0F0E  0832               	movf	(___flge@ff2+1)^(0+128),w
 16331  0F0F  022E               	subwf	(___flge@ff1+1)^(0+128),w
 16332  0F10  1D03               	skipz
 16333  0F11  0008               	return
 16334  0F12  0831               	movf	___flge@ff2^(0+128),w
 16335  0F13  022D               	subwf	___flge@ff1^(0+128),w
 16336  0F14  0008               	return
 16337  0F15                     __end_of___flge:	
 16338  0F15                     __ptext56:	
 16339 ;; *************** function ___xxtofl *****************
 16340 ;; Defined at:
 16341 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 16342 ;; Parameters:    Size  Location     Type
 16343 ;;  sign            1    wreg     unsigned char 
 16344 ;;  val             4   21[BANK0 ] long 
 16345 ;; Auto vars:     Size  Location     Type
 16346 ;;  sign            1   29[BANK0 ] unsigned char 
 16347 ;;  arg             4   31[BANK0 ] unsigned long 
 16348 ;;  exp             1   30[BANK0 ] unsigned char 
 16349 ;; Return value:  Size  Location     Type
 16350 ;;                  4   21[BANK0 ] unsigned char 
 16351 ;; Registers used:
 16352 ;;		wreg, status,2, status,0
 16353 ;; Tracked objects:
 16354 ;;		On entry : 3F/0
 16355 ;;		On exit  : 3F/0
 16356 ;;		Unchanged: 0/0
 16357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16358 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16359 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16360 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16361 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16362 ;;Total ram usage:       14 bytes
 16363 ;; Hardware stack levels used:    1
 16364 ;; Hardware stack levels required when called:    3
 16365 ;; This function calls:
 16366 ;;		Nothing
 16367 ;; This function is called by:
 16368 ;;		_checkChannelStatus
 16369 ;;		_systemCheck
 16370 ;;		_getAnalogValues
 16371 ;;		_channelThing
 16372 ;;		_ftoa
 16373 ;; This function uses a non-reentrant model
 16374 ;;
 16375                           
 16376                           
 16377                           ;psect for function ___xxtofl
 16378  0F15                     ___xxtofl:	
 16379                           
 16380                           ;incstack = 0
 16381                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 16382                           ;___xxtofl@sign stored from wreg
 16383  0F15  00BD               	movwf	___xxtofl@sign
 16384  0F16  083D               	movf	___xxtofl@sign,w
 16385  0F17  1D03               	btfss	3,2
 16386  0F18  1FB8               	btfss	___xxtofl@val+3,7
 16387  0F19  2F2A               	goto	l5194
 16388  0F1A  0935               	comf	___xxtofl@val,w
 16389  0F1B  00BF               	movwf	___xxtofl@arg
 16390  0F1C  0936               	comf	___xxtofl@val+1,w
 16391  0F1D  00C0               	movwf	___xxtofl@arg+1
 16392  0F1E  0937               	comf	___xxtofl@val+2,w
 16393  0F1F  00C1               	movwf	___xxtofl@arg+2
 16394  0F20  0938               	comf	___xxtofl@val+3,w
 16395  0F21  00C2               	movwf	___xxtofl@arg+3
 16396  0F22  0ABF               	incf	___xxtofl@arg,f
 16397  0F23  1903               	skipnz
 16398  0F24  0AC0               	incf	___xxtofl@arg+1,f
 16399  0F25  1903               	skipnz
 16400  0F26  0AC1               	incf	___xxtofl@arg+2,f
 16401  0F27  1903               	skipnz
 16402  0F28  0AC2               	incf	___xxtofl@arg+3,f
 16403  0F29  2F32               	goto	l1546
 16404  0F2A                     l5194:	
 16405  0F2A  0838               	movf	___xxtofl@val+3,w
 16406  0F2B  00C2               	movwf	___xxtofl@arg+3
 16407  0F2C  0837               	movf	___xxtofl@val+2,w
 16408  0F2D  00C1               	movwf	___xxtofl@arg+2
 16409  0F2E  0836               	movf	___xxtofl@val+1,w
 16410  0F2F  00C0               	movwf	___xxtofl@arg+1
 16411  0F30  0835               	movf	___xxtofl@val,w
 16412  0F31  00BF               	movwf	___xxtofl@arg
 16413  0F32                     l1546:	
 16414  0F32  0838               	movf	___xxtofl@val+3,w
 16415  0F33  0437               	iorwf	___xxtofl@val+2,w
 16416  0F34  0436               	iorwf	___xxtofl@val+1,w
 16417  0F35  0435               	iorwf	___xxtofl@val,w
 16418  0F36  1D03               	skipz
 16419  0F37  2F3D               	goto	l5198
 16420  0F38  01B5               	clrf	?___xxtofl
 16421  0F39  01B6               	clrf	?___xxtofl+1
 16422  0F3A  01B7               	clrf	?___xxtofl+2
 16423  0F3B  01B8               	clrf	?___xxtofl+3
 16424  0F3C  0008               	return
 16425  0F3D                     l5198:	
 16426  0F3D  3096               	movlw	150
 16427  0F3E  00BE               	movwf	___xxtofl@exp
 16428  0F3F                     l5202:	
 16429  0F3F  30FE               	movlw	254
 16430  0F40  0542               	andwf	___xxtofl@arg+3,w
 16431  0F41  1903               	btfsc	3,2
 16432  0F42  2F54               	goto	l5210
 16433  0F43  0ABE               	incf	___xxtofl@exp,f
 16434  0F44  36C2               	lsrf	___xxtofl@arg+3,f
 16435  0F45  0CC1               	rrf	___xxtofl@arg+2,f
 16436  0F46  0CC0               	rrf	___xxtofl@arg+1,f
 16437  0F47  0CBF               	rrf	___xxtofl@arg,f
 16438  0F48  2F3F               	goto	l5202
 16439  0F49                     l5204:	
 16440  0F49  3001               	movlw	1
 16441  0F4A  0ABE               	incf	___xxtofl@exp,f
 16442  0F4B  07BF               	addwf	___xxtofl@arg,f
 16443  0F4C  3000               	movlw	0
 16444  0F4D  3DC0               	addwfc	___xxtofl@arg+1,f
 16445  0F4E  3DC1               	addwfc	___xxtofl@arg+2,f
 16446  0F4F  3DC2               	addwfc	___xxtofl@arg+3,f
 16447  0F50  36C2               	lsrf	___xxtofl@arg+3,f
 16448  0F51  0CC1               	rrf	___xxtofl@arg+2,f
 16449  0F52  0CC0               	rrf	___xxtofl@arg+1,f
 16450  0F53  0CBF               	rrf	___xxtofl@arg,f
 16451  0F54                     l5210:	
 16452  0F54  30FF               	movlw	255
 16453  0F55  0542               	andwf	___xxtofl@arg+3,w
 16454  0F56  1903               	btfsc	3,2
 16455  0F57  2F62               	goto	l5214
 16456  0F58  2F49               	goto	l5204
 16457  0F59                     l5216:	
 16458  0F59  3002               	movlw	2
 16459  0F5A  023E               	subwf	___xxtofl@exp,w
 16460  0F5B  1C03               	btfss	3,0
 16461  0F5C  2F64               	goto	l1559
 16462  0F5D  03BE               	decf	___xxtofl@exp,f
 16463  0F5E  35BF               	lslf	___xxtofl@arg,f
 16464  0F5F  0DC0               	rlf	___xxtofl@arg+1,f
 16465  0F60  0DC1               	rlf	___xxtofl@arg+2,f
 16466  0F61  0DC2               	rlf	___xxtofl@arg+3,f
 16467  0F62                     l5214:	
 16468  0F62  1FC1               	btfss	___xxtofl@arg+2,7
 16469  0F63  2F59               	goto	l5216
 16470  0F64                     l1559:	
 16471  0F64  1C3E               	btfss	___xxtofl@exp,0
 16472  0F65  13C1               	bcf	___xxtofl@arg+2,7
 16473  0F66  36BE               	lsrf	___xxtofl@exp,f
 16474  0F67  083E               	movf	___xxtofl@exp,w
 16475  0F68  00BC               	movwf	??___xxtofl+3
 16476  0F69  01BB               	clrf	??___xxtofl+2
 16477  0F6A  01BA               	clrf	??___xxtofl+1
 16478  0F6B  01B9               	clrf	??___xxtofl
 16479  0F6C  0839               	movf	??___xxtofl,w
 16480  0F6D  04BF               	iorwf	___xxtofl@arg,f
 16481  0F6E  083A               	movf	??___xxtofl+1,w
 16482  0F6F  04C0               	iorwf	___xxtofl@arg+1,f
 16483  0F70  083B               	movf	??___xxtofl+2,w
 16484  0F71  04C1               	iorwf	___xxtofl@arg+2,f
 16485  0F72  083C               	movf	??___xxtofl+3,w
 16486  0F73  04C2               	iorwf	___xxtofl@arg+3,f
 16487  0F74  083D               	movf	___xxtofl@sign,w
 16488  0F75  1D03               	btfss	3,2
 16489  0F76  1FB8               	btfss	___xxtofl@val+3,7
 16490  0F77  2F79               	goto	l5228
 16491  0F78  17C2               	bsf	___xxtofl@arg+3,7
 16492  0F79                     l5228:	
 16493  0F79  0842               	movf	___xxtofl@arg+3,w
 16494  0F7A  00B8               	movwf	?___xxtofl+3
 16495  0F7B  0841               	movf	___xxtofl@arg+2,w
 16496  0F7C  00B7               	movwf	?___xxtofl+2
 16497  0F7D  0840               	movf	___xxtofl@arg+1,w
 16498  0F7E  00B6               	movwf	?___xxtofl+1
 16499  0F7F  083F               	movf	___xxtofl@arg,w
 16500  0F80  00B5               	movwf	?___xxtofl
 16501  0F81  0008               	return
 16502  0F82                     __end_of___xxtofl:	
 16503  0F82                     __ptext60:	
 16504 ;; *************** function ___flsub *****************
 16505 ;; Defined at:
 16506 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 16507 ;; Parameters:    Size  Location     Type
 16508 ;;  a               4    8[BANK1 ] unsigned int 
 16509 ;;  b               4   12[BANK1 ] unsigned int 
 16510 ;; Auto vars:     Size  Location     Type
 16511 ;;		None
 16512 ;; Return value:  Size  Location     Type
 16513 ;;                  4    8[BANK1 ] unsigned int 
 16514 ;; Registers used:
 16515 ;;		wreg, status,2, status,0, pclath, cstack
 16516 ;; Tracked objects:
 16517 ;;		On entry : 3F/1
 16518 ;;		On exit  : 3F/1
 16519 ;;		Unchanged: 0/0
 16520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16521 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16522 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16524 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16525 ;;Total ram usage:        8 bytes
 16526 ;; Hardware stack levels used:    1
 16527 ;; Hardware stack levels required when called:    4
 16528 ;; This function calls:
 16529 ;;		___fladd
 16530 ;; This function is called by:
 16531 ;;		_spinInput
 16532 ;;		_calcRequiredPower
 16533 ;;		_sortCur
 16534 ;;		_ftoa
 16535 ;; This function uses a non-reentrant model
 16536 ;;
 16537                           
 16538                           
 16539                           ;psect for function ___flsub
 16540  0F82                     ___flsub:	
 16541                           
 16542                           ;incstack = 0
 16543                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 16544  0F82  3080               	movlw	128
 16545  0F83  06AB               	xorwf	(___flsub@a+3)^(0+128),f
 16546  0F84  082F               	movf	(___flsub@b+3)^(0+128),w
 16547  0F85  0140               	movlb	0	; select bank0
 16548  0F86  00DF               	movwf	___fladd@b+3
 16549  0F87  0141               	movlb	1	; select bank1
 16550  0F88  082E               	movf	(___flsub@b+2)^(0+128),w
 16551  0F89  0140               	movlb	0	; select bank0
 16552  0F8A  00DE               	movwf	___fladd@b+2
 16553  0F8B  0141               	movlb	1	; select bank1
 16554  0F8C  082D               	movf	(___flsub@b+1)^(0+128),w
 16555  0F8D  0140               	movlb	0	; select bank0
 16556  0F8E  00DD               	movwf	___fladd@b+1
 16557  0F8F  0141               	movlb	1	; select bank1
 16558  0F90  082C               	movf	___flsub@b^(0+128),w
 16559  0F91  0140               	movlb	0	; select bank0
 16560  0F92  00DC               	movwf	___fladd@b
 16561  0F93  0141               	movlb	1	; select bank1
 16562  0F94  082B               	movf	(___flsub@a+3)^(0+128),w
 16563  0F95  0140               	movlb	0	; select bank0
 16564  0F96  00E3               	movwf	___fladd@a+3
 16565  0F97  0141               	movlb	1	; select bank1
 16566  0F98  082A               	movf	(___flsub@a+2)^(0+128),w
 16567  0F99  0140               	movlb	0	; select bank0
 16568  0F9A  00E2               	movwf	___fladd@a+2
 16569  0F9B  0141               	movlb	1	; select bank1
 16570  0F9C  0829               	movf	(___flsub@a+1)^(0+128),w
 16571  0F9D  0140               	movlb	0	; select bank0
 16572  0F9E  00E1               	movwf	___fladd@a+1
 16573  0F9F  0141               	movlb	1	; select bank1
 16574  0FA0  0828               	movf	___flsub@a^(0+128),w
 16575  0FA1  0140               	movlb	0	; select bank0
 16576  0FA2  00E0               	movwf	___fladd@a
 16577  0FA3  31AC  24AF         	fcall	___fladd
 16578  0FA5  085F               	movf	?___fladd+3,w
 16579  0FA6  0141               	movlb	1	; select bank1
 16580  0FA7  00AB               	movwf	(?___flsub+3)^(0+128)
 16581  0FA8  0140               	movlb	0	; select bank0
 16582  0FA9  085E               	movf	?___fladd+2,w
 16583  0FAA  0141               	movlb	1	; select bank1
 16584  0FAB  00AA               	movwf	(?___flsub+2)^(0+128)
 16585  0FAC  0140               	movlb	0	; select bank0
 16586  0FAD  085D               	movf	?___fladd+1,w
 16587  0FAE  0141               	movlb	1	; select bank1
 16588  0FAF  00A9               	movwf	(?___flsub+1)^(0+128)
 16589  0FB0  0140               	movlb	0	; select bank0
 16590  0FB1  085C               	movf	?___fladd,w
 16591  0FB2  0141               	movlb	1	; select bank1
 16592  0FB3  00A8               	movwf	?___flsub^(0+128)
 16593  0FB4  0008               	return
 16594  0FB5                     __end_of___flsub:	
 16595  0FB5                     __ptext53:	
 16596 ;; *************** function ___fltol *****************
 16597 ;; Defined at:
 16598 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 16599 ;; Parameters:    Size  Location     Type
 16600 ;;  f1              4   16[BANK1 ] unsigned char 
 16601 ;; Auto vars:     Size  Location     Type
 16602 ;;  exp1            1   25[BANK1 ] unsigned char 
 16603 ;;  sign1           1   24[BANK1 ] unsigned char 
 16604 ;; Return value:  Size  Location     Type
 16605 ;;                  4   16[BANK1 ] long 
 16606 ;; Registers used:
 16607 ;;		wreg, status,2, status,0
 16608 ;; Tracked objects:
 16609 ;;		On entry : 3F/1
 16610 ;;		On exit  : 3F/1
 16611 ;;		Unchanged: 0/0
 16612 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16613 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16614 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16615 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16616 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16617 ;;Total ram usage:       10 bytes
 16618 ;; Hardware stack levels used:    1
 16619 ;; Hardware stack levels required when called:    3
 16620 ;; This function calls:
 16621 ;;		Nothing
 16622 ;; This function is called by:
 16623 ;;		_checkChannelStatus
 16624 ;;		_sortCur
 16625 ;;		_ftoa
 16626 ;; This function uses a non-reentrant model
 16627 ;;
 16628                           
 16629                           
 16630                           ;psect for function ___fltol
 16631  0FB5                     ___fltol:	
 16632                           
 16633                           ;incstack = 0
 16634                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 16635  0FB5  1003               	clrc
 16636  0FB6  0D32               	rlf	(___fltol@f1+2)^(0+128),w
 16637  0FB7  0D33               	rlf	(___fltol@f1+3)^(0+128),w
 16638  0FB8  00B9               	movwf	___fltol@exp1^(0+128)
 16639  0FB9  0839               	movf	___fltol@exp1^(0+128),w
 16640  0FBA  1D03               	btfss	3,2
 16641  0FBB  2FC1               	goto	l7464
 16642  0FBC                     l7462:	
 16643  0FBC  01B0               	clrf	?___fltol^(0+128)
 16644  0FBD  01B1               	clrf	(?___fltol+1)^(0+128)
 16645  0FBE  01B2               	clrf	(?___fltol+2)^(0+128)
 16646  0FBF  01B3               	clrf	(?___fltol+3)^(0+128)
 16647  0FC0  0008               	return
 16648  0FC1                     l7464:	
 16649  0FC1  0830               	movf	___fltol@f1^(0+128),w
 16650  0FC2  00B4               	movwf	??___fltol^(0+128)
 16651  0FC3  0831               	movf	(___fltol@f1+1)^(0+128),w
 16652  0FC4  00B5               	movwf	(??___fltol^(0+128)+1)
 16653  0FC5  0832               	movf	(___fltol@f1+2)^(0+128),w
 16654  0FC6  00B6               	movwf	(??___fltol^(0+128)+2)
 16655  0FC7  0833               	movf	(___fltol@f1+3)^(0+128),w
 16656  0FC8  00B7               	movwf	(??___fltol^(0+128)+3)
 16657  0FC9  301F               	movlw	31
 16658  0FCA                     u7665:	
 16659  0FCA  36B7               	lsrf	(??___fltol^(0+128)+3),f
 16660  0FCB  0CB6               	rrf	(??___fltol^(0+128)+2),f
 16661  0FCC  0CB5               	rrf	(??___fltol^(0+128)+1),f
 16662  0FCD  0CB4               	rrf	??___fltol^(0+128),f
 16663  0FCE  0B89               	decfsz	9,f
 16664  0FCF  2FCA               	goto	u7665
 16665  0FD0  0834               	movf	??___fltol^(0+128),w
 16666  0FD1  00B8               	movwf	___fltol@sign1^(0+128)
 16667  0FD2  3096               	movlw	150
 16668  0FD3  17B2               	bsf	(___fltol@f1^(0+128)+2),7
 16669  0FD4  01B3               	clrf	(___fltol@f1+3)^(0+128)
 16670  0FD5  02B9               	subwf	___fltol@exp1^(0+128),f
 16671  0FD6  1FB9               	btfss	___fltol@exp1^(0+128),7
 16672  0FD7  2FE4               	goto	l7482
 16673  0FD8  0839               	movf	___fltol@exp1^(0+128),w
 16674  0FD9  3A80               	xorlw	128
 16675  0FDA  3E97               	addlw	151
 16676  0FDB  1C03               	btfss	3,0
 16677  0FDC  2FBC               	goto	l7462
 16678  0FDD                     l7478:	
 16679  0FDD  36B3               	lsrf	(___fltol@f1+3)^(0+128),f
 16680  0FDE  0CB2               	rrf	(___fltol@f1+2)^(0+128),f
 16681  0FDF  0CB1               	rrf	(___fltol@f1+1)^(0+128),f
 16682  0FE0  0CB0               	rrf	___fltol@f1^(0+128),f
 16683  0FE1  0FB9               	incfsz	___fltol@exp1^(0+128),f
 16684  0FE2  2FDD               	goto	l7478
 16685  0FE3  2FF1               	goto	l7490
 16686  0FE4                     l7482:	
 16687  0FE4  3020               	movlw	32
 16688  0FE5  0239               	subwf	___fltol@exp1^(0+128),w
 16689  0FE6  1803               	btfsc	3,0
 16690  0FE7  2FBC               	goto	l7462
 16691  0FE8                     l7488:	
 16692  0FE8  0839               	movf	___fltol@exp1^(0+128),w
 16693  0FE9  1903               	btfsc	3,2
 16694  0FEA  2FF1               	goto	l7490
 16695  0FEB  35B0               	lslf	___fltol@f1^(0+128),f
 16696  0FEC  0DB1               	rlf	(___fltol@f1+1)^(0+128),f
 16697  0FED  0DB2               	rlf	(___fltol@f1+2)^(0+128),f
 16698  0FEE  0DB3               	rlf	(___fltol@f1+3)^(0+128),f
 16699  0FEF  03B9               	decf	___fltol@exp1^(0+128),f
 16700  0FF0  2FE8               	goto	l7488
 16701  0FF1                     l7490:	
 16702  0FF1  0838               	movf	___fltol@sign1^(0+128),w
 16703  0FF2  1903               	btfsc	3,2
 16704  0FF3  0008               	return
 16705  0FF4  09B0               	comf	___fltol@f1^(0+128),f
 16706  0FF5  09B1               	comf	(___fltol@f1+1)^(0+128),f
 16707  0FF6  09B2               	comf	(___fltol@f1+2)^(0+128),f
 16708  0FF7  09B3               	comf	(___fltol@f1+3)^(0+128),f
 16709  0FF8  0AB0               	incf	___fltol@f1^(0+128),f
 16710  0FF9  1903               	skipnz
 16711  0FFA  0AB1               	incf	(___fltol@f1+1)^(0+128),f
 16712  0FFB  1903               	skipnz
 16713  0FFC  0AB2               	incf	(___fltol@f1+2)^(0+128),f
 16714  0FFD  1903               	skipnz
 16715  0FFE  0AB3               	incf	(___fltol@f1+3)^(0+128),f
 16716  0FFF  0008               	return
 16717  1000                     __end_of___fltol:	
 16718                           
 16719                           	psect	swtext2
 16720  2000                     __pswtext2:	
 16721  2000                     S8890:	
 16722  2000  3188  28B3         	ljmp	l7808
 16723  2002  3188  28C3         	ljmp	l7810
 16724  2004  3189  298B         	ljmp	l7824
 16725  2006  3189  299B         	ljmp	l7826
 16726  2008  3189  29AB         	ljmp	l7828
 16727  200A  3188  28A3         	ljmp	l7806
 16728                           
 16729                           	psect	text29
 16730  1836                     __ptext29:	
 16731 ;; *************** function _initialize *****************
 16732 ;; Defined at:
 16733 ;;		line 148 in file "main.c"
 16734 ;; Parameters:    Size  Location     Type
 16735 ;;		None
 16736 ;; Auto vars:     Size  Location     Type
 16737 ;;		None
 16738 ;; Return value:  Size  Location     Type
 16739 ;;                  1    wreg      void 
 16740 ;; Registers used:
 16741 ;;		wreg, status,2, status,0
 16742 ;; Tracked objects:
 16743 ;;		On entry : B3F/2
 16744 ;;		On exit  : B3F/2
 16745 ;;		Unchanged: B00/0
 16746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16751 ;;Total ram usage:        0 bytes
 16752 ;; Hardware stack levels used:    1
 16753 ;; Hardware stack levels required when called:    3
 16754 ;; This function calls:
 16755 ;;		Nothing
 16756 ;; This function is called by:
 16757 ;;		_main
 16758 ;; This function uses a non-reentrant model
 16759 ;;
 16760                           
 16761                           
 16762                           ;psect for function _initialize
 16763  1836                     _initialize:	
 16764                           
 16765                           ;main.c: 150:  OSCFRQ = 0b00000010;
 16766                           
 16767                           ;incstack = 0
 16768                           ; Regs used in _initialize: [wreg+status,2+status,0]
 16769  1836  3002               	movlw	2
 16770  1837  0151               	movlb	17	; select bank17
 16771  1838  0093               	movwf	19	;volatile
 16772                           
 16773                           ;main.c: 151:  OSCCON1 = 0b01100000;
 16774  1839  3060               	movlw	96
 16775  183A  008D               	movwf	13	;volatile
 16776  183B                     l150:	
 16777                           ;main.c: 152:  while (!OSCCON3bits.ORDY);
 16778                           
 16779  183B  1E0F               	btfss	15,4	;volatile
 16780  183C  283B               	goto	l150
 16781                           
 16782                           ;main.c: 155:  RX1DTPPSbits.RX1DTPPS = 0x17;
 16783  183D  017D               	movlb	61	; select bank61
 16784  183E  084B               	movf	75,w	;volatile
 16785  183F  39C0               	andlw	-64
 16786  1840  3817               	iorlw	23
 16787  1841  00CB               	movwf	75	;volatile
 16788                           
 16789                           ;main.c: 156:  RC6PPS = 0x0F;
 16790  1842  300F               	movlw	15
 16791  1843  017E               	movlb	62	; select bank62
 16792  1844  00A6               	movwf	38	;volatile
 16793                           
 16794                           ;main.c: 159:  ANSELA = 0b01000000;
 16795  1845  3040               	movlw	64
 16796  1846  00B8               	movwf	56	;volatile
 16797                           
 16798                           ;main.c: 160:  ANSELB = 0b00000000;
 16799  1847  01C3               	clrf	67	;volatile
 16800                           
 16801                           ;main.c: 161:  ANSELC = 0b00000011;
 16802  1848  3003               	movlw	3
 16803  1849  00CE               	movwf	78	;volatile
 16804                           
 16805                           ;main.c: 164:  TRISA = 0b11110000;
 16806  184A  30F0               	movlw	240
 16807  184B  0140               	movlb	0	; select bank0
 16808  184C  0092               	movwf	18	;volatile
 16809                           
 16810                           ;main.c: 165:  TRISB = 0b00000000;
 16811  184D  0193               	clrf	19	;volatile
 16812                           
 16813                           ;main.c: 166:  TRISC = 0b10000111;
 16814  184E  3087               	movlw	135
 16815  184F  0094               	movwf	20	;volatile
 16816                           
 16817                           ;main.c: 167:  LATA = 0;
 16818  1850  0198               	clrf	24	;volatile
 16819                           
 16820                           ;main.c: 170:  ADCON0bits.ADON = 1;
 16821  1851  0141               	movlb	1	; select bank1
 16822  1852  141D               	bsf	29,0	;volatile
 16823                           
 16824                           ;main.c: 171:  ADCON1 = 0b11100000;
 16825  1853  30E0               	movlw	224
 16826  1854  009E               	movwf	30	;volatile
 16827                           
 16828                           ;main.c: 174:  T0CON0 = 0b10000000;
 16829  1855  3080               	movlw	128
 16830  1856  014B               	movlb	11	; select bank11
 16831  1857  009E               	movwf	30	;volatile
 16832                           
 16833                           ;main.c: 175:  T0CON1 = 0b01000111;
 16834  1858  3047               	movlw	71
 16835  1859  009F               	movwf	31	;volatile
 16836                           
 16837                           ;main.c: 176:  TMR0 = 178;
 16838  185A  30B2               	movlw	178
 16839  185B  009C               	movwf	28	;volatile
 16840                           
 16841                           ;main.c: 179:  T1CON = 0b00110011;
 16842  185C  3033               	movlw	51
 16843  185D  0144               	movlb	4	; select bank4
 16844  185E  008E               	movwf	14	;volatile
 16845                           
 16846                           ;main.c: 180:  T1CLK = 0b00000001;
 16847  185F  3001               	movlw	1
 16848  1860  0091               	movwf	17	;volatile
 16849                           
 16850                           ;main.c: 181:  TMR1 = 53035;
 16851  1861  30CF               	movlw	207
 16852  1862  008D               	movwf	13	;volatile
 16853  1863  302B               	movlw	43
 16854  1864  008C               	movwf	12	;volatile
 16855                           
 16856                           ;main.c: 184:  PIE0 = 0b00110000;
 16857  1865  3030               	movlw	48
 16858  1866  014E               	movlb	14	; select bank14
 16859  1867  0096               	movwf	22	;volatile
 16860                           
 16861                           ;main.c: 185:  PIE3 = 0b00100000;
 16862  1868  3020               	movlw	32
 16863  1869  0099               	movwf	25	;volatile
 16864                           
 16865                           ;main.c: 186:  PIE4 = 0b00000001;
 16866  186A  3001               	movlw	1
 16867  186B  009A               	movwf	26	;volatile
 16868                           
 16869                           ;main.c: 187:  INTCON = 0b11000000;
 16870  186C  30C0               	movlw	192
 16871  186D  008B               	movwf	11	;volatile
 16872                           
 16873                           ;main.c: 190:  IOCAP = 0b10110000;
 16874  186E  30B0               	movlw	176
 16875  186F  017E               	movlb	62	; select bank62
 16876  1870  00BD               	movwf	61	;volatile
 16877                           
 16878                           ;main.c: 191:  IOCAN = 0b10110000;
 16879  1871  00BE               	movwf	62	;volatile
 16880                           
 16881                           ;main.c: 192:  IOCCN = 0b00000100;
 16882  1872  3004               	movlw	4
 16883  1873  00D4               	movwf	84	;volatile
 16884                           
 16885                           ;main.c: 196:  BAUD1CON = 0b00001000;
 16886  1874  3008               	movlw	8
 16887  1875  0142               	movlb	2	; select bank2
 16888  1876  009F               	movwf	31	;volatile
 16889                           
 16890                           ;main.c: 197:  SPBRGL = 25;
 16891  1877  3019               	movlw	25
 16892  1878  009B               	movwf	27	;volatile
 16893                           
 16894                           ;main.c: 198:  RC1STA = 0b10010000;
 16895  1879  3090               	movlw	144
 16896  187A  009D               	movwf	29	;volatile
 16897                           
 16898                           ;main.c: 199:  TX1STA = 0b00100000;
 16899  187B  3020               	movlw	32
 16900  187C  009E               	movwf	30	;volatile
 16901  187D  0008               	return
 16902  187E                     __end_of_initialize:	
 16903                           
 16904                           	psect	text30
 16905  2ADE                     __ptext30:	
 16906 ;; *************** function _initGlobalData *****************
 16907 ;; Defined at:
 16908 ;;		line 114 in file "main.c"
 16909 ;; Parameters:    Size  Location     Type
 16910 ;;		None
 16911 ;; Auto vars:     Size  Location     Type
 16912 ;;  heater          2   24[BANK0 ] PTR struct .
 16913 ;;		 -> data.heater(124), data(166), 
 16914 ;;  n               1   23[BANK0 ] unsigned char 
 16915 ;; Return value:  Size  Location     Type
 16916 ;;                  1    wreg      void 
 16917 ;; Registers used:
 16918 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16919 ;; Tracked objects:
 16920 ;;		On entry : 3F/0
 16921 ;;		On exit  : 3F/0
 16922 ;;		Unchanged: 0/0
 16923 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16924 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16925 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16926 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16927 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16928 ;;Total ram usage:        5 bytes
 16929 ;; Hardware stack levels used:    1
 16930 ;; Hardware stack levels required when called:    4
 16931 ;; This function calls:
 16932 ;;		___wmul
 16933 ;; This function is called by:
 16934 ;;		_main
 16935 ;; This function uses a non-reentrant model
 16936 ;;
 16937                           
 16938                           
 16939                           ;psect for function _initGlobalData
 16940  2ADE                     _initGlobalData:	
 16941                           
 16942                           ;main.c: 116:  uint8_t n;;main.c: 117:  t_heater *heater;;main.c: 119:  data.tempC = 0;
 16943                           
 16944                           ;incstack = 0
 16945                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16946  2ADE  304A               	movlw	74
 16947  2ADF  0086               	movwf	6
 16948  2AE0  3027               	movlw	39
 16949  2AE1  0087               	movwf	7
 16950  2AE2  3000               	movlw	0
 16951  2AE3  3FC0               	movwi [0]fsr1
 16952  2AE4  3FC1               	movwi [1]fsr1
 16953  2AE5  3FC2               	movwi [2]fsr1
 16954  2AE6  3FC3               	movwi [3]fsr1
 16955                           
 16956                           ;main.c: 120:  data.relHum = 0;
 16957  2AE7  3144               	addfsr 1,4
 16958  2AE8  3FC0               	movwi [0]fsr1
 16959  2AE9  3FC1               	movwi [1]fsr1
 16960  2AEA  3FC2               	movwi [2]fsr1
 16961  2AEB  3FC3               	movwi [3]fsr1
 16962                           
 16963                           ;main.c: 121:  data.dewPointC = 0;
 16964  2AEC  304A               	movlw	74
 16965  2AED  0086               	movwf	6
 16966  2AEE  3027               	movlw	39
 16967  2AEF  0087               	movwf	7
 16968  2AF0  3000               	movlw	0
 16969  2AF1  3148               	addfsr 1,8
 16970  2AF2  3FC0               	movwi [0]fsr1
 16971  2AF3  3FC1               	movwi [1]fsr1
 16972  2AF4  3FC2               	movwi [2]fsr1
 16973  2AF5  3FC3               	movwi [3]fsr1
 16974                           
 16975                           ;main.c: 122:  data.sensorVersion = 0;
 16976  2AF6  304A               	movlw	74
 16977  2AF7  0086               	movwf	6
 16978  2AF8  3027               	movlw	39
 16979  2AF9  0087               	movwf	7
 16980  2AFA  304A               	movlw	74
 16981  2AFB  314C               	addfsr 1,12
 16982  2AFC  0181               	clrf	1
 16983                           
 16984                           ;main.c: 123:  data.tempAux = 0;
 16985  2AFD  0086               	movwf	6
 16986  2AFE  3027               	movlw	39
 16987  2AFF  0087               	movwf	7
 16988  2B00  3000               	movlw	0
 16989  2B01  314D               	addfsr 1,13
 16990  2B02  3FC0               	movwi [0]fsr1
 16991  2B03  3FC1               	movwi [1]fsr1
 16992  2B04  3FC2               	movwi [2]fsr1
 16993  2B05  3FC3               	movwi [3]fsr1
 16994                           
 16995                           ;main.c: 124:  data.voltage = 0;
 16996  2B06  304A               	movlw	74
 16997  2B07  0086               	movwf	6
 16998  2B08  3027               	movlw	39
 16999  2B09  0087               	movwf	7
 17000  2B0A  3000               	movlw	0
 17001  2B0B  3151               	addfsr 1,17
 17002  2B0C  3FC0               	movwi [0]fsr1
 17003  2B0D  3FC1               	movwi [1]fsr1
 17004  2B0E  3FC2               	movwi [2]fsr1
 17005  2B0F  3FC3               	movwi [3]fsr1
 17006                           
 17007                           ;main.c: 125:  data.current = 0;
 17008  2B10  304A               	movlw	74
 17009  2B11  0086               	movwf	6
 17010  2B12  3027               	movlw	39
 17011  2B13  0087               	movwf	7
 17012  2B14  3000               	movlw	0
 17013  2B15  3155               	addfsr 1,21
 17014  2B16  3FC0               	movwi [0]fsr1
 17015  2B17  3FC1               	movwi [1]fsr1
 17016  2B18  3FC2               	movwi [2]fsr1
 17017  2B19  3FC3               	movwi [3]fsr1
 17018                           
 17019                           ;main.c: 126:  data.power = 0;
 17020  2B1A  304A               	movlw	74
 17021  2B1B  0086               	movwf	6
 17022  2B1C  3027               	movlw	39
 17023  2B1D  0087               	movwf	7
 17024  2B1E  3000               	movlw	0
 17025  2B1F  3159               	addfsr 1,25
 17026  2B20  3FC0               	movwi [0]fsr1
 17027  2B21  3FC1               	movwi [1]fsr1
 17028  2B22  3FC2               	movwi [2]fsr1
 17029  2B23  3FC3               	movwi [3]fsr1
 17030                           
 17031                           ;main.c: 127:  data.dpOffset = 3.0;
 17032  2B24  304A               	movlw	74
 17033  2B25  0086               	movwf	6
 17034  2B26  3027               	movlw	39
 17035  2B27  0087               	movwf	7
 17036  2B28  3000               	movlw	0
 17037  2B29  315D               	addfsr 1,29
 17038  2B2A  3FC0               	movwi [0]fsr1
 17039  2B2B  3FC1               	movwi [1]fsr1
 17040  2B2C  3040               	movlw	64
 17041  2B2D  3FC2               	movwi [2]fsr1
 17042  2B2E  3FC3               	movwi [3]fsr1
 17043                           
 17044                           ;main.c: 128:  data.skyTemp = -40;
 17045  2B2F  306B               	movlw	107
 17046  2B30  0086               	movwf	6
 17047  2B31  3027               	movlw	39
 17048  2B32  0087               	movwf	7
 17049  2B33  3000               	movlw	0
 17050  2B34  3FC0               	movwi [0]fsr1
 17051  2B35  3FC1               	movwi [1]fsr1
 17052  2B36  3020               	movlw	32
 17053  2B37  3FC2               	movwi [2]fsr1
 17054  2B38  30C2               	movlw	194
 17055  2B39  3FC3               	movwi [3]fsr1
 17056                           
 17057                           ;main.c: 129:  data.fudgeFactor = 1.0;
 17058  2B3A  306F               	movlw	111
 17059  2B3B  0086               	movwf	6
 17060  2B3C  3000               	movlw	0
 17061  2B3D  3FC0               	movwi [0]fsr1
 17062  2B3E  3FC1               	movwi [1]fsr1
 17063  2B3F  3080               	movlw	128
 17064  2B40  3FC2               	movwi [2]fsr1
 17065  2B41  303F               	movlw	63
 17066  2B42  3FC3               	movwi [3]fsr1
 17067                           
 17068                           ;main.c: 131:  for (n = 0; n < 4; n++) {
 17069  2B43  01B7               	clrf	initGlobalData@n
 17070  2B44                     l6350:	
 17071                           
 17072                           ;main.c: 132:   heater = &(data.heater)[n];
 17073  2B44  3074               	movlw	116
 17074  2B45  00B8               	movwf	initGlobalData@heater
 17075  2B46  3027               	movlw	39
 17076  2B47  00B9               	movwf	initGlobalData@heater+1
 17077  2B48  0837               	movf	initGlobalData@n,w
 17078  2B49  00AF               	movwf	___wmul@multiplier
 17079  2B4A  301F               	movlw	31
 17080  2B4B  01B0               	clrf	___wmul@multiplier+1
 17081  2B4C  00B1               	movwf	___wmul@multiplicand
 17082  2B4D  01B2               	clrf	___wmul@multiplicand+1
 17083  2B4E  318A  2206  31AA   	fcall	___wmul
 17084  2B51  082F               	movf	?___wmul,w
 17085  2B52  07B8               	addwf	initGlobalData@heater,f
 17086  2B53  0830               	movf	?___wmul+1,w
 17087  2B54  3DB9               	addwfc	initGlobalData@heater+1,f
 17088                           
 17089                           ;main.c: 133:   heater->lensDia = 4;
 17090  2B55  0838               	movf	initGlobalData@heater,w
 17091  2B56  0086               	movwf	6
 17092  2B57  0839               	movf	initGlobalData@heater+1,w
 17093  2B58  0087               	movwf	7
 17094  2B59  3000               	movlw	0
 17095  2B5A  3155               	addfsr 1,21
 17096  2B5B  3FC0               	movwi [0]fsr1
 17097  2B5C  3FC1               	movwi [1]fsr1
 17098  2B5D  3080               	movlw	128
 17099  2B5E  3FC2               	movwi [2]fsr1
 17100  2B5F  3040               	movlw	64
 17101  2B60  3FC3               	movwi [3]fsr1
 17102                           
 17103                           ;main.c: 134:   heater->status = CH_UNCHECKED;
 17104  2B61  0838               	movf	initGlobalData@heater,w
 17105  2B62  3E1E               	addlw	30
 17106  2B63  00B5               	movwf	??_initGlobalData
 17107  2B64  3000               	movlw	0
 17108  2B65  3D39               	addwfc	initGlobalData@heater+1,w
 17109  2B66  00B6               	movwf	??_initGlobalData+1
 17110  2B67  0835               	movf	??_initGlobalData,w
 17111  2B68  0086               	movwf	6
 17112  2B69  0836               	movf	??_initGlobalData+1,w
 17113  2B6A  0087               	movwf	7
 17114  2B6B  3005               	movlw	5
 17115  2B6C  0081               	movwf	1
 17116                           
 17117                           ;main.c: 135:   heater->mode = MODE_AUTO;
 17118  2B6D  0838               	movf	initGlobalData@heater,w
 17119  2B6E  3E1D               	addlw	29
 17120  2B6F  00B5               	movwf	??_initGlobalData
 17121  2B70  3000               	movlw	0
 17122  2B71  3D39               	addwfc	initGlobalData@heater+1,w
 17123  2B72  00B6               	movwf	??_initGlobalData+1
 17124  2B73  0835               	movf	??_initGlobalData,w
 17125  2B74  0086               	movwf	6
 17126  2B75  0836               	movf	??_initGlobalData+1,w
 17127  2B76  0087               	movwf	7
 17128  2B77  3001               	movlw	1
 17129  2B78  0081               	movwf	1
 17130                           
 17131                           ;main.c: 136:   heater->Pmax = 0;
 17132  2B79  0838               	movf	initGlobalData@heater,w
 17133  2B7A  0086               	movwf	6
 17134  2B7B  0839               	movf	initGlobalData@heater+1,w
 17135  2B7C  0087               	movwf	7
 17136  2B7D  3000               	movlw	0
 17137  2B7E  3144               	addfsr 1,4
 17138  2B7F  3FC0               	movwi [0]fsr1
 17139  2B80  3FC1               	movwi [1]fsr1
 17140  2B81  3FC2               	movwi [2]fsr1
 17141  2B82  3FC3               	movwi [3]fsr1
 17142                           
 17143                           ;main.c: 137:   heater->Pset = -1;
 17144  2B83  0838               	movf	initGlobalData@heater,w
 17145  2B84  0086               	movwf	6
 17146  2B85  0839               	movf	initGlobalData@heater+1,w
 17147  2B86  0087               	movwf	7
 17148  2B87  3000               	movlw	0
 17149  2B88  3150               	addfsr 1,16
 17150  2B89  3FC0               	movwi [0]fsr1
 17151  2B8A  3FC1               	movwi [1]fsr1
 17152  2B8B  3080               	movlw	128
 17153  2B8C  3FC2               	movwi [2]fsr1
 17154  2B8D  30BF               	movlw	191
 17155  2B8E  3FC3               	movwi [3]fsr1
 17156                           
 17157                           ;main.c: 138:   heater->Preq = 0;
 17158  2B8F  0838               	movf	initGlobalData@heater,w
 17159  2B90  0086               	movwf	6
 17160  2B91  0839               	movf	initGlobalData@heater+1,w
 17161  2B92  0087               	movwf	7
 17162  2B93  3000               	movlw	0
 17163  2B94  3148               	addfsr 1,8
 17164  2B95  3FC0               	movwi [0]fsr1
 17165  2B96  3FC1               	movwi [1]fsr1
 17166  2B97  3FC2               	movwi [2]fsr1
 17167  2B98  3FC3               	movwi [3]fsr1
 17168                           
 17169                           ;main.c: 139:   heater->Patt = 0;
 17170  2B99  0838               	movf	initGlobalData@heater,w
 17171  2B9A  0086               	movwf	6
 17172  2B9B  0839               	movf	initGlobalData@heater+1,w
 17173  2B9C  0087               	movwf	7
 17174  2B9D  3000               	movlw	0
 17175  2B9E  314C               	addfsr 1,12
 17176  2B9F  3FC0               	movwi [0]fsr1
 17177  2BA0  3FC1               	movwi [1]fsr1
 17178  2BA1  3FC2               	movwi [2]fsr1
 17179  2BA2  3FC3               	movwi [3]fsr1
 17180                           
 17181                           ;main.c: 140:   heater->current = 0;
 17182  2BA3  0838               	movf	initGlobalData@heater,w
 17183  2BA4  0086               	movwf	6
 17184  2BA5  0839               	movf	initGlobalData@heater+1,w
 17185  2BA6  0087               	movwf	7
 17186  2BA7  3000               	movlw	0
 17187  2BA8  3FC0               	movwi [0]fsr1
 17188  2BA9  3FC1               	movwi [1]fsr1
 17189  2BAA  3FC2               	movwi [2]fsr1
 17190  2BAB  3FC3               	movwi [3]fsr1
 17191  2BAC  3004               	movlw	4
 17192                           
 17193                           ;main.c: 141:  }
 17194  2BAD  0AB7               	incf	initGlobalData@n,f
 17195  2BAE  0237               	subwf	initGlobalData@n,w
 17196  2BAF  1803               	btfsc	3,0
 17197  2BB0  0008               	return
 17198  2BB1  2B44               	goto	l6350
 17199  2BB2                     __end_of_initGlobalData:	
 17200                           
 17201                           	psect	text32
 17202  187E                     __ptext32:	
 17203 ;; *************** function _getAnalogValues *****************
 17204 ;; Defined at:
 17205 ;;		line 301 in file "system.c"
 17206 ;; Parameters:    Size  Location     Type
 17207 ;;		None
 17208 ;; Auto vars:     Size  Location     Type
 17209 ;;  adc             2   17[BANK1 ] unsigned short 
 17210 ;; Return value:  Size  Location     Type
 17211 ;;                  1    wreg      void 
 17212 ;; Registers used:
 17213 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17214 ;; Tracked objects:
 17215 ;;		On entry : 0/0
 17216 ;;		On exit  : 3F/0
 17217 ;;		Unchanged: 0/0
 17218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17219 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17220 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17222 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17223 ;;Total ram usage:        6 bytes
 17224 ;; Hardware stack levels used:    1
 17225 ;; Hardware stack levels required when called:    5
 17226 ;; This function calls:
 17227 ;;		___fladd
 17228 ;;		___fldiv
 17229 ;;		___flmul
 17230 ;;		___xxtofl
 17231 ;;		_ema
 17232 ;;		_getAnalogValue
 17233 ;; This function is called by:
 17234 ;;		_main
 17235 ;; This function uses a non-reentrant model
 17236 ;;
 17237                           
 17238                           
 17239                           ;psect for function _getAnalogValues
 17240  187E                     _getAnalogValues:	
 17241                           
 17242                           ;system.c: 303:  static uint16_t avgT, avgV, avgI;;system.c: 304:  uint16_t adc;;system.
      +                          c: 306:  adc = getAnalogValue(0b000110);
 17243                           
 17244                           ;incstack = 0
 17245                           ; Regs used in _getAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17246  187E  3006               	movlw	6
 17247  187F  31A7  2738  3198   	fcall	_getAnalogValue
 17248  1882  0825               	movf	?_getAnalogValue+1,w
 17249  1883  0141               	movlb	1	; select bank1
 17250  1884  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 17251  1885  0140               	movlb	0	; select bank0
 17252  1886  0824               	movf	?_getAnalogValue,w
 17253  1887  0141               	movlb	1	; select bank1
 17254  1888  00B1               	movwf	getAnalogValues@adc^(0+128)
 17255                           
 17256                           ;system.c: 307:  avgT = ema(adc, avgT, ( (uint32_t)(0.5 * 65535) ));
 17257  1889  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 17258  188A  0140               	movlb	0	; select bank0
 17259  188B  00B1               	movwf	ema@in+1
 17260  188C  0141               	movlb	1	; select bank1
 17261  188D  0831               	movf	getAnalogValues@adc^(0+128),w
 17262  188E  0140               	movlb	0	; select bank0
 17263  188F  00B0               	movwf	ema@in
 17264  1890  0144               	movlb	4	; select bank4
 17265  1891  0837               	movf	(getAnalogValues@avgT+1)^(0+512),w
 17266  1892  0140               	movlb	0	; select bank0
 17267  1893  00B3               	movwf	ema@average+1
 17268  1894  0144               	movlb	4	; select bank4
 17269  1895  0836               	movf	getAnalogValues@avgT^(0+512),w
 17270  1896  0140               	movlb	0	; select bank0
 17271  1897  00B2               	movwf	ema@average
 17272  1898  307F               	movlw	127
 17273  1899  01B7               	clrf	ema@alpha+3
 17274  189A  01B6               	clrf	ema@alpha+2
 17275  189B  00B5               	movwf	ema@alpha+1
 17276  189C  30FF               	movlw	255
 17277  189D  00B4               	movwf	ema@alpha
 17278  189E  31A7  2790  3198   	fcall	_ema
 17279  18A1  0831               	movf	?_ema+1,w
 17280  18A2  0144               	movlb	4	; select bank4
 17281  18A3  00B7               	movwf	(getAnalogValues@avgT+1)^(0+512)
 17282  18A4  0140               	movlb	0	; select bank0
 17283  18A5  0830               	movf	?_ema,w
 17284  18A6  0144               	movlb	4	; select bank4
 17285  18A7  00B6               	movwf	getAnalogValues@avgT^(0+512)
 17286                           
 17287                           ;system.c: 308:  adc = getAnalogValue(0b010000);
 17288  18A8  3010               	movlw	16
 17289  18A9  31A7  2738  3198   	fcall	_getAnalogValue
 17290  18AC  0825               	movf	?_getAnalogValue+1,w
 17291  18AD  0141               	movlb	1	; select bank1
 17292  18AE  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 17293  18AF  0140               	movlb	0	; select bank0
 17294  18B0  0824               	movf	?_getAnalogValue,w
 17295  18B1  0141               	movlb	1	; select bank1
 17296  18B2  00B1               	movwf	getAnalogValues@adc^(0+128)
 17297                           
 17298                           ;system.c: 309:  avgV = ema(adc, avgV, ( (uint32_t)(0.8 * 65535) ));
 17299  18B3  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 17300  18B4  0140               	movlb	0	; select bank0
 17301  18B5  00B1               	movwf	ema@in+1
 17302  18B6  0141               	movlb	1	; select bank1
 17303  18B7  0831               	movf	getAnalogValues@adc^(0+128),w
 17304  18B8  0140               	movlb	0	; select bank0
 17305  18B9  00B0               	movwf	ema@in
 17306  18BA  0144               	movlb	4	; select bank4
 17307  18BB  0835               	movf	(getAnalogValues@avgV+1)^(0+512),w
 17308  18BC  0140               	movlb	0	; select bank0
 17309  18BD  00B3               	movwf	ema@average+1
 17310  18BE  0144               	movlb	4	; select bank4
 17311  18BF  0834               	movf	getAnalogValues@avgV^(0+512),w
 17312  18C0  0140               	movlb	0	; select bank0
 17313  18C1  00B2               	movwf	ema@average
 17314  18C2  30CC               	movlw	204
 17315  18C3  01B7               	clrf	ema@alpha+3
 17316  18C4  01B6               	clrf	ema@alpha+2
 17317  18C5  00B5               	movwf	ema@alpha+1
 17318  18C6  00B4               	movwf	ema@alpha
 17319  18C7  31A7  2790  3198   	fcall	_ema
 17320  18CA  0831               	movf	?_ema+1,w
 17321  18CB  0144               	movlb	4	; select bank4
 17322  18CC  00B5               	movwf	(getAnalogValues@avgV+1)^(0+512)
 17323  18CD  0140               	movlb	0	; select bank0
 17324  18CE  0830               	movf	?_ema,w
 17325  18CF  0144               	movlb	4	; select bank4
 17326  18D0  00B4               	movwf	getAnalogValues@avgV^(0+512)
 17327                           
 17328                           ;system.c: 310:  adc = getAnalogValue(0b010001);
 17329  18D1  3011               	movlw	17
 17330  18D2  31A7  2738  3198   	fcall	_getAnalogValue
 17331  18D5  0825               	movf	?_getAnalogValue+1,w
 17332  18D6  0141               	movlb	1	; select bank1
 17333  18D7  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 17334  18D8  0140               	movlb	0	; select bank0
 17335  18D9  0824               	movf	?_getAnalogValue,w
 17336  18DA  0141               	movlb	1	; select bank1
 17337  18DB  00B1               	movwf	getAnalogValues@adc^(0+128)
 17338                           
 17339                           ;system.c: 311:  avgI = ema(adc, avgI, ( (uint32_t)(0.3 * 65535) ));
 17340  18DC  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 17341  18DD  0140               	movlb	0	; select bank0
 17342  18DE  00B1               	movwf	ema@in+1
 17343  18DF  0141               	movlb	1	; select bank1
 17344  18E0  0831               	movf	getAnalogValues@adc^(0+128),w
 17345  18E1  0140               	movlb	0	; select bank0
 17346  18E2  00B0               	movwf	ema@in
 17347  18E3  0144               	movlb	4	; select bank4
 17348  18E4  0833               	movf	(getAnalogValues@avgI+1)^(0+512),w
 17349  18E5  0140               	movlb	0	; select bank0
 17350  18E6  00B3               	movwf	ema@average+1
 17351  18E7  0144               	movlb	4	; select bank4
 17352  18E8  0832               	movf	getAnalogValues@avgI^(0+512),w
 17353  18E9  0140               	movlb	0	; select bank0
 17354  18EA  00B2               	movwf	ema@average
 17355  18EB  304C               	movlw	76
 17356  18EC  01B7               	clrf	ema@alpha+3
 17357  18ED  01B6               	clrf	ema@alpha+2
 17358  18EE  00B5               	movwf	ema@alpha+1
 17359  18EF  30CC               	movlw	204
 17360  18F0  00B4               	movwf	ema@alpha
 17361  18F1  31A7  2790  3198   	fcall	_ema
 17362  18F4  0831               	movf	?_ema+1,w
 17363  18F5  0144               	movlb	4	; select bank4
 17364  18F6  00B3               	movwf	(getAnalogValues@avgI+1)^(0+512)
 17365  18F7  0140               	movlb	0	; select bank0
 17366  18F8  0830               	movf	?_ema,w
 17367  18F9  0144               	movlb	4	; select bank4
 17368  18FA  00B2               	movwf	getAnalogValues@avgI^(0+512)
 17369                           
 17370                           ;system.c: 312:  data.tempAux = ( (avgT * 0.1191) - 34.512 );
 17371  18FB  30C2               	movlw	194
 17372  18FC  0140               	movlb	0	; select bank0
 17373  18FD  00DF               	movwf	___fladd@b+3
 17374  18FE  300A               	movlw	10
 17375  18FF  00DE               	movwf	___fladd@b+2
 17376  1900  300C               	movlw	12
 17377  1901  00DD               	movwf	___fladd@b+1
 17378  1902  304A               	movlw	74
 17379  1903  00DC               	movwf	___fladd@b
 17380  1904  303D               	movlw	61
 17381  1905  00C6               	movwf	___flmul@b+3
 17382  1906  30F3               	movlw	243
 17383  1907  00C5               	movwf	___flmul@b+2
 17384  1908  30EA               	movlw	234
 17385  1909  00C4               	movwf	___flmul@b+1
 17386  190A  30B3               	movlw	179
 17387  190B  00C3               	movwf	___flmul@b
 17388  190C  0144               	movlb	4	; select bank4
 17389  190D  0836               	movf	getAnalogValues@avgT^(0+512),w
 17390  190E  0140               	movlb	0	; select bank0
 17391  190F  00B5               	movwf	___xxtofl@val
 17392  1910  0144               	movlb	4	; select bank4
 17393  1911  0837               	movf	(getAnalogValues@avgT+1)^(0+512),w
 17394  1912  0140               	movlb	0	; select bank0
 17395  1913  00B6               	movwf	___xxtofl@val+1
 17396  1914  3000               	movlw	0
 17397  1915  01B7               	clrf	___xxtofl@val+2
 17398  1916  01B8               	clrf	___xxtofl@val+3
 17399  1917  318F  2715  3198   	fcall	___xxtofl
 17400  191A  0838               	movf	?___xxtofl+3,w
 17401  191B  00CA               	movwf	___flmul@a+3
 17402  191C  0837               	movf	?___xxtofl+2,w
 17403  191D  00C9               	movwf	___flmul@a+2
 17404  191E  0836               	movf	?___xxtofl+1,w
 17405  191F  00C8               	movwf	___flmul@a+1
 17406  1920  0835               	movf	?___xxtofl,w
 17407  1921  00C7               	movwf	___flmul@a
 17408  1922  2635               	fcall	___flmul
 17409  1923  0846               	movf	?___flmul+3,w
 17410  1924  00E3               	movwf	___fladd@a+3
 17411  1925  0845               	movf	?___flmul+2,w
 17412  1926  00E2               	movwf	___fladd@a+2
 17413  1927  0844               	movf	?___flmul+1,w
 17414  1928  00E1               	movwf	___fladd@a+1
 17415  1929  0843               	movf	?___flmul,w
 17416  192A  00E0               	movwf	___fladd@a
 17417  192B  31AC  24AF  3198   	fcall	___fladd
 17418  192E  304A               	movlw	74
 17419  192F  0086               	movwf	6
 17420  1930  3027               	movlw	39
 17421  1931  0087               	movwf	7
 17422  1932  314D               	addfsr 1,13
 17423  1933  085C               	movf	?___fladd,w
 17424  1934  3FC0               	movwi [0]fsr1
 17425  1935  085D               	movf	?___fladd+1,w
 17426  1936  3FC1               	movwi [1]fsr1
 17427  1937  085E               	movf	?___fladd+2,w
 17428  1938  3FC2               	movwi [2]fsr1
 17429  1939  085F               	movf	?___fladd+3,w
 17430  193A  3FC3               	movwi [3]fsr1
 17431                           
 17432                           ;system.c: 313:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 17433  193B  3040               	movlw	64
 17434  193C  00C6               	movwf	___flmul@b+3
 17435  193D  30A0               	movlw	160
 17436  193E  00C5               	movwf	___flmul@b+2
 17437  193F  01C4               	clrf	___flmul@b+1
 17438  1940  01C3               	clrf	___flmul@b
 17439  1941  0144               	movlb	4	; select bank4
 17440  1942  0834               	movf	getAnalogValues@avgV^(0+512),w
 17441  1943  0140               	movlb	0	; select bank0
 17442  1944  00B5               	movwf	___xxtofl@val
 17443  1945  0144               	movlb	4	; select bank4
 17444  1946  0835               	movf	(getAnalogValues@avgV+1)^(0+512),w
 17445  1947  0140               	movlb	0	; select bank0
 17446  1948  00B6               	movwf	___xxtofl@val+1
 17447  1949  3000               	movlw	0
 17448  194A  01B7               	clrf	___xxtofl@val+2
 17449  194B  01B8               	clrf	___xxtofl@val+3
 17450  194C  318F  2715  3198   	fcall	___xxtofl
 17451  194F  0838               	movf	?___xxtofl+3,w
 17452  1950  00CA               	movwf	___flmul@a+3
 17453  1951  0837               	movf	?___xxtofl+2,w
 17454  1952  00C9               	movwf	___flmul@a+2
 17455  1953  0836               	movf	?___xxtofl+1,w
 17456  1954  00C8               	movwf	___flmul@a+1
 17457  1955  0835               	movf	?___xxtofl,w
 17458  1956  00C7               	movwf	___flmul@a
 17459  1957  2635  3198         	fcall	___flmul
 17460  1959  0846               	movf	?___flmul+3,w
 17461  195A  0141               	movlb	1	; select bank1
 17462  195B  00B0               	movwf	(_getAnalogValues$2769+3)^(0+128)
 17463  195C  0140               	movlb	0	; select bank0
 17464  195D  0845               	movf	?___flmul+2,w
 17465  195E  0141               	movlb	1	; select bank1
 17466  195F  00AF               	movwf	(_getAnalogValues$2769+2)^(0+128)
 17467  1960  0140               	movlb	0	; select bank0
 17468  1961  0844               	movf	?___flmul+1,w
 17469  1962  0141               	movlb	1	; select bank1
 17470  1963  00AE               	movwf	(_getAnalogValues$2769+1)^(0+128)
 17471  1964  0140               	movlb	0	; select bank0
 17472  1965  0843               	movf	?___flmul,w
 17473  1966  0141               	movlb	1	; select bank1
 17474  1967  00AD               	movwf	_getAnalogValues$2769^(0+128)
 17475                           
 17476                           ;system.c: 313:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 17477  1968  3047               	movlw	71
 17478  1969  0140               	movlb	0	; select bank0
 17479  196A  00DF               	movwf	___fldiv@a+3
 17480  196B  303B               	movlw	59
 17481  196C  00DE               	movwf	___fldiv@a+2
 17482  196D  30D1               	movlw	209
 17483  196E  00DD               	movwf	___fldiv@a+1
 17484  196F  3043               	movlw	67
 17485  1970  01DC               	clrf	___fldiv@a
 17486  1971  00C6               	movwf	___flmul@b+3
 17487  1972  3045               	movlw	69
 17488  1973  00C5               	movwf	___flmul@b+2
 17489  1974  01C4               	clrf	___flmul@b+1
 17490  1975  01C3               	clrf	___flmul@b
 17491  1976  0141               	movlb	1	; select bank1
 17492  1977  0830               	movf	(_getAnalogValues$2769+3)^(0+128),w
 17493  1978  0140               	movlb	0	; select bank0
 17494  1979  00CA               	movwf	___flmul@a+3
 17495  197A  0141               	movlb	1	; select bank1
 17496  197B  082F               	movf	(_getAnalogValues$2769+2)^(0+128),w
 17497  197C  0140               	movlb	0	; select bank0
 17498  197D  00C9               	movwf	___flmul@a+2
 17499  197E  0141               	movlb	1	; select bank1
 17500  197F  082E               	movf	(_getAnalogValues$2769+1)^(0+128),w
 17501  1980  0140               	movlb	0	; select bank0
 17502  1981  00C8               	movwf	___flmul@a+1
 17503  1982  0141               	movlb	1	; select bank1
 17504  1983  082D               	movf	_getAnalogValues$2769^(0+128),w
 17505  1984  0140               	movlb	0	; select bank0
 17506  1985  00C7               	movwf	___flmul@a
 17507  1986  2635               	fcall	___flmul
 17508  1987  0846               	movf	?___flmul+3,w
 17509  1988  00E3               	movwf	___fldiv@b+3
 17510  1989  0845               	movf	?___flmul+2,w
 17511  198A  00E2               	movwf	___fldiv@b+2
 17512  198B  0844               	movf	?___flmul+1,w
 17513  198C  00E1               	movwf	___fldiv@b+1
 17514  198D  0843               	movf	?___flmul,w
 17515  198E  00E0               	movwf	___fldiv@b
 17516  198F  31A5  25DA  3198   	fcall	___fldiv
 17517  1992  304A               	movlw	74
 17518  1993  0086               	movwf	6
 17519  1994  3027               	movlw	39
 17520  1995  0087               	movwf	7
 17521  1996  3151               	addfsr 1,17
 17522  1997  085C               	movf	?___fldiv,w
 17523  1998  3FC0               	movwi [0]fsr1
 17524  1999  085D               	movf	?___fldiv+1,w
 17525  199A  3FC1               	movwi [1]fsr1
 17526  199B  085E               	movf	?___fldiv+2,w
 17527  199C  3FC2               	movwi [2]fsr1
 17528  199D  085F               	movf	?___fldiv+3,w
 17529  199E  3FC3               	movwi [3]fsr1
 17530                           
 17531                           ;system.c: 314:  data.current = ( (avgI * 5.0) / (1023.0 * 0.05 * 50.0) );
 17532  199F  3045               	movlw	69
 17533  19A0  00DF               	movwf	___fldiv@a+3
 17534  19A1  301F               	movlw	31
 17535  19A2  00DE               	movwf	___fldiv@a+2
 17536  19A3  30D8               	movlw	216
 17537  19A4  00DD               	movwf	___fldiv@a+1
 17538  19A5  3040               	movlw	64
 17539  19A6  01DC               	clrf	___fldiv@a
 17540  19A7  00C6               	movwf	___flmul@b+3
 17541  19A8  30A0               	movlw	160
 17542  19A9  00C5               	movwf	___flmul@b+2
 17543  19AA  01C4               	clrf	___flmul@b+1
 17544  19AB  01C3               	clrf	___flmul@b
 17545  19AC  0144               	movlb	4	; select bank4
 17546  19AD  0832               	movf	getAnalogValues@avgI^(0+512),w
 17547  19AE  0140               	movlb	0	; select bank0
 17548  19AF  00B5               	movwf	___xxtofl@val
 17549  19B0  0144               	movlb	4	; select bank4
 17550  19B1  0833               	movf	(getAnalogValues@avgI+1)^(0+512),w
 17551  19B2  0140               	movlb	0	; select bank0
 17552  19B3  00B6               	movwf	___xxtofl@val+1
 17553  19B4  3000               	movlw	0
 17554  19B5  01B7               	clrf	___xxtofl@val+2
 17555  19B6  01B8               	clrf	___xxtofl@val+3
 17556  19B7  318F  2715  3198   	fcall	___xxtofl
 17557  19BA  0838               	movf	?___xxtofl+3,w
 17558  19BB  00CA               	movwf	___flmul@a+3
 17559  19BC  0837               	movf	?___xxtofl+2,w
 17560  19BD  00C9               	movwf	___flmul@a+2
 17561  19BE  0836               	movf	?___xxtofl+1,w
 17562  19BF  00C8               	movwf	___flmul@a+1
 17563  19C0  0835               	movf	?___xxtofl,w
 17564  19C1  00C7               	movwf	___flmul@a
 17565  19C2  2635               	fcall	___flmul
 17566  19C3  0846               	movf	?___flmul+3,w
 17567  19C4  00E3               	movwf	___fldiv@b+3
 17568  19C5  0845               	movf	?___flmul+2,w
 17569  19C6  00E2               	movwf	___fldiv@b+2
 17570  19C7  0844               	movf	?___flmul+1,w
 17571  19C8  00E1               	movwf	___fldiv@b+1
 17572  19C9  0843               	movf	?___flmul,w
 17573  19CA  00E0               	movwf	___fldiv@b
 17574  19CB  31A5  25DA  3198   	fcall	___fldiv
 17575  19CE  304A               	movlw	74
 17576  19CF  0086               	movwf	6
 17577  19D0  3027               	movlw	39
 17578  19D1  0087               	movwf	7
 17579  19D2  3155               	addfsr 1,21
 17580  19D3  085C               	movf	?___fldiv,w
 17581  19D4  3FC0               	movwi [0]fsr1
 17582  19D5  085D               	movf	?___fldiv+1,w
 17583  19D6  3FC1               	movwi [1]fsr1
 17584  19D7  085E               	movf	?___fldiv+2,w
 17585  19D8  3FC2               	movwi [2]fsr1
 17586  19D9  085F               	movf	?___fldiv+3,w
 17587  19DA  3FC3               	movwi [3]fsr1
 17588                           
 17589                           ;system.c: 315:  data.power = data.voltage * data.current;
 17590  19DB  304A               	movlw	74
 17591  19DC  0086               	movwf	6
 17592  19DD  3027               	movlw	39
 17593  19DE  0087               	movwf	7
 17594  19DF  3155               	addfsr 1,21
 17595  19E0  3F40               	moviw [0]fsr1
 17596  19E1  00C3               	movwf	___flmul@b
 17597  19E2  3F41               	moviw [1]fsr1
 17598  19E3  00C4               	movwf	___flmul@b+1
 17599  19E4  3F42               	moviw [2]fsr1
 17600  19E5  00C5               	movwf	___flmul@b+2
 17601  19E6  3F43               	moviw [3]fsr1
 17602  19E7  00C6               	movwf	___flmul@b+3
 17603  19E8  304A               	movlw	74
 17604  19E9  0086               	movwf	6
 17605  19EA  3027               	movlw	39
 17606  19EB  0087               	movwf	7
 17607  19EC  3151               	addfsr 1,17
 17608  19ED  3F40               	moviw [0]fsr1
 17609  19EE  00C7               	movwf	___flmul@a
 17610  19EF  3F41               	moviw [1]fsr1
 17611  19F0  00C8               	movwf	___flmul@a+1
 17612  19F1  3F42               	moviw [2]fsr1
 17613  19F2  00C9               	movwf	___flmul@a+2
 17614  19F3  3F43               	moviw [3]fsr1
 17615  19F4  00CA               	movwf	___flmul@a+3
 17616  19F5  2635               	fcall	___flmul
 17617  19F6  304A               	movlw	74
 17618  19F7  0086               	movwf	6
 17619  19F8  3027               	movlw	39
 17620  19F9  0087               	movwf	7
 17621  19FA  3159               	addfsr 1,25
 17622  19FB  0843               	movf	?___flmul,w
 17623  19FC  3FC0               	movwi [0]fsr1
 17624  19FD  0844               	movf	?___flmul+1,w
 17625  19FE  3FC1               	movwi [1]fsr1
 17626  19FF  0845               	movf	?___flmul+2,w
 17627  1A00  3FC2               	movwi [2]fsr1
 17628  1A01  0846               	movf	?___flmul+3,w
 17629  1A02  3FC3               	movwi [3]fsr1
 17630  1A03  0008               	return
 17631  1A04                     __end_of_getAnalogValues:	
 17632  1A04                     __ptext58:	
 17633 ;; *************** function _calcRequiredPower *****************
 17634 ;; Defined at:
 17635 ;;		line 261 in file "system.c"
 17636 ;; Parameters:    Size  Location     Type
 17637 ;;		None
 17638 ;; Auto vars:     Size  Location     Type
 17639 ;;  T2              4   70[BANK1 ] float 
 17640 ;;  T1              4   66[BANK1 ] float 
 17641 ;;  A               4   58[BANK1 ] float 
 17642 ;;  phi             4   54[BANK1 ] float 
 17643 ;;  d               4   50[BANK1 ] float 
 17644 ;;  Rth             4   22[BANK1 ] float 
 17645 ;;  p               4   18[BANK1 ] float 
 17646 ;;  n               1   74[BANK1 ] unsigned char 
 17647 ;; Return value:  Size  Location     Type
 17648 ;;                  1    wreg      void 
 17649 ;; Registers used:
 17650 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17651 ;; Tracked objects:
 17652 ;;		On entry : 30/0
 17653 ;;		On exit  : 3F/1
 17654 ;;		Unchanged: 0/0
 17655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17656 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17657 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17658 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17659 ;;      Totals:         0       0      59       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17660 ;;Total ram usage:       59 bytes
 17661 ;; Hardware stack levels used:    1
 17662 ;; Hardware stack levels required when called:    5
 17663 ;; This function calls:
 17664 ;;		___fladd
 17665 ;;		___fldiv
 17666 ;;		___flmul
 17667 ;;		___flsub
 17668 ;;		___wmul
 17669 ;; This function is called by:
 17670 ;;		_main
 17671 ;; This function uses a non-reentrant model
 17672 ;;
 17673                           
 17674                           
 17675                           ;psect for function _calcRequiredPower
 17676  1A04                     _calcRequiredPower:	
 17677                           
 17678                           ;system.c: 263:  uint8_t n;;system.c: 264:  float d, A, T1, T2, phi;;system.c: 265:  flo
      +                          at p, Rth;;system.c: 267:  for (n = 0; n < 4; n++) {
 17679                           
 17680                           ;incstack = 0
 17681                           ; Regs used in _calcRequiredPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17682  1A04  0141               	movlb	1	; select bank1
 17683  1A05  01EA               	clrf	calcRequiredPower@n^(0+128)
 17684  1A06                     l8298:	
 17685                           
 17686                           ;system.c: 277:   d = 0.0254 * data.heater[n].lensDia;
 17687  1A06  303C               	movlw	60
 17688  1A07  0140               	movlb	0	; select bank0
 17689  1A08  00C6               	movwf	___flmul@b+3
 17690  1A09  30D0               	movlw	208
 17691  1A0A  00C5               	movwf	___flmul@b+2
 17692  1A0B  3013               	movlw	19
 17693  1A0C  00C4               	movwf	___flmul@b+1
 17694  1A0D  30A9               	movlw	169
 17695  1A0E  00C3               	movwf	___flmul@b
 17696  1A0F  0141               	movlb	1	; select bank1
 17697  1A10  086A               	movf	calcRequiredPower@n^(0+128),w
 17698  1A11  0140               	movlb	0	; select bank0
 17699  1A12  00AF               	movwf	___wmul@multiplier
 17700  1A13  301F               	movlw	31
 17701  1A14  01B0               	clrf	___wmul@multiplier+1
 17702  1A15  00B1               	movwf	___wmul@multiplicand
 17703  1A16  01B2               	clrf	___wmul@multiplicand+1
 17704  1A17  318A  2206  3198   	fcall	___wmul
 17705  1A1A  3089               	movlw	137
 17706  1A1B  0141               	movlb	1	; select bank1
 17707  1A1C  00B0               	movwf	??_calcRequiredPower^(0+128)
 17708  1A1D  3027               	movlw	39
 17709  1A1E  00B1               	movwf	(??_calcRequiredPower^(0+128)+1)
 17710  1A1F  0140               	movlb	0	; select bank0
 17711  1A20  082F               	movf	?___wmul,w
 17712  1A21  0141               	movlb	1	; select bank1
 17713  1A22  0730               	addwf	??_calcRequiredPower^(0+128),w
 17714  1A23  0086               	movwf	6
 17715  1A24  0140               	movlb	0	; select bank0
 17716  1A25  0830               	movf	?___wmul+1,w
 17717  1A26  0141               	movlb	1	; select bank1
 17718  1A27  3D31               	addwfc	(??_calcRequiredPower+1)^(0+128),w
 17719  1A28  0087               	movwf	7
 17720  1A29  3F40               	moviw [0]fsr1
 17721  1A2A  0140               	movlb	0	; select bank0
 17722  1A2B  00C7               	movwf	___flmul@a
 17723  1A2C  3F41               	moviw [1]fsr1
 17724  1A2D  00C8               	movwf	___flmul@a+1
 17725  1A2E  3F42               	moviw [2]fsr1
 17726  1A2F  00C9               	movwf	___flmul@a+2
 17727  1A30  3F43               	moviw [3]fsr1
 17728  1A31  00CA               	movwf	___flmul@a+3
 17729  1A32  2635  3198         	fcall	___flmul
 17730  1A34  0846               	movf	?___flmul+3,w
 17731  1A35  0141               	movlb	1	; select bank1
 17732  1A36  00D5               	movwf	(calcRequiredPower@d+3)^(0+128)
 17733  1A37  0140               	movlb	0	; select bank0
 17734  1A38  0845               	movf	?___flmul+2,w
 17735  1A39  0141               	movlb	1	; select bank1
 17736  1A3A  00D4               	movwf	(calcRequiredPower@d+2)^(0+128)
 17737  1A3B  0140               	movlb	0	; select bank0
 17738  1A3C  0844               	movf	?___flmul+1,w
 17739  1A3D  0141               	movlb	1	; select bank1
 17740  1A3E  00D3               	movwf	(calcRequiredPower@d+1)^(0+128)
 17741  1A3F  0140               	movlb	0	; select bank0
 17742  1A40  0843               	movf	?___flmul,w
 17743  1A41  0141               	movlb	1	; select bank1
 17744  1A42  00D2               	movwf	calcRequiredPower@d^(0+128)
 17745                           
 17746                           ;system.c: 278:   A = (3.14 * d * d) / 4;
 17747  1A43  3040               	movlw	64
 17748  1A44  0140               	movlb	0	; select bank0
 17749  1A45  00C6               	movwf	___flmul@b+3
 17750  1A46  3048               	movlw	72
 17751  1A47  00C5               	movwf	___flmul@b+2
 17752  1A48  30F5               	movlw	245
 17753  1A49  00C4               	movwf	___flmul@b+1
 17754  1A4A  30C3               	movlw	195
 17755  1A4B  00C3               	movwf	___flmul@b
 17756  1A4C  0141               	movlb	1	; select bank1
 17757  1A4D  0855               	movf	(calcRequiredPower@d+3)^(0+128),w
 17758  1A4E  0140               	movlb	0	; select bank0
 17759  1A4F  00CA               	movwf	___flmul@a+3
 17760  1A50  0141               	movlb	1	; select bank1
 17761  1A51  0854               	movf	(calcRequiredPower@d+2)^(0+128),w
 17762  1A52  0140               	movlb	0	; select bank0
 17763  1A53  00C9               	movwf	___flmul@a+2
 17764  1A54  0141               	movlb	1	; select bank1
 17765  1A55  0853               	movf	(calcRequiredPower@d+1)^(0+128),w
 17766  1A56  0140               	movlb	0	; select bank0
 17767  1A57  00C8               	movwf	___flmul@a+1
 17768  1A58  0141               	movlb	1	; select bank1
 17769  1A59  0852               	movf	calcRequiredPower@d^(0+128),w
 17770  1A5A  0140               	movlb	0	; select bank0
 17771  1A5B  00C7               	movwf	___flmul@a
 17772  1A5C  2635  3198         	fcall	___flmul
 17773  1A5E  0846               	movf	?___flmul+3,w
 17774  1A5F  0141               	movlb	1	; select bank1
 17775  1A60  00E1               	movwf	(_calcRequiredPower$2762+3)^(0+128)
 17776  1A61  0140               	movlb	0	; select bank0
 17777  1A62  0845               	movf	?___flmul+2,w
 17778  1A63  0141               	movlb	1	; select bank1
 17779  1A64  00E0               	movwf	(_calcRequiredPower$2762+2)^(0+128)
 17780  1A65  0140               	movlb	0	; select bank0
 17781  1A66  0844               	movf	?___flmul+1,w
 17782  1A67  0141               	movlb	1	; select bank1
 17783  1A68  00DF               	movwf	(_calcRequiredPower$2762+1)^(0+128)
 17784  1A69  0140               	movlb	0	; select bank0
 17785  1A6A  0843               	movf	?___flmul,w
 17786  1A6B  0141               	movlb	1	; select bank1
 17787  1A6C  00DE               	movwf	_calcRequiredPower$2762^(0+128)
 17788                           
 17789                           ;system.c: 278:   A = (3.14 * d * d) / 4;
 17790  1A6D  3040               	movlw	64
 17791  1A6E  0140               	movlb	0	; select bank0
 17792  1A6F  00DF               	movwf	___fldiv@a+3
 17793  1A70  3080               	movlw	128
 17794  1A71  00DE               	movwf	___fldiv@a+2
 17795  1A72  01DD               	clrf	___fldiv@a+1
 17796  1A73  01DC               	clrf	___fldiv@a
 17797  1A74  0141               	movlb	1	; select bank1
 17798  1A75  0855               	movf	(calcRequiredPower@d+3)^(0+128),w
 17799  1A76  0140               	movlb	0	; select bank0
 17800  1A77  00C6               	movwf	___flmul@b+3
 17801  1A78  0141               	movlb	1	; select bank1
 17802  1A79  0854               	movf	(calcRequiredPower@d+2)^(0+128),w
 17803  1A7A  0140               	movlb	0	; select bank0
 17804  1A7B  00C5               	movwf	___flmul@b+2
 17805  1A7C  0141               	movlb	1	; select bank1
 17806  1A7D  0853               	movf	(calcRequiredPower@d+1)^(0+128),w
 17807  1A7E  0140               	movlb	0	; select bank0
 17808  1A7F  00C4               	movwf	___flmul@b+1
 17809  1A80  0141               	movlb	1	; select bank1
 17810  1A81  0852               	movf	calcRequiredPower@d^(0+128),w
 17811  1A82  0140               	movlb	0	; select bank0
 17812  1A83  00C3               	movwf	___flmul@b
 17813  1A84  0141               	movlb	1	; select bank1
 17814  1A85  0861               	movf	(_calcRequiredPower$2762+3)^(0+128),w
 17815  1A86  0140               	movlb	0	; select bank0
 17816  1A87  00CA               	movwf	___flmul@a+3
 17817  1A88  0141               	movlb	1	; select bank1
 17818  1A89  0860               	movf	(_calcRequiredPower$2762+2)^(0+128),w
 17819  1A8A  0140               	movlb	0	; select bank0
 17820  1A8B  00C9               	movwf	___flmul@a+2
 17821  1A8C  0141               	movlb	1	; select bank1
 17822  1A8D  085F               	movf	(_calcRequiredPower$2762+1)^(0+128),w
 17823  1A8E  0140               	movlb	0	; select bank0
 17824  1A8F  00C8               	movwf	___flmul@a+1
 17825  1A90  0141               	movlb	1	; select bank1
 17826  1A91  085E               	movf	_calcRequiredPower$2762^(0+128),w
 17827  1A92  0140               	movlb	0	; select bank0
 17828  1A93  00C7               	movwf	___flmul@a
 17829  1A94  2635               	fcall	___flmul
 17830  1A95  0846               	movf	?___flmul+3,w
 17831  1A96  00E3               	movwf	___fldiv@b+3
 17832  1A97  0845               	movf	?___flmul+2,w
 17833  1A98  00E2               	movwf	___fldiv@b+2
 17834  1A99  0844               	movf	?___flmul+1,w
 17835  1A9A  00E1               	movwf	___fldiv@b+1
 17836  1A9B  0843               	movf	?___flmul,w
 17837  1A9C  00E0               	movwf	___fldiv@b
 17838  1A9D  31A5  25DA  3198   	fcall	___fldiv
 17839  1AA0  085F               	movf	?___fldiv+3,w
 17840  1AA1  0141               	movlb	1	; select bank1
 17841  1AA2  00DD               	movwf	(calcRequiredPower@A+3)^(0+128)
 17842  1AA3  0140               	movlb	0	; select bank0
 17843  1AA4  085E               	movf	?___fldiv+2,w
 17844  1AA5  0141               	movlb	1	; select bank1
 17845  1AA6  00DC               	movwf	(calcRequiredPower@A+2)^(0+128)
 17846  1AA7  0140               	movlb	0	; select bank0
 17847  1AA8  085D               	movf	?___fldiv+1,w
 17848  1AA9  0141               	movlb	1	; select bank1
 17849  1AAA  00DB               	movwf	(calcRequiredPower@A+1)^(0+128)
 17850  1AAB  0140               	movlb	0	; select bank0
 17851  1AAC  085C               	movf	?___fldiv,w
 17852  1AAD  0141               	movlb	1	; select bank1
 17853  1AAE  00DA               	movwf	calcRequiredPower@A^(0+128)
 17854                           
 17855                           ;system.c: 280:   T1 = data.dewPointC + data.dpOffset + 273.15;
 17856  1AAF  304A               	movlw	74
 17857  1AB0  0086               	movwf	6
 17858  1AB1  3027               	movlw	39
 17859  1AB2  0087               	movwf	7
 17860  1AB3  315D               	addfsr 1,29
 17861  1AB4  3F40               	moviw [0]fsr1
 17862  1AB5  0140               	movlb	0	; select bank0
 17863  1AB6  00DC               	movwf	___fladd@b
 17864  1AB7  3F41               	moviw [1]fsr1
 17865  1AB8  00DD               	movwf	___fladd@b+1
 17866  1AB9  3F42               	moviw [2]fsr1
 17867  1ABA  00DE               	movwf	___fladd@b+2
 17868  1ABB  3F43               	moviw [3]fsr1
 17869  1ABC  00DF               	movwf	___fladd@b+3
 17870  1ABD  304A               	movlw	74
 17871  1ABE  0086               	movwf	6
 17872  1ABF  3027               	movlw	39
 17873  1AC0  0087               	movwf	7
 17874  1AC1  3148               	addfsr 1,8
 17875  1AC2  3F40               	moviw [0]fsr1
 17876  1AC3  00E0               	movwf	___fladd@a
 17877  1AC4  3F41               	moviw [1]fsr1
 17878  1AC5  00E1               	movwf	___fladd@a+1
 17879  1AC6  3F42               	moviw [2]fsr1
 17880  1AC7  00E2               	movwf	___fladd@a+2
 17881  1AC8  3F43               	moviw [3]fsr1
 17882  1AC9  00E3               	movwf	___fladd@a+3
 17883  1ACA  31AC  24AF  3198   	fcall	___fladd
 17884  1ACD  085F               	movf	?___fladd+3,w
 17885  1ACE  0141               	movlb	1	; select bank1
 17886  1ACF  00BD               	movwf	(_calcRequiredPower$2763+3)^(0+128)
 17887  1AD0  0140               	movlb	0	; select bank0
 17888  1AD1  085E               	movf	?___fladd+2,w
 17889  1AD2  0141               	movlb	1	; select bank1
 17890  1AD3  00BC               	movwf	(_calcRequiredPower$2763+2)^(0+128)
 17891  1AD4  0140               	movlb	0	; select bank0
 17892  1AD5  085D               	movf	?___fladd+1,w
 17893  1AD6  0141               	movlb	1	; select bank1
 17894  1AD7  00BB               	movwf	(_calcRequiredPower$2763+1)^(0+128)
 17895  1AD8  0140               	movlb	0	; select bank0
 17896  1AD9  085C               	movf	?___fladd,w
 17897  1ADA  0141               	movlb	1	; select bank1
 17898  1ADB  00BA               	movwf	_calcRequiredPower$2763^(0+128)
 17899                           
 17900                           ;system.c: 280:   T1 = data.dewPointC + data.dpOffset + 273.15;
 17901  1ADC  3043               	movlw	67
 17902  1ADD  0140               	movlb	0	; select bank0
 17903  1ADE  00DF               	movwf	___fladd@b+3
 17904  1ADF  3088               	movlw	136
 17905  1AE0  00DE               	movwf	___fladd@b+2
 17906  1AE1  3093               	movlw	147
 17907  1AE2  00DD               	movwf	___fladd@b+1
 17908  1AE3  3033               	movlw	51
 17909  1AE4  00DC               	movwf	___fladd@b
 17910  1AE5  0141               	movlb	1	; select bank1
 17911  1AE6  083D               	movf	(_calcRequiredPower$2763+3)^(0+128),w
 17912  1AE7  0140               	movlb	0	; select bank0
 17913  1AE8  00E3               	movwf	___fladd@a+3
 17914  1AE9  0141               	movlb	1	; select bank1
 17915  1AEA  083C               	movf	(_calcRequiredPower$2763+2)^(0+128),w
 17916  1AEB  0140               	movlb	0	; select bank0
 17917  1AEC  00E2               	movwf	___fladd@a+2
 17918  1AED  0141               	movlb	1	; select bank1
 17919  1AEE  083B               	movf	(_calcRequiredPower$2763+1)^(0+128),w
 17920  1AEF  0140               	movlb	0	; select bank0
 17921  1AF0  00E1               	movwf	___fladd@a+1
 17922  1AF1  0141               	movlb	1	; select bank1
 17923  1AF2  083A               	movf	_calcRequiredPower$2763^(0+128),w
 17924  1AF3  0140               	movlb	0	; select bank0
 17925  1AF4  00E0               	movwf	___fladd@a
 17926  1AF5  31AC  24AF  3198   	fcall	___fladd
 17927  1AF8  085F               	movf	?___fladd+3,w
 17928  1AF9  0141               	movlb	1	; select bank1
 17929  1AFA  00E5               	movwf	(calcRequiredPower@T1+3)^(0+128)
 17930  1AFB  0140               	movlb	0	; select bank0
 17931  1AFC  085E               	movf	?___fladd+2,w
 17932  1AFD  0141               	movlb	1	; select bank1
 17933  1AFE  00E4               	movwf	(calcRequiredPower@T1+2)^(0+128)
 17934  1AFF  0140               	movlb	0	; select bank0
 17935  1B00  085D               	movf	?___fladd+1,w
 17936  1B01  0141               	movlb	1	; select bank1
 17937  1B02  00E3               	movwf	(calcRequiredPower@T1+1)^(0+128)
 17938  1B03  0140               	movlb	0	; select bank0
 17939  1B04  085C               	movf	?___fladd,w
 17940  1B05  0141               	movlb	1	; select bank1
 17941  1B06  00E2               	movwf	calcRequiredPower@T1^(0+128)
 17942                           
 17943                           ;system.c: 281:   T2 = data.skyTemp + 273.15;
 17944  1B07  3043               	movlw	67
 17945  1B08  0140               	movlb	0	; select bank0
 17946  1B09  00DF               	movwf	___fladd@b+3
 17947  1B0A  3088               	movlw	136
 17948  1B0B  00DE               	movwf	___fladd@b+2
 17949  1B0C  3093               	movlw	147
 17950  1B0D  00DD               	movwf	___fladd@b+1
 17951  1B0E  3033               	movlw	51
 17952  1B0F  00DC               	movwf	___fladd@b
 17953  1B10  306B               	movlw	107
 17954  1B11  0086               	movwf	6
 17955  1B12  3027               	movlw	39
 17956  1B13  0087               	movwf	7
 17957  1B14  3F40               	moviw [0]fsr1
 17958  1B15  00E0               	movwf	___fladd@a
 17959  1B16  3F41               	moviw [1]fsr1
 17960  1B17  00E1               	movwf	___fladd@a+1
 17961  1B18  3F42               	moviw [2]fsr1
 17962  1B19  00E2               	movwf	___fladd@a+2
 17963  1B1A  3F43               	moviw [3]fsr1
 17964  1B1B  00E3               	movwf	___fladd@a+3
 17965  1B1C  31AC  24AF  3198   	fcall	___fladd
 17966  1B1F  085F               	movf	?___fladd+3,w
 17967  1B20  0141               	movlb	1	; select bank1
 17968  1B21  00E9               	movwf	(calcRequiredPower@T2+3)^(0+128)
 17969  1B22  0140               	movlb	0	; select bank0
 17970  1B23  085E               	movf	?___fladd+2,w
 17971  1B24  0141               	movlb	1	; select bank1
 17972  1B25  00E8               	movwf	(calcRequiredPower@T2+2)^(0+128)
 17973  1B26  0140               	movlb	0	; select bank0
 17974  1B27  085D               	movf	?___fladd+1,w
 17975  1B28  0141               	movlb	1	; select bank1
 17976  1B29  00E7               	movwf	(calcRequiredPower@T2+1)^(0+128)
 17977  1B2A  0140               	movlb	0	; select bank0
 17978  1B2B  085C               	movf	?___fladd,w
 17979  1B2C  0141               	movlb	1	; select bank1
 17980  1B2D  00E6               	movwf	calcRequiredPower@T2^(0+128)
 17981                           
 17982                           ;system.c: 283:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 17983  1B2E  0869               	movf	(calcRequiredPower@T2+3)^(0+128),w
 17984  1B2F  0140               	movlb	0	; select bank0
 17985  1B30  00C6               	movwf	___flmul@b+3
 17986  1B31  0141               	movlb	1	; select bank1
 17987  1B32  0868               	movf	(calcRequiredPower@T2+2)^(0+128),w
 17988  1B33  0140               	movlb	0	; select bank0
 17989  1B34  00C5               	movwf	___flmul@b+2
 17990  1B35  0141               	movlb	1	; select bank1
 17991  1B36  0867               	movf	(calcRequiredPower@T2+1)^(0+128),w
 17992  1B37  0140               	movlb	0	; select bank0
 17993  1B38  00C4               	movwf	___flmul@b+1
 17994  1B39  0141               	movlb	1	; select bank1
 17995  1B3A  0866               	movf	calcRequiredPower@T2^(0+128),w
 17996  1B3B  0140               	movlb	0	; select bank0
 17997  1B3C  00C3               	movwf	___flmul@b
 17998  1B3D  0141               	movlb	1	; select bank1
 17999  1B3E  0869               	movf	(calcRequiredPower@T2+3)^(0+128),w
 18000  1B3F  0140               	movlb	0	; select bank0
 18001  1B40  00CA               	movwf	___flmul@a+3
 18002  1B41  0141               	movlb	1	; select bank1
 18003  1B42  0868               	movf	(calcRequiredPower@T2+2)^(0+128),w
 18004  1B43  0140               	movlb	0	; select bank0
 18005  1B44  00C9               	movwf	___flmul@a+2
 18006  1B45  0141               	movlb	1	; select bank1
 18007  1B46  0867               	movf	(calcRequiredPower@T2+1)^(0+128),w
 18008  1B47  0140               	movlb	0	; select bank0
 18009  1B48  00C8               	movwf	___flmul@a+1
 18010  1B49  0141               	movlb	1	; select bank1
 18011  1B4A  0866               	movf	calcRequiredPower@T2^(0+128),w
 18012  1B4B  0140               	movlb	0	; select bank0
 18013  1B4C  00C7               	movwf	___flmul@a
 18014  1B4D  2635  3198         	fcall	___flmul
 18015  1B4F  0846               	movf	?___flmul+3,w
 18016  1B50  0141               	movlb	1	; select bank1
 18017  1B51  00E1               	movwf	(_calcRequiredPower$2762+3)^(0+128)
 18018  1B52  0140               	movlb	0	; select bank0
 18019  1B53  0845               	movf	?___flmul+2,w
 18020  1B54  0141               	movlb	1	; select bank1
 18021  1B55  00E0               	movwf	(_calcRequiredPower$2762+2)^(0+128)
 18022  1B56  0140               	movlb	0	; select bank0
 18023  1B57  0844               	movf	?___flmul+1,w
 18024  1B58  0141               	movlb	1	; select bank1
 18025  1B59  00DF               	movwf	(_calcRequiredPower$2762+1)^(0+128)
 18026  1B5A  0140               	movlb	0	; select bank0
 18027  1B5B  0843               	movf	?___flmul,w
 18028  1B5C  0141               	movlb	1	; select bank1
 18029  1B5D  00DE               	movwf	_calcRequiredPower$2762^(0+128)
 18030                           
 18031                           ;system.c: 283:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 18032  1B5E  0869               	movf	(calcRequiredPower@T2+3)^(0+128),w
 18033  1B5F  0140               	movlb	0	; select bank0
 18034  1B60  00C6               	movwf	___flmul@b+3
 18035  1B61  0141               	movlb	1	; select bank1
 18036  1B62  0868               	movf	(calcRequiredPower@T2+2)^(0+128),w
 18037  1B63  0140               	movlb	0	; select bank0
 18038  1B64  00C5               	movwf	___flmul@b+2
 18039  1B65  0141               	movlb	1	; select bank1
 18040  1B66  0867               	movf	(calcRequiredPower@T2+1)^(0+128),w
 18041  1B67  0140               	movlb	0	; select bank0
 18042  1B68  00C4               	movwf	___flmul@b+1
 18043  1B69  0141               	movlb	1	; select bank1
 18044  1B6A  0866               	movf	calcRequiredPower@T2^(0+128),w
 18045  1B6B  0140               	movlb	0	; select bank0
 18046  1B6C  00C3               	movwf	___flmul@b
 18047  1B6D  0141               	movlb	1	; select bank1
 18048  1B6E  0861               	movf	(_calcRequiredPower$2762+3)^(0+128),w
 18049  1B6F  0140               	movlb	0	; select bank0
 18050  1B70  00CA               	movwf	___flmul@a+3
 18051  1B71  0141               	movlb	1	; select bank1
 18052  1B72  0860               	movf	(_calcRequiredPower$2762+2)^(0+128),w
 18053  1B73  0140               	movlb	0	; select bank0
 18054  1B74  00C9               	movwf	___flmul@a+2
 18055  1B75  0141               	movlb	1	; select bank1
 18056  1B76  085F               	movf	(_calcRequiredPower$2762+1)^(0+128),w
 18057  1B77  0140               	movlb	0	; select bank0
 18058  1B78  00C8               	movwf	___flmul@a+1
 18059  1B79  0141               	movlb	1	; select bank1
 18060  1B7A  085E               	movf	_calcRequiredPower$2762^(0+128),w
 18061  1B7B  0140               	movlb	0	; select bank0
 18062  1B7C  00C7               	movwf	___flmul@a
 18063  1B7D  2635  3198         	fcall	___flmul
 18064  1B7F  0846               	movf	?___flmul+3,w
 18065  1B80  0141               	movlb	1	; select bank1
 18066  1B81  00C1               	movwf	(_calcRequiredPower$2764+3)^(0+128)
 18067  1B82  0140               	movlb	0	; select bank0
 18068  1B83  0845               	movf	?___flmul+2,w
 18069  1B84  0141               	movlb	1	; select bank1
 18070  1B85  00C0               	movwf	(_calcRequiredPower$2764+2)^(0+128)
 18071  1B86  0140               	movlb	0	; select bank0
 18072  1B87  0844               	movf	?___flmul+1,w
 18073  1B88  0141               	movlb	1	; select bank1
 18074  1B89  00BF               	movwf	(_calcRequiredPower$2764+1)^(0+128)
 18075  1B8A  0140               	movlb	0	; select bank0
 18076  1B8B  0843               	movf	?___flmul,w
 18077  1B8C  0141               	movlb	1	; select bank1
 18078  1B8D  00BE               	movwf	_calcRequiredPower$2764^(0+128)
 18079                           
 18080                           ;system.c: 283:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 18081  1B8E  0865               	movf	(calcRequiredPower@T1+3)^(0+128),w
 18082  1B8F  0140               	movlb	0	; select bank0
 18083  1B90  00C6               	movwf	___flmul@b+3
 18084  1B91  0141               	movlb	1	; select bank1
 18085  1B92  0864               	movf	(calcRequiredPower@T1+2)^(0+128),w
 18086  1B93  0140               	movlb	0	; select bank0
 18087  1B94  00C5               	movwf	___flmul@b+2
 18088  1B95  0141               	movlb	1	; select bank1
 18089  1B96  0863               	movf	(calcRequiredPower@T1+1)^(0+128),w
 18090  1B97  0140               	movlb	0	; select bank0
 18091  1B98  00C4               	movwf	___flmul@b+1
 18092  1B99  0141               	movlb	1	; select bank1
 18093  1B9A  0862               	movf	calcRequiredPower@T1^(0+128),w
 18094  1B9B  0140               	movlb	0	; select bank0
 18095  1B9C  00C3               	movwf	___flmul@b
 18096  1B9D  0141               	movlb	1	; select bank1
 18097  1B9E  0865               	movf	(calcRequiredPower@T1+3)^(0+128),w
 18098  1B9F  0140               	movlb	0	; select bank0
 18099  1BA0  00CA               	movwf	___flmul@a+3
 18100  1BA1  0141               	movlb	1	; select bank1
 18101  1BA2  0864               	movf	(calcRequiredPower@T1+2)^(0+128),w
 18102  1BA3  0140               	movlb	0	; select bank0
 18103  1BA4  00C9               	movwf	___flmul@a+2
 18104  1BA5  0141               	movlb	1	; select bank1
 18105  1BA6  0863               	movf	(calcRequiredPower@T1+1)^(0+128),w
 18106  1BA7  0140               	movlb	0	; select bank0
 18107  1BA8  00C8               	movwf	___flmul@a+1
 18108  1BA9  0141               	movlb	1	; select bank1
 18109  1BAA  0862               	movf	calcRequiredPower@T1^(0+128),w
 18110  1BAB  0140               	movlb	0	; select bank0
 18111  1BAC  00C7               	movwf	___flmul@a
 18112  1BAD  2635  3198         	fcall	___flmul
 18113  1BAF  0846               	movf	?___flmul+3,w
 18114  1BB0  0141               	movlb	1	; select bank1
 18115  1BB1  00C5               	movwf	(_calcRequiredPower$2765+3)^(0+128)
 18116  1BB2  0140               	movlb	0	; select bank0
 18117  1BB3  0845               	movf	?___flmul+2,w
 18118  1BB4  0141               	movlb	1	; select bank1
 18119  1BB5  00C4               	movwf	(_calcRequiredPower$2765+2)^(0+128)
 18120  1BB6  0140               	movlb	0	; select bank0
 18121  1BB7  0844               	movf	?___flmul+1,w
 18122  1BB8  0141               	movlb	1	; select bank1
 18123  1BB9  00C3               	movwf	(_calcRequiredPower$2765+1)^(0+128)
 18124  1BBA  0140               	movlb	0	; select bank0
 18125  1BBB  0843               	movf	?___flmul,w
 18126  1BBC  0141               	movlb	1	; select bank1
 18127  1BBD  00C2               	movwf	_calcRequiredPower$2765^(0+128)
 18128                           
 18129                           ;system.c: 283:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 18130  1BBE  0865               	movf	(calcRequiredPower@T1+3)^(0+128),w
 18131  1BBF  0140               	movlb	0	; select bank0
 18132  1BC0  00C6               	movwf	___flmul@b+3
 18133  1BC1  0141               	movlb	1	; select bank1
 18134  1BC2  0864               	movf	(calcRequiredPower@T1+2)^(0+128),w
 18135  1BC3  0140               	movlb	0	; select bank0
 18136  1BC4  00C5               	movwf	___flmul@b+2
 18137  1BC5  0141               	movlb	1	; select bank1
 18138  1BC6  0863               	movf	(calcRequiredPower@T1+1)^(0+128),w
 18139  1BC7  0140               	movlb	0	; select bank0
 18140  1BC8  00C4               	movwf	___flmul@b+1
 18141  1BC9  0141               	movlb	1	; select bank1
 18142  1BCA  0862               	movf	calcRequiredPower@T1^(0+128),w
 18143  1BCB  0140               	movlb	0	; select bank0
 18144  1BCC  00C3               	movwf	___flmul@b
 18145  1BCD  0141               	movlb	1	; select bank1
 18146  1BCE  0845               	movf	(_calcRequiredPower$2765+3)^(0+128),w
 18147  1BCF  0140               	movlb	0	; select bank0
 18148  1BD0  00CA               	movwf	___flmul@a+3
 18149  1BD1  0141               	movlb	1	; select bank1
 18150  1BD2  0844               	movf	(_calcRequiredPower$2765+2)^(0+128),w
 18151  1BD3  0140               	movlb	0	; select bank0
 18152  1BD4  00C9               	movwf	___flmul@a+2
 18153  1BD5  0141               	movlb	1	; select bank1
 18154  1BD6  0843               	movf	(_calcRequiredPower$2765+1)^(0+128),w
 18155  1BD7  0140               	movlb	0	; select bank0
 18156  1BD8  00C8               	movwf	___flmul@a+1
 18157  1BD9  0141               	movlb	1	; select bank1
 18158  1BDA  0842               	movf	_calcRequiredPower$2765^(0+128),w
 18159  1BDB  0140               	movlb	0	; select bank0
 18160  1BDC  00C7               	movwf	___flmul@a
 18161  1BDD  2635  3198         	fcall	___flmul
 18162  1BDF  0846               	movf	?___flmul+3,w
 18163  1BE0  0141               	movlb	1	; select bank1
 18164  1BE1  00C9               	movwf	(_calcRequiredPower$2766+3)^(0+128)
 18165  1BE2  0140               	movlb	0	; select bank0
 18166  1BE3  0845               	movf	?___flmul+2,w
 18167  1BE4  0141               	movlb	1	; select bank1
 18168  1BE5  00C8               	movwf	(_calcRequiredPower$2766+2)^(0+128)
 18169  1BE6  0140               	movlb	0	; select bank0
 18170  1BE7  0844               	movf	?___flmul+1,w
 18171  1BE8  0141               	movlb	1	; select bank1
 18172  1BE9  00C7               	movwf	(_calcRequiredPower$2766+1)^(0+128)
 18173  1BEA  0140               	movlb	0	; select bank0
 18174  1BEB  0843               	movf	?___flmul,w
 18175  1BEC  0141               	movlb	1	; select bank1
 18176  1BED  00C6               	movwf	_calcRequiredPower$2766^(0+128)
 18177                           
 18178                           ;system.c: 283:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 18179  1BEE  0869               	movf	(calcRequiredPower@T2+3)^(0+128),w
 18180  1BEF  0140               	movlb	0	; select bank0
 18181  1BF0  00C6               	movwf	___flmul@b+3
 18182  1BF1  0141               	movlb	1	; select bank1
 18183  1BF2  0868               	movf	(calcRequiredPower@T2+2)^(0+128),w
 18184  1BF3  0140               	movlb	0	; select bank0
 18185  1BF4  00C5               	movwf	___flmul@b+2
 18186  1BF5  0141               	movlb	1	; select bank1
 18187  1BF6  0867               	movf	(calcRequiredPower@T2+1)^(0+128),w
 18188  1BF7  0140               	movlb	0	; select bank0
 18189  1BF8  00C4               	movwf	___flmul@b+1
 18190  1BF9  0141               	movlb	1	; select bank1
 18191  1BFA  0866               	movf	calcRequiredPower@T2^(0+128),w
 18192  1BFB  0140               	movlb	0	; select bank0
 18193  1BFC  00C3               	movwf	___flmul@b
 18194  1BFD  0141               	movlb	1	; select bank1
 18195  1BFE  0841               	movf	(_calcRequiredPower$2764+3)^(0+128),w
 18196  1BFF  0140               	movlb	0	; select bank0
 18197  1C00  00CA               	movwf	___flmul@a+3
 18198  1C01  0141               	movlb	1	; select bank1
 18199  1C02  0840               	movf	(_calcRequiredPower$2764+2)^(0+128),w
 18200  1C03  0140               	movlb	0	; select bank0
 18201  1C04  00C9               	movwf	___flmul@a+2
 18202  1C05  0141               	movlb	1	; select bank1
 18203  1C06  083F               	movf	(_calcRequiredPower$2764+1)^(0+128),w
 18204  1C07  0140               	movlb	0	; select bank0
 18205  1C08  00C8               	movwf	___flmul@a+1
 18206  1C09  0141               	movlb	1	; select bank1
 18207  1C0A  083E               	movf	_calcRequiredPower$2764^(0+128),w
 18208  1C0B  0140               	movlb	0	; select bank0
 18209  1C0C  00C7               	movwf	___flmul@a
 18210  1C0D  2635  3198         	fcall	___flmul
 18211  1C0F  0846               	movf	?___flmul+3,w
 18212  1C10  0141               	movlb	1	; select bank1
 18213  1C11  00AB               	movwf	(___flsub@a+3)^(0+128)
 18214  1C12  0140               	movlb	0	; select bank0
 18215  1C13  0845               	movf	?___flmul+2,w
 18216  1C14  0141               	movlb	1	; select bank1
 18217  1C15  00AA               	movwf	(___flsub@a+2)^(0+128)
 18218  1C16  0140               	movlb	0	; select bank0
 18219  1C17  0844               	movf	?___flmul+1,w
 18220  1C18  0141               	movlb	1	; select bank1
 18221  1C19  00A9               	movwf	(___flsub@a+1)^(0+128)
 18222  1C1A  0140               	movlb	0	; select bank0
 18223  1C1B  0843               	movf	?___flmul,w
 18224  1C1C  0141               	movlb	1	; select bank1
 18225  1C1D  00A8               	movwf	___flsub@a^(0+128)
 18226  1C1E  0865               	movf	(calcRequiredPower@T1+3)^(0+128),w
 18227  1C1F  0140               	movlb	0	; select bank0
 18228  1C20  00C6               	movwf	___flmul@b+3
 18229  1C21  0141               	movlb	1	; select bank1
 18230  1C22  0864               	movf	(calcRequiredPower@T1+2)^(0+128),w
 18231  1C23  0140               	movlb	0	; select bank0
 18232  1C24  00C5               	movwf	___flmul@b+2
 18233  1C25  0141               	movlb	1	; select bank1
 18234  1C26  0863               	movf	(calcRequiredPower@T1+1)^(0+128),w
 18235  1C27  0140               	movlb	0	; select bank0
 18236  1C28  00C4               	movwf	___flmul@b+1
 18237  1C29  0141               	movlb	1	; select bank1
 18238  1C2A  0862               	movf	calcRequiredPower@T1^(0+128),w
 18239  1C2B  0140               	movlb	0	; select bank0
 18240  1C2C  00C3               	movwf	___flmul@b
 18241  1C2D  0141               	movlb	1	; select bank1
 18242  1C2E  0849               	movf	(_calcRequiredPower$2766+3)^(0+128),w
 18243  1C2F  0140               	movlb	0	; select bank0
 18244  1C30  00CA               	movwf	___flmul@a+3
 18245  1C31  0141               	movlb	1	; select bank1
 18246  1C32  0848               	movf	(_calcRequiredPower$2766+2)^(0+128),w
 18247  1C33  0140               	movlb	0	; select bank0
 18248  1C34  00C9               	movwf	___flmul@a+2
 18249  1C35  0141               	movlb	1	; select bank1
 18250  1C36  0847               	movf	(_calcRequiredPower$2766+1)^(0+128),w
 18251  1C37  0140               	movlb	0	; select bank0
 18252  1C38  00C8               	movwf	___flmul@a+1
 18253  1C39  0141               	movlb	1	; select bank1
 18254  1C3A  0846               	movf	_calcRequiredPower$2766^(0+128),w
 18255  1C3B  0140               	movlb	0	; select bank0
 18256  1C3C  00C7               	movwf	___flmul@a
 18257  1C3D  2635               	fcall	___flmul
 18258  1C3E  0846               	movf	?___flmul+3,w
 18259  1C3F  0141               	movlb	1	; select bank1
 18260  1C40  00AF               	movwf	(___flsub@b+3)^(0+128)
 18261  1C41  0140               	movlb	0	; select bank0
 18262  1C42  0845               	movf	?___flmul+2,w
 18263  1C43  0141               	movlb	1	; select bank1
 18264  1C44  00AE               	movwf	(___flsub@b+2)^(0+128)
 18265  1C45  0140               	movlb	0	; select bank0
 18266  1C46  0844               	movf	?___flmul+1,w
 18267  1C47  0141               	movlb	1	; select bank1
 18268  1C48  00AD               	movwf	(___flsub@b+1)^(0+128)
 18269  1C49  0140               	movlb	0	; select bank0
 18270  1C4A  0843               	movf	?___flmul,w
 18271  1C4B  0141               	movlb	1	; select bank1
 18272  1C4C  00AC               	movwf	___flsub@b^(0+128)
 18273  1C4D  318F  2782  3198   	fcall	___flsub
 18274  1C50  082B               	movf	(?___flsub+3)^(0+128),w
 18275  1C51  00CD               	movwf	(_calcRequiredPower$2767+3)^(0+128)
 18276  1C52  082A               	movf	(?___flsub+2)^(0+128),w
 18277  1C53  00CC               	movwf	(_calcRequiredPower$2767+2)^(0+128)
 18278  1C54  0829               	movf	(?___flsub+1)^(0+128),w
 18279  1C55  00CB               	movwf	(_calcRequiredPower$2767+1)^(0+128)
 18280  1C56  0828               	movf	?___flsub^(0+128),w
 18281  1C57  00CA               	movwf	_calcRequiredPower$2767^(0+128)
 18282                           
 18283                           ;system.c: 283:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 18284  1C58  3033               	movlw	51
 18285  1C59  0140               	movlb	0	; select bank0
 18286  1C5A  00C6               	movwf	___flmul@b+3
 18287  1C5B  3067               	movlw	103
 18288  1C5C  00C5               	movwf	___flmul@b+2
 18289  1C5D  3059               	movlw	89
 18290  1C5E  00C4               	movwf	___flmul@b+1
 18291  1C5F  3032               	movlw	50
 18292  1C60  00C3               	movwf	___flmul@b
 18293  1C61  0141               	movlb	1	; select bank1
 18294  1C62  085D               	movf	(calcRequiredPower@A+3)^(0+128),w
 18295  1C63  0140               	movlb	0	; select bank0
 18296  1C64  00CA               	movwf	___flmul@a+3
 18297  1C65  0141               	movlb	1	; select bank1
 18298  1C66  085C               	movf	(calcRequiredPower@A+2)^(0+128),w
 18299  1C67  0140               	movlb	0	; select bank0
 18300  1C68  00C9               	movwf	___flmul@a+2
 18301  1C69  0141               	movlb	1	; select bank1
 18302  1C6A  085B               	movf	(calcRequiredPower@A+1)^(0+128),w
 18303  1C6B  0140               	movlb	0	; select bank0
 18304  1C6C  00C8               	movwf	___flmul@a+1
 18305  1C6D  0141               	movlb	1	; select bank1
 18306  1C6E  085A               	movf	calcRequiredPower@A^(0+128),w
 18307  1C6F  0140               	movlb	0	; select bank0
 18308  1C70  00C7               	movwf	___flmul@a
 18309  1C71  2635  3198         	fcall	___flmul
 18310  1C73  0846               	movf	?___flmul+3,w
 18311  1C74  0141               	movlb	1	; select bank1
 18312  1C75  00D1               	movwf	(_calcRequiredPower$2768+3)^(0+128)
 18313  1C76  0140               	movlb	0	; select bank0
 18314  1C77  0845               	movf	?___flmul+2,w
 18315  1C78  0141               	movlb	1	; select bank1
 18316  1C79  00D0               	movwf	(_calcRequiredPower$2768+2)^(0+128)
 18317  1C7A  0140               	movlb	0	; select bank0
 18318  1C7B  0844               	movf	?___flmul+1,w
 18319  1C7C  0141               	movlb	1	; select bank1
 18320  1C7D  00CF               	movwf	(_calcRequiredPower$2768+1)^(0+128)
 18321  1C7E  0140               	movlb	0	; select bank0
 18322  1C7F  0843               	movf	?___flmul,w
 18323  1C80  0141               	movlb	1	; select bank1
 18324  1C81  00CE               	movwf	_calcRequiredPower$2768^(0+128)
 18325                           
 18326                           ;system.c: 283:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 18327  1C82  084D               	movf	(_calcRequiredPower$2767+3)^(0+128),w
 18328  1C83  0140               	movlb	0	; select bank0
 18329  1C84  00C6               	movwf	___flmul@b+3
 18330  1C85  0141               	movlb	1	; select bank1
 18331  1C86  084C               	movf	(_calcRequiredPower$2767+2)^(0+128),w
 18332  1C87  0140               	movlb	0	; select bank0
 18333  1C88  00C5               	movwf	___flmul@b+2
 18334  1C89  0141               	movlb	1	; select bank1
 18335  1C8A  084B               	movf	(_calcRequiredPower$2767+1)^(0+128),w
 18336  1C8B  0140               	movlb	0	; select bank0
 18337  1C8C  00C4               	movwf	___flmul@b+1
 18338  1C8D  0141               	movlb	1	; select bank1
 18339  1C8E  084A               	movf	_calcRequiredPower$2767^(0+128),w
 18340  1C8F  0140               	movlb	0	; select bank0
 18341  1C90  00C3               	movwf	___flmul@b
 18342  1C91  0141               	movlb	1	; select bank1
 18343  1C92  0851               	movf	(_calcRequiredPower$2768+3)^(0+128),w
 18344  1C93  0140               	movlb	0	; select bank0
 18345  1C94  00CA               	movwf	___flmul@a+3
 18346  1C95  0141               	movlb	1	; select bank1
 18347  1C96  0850               	movf	(_calcRequiredPower$2768+2)^(0+128),w
 18348  1C97  0140               	movlb	0	; select bank0
 18349  1C98  00C9               	movwf	___flmul@a+2
 18350  1C99  0141               	movlb	1	; select bank1
 18351  1C9A  084F               	movf	(_calcRequiredPower$2768+1)^(0+128),w
 18352  1C9B  0140               	movlb	0	; select bank0
 18353  1C9C  00C8               	movwf	___flmul@a+1
 18354  1C9D  0141               	movlb	1	; select bank1
 18355  1C9E  084E               	movf	_calcRequiredPower$2768^(0+128),w
 18356  1C9F  0140               	movlb	0	; select bank0
 18357  1CA0  00C7               	movwf	___flmul@a
 18358  1CA1  2635               	fcall	___flmul
 18359  1CA2  0846               	movf	?___flmul+3,w
 18360  1CA3  0141               	movlb	1	; select bank1
 18361  1CA4  00D9               	movwf	(calcRequiredPower@phi+3)^(0+128)
 18362  1CA5  0140               	movlb	0	; select bank0
 18363  1CA6  0845               	movf	?___flmul+2,w
 18364  1CA7  0141               	movlb	1	; select bank1
 18365  1CA8  00D8               	movwf	(calcRequiredPower@phi+2)^(0+128)
 18366  1CA9  0140               	movlb	0	; select bank0
 18367  1CAA  0844               	movf	?___flmul+1,w
 18368  1CAB  0141               	movlb	1	; select bank1
 18369  1CAC  00D7               	movwf	(calcRequiredPower@phi+1)^(0+128)
 18370  1CAD  0140               	movlb	0	; select bank0
 18371  1CAE  0843               	movf	?___flmul,w
 18372  1CAF  0141               	movlb	1	; select bank1
 18373  1CB0  00D6               	movwf	calcRequiredPower@phi^(0+128)
 18374                           
 18375                           ;system.c: 285:   data.heater[n].Preq = phi * data.fudgeFactor;
 18376  1CB1  086A               	movf	calcRequiredPower@n^(0+128),w
 18377  1CB2  0140               	movlb	0	; select bank0
 18378  1CB3  00AF               	movwf	___wmul@multiplier
 18379  1CB4  301F               	movlw	31
 18380  1CB5  01B0               	clrf	___wmul@multiplier+1
 18381  1CB6  00B1               	movwf	___wmul@multiplicand
 18382  1CB7  01B2               	clrf	___wmul@multiplicand+1
 18383  1CB8  318A  2206  3198   	fcall	___wmul
 18384  1CBB  307C               	movlw	124
 18385  1CBC  0141               	movlb	1	; select bank1
 18386  1CBD  00B0               	movwf	??_calcRequiredPower^(0+128)
 18387  1CBE  3027               	movlw	39
 18388  1CBF  00B1               	movwf	(??_calcRequiredPower^(0+128)+1)
 18389  1CC0  0140               	movlb	0	; select bank0
 18390  1CC1  082F               	movf	?___wmul,w
 18391  1CC2  0141               	movlb	1	; select bank1
 18392  1CC3  0730               	addwf	??_calcRequiredPower^(0+128),w
 18393  1CC4  0086               	movwf	6
 18394  1CC5  0140               	movlb	0	; select bank0
 18395  1CC6  0830               	movf	?___wmul+1,w
 18396  1CC7  0141               	movlb	1	; select bank1
 18397  1CC8  3D31               	addwfc	(??_calcRequiredPower+1)^(0+128),w
 18398  1CC9  0087               	movwf	7
 18399  1CCA  0859               	movf	(calcRequiredPower@phi+3)^(0+128),w
 18400  1CCB  0140               	movlb	0	; select bank0
 18401  1CCC  00C6               	movwf	___flmul@b+3
 18402  1CCD  0141               	movlb	1	; select bank1
 18403  1CCE  0858               	movf	(calcRequiredPower@phi+2)^(0+128),w
 18404  1CCF  0140               	movlb	0	; select bank0
 18405  1CD0  00C5               	movwf	___flmul@b+2
 18406  1CD1  0141               	movlb	1	; select bank1
 18407  1CD2  0857               	movf	(calcRequiredPower@phi+1)^(0+128),w
 18408  1CD3  0140               	movlb	0	; select bank0
 18409  1CD4  00C4               	movwf	___flmul@b+1
 18410  1CD5  0141               	movlb	1	; select bank1
 18411  1CD6  0856               	movf	calcRequiredPower@phi^(0+128),w
 18412  1CD7  0140               	movlb	0	; select bank0
 18413  1CD8  00C3               	movwf	___flmul@b
 18414  1CD9  306F               	movlw	111
 18415  1CDA  0084               	movwf	4
 18416  1CDB  3027               	movlw	39
 18417  1CDC  0085               	movwf	5
 18418  1CDD  3F00               	moviw [0]fsr0
 18419  1CDE  00C7               	movwf	___flmul@a
 18420  1CDF  3F01               	moviw [1]fsr0
 18421  1CE0  00C8               	movwf	___flmul@a+1
 18422  1CE1  3F02               	moviw [2]fsr0
 18423  1CE2  00C9               	movwf	___flmul@a+2
 18424  1CE3  3F03               	moviw [3]fsr0
 18425  1CE4  00CA               	movwf	___flmul@a+3
 18426  1CE5  2635               	fcall	___flmul
 18427  1CE6  0843               	movf	?___flmul,w
 18428  1CE7  3FC0               	movwi [0]fsr1
 18429  1CE8  0844               	movf	?___flmul+1,w
 18430  1CE9  3FC1               	movwi [1]fsr1
 18431  1CEA  0845               	movf	?___flmul+2,w
 18432  1CEB  3FC2               	movwi [2]fsr1
 18433  1CEC  0846               	movf	?___flmul+3,w
 18434  1CED  3FC3               	movwi [3]fsr1
 18435                           
 18436                           ;system.c: 288:   p = 2 * 3.14 * 0.0254 * data.heater[n].lensDia;
 18437  1CEE  303E               	movlw	62
 18438  1CEF  00C6               	movwf	___flmul@b+3
 18439  1CF0  3023               	movlw	35
 18440  1CF1  00C5               	movwf	___flmul@b+2
 18441  1CF2  3057               	movlw	87
 18442  1CF3  00C4               	movwf	___flmul@b+1
 18443  1CF4  301D               	movlw	29
 18444  1CF5  00C3               	movwf	___flmul@b
 18445  1CF6  0141               	movlb	1	; select bank1
 18446  1CF7  086A               	movf	calcRequiredPower@n^(0+128),w
 18447  1CF8  0140               	movlb	0	; select bank0
 18448  1CF9  00AF               	movwf	___wmul@multiplier
 18449  1CFA  301F               	movlw	31
 18450  1CFB  01B0               	clrf	___wmul@multiplier+1
 18451  1CFC  00B1               	movwf	___wmul@multiplicand
 18452  1CFD  01B2               	clrf	___wmul@multiplicand+1
 18453  1CFE  318A  2206  3198   	fcall	___wmul
 18454  1D01  3089               	movlw	137
 18455  1D02  0141               	movlb	1	; select bank1
 18456  1D03  00B0               	movwf	??_calcRequiredPower^(0+128)
 18457  1D04  3027               	movlw	39
 18458  1D05  00B1               	movwf	(??_calcRequiredPower^(0+128)+1)
 18459  1D06  0140               	movlb	0	; select bank0
 18460  1D07  082F               	movf	?___wmul,w
 18461  1D08  0141               	movlb	1	; select bank1
 18462  1D09  0730               	addwf	??_calcRequiredPower^(0+128),w
 18463  1D0A  0086               	movwf	6
 18464  1D0B  0140               	movlb	0	; select bank0
 18465  1D0C  0830               	movf	?___wmul+1,w
 18466  1D0D  0141               	movlb	1	; select bank1
 18467  1D0E  3D31               	addwfc	(??_calcRequiredPower+1)^(0+128),w
 18468  1D0F  0087               	movwf	7
 18469  1D10  3F40               	moviw [0]fsr1
 18470  1D11  0140               	movlb	0	; select bank0
 18471  1D12  00C7               	movwf	___flmul@a
 18472  1D13  3F41               	moviw [1]fsr1
 18473  1D14  00C8               	movwf	___flmul@a+1
 18474  1D15  3F42               	moviw [2]fsr1
 18475  1D16  00C9               	movwf	___flmul@a+2
 18476  1D17  3F43               	moviw [3]fsr1
 18477  1D18  00CA               	movwf	___flmul@a+3
 18478  1D19  2635  3198         	fcall	___flmul
 18479  1D1B  0846               	movf	?___flmul+3,w
 18480  1D1C  0141               	movlb	1	; select bank1
 18481  1D1D  00B5               	movwf	(calcRequiredPower@p+3)^(0+128)
 18482  1D1E  0140               	movlb	0	; select bank0
 18483  1D1F  0845               	movf	?___flmul+2,w
 18484  1D20  0141               	movlb	1	; select bank1
 18485  1D21  00B4               	movwf	(calcRequiredPower@p+2)^(0+128)
 18486  1D22  0140               	movlb	0	; select bank0
 18487  1D23  0844               	movf	?___flmul+1,w
 18488  1D24  0141               	movlb	1	; select bank1
 18489  1D25  00B3               	movwf	(calcRequiredPower@p+1)^(0+128)
 18490  1D26  0140               	movlb	0	; select bank0
 18491  1D27  0843               	movf	?___flmul,w
 18492  1D28  0141               	movlb	1	; select bank1
 18493  1D29  00B2               	movwf	calcRequiredPower@p^(0+128)
 18494                           
 18495                           ;system.c: 289:   A = p * 0.03;
 18496  1D2A  303C               	movlw	60
 18497  1D2B  0140               	movlb	0	; select bank0
 18498  1D2C  00C6               	movwf	___flmul@b+3
 18499  1D2D  30F5               	movlw	245
 18500  1D2E  00C5               	movwf	___flmul@b+2
 18501  1D2F  30C2               	movlw	194
 18502  1D30  00C4               	movwf	___flmul@b+1
 18503  1D31  308F               	movlw	143
 18504  1D32  00C3               	movwf	___flmul@b
 18505  1D33  0141               	movlb	1	; select bank1
 18506  1D34  0835               	movf	(calcRequiredPower@p+3)^(0+128),w
 18507  1D35  0140               	movlb	0	; select bank0
 18508  1D36  00CA               	movwf	___flmul@a+3
 18509  1D37  0141               	movlb	1	; select bank1
 18510  1D38  0834               	movf	(calcRequiredPower@p+2)^(0+128),w
 18511  1D39  0140               	movlb	0	; select bank0
 18512  1D3A  00C9               	movwf	___flmul@a+2
 18513  1D3B  0141               	movlb	1	; select bank1
 18514  1D3C  0833               	movf	(calcRequiredPower@p+1)^(0+128),w
 18515  1D3D  0140               	movlb	0	; select bank0
 18516  1D3E  00C8               	movwf	___flmul@a+1
 18517  1D3F  0141               	movlb	1	; select bank1
 18518  1D40  0832               	movf	calcRequiredPower@p^(0+128),w
 18519  1D41  0140               	movlb	0	; select bank0
 18520  1D42  00C7               	movwf	___flmul@a
 18521  1D43  2635               	fcall	___flmul
 18522  1D44  0846               	movf	?___flmul+3,w
 18523  1D45  0141               	movlb	1	; select bank1
 18524  1D46  00DD               	movwf	(calcRequiredPower@A+3)^(0+128)
 18525  1D47  0140               	movlb	0	; select bank0
 18526  1D48  0845               	movf	?___flmul+2,w
 18527  1D49  0141               	movlb	1	; select bank1
 18528  1D4A  00DC               	movwf	(calcRequiredPower@A+2)^(0+128)
 18529  1D4B  0140               	movlb	0	; select bank0
 18530  1D4C  0844               	movf	?___flmul+1,w
 18531  1D4D  0141               	movlb	1	; select bank1
 18532  1D4E  00DB               	movwf	(calcRequiredPower@A+1)^(0+128)
 18533  1D4F  0140               	movlb	0	; select bank0
 18534  1D50  0843               	movf	?___flmul,w
 18535  1D51  0141               	movlb	1	; select bank1
 18536  1D52  00DA               	movwf	calcRequiredPower@A^(0+128)
 18537                           
 18538                           ;system.c: 291:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 18539  1D53  303F               	movlw	63
 18540  1D54  0140               	movlb	0	; select bank0
 18541  1D55  00C6               	movwf	___flmul@b+3
 18542  1D56  3059               	movlw	89
 18543  1D57  00C5               	movwf	___flmul@b+2
 18544  1D58  3099               	movlw	153
 18545  1D59  00C4               	movwf	___flmul@b+1
 18546  1D5A  309A               	movlw	154
 18547  1D5B  00C3               	movwf	___flmul@b
 18548  1D5C  3040               	movlw	64
 18549  1D5D  00DF               	movwf	___fldiv@a+3
 18550  1D5E  01DE               	clrf	___fldiv@a+2
 18551  1D5F  01DD               	clrf	___fldiv@a+1
 18552  1D60  01DC               	clrf	___fldiv@a
 18553  1D61  0141               	movlb	1	; select bank1
 18554  1D62  086A               	movf	calcRequiredPower@n^(0+128),w
 18555  1D63  0140               	movlb	0	; select bank0
 18556  1D64  00AF               	movwf	___wmul@multiplier
 18557  1D65  301F               	movlw	31
 18558  1D66  01B0               	clrf	___wmul@multiplier+1
 18559  1D67  00B1               	movwf	___wmul@multiplicand
 18560  1D68  01B2               	clrf	___wmul@multiplicand+1
 18561  1D69  318A  2206  3198   	fcall	___wmul
 18562  1D6C  3089               	movlw	137
 18563  1D6D  0141               	movlb	1	; select bank1
 18564  1D6E  00B0               	movwf	??_calcRequiredPower^(0+128)
 18565  1D6F  3027               	movlw	39
 18566  1D70  00B1               	movwf	(??_calcRequiredPower^(0+128)+1)
 18567  1D71  0140               	movlb	0	; select bank0
 18568  1D72  082F               	movf	?___wmul,w
 18569  1D73  0141               	movlb	1	; select bank1
 18570  1D74  0730               	addwf	??_calcRequiredPower^(0+128),w
 18571  1D75  0086               	movwf	6
 18572  1D76  0140               	movlb	0	; select bank0
 18573  1D77  0830               	movf	?___wmul+1,w
 18574  1D78  0141               	movlb	1	; select bank1
 18575  1D79  3D31               	addwfc	(??_calcRequiredPower+1)^(0+128),w
 18576  1D7A  0087               	movwf	7
 18577  1D7B  3F40               	moviw [0]fsr1
 18578  1D7C  0140               	movlb	0	; select bank0
 18579  1D7D  00E0               	movwf	___fldiv@b
 18580  1D7E  3F41               	moviw [1]fsr1
 18581  1D7F  00E1               	movwf	___fldiv@b+1
 18582  1D80  3F42               	moviw [2]fsr1
 18583  1D81  00E2               	movwf	___fldiv@b+2
 18584  1D82  3F43               	moviw [3]fsr1
 18585  1D83  00E3               	movwf	___fldiv@b+3
 18586  1D84  31A5  25DA  3198   	fcall	___fldiv
 18587  1D87  085F               	movf	?___fldiv+3,w
 18588  1D88  00CA               	movwf	___flmul@a+3
 18589  1D89  085E               	movf	?___fldiv+2,w
 18590  1D8A  00C9               	movwf	___flmul@a+2
 18591  1D8B  085D               	movf	?___fldiv+1,w
 18592  1D8C  00C8               	movwf	___flmul@a+1
 18593  1D8D  085C               	movf	?___fldiv,w
 18594  1D8E  00C7               	movwf	___flmul@a
 18595  1D8F  2635  3198         	fcall	___flmul
 18596  1D91  0846               	movf	?___flmul+3,w
 18597  1D92  0141               	movlb	1	; select bank1
 18598  1D93  00E1               	movwf	(_calcRequiredPower$2762+3)^(0+128)
 18599  1D94  0140               	movlb	0	; select bank0
 18600  1D95  0845               	movf	?___flmul+2,w
 18601  1D96  0141               	movlb	1	; select bank1
 18602  1D97  00E0               	movwf	(_calcRequiredPower$2762+2)^(0+128)
 18603  1D98  0140               	movlb	0	; select bank0
 18604  1D99  0844               	movf	?___flmul+1,w
 18605  1D9A  0141               	movlb	1	; select bank1
 18606  1D9B  00DF               	movwf	(_calcRequiredPower$2762+1)^(0+128)
 18607  1D9C  0140               	movlb	0	; select bank0
 18608  1D9D  0843               	movf	?___flmul,w
 18609  1D9E  0141               	movlb	1	; select bank1
 18610  1D9F  00DE               	movwf	_calcRequiredPower$2762^(0+128)
 18611                           
 18612                           ;system.c: 291:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 18613  1DA0  085D               	movf	(calcRequiredPower@A+3)^(0+128),w
 18614  1DA1  0140               	movlb	0	; select bank0
 18615  1DA2  00C6               	movwf	___flmul@b+3
 18616  1DA3  0141               	movlb	1	; select bank1
 18617  1DA4  085C               	movf	(calcRequiredPower@A+2)^(0+128),w
 18618  1DA5  0140               	movlb	0	; select bank0
 18619  1DA6  00C5               	movwf	___flmul@b+2
 18620  1DA7  0141               	movlb	1	; select bank1
 18621  1DA8  085B               	movf	(calcRequiredPower@A+1)^(0+128),w
 18622  1DA9  0140               	movlb	0	; select bank0
 18623  1DAA  00C4               	movwf	___flmul@b+1
 18624  1DAB  0141               	movlb	1	; select bank1
 18625  1DAC  085A               	movf	calcRequiredPower@A^(0+128),w
 18626  1DAD  0140               	movlb	0	; select bank0
 18627  1DAE  00C3               	movwf	___flmul@b
 18628  1DAF  0141               	movlb	1	; select bank1
 18629  1DB0  0861               	movf	(_calcRequiredPower$2762+3)^(0+128),w
 18630  1DB1  0140               	movlb	0	; select bank0
 18631  1DB2  00CA               	movwf	___flmul@a+3
 18632  1DB3  0141               	movlb	1	; select bank1
 18633  1DB4  0860               	movf	(_calcRequiredPower$2762+2)^(0+128),w
 18634  1DB5  0140               	movlb	0	; select bank0
 18635  1DB6  00C9               	movwf	___flmul@a+2
 18636  1DB7  0141               	movlb	1	; select bank1
 18637  1DB8  085F               	movf	(_calcRequiredPower$2762+1)^(0+128),w
 18638  1DB9  0140               	movlb	0	; select bank0
 18639  1DBA  00C8               	movwf	___flmul@a+1
 18640  1DBB  0141               	movlb	1	; select bank1
 18641  1DBC  085E               	movf	_calcRequiredPower$2762^(0+128),w
 18642  1DBD  0140               	movlb	0	; select bank0
 18643  1DBE  00C7               	movwf	___flmul@a
 18644  1DBF  2635               	fcall	___flmul
 18645  1DC0  0846               	movf	?___flmul+3,w
 18646  1DC1  0141               	movlb	1	; select bank1
 18647  1DC2  00B9               	movwf	(calcRequiredPower@Rth+3)^(0+128)
 18648  1DC3  0140               	movlb	0	; select bank0
 18649  1DC4  0845               	movf	?___flmul+2,w
 18650  1DC5  0141               	movlb	1	; select bank1
 18651  1DC6  00B8               	movwf	(calcRequiredPower@Rth+2)^(0+128)
 18652  1DC7  0140               	movlb	0	; select bank0
 18653  1DC8  0844               	movf	?___flmul+1,w
 18654  1DC9  0141               	movlb	1	; select bank1
 18655  1DCA  00B7               	movwf	(calcRequiredPower@Rth+1)^(0+128)
 18656  1DCB  0140               	movlb	0	; select bank0
 18657  1DCC  0843               	movf	?___flmul,w
 18658  1DCD  0141               	movlb	1	; select bank1
 18659  1DCE  00B6               	movwf	calcRequiredPower@Rth^(0+128)
 18660                           
 18661                           ;system.c: 293:   data.heater[n].dt = phi * Rth - data.dewPointC;
 18662  1DCF  086A               	movf	calcRequiredPower@n^(0+128),w
 18663  1DD0  0140               	movlb	0	; select bank0
 18664  1DD1  00AF               	movwf	___wmul@multiplier
 18665  1DD2  301F               	movlw	31
 18666  1DD3  01B0               	clrf	___wmul@multiplier+1
 18667  1DD4  00B1               	movwf	___wmul@multiplicand
 18668  1DD5  01B2               	clrf	___wmul@multiplicand+1
 18669  1DD6  318A  2206  3198   	fcall	___wmul
 18670  1DD9  308D               	movlw	141
 18671  1DDA  0141               	movlb	1	; select bank1
 18672  1DDB  00B0               	movwf	??_calcRequiredPower^(0+128)
 18673  1DDC  3027               	movlw	39
 18674  1DDD  00B1               	movwf	(??_calcRequiredPower^(0+128)+1)
 18675  1DDE  0140               	movlb	0	; select bank0
 18676  1DDF  082F               	movf	?___wmul,w
 18677  1DE0  0141               	movlb	1	; select bank1
 18678  1DE1  0730               	addwf	??_calcRequiredPower^(0+128),w
 18679  1DE2  0086               	movwf	6
 18680  1DE3  0140               	movlb	0	; select bank0
 18681  1DE4  0830               	movf	?___wmul+1,w
 18682  1DE5  0141               	movlb	1	; select bank1
 18683  1DE6  3D31               	addwfc	(??_calcRequiredPower+1)^(0+128),w
 18684  1DE7  0087               	movwf	7
 18685  1DE8  304A               	movlw	74
 18686  1DE9  0084               	movwf	4
 18687  1DEA  3027               	movlw	39
 18688  1DEB  0085               	movwf	5
 18689  1DEC  3108               	addfsr 0,8
 18690  1DED  3F00               	moviw [0]fsr0
 18691  1DEE  00A8               	movwf	___flsub@a^(0+128)
 18692  1DEF  3F01               	moviw [1]fsr0
 18693  1DF0  00A9               	movwf	(___flsub@a+1)^(0+128)
 18694  1DF1  3F02               	moviw [2]fsr0
 18695  1DF2  00AA               	movwf	(___flsub@a+2)^(0+128)
 18696  1DF3  3F03               	moviw [3]fsr0
 18697  1DF4  00AB               	movwf	(___flsub@a+3)^(0+128)
 18698  1DF5  0839               	movf	(calcRequiredPower@Rth+3)^(0+128),w
 18699  1DF6  0140               	movlb	0	; select bank0
 18700  1DF7  00C6               	movwf	___flmul@b+3
 18701  1DF8  0141               	movlb	1	; select bank1
 18702  1DF9  0838               	movf	(calcRequiredPower@Rth+2)^(0+128),w
 18703  1DFA  0140               	movlb	0	; select bank0
 18704  1DFB  00C5               	movwf	___flmul@b+2
 18705  1DFC  0141               	movlb	1	; select bank1
 18706  1DFD  0837               	movf	(calcRequiredPower@Rth+1)^(0+128),w
 18707  1DFE  0140               	movlb	0	; select bank0
 18708  1DFF  00C4               	movwf	___flmul@b+1
 18709  1E00  0141               	movlb	1	; select bank1
 18710  1E01  0836               	movf	calcRequiredPower@Rth^(0+128),w
 18711  1E02  0140               	movlb	0	; select bank0
 18712  1E03  00C3               	movwf	___flmul@b
 18713  1E04  0141               	movlb	1	; select bank1
 18714  1E05  0859               	movf	(calcRequiredPower@phi+3)^(0+128),w
 18715  1E06  0140               	movlb	0	; select bank0
 18716  1E07  00CA               	movwf	___flmul@a+3
 18717  1E08  0141               	movlb	1	; select bank1
 18718  1E09  0858               	movf	(calcRequiredPower@phi+2)^(0+128),w
 18719  1E0A  0140               	movlb	0	; select bank0
 18720  1E0B  00C9               	movwf	___flmul@a+2
 18721  1E0C  0141               	movlb	1	; select bank1
 18722  1E0D  0857               	movf	(calcRequiredPower@phi+1)^(0+128),w
 18723  1E0E  0140               	movlb	0	; select bank0
 18724  1E0F  00C8               	movwf	___flmul@a+1
 18725  1E10  0141               	movlb	1	; select bank1
 18726  1E11  0856               	movf	calcRequiredPower@phi^(0+128),w
 18727  1E12  0140               	movlb	0	; select bank0
 18728  1E13  00C7               	movwf	___flmul@a
 18729  1E14  2635               	fcall	___flmul
 18730  1E15  0846               	movf	?___flmul+3,w
 18731  1E16  0141               	movlb	1	; select bank1
 18732  1E17  00AF               	movwf	(___flsub@b+3)^(0+128)
 18733  1E18  0140               	movlb	0	; select bank0
 18734  1E19  0845               	movf	?___flmul+2,w
 18735  1E1A  0141               	movlb	1	; select bank1
 18736  1E1B  00AE               	movwf	(___flsub@b+2)^(0+128)
 18737  1E1C  0140               	movlb	0	; select bank0
 18738  1E1D  0844               	movf	?___flmul+1,w
 18739  1E1E  0141               	movlb	1	; select bank1
 18740  1E1F  00AD               	movwf	(___flsub@b+1)^(0+128)
 18741  1E20  0140               	movlb	0	; select bank0
 18742  1E21  0843               	movf	?___flmul,w
 18743  1E22  0141               	movlb	1	; select bank1
 18744  1E23  00AC               	movwf	___flsub@b^(0+128)
 18745  1E24  318F  2782  3198   	fcall	___flsub
 18746  1E27  0828               	movf	?___flsub^(0+128),w
 18747  1E28  3FC0               	movwi [0]fsr1
 18748  1E29  0829               	movf	(?___flsub+1)^(0+128),w
 18749  1E2A  3FC1               	movwi [1]fsr1
 18750  1E2B  082A               	movf	(?___flsub+2)^(0+128),w
 18751  1E2C  3FC2               	movwi [2]fsr1
 18752  1E2D  082B               	movf	(?___flsub+3)^(0+128),w
 18753  1E2E  3FC3               	movwi [3]fsr1
 18754  1E2F  3004               	movlw	4
 18755                           
 18756                           ;system.c: 294:  }
 18757  1E30  0AEA               	incf	calcRequiredPower@n^(0+128),f
 18758  1E31  026A               	subwf	calcRequiredPower@n^(0+128),w
 18759  1E32  1803               	btfsc	3,0
 18760  1E33  0008               	return
 18761  1E34  2A06               	goto	l8298
 18762  1E35                     __end_of_calcRequiredPower:	
 18763  1E35                     __ptext62:	
 18764 ;; *************** function ___flmul *****************
 18765 ;; Defined at:
 18766 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 18767 ;; Parameters:    Size  Location     Type
 18768 ;;  b               4   35[BANK0 ] unsigned char 
 18769 ;;  a               4   39[BANK0 ] unsigned char 
 18770 ;; Auto vars:     Size  Location     Type
 18771 ;;  prod            4   54[BANK0 ] struct .
 18772 ;;  grs             4   49[BANK0 ] unsigned long 
 18773 ;;  temp            2   58[BANK0 ] struct .
 18774 ;;  bexp            1   53[BANK0 ] unsigned char 
 18775 ;;  aexp            1   48[BANK0 ] unsigned char 
 18776 ;;  sign            1   47[BANK0 ] unsigned char 
 18777 ;; Return value:  Size  Location     Type
 18778 ;;                  4   35[BANK0 ] unsigned char 
 18779 ;; Registers used:
 18780 ;;		wreg, status,2, status,0, pclath, cstack
 18781 ;; Tracked objects:
 18782 ;;		On entry : 3F/0
 18783 ;;		On exit  : 3F/0
 18784 ;;		Unchanged: 0/0
 18785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18786 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18787 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18788 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18789 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18790 ;;Total ram usage:       25 bytes
 18791 ;; Hardware stack levels used:    1
 18792 ;; Hardware stack levels required when called:    4
 18793 ;; This function calls:
 18794 ;;		__Umul8_16
 18795 ;; This function is called by:
 18796 ;;		_checkChannelStatus
 18797 ;;		_systemCheck
 18798 ;;		_calcRequiredPower
 18799 ;;		_getAnalogValues
 18800 ;;		_channelThing
 18801 ;;		_ftoa
 18802 ;; This function uses a non-reentrant model
 18803 ;;
 18804                           
 18805                           
 18806                           ;psect for function ___flmul
 18807  1E35                     ___flmul:	
 18808                           
 18809                           ;incstack = 0
 18810                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 18811  1E35  0846               	movf	___flmul@b+3,w
 18812  1E36  00CF               	movwf	___flmul@sign
 18813  1E37  3080               	movlw	128
 18814  1E38  05CF               	andwf	___flmul@sign,f
 18815  1E39  3546               	lslf	___flmul@b+3,w
 18816  1E3A  00D5               	movwf	___flmul@bexp
 18817  1E3B  1BC5               	btfsc	___flmul@b+2,7
 18818  1E3C  1455               	bsf	___flmul@bexp,0
 18819  1E3D  0855               	movf	___flmul@bexp,w
 18820  1E3E  1903               	btfsc	3,2
 18821  1E3F  2E48               	goto	l1498
 18822  1E40  0F55               	incfsz	___flmul@bexp,w
 18823  1E41  2E46               	goto	l1499
 18824  1E42  01C3               	clrf	___flmul@b
 18825  1E43  01C4               	clrf	___flmul@b+1
 18826  1E44  01C5               	clrf	___flmul@b+2
 18827  1E45  01C6               	clrf	___flmul@b+3
 18828  1E46                     l1499:	
 18829  1E46  17C5               	bsf	___flmul@b+2,7
 18830  1E47  2E4C               	goto	l5082
 18831  1E48                     l1498:	
 18832  1E48  01C3               	clrf	___flmul@b
 18833  1E49  01C4               	clrf	___flmul@b+1
 18834  1E4A  01C5               	clrf	___flmul@b+2
 18835  1E4B  01C6               	clrf	___flmul@b+3
 18836  1E4C                     l5082:	
 18837  1E4C  084A               	movf	___flmul@a+3,w
 18838  1E4D  3980               	andlw	128
 18839  1E4E  06CF               	xorwf	___flmul@sign,f
 18840  1E4F  354A               	lslf	___flmul@a+3,w
 18841  1E50  00D0               	movwf	___flmul@aexp
 18842  1E51  1BC9               	btfsc	___flmul@a+2,7
 18843  1E52  1450               	bsf	___flmul@aexp,0
 18844  1E53  0850               	movf	___flmul@aexp,w
 18845  1E54  1903               	btfsc	3,2
 18846  1E55  2E5E               	goto	l1502
 18847  1E56  0F50               	incfsz	___flmul@aexp,w
 18848  1E57  2E5C               	goto	l1503
 18849  1E58  01C7               	clrf	___flmul@a
 18850  1E59  01C8               	clrf	___flmul@a+1
 18851  1E5A  01C9               	clrf	___flmul@a+2
 18852  1E5B  01CA               	clrf	___flmul@a+3
 18853  1E5C                     l1503:	
 18854  1E5C  17C9               	bsf	___flmul@a+2,7
 18855  1E5D  2E62               	goto	l5094
 18856  1E5E                     l1502:	
 18857  1E5E  01C7               	clrf	___flmul@a
 18858  1E5F  01C8               	clrf	___flmul@a+1
 18859  1E60  01C9               	clrf	___flmul@a+2
 18860  1E61  01CA               	clrf	___flmul@a+3
 18861  1E62                     l5094:	
 18862  1E62  0850               	movf	___flmul@aexp,w
 18863  1E63  1D03               	btfss	3,2
 18864  1E64  0855               	movf	___flmul@bexp,w
 18865  1E65  1D03               	btfss	3,2
 18866  1E66  2E6C               	goto	l5098
 18867  1E67  01C3               	clrf	?___flmul
 18868  1E68  01C4               	clrf	?___flmul+1
 18869  1E69  01C5               	clrf	?___flmul+2
 18870  1E6A  01C6               	clrf	?___flmul+3
 18871  1E6B  0008               	return
 18872  1E6C                     l5098:	
 18873  1E6C  0843               	movf	___flmul@b,w
 18874  1E6D  00A4               	movwf	__Umul8_16@multiplicand
 18875  1E6E  0849               	movf	___flmul@a+2,w
 18876  1E6F  27B7  3198         	fcall	__Umul8_16
 18877  1E71  0825               	movf	?__Umul8_16+1,w
 18878  1E72  00DB               	movwf	___flmul@temp+1
 18879  1E73  0824               	movf	?__Umul8_16,w
 18880  1E74  00DA               	movwf	___flmul@temp
 18881  1E75  00D1               	movwf	___flmul@grs
 18882  1E76  01D2               	clrf	___flmul@grs+1
 18883  1E77  01D3               	clrf	___flmul@grs+2
 18884  1E78  01D4               	clrf	___flmul@grs+3
 18885  1E79  085B               	movf	___flmul@temp+1,w
 18886  1E7A  00D6               	movwf	___flmul@prod
 18887  1E7B  01D7               	clrf	___flmul@prod+1
 18888  1E7C  01D8               	clrf	___flmul@prod+2
 18889  1E7D  01D9               	clrf	___flmul@prod+3
 18890  1E7E  0844               	movf	___flmul@b+1,w
 18891  1E7F  00A4               	movwf	__Umul8_16@multiplicand
 18892  1E80  0848               	movf	___flmul@a+1,w
 18893  1E81  27B7  3198         	fcall	__Umul8_16
 18894  1E83  0825               	movf	?__Umul8_16+1,w
 18895  1E84  00DB               	movwf	___flmul@temp+1
 18896  1E85  0824               	movf	?__Umul8_16,w
 18897  1E86  00DA               	movwf	___flmul@temp
 18898  1E87  07D1               	addwf	___flmul@grs,f
 18899  1E88  3001               	movlw	1
 18900  1E89  1803               	skipnc
 18901  1E8A  07D2               	addwf	___flmul@grs+1,f
 18902  1E8B  1803               	skipnc
 18903  1E8C  07D3               	addwf	___flmul@grs+2,f
 18904  1E8D  1803               	skipnc
 18905  1E8E  07D4               	addwf	___flmul@grs+3,f
 18906  1E8F  085B               	movf	___flmul@temp+1,w
 18907  1E90  07D6               	addwf	___flmul@prod,f
 18908  1E91  3001               	movlw	1
 18909  1E92  1803               	skipnc
 18910  1E93  07D7               	addwf	___flmul@prod+1,f
 18911  1E94  1803               	skipnc
 18912  1E95  07D8               	addwf	___flmul@prod+2,f
 18913  1E96  1803               	skipnc
 18914  1E97  07D9               	addwf	___flmul@prod+3,f
 18915  1E98  0845               	movf	___flmul@b+2,w
 18916  1E99  00A4               	movwf	__Umul8_16@multiplicand
 18917  1E9A  0847               	movf	___flmul@a,w
 18918  1E9B  27B7  3198         	fcall	__Umul8_16
 18919  1E9D  0825               	movf	?__Umul8_16+1,w
 18920  1E9E  00DB               	movwf	___flmul@temp+1
 18921  1E9F  0824               	movf	?__Umul8_16,w
 18922  1EA0  00DA               	movwf	___flmul@temp
 18923  1EA1  07D1               	addwf	___flmul@grs,f
 18924  1EA2  3001               	movlw	1
 18925  1EA3  1803               	skipnc
 18926  1EA4  07D2               	addwf	___flmul@grs+1,f
 18927  1EA5  1803               	skipnc
 18928  1EA6  07D3               	addwf	___flmul@grs+2,f
 18929  1EA7  1803               	skipnc
 18930  1EA8  07D4               	addwf	___flmul@grs+3,f
 18931  1EA9  085B               	movf	___flmul@temp+1,w
 18932  1EAA  07D6               	addwf	___flmul@prod,f
 18933  1EAB  3001               	movlw	1
 18934  1EAC  1803               	skipnc
 18935  1EAD  07D7               	addwf	___flmul@prod+1,f
 18936  1EAE  1803               	skipnc
 18937  1EAF  07D8               	addwf	___flmul@prod+2,f
 18938  1EB0  1803               	skipnc
 18939  1EB1  07D9               	addwf	___flmul@prod+3,f
 18940  1EB2  0853               	movf	___flmul@grs+2,w
 18941  1EB3  00D4               	movwf	___flmul@grs+3
 18942  1EB4  0852               	movf	___flmul@grs+1,w
 18943  1EB5  00D3               	movwf	___flmul@grs+2
 18944  1EB6  0851               	movf	___flmul@grs,w
 18945  1EB7  00D2               	movwf	___flmul@grs+1
 18946  1EB8  01D1               	clrf	___flmul@grs
 18947  1EB9  0844               	movf	___flmul@b+1,w
 18948  1EBA  00A4               	movwf	__Umul8_16@multiplicand
 18949  1EBB  0847               	movf	___flmul@a,w
 18950  1EBC  27B7  3198         	fcall	__Umul8_16
 18951  1EBE  0825               	movf	?__Umul8_16+1,w
 18952  1EBF  00DB               	movwf	___flmul@temp+1
 18953  1EC0  0824               	movf	?__Umul8_16,w
 18954  1EC1  00DA               	movwf	___flmul@temp
 18955  1EC2  07D1               	addwf	___flmul@grs,f
 18956  1EC3  085B               	movf	___flmul@temp+1,w
 18957  1EC4  3DD2               	addwfc	___flmul@grs+1,f
 18958  1EC5  3000               	movlw	0
 18959  1EC6  3DD3               	addwfc	___flmul@grs+2,f
 18960  1EC7  3DD4               	addwfc	___flmul@grs+3,f
 18961  1EC8  0843               	movf	___flmul@b,w
 18962  1EC9  00A4               	movwf	__Umul8_16@multiplicand
 18963  1ECA  0848               	movf	___flmul@a+1,w
 18964  1ECB  27B7  3198         	fcall	__Umul8_16
 18965  1ECD  0825               	movf	?__Umul8_16+1,w
 18966  1ECE  00DB               	movwf	___flmul@temp+1
 18967  1ECF  0824               	movf	?__Umul8_16,w
 18968  1ED0  00DA               	movwf	___flmul@temp
 18969  1ED1  07D1               	addwf	___flmul@grs,f
 18970  1ED2  085B               	movf	___flmul@temp+1,w
 18971  1ED3  3DD2               	addwfc	___flmul@grs+1,f
 18972  1ED4  3000               	movlw	0
 18973  1ED5  3DD3               	addwfc	___flmul@grs+2,f
 18974  1ED6  3DD4               	addwfc	___flmul@grs+3,f
 18975  1ED7  0853               	movf	___flmul@grs+2,w
 18976  1ED8  00D4               	movwf	___flmul@grs+3
 18977  1ED9  0852               	movf	___flmul@grs+1,w
 18978  1EDA  00D3               	movwf	___flmul@grs+2
 18979  1EDB  0851               	movf	___flmul@grs,w
 18980  1EDC  00D2               	movwf	___flmul@grs+1
 18981  1EDD  01D1               	clrf	___flmul@grs
 18982  1EDE  0843               	movf	___flmul@b,w
 18983  1EDF  00A4               	movwf	__Umul8_16@multiplicand
 18984  1EE0  0847               	movf	___flmul@a,w
 18985  1EE1  27B7  3198         	fcall	__Umul8_16
 18986  1EE3  0825               	movf	?__Umul8_16+1,w
 18987  1EE4  00DB               	movwf	___flmul@temp+1
 18988  1EE5  0824               	movf	?__Umul8_16,w
 18989  1EE6  00DA               	movwf	___flmul@temp
 18990  1EE7  07D1               	addwf	___flmul@grs,f
 18991  1EE8  085B               	movf	___flmul@temp+1,w
 18992  1EE9  3DD2               	addwfc	___flmul@grs+1,f
 18993  1EEA  3000               	movlw	0
 18994  1EEB  3DD3               	addwfc	___flmul@grs+2,f
 18995  1EEC  3DD4               	addwfc	___flmul@grs+3,f
 18996  1EED  0844               	movf	___flmul@b+1,w
 18997  1EEE  00A4               	movwf	__Umul8_16@multiplicand
 18998  1EEF  0849               	movf	___flmul@a+2,w
 18999  1EF0  27B7  3198         	fcall	__Umul8_16
 19000  1EF2  0825               	movf	?__Umul8_16+1,w
 19001  1EF3  00DB               	movwf	___flmul@temp+1
 19002  1EF4  0824               	movf	?__Umul8_16,w
 19003  1EF5  00DA               	movwf	___flmul@temp
 19004  1EF6  07D6               	addwf	___flmul@prod,f
 19005  1EF7  085B               	movf	___flmul@temp+1,w
 19006  1EF8  3DD7               	addwfc	___flmul@prod+1,f
 19007  1EF9  3000               	movlw	0
 19008  1EFA  3DD8               	addwfc	___flmul@prod+2,f
 19009  1EFB  3DD9               	addwfc	___flmul@prod+3,f
 19010  1EFC  0845               	movf	___flmul@b+2,w
 19011  1EFD  00A4               	movwf	__Umul8_16@multiplicand
 19012  1EFE  0848               	movf	___flmul@a+1,w
 19013  1EFF  27B7  3198         	fcall	__Umul8_16
 19014  1F01  0825               	movf	?__Umul8_16+1,w
 19015  1F02  00DB               	movwf	___flmul@temp+1
 19016  1F03  0824               	movf	?__Umul8_16,w
 19017  1F04  00DA               	movwf	___flmul@temp
 19018  1F05  07D6               	addwf	___flmul@prod,f
 19019  1F06  085B               	movf	___flmul@temp+1,w
 19020  1F07  3DD7               	addwfc	___flmul@prod+1,f
 19021  1F08  3000               	movlw	0
 19022  1F09  3DD8               	addwfc	___flmul@prod+2,f
 19023  1F0A  3DD9               	addwfc	___flmul@prod+3,f
 19024  1F0B  0845               	movf	___flmul@b+2,w
 19025  1F0C  00A4               	movwf	__Umul8_16@multiplicand
 19026  1F0D  0849               	movf	___flmul@a+2,w
 19027  1F0E  27B7  3198         	fcall	__Umul8_16
 19028  1F10  0825               	movf	?__Umul8_16+1,w
 19029  1F11  00DB               	movwf	___flmul@temp+1
 19030  1F12  0824               	movf	?__Umul8_16,w
 19031  1F13  00DA               	movwf	___flmul@temp
 19032  1F14  00CB               	movwf	??___flmul
 19033  1F15  085B               	movf	___flmul@temp+1,w
 19034  1F16  00CC               	movwf	??___flmul+1
 19035  1F17  01CD               	clrf	??___flmul+2
 19036  1F18  01CE               	clrf	??___flmul+3
 19037  1F19  084D               	movf	??___flmul+2,w
 19038  1F1A  00CE               	movwf	??___flmul+3
 19039  1F1B  084C               	movf	??___flmul+1,w
 19040  1F1C  00CD               	movwf	??___flmul+2
 19041  1F1D  084B               	movf	??___flmul,w
 19042  1F1E  00CC               	movwf	??___flmul+1
 19043  1F1F  01CB               	clrf	??___flmul
 19044  1F20  084B               	movf	??___flmul,w
 19045  1F21  07D6               	addwf	___flmul@prod,f
 19046  1F22  084C               	movf	??___flmul+1,w
 19047  1F23  3DD7               	addwfc	___flmul@prod+1,f
 19048  1F24  084D               	movf	??___flmul+2,w
 19049  1F25  3DD8               	addwfc	___flmul@prod+2,f
 19050  1F26  084E               	movf	??___flmul+3,w
 19051  1F27  3DD9               	addwfc	___flmul@prod+3,f
 19052  1F28  0854               	movf	___flmul@grs+3,w
 19053  1F29  07D6               	addwf	___flmul@prod,f
 19054  1F2A  3001               	movlw	1
 19055  1F2B  1803               	skipnc
 19056  1F2C  07D7               	addwf	___flmul@prod+1,f
 19057  1F2D  1803               	skipnc
 19058  1F2E  07D8               	addwf	___flmul@prod+2,f
 19059  1F2F  1803               	skipnc
 19060  1F30  07D9               	addwf	___flmul@prod+3,f
 19061  1F31  0853               	movf	___flmul@grs+2,w
 19062  1F32  00D4               	movwf	___flmul@grs+3
 19063  1F33  0852               	movf	___flmul@grs+1,w
 19064  1F34  00D3               	movwf	___flmul@grs+2
 19065  1F35  0851               	movf	___flmul@grs,w
 19066  1F36  00D2               	movwf	___flmul@grs+1
 19067  1F37  01D1               	clrf	___flmul@grs
 19068  1F38  0855               	movf	___flmul@bexp,w
 19069  1F39  00DA               	movwf	___flmul@temp
 19070  1F3A  01DB               	clrf	___flmul@temp+1
 19071  1F3B  0850               	movf	___flmul@aexp,w
 19072  1F3C  07DA               	addwf	___flmul@temp,f
 19073  1F3D  1803               	skipnc
 19074  1F3E  0ADB               	incf	___flmul@temp+1,f
 19075  1F3F  3082               	movlw	-126
 19076  1F40                     L29:	
 19077  1F40  07DA               	addwf	___flmul@temp,f
 19078  1F41  1C03               	skipc
 19079  1F42  03DB               	decf	___flmul@temp+1,f
 19080  1F43  1BD8               	btfsc	___flmul@prod+2,7
 19081  1F44  2F51               	goto	l5146
 19082  1F45  35D6               	lslf	___flmul@prod,f
 19083  1F46  0DD7               	rlf	___flmul@prod+1,f
 19084  1F47  0DD8               	rlf	___flmul@prod+2,f
 19085  1F48  0DD9               	rlf	___flmul@prod+3,f
 19086  1F49  1BD4               	btfsc	___flmul@grs+3,7
 19087  1F4A  1456               	bsf	___flmul@prod,0
 19088  1F4B  30FF               	movlw	-1
 19089  1F4C  35D1               	lslf	___flmul@grs,f
 19090  1F4D  0DD2               	rlf	___flmul@grs+1,f
 19091  1F4E  0DD3               	rlf	___flmul@grs+2,f
 19092  1F4F  0DD4               	rlf	___flmul@grs+3,f
 19093  1F50  2F40               	goto	L29
 19094  1F51                     l5146:	
 19095  1F51  01D0               	clrf	___flmul@aexp
 19096  1F52  1FD4               	btfss	___flmul@grs+3,7
 19097  1F53  2F66               	goto	l5156
 19098  1F54  0851               	movf	___flmul@grs,w
 19099  1F55  00CB               	movwf	??___flmul
 19100  1F56  0852               	movf	___flmul@grs+1,w
 19101  1F57  00CC               	movwf	??___flmul+1
 19102  1F58  0853               	movf	___flmul@grs+2,w
 19103  1F59  00CD               	movwf	??___flmul+2
 19104  1F5A  307F               	movlw	127
 19105  1F5B  0554               	andwf	___flmul@grs+3,w
 19106  1F5C  00CE               	movwf	??___flmul+3
 19107  1F5D  044D               	iorwf	??___flmul+2,w
 19108  1F5E  044C               	iorwf	??___flmul+1,w
 19109  1F5F  044B               	iorwf	??___flmul,w
 19110  1F60  1903               	skipnz
 19111  1F61  1856               	btfsc	___flmul@prod,0
 19112  1F62  2F64               	goto	l5152
 19113  1F63  2F66               	goto	l5156
 19114  1F64                     l5152:	
 19115  1F64  01D0               	clrf	___flmul@aexp
 19116  1F65  0AD0               	incf	___flmul@aexp,f
 19117  1F66                     l5156:	
 19118  1F66  0850               	movf	___flmul@aexp,w
 19119  1F67  1903               	btfsc	3,2
 19120  1F68  2F78               	goto	l5166
 19121  1F69  3001               	movlw	1
 19122  1F6A  07D6               	addwf	___flmul@prod,f
 19123  1F6B  3000               	movlw	0
 19124  1F6C  3DD7               	addwfc	___flmul@prod+1,f
 19125  1F6D  3DD8               	addwfc	___flmul@prod+2,f
 19126  1F6E  3DD9               	addwfc	___flmul@prod+3,f
 19127  1F6F  1C59               	btfss	___flmul@prod+3,0
 19128  1F70  2F78               	goto	l5166
 19129  1F71  37D9               	asrf	___flmul@prod+3,f
 19130  1F72  0CD8               	rrf	___flmul@prod+2,f
 19131  1F73  0CD7               	rrf	___flmul@prod+1,f
 19132  1F74  0CD6               	rrf	___flmul@prod,f
 19133  1F75  0ADA               	incf	___flmul@temp,f
 19134  1F76  1903               	skipnz
 19135  1F77  0ADB               	incf	___flmul@temp+1,f
 19136  1F78                     l5166:	
 19137  1F78  085B               	movf	___flmul@temp+1,w
 19138  1F79  3A80               	xorlw	128
 19139  1F7A  00CB               	movwf	??___flmul
 19140  1F7B  3080               	movlw	128
 19141  1F7C  024B               	subwf	??___flmul,w
 19142  1F7D  1D03               	skipz
 19143  1F7E  2F81               	goto	u4765
 19144  1F7F  30FF               	movlw	255
 19145  1F80  025A               	subwf	___flmul@temp,w
 19146  1F81                     u4765:	
 19147  1F81  1C03               	skipc
 19148  1F82  2F8B               	goto	l5170
 19149  1F83  307F               	movlw	127
 19150  1F84  0140               	movlb	0	; select bank0
 19151  1F85  00D9               	movwf	___flmul@prod+3
 19152  1F86  3080               	movlw	128
 19153  1F87  00D8               	movwf	___flmul@prod+2
 19154  1F88  01D7               	clrf	___flmul@prod+1
 19155  1F89  01D6               	clrf	___flmul@prod
 19156  1F8A  2FAC               	goto	l1520
 19157  1F8B                     l5170:	
 19158  1F8B  0140               	movlb	0	; select bank0
 19159  1F8C  085B               	movf	___flmul@temp+1,w
 19160  1F8D  3A80               	xorlw	128
 19161  1F8E  00CB               	movwf	??___flmul
 19162  1F8F  3080               	movlw	128
 19163  1F90  024B               	subwf	??___flmul,w
 19164  1F91  1D03               	skipz
 19165  1F92  2F95               	goto	u4775
 19166  1F93  3001               	movlw	1
 19167  1F94  025A               	subwf	___flmul@temp,w
 19168  1F95                     u4775:	
 19169  1F95  1803               	skipnc
 19170  1F96  2F9E               	goto	l5176
 19171  1F97  0140               	movlb	0	; select bank0
 19172  1F98  01D6               	clrf	___flmul@prod
 19173  1F99  01D7               	clrf	___flmul@prod+1
 19174  1F9A  01D8               	clrf	___flmul@prod+2
 19175  1F9B  01D9               	clrf	___flmul@prod+3
 19176  1F9C  01CF               	clrf	___flmul@sign
 19177  1F9D  2FAC               	goto	l1520
 19178  1F9E                     l5176:	
 19179  1F9E  0140               	movlb	0	; select bank0
 19180  1F9F  085A               	movf	___flmul@temp,w
 19181  1FA0  00D5               	movwf	___flmul@bexp
 19182  1FA1  30FF               	movlw	255
 19183  1FA2  05D6               	andwf	___flmul@prod,f
 19184  1FA3  05D7               	andwf	___flmul@prod+1,f
 19185  1FA4  307F               	movlw	127
 19186  1FA5  05D8               	andwf	___flmul@prod+2,f
 19187  1FA6  3000               	movlw	0
 19188  1FA7  01D9               	clrf	___flmul@prod+3
 19189  1FA8  1855               	btfsc	___flmul@bexp,0
 19190  1FA9  17D8               	bsf	___flmul@prod+2,7
 19191  1FAA  3655               	lsrf	___flmul@bexp,w
 19192  1FAB  00D9               	movwf	___flmul@prod+3
 19193  1FAC                     l1520:	
 19194  1FAC  084F               	movf	___flmul@sign,w
 19195  1FAD  04D9               	iorwf	___flmul@prod+3,f
 19196  1FAE  0859               	movf	___flmul@prod+3,w
 19197  1FAF  00C6               	movwf	?___flmul+3
 19198  1FB0  0858               	movf	___flmul@prod+2,w
 19199  1FB1  00C5               	movwf	?___flmul+2
 19200  1FB2  0857               	movf	___flmul@prod+1,w
 19201  1FB3  00C4               	movwf	?___flmul+1
 19202  1FB4  0856               	movf	___flmul@prod,w
 19203  1FB5  00C3               	movwf	?___flmul
 19204  1FB6  0008               	return
 19205  1FB7                     __end_of___flmul:	
 19206  1FB7                     __ptext63:	
 19207 ;; *************** function __Umul8_16 *****************
 19208 ;; Defined at:
 19209 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 19210 ;; Parameters:    Size  Location     Type
 19211 ;;  multiplier      1    wreg     unsigned char 
 19212 ;;  multiplicand    1    4[BANK0 ] unsigned char 
 19213 ;; Auto vars:     Size  Location     Type
 19214 ;;  multiplier      1    9[BANK0 ] unsigned char 
 19215 ;;  word_mpld       2   10[BANK0 ] unsigned int 
 19216 ;;  product         2    7[BANK0 ] unsigned int 
 19217 ;; Return value:  Size  Location     Type
 19218 ;;                  2    4[BANK0 ] unsigned int 
 19219 ;; Registers used:
 19220 ;;		wreg, status,2, status,0
 19221 ;; Tracked objects:
 19222 ;;		On entry : 3F/0
 19223 ;;		On exit  : 3F/0
 19224 ;;		Unchanged: 0/0
 19225 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19226 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19227 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19228 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19229 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19230 ;;Total ram usage:        8 bytes
 19231 ;; Hardware stack levels used:    1
 19232 ;; Hardware stack levels required when called:    3
 19233 ;; This function calls:
 19234 ;;		Nothing
 19235 ;; This function is called by:
 19236 ;;		___flmul
 19237 ;; This function uses a non-reentrant model
 19238 ;;
 19239                           
 19240                           
 19241                           ;psect for function __Umul8_16
 19242  1FB7                     __Umul8_16:	
 19243                           
 19244                           ;incstack = 0
 19245                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 19246                           ;__Umul8_16@multiplier stored from wreg
 19247  1FB7  00A9               	movwf	__Umul8_16@multiplier
 19248  1FB8  01A7               	clrf	__Umul8_16@product
 19249  1FB9  01A8               	clrf	__Umul8_16@product+1
 19250  1FBA  0824               	movf	__Umul8_16@multiplicand,w
 19251  1FBB  00AA               	movwf	__Umul8_16@word_mpld
 19252  1FBC  01AB               	clrf	__Umul8_16@word_mpld+1
 19253  1FBD  1C29               	btfss	__Umul8_16@multiplier,0
 19254  1FBE  2FC3               	goto	l4654
 19255  1FBF  082A               	movf	__Umul8_16@word_mpld,w
 19256  1FC0  07A7               	addwf	__Umul8_16@product,f
 19257  1FC1  082B               	movf	__Umul8_16@word_mpld+1,w
 19258  1FC2  3DA8               	addwfc	__Umul8_16@product+1,f
 19259  1FC3                     l4654:	
 19260  1FC3  35AA               	lslf	__Umul8_16@word_mpld,f
 19261  1FC4  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 19262  1FC5  1CA9               	btfss	__Umul8_16@multiplier,1
 19263  1FC6  2FCB               	goto	l4660
 19264  1FC7  082A               	movf	__Umul8_16@word_mpld,w
 19265  1FC8  07A7               	addwf	__Umul8_16@product,f
 19266  1FC9  082B               	movf	__Umul8_16@word_mpld+1,w
 19267  1FCA  3DA8               	addwfc	__Umul8_16@product+1,f
 19268  1FCB                     l4660:	
 19269  1FCB  35AA               	lslf	__Umul8_16@word_mpld,f
 19270  1FCC  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 19271  1FCD  1D29               	btfss	__Umul8_16@multiplier,2
 19272  1FCE  2FD3               	goto	l4666
 19273  1FCF  082A               	movf	__Umul8_16@word_mpld,w
 19274  1FD0  07A7               	addwf	__Umul8_16@product,f
 19275  1FD1  082B               	movf	__Umul8_16@word_mpld+1,w
 19276  1FD2  3DA8               	addwfc	__Umul8_16@product+1,f
 19277  1FD3                     l4666:	
 19278  1FD3  35AA               	lslf	__Umul8_16@word_mpld,f
 19279  1FD4  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 19280  1FD5  1DA9               	btfss	__Umul8_16@multiplier,3
 19281  1FD6  2FDB               	goto	l4672
 19282  1FD7  082A               	movf	__Umul8_16@word_mpld,w
 19283  1FD8  07A7               	addwf	__Umul8_16@product,f
 19284  1FD9  082B               	movf	__Umul8_16@word_mpld+1,w
 19285  1FDA  3DA8               	addwfc	__Umul8_16@product+1,f
 19286  1FDB                     l4672:	
 19287  1FDB  35AA               	lslf	__Umul8_16@word_mpld,f
 19288  1FDC  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 19289  1FDD  1E29               	btfss	__Umul8_16@multiplier,4
 19290  1FDE  2FE3               	goto	l4678
 19291  1FDF  082A               	movf	__Umul8_16@word_mpld,w
 19292  1FE0  07A7               	addwf	__Umul8_16@product,f
 19293  1FE1  082B               	movf	__Umul8_16@word_mpld+1,w
 19294  1FE2  3DA8               	addwfc	__Umul8_16@product+1,f
 19295  1FE3                     l4678:	
 19296  1FE3  35AA               	lslf	__Umul8_16@word_mpld,f
 19297  1FE4  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 19298  1FE5  1EA9               	btfss	__Umul8_16@multiplier,5
 19299  1FE6  2FEB               	goto	l4684
 19300  1FE7  082A               	movf	__Umul8_16@word_mpld,w
 19301  1FE8  07A7               	addwf	__Umul8_16@product,f
 19302  1FE9  082B               	movf	__Umul8_16@word_mpld+1,w
 19303  1FEA  3DA8               	addwfc	__Umul8_16@product+1,f
 19304  1FEB                     l4684:	
 19305  1FEB  35AA               	lslf	__Umul8_16@word_mpld,f
 19306  1FEC  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 19307  1FED  1F29               	btfss	__Umul8_16@multiplier,6
 19308  1FEE  2FF3               	goto	l4690
 19309  1FEF  082A               	movf	__Umul8_16@word_mpld,w
 19310  1FF0  07A7               	addwf	__Umul8_16@product,f
 19311  1FF1  082B               	movf	__Umul8_16@word_mpld+1,w
 19312  1FF2  3DA8               	addwfc	__Umul8_16@product+1,f
 19313  1FF3                     l4690:	
 19314  1FF3  35AA               	lslf	__Umul8_16@word_mpld,f
 19315  1FF4  0DAB               	rlf	__Umul8_16@word_mpld+1,f
 19316  1FF5  1FA9               	btfss	__Umul8_16@multiplier,7
 19317  1FF6  2FFB               	goto	l1607
 19318  1FF7  082A               	movf	__Umul8_16@word_mpld,w
 19319  1FF8  07A7               	addwf	__Umul8_16@product,f
 19320  1FF9  082B               	movf	__Umul8_16@word_mpld+1,w
 19321  1FFA  3DA8               	addwfc	__Umul8_16@product+1,f
 19322  1FFB                     l1607:	
 19323  1FFB  0828               	movf	__Umul8_16@product+1,w
 19324  1FFC  00A5               	movwf	?__Umul8_16+1
 19325  1FFD  0827               	movf	__Umul8_16@product,w
 19326  1FFE  00A4               	movwf	?__Umul8_16
 19327  1FFF  0008               	return
 19328  2000                     __end_of__Umul8_16:	
 19329                           
 19330                           	psect	text38
 19331  20C0                     __ptext38:	
 19332 ;; *************** function _checkChannelStatus *****************
 19333 ;; Defined at:
 19334 ;;		line 59 in file "system.c"
 19335 ;; Parameters:    Size  Location     Type
 19336 ;;		None
 19337 ;; Auto vars:     Size  Location     Type
 19338 ;;  current         4   43[BANK1 ] float 
 19339 ;;  heater          2   48[BANK1 ] PTR struct .
 19340 ;;		 -> data.heater(124), data(166), 
 19341 ;;  avg             2   41[BANK1 ] unsigned short 
 19342 ;;  adc             2   30[BANK1 ] unsigned short 
 19343 ;;  channel         1   47[BANK1 ] unsigned char 
 19344 ;;  samples         1   40[BANK1 ] unsigned char 
 19345 ;; Return value:  Size  Location     Type
 19346 ;;                  1    wreg      void 
 19347 ;; Registers used:
 19348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19349 ;; Tracked objects:
 19350 ;;		On entry : 3F/2
 19351 ;;		On exit  : 3F/1
 19352 ;;		Unchanged: 0/0
 19353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19354 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19355 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19356 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19357 ;;      Totals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19358 ;;Total ram usage:       24 bytes
 19359 ;; Hardware stack levels used:    1
 19360 ;; Hardware stack levels required when called:    5
 19361 ;; This function calls:
 19362 ;;		___fldiv
 19363 ;;		___fleq
 19364 ;;		___flge
 19365 ;;		___flmul
 19366 ;;		___fltol
 19367 ;;		___wmul
 19368 ;;		___xxtofl
 19369 ;;		_ema
 19370 ;;		_error
 19371 ;;		_getAnalogValue
 19372 ;;		_setChannelSwitch
 19373 ;; This function is called by:
 19374 ;;		_main
 19375 ;; This function uses a non-reentrant model
 19376 ;;
 19377                           
 19378                           
 19379                           ;psect for function _checkChannelStatus
 19380  20C0                     _checkChannelStatus:	
 19381                           
 19382                           ;system.c: 61:  uint16_t adc, avg;;system.c: 62:  uint8_t channel, samples;;system.c: 63
      +                          :  float current;;system.c: 64:  t_heater *heater;;system.c: 66:  for (channel = 0; chan
      +                          nel < 4; channel++) {
 19383                           
 19384                           ;incstack = 0
 19385                           ; Regs used in _checkChannelStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19386  20C0  0141               	movlb	1	; select bank1
 19387  20C1  01CF               	clrf	checkChannelStatus@channel^(0+128)
 19388  20C2                     l8330:	
 19389                           
 19390                           ;system.c: 68:   heater = &(data.heater)[channel];
 19391  20C2  3074               	movlw	116
 19392  20C3  00D0               	movwf	checkChannelStatus@heater^(0+128)
 19393  20C4  3027               	movlw	39
 19394  20C5  00D1               	movwf	(checkChannelStatus@heater^(0+128)+1)
 19395  20C6  084F               	movf	checkChannelStatus@channel^(0+128),w
 19396  20C7  0140               	movlb	0	; select bank0
 19397  20C8  00AF               	movwf	___wmul@multiplier
 19398  20C9  301F               	movlw	31
 19399  20CA  01B0               	clrf	___wmul@multiplier+1
 19400  20CB  00B1               	movwf	___wmul@multiplicand
 19401  20CC  01B2               	clrf	___wmul@multiplicand+1
 19402  20CD  318A  2206  31A0   	fcall	___wmul
 19403  20D0  082F               	movf	?___wmul,w
 19404  20D1  0141               	movlb	1	; select bank1
 19405  20D2  07D0               	addwf	checkChannelStatus@heater^(0+128),f
 19406  20D3  0140               	movlb	0	; select bank0
 19407  20D4  0830               	movf	?___wmul+1,w
 19408  20D5  0141               	movlb	1	; select bank1
 19409  20D6  3DD1               	addwfc	(checkChannelStatus@heater+1)^(0+128),f
 19410                           
 19411                           ;system.c: 70:   if (heater->status == CH_OVERCURRENT)
 19412  20D7  0850               	movf	checkChannelStatus@heater^(0+128),w
 19413  20D8  0086               	movwf	6
 19414  20D9  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19415  20DA  0087               	movwf	7
 19416  20DB  3004               	movlw	4
 19417  20DC  315E               	addfsr 1,30
 19418  20DD  0601               	xorwf	1,w
 19419  20DE  1903               	btfsc	3,2
 19420  20DF  2C2A               	goto	l8434
 19421                           
 19422                           ;system.c: 73:   setChannelSwitch(channel, 1);
 19423  20E0  0140               	movlb	0	; select bank0
 19424  20E1  01AF               	clrf	setChannelSwitch@state
 19425  20E2  0AAF               	incf	setChannelSwitch@state,f
 19426  20E3  0141               	movlb	1	; select bank1
 19427  20E4  084F               	movf	checkChannelStatus@channel^(0+128),w
 19428  20E5  245D  31A0         	fcall	_setChannelSwitch
 19429                           
 19430                           ;system.c: 74:   samples = 0;
 19431  20E7  0141               	movlb	1	; select bank1
 19432  20E8  01C8               	clrf	checkChannelStatus@samples^(0+128)
 19433                           
 19434                           ;system.c: 76:   avg = 0;
 19435  20E9  01C9               	clrf	checkChannelStatus@avg^(0+128)
 19436  20EA  01CA               	clrf	(checkChannelStatus@avg+1)^(0+128)
 19437  20EB                     l8344:	
 19438                           
 19439                           ;system.c: 78:    adc = getAnalogValue(0b010001);
 19440  20EB  3011               	movlw	17
 19441  20EC  2738  31A0         	fcall	_getAnalogValue
 19442  20EE  0825               	movf	?_getAnalogValue+1,w
 19443  20EF  0141               	movlb	1	; select bank1
 19444  20F0  00BF               	movwf	(checkChannelStatus@adc+1)^(0+128)
 19445  20F1  0140               	movlb	0	; select bank0
 19446  20F2  0824               	movf	?_getAnalogValue,w
 19447  20F3  0141               	movlb	1	; select bank1
 19448  20F4  00BE               	movwf	checkChannelStatus@adc^(0+128)
 19449                           
 19450                           ;system.c: 80:    avg = ema(adc, avg, ( (uint32_t)(0.7 * 65535) ));
 19451  20F5  083F               	movf	(checkChannelStatus@adc+1)^(0+128),w
 19452  20F6  0140               	movlb	0	; select bank0
 19453  20F7  00B1               	movwf	ema@in+1
 19454  20F8  0141               	movlb	1	; select bank1
 19455  20F9  083E               	movf	checkChannelStatus@adc^(0+128),w
 19456  20FA  0140               	movlb	0	; select bank0
 19457  20FB  00B0               	movwf	ema@in
 19458  20FC  0141               	movlb	1	; select bank1
 19459  20FD  084A               	movf	(checkChannelStatus@avg+1)^(0+128),w
 19460  20FE  0140               	movlb	0	; select bank0
 19461  20FF  00B3               	movwf	ema@average+1
 19462  2100  0141               	movlb	1	; select bank1
 19463  2101  0849               	movf	checkChannelStatus@avg^(0+128),w
 19464  2102  0140               	movlb	0	; select bank0
 19465  2103  00B2               	movwf	ema@average
 19466  2104  30B3               	movlw	179
 19467  2105  01B7               	clrf	ema@alpha+3
 19468  2106  01B6               	clrf	ema@alpha+2
 19469  2107  00B5               	movwf	ema@alpha+1
 19470  2108  3032               	movlw	50
 19471  2109  00B4               	movwf	ema@alpha
 19472  210A  2790  31A0         	fcall	_ema
 19473  210C  0831               	movf	?_ema+1,w
 19474  210D  0141               	movlb	1	; select bank1
 19475  210E  00CA               	movwf	(checkChannelStatus@avg+1)^(0+128)
 19476  210F  0140               	movlb	0	; select bank0
 19477  2110  0830               	movf	?_ema,w
 19478  2111  0141               	movlb	1	; select bank1
 19479  2112  00C9               	movwf	checkChannelStatus@avg^(0+128)
 19480                           
 19481                           ;system.c: 81:   } while (samples++ < 50);
 19482  2113  0848               	movf	checkChannelStatus@samples^(0+128),w
 19483  2114  0AC8               	incf	checkChannelStatus@samples^(0+128),f
 19484  2115  00BA               	movwf	??_checkChannelStatus^(0+128)
 19485  2116  3032               	movlw	50
 19486  2117  023A               	subwf	??_checkChannelStatus^(0+128),w
 19487  2118  1C03               	skipc
 19488  2119  28EB               	goto	l8344
 19489                           
 19490                           ;system.c: 82:   setChannelSwitch(channel, 0);
 19491  211A  0140               	movlb	0	; select bank0
 19492  211B  01AF               	clrf	setChannelSwitch@state
 19493  211C  0141               	movlb	1	; select bank1
 19494  211D  084F               	movf	checkChannelStatus@channel^(0+128),w
 19495  211E  245D               	fcall	_setChannelSwitch
 19496                           
 19497                           ;system.c: 85:   current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 19498  211F  3045               	movlw	69
 19499  2120  00DF               	movwf	___fldiv@a+3
 19500  2121  301F               	movlw	31
 19501  2122  00DE               	movwf	___fldiv@a+2
 19502  2123  30D8               	movlw	216
 19503  2124  00DD               	movwf	___fldiv@a+1
 19504  2125  3040               	movlw	64
 19505  2126  01DC               	clrf	___fldiv@a
 19506  2127  00C6               	movwf	___flmul@b+3
 19507  2128  30A0               	movlw	160
 19508  2129  00C5               	movwf	___flmul@b+2
 19509  212A  01C4               	clrf	___flmul@b+1
 19510  212B  01C3               	clrf	___flmul@b
 19511  212C  0141               	movlb	1	; select bank1
 19512  212D  0849               	movf	checkChannelStatus@avg^(0+128),w
 19513  212E  0140               	movlb	0	; select bank0
 19514  212F  00B5               	movwf	___xxtofl@val
 19515  2130  0141               	movlb	1	; select bank1
 19516  2131  084A               	movf	(checkChannelStatus@avg+1)^(0+128),w
 19517  2132  0140               	movlb	0	; select bank0
 19518  2133  00B6               	movwf	___xxtofl@val+1
 19519  2134  3000               	movlw	0
 19520  2135  01B7               	clrf	___xxtofl@val+2
 19521  2136  01B8               	clrf	___xxtofl@val+3
 19522  2137  318F  2715  31A0   	fcall	___xxtofl
 19523  213A  0838               	movf	?___xxtofl+3,w
 19524  213B  00CA               	movwf	___flmul@a+3
 19525  213C  0837               	movf	?___xxtofl+2,w
 19526  213D  00C9               	movwf	___flmul@a+2
 19527  213E  0836               	movf	?___xxtofl+1,w
 19528  213F  00C8               	movwf	___flmul@a+1
 19529  2140  0835               	movf	?___xxtofl,w
 19530  2141  00C7               	movwf	___flmul@a
 19531  2142  319E  2635  31A0   	fcall	___flmul
 19532  2145  0846               	movf	?___flmul+3,w
 19533  2146  00E3               	movwf	___fldiv@b+3
 19534  2147  0845               	movf	?___flmul+2,w
 19535  2148  00E2               	movwf	___fldiv@b+2
 19536  2149  0844               	movf	?___flmul+1,w
 19537  214A  00E1               	movwf	___fldiv@b+1
 19538  214B  0843               	movf	?___flmul,w
 19539  214C  00E0               	movwf	___fldiv@b
 19540  214D  25DA               	fcall	___fldiv
 19541  214E  085F               	movf	?___fldiv+3,w
 19542  214F  0141               	movlb	1	; select bank1
 19543  2150  00CE               	movwf	(checkChannelStatus@current+3)^(0+128)
 19544  2151  0140               	movlb	0	; select bank0
 19545  2152  085E               	movf	?___fldiv+2,w
 19546  2153  0141               	movlb	1	; select bank1
 19547  2154  00CD               	movwf	(checkChannelStatus@current+2)^(0+128)
 19548  2155  0140               	movlb	0	; select bank0
 19549  2156  085D               	movf	?___fldiv+1,w
 19550  2157  0141               	movlb	1	; select bank1
 19551  2158  00CC               	movwf	(checkChannelStatus@current+1)^(0+128)
 19552  2159  0140               	movlb	0	; select bank0
 19553  215A  085C               	movf	?___fldiv,w
 19554  215B  0141               	movlb	1	; select bank1
 19555  215C  00CB               	movwf	checkChannelStatus@current^(0+128)
 19556                           
 19557                           ;system.c: 88:   if (current < 0.05) {
 19558  215D  084E               	movf	(checkChannelStatus@current+3)^(0+128),w
 19559  215E  00B0               	movwf	(___flge@ff1+3)^(0+128)
 19560  215F  084D               	movf	(checkChannelStatus@current+2)^(0+128),w
 19561  2160  00AF               	movwf	(___flge@ff1+2)^(0+128)
 19562  2161  084C               	movf	(checkChannelStatus@current+1)^(0+128),w
 19563  2162  00AE               	movwf	(___flge@ff1+1)^(0+128)
 19564  2163  084B               	movf	checkChannelStatus@current^(0+128),w
 19565  2164  00AD               	movwf	___flge@ff1^(0+128)
 19566  2165  303D               	movlw	61
 19567  2166  00B4               	movwf	(___flge@ff2+3)^(0+128)
 19568  2167  304C               	movlw	76
 19569  2168  00B3               	movwf	(___flge@ff2+2)^(0+128)
 19570  2169  30CC               	movlw	204
 19571  216A  00B2               	movwf	(___flge@ff2+1)^(0+128)
 19572  216B  30CD               	movlw	205
 19573  216C  00B1               	movwf	___flge@ff2^(0+128)
 19574  216D  318E  26B1  31A0   	fcall	___flge
 19575  2170  1803               	btfsc	3,0
 19576  2171  2998               	goto	l8374
 19577                           
 19578                           ;system.c: 90:    if (heater->status == CH_ENABLED) {
 19579  2172  0850               	movf	checkChannelStatus@heater^(0+128),w
 19580  2173  0086               	movwf	6
 19581  2174  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19582  2175  0087               	movwf	7
 19583  2176  315E               	addfsr 1,30
 19584  2177  0B01               	decfsz	1,w
 19585  2178  298B               	goto	l8372
 19586                           
 19587                           ;system.c: 91:     if (channel == 0)
 19588  2179  084F               	movf	checkChannelStatus@channel^(0+128),w
 19589  217A  1D03               	btfss	3,2
 19590  217B  297E               	goto	l8362
 19591                           
 19592                           ;system.c: 92:      error(WARN_REMOVED1);
 19593  217C  3001               	movlw	1
 19594  217D  2989               	goto	L17
 19595  217E                     l8362:	
 19596  217E  0B4F               	decfsz	checkChannelStatus@channel^(0+128),w
 19597  217F  2982               	goto	l8366
 19598                           
 19599                           ;system.c: 94:      error(WARN_REMOVED2);
 19600  2180  3002               	movlw	2
 19601  2181  2989               	goto	L17
 19602  2182                     l8366:	
 19603  2182  3002               	movlw	2
 19604  2183  064F               	xorwf	checkChannelStatus@channel^(0+128),w
 19605  2184  1D03               	btfss	3,2
 19606  2185  2988               	goto	l8370
 19607                           
 19608                           ;system.c: 96:      error(WARN_REMOVED3);
 19609  2186  3003               	movlw	3
 19610  2187  2989               	goto	L17
 19611  2188                     l8370:	
 19612                           
 19613                           ;system.c: 98:      error(WARN_REMOVED4);
 19614  2188  3004               	movlw	4
 19615  2189                     L17:	
 19616  2189  2431  31A0         	fcall	_error
 19617  218B                     l8372:	
 19618                           
 19619                           ;system.c: 100:    heater->status = CH_OPEN;
 19620  218B  0141               	movlb	1	; select bank1
 19621  218C  0850               	movf	checkChannelStatus@heater^(0+128),w
 19622  218D  3E1E               	addlw	30
 19623  218E  00BA               	movwf	??_checkChannelStatus^(0+128)
 19624  218F  3000               	movlw	0
 19625  2190  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 19626  2191  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 19627  2192  083A               	movf	??_checkChannelStatus^(0+128),w
 19628  2193  0086               	movwf	6
 19629  2194  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 19630  2195  0087               	movwf	7
 19631  2196  3002               	movlw	2
 19632  2197  2C29               	goto	L18
 19633  2198                     l8374:	
 19634                           ;system.c: 101:   } else if ((current > 2.0) || !PORTCbits.RC2) {
 19635                           
 19636  2198  3040               	movlw	64
 19637  2199  00B0               	movwf	(___flge@ff1+3)^(0+128)
 19638  219A  01AF               	clrf	(___flge@ff1+2)^(0+128)
 19639  219B  01AE               	clrf	(___flge@ff1+1)^(0+128)
 19640  219C  01AD               	clrf	___flge@ff1^(0+128)
 19641  219D  084E               	movf	(checkChannelStatus@current+3)^(0+128),w
 19642  219E  00B4               	movwf	(___flge@ff2+3)^(0+128)
 19643  219F  084D               	movf	(checkChannelStatus@current+2)^(0+128),w
 19644  21A0  00B3               	movwf	(___flge@ff2+2)^(0+128)
 19645  21A1  084C               	movf	(checkChannelStatus@current+1)^(0+128),w
 19646  21A2  00B2               	movwf	(___flge@ff2+1)^(0+128)
 19647  21A3  084B               	movf	checkChannelStatus@current^(0+128),w
 19648  21A4  00B1               	movwf	___flge@ff2^(0+128)
 19649  21A5  318E  26B1  31A0   	fcall	___flge
 19650  21A8  1C03               	btfss	3,0
 19651  21A9  29AD               	goto	l8378
 19652  21AA  0140               	movlb	0	; select bank0
 19653  21AB  190E               	btfsc	14,2	;volatile
 19654  21AC  29DA               	goto	l8392
 19655  21AD                     l8378:	
 19656                           
 19657                           ;system.c: 104:    error(WARN_HEATER_OVERCURRENT);
 19658  21AD  3007               	movlw	7
 19659  21AE  2431  31A0         	fcall	_error
 19660                           
 19661                           ;system.c: 105:    heater->status = CH_OVERCURRENT;
 19662  21B0  0141               	movlb	1	; select bank1
 19663  21B1  0850               	movf	checkChannelStatus@heater^(0+128),w
 19664  21B2  3E1E               	addlw	30
 19665  21B3  00BA               	movwf	??_checkChannelStatus^(0+128)
 19666  21B4  3000               	movlw	0
 19667  21B5  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 19668  21B6  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 19669  21B7  083A               	movf	??_checkChannelStatus^(0+128),w
 19670  21B8  0086               	movwf	6
 19671  21B9  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 19672  21BA  0087               	movwf	7
 19673  21BB  3004               	movlw	4
 19674  21BC  0081               	movwf	1
 19675                           
 19676                           ;system.c: 107:    if (!PORTCbits.RC2) {
 19677  21BD  0140               	movlb	0	; select bank0
 19678  21BE  190E               	btfsc	14,2	;volatile
 19679  21BF  2C2A               	goto	l8434
 19680                           
 19681                           ;system.c: 108:     heater->status = CH_SHORTED;
 19682  21C0  0141               	movlb	1	; select bank1
 19683  21C1  0850               	movf	checkChannelStatus@heater^(0+128),w
 19684  21C2  3E1E               	addlw	30
 19685  21C3  00BA               	movwf	??_checkChannelStatus^(0+128)
 19686  21C4  3000               	movlw	0
 19687  21C5  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 19688  21C6  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 19689  21C7  083A               	movf	??_checkChannelStatus^(0+128),w
 19690  21C8  0086               	movwf	6
 19691  21C9  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 19692  21CA  0087               	movwf	7
 19693  21CB  3003               	movlw	3
 19694  21CC  0081               	movwf	1
 19695                           
 19696                           ;system.c: 109:     LATCbits.LATC3 = 0;
 19697  21CD  0140               	movlb	0	; select bank0
 19698  21CE  119A               	bcf	26,3	;volatile
 19699                           
 19700                           ;system.c: 110:     _delay((unsigned long)((5)*(4000000UL/4000.0)));
 19701  21CF  3007               	movlw	7
 19702  21D0  0141               	movlb	1	; select bank1
 19703  21D1  00BA               	movwf	??_checkChannelStatus^(0+128)
 19704  21D2  307D               	movlw	125
 19705  21D3                     u9447:	
 19706  21D3  0B89               	decfsz	9,f
 19707  21D4  29D3               	goto	u9447
 19708  21D5  0BBA               	decfsz	??_checkChannelStatus^(0+128),f
 19709  21D6  29D3               	goto	u9447
 19710                           
 19711                           ;system.c: 111:     LATCbits.LATC3 = 1;
 19712  21D7  0140               	movlb	0	; select bank0
 19713  21D8  159A               	bsf	26,3	;volatile
 19714  21D9  2C2A               	goto	l8434
 19715  21DA                     l8392:	
 19716                           
 19717                           ;system.c: 114:    heater->current = current;
 19718  21DA  0141               	movlb	1	; select bank1
 19719  21DB  0850               	movf	checkChannelStatus@heater^(0+128),w
 19720  21DC  0086               	movwf	6
 19721  21DD  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19722  21DE  0087               	movwf	7
 19723  21DF  084B               	movf	checkChannelStatus@current^(0+128),w
 19724  21E0  3FC0               	movwi [0]fsr1
 19725  21E1  084C               	movf	(checkChannelStatus@current+1)^(0+128),w
 19726  21E2  3FC1               	movwi [1]fsr1
 19727  21E3  084D               	movf	(checkChannelStatus@current+2)^(0+128),w
 19728  21E4  3FC2               	movwi [2]fsr1
 19729  21E5  084E               	movf	(checkChannelStatus@current+3)^(0+128),w
 19730  21E6  3FC3               	movwi [3]fsr1
 19731                           
 19732                           ;system.c: 115:    heater->Pmax = data.voltage * current;
 19733  21E7  0140               	movlb	0	; select bank0
 19734  21E8  00C6               	movwf	___flmul@b+3
 19735  21E9  0141               	movlb	1	; select bank1
 19736  21EA  084D               	movf	(checkChannelStatus@current+2)^(0+128),w
 19737  21EB  0140               	movlb	0	; select bank0
 19738  21EC  00C5               	movwf	___flmul@b+2
 19739  21ED  0141               	movlb	1	; select bank1
 19740  21EE  084C               	movf	(checkChannelStatus@current+1)^(0+128),w
 19741  21EF  0140               	movlb	0	; select bank0
 19742  21F0  00C4               	movwf	___flmul@b+1
 19743  21F1  0141               	movlb	1	; select bank1
 19744  21F2  084B               	movf	checkChannelStatus@current^(0+128),w
 19745  21F3  0140               	movlb	0	; select bank0
 19746  21F4  00C3               	movwf	___flmul@b
 19747  21F5  304A               	movlw	74
 19748  21F6  0086               	movwf	6
 19749  21F7  3027               	movlw	39
 19750  21F8  0087               	movwf	7
 19751  21F9  3151               	addfsr 1,17
 19752  21FA  3F40               	moviw [0]fsr1
 19753  21FB  00C7               	movwf	___flmul@a
 19754  21FC  3F41               	moviw [1]fsr1
 19755  21FD  00C8               	movwf	___flmul@a+1
 19756  21FE  3F42               	moviw [2]fsr1
 19757  21FF  00C9               	movwf	___flmul@a+2
 19758  2200  3F43               	moviw [3]fsr1
 19759  2201  00CA               	movwf	___flmul@a+3
 19760  2202  319E  2635  31A0   	fcall	___flmul
 19761  2205  0141               	movlb	1	; select bank1
 19762  2206  0850               	movf	checkChannelStatus@heater^(0+128),w
 19763  2207  0086               	movwf	6
 19764  2208  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19765  2209  0087               	movwf	7
 19766  220A  3144               	addfsr 1,4
 19767  220B  0140               	movlb	0	; select bank0
 19768  220C  0843               	movf	?___flmul,w
 19769  220D  3FC0               	movwi [0]fsr1
 19770  220E  0844               	movf	?___flmul+1,w
 19771  220F  3FC1               	movwi [1]fsr1
 19772  2210  0845               	movf	?___flmul+2,w
 19773  2211  3FC2               	movwi [2]fsr1
 19774  2212  0846               	movf	?___flmul+3,w
 19775  2213  3FC3               	movwi [3]fsr1
 19776                           
 19777                           ;system.c: 118:    if (heater->Pset > heater->Pmax)
 19778  2214  0141               	movlb	1	; select bank1
 19779  2215  0850               	movf	checkChannelStatus@heater^(0+128),w
 19780  2216  0086               	movwf	6
 19781  2217  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19782  2218  0087               	movwf	7
 19783  2219  3144               	addfsr 1,4
 19784  221A  3F40               	moviw [0]fsr1
 19785  221B  00AD               	movwf	___flge@ff1^(0+128)
 19786  221C  3F41               	moviw [1]fsr1
 19787  221D  00AE               	movwf	(___flge@ff1+1)^(0+128)
 19788  221E  3F42               	moviw [2]fsr1
 19789  221F  00AF               	movwf	(___flge@ff1+2)^(0+128)
 19790  2220  3F43               	moviw [3]fsr1
 19791  2221  00B0               	movwf	(___flge@ff1+3)^(0+128)
 19792  2222  0850               	movf	checkChannelStatus@heater^(0+128),w
 19793  2223  0086               	movwf	6
 19794  2224  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19795  2225  0087               	movwf	7
 19796  2226  3150               	addfsr 1,16
 19797  2227  3F40               	moviw [0]fsr1
 19798  2228  00B1               	movwf	___flge@ff2^(0+128)
 19799  2229  3F41               	moviw [1]fsr1
 19800  222A  00B2               	movwf	(___flge@ff2+1)^(0+128)
 19801  222B  3F42               	moviw [2]fsr1
 19802  222C  00B3               	movwf	(___flge@ff2+2)^(0+128)
 19803  222D  3F43               	moviw [3]fsr1
 19804  222E  00B4               	movwf	(___flge@ff2+3)^(0+128)
 19805  222F  318E  26B1  31A0   	fcall	___flge
 19806  2232  1803               	btfsc	3,0
 19807  2233  2A4E               	goto	l803
 19808                           
 19809                           ;system.c: 119:     heater->Pset = heater->Pmax;
 19810  2234  0850               	movf	checkChannelStatus@heater^(0+128),w
 19811  2235  0086               	movwf	6
 19812  2236  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19813  2237  0087               	movwf	7
 19814  2238  3144               	addfsr 1,4
 19815  2239  3F40               	moviw [0]fsr1
 19816  223A  00BA               	movwf	??_checkChannelStatus^(0+128)
 19817  223B  3F41               	moviw [1]fsr1
 19818  223C  00BB               	movwf	(??_checkChannelStatus^(0+128)+1)
 19819  223D  3F42               	moviw [2]fsr1
 19820  223E  00BC               	movwf	(??_checkChannelStatus^(0+128)+2)
 19821  223F  3F43               	moviw [3]fsr1
 19822  2240  00BD               	movwf	(??_checkChannelStatus^(0+128)+3)
 19823  2241  0850               	movf	checkChannelStatus@heater^(0+128),w
 19824  2242  0086               	movwf	6
 19825  2243  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19826  2244  0087               	movwf	7
 19827  2245  3150               	addfsr 1,16
 19828  2246  083A               	movf	??_checkChannelStatus^(0+128),w
 19829  2247  3FC0               	movwi [0]fsr1
 19830  2248  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 19831  2249  3FC1               	movwi [1]fsr1
 19832  224A  083C               	movf	(??_checkChannelStatus+2)^(0+128),w
 19833  224B  3FC2               	movwi [2]fsr1
 19834  224C  083D               	movf	(??_checkChannelStatus+3)^(0+128),w
 19835  224D  3FC3               	movwi [3]fsr1
 19836  224E                     l803:	
 19837                           
 19838                           ;system.c: 121:    if (data.status.SENSOR_OK) {
 19839  224E  3073               	movlw	115
 19840  224F  0086               	movwf	6
 19841  2250  3027               	movlw	39
 19842  2251  0087               	movwf	7
 19843                           
 19844                           ;system.c: 122:     if (heater->Pset < 0)
 19845  2252  0850               	movf	checkChannelStatus@heater^(0+128),w
 19846  2253  1D81               	btfss	1,3
 19847  2254  2A8E               	goto	L20
 19848  2255  0086               	movwf	6
 19849  2256  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19850  2257  0087               	movwf	7
 19851  2258  3150               	addfsr 1,16
 19852  2259  3F40               	moviw [0]fsr1
 19853  225A  00AD               	movwf	___flge@ff1^(0+128)
 19854  225B  3F41               	moviw [1]fsr1
 19855  225C  00AE               	movwf	(___flge@ff1+1)^(0+128)
 19856  225D  3F42               	moviw [2]fsr1
 19857  225E  00AF               	movwf	(___flge@ff1+2)^(0+128)
 19858  225F  3F43               	moviw [3]fsr1
 19859  2260  00B0               	movwf	(___flge@ff1+3)^(0+128)
 19860  2261  01B1               	clrf	___flge@ff2^(0+128)
 19861  2262  01B2               	clrf	(___flge@ff2+1)^(0+128)
 19862  2263  01B3               	clrf	(___flge@ff2+2)^(0+128)
 19863  2264  01B4               	clrf	(___flge@ff2+3)^(0+128)
 19864  2265  318E  26B1  31A0   	fcall	___flge
 19865  2268  1803               	btfsc	3,0
 19866  2269  2A77               	goto	l8404
 19867                           
 19868                           ;system.c: 123:      heater->mode = MODE_AUTO;
 19869  226A  0850               	movf	checkChannelStatus@heater^(0+128),w
 19870  226B  3E1D               	addlw	29
 19871  226C  00BA               	movwf	??_checkChannelStatus^(0+128)
 19872  226D  3000               	movlw	0
 19873  226E  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 19874  226F  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 19875  2270  083A               	movf	??_checkChannelStatus^(0+128),w
 19876  2271  0086               	movwf	6
 19877  2272  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 19878  2273  0087               	movwf	7
 19879  2274  3001               	movlw	1
 19880  2275  0081               	movwf	1
 19881  2276  2AAD               	goto	l8412
 19882  2277                     l8404:	
 19883  2277  01AD               	clrf	___flge@ff1^(0+128)
 19884  2278  01AE               	clrf	(___flge@ff1+1)^(0+128)
 19885  2279  01AF               	clrf	(___flge@ff1+2)^(0+128)
 19886  227A  01B0               	clrf	(___flge@ff1+3)^(0+128)
 19887  227B  0850               	movf	checkChannelStatus@heater^(0+128),w
 19888  227C  0086               	movwf	6
 19889  227D  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19890  227E  0087               	movwf	7
 19891  227F  3150               	addfsr 1,16
 19892  2280  3F40               	moviw [0]fsr1
 19893  2281  00B1               	movwf	___flge@ff2^(0+128)
 19894  2282  3F41               	moviw [1]fsr1
 19895  2283  00B2               	movwf	(___flge@ff2+1)^(0+128)
 19896  2284  3F42               	moviw [2]fsr1
 19897  2285  00B3               	movwf	(___flge@ff2+2)^(0+128)
 19898  2286  3F43               	moviw [3]fsr1
 19899  2287  00B4               	movwf	(___flge@ff2+3)^(0+128)
 19900  2288  318E  26B1  31A0   	fcall	___flge
 19901  228B  1803               	btfsc	3,0
 19902  228C  2AAD               	goto	l8412
 19903  228D  2AA7               	goto	l8410
 19904  228E                     L20:	
 19905                           ;system.c: 127:     heater->Pset = heater->Pmax;
 19906                           
 19907                           ;system.c: 125:      heater->mode = MODE_MANUAL;
 19908                           
 19909  228E  0086               	movwf	6
 19910  228F  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19911  2290  0087               	movwf	7
 19912  2291  3144               	addfsr 1,4
 19913  2292  3F40               	moviw [0]fsr1
 19914  2293  00BA               	movwf	??_checkChannelStatus^(0+128)
 19915  2294  3F41               	moviw [1]fsr1
 19916  2295  00BB               	movwf	(??_checkChannelStatus^(0+128)+1)
 19917  2296  3F42               	moviw [2]fsr1
 19918  2297  00BC               	movwf	(??_checkChannelStatus^(0+128)+2)
 19919  2298  3F43               	moviw [3]fsr1
 19920  2299  00BD               	movwf	(??_checkChannelStatus^(0+128)+3)
 19921  229A  0850               	movf	checkChannelStatus@heater^(0+128),w
 19922  229B  0086               	movwf	6
 19923  229C  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19924  229D  0087               	movwf	7
 19925  229E  3150               	addfsr 1,16
 19926  229F  083A               	movf	??_checkChannelStatus^(0+128),w
 19927  22A0  3FC0               	movwi [0]fsr1
 19928  22A1  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 19929  22A2  3FC1               	movwi [1]fsr1
 19930  22A3  083C               	movf	(??_checkChannelStatus+2)^(0+128),w
 19931  22A4  3FC2               	movwi [2]fsr1
 19932  22A5  083D               	movf	(??_checkChannelStatus+3)^(0+128),w
 19933  22A6  3FC3               	movwi [3]fsr1
 19934  22A7                     l8410:	
 19935                           
 19936                           ;system.c: 128:     heater->mode = MODE_MANUAL;
 19937  22A7  0850               	movf	checkChannelStatus@heater^(0+128),w
 19938  22A8  0086               	movwf	6
 19939  22A9  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19940  22AA  0087               	movwf	7
 19941  22AB  315D               	addfsr 1,29
 19942  22AC  0181               	clrf	1
 19943  22AD                     l8412:	
 19944                           
 19945                           ;system.c: 131:    if (heater->Pset == 0)
 19946  22AD  0850               	movf	checkChannelStatus@heater^(0+128),w
 19947  22AE  0086               	movwf	6
 19948  22AF  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19949  22B0  0087               	movwf	7
 19950  22B1  3150               	addfsr 1,16
 19951  22B2  3F40               	moviw [0]fsr1
 19952  22B3  0140               	movlb	0	; select bank0
 19953  22B4  00A4               	movwf	___fleq@ff1
 19954  22B5  3F41               	moviw [1]fsr1
 19955  22B6  00A5               	movwf	___fleq@ff1+1
 19956  22B7  3F42               	moviw [2]fsr1
 19957  22B8  00A6               	movwf	___fleq@ff1+2
 19958  22B9  3F43               	moviw [3]fsr1
 19959  22BA  00A7               	movwf	___fleq@ff1+3
 19960  22BB  01A8               	clrf	___fleq@ff2
 19961  22BC  01A9               	clrf	___fleq@ff2+1
 19962  22BD  01AA               	clrf	___fleq@ff2+2
 19963  22BE  01AB               	clrf	___fleq@ff2+3
 19964  22BF  3192  22F5  31A0   	fcall	___fleq
 19965  22C2  1C03               	btfss	3,0
 19966  22C3  2ACC               	goto	l8416
 19967                           
 19968                           ;system.c: 132:     heater->status = CH_DISABLED;
 19969  22C4  0141               	movlb	1	; select bank1
 19970  22C5  0850               	movf	checkChannelStatus@heater^(0+128),w
 19971  22C6  0086               	movwf	6
 19972  22C7  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 19973  22C8  0087               	movwf	7
 19974  22C9  315E               	addfsr 1,30
 19975  22CA  0181               	clrf	1
 19976  22CB  2AE0               	goto	l810
 19977  22CC                     l8416:	
 19978                           
 19979                           ;system.c: 134:     if ((channel == 0) || (channel == 1)) {
 19980  22CC  0141               	movlb	1	; select bank1
 19981  22CD  084F               	movf	checkChannelStatus@channel^(0+128),w
 19982  22CE  1903               	btfsc	3,2
 19983  22CF  2AD2               	goto	l813
 19984  22D0  0B4F               	decfsz	checkChannelStatus@channel^(0+128),w
 19985  22D1  2AD3               	goto	l8420
 19986  22D2                     l813:	
 19987                           
 19988                           ;system.c: 135:      __nop();
 19989  22D2  0000               	nop
 19990  22D3                     l8420:	
 19991                           
 19992                           ;system.c: 137:     heater->status = CH_ENABLED;
 19993  22D3  0141               	movlb	1	; select bank1
 19994  22D4  0850               	movf	checkChannelStatus@heater^(0+128),w
 19995  22D5  3E1E               	addlw	30
 19996  22D6  00BA               	movwf	??_checkChannelStatus^(0+128)
 19997  22D7  3000               	movlw	0
 19998  22D8  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 19999  22D9  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 20000  22DA  083A               	movf	??_checkChannelStatus^(0+128),w
 20001  22DB  0086               	movwf	6
 20002  22DC  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 20003  22DD  0087               	movwf	7
 20004  22DE  3001               	movlw	1
 20005  22DF  0081               	movwf	1
 20006  22E0                     l810:	
 20007                           ;system.c: 138:    }
 20008                           
 20009                           
 20010                           ;system.c: 141:    if (heater->mode == MODE_AUTO)
 20011  22E0  0850               	movf	checkChannelStatus@heater^(0+128),w
 20012  22E1  0086               	movwf	6
 20013  22E2  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 20014  22E3  0087               	movwf	7
 20015  22E4  315D               	addfsr 1,29
 20016  22E5  0B01               	decfsz	1,w
 20017  22E6  2B80               	goto	l8428
 20018                           
 20019                           ;system.c: 142:     heater->DCreq = (((heater->Preq / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Preq / heater->Pmax) * 100) : (100));
 20020  22E7  3042               	movlw	66
 20021  22E8  0140               	movlb	0	; select bank0
 20022  22E9  00C6               	movwf	___flmul@b+3
 20023  22EA  30C8               	movlw	200
 20024  22EB  00C5               	movwf	___flmul@b+2
 20025  22EC  01C4               	clrf	___flmul@b+1
 20026  22ED  01C3               	clrf	___flmul@b
 20027  22EE  0141               	movlb	1	; select bank1
 20028  22EF  0850               	movf	checkChannelStatus@heater^(0+128),w
 20029  22F0  0086               	movwf	6
 20030  22F1  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 20031  22F2  0087               	movwf	7
 20032  22F3  3144               	addfsr 1,4
 20033  22F4  3F40               	moviw [0]fsr1
 20034  22F5  0140               	movlb	0	; select bank0
 20035  22F6  00DC               	movwf	___fldiv@a
 20036  22F7  3F41               	moviw [1]fsr1
 20037  22F8  00DD               	movwf	___fldiv@a+1
 20038  22F9  3F42               	moviw [2]fsr1
 20039  22FA  00DE               	movwf	___fldiv@a+2
 20040  22FB  3F43               	moviw [3]fsr1
 20041  22FC  00DF               	movwf	___fldiv@a+3
 20042  22FD  0141               	movlb	1	; select bank1
 20043  22FE  0850               	movf	checkChannelStatus@heater^(0+128),w
 20044  22FF  0086               	movwf	6
 20045  2300  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 20046  2301  0087               	movwf	7
 20047  2302  3148               	addfsr 1,8
 20048  2303  3F40               	moviw [0]fsr1
 20049  2304  0140               	movlb	0	; select bank0
 20050  2305  00E0               	movwf	___fldiv@b
 20051  2306  3F41               	moviw [1]fsr1
 20052  2307  00E1               	movwf	___fldiv@b+1
 20053  2308  3F42               	moviw [2]fsr1
 20054  2309  00E2               	movwf	___fldiv@b+2
 20055  230A  3F43               	moviw [3]fsr1
 20056  230B  00E3               	movwf	___fldiv@b+3
 20057  230C  25DA               	fcall	___fldiv
 20058  230D  085F               	movf	?___fldiv+3,w
 20059  230E  00CA               	movwf	___flmul@a+3
 20060  230F  085E               	movf	?___fldiv+2,w
 20061  2310  00C9               	movwf	___flmul@a+2
 20062  2311  085D               	movf	?___fldiv+1,w
 20063  2312  00C8               	movwf	___flmul@a+1
 20064  2313  085C               	movf	?___fldiv,w
 20065  2314  00C7               	movwf	___flmul@a
 20066  2315  319E  2635  31A0   	fcall	___flmul
 20067  2318  0846               	movf	?___flmul+3,w
 20068  2319  0141               	movlb	1	; select bank1
 20069  231A  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20070  231B  0140               	movlb	0	; select bank0
 20071  231C  0845               	movf	?___flmul+2,w
 20072  231D  0141               	movlb	1	; select bank1
 20073  231E  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20074  231F  0140               	movlb	0	; select bank0
 20075  2320  0844               	movf	?___flmul+1,w
 20076  2321  0141               	movlb	1	; select bank1
 20077  2322  00AE               	movwf	(___flge@ff1+1)^(0+128)
 20078  2323  0140               	movlb	0	; select bank0
 20079  2324  0843               	movf	?___flmul,w
 20080  2325  0141               	movlb	1	; select bank1
 20081  2326  00AD               	movwf	___flge@ff1^(0+128)
 20082  2327  3042               	movlw	66
 20083  2328  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20084  2329  30C8               	movlw	200
 20085  232A  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20086  232B  01B2               	clrf	(___flge@ff2+1)^(0+128)
 20087  232C  01B1               	clrf	___flge@ff2^(0+128)
 20088  232D  318E  26B1  31A0   	fcall	___flge
 20089  2330  3042               	movlw	66
 20090  2331  1C03               	btfss	3,0
 20091  2332  2B39               	goto	L21
 20092  2333  00C3               	movwf	(_checkChannelStatus$1893+3)^(0+128)
 20093  2334  30C8               	movlw	200
 20094  2335  00C2               	movwf	(_checkChannelStatus$1893+2)^(0+128)
 20095  2336  01C1               	clrf	(_checkChannelStatus$1893+1)^(0+128)
 20096  2337  01C0               	clrf	_checkChannelStatus$1893^(0+128)
 20097  2338  2B78               	goto	l818
 20098  2339                     L21:	
 20099  2339  0140               	movlb	0	; select bank0
 20100  233A  00C6               	movwf	___flmul@b+3
 20101  233B  30C8               	movlw	200
 20102  233C  00C5               	movwf	___flmul@b+2
 20103  233D  01C4               	clrf	___flmul@b+1
 20104  233E  01C3               	clrf	___flmul@b
 20105  233F  0141               	movlb	1	; select bank1
 20106  2340  0850               	movf	checkChannelStatus@heater^(0+128),w
 20107  2341  0086               	movwf	6
 20108  2342  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 20109  2343  0087               	movwf	7
 20110  2344  3144               	addfsr 1,4
 20111  2345  3F40               	moviw [0]fsr1
 20112  2346  0140               	movlb	0	; select bank0
 20113  2347  00DC               	movwf	___fldiv@a
 20114  2348  3F41               	moviw [1]fsr1
 20115  2349  00DD               	movwf	___fldiv@a+1
 20116  234A  3F42               	moviw [2]fsr1
 20117  234B  00DE               	movwf	___fldiv@a+2
 20118  234C  3F43               	moviw [3]fsr1
 20119  234D  00DF               	movwf	___fldiv@a+3
 20120  234E  0141               	movlb	1	; select bank1
 20121  234F  0850               	movf	checkChannelStatus@heater^(0+128),w
 20122  2350  0086               	movwf	6
 20123  2351  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 20124  2352  0087               	movwf	7
 20125  2353  3148               	addfsr 1,8
 20126  2354  3F40               	moviw [0]fsr1
 20127  2355  0140               	movlb	0	; select bank0
 20128  2356  00E0               	movwf	___fldiv@b
 20129  2357  3F41               	moviw [1]fsr1
 20130  2358  00E1               	movwf	___fldiv@b+1
 20131  2359  3F42               	moviw [2]fsr1
 20132  235A  00E2               	movwf	___fldiv@b+2
 20133  235B  3F43               	moviw [3]fsr1
 20134  235C  00E3               	movwf	___fldiv@b+3
 20135  235D  25DA               	fcall	___fldiv
 20136  235E  085F               	movf	?___fldiv+3,w
 20137  235F  00CA               	movwf	___flmul@a+3
 20138  2360  085E               	movf	?___fldiv+2,w
 20139  2361  00C9               	movwf	___flmul@a+2
 20140  2362  085D               	movf	?___fldiv+1,w
 20141  2363  00C8               	movwf	___flmul@a+1
 20142  2364  085C               	movf	?___fldiv,w
 20143  2365  00C7               	movwf	___flmul@a
 20144  2366  319E  2635  31A0   	fcall	___flmul
 20145  2369  0846               	movf	?___flmul+3,w
 20146  236A  0141               	movlb	1	; select bank1
 20147  236B  00C3               	movwf	(_checkChannelStatus$1893+3)^(0+128)
 20148  236C  0140               	movlb	0	; select bank0
 20149  236D  0845               	movf	?___flmul+2,w
 20150  236E  0141               	movlb	1	; select bank1
 20151  236F  00C2               	movwf	(_checkChannelStatus$1893+2)^(0+128)
 20152  2370  0140               	movlb	0	; select bank0
 20153  2371  0844               	movf	?___flmul+1,w
 20154  2372  0141               	movlb	1	; select bank1
 20155  2373  00C1               	movwf	(_checkChannelStatus$1893+1)^(0+128)
 20156  2374  0140               	movlb	0	; select bank0
 20157  2375  0843               	movf	?___flmul,w
 20158  2376  0141               	movlb	1	; select bank1
 20159  2377  00C0               	movwf	_checkChannelStatus$1893^(0+128)
 20160  2378                     l818:	
 20161  2378  0843               	movf	(_checkChannelStatus$1893+3)^(0+128),w
 20162  2379  00B3               	movwf	(___fltol@f1+3)^(0+128)
 20163  237A  0842               	movf	(_checkChannelStatus$1893+2)^(0+128),w
 20164  237B  00B2               	movwf	(___fltol@f1+2)^(0+128)
 20165  237C  0841               	movf	(_checkChannelStatus$1893+1)^(0+128),w
 20166  237D  00B1               	movwf	(___fltol@f1+1)^(0+128)
 20167  237E  0840               	movf	_checkChannelStatus$1893^(0+128),w
 20168  237F  2C18               	goto	L19
 20169  2380                     l8428:	
 20170                           
 20171                           ;system.c: 144:     heater->DCreq = (((heater->Pset / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Pset / heater->Pmax) * 100) : (100));
 20172  2380  3042               	movlw	66
 20173  2381  0140               	movlb	0	; select bank0
 20174  2382  00C6               	movwf	___flmul@b+3
 20175  2383  30C8               	movlw	200
 20176  2384  00C5               	movwf	___flmul@b+2
 20177  2385  01C4               	clrf	___flmul@b+1
 20178  2386  01C3               	clrf	___flmul@b
 20179  2387  0141               	movlb	1	; select bank1
 20180  2388  0850               	movf	checkChannelStatus@heater^(0+128),w
 20181  2389  0086               	movwf	6
 20182  238A  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 20183  238B  0087               	movwf	7
 20184  238C  3144               	addfsr 1,4
 20185  238D  3F40               	moviw [0]fsr1
 20186  238E  0140               	movlb	0	; select bank0
 20187  238F  00DC               	movwf	___fldiv@a
 20188  2390  3F41               	moviw [1]fsr1
 20189  2391  00DD               	movwf	___fldiv@a+1
 20190  2392  3F42               	moviw [2]fsr1
 20191  2393  00DE               	movwf	___fldiv@a+2
 20192  2394  3F43               	moviw [3]fsr1
 20193  2395  00DF               	movwf	___fldiv@a+3
 20194  2396  0141               	movlb	1	; select bank1
 20195  2397  0850               	movf	checkChannelStatus@heater^(0+128),w
 20196  2398  0086               	movwf	6
 20197  2399  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 20198  239A  0087               	movwf	7
 20199  239B  3150               	addfsr 1,16
 20200  239C  3F40               	moviw [0]fsr1
 20201  239D  0140               	movlb	0	; select bank0
 20202  239E  00E0               	movwf	___fldiv@b
 20203  239F  3F41               	moviw [1]fsr1
 20204  23A0  00E1               	movwf	___fldiv@b+1
 20205  23A1  3F42               	moviw [2]fsr1
 20206  23A2  00E2               	movwf	___fldiv@b+2
 20207  23A3  3F43               	moviw [3]fsr1
 20208  23A4  00E3               	movwf	___fldiv@b+3
 20209  23A5  25DA               	fcall	___fldiv
 20210  23A6  085F               	movf	?___fldiv+3,w
 20211  23A7  00CA               	movwf	___flmul@a+3
 20212  23A8  085E               	movf	?___fldiv+2,w
 20213  23A9  00C9               	movwf	___flmul@a+2
 20214  23AA  085D               	movf	?___fldiv+1,w
 20215  23AB  00C8               	movwf	___flmul@a+1
 20216  23AC  085C               	movf	?___fldiv,w
 20217  23AD  00C7               	movwf	___flmul@a
 20218  23AE  319E  2635  31A0   	fcall	___flmul
 20219  23B1  0846               	movf	?___flmul+3,w
 20220  23B2  0141               	movlb	1	; select bank1
 20221  23B3  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20222  23B4  0140               	movlb	0	; select bank0
 20223  23B5  0845               	movf	?___flmul+2,w
 20224  23B6  0141               	movlb	1	; select bank1
 20225  23B7  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20226  23B8  0140               	movlb	0	; select bank0
 20227  23B9  0844               	movf	?___flmul+1,w
 20228  23BA  0141               	movlb	1	; select bank1
 20229  23BB  00AE               	movwf	(___flge@ff1+1)^(0+128)
 20230  23BC  0140               	movlb	0	; select bank0
 20231  23BD  0843               	movf	?___flmul,w
 20232  23BE  0141               	movlb	1	; select bank1
 20233  23BF  00AD               	movwf	___flge@ff1^(0+128)
 20234  23C0  3042               	movlw	66
 20235  23C1  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20236  23C2  30C8               	movlw	200
 20237  23C3  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20238  23C4  01B2               	clrf	(___flge@ff2+1)^(0+128)
 20239  23C5  01B1               	clrf	___flge@ff2^(0+128)
 20240  23C6  318E  26B1  31A0   	fcall	___flge
 20241  23C9  3042               	movlw	66
 20242  23CA  1C03               	btfss	3,0
 20243  23CB  2BD2               	goto	L22
 20244  23CC  00C7               	movwf	(_checkChannelStatus$1894+3)^(0+128)
 20245  23CD  30C8               	movlw	200
 20246  23CE  00C6               	movwf	(_checkChannelStatus$1894+2)^(0+128)
 20247  23CF  01C5               	clrf	(_checkChannelStatus$1894+1)^(0+128)
 20248  23D0  01C4               	clrf	_checkChannelStatus$1894^(0+128)
 20249  23D1  2C11               	goto	l823
 20250  23D2                     L22:	
 20251  23D2  0140               	movlb	0	; select bank0
 20252  23D3  00C6               	movwf	___flmul@b+3
 20253  23D4  30C8               	movlw	200
 20254  23D5  00C5               	movwf	___flmul@b+2
 20255  23D6  01C4               	clrf	___flmul@b+1
 20256  23D7  01C3               	clrf	___flmul@b
 20257  23D8  0141               	movlb	1	; select bank1
 20258  23D9  0850               	movf	checkChannelStatus@heater^(0+128),w
 20259  23DA  0086               	movwf	6
 20260  23DB  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 20261  23DC  0087               	movwf	7
 20262  23DD  3144               	addfsr 1,4
 20263  23DE  3F40               	moviw [0]fsr1
 20264  23DF  0140               	movlb	0	; select bank0
 20265  23E0  00DC               	movwf	___fldiv@a
 20266  23E1  3F41               	moviw [1]fsr1
 20267  23E2  00DD               	movwf	___fldiv@a+1
 20268  23E3  3F42               	moviw [2]fsr1
 20269  23E4  00DE               	movwf	___fldiv@a+2
 20270  23E5  3F43               	moviw [3]fsr1
 20271  23E6  00DF               	movwf	___fldiv@a+3
 20272  23E7  0141               	movlb	1	; select bank1
 20273  23E8  0850               	movf	checkChannelStatus@heater^(0+128),w
 20274  23E9  0086               	movwf	6
 20275  23EA  0851               	movf	(checkChannelStatus@heater+1)^(0+128),w
 20276  23EB  0087               	movwf	7
 20277  23EC  3150               	addfsr 1,16
 20278  23ED  3F40               	moviw [0]fsr1
 20279  23EE  0140               	movlb	0	; select bank0
 20280  23EF  00E0               	movwf	___fldiv@b
 20281  23F0  3F41               	moviw [1]fsr1
 20282  23F1  00E1               	movwf	___fldiv@b+1
 20283  23F2  3F42               	moviw [2]fsr1
 20284  23F3  00E2               	movwf	___fldiv@b+2
 20285  23F4  3F43               	moviw [3]fsr1
 20286  23F5  00E3               	movwf	___fldiv@b+3
 20287  23F6  25DA               	fcall	___fldiv
 20288  23F7  085F               	movf	?___fldiv+3,w
 20289  23F8  00CA               	movwf	___flmul@a+3
 20290  23F9  085E               	movf	?___fldiv+2,w
 20291  23FA  00C9               	movwf	___flmul@a+2
 20292  23FB  085D               	movf	?___fldiv+1,w
 20293  23FC  00C8               	movwf	___flmul@a+1
 20294  23FD  085C               	movf	?___fldiv,w
 20295  23FE  00C7               	movwf	___flmul@a
 20296  23FF  319E  2635  31A0   	fcall	___flmul
 20297  2402  0846               	movf	?___flmul+3,w
 20298  2403  0141               	movlb	1	; select bank1
 20299  2404  00C7               	movwf	(_checkChannelStatus$1894+3)^(0+128)
 20300  2405  0140               	movlb	0	; select bank0
 20301  2406  0845               	movf	?___flmul+2,w
 20302  2407  0141               	movlb	1	; select bank1
 20303  2408  00C6               	movwf	(_checkChannelStatus$1894+2)^(0+128)
 20304  2409  0140               	movlb	0	; select bank0
 20305  240A  0844               	movf	?___flmul+1,w
 20306  240B  0141               	movlb	1	; select bank1
 20307  240C  00C5               	movwf	(_checkChannelStatus$1894+1)^(0+128)
 20308  240D  0140               	movlb	0	; select bank0
 20309  240E  0843               	movf	?___flmul,w
 20310  240F  0141               	movlb	1	; select bank1
 20311  2410  00C4               	movwf	_checkChannelStatus$1894^(0+128)
 20312  2411                     l823:	
 20313  2411  0847               	movf	(_checkChannelStatus$1894+3)^(0+128),w
 20314  2412  00B3               	movwf	(___fltol@f1+3)^(0+128)
 20315  2413  0846               	movf	(_checkChannelStatus$1894+2)^(0+128),w
 20316  2414  00B2               	movwf	(___fltol@f1+2)^(0+128)
 20317  2415  0845               	movf	(_checkChannelStatus$1894+1)^(0+128),w
 20318  2416  00B1               	movwf	(___fltol@f1+1)^(0+128)
 20319  2417  0844               	movf	_checkChannelStatus$1894^(0+128),w
 20320  2418                     L19:	
 20321  2418  00B0               	movwf	___fltol@f1^(0+128)
 20322  2419  318F  27B5  31A0   	fcall	___fltol
 20323  241C  0830               	movf	?___fltol^(0+128),w
 20324  241D  00BA               	movwf	??_checkChannelStatus^(0+128)
 20325  241E  0850               	movf	checkChannelStatus@heater^(0+128),w
 20326  241F  3E14               	addlw	20
 20327  2420  00BB               	movwf	(??_checkChannelStatus+1)^(0+128)
 20328  2421  3000               	movlw	0
 20329  2422  3D51               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 20330  2423  00BC               	movwf	(??_checkChannelStatus+2)^(0+128)
 20331  2424  083B               	movf	(??_checkChannelStatus+1)^(0+128),w
 20332  2425  0086               	movwf	6
 20333  2426  083C               	movf	(??_checkChannelStatus+2)^(0+128),w
 20334  2427  0087               	movwf	7
 20335  2428  083A               	movf	??_checkChannelStatus^(0+128),w
 20336  2429                     L18:	
 20337  2429  0081               	movwf	1
 20338  242A                     l8434:	
 20339  242A  0141               	movlb	1	; select bank1
 20340  242B  3004               	movlw	4
 20341  242C  0ACF               	incf	checkChannelStatus@channel^(0+128),f
 20342  242D  024F               	subwf	checkChannelStatus@channel^(0+128),w
 20343  242E  1803               	btfsc	3,0
 20344  242F  0008               	return
 20345  2430  28C2               	goto	l8330
 20346  2431                     __end_of_checkChannelStatus:	
 20347  2431                     __ptext41:	
 20348 ;; *************** function _error *****************
 20349 ;; Defined at:
 20350 ;;		line 17 in file "error.c"
 20351 ;; Parameters:    Size  Location     Type
 20352 ;;  code            1    wreg     enum E7825
 20353 ;; Auto vars:     Size  Location     Type
 20354 ;;  code            1   10[BANK0 ] enum E7825
 20355 ;; Return value:  Size  Location     Type
 20356 ;;                  1    wreg      void 
 20357 ;; Registers used:
 20358 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20359 ;; Tracked objects:
 20360 ;;		On entry : 3A/1
 20361 ;;		On exit  : 3F/0
 20362 ;;		Unchanged: 0/0
 20363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20365 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20367 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20368 ;;Total ram usage:        1 bytes
 20369 ;; Hardware stack levels used:    1
 20370 ;; Hardware stack levels required when called:    4
 20371 ;; This function calls:
 20372 ;;		___awmod
 20373 ;; This function is called by:
 20374 ;;		_menu
 20375 ;;		_checkChannelStatus
 20376 ;;		_systemCheck
 20377 ;;		_checkSensor
 20378 ;; This function uses a non-reentrant model
 20379 ;;
 20380                           
 20381                           
 20382                           ;psect for function _error
 20383  2431                     _error:	
 20384                           
 20385                           ;incstack = 0
 20386                           ; Regs used in _error: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20387                           ;error@code stored from wreg
 20388  2431  0140               	movlb	0	; select bank0
 20389  2432  00AA               	movwf	error@code
 20390                           
 20391                           ;error.c: 17: void error(enum e_errorcode code);error.c: 18: {;error.c: 19:  errorMessag
      +                          eQueue[head] = code;
 20392  2433  0141               	movlb	1	; select bank1
 20393  2434  086D               	movf	_head^(0+128),w
 20394  2435  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 20395  2436  0086               	movwf	6
 20396  2437  3002               	movlw	2	; select bank4/5
 20397  2438  0087               	movwf	7
 20398  2439  0140               	movlb	0	; select bank0
 20399  243A  082A               	movf	error@code,w
 20400  243B  0081               	movwf	1
 20401                           
 20402                           ;error.c: 20:  head = (head + 1) % 10;
 20403  243C  0141               	movlb	1	; select bank1
 20404  243D  086D               	movf	_head^(0+128),w
 20405  243E  0140               	movlb	0	; select bank0
 20406  243F  00A6               	movwf	___awmod@dividend
 20407  2440  01A7               	clrf	___awmod@dividend+1
 20408  2441  0AA6               	incf	___awmod@dividend,f
 20409  2442  1903               	skipnz
 20410  2443  0AA7               	incf	___awmod@dividend+1,f
 20411  2444  300A               	movlw	10
 20412  2445  00A4               	movwf	___awmod@divisor
 20413  2446  01A5               	clrf	___awmod@divisor+1
 20414  2447  2757  31A0         	fcall	___awmod
 20415  2449  0824               	movf	?___awmod,w
 20416  244A  0141               	movlb	1	; select bank1
 20417  244B  00ED               	movwf	_head^(0+128)
 20418                           
 20419                           ;error.c: 21:  if (head == tail)
 20420  244C  0140               	movlb	0	; select bank0
 20421  244D  0668               	xorwf	_tail,w
 20422  244E  1D03               	skipz
 20423  244F  0008               	return
 20424                           
 20425                           ;error.c: 22:   tail = (tail + 1) % 10;
 20426  2450  0868               	movf	_tail,w
 20427  2451  00A6               	movwf	___awmod@dividend
 20428  2452  01A7               	clrf	___awmod@dividend+1
 20429  2453  0AA6               	incf	___awmod@dividend,f
 20430  2454  1903               	skipnz
 20431  2455  0AA7               	incf	___awmod@dividend+1,f
 20432  2456  300A               	movlw	10
 20433  2457  00A4               	movwf	___awmod@divisor
 20434  2458  01A5               	clrf	___awmod@divisor+1
 20435  2459  2757               	fcall	___awmod
 20436  245A  0824               	movf	?___awmod,w
 20437  245B  00E8               	movwf	_tail
 20438  245C  0008               	return
 20439  245D                     __end_of_error:	
 20440  245D                     __ptext39:	
 20441 ;; *************** function _setChannelSwitch *****************
 20442 ;; Defined at:
 20443 ;;		line 7 in file "io.c"
 20444 ;; Parameters:    Size  Location     Type
 20445 ;;  channel         1    wreg     unsigned char 
 20446 ;;  state           1   15[BANK0 ] unsigned char 
 20447 ;; Auto vars:     Size  Location     Type
 20448 ;;  channel         1   18[BANK0 ] unsigned char 
 20449 ;; Return value:  Size  Location     Type
 20450 ;;                  1    wreg      void 
 20451 ;; Registers used:
 20452 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 20453 ;; Tracked objects:
 20454 ;;		On entry : 3E/0
 20455 ;;		On exit  : 3F/0
 20456 ;;		Unchanged: 0/0
 20457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20458 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20459 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20460 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20461 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20462 ;;Total ram usage:        4 bytes
 20463 ;; Hardware stack levels used:    1
 20464 ;; Hardware stack levels required when called:    3
 20465 ;; This function calls:
 20466 ;;		Nothing
 20467 ;; This function is called by:
 20468 ;;		_checkChannelStatus
 20469 ;;		_systemCheck
 20470 ;;		_controller
 20471 ;; This function uses a non-reentrant model
 20472 ;;
 20473                           
 20474                           
 20475                           ;psect for function _setChannelSwitch
 20476  245D                     _setChannelSwitch:	
 20477                           
 20478                           ;incstack = 0
 20479                           ; Regs used in _setChannelSwitch: [wreg-fsr0h+status,2+status,0]
 20480                           ;setChannelSwitch@channel stored from wreg
 20481  245D  0140               	movlb	0	; select bank0
 20482  245E  00B2               	movwf	setChannelSwitch@channel
 20483                           
 20484                           ;io.c: 7: void setChannelSwitch(uint8_t channel, uint8_t state);io.c: 8: {;io.c: 9:  swi
      +                          tch(channel) {
 20485  245F  2C8D               	goto	l6068
 20486  2460                     l6056:	
 20487                           
 20488                           ;io.c: 11:   LATAbits.LATA0 = state;
 20489  2460  0C2F               	rrf	setChannelSwitch@state,w
 20490  2461  1C03               	skipc
 20491  2462  1018               	bcf	24,0	;volatile
 20492  2463  1803               	skipnc
 20493  2464  1418               	bsf	24,0	;volatile
 20494                           
 20495                           ;io.c: 12:   break;
 20496  2465  0008               	return
 20497  2466                     l6058:	
 20498                           
 20499                           ;io.c: 14:   LATAbits.LATA1 = state;
 20500  2466  0C2F               	rrf	setChannelSwitch@state,w
 20501  2467  1C03               	skipc
 20502  2468  1098               	bcf	24,1	;volatile
 20503  2469  1803               	skipnc
 20504  246A  1498               	bsf	24,1	;volatile
 20505                           
 20506                           ;io.c: 15:   break;
 20507  246B  0008               	return
 20508  246C                     l6060:	
 20509                           
 20510                           ;io.c: 17:   LATAbits.LATA2 = state;
 20511  246C  0C2F               	rrf	setChannelSwitch@state,w
 20512  246D  1C03               	skipc
 20513  246E  1118               	bcf	24,2	;volatile
 20514  246F  1803               	skipnc
 20515  2470  1518               	bsf	24,2	;volatile
 20516                           
 20517                           ;io.c: 18:   break;
 20518  2471  0008               	return
 20519  2472                     l6062:	
 20520                           
 20521                           ;io.c: 20:   LATAbits.LATA3 = state;
 20522  2472  0C2F               	rrf	setChannelSwitch@state,w
 20523  2473  1C03               	skipc
 20524  2474  1198               	bcf	24,3	;volatile
 20525  2475  1803               	skipnc
 20526  2476  1598               	bsf	24,3	;volatile
 20527                           
 20528                           ;io.c: 21:   break;
 20529  2477  0008               	return
 20530  2478                     l6064:	
 20531                           
 20532                           ;io.c: 23:   LATAbits.LATA0 = state;
 20533  2478  0C2F               	rrf	setChannelSwitch@state,w
 20534  2479  1C03               	skipc
 20535  247A  1018               	bcf	24,0	;volatile
 20536  247B  1803               	skipnc
 20537  247C  1418               	bsf	24,0	;volatile
 20538                           
 20539                           ;io.c: 24:   LATAbits.LATA1 = state;
 20540  247D  0C2F               	rrf	setChannelSwitch@state,w
 20541  247E  1C03               	skipc
 20542  247F  1098               	bcf	24,1	;volatile
 20543  2480  1803               	skipnc
 20544  2481  1498               	bsf	24,1	;volatile
 20545                           
 20546                           ;io.c: 25:   LATAbits.LATA2 = state;
 20547  2482  0C2F               	rrf	setChannelSwitch@state,w
 20548  2483  1C03               	skipc
 20549  2484  1118               	bcf	24,2	;volatile
 20550  2485  1803               	skipnc
 20551  2486  1518               	bsf	24,2	;volatile
 20552                           
 20553                           ;io.c: 26:   LATAbits.LATA3 = state;
 20554  2487  0C2F               	rrf	setChannelSwitch@state,w
 20555  2488  1C03               	skipc
 20556  2489  1198               	bcf	24,3	;volatile
 20557  248A  1803               	skipnc
 20558  248B  1598               	bsf	24,3	;volatile
 20559                           
 20560                           ;io.c: 27:   break;
 20561  248C  0008               	return
 20562  248D                     l6068:	
 20563  248D  0832               	movf	setChannelSwitch@channel,w
 20564  248E  00B0               	movwf	??_setChannelSwitch
 20565  248F  01B1               	clrf	??_setChannelSwitch+1
 20566                           
 20567                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20568                           ; Switch size 1, requested type "speed"
 20569                           ; Number of cases is 1, Range of values is 0 to 0
 20570                           ; switch strategies available:
 20571                           ; Name         Instructions Cycles
 20572                           ; simple_byte            4     3 (average)
 20573                           ; direct_byte            8     6 (fixed)
 20574                           ; jumptable            260     6 (fixed)
 20575                           ;	Chosen strategy is simple_byte
 20576  2490  0831               	movf	??_setChannelSwitch+1,w
 20577  2491  3A00               	xorlw	0	; case 0
 20578  2492  1903               	skipnz
 20579  2493  2C95               	goto	l8892
 20580  2494  2C78               	goto	l6064
 20581  2495                     l8892:	
 20582                           
 20583                           ; Switch size 1, requested type "speed"
 20584                           ; Number of cases is 4, Range of values is 0 to 3
 20585                           ; switch strategies available:
 20586                           ; Name         Instructions Cycles
 20587                           ; direct_byte           14     6 (fixed)
 20588                           ; simple_byte           13     7 (average)
 20589                           ; jumptable            260     6 (fixed)
 20590                           ;	Chosen strategy is direct_byte
 20591  2495  0830               	movf	??_setChannelSwitch,w
 20592  2496  0084               	movwf	4
 20593  2497  3004               	movlw	4
 20594  2498  0204               	subwf	4,w
 20595  2499  1803               	skipnc
 20596  249A  2C78               	goto	l6064
 20597  249B  3188               	movlp	high S8894
 20598  249C  3504               	lslf	4,w
 20599  249D  3E00               	addlw	low S8894
 20600  249E  0082               	movwf	2
 20601  249F  0008               	return
 20602  24A0                     __end_of_setChannelSwitch:	
 20603  24A0                     __ptext2:	
 20604 ;; *************** function _systemCheck *****************
 20605 ;; Defined at:
 20606 ;;		line 153 in file "system.c"
 20607 ;; Parameters:    Size  Location     Type
 20608 ;;		None
 20609 ;; Auto vars:     Size  Location     Type
 20610 ;;  str             3    0        unsigned char [3]
 20611 ;;  n               1    0        unsigned char 
 20612 ;; Return value:  Size  Location     Type
 20613 ;;                  1    wreg      void 
 20614 ;; Registers used:
 20615 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20616 ;; Tracked objects:
 20617 ;;		On entry : 3F/2
 20618 ;;		On exit  : 3E/0
 20619 ;;		Unchanged: 0/0
 20620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20623 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20624 ;;      Totals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20625 ;;Total ram usage:        4 bytes
 20626 ;; Hardware stack levels used:    1
 20627 ;; Hardware stack levels required when called:    5
 20628 ;; This function calls:
 20629 ;;		___fldiv
 20630 ;;		___flge
 20631 ;;		___flmul
 20632 ;;		___xxtofl
 20633 ;;		_error
 20634 ;;		_getAnalogValue
 20635 ;;		_setChannelSwitch
 20636 ;; This function is called by:
 20637 ;;		_main
 20638 ;; This function uses a non-reentrant model
 20639 ;;
 20640                           
 20641                           
 20642                           ;psect for function _systemCheck
 20643  24A0                     _systemCheck:	
 20644                           
 20645                           ;system.c: 155:  uint8_t n;;system.c: 156:  char str[3];;system.c: 160:  if (data.curren
      +                          t > 3.5) {
 20646                           
 20647                           ;incstack = 0
 20648                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20649  24A0  3040               	movlw	64
 20650  24A1  0141               	movlb	1	; select bank1
 20651  24A2  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20652  24A3  3060               	movlw	96
 20653  24A4  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20654  24A5  304A               	movlw	74
 20655  24A6  01AE               	clrf	(___flge@ff1+1)^(0+128)
 20656  24A7  01AD               	clrf	___flge@ff1^(0+128)
 20657  24A8  0086               	movwf	6
 20658  24A9  3027               	movlw	39
 20659  24AA  0087               	movwf	7
 20660  24AB  3155               	addfsr 1,21
 20661  24AC  3F40               	moviw [0]fsr1
 20662  24AD  00B1               	movwf	___flge@ff2^(0+128)
 20663  24AE  3F41               	moviw [1]fsr1
 20664  24AF  00B2               	movwf	(___flge@ff2+1)^(0+128)
 20665  24B0  3F42               	moviw [2]fsr1
 20666  24B1  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20667  24B2  3F43               	moviw [3]fsr1
 20668  24B3  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20669  24B4  318E  26B1  31A0   	fcall	___flge
 20670  24B7  1803               	btfsc	3,0
 20671  24B8  2D27               	goto	l8206
 20672                           
 20673                           ;system.c: 162:   setChannelSwitch(255, 0);
 20674  24B9  0140               	movlb	0	; select bank0
 20675  24BA  30FF               	movlw	255
 20676  24BB  01AF               	clrf	setChannelSwitch@state
 20677  24BC  245D  31A0         	fcall	_setChannelSwitch
 20678                           
 20679                           ;system.c: 163:   LATCbits.LATC3 = 0;
 20680  24BE  119A               	bcf	26,3	;volatile
 20681                           
 20682                           ;system.c: 165:   if (( (getAnalogValue(0b010001) * 5.0) / (1023.0 * 0.05 * 50.0) ) > 3.
      +                          5) {
 20683  24BF  3040               	movlw	64
 20684  24C0  0141               	movlb	1	; select bank1
 20685  24C1  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20686  24C2  3060               	movlw	96
 20687  24C3  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20688  24C4  3045               	movlw	69
 20689  24C5  01AE               	clrf	(___flge@ff1+1)^(0+128)
 20690  24C6  01AD               	clrf	___flge@ff1^(0+128)
 20691  24C7  0140               	movlb	0	; select bank0
 20692  24C8  00DF               	movwf	___fldiv@a+3
 20693  24C9  301F               	movlw	31
 20694  24CA  00DE               	movwf	___fldiv@a+2
 20695  24CB  30D8               	movlw	216
 20696  24CC  00DD               	movwf	___fldiv@a+1
 20697  24CD  3040               	movlw	64
 20698  24CE  01DC               	clrf	___fldiv@a
 20699  24CF  00C6               	movwf	___flmul@b+3
 20700  24D0  30A0               	movlw	160
 20701  24D1  00C5               	movwf	___flmul@b+2
 20702  24D2  3011               	movlw	17
 20703  24D3  01C4               	clrf	___flmul@b+1
 20704  24D4  01C3               	clrf	___flmul@b
 20705  24D5  2738               	fcall	_getAnalogValue
 20706  24D6  0824               	movf	?_getAnalogValue,w
 20707  24D7  0141               	movlb	1	; select bank1
 20708  24D8  00B9               	movwf	??_systemCheck^(0+128)
 20709  24D9  0140               	movlb	0	; select bank0
 20710  24DA  0825               	movf	?_getAnalogValue+1,w
 20711  24DB  0141               	movlb	1	; select bank1
 20712  24DC  00BA               	movwf	(??_systemCheck^(0+128)+1)
 20713  24DD  01BB               	clrf	(??_systemCheck^(0+128)+2)
 20714  24DE  01BC               	clrf	(??_systemCheck^(0+128)+3)
 20715  24DF  083C               	movf	(??_systemCheck+3)^(0+128),w
 20716  24E0  0140               	movlb	0	; select bank0
 20717  24E1  00B8               	movwf	___xxtofl@val+3
 20718  24E2  0141               	movlb	1	; select bank1
 20719  24E3  083B               	movf	(??_systemCheck+2)^(0+128),w
 20720  24E4  0140               	movlb	0	; select bank0
 20721  24E5  00B7               	movwf	___xxtofl@val+2
 20722  24E6  0141               	movlb	1	; select bank1
 20723  24E7  083A               	movf	(??_systemCheck+1)^(0+128),w
 20724  24E8  0140               	movlb	0	; select bank0
 20725  24E9  00B6               	movwf	___xxtofl@val+1
 20726  24EA  0141               	movlb	1	; select bank1
 20727  24EB  0839               	movf	??_systemCheck^(0+128),w
 20728  24EC  0140               	movlb	0	; select bank0
 20729  24ED  00B5               	movwf	___xxtofl@val
 20730  24EE  3000               	movlw	0
 20731  24EF  318F  2715  31A0   	fcall	___xxtofl
 20732  24F2  0838               	movf	?___xxtofl+3,w
 20733  24F3  00CA               	movwf	___flmul@a+3
 20734  24F4  0837               	movf	?___xxtofl+2,w
 20735  24F5  00C9               	movwf	___flmul@a+2
 20736  24F6  0836               	movf	?___xxtofl+1,w
 20737  24F7  00C8               	movwf	___flmul@a+1
 20738  24F8  0835               	movf	?___xxtofl,w
 20739  24F9  00C7               	movwf	___flmul@a
 20740  24FA  319E  2635  31A0   	fcall	___flmul
 20741  24FD  0846               	movf	?___flmul+3,w
 20742  24FE  00E3               	movwf	___fldiv@b+3
 20743  24FF  0845               	movf	?___flmul+2,w
 20744  2500  00E2               	movwf	___fldiv@b+2
 20745  2501  0844               	movf	?___flmul+1,w
 20746  2502  00E1               	movwf	___fldiv@b+1
 20747  2503  0843               	movf	?___flmul,w
 20748  2504  00E0               	movwf	___fldiv@b
 20749  2505  25DA               	fcall	___fldiv
 20750  2506  085F               	movf	?___fldiv+3,w
 20751  2507  0141               	movlb	1	; select bank1
 20752  2508  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20753  2509  0140               	movlb	0	; select bank0
 20754  250A  085E               	movf	?___fldiv+2,w
 20755  250B  0141               	movlb	1	; select bank1
 20756  250C  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20757  250D  0140               	movlb	0	; select bank0
 20758  250E  085D               	movf	?___fldiv+1,w
 20759  250F  0141               	movlb	1	; select bank1
 20760  2510  00B2               	movwf	(___flge@ff2+1)^(0+128)
 20761  2511  0140               	movlb	0	; select bank0
 20762  2512  085C               	movf	?___fldiv,w
 20763  2513  0141               	movlb	1	; select bank1
 20764  2514  00B1               	movwf	___flge@ff2^(0+128)
 20765  2515  318E  26B1  31A0   	fcall	___flge
 20766  2518  1803               	btfsc	3,0
 20767  2519  2D1C               	goto	l8200
 20768                           
 20769                           ;system.c: 168:    error(ERR_NUKED);
 20770  251A  300C               	movlw	12
 20771  251B  2D26               	goto	L3
 20772  251C                     l8200:	
 20773                           ;system.c: 169:   } else {
 20774                           
 20775                           
 20776                           ;system.c: 171:    if (! data.status.OVERCURRENT) {
 20777  251C  3073               	movlw	115
 20778  251D  0086               	movwf	6
 20779  251E  3027               	movlw	39
 20780  251F  0087               	movwf	7
 20781  2520  1901               	btfsc	1,2
 20782  2521  2D27               	goto	l8206
 20783                           
 20784                           ;system.c: 172:     data.status.OVERCURRENT = 1;
 20785  2522  3073               	movlw	115
 20786  2523  0086               	movwf	6
 20787  2524  300D               	movlw	13
 20788  2525  1501               	bsf	1,2
 20789  2526                     L3:	
 20790                           ;system.c: 173:     error(ERR_OVERCURRENT);
 20791                           
 20792  2526  2431               	fcall	_error
 20793  2527                     l8206:	
 20794                           
 20795                           ;system.c: 183:  if ((data.voltage > 13.8) || (data.voltage <= 11.0)) {
 20796  2527  3041               	movlw	65
 20797  2528  0141               	movlb	1	; select bank1
 20798  2529  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20799  252A  305C               	movlw	92
 20800  252B  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20801  252C  30CC               	movlw	204
 20802  252D  00AE               	movwf	(___flge@ff1+1)^(0+128)
 20803  252E  30CD               	movlw	205
 20804  252F  00AD               	movwf	___flge@ff1^(0+128)
 20805  2530  304A               	movlw	74
 20806  2531  0086               	movwf	6
 20807  2532  3027               	movlw	39
 20808  2533  0087               	movwf	7
 20809  2534  3151               	addfsr 1,17
 20810  2535  3F40               	moviw [0]fsr1
 20811  2536  00B1               	movwf	___flge@ff2^(0+128)
 20812  2537  3F41               	moviw [1]fsr1
 20813  2538  00B2               	movwf	(___flge@ff2+1)^(0+128)
 20814  2539  3F42               	moviw [2]fsr1
 20815  253A  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20816  253B  3F43               	moviw [3]fsr1
 20817  253C  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20818  253D  318E  26B1  31A0   	fcall	___flge
 20819  2540  1C03               	btfss	3,0
 20820  2541  2D5A               	goto	l8210
 20821  2542  3041               	movlw	65
 20822  2543  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20823  2544  3030               	movlw	48
 20824  2545  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20825  2546  304A               	movlw	74
 20826  2547  01AE               	clrf	(___flge@ff1+1)^(0+128)
 20827  2548  01AD               	clrf	___flge@ff1^(0+128)
 20828  2549  0086               	movwf	6
 20829  254A  3027               	movlw	39
 20830  254B  0087               	movwf	7
 20831  254C  3151               	addfsr 1,17
 20832  254D  3F40               	moviw [0]fsr1
 20833  254E  00B1               	movwf	___flge@ff2^(0+128)
 20834  254F  3F41               	moviw [1]fsr1
 20835  2550  00B2               	movwf	(___flge@ff2+1)^(0+128)
 20836  2551  3F42               	moviw [2]fsr1
 20837  2552  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20838  2553  3F43               	moviw [3]fsr1
 20839  2554  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20840  2555  318E  26B1  31A0   	fcall	___flge
 20841  2558  1C03               	btfss	3,0
 20842  2559  2D5C               	goto	l8212
 20843  255A                     l8210:	
 20844                           
 20845                           ;system.c: 184:   error(ERR_VOLT_CRIT);
 20846  255A  300E               	movlw	14
 20847  255B  2C31               	ljmp	_error
 20848  255C                     l8212:	
 20849                           ;system.c: 185:  } else if ((data.voltage > 13.0) && (data.voltage <= 13.8)) {
 20850                           
 20851  255C  3041               	movlw	65
 20852  255D  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20853  255E  3050               	movlw	80
 20854  255F  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20855  2560  304A               	movlw	74
 20856  2561  01AE               	clrf	(___flge@ff1+1)^(0+128)
 20857  2562  01AD               	clrf	___flge@ff1^(0+128)
 20858  2563  0086               	movwf	6
 20859  2564  3027               	movlw	39
 20860  2565  0087               	movwf	7
 20861  2566  3151               	addfsr 1,17
 20862  2567  3F40               	moviw [0]fsr1
 20863  2568  00B1               	movwf	___flge@ff2^(0+128)
 20864  2569  3F41               	moviw [1]fsr1
 20865  256A  00B2               	movwf	(___flge@ff2+1)^(0+128)
 20866  256B  3F42               	moviw [2]fsr1
 20867  256C  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20868  256D  3F43               	moviw [3]fsr1
 20869  256E  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20870  256F  318E  26B1  31A0   	fcall	___flge
 20871  2572  3041               	movlw	65
 20872  2573  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20873  2574  1803               	btfsc	3,0
 20874  2575  2D9B               	goto	L4
 20875  2576  305C               	movlw	92
 20876  2577  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20877  2578  30CC               	movlw	204
 20878  2579  00AE               	movwf	(___flge@ff1+1)^(0+128)
 20879  257A  30CD               	movlw	205
 20880  257B  00AD               	movwf	___flge@ff1^(0+128)
 20881  257C  304A               	movlw	74
 20882  257D  0086               	movwf	6
 20883  257E  3027               	movlw	39
 20884  257F  0087               	movwf	7
 20885  2580  3151               	addfsr 1,17
 20886  2581  3F40               	moviw [0]fsr1
 20887  2582  00B1               	movwf	___flge@ff2^(0+128)
 20888  2583  3F41               	moviw [1]fsr1
 20889  2584  00B2               	movwf	(___flge@ff2+1)^(0+128)
 20890  2585  3F42               	moviw [2]fsr1
 20891  2586  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20892  2587  3F43               	moviw [3]fsr1
 20893  2588  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20894  2589  318E  26B1  31A0   	fcall	___flge
 20895  258C  1C03               	btfss	3,0
 20896  258D  2D99               	goto	l8222
 20897                           
 20898                           ;system.c: 186:   if (! data.status.BAT_HIGH) {
 20899  258E  3073               	movlw	115
 20900  258F  0086               	movwf	6
 20901  2590  3027               	movlw	39
 20902  2591  0087               	movwf	7
 20903  2592  1881               	btfsc	1,1
 20904  2593  0008               	return
 20905                           
 20906                           ;system.c: 187:    data.status.BAT_HIGH = 1;
 20907  2594  3073               	movlw	115
 20908  2595  0086               	movwf	6
 20909  2596  3008               	movlw	8
 20910  2597  1481               	bsf	1,1
 20911                           
 20912                           ;system.c: 188:    error(WARN_VOLT_HIGH);
 20913  2598  2C31               	ljmp	_error
 20914  2599                     l8222:	
 20915  2599  3041               	movlw	65
 20916  259A  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20917  259B                     L4:	
 20918  259B  3030               	movlw	48
 20919  259C  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20920  259D  304A               	movlw	74
 20921  259E  01AE               	clrf	(___flge@ff1+1)^(0+128)
 20922  259F  01AD               	clrf	___flge@ff1^(0+128)
 20923  25A0  0086               	movwf	6
 20924  25A1  3027               	movlw	39
 20925  25A2  0087               	movwf	7
 20926  25A3  3151               	addfsr 1,17
 20927  25A4  3F40               	moviw [0]fsr1
 20928  25A5  00B1               	movwf	___flge@ff2^(0+128)
 20929  25A6  3F41               	moviw [1]fsr1
 20930  25A7  00B2               	movwf	(___flge@ff2+1)^(0+128)
 20931  25A8  3F42               	moviw [2]fsr1
 20932  25A9  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20933  25AA  3F43               	moviw [3]fsr1
 20934  25AB  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20935  25AC  318E  26B1  31A0   	fcall	___flge
 20936  25AF  1803               	btfsc	3,0
 20937  25B0  2DD3               	goto	l8232
 20938  25B1  3041               	movlw	65
 20939  25B2  00B0               	movwf	(___flge@ff1+3)^(0+128)
 20940  25B3  3036               	movlw	54
 20941  25B4  00AF               	movwf	(___flge@ff1+2)^(0+128)
 20942  25B5  3066               	movlw	102
 20943  25B6  00AE               	movwf	(___flge@ff1+1)^(0+128)
 20944  25B7  00AD               	movwf	___flge@ff1^(0+128)
 20945  25B8  304A               	movlw	74
 20946  25B9  0086               	movwf	6
 20947  25BA  3027               	movlw	39
 20948  25BB  0087               	movwf	7
 20949  25BC  3151               	addfsr 1,17
 20950  25BD  3F40               	moviw [0]fsr1
 20951  25BE  00B1               	movwf	___flge@ff2^(0+128)
 20952  25BF  3F41               	moviw [1]fsr1
 20953  25C0  00B2               	movwf	(___flge@ff2+1)^(0+128)
 20954  25C1  3F42               	moviw [2]fsr1
 20955  25C2  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20956  25C3  3F43               	moviw [3]fsr1
 20957  25C4  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20958  25C5  318E  26B1  31A0   	fcall	___flge
 20959                           
 20960                           ;system.c: 191:   if (! data.status.BAT_LOW) {
 20961  25C8  3073               	movlw	115
 20962  25C9  0086               	movwf	6
 20963  25CA  3027               	movlw	39
 20964  25CB  0087               	movwf	7
 20965  25CC  1C03               	btfss	3,0
 20966  25CD  2DD7               	goto	L5
 20967  25CE  1801               	btfsc	1,0
 20968  25CF  0008               	return
 20969                           
 20970                           ;system.c: 192:    data.status.BAT_LOW = 1;
 20971  25D0  3009               	movlw	9
 20972  25D1  1401               	bsf	1,0
 20973                           
 20974                           ;system.c: 193:    error(WARN_VOLT_LOW);
 20975  25D2  2C31               	ljmp	_error
 20976  25D3                     l8232:	
 20977                           
 20978                           ;system.c: 196:   data.status.BAT_HIGH = 0;
 20979  25D3  3073               	movlw	115
 20980  25D4  0086               	movwf	6
 20981  25D5  3027               	movlw	39
 20982  25D6  0087               	movwf	7
 20983  25D7                     L5:	
 20984  25D7  1081               	bcf	1,1
 20985                           
 20986                           ;system.c: 197:   data.status.BAT_LOW = 0;
 20987  25D8  1001               	bcf	1,0
 20988  25D9  0008               	return
 20989  25DA                     __end_of_systemCheck:	
 20990  25DA                     __ptext64:	
 20991 ;; *************** function ___fldiv *****************
 20992 ;; Defined at:
 20993 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 20994 ;; Parameters:    Size  Location     Type
 20995 ;;  a               4   60[BANK0 ] unsigned int 
 20996 ;;  b               4   64[BANK0 ] unsigned int 
 20997 ;; Auto vars:     Size  Location     Type
 20998 ;;  grs             4    7[BANK1 ] unsigned long 
 20999 ;;  rem             4    0[BANK1 ] unsigned long 
 21000 ;;  new_exp         2    5[BANK1 ] int 
 21001 ;;  aexp            1   12[BANK1 ] unsigned char 
 21002 ;;  bexp            1   11[BANK1 ] unsigned char 
 21003 ;;  sign            1    4[BANK1 ] unsigned char 
 21004 ;; Return value:  Size  Location     Type
 21005 ;;                  4   60[BANK0 ] unsigned char 
 21006 ;; Registers used:
 21007 ;;		wreg, status,2, status,0
 21008 ;; Tracked objects:
 21009 ;;		On entry : 3F/0
 21010 ;;		On exit  : 3F/0
 21011 ;;		Unchanged: 0/0
 21012 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21013 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21014 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21015 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21016 ;;      Totals:         0      12      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21017 ;;Total ram usage:       25 bytes
 21018 ;; Hardware stack levels used:    1
 21019 ;; Hardware stack levels required when called:    3
 21020 ;; This function calls:
 21021 ;;		Nothing
 21022 ;; This function is called by:
 21023 ;;		_checkChannelStatus
 21024 ;;		_systemCheck
 21025 ;;		_calcRequiredPower
 21026 ;;		_getAnalogValues
 21027 ;;		_channelThing
 21028 ;;		_ftoa
 21029 ;; This function uses a non-reentrant model
 21030 ;;
 21031                           
 21032                           
 21033                           ;psect for function ___fldiv
 21034  25DA                     ___fldiv:	
 21035                           
 21036                           ;incstack = 0
 21037                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 21038  25DA  0863               	movf	___fldiv@b+3,w
 21039  25DB  0141               	movlb	1	; select bank1
 21040  25DC  00A4               	movwf	___fldiv@sign^(0+128)
 21041  25DD  3080               	movlw	128
 21042  25DE  05A4               	andwf	___fldiv@sign^(0+128),f
 21043  25DF  0140               	movlb	0	; select bank0
 21044  25E0  3563               	lslf	___fldiv@b+3,w
 21045  25E1  0141               	movlb	1	; select bank1
 21046  25E2  00AB               	movwf	___fldiv@bexp^(0+128)
 21047  25E3  0140               	movlb	0	; select bank0
 21048  25E4  1FE2               	btfss	___fldiv@b+2,7
 21049  25E5  2DE8               	goto	l4938
 21050  25E6  0141               	movlb	1	; select bank1
 21051  25E7  142B               	bsf	___fldiv@bexp^(0+128),0
 21052  25E8                     l4938:	
 21053  25E8  0141               	movlb	1	; select bank1
 21054  25E9  082B               	movf	___fldiv@bexp^(0+128),w
 21055  25EA  1903               	btfsc	3,2
 21056  25EB  2DF6               	goto	l1462
 21057  25EC  0F2B               	incfsz	___fldiv@bexp^(0+128),w
 21058  25ED  2DF3               	goto	l1463
 21059  25EE  0140               	movlb	0	; select bank0
 21060  25EF  01E0               	clrf	___fldiv@b
 21061  25F0  01E1               	clrf	___fldiv@b+1
 21062  25F1  01E2               	clrf	___fldiv@b+2
 21063  25F2  01E3               	clrf	___fldiv@b+3
 21064  25F3                     l1463:	
 21065  25F3  0140               	movlb	0	; select bank0
 21066  25F4  17E2               	bsf	___fldiv@b+2,7
 21067  25F5  2DFA               	goto	L30
 21068  25F6                     l1462:	
 21069  25F6  0140               	movlb	0	; select bank0
 21070  25F7  01E0               	clrf	___fldiv@b
 21071  25F8  01E1               	clrf	___fldiv@b+1
 21072  25F9  01E2               	clrf	___fldiv@b+2
 21073  25FA                     L30:	
 21074  25FA  01E3               	clrf	___fldiv@b+3
 21075  25FB  085F               	movf	___fldiv@a+3,w
 21076  25FC  3980               	andlw	128
 21077  25FD  0141               	movlb	1	; select bank1
 21078  25FE  06A4               	xorwf	___fldiv@sign^(0+128),f
 21079  25FF  0140               	movlb	0	; select bank0
 21080  2600  355F               	lslf	___fldiv@a+3,w
 21081  2601  0141               	movlb	1	; select bank1
 21082  2602  00AC               	movwf	___fldiv@aexp^(0+128)
 21083  2603  0140               	movlb	0	; select bank0
 21084  2604  1FDE               	btfss	___fldiv@a+2,7
 21085  2605  2E08               	goto	l4952
 21086  2606  0141               	movlb	1	; select bank1
 21087  2607  142C               	bsf	___fldiv@aexp^(0+128),0
 21088  2608                     l4952:	
 21089  2608  0141               	movlb	1	; select bank1
 21090  2609  082C               	movf	___fldiv@aexp^(0+128),w
 21091  260A  1903               	btfsc	3,2
 21092  260B  2E16               	goto	l1466
 21093  260C  0F2C               	incfsz	___fldiv@aexp^(0+128),w
 21094  260D  2E13               	goto	l1467
 21095  260E  0140               	movlb	0	; select bank0
 21096  260F  01DC               	clrf	___fldiv@a
 21097  2610  01DD               	clrf	___fldiv@a+1
 21098  2611  01DE               	clrf	___fldiv@a+2
 21099  2612  01DF               	clrf	___fldiv@a+3
 21100  2613                     l1467:	
 21101  2613  0140               	movlb	0	; select bank0
 21102  2614  17DE               	bsf	___fldiv@a+2,7
 21103  2615  2E1A               	goto	L31
 21104  2616                     l1466:	
 21105  2616  0140               	movlb	0	; select bank0
 21106  2617  01DC               	clrf	___fldiv@a
 21107  2618  01DD               	clrf	___fldiv@a+1
 21108  2619  01DE               	clrf	___fldiv@a+2
 21109  261A                     L31:	
 21110  261A  01DF               	clrf	___fldiv@a+3
 21111  261B  085F               	movf	___fldiv@a+3,w
 21112  261C  045E               	iorwf	___fldiv@a+2,w
 21113  261D  045D               	iorwf	___fldiv@a+1,w
 21114  261E  045C               	iorwf	___fldiv@a,w
 21115  261F  1D03               	skipz
 21116  2620  2E36               	goto	l4972
 21117  2621  3080               	movlw	128
 21118  2622  01E0               	clrf	___fldiv@b
 21119  2623  01E1               	clrf	___fldiv@b+1
 21120  2624  01E2               	clrf	___fldiv@b+2
 21121  2625  01E3               	clrf	___fldiv@b+3
 21122  2626  04E2               	iorwf	___fldiv@b+2,f
 21123  2627  307F               	movlw	127
 21124  2628  04E3               	iorwf	___fldiv@b+3,f
 21125  2629                     L32:	
 21126  2629  0141               	movlb	1	; select bank1
 21127  262A  0824               	movf	___fldiv@sign^(0+128),w
 21128  262B  0140               	movlb	0	; select bank0
 21129  262C  04E3               	iorwf	___fldiv@b+3,f
 21130  262D  0863               	movf	___fldiv@b+3,w
 21131  262E  00DF               	movwf	?___fldiv+3
 21132  262F  0862               	movf	___fldiv@b+2,w
 21133  2630  00DE               	movwf	?___fldiv+2
 21134  2631  0861               	movf	___fldiv@b+1,w
 21135  2632  00DD               	movwf	?___fldiv+1
 21136  2633  0860               	movf	___fldiv@b,w
 21137  2634  00DC               	movwf	?___fldiv
 21138  2635  0008               	return
 21139  2636                     l4972:	
 21140  2636  0141               	movlb	1	; select bank1
 21141  2637  082B               	movf	___fldiv@bexp^(0+128),w
 21142  2638  1D03               	btfss	3,2
 21143  2639  2E40               	goto	l4980
 21144  263A  0140               	movlb	0	; select bank0
 21145  263B  01DC               	clrf	?___fldiv
 21146  263C  01DD               	clrf	?___fldiv+1
 21147  263D  01DE               	clrf	?___fldiv+2
 21148  263E  01DF               	clrf	?___fldiv+3
 21149  263F  0008               	return
 21150  2640                     l4980:	
 21151  2640  082B               	movf	___fldiv@bexp^(0+128),w
 21152  2641  00A5               	movwf	___fldiv@new_exp^(0+128)
 21153  2642  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
 21154  2643  082C               	movf	___fldiv@aexp^(0+128),w
 21155  2644  02A5               	subwf	___fldiv@new_exp^(0+128),f
 21156  2645  1C03               	skipc
 21157  2646  03A6               	decf	(___fldiv@new_exp+1)^(0+128),f
 21158  2647  307F               	movlw	127
 21159  2648  07A5               	addwf	___fldiv@new_exp^(0+128),f
 21160  2649  1803               	skipnc
 21161  264A  0AA6               	incf	(___fldiv@new_exp+1)^(0+128),f
 21162  264B  0140               	movlb	0	; select bank0
 21163  264C  0863               	movf	___fldiv@b+3,w
 21164  264D  0141               	movlb	1	; select bank1
 21165  264E  00A3               	movwf	(___fldiv@rem+3)^(0+128)
 21166  264F  0140               	movlb	0	; select bank0
 21167  2650  0862               	movf	___fldiv@b+2,w
 21168  2651  0141               	movlb	1	; select bank1
 21169  2652  00A2               	movwf	(___fldiv@rem+2)^(0+128)
 21170  2653  0140               	movlb	0	; select bank0
 21171  2654  0861               	movf	___fldiv@b+1,w
 21172  2655  0141               	movlb	1	; select bank1
 21173  2656  00A1               	movwf	(___fldiv@rem+1)^(0+128)
 21174  2657  0140               	movlb	0	; select bank0
 21175  2658  0860               	movf	___fldiv@b,w
 21176  2659  0141               	movlb	1	; select bank1
 21177  265A  00A0               	movwf	___fldiv@rem^(0+128)
 21178  265B  0140               	movlb	0	; select bank0
 21179  265C  01E0               	clrf	___fldiv@b
 21180  265D  01E1               	clrf	___fldiv@b+1
 21181  265E  01E2               	clrf	___fldiv@b+2
 21182  265F  01E3               	clrf	___fldiv@b+3
 21183  2660  0141               	movlb	1	; select bank1
 21184  2661  01A7               	clrf	___fldiv@grs^(0+128)
 21185  2662  01A8               	clrf	(___fldiv@grs+1)^(0+128)
 21186  2663  01A9               	clrf	(___fldiv@grs+2)^(0+128)
 21187  2664  01AA               	clrf	(___fldiv@grs+3)^(0+128)
 21188  2665  01AC               	clrf	___fldiv@aexp^(0+128)
 21189  2666                     l5006:	
 21190  2666  301A               	movlw	26
 21191  2667  022C               	subwf	___fldiv@aexp^(0+128),w
 21192  2668  1803               	btfsc	3,0
 21193  2669  2EAB               	goto	l5008
 21194  266A  082C               	movf	___fldiv@aexp^(0+128),w
 21195  266B  1903               	btfsc	3,2
 21196  266C  2E80               	goto	l4998
 21197  266D  35A0               	lslf	___fldiv@rem^(0+128),f
 21198  266E  0DA1               	rlf	(___fldiv@rem+1)^(0+128),f
 21199  266F  0DA2               	rlf	(___fldiv@rem+2)^(0+128),f
 21200  2670  0DA3               	rlf	(___fldiv@rem+3)^(0+128),f
 21201  2671  0140               	movlb	0	; select bank0
 21202  2672  35E0               	lslf	___fldiv@b,f
 21203  2673  0DE1               	rlf	___fldiv@b+1,f
 21204  2674  0DE2               	rlf	___fldiv@b+2,f
 21205  2675  0DE3               	rlf	___fldiv@b+3,f
 21206  2676  0141               	movlb	1	; select bank1
 21207  2677  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 21208  2678  2E7B               	goto	l4996
 21209  2679  0140               	movlb	0	; select bank0
 21210  267A  1460               	bsf	___fldiv@b,0
 21211  267B                     l4996:	
 21212  267B  0141               	movlb	1	; select bank1
 21213  267C  35A7               	lslf	___fldiv@grs^(0+128),f
 21214  267D  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 21215  267E  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 21216  267F  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 21217  2680                     l4998:	
 21218  2680  0140               	movlb	0	; select bank0
 21219  2681  085F               	movf	___fldiv@a+3,w
 21220  2682  0141               	movlb	1	; select bank1
 21221  2683  0223               	subwf	(___fldiv@rem+3)^(0+128),w
 21222  2684  1D03               	skipz
 21223  2685  2E96               	goto	u4485
 21224  2686  0140               	movlb	0	; select bank0
 21225  2687  085E               	movf	___fldiv@a+2,w
 21226  2688  0141               	movlb	1	; select bank1
 21227  2689  0222               	subwf	(___fldiv@rem+2)^(0+128),w
 21228  268A  1D03               	skipz
 21229  268B  2E96               	goto	u4485
 21230  268C  0140               	movlb	0	; select bank0
 21231  268D  085D               	movf	___fldiv@a+1,w
 21232  268E  0141               	movlb	1	; select bank1
 21233  268F  0221               	subwf	(___fldiv@rem+1)^(0+128),w
 21234  2690  1D03               	skipz
 21235  2691  2E96               	goto	u4485
 21236  2692  0140               	movlb	0	; select bank0
 21237  2693  085C               	movf	___fldiv@a,w
 21238  2694  0141               	movlb	1	; select bank1
 21239  2695  0220               	subwf	___fldiv@rem^(0+128),w
 21240  2696                     u4485:	
 21241  2696  1C03               	skipc
 21242  2697  2EA9               	goto	l5004
 21243  2698  172A               	bsf	(___fldiv@grs^(0+128)+3),6
 21244  2699  0140               	movlb	0	; select bank0
 21245  269A  085C               	movf	___fldiv@a,w
 21246  269B  0141               	movlb	1	; select bank1
 21247  269C  02A0               	subwf	___fldiv@rem^(0+128),f
 21248  269D  0140               	movlb	0	; select bank0
 21249  269E  085D               	movf	___fldiv@a+1,w
 21250  269F  0141               	movlb	1	; select bank1
 21251  26A0  3BA1               	subwfb	(___fldiv@rem+1)^(0+128),f
 21252  26A1  0140               	movlb	0	; select bank0
 21253  26A2  085E               	movf	___fldiv@a+2,w
 21254  26A3  0141               	movlb	1	; select bank1
 21255  26A4  3BA2               	subwfb	(___fldiv@rem+2)^(0+128),f
 21256  26A5  0140               	movlb	0	; select bank0
 21257  26A6  085F               	movf	___fldiv@a+3,w
 21258  26A7  0141               	movlb	1	; select bank1
 21259  26A8  3BA3               	subwfb	(___fldiv@rem+3)^(0+128),f
 21260  26A9                     l5004:	
 21261  26A9  0AAC               	incf	___fldiv@aexp^(0+128),f
 21262  26AA  2E66               	goto	l5006
 21263  26AB                     l5008:	
 21264  26AB  0823               	movf	(___fldiv@rem+3)^(0+128),w
 21265  26AC  0422               	iorwf	(___fldiv@rem+2)^(0+128),w
 21266  26AD  0421               	iorwf	(___fldiv@rem+1)^(0+128),w
 21267  26AE  0420               	iorwf	___fldiv@rem^(0+128),w
 21268  26AF  1D03               	btfss	3,2
 21269  26B0  1427               	bsf	___fldiv@grs^(0+128),0
 21270  26B1                     l5022:	
 21271  26B1  0140               	movlb	0	; select bank0
 21272  26B2  1BE2               	btfsc	___fldiv@b+2,7
 21273  26B3  2EC7               	goto	l5024
 21274  26B4  35E0               	lslf	___fldiv@b,f
 21275  26B5  0DE1               	rlf	___fldiv@b+1,f
 21276  26B6  0DE2               	rlf	___fldiv@b+2,f
 21277  26B7  0DE3               	rlf	___fldiv@b+3,f
 21278  26B8  0141               	movlb	1	; select bank1
 21279  26B9  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 21280  26BA  2EBD               	goto	l5018
 21281  26BB  0140               	movlb	0	; select bank0
 21282  26BC  1460               	bsf	___fldiv@b,0
 21283  26BD                     l5018:	
 21284  26BD  0141               	movlb	1	; select bank1
 21285  26BE  30FF               	movlw	-1
 21286  26BF  35A7               	lslf	___fldiv@grs^(0+128),f
 21287  26C0  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 21288  26C1  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 21289  26C2  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 21290  26C3  07A5               	addwf	___fldiv@new_exp^(0+128),f
 21291  26C4  1C03               	skipc
 21292  26C5  03A6               	decf	(___fldiv@new_exp+1)^(0+128),f
 21293  26C6  2EB1               	goto	l5022
 21294  26C7                     l5024:	
 21295  26C7  0141               	movlb	1	; select bank1
 21296  26C8  01AC               	clrf	___fldiv@aexp^(0+128)
 21297  26C9  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 21298  26CA  2EE5               	goto	l5034
 21299  26CB  0827               	movf	___fldiv@grs^(0+128),w
 21300  26CC  0140               	movlb	0	; select bank0
 21301  26CD  00E4               	movwf	??___fldiv
 21302  26CE  0141               	movlb	1	; select bank1
 21303  26CF  0828               	movf	(___fldiv@grs+1)^(0+128),w
 21304  26D0  0140               	movlb	0	; select bank0
 21305  26D1  00E5               	movwf	??___fldiv+1
 21306  26D2  0141               	movlb	1	; select bank1
 21307  26D3  0829               	movf	(___fldiv@grs+2)^(0+128),w
 21308  26D4  0140               	movlb	0	; select bank0
 21309  26D5  00E6               	movwf	??___fldiv+2
 21310  26D6  307F               	movlw	127
 21311  26D7  0141               	movlb	1	; select bank1
 21312  26D8  052A               	andwf	(___fldiv@grs+3)^(0+128),w
 21313  26D9  0140               	movlb	0	; select bank0
 21314  26DA  00E7               	movwf	??___fldiv+3
 21315  26DB  0466               	iorwf	??___fldiv+2,w
 21316  26DC  0465               	iorwf	??___fldiv+1,w
 21317  26DD  0464               	iorwf	??___fldiv,w
 21318  26DE  1903               	skipnz
 21319  26DF  1860               	btfsc	___fldiv@b,0
 21320  26E0  2EE2               	goto	l5030
 21321  26E1  2EE5               	goto	l5034
 21322  26E2                     l5030:	
 21323  26E2  0141               	movlb	1	; select bank1
 21324  26E3  01AC               	clrf	___fldiv@aexp^(0+128)
 21325  26E4  0AAC               	incf	___fldiv@aexp^(0+128),f
 21326  26E5                     l5034:	
 21327  26E5  0141               	movlb	1	; select bank1
 21328  26E6  082C               	movf	___fldiv@aexp^(0+128),w
 21329  26E7  1903               	btfsc	3,2
 21330  26E8  2EFA               	goto	l5044
 21331  26E9  3001               	movlw	1
 21332  26EA  0140               	movlb	0	; select bank0
 21333  26EB  07E0               	addwf	___fldiv@b,f
 21334  26EC  3000               	movlw	0
 21335  26ED  3DE1               	addwfc	___fldiv@b+1,f
 21336  26EE  3DE2               	addwfc	___fldiv@b+2,f
 21337  26EF  3DE3               	addwfc	___fldiv@b+3,f
 21338  26F0  1C63               	btfss	___fldiv@b+3,0
 21339  26F1  2EFA               	goto	l5044
 21340  26F2  37E3               	asrf	___fldiv@b+3,f
 21341  26F3  0CE2               	rrf	___fldiv@b+2,f
 21342  26F4  0CE1               	rrf	___fldiv@b+1,f
 21343  26F5  0CE0               	rrf	___fldiv@b,f
 21344  26F6  0141               	movlb	1	; select bank1
 21345  26F7  0AA5               	incf	___fldiv@new_exp^(0+128),f
 21346  26F8  1903               	skipnz
 21347  26F9  0AA6               	incf	(___fldiv@new_exp+1)^(0+128),f
 21348  26FA                     l5044:	
 21349  26FA  0141               	movlb	1	; select bank1
 21350  26FB  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 21351  26FC  3A80               	xorlw	128
 21352  26FD  0140               	movlb	0	; select bank0
 21353  26FE  00E4               	movwf	??___fldiv
 21354  26FF  3080               	movlw	128
 21355  2700  0264               	subwf	??___fldiv,w
 21356  2701  1D03               	skipz
 21357  2702  2F06               	goto	u4585
 21358  2703  30FF               	movlw	255
 21359  2704  0141               	movlb	1	; select bank1
 21360  2705  0225               	subwf	___fldiv@new_exp^(0+128),w
 21361  2706                     u4585:	
 21362  2706  1C03               	skipc
 21363  2707  2F11               	goto	l1489
 21364  2708  30FF               	movlw	255
 21365  2709  0141               	movlb	1	; select bank1
 21366  270A  00A5               	movwf	___fldiv@new_exp^(0+128)
 21367  270B  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
 21368  270C  0140               	movlb	0	; select bank0
 21369  270D  01E0               	clrf	___fldiv@b
 21370  270E  01E1               	clrf	___fldiv@b+1
 21371  270F  01E2               	clrf	___fldiv@b+2
 21372  2710  01E3               	clrf	___fldiv@b+3
 21373  2711                     l1489:	
 21374  2711  0141               	movlb	1	; select bank1
 21375  2712  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 21376  2713  3A80               	xorlw	128
 21377  2714  0140               	movlb	0	; select bank0
 21378  2715  00E4               	movwf	??___fldiv
 21379  2716  3080               	movlw	128
 21380  2717  0264               	subwf	??___fldiv,w
 21381  2718  1D03               	skipz
 21382  2719  2F1D               	goto	u4595
 21383  271A  3001               	movlw	1
 21384  271B  0141               	movlb	1	; select bank1
 21385  271C  0225               	subwf	___fldiv@new_exp^(0+128),w
 21386  271D                     u4595:	
 21387  271D  1803               	skipnc
 21388  271E  2F29               	goto	l5054
 21389  271F  0141               	movlb	1	; select bank1
 21390  2720  01A5               	clrf	___fldiv@new_exp^(0+128)
 21391  2721  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
 21392  2722  0140               	movlb	0	; select bank0
 21393  2723  01E0               	clrf	___fldiv@b
 21394  2724  01E1               	clrf	___fldiv@b+1
 21395  2725  01E2               	clrf	___fldiv@b+2
 21396  2726  01E3               	clrf	___fldiv@b+3
 21397  2727  0141               	movlb	1	; select bank1
 21398  2728  01A4               	clrf	___fldiv@sign^(0+128)
 21399  2729                     l5054:	
 21400  2729  0141               	movlb	1	; select bank1
 21401  272A  0825               	movf	___fldiv@new_exp^(0+128),w
 21402  272B  00AB               	movwf	___fldiv@bexp^(0+128)
 21403  272C  1C2B               	btfss	___fldiv@bexp^(0+128),0
 21404  272D  2F31               	goto	l1491
 21405  272E  0140               	movlb	0	; select bank0
 21406  272F  17E2               	bsf	___fldiv@b+2,7
 21407  2730  2F33               	goto	l5060
 21408  2731                     l1491:	
 21409  2731  0140               	movlb	0	; select bank0
 21410  2732  13E2               	bcf	___fldiv@b+2,7
 21411  2733                     l5060:	
 21412  2733  0141               	movlb	1	; select bank1
 21413  2734  362B               	lsrf	___fldiv@bexp^(0+128),w
 21414  2735  0140               	movlb	0	; select bank0
 21415  2736  00E3               	movwf	___fldiv@b+3
 21416  2737  2E29               	goto	L32
 21417  2738                     __end_of___fldiv:	
 21418  2738                     __ptext40:	
 21419 ;; *************** function _getAnalogValue *****************
 21420 ;; Defined at:
 21421 ;;		line 34 in file "io.c"
 21422 ;; Parameters:    Size  Location     Type
 21423 ;;  channel         1    wreg     unsigned char 
 21424 ;; Auto vars:     Size  Location     Type
 21425 ;;  channel         1    7[BANK0 ] unsigned char 
 21426 ;; Return value:  Size  Location     Type
 21427 ;;                  2    4[BANK0 ] unsigned short 
 21428 ;; Registers used:
 21429 ;;		wreg, status,2, status,0
 21430 ;; Tracked objects:
 21431 ;;		On entry : 0/0
 21432 ;;		On exit  : 3F/0
 21433 ;;		Unchanged: 0/0
 21434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21435 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21436 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21437 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21438 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21439 ;;Total ram usage:        4 bytes
 21440 ;; Hardware stack levels used:    1
 21441 ;; Hardware stack levels required when called:    3
 21442 ;; This function calls:
 21443 ;;		Nothing
 21444 ;; This function is called by:
 21445 ;;		_checkChannelStatus
 21446 ;;		_systemCheck
 21447 ;;		_getAnalogValues
 21448 ;; This function uses a non-reentrant model
 21449 ;;
 21450                           
 21451                           
 21452                           ;psect for function _getAnalogValue
 21453  2738                     _getAnalogValue:	
 21454                           
 21455                           ;incstack = 0
 21456                           ; Regs used in _getAnalogValue: [wreg+status,2+status,0]
 21457                           ;getAnalogValue@channel stored from wreg
 21458  2738  0140               	movlb	0	; select bank0
 21459  2739  00A7               	movwf	getAnalogValue@channel
 21460                           
 21461                           ;io.c: 34: uint16_t getAnalogValue(uint8_t channel);io.c: 35: {;io.c: 36:  ADCON0bits.CH
      +                          S = channel;
 21462  273A  00A6               	movwf	??_getAnalogValue
 21463  273B  0DA6               	rlf	??_getAnalogValue,f
 21464  273C  0DA6               	rlf	??_getAnalogValue,f
 21465  273D  0141               	movlb	1	; select bank1
 21466  273E  081D               	movf	29,w	;volatile
 21467  273F  0140               	movlb	0	; select bank0
 21468  2740  0626               	xorwf	??_getAnalogValue,w
 21469  2741  3903               	andlw	-253
 21470  2742  0626               	xorwf	??_getAnalogValue,w
 21471  2743  0141               	movlb	1	; select bank1
 21472  2744  009D               	movwf	29	;volatile
 21473                           
 21474                           ;io.c: 37:  _delay((unsigned long)((5)*(4000000UL/4000000.0)));
 21475  2745  3200               	nop2	;2 cycle nop
 21476  2746  3200               	nop2	;2 cycle nop
 21477  2747  0000               	nop
 21478                           
 21479                           ;io.c: 38:  ADCON0bits.GO = 1;
 21480  2748  0141               	movlb	1	; select bank1
 21481  2749  149D               	bsf	29,1	;volatile
 21482  274A                     l729:	
 21483                           ;io.c: 39:  while (ADCON0bits.GO);
 21484                           
 21485  274A  189D               	btfsc	29,1	;volatile
 21486  274B  2F4A               	goto	l729
 21487                           
 21488                           ;io.c: 40:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 21489  274C  081C               	movf	28,w	;volatile
 21490  274D  0140               	movlb	0	; select bank0
 21491  274E  00A5               	movwf	?_getAnalogValue+1
 21492  274F  01A4               	clrf	?_getAnalogValue
 21493  2750  0141               	movlb	1	; select bank1
 21494  2751  081B               	movf	27,w	;volatile
 21495  2752  0140               	movlb	0	; select bank0
 21496  2753  07A4               	addwf	?_getAnalogValue,f
 21497  2754  1803               	skipnc
 21498  2755  0AA5               	incf	?_getAnalogValue+1,f
 21499  2756  0008               	return
 21500  2757                     __end_of_getAnalogValue:	
 21501  2757                     __ptext42:	
 21502 ;; *************** function ___awmod *****************
 21503 ;; Defined at:
 21504 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 21505 ;; Parameters:    Size  Location     Type
 21506 ;;  divisor         2    4[BANK0 ] int 
 21507 ;;  dividend        2    6[BANK0 ] int 
 21508 ;; Auto vars:     Size  Location     Type
 21509 ;;  sign            1    9[BANK0 ] unsigned char 
 21510 ;;  counter         1    8[BANK0 ] unsigned char 
 21511 ;; Return value:  Size  Location     Type
 21512 ;;                  2    4[BANK0 ] int 
 21513 ;; Registers used:
 21514 ;;		wreg, status,2, status,0
 21515 ;; Tracked objects:
 21516 ;;		On entry : 3F/0
 21517 ;;		On exit  : 3F/0
 21518 ;;		Unchanged: 0/0
 21519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21520 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21521 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21522 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21523 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21524 ;;Total ram usage:        6 bytes
 21525 ;; Hardware stack levels used:    1
 21526 ;; Hardware stack levels required when called:    3
 21527 ;; This function calls:
 21528 ;;		Nothing
 21529 ;; This function is called by:
 21530 ;;		_error
 21531 ;;		_viewErrorMessage
 21532 ;; This function uses a non-reentrant model
 21533 ;;
 21534                           
 21535                           
 21536                           ;psect for function ___awmod
 21537  2757                     ___awmod:	
 21538                           
 21539                           ;incstack = 0
 21540                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 21541  2757  01A9               	clrf	___awmod@sign
 21542  2758  1FA7               	btfss	___awmod@dividend+1,7
 21543  2759  2F61               	goto	l5518
 21544  275A  09A6               	comf	___awmod@dividend,f
 21545  275B  09A7               	comf	___awmod@dividend+1,f
 21546  275C  0AA6               	incf	___awmod@dividend,f
 21547  275D  1903               	skipnz
 21548  275E  0AA7               	incf	___awmod@dividend+1,f
 21549  275F  01A9               	clrf	___awmod@sign
 21550  2760  0AA9               	incf	___awmod@sign,f
 21551  2761                     l5518:	
 21552  2761  1FA5               	btfss	___awmod@divisor+1,7
 21553  2762  2F68               	goto	l5522
 21554  2763  09A4               	comf	___awmod@divisor,f
 21555  2764  09A5               	comf	___awmod@divisor+1,f
 21556  2765  0AA4               	incf	___awmod@divisor,f
 21557  2766  1903               	skipnz
 21558  2767  0AA5               	incf	___awmod@divisor+1,f
 21559  2768                     l5522:	
 21560  2768  0824               	movf	___awmod@divisor,w
 21561  2769  0425               	iorwf	___awmod@divisor+1,w
 21562  276A  1903               	btfsc	3,2
 21563  276B  2F83               	goto	l5538
 21564  276C  01A8               	clrf	___awmod@counter
 21565  276D                     L23:	
 21566  276D  0AA8               	incf	___awmod@counter,f
 21567  276E  1BA5               	btfsc	___awmod@divisor+1,7
 21568  276F  2F73               	goto	l5530
 21569  2770  35A4               	lslf	___awmod@divisor,f
 21570  2771  0DA5               	rlf	___awmod@divisor+1,f
 21571  2772  2F6D               	goto	L23
 21572  2773                     l5530:	
 21573  2773  0825               	movf	___awmod@divisor+1,w
 21574  2774  0227               	subwf	___awmod@dividend+1,w
 21575  2775  1D03               	skipz
 21576  2776  2F79               	goto	u5295
 21577  2777  0824               	movf	___awmod@divisor,w
 21578  2778  0226               	subwf	___awmod@dividend,w
 21579  2779                     u5295:	
 21580  2779  1C03               	skipc
 21581  277A  2F7F               	goto	l5534
 21582  277B  0824               	movf	___awmod@divisor,w
 21583  277C  02A6               	subwf	___awmod@dividend,f
 21584  277D  0825               	movf	___awmod@divisor+1,w
 21585  277E  3BA7               	subwfb	___awmod@dividend+1,f
 21586  277F                     l5534:	
 21587  277F  36A5               	lsrf	___awmod@divisor+1,f
 21588  2780  0CA4               	rrf	___awmod@divisor,f
 21589  2781  0BA8               	decfsz	___awmod@counter,f
 21590  2782  2F73               	goto	l5530
 21591  2783                     l5538:	
 21592  2783  0829               	movf	___awmod@sign,w
 21593  2784  1903               	btfsc	3,2
 21594  2785  2F8B               	goto	l5542
 21595  2786  09A6               	comf	___awmod@dividend,f
 21596  2787  09A7               	comf	___awmod@dividend+1,f
 21597  2788  0AA6               	incf	___awmod@dividend,f
 21598  2789  1903               	skipnz
 21599  278A  0AA7               	incf	___awmod@dividend+1,f
 21600  278B                     l5542:	
 21601  278B  0827               	movf	___awmod@dividend+1,w
 21602  278C  00A5               	movwf	?___awmod+1
 21603  278D  0826               	movf	___awmod@dividend,w
 21604  278E  00A4               	movwf	?___awmod
 21605  278F  0008               	return
 21606  2790                     __end_of___awmod:	
 21607  2790                     __ptext43:	
 21608 ;; *************** function _ema *****************
 21609 ;; Defined at:
 21610 ;;		line 64 in file "common.c"
 21611 ;; Parameters:    Size  Location     Type
 21612 ;;  in              2   16[BANK0 ] unsigned short 
 21613 ;;  average         2   18[BANK0 ] unsigned short 
 21614 ;;  alpha           4   20[BANK0 ] unsigned long 
 21615 ;; Auto vars:     Size  Location     Type
 21616 ;;  tmp0            4   28[BANK0 ] unsigned long 
 21617 ;; Return value:  Size  Location     Type
 21618 ;;                  2   16[BANK0 ] unsigned short 
 21619 ;; Registers used:
 21620 ;;		wreg, status,2, status,0, pclath, cstack
 21621 ;; Tracked objects:
 21622 ;;		On entry : 3F/0
 21623 ;;		On exit  : 3F/0
 21624 ;;		Unchanged: 0/0
 21625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21626 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21627 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21628 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21629 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21630 ;;Total ram usage:       16 bytes
 21631 ;; Hardware stack levels used:    1
 21632 ;; Hardware stack levels required when called:    4
 21633 ;; This function calls:
 21634 ;;		___lmul
 21635 ;; This function is called by:
 21636 ;;		_checkChannelStatus
 21637 ;;		_getAnalogValues
 21638 ;; This function uses a non-reentrant model
 21639 ;;
 21640                           
 21641                           
 21642                           ;psect for function _ema
 21643  2790                     _ema:	
 21644                           
 21645                           ;common.c: 64: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 65:
      +                           {;common.c: 66:  uint32_t tmp0;;common.c: 67:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 21646                           
 21647                           ;incstack = 0
 21648                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 21649  2790  0830               	movf	ema@in,w
 21650  2791  00A4               	movwf	___lmul@multiplier
 21651  2792  0831               	movf	ema@in+1,w
 21652  2793  00A5               	movwf	___lmul@multiplier+1
 21653  2794  01A6               	clrf	___lmul@multiplier+2
 21654  2795  01A7               	clrf	___lmul@multiplier+3
 21655  2796  0837               	movf	ema@alpha+3,w
 21656  2797  00AB               	movwf	___lmul@multiplicand+3
 21657  2798  0836               	movf	ema@alpha+2,w
 21658  2799  00AA               	movwf	___lmul@multiplicand+2
 21659  279A  0835               	movf	ema@alpha+1,w
 21660  279B  00A9               	movwf	___lmul@multiplicand+1
 21661  279C  0834               	movf	ema@alpha,w
 21662  279D  00A8               	movwf	___lmul@multiplicand
 21663  279E  27DB  31A0         	fcall	___lmul
 21664  27A0  0827               	movf	?___lmul+3,w
 21665  27A1  00BF               	movwf	ema@tmp0+3
 21666  27A2  0826               	movf	?___lmul+2,w
 21667  27A3  00BE               	movwf	ema@tmp0+2
 21668  27A4  0825               	movf	?___lmul+1,w
 21669  27A5  00BD               	movwf	ema@tmp0+1
 21670  27A6  0824               	movf	?___lmul,w
 21671  27A7  00BC               	movwf	ema@tmp0
 21672  27A8  3001               	movlw	1
 21673  27A9  01AB               	clrf	___lmul@multiplicand+3
 21674  27AA  00AA               	movwf	___lmul@multiplicand+2
 21675  27AB  01A9               	clrf	___lmul@multiplicand+1
 21676  27AC  01A8               	clrf	___lmul@multiplicand
 21677  27AD  0834               	movf	ema@alpha,w
 21678  27AE  02A8               	subwf	___lmul@multiplicand,f
 21679  27AF  0835               	movf	ema@alpha+1,w
 21680  27B0  3BA9               	subwfb	___lmul@multiplicand+1,f
 21681  27B1  0836               	movf	ema@alpha+2,w
 21682  27B2  3BAA               	subwfb	___lmul@multiplicand+2,f
 21683  27B3  0837               	movf	ema@alpha+3,w
 21684  27B4  3BAB               	subwfb	___lmul@multiplicand+3,f
 21685  27B5  0832               	movf	ema@average,w
 21686  27B6  00A4               	movwf	___lmul@multiplier
 21687  27B7  0833               	movf	ema@average+1,w
 21688  27B8  00A5               	movwf	___lmul@multiplier+1
 21689  27B9  01A6               	clrf	___lmul@multiplier+2
 21690  27BA  01A7               	clrf	___lmul@multiplier+3
 21691  27BB  27DB               	fcall	___lmul
 21692  27BC  0824               	movf	?___lmul,w
 21693  27BD  07BC               	addwf	ema@tmp0,f
 21694  27BE  0825               	movf	?___lmul+1,w
 21695  27BF  3DBD               	addwfc	ema@tmp0+1,f
 21696  27C0  0826               	movf	?___lmul+2,w
 21697  27C1  3DBE               	addwfc	ema@tmp0+2,f
 21698  27C2  0827               	movf	?___lmul+3,w
 21699  27C3  3DBF               	addwfc	ema@tmp0+3,f
 21700                           
 21701                           ;common.c: 68:  return(tmp0 + 32768) / 65536;
 21702  27C4  3080               	movlw	128
 21703  27C5  01B8               	clrf	??_ema
 21704  27C6  00B9               	movwf	??_ema+1
 21705  27C7  01BA               	clrf	??_ema+2
 21706  27C8  01BB               	clrf	??_ema+3
 21707  27C9  083C               	movf	ema@tmp0,w
 21708  27CA  07B8               	addwf	??_ema,f
 21709  27CB  083D               	movf	ema@tmp0+1,w
 21710  27CC  3DB9               	addwfc	??_ema+1,f
 21711  27CD  083E               	movf	ema@tmp0+2,w
 21712  27CE  3DBA               	addwfc	??_ema+2,f
 21713  27CF  083F               	movf	ema@tmp0+3,w
 21714  27D0  3DBB               	addwfc	??_ema+3,f
 21715  27D1  083A               	movf	??_ema+2,w
 21716  27D2  00B8               	movwf	??_ema
 21717  27D3  083B               	movf	??_ema+3,w
 21718  27D4  00B9               	movwf	??_ema+1
 21719  27D5  01BA               	clrf	??_ema+2
 21720  27D6  01BB               	clrf	??_ema+3
 21721  27D7  00B1               	movwf	?_ema+1
 21722  27D8  0838               	movf	??_ema,w
 21723  27D9  00B0               	movwf	?_ema
 21724  27DA  0008               	return
 21725  27DB                     __end_of_ema:	
 21726  27DB                     __ptext44:	
 21727 ;; *************** function ___lmul *****************
 21728 ;; Defined at:
 21729 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 21730 ;; Parameters:    Size  Location     Type
 21731 ;;  multiplier      4    4[BANK0 ] unsigned long 
 21732 ;;  multiplicand    4    8[BANK0 ] unsigned long 
 21733 ;; Auto vars:     Size  Location     Type
 21734 ;;  product         4   12[BANK0 ] unsigned long 
 21735 ;; Return value:  Size  Location     Type
 21736 ;;                  4    4[BANK0 ] unsigned long 
 21737 ;; Registers used:
 21738 ;;		wreg, status,2, status,0
 21739 ;; Tracked objects:
 21740 ;;		On entry : 3F/0
 21741 ;;		On exit  : 3F/0
 21742 ;;		Unchanged: 0/0
 21743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21744 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21745 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21746 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21747 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21748 ;;Total ram usage:       12 bytes
 21749 ;; Hardware stack levels used:    1
 21750 ;; Hardware stack levels required when called:    3
 21751 ;; This function calls:
 21752 ;;		Nothing
 21753 ;; This function is called by:
 21754 ;;		_ema
 21755 ;; This function uses a non-reentrant model
 21756 ;;
 21757                           
 21758                           
 21759                           ;psect for function ___lmul
 21760  27DB                     ___lmul:	
 21761                           
 21762                           ;incstack = 0
 21763                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 21764  27DB  01AC               	clrf	___lmul@product
 21765  27DC  01AD               	clrf	___lmul@product+1
 21766  27DD  01AE               	clrf	___lmul@product+2
 21767  27DE  01AF               	clrf	___lmul@product+3
 21768  27DF                     l1117:	
 21769  27DF  1C24               	btfss	___lmul@multiplier,0
 21770  27E0  2FE9               	goto	l5458
 21771  27E1  0828               	movf	___lmul@multiplicand,w
 21772  27E2  07AC               	addwf	___lmul@product,f
 21773  27E3  0829               	movf	___lmul@multiplicand+1,w
 21774  27E4  3DAD               	addwfc	___lmul@product+1,f
 21775  27E5  082A               	movf	___lmul@multiplicand+2,w
 21776  27E6  3DAE               	addwfc	___lmul@product+2,f
 21777  27E7  082B               	movf	___lmul@multiplicand+3,w
 21778  27E8  3DAF               	addwfc	___lmul@product+3,f
 21779  27E9                     l5458:	
 21780  27E9  35A8               	lslf	___lmul@multiplicand,f
 21781  27EA  0DA9               	rlf	___lmul@multiplicand+1,f
 21782  27EB  0DAA               	rlf	___lmul@multiplicand+2,f
 21783  27EC  0DAB               	rlf	___lmul@multiplicand+3,f
 21784  27ED  36A7               	lsrf	___lmul@multiplier+3,f
 21785  27EE  0CA6               	rrf	___lmul@multiplier+2,f
 21786  27EF  0CA5               	rrf	___lmul@multiplier+1,f
 21787  27F0  0CA4               	rrf	___lmul@multiplier,f
 21788  27F1  0827               	movf	___lmul@multiplier+3,w
 21789  27F2  0426               	iorwf	___lmul@multiplier+2,w
 21790  27F3  0425               	iorwf	___lmul@multiplier+1,w
 21791  27F4  0424               	iorwf	___lmul@multiplier,w
 21792  27F5  1D03               	skipz
 21793  27F6  2FDF               	goto	l1117
 21794  27F7  082F               	movf	___lmul@product+3,w
 21795  27F8  00A7               	movwf	?___lmul+3
 21796  27F9  082E               	movf	___lmul@product+2,w
 21797  27FA  00A6               	movwf	?___lmul+2
 21798  27FB  082D               	movf	___lmul@product+1,w
 21799  27FC  00A5               	movwf	?___lmul+1
 21800  27FD  082C               	movf	___lmul@product,w
 21801  27FE  00A4               	movwf	?___lmul
 21802  27FF  0008               	return
 21803  2800                     __end_of___lmul:	
 21804                           
 21805                           	psect	swtext3
 21806  0800                     __pswtext3:	
 21807  0800                     S8894:	
 21808  0800  31A4  2C60         	ljmp	l6056
 21809  0802  31A4  2C66         	ljmp	l6058
 21810  0804  31A4  2C6C         	ljmp	l6060
 21811  0806  31A4  2C72         	ljmp	l6062
 21812                           
 21813                           	psect	text47
 21814  2E16                     __ptext47:	
 21815 ;; *************** function _qsort *****************
 21816 ;; Defined at:
 21817 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 21818 ;; Parameters:    Size  Location     Type
 21819 ;;  vbase           1    wreg     PTR void 
 21820 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21821 ;;  nel             2   34[BANK1 ] unsigned int 
 21822 ;;  width           2   36[BANK1 ] unsigned int 
 21823 ;;  compar          2   38[BANK1 ] PTR FTN(PTR const void ,
 21824 ;;		 -> sortCur(2), sortDCRev(2), sortDC(2), 
 21825 ;; Auto vars:     Size  Location     Type
 21826 ;;  vbase           1   46[BANK1 ] PTR void 
 21827 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21828 ;;  stack          64    0[BANK3 ] struct .[16]
 21829 ;;  xbuf           60    0[BANK2 ] unsigned char [60]
 21830 ;;  j               2   57[BANK1 ] int 
 21831 ;;  i               2   55[BANK1 ] int 
 21832 ;;  s               2   53[BANK1 ] int 
 21833 ;;  r               2   51[BANK1 ] int 
 21834 ;;  l               2   49[BANK1 ] int 
 21835 ;;  base            1   48[BANK1 ] PTR unsigned char 
 21836 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 21837 ;;  x               1   47[BANK1 ] PTR unsigned char 
 21838 ;;		 -> qsort@xbuf(60), 
 21839 ;; Return value:  Size  Location     Type
 21840 ;;                  1    wreg      void 
 21841 ;; Registers used:
 21842 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21843 ;; Tracked objects:
 21844 ;;		On entry : 3F/1
 21845 ;;		On exit  : 3F/1
 21846 ;;		Unchanged: 0/0
 21847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21848 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21849 ;;      Locals:         0       0      14      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21850 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21851 ;;      Totals:         0       0      25      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21852 ;;Total ram usage:      149 bytes
 21853 ;; Hardware stack levels used:    1
 21854 ;; Hardware stack levels required when called:    6
 21855 ;; This function calls:
 21856 ;;		___awdiv
 21857 ;;		___bmul
 21858 ;;		_memcpy
 21859 ;;		_sortCur
 21860 ;;		_sortDC
 21861 ;;		_sortDCRev
 21862 ;;		_swap
 21863 ;; This function is called by:
 21864 ;;		_channelThing
 21865 ;; This function uses a non-reentrant model
 21866 ;;
 21867                           
 21868                           
 21869                           ;psect for function _qsort
 21870  2E16                     _qsort:	
 21871                           
 21872                           ;incstack = 0
 21873                           ; Regs used in _qsort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21874                           ;qsort@vbase stored from wreg
 21875  2E16  00CE               	movwf	qsort@vbase^(0+128)
 21876  2E17  00D0               	movwf	qsort@base^(0+128)
 21877  2E18  3000               	movlw	0
 21878  2E19  0245               	subwf	(qsort@width+1)^(0+128),w
 21879  2E1A  303C               	movlw	60
 21880  2E1B  1903               	skipnz
 21881  2E1C  0244               	subwf	qsort@width^(0+128),w
 21882  2E1D  1803               	skipnc
 21883  2E1E  0008               	return
 21884  2E1F  3020               	movlw	(low (qsort@xbuf| (0+256)))& (0+255)
 21885  2E20  00CF               	movwf	qsort@x^(0+128)
 21886  2E21  0844               	movf	qsort@width^(0+128),w
 21887  2E22  074F               	addwf	qsort@x^(0+128),w
 21888  2E23  00C8               	movwf	??_qsort^(0+128)
 21889  2E24  0086               	movwf	6
 21890  2E25  3001               	movlw	1	; select bank2/3
 21891  2E26  0087               	movwf	7
 21892  2E27  0181               	clrf	1
 21893  2E28  01D5               	clrf	qsort@s^(0+128)
 21894  2E29  01D6               	clrf	(qsort@s+1)^(0+128)
 21895  2E2A  0143               	movlb	3	; select bank3
 21896  2E2B  01A0               	clrf	qsort@stack^(0+384)
 21897  2E2C  01A1               	clrf	(qsort@stack+1)^(0+384)
 21898  2E2D  0141               	movlb	1	; select bank1
 21899  2E2E  0842               	movf	qsort@nel^(0+128),w
 21900  2E2F  3EFF               	addlw	255
 21901  2E30  0143               	movlb	3	; select bank3
 21902  2E31  00A2               	movwf	(qsort@stack^(0+384)+2)
 21903  2E32  30FF               	movlw	255
 21904  2E33  0141               	movlb	1	; select bank1
 21905  2E34  3D43               	addwfc	(qsort@nel+1)^(0+128),w
 21906  2E35  0143               	movlb	3	; select bank3
 21907  2E36  00A3               	movwf	((qsort@stack+1)^(0+384)+2)
 21908  2E37                     l8124:	
 21909  2E37  0141               	movlb	1	; select bank1
 21910  2E38  0855               	movf	qsort@s^(0+128),w
 21911  2E39  0709               	addwf	9,w
 21912  2E3A  0709               	addwf	9,w
 21913  2E3B  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 21914  2E3C  0086               	movwf	6
 21915  2E3D  3001               	movlw	1	; select bank3/4
 21916  2E3E  0087               	movwf	7
 21917  2E3F  3F40               	moviw [0]fsr1
 21918  2E40  00D1               	movwf	qsort@l^(0+128)
 21919  2E41  3F41               	moviw [1]fsr1
 21920  2E42  00D2               	movwf	(qsort@l+1)^(0+128)
 21921  2E43  0855               	movf	qsort@s^(0+128),w
 21922  2E44  0709               	addwf	9,w
 21923  2E45  0709               	addwf	9,w
 21924  2E46  3E02               	addlw	2
 21925  2E47  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 21926  2E48  0086               	movwf	6
 21927  2E49  3F40               	moviw [0]fsr1
 21928  2E4A  00D3               	movwf	qsort@r^(0+128)
 21929  2E4B  3F41               	moviw [1]fsr1
 21930  2E4C  00D4               	movwf	(qsort@r+1)^(0+128)
 21931  2E4D  30FF               	movlw	-1
 21932  2E4E  07D5               	addwf	qsort@s^(0+128),f
 21933  2E4F  1C03               	skipc
 21934  2E50  03D6               	decf	(qsort@s+1)^(0+128),f
 21935  2E51                     l8130:	
 21936  2E51  0141               	movlb	1	; select bank1
 21937  2E52  0852               	movf	(qsort@l+1)^(0+128),w
 21938  2E53  00D8               	movwf	(qsort@i+1)^(0+128)
 21939  2E54  0851               	movf	qsort@l^(0+128),w
 21940  2E55  00D7               	movwf	qsort@i^(0+128)
 21941  2E56  0854               	movf	(qsort@r+1)^(0+128),w
 21942  2E57  00DA               	movwf	(qsort@j+1)^(0+128)
 21943  2E58  0853               	movf	qsort@r^(0+128),w
 21944  2E59  00D9               	movwf	qsort@j^(0+128)
 21945  2E5A  084F               	movf	qsort@x^(0+128),w
 21946  2E5B  0140               	movlb	0	; select bank0
 21947  2E5C  00AF               	movwf	memcpy@d1
 21948  2E5D  3001               	movlw	1
 21949  2E5E  00B0               	movwf	memcpy@d1+1
 21950  2E5F  0141               	movlb	1	; select bank1
 21951  2E60  0844               	movf	qsort@width^(0+128),w
 21952  2E61  0140               	movlb	0	; select bank0
 21953  2E62  00AC               	movwf	___bmul@multiplicand
 21954  2E63  0141               	movlb	1	; select bank1
 21955  2E64  0859               	movf	qsort@j^(0+128),w
 21956  2E65  0757               	addwf	qsort@i^(0+128),w
 21957  2E66  0140               	movlb	0	; select bank0
 21958  2E67  00A6               	movwf	___awdiv@dividend
 21959  2E68  0141               	movlb	1	; select bank1
 21960  2E69  085A               	movf	(qsort@j+1)^(0+128),w
 21961  2E6A  3D58               	addwfc	(qsort@i+1)^(0+128),w
 21962  2E6B  0140               	movlb	0	; select bank0
 21963  2E6C  00A7               	movwf	___awdiv@dividend+1
 21964  2E6D  3002               	movlw	2
 21965  2E6E  00A4               	movwf	___awdiv@divisor
 21966  2E6F  01A5               	clrf	___awdiv@divisor+1
 21967  2E70  2782               	fcall	___awdiv
 21968  2E71  0824               	movf	?___awdiv,w
 21969  2E72  318E  268D  31AE   	fcall	___bmul
 21970  2E75  0141               	movlb	1	; select bank1
 21971  2E76  0750               	addwf	qsort@base^(0+128),w
 21972  2E77  0140               	movlb	0	; select bank0
 21973  2E78  00B1               	movwf	memcpy@s1
 21974  2E79  0141               	movlb	1	; select bank1
 21975  2E7A  0845               	movf	(qsort@width+1)^(0+128),w
 21976  2E7B  0140               	movlb	0	; select bank0
 21977  2E7C  00B3               	movwf	memcpy@n+1
 21978  2E7D  0141               	movlb	1	; select bank1
 21979  2E7E  0844               	movf	qsort@width^(0+128),w
 21980  2E7F  0140               	movlb	0	; select bank0
 21981  2E80  00B2               	movwf	memcpy@n
 21982  2E81  27C2               	fcall	_memcpy
 21983  2E82                     l8138:	
 21984  2E82  0141               	movlb	1	; select bank1
 21985  2E83  0844               	movf	qsort@width^(0+128),w
 21986  2E84  0140               	movlb	0	; select bank0
 21987  2E85  00AC               	movwf	___bmul@multiplicand
 21988  2E86  0141               	movlb	1	; select bank1
 21989  2E87  0857               	movf	qsort@i^(0+128),w
 21990  2E88  318E  268D  31AE   	fcall	___bmul
 21991  2E8B  0141               	movlb	1	; select bank1
 21992  2E8C  0750               	addwf	qsort@base^(0+128),w
 21993  2E8D  00CD               	movwf	_qsort$2814^(0+128)
 21994  2E8E  00BA               	movwf	sortCur@cmp1^(0+128)
 21995  2E8F  3002               	movlw	2
 21996  2E90  00BB               	movwf	(sortCur@cmp1+1)^(0+128)
 21997  2E91  084F               	movf	qsort@x^(0+128),w
 21998  2E92  00BC               	movwf	sortCur@cmp2^(0+128)
 21999  2E93  3001               	movlw	1
 22000  2E94  00BD               	movwf	(sortCur@cmp2+1)^(0+128)
 22001  2E95  0847               	movf	(qsort@compar+1)^(0+128),w
 22002  2E96  008A               	movwf	10
 22003  2E97  0846               	movf	qsort@compar^(0+128),w
 22004  2E98  000A               	callw
 22005  2E99  31AE               	pagesel	$
 22006  2E9A  1FBB               	btfss	(?_sortCur+1)^(0+128),7
 22007  2E9B  2EA4               	goto	l8144
 22008  2E9C  0AD7               	incf	qsort@i^(0+128),f
 22009  2E9D  1903               	skipnz
 22010  2E9E  0AD8               	incf	(qsort@i+1)^(0+128),f
 22011  2E9F  2E82               	goto	l8138
 22012  2EA0                     l8142:	
 22013  2EA0  30FF               	movlw	-1
 22014  2EA1  07D9               	addwf	qsort@j^(0+128),f
 22015  2EA2  1C03               	skipc
 22016  2EA3  03DA               	decf	(qsort@j+1)^(0+128),f
 22017  2EA4                     l8144:	
 22018  2EA4  0844               	movf	qsort@width^(0+128),w
 22019  2EA5  0140               	movlb	0	; select bank0
 22020  2EA6  00AC               	movwf	___bmul@multiplicand
 22021  2EA7  0141               	movlb	1	; select bank1
 22022  2EA8  0859               	movf	qsort@j^(0+128),w
 22023  2EA9  318E  268D  31AE   	fcall	___bmul
 22024  2EAC  0141               	movlb	1	; select bank1
 22025  2EAD  0750               	addwf	qsort@base^(0+128),w
 22026  2EAE  00CD               	movwf	_qsort$2814^(0+128)
 22027  2EAF  084F               	movf	qsort@x^(0+128),w
 22028  2EB0  00BA               	movwf	sortCur@cmp1^(0+128)
 22029  2EB1  3001               	movlw	1
 22030  2EB2  00BB               	movwf	(sortCur@cmp1+1)^(0+128)
 22031  2EB3  084D               	movf	_qsort$2814^(0+128),w
 22032  2EB4  00BC               	movwf	sortCur@cmp2^(0+128)
 22033  2EB5  3002               	movlw	2
 22034  2EB6  00BD               	movwf	(sortCur@cmp2+1)^(0+128)
 22035  2EB7  0847               	movf	(qsort@compar+1)^(0+128),w
 22036  2EB8  008A               	movwf	10
 22037  2EB9  0846               	movf	qsort@compar^(0+128),w
 22038  2EBA  000A               	callw
 22039  2EBB  31AE               	pagesel	$
 22040  2EBC  1BBB               	btfsc	(?_sortCur+1)^(0+128),7
 22041  2EBD  2EA0               	goto	l8142
 22042  2EBE  085A               	movf	(qsort@j+1)^(0+128),w
 22043  2EBF  3A80               	xorlw	128
 22044  2EC0  00C8               	movwf	??_qsort^(0+128)
 22045  2EC1  0858               	movf	(qsort@i+1)^(0+128),w
 22046  2EC2  3A80               	xorlw	128
 22047  2EC3  0248               	subwf	??_qsort^(0+128),w
 22048  2EC4  1D03               	skipz
 22049  2EC5  2EC8               	goto	u8385
 22050  2EC6  0857               	movf	qsort@i^(0+128),w
 22051  2EC7  0259               	subwf	qsort@j^(0+128),w
 22052  2EC8                     u8385:	
 22053  2EC8  1C03               	skipc
 22054  2EC9  2EF6               	goto	l8156
 22055  2ECA  0141               	movlb	1	; select bank1
 22056  2ECB  0845               	movf	(qsort@width+1)^(0+128),w
 22057  2ECC  0140               	movlb	0	; select bank0
 22058  2ECD  00B0               	movwf	swap@len+1
 22059  2ECE  0141               	movlb	1	; select bank1
 22060  2ECF  0844               	movf	qsort@width^(0+128),w
 22061  2ED0  0140               	movlb	0	; select bank0
 22062  2ED1  00AF               	movwf	swap@len
 22063  2ED2  0141               	movlb	1	; select bank1
 22064  2ED3  0844               	movf	qsort@width^(0+128),w
 22065  2ED4  0140               	movlb	0	; select bank0
 22066  2ED5  00AC               	movwf	___bmul@multiplicand
 22067  2ED6  0141               	movlb	1	; select bank1
 22068  2ED7  0857               	movf	qsort@i^(0+128),w
 22069  2ED8  318E  268D  31AE   	fcall	___bmul
 22070  2EDB  0141               	movlb	1	; select bank1
 22071  2EDC  0750               	addwf	qsort@base^(0+128),w
 22072  2EDD  0140               	movlb	0	; select bank0
 22073  2EDE  00B1               	movwf	swap@s1
 22074  2EDF  0141               	movlb	1	; select bank1
 22075  2EE0  0844               	movf	qsort@width^(0+128),w
 22076  2EE1  0140               	movlb	0	; select bank0
 22077  2EE2  00AC               	movwf	___bmul@multiplicand
 22078  2EE3  0141               	movlb	1	; select bank1
 22079  2EE4  0859               	movf	qsort@j^(0+128),w
 22080  2EE5  318E  268D  31AE   	fcall	___bmul
 22081  2EE8  0141               	movlb	1	; select bank1
 22082  2EE9  0750               	addwf	qsort@base^(0+128),w
 22083  2EEA  0140               	movlb	0	; select bank0
 22084  2EEB  00B2               	movwf	swap@s2
 22085  2EEC  27E2  31AE         	fcall	_swap
 22086  2EEE  0141               	movlb	1	; select bank1
 22087  2EEF  0AD7               	incf	qsort@i^(0+128),f
 22088  2EF0  1903               	skipnz
 22089  2EF1  0AD8               	incf	(qsort@i+1)^(0+128),f
 22090  2EF2  30FF               	movlw	-1
 22091  2EF3  07D9               	addwf	qsort@j^(0+128),f
 22092  2EF4  1C03               	skipc
 22093  2EF5  03DA               	decf	(qsort@j+1)^(0+128),f
 22094  2EF6                     l8156:	
 22095  2EF6  0141               	movlb	1	; select bank1
 22096  2EF7  085A               	movf	(qsort@j+1)^(0+128),w
 22097  2EF8  3A80               	xorlw	128
 22098  2EF9  00C8               	movwf	??_qsort^(0+128)
 22099  2EFA  0858               	movf	(qsort@i+1)^(0+128),w
 22100  2EFB  3A80               	xorlw	128
 22101  2EFC  0248               	subwf	??_qsort^(0+128),w
 22102  2EFD  1D03               	skipz
 22103  2EFE  2F01               	goto	u8395
 22104  2EFF  0857               	movf	qsort@i^(0+128),w
 22105  2F00  0259               	subwf	qsort@j^(0+128),w
 22106  2F01                     u8395:	
 22107  2F01  1803               	skipnc
 22108  2F02  2E82               	goto	l8138
 22109  2F03  0141               	movlb	1	; select bank1
 22110  2F04  0857               	movf	qsort@i^(0+128),w
 22111  2F05  0253               	subwf	qsort@r^(0+128),w
 22112  2F06  00C8               	movwf	??_qsort^(0+128)
 22113  2F07  0858               	movf	(qsort@i+1)^(0+128),w
 22114  2F08  3B54               	subwfb	(qsort@r+1)^(0+128),w
 22115  2F09  00C9               	movwf	(??_qsort+1)^(0+128)
 22116  2F0A  0851               	movf	qsort@l^(0+128),w
 22117  2F0B  0259               	subwf	qsort@j^(0+128),w
 22118  2F0C  00CA               	movwf	(??_qsort+2)^(0+128)
 22119  2F0D  0852               	movf	(qsort@l+1)^(0+128),w
 22120  2F0E  3B5A               	subwfb	(qsort@j+1)^(0+128),w
 22121  2F0F  00CB               	movwf	(??_qsort+3)^(0+128)
 22122  2F10  3A80               	xorlw	128
 22123  2F11  00CC               	movwf	(??_qsort+4)^(0+128)
 22124  2F12  0849               	movf	(??_qsort+1)^(0+128),w
 22125  2F13  3A80               	xorlw	128
 22126  2F14  024C               	subwf	(??_qsort+4)^(0+128),w
 22127  2F15  1D03               	skipz
 22128  2F16  2F19               	goto	u8405
 22129  2F17  0848               	movf	??_qsort^(0+128),w
 22130  2F18  024A               	subwf	(??_qsort+2)^(0+128),w
 22131  2F19                     u8405:	
 22132  2F19  1803               	skipnc
 22133  2F1A  2F47               	goto	l8166
 22134  2F1B  0141               	movlb	1	; select bank1
 22135  2F1C  0858               	movf	(qsort@i+1)^(0+128),w
 22136  2F1D  3A80               	xorlw	128
 22137  2F1E  00C8               	movwf	??_qsort^(0+128)
 22138  2F1F  0854               	movf	(qsort@r+1)^(0+128),w
 22139  2F20  3A80               	xorlw	128
 22140  2F21  0248               	subwf	??_qsort^(0+128),w
 22141  2F22  1D03               	skipz
 22142  2F23  2F26               	goto	u8415
 22143  2F24  0853               	movf	qsort@r^(0+128),w
 22144  2F25  0257               	subwf	qsort@i^(0+128),w
 22145  2F26                     u8415:	
 22146  2F26  1803               	skipnc
 22147  2F27  2F41               	goto	l8164
 22148  2F28  0141               	movlb	1	; select bank1
 22149  2F29  0AD5               	incf	qsort@s^(0+128),f
 22150  2F2A  1903               	skipnz
 22151  2F2B  0AD6               	incf	(qsort@s+1)^(0+128),f
 22152  2F2C  0855               	movf	qsort@s^(0+128),w
 22153  2F2D  0709               	addwf	9,w
 22154  2F2E  0709               	addwf	9,w
 22155  2F2F  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 22156  2F30  0086               	movwf	6
 22157  2F31  3001               	movlw	1	; select bank3/4
 22158  2F32  0087               	movwf	7
 22159  2F33  0857               	movf	qsort@i^(0+128),w
 22160  2F34  3FC0               	movwi [0]fsr1
 22161  2F35  0858               	movf	(qsort@i+1)^(0+128),w
 22162  2F36  3FC1               	movwi [1]fsr1
 22163  2F37  0855               	movf	qsort@s^(0+128),w
 22164  2F38  0709               	addwf	9,w
 22165  2F39  0709               	addwf	9,w
 22166  2F3A  3E02               	addlw	2
 22167  2F3B  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 22168  2F3C  0086               	movwf	6
 22169  2F3D  0853               	movf	qsort@r^(0+128),w
 22170  2F3E  3FC0               	movwi [0]fsr1
 22171  2F3F  0854               	movf	(qsort@r+1)^(0+128),w
 22172  2F40  3FC1               	movwi [1]fsr1
 22173  2F41                     l8164:	
 22174  2F41  0141               	movlb	1	; select bank1
 22175  2F42  085A               	movf	(qsort@j+1)^(0+128),w
 22176  2F43  00D4               	movwf	(qsort@r+1)^(0+128)
 22177  2F44  0859               	movf	qsort@j^(0+128),w
 22178  2F45  00D3               	movwf	qsort@r^(0+128)
 22179  2F46  2F72               	goto	l8172
 22180  2F47                     l8166:	
 22181  2F47  0141               	movlb	1	; select bank1
 22182  2F48  0852               	movf	(qsort@l+1)^(0+128),w
 22183  2F49  3A80               	xorlw	128
 22184  2F4A  00C8               	movwf	??_qsort^(0+128)
 22185  2F4B  085A               	movf	(qsort@j+1)^(0+128),w
 22186  2F4C  3A80               	xorlw	128
 22187  2F4D  0248               	subwf	??_qsort^(0+128),w
 22188  2F4E  1D03               	skipz
 22189  2F4F  2F52               	goto	u8425
 22190  2F50  0859               	movf	qsort@j^(0+128),w
 22191  2F51  0251               	subwf	qsort@l^(0+128),w
 22192  2F52                     u8425:	
 22193  2F52  1803               	skipnc
 22194  2F53  2F6D               	goto	l8170
 22195  2F54  0141               	movlb	1	; select bank1
 22196  2F55  0AD5               	incf	qsort@s^(0+128),f
 22197  2F56  1903               	skipnz
 22198  2F57  0AD6               	incf	(qsort@s+1)^(0+128),f
 22199  2F58  0855               	movf	qsort@s^(0+128),w
 22200  2F59  0709               	addwf	9,w
 22201  2F5A  0709               	addwf	9,w
 22202  2F5B  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 22203  2F5C  0086               	movwf	6
 22204  2F5D  3001               	movlw	1	; select bank3/4
 22205  2F5E  0087               	movwf	7
 22206  2F5F  0851               	movf	qsort@l^(0+128),w
 22207  2F60  3FC0               	movwi [0]fsr1
 22208  2F61  0852               	movf	(qsort@l+1)^(0+128),w
 22209  2F62  3FC1               	movwi [1]fsr1
 22210  2F63  0855               	movf	qsort@s^(0+128),w
 22211  2F64  0709               	addwf	9,w
 22212  2F65  0709               	addwf	9,w
 22213  2F66  3E02               	addlw	2
 22214  2F67  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 22215  2F68  0086               	movwf	6
 22216  2F69  0859               	movf	qsort@j^(0+128),w
 22217  2F6A  3FC0               	movwi [0]fsr1
 22218  2F6B  085A               	movf	(qsort@j+1)^(0+128),w
 22219  2F6C  3FC1               	movwi [1]fsr1
 22220  2F6D                     l8170:	
 22221  2F6D  0141               	movlb	1	; select bank1
 22222  2F6E  0858               	movf	(qsort@i+1)^(0+128),w
 22223  2F6F  00D2               	movwf	(qsort@l+1)^(0+128)
 22224  2F70  0857               	movf	qsort@i^(0+128),w
 22225  2F71  00D1               	movwf	qsort@l^(0+128)
 22226  2F72                     l8172:	
 22227  2F72  0852               	movf	(qsort@l+1)^(0+128),w
 22228  2F73  3A80               	xorlw	128
 22229  2F74  00C8               	movwf	??_qsort^(0+128)
 22230  2F75  0854               	movf	(qsort@r+1)^(0+128),w
 22231  2F76  3A80               	xorlw	128
 22232  2F77  0248               	subwf	??_qsort^(0+128),w
 22233  2F78  1D03               	skipz
 22234  2F79  2F7C               	goto	u8435
 22235  2F7A  0853               	movf	qsort@r^(0+128),w
 22236  2F7B  0251               	subwf	qsort@l^(0+128),w
 22237  2F7C                     u8435:	
 22238  2F7C  1C03               	skipc
 22239  2F7D  2E51               	goto	l8130
 22240  2F7E  0141               	movlb	1	; select bank1
 22241  2F7F  1BD6               	btfsc	(qsort@s+1)^(0+128),7
 22242  2F80  0008               	return
 22243  2F81  2E37               	goto	l8124
 22244  2F82                     __end_of_qsort:	
 22245  2F82                     __ptext55:	
 22246 ;; *************** function ___awdiv *****************
 22247 ;; Defined at:
 22248 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 22249 ;; Parameters:    Size  Location     Type
 22250 ;;  divisor         2    4[BANK0 ] int 
 22251 ;;  dividend        2    6[BANK0 ] int 
 22252 ;; Auto vars:     Size  Location     Type
 22253 ;;  quotient        2   10[BANK0 ] int 
 22254 ;;  sign            1    9[BANK0 ] unsigned char 
 22255 ;;  counter         1    8[BANK0 ] unsigned char 
 22256 ;; Return value:  Size  Location     Type
 22257 ;;                  2    4[BANK0 ] int 
 22258 ;; Registers used:
 22259 ;;		wreg, status,2, status,0
 22260 ;; Tracked objects:
 22261 ;;		On entry : 3F/0
 22262 ;;		On exit  : 3F/0
 22263 ;;		Unchanged: 0/0
 22264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22265 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22266 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22268 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22269 ;;Total ram usage:        8 bytes
 22270 ;; Hardware stack levels used:    1
 22271 ;; Hardware stack levels required when called:    3
 22272 ;; This function calls:
 22273 ;;		Nothing
 22274 ;; This function is called by:
 22275 ;;		_qsort
 22276 ;; This function uses a non-reentrant model
 22277 ;;
 22278                           
 22279                           
 22280                           ;psect for function ___awdiv
 22281  2F82                     ___awdiv:	
 22282                           
 22283                           ;incstack = 0
 22284                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 22285  2F82  01A9               	clrf	___awdiv@sign
 22286  2F83  1FA5               	btfss	___awdiv@divisor+1,7
 22287  2F84  2F8C               	goto	l7656
 22288  2F85  09A4               	comf	___awdiv@divisor,f
 22289  2F86  09A5               	comf	___awdiv@divisor+1,f
 22290  2F87  0AA4               	incf	___awdiv@divisor,f
 22291  2F88  1903               	skipnz
 22292  2F89  0AA5               	incf	___awdiv@divisor+1,f
 22293  2F8A  01A9               	clrf	___awdiv@sign
 22294  2F8B  0AA9               	incf	___awdiv@sign,f
 22295  2F8C                     l7656:	
 22296  2F8C  1FA7               	btfss	___awdiv@dividend+1,7
 22297  2F8D  2F95               	goto	l7662
 22298  2F8E  09A6               	comf	___awdiv@dividend,f
 22299  2F8F  09A7               	comf	___awdiv@dividend+1,f
 22300  2F90  0AA6               	incf	___awdiv@dividend,f
 22301  2F91  1903               	skipnz
 22302  2F92  0AA7               	incf	___awdiv@dividend+1,f
 22303  2F93  3001               	movlw	1
 22304  2F94  06A9               	xorwf	___awdiv@sign,f
 22305  2F95                     l7662:	
 22306  2F95  01AA               	clrf	___awdiv@quotient
 22307  2F96  01AB               	clrf	___awdiv@quotient+1
 22308  2F97  0824               	movf	___awdiv@divisor,w
 22309  2F98  0425               	iorwf	___awdiv@divisor+1,w
 22310  2F99  1903               	btfsc	3,2
 22311  2F9A  2FB5               	goto	l7684
 22312  2F9B  01A8               	clrf	___awdiv@counter
 22313  2F9C                     L25:	
 22314  2F9C  0AA8               	incf	___awdiv@counter,f
 22315  2F9D  1BA5               	btfsc	___awdiv@divisor+1,7
 22316  2F9E  2FA2               	goto	l7672
 22317  2F9F  35A4               	lslf	___awdiv@divisor,f
 22318  2FA0  0DA5               	rlf	___awdiv@divisor+1,f
 22319  2FA1  2F9C               	goto	L25
 22320  2FA2                     l7672:	
 22321  2FA2  35AA               	lslf	___awdiv@quotient,f
 22322  2FA3  0DAB               	rlf	___awdiv@quotient+1,f
 22323  2FA4  0825               	movf	___awdiv@divisor+1,w
 22324  2FA5  0227               	subwf	___awdiv@dividend+1,w
 22325  2FA6  1D03               	skipz
 22326  2FA7  2FAA               	goto	u7965
 22327  2FA8  0824               	movf	___awdiv@divisor,w
 22328  2FA9  0226               	subwf	___awdiv@dividend,w
 22329  2FAA                     u7965:	
 22330  2FAA  1C03               	skipc
 22331  2FAB  2FB1               	goto	l7680
 22332  2FAC  0824               	movf	___awdiv@divisor,w
 22333  2FAD  02A6               	subwf	___awdiv@dividend,f
 22334  2FAE  0825               	movf	___awdiv@divisor+1,w
 22335  2FAF  3BA7               	subwfb	___awdiv@dividend+1,f
 22336  2FB0  142A               	bsf	___awdiv@quotient,0
 22337  2FB1                     l7680:	
 22338  2FB1  36A5               	lsrf	___awdiv@divisor+1,f
 22339  2FB2  0CA4               	rrf	___awdiv@divisor,f
 22340  2FB3  0BA8               	decfsz	___awdiv@counter,f
 22341  2FB4  2FA2               	goto	l7672
 22342  2FB5                     l7684:	
 22343  2FB5  0829               	movf	___awdiv@sign,w
 22344  2FB6  1903               	btfsc	3,2
 22345  2FB7  2FBD               	goto	l7688
 22346  2FB8  09AA               	comf	___awdiv@quotient,f
 22347  2FB9  09AB               	comf	___awdiv@quotient+1,f
 22348  2FBA  0AAA               	incf	___awdiv@quotient,f
 22349  2FBB  1903               	skipnz
 22350  2FBC  0AAB               	incf	___awdiv@quotient+1,f
 22351  2FBD                     l7688:	
 22352  2FBD  082B               	movf	___awdiv@quotient+1,w
 22353  2FBE  00A5               	movwf	?___awdiv+1
 22354  2FBF  082A               	movf	___awdiv@quotient,w
 22355  2FC0  00A4               	movwf	?___awdiv
 22356  2FC1  0008               	return
 22357  2FC2                     __end_of___awdiv:	
 22358  2FC2                     __ptext54:	
 22359 ;; *************** function _memcpy *****************
 22360 ;; Defined at:
 22361 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 22362 ;; Parameters:    Size  Location     Type
 22363 ;;  d1              2   15[BANK0 ] PTR void 
 22364 ;;		 -> qsort@xbuf(60), dataPacket(15), 
 22365 ;;  s1              1   17[BANK0 ] PTR const void 
 22366 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), buffer(20), 
 22367 ;;  n               2   18[BANK0 ] unsigned int 
 22368 ;; Auto vars:     Size  Location     Type
 22369 ;;  d               2   21[BANK0 ] PTR unsigned char 
 22370 ;;		 -> qsort@xbuf(60), dataPacket(15), 
 22371 ;;  s               1   23[BANK0 ] PTR const unsigned char 
 22372 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), buffer(20), 
 22373 ;;  tmp             1   20[BANK0 ] unsigned char 
 22374 ;; Return value:  Size  Location     Type
 22375 ;;                  2   15[BANK0 ] PTR void 
 22376 ;; Registers used:
 22377 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 22378 ;; Tracked objects:
 22379 ;;		On entry : 3F/0
 22380 ;;		On exit  : 3F/0
 22381 ;;		Unchanged: 0/0
 22382 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22383 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22384 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22386 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22387 ;;Total ram usage:        9 bytes
 22388 ;; Hardware stack levels used:    1
 22389 ;; Hardware stack levels required when called:    3
 22390 ;; This function calls:
 22391 ;;		Nothing
 22392 ;; This function is called by:
 22393 ;;		_qsort
 22394 ;; This function uses a non-reentrant model
 22395 ;;
 22396                           
 22397                           
 22398                           ;psect for function _memcpy
 22399  2FC2                     _memcpy:	
 22400                           
 22401                           ;incstack = 0
 22402                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 22403  2FC2  0831               	movf	memcpy@s1,w
 22404  2FC3  00B7               	movwf	memcpy@s
 22405  2FC4  0830               	movf	memcpy@d1+1,w
 22406  2FC5  00B6               	movwf	memcpy@d+1
 22407  2FC6  082F               	movf	memcpy@d1,w
 22408  2FC7  00B5               	movwf	memcpy@d
 22409  2FC8                     l7522:	
 22410  2FC8  3001               	movlw	1
 22411  2FC9  02B2               	subwf	memcpy@n,f
 22412  2FCA  3000               	movlw	0
 22413  2FCB  3BB3               	subwfb	memcpy@n+1,f
 22414  2FCC  0F32               	incfsz	memcpy@n,w
 22415  2FCD  2FD1               	goto	l7516
 22416  2FCE  0A33               	incf	memcpy@n+1,w
 22417  2FCF  1903               	btfsc	3,2
 22418  2FD0  0008               	return
 22419  2FD1                     l7516:	
 22420  2FD1  0837               	movf	memcpy@s,w
 22421  2FD2  0086               	movwf	6
 22422  2FD3  3002               	movlw	2	; select bank4/5
 22423  2FD4  0087               	movwf	7
 22424  2FD5  0801               	movf	1,w
 22425  2FD6  00B4               	movwf	memcpy@tmp
 22426  2FD7  0AB7               	incf	memcpy@s,f
 22427  2FD8  0835               	movf	memcpy@d,w
 22428  2FD9  0086               	movwf	6
 22429  2FDA  0836               	movf	memcpy@d+1,w
 22430  2FDB  0087               	movwf	7
 22431  2FDC  0834               	movf	memcpy@tmp,w
 22432  2FDD  0081               	movwf	1
 22433  2FDE  0AB5               	incf	memcpy@d,f
 22434  2FDF  1903               	skipnz
 22435  2FE0  0AB6               	incf	memcpy@d+1,f
 22436  2FE1  2FC8               	goto	l7522
 22437  2FE2                     __end_of_memcpy:	
 22438  2FE2                     __ptext48:	
 22439 ;; *************** function _swap *****************
 22440 ;; Defined at:
 22441 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 22442 ;; Parameters:    Size  Location     Type
 22443 ;;  len             2   15[BANK0 ] unsigned int 
 22444 ;;  s1              1   17[BANK0 ] PTR unsigned char 
 22445 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 22446 ;;  s2              1   18[BANK0 ] PTR unsigned char 
 22447 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 22448 ;; Auto vars:     Size  Location     Type
 22449 ;;  c               1   19[BANK0 ] unsigned char 
 22450 ;; Return value:  Size  Location     Type
 22451 ;;                  1    wreg      void 
 22452 ;; Registers used:
 22453 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 22454 ;; Tracked objects:
 22455 ;;		On entry : 3F/0
 22456 ;;		On exit  : 3F/0
 22457 ;;		Unchanged: 0/0
 22458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22459 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22460 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22462 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22463 ;;Total ram usage:        5 bytes
 22464 ;; Hardware stack levels used:    1
 22465 ;; Hardware stack levels required when called:    3
 22466 ;; This function calls:
 22467 ;;		Nothing
 22468 ;; This function is called by:
 22469 ;;		_qsort
 22470 ;; This function uses a non-reentrant model
 22471 ;;
 22472                           
 22473                           
 22474                           ;psect for function _swap
 22475  2FE2                     _swap:	
 22476  2FE2                     l7704:	
 22477                           ;incstack = 0
 22478                           ; Regs used in _swap: [wreg-fsr1h+status,2+status,0]
 22479                           
 22480  2FE2  3001               	movlw	1
 22481  2FE3  02AF               	subwf	swap@len,f
 22482  2FE4  3000               	movlw	0
 22483  2FE5  3BB0               	subwfb	swap@len+1,f
 22484  2FE6  0F2F               	incfsz	swap@len,w
 22485  2FE7  2FEB               	goto	l7694
 22486  2FE8  0A30               	incf	swap@len+1,w
 22487  2FE9  1903               	btfsc	3,2
 22488  2FEA  0008               	return
 22489  2FEB                     l7694:	
 22490  2FEB  0831               	movf	swap@s1,w
 22491  2FEC  0086               	movwf	6
 22492  2FED  3002               	movlw	2	; select bank4/5
 22493  2FEE  0087               	movwf	7
 22494  2FEF  0801               	movf	1,w
 22495  2FF0  00B3               	movwf	swap@c
 22496  2FF1  0831               	movf	swap@s1,w
 22497  2FF2  0086               	movwf	6
 22498  2FF3  0832               	movf	swap@s2,w
 22499  2FF4  0084               	movwf	4
 22500  2FF5  3002               	movlw	2	; select bank4/5
 22501  2FF6  0085               	movwf	5
 22502  2FF7  0800               	movf	0,w
 22503  2FF8  0081               	movwf	1
 22504  2FF9  0AB1               	incf	swap@s1,f
 22505  2FFA  0832               	movf	swap@s2,w
 22506  2FFB  0086               	movwf	6
 22507  2FFC  0833               	movf	swap@c,w
 22508  2FFD  0081               	movwf	1
 22509  2FFE  0AB2               	incf	swap@s2,f
 22510  2FFF  2FE2               	goto	l7704
 22511  3000                     __end_of_swap:	
 22512                           
 22513                           	psect	text49
 22514  1803                     __ptext49:	
 22515 ;; *************** function _sortCur *****************
 22516 ;; Defined at:
 22517 ;;		line 343 in file "system.c"
 22518 ;; Parameters:    Size  Location     Type
 22519 ;;  cmp1            2   26[BANK1 ] PTR const void 
 22520 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 22521 ;;  cmp2            2   28[BANK1 ] PTR const void 
 22522 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 22523 ;; Auto vars:     Size  Location     Type
 22524 ;;  b               2   32[BANK1 ] PTR struct .
 22525 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 22526 ;;  a               2   30[BANK1 ] PTR struct .
 22527 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 22528 ;; Return value:  Size  Location     Type
 22529 ;;                  2   26[BANK1 ] int 
 22530 ;; Registers used:
 22531 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22532 ;; Tracked objects:
 22533 ;;		On entry : 3F/1
 22534 ;;		On exit  : 3F/1
 22535 ;;		Unchanged: 0/0
 22536 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22537 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22538 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22539 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22540 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22541 ;;Total ram usage:        8 bytes
 22542 ;; Hardware stack levels used:    1
 22543 ;; Hardware stack levels required when called:    5
 22544 ;; This function calls:
 22545 ;;		___flsub
 22546 ;;		___fltol
 22547 ;; This function is called by:
 22548 ;;		_channelThing
 22549 ;;		_qsort
 22550 ;; This function uses a non-reentrant model
 22551 ;;
 22552                           
 22553                           
 22554                           ;psect for function _sortCur
 22555  1803                     _sortCur:	
 22556                           
 22557                           ;system.c: 343: int sortCur(const void *cmp1, const void *cmp2);system.c: 344: {;system.
      +                          c: 345:  t_virtChannel *a = (t_virtChannel *)cmp1;
 22558                           
 22559                           ;incstack = 0
 22560                           ; Regs used in _sortCur: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 22561  1803  083B               	movf	(sortCur@cmp1+1)^(0+128),w
 22562  1804  00BF               	movwf	(sortCur@a+1)^(0+128)
 22563  1805  083A               	movf	sortCur@cmp1^(0+128),w
 22564  1806  00BE               	movwf	sortCur@a^(0+128)
 22565                           
 22566                           ;system.c: 346:  t_virtChannel *b = (t_virtChannel *)cmp2;
 22567  1807  083D               	movf	(sortCur@cmp2+1)^(0+128),w
 22568  1808  00C1               	movwf	(sortCur@b+1)^(0+128)
 22569  1809  083C               	movf	sortCur@cmp2^(0+128),w
 22570  180A  00C0               	movwf	sortCur@b^(0+128)
 22571                           
 22572                           ;system.c: 348:  return (b->current - a->current);
 22573  180B  0086               	movwf	6
 22574  180C  0841               	movf	(sortCur@b+1)^(0+128),w
 22575  180D  0087               	movwf	7
 22576  180E  3142               	addfsr 1,2
 22577  180F  3F40               	moviw [0]fsr1
 22578  1810  00AC               	movwf	___flsub@b^(0+128)
 22579  1811  3F41               	moviw [1]fsr1
 22580  1812  00AD               	movwf	(___flsub@b+1)^(0+128)
 22581  1813  3F42               	moviw [2]fsr1
 22582  1814  00AE               	movwf	(___flsub@b+2)^(0+128)
 22583  1815  3F43               	moviw [3]fsr1
 22584  1816  00AF               	movwf	(___flsub@b+3)^(0+128)
 22585  1817  083E               	movf	sortCur@a^(0+128),w
 22586  1818  0086               	movwf	6
 22587  1819  083F               	movf	(sortCur@a+1)^(0+128),w
 22588  181A  0087               	movwf	7
 22589  181B  3142               	addfsr 1,2
 22590  181C  3F40               	moviw [0]fsr1
 22591  181D  00A8               	movwf	___flsub@a^(0+128)
 22592  181E  3F41               	moviw [1]fsr1
 22593  181F  00A9               	movwf	(___flsub@a+1)^(0+128)
 22594  1820  3F42               	moviw [2]fsr1
 22595  1821  00AA               	movwf	(___flsub@a+2)^(0+128)
 22596  1822  3F43               	moviw [3]fsr1
 22597  1823  00AB               	movwf	(___flsub@a+3)^(0+128)
 22598  1824  318F  2782  3198   	fcall	___flsub
 22599  1827  082B               	movf	(?___flsub+3)^(0+128),w
 22600  1828  00B3               	movwf	(___fltol@f1+3)^(0+128)
 22601  1829  082A               	movf	(?___flsub+2)^(0+128),w
 22602  182A  00B2               	movwf	(___fltol@f1+2)^(0+128)
 22603  182B  0829               	movf	(?___flsub+1)^(0+128),w
 22604  182C  00B1               	movwf	(___fltol@f1+1)^(0+128)
 22605  182D  0828               	movf	?___flsub^(0+128),w
 22606  182E  00B0               	movwf	___fltol@f1^(0+128)
 22607  182F  318F  27B5         	fcall	___fltol
 22608  1831  0831               	movf	(?___fltol+1)^(0+128),w
 22609  1832  00BB               	movwf	(?_sortCur+1)^(0+128)
 22610  1833  0830               	movf	?___fltol^(0+128),w
 22611  1834  00BA               	movwf	?_sortCur^(0+128)
 22612  1835  0008               	return
 22613  1836                     __end_of_sortCur:	
 22614                           
 22615                           	psect	text50
 22616  1004                     __ptext50:	
 22617 ;; *************** function _sortDC *****************
 22618 ;; Defined at:
 22619 ;;		line 321 in file "system.c"
 22620 ;; Parameters:    Size  Location     Type
 22621 ;;  cmp1            2   26[BANK1 ] PTR const void 
 22622 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 22623 ;;  cmp2            2   28[BANK1 ] PTR const void 
 22624 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 22625 ;; Auto vars:     Size  Location     Type
 22626 ;;  b               1   31[BANK1 ] unsigned char 
 22627 ;;  a               1   30[BANK1 ] unsigned char 
 22628 ;; Return value:  Size  Location     Type
 22629 ;;                  2   26[BANK1 ] int 
 22630 ;; Registers used:
 22631 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22632 ;; Tracked objects:
 22633 ;;		On entry : 3F/1
 22634 ;;		On exit  : 3F/1
 22635 ;;		Unchanged: 0/0
 22636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22637 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22638 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22640 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22641 ;;Total ram usage:        6 bytes
 22642 ;; Hardware stack levels used:    1
 22643 ;; Hardware stack levels required when called:    4
 22644 ;; This function calls:
 22645 ;;		___bmul
 22646 ;; This function is called by:
 22647 ;;		_channelThing
 22648 ;;		_qsort
 22649 ;; This function uses a non-reentrant model
 22650 ;;
 22651                           
 22652                           
 22653                           ;psect for function _sortDC
 22654  1004                     _sortDC:	
 22655                           
 22656                           ;system.c: 321: int sortDC(const void *cmp1, const void *cmp2);system.c: 322: {;system.c
      +                          : 323:  uint8_t a = *(uint8_t *)cmp1;
 22657                           
 22658                           ;incstack = 0
 22659                           ; Regs used in _sortDC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22660  1004  083A               	movf	sortDC@cmp1^(0+128),w
 22661  1005  0086               	movwf	6
 22662  1006  083B               	movf	(sortDC@cmp1+1)^(0+128),w
 22663  1007  0087               	movwf	7
 22664  1008  0801               	movf	1,w
 22665  1009  00BE               	movwf	sortDC@a^(0+128)
 22666                           
 22667                           ;system.c: 324:  uint8_t b = *(uint8_t *)cmp2;
 22668  100A  083C               	movf	sortDC@cmp2^(0+128),w
 22669  100B  0086               	movwf	6
 22670  100C  083D               	movf	(sortDC@cmp2+1)^(0+128),w
 22671  100D  0087               	movwf	7
 22672  100E  0801               	movf	1,w
 22673  100F  00BF               	movwf	sortDC@b^(0+128)
 22674                           
 22675                           ;system.c: 326:  return (virtChannels[b].DC - virtChannels[a].DC);
 22676  1010  3009               	movlw	9
 22677  1011  0140               	movlb	0	; select bank0
 22678  1012  00AC               	movwf	___bmul@multiplicand
 22679  1013  0141               	movlb	1	; select bank1
 22680  1014  083F               	movf	sortDC@b^(0+128),w
 22681  1015  318E  268D  3190   	fcall	___bmul
 22682  1018  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 22683  1019  0086               	movwf	6
 22684  101A  3002               	movlw	2	; select bank5/6
 22685  101B  0087               	movwf	7
 22686  101C  3009               	movlw	9
 22687  101D  00AC               	movwf	___bmul@multiplicand
 22688  101E  0141               	movlb	1	; select bank1
 22689  101F  083E               	movf	sortDC@a^(0+128),w
 22690  1020  318E  268D         	fcall	___bmul
 22691  1022  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 22692  1023  0084               	movwf	4
 22693  1024  3002               	movlw	2	; select bank5/6
 22694  1025  0085               	movwf	5
 22695  1026  0800               	movf	0,w
 22696  1027  0201               	subwf	1,w
 22697  1028  0141               	movlb	1	; select bank1
 22698  1029  00BA               	movwf	?_sortDC^(0+128)
 22699  102A  01BB               	clrf	(?_sortDC^(0+128)+1)
 22700  102B  1C03               	skipc
 22701  102C  03BB               	decf	(?_sortDC+1)^(0+128),f
 22702  102D  0008               	return
 22703  102E                     __end_of_sortDC:	
 22704                           
 22705                           	psect	text51
 22706  29B5                     __ptext51:	
 22707 ;; *************** function _sortDCRev *****************
 22708 ;; Defined at:
 22709 ;;		line 332 in file "system.c"
 22710 ;; Parameters:    Size  Location     Type
 22711 ;;  cmp1            2   26[BANK1 ] PTR const void 
 22712 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 22713 ;;  cmp2            2   28[BANK1 ] PTR const void 
 22714 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 22715 ;; Auto vars:     Size  Location     Type
 22716 ;;  b               1   31[BANK1 ] unsigned char 
 22717 ;;  a               1   30[BANK1 ] unsigned char 
 22718 ;; Return value:  Size  Location     Type
 22719 ;;                  2   26[BANK1 ] int 
 22720 ;; Registers used:
 22721 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22722 ;; Tracked objects:
 22723 ;;		On entry : 3F/1
 22724 ;;		On exit  : 3F/1
 22725 ;;		Unchanged: 0/0
 22726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22727 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22728 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22730 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22731 ;;Total ram usage:        6 bytes
 22732 ;; Hardware stack levels used:    1
 22733 ;; Hardware stack levels required when called:    4
 22734 ;; This function calls:
 22735 ;;		___bmul
 22736 ;; This function is called by:
 22737 ;;		_channelThing
 22738 ;;		_qsort
 22739 ;; This function uses a non-reentrant model
 22740 ;;
 22741                           
 22742                           
 22743                           ;psect for function _sortDCRev
 22744  29B5                     _sortDCRev:	
 22745                           
 22746                           ;system.c: 332: int sortDCRev(const void *cmp1, const void *cmp2);system.c: 333: {;syste
      +                          m.c: 334:  uint8_t a = *(uint8_t *)cmp1;
 22747                           
 22748                           ;incstack = 0
 22749                           ; Regs used in _sortDCRev: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22750  29B5  083A               	movf	sortDCRev@cmp1^(0+128),w
 22751  29B6  0086               	movwf	6
 22752  29B7  083B               	movf	(sortDCRev@cmp1+1)^(0+128),w
 22753  29B8  0087               	movwf	7
 22754  29B9  0801               	movf	1,w
 22755  29BA  00BE               	movwf	sortDCRev@a^(0+128)
 22756                           
 22757                           ;system.c: 335:  uint8_t b = *(uint8_t *)cmp2;
 22758  29BB  083C               	movf	sortDCRev@cmp2^(0+128),w
 22759  29BC  0086               	movwf	6
 22760  29BD  083D               	movf	(sortDCRev@cmp2+1)^(0+128),w
 22761  29BE  0087               	movwf	7
 22762  29BF  0801               	movf	1,w
 22763  29C0  00BF               	movwf	sortDCRev@b^(0+128)
 22764                           
 22765                           ;system.c: 337:  return (virtChannels[a].DC - virtChannels[b].DC);
 22766  29C1  3009               	movlw	9
 22767  29C2  0140               	movlb	0	; select bank0
 22768  29C3  00AC               	movwf	___bmul@multiplicand
 22769  29C4  0141               	movlb	1	; select bank1
 22770  29C5  083E               	movf	sortDCRev@a^(0+128),w
 22771  29C6  318E  268D  31A9   	fcall	___bmul
 22772  29C9  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 22773  29CA  0086               	movwf	6
 22774  29CB  3002               	movlw	2	; select bank5/6
 22775  29CC  0087               	movwf	7
 22776  29CD  3009               	movlw	9
 22777  29CE  00AC               	movwf	___bmul@multiplicand
 22778  29CF  0141               	movlb	1	; select bank1
 22779  29D0  083F               	movf	sortDCRev@b^(0+128),w
 22780  29D1  318E  268D         	fcall	___bmul
 22781  29D3  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 22782  29D4  0084               	movwf	4
 22783  29D5  3002               	movlw	2	; select bank5/6
 22784  29D6  0085               	movwf	5
 22785  29D7  0800               	movf	0,w
 22786  29D8  0201               	subwf	1,w
 22787  29D9  0141               	movlb	1	; select bank1
 22788  29DA  00BA               	movwf	?_sortDCRev^(0+128)
 22789  29DB  01BB               	clrf	(?_sortDCRev^(0+128)+1)
 22790  29DC  1C03               	skipc
 22791  29DD  03BB               	decf	(?_sortDCRev+1)^(0+128),f
 22792  29DE  0008               	return
 22793  29DF                     __end_of_sortDCRev:	
 22794                           
 22795                           	psect	text61
 22796  2CAF                     __ptext61:	
 22797 ;; *************** function ___fladd *****************
 22798 ;; Defined at:
 22799 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 22800 ;; Parameters:    Size  Location     Type
 22801 ;;  b               4   60[BANK0 ] unsigned int 
 22802 ;;  a               4   64[BANK0 ] unsigned int 
 22803 ;; Auto vars:     Size  Location     Type
 22804 ;;  grs             1   71[BANK0 ] unsigned char 
 22805 ;;  bexp            1   70[BANK0 ] unsigned char 
 22806 ;;  aexp            1   69[BANK0 ] unsigned char 
 22807 ;;  signs           1   68[BANK0 ] unsigned char 
 22808 ;; Return value:  Size  Location     Type
 22809 ;;                  4   60[BANK0 ] unsigned char 
 22810 ;; Registers used:
 22811 ;;		wreg, status,2, status,0
 22812 ;; Tracked objects:
 22813 ;;		On entry : 3F/0
 22814 ;;		On exit  : 3F/0
 22815 ;;		Unchanged: 0/0
 22816 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22817 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22818 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22819 ;;      Temps:          0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22820 ;;      Totals:         0      12       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22821 ;;Total ram usage:       20 bytes
 22822 ;; Hardware stack levels used:    1
 22823 ;; Hardware stack levels required when called:    3
 22824 ;; This function calls:
 22825 ;;		Nothing
 22826 ;; This function is called by:
 22827 ;;		_spinInput
 22828 ;;		_calcRequiredPower
 22829 ;;		_getAnalogValues
 22830 ;;		_channelThing
 22831 ;;		___flsub
 22832 ;; This function uses a non-reentrant model
 22833 ;;
 22834                           
 22835                           
 22836                           ;psect for function ___fladd
 22837  2CAF                     ___fladd:	
 22838                           
 22839                           ;incstack = 0
 22840                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 22841  2CAF  085F               	movf	___fladd@b+3,w
 22842  2CB0  00E4               	movwf	___fladd@signs
 22843  2CB1  3080               	movlw	128
 22844  2CB2  05E4               	andwf	___fladd@signs,f
 22845  2CB3  355F               	lslf	___fladd@b+3,w
 22846  2CB4  00E6               	movwf	___fladd@bexp
 22847  2CB5  1BDE               	btfsc	___fladd@b+2,7
 22848  2CB6  1466               	bsf	___fladd@bexp,0
 22849  2CB7  0866               	movf	___fladd@bexp,w
 22850  2CB8  1903               	btfsc	3,2
 22851  2CB9  2CC2               	goto	l1405
 22852  2CBA  0F66               	incfsz	___fladd@bexp,w
 22853  2CBB  2CC0               	goto	l1406
 22854  2CBC  01DC               	clrf	___fladd@b
 22855  2CBD  01DD               	clrf	___fladd@b+1
 22856  2CBE  01DE               	clrf	___fladd@b+2
 22857  2CBF  01DF               	clrf	___fladd@b+3
 22858  2CC0                     l1406:	
 22859  2CC0  17DE               	bsf	___fladd@b+2,7
 22860  2CC1  2CC5               	goto	L27
 22861  2CC2                     l1405:	
 22862  2CC2  01DC               	clrf	___fladd@b
 22863  2CC3  01DD               	clrf	___fladd@b+1
 22864  2CC4  01DE               	clrf	___fladd@b+2
 22865  2CC5                     L27:	
 22866  2CC5  01DF               	clrf	___fladd@b+3
 22867  2CC6  0863               	movf	___fladd@a+3,w
 22868  2CC7  00E5               	movwf	___fladd@aexp
 22869  2CC8  3080               	movlw	128
 22870  2CC9  05E5               	andwf	___fladd@aexp,f
 22871  2CCA  0865               	movf	___fladd@aexp,w
 22872  2CCB  0664               	xorwf	___fladd@signs,w
 22873  2CCC  1D03               	btfss	3,2
 22874  2CCD  1764               	bsf	___fladd@signs,6
 22875  2CCE  3563               	lslf	___fladd@a+3,w
 22876  2CCF  00E5               	movwf	___fladd@aexp
 22877  2CD0  1BE2               	btfsc	___fladd@a+2,7
 22878  2CD1  1465               	bsf	___fladd@aexp,0
 22879  2CD2  0865               	movf	___fladd@aexp,w
 22880  2CD3  1903               	btfsc	3,2
 22881  2CD4  2CDD               	goto	l1410
 22882  2CD5  0F65               	incfsz	___fladd@aexp,w
 22883  2CD6  2CDB               	goto	l1411
 22884  2CD7  01E0               	clrf	___fladd@a
 22885  2CD8  01E1               	clrf	___fladd@a+1
 22886  2CD9  01E2               	clrf	___fladd@a+2
 22887  2CDA  01E3               	clrf	___fladd@a+3
 22888  2CDB                     l1411:	
 22889  2CDB  17E2               	bsf	___fladd@a+2,7
 22890  2CDC  2CE0               	goto	L28
 22891  2CDD                     l1410:	
 22892  2CDD  01E0               	clrf	___fladd@a
 22893  2CDE  01E1               	clrf	___fladd@a+1
 22894  2CDF  01E2               	clrf	___fladd@a+2
 22895  2CE0                     L28:	
 22896  2CE0  01E3               	clrf	___fladd@a+3
 22897  2CE1  0866               	movf	___fladd@bexp,w
 22898  2CE2  0265               	subwf	___fladd@aexp,w
 22899  2CE3  1803               	skipnc
 22900  2CE4  2D07               	goto	l7278
 22901  2CE5  1F64               	btfss	___fladd@signs,6
 22902  2CE6  2CE9               	goto	l7248
 22903  2CE7  3080               	movlw	128
 22904  2CE8  06E4               	xorwf	___fladd@signs,f
 22905  2CE9                     l7248:	
 22906  2CE9  0866               	movf	___fladd@bexp,w
 22907  2CEA  00E7               	movwf	___fladd@grs
 22908  2CEB  0865               	movf	___fladd@aexp,w
 22909  2CEC  00E6               	movwf	___fladd@bexp
 22910  2CED  0867               	movf	___fladd@grs,w
 22911  2CEE  00E5               	movwf	___fladd@aexp
 22912  2CEF  085C               	movf	___fladd@b,w
 22913  2CF0  00E7               	movwf	___fladd@grs
 22914  2CF1  0860               	movf	___fladd@a,w
 22915  2CF2  00DC               	movwf	___fladd@b
 22916  2CF3  0867               	movf	___fladd@grs,w
 22917  2CF4  00E0               	movwf	___fladd@a
 22918  2CF5  085D               	movf	___fladd@b+1,w
 22919  2CF6  00E7               	movwf	___fladd@grs
 22920  2CF7  0861               	movf	___fladd@a+1,w
 22921  2CF8  00DD               	movwf	___fladd@b+1
 22922  2CF9  0867               	movf	___fladd@grs,w
 22923  2CFA  00E1               	movwf	___fladd@a+1
 22924  2CFB  085E               	movf	___fladd@b+2,w
 22925  2CFC  00E7               	movwf	___fladd@grs
 22926  2CFD  0862               	movf	___fladd@a+2,w
 22927  2CFE  00DE               	movwf	___fladd@b+2
 22928  2CFF  0867               	movf	___fladd@grs,w
 22929  2D00  00E2               	movwf	___fladd@a+2
 22930  2D01  085F               	movf	___fladd@b+3,w
 22931  2D02  00E7               	movwf	___fladd@grs
 22932  2D03  0863               	movf	___fladd@a+3,w
 22933  2D04  00DF               	movwf	___fladd@b+3
 22934  2D05  0867               	movf	___fladd@grs,w
 22935  2D06  00E3               	movwf	___fladd@a+3
 22936  2D07                     l7278:	
 22937  2D07  01E7               	clrf	___fladd@grs
 22938  2D08  0865               	movf	___fladd@aexp,w
 22939  2D09  0141               	movlb	1	; select bank1
 22940  2D0A  00A0               	movwf	??___fladd^(0+128)
 22941  2D0B  01A1               	clrf	(??___fladd^(0+128)+1)
 22942  2D0C  0821               	movf	(??___fladd+1)^(0+128),w
 22943  2D0D  00A3               	movwf	((??___fladd+2)^(0+128)+1)
 22944  2D0E  0140               	movlb	0	; select bank0
 22945  2D0F  0866               	movf	___fladd@bexp,w
 22946  2D10  0141               	movlb	1	; select bank1
 22947  2D11  0220               	subwf	??___fladd^(0+128),w
 22948  2D12  00A2               	movwf	(??___fladd+2)^(0+128)
 22949  2D13  1C03               	skipc
 22950  2D14  03A3               	decf	((??___fladd+2)^(0+128)+1),f
 22951  2D15  0823               	movf	(??___fladd+3)^(0+128),w
 22952  2D16  3A80               	xorlw	128
 22953  2D17  00A4               	movwf	(??___fladd+4)^(0+128)
 22954  2D18  3080               	movlw	128
 22955  2D19  0224               	subwf	(??___fladd+4)^(0+128),w
 22956  2D1A  1D03               	skipz
 22957  2D1B  2D1E               	goto	u7225
 22958  2D1C  301A               	movlw	26
 22959  2D1D  0222               	subwf	(??___fladd+2)^(0+128),w
 22960  2D1E                     u7225:	
 22961  2D1E  1C03               	skipc
 22962  2D1F  2D40               	goto	l7292
 22963  2D20  0140               	movlb	0	; select bank0
 22964  2D21  085F               	movf	___fladd@b+3,w
 22965  2D22  045E               	iorwf	___fladd@b+2,w
 22966  2D23  045D               	iorwf	___fladd@b+1,w
 22967  2D24  045C               	iorwf	___fladd@b,w
 22968  2D25  1903               	btfsc	3,2
 22969  2D26  2D29               	goto	u7230
 22970  2D27  3001               	movlw	1
 22971  2D28  2D2A               	goto	u7240
 22972  2D29                     u7230:	
 22973  2D29  3000               	movlw	0
 22974  2D2A                     u7240:	
 22975  2D2A  00E7               	movwf	___fladd@grs
 22976  2D2B  01DC               	clrf	___fladd@b
 22977  2D2C  01DD               	clrf	___fladd@b+1
 22978  2D2D  01DE               	clrf	___fladd@b+2
 22979  2D2E  01DF               	clrf	___fladd@b+3
 22980  2D2F  0865               	movf	___fladd@aexp,w
 22981  2D30  00E6               	movwf	___fladd@bexp
 22982  2D31  2D45               	goto	l1416
 22983  2D32                     l1418:	
 22984  2D32  1C67               	btfss	___fladd@grs,0
 22985  2D33  2D38               	goto	l1419
 22986  2D34  3667               	lsrf	___fladd@grs,w
 22987  2D35  3801               	iorlw	1
 22988  2D36  00E7               	movwf	___fladd@grs
 22989  2D37  2D39               	goto	l1420
 22990  2D38                     l1419:	
 22991  2D38  36E7               	lsrf	___fladd@grs,f
 22992  2D39                     l1420:	
 22993  2D39  185C               	btfsc	___fladd@b,0
 22994  2D3A  17E7               	bsf	___fladd@grs,7
 22995  2D3B  37DF               	asrf	___fladd@b+3,f
 22996  2D3C  0CDE               	rrf	___fladd@b+2,f
 22997  2D3D  0CDD               	rrf	___fladd@b+1,f
 22998  2D3E  0CDC               	rrf	___fladd@b,f
 22999  2D3F  0AE6               	incf	___fladd@bexp,f
 23000  2D40                     l7292:	
 23001  2D40  0140               	movlb	0	; select bank0
 23002  2D41  0865               	movf	___fladd@aexp,w
 23003  2D42  0266               	subwf	___fladd@bexp,w
 23004  2D43  1C03               	skipc
 23005  2D44  2D32               	goto	l1418
 23006  2D45                     l1416:	
 23007  2D45  1B64               	btfsc	___fladd@signs,6
 23008  2D46  2D68               	goto	l7310
 23009  2D47  0866               	movf	___fladd@bexp,w
 23010  2D48  1D03               	btfss	3,2
 23011  2D49  2D4F               	goto	l7298
 23012  2D4A  01DC               	clrf	?___fladd
 23013  2D4B  01DD               	clrf	?___fladd+1
 23014  2D4C  01DE               	clrf	?___fladd+2
 23015  2D4D  01DF               	clrf	?___fladd+3
 23016  2D4E  0008               	return
 23017  2D4F                     l7298:	
 23018  2D4F  0860               	movf	___fladd@a,w
 23019  2D50  07DC               	addwf	___fladd@b,f
 23020  2D51  0861               	movf	___fladd@a+1,w
 23021  2D52  3DDD               	addwfc	___fladd@b+1,f
 23022  2D53  0862               	movf	___fladd@a+2,w
 23023  2D54  3DDE               	addwfc	___fladd@b+2,f
 23024  2D55  0863               	movf	___fladd@a+3,w
 23025  2D56  3DDF               	addwfc	___fladd@b+3,f
 23026  2D57  1C5F               	btfss	___fladd@b+3,0
 23027  2D58  2DE4               	goto	l7340
 23028  2D59  1C67               	btfss	___fladd@grs,0
 23029  2D5A  2D5F               	goto	l1427
 23030  2D5B  3667               	lsrf	___fladd@grs,w
 23031  2D5C  3801               	iorlw	1
 23032  2D5D  00E7               	movwf	___fladd@grs
 23033  2D5E  2D60               	goto	l1428
 23034  2D5F                     l1427:	
 23035  2D5F  36E7               	lsrf	___fladd@grs,f
 23036  2D60                     l1428:	
 23037  2D60  185C               	btfsc	___fladd@b,0
 23038  2D61  17E7               	bsf	___fladd@grs,7
 23039  2D62  37DF               	asrf	___fladd@b+3,f
 23040  2D63  0CDE               	rrf	___fladd@b+2,f
 23041  2D64  0CDD               	rrf	___fladd@b+1,f
 23042  2D65  0CDC               	rrf	___fladd@b,f
 23043  2D66  0AE6               	incf	___fladd@bexp,f
 23044  2D67  2DE4               	goto	l7340
 23045  2D68                     l7310:	
 23046  2D68  085F               	movf	___fladd@b+3,w
 23047  2D69  3A80               	xorlw	128
 23048  2D6A  0141               	movlb	1	; select bank1
 23049  2D6B  00A0               	movwf	??___fladd^(0+128)
 23050  2D6C  0140               	movlb	0	; select bank0
 23051  2D6D  0863               	movf	___fladd@a+3,w
 23052  2D6E  3A80               	xorlw	128
 23053  2D6F  0141               	movlb	1	; select bank1
 23054  2D70  0220               	subwf	??___fladd^(0+128),w
 23055  2D71  0140               	movlb	0	; select bank0
 23056  2D72  1D03               	skipz
 23057  2D73  2D7E               	goto	u7333
 23058  2D74  0862               	movf	___fladd@a+2,w
 23059  2D75  025E               	subwf	___fladd@b+2,w
 23060  2D76  1D03               	skipz
 23061  2D77  2D7E               	goto	u7333
 23062  2D78  0861               	movf	___fladd@a+1,w
 23063  2D79  025D               	subwf	___fladd@b+1,w
 23064  2D7A  1D03               	skipz
 23065  2D7B  2D7E               	goto	u7333
 23066  2D7C  0860               	movf	___fladd@a,w
 23067  2D7D  025C               	subwf	___fladd@b,w
 23068  2D7E                     u7333:	
 23069  2D7E  1803               	skipnc
 23070  2D7F  2DBD               	goto	l7320
 23071  2D80  30FF               	movlw	255
 23072  2D81  0141               	movlb	1	; select bank1
 23073  2D82  00A0               	movwf	??___fladd^(0+128)
 23074  2D83  00A1               	movwf	(??___fladd^(0+128)+1)
 23075  2D84  00A2               	movwf	(??___fladd^(0+128)+2)
 23076  2D85  00A3               	movwf	(??___fladd^(0+128)+3)
 23077  2D86  0140               	movlb	0	; select bank0
 23078  2D87  085C               	movf	___fladd@b,w
 23079  2D88  0260               	subwf	___fladd@a,w
 23080  2D89  0141               	movlb	1	; select bank1
 23081  2D8A  00A4               	movwf	(??___fladd+4)^(0+128)
 23082  2D8B  0140               	movlb	0	; select bank0
 23083  2D8C  085D               	movf	___fladd@b+1,w
 23084  2D8D  3B61               	subwfb	___fladd@a+1,w
 23085  2D8E  0141               	movlb	1	; select bank1
 23086  2D8F  00A5               	movwf	((??___fladd+4)^(0+128)+1)
 23087  2D90  0140               	movlb	0	; select bank0
 23088  2D91  085E               	movf	___fladd@b+2,w
 23089  2D92  3B62               	subwfb	___fladd@a+2,w
 23090  2D93  0141               	movlb	1	; select bank1
 23091  2D94  00A6               	movwf	((??___fladd+4)^(0+128)+2)
 23092  2D95  0140               	movlb	0	; select bank0
 23093  2D96  085F               	movf	___fladd@b+3,w
 23094  2D97  3B63               	subwfb	___fladd@a+3,w
 23095  2D98  0141               	movlb	1	; select bank1
 23096  2D99  00A7               	movwf	((??___fladd+4)^(0+128)+3)
 23097  2D9A  0824               	movf	(??___fladd+4)^(0+128),w
 23098  2D9B  07A0               	addwf	??___fladd^(0+128),f
 23099  2D9C  0825               	movf	(??___fladd+5)^(0+128),w
 23100  2D9D  3DA1               	addwfc	(??___fladd^(0+128)+1),f
 23101  2D9E  0826               	movf	(??___fladd+6)^(0+128),w
 23102  2D9F  3DA2               	addwfc	(??___fladd^(0+128)+2),f
 23103  2DA0  0827               	movf	(??___fladd+7)^(0+128),w
 23104  2DA1  3DA3               	addwfc	(??___fladd^(0+128)+3),f
 23105  2DA2  0823               	movf	(??___fladd+3)^(0+128),w
 23106  2DA3  0140               	movlb	0	; select bank0
 23107  2DA4  00DF               	movwf	___fladd@b+3
 23108  2DA5  0141               	movlb	1	; select bank1
 23109  2DA6  0822               	movf	(??___fladd+2)^(0+128),w
 23110  2DA7  0140               	movlb	0	; select bank0
 23111  2DA8  00DE               	movwf	___fladd@b+2
 23112  2DA9  0141               	movlb	1	; select bank1
 23113  2DAA  0821               	movf	(??___fladd+1)^(0+128),w
 23114  2DAB  0140               	movlb	0	; select bank0
 23115  2DAC  00DD               	movwf	___fladd@b+1
 23116  2DAD  0141               	movlb	1	; select bank1
 23117  2DAE  0820               	movf	??___fladd^(0+128),w
 23118  2DAF  0140               	movlb	0	; select bank0
 23119  2DB0  00DC               	movwf	___fladd@b
 23120  2DB1  3080               	movlw	128
 23121  2DB2  06E4               	xorwf	___fladd@signs,f
 23122  2DB3  09E7               	comf	___fladd@grs,f
 23123  2DB4  0FE7               	incfsz	___fladd@grs,f
 23124  2DB5  2DC5               	goto	l1433
 23125  2DB6  3001               	movlw	1
 23126  2DB7  07DC               	addwf	___fladd@b,f
 23127  2DB8  3000               	movlw	0
 23128  2DB9  3DDD               	addwfc	___fladd@b+1,f
 23129  2DBA  3DDE               	addwfc	___fladd@b+2,f
 23130  2DBB  3DDF               	addwfc	___fladd@b+3,f
 23131  2DBC  2DC5               	goto	l1433
 23132  2DBD                     l7320:	
 23133  2DBD  0860               	movf	___fladd@a,w
 23134  2DBE  02DC               	subwf	___fladd@b,f
 23135  2DBF  0861               	movf	___fladd@a+1,w
 23136  2DC0  3BDD               	subwfb	___fladd@b+1,f
 23137  2DC1  0862               	movf	___fladd@a+2,w
 23138  2DC2  3BDE               	subwfb	___fladd@b+2,f
 23139  2DC3  0863               	movf	___fladd@a+3,w
 23140  2DC4  3BDF               	subwfb	___fladd@b+3,f
 23141  2DC5                     l1433:	
 23142  2DC5  085F               	movf	___fladd@b+3,w
 23143  2DC6  045E               	iorwf	___fladd@b+2,w
 23144  2DC7  045D               	iorwf	___fladd@b+1,w
 23145  2DC8  045C               	iorwf	___fladd@b,w
 23146  2DC9  1D03               	skipz
 23147  2DCA  2DE2               	goto	l7338
 23148  2DCB  0867               	movf	___fladd@grs,w
 23149  2DCC  1D03               	btfss	3,2
 23150  2DCD  2DE2               	goto	l7338
 23151  2DCE  01DC               	clrf	?___fladd
 23152  2DCF  01DD               	clrf	?___fladd+1
 23153  2DD0  01DE               	clrf	?___fladd+2
 23154  2DD1  01DF               	clrf	?___fladd+3
 23155  2DD2  0008               	return
 23156  2DD3                     l7326:	
 23157  2DD3  35DC               	lslf	___fladd@b,f
 23158  2DD4  0DDD               	rlf	___fladd@b+1,f
 23159  2DD5  0DDE               	rlf	___fladd@b+2,f
 23160  2DD6  0DDF               	rlf	___fladd@b+3,f
 23161  2DD7  1BE7               	btfsc	___fladd@grs,7
 23162  2DD8  145C               	bsf	___fladd@b,0
 23163  2DD9  1C67               	btfss	___fladd@grs,0
 23164  2DDA  2DDE               	goto	l1438
 23165  2DDB  1403               	setc
 23166  2DDC  0DE7               	rlf	___fladd@grs,f
 23167  2DDD  2DDF               	goto	l7334
 23168  2DDE                     l1438:	
 23169  2DDE  35E7               	lslf	___fladd@grs,f
 23170  2DDF                     l7334:	
 23171  2DDF  0866               	movf	___fladd@bexp,w
 23172  2DE0  1D03               	btfss	3,2
 23173  2DE1  03E6               	decf	___fladd@bexp,f
 23174  2DE2                     l7338:	
 23175  2DE2  1FDE               	btfss	___fladd@b+2,7
 23176  2DE3  2DD3               	goto	l7326
 23177  2DE4                     l7340:	
 23178  2DE4  01E5               	clrf	___fladd@aexp
 23179  2DE5  1FE7               	btfss	___fladd@grs,7
 23180  2DE6  2DEF               	goto	l7350
 23181  2DE7  0867               	movf	___fladd@grs,w
 23182  2DE8  397F               	andlw	127
 23183  2DE9  1903               	btfsc	3,2
 23184  2DEA  185C               	btfsc	___fladd@b,0
 23185  2DEB  2DED               	goto	l7346
 23186  2DEC  2DEF               	goto	l7350
 23187  2DED                     l7346:	
 23188  2DED  01E5               	clrf	___fladd@aexp
 23189  2DEE  0AE5               	incf	___fladd@aexp,f
 23190  2DEF                     l7350:	
 23191  2DEF  0865               	movf	___fladd@aexp,w
 23192  2DF0  1903               	btfsc	3,2
 23193  2DF1  2E00               	goto	l7362
 23194  2DF2  3001               	movlw	1
 23195  2DF3  07DC               	addwf	___fladd@b,f
 23196  2DF4  3000               	movlw	0
 23197  2DF5  3DDD               	addwfc	___fladd@b+1,f
 23198  2DF6  3DDE               	addwfc	___fladd@b+2,f
 23199  2DF7  3DDF               	addwfc	___fladd@b+3,f
 23200  2DF8  1C5F               	btfss	___fladd@b+3,0
 23201  2DF9  2E00               	goto	l7362
 23202  2DFA  37DF               	asrf	___fladd@b+3,f
 23203  2DFB  0CDE               	rrf	___fladd@b+2,f
 23204  2DFC  0CDD               	rrf	___fladd@b+1,f
 23205  2DFD  0CDC               	rrf	___fladd@b,f
 23206  2DFE  0F66               	incfsz	___fladd@bexp,w
 23207  2DFF  0AE6               	incf	___fladd@bexp,f
 23208  2E00                     l7362:	
 23209  2E00  0A66               	incf	___fladd@bexp,w
 23210  2E01  1D03               	btfss	3,2
 23211  2E02  0866               	movf	___fladd@bexp,w
 23212  2E03  1D03               	btfss	3,2
 23213  2E04  2E0C               	goto	l7370
 23214  2E05  01DC               	clrf	___fladd@b
 23215  2E06  01DD               	clrf	___fladd@b+1
 23216  2E07  01DE               	clrf	___fladd@b+2
 23217  2E08  01DF               	clrf	___fladd@b+3
 23218  2E09  0866               	movf	___fladd@bexp,w
 23219  2E0A  1903               	btfsc	3,2
 23220  2E0B  01E4               	clrf	___fladd@signs
 23221  2E0C                     l7370:	
 23222  2E0C  1C66               	btfss	___fladd@bexp,0
 23223  2E0D  2E10               	goto	l1453
 23224  2E0E  17DE               	bsf	___fladd@b+2,7
 23225  2E0F  2E11               	goto	l7374
 23226  2E10                     l1453:	
 23227  2E10  13DE               	bcf	___fladd@b+2,7
 23228  2E11                     l7374:	
 23229  2E11  3666               	lsrf	___fladd@bexp,w
 23230  2E12  00DF               	movwf	___fladd@b+3
 23231  2E13  1BE4               	btfsc	___fladd@signs,7
 23232  2E14  17DF               	bsf	___fladd@b+3,7
 23233  2E15  0008               	return
 23234  2E16                     __end_of___fladd:	
 23235                           
 23236                           	psect	intentry
 23237  0004                     __pintentry:	
 23238 ;; *************** function _ISR *****************
 23239 ;; Defined at:
 23240 ;;		line 23 in file "interrupt.c"
 23241 ;; Parameters:    Size  Location     Type
 23242 ;;		None
 23243 ;; Auto vars:     Size  Location     Type
 23244 ;;		None
 23245 ;; Return value:  Size  Location     Type
 23246 ;;                  1    wreg      void 
 23247 ;; Registers used:
 23248 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23249 ;; Tracked objects:
 23250 ;;		On entry : 0/0
 23251 ;;		On exit  : 3F/E
 23252 ;;		Unchanged: 0/0
 23253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23256 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23257 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23258 ;;Total ram usage:        4 bytes
 23259 ;; Hardware stack levels used:    1
 23260 ;; Hardware stack levels required when called:    2
 23261 ;; This function calls:
 23262 ;;		_pushButtonISR
 23263 ;;		_rotISR
 23264 ;;		_uartReceiveISR
 23265 ;; This function is called by:
 23266 ;;		Interrupt level 1
 23267 ;; This function uses a non-reentrant model
 23268 ;;
 23269                           
 23270  0004                     _ISR:	
 23271                           
 23272                           ;incstack = 0
 23273  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 23274                           
 23275                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23276  0005  3180               	pagesel	$
 23277                           
 23278                           ;interrupt.c: 25:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 23279  0006  014E               	movlb	14	; select bank14
 23280  0007  1A96               	btfsc	22,5	;volatile
 23281  0008  1E8C               	btfss	12,5	;volatile
 23282  0009  2818               	goto	i1l277
 23283                           
 23284                           ;interrupt.c: 28:   tick10ms++;
 23285  000A  0AFD               	incf	_tick10ms,f	;volatile
 23286                           
 23287                           ;interrupt.c: 29:   if (pbState == PB_WAIT)
 23288  000B  3004               	movlw	4
 23289  000C  067C               	xorwf	_pbState,w
 23290  000D  1D03               	btfss	3,2
 23291  000E  2812               	goto	i1l8704
 23292                           
 23293                           ;interrupt.c: 30:    pushButtonISR();
 23294  000F  31A9  21DF  3180   	fcall	_pushButtonISR
 23295  0012                     i1l8704:	
 23296                           
 23297                           ;interrupt.c: 31:   TMR0 = 178;
 23298  0012  30B2               	movlw	178
 23299  0013  014B               	movlb	11	; select bank11
 23300  0014  009C               	movwf	28	;volatile
 23301                           
 23302                           ;interrupt.c: 32:   PIR0bits.TMR0IF = 0;
 23303  0015  014E               	movlb	14	; select bank14
 23304  0016  128C               	bcf	12,5	;volatile
 23305                           
 23306                           ;interrupt.c: 33:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 23307  0017  286E               	goto	i1l290
 23308  0018                     i1l277:	
 23309  0018  1A16               	btfsc	22,4	;volatile
 23310  0019  1E0C               	btfss	12,4	;volatile
 23311  001A  2834               	goto	i1l280
 23312                           
 23313                           ;interrupt.c: 35:   if (IOCAFbits.IOCAF7 == 1) {
 23314  001B  017E               	movlb	62	; select bank62
 23315  001C  1FBF               	btfss	63,7	;volatile
 23316  001D  2823               	goto	i1l8716
 23317                           
 23318                           ;interrupt.c: 36:    pushButtonISR();
 23319  001E  31A9  21DF  3180   	fcall	_pushButtonISR
 23320                           
 23321                           ;interrupt.c: 37:    IOCAFbits.IOCAF7 = 0;
 23322  0021  017E               	movlb	62	; select bank62
 23323  0022  13BF               	bcf	63,7	;volatile
 23324  0023                     i1l8716:	
 23325                           
 23326                           ;interrupt.c: 39:   if (IOCAFbits.IOCAF4 == 1) {
 23327  0023  1E3F               	btfss	63,4	;volatile
 23328  0024  282A               	goto	i1l8722
 23329                           
 23330                           ;interrupt.c: 40:    rotISR();
 23331  0025  31AA  2210  3180   	fcall	_rotISR
 23332                           
 23333                           ;interrupt.c: 41:    IOCAFbits.IOCAF4 = 0;
 23334  0028  017E               	movlb	62	; select bank62
 23335  0029  123F               	bcf	63,4	;volatile
 23336  002A                     i1l8722:	
 23337                           
 23338                           ;interrupt.c: 43:   if (IOCAFbits.IOCAF5 == 1) {
 23339  002A  1EBF               	btfss	63,5	;volatile
 23340  002B  2831               	goto	i1l8728
 23341                           
 23342                           ;interrupt.c: 44:    rotISR();
 23343  002C  31AA  2210  3180   	fcall	_rotISR
 23344                           
 23345                           ;interrupt.c: 45:    IOCAFbits.IOCAF5 = 0;
 23346  002F  017E               	movlb	62	; select bank62
 23347  0030  12BF               	bcf	63,5	;volatile
 23348  0031                     i1l8728:	
 23349                           
 23350                           ;interrupt.c: 47:   PIR0bits.IOCIF = 0;
 23351  0031  014E               	movlb	14	; select bank14
 23352  0032  120C               	bcf	12,4	;volatile
 23353                           
 23354                           ;interrupt.c: 48:  } else if (INTCONbits.PEIE == 1) {
 23355  0033  286E               	goto	i1l290
 23356  0034                     i1l280:	
 23357  0034  1F0B               	btfss	11,6	;volatile
 23358  0035  286E               	goto	i1l290
 23359                           
 23360                           ;interrupt.c: 49:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 23361  0036  181A               	btfsc	26,0	;volatile
 23362  0037  1C10               	btfss	16,0	;volatile
 23363  0038  2867               	goto	i1l286
 23364                           
 23365                           ;interrupt.c: 52:    if (tick100ms++ >= 1000000000UL)
 23366  0039  0142               	movlb	2	; select bank2
 23367  003A  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
 23368  003B  0140               	movlb	0	; select bank0
 23369  003C  00A3               	movwf	??_ISR+3
 23370  003D  0142               	movlb	2	; select bank2
 23371  003E  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
 23372  003F  0140               	movlb	0	; select bank0
 23373  0040  00A2               	movwf	??_ISR+2
 23374  0041  0142               	movlb	2	; select bank2
 23375  0042  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
 23376  0043  0140               	movlb	0	; select bank0
 23377  0044  00A1               	movwf	??_ISR+1
 23378  0045  0142               	movlb	2	; select bank2
 23379  0046  0867               	movf	_tick100ms^(0+256),w	;volatile
 23380  0047  0140               	movlb	0	; select bank0
 23381  0048  00A0               	movwf	??_ISR
 23382  0049  3001               	movlw	1
 23383  004A  0142               	movlb	2	; select bank2
 23384  004B  07E7               	addwf	_tick100ms^(0+256),f	;volatile
 23385  004C  3000               	movlw	0
 23386  004D  3DE8               	addwfc	(_tick100ms+1)^(0+256),f	;volatile
 23387  004E  3DE9               	addwfc	(_tick100ms+2)^(0+256),f	;volatile
 23388  004F  3DEA               	addwfc	(_tick100ms+3)^(0+256),f	;volatile
 23389  0050  0140               	movlb	0	; select bank0
 23390  0051  0220               	subwf	??_ISR,w
 23391  0052  30CA               	movlw	202
 23392  0053  3B21               	subwfb	??_ISR+1,w
 23393  0054  309A               	movlw	154
 23394  0055  3B22               	subwfb	??_ISR+2,w
 23395  0056  303B               	movlw	59
 23396  0057  3B23               	subwfb	??_ISR+3,w
 23397  0058  1C03               	btfss	3,0
 23398  0059  285F               	goto	i1l287
 23399                           
 23400                           ;interrupt.c: 53:     tick100ms = 0;
 23401  005A  0142               	movlb	2	; select bank2
 23402  005B  01E7               	clrf	_tick100ms^(0+256)	;volatile
 23403  005C  01E8               	clrf	(_tick100ms+1)^(0+256)	;volatile
 23404  005D  01E9               	clrf	(_tick100ms+2)^(0+256)	;volatile
 23405  005E  01EA               	clrf	(_tick100ms+3)^(0+256)	;volatile
 23406  005F                     i1l287:	
 23407                           
 23408                           ;interrupt.c: 54:    TMR1 = 53035;
 23409  005F  30CF               	movlw	207
 23410  0060  0144               	movlb	4	; select bank4
 23411  0061  008D               	movwf	13	;volatile
 23412  0062  302B               	movlw	43
 23413  0063  008C               	movwf	12	;volatile
 23414                           
 23415                           ;interrupt.c: 55:    PIR4bits.TMR1IF = 0;
 23416  0064  014E               	movlb	14	; select bank14
 23417  0065  1010               	bcf	16,0	;volatile
 23418                           
 23419                           ;interrupt.c: 56:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 23420  0066  286E               	goto	i1l290
 23421  0067                     i1l286:	
 23422  0067  1A99               	btfsc	25,5	;volatile
 23423  0068  1E8F               	btfss	15,5	;volatile
 23424  0069  286E               	goto	i1l290
 23425                           
 23426                           ;interrupt.c: 57:    uartReceiveISR();
 23427  006A  3187  2724         	fcall	_uartReceiveISR
 23428                           
 23429                           ;interrupt.c: 58:    PIR3bits.RC1IF = 0;
 23430  006C  014E               	movlb	14	; select bank14
 23431  006D  128F               	bcf	15,5	;volatile
 23432  006E                     i1l290:	
 23433  006E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 23434  006F  0009               	retfie
 23435  0070                     __end_of_ISR:	
 23436                           
 23437                           	psect	text73
 23438  0724                     __ptext73:	
 23439 ;; *************** function _uartReceiveISR *****************
 23440 ;; Defined at:
 23441 ;;		line 26 in file "uart.c"
 23442 ;; Parameters:    Size  Location     Type
 23443 ;;		None
 23444 ;; Auto vars:     Size  Location     Type
 23445 ;;		None
 23446 ;; Return value:  Size  Location     Type
 23447 ;;                  1    wreg      void 
 23448 ;; Registers used:
 23449 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23450 ;; Tracked objects:
 23451 ;;		On entry : 3F/E
 23452 ;;		On exit  : 3F/0
 23453 ;;		Unchanged: 0/0
 23454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23456 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23458 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23459 ;;Total ram usage:        0 bytes
 23460 ;; Hardware stack levels used:    1
 23461 ;; Hardware stack levels required when called:    1
 23462 ;; This function calls:
 23463 ;;		i1___flge
 23464 ;;		i1_memcpy
 23465 ;; This function is called by:
 23466 ;;		_ISR
 23467 ;; This function uses a non-reentrant model
 23468 ;;
 23469                           
 23470                           
 23471                           ;psect for function _uartReceiveISR
 23472  0724                     _uartReceiveISR:	
 23473                           
 23474                           ;uart.c: 29:  if (RC1STAbits.OERR)
 23475                           
 23476                           ;incstack = 0
 23477                           ; Regs used in _uartReceiveISR: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 23478  0724  0142               	movlb	2	; select bank2
 23479  0725  1C9D               	btfss	29,1	;volatile
 23480  0726  2F2B               	goto	i1l8592
 23481                           
 23482                           ;uart.c: 30:  {;uart.c: 31:   RC1STAbits.CREN = 0;
 23483  0727  121D               	bcf	29,4	;volatile
 23484                           
 23485                           ;uart.c: 32:   RC1STAbits.CREN = 1;
 23486  0728  161D               	bsf	29,4	;volatile
 23487                           
 23488                           ;uart.c: 33:   rxOErrCount++;
 23489  0729  0143               	movlb	3	; select bank3
 23490  072A  0AE2               	incf	_rxOErrCount^(0+384),f	;volatile
 23491  072B                     i1l8592:	
 23492                           
 23493                           ;uart.c: 35:  if (RC1STAbits.FERR)
 23494  072B  0142               	movlb	2	; select bank2
 23495  072C  1D1D               	btfss	29,2	;volatile
 23496  072D  2F32               	goto	i1l8598
 23497                           
 23498                           ;uart.c: 36:  {;uart.c: 37:   RC1STAbits.SPEN = 0;
 23499  072E  139D               	bcf	29,7	;volatile
 23500                           
 23501                           ;uart.c: 38:   RC1STAbits.SPEN = 1;
 23502  072F  179D               	bsf	29,7	;volatile
 23503                           
 23504                           ;uart.c: 39:   rxFErrCount++;
 23505  0730  0143               	movlb	3	; select bank3
 23506  0731  0AE3               	incf	_rxFErrCount^(0+384),f	;volatile
 23507  0732                     i1l8598:	
 23508                           
 23509                           ;uart.c: 43:  if (rxCount < sizeof(dataPacket)) {
 23510  0732  300F               	movlw	15
 23511  0733  0140               	movlb	0	; select bank0
 23512  0734  0269               	subwf	_rxCount,w
 23513  0735  1803               	skipnc
 23514  0736  2F49               	goto	i1l8604
 23515                           
 23516                           ;uart.c: 44:   buffer[rxCount] = RC1REG;
 23517  0737  0869               	movf	_rxCount,w
 23518  0738  3EC4               	addlw	(low (_buffer| (0+512)))& (0+255)
 23519  0739  0086               	movwf	6
 23520  073A  3002               	movlw	2	; select bank5/6
 23521  073B  0087               	movwf	7
 23522  073C  0142               	movlb	2	; select bank2
 23523  073D  0819               	movf	25,w	;volatile
 23524  073E  0081               	movwf	1
 23525                           
 23526                           ;uart.c: 45:   checksum ^= buffer[rxCount];
 23527  073F  0140               	movlb	0	; select bank0
 23528  0740  0869               	movf	_rxCount,w
 23529  0741  3EC4               	addlw	(low (_buffer| (0+512)))& (0+255)
 23530  0742  0086               	movwf	6
 23531  0743  0801               	movf	1,w
 23532  0744  0143               	movlb	3	; select bank3
 23533  0745  06E1               	xorwf	_checksum^(0+384),f
 23534                           
 23535                           ;uart.c: 46:   rxCount++;
 23536  0746  0140               	movlb	0	; select bank0
 23537  0747  0AE9               	incf	_rxCount,f	;volatile
 23538                           
 23539                           ;uart.c: 47:  } else {
 23540  0748  0008               	return
 23541  0749                     i1l8604:	
 23542                           
 23543                           ;uart.c: 49:   if (RC1REG != checksum)
 23544  0749  0142               	movlb	2	; select bank2
 23545  074A  0819               	movf	25,w	;volatile
 23546  074B  0143               	movlb	3	; select bank3
 23547  074C  0661               	xorwf	_checksum^(0+384),w
 23548  074D  1903               	skipnz
 23549  074E  2F51               	goto	i1l8608
 23550                           
 23551                           ;uart.c: 50:    dataPacket.status = 0;
 23552  074F  0144               	movlb	4	; select bank4
 23553  0750  01BA               	clrf	(_dataPacket^(0+512)+2)	;volatile
 23554  0751                     i1l8608:	
 23555                           
 23556                           ;uart.c: 52:   uartDataReadyFlag = 1;
 23557  0751  3001               	movlw	1
 23558  0752  0141               	movlb	1	; select bank1
 23559  0753  00EF               	movwf	_uartDataReadyFlag^(0+128)	;volatile
 23560                           
 23561                           ;uart.c: 53:   memcpy((void *) &dataPacket,(void *) buffer, sizeof(dataPacket));
 23562  0754  3038               	movlw	low _dataPacket
 23563  0755  00F0               	movwf	i1memcpy@d1
 23564  0756  3002               	movlw	high _dataPacket
 23565  0757  00F1               	movwf	i1memcpy@d1+1
 23566  0758  30C4               	movlw	(low (_buffer| (0+512)))& (0+255)
 23567  0759  00F2               	movwf	i1memcpy@s1
 23568  075A  300F               	movlw	15
 23569  075B  00F3               	movwf	i1memcpy@n
 23570  075C  01F4               	clrf	i1memcpy@n+1
 23571  075D  277B  3187         	fcall	i1_memcpy
 23572                           
 23573                           ;uart.c: 54:   if (dataPacket.tempC < 1.0)
 23574  075F  3003               	movlw	3
 23575  0760  3E38               	addlw	(low (_dataPacket| (0+512)))& (0+255)
 23576  0761  0086               	movwf	6
 23577  0762  3002               	movlw	2	; select bank4/5
 23578  0763  0087               	movwf	7
 23579  0764  3F40               	moviw [0]fsr1
 23580  0765  00F0               	movwf	i1___flge@ff1
 23581  0766  3F41               	moviw [1]fsr1
 23582  0767  00F1               	movwf	i1___flge@ff1+1
 23583  0768  3F42               	moviw [2]fsr1
 23584  0769  00F2               	movwf	i1___flge@ff1+2
 23585  076A  3F43               	moviw [3]fsr1
 23586  076B  00F3               	movwf	i1___flge@ff1+3
 23587  076C  303F               	movlw	63
 23588  076D  00F7               	movwf	i1___flge@ff2+3
 23589  076E  3080               	movlw	128
 23590  076F  00F6               	movwf	i1___flge@ff2+2
 23591  0770  3000               	movlw	0
 23592  0771  01F5               	clrf	i1___flge@ff2+1
 23593  0772  01F4               	clrf	i1___flge@ff2
 23594  0773  279B               	fcall	i1___flge
 23595  0774  1C03               	btfss	3,0
 23596                           
 23597                           ;uart.c: 55:    __nop();
 23598  0775  0000               	nop
 23599                           
 23600                           ;uart.c: 56:   checksum = 0;
 23601  0776  0143               	movlb	3	; select bank3
 23602  0777  01E1               	clrf	_checksum^(0+384)
 23603                           
 23604                           ;uart.c: 57:   rxCount = 0;
 23605  0778  0140               	movlb	0	; select bank0
 23606  0779  01E9               	clrf	_rxCount	;volatile
 23607  077A  0008               	return
 23608  077B                     __end_of_uartReceiveISR:	
 23609  077B                     __ptext74:	
 23610 ;; *************** function i1_memcpy *****************
 23611 ;; Defined at:
 23612 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 23613 ;; Parameters:    Size  Location     Type
 23614 ;;  d1              2    0[COMMON] PTR void 
 23615 ;;		 -> qsort@xbuf(60), dataPacket(15), 
 23616 ;;  s1              1    2[COMMON] PTR const void 
 23617 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), buffer(20), 
 23618 ;;  n               2    3[COMMON] unsigned int 
 23619 ;; Auto vars:     Size  Location     Type
 23620 ;;  memcpy          2    6[COMMON] PTR unsigned char 
 23621 ;;		 -> qsort@xbuf(60), dataPacket(15), 
 23622 ;;  memcpy          1    8[COMMON] PTR const unsigned char 
 23623 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), buffer(20), 
 23624 ;;  memcpy          1    5[COMMON] unsigned char 
 23625 ;; Return value:  Size  Location     Type
 23626 ;;                  1    wreg      PTR void 
 23627 ;; Registers used:
 23628 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 23629 ;; Tracked objects:
 23630 ;;		On entry : 3F/1
 23631 ;;		On exit  : 3F/1
 23632 ;;		Unchanged: 3F/0
 23633 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23634 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23635 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23637 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23638 ;;Total ram usage:        9 bytes
 23639 ;; Hardware stack levels used:    1
 23640 ;; This function calls:
 23641 ;;		Nothing
 23642 ;; This function is called by:
 23643 ;;		_uartReceiveISR
 23644 ;; This function uses a non-reentrant model
 23645 ;;
 23646                           
 23647                           
 23648                           ;psect for function i1_memcpy
 23649  077B                     i1_memcpy:	
 23650                           
 23651                           ;incstack = 0
 23652                           ; Regs used in i1_memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 23653  077B  0872               	movf	i1memcpy@s1,w
 23654  077C  00F8               	movwf	i1memcpy@s
 23655  077D  0871               	movf	i1memcpy@d1+1,w
 23656  077E  00F7               	movwf	i1memcpy@d+1
 23657  077F  0870               	movf	i1memcpy@d1,w
 23658  0780  00F6               	movwf	i1memcpy@d
 23659  0781                     i1l8182:	
 23660  0781  3001               	movlw	1
 23661  0782  02F3               	subwf	i1memcpy@n,f
 23662  0783  3000               	movlw	0
 23663  0784  3BF4               	subwfb	i1memcpy@n+1,f
 23664  0785  0F73               	incfsz	i1memcpy@n,w
 23665  0786  2F8A               	goto	i1l8176
 23666  0787  0A74               	incf	i1memcpy@n+1,w
 23667  0788  1903               	btfsc	3,2
 23668  0789  0008               	return
 23669  078A                     i1l8176:	
 23670  078A  0878               	movf	i1memcpy@s,w
 23671  078B  0086               	movwf	6
 23672  078C  3002               	movlw	2	; select bank4/5
 23673  078D  0087               	movwf	7
 23674  078E  0801               	movf	1,w
 23675  078F  00F5               	movwf	i1memcpy@tmp
 23676  0790  0AF8               	incf	i1memcpy@s,f
 23677  0791  0876               	movf	i1memcpy@d,w
 23678  0792  0086               	movwf	6
 23679  0793  0877               	movf	i1memcpy@d+1,w
 23680  0794  0087               	movwf	7
 23681  0795  0875               	movf	i1memcpy@tmp,w
 23682  0796  0081               	movwf	1
 23683  0797  0AF6               	incf	i1memcpy@d,f
 23684  0798  1903               	skipnz
 23685  0799  0AF7               	incf	i1memcpy@d+1,f
 23686  079A  2F81               	goto	i1l8182
 23687  079B                     __end_ofi1_memcpy:	
 23688  079B                     __ptext75:	
 23689 ;; *************** function i1___flge *****************
 23690 ;; Defined at:
 23691 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 23692 ;; Parameters:    Size  Location     Type
 23693 ;;  ff1             4    0[COMMON] PTR void 
 23694 ;;  ff2             4    4[COMMON] PTR void 
 23695 ;; Auto vars:     Size  Location     Type
 23696 ;;		None
 23697 ;; Return value:  Size  Location     Type
 23698 ;;		None               void
 23699 ;; Registers used:
 23700 ;;		wreg, status,2, status,0
 23701 ;; Tracked objects:
 23702 ;;		On entry : 3F/1
 23703 ;;		On exit  : 3F/1
 23704 ;;		Unchanged: 3F/0
 23705 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23706 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23708 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23709 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23710 ;;Total ram usage:       12 bytes
 23711 ;; Hardware stack levels used:    1
 23712 ;; This function calls:
 23713 ;;		Nothing
 23714 ;; This function is called by:
 23715 ;;		_uartReceiveISR
 23716 ;; This function uses a non-reentrant model
 23717 ;;
 23718                           
 23719                           
 23720                           ;psect for function i1___flge
 23721  079B                     i1___flge:	
 23722                           
 23723                           ;incstack = 0
 23724                           ; Regs used in i1___flge: [wreg+status,2+status,0]
 23725  079B  3080               	movlw	128
 23726  079C  01F8               	clrf	??i1___flge
 23727  079D  01F9               	clrf	??i1___flge+1
 23728  079E  0572               	andwf	i1___flge@ff1+2,w
 23729  079F  00FA               	movwf	??i1___flge+2
 23730  07A0  307F               	movlw	127
 23731  07A1  0573               	andwf	i1___flge@ff1+3,w
 23732  07A2  00FB               	movwf	??i1___flge+3
 23733  07A3  047A               	iorwf	??i1___flge+2,w
 23734  07A4  0479               	iorwf	??i1___flge+1,w
 23735  07A5  0478               	iorwf	??i1___flge,w
 23736  07A6  1D03               	skipz
 23737  07A7  2FAC               	goto	i1l6188
 23738  07A8  01F0               	clrf	i1___flge@ff1
 23739  07A9  01F1               	clrf	i1___flge@ff1+1
 23740  07AA  01F2               	clrf	i1___flge@ff1+2
 23741  07AB  01F3               	clrf	i1___flge@ff1+3
 23742  07AC                     i1l6188:	
 23743  07AC  3080               	movlw	128
 23744  07AD  01F8               	clrf	??i1___flge
 23745  07AE  01F9               	clrf	??i1___flge+1
 23746  07AF  0576               	andwf	i1___flge@ff2+2,w
 23747  07B0  00FA               	movwf	??i1___flge+2
 23748  07B1  307F               	movlw	127
 23749  07B2  0577               	andwf	i1___flge@ff2+3,w
 23750  07B3  00FB               	movwf	??i1___flge+3
 23751  07B4  047A               	iorwf	??i1___flge+2,w
 23752  07B5  0479               	iorwf	??i1___flge+1,w
 23753  07B6  0478               	iorwf	??i1___flge,w
 23754  07B7  1D03               	skipz
 23755  07B8  2FBD               	goto	i1l1290
 23756  07B9  01F4               	clrf	i1___flge@ff2
 23757  07BA  01F5               	clrf	i1___flge@ff2+1
 23758  07BB  01F6               	clrf	i1___flge@ff2+2
 23759  07BC  01F7               	clrf	i1___flge@ff2+3
 23760  07BD                     i1l1290:	
 23761  07BD  1FF3               	btfss	i1___flge@ff1+3,7
 23762  07BE  2FD4               	goto	i1l6194
 23763  07BF  3080               	movlw	128
 23764  07C0  01F8               	clrf	??i1___flge
 23765  07C1  01F9               	clrf	??i1___flge+1
 23766  07C2  01FA               	clrf	??i1___flge+2
 23767  07C3  00FB               	movwf	??i1___flge+3
 23768  07C4  0870               	movf	i1___flge@ff1,w
 23769  07C5  02F8               	subwf	??i1___flge,f
 23770  07C6  0871               	movf	i1___flge@ff1+1,w
 23771  07C7  3BF9               	subwfb	??i1___flge+1,f
 23772  07C8  0872               	movf	i1___flge@ff1+2,w
 23773  07C9  3BFA               	subwfb	??i1___flge+2,f
 23774  07CA  0873               	movf	i1___flge@ff1+3,w
 23775  07CB  3BFB               	subwfb	??i1___flge+3,f
 23776  07CC  087B               	movf	??i1___flge+3,w
 23777  07CD  00F3               	movwf	i1___flge@ff1+3
 23778  07CE  087A               	movf	??i1___flge+2,w
 23779  07CF  00F2               	movwf	i1___flge@ff1+2
 23780  07D0  0879               	movf	??i1___flge+1,w
 23781  07D1  00F1               	movwf	i1___flge@ff1+1
 23782  07D2  0878               	movf	??i1___flge,w
 23783  07D3  00F0               	movwf	i1___flge@ff1
 23784  07D4                     i1l6194:	
 23785  07D4  1FF7               	btfss	i1___flge@ff2+3,7
 23786  07D5  2FEB               	goto	i1l1292
 23787  07D6  3080               	movlw	128
 23788  07D7  01F8               	clrf	??i1___flge
 23789  07D8  01F9               	clrf	??i1___flge+1
 23790  07D9  01FA               	clrf	??i1___flge+2
 23791  07DA  00FB               	movwf	??i1___flge+3
 23792  07DB  0874               	movf	i1___flge@ff2,w
 23793  07DC  02F8               	subwf	??i1___flge,f
 23794  07DD  0875               	movf	i1___flge@ff2+1,w
 23795  07DE  3BF9               	subwfb	??i1___flge+1,f
 23796  07DF  0876               	movf	i1___flge@ff2+2,w
 23797  07E0  3BFA               	subwfb	??i1___flge+2,f
 23798  07E1  0877               	movf	i1___flge@ff2+3,w
 23799  07E2  3BFB               	subwfb	??i1___flge+3,f
 23800  07E3  087B               	movf	??i1___flge+3,w
 23801  07E4  00F7               	movwf	i1___flge@ff2+3
 23802  07E5  087A               	movf	??i1___flge+2,w
 23803  07E6  00F6               	movwf	i1___flge@ff2+2
 23804  07E7  0879               	movf	??i1___flge+1,w
 23805  07E8  00F5               	movwf	i1___flge@ff2+1
 23806  07E9  0878               	movf	??i1___flge,w
 23807  07EA  00F4               	movwf	i1___flge@ff2
 23808  07EB                     i1l1292:	
 23809  07EB  3080               	movlw	128
 23810  07EC  06F3               	xorwf	i1___flge@ff1+3,f
 23811  07ED  06F7               	xorwf	i1___flge@ff2+3,f
 23812  07EE  0877               	movf	i1___flge@ff2+3,w
 23813  07EF  0273               	subwf	i1___flge@ff1+3,w
 23814  07F0  1D03               	skipz
 23815  07F1  0008               	return
 23816  07F2  0876               	movf	i1___flge@ff2+2,w
 23817  07F3  0272               	subwf	i1___flge@ff1+2,w
 23818  07F4  1D03               	skipz
 23819  07F5  0008               	return
 23820  07F6  0875               	movf	i1___flge@ff2+1,w
 23821  07F7  0271               	subwf	i1___flge@ff1+1,w
 23822  07F8  1D03               	skipz
 23823  07F9  0008               	return
 23824  07FA  0874               	movf	i1___flge@ff2,w
 23825  07FB  0270               	subwf	i1___flge@ff1,w
 23826  07FC  0008               	return
 23827  07FD                     __end_ofi1___flge:	
 23828                           
 23829                           	psect	text76
 23830  2A10                     __ptext76:	
 23831 ;; *************** function _rotISR *****************
 23832 ;; Defined at:
 23833 ;;		line 36 in file "inputs.c"
 23834 ;; Parameters:    Size  Location     Type
 23835 ;;		None
 23836 ;; Auto vars:     Size  Location     Type
 23837 ;;		None
 23838 ;; Return value:  Size  Location     Type
 23839 ;;                  1    wreg      void 
 23840 ;; Registers used:
 23841 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 23842 ;; Tracked objects:
 23843 ;;		On entry : 3F/3E
 23844 ;;		On exit  : 3F/2
 23845 ;;		Unchanged: 0/0
 23846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23849 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23850 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23851 ;;Total ram usage:       12 bytes
 23852 ;; Hardware stack levels used:    1
 23853 ;; This function calls:
 23854 ;;		Nothing
 23855 ;; This function is called by:
 23856 ;;		_ISR
 23857 ;; This function uses a non-reentrant model
 23858 ;;
 23859                           
 23860                           
 23861                           ;psect for function _rotISR
 23862  2A10                     _rotISR:	
 23863                           
 23864                           ;inputs.c: 43:  curRotState = transition_table[curRotState & 0b00000111][(PORTAbits.RA5 
      +                          << 1) | PORTAbits.RA4];
 23865                           
 23866                           ;incstack = 0
 23867                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 23868  2A10  0140               	movlb	0	; select bank0
 23869  2A11  0E0C               	swapf	12,w	;volatile
 23870  2A12  3901               	andlw	1
 23871  2A13  00F0               	movwf	??_rotISR
 23872  2A14  01F1               	clrf	??_rotISR+1
 23873  2A15  0E0C               	swapf	12,w	;volatile
 23874  2A16  0C89               	rrf	9,f
 23875  2A17  3901               	andlw	1
 23876  2A18  00F2               	movwf	??_rotISR+2
 23877  2A19  01F3               	clrf	??_rotISR+3
 23878  2A1A  35F2               	lslf	??_rotISR+2,f
 23879  2A1B  0DF3               	rlf	??_rotISR+3,f
 23880  2A1C  0870               	movf	??_rotISR,w
 23881  2A1D  0472               	iorwf	??_rotISR+2,w
 23882  2A1E  00F4               	movwf	??_rotISR+4
 23883  2A1F  0871               	movf	??_rotISR+1,w
 23884  2A20  0473               	iorwf	??_rotISR+3,w
 23885  2A21  00F5               	movwf	??_rotISR+5
 23886  2A22  086A               	movf	_curRotState,w	;volatile
 23887  2A23  3907               	andlw	7
 23888  2A24  00F6               	movwf	??_rotISR+6
 23889  2A25  30FC               	movlw	low (_transition_table| (0+32768))
 23890  2A26  01F7               	clrf	??_rotISR+7
 23891  2A27  35F6               	lslf	??_rotISR+6,f
 23892  2A28  0DF7               	rlf	??_rotISR+7,f
 23893  2A29  35F6               	lslf	??_rotISR+6,f
 23894  2A2A  0DF7               	rlf	??_rotISR+7,f
 23895  2A2B  00F8               	movwf	??_rotISR+8
 23896  2A2C  30B0               	movlw	high (_transition_table| (0+32768))
 23897  2A2D  00F9               	movwf	??_rotISR+9
 23898  2A2E  0876               	movf	??_rotISR+6,w
 23899  2A2F  0778               	addwf	??_rotISR+8,w
 23900  2A30  00FA               	movwf	??_rotISR+10
 23901  2A31  0877               	movf	??_rotISR+7,w
 23902  2A32  3D79               	addwfc	??_rotISR+9,w
 23903  2A33  00FB               	movwf	??_rotISR+11
 23904  2A34  087A               	movf	??_rotISR+10,w
 23905  2A35  0774               	addwf	??_rotISR+4,w
 23906  2A36  0084               	movwf	4
 23907  2A37  087B               	movf	??_rotISR+11,w
 23908  2A38  3D75               	addwfc	??_rotISR+5,w
 23909  2A39  0085               	movwf	5
 23910  2A3A  0800               	movf	0,w	;code access
 23911  2A3B  00EA               	movwf	_curRotState	;volatile
 23912                           
 23913                           ;inputs.c: 46:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 23914  2A3C  1FEA               	btfss	_curRotState,7	;volatile
 23915  2A3D  2A41               	goto	i1l6900
 23916  2A3E  3001               	movlw	1
 23917  2A3F  0143               	movlb	3	; select bank3
 23918  2A40  00E4               	movwf	_rotDir^(0+384)	;volatile
 23919  2A41                     i1l6900:	
 23920                           
 23921                           ;inputs.c: 47:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 23922  2A41  0140               	movlb	0	; select bank0
 23923  2A42  1F6A               	btfss	_curRotState,6	;volatile
 23924  2A43  2A47               	goto	i1l316
 23925  2A44  3002               	movlw	2
 23926  2A45  0143               	movlb	3	; select bank3
 23927  2A46  00E4               	movwf	_rotDir^(0+384)	;volatile
 23928  2A47                     i1l316:	
 23929                           
 23930                           ;inputs.c: 49:  userActivity = tick100ms;
 23931  2A47  0142               	movlb	2	; select bank2
 23932  2A48  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
 23933  2A49  00E6               	movwf	(_userActivity+3)^(0+256)	;volatile
 23934  2A4A  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
 23935  2A4B  00E5               	movwf	(_userActivity+2)^(0+256)	;volatile
 23936  2A4C  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
 23937  2A4D  00E4               	movwf	(_userActivity+1)^(0+256)	;volatile
 23938  2A4E  0867               	movf	_tick100ms^(0+256),w	;volatile
 23939  2A4F  00E3               	movwf	_userActivity^(0+256)	;volatile
 23940  2A50  0008               	return
 23941  2A51                     __end_of_rotISR:	
 23942                           
 23943                           	psect	text77
 23944  29DF                     __ptext77:	
 23945 ;; *************** function _pushButtonISR *****************
 23946 ;; Defined at:
 23947 ;;		line 56 in file "inputs.c"
 23948 ;; Parameters:    Size  Location     Type
 23949 ;;		None
 23950 ;; Auto vars:     Size  Location     Type
 23951 ;;		None
 23952 ;; Return value:  Size  Location     Type
 23953 ;;                  1    wreg      void 
 23954 ;; Registers used:
 23955 ;;		wreg, status,2, status,0
 23956 ;; Tracked objects:
 23957 ;;		On entry : F/E
 23958 ;;		On exit  : 3D/0
 23959 ;;		Unchanged: 0/0
 23960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23965 ;;Total ram usage:        0 bytes
 23966 ;; Hardware stack levels used:    1
 23967 ;; This function calls:
 23968 ;;		Nothing
 23969 ;; This function is called by:
 23970 ;;		_ISR
 23971 ;; This function uses a non-reentrant model
 23972 ;;
 23973                           
 23974                           
 23975                           ;psect for function _pushButtonISR
 23976  29DF                     _pushButtonISR:	
 23977                           
 23978                           ;inputs.c: 59:  if ((!PORTAbits.RA7) && (pbState != PB_WAIT)) {
 23979                           
 23980                           ;incstack = 0
 23981                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0]
 23982  29DF  0140               	movlb	0	; select bank0
 23983  29E0  1B8C               	btfsc	12,7	;volatile
 23984  29E1  29F3               	goto	i1l6876
 23985  29E2  3004               	movlw	4
 23986  29E3  067C               	xorwf	_pbState,w
 23987  29E4  1903               	btfsc	3,2
 23988  29E5  29F3               	goto	i1l6876
 23989                           
 23990                           ;inputs.c: 60:   tick10ms = 0;
 23991  29E6  01FD               	clrf	_tick10ms	;volatile
 23992                           
 23993                           ;inputs.c: 61:   pbState = PB_WAIT;
 23994  29E7  3004               	movlw	4
 23995  29E8  00FC               	movwf	_pbState	;volatile
 23996                           
 23997                           ;inputs.c: 62:   userActivity = tick100ms;
 23998  29E9  0142               	movlb	2	; select bank2
 23999  29EA  086A               	movf	(_tick100ms+3)^(0+256),w	;volatile
 24000  29EB  00E6               	movwf	(_userActivity+3)^(0+256)	;volatile
 24001  29EC  0869               	movf	(_tick100ms+2)^(0+256),w	;volatile
 24002  29ED  00E5               	movwf	(_userActivity+2)^(0+256)	;volatile
 24003  29EE  0868               	movf	(_tick100ms+1)^(0+256),w	;volatile
 24004  29EF  00E4               	movwf	(_userActivity+1)^(0+256)	;volatile
 24005  29F0  0867               	movf	_tick100ms^(0+256),w	;volatile
 24006  29F1  00E3               	movwf	_userActivity^(0+256)	;volatile
 24007                           
 24008                           ;inputs.c: 63:  } else if (pbState == PB_WAIT) {
 24009  29F2  0008               	return
 24010  29F3                     i1l6876:	
 24011  29F3  3004               	movlw	4
 24012  29F4  067C               	xorwf	_pbState,w
 24013  29F5  1D03               	btfss	3,2
 24014  29F6  0008               	return
 24015                           
 24016                           ;inputs.c: 64:   if ((tick10ms > 10) && (tick10ms <= 70) && (PORTAbits.RA7))
 24017  29F7  300B               	movlw	11
 24018  29F8  027D               	subwf	_tick10ms,w	;volatile
 24019  29F9  3047               	movlw	71
 24020  29FA  1C03               	skipc
 24021  29FB  2A04               	goto	L34
 24022  29FC  027D               	subwf	_tick10ms,w	;volatile
 24023  29FD  1C03               	btfss	3,0
 24024  29FE  1F8C               	btfss	12,7	;volatile
 24025  29FF  2A03               	goto	i1l6886
 24026                           
 24027                           ;inputs.c: 66:    pbState = PB_SHORT;
 24028  2A00  3001               	movlw	1
 24029  2A01  00FC               	movwf	_pbState	;volatile
 24030  2A02  0008               	return
 24031  2A03                     i1l6886:	
 24032  2A03  3047               	movlw	71
 24033  2A04                     L34:	
 24034  2A04  027D               	subwf	_tick10ms,w	;volatile
 24035  2A05  1803               	btfsc	3,0
 24036  2A06  1B8C               	btfsc	12,7	;volatile
 24037  2A07  2A0B               	goto	i1l325
 24038                           
 24039                           ;inputs.c: 69:    pbState = PB_LONG;
 24040  2A08  3002               	movlw	2
 24041  2A09  00FC               	movwf	_pbState	;volatile
 24042  2A0A  0008               	return
 24043  2A0B                     i1l325:	
 24044                           ;inputs.c: 70:   else if (PORTAbits.RA7)
 24045                           
 24046  2A0B  1F8C               	btfss	12,7	;volatile
 24047  2A0C  0008               	return
 24048                           
 24049                           ;inputs.c: 72:    pbState = PB_ABORT;
 24050  2A0D  3003               	movlw	3
 24051  2A0E  00FC               	movwf	_pbState	;volatile
 24052  2A0F  0008               	return
 24053  2A10                     __end_of_pushButtonISR:	
 24054                           ;inputs.c: 73:  }
 24055                           
 24056  007E                     btemp	set	126	;btemp
 24057  007E                     int$flags	set	126
 24058  007E                     wtemp0	set	126


Data Sizes:
    Strings     832
    Constant    186
    Data        10
    BSS         131
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     72      76
    BANK1            80     77      80
    BANK2            80     67      80
    BANK3            80     64      80
    BANK4            80     23      70
    BANK5            80      0      56
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           26      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    qsort$2814	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    menu$2772	const PTR FTN()unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    compar$1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$0	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    qsort@compar	PTR FTN(PTR const void ,PTR const void ,)int  size(2) Largest target is 2
		 -> sortCur(), sortDCRev(), sortDC(), 

    qsort@x	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@vbase	PTR void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    qsort@base	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s2	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s1	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@d1	PTR void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), dataPacket(BANK4[15]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), dataPacket(BANK4[15]), 

    memcpy@s1	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), buffer(BANK5[20]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), buffer(BANK5[20]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> storeNVM@buf(BANK1[64]), 

    itoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK3[10]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK3[10]), 

    sortCur@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@b	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@a	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    checkChannelStatus@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    stateFuncTbl	const PTR FTN()unsigned char [9] size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setOutputPower@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    channelSetup@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    sp__memcpy	PTR void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), dataPacket(BANK4[15]), 

    spinInput@input	PTR float  size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 57
		 -> STR_93(CODE[13]), STR_92(CODE[13]), STR_91(CODE[13]), STR_90(CODE[13]), 
		 -> STR_89(CODE[13]), STR_88(CODE[13]), STR_87(CODE[13]), STR_86(CODE[13]), 
		 -> STR_85(CODE[13]), STR_84(CODE[13]), STR_83(CODE[13]), STR_82(CODE[13]), 
		 -> STR_81(CODE[13]), STR_80(CODE[13]), STR_79(CODE[13]), STR_78(CODE[13]), 
		 -> STR_77(CODE[13]), STR_76(CODE[13]), STR_75(CODE[13]), STR_74(CODE[13]), 
		 -> STR_73(CODE[13]), STR_72(CODE[13]), STR_71(CODE[13]), STR_70(CODE[13]), 
		 -> STR_69(CODE[13]), STR_68(CODE[13]), STR_67(CODE[13]), STR_66(CODE[13]), 
		 -> STR_65(CODE[13]), STR_64(CODE[13]), STR_63(CODE[13]), STR_62(CODE[13]), 
		 -> STR_61(CODE[9]), STR_60(CODE[2]), STR_59(CODE[13]), STR_58(CODE[9]), 
		 -> STR_57(CODE[2]), STR_56(CODE[13]), STR_55(CODE[3]), STR_54(CODE[7]), 
		 -> STR_53(CODE[13]), STR_52(CODE[10]), STR_51(CODE[10]), STR_50(CODE[3]), 
		 -> STR_49(CODE[7]), STR_48(CODE[37]), STR_47(CODE[8]), STR_46(CODE[2]), 
		 -> STR_45(CODE[13]), STR_44(CODE[13]), STR_43(CODE[13]), STR_42(CODE[8]), 
		 -> STR_41(CODE[2]), STR_40(CODE[7]), STR_39(CODE[6]), STR_38(CODE[7]), 
		 -> STR_37(CODE[6]), STR_36(CODE[13]), STR_35(CODE[8]), STR_34(CODE[13]), 
		 -> STR_33(CODE[13]), STR_32(CODE[13]), STR_31(CODE[13]), STR_30(CODE[13]), 
		 -> STR_29(CODE[13]), STR_28(CODE[13]), STR_27(CODE[9]), STR_26(CODE[8]), 
		 -> STR_25(CODE[5]), STR_24(CODE[8]), STR_23(CODE[5]), STR_22(CODE[13]), 
		 -> STR_21(CODE[13]), STR_20(CODE[13]), STR_19(CODE[13]), STR_18(CODE[13]), 
		 -> STR_17(CODE[9]), STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[13]), 
		 -> STR_13(CODE[13]), STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[4]), 
		 -> STR_9(CODE[2]), STR_8(CODE[4]), STR_7(CODE[8]), STR_6(CODE[7]), 
		 -> STR_5(CODE[8]), STR_4(CODE[2]), STR_3(CODE[4]), str(BANK3[10]), 
		 -> STR_2(CODE[8]), STR_1(CODE[57]), 

    initGlobalData@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->i1___flge

Critical Paths under _main in BANK0

    _main->_readNVM
    _viewErrorMessage->_OLED_print_xy
    _systemCheck->___fldiv
    _readNVM->_FLASH_ReadWord
    _storeNVM->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _spinInput->___fladd
    _getNextState->___wmul
    _returnToPage->___wmul
    _paging->_OLED_command
    _itoa->___lbmod
    _ftoa->___fldiv
    _OLED_print_xy->___bmul
    _initGlobalData->___wmul
    _getAnalogValues->___fladd
    _getAnalogValues->___fldiv
    _controller->_timeSince
    _checkChannelStatus->___fldiv
    _setChannelSwitch->___bmul
    _error->___awmod
    _ema->___lmul
    _channelThing->___fladd
    _channelThing->___fldiv
    _swap->___bmul
    ___bmul->___awdiv
    _memcpy->___bmul
    ___xxtofl->___wmul
    ___flge->___fladd
    ___flge->___fldiv
    _calcRequiredPower->___fladd
    _calcRequiredPower->___fldiv
    ___wmul->___bmul
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_menu
    _systemCheck->___flge
    _menu->_setLensDia
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_storeNVM
    _setOutputPower->_spinInput
    _setLensDia->_storeNVM
    _setFudgeFactor->_storeNVM
    _setDPOffset->_storeNVM
    _spinInput->___flge
    _channelView->_ftoa
    _channelSetup->_ftoa
    _ftoa->___fltol
    _getAnalogValues->___fldiv
    _checkSensor->___flge
    _checkChannelStatus->___fltol
    _channelThing->_qsort
    _qsort->_sortCur
    _sortCur->___fltol
    ___fltol->___flsub
    ___flge->___fldiv
    _calcRequiredPower->___flsub
    ___flsub->___fladd

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _setSkyTemp->_storeNVM
    _setLensDia->_storeNVM
    _setFudgeFactor->_storeNVM
    _setDPOffset->_storeNVM
    _channelThing->_qsort

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _channelThing->_qsort

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_channelThing

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 8     8      0  942514
                                             76 BANK1      1     1      0
                                             60 BANK2      7     7      0
                       _OLED_command
                          _OLED_init
              _OLED_loadSpecialChars
                  _calcRequiredPower
                       _channelThing
                 _checkChannelStatus
                        _checkSensor
                         _controller
                    _getAnalogValues
                       _getLastError
                     _initGlobalData
                         _initialize
                               _menu
                            _readNVM
                        _systemCheck
                          _timeSince
                   _viewErrorMessage
 ---------------------------------------------------------------------------------
 (1) _viewErrorMessage                                     5     5      0   20297
                                             24 BANK0      5     5      0
                       _OLED_command
                      _OLED_print_xy
                            ___awmod
                              _getPB
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                          8     8      0   17505
                                             25 BANK1      4     4      0
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (1) _readNVM                                             97    97      0     594
                                              7 BANK0     65    65      0
                                              0 BANK1     32    32      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     229
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _menu                                                 6     6      0  748341
                                             70 BANK1      6     6      0
                       _channelSetup *
                        _channelView *
                              _error
                       _getNextState
                              _getPB
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
                          _timeSince
 ---------------------------------------------------------------------------------
 (2) _statusView                                           1     1      0   67960
                                             39 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                0     0      0   65949
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           0     0      0   84110
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       4     4      0   98379
                                             40 BANK1      4     4      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                              _getPB
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           6     6      0   92004
                                             64 BANK1      6     6      0
                      _OLED_print_xy
                             ___wmul
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       0     0      0   84110
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          0     0      0   84110
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (3) _storeNVM                                            99    99      0    1340
                                             17 BANK0      3     3      0
                                              0 BANK1     64    64      0
                                              0 BANK2     32    32      0
                   _FLASH_EraseBlock
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_WriteBlock                                    10     7      3     814
                                              7 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (5) _FLASH_EraseBlock                                     3     1      2     220
                                              4 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           15     1     14   17875
                                             25 BANK1     15     1     14
                            ___fladd
                             ___flge
                            ___flsub
                             ___wmul (ARG)
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _getPB                                                1     1      0      23
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         6     3      3    8398
                                             21 BANK0      6     3      3
                             ___wmul
                              _getPB (ARG)
                          _timeSince (ARG)
 ---------------------------------------------------------------------------------
 (2) _channelView                                          9     9      0   80105
                                             39 BANK1      9     9      0
                      _OLED_print_xy
                             ___bmul
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         2     2      0   81558
                                             39 BANK1      2     2      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         2     2      0    8258
                                             21 BANK0      2     2      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1077
                                             10 BANK0      6     5      1
                       _OLED_command
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            1     1      0      34
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _itoa                                                 4     2      2    2011
                                              9 BANK0      4     2      2
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (4) ___lbmod                                              5     4      1     235
                                              4 BANK0      5     4      1
 ---------------------------------------------------------------------------------
 (4) ___lbdiv                                              4     3      1     238
                                              4 BANK0      4     3      1
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                13     7      6   37557
                                             26 BANK1     13     7      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   19057
                                             15 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       5     5      0    8106
                                             21 BANK0      5     5      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _getLastError                                         2     2      0      24
                                              4 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _getAnalogValues                                      6     6      0   17686
                                             13 BANK1      6     6      0
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                                _ema
                     _getAnalogValue
 ---------------------------------------------------------------------------------
 (1) _controller                                           9     9      0    4958
                                             20 BANK0      9     9      0
                             ___bmul
                   _setChannelSwitch
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          1     1      0    6403
                                             25 BANK1      1     1      0
                             ___flge
                              _error
                          _timeSince
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      22
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     665
                                              4 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (1) _checkChannelStatus                                  24    24      0   29701
                                             26 BANK1     24    24      0
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _ema
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _setChannelSwitch                                     4     3      1     578
                                             15 BANK0      4     3      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _getAnalogValue                                       4     2      2      22
                                              4 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _error                                                1     1      0     840
                                             10 BANK0      1     1      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     818
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) _ema                                                 16     8      8    1442
                                             16 BANK0     16     8      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     418
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     546
                                              4 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _channelThing                                        29    29      0   56482
                                             59 BANK1      6     6      0
                                              0 BANK4     23    23      0
                             ___bmul
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                             ___wmul
                           ___xxtofl
                              _qsort
 ---------------------------------------------------------------------------------
 (2) _qsort                                              149   143      6   22079
                                             34 BANK1     25    19      6
                                              0 BANK2     60    60      0
                                              0 BANK3     64    64      0
                            ___awdiv
                             ___bmul
                             _memcpy
                            _sortCur *
                             _sortDC *
                          _sortDCRev *
                               _swap
 ---------------------------------------------------------------------------------
 (3) _swap                                                 5     1      4     465
                                             15 BANK0      5     1      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDCRev                                            6     2      4    3495
                                             26 BANK1      6     2      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _sortDC                                               6     2      4    3495
                                             26 BANK1      6     2      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1    3365
                                             12 BANK0      3     2      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortCur                                              8     4      4    6949
                                             26 BANK1      8     4      4
                             ___bmul (ARG)
                            ___flsub
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     697
                                             16 BANK1     10     6      4
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               9     4      5     574
                                             15 BANK0      9     4      5
                            ___awdiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4     625
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     854
                                             21 BANK0     14    10      4
                             ___bmul (ARG)
                             ___wmul (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4876
                                             13 BANK1     12     4      8
                             ___bmul (ARG)
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   59    59      0   30003
                                             16 BANK1     59    59      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    7860
                                             15 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    5862
                                              8 BANK1      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    4897
                                             60 BANK0     12     4      8
                                              0 BANK1      8     8      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    7409
                                             35 BANK0     25    17      8
                          __Umul8_16
                             ___bmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            8     5      3    1097
                                              4 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    2926
                                             60 BANK0     12     4      8
                                              0 BANK1     13    13      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                                1     1      0     772
                                             10 BANK0      1     1      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     352
                                              9 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     440
                                             10 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     352
                                              9 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      24
                                              4 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            2     1      1     306
                                              7 BANK0      2     1      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0      88
                                              4 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  4     4      0     516
                                              0 BANK0      4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (8) _uartReceiveISR                                       0     0      0     516
                           i1___flge
                           i1_memcpy
 ---------------------------------------------------------------------------------
 (9) i1_memcpy                                             9     4      5     282
                                              0 COMMON     9     4      5
 ---------------------------------------------------------------------------------
 (9) i1___flge                                            12     4      8     234
                                              0 COMMON    12     4      8
 ---------------------------------------------------------------------------------
 (8) _rotISR                                              12    12      0       0
                                              0 COMMON    12    12      0
 ---------------------------------------------------------------------------------
 (8) _pushButtonISR                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_command
     _OLED_send
       _OLED_write4bits
     _OLED_waitForReady
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write4bits
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
   _calcRequiredPower
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flsub
       ___fladd
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _channelThing
     ___bmul
       ___awdiv (ARG)
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _qsort
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _memcpy
         ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _sortCur *
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
       _sortDC *
         ___bmul
           ___awdiv (ARG)
       _sortDCRev *
         ___bmul
           ___awdiv (ARG)
       _swap *
         ___bmul (ARG)
           ___awdiv (ARG)
   _checkChannelStatus
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fleq
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fltol
       ___flsub (ARG)
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _checkSensor
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _timeSince
     _uartReset
     _uartSendByte
   _controller
     ___bmul
       ___awdiv (ARG)
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
     _timeSince
   _getAnalogValues
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _getAnalogValue
   _getLastError
   _initGlobalData
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _initialize
   _menu
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___lbdiv
         ___lbmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___bmul
         ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___lbdiv
         ___lbmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _error *
       ___awmod
     _getNextState *
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _getPB (ARG)
       _timeSince (ARG)
     _getPB *
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _itoa
         ___lbdiv
         ___lbmod
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___lbdiv
         ___lbmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _timeSince *
   _readNVM
     _FLASH_ReadWord
   _systemCheck
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _timeSince
   _viewErrorMessage
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___awmod
     _getPB

 _ISR (ROOT)
   _pushButtonISR
   _rotISR
   _uartReceiveISR
     i1___flge
     i1_memcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     48      4C       5       95.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4D      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     1C8       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     43      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     40      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     17      46      14       87.5%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      38      16       70.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              1A      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     1C8      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Feb 03 23:59:08 2020

                  _pushButtonISR 29DF                    returnToPage@n 0036         __end_of_transition_table 3118  
                   _stateFuncTbl 306C                     ___fldiv@aexp 00AC                     ___fldiv@bexp 00AB  
                              pc 0002                     ___fldiv@sign 00A4                   ___bmul@product 002D  
                    __CFG_CP$OFF 0000              __end_of_systemCheck 25DA                     ___awdiv@sign 0029  
         _calcRequiredPower$2762 00DE           _calcRequiredPower$2763 00BA           _calcRequiredPower$2764 00BE  
         _calcRequiredPower$2765 00C2           _calcRequiredPower$2766 00C6           _calcRequiredPower$2767 00CA  
         _calcRequiredPower$2768 00CE              ___wmul@multiplicand 0031                     i1___flge@ff1 0070  
                   i1___flge@ff2 0074          ??_OLED_loadSpecialChars 002A              __Umul8_16@word_mpld 002A  
                    __CFG_LVP$ON 0000                     _virtChannels 02A0                              l150 183B  
                            l128 00E4                              l193 13D2                              l380 0464  
                            l810 22E0                              l803 224E                              l813 22D2  
                            l478 128C                              l823 2411                              l920 0448  
                            l729 274A                              l681 143D                              l818 2378  
                            _ISR 0004                              _ema 2790                              _str 01E5  
                   ___awmod@sign 0029                     __CFG_BORV$LO 0000                              wreg 0009  
               returnToPage@page 0035                     ___flmul@aexp 0050                     ___flmul@bexp 0055  
                   ___flmul@sign 004F                     ___flmul@temp 005A                     ___flmul@prod 0056  
                  __CFG_BBEN$OFF 0000                             S8890 2000                             S8894 0800  
                           S8886 2800   FLASH_WriteBlock@flashWordArray 0029         __end_of_setChannelSwitch 24A0  
                   _userActivity 0163                             ?_ISR 0070                 channelThing@grpA 0253  
               channelThing@grpB 0259                     __CFG_ZCD$OFF 0000                     ___fltol@exp1 00B9  
           __end_of_channelThing 0E8D                             l1117 27DF                             l1410 2CDD  
                           l1322 1336                             l1411 2CDB                             l1420 2D39  
                           l1405 2CC2                             l1502 1E5E                             l1406 2CC0  
                           l1503 1E5C                             l1520 1FAC                             l1416 2D45  
                           l1433 2DC5                             l1418 2D32                             l1290 0ED5  
                           l1427 2D5F                             l1419 2D38                             l1428 2D60  
                           l1292 0F03                             l1453 2E10                             l1462 25F6  
                           l1438 2DDE                             l1463 25F3                             l1607 1FFB  
                           ?_ema 0030                             l1466 2616                             l1546 0F32  
                           l1491 2731                             l1467 2613             __end_of_channelSetup 12C5  
                           l5004 26A9                             l5030 26E2                             l5022 26B1  
                           l5006 2666                             l1559 0F64                             l5024 26C7  
                           l5008 26AB                             l1489 2711                             l5034 26E5  
                           l5018 26BD                             l1498 1E48                             l5210 0F54  
                           l5202 0F3F                             l1499 1E46                             l4420 13CF  
                           l5060 2733                             l5044 26FA                             l5204 0F49  
                           l6020 2C58                             l5054 2729                             l5214 0F62  
                           l6014 2C19                             l5152 1F64                             l5216 0F59  
                           l5240 174A                             l5170 1F8B                             l5146 1F51  
                           l5082 1E4C                             l6042 2C97                             l6034 2C81  
                           l6026 2C6D                             l5156 1F66                             l5228 0F79  
                           l6060 246C                             l5166 1F78                             l5094 1E62  
                           l6062 2472                             l6046 2CA9                             l4710 06C5  
                           l6320 0288                             l5176 1F9E                             l6064 2478  
                           l6056 2460                             l5360 12F1                             l5424 0684  
                           l5098 1E6C                             l5194 0F2A                             l5530 2773  
                           l5522 2768                             l6058 2466                             l5354 12CD  
                           l4660 1FCB                             l6068 248D                             l4900 1341  
                           l4732 06E8                             l4654 1FC3                             l7310 2D68  
                           l5198 0F3D                             l5550 1306                             l5542 278B  
                           l5534 277F                             l5518 2761                             l6350 2B44  
                           l5358 12E8                             l4742 070A                             l4672 1FDB  
                           l7320 2DBD                             l4760 0A08                             l5288 1366  
                           l8040 20B7                             l8200 251C                             l4690 1FF3  
                           l4666 1FD3                             l8130 2E51                             l5554 1317  
                           l5458 27E9                             l5538 2783                             l8210 255A  
                           l4684 1FEB                             l7340 2DE4                             l4764 0A0E  
                           l8124 2E37                             l4916 1357                             l4908 1347  
                           l8052 0479                             l6380 2A52                             l8212 255C  
                           l4678 1FE3                             l7350 2DEF                             l7334 2DDF  
                           l7326 2DD3                             l8142 2EA0                             l5558 1329  
                           l5582 01D4                             l8222 2599                             l8206 2527  
                           l4952 2608                             l7248 2CE9                             l8144 2EA4  
                           l8240 02D0                             l8232 25D3                             l6800 15FE  
                           l4938 25E8                             l7370 2E0C                             l7362 2E00  
                           l7346 2DED                             l7338 2DE2                             l7450 0EEC  
                           l7522 2FC8                             l8170 2F6D                             l8138 2E82  
                           l8410 22A7                             l8330 20C2                             l8250 0312  
                           l8242 02D5                             l8074 04DF                             l6810 1658  
                           l6802 1610                             l4980 2640                             l4972 2636  
                           l7292 2D40                             l7444 0EC3                             l7516 2FD1  
                           l8172 2F72                             l8164 2F41                             l8156 2EF6  
                           l8420 22D3                             l8412 22AD                             l8404 2277  
                           l7508 17B7                             l6820 16B2                             l6812 166A  
                           l6804 1622                             l7374 2E11                             l7278 2D07  
                           l7462 0FBC                             l8166 2F47                             l8254 0334  
                           l8246 02F7                             l8238 02CA                             l4886 1331  
                           l7606 1422                             l6830 16EE                             l6822 16C4  
                           l6814 167C                             l6806 1634                             l7464 0FC1  
                           l7704 2FE2                             l8504 0D39                             l8416 22CC  
                           l8344 20EB                             l8264 0340                             l4896 133E  
                           l7712 145A                             l7800 089C                             l8096 0546  
                           l6840 172D                             l6816 168E                             l6808 1646  
                           l6832 1700                             l7298 2D4F                             l7490 0FF1  
                           l7482 0FE4                             l8522 0E02                             l8514 0DC7  
                           l8506 0DC6                             l8370 2188                             l8362 217E  
                           l8434 242A                             l8282 0379                             l7546 0A5C  
                           l7618 142C                             l7722 1479                             l7714 145D  
                           l7810 08C3                             l7802 089E                             l6818 16A0  
                           l6834 1715                             l4996 267B                             l8516 0E01  
                           l8444 0B42                             l8428 2380                             l8372 218B  
                           l6780 045A                             l7564 0AB9                             l7556 0A9F  
                           l7548 0A99                             l7716 1460                             l6828 16DC  
                           l4998 2680                             l7662 2F95                             l7478 0FDD  
                           l8366 2182                             l8374 2198                             l8542 03BC  
                           l8534 03A2                             l7558 0AAE                             l7830 09BB  
                           l7822 097A                             l7806 08A3                             l7902 1268  
                           l6790 15D2                             l7680 2FB1                             l7672 2FA2  
                           l7656 2F8C                             l7488 0FE8                             l8392 21DA  
                           l8552 042B                             l7824 098B                             l7808 08B3  
                           l7840 09F8                             l8298 1A06                             l8378 21AD  
                           l7578 0B35                             l7826 099B                             l7834 09CB  
                           l7906 127A                             l7930 1057                             l8650 0113  
                           l8618 00C2                             l7684 2FB5                             l8484 0D12  
                           l8476 0C99                             l8468 0BEA                             l7828 09AB  
                           l7836 09F5                             l6796 15DA                             l7694 2FEB  
                           l8558 043D                             l8566 0449                             l7598 1410  
                           l7766 15C1                             l7934 1063                             l6798 15EC  
                           l8646 0107                             l7688 2FBD                             l7776 0814  
                           l8584 2C13                             l8672 0144                             l8664 012E  
                           l8656 011E                             l7866 1193                             l7946 10C2  
                           l8690 0195                             l8666 0132                             l7972 1156  
                           l7956 10FD                             l7964 112F                             l8684 0170  
                           l8676 014B                             l7878 11D5                             l7894 1238  
                           l8686 018E                             l7888 1211                             l7968 1141  
                           l7898 1250                             l8892 2495                             l7996 05AF  
                           l8884 1708                             STR_1 307E                             l8888 09EB  
                           STR_2 33A9                             STR_3 33DA                             STR_4 33F8  
                           STR_5 3389                             STR_6 33C6                             STR_7 3389  
                           STR_8 33DE                             STR_9 324E                             _LATA 0018  
                           _PIE0 0716                             u4055 06D9                             _PIE3 0719  
                           _PIE4 071A                             u4355 134A                             u5345 1325  
                           u4485 2696                             u5365 01BE                             u7230 2D29  
                           u5295 2779                             u7240 2D2A                             u4585 2706  
                           u7225 2D1E                             u4595 271D                             u4765 1F81  
                           u7333 2D7E                             u9005 03FA                             u4775 1F95  
                           u9015 0419                             u9115 2C09                             u8405 2F19  
                           u8415 2F26                             u4975 1376                             u9080 2BEF  
                           u8425 2F52                             u9081 2BED                             u9090 2BF0  
                           u8435 2F7C                             u7665 0FCA                             u8385 2EC8  
                           u9417 0199                             u9507 0242                             u8395 2F01  
                           u9427 1417                             u9517 024E                             u9437 1433  
                           u9607 13C3                             u9527 025A                             u9447 21D3  
                           u9617 13C9                             u9537 0266                             u9457 0200  
                           u9547 0272                             u9467 0212                             u7875 140B  
                           u9557 027E                             u9477 021E                             u7965 2FAA  
                           u9567 13D4                             u9487 022A                             u9577 13DA  
                           u9497 0236                             u8945 0D70                             u9587 13E4  
                           u9597 13EA                             _TMR0 059C                             _TMR1 020C  
                           u8995 03D9                    __CFG_FCMEN$ON 0000                    OLED_send@mode 0027  
                           _data 274A                             _head 00ED                             _main 00C2  
                           _ftoa 0A1B                             _menu 2BB2                             _itoa 12C5  
                           _tail 0068                             fsr0h 0005                             fsr1h 0007  
                           indf0 0000                             fsr0l 0004                             indf1 0001  
                           fsr1l 0006                             _swap 2FE2                 channelSetup@page 016D  
                           btemp 007E                ?_FLASH_WriteBlock 0027                    __CFG_BOREN$ON 0000  
                           start 0070                      ?_OLED_write 0070                     spinInput@dir 00C7  
                ___fldiv@new_exp 00A5                     spinInput@max 00BF                     spinInput@min 00BB  
              _calcRequiredPower 1A04               ??_FLASH_WriteBlock 002A                   ?_pushButtonISR 0070  
                  __CFG_CSWEN$ON 0000                ___bmul@multiplier 002E                    __CFG_MCLRE$ON 0000  
             ?_calcRequiredPower 0070                            ??_ISR 0020                            ??_ema 0038  
             __size_of_OLED_init 008A               __size_of_OLED_send 000D                   _setFudgeFactor 0535  
              channelThing@total 0247                    ___fltol@sign1 00B8                  __end_of___fladd 2E16  
                          ?_main 0070                            ?_ftoa 00BA                            ?_menu 0070  
                __end_of___fldiv 2738                            ?_itoa 0029                  __end_of___awdiv 2FC2  
                __end_of___lbdiv 1343                            STR_10 33E2                            STR_11 33EF  
                          STR_12 33EC                            STR_20 3313                            STR_21 333A  
                          STR_13 3306                            STR_22 3347                            STR_14 32AB  
                          STR_30 3284                            STR_23 33D5                            STR_15 33F2  
                          STR_31 32B8                            STR_16 33F5                            STR_40 33B8  
                          STR_24 3391                            STR_32 3277                            STR_41 33C4  
                          STR_25 33D5                            STR_17 3370                            STR_33 3291  
                  __CFG_WDTE$OFF 0000                            STR_50 33E9                            STR_26 33A1  
                          STR_42 3381                            STR_18 3320                            STR_34 32EC  
                          STR_27 3370                            STR_35 3399                            STR_51 3354  
                          STR_43 32F9                            STR_19 329E                            STR_60 33C4  
                          STR_52 326D                            STR_36 3347                            STR_44 332D  
                          STR_28 326A                  __end_of___awmod 2790                            STR_45 32EC  
                          STR_37 33D4                            STR_61 3367                            STR_53 32DF  
                          STR_29 32D2                            STR_46 33C4                            STR_54 33BF  
                          STR_38 33B1                            STR_62 318D                            STR_70 3132  
                          STR_39 33D4                            STR_55 33E6                            STR_47 3379  
                          STR_71 3173                            STR_63 314C                            STR_56 32C5  
                          STR_72 320F                            STR_64 319A                            STR_80 3125  
                          STR_48 30B7                            STR_57 33C4                            STR_65 314C  
                          STR_49 33CD                            STR_73 31CE                            STR_81 3166  
                          STR_58 335E                            STR_82 3250                            STR_90 3202  
                          STR_66 31A7                            STR_74 3118                            STR_67 314C  
                          STR_59 30CF                            STR_75 321C                            STR_83 31C1  
                          STR_91 313F                            STR_76 3229                            STR_84 31F5  
                          STR_68 31B4                            STR_92 3159                  __end_of___lbmod 135B  
                          STR_69 314C                            STR_85 3243                            STR_93 31E8  
                          STR_77 31DB                            STR_78 3229                            STR_86 3236  
                          STR_87 3243                            STR_79 3180                            STR_88 320F  
                __end_of___flmul 1FB7                            STR_89 325D              ??_calcRequiredPower 00B0  
checkSensor@sensorUpdateInterval 025E                  __end_of___flsub 0FB5                  __end_of___fltol 1000  
                          ?_swap 002F                            _T1CLK 0211                  ___awdiv@divisor 0024  
                          _T1CON 020E                            _IOCAN 1F3E                            _IOCAP 1F3D  
                          _IOCCN 1F54                            i1l316 2A47                            i1l325 2A0B  
                          i1l280 0034                            i1l290 006E                       i1memcpy@d1 0070  
                          i1l277 0018                            i1l286 0067                            i1l287 005F  
                     i1memcpy@s1 0072                  ___awdiv@counter 0028                     main@initDone 0160  
                          _TRISA 0012                            _TRISB 0013                            _TRISC 0014  
            ___lmul@multiplicand 0028             __size_of_checkSensor 00EB                     ?_setDPOffset 0070  
                  __CFG_WRTB$OFF 0000                    __CFG_WRTC$OFF 0000       __end_of_checkChannelStatus 2431  
                 OLED_send@value 0028                            _getPB 175C              getNextState@timeout 0037  
                __end_of_readNVM 2ABE                   statusView@page 016F         statusView@prevSensorStat 01EF  
                          ema@in 0030                            _error 2431                            _setup 201D  
                          _qsort 2E16                            ftoa@w 00C4                 __end_ofi1___flge 07FD  
                          pclath 000A             __size_of_channelView 01FD                            swap@c 0033  
                __end_of_sortCur 1836                            status 0003                            wtemp0 007E  
               __end_ofi1_memcpy 079B        __end_of_calcRequiredPower 1E35                  ___lbdiv@divisor 0024  
                    controller@n 003C                  ___lbdiv@counter 0026                    spinInput@step 00C3  
                    _systemCheck 24A0             __end_of_getLastError 045E                  __initialization 0072  
                   __end_of_main 01A0                     __end_of_ftoa 0B40                     __end_of_menu 2C16  
                   __end_of_itoa 12F5          __size_of_getAnalogValue 001F                     __end_of_swap 3000  
         __end_of_setFudgeFactor 059E                   __CFG_SAFEN$OFF 0000                 _viewErrorMessage 15C4  
       controller@dutyCycleTimer 022A                           ??_main 00EC                           ??_ftoa 00C0  
                         ??_menu 00E6                           ??_itoa 002B                           ??_swap 0033  
                 OLED_print_xy@s 0030                    sortDCRev@cmp1 00BA                    sortDCRev@cmp2 00BC  
           __end_of_getNextState 2CAF          __size_of_FLASH_ReadWord 0020          __size_of_setOutputPower 013B  
            __size_of_OLED_write 0007                _uartDataReadyFlag 00EF            getAnalogValue@channel 0027  
                _setLensDia$2761 00E2                           ?_getPB 0070                           _ADCON1 009E  
      FLASH_WriteBlock@writeAddr 0027                           ?_error 0070                           _ADRESH 009C  
                         _ADRESL 009B                 ___awdiv@dividend 0026                           ?_setup 0070  
                         _ANSELA 1F38                           _ANSELB 1F43                           _ANSELC 1F4E  
             __CFG_RSTOSC$HFINT1 0000                           ?_qsort 00C2                           _T0CON0 059E  
                         _T0CON1 059F                           _RC1REG 0119                           _RC1STA 011D  
                         i1l1290 07BD                           _RC6PPS 1F26                           i1l1292 07EB  
                         i1l6194 07D4                           i1l6188 07AC                           i1l6900 2A41  
                         i1l8182 0781                           i1l8176 078A                           i1l8604 0749  
                         i1l8608 0751                           i1l8704 0012                           i1l8722 002A  
                         i1l6876 29F3                           i1l8716 0023                           i1l6886 2A03  
                         i1l8592 072B                           i1l8728 0031                           _INTCON 000B  
                         i1l8598 0732                __end_of_OLED_init 0283        __size_of_FLASH_EraseBlock 001F  
              __end_of_OLED_send 1391                           _OSCFRQ 0893                      i1memcpy@tmp 0075  
                         _SPBRGL 011B                           _TX1REG 011A                           _TX1STA 011E  
           getNextState@intState 0035                 __end_of___xxtofl 0F82                  ??_pushButtonISR 0070  
                 __CFG_PWRTE$OFF 0000                           ___flge 0EB1                           ___bmul 0E8D  
                         ___fleq 12F5                           ___lmul 27DB                        ??___fladd 00A0  
                         ___wmul 0A06                        ??___fldiv 0064                        ??___awdiv 0028  
                      ??___lbdiv 0025                   __CFG_STVREN$ON 0000                        ??___awmod 0028  
                      ??___lbmod 0025                        ??___flmul 004B                        ??___flsub 0068  
                      ??___fltol 00B4                  ?_setFudgeFactor 0070                           _buffer 02C4  
                         _paging 13F5                           _memcpy 2FC2                 ___awdiv@quotient 002A  
                ___awmod@divisor 0024                           _rotISR 2A10                           _rotDir 01E4  
             channelSetup@heater 00C7          __size_of_initGlobalData 00D4                    ?_OLED_command 0070  
                ___awmod@counter 0028                           _sortDC 1004                        ??_readNVM 0027  
        FLASH_ReadWord@flashAddr 0024               __size_of__Umul8_16 0049            __size_of_channelThing 034D  
          __size_of_channelSetup 015C            OLED_waitForReady@busy 0024                           swap@s1 0031  
                         swap@s2 0032                OLED_command@value 0029                           qsort@i 00D7  
                         qsort@j 00D9                           qsort@l 00D1                           qsort@r 00D3  
                         qsort@s 00D5                           qsort@x 00CF                        ??_sortCur 0068  
               __end_of_storeNVM 06A6                 ___lbdiv@dividend 0025                       ___flge@ff1 00AD  
                     ___flge@ff2 00B1                     ___xxtofl@arg 003F                     ___xxtofl@exp 003E  
                   ___xxtofl@val 0035                       ___fleq@ff1 0024                       ___fleq@ff2 0028  
                 spinInput@input 00B9                  ___lbmod@divisor 0024          __end_of__initialization 00BF  
                ___lbmod@counter 0027                     ftoa@intValue 00C3       __size_of_calcRequiredPower 0431  
                     ___fltol@f1 00B0              ___bmul@multiplicand 002C         __size_of_OLED_write4bits 003E  
                 __pcstackCOMMON 0070                     __pidataBANK0 0000                     __pidataBANK3 0000  
                   __pidataBANK4 0000                    __end_of_getPB 1764                    __end_of_error 245D  
                   _channelThing 0B40         __size_of_getAnalogValues 0186                     _channelSetup 1169  
                  __end_of_setup 20C0                    __end_of_qsort 2F82                   ??_OLED_command 0029  
               ___lbdiv@quotient 0027                        ?i1___flge 0070   __size_of_OLED_loadSpecialChars 0016  
  __end_of_OLED_loadSpecialChars 0299                        ?i1_memcpy 0070               __size_of_getRotDir 0009  
    FLASH_WriteBlock@GIEBitValue 002D                          ??_getPB 0024           __size_of_OLED_print_xy 002C  
                        ??_error 002A                       _dataPacket 0238                ?_setChannelSwitch 002F  
                        ??_setup 0068             __size_of_setDPOffset 0066                          ??_qsort 00C8  
                     __pbssBANK0 0068                       __pbssBANK1 00ED                       __pbssBANK2 0163  
                     __pbssBANK3 01E0                       __pbssBANK4 0220                       __pbssBANK5 02A0  
        __size_of_uartReceiveISR 0057               ??_setChannelSwitch 0030            __size_of_getLastError 0012  
                   ??_OLED_write 0029                __end_of__Umul8_16 2000              channelThing@numGrpA 0257  
            channelThing@numGrpB 0258                       __pmaintext 00C2                   _getAnalogValue 2738  
                        ?___flge 00AD                          ?___bmul 002C                          ?___fleq 0024  
                 main@displayOff 0162                          ?___lmul 0024                          ?___wmul 002F  
                __CFG_PPS1WAY$ON 0000                       __pintentry 0004            __size_of_getNextState 0099  
                        ?_paging 002A                          ?_memcpy 002F                _OLED_waitForReady 13CF  
                 ___lmul@product 002C                          ?_rotISR 0070                       ??i1___flge 0078  
                        ?_sortDC 00BA        __size_of_FLASH_WriteBlock 005F               __size_of_timeSince 0059  
             ?_OLED_waitForReady 0070               __size_of_uartReset 0008                   _FLASH_ReadWord 2ABE  
          channelThing@totalGrpA 024B            channelThing@totalGrpB 024F                   _setOutputPower 102E  
                     ??i1_memcpy 0075                        ?___xxtofl 0035               __size_of_spinInput 008C  
                        _OSCCON1 088D               __size_of_sortDCRev 002A                          _NVMADRH 081B  
                        _NVMADRL 081A                          _NVMDATH 081D                          _NVMDATL 081C  
             __end_of_OLED_write 176B                          _NVMCON2 081F                     _getLastError 044C  
            ??_OLED_waitForReady 0024                    channelThing@n 025D         __end_of_viewErrorMessage 1730  
               _FLASH_EraseBlock 06A6                       _controller 038C                     _getNextState 2C16  
                   ?_systemCheck 0070               _checkChannelStatus 20C0           __end_of_getAnalogValue 2757  
              __end_of_getRotDir 1774                       ema@average 0032                    _OLED_print_xy 1730  
             getAnalogValues@adc 00B1        __end_of_OLED_waitForReady 13F5                  __size_of___flge 0064  
                __size_of___bmul 0024                  __size_of___fleq 0036                          ___fladd 2CAF  
                        ___fldiv 25DA                          ___awdiv 2F82                          ___lbdiv 132B  
                __size_of___lmul 0025                          ___awmod 2757                          ___lbmod 1343  
                        ___flmul 1E35                          ___flsub 0F82                          ___fltol 0FB5  
                __size_of___wmul 0015                  OLED_write@value 0029              ?_checkChannelStatus 0070  
                  ?_uartSendByte 0070                        ?_storeNVM 0070                   _initGlobalData 2ADE  
         __end_of_FLASH_ReadWord 2ADE                  __size_of_paging 004D                ??_OLED_write4bits 0024  
                __size_of_memcpy 0020                       _initialize 1836                  __size_of_rotISR 0041  
         __end_of_setOutputPower 1169                          __ptext1 15C4                          __ptext2 24A0  
                        __ptext3 2A51                          __ptext4 2ABE                          __ptext5 2BB2  
                        __ptext6 0535                          __ptext7 04CE                          __ptext8 0468  
                        __ptext9 201D                    ??_checkSensor 00B9                  __size_of_sortDC 002A  
                        _pbState 007C                  __CFG_WRTAPP$OFF 0000                     __size_of_ISR 006C  
                        _readNVM 2A51                 _channelView$2760 00CB                          ema@tmp0 003C  
                   __size_of_ema 004B                       ??___xxtofl 0039                 ___awmod@dividend 0026  
              ??_getAnalogValues 0068                        _IOCAFbits 1F3F                  __CFG_WRTSAF$OFF 0000  
                        _rxCount 0069                    ??_channelView 00C7                          _sortCur 1803  
                        clrloop0 2012             ??_checkChannelStatus 00BA          setChannelSwitch@channel 0032  
           end_of_initialization 00BF                       _setLensDia 059E                          ftoa@len 00C1  
                        ftoa@pos 00C5                          ftoa@str 00C6                          paging@n 002F  
                        memcpy@d 0035                          memcpy@n 0032                          memcpy@s 0037  
                 paging@lastPage 002A            checkChannelStatus@adc 00BE             __end_of_OLED_command 1384  
          checkChannelStatus@avg 00C9                          itoa@str 002C                       _setSkyTemp 04CE  
              __end_of_timeSince 01F9                __end_of_uartReset 038C                 ??_setFudgeFactor 0068  
                      _OLED_init 01F9                        _OLED_send 1384                  ?_getAnalogValue 0024  
                  ?_returnToPage 0070                __end_of_spinInput 1800                   ?_OLED_print_xy 002F  
              __end_of_sortDCRev 29DF               OLED_print_xy@F7972 0262                          sortDC@a 00BE  
                        sortDC@b 00BF                          swap@len 002F           __end_of_initGlobalData 2BB2  
                 ??_uartSendByte 0024        FLASH_ReadWord@GIEBitValue 0026            __CFG_WDTCPS$WDTCPS_10 0000  
                     ??_storeNVM 0031                  ?_FLASH_ReadWord 0024                        _PORTAbits 000C  
                      _PORTCbits 000E                  ?_setOutputPower 0070                       _qsort$2814 00CD  
                _selectedChannel 00EE                      ___fladd@grs 0067                 ___lbmod@dividend 0026  
           __CFG_WDTCCS$LFINTOSC 0000                    ___xxtofl@sign 003D                        _TRISCbits 0014  
                    ___fldiv@grs 00A7                      ___fldiv@rem 00A0              __end_of_checkSensor 0384  
           _getAnalogValues$2769 00AD                 __CFG_FEXTOSC$OFF 0000                   _uartReceiveISR 0724  
                    ___lbmod@rem 0028                      ___flmul@grs 0051                       _statusView 1442  
            __end_of_channelView 0A06                      ?_controller 0070                getNextState@state 0039  
                channelView@page 016E                       ?_OLED_init 0070                   ??_returnToPage 0035  
                     ?_OLED_send 0027                FLASH_WriteBlock@i 0030            __end_of_pushButtonISR 2A10  
     __size_of_OLED_waitForReady 0026                  ?_initGlobalData 0070                   __end_of___flge 0F15  
           __end_of_nextStateTbl 306C                   __end_of___bmul 0EB1                   __end_of___fleq 132B  
                 __end_of___lmul 2800                        i1memcpy@d 0076                        i1memcpy@n 0073  
                      i1memcpy@s 0078                   __end_of___wmul 0A1B                      ?_initialize 0070  
               _FLASH_WriteBlock 06C5                   __end_of_paging 1442                   __end_of_memcpy 2FE2  
                     ftoa@fValue 00BA                   __end_of_rotISR 2A51                   __end_of_sortDC 102E  
              __size_ofi1___flge 0062              start_initialization 0072                      __end_of_ISR 0070  
                    __end_of_ema 27DB         OLED_print_xy@row_offsets 0033                __size_ofi1_memcpy 0020  
         __end_of_uartReceiveISR 077B                      ?_setLensDia 0070                       readNVM@buf 0027  
                     readNVM@nvm 00A0             calcRequiredPower@Rth 00B6             calcRequiredPower@phi 00D6  
                    ?_setSkyTemp 0070             initGlobalData@heater 0038                  ??_OLED_print_xy 0032  
                    sortCur@cmp1 00BA                      sortCur@cmp2 00BC                 __CFG_LPBOREN$OFF 0000  
        _checkChannelStatus$1893 00C0          _checkChannelStatus$1894 00C4                         ??___flge 00B5  
                       ??___bmul 002D                         ??___fleq 002C             __size_of_systemCheck 013A  
                 timeSince@since 0024                         ??___lmul 002C        __size_of_setChannelSwitch 0043  
                       ??___wmul 0033         checkChannelStatus@heater 00D0                        __Umul8_16 1FB7  
                    __pdataBANK0 006B                      __pdataBANK3 01EF                      __pdataBANK4 025E  
                       ??_paging 002B                         ??_memcpy 0034      FLASH_EraseBlock@GIEBitValue 0026  
                       ??_rotISR 0070         __end_of_FLASH_EraseBlock 06C5            setChannelSwitch@state 002F  
                    qsort@compar 00C6                         ??_sortDC 0068                 OLED_print_xy@col 0037  
                    _checkSensor 0299                        ___fladd@a 0060                        ___fladd@b 005C  
               OLED_print_xy@row 002F                        ___fldiv@a 005C                        ___fldiv@b 0060  
                    __pbssBIGRAM 274A              __size_of_controller 00C0                        ___flmul@a 0047  
                      ___flmul@b 0043                      __pbssCOMMON 007C                        ___flsub@a 00A8  
                      ___flsub@b 00AC                        ___latbits 0003                    ??_setDPOffset 0068  
                  __pcstackBANK0 0020                    __pcstackBANK1 00A0                    __pcstackBANK2 0120  
                  __pcstackBANK3 01A0                    __pcstackBANK4 0247            _OLED_loadSpecialChars 0283  
          __size_of_OLED_command 0007                __size_of___xxtofl 006D                paging@currentPage 002E  
                    _channelView 0809                  ?_uartReceiveISR 0070             __end_of_uartSendByte 0468  
                    ?_statusView 0070                ?_viewErrorMessage 0070              __size_of_initialize 0048  
             ??_viewErrorMessage 0038                  _OLED_write4bits 1391                      ??_OLED_init 002A  
                    ??_OLED_send 0028                      storeNVM@buf 00A0                      storeNVM@nvm 0120  
           setOutputPower@heater 00CA            _viewErrorMessage$1387 003A                         ?___fladd 005C  
                _getAnalogValues 187E                         ?___fldiv 005C                         ?___awdiv 0024  
                       ?___lbdiv 0024                         ?___awmod 0024                         ?___lbmod 0024  
                       ?___flmul 0043                         ?___flsub 00A8                         ?___fltol 00B0  
                      _getRotDir 176B                       ?__Umul8_16 0024              __size_of_setLensDia 0098  
                      __pswtext1 2800                        __pswtext2 2000                        __pswtext3 0800  
                   _OLED_command 137D               main@controllerIdle 0161             __end_of_specialChars 30FC  
                       _BAUD1CON 011F                   getNextState@pb 0036                __size_of_storeNVM 0070  
                   channelView@n 00CF                         ?_readNVM 0070              __size_of_setSkyTemp 0067  
           __end_of_returnToPage 137D                   __size_of_getPB 0008                         ?_sortCur 00BA  
                 __size_of_error 002C                        _tick100ms 0167                   __size_of_setup 00A3  
                 __size_of_qsort 016C   FLASH_WriteBlock@blockStartAddr 002E                 ??_getAnalogValue 0026  
            __end_of_setDPOffset 04CE                   ___wmul@product 0033                         _LATAbits 0018  
                       _LATBbits 0019                         _LATCbits 001A                        clear_ram0 2011  
                       _PIE0bits 0716                         _PIE3bits 0719                         _PIE4bits 071A  
                       _PIR0bits 070C                         _PIR3bits 070F        FLASH_EraseBlock@startAddr 0024  
                       _PIR4bits 0710                 ??_FLASH_ReadWord 0026                        _timeSince 01A0  
                      _uartReset 0384                  initGlobalData@n 0037                __CFG_BBSIZE$BB512 0000  
               ??_setOutputPower 00C8                       ?_getRotDir 0070                        _spinInput 1774  
                      _sortDCRev 29B5                         i1___flge 079B                       _ADCON0bits 009D  
              ___wmul@multiplier 002F                     _RX1DTPPSbits 1ECB              __size_of_statusView 0182  
                       i1_memcpy 077B           ?_OLED_loadSpecialChars 0070                    menu@nextState 00EB  
                     sortDC@cmp1 00BA                       sortDC@cmp2 00BC             OLED_write4bits@value 0026  
                    _curRotState 006A                       sortDCRev@a 00BE                       sortDCRev@b 00BF  
               _transition_table 30FC             __end_of_stateFuncTbl 307E                ___lmul@multiplier 0024  
        __end_of_OLED_write4bits 13CF      __size_of_checkChannelStatus 0371                     _nextStateTbl 3000  
              _getLastError$1384 0024                        ftoa@width 00BE         __end_of_FLASH_WriteBlock 0724  
                   ??_controller 0034          __end_of_getAnalogValues 1A04              calcRequiredPower@T1 00E2  
            calcRequiredPower@T2 00E6                 ??_initGlobalData 0035                        paging@dir 002D  
                  uartSendByte@s 0024                        menu@state 016B                        memcpy@tmp 0034  
                      error@code 002A                       ?_timeSince 0024                       ?_uartReset 0070  
      checkChannelStatus@channel 00CF                 _setChannelSwitch 245D                      ??__Umul8_16 0027  
                  ?_channelThing 0070                        itoa@value 0029              getAnalogValues@avgI 0232  
                  ?_channelSetup 0070              getAnalogValues@avgT 0236              getAnalogValues@avgV 0234  
                      itoa@width 002A                 __size_of___fladd 0167                       qsort@vbase 00CE  
               __size_of___fldiv 015E                 __size_of___awdiv 0040                 __size_of___lbdiv 0018  
               __size_of___awmod 0039                       ?_spinInput 00B9                 __size_of___lbmod 0018  
               __size_of___flmul 0182                 __size_of___flsub 0033                 __size_of___fltol 004B  
                     qsort@stack 01A0                       qsort@width 00C4                       ?_sortDCRev 00BA  
         OLED_loadSpecialChars@n 002A                     ??_initialize 0024        checkChannelStatus@current 00CB  
      checkChannelStatus@samples 00C8                         ___xxtofl 0F15                 __size_of_readNVM 006D  
                       _checksum 01E1               __end_of_controller 044C                      _rxFErrCount 01E3  
              _errorMessageQueue 0220            __size_of_uartSendByte 000A                      _setDPOffset 0468  
       checkSensor@sensorTimeout 022E                         __ptext10 059E                         __ptext11 102E  
                       __ptext20 2C16                         __ptext12 1169                         __ptext21 135B  
                       __ptext13 0809                         __ptext30 2ADE                         __ptext22 13F5  
                       __ptext14 1442                         __ptext31 044C                         __ptext23 176B  
                       __ptext15 0636                         __ptext40 2738                         __ptext32 187E  
                       __ptext24 12C5                         __ptext16 06C5                         __ptext41 2431  
                       __ptext33 038C                         __ptext25 1343                         __ptext17 06A6  
                       __ptext50 1004                         __ptext42 2757                         __ptext34 0299  
                       __ptext26 132B                         __ptext18 1774                         __ptext51 29B5  
                       __ptext43 2790                         __ptext35 045E                         __ptext27 0A1B  
                       __ptext19 175C                         __ptext60 0F82                         __ptext52 0E8D  
                       __ptext44 27DB                         __ptext36 0384                         __ptext28 1730  
                       __ptext61 2CAF                         __ptext53 0FB5                         __ptext45 12F5  
                       __ptext37 01A0                         __ptext29 1836                         __ptext70 1384  
                       __ptext62 1E35                         __ptext54 2FC2                         __ptext46 0B40  
                       __ptext38 20C0                         __ptext71 1391                         __ptext63 1FB7  
                       __ptext55 2F82                         __ptext47 2E16                         __ptext39 245D  
                       __ptext64 25DA                         __ptext56 0F15                         __ptext48 2FE2  
                       __ptext73 0724                         __ptext65 0283                         __ptext57 0EB1  
                       __ptext49 1803                         __ptext74 077B                         __ptext66 1764  
                       __ptext58 1A04                         __ptext75 079B                         __ptext67 01F9  
                       __ptext59 0A06                         __ptext76 2A10                         __ptext68 137D  
                       __ptext77 29DF                         __ptext69 13CF                     ??_setLensDia 00E0  
               __size_of_sortCur 0033                    getNextState@n 003A                      _OSCCON3bits 088F  
                       ema@alpha 0034                    __size_of_main 00DE                    __size_of_ftoa 0125  
           main@sysCheckInterval 015C                    __size_of_menu 0064                    __size_of_itoa 0030  
                   ??_setSkyTemp 0068                         getPB@ret 0024                    __size_of_swap 001E  
                       _tick10ms 007D               __end_of_initialize 187E             __CFG_WDTCWS$WDTCWS_6 0000  
                     _RC1STAbits 011D                      _rxOErrCount 01E2                   ??_channelThing 00DB  
                 ??_channelSetup 0068                         int$flags 007E                        setup@page 016C  
                    ??_getRotDir 0024                         _storeNVM 0636                     _uartSendByte 045E  
          __size_of_returnToPage 0022               __end_of_setLensDia 0636          __size_of_setFudgeFactor 0069  
              ?_FLASH_EraseBlock 0024                     ?_checkSensor 0070                 ??_uartReceiveISR 007C  
                       ftoa@prec 00BF                         ftoa@sign 00C2               ??_FLASH_EraseBlock 0026  
                       readNVM@n 0067                       _INTCONbits 000B               calcRequiredPower@A 00DA  
             calcRequiredPower@d 00D2               calcRequiredPower@n 00EA               calcRequiredPower@p 00B2  
             __end_of_setSkyTemp 0535                      _NVMCON1bits 081E                         menu@page 00EA  
                       memcpy@d1 002F                         memcpy@s1 0031                    ?_getLastError 0070  
                   timeSince@now 0030                   __pstringtext10 314C                   __pstringtext11 3159  
                 __pstringtext20 31CE                   __pstringtext12 3166                   __pstringtext21 31DB  
                 __pstringtext13 3173                   __pstringtext30 3250                   __pstringtext22 31E8  
                 __pstringtext14 3180                   __pstringtext31 325D                   __pstringtext23 31F5  
                 __pstringtext15 318D                   __pstringtext40 32D2                   __pstringtext32 326A  
                 __pstringtext24 3202                   __pstringtext16 319A                   __pstringtext41 32DF  
                 __pstringtext33 3277                   __pstringtext25 320F                   __pstringtext17 31A7  
                 __pstringtext50 3354                   __pstringtext42 32EC                   __pstringtext34 3284  
                 __pstringtext26 321C                   __pstringtext18 31B4                   __pstringtext51 335E  
                 __pstringtext43 32F9                   __pstringtext35 3291                   __pstringtext27 3229  
                 __pstringtext19 31C1                   __pstringtext60 33A9                   __pstringtext52 3367  
                 __pstringtext44 3306                   __pstringtext36 329E                   __pstringtext28 3236  
                 __pstringtext61 33B1                   __pstringtext53 3370                   __pstringtext45 3313  
                 __pstringtext37 32AB                   __pstringtext29 3243                   __pstringtext70 33E6  
                 __pstringtext62 33B8                   __pstringtext54 3379                   __pstringtext46 3320  
                 __pstringtext38 32B8                   __pstringtext71 33E9                   __pstringtext63 33BF  
                 __pstringtext55 3381                   __pstringtext47 332D                   __pstringtext39 32C5  
                 __pstringtext72 33EC                   __pstringtext64 33C6                   __pstringtext56 3389  
                 __pstringtext48 333A                   __pstringtext73 33EF                   __pstringtext65 33CD  
                 __pstringtext57 3391                   __pstringtext49 3347                   __pstringtext74 33F2  
                 __pstringtext66 33D4                   __pstringtext58 3399                   __pstringtext75 33F5  
                 __pstringtext67 33DA                   __pstringtext59 33A1                   __pstringtext76 33F8  
                 __pstringtext68 33DE                   __pstringtext77 0000                   __pstringtext69 33E2  
         __size_of_pushButtonISR 0031                        qsort@base 00D0                     ?_channelView 0070  
                      qsort@xbuf 0120        viewErrorMessage@errorCode 003C                 ?_OLED_write4bits 0070  
                       intlevel1 0000                        storeNVM@n 0033                     ??_statusView 00C7  
                   _specialChars 30DC                __CFG_CLKOUTEN$OFF 0000                 ?_getAnalogValues 0070  
                  ?_getNextState 0035                    ??_systemCheck 00B9                       _OLED_write 1764  
          __end_of_OLED_print_xy 175C                     _returnToPage 135B                      ??_timeSince 0028  
                    ??_uartReset 0024                      ??_spinInput 0068                      ??_sortDCRev 0068  
                   getRotDir@ret 0024        __size_of_viewErrorMessage 016C                         sortCur@a 00BE  
                       sortCur@b 00C0                    __pstringtext1 3000                    __pstringtext2 30DC  
                  __pstringtext3 30FC                    __pstringtext4 306C                    __pstringtext5 30B7  
                  __pstringtext6 3118                    __pstringtext7 3125                    __pstringtext8 3132  
                  __pstringtext9 313F                         qsort@nel 00C2           __Umul8_16@multiplicand 0024  
             __end_of_statusView 15C4                   ??_getLastError 0024                    ___fladd@signs 0064  
                controller@timer 0038                     ___fladd@aexp 0065                     ___fladd@bexp 0066  
                 controller@idle 01E0                   ??_getNextState 0038             __Umul8_16@multiplier 0029  
              __Umul8_16@product 0027                  _g_screenRefresh 006B  
