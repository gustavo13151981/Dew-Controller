

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Feb 01 21:49:02 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	idataBANK6,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	stringtext16,global,class=STRCODE,delta=2
    24                           	psect	stringtext17,global,class=STRCODE,delta=2
    25                           	psect	stringtext18,global,class=STRCODE,delta=2
    26                           	psect	stringtext19,global,class=STRCODE,delta=2
    27                           	psect	stringtext20,global,class=STRCODE,delta=2
    28                           	psect	stringtext21,global,class=STRCODE,delta=2
    29                           	psect	stringtext22,global,class=STRCODE,delta=2
    30                           	psect	stringtext23,global,class=STRCODE,delta=2
    31                           	psect	stringtext24,global,class=STRCODE,delta=2
    32                           	psect	stringtext25,global,class=STRCODE,delta=2
    33                           	psect	stringtext26,global,class=STRCODE,delta=2
    34                           	psect	stringtext27,global,class=STRCODE,delta=2
    35                           	psect	stringtext28,global,class=STRCODE,delta=2
    36                           	psect	stringtext29,global,class=STRCODE,delta=2
    37                           	psect	stringtext30,global,class=STRCODE,delta=2
    38                           	psect	stringtext31,global,class=STRCODE,delta=2
    39                           	psect	stringtext32,global,class=STRCODE,delta=2
    40                           	psect	stringtext33,global,class=STRCODE,delta=2
    41                           	psect	stringtext34,global,class=STRCODE,delta=2
    42                           	psect	stringtext35,global,class=STRCODE,delta=2
    43                           	psect	stringtext36,global,class=STRCODE,delta=2
    44                           	psect	stringtext37,global,class=STRCODE,delta=2
    45                           	psect	stringtext38,global,class=STRCODE,delta=2
    46                           	psect	stringtext39,global,class=STRCODE,delta=2
    47                           	psect	stringtext40,global,class=STRCODE,delta=2
    48                           	psect	stringtext41,global,class=STRCODE,delta=2
    49                           	psect	stringtext42,global,class=STRCODE,delta=2
    50                           	psect	stringtext43,global,class=STRCODE,delta=2
    51                           	psect	stringtext44,global,class=STRCODE,delta=2
    52                           	psect	stringtext45,global,class=STRCODE,delta=2
    53                           	psect	stringtext46,global,class=STRCODE,delta=2
    54                           	psect	stringtext47,global,class=STRCODE,delta=2
    55                           	psect	stringtext48,global,class=STRCODE,delta=2
    56                           	psect	stringtext49,global,class=STRCODE,delta=2
    57                           	psect	stringtext50,global,class=STRCODE,delta=2
    58                           	psect	stringtext51,global,class=STRCODE,delta=2
    59                           	psect	stringtext52,global,class=STRCODE,delta=2
    60                           	psect	stringtext53,global,class=STRCODE,delta=2
    61                           	psect	stringtext54,global,class=STRCODE,delta=2
    62                           	psect	stringtext55,global,class=STRCODE,delta=2
    63                           	psect	stringtext56,global,class=STRCODE,delta=2
    64                           	psect	stringtext57,global,class=STRCODE,delta=2
    65                           	psect	stringtext58,global,class=STRCODE,delta=2
    66                           	psect	stringtext59,global,class=STRCODE,delta=2
    67                           	psect	stringtext60,global,class=STRCODE,delta=2
    68                           	psect	stringtext61,global,class=STRCODE,delta=2
    69                           	psect	stringtext62,global,class=STRCODE,delta=2
    70                           	psect	stringtext63,global,class=STRCODE,delta=2
    71                           	psect	stringtext64,global,class=STRCODE,delta=2
    72                           	psect	stringtext65,global,class=STRCODE,delta=2
    73                           	psect	stringtext66,global,class=STRCODE,delta=2
    74                           	psect	stringtext67,global,class=STRCODE,delta=2
    75                           	psect	stringtext68,global,class=STRCODE,delta=2
    76                           	psect	stringtext69,global,class=STRCODE,delta=2
    77                           	psect	stringtext70,global,class=STRCODE,delta=2
    78                           	psect	stringtext71,global,class=STRCODE,delta=2
    79                           	psect	stringtext72,global,class=STRCODE,delta=2
    80                           	psect	stringtext73,global,class=STRCODE,delta=2
    81                           	psect	cinit,global,class=CODE,merge=1,delta=2
    82                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    83                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    84                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    85                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    86                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    87                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    88                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    89                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    90                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    91                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    92                           	psect	inittext,global,class=CODE,delta=2
    93                           	psect	clrtext,global,class=CODE,delta=2
    94                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    95                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    96                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    97                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    98                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    99                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   100                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   101                           	psect	text1,local,class=CODE,merge=1,delta=2
   102                           	psect	text2,local,class=CODE,merge=1,delta=2
   103                           	psect	text3,local,class=CODE,merge=1,delta=2
   104                           	psect	text4,local,class=CODE,merge=1,delta=2
   105                           	psect	text5,local,class=CODE,merge=1,delta=2
   106                           	psect	text6,local,class=CODE,merge=1,delta=2
   107                           	psect	text7,local,class=CODE,merge=1,delta=2
   108                           	psect	text8,local,class=CODE,merge=1,delta=2
   109                           	psect	text9,local,class=CODE,merge=1,delta=2
   110                           	psect	text10,local,class=CODE,merge=1,delta=2
   111                           	psect	text11,local,class=CODE,merge=1,delta=2
   112                           	psect	text12,local,class=CODE,merge=1,delta=2
   113                           	psect	text13,local,class=CODE,merge=1,delta=2
   114                           	psect	text14,local,class=CODE,merge=1,delta=2
   115                           	psect	text15,local,class=CODE,merge=1,delta=2
   116                           	psect	text16,local,class=CODE,merge=1,delta=2
   117                           	psect	text17,local,class=CODE,merge=1,delta=2
   118                           	psect	text18,local,class=CODE,merge=1,delta=2
   119                           	psect	text19,local,class=CODE,merge=1,delta=2
   120                           	psect	text20,local,class=CODE,merge=1,delta=2
   121                           	psect	text21,local,class=CODE,merge=1,delta=2
   122                           	psect	text22,local,class=CODE,merge=1,delta=2
   123                           	psect	text23,local,class=CODE,merge=1,delta=2
   124                           	psect	text24,local,class=CODE,merge=1,delta=2
   125                           	psect	text25,local,class=CODE,merge=1,delta=2
   126                           	psect	text26,local,class=CODE,merge=1,delta=2
   127                           	psect	text27,local,class=CODE,merge=1,delta=2
   128                           	psect	text28,local,class=CODE,merge=1,delta=2
   129                           	psect	text29,local,class=CODE,merge=1,delta=2
   130                           	psect	text30,local,class=CODE,merge=1,delta=2
   131                           	psect	text31,local,class=CODE,merge=1,delta=2
   132                           	psect	text32,local,class=CODE,merge=1,delta=2
   133                           	psect	text33,local,class=CODE,merge=1,delta=2
   134                           	psect	text34,local,class=CODE,merge=1,delta=2
   135                           	psect	text35,local,class=CODE,merge=1,delta=2
   136                           	psect	text36,local,class=CODE,merge=1,delta=2
   137                           	psect	text37,local,class=CODE,merge=1,delta=2
   138                           	psect	text38,local,class=CODE,merge=1,delta=2
   139                           	psect	text39,local,class=CODE,merge=1,delta=2
   140                           	psect	text40,local,class=CODE,merge=1,delta=2
   141                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
   142                           	psect	text42,local,class=CODE,merge=1,delta=2
   143                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
   144                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
   145                           	psect	text45,local,class=CODE,merge=1,delta=2
   146                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
   147                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
   148                           	psect	text48,local,class=CODE,merge=1,delta=2
   149                           	psect	text49,local,class=CODE,merge=1,delta=2
   150                           	psect	text50,local,class=CODE,merge=1,delta=2
   151                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
   152                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
   153                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
   154                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
   155                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
   156                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
   157                           	psect	text57,local,class=CODE,merge=1,delta=2
   158                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
   159                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
   160                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
   161                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
   162                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
   163                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
   164                           	psect	text64,local,class=CODE,merge=1,delta=2
   165                           	psect	text65,local,class=CODE,merge=1,delta=2
   166                           	psect	text66,local,class=CODE,merge=1,delta=2
   167                           	psect	text67,local,class=CODE,merge=1,delta=2
   168                           	psect	text68,local,class=CODE,merge=1,delta=2
   169                           	psect	text69,local,class=CODE,merge=1,delta=2
   170                           	psect	text70,local,class=CODE,merge=1,delta=2
   171                           	psect	intentry,global,class=CODE,delta=2
   172                           	psect	text72,local,class=CODE,merge=1,delta=2
   173                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   174                           	psect	text74,local,class=CODE,merge=1,delta=2
   175                           	psect	text75,local,class=CODE,merge=1,delta=2
   176                           	dabs	1,0xCA0,32
   177                           	dabs	1,0xC20,80
   178                           	dabs	1,0xBBA,54
   179                           	dabs	1,0x274A,0,_data
   180                           	dabs	1,0x7E,2
   181  0000                     
   182                           ; Version 2.10
   183                           ; Generated 31/07/2019 GMT
   184                           ; 
   185                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   186                           ; All rights reserved.
   187                           ; 
   188                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   189                           ; 
   190                           ; Redistribution and use in source and binary forms, with or without modification, are
   191                           ; permitted provided that the following conditions are met:
   192                           ; 
   193                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   194                           ;        conditions and the following disclaimer.
   195                           ; 
   196                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   197                           ;        of conditions and the following disclaimer in the documentation and/or other
   198                           ;        materials provided with the distribution.
   199                           ; 
   200                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   201                           ;        software without specific prior written permission.
   202                           ; 
   203                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   204                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   205                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   206                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   207                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   208                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   209                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   210                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   211                           ; 
   212                           ; 
   213                           ; Code-generator required, PIC16F15356 Definitions
   214                           ; 
   215                           ; SFR Addresses
   216  0000                     	;# 
   217  0001                     	;# 
   218  0002                     	;# 
   219  0003                     	;# 
   220  0004                     	;# 
   221  0005                     	;# 
   222  0006                     	;# 
   223  0007                     	;# 
   224  0008                     	;# 
   225  0009                     	;# 
   226  000A                     	;# 
   227  000B                     	;# 
   228  000C                     	;# 
   229  000D                     	;# 
   230  000E                     	;# 
   231  0010                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0016                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  009B                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  009F                     	;# 
   245  0119                     	;# 
   246  0119                     	;# 
   247  0119                     	;# 
   248  011A                     	;# 
   249  011A                     	;# 
   250  011A                     	;# 
   251  011B                     	;# 
   252  011B                     	;# 
   253  011B                     	;# 
   254  011B                     	;# 
   255  011B                     	;# 
   256  011C                     	;# 
   257  011C                     	;# 
   258  011C                     	;# 
   259  011D                     	;# 
   260  011D                     	;# 
   261  011D                     	;# 
   262  011E                     	;# 
   263  011E                     	;# 
   264  011E                     	;# 
   265  011F                     	;# 
   266  011F                     	;# 
   267  011F                     	;# 
   268  011F                     	;# 
   269  011F                     	;# 
   270  018C                     	;# 
   271  018D                     	;# 
   272  018E                     	;# 
   273  018F                     	;# 
   274  0190                     	;# 
   275  0191                     	;# 
   276  0192                     	;# 
   277  0196                     	;# 
   278  0197                     	;# 
   279  0198                     	;# 
   280  0199                     	;# 
   281  019A                     	;# 
   282  019B                     	;# 
   283  019C                     	;# 
   284  020C                     	;# 
   285  020C                     	;# 
   286  020D                     	;# 
   287  020E                     	;# 
   288  020F                     	;# 
   289  020F                     	;# 
   290  0210                     	;# 
   291  0210                     	;# 
   292  0211                     	;# 
   293  0211                     	;# 
   294  028C                     	;# 
   295  028C                     	;# 
   296  028D                     	;# 
   297  028D                     	;# 
   298  028E                     	;# 
   299  028F                     	;# 
   300  0290                     	;# 
   301  0291                     	;# 
   302  030C                     	;# 
   303  030C                     	;# 
   304  030D                     	;# 
   305  030E                     	;# 
   306  030F                     	;# 
   307  0310                     	;# 
   308  0310                     	;# 
   309  0311                     	;# 
   310  0312                     	;# 
   311  0313                     	;# 
   312  0314                     	;# 
   313  0314                     	;# 
   314  0315                     	;# 
   315  0316                     	;# 
   316  0318                     	;# 
   317  0318                     	;# 
   318  0319                     	;# 
   319  031A                     	;# 
   320  031C                     	;# 
   321  031C                     	;# 
   322  031D                     	;# 
   323  031E                     	;# 
   324  038C                     	;# 
   325  038C                     	;# 
   326  038D                     	;# 
   327  038E                     	;# 
   328  058C                     	;# 
   329  058C                     	;# 
   330  058D                     	;# 
   331  058E                     	;# 
   332  058F                     	;# 
   333  058F                     	;# 
   334  0590                     	;# 
   335  0591                     	;# 
   336  0592                     	;# 
   337  0593                     	;# 
   338  059C                     	;# 
   339  059C                     	;# 
   340  059D                     	;# 
   341  059D                     	;# 
   342  059E                     	;# 
   343  059F                     	;# 
   344  060C                     	;# 
   345  060D                     	;# 
   346  060E                     	;# 
   347  060F                     	;# 
   348  0610                     	;# 
   349  0611                     	;# 
   350  0612                     	;# 
   351  0613                     	;# 
   352  0614                     	;# 
   353  070C                     	;# 
   354  070D                     	;# 
   355  070E                     	;# 
   356  070F                     	;# 
   357  0710                     	;# 
   358  0711                     	;# 
   359  0712                     	;# 
   360  0713                     	;# 
   361  0716                     	;# 
   362  0717                     	;# 
   363  0718                     	;# 
   364  0719                     	;# 
   365  071A                     	;# 
   366  071B                     	;# 
   367  071C                     	;# 
   368  071D                     	;# 
   369  0796                     	;# 
   370  0797                     	;# 
   371  0798                     	;# 
   372  0799                     	;# 
   373  079A                     	;# 
   374  079B                     	;# 
   375  080C                     	;# 
   376  080D                     	;# 
   377  080E                     	;# 
   378  080F                     	;# 
   379  0810                     	;# 
   380  0811                     	;# 
   381  0812                     	;# 
   382  0813                     	;# 
   383  0814                     	;# 
   384  081A                     	;# 
   385  081A                     	;# 
   386  081B                     	;# 
   387  081C                     	;# 
   388  081C                     	;# 
   389  081D                     	;# 
   390  081E                     	;# 
   391  081F                     	;# 
   392  088C                     	;# 
   393  088D                     	;# 
   394  088E                     	;# 
   395  088F                     	;# 
   396  0890                     	;# 
   397  0891                     	;# 
   398  0892                     	;# 
   399  0893                     	;# 
   400  0895                     	;# 
   401  0896                     	;# 
   402  090C                     	;# 
   403  090E                     	;# 
   404  090F                     	;# 
   405  091F                     	;# 
   406  098F                     	;# 
   407  098F                     	;# 
   408  0990                     	;# 
   409  0991                     	;# 
   410  0992                     	;# 
   411  0993                     	;# 
   412  0994                     	;# 
   413  0995                     	;# 
   414  0996                     	;# 
   415  0997                     	;# 
   416  0A19                     	;# 
   417  0A19                     	;# 
   418  0A1A                     	;# 
   419  0A1A                     	;# 
   420  0A1B                     	;# 
   421  0A1B                     	;# 
   422  0A1B                     	;# 
   423  0A1C                     	;# 
   424  0A1C                     	;# 
   425  0A1D                     	;# 
   426  0A1D                     	;# 
   427  0A1E                     	;# 
   428  0A1E                     	;# 
   429  0A1F                     	;# 
   430  0A1F                     	;# 
   431  0A1F                     	;# 
   432  1E0F                     	;# 
   433  1E10                     	;# 
   434  1E11                     	;# 
   435  1E12                     	;# 
   436  1E13                     	;# 
   437  1E14                     	;# 
   438  1E15                     	;# 
   439  1E16                     	;# 
   440  1E17                     	;# 
   441  1E18                     	;# 
   442  1E19                     	;# 
   443  1E1A                     	;# 
   444  1E1B                     	;# 
   445  1E1C                     	;# 
   446  1E1D                     	;# 
   447  1E1E                     	;# 
   448  1E1F                     	;# 
   449  1E20                     	;# 
   450  1E21                     	;# 
   451  1E22                     	;# 
   452  1E23                     	;# 
   453  1E24                     	;# 
   454  1E25                     	;# 
   455  1E26                     	;# 
   456  1E27                     	;# 
   457  1E28                     	;# 
   458  1E29                     	;# 
   459  1E2A                     	;# 
   460  1E2B                     	;# 
   461  1E2C                     	;# 
   462  1E2D                     	;# 
   463  1E2E                     	;# 
   464  1E2F                     	;# 
   465  1E30                     	;# 
   466  1E31                     	;# 
   467  1E32                     	;# 
   468  1E33                     	;# 
   469  1E34                     	;# 
   470  1E35                     	;# 
   471  1E36                     	;# 
   472  1E37                     	;# 
   473  1E8F                     	;# 
   474  1E90                     	;# 
   475  1E91                     	;# 
   476  1E92                     	;# 
   477  1E93                     	;# 
   478  1E9C                     	;# 
   479  1EA1                     	;# 
   480  1EA2                     	;# 
   481  1EB1                     	;# 
   482  1EBB                     	;# 
   483  1EBC                     	;# 
   484  1EBD                     	;# 
   485  1EBE                     	;# 
   486  1EC3                     	;# 
   487  1EC5                     	;# 
   488  1EC6                     	;# 
   489  1EC7                     	;# 
   490  1EC8                     	;# 
   491  1EC9                     	;# 
   492  1ECA                     	;# 
   493  1ECB                     	;# 
   494  1ECC                     	;# 
   495  1ECD                     	;# 
   496  1ECE                     	;# 
   497  1F10                     	;# 
   498  1F11                     	;# 
   499  1F12                     	;# 
   500  1F13                     	;# 
   501  1F14                     	;# 
   502  1F15                     	;# 
   503  1F16                     	;# 
   504  1F17                     	;# 
   505  1F18                     	;# 
   506  1F19                     	;# 
   507  1F1A                     	;# 
   508  1F1B                     	;# 
   509  1F1C                     	;# 
   510  1F1D                     	;# 
   511  1F1E                     	;# 
   512  1F1F                     	;# 
   513  1F20                     	;# 
   514  1F21                     	;# 
   515  1F22                     	;# 
   516  1F23                     	;# 
   517  1F24                     	;# 
   518  1F25                     	;# 
   519  1F26                     	;# 
   520  1F27                     	;# 
   521  1F38                     	;# 
   522  1F39                     	;# 
   523  1F3A                     	;# 
   524  1F3B                     	;# 
   525  1F3C                     	;# 
   526  1F3D                     	;# 
   527  1F3E                     	;# 
   528  1F3F                     	;# 
   529  1F43                     	;# 
   530  1F44                     	;# 
   531  1F45                     	;# 
   532  1F46                     	;# 
   533  1F47                     	;# 
   534  1F48                     	;# 
   535  1F49                     	;# 
   536  1F4A                     	;# 
   537  1F4E                     	;# 
   538  1F4F                     	;# 
   539  1F50                     	;# 
   540  1F51                     	;# 
   541  1F52                     	;# 
   542  1F53                     	;# 
   543  1F54                     	;# 
   544  1F55                     	;# 
   545  1F65                     	;# 
   546  1F68                     	;# 
   547  1F69                     	;# 
   548  1F6A                     	;# 
   549  1F6B                     	;# 
   550  1FE4                     	;# 
   551  1FE5                     	;# 
   552  1FE6                     	;# 
   553  1FE7                     	;# 
   554  1FE8                     	;# 
   555  1FE8                     	;# 
   556  1FE9                     	;# 
   557  1FEA                     	;# 
   558  1FEB                     	;# 
   559  1FED                     	;# 
   560  1FEE                     	;# 
   561  1FEF                     	;# 
   562  0000                     	;# 
   563  0001                     	;# 
   564  0002                     	;# 
   565  0003                     	;# 
   566  0004                     	;# 
   567  0005                     	;# 
   568  0006                     	;# 
   569  0007                     	;# 
   570  0008                     	;# 
   571  0009                     	;# 
   572  000A                     	;# 
   573  000B                     	;# 
   574  000C                     	;# 
   575  000D                     	;# 
   576  000E                     	;# 
   577  0010                     	;# 
   578  0012                     	;# 
   579  0013                     	;# 
   580  0014                     	;# 
   581  0016                     	;# 
   582  0018                     	;# 
   583  0019                     	;# 
   584  001A                     	;# 
   585  009B                     	;# 
   586  009B                     	;# 
   587  009C                     	;# 
   588  009D                     	;# 
   589  009E                     	;# 
   590  009F                     	;# 
   591  0119                     	;# 
   592  0119                     	;# 
   593  0119                     	;# 
   594  011A                     	;# 
   595  011A                     	;# 
   596  011A                     	;# 
   597  011B                     	;# 
   598  011B                     	;# 
   599  011B                     	;# 
   600  011B                     	;# 
   601  011B                     	;# 
   602  011C                     	;# 
   603  011C                     	;# 
   604  011C                     	;# 
   605  011D                     	;# 
   606  011D                     	;# 
   607  011D                     	;# 
   608  011E                     	;# 
   609  011E                     	;# 
   610  011E                     	;# 
   611  011F                     	;# 
   612  011F                     	;# 
   613  011F                     	;# 
   614  011F                     	;# 
   615  011F                     	;# 
   616  018C                     	;# 
   617  018D                     	;# 
   618  018E                     	;# 
   619  018F                     	;# 
   620  0190                     	;# 
   621  0191                     	;# 
   622  0192                     	;# 
   623  0196                     	;# 
   624  0197                     	;# 
   625  0198                     	;# 
   626  0199                     	;# 
   627  019A                     	;# 
   628  019B                     	;# 
   629  019C                     	;# 
   630  020C                     	;# 
   631  020C                     	;# 
   632  020D                     	;# 
   633  020E                     	;# 
   634  020F                     	;# 
   635  020F                     	;# 
   636  0210                     	;# 
   637  0210                     	;# 
   638  0211                     	;# 
   639  0211                     	;# 
   640  028C                     	;# 
   641  028C                     	;# 
   642  028D                     	;# 
   643  028D                     	;# 
   644  028E                     	;# 
   645  028F                     	;# 
   646  0290                     	;# 
   647  0291                     	;# 
   648  030C                     	;# 
   649  030C                     	;# 
   650  030D                     	;# 
   651  030E                     	;# 
   652  030F                     	;# 
   653  0310                     	;# 
   654  0310                     	;# 
   655  0311                     	;# 
   656  0312                     	;# 
   657  0313                     	;# 
   658  0314                     	;# 
   659  0314                     	;# 
   660  0315                     	;# 
   661  0316                     	;# 
   662  0318                     	;# 
   663  0318                     	;# 
   664  0319                     	;# 
   665  031A                     	;# 
   666  031C                     	;# 
   667  031C                     	;# 
   668  031D                     	;# 
   669  031E                     	;# 
   670  038C                     	;# 
   671  038C                     	;# 
   672  038D                     	;# 
   673  038E                     	;# 
   674  058C                     	;# 
   675  058C                     	;# 
   676  058D                     	;# 
   677  058E                     	;# 
   678  058F                     	;# 
   679  058F                     	;# 
   680  0590                     	;# 
   681  0591                     	;# 
   682  0592                     	;# 
   683  0593                     	;# 
   684  059C                     	;# 
   685  059C                     	;# 
   686  059D                     	;# 
   687  059D                     	;# 
   688  059E                     	;# 
   689  059F                     	;# 
   690  060C                     	;# 
   691  060D                     	;# 
   692  060E                     	;# 
   693  060F                     	;# 
   694  0610                     	;# 
   695  0611                     	;# 
   696  0612                     	;# 
   697  0613                     	;# 
   698  0614                     	;# 
   699  070C                     	;# 
   700  070D                     	;# 
   701  070E                     	;# 
   702  070F                     	;# 
   703  0710                     	;# 
   704  0711                     	;# 
   705  0712                     	;# 
   706  0713                     	;# 
   707  0716                     	;# 
   708  0717                     	;# 
   709  0718                     	;# 
   710  0719                     	;# 
   711  071A                     	;# 
   712  071B                     	;# 
   713  071C                     	;# 
   714  071D                     	;# 
   715  0796                     	;# 
   716  0797                     	;# 
   717  0798                     	;# 
   718  0799                     	;# 
   719  079A                     	;# 
   720  079B                     	;# 
   721  080C                     	;# 
   722  080D                     	;# 
   723  080E                     	;# 
   724  080F                     	;# 
   725  0810                     	;# 
   726  0811                     	;# 
   727  0812                     	;# 
   728  0813                     	;# 
   729  0814                     	;# 
   730  081A                     	;# 
   731  081A                     	;# 
   732  081B                     	;# 
   733  081C                     	;# 
   734  081C                     	;# 
   735  081D                     	;# 
   736  081E                     	;# 
   737  081F                     	;# 
   738  088C                     	;# 
   739  088D                     	;# 
   740  088E                     	;# 
   741  088F                     	;# 
   742  0890                     	;# 
   743  0891                     	;# 
   744  0892                     	;# 
   745  0893                     	;# 
   746  0895                     	;# 
   747  0896                     	;# 
   748  090C                     	;# 
   749  090E                     	;# 
   750  090F                     	;# 
   751  091F                     	;# 
   752  098F                     	;# 
   753  098F                     	;# 
   754  0990                     	;# 
   755  0991                     	;# 
   756  0992                     	;# 
   757  0993                     	;# 
   758  0994                     	;# 
   759  0995                     	;# 
   760  0996                     	;# 
   761  0997                     	;# 
   762  0A19                     	;# 
   763  0A19                     	;# 
   764  0A1A                     	;# 
   765  0A1A                     	;# 
   766  0A1B                     	;# 
   767  0A1B                     	;# 
   768  0A1B                     	;# 
   769  0A1C                     	;# 
   770  0A1C                     	;# 
   771  0A1D                     	;# 
   772  0A1D                     	;# 
   773  0A1E                     	;# 
   774  0A1E                     	;# 
   775  0A1F                     	;# 
   776  0A1F                     	;# 
   777  0A1F                     	;# 
   778  1E0F                     	;# 
   779  1E10                     	;# 
   780  1E11                     	;# 
   781  1E12                     	;# 
   782  1E13                     	;# 
   783  1E14                     	;# 
   784  1E15                     	;# 
   785  1E16                     	;# 
   786  1E17                     	;# 
   787  1E18                     	;# 
   788  1E19                     	;# 
   789  1E1A                     	;# 
   790  1E1B                     	;# 
   791  1E1C                     	;# 
   792  1E1D                     	;# 
   793  1E1E                     	;# 
   794  1E1F                     	;# 
   795  1E20                     	;# 
   796  1E21                     	;# 
   797  1E22                     	;# 
   798  1E23                     	;# 
   799  1E24                     	;# 
   800  1E25                     	;# 
   801  1E26                     	;# 
   802  1E27                     	;# 
   803  1E28                     	;# 
   804  1E29                     	;# 
   805  1E2A                     	;# 
   806  1E2B                     	;# 
   807  1E2C                     	;# 
   808  1E2D                     	;# 
   809  1E2E                     	;# 
   810  1E2F                     	;# 
   811  1E30                     	;# 
   812  1E31                     	;# 
   813  1E32                     	;# 
   814  1E33                     	;# 
   815  1E34                     	;# 
   816  1E35                     	;# 
   817  1E36                     	;# 
   818  1E37                     	;# 
   819  1E8F                     	;# 
   820  1E90                     	;# 
   821  1E91                     	;# 
   822  1E92                     	;# 
   823  1E93                     	;# 
   824  1E9C                     	;# 
   825  1EA1                     	;# 
   826  1EA2                     	;# 
   827  1EB1                     	;# 
   828  1EBB                     	;# 
   829  1EBC                     	;# 
   830  1EBD                     	;# 
   831  1EBE                     	;# 
   832  1EC3                     	;# 
   833  1EC5                     	;# 
   834  1EC6                     	;# 
   835  1EC7                     	;# 
   836  1EC8                     	;# 
   837  1EC9                     	;# 
   838  1ECA                     	;# 
   839  1ECB                     	;# 
   840  1ECC                     	;# 
   841  1ECD                     	;# 
   842  1ECE                     	;# 
   843  1F10                     	;# 
   844  1F11                     	;# 
   845  1F12                     	;# 
   846  1F13                     	;# 
   847  1F14                     	;# 
   848  1F15                     	;# 
   849  1F16                     	;# 
   850  1F17                     	;# 
   851  1F18                     	;# 
   852  1F19                     	;# 
   853  1F1A                     	;# 
   854  1F1B                     	;# 
   855  1F1C                     	;# 
   856  1F1D                     	;# 
   857  1F1E                     	;# 
   858  1F1F                     	;# 
   859  1F20                     	;# 
   860  1F21                     	;# 
   861  1F22                     	;# 
   862  1F23                     	;# 
   863  1F24                     	;# 
   864  1F25                     	;# 
   865  1F26                     	;# 
   866  1F27                     	;# 
   867  1F38                     	;# 
   868  1F39                     	;# 
   869  1F3A                     	;# 
   870  1F3B                     	;# 
   871  1F3C                     	;# 
   872  1F3D                     	;# 
   873  1F3E                     	;# 
   874  1F3F                     	;# 
   875  1F43                     	;# 
   876  1F44                     	;# 
   877  1F45                     	;# 
   878  1F46                     	;# 
   879  1F47                     	;# 
   880  1F48                     	;# 
   881  1F49                     	;# 
   882  1F4A                     	;# 
   883  1F4E                     	;# 
   884  1F4F                     	;# 
   885  1F50                     	;# 
   886  1F51                     	;# 
   887  1F52                     	;# 
   888  1F53                     	;# 
   889  1F54                     	;# 
   890  1F55                     	;# 
   891  1F65                     	;# 
   892  1F68                     	;# 
   893  1F69                     	;# 
   894  1F6A                     	;# 
   895  1F6B                     	;# 
   896  1FE4                     	;# 
   897  1FE5                     	;# 
   898  1FE6                     	;# 
   899  1FE7                     	;# 
   900  1FE8                     	;# 
   901  1FE8                     	;# 
   902  1FE9                     	;# 
   903  1FEA                     	;# 
   904  1FEB                     	;# 
   905  1FED                     	;# 
   906  1FEE                     	;# 
   907  1FEF                     	;# 
   908  0000                     	;# 
   909  0001                     	;# 
   910  0002                     	;# 
   911  0003                     	;# 
   912  0004                     	;# 
   913  0005                     	;# 
   914  0006                     	;# 
   915  0007                     	;# 
   916  0008                     	;# 
   917  0009                     	;# 
   918  000A                     	;# 
   919  000B                     	;# 
   920  000C                     	;# 
   921  000D                     	;# 
   922  000E                     	;# 
   923  0010                     	;# 
   924  0012                     	;# 
   925  0013                     	;# 
   926  0014                     	;# 
   927  0016                     	;# 
   928  0018                     	;# 
   929  0019                     	;# 
   930  001A                     	;# 
   931  009B                     	;# 
   932  009B                     	;# 
   933  009C                     	;# 
   934  009D                     	;# 
   935  009E                     	;# 
   936  009F                     	;# 
   937  0119                     	;# 
   938  0119                     	;# 
   939  0119                     	;# 
   940  011A                     	;# 
   941  011A                     	;# 
   942  011A                     	;# 
   943  011B                     	;# 
   944  011B                     	;# 
   945  011B                     	;# 
   946  011B                     	;# 
   947  011B                     	;# 
   948  011C                     	;# 
   949  011C                     	;# 
   950  011C                     	;# 
   951  011D                     	;# 
   952  011D                     	;# 
   953  011D                     	;# 
   954  011E                     	;# 
   955  011E                     	;# 
   956  011E                     	;# 
   957  011F                     	;# 
   958  011F                     	;# 
   959  011F                     	;# 
   960  011F                     	;# 
   961  011F                     	;# 
   962  018C                     	;# 
   963  018D                     	;# 
   964  018E                     	;# 
   965  018F                     	;# 
   966  0190                     	;# 
   967  0191                     	;# 
   968  0192                     	;# 
   969  0196                     	;# 
   970  0197                     	;# 
   971  0198                     	;# 
   972  0199                     	;# 
   973  019A                     	;# 
   974  019B                     	;# 
   975  019C                     	;# 
   976  020C                     	;# 
   977  020C                     	;# 
   978  020D                     	;# 
   979  020E                     	;# 
   980  020F                     	;# 
   981  020F                     	;# 
   982  0210                     	;# 
   983  0210                     	;# 
   984  0211                     	;# 
   985  0211                     	;# 
   986  028C                     	;# 
   987  028C                     	;# 
   988  028D                     	;# 
   989  028D                     	;# 
   990  028E                     	;# 
   991  028F                     	;# 
   992  0290                     	;# 
   993  0291                     	;# 
   994  030C                     	;# 
   995  030C                     	;# 
   996  030D                     	;# 
   997  030E                     	;# 
   998  030F                     	;# 
   999  0310                     	;# 
  1000  0310                     	;# 
  1001  0311                     	;# 
  1002  0312                     	;# 
  1003  0313                     	;# 
  1004  0314                     	;# 
  1005  0314                     	;# 
  1006  0315                     	;# 
  1007  0316                     	;# 
  1008  0318                     	;# 
  1009  0318                     	;# 
  1010  0319                     	;# 
  1011  031A                     	;# 
  1012  031C                     	;# 
  1013  031C                     	;# 
  1014  031D                     	;# 
  1015  031E                     	;# 
  1016  038C                     	;# 
  1017  038C                     	;# 
  1018  038D                     	;# 
  1019  038E                     	;# 
  1020  058C                     	;# 
  1021  058C                     	;# 
  1022  058D                     	;# 
  1023  058E                     	;# 
  1024  058F                     	;# 
  1025  058F                     	;# 
  1026  0590                     	;# 
  1027  0591                     	;# 
  1028  0592                     	;# 
  1029  0593                     	;# 
  1030  059C                     	;# 
  1031  059C                     	;# 
  1032  059D                     	;# 
  1033  059D                     	;# 
  1034  059E                     	;# 
  1035  059F                     	;# 
  1036  060C                     	;# 
  1037  060D                     	;# 
  1038  060E                     	;# 
  1039  060F                     	;# 
  1040  0610                     	;# 
  1041  0611                     	;# 
  1042  0612                     	;# 
  1043  0613                     	;# 
  1044  0614                     	;# 
  1045  070C                     	;# 
  1046  070D                     	;# 
  1047  070E                     	;# 
  1048  070F                     	;# 
  1049  0710                     	;# 
  1050  0711                     	;# 
  1051  0712                     	;# 
  1052  0713                     	;# 
  1053  0716                     	;# 
  1054  0717                     	;# 
  1055  0718                     	;# 
  1056  0719                     	;# 
  1057  071A                     	;# 
  1058  071B                     	;# 
  1059  071C                     	;# 
  1060  071D                     	;# 
  1061  0796                     	;# 
  1062  0797                     	;# 
  1063  0798                     	;# 
  1064  0799                     	;# 
  1065  079A                     	;# 
  1066  079B                     	;# 
  1067  080C                     	;# 
  1068  080D                     	;# 
  1069  080E                     	;# 
  1070  080F                     	;# 
  1071  0810                     	;# 
  1072  0811                     	;# 
  1073  0812                     	;# 
  1074  0813                     	;# 
  1075  0814                     	;# 
  1076  081A                     	;# 
  1077  081A                     	;# 
  1078  081B                     	;# 
  1079  081C                     	;# 
  1080  081C                     	;# 
  1081  081D                     	;# 
  1082  081E                     	;# 
  1083  081F                     	;# 
  1084  088C                     	;# 
  1085  088D                     	;# 
  1086  088E                     	;# 
  1087  088F                     	;# 
  1088  0890                     	;# 
  1089  0891                     	;# 
  1090  0892                     	;# 
  1091  0893                     	;# 
  1092  0895                     	;# 
  1093  0896                     	;# 
  1094  090C                     	;# 
  1095  090E                     	;# 
  1096  090F                     	;# 
  1097  091F                     	;# 
  1098  098F                     	;# 
  1099  098F                     	;# 
  1100  0990                     	;# 
  1101  0991                     	;# 
  1102  0992                     	;# 
  1103  0993                     	;# 
  1104  0994                     	;# 
  1105  0995                     	;# 
  1106  0996                     	;# 
  1107  0997                     	;# 
  1108  0A19                     	;# 
  1109  0A19                     	;# 
  1110  0A1A                     	;# 
  1111  0A1A                     	;# 
  1112  0A1B                     	;# 
  1113  0A1B                     	;# 
  1114  0A1B                     	;# 
  1115  0A1C                     	;# 
  1116  0A1C                     	;# 
  1117  0A1D                     	;# 
  1118  0A1D                     	;# 
  1119  0A1E                     	;# 
  1120  0A1E                     	;# 
  1121  0A1F                     	;# 
  1122  0A1F                     	;# 
  1123  0A1F                     	;# 
  1124  1E0F                     	;# 
  1125  1E10                     	;# 
  1126  1E11                     	;# 
  1127  1E12                     	;# 
  1128  1E13                     	;# 
  1129  1E14                     	;# 
  1130  1E15                     	;# 
  1131  1E16                     	;# 
  1132  1E17                     	;# 
  1133  1E18                     	;# 
  1134  1E19                     	;# 
  1135  1E1A                     	;# 
  1136  1E1B                     	;# 
  1137  1E1C                     	;# 
  1138  1E1D                     	;# 
  1139  1E1E                     	;# 
  1140  1E1F                     	;# 
  1141  1E20                     	;# 
  1142  1E21                     	;# 
  1143  1E22                     	;# 
  1144  1E23                     	;# 
  1145  1E24                     	;# 
  1146  1E25                     	;# 
  1147  1E26                     	;# 
  1148  1E27                     	;# 
  1149  1E28                     	;# 
  1150  1E29                     	;# 
  1151  1E2A                     	;# 
  1152  1E2B                     	;# 
  1153  1E2C                     	;# 
  1154  1E2D                     	;# 
  1155  1E2E                     	;# 
  1156  1E2F                     	;# 
  1157  1E30                     	;# 
  1158  1E31                     	;# 
  1159  1E32                     	;# 
  1160  1E33                     	;# 
  1161  1E34                     	;# 
  1162  1E35                     	;# 
  1163  1E36                     	;# 
  1164  1E37                     	;# 
  1165  1E8F                     	;# 
  1166  1E90                     	;# 
  1167  1E91                     	;# 
  1168  1E92                     	;# 
  1169  1E93                     	;# 
  1170  1E9C                     	;# 
  1171  1EA1                     	;# 
  1172  1EA2                     	;# 
  1173  1EB1                     	;# 
  1174  1EBB                     	;# 
  1175  1EBC                     	;# 
  1176  1EBD                     	;# 
  1177  1EBE                     	;# 
  1178  1EC3                     	;# 
  1179  1EC5                     	;# 
  1180  1EC6                     	;# 
  1181  1EC7                     	;# 
  1182  1EC8                     	;# 
  1183  1EC9                     	;# 
  1184  1ECA                     	;# 
  1185  1ECB                     	;# 
  1186  1ECC                     	;# 
  1187  1ECD                     	;# 
  1188  1ECE                     	;# 
  1189  1F10                     	;# 
  1190  1F11                     	;# 
  1191  1F12                     	;# 
  1192  1F13                     	;# 
  1193  1F14                     	;# 
  1194  1F15                     	;# 
  1195  1F16                     	;# 
  1196  1F17                     	;# 
  1197  1F18                     	;# 
  1198  1F19                     	;# 
  1199  1F1A                     	;# 
  1200  1F1B                     	;# 
  1201  1F1C                     	;# 
  1202  1F1D                     	;# 
  1203  1F1E                     	;# 
  1204  1F1F                     	;# 
  1205  1F20                     	;# 
  1206  1F21                     	;# 
  1207  1F22                     	;# 
  1208  1F23                     	;# 
  1209  1F24                     	;# 
  1210  1F25                     	;# 
  1211  1F26                     	;# 
  1212  1F27                     	;# 
  1213  1F38                     	;# 
  1214  1F39                     	;# 
  1215  1F3A                     	;# 
  1216  1F3B                     	;# 
  1217  1F3C                     	;# 
  1218  1F3D                     	;# 
  1219  1F3E                     	;# 
  1220  1F3F                     	;# 
  1221  1F43                     	;# 
  1222  1F44                     	;# 
  1223  1F45                     	;# 
  1224  1F46                     	;# 
  1225  1F47                     	;# 
  1226  1F48                     	;# 
  1227  1F49                     	;# 
  1228  1F4A                     	;# 
  1229  1F4E                     	;# 
  1230  1F4F                     	;# 
  1231  1F50                     	;# 
  1232  1F51                     	;# 
  1233  1F52                     	;# 
  1234  1F53                     	;# 
  1235  1F54                     	;# 
  1236  1F55                     	;# 
  1237  1F65                     	;# 
  1238  1F68                     	;# 
  1239  1F69                     	;# 
  1240  1F6A                     	;# 
  1241  1F6B                     	;# 
  1242  1FE4                     	;# 
  1243  1FE5                     	;# 
  1244  1FE6                     	;# 
  1245  1FE7                     	;# 
  1246  1FE8                     	;# 
  1247  1FE8                     	;# 
  1248  1FE9                     	;# 
  1249  1FEA                     	;# 
  1250  1FEB                     	;# 
  1251  1FED                     	;# 
  1252  1FEE                     	;# 
  1253  1FEF                     	;# 
  1254  0000                     	;# 
  1255  0001                     	;# 
  1256  0002                     	;# 
  1257  0003                     	;# 
  1258  0004                     	;# 
  1259  0005                     	;# 
  1260  0006                     	;# 
  1261  0007                     	;# 
  1262  0008                     	;# 
  1263  0009                     	;# 
  1264  000A                     	;# 
  1265  000B                     	;# 
  1266  000C                     	;# 
  1267  000D                     	;# 
  1268  000E                     	;# 
  1269  0010                     	;# 
  1270  0012                     	;# 
  1271  0013                     	;# 
  1272  0014                     	;# 
  1273  0016                     	;# 
  1274  0018                     	;# 
  1275  0019                     	;# 
  1276  001A                     	;# 
  1277  009B                     	;# 
  1278  009B                     	;# 
  1279  009C                     	;# 
  1280  009D                     	;# 
  1281  009E                     	;# 
  1282  009F                     	;# 
  1283  0119                     	;# 
  1284  0119                     	;# 
  1285  0119                     	;# 
  1286  011A                     	;# 
  1287  011A                     	;# 
  1288  011A                     	;# 
  1289  011B                     	;# 
  1290  011B                     	;# 
  1291  011B                     	;# 
  1292  011B                     	;# 
  1293  011B                     	;# 
  1294  011C                     	;# 
  1295  011C                     	;# 
  1296  011C                     	;# 
  1297  011D                     	;# 
  1298  011D                     	;# 
  1299  011D                     	;# 
  1300  011E                     	;# 
  1301  011E                     	;# 
  1302  011E                     	;# 
  1303  011F                     	;# 
  1304  011F                     	;# 
  1305  011F                     	;# 
  1306  011F                     	;# 
  1307  011F                     	;# 
  1308  018C                     	;# 
  1309  018D                     	;# 
  1310  018E                     	;# 
  1311  018F                     	;# 
  1312  0190                     	;# 
  1313  0191                     	;# 
  1314  0192                     	;# 
  1315  0196                     	;# 
  1316  0197                     	;# 
  1317  0198                     	;# 
  1318  0199                     	;# 
  1319  019A                     	;# 
  1320  019B                     	;# 
  1321  019C                     	;# 
  1322  020C                     	;# 
  1323  020C                     	;# 
  1324  020D                     	;# 
  1325  020E                     	;# 
  1326  020F                     	;# 
  1327  020F                     	;# 
  1328  0210                     	;# 
  1329  0210                     	;# 
  1330  0211                     	;# 
  1331  0211                     	;# 
  1332  028C                     	;# 
  1333  028C                     	;# 
  1334  028D                     	;# 
  1335  028D                     	;# 
  1336  028E                     	;# 
  1337  028F                     	;# 
  1338  0290                     	;# 
  1339  0291                     	;# 
  1340  030C                     	;# 
  1341  030C                     	;# 
  1342  030D                     	;# 
  1343  030E                     	;# 
  1344  030F                     	;# 
  1345  0310                     	;# 
  1346  0310                     	;# 
  1347  0311                     	;# 
  1348  0312                     	;# 
  1349  0313                     	;# 
  1350  0314                     	;# 
  1351  0314                     	;# 
  1352  0315                     	;# 
  1353  0316                     	;# 
  1354  0318                     	;# 
  1355  0318                     	;# 
  1356  0319                     	;# 
  1357  031A                     	;# 
  1358  031C                     	;# 
  1359  031C                     	;# 
  1360  031D                     	;# 
  1361  031E                     	;# 
  1362  038C                     	;# 
  1363  038C                     	;# 
  1364  038D                     	;# 
  1365  038E                     	;# 
  1366  058C                     	;# 
  1367  058C                     	;# 
  1368  058D                     	;# 
  1369  058E                     	;# 
  1370  058F                     	;# 
  1371  058F                     	;# 
  1372  0590                     	;# 
  1373  0591                     	;# 
  1374  0592                     	;# 
  1375  0593                     	;# 
  1376  059C                     	;# 
  1377  059C                     	;# 
  1378  059D                     	;# 
  1379  059D                     	;# 
  1380  059E                     	;# 
  1381  059F                     	;# 
  1382  060C                     	;# 
  1383  060D                     	;# 
  1384  060E                     	;# 
  1385  060F                     	;# 
  1386  0610                     	;# 
  1387  0611                     	;# 
  1388  0612                     	;# 
  1389  0613                     	;# 
  1390  0614                     	;# 
  1391  070C                     	;# 
  1392  070D                     	;# 
  1393  070E                     	;# 
  1394  070F                     	;# 
  1395  0710                     	;# 
  1396  0711                     	;# 
  1397  0712                     	;# 
  1398  0713                     	;# 
  1399  0716                     	;# 
  1400  0717                     	;# 
  1401  0718                     	;# 
  1402  0719                     	;# 
  1403  071A                     	;# 
  1404  071B                     	;# 
  1405  071C                     	;# 
  1406  071D                     	;# 
  1407  0796                     	;# 
  1408  0797                     	;# 
  1409  0798                     	;# 
  1410  0799                     	;# 
  1411  079A                     	;# 
  1412  079B                     	;# 
  1413  080C                     	;# 
  1414  080D                     	;# 
  1415  080E                     	;# 
  1416  080F                     	;# 
  1417  0810                     	;# 
  1418  0811                     	;# 
  1419  0812                     	;# 
  1420  0813                     	;# 
  1421  0814                     	;# 
  1422  081A                     	;# 
  1423  081A                     	;# 
  1424  081B                     	;# 
  1425  081C                     	;# 
  1426  081C                     	;# 
  1427  081D                     	;# 
  1428  081E                     	;# 
  1429  081F                     	;# 
  1430  088C                     	;# 
  1431  088D                     	;# 
  1432  088E                     	;# 
  1433  088F                     	;# 
  1434  0890                     	;# 
  1435  0891                     	;# 
  1436  0892                     	;# 
  1437  0893                     	;# 
  1438  0895                     	;# 
  1439  0896                     	;# 
  1440  090C                     	;# 
  1441  090E                     	;# 
  1442  090F                     	;# 
  1443  091F                     	;# 
  1444  098F                     	;# 
  1445  098F                     	;# 
  1446  0990                     	;# 
  1447  0991                     	;# 
  1448  0992                     	;# 
  1449  0993                     	;# 
  1450  0994                     	;# 
  1451  0995                     	;# 
  1452  0996                     	;# 
  1453  0997                     	;# 
  1454  0A19                     	;# 
  1455  0A19                     	;# 
  1456  0A1A                     	;# 
  1457  0A1A                     	;# 
  1458  0A1B                     	;# 
  1459  0A1B                     	;# 
  1460  0A1B                     	;# 
  1461  0A1C                     	;# 
  1462  0A1C                     	;# 
  1463  0A1D                     	;# 
  1464  0A1D                     	;# 
  1465  0A1E                     	;# 
  1466  0A1E                     	;# 
  1467  0A1F                     	;# 
  1468  0A1F                     	;# 
  1469  0A1F                     	;# 
  1470  1E0F                     	;# 
  1471  1E10                     	;# 
  1472  1E11                     	;# 
  1473  1E12                     	;# 
  1474  1E13                     	;# 
  1475  1E14                     	;# 
  1476  1E15                     	;# 
  1477  1E16                     	;# 
  1478  1E17                     	;# 
  1479  1E18                     	;# 
  1480  1E19                     	;# 
  1481  1E1A                     	;# 
  1482  1E1B                     	;# 
  1483  1E1C                     	;# 
  1484  1E1D                     	;# 
  1485  1E1E                     	;# 
  1486  1E1F                     	;# 
  1487  1E20                     	;# 
  1488  1E21                     	;# 
  1489  1E22                     	;# 
  1490  1E23                     	;# 
  1491  1E24                     	;# 
  1492  1E25                     	;# 
  1493  1E26                     	;# 
  1494  1E27                     	;# 
  1495  1E28                     	;# 
  1496  1E29                     	;# 
  1497  1E2A                     	;# 
  1498  1E2B                     	;# 
  1499  1E2C                     	;# 
  1500  1E2D                     	;# 
  1501  1E2E                     	;# 
  1502  1E2F                     	;# 
  1503  1E30                     	;# 
  1504  1E31                     	;# 
  1505  1E32                     	;# 
  1506  1E33                     	;# 
  1507  1E34                     	;# 
  1508  1E35                     	;# 
  1509  1E36                     	;# 
  1510  1E37                     	;# 
  1511  1E8F                     	;# 
  1512  1E90                     	;# 
  1513  1E91                     	;# 
  1514  1E92                     	;# 
  1515  1E93                     	;# 
  1516  1E9C                     	;# 
  1517  1EA1                     	;# 
  1518  1EA2                     	;# 
  1519  1EB1                     	;# 
  1520  1EBB                     	;# 
  1521  1EBC                     	;# 
  1522  1EBD                     	;# 
  1523  1EBE                     	;# 
  1524  1EC3                     	;# 
  1525  1EC5                     	;# 
  1526  1EC6                     	;# 
  1527  1EC7                     	;# 
  1528  1EC8                     	;# 
  1529  1EC9                     	;# 
  1530  1ECA                     	;# 
  1531  1ECB                     	;# 
  1532  1ECC                     	;# 
  1533  1ECD                     	;# 
  1534  1ECE                     	;# 
  1535  1F10                     	;# 
  1536  1F11                     	;# 
  1537  1F12                     	;# 
  1538  1F13                     	;# 
  1539  1F14                     	;# 
  1540  1F15                     	;# 
  1541  1F16                     	;# 
  1542  1F17                     	;# 
  1543  1F18                     	;# 
  1544  1F19                     	;# 
  1545  1F1A                     	;# 
  1546  1F1B                     	;# 
  1547  1F1C                     	;# 
  1548  1F1D                     	;# 
  1549  1F1E                     	;# 
  1550  1F1F                     	;# 
  1551  1F20                     	;# 
  1552  1F21                     	;# 
  1553  1F22                     	;# 
  1554  1F23                     	;# 
  1555  1F24                     	;# 
  1556  1F25                     	;# 
  1557  1F26                     	;# 
  1558  1F27                     	;# 
  1559  1F38                     	;# 
  1560  1F39                     	;# 
  1561  1F3A                     	;# 
  1562  1F3B                     	;# 
  1563  1F3C                     	;# 
  1564  1F3D                     	;# 
  1565  1F3E                     	;# 
  1566  1F3F                     	;# 
  1567  1F43                     	;# 
  1568  1F44                     	;# 
  1569  1F45                     	;# 
  1570  1F46                     	;# 
  1571  1F47                     	;# 
  1572  1F48                     	;# 
  1573  1F49                     	;# 
  1574  1F4A                     	;# 
  1575  1F4E                     	;# 
  1576  1F4F                     	;# 
  1577  1F50                     	;# 
  1578  1F51                     	;# 
  1579  1F52                     	;# 
  1580  1F53                     	;# 
  1581  1F54                     	;# 
  1582  1F55                     	;# 
  1583  1F65                     	;# 
  1584  1F68                     	;# 
  1585  1F69                     	;# 
  1586  1F6A                     	;# 
  1587  1F6B                     	;# 
  1588  1FE4                     	;# 
  1589  1FE5                     	;# 
  1590  1FE6                     	;# 
  1591  1FE7                     	;# 
  1592  1FE8                     	;# 
  1593  1FE8                     	;# 
  1594  1FE9                     	;# 
  1595  1FEA                     	;# 
  1596  1FEB                     	;# 
  1597  1FED                     	;# 
  1598  1FEE                     	;# 
  1599  1FEF                     	;# 
  1600  0000                     	;# 
  1601  0001                     	;# 
  1602  0002                     	;# 
  1603  0003                     	;# 
  1604  0004                     	;# 
  1605  0005                     	;# 
  1606  0006                     	;# 
  1607  0007                     	;# 
  1608  0008                     	;# 
  1609  0009                     	;# 
  1610  000A                     	;# 
  1611  000B                     	;# 
  1612  000C                     	;# 
  1613  000D                     	;# 
  1614  000E                     	;# 
  1615  0010                     	;# 
  1616  0012                     	;# 
  1617  0013                     	;# 
  1618  0014                     	;# 
  1619  0016                     	;# 
  1620  0018                     	;# 
  1621  0019                     	;# 
  1622  001A                     	;# 
  1623  009B                     	;# 
  1624  009B                     	;# 
  1625  009C                     	;# 
  1626  009D                     	;# 
  1627  009E                     	;# 
  1628  009F                     	;# 
  1629  0119                     	;# 
  1630  0119                     	;# 
  1631  0119                     	;# 
  1632  011A                     	;# 
  1633  011A                     	;# 
  1634  011A                     	;# 
  1635  011B                     	;# 
  1636  011B                     	;# 
  1637  011B                     	;# 
  1638  011B                     	;# 
  1639  011B                     	;# 
  1640  011C                     	;# 
  1641  011C                     	;# 
  1642  011C                     	;# 
  1643  011D                     	;# 
  1644  011D                     	;# 
  1645  011D                     	;# 
  1646  011E                     	;# 
  1647  011E                     	;# 
  1648  011E                     	;# 
  1649  011F                     	;# 
  1650  011F                     	;# 
  1651  011F                     	;# 
  1652  011F                     	;# 
  1653  011F                     	;# 
  1654  018C                     	;# 
  1655  018D                     	;# 
  1656  018E                     	;# 
  1657  018F                     	;# 
  1658  0190                     	;# 
  1659  0191                     	;# 
  1660  0192                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0198                     	;# 
  1664  0199                     	;# 
  1665  019A                     	;# 
  1666  019B                     	;# 
  1667  019C                     	;# 
  1668  020C                     	;# 
  1669  020C                     	;# 
  1670  020D                     	;# 
  1671  020E                     	;# 
  1672  020F                     	;# 
  1673  020F                     	;# 
  1674  0210                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  028C                     	;# 
  1679  028C                     	;# 
  1680  028D                     	;# 
  1681  028D                     	;# 
  1682  028E                     	;# 
  1683  028F                     	;# 
  1684  0290                     	;# 
  1685  0291                     	;# 
  1686  030C                     	;# 
  1687  030C                     	;# 
  1688  030D                     	;# 
  1689  030E                     	;# 
  1690  030F                     	;# 
  1691  0310                     	;# 
  1692  0310                     	;# 
  1693  0311                     	;# 
  1694  0312                     	;# 
  1695  0313                     	;# 
  1696  0314                     	;# 
  1697  0314                     	;# 
  1698  0315                     	;# 
  1699  0316                     	;# 
  1700  0318                     	;# 
  1701  0318                     	;# 
  1702  0319                     	;# 
  1703  031A                     	;# 
  1704  031C                     	;# 
  1705  031C                     	;# 
  1706  031D                     	;# 
  1707  031E                     	;# 
  1708  038C                     	;# 
  1709  038C                     	;# 
  1710  038D                     	;# 
  1711  038E                     	;# 
  1712  058C                     	;# 
  1713  058C                     	;# 
  1714  058D                     	;# 
  1715  058E                     	;# 
  1716  058F                     	;# 
  1717  058F                     	;# 
  1718  0590                     	;# 
  1719  0591                     	;# 
  1720  0592                     	;# 
  1721  0593                     	;# 
  1722  059C                     	;# 
  1723  059C                     	;# 
  1724  059D                     	;# 
  1725  059D                     	;# 
  1726  059E                     	;# 
  1727  059F                     	;# 
  1728  060C                     	;# 
  1729  060D                     	;# 
  1730  060E                     	;# 
  1731  060F                     	;# 
  1732  0610                     	;# 
  1733  0611                     	;# 
  1734  0612                     	;# 
  1735  0613                     	;# 
  1736  0614                     	;# 
  1737  070C                     	;# 
  1738  070D                     	;# 
  1739  070E                     	;# 
  1740  070F                     	;# 
  1741  0710                     	;# 
  1742  0711                     	;# 
  1743  0712                     	;# 
  1744  0713                     	;# 
  1745  0716                     	;# 
  1746  0717                     	;# 
  1747  0718                     	;# 
  1748  0719                     	;# 
  1749  071A                     	;# 
  1750  071B                     	;# 
  1751  071C                     	;# 
  1752  071D                     	;# 
  1753  0796                     	;# 
  1754  0797                     	;# 
  1755  0798                     	;# 
  1756  0799                     	;# 
  1757  079A                     	;# 
  1758  079B                     	;# 
  1759  080C                     	;# 
  1760  080D                     	;# 
  1761  080E                     	;# 
  1762  080F                     	;# 
  1763  0810                     	;# 
  1764  0811                     	;# 
  1765  0812                     	;# 
  1766  0813                     	;# 
  1767  0814                     	;# 
  1768  081A                     	;# 
  1769  081A                     	;# 
  1770  081B                     	;# 
  1771  081C                     	;# 
  1772  081C                     	;# 
  1773  081D                     	;# 
  1774  081E                     	;# 
  1775  081F                     	;# 
  1776  088C                     	;# 
  1777  088D                     	;# 
  1778  088E                     	;# 
  1779  088F                     	;# 
  1780  0890                     	;# 
  1781  0891                     	;# 
  1782  0892                     	;# 
  1783  0893                     	;# 
  1784  0895                     	;# 
  1785  0896                     	;# 
  1786  090C                     	;# 
  1787  090E                     	;# 
  1788  090F                     	;# 
  1789  091F                     	;# 
  1790  098F                     	;# 
  1791  098F                     	;# 
  1792  0990                     	;# 
  1793  0991                     	;# 
  1794  0992                     	;# 
  1795  0993                     	;# 
  1796  0994                     	;# 
  1797  0995                     	;# 
  1798  0996                     	;# 
  1799  0997                     	;# 
  1800  0A19                     	;# 
  1801  0A19                     	;# 
  1802  0A1A                     	;# 
  1803  0A1A                     	;# 
  1804  0A1B                     	;# 
  1805  0A1B                     	;# 
  1806  0A1B                     	;# 
  1807  0A1C                     	;# 
  1808  0A1C                     	;# 
  1809  0A1D                     	;# 
  1810  0A1D                     	;# 
  1811  0A1E                     	;# 
  1812  0A1E                     	;# 
  1813  0A1F                     	;# 
  1814  0A1F                     	;# 
  1815  0A1F                     	;# 
  1816  1E0F                     	;# 
  1817  1E10                     	;# 
  1818  1E11                     	;# 
  1819  1E12                     	;# 
  1820  1E13                     	;# 
  1821  1E14                     	;# 
  1822  1E15                     	;# 
  1823  1E16                     	;# 
  1824  1E17                     	;# 
  1825  1E18                     	;# 
  1826  1E19                     	;# 
  1827  1E1A                     	;# 
  1828  1E1B                     	;# 
  1829  1E1C                     	;# 
  1830  1E1D                     	;# 
  1831  1E1E                     	;# 
  1832  1E1F                     	;# 
  1833  1E20                     	;# 
  1834  1E21                     	;# 
  1835  1E22                     	;# 
  1836  1E23                     	;# 
  1837  1E24                     	;# 
  1838  1E25                     	;# 
  1839  1E26                     	;# 
  1840  1E27                     	;# 
  1841  1E28                     	;# 
  1842  1E29                     	;# 
  1843  1E2A                     	;# 
  1844  1E2B                     	;# 
  1845  1E2C                     	;# 
  1846  1E2D                     	;# 
  1847  1E2E                     	;# 
  1848  1E2F                     	;# 
  1849  1E30                     	;# 
  1850  1E31                     	;# 
  1851  1E32                     	;# 
  1852  1E33                     	;# 
  1853  1E34                     	;# 
  1854  1E35                     	;# 
  1855  1E36                     	;# 
  1856  1E37                     	;# 
  1857  1E8F                     	;# 
  1858  1E90                     	;# 
  1859  1E91                     	;# 
  1860  1E92                     	;# 
  1861  1E93                     	;# 
  1862  1E9C                     	;# 
  1863  1EA1                     	;# 
  1864  1EA2                     	;# 
  1865  1EB1                     	;# 
  1866  1EBB                     	;# 
  1867  1EBC                     	;# 
  1868  1EBD                     	;# 
  1869  1EBE                     	;# 
  1870  1EC3                     	;# 
  1871  1EC5                     	;# 
  1872  1EC6                     	;# 
  1873  1EC7                     	;# 
  1874  1EC8                     	;# 
  1875  1EC9                     	;# 
  1876  1ECA                     	;# 
  1877  1ECB                     	;# 
  1878  1ECC                     	;# 
  1879  1ECD                     	;# 
  1880  1ECE                     	;# 
  1881  1F10                     	;# 
  1882  1F11                     	;# 
  1883  1F12                     	;# 
  1884  1F13                     	;# 
  1885  1F14                     	;# 
  1886  1F15                     	;# 
  1887  1F16                     	;# 
  1888  1F17                     	;# 
  1889  1F18                     	;# 
  1890  1F19                     	;# 
  1891  1F1A                     	;# 
  1892  1F1B                     	;# 
  1893  1F1C                     	;# 
  1894  1F1D                     	;# 
  1895  1F1E                     	;# 
  1896  1F1F                     	;# 
  1897  1F20                     	;# 
  1898  1F21                     	;# 
  1899  1F22                     	;# 
  1900  1F23                     	;# 
  1901  1F24                     	;# 
  1902  1F25                     	;# 
  1903  1F26                     	;# 
  1904  1F27                     	;# 
  1905  1F38                     	;# 
  1906  1F39                     	;# 
  1907  1F3A                     	;# 
  1908  1F3B                     	;# 
  1909  1F3C                     	;# 
  1910  1F3D                     	;# 
  1911  1F3E                     	;# 
  1912  1F3F                     	;# 
  1913  1F43                     	;# 
  1914  1F44                     	;# 
  1915  1F45                     	;# 
  1916  1F46                     	;# 
  1917  1F47                     	;# 
  1918  1F48                     	;# 
  1919  1F49                     	;# 
  1920  1F4A                     	;# 
  1921  1F4E                     	;# 
  1922  1F4F                     	;# 
  1923  1F50                     	;# 
  1924  1F51                     	;# 
  1925  1F52                     	;# 
  1926  1F53                     	;# 
  1927  1F54                     	;# 
  1928  1F55                     	;# 
  1929  1F65                     	;# 
  1930  1F68                     	;# 
  1931  1F69                     	;# 
  1932  1F6A                     	;# 
  1933  1F6B                     	;# 
  1934  1FE4                     	;# 
  1935  1FE5                     	;# 
  1936  1FE6                     	;# 
  1937  1FE7                     	;# 
  1938  1FE8                     	;# 
  1939  1FE8                     	;# 
  1940  1FE9                     	;# 
  1941  1FEA                     	;# 
  1942  1FEB                     	;# 
  1943  1FED                     	;# 
  1944  1FEE                     	;# 
  1945  1FEF                     	;# 
  1946  0000                     	;# 
  1947  0001                     	;# 
  1948  0002                     	;# 
  1949  0003                     	;# 
  1950  0004                     	;# 
  1951  0005                     	;# 
  1952  0006                     	;# 
  1953  0007                     	;# 
  1954  0008                     	;# 
  1955  0009                     	;# 
  1956  000A                     	;# 
  1957  000B                     	;# 
  1958  000C                     	;# 
  1959  000D                     	;# 
  1960  000E                     	;# 
  1961  0010                     	;# 
  1962  0012                     	;# 
  1963  0013                     	;# 
  1964  0014                     	;# 
  1965  0016                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  009B                     	;# 
  1970  009B                     	;# 
  1971  009C                     	;# 
  1972  009D                     	;# 
  1973  009E                     	;# 
  1974  009F                     	;# 
  1975  0119                     	;# 
  1976  0119                     	;# 
  1977  0119                     	;# 
  1978  011A                     	;# 
  1979  011A                     	;# 
  1980  011A                     	;# 
  1981  011B                     	;# 
  1982  011B                     	;# 
  1983  011B                     	;# 
  1984  011B                     	;# 
  1985  011B                     	;# 
  1986  011C                     	;# 
  1987  011C                     	;# 
  1988  011C                     	;# 
  1989  011D                     	;# 
  1990  011D                     	;# 
  1991  011D                     	;# 
  1992  011E                     	;# 
  1993  011E                     	;# 
  1994  011E                     	;# 
  1995  011F                     	;# 
  1996  011F                     	;# 
  1997  011F                     	;# 
  1998  011F                     	;# 
  1999  011F                     	;# 
  2000  018C                     	;# 
  2001  018D                     	;# 
  2002  018E                     	;# 
  2003  018F                     	;# 
  2004  0190                     	;# 
  2005  0191                     	;# 
  2006  0192                     	;# 
  2007  0196                     	;# 
  2008  0197                     	;# 
  2009  0198                     	;# 
  2010  0199                     	;# 
  2011  019A                     	;# 
  2012  019B                     	;# 
  2013  019C                     	;# 
  2014  020C                     	;# 
  2015  020C                     	;# 
  2016  020D                     	;# 
  2017  020E                     	;# 
  2018  020F                     	;# 
  2019  020F                     	;# 
  2020  0210                     	;# 
  2021  0210                     	;# 
  2022  0211                     	;# 
  2023  0211                     	;# 
  2024  028C                     	;# 
  2025  028C                     	;# 
  2026  028D                     	;# 
  2027  028D                     	;# 
  2028  028E                     	;# 
  2029  028F                     	;# 
  2030  0290                     	;# 
  2031  0291                     	;# 
  2032  030C                     	;# 
  2033  030C                     	;# 
  2034  030D                     	;# 
  2035  030E                     	;# 
  2036  030F                     	;# 
  2037  0310                     	;# 
  2038  0310                     	;# 
  2039  0311                     	;# 
  2040  0312                     	;# 
  2041  0313                     	;# 
  2042  0314                     	;# 
  2043  0314                     	;# 
  2044  0315                     	;# 
  2045  0316                     	;# 
  2046  0318                     	;# 
  2047  0318                     	;# 
  2048  0319                     	;# 
  2049  031A                     	;# 
  2050  031C                     	;# 
  2051  031C                     	;# 
  2052  031D                     	;# 
  2053  031E                     	;# 
  2054  038C                     	;# 
  2055  038C                     	;# 
  2056  038D                     	;# 
  2057  038E                     	;# 
  2058  058C                     	;# 
  2059  058C                     	;# 
  2060  058D                     	;# 
  2061  058E                     	;# 
  2062  058F                     	;# 
  2063  058F                     	;# 
  2064  0590                     	;# 
  2065  0591                     	;# 
  2066  0592                     	;# 
  2067  0593                     	;# 
  2068  059C                     	;# 
  2069  059C                     	;# 
  2070  059D                     	;# 
  2071  059D                     	;# 
  2072  059E                     	;# 
  2073  059F                     	;# 
  2074  060C                     	;# 
  2075  060D                     	;# 
  2076  060E                     	;# 
  2077  060F                     	;# 
  2078  0610                     	;# 
  2079  0611                     	;# 
  2080  0612                     	;# 
  2081  0613                     	;# 
  2082  0614                     	;# 
  2083  070C                     	;# 
  2084  070D                     	;# 
  2085  070E                     	;# 
  2086  070F                     	;# 
  2087  0710                     	;# 
  2088  0711                     	;# 
  2089  0712                     	;# 
  2090  0713                     	;# 
  2091  0716                     	;# 
  2092  0717                     	;# 
  2093  0718                     	;# 
  2094  0719                     	;# 
  2095  071A                     	;# 
  2096  071B                     	;# 
  2097  071C                     	;# 
  2098  071D                     	;# 
  2099  0796                     	;# 
  2100  0797                     	;# 
  2101  0798                     	;# 
  2102  0799                     	;# 
  2103  079A                     	;# 
  2104  079B                     	;# 
  2105  080C                     	;# 
  2106  080D                     	;# 
  2107  080E                     	;# 
  2108  080F                     	;# 
  2109  0810                     	;# 
  2110  0811                     	;# 
  2111  0812                     	;# 
  2112  0813                     	;# 
  2113  0814                     	;# 
  2114  081A                     	;# 
  2115  081A                     	;# 
  2116  081B                     	;# 
  2117  081C                     	;# 
  2118  081C                     	;# 
  2119  081D                     	;# 
  2120  081E                     	;# 
  2121  081F                     	;# 
  2122  088C                     	;# 
  2123  088D                     	;# 
  2124  088E                     	;# 
  2125  088F                     	;# 
  2126  0890                     	;# 
  2127  0891                     	;# 
  2128  0892                     	;# 
  2129  0893                     	;# 
  2130  0895                     	;# 
  2131  0896                     	;# 
  2132  090C                     	;# 
  2133  090E                     	;# 
  2134  090F                     	;# 
  2135  091F                     	;# 
  2136  098F                     	;# 
  2137  098F                     	;# 
  2138  0990                     	;# 
  2139  0991                     	;# 
  2140  0992                     	;# 
  2141  0993                     	;# 
  2142  0994                     	;# 
  2143  0995                     	;# 
  2144  0996                     	;# 
  2145  0997                     	;# 
  2146  0A19                     	;# 
  2147  0A19                     	;# 
  2148  0A1A                     	;# 
  2149  0A1A                     	;# 
  2150  0A1B                     	;# 
  2151  0A1B                     	;# 
  2152  0A1B                     	;# 
  2153  0A1C                     	;# 
  2154  0A1C                     	;# 
  2155  0A1D                     	;# 
  2156  0A1D                     	;# 
  2157  0A1E                     	;# 
  2158  0A1E                     	;# 
  2159  0A1F                     	;# 
  2160  0A1F                     	;# 
  2161  0A1F                     	;# 
  2162  1E0F                     	;# 
  2163  1E10                     	;# 
  2164  1E11                     	;# 
  2165  1E12                     	;# 
  2166  1E13                     	;# 
  2167  1E14                     	;# 
  2168  1E15                     	;# 
  2169  1E16                     	;# 
  2170  1E17                     	;# 
  2171  1E18                     	;# 
  2172  1E19                     	;# 
  2173  1E1A                     	;# 
  2174  1E1B                     	;# 
  2175  1E1C                     	;# 
  2176  1E1D                     	;# 
  2177  1E1E                     	;# 
  2178  1E1F                     	;# 
  2179  1E20                     	;# 
  2180  1E21                     	;# 
  2181  1E22                     	;# 
  2182  1E23                     	;# 
  2183  1E24                     	;# 
  2184  1E25                     	;# 
  2185  1E26                     	;# 
  2186  1E27                     	;# 
  2187  1E28                     	;# 
  2188  1E29                     	;# 
  2189  1E2A                     	;# 
  2190  1E2B                     	;# 
  2191  1E2C                     	;# 
  2192  1E2D                     	;# 
  2193  1E2E                     	;# 
  2194  1E2F                     	;# 
  2195  1E30                     	;# 
  2196  1E31                     	;# 
  2197  1E32                     	;# 
  2198  1E33                     	;# 
  2199  1E34                     	;# 
  2200  1E35                     	;# 
  2201  1E36                     	;# 
  2202  1E37                     	;# 
  2203  1E8F                     	;# 
  2204  1E90                     	;# 
  2205  1E91                     	;# 
  2206  1E92                     	;# 
  2207  1E93                     	;# 
  2208  1E9C                     	;# 
  2209  1EA1                     	;# 
  2210  1EA2                     	;# 
  2211  1EB1                     	;# 
  2212  1EBB                     	;# 
  2213  1EBC                     	;# 
  2214  1EBD                     	;# 
  2215  1EBE                     	;# 
  2216  1EC3                     	;# 
  2217  1EC5                     	;# 
  2218  1EC6                     	;# 
  2219  1EC7                     	;# 
  2220  1EC8                     	;# 
  2221  1EC9                     	;# 
  2222  1ECA                     	;# 
  2223  1ECB                     	;# 
  2224  1ECC                     	;# 
  2225  1ECD                     	;# 
  2226  1ECE                     	;# 
  2227  1F10                     	;# 
  2228  1F11                     	;# 
  2229  1F12                     	;# 
  2230  1F13                     	;# 
  2231  1F14                     	;# 
  2232  1F15                     	;# 
  2233  1F16                     	;# 
  2234  1F17                     	;# 
  2235  1F18                     	;# 
  2236  1F19                     	;# 
  2237  1F1A                     	;# 
  2238  1F1B                     	;# 
  2239  1F1C                     	;# 
  2240  1F1D                     	;# 
  2241  1F1E                     	;# 
  2242  1F1F                     	;# 
  2243  1F20                     	;# 
  2244  1F21                     	;# 
  2245  1F22                     	;# 
  2246  1F23                     	;# 
  2247  1F24                     	;# 
  2248  1F25                     	;# 
  2249  1F26                     	;# 
  2250  1F27                     	;# 
  2251  1F38                     	;# 
  2252  1F39                     	;# 
  2253  1F3A                     	;# 
  2254  1F3B                     	;# 
  2255  1F3C                     	;# 
  2256  1F3D                     	;# 
  2257  1F3E                     	;# 
  2258  1F3F                     	;# 
  2259  1F43                     	;# 
  2260  1F44                     	;# 
  2261  1F45                     	;# 
  2262  1F46                     	;# 
  2263  1F47                     	;# 
  2264  1F48                     	;# 
  2265  1F49                     	;# 
  2266  1F4A                     	;# 
  2267  1F4E                     	;# 
  2268  1F4F                     	;# 
  2269  1F50                     	;# 
  2270  1F51                     	;# 
  2271  1F52                     	;# 
  2272  1F53                     	;# 
  2273  1F54                     	;# 
  2274  1F55                     	;# 
  2275  1F65                     	;# 
  2276  1F68                     	;# 
  2277  1F69                     	;# 
  2278  1F6A                     	;# 
  2279  1F6B                     	;# 
  2280  1FE4                     	;# 
  2281  1FE5                     	;# 
  2282  1FE6                     	;# 
  2283  1FE7                     	;# 
  2284  1FE8                     	;# 
  2285  1FE8                     	;# 
  2286  1FE9                     	;# 
  2287  1FEA                     	;# 
  2288  1FEB                     	;# 
  2289  1FED                     	;# 
  2290  1FEE                     	;# 
  2291  1FEF                     	;# 
  2292  0000                     	;# 
  2293  0001                     	;# 
  2294  0002                     	;# 
  2295  0003                     	;# 
  2296  0004                     	;# 
  2297  0005                     	;# 
  2298  0006                     	;# 
  2299  0007                     	;# 
  2300  0008                     	;# 
  2301  0009                     	;# 
  2302  000A                     	;# 
  2303  000B                     	;# 
  2304  000C                     	;# 
  2305  000D                     	;# 
  2306  000E                     	;# 
  2307  0010                     	;# 
  2308  0012                     	;# 
  2309  0013                     	;# 
  2310  0014                     	;# 
  2311  0016                     	;# 
  2312  0018                     	;# 
  2313  0019                     	;# 
  2314  001A                     	;# 
  2315  009B                     	;# 
  2316  009B                     	;# 
  2317  009C                     	;# 
  2318  009D                     	;# 
  2319  009E                     	;# 
  2320  009F                     	;# 
  2321  0119                     	;# 
  2322  0119                     	;# 
  2323  0119                     	;# 
  2324  011A                     	;# 
  2325  011A                     	;# 
  2326  011A                     	;# 
  2327  011B                     	;# 
  2328  011B                     	;# 
  2329  011B                     	;# 
  2330  011B                     	;# 
  2331  011B                     	;# 
  2332  011C                     	;# 
  2333  011C                     	;# 
  2334  011C                     	;# 
  2335  011D                     	;# 
  2336  011D                     	;# 
  2337  011D                     	;# 
  2338  011E                     	;# 
  2339  011E                     	;# 
  2340  011E                     	;# 
  2341  011F                     	;# 
  2342  011F                     	;# 
  2343  011F                     	;# 
  2344  011F                     	;# 
  2345  011F                     	;# 
  2346  018C                     	;# 
  2347  018D                     	;# 
  2348  018E                     	;# 
  2349  018F                     	;# 
  2350  0190                     	;# 
  2351  0191                     	;# 
  2352  0192                     	;# 
  2353  0196                     	;# 
  2354  0197                     	;# 
  2355  0198                     	;# 
  2356  0199                     	;# 
  2357  019A                     	;# 
  2358  019B                     	;# 
  2359  019C                     	;# 
  2360  020C                     	;# 
  2361  020C                     	;# 
  2362  020D                     	;# 
  2363  020E                     	;# 
  2364  020F                     	;# 
  2365  020F                     	;# 
  2366  0210                     	;# 
  2367  0210                     	;# 
  2368  0211                     	;# 
  2369  0211                     	;# 
  2370  028C                     	;# 
  2371  028C                     	;# 
  2372  028D                     	;# 
  2373  028D                     	;# 
  2374  028E                     	;# 
  2375  028F                     	;# 
  2376  0290                     	;# 
  2377  0291                     	;# 
  2378  030C                     	;# 
  2379  030C                     	;# 
  2380  030D                     	;# 
  2381  030E                     	;# 
  2382  030F                     	;# 
  2383  0310                     	;# 
  2384  0310                     	;# 
  2385  0311                     	;# 
  2386  0312                     	;# 
  2387  0313                     	;# 
  2388  0314                     	;# 
  2389  0314                     	;# 
  2390  0315                     	;# 
  2391  0316                     	;# 
  2392  0318                     	;# 
  2393  0318                     	;# 
  2394  0319                     	;# 
  2395  031A                     	;# 
  2396  031C                     	;# 
  2397  031C                     	;# 
  2398  031D                     	;# 
  2399  031E                     	;# 
  2400  038C                     	;# 
  2401  038C                     	;# 
  2402  038D                     	;# 
  2403  038E                     	;# 
  2404  058C                     	;# 
  2405  058C                     	;# 
  2406  058D                     	;# 
  2407  058E                     	;# 
  2408  058F                     	;# 
  2409  058F                     	;# 
  2410  0590                     	;# 
  2411  0591                     	;# 
  2412  0592                     	;# 
  2413  0593                     	;# 
  2414  059C                     	;# 
  2415  059C                     	;# 
  2416  059D                     	;# 
  2417  059D                     	;# 
  2418  059E                     	;# 
  2419  059F                     	;# 
  2420  060C                     	;# 
  2421  060D                     	;# 
  2422  060E                     	;# 
  2423  060F                     	;# 
  2424  0610                     	;# 
  2425  0611                     	;# 
  2426  0612                     	;# 
  2427  0613                     	;# 
  2428  0614                     	;# 
  2429  070C                     	;# 
  2430  070D                     	;# 
  2431  070E                     	;# 
  2432  070F                     	;# 
  2433  0710                     	;# 
  2434  0711                     	;# 
  2435  0712                     	;# 
  2436  0713                     	;# 
  2437  0716                     	;# 
  2438  0717                     	;# 
  2439  0718                     	;# 
  2440  0719                     	;# 
  2441  071A                     	;# 
  2442  071B                     	;# 
  2443  071C                     	;# 
  2444  071D                     	;# 
  2445  0796                     	;# 
  2446  0797                     	;# 
  2447  0798                     	;# 
  2448  0799                     	;# 
  2449  079A                     	;# 
  2450  079B                     	;# 
  2451  080C                     	;# 
  2452  080D                     	;# 
  2453  080E                     	;# 
  2454  080F                     	;# 
  2455  0810                     	;# 
  2456  0811                     	;# 
  2457  0812                     	;# 
  2458  0813                     	;# 
  2459  0814                     	;# 
  2460  081A                     	;# 
  2461  081A                     	;# 
  2462  081B                     	;# 
  2463  081C                     	;# 
  2464  081C                     	;# 
  2465  081D                     	;# 
  2466  081E                     	;# 
  2467  081F                     	;# 
  2468  088C                     	;# 
  2469  088D                     	;# 
  2470  088E                     	;# 
  2471  088F                     	;# 
  2472  0890                     	;# 
  2473  0891                     	;# 
  2474  0892                     	;# 
  2475  0893                     	;# 
  2476  0895                     	;# 
  2477  0896                     	;# 
  2478  090C                     	;# 
  2479  090E                     	;# 
  2480  090F                     	;# 
  2481  091F                     	;# 
  2482  098F                     	;# 
  2483  098F                     	;# 
  2484  0990                     	;# 
  2485  0991                     	;# 
  2486  0992                     	;# 
  2487  0993                     	;# 
  2488  0994                     	;# 
  2489  0995                     	;# 
  2490  0996                     	;# 
  2491  0997                     	;# 
  2492  0A19                     	;# 
  2493  0A19                     	;# 
  2494  0A1A                     	;# 
  2495  0A1A                     	;# 
  2496  0A1B                     	;# 
  2497  0A1B                     	;# 
  2498  0A1B                     	;# 
  2499  0A1C                     	;# 
  2500  0A1C                     	;# 
  2501  0A1D                     	;# 
  2502  0A1D                     	;# 
  2503  0A1E                     	;# 
  2504  0A1E                     	;# 
  2505  0A1F                     	;# 
  2506  0A1F                     	;# 
  2507  0A1F                     	;# 
  2508  1E0F                     	;# 
  2509  1E10                     	;# 
  2510  1E11                     	;# 
  2511  1E12                     	;# 
  2512  1E13                     	;# 
  2513  1E14                     	;# 
  2514  1E15                     	;# 
  2515  1E16                     	;# 
  2516  1E17                     	;# 
  2517  1E18                     	;# 
  2518  1E19                     	;# 
  2519  1E1A                     	;# 
  2520  1E1B                     	;# 
  2521  1E1C                     	;# 
  2522  1E1D                     	;# 
  2523  1E1E                     	;# 
  2524  1E1F                     	;# 
  2525  1E20                     	;# 
  2526  1E21                     	;# 
  2527  1E22                     	;# 
  2528  1E23                     	;# 
  2529  1E24                     	;# 
  2530  1E25                     	;# 
  2531  1E26                     	;# 
  2532  1E27                     	;# 
  2533  1E28                     	;# 
  2534  1E29                     	;# 
  2535  1E2A                     	;# 
  2536  1E2B                     	;# 
  2537  1E2C                     	;# 
  2538  1E2D                     	;# 
  2539  1E2E                     	;# 
  2540  1E2F                     	;# 
  2541  1E30                     	;# 
  2542  1E31                     	;# 
  2543  1E32                     	;# 
  2544  1E33                     	;# 
  2545  1E34                     	;# 
  2546  1E35                     	;# 
  2547  1E36                     	;# 
  2548  1E37                     	;# 
  2549  1E8F                     	;# 
  2550  1E90                     	;# 
  2551  1E91                     	;# 
  2552  1E92                     	;# 
  2553  1E93                     	;# 
  2554  1E9C                     	;# 
  2555  1EA1                     	;# 
  2556  1EA2                     	;# 
  2557  1EB1                     	;# 
  2558  1EBB                     	;# 
  2559  1EBC                     	;# 
  2560  1EBD                     	;# 
  2561  1EBE                     	;# 
  2562  1EC3                     	;# 
  2563  1EC5                     	;# 
  2564  1EC6                     	;# 
  2565  1EC7                     	;# 
  2566  1EC8                     	;# 
  2567  1EC9                     	;# 
  2568  1ECA                     	;# 
  2569  1ECB                     	;# 
  2570  1ECC                     	;# 
  2571  1ECD                     	;# 
  2572  1ECE                     	;# 
  2573  1F10                     	;# 
  2574  1F11                     	;# 
  2575  1F12                     	;# 
  2576  1F13                     	;# 
  2577  1F14                     	;# 
  2578  1F15                     	;# 
  2579  1F16                     	;# 
  2580  1F17                     	;# 
  2581  1F18                     	;# 
  2582  1F19                     	;# 
  2583  1F1A                     	;# 
  2584  1F1B                     	;# 
  2585  1F1C                     	;# 
  2586  1F1D                     	;# 
  2587  1F1E                     	;# 
  2588  1F1F                     	;# 
  2589  1F20                     	;# 
  2590  1F21                     	;# 
  2591  1F22                     	;# 
  2592  1F23                     	;# 
  2593  1F24                     	;# 
  2594  1F25                     	;# 
  2595  1F26                     	;# 
  2596  1F27                     	;# 
  2597  1F38                     	;# 
  2598  1F39                     	;# 
  2599  1F3A                     	;# 
  2600  1F3B                     	;# 
  2601  1F3C                     	;# 
  2602  1F3D                     	;# 
  2603  1F3E                     	;# 
  2604  1F3F                     	;# 
  2605  1F43                     	;# 
  2606  1F44                     	;# 
  2607  1F45                     	;# 
  2608  1F46                     	;# 
  2609  1F47                     	;# 
  2610  1F48                     	;# 
  2611  1F49                     	;# 
  2612  1F4A                     	;# 
  2613  1F4E                     	;# 
  2614  1F4F                     	;# 
  2615  1F50                     	;# 
  2616  1F51                     	;# 
  2617  1F52                     	;# 
  2618  1F53                     	;# 
  2619  1F54                     	;# 
  2620  1F55                     	;# 
  2621  1F65                     	;# 
  2622  1F68                     	;# 
  2623  1F69                     	;# 
  2624  1F6A                     	;# 
  2625  1F6B                     	;# 
  2626  1FE4                     	;# 
  2627  1FE5                     	;# 
  2628  1FE6                     	;# 
  2629  1FE7                     	;# 
  2630  1FE8                     	;# 
  2631  1FE8                     	;# 
  2632  1FE9                     	;# 
  2633  1FEA                     	;# 
  2634  1FEB                     	;# 
  2635  1FED                     	;# 
  2636  1FEE                     	;# 
  2637  1FEF                     	;# 
  2638  0000                     	;# 
  2639  0001                     	;# 
  2640  0002                     	;# 
  2641  0003                     	;# 
  2642  0004                     	;# 
  2643  0005                     	;# 
  2644  0006                     	;# 
  2645  0007                     	;# 
  2646  0008                     	;# 
  2647  0009                     	;# 
  2648  000A                     	;# 
  2649  000B                     	;# 
  2650  000C                     	;# 
  2651  000D                     	;# 
  2652  000E                     	;# 
  2653  0010                     	;# 
  2654  0012                     	;# 
  2655  0013                     	;# 
  2656  0014                     	;# 
  2657  0016                     	;# 
  2658  0018                     	;# 
  2659  0019                     	;# 
  2660  001A                     	;# 
  2661  009B                     	;# 
  2662  009B                     	;# 
  2663  009C                     	;# 
  2664  009D                     	;# 
  2665  009E                     	;# 
  2666  009F                     	;# 
  2667  0119                     	;# 
  2668  0119                     	;# 
  2669  0119                     	;# 
  2670  011A                     	;# 
  2671  011A                     	;# 
  2672  011A                     	;# 
  2673  011B                     	;# 
  2674  011B                     	;# 
  2675  011B                     	;# 
  2676  011B                     	;# 
  2677  011B                     	;# 
  2678  011C                     	;# 
  2679  011C                     	;# 
  2680  011C                     	;# 
  2681  011D                     	;# 
  2682  011D                     	;# 
  2683  011D                     	;# 
  2684  011E                     	;# 
  2685  011E                     	;# 
  2686  011E                     	;# 
  2687  011F                     	;# 
  2688  011F                     	;# 
  2689  011F                     	;# 
  2690  011F                     	;# 
  2691  011F                     	;# 
  2692  018C                     	;# 
  2693  018D                     	;# 
  2694  018E                     	;# 
  2695  018F                     	;# 
  2696  0190                     	;# 
  2697  0191                     	;# 
  2698  0192                     	;# 
  2699  0196                     	;# 
  2700  0197                     	;# 
  2701  0198                     	;# 
  2702  0199                     	;# 
  2703  019A                     	;# 
  2704  019B                     	;# 
  2705  019C                     	;# 
  2706  020C                     	;# 
  2707  020C                     	;# 
  2708  020D                     	;# 
  2709  020E                     	;# 
  2710  020F                     	;# 
  2711  020F                     	;# 
  2712  0210                     	;# 
  2713  0210                     	;# 
  2714  0211                     	;# 
  2715  0211                     	;# 
  2716  028C                     	;# 
  2717  028C                     	;# 
  2718  028D                     	;# 
  2719  028D                     	;# 
  2720  028E                     	;# 
  2721  028F                     	;# 
  2722  0290                     	;# 
  2723  0291                     	;# 
  2724  030C                     	;# 
  2725  030C                     	;# 
  2726  030D                     	;# 
  2727  030E                     	;# 
  2728  030F                     	;# 
  2729  0310                     	;# 
  2730  0310                     	;# 
  2731  0311                     	;# 
  2732  0312                     	;# 
  2733  0313                     	;# 
  2734  0314                     	;# 
  2735  0314                     	;# 
  2736  0315                     	;# 
  2737  0316                     	;# 
  2738  0318                     	;# 
  2739  0318                     	;# 
  2740  0319                     	;# 
  2741  031A                     	;# 
  2742  031C                     	;# 
  2743  031C                     	;# 
  2744  031D                     	;# 
  2745  031E                     	;# 
  2746  038C                     	;# 
  2747  038C                     	;# 
  2748  038D                     	;# 
  2749  038E                     	;# 
  2750  058C                     	;# 
  2751  058C                     	;# 
  2752  058D                     	;# 
  2753  058E                     	;# 
  2754  058F                     	;# 
  2755  058F                     	;# 
  2756  0590                     	;# 
  2757  0591                     	;# 
  2758  0592                     	;# 
  2759  0593                     	;# 
  2760  059C                     	;# 
  2761  059C                     	;# 
  2762  059D                     	;# 
  2763  059D                     	;# 
  2764  059E                     	;# 
  2765  059F                     	;# 
  2766  060C                     	;# 
  2767  060D                     	;# 
  2768  060E                     	;# 
  2769  060F                     	;# 
  2770  0610                     	;# 
  2771  0611                     	;# 
  2772  0612                     	;# 
  2773  0613                     	;# 
  2774  0614                     	;# 
  2775  070C                     	;# 
  2776  070D                     	;# 
  2777  070E                     	;# 
  2778  070F                     	;# 
  2779  0710                     	;# 
  2780  0711                     	;# 
  2781  0712                     	;# 
  2782  0713                     	;# 
  2783  0716                     	;# 
  2784  0717                     	;# 
  2785  0718                     	;# 
  2786  0719                     	;# 
  2787  071A                     	;# 
  2788  071B                     	;# 
  2789  071C                     	;# 
  2790  071D                     	;# 
  2791  0796                     	;# 
  2792  0797                     	;# 
  2793  0798                     	;# 
  2794  0799                     	;# 
  2795  079A                     	;# 
  2796  079B                     	;# 
  2797  080C                     	;# 
  2798  080D                     	;# 
  2799  080E                     	;# 
  2800  080F                     	;# 
  2801  0810                     	;# 
  2802  0811                     	;# 
  2803  0812                     	;# 
  2804  0813                     	;# 
  2805  0814                     	;# 
  2806  081A                     	;# 
  2807  081A                     	;# 
  2808  081B                     	;# 
  2809  081C                     	;# 
  2810  081C                     	;# 
  2811  081D                     	;# 
  2812  081E                     	;# 
  2813  081F                     	;# 
  2814  088C                     	;# 
  2815  088D                     	;# 
  2816  088E                     	;# 
  2817  088F                     	;# 
  2818  0890                     	;# 
  2819  0891                     	;# 
  2820  0892                     	;# 
  2821  0893                     	;# 
  2822  0895                     	;# 
  2823  0896                     	;# 
  2824  090C                     	;# 
  2825  090E                     	;# 
  2826  090F                     	;# 
  2827  091F                     	;# 
  2828  098F                     	;# 
  2829  098F                     	;# 
  2830  0990                     	;# 
  2831  0991                     	;# 
  2832  0992                     	;# 
  2833  0993                     	;# 
  2834  0994                     	;# 
  2835  0995                     	;# 
  2836  0996                     	;# 
  2837  0997                     	;# 
  2838  0A19                     	;# 
  2839  0A19                     	;# 
  2840  0A1A                     	;# 
  2841  0A1A                     	;# 
  2842  0A1B                     	;# 
  2843  0A1B                     	;# 
  2844  0A1B                     	;# 
  2845  0A1C                     	;# 
  2846  0A1C                     	;# 
  2847  0A1D                     	;# 
  2848  0A1D                     	;# 
  2849  0A1E                     	;# 
  2850  0A1E                     	;# 
  2851  0A1F                     	;# 
  2852  0A1F                     	;# 
  2853  0A1F                     	;# 
  2854  1E0F                     	;# 
  2855  1E10                     	;# 
  2856  1E11                     	;# 
  2857  1E12                     	;# 
  2858  1E13                     	;# 
  2859  1E14                     	;# 
  2860  1E15                     	;# 
  2861  1E16                     	;# 
  2862  1E17                     	;# 
  2863  1E18                     	;# 
  2864  1E19                     	;# 
  2865  1E1A                     	;# 
  2866  1E1B                     	;# 
  2867  1E1C                     	;# 
  2868  1E1D                     	;# 
  2869  1E1E                     	;# 
  2870  1E1F                     	;# 
  2871  1E20                     	;# 
  2872  1E21                     	;# 
  2873  1E22                     	;# 
  2874  1E23                     	;# 
  2875  1E24                     	;# 
  2876  1E25                     	;# 
  2877  1E26                     	;# 
  2878  1E27                     	;# 
  2879  1E28                     	;# 
  2880  1E29                     	;# 
  2881  1E2A                     	;# 
  2882  1E2B                     	;# 
  2883  1E2C                     	;# 
  2884  1E2D                     	;# 
  2885  1E2E                     	;# 
  2886  1E2F                     	;# 
  2887  1E30                     	;# 
  2888  1E31                     	;# 
  2889  1E32                     	;# 
  2890  1E33                     	;# 
  2891  1E34                     	;# 
  2892  1E35                     	;# 
  2893  1E36                     	;# 
  2894  1E37                     	;# 
  2895  1E8F                     	;# 
  2896  1E90                     	;# 
  2897  1E91                     	;# 
  2898  1E92                     	;# 
  2899  1E93                     	;# 
  2900  1E9C                     	;# 
  2901  1EA1                     	;# 
  2902  1EA2                     	;# 
  2903  1EB1                     	;# 
  2904  1EBB                     	;# 
  2905  1EBC                     	;# 
  2906  1EBD                     	;# 
  2907  1EBE                     	;# 
  2908  1EC3                     	;# 
  2909  1EC5                     	;# 
  2910  1EC6                     	;# 
  2911  1EC7                     	;# 
  2912  1EC8                     	;# 
  2913  1EC9                     	;# 
  2914  1ECA                     	;# 
  2915  1ECB                     	;# 
  2916  1ECC                     	;# 
  2917  1ECD                     	;# 
  2918  1ECE                     	;# 
  2919  1F10                     	;# 
  2920  1F11                     	;# 
  2921  1F12                     	;# 
  2922  1F13                     	;# 
  2923  1F14                     	;# 
  2924  1F15                     	;# 
  2925  1F16                     	;# 
  2926  1F17                     	;# 
  2927  1F18                     	;# 
  2928  1F19                     	;# 
  2929  1F1A                     	;# 
  2930  1F1B                     	;# 
  2931  1F1C                     	;# 
  2932  1F1D                     	;# 
  2933  1F1E                     	;# 
  2934  1F1F                     	;# 
  2935  1F20                     	;# 
  2936  1F21                     	;# 
  2937  1F22                     	;# 
  2938  1F23                     	;# 
  2939  1F24                     	;# 
  2940  1F25                     	;# 
  2941  1F26                     	;# 
  2942  1F27                     	;# 
  2943  1F38                     	;# 
  2944  1F39                     	;# 
  2945  1F3A                     	;# 
  2946  1F3B                     	;# 
  2947  1F3C                     	;# 
  2948  1F3D                     	;# 
  2949  1F3E                     	;# 
  2950  1F3F                     	;# 
  2951  1F43                     	;# 
  2952  1F44                     	;# 
  2953  1F45                     	;# 
  2954  1F46                     	;# 
  2955  1F47                     	;# 
  2956  1F48                     	;# 
  2957  1F49                     	;# 
  2958  1F4A                     	;# 
  2959  1F4E                     	;# 
  2960  1F4F                     	;# 
  2961  1F50                     	;# 
  2962  1F51                     	;# 
  2963  1F52                     	;# 
  2964  1F53                     	;# 
  2965  1F54                     	;# 
  2966  1F55                     	;# 
  2967  1F65                     	;# 
  2968  1F68                     	;# 
  2969  1F69                     	;# 
  2970  1F6A                     	;# 
  2971  1F6B                     	;# 
  2972  1FE4                     	;# 
  2973  1FE5                     	;# 
  2974  1FE6                     	;# 
  2975  1FE7                     	;# 
  2976  1FE8                     	;# 
  2977  1FE8                     	;# 
  2978  1FE9                     	;# 
  2979  1FEA                     	;# 
  2980  1FEB                     	;# 
  2981  1FED                     	;# 
  2982  1FEE                     	;# 
  2983  1FEF                     	;# 
  2984  0000                     	;# 
  2985  0001                     	;# 
  2986  0002                     	;# 
  2987  0003                     	;# 
  2988  0004                     	;# 
  2989  0005                     	;# 
  2990  0006                     	;# 
  2991  0007                     	;# 
  2992  0008                     	;# 
  2993  0009                     	;# 
  2994  000A                     	;# 
  2995  000B                     	;# 
  2996  000C                     	;# 
  2997  000D                     	;# 
  2998  000E                     	;# 
  2999  0010                     	;# 
  3000  0012                     	;# 
  3001  0013                     	;# 
  3002  0014                     	;# 
  3003  0016                     	;# 
  3004  0018                     	;# 
  3005  0019                     	;# 
  3006  001A                     	;# 
  3007  009B                     	;# 
  3008  009B                     	;# 
  3009  009C                     	;# 
  3010  009D                     	;# 
  3011  009E                     	;# 
  3012  009F                     	;# 
  3013  0119                     	;# 
  3014  0119                     	;# 
  3015  0119                     	;# 
  3016  011A                     	;# 
  3017  011A                     	;# 
  3018  011A                     	;# 
  3019  011B                     	;# 
  3020  011B                     	;# 
  3021  011B                     	;# 
  3022  011B                     	;# 
  3023  011B                     	;# 
  3024  011C                     	;# 
  3025  011C                     	;# 
  3026  011C                     	;# 
  3027  011D                     	;# 
  3028  011D                     	;# 
  3029  011D                     	;# 
  3030  011E                     	;# 
  3031  011E                     	;# 
  3032  011E                     	;# 
  3033  011F                     	;# 
  3034  011F                     	;# 
  3035  011F                     	;# 
  3036  011F                     	;# 
  3037  011F                     	;# 
  3038  018C                     	;# 
  3039  018D                     	;# 
  3040  018E                     	;# 
  3041  018F                     	;# 
  3042  0190                     	;# 
  3043  0191                     	;# 
  3044  0192                     	;# 
  3045  0196                     	;# 
  3046  0197                     	;# 
  3047  0198                     	;# 
  3048  0199                     	;# 
  3049  019A                     	;# 
  3050  019B                     	;# 
  3051  019C                     	;# 
  3052  020C                     	;# 
  3053  020C                     	;# 
  3054  020D                     	;# 
  3055  020E                     	;# 
  3056  020F                     	;# 
  3057  020F                     	;# 
  3058  0210                     	;# 
  3059  0210                     	;# 
  3060  0211                     	;# 
  3061  0211                     	;# 
  3062  028C                     	;# 
  3063  028C                     	;# 
  3064  028D                     	;# 
  3065  028D                     	;# 
  3066  028E                     	;# 
  3067  028F                     	;# 
  3068  0290                     	;# 
  3069  0291                     	;# 
  3070  030C                     	;# 
  3071  030C                     	;# 
  3072  030D                     	;# 
  3073  030E                     	;# 
  3074  030F                     	;# 
  3075  0310                     	;# 
  3076  0310                     	;# 
  3077  0311                     	;# 
  3078  0312                     	;# 
  3079  0313                     	;# 
  3080  0314                     	;# 
  3081  0314                     	;# 
  3082  0315                     	;# 
  3083  0316                     	;# 
  3084  0318                     	;# 
  3085  0318                     	;# 
  3086  0319                     	;# 
  3087  031A                     	;# 
  3088  031C                     	;# 
  3089  031C                     	;# 
  3090  031D                     	;# 
  3091  031E                     	;# 
  3092  038C                     	;# 
  3093  038C                     	;# 
  3094  038D                     	;# 
  3095  038E                     	;# 
  3096  058C                     	;# 
  3097  058C                     	;# 
  3098  058D                     	;# 
  3099  058E                     	;# 
  3100  058F                     	;# 
  3101  058F                     	;# 
  3102  0590                     	;# 
  3103  0591                     	;# 
  3104  0592                     	;# 
  3105  0593                     	;# 
  3106  059C                     	;# 
  3107  059C                     	;# 
  3108  059D                     	;# 
  3109  059D                     	;# 
  3110  059E                     	;# 
  3111  059F                     	;# 
  3112  060C                     	;# 
  3113  060D                     	;# 
  3114  060E                     	;# 
  3115  060F                     	;# 
  3116  0610                     	;# 
  3117  0611                     	;# 
  3118  0612                     	;# 
  3119  0613                     	;# 
  3120  0614                     	;# 
  3121  070C                     	;# 
  3122  070D                     	;# 
  3123  070E                     	;# 
  3124  070F                     	;# 
  3125  0710                     	;# 
  3126  0711                     	;# 
  3127  0712                     	;# 
  3128  0713                     	;# 
  3129  0716                     	;# 
  3130  0717                     	;# 
  3131  0718                     	;# 
  3132  0719                     	;# 
  3133  071A                     	;# 
  3134  071B                     	;# 
  3135  071C                     	;# 
  3136  071D                     	;# 
  3137  0796                     	;# 
  3138  0797                     	;# 
  3139  0798                     	;# 
  3140  0799                     	;# 
  3141  079A                     	;# 
  3142  079B                     	;# 
  3143  080C                     	;# 
  3144  080D                     	;# 
  3145  080E                     	;# 
  3146  080F                     	;# 
  3147  0810                     	;# 
  3148  0811                     	;# 
  3149  0812                     	;# 
  3150  0813                     	;# 
  3151  0814                     	;# 
  3152  081A                     	;# 
  3153  081A                     	;# 
  3154  081B                     	;# 
  3155  081C                     	;# 
  3156  081C                     	;# 
  3157  081D                     	;# 
  3158  081E                     	;# 
  3159  081F                     	;# 
  3160  088C                     	;# 
  3161  088D                     	;# 
  3162  088E                     	;# 
  3163  088F                     	;# 
  3164  0890                     	;# 
  3165  0891                     	;# 
  3166  0892                     	;# 
  3167  0893                     	;# 
  3168  0895                     	;# 
  3169  0896                     	;# 
  3170  090C                     	;# 
  3171  090E                     	;# 
  3172  090F                     	;# 
  3173  091F                     	;# 
  3174  098F                     	;# 
  3175  098F                     	;# 
  3176  0990                     	;# 
  3177  0991                     	;# 
  3178  0992                     	;# 
  3179  0993                     	;# 
  3180  0994                     	;# 
  3181  0995                     	;# 
  3182  0996                     	;# 
  3183  0997                     	;# 
  3184  0A19                     	;# 
  3185  0A19                     	;# 
  3186  0A1A                     	;# 
  3187  0A1A                     	;# 
  3188  0A1B                     	;# 
  3189  0A1B                     	;# 
  3190  0A1B                     	;# 
  3191  0A1C                     	;# 
  3192  0A1C                     	;# 
  3193  0A1D                     	;# 
  3194  0A1D                     	;# 
  3195  0A1E                     	;# 
  3196  0A1E                     	;# 
  3197  0A1F                     	;# 
  3198  0A1F                     	;# 
  3199  0A1F                     	;# 
  3200  1E0F                     	;# 
  3201  1E10                     	;# 
  3202  1E11                     	;# 
  3203  1E12                     	;# 
  3204  1E13                     	;# 
  3205  1E14                     	;# 
  3206  1E15                     	;# 
  3207  1E16                     	;# 
  3208  1E17                     	;# 
  3209  1E18                     	;# 
  3210  1E19                     	;# 
  3211  1E1A                     	;# 
  3212  1E1B                     	;# 
  3213  1E1C                     	;# 
  3214  1E1D                     	;# 
  3215  1E1E                     	;# 
  3216  1E1F                     	;# 
  3217  1E20                     	;# 
  3218  1E21                     	;# 
  3219  1E22                     	;# 
  3220  1E23                     	;# 
  3221  1E24                     	;# 
  3222  1E25                     	;# 
  3223  1E26                     	;# 
  3224  1E27                     	;# 
  3225  1E28                     	;# 
  3226  1E29                     	;# 
  3227  1E2A                     	;# 
  3228  1E2B                     	;# 
  3229  1E2C                     	;# 
  3230  1E2D                     	;# 
  3231  1E2E                     	;# 
  3232  1E2F                     	;# 
  3233  1E30                     	;# 
  3234  1E31                     	;# 
  3235  1E32                     	;# 
  3236  1E33                     	;# 
  3237  1E34                     	;# 
  3238  1E35                     	;# 
  3239  1E36                     	;# 
  3240  1E37                     	;# 
  3241  1E8F                     	;# 
  3242  1E90                     	;# 
  3243  1E91                     	;# 
  3244  1E92                     	;# 
  3245  1E93                     	;# 
  3246  1E9C                     	;# 
  3247  1EA1                     	;# 
  3248  1EA2                     	;# 
  3249  1EB1                     	;# 
  3250  1EBB                     	;# 
  3251  1EBC                     	;# 
  3252  1EBD                     	;# 
  3253  1EBE                     	;# 
  3254  1EC3                     	;# 
  3255  1EC5                     	;# 
  3256  1EC6                     	;# 
  3257  1EC7                     	;# 
  3258  1EC8                     	;# 
  3259  1EC9                     	;# 
  3260  1ECA                     	;# 
  3261  1ECB                     	;# 
  3262  1ECC                     	;# 
  3263  1ECD                     	;# 
  3264  1ECE                     	;# 
  3265  1F10                     	;# 
  3266  1F11                     	;# 
  3267  1F12                     	;# 
  3268  1F13                     	;# 
  3269  1F14                     	;# 
  3270  1F15                     	;# 
  3271  1F16                     	;# 
  3272  1F17                     	;# 
  3273  1F18                     	;# 
  3274  1F19                     	;# 
  3275  1F1A                     	;# 
  3276  1F1B                     	;# 
  3277  1F1C                     	;# 
  3278  1F1D                     	;# 
  3279  1F1E                     	;# 
  3280  1F1F                     	;# 
  3281  1F20                     	;# 
  3282  1F21                     	;# 
  3283  1F22                     	;# 
  3284  1F23                     	;# 
  3285  1F24                     	;# 
  3286  1F25                     	;# 
  3287  1F26                     	;# 
  3288  1F27                     	;# 
  3289  1F38                     	;# 
  3290  1F39                     	;# 
  3291  1F3A                     	;# 
  3292  1F3B                     	;# 
  3293  1F3C                     	;# 
  3294  1F3D                     	;# 
  3295  1F3E                     	;# 
  3296  1F3F                     	;# 
  3297  1F43                     	;# 
  3298  1F44                     	;# 
  3299  1F45                     	;# 
  3300  1F46                     	;# 
  3301  1F47                     	;# 
  3302  1F48                     	;# 
  3303  1F49                     	;# 
  3304  1F4A                     	;# 
  3305  1F4E                     	;# 
  3306  1F4F                     	;# 
  3307  1F50                     	;# 
  3308  1F51                     	;# 
  3309  1F52                     	;# 
  3310  1F53                     	;# 
  3311  1F54                     	;# 
  3312  1F55                     	;# 
  3313  1F65                     	;# 
  3314  1F68                     	;# 
  3315  1F69                     	;# 
  3316  1F6A                     	;# 
  3317  1F6B                     	;# 
  3318  1FE4                     	;# 
  3319  1FE5                     	;# 
  3320  1FE6                     	;# 
  3321  1FE7                     	;# 
  3322  1FE8                     	;# 
  3323  1FE8                     	;# 
  3324  1FE9                     	;# 
  3325  1FEA                     	;# 
  3326  1FEB                     	;# 
  3327  1FED                     	;# 
  3328  1FEE                     	;# 
  3329  1FEF                     	;# 
  3330  0000                     	;# 
  3331  0001                     	;# 
  3332  0002                     	;# 
  3333  0003                     	;# 
  3334  0004                     	;# 
  3335  0005                     	;# 
  3336  0006                     	;# 
  3337  0007                     	;# 
  3338  0008                     	;# 
  3339  0009                     	;# 
  3340  000A                     	;# 
  3341  000B                     	;# 
  3342  000C                     	;# 
  3343  000D                     	;# 
  3344  000E                     	;# 
  3345  0010                     	;# 
  3346  0012                     	;# 
  3347  0013                     	;# 
  3348  0014                     	;# 
  3349  0016                     	;# 
  3350  0018                     	;# 
  3351  0019                     	;# 
  3352  001A                     	;# 
  3353  009B                     	;# 
  3354  009B                     	;# 
  3355  009C                     	;# 
  3356  009D                     	;# 
  3357  009E                     	;# 
  3358  009F                     	;# 
  3359  0119                     	;# 
  3360  0119                     	;# 
  3361  0119                     	;# 
  3362  011A                     	;# 
  3363  011A                     	;# 
  3364  011A                     	;# 
  3365  011B                     	;# 
  3366  011B                     	;# 
  3367  011B                     	;# 
  3368  011B                     	;# 
  3369  011B                     	;# 
  3370  011C                     	;# 
  3371  011C                     	;# 
  3372  011C                     	;# 
  3373  011D                     	;# 
  3374  011D                     	;# 
  3375  011D                     	;# 
  3376  011E                     	;# 
  3377  011E                     	;# 
  3378  011E                     	;# 
  3379  011F                     	;# 
  3380  011F                     	;# 
  3381  011F                     	;# 
  3382  011F                     	;# 
  3383  011F                     	;# 
  3384  018C                     	;# 
  3385  018D                     	;# 
  3386  018E                     	;# 
  3387  018F                     	;# 
  3388  0190                     	;# 
  3389  0191                     	;# 
  3390  0192                     	;# 
  3391  0196                     	;# 
  3392  0197                     	;# 
  3393  0198                     	;# 
  3394  0199                     	;# 
  3395  019A                     	;# 
  3396  019B                     	;# 
  3397  019C                     	;# 
  3398  020C                     	;# 
  3399  020C                     	;# 
  3400  020D                     	;# 
  3401  020E                     	;# 
  3402  020F                     	;# 
  3403  020F                     	;# 
  3404  0210                     	;# 
  3405  0210                     	;# 
  3406  0211                     	;# 
  3407  0211                     	;# 
  3408  028C                     	;# 
  3409  028C                     	;# 
  3410  028D                     	;# 
  3411  028D                     	;# 
  3412  028E                     	;# 
  3413  028F                     	;# 
  3414  0290                     	;# 
  3415  0291                     	;# 
  3416  030C                     	;# 
  3417  030C                     	;# 
  3418  030D                     	;# 
  3419  030E                     	;# 
  3420  030F                     	;# 
  3421  0310                     	;# 
  3422  0310                     	;# 
  3423  0311                     	;# 
  3424  0312                     	;# 
  3425  0313                     	;# 
  3426  0314                     	;# 
  3427  0314                     	;# 
  3428  0315                     	;# 
  3429  0316                     	;# 
  3430  0318                     	;# 
  3431  0318                     	;# 
  3432  0319                     	;# 
  3433  031A                     	;# 
  3434  031C                     	;# 
  3435  031C                     	;# 
  3436  031D                     	;# 
  3437  031E                     	;# 
  3438  038C                     	;# 
  3439  038C                     	;# 
  3440  038D                     	;# 
  3441  038E                     	;# 
  3442  058C                     	;# 
  3443  058C                     	;# 
  3444  058D                     	;# 
  3445  058E                     	;# 
  3446  058F                     	;# 
  3447  058F                     	;# 
  3448  0590                     	;# 
  3449  0591                     	;# 
  3450  0592                     	;# 
  3451  0593                     	;# 
  3452  059C                     	;# 
  3453  059C                     	;# 
  3454  059D                     	;# 
  3455  059D                     	;# 
  3456  059E                     	;# 
  3457  059F                     	;# 
  3458  060C                     	;# 
  3459  060D                     	;# 
  3460  060E                     	;# 
  3461  060F                     	;# 
  3462  0610                     	;# 
  3463  0611                     	;# 
  3464  0612                     	;# 
  3465  0613                     	;# 
  3466  0614                     	;# 
  3467  070C                     	;# 
  3468  070D                     	;# 
  3469  070E                     	;# 
  3470  070F                     	;# 
  3471  0710                     	;# 
  3472  0711                     	;# 
  3473  0712                     	;# 
  3474  0713                     	;# 
  3475  0716                     	;# 
  3476  0717                     	;# 
  3477  0718                     	;# 
  3478  0719                     	;# 
  3479  071A                     	;# 
  3480  071B                     	;# 
  3481  071C                     	;# 
  3482  071D                     	;# 
  3483  0796                     	;# 
  3484  0797                     	;# 
  3485  0798                     	;# 
  3486  0799                     	;# 
  3487  079A                     	;# 
  3488  079B                     	;# 
  3489  080C                     	;# 
  3490  080D                     	;# 
  3491  080E                     	;# 
  3492  080F                     	;# 
  3493  0810                     	;# 
  3494  0811                     	;# 
  3495  0812                     	;# 
  3496  0813                     	;# 
  3497  0814                     	;# 
  3498  081A                     	;# 
  3499  081A                     	;# 
  3500  081B                     	;# 
  3501  081C                     	;# 
  3502  081C                     	;# 
  3503  081D                     	;# 
  3504  081E                     	;# 
  3505  081F                     	;# 
  3506  088C                     	;# 
  3507  088D                     	;# 
  3508  088E                     	;# 
  3509  088F                     	;# 
  3510  0890                     	;# 
  3511  0891                     	;# 
  3512  0892                     	;# 
  3513  0893                     	;# 
  3514  0895                     	;# 
  3515  0896                     	;# 
  3516  090C                     	;# 
  3517  090E                     	;# 
  3518  090F                     	;# 
  3519  091F                     	;# 
  3520  098F                     	;# 
  3521  098F                     	;# 
  3522  0990                     	;# 
  3523  0991                     	;# 
  3524  0992                     	;# 
  3525  0993                     	;# 
  3526  0994                     	;# 
  3527  0995                     	;# 
  3528  0996                     	;# 
  3529  0997                     	;# 
  3530  0A19                     	;# 
  3531  0A19                     	;# 
  3532  0A1A                     	;# 
  3533  0A1A                     	;# 
  3534  0A1B                     	;# 
  3535  0A1B                     	;# 
  3536  0A1B                     	;# 
  3537  0A1C                     	;# 
  3538  0A1C                     	;# 
  3539  0A1D                     	;# 
  3540  0A1D                     	;# 
  3541  0A1E                     	;# 
  3542  0A1E                     	;# 
  3543  0A1F                     	;# 
  3544  0A1F                     	;# 
  3545  0A1F                     	;# 
  3546  1E0F                     	;# 
  3547  1E10                     	;# 
  3548  1E11                     	;# 
  3549  1E12                     	;# 
  3550  1E13                     	;# 
  3551  1E14                     	;# 
  3552  1E15                     	;# 
  3553  1E16                     	;# 
  3554  1E17                     	;# 
  3555  1E18                     	;# 
  3556  1E19                     	;# 
  3557  1E1A                     	;# 
  3558  1E1B                     	;# 
  3559  1E1C                     	;# 
  3560  1E1D                     	;# 
  3561  1E1E                     	;# 
  3562  1E1F                     	;# 
  3563  1E20                     	;# 
  3564  1E21                     	;# 
  3565  1E22                     	;# 
  3566  1E23                     	;# 
  3567  1E24                     	;# 
  3568  1E25                     	;# 
  3569  1E26                     	;# 
  3570  1E27                     	;# 
  3571  1E28                     	;# 
  3572  1E29                     	;# 
  3573  1E2A                     	;# 
  3574  1E2B                     	;# 
  3575  1E2C                     	;# 
  3576  1E2D                     	;# 
  3577  1E2E                     	;# 
  3578  1E2F                     	;# 
  3579  1E30                     	;# 
  3580  1E31                     	;# 
  3581  1E32                     	;# 
  3582  1E33                     	;# 
  3583  1E34                     	;# 
  3584  1E35                     	;# 
  3585  1E36                     	;# 
  3586  1E37                     	;# 
  3587  1E8F                     	;# 
  3588  1E90                     	;# 
  3589  1E91                     	;# 
  3590  1E92                     	;# 
  3591  1E93                     	;# 
  3592  1E9C                     	;# 
  3593  1EA1                     	;# 
  3594  1EA2                     	;# 
  3595  1EB1                     	;# 
  3596  1EBB                     	;# 
  3597  1EBC                     	;# 
  3598  1EBD                     	;# 
  3599  1EBE                     	;# 
  3600  1EC3                     	;# 
  3601  1EC5                     	;# 
  3602  1EC6                     	;# 
  3603  1EC7                     	;# 
  3604  1EC8                     	;# 
  3605  1EC9                     	;# 
  3606  1ECA                     	;# 
  3607  1ECB                     	;# 
  3608  1ECC                     	;# 
  3609  1ECD                     	;# 
  3610  1ECE                     	;# 
  3611  1F10                     	;# 
  3612  1F11                     	;# 
  3613  1F12                     	;# 
  3614  1F13                     	;# 
  3615  1F14                     	;# 
  3616  1F15                     	;# 
  3617  1F16                     	;# 
  3618  1F17                     	;# 
  3619  1F18                     	;# 
  3620  1F19                     	;# 
  3621  1F1A                     	;# 
  3622  1F1B                     	;# 
  3623  1F1C                     	;# 
  3624  1F1D                     	;# 
  3625  1F1E                     	;# 
  3626  1F1F                     	;# 
  3627  1F20                     	;# 
  3628  1F21                     	;# 
  3629  1F22                     	;# 
  3630  1F23                     	;# 
  3631  1F24                     	;# 
  3632  1F25                     	;# 
  3633  1F26                     	;# 
  3634  1F27                     	;# 
  3635  1F38                     	;# 
  3636  1F39                     	;# 
  3637  1F3A                     	;# 
  3638  1F3B                     	;# 
  3639  1F3C                     	;# 
  3640  1F3D                     	;# 
  3641  1F3E                     	;# 
  3642  1F3F                     	;# 
  3643  1F43                     	;# 
  3644  1F44                     	;# 
  3645  1F45                     	;# 
  3646  1F46                     	;# 
  3647  1F47                     	;# 
  3648  1F48                     	;# 
  3649  1F49                     	;# 
  3650  1F4A                     	;# 
  3651  1F4E                     	;# 
  3652  1F4F                     	;# 
  3653  1F50                     	;# 
  3654  1F51                     	;# 
  3655  1F52                     	;# 
  3656  1F53                     	;# 
  3657  1F54                     	;# 
  3658  1F55                     	;# 
  3659  1F65                     	;# 
  3660  1F68                     	;# 
  3661  1F69                     	;# 
  3662  1F6A                     	;# 
  3663  1F6B                     	;# 
  3664  1FE4                     	;# 
  3665  1FE5                     	;# 
  3666  1FE6                     	;# 
  3667  1FE7                     	;# 
  3668  1FE8                     	;# 
  3669  1FE8                     	;# 
  3670  1FE9                     	;# 
  3671  1FEA                     	;# 
  3672  1FEB                     	;# 
  3673  1FED                     	;# 
  3674  1FEE                     	;# 
  3675  1FEF                     	;# 
  3676  0000                     	;# 
  3677  0001                     	;# 
  3678  0002                     	;# 
  3679  0003                     	;# 
  3680  0004                     	;# 
  3681  0005                     	;# 
  3682  0006                     	;# 
  3683  0007                     	;# 
  3684  0008                     	;# 
  3685  0009                     	;# 
  3686  000A                     	;# 
  3687  000B                     	;# 
  3688  000C                     	;# 
  3689  000D                     	;# 
  3690  000E                     	;# 
  3691  0010                     	;# 
  3692  0012                     	;# 
  3693  0013                     	;# 
  3694  0014                     	;# 
  3695  0016                     	;# 
  3696  0018                     	;# 
  3697  0019                     	;# 
  3698  001A                     	;# 
  3699  009B                     	;# 
  3700  009B                     	;# 
  3701  009C                     	;# 
  3702  009D                     	;# 
  3703  009E                     	;# 
  3704  009F                     	;# 
  3705  0119                     	;# 
  3706  0119                     	;# 
  3707  0119                     	;# 
  3708  011A                     	;# 
  3709  011A                     	;# 
  3710  011A                     	;# 
  3711  011B                     	;# 
  3712  011B                     	;# 
  3713  011B                     	;# 
  3714  011B                     	;# 
  3715  011B                     	;# 
  3716  011C                     	;# 
  3717  011C                     	;# 
  3718  011C                     	;# 
  3719  011D                     	;# 
  3720  011D                     	;# 
  3721  011D                     	;# 
  3722  011E                     	;# 
  3723  011E                     	;# 
  3724  011E                     	;# 
  3725  011F                     	;# 
  3726  011F                     	;# 
  3727  011F                     	;# 
  3728  011F                     	;# 
  3729  011F                     	;# 
  3730  018C                     	;# 
  3731  018D                     	;# 
  3732  018E                     	;# 
  3733  018F                     	;# 
  3734  0190                     	;# 
  3735  0191                     	;# 
  3736  0192                     	;# 
  3737  0196                     	;# 
  3738  0197                     	;# 
  3739  0198                     	;# 
  3740  0199                     	;# 
  3741  019A                     	;# 
  3742  019B                     	;# 
  3743  019C                     	;# 
  3744  020C                     	;# 
  3745  020C                     	;# 
  3746  020D                     	;# 
  3747  020E                     	;# 
  3748  020F                     	;# 
  3749  020F                     	;# 
  3750  0210                     	;# 
  3751  0210                     	;# 
  3752  0211                     	;# 
  3753  0211                     	;# 
  3754  028C                     	;# 
  3755  028C                     	;# 
  3756  028D                     	;# 
  3757  028D                     	;# 
  3758  028E                     	;# 
  3759  028F                     	;# 
  3760  0290                     	;# 
  3761  0291                     	;# 
  3762  030C                     	;# 
  3763  030C                     	;# 
  3764  030D                     	;# 
  3765  030E                     	;# 
  3766  030F                     	;# 
  3767  0310                     	;# 
  3768  0310                     	;# 
  3769  0311                     	;# 
  3770  0312                     	;# 
  3771  0313                     	;# 
  3772  0314                     	;# 
  3773  0314                     	;# 
  3774  0315                     	;# 
  3775  0316                     	;# 
  3776  0318                     	;# 
  3777  0318                     	;# 
  3778  0319                     	;# 
  3779  031A                     	;# 
  3780  031C                     	;# 
  3781  031C                     	;# 
  3782  031D                     	;# 
  3783  031E                     	;# 
  3784  038C                     	;# 
  3785  038C                     	;# 
  3786  038D                     	;# 
  3787  038E                     	;# 
  3788  058C                     	;# 
  3789  058C                     	;# 
  3790  058D                     	;# 
  3791  058E                     	;# 
  3792  058F                     	;# 
  3793  058F                     	;# 
  3794  0590                     	;# 
  3795  0591                     	;# 
  3796  0592                     	;# 
  3797  0593                     	;# 
  3798  059C                     	;# 
  3799  059C                     	;# 
  3800  059D                     	;# 
  3801  059D                     	;# 
  3802  059E                     	;# 
  3803  059F                     	;# 
  3804  060C                     	;# 
  3805  060D                     	;# 
  3806  060E                     	;# 
  3807  060F                     	;# 
  3808  0610                     	;# 
  3809  0611                     	;# 
  3810  0612                     	;# 
  3811  0613                     	;# 
  3812  0614                     	;# 
  3813  070C                     	;# 
  3814  070D                     	;# 
  3815  070E                     	;# 
  3816  070F                     	;# 
  3817  0710                     	;# 
  3818  0711                     	;# 
  3819  0712                     	;# 
  3820  0713                     	;# 
  3821  0716                     	;# 
  3822  0717                     	;# 
  3823  0718                     	;# 
  3824  0719                     	;# 
  3825  071A                     	;# 
  3826  071B                     	;# 
  3827  071C                     	;# 
  3828  071D                     	;# 
  3829  0796                     	;# 
  3830  0797                     	;# 
  3831  0798                     	;# 
  3832  0799                     	;# 
  3833  079A                     	;# 
  3834  079B                     	;# 
  3835  080C                     	;# 
  3836  080D                     	;# 
  3837  080E                     	;# 
  3838  080F                     	;# 
  3839  0810                     	;# 
  3840  0811                     	;# 
  3841  0812                     	;# 
  3842  0813                     	;# 
  3843  0814                     	;# 
  3844  081A                     	;# 
  3845  081A                     	;# 
  3846  081B                     	;# 
  3847  081C                     	;# 
  3848  081C                     	;# 
  3849  081D                     	;# 
  3850  081E                     	;# 
  3851  081F                     	;# 
  3852  088C                     	;# 
  3853  088D                     	;# 
  3854  088E                     	;# 
  3855  088F                     	;# 
  3856  0890                     	;# 
  3857  0891                     	;# 
  3858  0892                     	;# 
  3859  0893                     	;# 
  3860  0895                     	;# 
  3861  0896                     	;# 
  3862  090C                     	;# 
  3863  090E                     	;# 
  3864  090F                     	;# 
  3865  091F                     	;# 
  3866  098F                     	;# 
  3867  098F                     	;# 
  3868  0990                     	;# 
  3869  0991                     	;# 
  3870  0992                     	;# 
  3871  0993                     	;# 
  3872  0994                     	;# 
  3873  0995                     	;# 
  3874  0996                     	;# 
  3875  0997                     	;# 
  3876  0A19                     	;# 
  3877  0A19                     	;# 
  3878  0A1A                     	;# 
  3879  0A1A                     	;# 
  3880  0A1B                     	;# 
  3881  0A1B                     	;# 
  3882  0A1B                     	;# 
  3883  0A1C                     	;# 
  3884  0A1C                     	;# 
  3885  0A1D                     	;# 
  3886  0A1D                     	;# 
  3887  0A1E                     	;# 
  3888  0A1E                     	;# 
  3889  0A1F                     	;# 
  3890  0A1F                     	;# 
  3891  0A1F                     	;# 
  3892  1E0F                     	;# 
  3893  1E10                     	;# 
  3894  1E11                     	;# 
  3895  1E12                     	;# 
  3896  1E13                     	;# 
  3897  1E14                     	;# 
  3898  1E15                     	;# 
  3899  1E16                     	;# 
  3900  1E17                     	;# 
  3901  1E18                     	;# 
  3902  1E19                     	;# 
  3903  1E1A                     	;# 
  3904  1E1B                     	;# 
  3905  1E1C                     	;# 
  3906  1E1D                     	;# 
  3907  1E1E                     	;# 
  3908  1E1F                     	;# 
  3909  1E20                     	;# 
  3910  1E21                     	;# 
  3911  1E22                     	;# 
  3912  1E23                     	;# 
  3913  1E24                     	;# 
  3914  1E25                     	;# 
  3915  1E26                     	;# 
  3916  1E27                     	;# 
  3917  1E28                     	;# 
  3918  1E29                     	;# 
  3919  1E2A                     	;# 
  3920  1E2B                     	;# 
  3921  1E2C                     	;# 
  3922  1E2D                     	;# 
  3923  1E2E                     	;# 
  3924  1E2F                     	;# 
  3925  1E30                     	;# 
  3926  1E31                     	;# 
  3927  1E32                     	;# 
  3928  1E33                     	;# 
  3929  1E34                     	;# 
  3930  1E35                     	;# 
  3931  1E36                     	;# 
  3932  1E37                     	;# 
  3933  1E8F                     	;# 
  3934  1E90                     	;# 
  3935  1E91                     	;# 
  3936  1E92                     	;# 
  3937  1E93                     	;# 
  3938  1E9C                     	;# 
  3939  1EA1                     	;# 
  3940  1EA2                     	;# 
  3941  1EB1                     	;# 
  3942  1EBB                     	;# 
  3943  1EBC                     	;# 
  3944  1EBD                     	;# 
  3945  1EBE                     	;# 
  3946  1EC3                     	;# 
  3947  1EC5                     	;# 
  3948  1EC6                     	;# 
  3949  1EC7                     	;# 
  3950  1EC8                     	;# 
  3951  1EC9                     	;# 
  3952  1ECA                     	;# 
  3953  1ECB                     	;# 
  3954  1ECC                     	;# 
  3955  1ECD                     	;# 
  3956  1ECE                     	;# 
  3957  1F10                     	;# 
  3958  1F11                     	;# 
  3959  1F12                     	;# 
  3960  1F13                     	;# 
  3961  1F14                     	;# 
  3962  1F15                     	;# 
  3963  1F16                     	;# 
  3964  1F17                     	;# 
  3965  1F18                     	;# 
  3966  1F19                     	;# 
  3967  1F1A                     	;# 
  3968  1F1B                     	;# 
  3969  1F1C                     	;# 
  3970  1F1D                     	;# 
  3971  1F1E                     	;# 
  3972  1F1F                     	;# 
  3973  1F20                     	;# 
  3974  1F21                     	;# 
  3975  1F22                     	;# 
  3976  1F23                     	;# 
  3977  1F24                     	;# 
  3978  1F25                     	;# 
  3979  1F26                     	;# 
  3980  1F27                     	;# 
  3981  1F38                     	;# 
  3982  1F39                     	;# 
  3983  1F3A                     	;# 
  3984  1F3B                     	;# 
  3985  1F3C                     	;# 
  3986  1F3D                     	;# 
  3987  1F3E                     	;# 
  3988  1F3F                     	;# 
  3989  1F43                     	;# 
  3990  1F44                     	;# 
  3991  1F45                     	;# 
  3992  1F46                     	;# 
  3993  1F47                     	;# 
  3994  1F48                     	;# 
  3995  1F49                     	;# 
  3996  1F4A                     	;# 
  3997  1F4E                     	;# 
  3998  1F4F                     	;# 
  3999  1F50                     	;# 
  4000  1F51                     	;# 
  4001  1F52                     	;# 
  4002  1F53                     	;# 
  4003  1F54                     	;# 
  4004  1F55                     	;# 
  4005  1F65                     	;# 
  4006  1F68                     	;# 
  4007  1F69                     	;# 
  4008  1F6A                     	;# 
  4009  1F6B                     	;# 
  4010  1FE4                     	;# 
  4011  1FE5                     	;# 
  4012  1FE6                     	;# 
  4013  1FE7                     	;# 
  4014  1FE8                     	;# 
  4015  1FE8                     	;# 
  4016  1FE9                     	;# 
  4017  1FEA                     	;# 
  4018  1FEB                     	;# 
  4019  1FED                     	;# 
  4020  1FEE                     	;# 
  4021  1FEF                     	;# 
  4022  0000                     	;# 
  4023  0001                     	;# 
  4024  0002                     	;# 
  4025  0003                     	;# 
  4026  0004                     	;# 
  4027  0005                     	;# 
  4028  0006                     	;# 
  4029  0007                     	;# 
  4030  0008                     	;# 
  4031  0009                     	;# 
  4032  000A                     	;# 
  4033  000B                     	;# 
  4034  000C                     	;# 
  4035  000D                     	;# 
  4036  000E                     	;# 
  4037  0010                     	;# 
  4038  0012                     	;# 
  4039  0013                     	;# 
  4040  0014                     	;# 
  4041  0016                     	;# 
  4042  0018                     	;# 
  4043  0019                     	;# 
  4044  001A                     	;# 
  4045  009B                     	;# 
  4046  009B                     	;# 
  4047  009C                     	;# 
  4048  009D                     	;# 
  4049  009E                     	;# 
  4050  009F                     	;# 
  4051  0119                     	;# 
  4052  0119                     	;# 
  4053  0119                     	;# 
  4054  011A                     	;# 
  4055  011A                     	;# 
  4056  011A                     	;# 
  4057  011B                     	;# 
  4058  011B                     	;# 
  4059  011B                     	;# 
  4060  011B                     	;# 
  4061  011B                     	;# 
  4062  011C                     	;# 
  4063  011C                     	;# 
  4064  011C                     	;# 
  4065  011D                     	;# 
  4066  011D                     	;# 
  4067  011D                     	;# 
  4068  011E                     	;# 
  4069  011E                     	;# 
  4070  011E                     	;# 
  4071  011F                     	;# 
  4072  011F                     	;# 
  4073  011F                     	;# 
  4074  011F                     	;# 
  4075  011F                     	;# 
  4076  018C                     	;# 
  4077  018D                     	;# 
  4078  018E                     	;# 
  4079  018F                     	;# 
  4080  0190                     	;# 
  4081  0191                     	;# 
  4082  0192                     	;# 
  4083  0196                     	;# 
  4084  0197                     	;# 
  4085  0198                     	;# 
  4086  0199                     	;# 
  4087  019A                     	;# 
  4088  019B                     	;# 
  4089  019C                     	;# 
  4090  020C                     	;# 
  4091  020C                     	;# 
  4092  020D                     	;# 
  4093  020E                     	;# 
  4094  020F                     	;# 
  4095  020F                     	;# 
  4096  0210                     	;# 
  4097  0210                     	;# 
  4098  0211                     	;# 
  4099  0211                     	;# 
  4100  028C                     	;# 
  4101  028C                     	;# 
  4102  028D                     	;# 
  4103  028D                     	;# 
  4104  028E                     	;# 
  4105  028F                     	;# 
  4106  0290                     	;# 
  4107  0291                     	;# 
  4108  030C                     	;# 
  4109  030C                     	;# 
  4110  030D                     	;# 
  4111  030E                     	;# 
  4112  030F                     	;# 
  4113  0310                     	;# 
  4114  0310                     	;# 
  4115  0311                     	;# 
  4116  0312                     	;# 
  4117  0313                     	;# 
  4118  0314                     	;# 
  4119  0314                     	;# 
  4120  0315                     	;# 
  4121  0316                     	;# 
  4122  0318                     	;# 
  4123  0318                     	;# 
  4124  0319                     	;# 
  4125  031A                     	;# 
  4126  031C                     	;# 
  4127  031C                     	;# 
  4128  031D                     	;# 
  4129  031E                     	;# 
  4130  038C                     	;# 
  4131  038C                     	;# 
  4132  038D                     	;# 
  4133  038E                     	;# 
  4134  058C                     	;# 
  4135  058C                     	;# 
  4136  058D                     	;# 
  4137  058E                     	;# 
  4138  058F                     	;# 
  4139  058F                     	;# 
  4140  0590                     	;# 
  4141  0591                     	;# 
  4142  0592                     	;# 
  4143  0593                     	;# 
  4144  059C                     	;# 
  4145  059C                     	;# 
  4146  059D                     	;# 
  4147  059D                     	;# 
  4148  059E                     	;# 
  4149  059F                     	;# 
  4150  060C                     	;# 
  4151  060D                     	;# 
  4152  060E                     	;# 
  4153  060F                     	;# 
  4154  0610                     	;# 
  4155  0611                     	;# 
  4156  0612                     	;# 
  4157  0613                     	;# 
  4158  0614                     	;# 
  4159  070C                     	;# 
  4160  070D                     	;# 
  4161  070E                     	;# 
  4162  070F                     	;# 
  4163  0710                     	;# 
  4164  0711                     	;# 
  4165  0712                     	;# 
  4166  0713                     	;# 
  4167  0716                     	;# 
  4168  0717                     	;# 
  4169  0718                     	;# 
  4170  0719                     	;# 
  4171  071A                     	;# 
  4172  071B                     	;# 
  4173  071C                     	;# 
  4174  071D                     	;# 
  4175  0796                     	;# 
  4176  0797                     	;# 
  4177  0798                     	;# 
  4178  0799                     	;# 
  4179  079A                     	;# 
  4180  079B                     	;# 
  4181  080C                     	;# 
  4182  080D                     	;# 
  4183  080E                     	;# 
  4184  080F                     	;# 
  4185  0810                     	;# 
  4186  0811                     	;# 
  4187  0812                     	;# 
  4188  0813                     	;# 
  4189  0814                     	;# 
  4190  081A                     	;# 
  4191  081A                     	;# 
  4192  081B                     	;# 
  4193  081C                     	;# 
  4194  081C                     	;# 
  4195  081D                     	;# 
  4196  081E                     	;# 
  4197  081F                     	;# 
  4198  088C                     	;# 
  4199  088D                     	;# 
  4200  088E                     	;# 
  4201  088F                     	;# 
  4202  0890                     	;# 
  4203  0891                     	;# 
  4204  0892                     	;# 
  4205  0893                     	;# 
  4206  0895                     	;# 
  4207  0896                     	;# 
  4208  090C                     	;# 
  4209  090E                     	;# 
  4210  090F                     	;# 
  4211  091F                     	;# 
  4212  098F                     	;# 
  4213  098F                     	;# 
  4214  0990                     	;# 
  4215  0991                     	;# 
  4216  0992                     	;# 
  4217  0993                     	;# 
  4218  0994                     	;# 
  4219  0995                     	;# 
  4220  0996                     	;# 
  4221  0997                     	;# 
  4222  0A19                     	;# 
  4223  0A19                     	;# 
  4224  0A1A                     	;# 
  4225  0A1A                     	;# 
  4226  0A1B                     	;# 
  4227  0A1B                     	;# 
  4228  0A1B                     	;# 
  4229  0A1C                     	;# 
  4230  0A1C                     	;# 
  4231  0A1D                     	;# 
  4232  0A1D                     	;# 
  4233  0A1E                     	;# 
  4234  0A1E                     	;# 
  4235  0A1F                     	;# 
  4236  0A1F                     	;# 
  4237  0A1F                     	;# 
  4238  1E0F                     	;# 
  4239  1E10                     	;# 
  4240  1E11                     	;# 
  4241  1E12                     	;# 
  4242  1E13                     	;# 
  4243  1E14                     	;# 
  4244  1E15                     	;# 
  4245  1E16                     	;# 
  4246  1E17                     	;# 
  4247  1E18                     	;# 
  4248  1E19                     	;# 
  4249  1E1A                     	;# 
  4250  1E1B                     	;# 
  4251  1E1C                     	;# 
  4252  1E1D                     	;# 
  4253  1E1E                     	;# 
  4254  1E1F                     	;# 
  4255  1E20                     	;# 
  4256  1E21                     	;# 
  4257  1E22                     	;# 
  4258  1E23                     	;# 
  4259  1E24                     	;# 
  4260  1E25                     	;# 
  4261  1E26                     	;# 
  4262  1E27                     	;# 
  4263  1E28                     	;# 
  4264  1E29                     	;# 
  4265  1E2A                     	;# 
  4266  1E2B                     	;# 
  4267  1E2C                     	;# 
  4268  1E2D                     	;# 
  4269  1E2E                     	;# 
  4270  1E2F                     	;# 
  4271  1E30                     	;# 
  4272  1E31                     	;# 
  4273  1E32                     	;# 
  4274  1E33                     	;# 
  4275  1E34                     	;# 
  4276  1E35                     	;# 
  4277  1E36                     	;# 
  4278  1E37                     	;# 
  4279  1E8F                     	;# 
  4280  1E90                     	;# 
  4281  1E91                     	;# 
  4282  1E92                     	;# 
  4283  1E93                     	;# 
  4284  1E9C                     	;# 
  4285  1EA1                     	;# 
  4286  1EA2                     	;# 
  4287  1EB1                     	;# 
  4288  1EBB                     	;# 
  4289  1EBC                     	;# 
  4290  1EBD                     	;# 
  4291  1EBE                     	;# 
  4292  1EC3                     	;# 
  4293  1EC5                     	;# 
  4294  1EC6                     	;# 
  4295  1EC7                     	;# 
  4296  1EC8                     	;# 
  4297  1EC9                     	;# 
  4298  1ECA                     	;# 
  4299  1ECB                     	;# 
  4300  1ECC                     	;# 
  4301  1ECD                     	;# 
  4302  1ECE                     	;# 
  4303  1F10                     	;# 
  4304  1F11                     	;# 
  4305  1F12                     	;# 
  4306  1F13                     	;# 
  4307  1F14                     	;# 
  4308  1F15                     	;# 
  4309  1F16                     	;# 
  4310  1F17                     	;# 
  4311  1F18                     	;# 
  4312  1F19                     	;# 
  4313  1F1A                     	;# 
  4314  1F1B                     	;# 
  4315  1F1C                     	;# 
  4316  1F1D                     	;# 
  4317  1F1E                     	;# 
  4318  1F1F                     	;# 
  4319  1F20                     	;# 
  4320  1F21                     	;# 
  4321  1F22                     	;# 
  4322  1F23                     	;# 
  4323  1F24                     	;# 
  4324  1F25                     	;# 
  4325  1F26                     	;# 
  4326  1F27                     	;# 
  4327  1F38                     	;# 
  4328  1F39                     	;# 
  4329  1F3A                     	;# 
  4330  1F3B                     	;# 
  4331  1F3C                     	;# 
  4332  1F3D                     	;# 
  4333  1F3E                     	;# 
  4334  1F3F                     	;# 
  4335  1F43                     	;# 
  4336  1F44                     	;# 
  4337  1F45                     	;# 
  4338  1F46                     	;# 
  4339  1F47                     	;# 
  4340  1F48                     	;# 
  4341  1F49                     	;# 
  4342  1F4A                     	;# 
  4343  1F4E                     	;# 
  4344  1F4F                     	;# 
  4345  1F50                     	;# 
  4346  1F51                     	;# 
  4347  1F52                     	;# 
  4348  1F53                     	;# 
  4349  1F54                     	;# 
  4350  1F55                     	;# 
  4351  1F65                     	;# 
  4352  1F68                     	;# 
  4353  1F69                     	;# 
  4354  1F6A                     	;# 
  4355  1F6B                     	;# 
  4356  1FE4                     	;# 
  4357  1FE5                     	;# 
  4358  1FE6                     	;# 
  4359  1FE7                     	;# 
  4360  1FE8                     	;# 
  4361  1FE8                     	;# 
  4362  1FE9                     	;# 
  4363  1FEA                     	;# 
  4364  1FEB                     	;# 
  4365  1FED                     	;# 
  4366  1FEE                     	;# 
  4367  1FEF                     	;_data
  4368                           
  4369                           	psect	idataBANK1
  4370  07FA                     __pidataBANK1:	
  4371                           
  4372                           ;initializer for _g_screenRefresh
  4373  07FA  3401               	retlw	1
  4374                           
  4375                           	psect	idataBANK2
  4376  07FB                     __pidataBANK2:	
  4377                           
  4378                           ;initializer for statusView@prevSensorStat
  4379  07FB  3401               	retlw	1
  4380                           
  4381                           	psect	idataBANK4
  4382  0800                     __pidataBANK4:	
  4383                           
  4384                           ;initializer for checkSensor@sensorUpdateInterval
  4385  0800  3464               	retlw	100
  4386  0801  3400               	retlw	0
  4387  0802  3400               	retlw	0
  4388  0803  3400               	retlw	0
  4389                           
  4390                           ;initializer for OLED_print_xy@F7968
  4391  0804  3400               	retlw	0
  4392  0805  3440               	retlw	64
  4393  0806  3414               	retlw	20
  4394  0807  3454               	retlw	84
  4395                           
  4396                           ;initializer for OLED_setCursor@F7960
  4397  0808  3400               	retlw	0
  4398  0809  3440               	retlw	64
  4399  080A  3414               	retlw	20
  4400  080B  3454               	retlw	84
  4401                           
  4402                           	psect	idataBANK6
  4403  3277                     __pidataBANK6:	
  4404                           
  4405                           ;initializer for OLED_loadSpecialChars@F7971
  4406  3277  3418               	retlw	24
  4407  3278  3418               	retlw	24
  4408  3279  3403               	retlw	3
  4409  327A  3404               	retlw	4
  4410  327B  3404               	retlw	4
  4411  327C  3404               	retlw	4
  4412  327D  3403               	retlw	3
  4413  327E  3400               	retlw	0
  4414  327F  3400               	retlw	0
  4415  3280  3400               	retlw	0
  4416  3281  3400               	retlw	0
  4417  3282  3404               	retlw	4
  4418  3283  3400               	retlw	0
  4419  3284  3400               	retlw	0
  4420  3285  3400               	retlw	0
  4421  3286  3400               	retlw	0
  4422  3287  3401               	retlw	1
  4423  3288  3401               	retlw	1
  4424  3289  3405               	retlw	5
  4425  328A  3409               	retlw	9
  4426  328B  341F               	retlw	31
  4427  328C  3408               	retlw	8
  4428  328D  3404               	retlw	4
  4429  328E  3400               	retlw	0
  4430  328F  3400               	retlw	0
  4431  3290  3410               	retlw	16
  4432  3291  3418               	retlw	24
  4433  3292  341C               	retlw	28
  4434  3293  3418               	retlw	24
  4435  3294  3410               	retlw	16
  4436  3295  3400               	retlw	0
  4437  3296  3400               	retlw	0
  4438                           
  4439                           	psect	stringtext1
  4440  3000                     __pstringtext1:	
  4441  3000                     _nextStateTbl:	
  4442  3000  3400               	retlw	0
  4443  3001  34FF               	retlw	255
  4444  3002  3401               	retlw	1
  4445  3003  3405               	retlw	5
  4446  3004  3400               	retlw	0
  4447  3005  3400               	retlw	0
  4448  3006  3401               	retlw	1
  4449  3007  34FF               	retlw	255
  4450  3008  3400               	retlw	0
  4451  3009  3402               	retlw	2
  4452  300A  3401               	retlw	1
  4453  300B  3401               	retlw	1
  4454  300C  3402               	retlw	2
  4455  300D  3400               	retlw	0
  4456  300E  3403               	retlw	3
  4457  300F  3401               	retlw	1
  4458  3010  3401               	retlw	1
  4459  3011  3402               	retlw	2
  4460  3012  3402               	retlw	2
  4461  3013  3401               	retlw	1
  4462  3014  3404               	retlw	4
  4463  3015  3401               	retlw	1
  4464  3016  3401               	retlw	1
  4465  3017  3402               	retlw	2
  4466  3018  3402               	retlw	2
  4467  3019  3402               	retlw	2
  4468  301A  3402               	retlw	2
  4469  301B  3401               	retlw	1
  4470  301C  3401               	retlw	1
  4471  301D  3402               	retlw	2
  4472  301E  3403               	retlw	3
  4473  301F  3400               	retlw	0
  4474  3020  3402               	retlw	2
  4475  3021  3402               	retlw	2
  4476  3022  3402               	retlw	2
  4477  3023  3403               	retlw	3
  4478  3024  3403               	retlw	3
  4479  3025  3401               	retlw	1
  4480  3026  3402               	retlw	2
  4481  3027  3402               	retlw	2
  4482  3028  3402               	retlw	2
  4483  3029  3402               	retlw	2
  4484  302A  3404               	retlw	4
  4485  302B  3400               	retlw	0
  4486  302C  3402               	retlw	2
  4487  302D  3402               	retlw	2
  4488  302E  3402               	retlw	2
  4489  302F  3402               	retlw	2
  4490  3030  3404               	retlw	4
  4491  3031  3401               	retlw	1
  4492  3032  3402               	retlw	2
  4493  3033  3402               	retlw	2
  4494  3034  3402               	retlw	2
  4495  3035  3404               	retlw	4
  4496  3036  3405               	retlw	5
  4497  3037  3400               	retlw	0
  4498  3038  3406               	retlw	6
  4499  3039  3400               	retlw	0
  4500  303A  3400               	retlw	0
  4501  303B  3405               	retlw	5
  4502  303C  3405               	retlw	5
  4503  303D  3401               	retlw	1
  4504  303E  3407               	retlw	7
  4505  303F  3400               	retlw	0
  4506  3040  3400               	retlw	0
  4507  3041  3405               	retlw	5
  4508  3042  3405               	retlw	5
  4509  3043  3402               	retlw	2
  4510  3044  3408               	retlw	8
  4511  3045  3400               	retlw	0
  4512  3046  3400               	retlw	0
  4513  3047  3405               	retlw	5
  4514  3048  3406               	retlw	6
  4515  3049  3400               	retlw	0
  4516  304A  3406               	retlw	6
  4517  304B  3405               	retlw	5
  4518  304C  3405               	retlw	5
  4519  304D  3405               	retlw	5
  4520  304E  3406               	retlw	6
  4521  304F  3401               	retlw	1
  4522  3050  3405               	retlw	5
  4523  3051  3405               	retlw	5
  4524  3052  3405               	retlw	5
  4525  3053  3406               	retlw	6
  4526  3054  3407               	retlw	7
  4527  3055  3400               	retlw	0
  4528  3056  3407               	retlw	7
  4529  3057  3405               	retlw	5
  4530  3058  3405               	retlw	5
  4531  3059  3405               	retlw	5
  4532  305A  3407               	retlw	7
  4533  305B  3401               	retlw	1
  4534  305C  3405               	retlw	5
  4535  305D  3405               	retlw	5
  4536  305E  3405               	retlw	5
  4537  305F  3407               	retlw	7
  4538  3060  3408               	retlw	8
  4539  3061  3400               	retlw	0
  4540  3062  3408               	retlw	8
  4541  3063  3405               	retlw	5
  4542  3064  3405               	retlw	5
  4543  3065  3405               	retlw	5
  4544  3066  3408               	retlw	8
  4545  3067  3401               	retlw	1
  4546  3068  3405               	retlw	5
  4547  3069  3405               	retlw	5
  4548  306A  3405               	retlw	5
  4549  306B  3408               	retlw	8
  4550  306C                     __end_of_nextStateTbl:	
  4551                           
  4552                           	psect	stringtext2
  4553  3870                     __pstringtext2:	
  4554  3870                     _transition_table:	
  4555  3870  3400               	retlw	0
  4556  3871  3404               	retlw	4
  4557  3872  3401               	retlw	1
  4558  3873  3400               	retlw	0
  4559  3874  3482               	retlw	130
  4560  3875  3400               	retlw	0
  4561  3876  3401               	retlw	1
  4562  3877  3400               	retlw	0
  4563  3878  3402               	retlw	2
  4564  3879  3403               	retlw	3
  4565  387A  3401               	retlw	1
  4566  387B  3400               	retlw	0
  4567  387C  3402               	retlw	2
  4568  387D  3403               	retlw	3
  4569  387E  3400               	retlw	0
  4570  387F  3480               	retlw	128
  4571  3880  3445               	retlw	69
  4572  3881  3404               	retlw	4
  4573  3882  3400               	retlw	0
  4574  3883  3400               	retlw	0
  4575  3884  3405               	retlw	5
  4576  3885  3404               	retlw	4
  4577  3886  3406               	retlw	6
  4578  3887  3400               	retlw	0
  4579  3888  3405               	retlw	5
  4580  3889  3400               	retlw	0
  4581  388A  3406               	retlw	6
  4582  388B  3440               	retlw	64
  4583  388C                     __end_of_transition_table:	
  4584                           
  4585                           	psect	stringtext3
  4586  3800                     __pstringtext3:	
  4587  3800                     _stateFuncTbl:	
  4588  3800  3472               	retlw	low _statusView
  4589  3801  3410               	retlw	high _statusView
  4590  3802  341A               	retlw	low _channelView
  4591  3803  3409               	retlw	high _channelView
  4592  3804  3418               	retlw	low _channelSetup
  4593  3805  3419               	retlw	high _channelSetup
  4594  3806  347E               	retlw	low _setOutputPower
  4595  3807  3426               	retlw	high _setOutputPower
  4596  3808  34D1               	retlw	low _setLensDia
  4597  3809  342D               	retlw	high _setLensDia
  4598  380A  3487               	retlw	low _setup
  4599  380B  342E               	retlw	high _setup
  4600  380C  348F               	retlw	low _setDPOffset
  4601  380D  3429               	retlw	high _setDPOffset
  4602  380E  34A4               	retlw	low _setSkyTemp
  4603  380F  3428               	retlw	high _setSkyTemp
  4604  3810  3419               	retlw	low _setFudgeFactor
  4605  3811  3429               	retlw	high _setFudgeFactor
  4606  3812                     __end_of_stateFuncTbl:	
  4607  0018                     _LATAbits	set	24
  4608  000B                     _INTCONbits	set	11
  4609  000E                     _PORTCbits	set	14
  4610  0014                     _TRISCbits	set	20
  4611  000B                     _INTCON	set	11
  4612  0018                     _LATA	set	24
  4613  0014                     _TRISC	set	20
  4614  0013                     _TRISB	set	19
  4615  0012                     _TRISA	set	18
  4616  000C                     _PORTAbits	set	12
  4617  001A                     _LATCbits	set	26
  4618  0019                     _LATBbits	set	25
  4619  009B                     _ADRESL	set	155
  4620  009C                     _ADRESH	set	156
  4621  009E                     _ADCON1	set	158
  4622  009D                     _ADCON0bits	set	157
  4623  0119                     _RC1REG	set	281
  4624  011D                     _RC1STAbits	set	285
  4625  011A                     _TX1REG	set	282
  4626  011E                     _TX1STA	set	286
  4627  011D                     _RC1STA	set	285
  4628  011B                     _SPBRGL	set	283
  4629  011F                     _BAUD1CON	set	287
  4630  020C                     _TMR1	set	524
  4631  0211                     _T1CLK	set	529
  4632  020E                     _T1CON	set	526
  4633  059C                     _TMR0	set	1436
  4634  059F                     _T0CON1	set	1439
  4635  059E                     _T0CON0	set	1438
  4636  070F                     _PIR3bits	set	1807
  4637  0719                     _PIE3bits	set	1817
  4638  0710                     _PIR4bits	set	1808
  4639  071A                     _PIE4bits	set	1818
  4640  070C                     _PIR0bits	set	1804
  4641  0716                     _PIE0bits	set	1814
  4642  071A                     _PIE4	set	1818
  4643  0719                     _PIE3	set	1817
  4644  0716                     _PIE0	set	1814
  4645  081F                     _NVMCON2	set	2079
  4646  081C                     _NVMDATL	set	2076
  4647  081D                     _NVMDATH	set	2077
  4648  081E                     _NVMCON1bits	set	2078
  4649  081B                     _NVMADRH	set	2075
  4650  081A                     _NVMADRL	set	2074
  4651  088F                     _OSCCON3bits	set	2191
  4652  088D                     _OSCCON1	set	2189
  4653  0893                     _OSCFRQ	set	2195
  4654  1ECB                     _RX1DTPPSbits	set	7883
  4655  1F3F                     _IOCAFbits	set	7999
  4656  1F54                     _IOCCN	set	8020
  4657  1F3E                     _IOCAN	set	7998
  4658  1F3D                     _IOCAP	set	7997
  4659  1F4E                     _ANSELC	set	8014
  4660  1F43                     _ANSELB	set	8003
  4661  1F38                     _ANSELA	set	7992
  4662  1F26                     _RC6PPS	set	7974
  4663  3812                     STR_1:	
  4664  3812  3454               	retlw	84	;'T'
  4665  3813  3465               	retlw	101	;'e'
  4666  3814  346D               	retlw	109	;'m'
  4667  3815  3470               	retlw	112	;'p'
  4668  3816  3465               	retlw	101	;'e'
  4669  3817  3472               	retlw	114	;'r'
  4670  3818  3461               	retlw	97	;'a'
  4671  3819  3474               	retlw	116	;'t'
  4672  381A  3475               	retlw	117	;'u'
  4673  381B  3472               	retlw	114	;'r'
  4674  381C  3465               	retlw	101	;'e'
  4675  381D  3420               	retlw	32	;' '
  4676  381E  3452               	retlw	82	;'R'
  4677  381F  3465               	retlw	101	;'e'
  4678  3820  346C               	retlw	108	;'l'
  4679  3821  342E               	retlw	46	;'.'
  4680  3822  3468               	retlw	104	;'h'
  4681  3823  3475               	retlw	117	;'u'
  4682  3824  346D               	retlw	109	;'m'
  4683  3825  3469               	retlw	105	;'i'
  4684  3826  3464               	retlw	100	;'d'
  4685  3827  3469               	retlw	105	;'i'
  4686  3828  3474               	retlw	116	;'t'
  4687  3829  3479               	retlw	121	;'y'
  4688  382A  3444               	retlw	68	;'D'
  4689  382B  3465               	retlw	101	;'e'
  4690  382C  3477               	retlw	119	;'w'
  4691  382D  3470               	retlw	112	;'p'
  4692  382E  346F               	retlw	111	;'o'
  4693  382F  3469               	retlw	105	;'i'
  4694  3830  346E               	retlw	110	;'n'
  4695  3831  3474               	retlw	116	;'t'
  4696  3832  3420               	retlw	32	;' '
  4697  3833  3420               	retlw	32	;' '
  4698  3834  3420               	retlw	32	;' '
  4699  3835  3420               	retlw	32	;' '
  4700  3836  3442               	retlw	66	;'B'
  4701  3837  3461               	retlw	97	;'a'
  4702  3838  3474               	retlw	116	;'t'
  4703  3839  342E               	retlw	46	;'.'
  4704  383A  3420               	retlw	32	;' '
  4705  383B  3420               	retlw	32	;' '
  4706  383C  3420               	retlw	32	;' '
  4707  383D  3450               	retlw	80	;'P'
  4708  383E  346F               	retlw	111	;'o'
  4709  383F  3477               	retlw	119	;'w'
  4710  3840  3465               	retlw	101	;'e'
  4711  3841  3472               	retlw	114	;'r'
  4712  3842  3456               	retlw	86	;'V'
  4713  3843  3465               	retlw	101	;'e'
  4714  3844  3472               	retlw	114	;'r'
  4715  3845  3473               	retlw	115	;'s'
  4716  3846  3469               	retlw	105	;'i'
  4717  3847  346F               	retlw	111	;'o'
  4718  3848  346E               	retlw	110	;'n'
  4719  3849  343A               	retlw	58	;':'
  4720  384A  3400               	retlw	0
  4721                           
  4722                           	psect	stringtext4
  4723  384B                     __pstringtext4:	
  4724  384B                     STR_48:	
  4725  384B  3444               	retlw	68	;'D'
  4726  384C  3450               	retlw	80	;'P'
  4727  384D  3420               	retlw	32	;' '
  4728  384E  346F               	retlw	111	;'o'
  4729  384F  3466               	retlw	102	;'f'
  4730  3850  3466               	retlw	102	;'f'
  4731  3851  3473               	retlw	115	;'s'
  4732  3852  3465               	retlw	101	;'e'
  4733  3853  3474               	retlw	116	;'t'
  4734  3854  3420               	retlw	32	;' '
  4735  3855  3420               	retlw	32	;' '
  4736  3856  3420               	retlw	32	;' '
  4737  3857  3453               	retlw	83	;'S'
  4738  3858  346B               	retlw	107	;'k'
  4739  3859  3479               	retlw	121	;'y'
  4740  385A  3420               	retlw	32	;' '
  4741  385B  3474               	retlw	116	;'t'
  4742  385C  3465               	retlw	101	;'e'
  4743  385D  346D               	retlw	109	;'m'
  4744  385E  3470               	retlw	112	;'p'
  4745  385F  342E               	retlw	46	;'.'
  4746  3860  3420               	retlw	32	;' '
  4747  3861  3420               	retlw	32	;' '
  4748  3862  3420               	retlw	32	;' '
  4749  3863  3446               	retlw	70	;'F'
  4750  3864  3475               	retlw	117	;'u'
  4751  3865  3464               	retlw	100	;'d'
  4752  3866  3467               	retlw	103	;'g'
  4753  3867  3465               	retlw	101	;'e'
  4754  3868  3420               	retlw	32	;' '
  4755  3869  3466               	retlw	102	;'f'
  4756  386A  3461               	retlw	97	;'a'
  4757  386B  3463               	retlw	99	;'c'
  4758  386C  3474               	retlw	116	;'t'
  4759  386D  346F               	retlw	111	;'o'
  4760  386E  3472               	retlw	114	;'r'
  4761  386F  3400               	retlw	0
  4762                           
  4763                           	psect	stringtext5
  4764  388C                     __pstringtext5:	
  4765  388C                     STR_62:	
  4766  388C  3448               	retlw	72	;'H'
  4767  388D  3465               	retlw	101	;'e'
  4768  388E  3461               	retlw	97	;'a'
  4769  388F  3474               	retlw	116	;'t'
  4770  3890  3465               	retlw	101	;'e'
  4771  3891  3472               	retlw	114	;'r'
  4772  3892  3420               	retlw	32	;' '
  4773  3893  3420               	retlw	32	;' '
  4774  3894  3420               	retlw	32	;' '
  4775  3895  3420               	retlw	32	;' '
  4776  3896  3420               	retlw	32	;' '
  4777  3897  3420               	retlw	32	;' '
  4778  3898  3400               	retlw	0
  4779                           
  4780                           	psect	stringtext6
  4781  3899                     __pstringtext6:	
  4782  3899                     STR_74:	
  4783  3899  3453               	retlw	83	;'S'
  4784  389A  3465               	retlw	101	;'e'
  4785  389B  346E               	retlw	110	;'n'
  4786  389C  3473               	retlw	115	;'s'
  4787  389D  346F               	retlw	111	;'o'
  4788  389E  3472               	retlw	114	;'r'
  4789  389F  3420               	retlw	32	;' '
  4790  38A0  3420               	retlw	32	;' '
  4791  38A1  3420               	retlw	32	;' '
  4792  38A2  3420               	retlw	32	;' '
  4793  38A3  3420               	retlw	32	;' '
  4794  38A4  3420               	retlw	32	;' '
  4795  38A5  3400               	retlw	0
  4796                           
  4797                           	psect	stringtext7
  4798  38A6                     __pstringtext7:	
  4799  38A6                     STR_64:	
  4800  38A6  344F               	retlw	79	;'O'
  4801  38A7  3475               	retlw	117	;'u'
  4802  38A8  3474               	retlw	116	;'t'
  4803  38A9  3470               	retlw	112	;'p'
  4804  38AA  3475               	retlw	117	;'u'
  4805  38AB  3474               	retlw	116	;'t'
  4806  38AC  3420               	retlw	32	;' '
  4807  38AD  3420               	retlw	32	;' '
  4808  38AE  3420               	retlw	32	;' '
  4809  38AF  3420               	retlw	32	;' '
  4810  38B0  3420               	retlw	32	;' '
  4811  38B1  3420               	retlw	32	;' '
  4812  38B2  3400               	retlw	0
  4813                           
  4814                           	psect	stringtext8
  4815  38B3                     __pstringtext8:	
  4816  38B3                     STR_83:	
  4817  38B3  3420               	retlw	32	;' '
  4818  38B4  3420               	retlw	32	;' '
  4819  38B5  3420               	retlw	32	;' '
  4820  38B6  3420               	retlw	32	;' '
  4821  38B7  343A               	retlw	58	;':'
  4822  38B8  342D               	retlw	45	;'-'
  4823  38B9  3429               	retlw	41	;')'
  4824  38BA  3420               	retlw	32	;' '
  4825  38BB  3420               	retlw	32	;' '
  4826  38BC  3420               	retlw	32	;' '
  4827  38BD  3420               	retlw	32	;' '
  4828  38BE  3420               	retlw	32	;' '
  4829  38BF  3400               	retlw	0
  4830                           
  4831                           	psect	stringtext9
  4832  38C0                     __pstringtext9:	
  4833  38C0                     STR_63:	
  4834  38C0  3472               	retlw	114	;'r'
  4835  38C1  3465               	retlw	101	;'e'
  4836  38C2  346D               	retlw	109	;'m'
  4837  38C3  346F               	retlw	111	;'o'
  4838  38C4  3476               	retlw	118	;'v'
  4839  38C5  3465               	retlw	101	;'e'
  4840  38C6  3464               	retlw	100	;'d'
  4841  38C7  3420               	retlw	32	;' '
  4842  38C8  3420               	retlw	32	;' '
  4843  38C9  3420               	retlw	32	;' '
  4844  38CA  3420               	retlw	32	;' '
  4845  38CB  3420               	retlw	32	;' '
  4846  38CC  3400               	retlw	0
  4847                           
  4848                           	psect	stringtext10
  4849  38CD                     __pstringtext10:	
  4850  38CD                     STR_84:	
  4851  38CD  3455               	retlw	85	;'U'
  4852  38CE  346E               	retlw	110	;'n'
  4853  38CF  346B               	retlw	107	;'k'
  4854  38D0  346E               	retlw	110	;'n'
  4855  38D1  346F               	retlw	111	;'o'
  4856  38D2  3477               	retlw	119	;'w'
  4857  38D3  346E               	retlw	110	;'n'
  4858  38D4  3420               	retlw	32	;' '
  4859  38D5  3420               	retlw	32	;' '
  4860  38D6  3420               	retlw	32	;' '
  4861  38D7  3420               	retlw	32	;' '
  4862  38D8  3420               	retlw	32	;' '
  4863  38D9  3400               	retlw	0
  4864                           
  4865                           	psect	stringtext11
  4866  38DA                     __pstringtext11:	
  4867  38DA                     STR_75:	
  4868  38DA  3474               	retlw	116	;'t'
  4869  38DB  3469               	retlw	105	;'i'
  4870  38DC  346D               	retlw	109	;'m'
  4871  38DD  3465               	retlw	101	;'e'
  4872  38DE  346F               	retlw	111	;'o'
  4873  38DF  3475               	retlw	117	;'u'
  4874  38E0  3474               	retlw	116	;'t'
  4875  38E1  3420               	retlw	32	;' '
  4876  38E2  3420               	retlw	32	;' '
  4877  38E3  3420               	retlw	32	;' '
  4878  38E4  3420               	retlw	32	;' '
  4879  38E5  3420               	retlw	32	;' '
  4880  38E6  3400               	retlw	0
  4881                           
  4882                           	psect	stringtext12
  4883  38E7                     __pstringtext12:	
  4884  38E7                     STR_65:	
  4885  38E7  3473               	retlw	115	;'s'
  4886  38E8  3468               	retlw	104	;'h'
  4887  38E9  346F               	retlw	111	;'o'
  4888  38EA  3472               	retlw	114	;'r'
  4889  38EB  3474               	retlw	116	;'t'
  4890  38EC  3465               	retlw	101	;'e'
  4891  38ED  3464               	retlw	100	;'d'
  4892  38EE  3421               	retlw	33	;'!'
  4893  38EF  3420               	retlw	32	;' '
  4894  38F0  3420               	retlw	32	;' '
  4895  38F1  3420               	retlw	32	;' '
  4896  38F2  3420               	retlw	32	;' '
  4897  38F3  3400               	retlw	0
  4898                           
  4899                           	psect	stringtext13
  4900  38F4                     __pstringtext13:	
  4901  38F4                     STR_73:	
  4902  38F4  3474               	retlw	116	;'t'
  4903  38F5  346F               	retlw	111	;'o'
  4904  38F6  346F               	retlw	111	;'o'
  4905  38F7  3420               	retlw	32	;' '
  4906  38F8  346C               	retlw	108	;'l'
  4907  38F9  346F               	retlw	111	;'o'
  4908  38FA  3477               	retlw	119	;'w'
  4909  38FB  3421               	retlw	33	;'!'
  4910  38FC  3420               	retlw	32	;' '
  4911  38FD  3420               	retlw	32	;' '
  4912  38FE  3420               	retlw	32	;' '
  4913  38FF  3420               	retlw	32	;' '
  4914  3900  3400               	retlw	0
  4915                           
  4916                           	psect	stringtext14
  4917  3901                     __pstringtext14:	
  4918  3901                     STR_77:	
  4919  3901  3463               	retlw	99	;'c'
  4920  3902  3468               	retlw	104	;'h'
  4921  3903  3465               	retlw	101	;'e'
  4922  3904  3463               	retlw	99	;'c'
  4923  3905  346B               	retlw	107	;'k'
  4924  3906  3473               	retlw	115	;'s'
  4925  3907  3475               	retlw	117	;'u'
  4926  3908  346D               	retlw	109	;'m'
  4927  3909  3420               	retlw	32	;' '
  4928  390A  3420               	retlw	32	;' '
  4929  390B  3420               	retlw	32	;' '
  4930  390C  3420               	retlw	32	;' '
  4931  390D  3400               	retlw	0
  4932                           
  4933                           	psect	stringtext15
  4934  390E                     __pstringtext15:	
  4935  390E                     STR_67:	
  4936  390E  3464               	retlw	100	;'d'
  4937  390F  3465               	retlw	101	;'e'
  4938  3910  3474               	retlw	116	;'t'
  4939  3911  3465               	retlw	101	;'e'
  4940  3912  3463               	retlw	99	;'c'
  4941  3913  3474               	retlw	116	;'t'
  4942  3914  3465               	retlw	101	;'e'
  4943  3915  3464               	retlw	100	;'d'
  4944  3916  3421               	retlw	33	;'!'
  4945  3917  3420               	retlw	32	;' '
  4946  3918  3420               	retlw	32	;' '
  4947  3919  3420               	retlw	32	;' '
  4948  391A  3400               	retlw	0
  4949                           
  4950                           	psect	stringtext16
  4951  391B                     __pstringtext16:	
  4952  391B                     STR_71:	
  4953  391B  3474               	retlw	116	;'t'
  4954  391C  346F               	retlw	111	;'o'
  4955  391D  346F               	retlw	111	;'o'
  4956  391E  3420               	retlw	32	;' '
  4957  391F  3468               	retlw	104	;'h'
  4958  3920  3469               	retlw	105	;'i'
  4959  3921  3467               	retlw	103	;'g'
  4960  3922  3468               	retlw	104	;'h'
  4961  3923  3421               	retlw	33	;'!'
  4962  3924  3420               	retlw	32	;' '
  4963  3925  3420               	retlw	32	;' '
  4964  3926  3420               	retlw	32	;' '
  4965  3927  3400               	retlw	0
  4966                           
  4967                           	psect	stringtext17
  4968  3928                     __pstringtext17:	
  4969  3928                     STR_85:	
  4970  3928  3465               	retlw	101	;'e'
  4971  3929  3472               	retlw	114	;'r'
  4972  392A  3472               	retlw	114	;'r'
  4973  392B  346F               	retlw	111	;'o'
  4974  392C  3472               	retlw	114	;'r'
  4975  392D  3420               	retlw	32	;' '
  4976  392E  3463               	retlw	99	;'c'
  4977  392F  346F               	retlw	111	;'o'
  4978  3930  3464               	retlw	100	;'d'
  4979  3931  3465               	retlw	101	;'e'
  4980  3932  3420               	retlw	32	;' '
  4981  3933  3420               	retlw	32	;' '
  4982  3934  3400               	retlw	0
  4983                           
  4984                           	psect	stringtext18
  4985  3935                     __pstringtext18:	
  4986  3935                     STR_78:	
  4987  3935  344F               	retlw	79	;'O'
  4988  3936  3456               	retlw	86	;'V'
  4989  3937  3445               	retlw	69	;'E'
  4990  3938  3452               	retlw	82	;'R'
  4991  3939  3443               	retlw	67	;'C'
  4992  393A  3455               	retlw	85	;'U'
  4993  393B  3452               	retlw	82	;'R'
  4994  393C  3452               	retlw	82	;'R'
  4995  393D  3445               	retlw	69	;'E'
  4996  393E  344E               	retlw	78	;'N'
  4997  393F  3454               	retlw	84	;'T'
  4998  3940  3420               	retlw	32	;' '
  4999  3941  3400               	retlw	0
  5000                           
  5001                           	psect	stringtext19
  5002  3942                     __pstringtext19:	
  5003  3942                     STR_82:	
  5004  3942  344D               	retlw	77	;'M'
  5005  3943  3465               	retlw	101	;'e'
  5006  3944  346E               	retlw	110	;'n'
  5007  3945  3475               	retlw	117	;'u'
  5008  3946  3420               	retlw	32	;' '
  5009  3947  3462               	retlw	98	;'b'
  5010  3948  3472               	retlw	114	;'r'
  5011  3949  346F               	retlw	111	;'o'
  5012  394A  346B               	retlw	107	;'k'
  5013  394B  3465               	retlw	101	;'e'
  5014  394C  346E               	retlw	110	;'n'
  5015  394D  3420               	retlw	32	;' '
  5016  394E  3400               	retlw	0
  5017                           
  5018                           	psect	stringtext20
  5019  394F                     __pstringtext20:	
  5020  394F                     STR_66:	
  5021  394F  344F               	retlw	79	;'O'
  5022  3950  3476               	retlw	118	;'v'
  5023  3951  3465               	retlw	101	;'e'
  5024  3952  3472               	retlw	114	;'r'
  5025  3953  3463               	retlw	99	;'c'
  5026  3954  3475               	retlw	117	;'u'
  5027  3955  3472               	retlw	114	;'r'
  5028  3956  3472               	retlw	114	;'r'
  5029  3957  3465               	retlw	101	;'e'
  5030  3958  346E               	retlw	110	;'n'
  5031  3959  3474               	retlw	116	;'t'
  5032  395A  3420               	retlw	32	;' '
  5033  395B  3400               	retlw	0
  5034                           
  5035                           	psect	stringtext21
  5036  395C                     __pstringtext21:	
  5037  395C                     STR_69:	
  5038  395C  346F               	retlw	111	;'o'
  5039  395D  3476               	retlw	118	;'v'
  5040  395E  3465               	retlw	101	;'e'
  5041  395F  3472               	retlw	114	;'r'
  5042  3960  3463               	retlw	99	;'c'
  5043  3961  3475               	retlw	117	;'u'
  5044  3962  3472               	retlw	114	;'r'
  5045  3963  3472               	retlw	114	;'r'
  5046  3964  3465               	retlw	101	;'e'
  5047  3965  346E               	retlw	110	;'n'
  5048  3966  3474               	retlw	116	;'t'
  5049  3967  3420               	retlw	32	;' '
  5050  3968  3400               	retlw	0
  5051                           
  5052                           	psect	stringtext22
  5053  3969                     __pstringtext22:	
  5054  3969                     STR_70:	
  5055  3969  3453               	retlw	83	;'S'
  5056  396A  3475               	retlw	117	;'u'
  5057  396B  3470               	retlw	112	;'p'
  5058  396C  3470               	retlw	112	;'p'
  5059  396D  346C               	retlw	108	;'l'
  5060  396E  3479               	retlw	121	;'y'
  5061  396F  3420               	retlw	32	;' '
  5062  3970  3476               	retlw	118	;'v'
  5063  3971  346F               	retlw	111	;'o'
  5064  3972  346C               	retlw	108	;'l'
  5065  3973  3474               	retlw	116	;'t'
  5066  3974  342E               	retlw	46	;'.'
  5067  3975  3400               	retlw	0
  5068                           
  5069                           	psect	stringtext23
  5070  3976                     __pstringtext23:	
  5071  3976                     STR_79:	
  5072  3976  3454               	retlw	84	;'T'
  5073  3977  3455               	retlw	85	;'U'
  5074  3978  3452               	retlw	82	;'R'
  5075  3979  344E               	retlw	78	;'N'
  5076  397A  3420               	retlw	32	;' '
  5077  397B  344F               	retlw	79	;'O'
  5078  397C  3446               	retlw	70	;'F'
  5079  397D  3446               	retlw	70	;'F'
  5080  397E  3420               	retlw	32	;' '
  5081  397F  344E               	retlw	78	;'N'
  5082  3980  344F               	retlw	79	;'O'
  5083  3981  3457               	retlw	87	;'W'
  5084  3982  3400               	retlw	0
  5085                           
  5086                           	psect	stringtext24
  5087  3983                     __pstringtext24:	
  5088  3983                     STR_76:	
  5089  3983  3453               	retlw	83	;'S'
  5090  3984  3465               	retlw	101	;'e'
  5091  3985  346E               	retlw	110	;'n'
  5092  3986  3473               	retlw	115	;'s'
  5093  3987  346F               	retlw	111	;'o'
  5094  3988  3472               	retlw	114	;'r'
  5095  3989  3420               	retlw	32	;' '
  5096  398A  3477               	retlw	119	;'w'
  5097  398B  3472               	retlw	114	;'r'
  5098  398C  346F               	retlw	111	;'o'
  5099  398D  346E               	retlw	110	;'n'
  5100  398E  3467               	retlw	103	;'g'
  5101  398F  3400               	retlw	0
  5102                           
  5103                           	psect	stringtext25
  5104  3990                     __pstringtext25:	
  5105  3990                     STR_81:	
  5106  3990  3450               	retlw	80	;'P'
  5107  3991  346C               	retlw	108	;'l'
  5108  3992  3465               	retlw	101	;'e'
  5109  3993  3461               	retlw	97	;'a'
  5110  3994  3473               	retlw	115	;'s'
  5111  3995  3465               	retlw	101	;'e'
  5112  3996  3420               	retlw	32	;' '
  5113  3997  3463               	retlw	99	;'c'
  5114  3998  3468               	retlw	104	;'h'
  5115  3999  3465               	retlw	101	;'e'
  5116  399A  3463               	retlw	99	;'c'
  5117  399B  346B               	retlw	107	;'k'
  5118  399C  3400               	retlw	0
  5119                           
  5120                           	psect	stringtext26
  5121  399D                     __pstringtext26:	
  5122  399D                     STR_28:	
  5123  399D  344E               	retlw	78	;'N'
  5124  399E  346F               	retlw	111	;'o'
  5125  399F  3474               	retlw	116	;'t'
  5126  39A0  3420               	retlw	32	;' '
  5127  39A1  3420               	retlw	32	;' '
  5128  39A2  3420               	retlw	32	;' '
  5129  39A3  3420               	retlw	32	;' '
  5130  39A4  3420               	retlw	32	;' '
  5131  39A5  3420               	retlw	32	;' '
  5132  39A6  3420               	retlw	32	;' '
  5133  39A7  3420               	retlw	32	;' '
  5134  39A8  3420               	retlw	32	;' '
  5135  39A9  3400               	retlw	0
  5136                           
  5137                           	psect	stringtext27
  5138  39AA                     __pstringtext27:	
  5139  39AA                     STR_32:	
  5140  39AA  3452               	retlw	82	;'R'
  5141  39AB  3465               	retlw	101	;'e'
  5142  39AC  3473               	retlw	115	;'s'
  5143  39AD  3465               	retlw	101	;'e'
  5144  39AE  3474               	retlw	116	;'t'
  5145  39AF  3420               	retlw	32	;' '
  5146  39B0  3420               	retlw	32	;' '
  5147  39B1  3420               	retlw	32	;' '
  5148  39B2  3420               	retlw	32	;' '
  5149  39B3  3420               	retlw	32	;' '
  5150  39B4  3420               	retlw	32	;' '
  5151  39B5  3420               	retlw	32	;' '
  5152  39B6  3400               	retlw	0
  5153                           
  5154                           	psect	stringtext28
  5155  39B7                     __pstringtext28:	
  5156  39B7                     STR_30:	
  5157  39B7  3454               	retlw	84	;'T'
  5158  39B8  3465               	retlw	101	;'e'
  5159  39B9  3473               	retlw	115	;'s'
  5160  39BA  3474               	retlw	116	;'t'
  5161  39BB  3469               	retlw	105	;'i'
  5162  39BC  346E               	retlw	110	;'n'
  5163  39BD  3467               	retlw	103	;'g'
  5164  39BE  3420               	retlw	32	;' '
  5165  39BF  3420               	retlw	32	;' '
  5166  39C0  3420               	retlw	32	;' '
  5167  39C1  3420               	retlw	32	;' '
  5168  39C2  3420               	retlw	32	;' '
  5169  39C3  3400               	retlw	0
  5170                           
  5171                           	psect	stringtext29
  5172  39C4                     __pstringtext29:	
  5173  39C4                     STR_33:	
  5174  39C4  3463               	retlw	99	;'c'
  5175  39C5  3468               	retlw	104	;'h'
  5176  39C6  3461               	retlw	97	;'a'
  5177  39C7  346E               	retlw	110	;'n'
  5178  39C8  346E               	retlw	110	;'n'
  5179  39C9  3465               	retlw	101	;'e'
  5180  39CA  346C               	retlw	108	;'l'
  5181  39CB  3420               	retlw	32	;' '
  5182  39CC  3420               	retlw	32	;' '
  5183  39CD  3420               	retlw	32	;' '
  5184  39CE  3420               	retlw	32	;' '
  5185  39CF  3420               	retlw	32	;' '
  5186  39D0  3400               	retlw	0
  5187                           
  5188                           	psect	stringtext30
  5189  39D1                     __pstringtext30:	
  5190  39D1                     STR_19:	
  5191  39D1  3453               	retlw	83	;'S'
  5192  39D2  3468               	retlw	104	;'h'
  5193  39D3  346F               	retlw	111	;'o'
  5194  39D4  3472               	retlw	114	;'r'
  5195  39D5  3474               	retlw	116	;'t'
  5196  39D6  3465               	retlw	101	;'e'
  5197  39D7  3464               	retlw	100	;'d'
  5198  39D8  3421               	retlw	33	;'!'
  5199  39D9  3420               	retlw	32	;' '
  5200  39DA  3420               	retlw	32	;' '
  5201  39DB  3420               	retlw	32	;' '
  5202  39DC  3420               	retlw	32	;' '
  5203  39DD  3400               	retlw	0
  5204                           
  5205                           	psect	stringtext31
  5206  39DE                     __pstringtext31:	
  5207  39DE                     STR_14:	
  5208  39DE  3444               	retlw	68	;'D'
  5209  39DF  3469               	retlw	105	;'i'
  5210  39E0  3473               	retlw	115	;'s'
  5211  39E1  3461               	retlw	97	;'a'
  5212  39E2  3462               	retlw	98	;'b'
  5213  39E3  346C               	retlw	108	;'l'
  5214  39E4  3465               	retlw	101	;'e'
  5215  39E5  3464               	retlw	100	;'d'
  5216  39E6  3420               	retlw	32	;' '
  5217  39E7  3420               	retlw	32	;' '
  5218  39E8  3420               	retlw	32	;' '
  5219  39E9  3420               	retlw	32	;' '
  5220  39EA  3400               	retlw	0
  5221                           
  5222                           	psect	stringtext32
  5223  39EB                     __pstringtext32:	
  5224  39EB                     STR_31:	
  5225  39EB  3468               	retlw	104	;'h'
  5226  39EC  3465               	retlw	101	;'e'
  5227  39ED  3461               	retlw	97	;'a'
  5228  39EE  3474               	retlw	116	;'t'
  5229  39EF  3465               	retlw	101	;'e'
  5230  39F0  3472               	retlw	114	;'r'
  5231  39F1  342E               	retlw	46	;'.'
  5232  39F2  342E               	retlw	46	;'.'
  5233  39F3  342E               	retlw	46	;'.'
  5234  39F4  3420               	retlw	32	;' '
  5235  39F5  3420               	retlw	32	;' '
  5236  39F6  3420               	retlw	32	;' '
  5237  39F7  3400               	retlw	0
  5238                           
  5239                           	psect	stringtext33
  5240  39F8                     __pstringtext33:	
  5241  39F8                     STR_56:	
  5242  39F8  3453               	retlw	83	;'S'
  5243  39F9  346B               	retlw	107	;'k'
  5244  39FA  3479               	retlw	121	;'y'
  5245  39FB  3420               	retlw	32	;' '
  5246  39FC  3474               	retlw	116	;'t'
  5247  39FD  3465               	retlw	101	;'e'
  5248  39FE  346D               	retlw	109	;'m'
  5249  39FF  3470               	retlw	112	;'p'
  5250  3A00  342E               	retlw	46	;'.'
  5251  3A01  3420               	retlw	32	;' '
  5252  3A02  3420               	retlw	32	;' '
  5253  3A03  3420               	retlw	32	;' '
  5254  3A04  3400               	retlw	0
  5255                           
  5256                           	psect	stringtext34
  5257  3A05                     __pstringtext34:	
  5258  3A05                     STR_29:	
  5259  3A05  3463               	retlw	99	;'c'
  5260  3A06  346F               	retlw	111	;'o'
  5261  3A07  346E               	retlw	110	;'n'
  5262  3A08  346E               	retlw	110	;'n'
  5263  3A09  3465               	retlw	101	;'e'
  5264  3A0A  3463               	retlw	99	;'c'
  5265  3A0B  3474               	retlw	116	;'t'
  5266  3A0C  3465               	retlw	101	;'e'
  5267  3A0D  3464               	retlw	100	;'d'
  5268  3A0E  3420               	retlw	32	;' '
  5269  3A0F  3420               	retlw	32	;' '
  5270  3A10  3420               	retlw	32	;' '
  5271  3A11  3400               	retlw	0
  5272                           
  5273                           	psect	stringtext35
  5274  3A12                     __pstringtext35:	
  5275  3A12                     STR_53:	
  5276  3A12  3444               	retlw	68	;'D'
  5277  3A13  3450               	retlw	80	;'P'
  5278  3A14  3420               	retlw	32	;' '
  5279  3A15  346F               	retlw	111	;'o'
  5280  3A16  3466               	retlw	102	;'f'
  5281  3A17  3466               	retlw	102	;'f'
  5282  3A18  3473               	retlw	115	;'s'
  5283  3A19  3465               	retlw	101	;'e'
  5284  3A1A  3474               	retlw	116	;'t'
  5285  3A1B  3420               	retlw	32	;' '
  5286  3A1C  3420               	retlw	32	;' '
  5287  3A1D  3420               	retlw	32	;' '
  5288  3A1E  3400               	retlw	0
  5289                           
  5290                           	psect	stringtext36
  5291  3A1F                     __pstringtext36:	
  5292  3A1F                     STR_34:	
  5293  3A1F  344C               	retlw	76	;'L'
  5294  3A20  3465               	retlw	101	;'e'
  5295  3A21  346E               	retlw	110	;'n'
  5296  3A22  3473               	retlw	115	;'s'
  5297  3A23  3420               	retlw	32	;' '
  5298  3A24  3464               	retlw	100	;'d'
  5299  3A25  3469               	retlw	105	;'i'
  5300  3A26  3461               	retlw	97	;'a'
  5301  3A27  346D               	retlw	109	;'m'
  5302  3A28  342E               	retlw	46	;'.'
  5303  3A29  3420               	retlw	32	;' '
  5304  3A2A  3420               	retlw	32	;' '
  5305  3A2B  3400               	retlw	0
  5306                           
  5307                           	psect	stringtext37
  5308  3A2C                     __pstringtext37:	
  5309  3A2C                     STR_43:	
  5310  3A2C  3448               	retlw	72	;'H'
  5311  3A2D  346F               	retlw	111	;'o'
  5312  3A2E  346C               	retlw	108	;'l'
  5313  3A2F  3464               	retlw	100	;'d'
  5314  3A30  3420               	retlw	32	;' '
  5315  3A31  3462               	retlw	98	;'b'
  5316  3A32  3475               	retlw	117	;'u'
  5317  3A33  3474               	retlw	116	;'t'
  5318  3A34  3474               	retlw	116	;'t'
  5319  3A35  346F               	retlw	111	;'o'
  5320  3A36  346E               	retlw	110	;'n'
  5321  3A37  3420               	retlw	32	;' '
  5322  3A38  3400               	retlw	0
  5323                           
  5324                           	psect	stringtext38
  5325  3A39                     __pstringtext38:	
  5326  3A39                     STR_13:	
  5327  3A39  3450               	retlw	80	;'P'
  5328  3A3A  346C               	retlw	108	;'l'
  5329  3A3B  3465               	retlw	101	;'e'
  5330  3A3C  3461               	retlw	97	;'a'
  5331  3A3D  3473               	retlw	115	;'s'
  5332  3A3E  3465               	retlw	101	;'e'
  5333  3A3F  3420               	retlw	32	;' '
  5334  3A40  3477               	retlw	119	;'w'
  5335  3A41  3461               	retlw	97	;'a'
  5336  3A42  3469               	retlw	105	;'i'
  5337  3A43  3474               	retlw	116	;'t'
  5338  3A44  3421               	retlw	33	;'!'
  5339  3A45  3400               	retlw	0
  5340                           
  5341                           	psect	stringtext39
  5342  3A46                     __pstringtext39:	
  5343  3A46                     STR_20:	
  5344  3A46  344F               	retlw	79	;'O'
  5345  3A47  3476               	retlw	118	;'v'
  5346  3A48  3465               	retlw	101	;'e'
  5347  3A49  3472               	retlw	114	;'r'
  5348  3A4A  3463               	retlw	99	;'c'
  5349  3A4B  3475               	retlw	117	;'u'
  5350  3A4C  3472               	retlw	114	;'r'
  5351  3A4D  3472               	retlw	114	;'r'
  5352  3A4E  3465               	retlw	101	;'e'
  5353  3A4F  346E               	retlw	110	;'n'
  5354  3A50  3474               	retlw	116	;'t'
  5355  3A51  3421               	retlw	33	;'!'
  5356  3A52  3400               	retlw	0
  5357                           
  5358                           	psect	stringtext40
  5359  3A53                     __pstringtext40:	
  5360  3A53                     STR_18:	
  5361  3A53  3444               	retlw	68	;'D'
  5362  3A54  3469               	retlw	105	;'i'
  5363  3A55  3473               	retlw	115	;'s'
  5364  3A56  3463               	retlw	99	;'c'
  5365  3A57  346F               	retlw	111	;'o'
  5366  3A58  346E               	retlw	110	;'n'
  5367  3A59  346E               	retlw	110	;'n'
  5368  3A5A  3465               	retlw	101	;'e'
  5369  3A5B  3463               	retlw	99	;'c'
  5370  3A5C  3474               	retlw	116	;'t'
  5371  3A5D  3465               	retlw	101	;'e'
  5372  3A5E  3464               	retlw	100	;'d'
  5373  3A5F  3400               	retlw	0
  5374                           
  5375                           	psect	stringtext41
  5376  3A60                     __pstringtext41:	
  5377  3A60                     STR_44:	
  5378  3A60  3474               	retlw	116	;'t'
  5379  3A61  346F               	retlw	111	;'o'
  5380  3A62  3420               	retlw	32	;' '
  5381  3A63  3472               	retlw	114	;'r'
  5382  3A64  3465               	retlw	101	;'e'
  5383  3A65  342D               	retlw	45	;'-'
  5384  3A66  3465               	retlw	101	;'e'
  5385  3A67  346E               	retlw	110	;'n'
  5386  3A68  3461               	retlw	97	;'a'
  5387  3A69  3462               	retlw	98	;'b'
  5388  3A6A  346C               	retlw	108	;'l'
  5389  3A6B  3465               	retlw	101	;'e'
  5390  3A6C  3400               	retlw	0
  5391                           
  5392                           	psect	stringtext42
  5393  3A6D                     __pstringtext42:	
  5394  3A6D                     STR_21:	
  5395  3A6D  344F               	retlw	79	;'O'
  5396  3A6E  346E               	retlw	110	;'n'
  5397  3A6F  3464               	retlw	100	;'d'
  5398  3A70  3472               	retlw	114	;'r'
  5399  3A71  3465               	retlw	101	;'e'
  5400  3A72  3453               	retlw	83	;'S'
  5401  3A73  3470               	retlw	112	;'p'
  5402  3A74  3465               	retlw	101	;'e'
  5403  3A75  3463               	retlw	99	;'c'
  5404  3A76  3469               	retlw	105	;'i'
  5405  3A77  3461               	retlw	97	;'a'
  5406  3A78  346C               	retlw	108	;'l'
  5407  3A79  3400               	retlw	0
  5408                           
  5409                           	psect	stringtext43
  5410  3A7A                     __pstringtext43:	
  5411  3A7A                     STR_22:	
  5412  3A7A  344F               	retlw	79	;'O'
  5413  3A7B  3475               	retlw	117	;'u'
  5414  3A7C  3474               	retlw	116	;'t'
  5415  3A7D  3470               	retlw	112	;'p'
  5416  3A7E  3475               	retlw	117	;'u'
  5417  3A7F  3474               	retlw	116	;'t'
  5418  3A80  3420               	retlw	32	;' '
  5419  3A81  3470               	retlw	112	;'p'
  5420  3A82  346F               	retlw	111	;'o'
  5421  3A83  3477               	retlw	119	;'w'
  5422  3A84  3465               	retlw	101	;'e'
  5423  3A85  3472               	retlw	114	;'r'
  5424  3A86  3400               	retlw	0
  5425                           
  5426                           	psect	stringtext44
  5427  3A87                     __pstringtext44:	
  5428  3A87                     STR_86:	
  5429  3A87  3454               	retlw	84	;'T'
  5430  3A88  3455               	retlw	85	;'U'
  5431  3A89  3452               	retlw	82	;'R'
  5432  3A8A  344E               	retlw	78	;'N'
  5433  3A8B  3449               	retlw	73	;'I'
  5434  3A8C  344E               	retlw	78	;'N'
  5435  3A8D  3447               	retlw	71	;'G'
  5436  3A8E  3420               	retlw	32	;' '
  5437  3A8F  344F               	retlw	79	;'O'
  5438  3A90  3446               	retlw	70	;'F'
  5439  3A91  3446               	retlw	70	;'F'
  5440  3A92  3400               	retlw	0
  5441                           
  5442                           	psect	stringtext45
  5443  3A93                     __pstringtext45:	
  5444  3A93                     STR_51:	
  5445  3A93  3401               	retlw	1
  5446  3A94  3420               	retlw	32	;' '
  5447  3A95  3420               	retlw	32	;' '
  5448  3A96  3420               	retlw	32	;' '
  5449  3A97  3420               	retlw	32	;' '
  5450  3A98  3420               	retlw	32	;' '
  5451  3A99  3420               	retlw	32	;' '
  5452  3A9A  3420               	retlw	32	;' '
  5453  3A9B  3420               	retlw	32	;' '
  5454  3A9C  3400               	retlw	0
  5455                           
  5456                           	psect	stringtext46
  5457  3A9D                     __pstringtext46:	
  5458  3A9D                     STR_58:	
  5459  3A9D  3401               	retlw	1
  5460  3A9E  3420               	retlw	32	;' '
  5461  3A9F  3403               	retlw	3
  5462  3AA0  3420               	retlw	32	;' '
  5463  3AA1  3420               	retlw	32	;' '
  5464  3AA2  3420               	retlw	32	;' '
  5465  3AA3  3420               	retlw	32	;' '
  5466  3AA4  3420               	retlw	32	;' '
  5467  3AA5  3400               	retlw	0
  5468                           
  5469                           	psect	stringtext47
  5470  3AA6                     __pstringtext47:	
  5471  3AA6                     STR_61:	
  5472  3AA6  3420               	retlw	32	;' '
  5473  3AA7  3403               	retlw	3
  5474  3AA8  3420               	retlw	32	;' '
  5475  3AA9  3420               	retlw	32	;' '
  5476  3AAA  3420               	retlw	32	;' '
  5477  3AAB  3420               	retlw	32	;' '
  5478  3AAC  3420               	retlw	32	;' '
  5479  3AAD  3420               	retlw	32	;' '
  5480  3AAE  3400               	retlw	0
  5481                           
  5482                           	psect	stringtext48
  5483  3AAF                     __pstringtext48:	
  5484  3AAF                     STR_17:	
  5485  3AAF  3457               	retlw	87	;'W'
  5486  3AB0  3420               	retlw	32	;' '
  5487  3AB1  346D               	retlw	109	;'m'
  5488  3AB2  3461               	retlw	97	;'a'
  5489  3AB3  346E               	retlw	110	;'n'
  5490  3AB4  3475               	retlw	117	;'u'
  5491  3AB5  3461               	retlw	97	;'a'
  5492  3AB6  346C               	retlw	108	;'l'
  5493  3AB7  3400               	retlw	0
  5494                           
  5495                           	psect	stringtext49
  5496  3AB8                     __pstringtext49:	
  5497  3AB8                     STR_47:	
  5498  3AB8  3420               	retlw	32	;' '
  5499  3AB9  3469               	retlw	105	;'i'
  5500  3ABA  346E               	retlw	110	;'n'
  5501  3ABB  3463               	retlw	99	;'c'
  5502  3ABC  3468               	retlw	104	;'h'
  5503  3ABD  3420               	retlw	32	;' '
  5504  3ABE  3403               	retlw	3
  5505  3ABF  3400               	retlw	0
  5506                           
  5507                           	psect	stringtext50
  5508  3AC0                     __pstringtext50:	
  5509  3AC0                     STR_42:	
  5510  3AC0  3457               	retlw	87	;'W'
  5511  3AC1  3420               	retlw	32	;' '
  5512  3AC2  346D               	retlw	109	;'m'
  5513  3AC3  3461               	retlw	97	;'a'
  5514  3AC4  346E               	retlw	110	;'n'
  5515  3AC5  342E               	retlw	46	;'.'
  5516  3AC6  3403               	retlw	3
  5517  3AC7  3400               	retlw	0
  5518                           
  5519                           	psect	stringtext51
  5520  3AC8                     __pstringtext51:	
  5521  3AC8                     STR_5:	
  5522  3AC8  3401               	retlw	1
  5523  3AC9  3420               	retlw	32	;' '
  5524  3ACA  3420               	retlw	32	;' '
  5525  3ACB  3420               	retlw	32	;' '
  5526  3ACC  3420               	retlw	32	;' '
  5527  3ACD  3420               	retlw	32	;' '
  5528  3ACE  3420               	retlw	32	;' '
  5529  3ACF  3400               	retlw	0
  5530                           
  5531                           	psect	stringtext52
  5532  3AD0                     __pstringtext52:	
  5533  3AD0                     STR_24:	
  5534  3AD0  3420               	retlw	32	;' '
  5535  3AD1  346F               	retlw	111	;'o'
  5536  3AD2  3466               	retlw	102	;'f'
  5537  3AD3  3466               	retlw	102	;'f'
  5538  3AD4  3420               	retlw	32	;' '
  5539  3AD5  3420               	retlw	32	;' '
  5540  3AD6  3420               	retlw	32	;' '
  5541  3AD7  3400               	retlw	0
  5542                           
  5543                           	psect	stringtext53
  5544  3AD8                     __pstringtext53:	
  5545  3AD8                     STR_35:	
  5546  3AD8  3420               	retlw	32	;' '
  5547  3AD9  3469               	retlw	105	;'i'
  5548  3ADA  346E               	retlw	110	;'n'
  5549  3ADB  3463               	retlw	99	;'c'
  5550  3ADC  3468               	retlw	104	;'h'
  5551  3ADD  3420               	retlw	32	;' '
  5552  3ADE  3420               	retlw	32	;' '
  5553  3ADF  3400               	retlw	0
  5554                           
  5555                           	psect	stringtext54
  5556  3AE0                     __pstringtext54:	
  5557  3AE0                     STR_26:	
  5558  3AE0  3420               	retlw	32	;' '
  5559  3AE1  3461               	retlw	97	;'a'
  5560  3AE2  3475               	retlw	117	;'u'
  5561  3AE3  3474               	retlw	116	;'t'
  5562  3AE4  346F               	retlw	111	;'o'
  5563  3AE5  3420               	retlw	32	;' '
  5564  3AE6  3420               	retlw	32	;' '
  5565  3AE7  3400               	retlw	0
  5566                           
  5567                           	psect	stringtext55
  5568  3AE8                     __pstringtext55:	
  5569  3AE8                     STR_2:	
  5570  3AE8  3453               	retlw	83	;'S'
  5571  3AE9  3465               	retlw	101	;'e'
  5572  3AEA  346E               	retlw	110	;'n'
  5573  3AEB  3473               	retlw	115	;'s'
  5574  3AEC  346F               	retlw	111	;'o'
  5575  3AED  3472               	retlw	114	;'r'
  5576  3AEE  343A               	retlw	58	;':'
  5577  3AEF  3400               	retlw	0
  5578                           
  5579                           	psect	stringtext56
  5580  3AF0                     __pstringtext56:	
  5581  3AF0                     STR_38:	
  5582  3AF0  3420               	retlw	32	;' '
  5583  3AF1  346F               	retlw	111	;'o'
  5584  3AF2  3466               	retlw	102	;'f'
  5585  3AF3  3466               	retlw	102	;'f'
  5586  3AF4  3420               	retlw	32	;' '
  5587  3AF5  3403               	retlw	3
  5588  3AF6  3400               	retlw	0
  5589                           
  5590                           	psect	stringtext57
  5591  3AF7                     __pstringtext57:	
  5592  3AF7                     STR_40:	
  5593  3AF7  3420               	retlw	32	;' '
  5594  3AF8  3461               	retlw	97	;'a'
  5595  3AF9  3475               	retlw	117	;'u'
  5596  3AFA  3474               	retlw	116	;'t'
  5597  3AFB  346F               	retlw	111	;'o'
  5598  3AFC  3403               	retlw	3
  5599  3AFD  3400               	retlw	0
  5600                           
  5601                           	psect	stringtext58
  5602  3AFE                     __pstringtext58:	
  5603  3AFE                     STR_54:	
  5604  3AFE  3474               	retlw	116	;'t'
  5605  3AFF  3465               	retlw	101	;'e'
  5606  3B00  346D               	retlw	109	;'m'
  5607  3B01  3470               	retlw	112	;'p'
  5608  3B02  342E               	retlw	46	;'.'
  5609  3B03  3404               	retlw	4
  5610  3B04  3400               	retlw	0
  5611                           
  5612                           	psect	stringtext59
  5613  3B05                     __pstringtext59:	
  5614  3B05                     STR_6:	
  5615  3B05  3425               	retlw	37	;'%'
  5616  3B06  3420               	retlw	32	;' '
  5617  3B07  3420               	retlw	32	;' '
  5618  3B08  3420               	retlw	32	;' '
  5619  3B09  3420               	retlw	32	;' '
  5620  3B0A  3420               	retlw	32	;' '
  5621  3B0B  3400               	retlw	0
  5622                           
  5623                           	psect	stringtext60
  5624  3B0C                     __pstringtext60:	
  5625  3B0C                     STR_49:	
  5626  3B0C  3474               	retlw	116	;'t'
  5627  3B0D  3465               	retlw	101	;'e'
  5628  3B0E  346D               	retlw	109	;'m'
  5629  3B0F  3470               	retlw	112	;'p'
  5630  3B10  342E               	retlw	46	;'.'
  5631  3B11  3420               	retlw	32	;' '
  5632  3B12  3400               	retlw	0
  5633                           
  5634                           	psect	stringtext61
  5635  3B13                     __pstringtext61:	
  5636  3B13                     STR_37:	
  5637  3B13  3404               	retlw	4
  5638  3B14  3443               	retlw	67	;'C'
  5639  3B15  3468               	retlw	104	;'h'
  5640  3B16  342E               	retlw	46	;'.'
  5641  3B17  3420               	retlw	32	;' '
  5642  3B18  3400               	retlw	0
  5643                           
  5644                           	psect	stringtext62
  5645  3B19                     __pstringtext62:	
  5646  3B19                     STR_87:	
  5647  3B19  3449               	retlw	73	;'I'
  5648  3B1A  344E               	retlw	78	;'N'
  5649  3B1B  3420               	retlw	32	;' '
  5650  3B1C  3400               	retlw	0
  5651                           
  5652                           	psect	stringtext63
  5653  3B1D                     __pstringtext63:	
  5654  3B1D                     STR_3:	
  5655  3B1D  3401               	retlw	1
  5656  3B1E  3420               	retlw	32	;' '
  5657  3B1F  3402               	retlw	2
  5658  3B20  3400               	retlw	0
  5659                           
  5660                           	psect	stringtext64
  5661  3B21                     __pstringtext64:	
  5662  3B21                     STR_8:	
  5663  3B21  3456               	retlw	86	;'V'
  5664  3B22  3420               	retlw	32	;' '
  5665  3B23  3420               	retlw	32	;' '
  5666  3B24  3400               	retlw	0
  5667                           
  5668                           	psect	stringtext65
  5669  3B25                     __pstringtext65:	
  5670  3B25                     STR_10:	
  5671  3B25  3443               	retlw	67	;'C'
  5672  3B26  3468               	retlw	104	;'h'
  5673  3B27  3420               	retlw	32	;' '
  5674  3B28  3400               	retlw	0
  5675                           
  5676                           	psect	stringtext66
  5677  3B29                     __pstringtext66:	
  5678  3B29                     STR_55:	
  5679  3B29  3401               	retlw	1
  5680  3B2A  3403               	retlw	3
  5681  3B2B  3400               	retlw	0
  5682                           
  5683                           	psect	stringtext67
  5684  3B2C                     __pstringtext67:	
  5685  3B2C                     STR_50:	
  5686  3B2C  3401               	retlw	1
  5687  3B2D  3420               	retlw	32	;' '
  5688  3B2E  3400               	retlw	0
  5689                           
  5690                           	psect	stringtext68
  5691  3B2F                     __pstringtext68:	
  5692  3B2F                     STR_12:	
  5693  3B2F  3422               	retlw	34	;'"'
  5694  3B30  3420               	retlw	32	;' '
  5695  3B31  3400               	retlw	0
  5696                           
  5697                           	psect	stringtext69
  5698  3B32                     __pstringtext69:	
  5699  3B32                     STR_11:	
  5700  3B32  343A               	retlw	58	;':'
  5701  3B33  3420               	retlw	32	;' '
  5702  3B34  3400               	retlw	0
  5703                           
  5704                           	psect	stringtext70
  5705  3B35                     __pstringtext70:	
  5706  3B35                     STR_15:	
  5707  3B35  3420               	retlw	32	;' '
  5708  3B36  3428               	retlw	40	;'('
  5709  3B37  3400               	retlw	0
  5710                           
  5711                           	psect	stringtext71
  5712  3B38                     __pstringtext71:	
  5713  3B38                     STR_16:	
  5714  3B38  3457               	retlw	87	;'W'
  5715  3B39  3429               	retlw	41	;')'
  5716  3B3A  3400               	retlw	0
  5717                           
  5718                           	psect	stringtext72
  5719  3B3B                     __pstringtext72:	
  5720  3B3B                     STR_4:	
  5721  3B3B  3401               	retlw	1
  5722  3B3C  3400               	retlw	0
  5723                           
  5724                           	psect	stringtext73
  5725  0000                     __pstringtext73:	
  5726  3B03                     
  5727                           ; #config settings
  5728  0000                     
  5729                           	psect	cinit
  5730  0070                     start_initialization:	
  5731  0070                     __initialization:		;BIGRAM
  5732                           
  5733                           ; Initialize objects allocated to BANK1
  5734  0070  0141               	movlb	1	; select bank1
  5735  0071  3187  27FA  3180   	fcall	__pidataBANK1	;fetch initializer
  5736  0074  00ED               	movwf	__pdataBANK1& (0+127)
  5737                           
  5738                           ; Initialize objects allocated to BANK2
  5739  0075  0142               	movlb	2	; select bank2
  5740  0076  3187  27FB  3180   	fcall	__pidataBANK2	;fetch initializer
  5741  0079  00EF               	movwf	__pdataBANK2& (0+127)
  5742                           
  5743                           ; Initialize objects allocated to BANK4
  5744  007A  3000               	movlw	low __pidataBANK4
  5745  007B  0084               	movwf	4
  5746  007C  3088               	movlw	(high __pidataBANK4)| (0+128)
  5747  007D  0085               	movwf	5
  5748  007E  3064               	movlw	low __pdataBANK4
  5749  007F  0086               	movwf	6
  5750  0080  3002               	movlw	high __pdataBANK4
  5751  0081  0087               	movwf	7
  5752  0082  3000               	movlw	0
  5753  0083  00FF               	movwf	btemp+1
  5754  0084  300C               	movlw	12
  5755  0085  31B1  2191  3180   	fcall	init_ram
  5756                           
  5757                           ; Initialize objects allocated to BANK6
  5758  0088  3077               	movlw	low __pidataBANK6
  5759  0089  0084               	movwf	4
  5760  008A  30B2               	movlw	(high __pidataBANK6)| (0+128)
  5761  008B  0085               	movwf	5
  5762  008C  3020               	movlw	low __pdataBANK6
  5763  008D  0086               	movwf	6
  5764  008E  3003               	movlw	high __pdataBANK6
  5765  008F  0087               	movwf	7
  5766  0090  3000               	movlw	0
  5767  0091  00FF               	movwf	btemp+1
  5768  0092  3020               	movlw	32
  5769  0093  31B1  2191  3180   	fcall	init_ram
  5770                           
  5771                           ; Clear objects allocated to BIGRAM
  5772  0096  304A               	movlw	low (0+10058)
  5773  0097  0084               	movwf	4
  5774  0098  3027               	movlw	high (0+10058)
  5775  0099  0085               	movwf	5
  5776  009A  30A6               	movlw	166
  5777  009B  00FE               	movwf	btemp
  5778  009C  3000               	movlw	0
  5779  009D  00FF               	movwf	btemp+1
  5780  009E  31B1  2185  3180   	fcall	clear_ram0
  5781                           
  5782                           ; Clear objects allocated to COMMON
  5783  00A1  01FC               	clrf	__pbssCOMMON& (0+127)
  5784  00A2  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  5785                           
  5786                           ; Clear objects allocated to BANK1
  5787  00A3  0141               	movlb	1	; select bank1
  5788  00A4  01EB               	clrf	__pbssBANK1& (0+127)
  5789  00A5  01EC               	clrf	(__pbssBANK1+1)& (0+127)
  5790                           
  5791                           ; Clear objects allocated to BANK2
  5792  00A6  305C               	movlw	low __pbssBANK2
  5793  00A7  0084               	movwf	4
  5794  00A8  3001               	movlw	high __pbssBANK2
  5795  00A9  0085               	movwf	5
  5796  00AA  3013               	movlw	19
  5797  00AB  00FE               	movwf	btemp
  5798  00AC  3000               	movlw	0
  5799  00AD  00FF               	movwf	btemp+1
  5800  00AE  31B1  2185  3180   	fcall	clear_ram0
  5801                           
  5802                           ; Clear objects allocated to BANK3
  5803  00B1  30E0               	movlw	low __pbssBANK3
  5804  00B2  0084               	movwf	4
  5805  00B3  3001               	movlw	high __pbssBANK3
  5806  00B4  0085               	movwf	5
  5807  00B5  3010               	movlw	16
  5808  00B6  00FE               	movwf	btemp
  5809  00B7  3000               	movlw	0
  5810  00B8  00FF               	movwf	btemp+1
  5811  00B9  31B1  2185  3180   	fcall	clear_ram0
  5812                           
  5813                           ; Clear objects allocated to BANK4
  5814  00BC  3020               	movlw	low __pbssBANK4
  5815  00BD  0084               	movwf	4
  5816  00BE  3002               	movlw	high __pbssBANK4
  5817  00BF  0085               	movwf	5
  5818  00C0  3027               	movlw	39
  5819  00C1  00FE               	movwf	btemp
  5820  00C2  3000               	movlw	0
  5821  00C3  00FF               	movwf	btemp+1
  5822  00C4  31B1  2185  3180   	fcall	clear_ram0
  5823                           
  5824                           ; Clear objects allocated to BANK5
  5825  00C7  30A0               	movlw	low __pbssBANK5
  5826  00C8  0084               	movwf	4
  5827  00C9  3002               	movlw	high __pbssBANK5
  5828  00CA  0085               	movwf	5
  5829  00CB  3038               	movlw	56
  5830  00CC  00FE               	movwf	btemp
  5831  00CD  3000               	movlw	0
  5832  00CE  00FF               	movwf	btemp+1
  5833  00CF  31B1  2185         	fcall	clear_ram0
  5834  00D1                     end_of_initialization:	
  5835                           ;End of C runtime variable initialization code
  5836                           
  5837  00D1                     __end_of__initialization:	
  5838  00D1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5839  00D2  0140               	movlb	0
  5840  00D3  31AD  2D3B         	ljmp	_main	;jump to C main() function
  5841                           
  5842                           	psect	bssCOMMON
  5843  007C                     __pbssCOMMON:	
  5844  007C                     _tail:	
  5845  007C                     	ds	1
  5846  007D                     _pbState:	
  5847  007D                     	ds	1
  5848                           
  5849                           	psect	bssBANK1
  5850  00EB                     __pbssBANK1:	
  5851  00EB                     _selectedChannel:	
  5852  00EB                     	ds	1
  5853  00EC                     _curRotState:	
  5854  00EC                     	ds	1
  5855                           
  5856                           	psect	dataBANK1
  5857  00ED                     __pdataBANK1:	
  5858  00ED                     _g_screenRefresh:	
  5859  00ED                     	ds	1
  5860                           
  5861                           	psect	bssBANK2
  5862  015C                     __pbssBANK2:	
  5863  015C                     _userActivity:	
  5864  015C                     	ds	4
  5865  0160                     controller@idle:	
  5866  0160                     	ds	1
  5867  0161                     checkSensor@state:	
  5868  0161                     	ds	1
  5869  0162                     paging@lastDir:	
  5870  0162                     	ds	1
  5871  0163                     menu@state:	
  5872  0163                     	ds	1
  5873  0164                     menu@sleep:	
  5874  0164                     	ds	1
  5875  0165                     _head:	
  5876  0165                     	ds	1
  5877  0166                     setup@page:	
  5878  0166                     	ds	1
  5879  0167                     channelSetup@page:	
  5880  0167                     	ds	1
  5881  0168                     channelView@page:	
  5882  0168                     	ds	1
  5883  0169                     statusView@page:	
  5884  0169                     	ds	1
  5885  016A                     uartReceiveISR@checksum:	
  5886  016A                     	ds	1
  5887  016B                     _rxCount:	
  5888  016B                     	ds	1
  5889  016C                     _rotDir:	
  5890  016C                     	ds	1
  5891  016D                     _uartDataReadyFlag:	
  5892  016D                     	ds	1
  5893  016E                     _tick10ms:	
  5894  016E                     	ds	1
  5895                           
  5896                           	psect	dataBANK2
  5897  016F                     __pdataBANK2:	
  5898  016F                     statusView@prevSensorStat:	
  5899  016F                     	ds	1
  5900                           
  5901                           	psect	bssBANK3
  5902  01E0                     __pbssBANK3:	
  5903  01E0                     getAnalogValues@avgV:	
  5904  01E0                     	ds	2
  5905  01E2                     getAnalogValues@avgT:	
  5906  01E2                     	ds	2
  5907  01E4                     _rxOErrCount:	
  5908  01E4                     	ds	1
  5909  01E5                     _rxFErrCount:	
  5910  01E5                     	ds	1
  5911  01E6                     _str:	
  5912  01E6                     	ds	10
  5913                           
  5914                           	psect	bssBANK4
  5915  0220                     __pbssBANK4:	
  5916  0220                     _errorMessageQueue:	
  5917  0220                     	ds	10
  5918  022A                     controller@dutyCycleTimer:	
  5919  022A                     	ds	4
  5920  022E                     checkSensor@sensorTimeout:	
  5921  022E                     	ds	4
  5922  0232                     _tick100ms:	
  5923  0232                     	ds	4
  5924  0236                     getAnalogValues@avgI:	
  5925  0236                     	ds	2
  5926  0238                     _dataPacket:	
  5927  0238                     	ds	15
  5928                           
  5929                           	psect	dataBANK4
  5930  0264                     __pdataBANK4:	
  5931  0264                     checkSensor@sensorUpdateInterval:	
  5932  0264                     	ds	4
  5933  0268                     OLED_print_xy@F7968:	
  5934  0268                     	ds	4
  5935  026C                     OLED_setCursor@F7960:	
  5936  026C                     	ds	4
  5937                           
  5938                           	psect	bssBANK5
  5939  02A0                     __pbssBANK5:	
  5940  02A0                     _virtChannels:	
  5941  02A0                     	ds	36
  5942  02C4                     uartReceiveISR@buffer:	
  5943  02C4                     	ds	20
  5944                           
  5945                           	psect	dataBANK6
  5946  0320                     __pdataBANK6:	
  5947  0320                     OLED_loadSpecialChars@F7971:	
  5948  0320                     	ds	32
  5949                           
  5950                           	psect	inittext
  5951  3191                     init_ram:	
  5952  3191  00FE               	movwf	126
  5953  3192                     initloop:	
  5954  3192  0012               	moviw fsr0++
  5955  3193  001E               	movwi fsr1++
  5956  3194  3001               	movlw	1
  5957  3195  02FE               	subwf	126,f
  5958  3196  3000               	movlw	0
  5959  3197  3BFF               	subwfb	127,f
  5960  3198  087F               	movf	127,w
  5961  3199  047E               	iorwf	126,w
  5962  319A  1903               	btfsc	3,2
  5963  319B  3400               	retlw	0
  5964  319C  2992               	goto	initloop
  5965                           
  5966                           	psect	clrtext
  5967  3185                     clear_ram0:	
  5968                           ;	Called with FSR0 containing the base address, and
  5969                           ;	btemp/btemp+1 has the size to clear
  5970                           
  5971  3185  0064               	clrwdt	;clear the watchdog before getting into this loop
  5972  3186                     clrloop0:	
  5973  3186  0180               	clrf	0	;clear RAM location pointed to by FSR
  5974  3187  3101               	addfsr 0,1
  5975  3188  3001               	movlw	1
  5976  3189  02FE               	subwf	126,f
  5977  318A  3000               	movlw	0
  5978  318B  3BFF               	subwfb	127,f
  5979  318C  087F               	movf	127,w
  5980  318D  047E               	iorwf	126,w
  5981  318E  1903               	btfsc	3,2
  5982  318F  3400               	retlw	0	;all done for this memory range, return
  5983  3190  2986               	goto	clrloop0	;have we reached the end yet?
  5984                           
  5985                           	psect	cstackBANK4
  5986  0247                     __pcstackBANK4:	
  5987  0247                     channelThing@total:	
  5988                           
  5989                           ; 4 bytes @ 0x0
  5990  0247                     	ds	4
  5991  024B                     channelThing@totalGrpA:	
  5992                           
  5993                           ; 4 bytes @ 0x4
  5994  024B                     	ds	4
  5995  024F                     channelThing@totalGrpB:	
  5996                           
  5997                           ; 4 bytes @ 0x8
  5998  024F                     	ds	4
  5999  0253                     channelThing@grpA:	
  6000                           
  6001                           ; 4 bytes @ 0xC
  6002  0253                     	ds	4
  6003  0257                     channelThing@numGrpA:	
  6004                           
  6005                           ; 1 bytes @ 0x10
  6006  0257                     	ds	1
  6007  0258                     channelThing@numGrpB:	
  6008                           
  6009                           ; 1 bytes @ 0x11
  6010  0258                     	ds	1
  6011  0259                     channelThing@grpB:	
  6012                           
  6013                           ; 4 bytes @ 0x12
  6014  0259                     	ds	4
  6015  025D                     channelThing@n:	
  6016                           
  6017                           ; 1 bytes @ 0x16
  6018  025D                     	ds	1
  6019  025E                     main@sysCheckInterval:	
  6020                           
  6021                           ; 4 bytes @ 0x17
  6022  025E                     	ds	4
  6023  0262                     main@initDone:	
  6024                           
  6025                           ; 1 bytes @ 0x1B
  6026  0262                     	ds	1
  6027  0263                     main@idle:	
  6028                           
  6029                           ; 1 bytes @ 0x1C
  6030  0263                     	ds	1
  6031                           
  6032                           	psect	cstackBANK3
  6033  01A0                     __pcstackBANK3:	
  6034  01A0                     qsort@stack:	
  6035                           
  6036                           ; 64 bytes @ 0x0
  6037  01A0                     	ds	64
  6038                           
  6039                           	psect	cstackBANK2
  6040  0120                     __pcstackBANK2:	
  6041  0120                     qsort@xbuf:	
  6042                           
  6043                           ; 60 bytes @ 0x0
  6044  0120                     	ds	60
  6045                           
  6046                           	psect	cstackBANK1
  6047  00A0                     __pcstackBANK1:	
  6048  00A0                     ?___flsub:	
  6049  00A0                     ___flsub@a:	
  6050                           ; 4 bytes @ 0x0
  6051                           
  6052  00A0                     ___fldiv@rem:	
  6053                           ; 4 bytes @ 0x0
  6054                           
  6055  00A0                     storeNVM@nvm:	
  6056                           ; 4 bytes @ 0x0
  6057                           
  6058  00A0                     readNVM@nvm:	
  6059                           ; 32 bytes @ 0x0
  6060                           
  6061                           
  6062                           ; 32 bytes @ 0x0
  6063  00A0                     	ds	4
  6064  00A4                     ___fldiv@sign:	
  6065  00A4                     ___flsub@b:	
  6066                           ; 1 bytes @ 0x4
  6067                           
  6068                           
  6069                           ; 4 bytes @ 0x4
  6070  00A4                     	ds	1
  6071  00A5                     ___fldiv@new_exp:	
  6072                           
  6073                           ; 2 bytes @ 0x5
  6074  00A5                     	ds	2
  6075  00A7                     ___fldiv@grs:	
  6076                           
  6077                           ; 4 bytes @ 0x7
  6078  00A7                     	ds	1
  6079  00A8                     ?___fltol:	
  6080  00A8                     ___fltol@f1:	
  6081                           ; 4 bytes @ 0x8
  6082                           
  6083                           
  6084                           ; 4 bytes @ 0x8
  6085  00A8                     	ds	3
  6086  00AB                     ___fldiv@bexp:	
  6087                           
  6088                           ; 1 bytes @ 0xB
  6089  00AB                     	ds	1
  6090  00AC                     ??___fltol:	
  6091  00AC                     ___fldiv@aexp:	
  6092                           ; 1 bytes @ 0xC
  6093                           
  6094                           
  6095                           ; 1 bytes @ 0xC
  6096  00AC                     	ds	1
  6097  00AD                     ?___flge:	
  6098  00AD                     ??_calcRequiredPower:	
  6099                           ; 1 bit 
  6100                           
  6101  00AD                     ___flge@ff1:	
  6102                           ; 1 bytes @ 0xD
  6103                           
  6104  00AD                     _getAnalogValues$2784:	
  6105                           ; 4 bytes @ 0xD
  6106                           
  6107                           
  6108                           ; 4 bytes @ 0xD
  6109  00AD                     	ds	4
  6110  00B1                     ___fltol@sign1:	
  6111  00B1                     getAnalogValues@adc:	
  6112                           ; 1 bytes @ 0x11
  6113                           
  6114  00B1                     calcRequiredPower@p:	
  6115                           ; 2 bytes @ 0x11
  6116                           
  6117  00B1                     ___flge@ff2:	
  6118                           ; 4 bytes @ 0x11
  6119                           
  6120                           
  6121                           ; 4 bytes @ 0x11
  6122  00B1                     	ds	1
  6123  00B2                     ___fltol@exp1:	
  6124                           
  6125                           ; 1 bytes @ 0x12
  6126  00B2                     	ds	1
  6127  00B3                     ?_sortDC:	
  6128  00B3                     ?_sortDCRev:	
  6129                           ; 2 bytes @ 0x13
  6130                           
  6131  00B3                     ?_sortCur:	
  6132                           ; 2 bytes @ 0x13
  6133                           
  6134  00B3                     sortDC@cmp1:	
  6135                           ; 2 bytes @ 0x13
  6136                           
  6137  00B3                     sortDCRev@cmp1:	
  6138                           ; 2 bytes @ 0x13
  6139                           
  6140  00B3                     sortCur@cmp1:	
  6141                           ; 2 bytes @ 0x13
  6142                           
  6143                           
  6144                           ; 2 bytes @ 0x13
  6145  00B3                     	ds	2
  6146  00B5                     ??___flge:	
  6147  00B5                     sortDC@cmp2:	
  6148                           ; 1 bytes @ 0x15
  6149                           
  6150  00B5                     sortDCRev@cmp2:	
  6151                           ; 2 bytes @ 0x15
  6152                           
  6153  00B5                     sortCur@cmp2:	
  6154                           ; 2 bytes @ 0x15
  6155                           
  6156  00B5                     calcRequiredPower@Rth:	
  6157                           ; 2 bytes @ 0x15
  6158                           
  6159                           
  6160                           ; 4 bytes @ 0x15
  6161  00B5                     	ds	2
  6162  00B7                     ??_sortDC:	
  6163  00B7                     ??_sortDCRev:	
  6164                           ; 1 bytes @ 0x17
  6165                           
  6166  00B7                     sortCur@a:	
  6167                           ; 1 bytes @ 0x17
  6168                           
  6169                           
  6170                           ; 2 bytes @ 0x17
  6171  00B7                     	ds	2
  6172  00B9                     ??_systemCheck:	
  6173  00B9                     ??_checkSensor:	
  6174                           ; 1 bytes @ 0x19
  6175                           
  6176  00B9                     ??_checkChannelStatus:	
  6177                           ; 1 bytes @ 0x19
  6178                           
  6179  00B9                     ?_ftoa:	
  6180                           ; 1 bytes @ 0x19
  6181                           
  6182  00B9                     ?_spinInput:	
  6183                           ; 1 bytes @ 0x19
  6184                           
  6185  00B9                     sortDC@a:	
  6186                           ; 1 bytes @ 0x19
  6187                           
  6188  00B9                     sortDCRev@a:	
  6189                           ; 1 bytes @ 0x19
  6190                           
  6191  00B9                     spinInput@input:	
  6192                           ; 1 bytes @ 0x19
  6193                           
  6194  00B9                     sortCur@b:	
  6195                           ; 2 bytes @ 0x19
  6196                           
  6197  00B9                     ftoa@fValue:	
  6198                           ; 2 bytes @ 0x19
  6199                           
  6200  00B9                     _calcRequiredPower$2778:	
  6201                           ; 4 bytes @ 0x19
  6202                           
  6203                           
  6204                           ; 4 bytes @ 0x19
  6205  00B9                     	ds	1
  6206  00BA                     sortDC@b:	
  6207  00BA                     sortDCRev@b:	
  6208                           ; 1 bytes @ 0x1A
  6209                           
  6210                           
  6211                           ; 1 bytes @ 0x1A
  6212  00BA                     	ds	1
  6213  00BB                     ?_qsort:	
  6214  00BB                     qsort@nel:	
  6215                           ; 1 bytes @ 0x1B
  6216                           
  6217  00BB                     spinInput@min:	
  6218                           ; 2 bytes @ 0x1B
  6219                           
  6220                           
  6221                           ; 4 bytes @ 0x1B
  6222  00BB                     	ds	2
  6223  00BD                     ftoa@width:	
  6224  00BD                     checkChannelStatus@adc:	
  6225                           ; 1 bytes @ 0x1D
  6226                           
  6227  00BD                     qsort@width:	
  6228                           ; 2 bytes @ 0x1D
  6229                           
  6230  00BD                     systemCheck@str:	
  6231                           ; 2 bytes @ 0x1D
  6232                           
  6233  00BD                     _calcRequiredPower$2779:	
  6234                           ; 3 bytes @ 0x1D
  6235                           
  6236                           
  6237                           ; 4 bytes @ 0x1D
  6238  00BD                     	ds	1
  6239  00BE                     ftoa@prec:	
  6240                           
  6241                           ; 1 bytes @ 0x1E
  6242  00BE                     	ds	1
  6243  00BF                     ??_ftoa:	
  6244  00BF                     qsort@compar:	
  6245                           ; 1 bytes @ 0x1F
  6246                           
  6247  00BF                     spinInput@max:	
  6248                           ; 2 bytes @ 0x1F
  6249                           
  6250  00BF                     _checkChannelStatus$1891:	
  6251                           ; 4 bytes @ 0x1F
  6252                           
  6253                           
  6254                           ; 4 bytes @ 0x1F
  6255  00BF                     	ds	2
  6256  00C1                     ??_qsort:	
  6257  00C1                     ftoa@len:	
  6258                           ; 1 bytes @ 0x21
  6259                           
  6260  00C1                     _calcRequiredPower$2780:	
  6261                           ; 1 bytes @ 0x21
  6262                           
  6263                           
  6264                           ; 4 bytes @ 0x21
  6265  00C1                     	ds	1
  6266  00C2                     ftoa@sign:	
  6267                           
  6268                           ; 1 bytes @ 0x22
  6269  00C2                     	ds	1
  6270  00C3                     ftoa@intValue:	
  6271  00C3                     spinInput@step:	
  6272                           ; 1 bytes @ 0x23
  6273                           
  6274  00C3                     _checkChannelStatus$1892:	
  6275                           ; 4 bytes @ 0x23
  6276                           
  6277                           
  6278                           ; 4 bytes @ 0x23
  6279  00C3                     	ds	1
  6280  00C4                     ftoa@w:	
  6281                           
  6282                           ; 1 bytes @ 0x24
  6283  00C4                     	ds	1
  6284  00C5                     ftoa@pos:	
  6285  00C5                     _calcRequiredPower$2781:	
  6286                           ; 1 bytes @ 0x25
  6287                           
  6288                           
  6289                           ; 4 bytes @ 0x25
  6290  00C5                     	ds	1
  6291  00C6                     ftoa@str:	
  6292  00C6                     qsort@vbase:	
  6293                           ; 1 bytes @ 0x26
  6294                           
  6295                           
  6296                           ; 1 bytes @ 0x26
  6297  00C6                     	ds	1
  6298  00C7                     ??_statusView:	
  6299  00C7                     ??_channelView:	
  6300                           ; 1 bytes @ 0x27
  6301                           
  6302  00C7                     ??_channelSetup:	
  6303                           ; 1 bytes @ 0x27
  6304                           
  6305  00C7                     ??_setup:	
  6306                           ; 1 bytes @ 0x27
  6307                           
  6308  00C7                     spinInput@dir:	
  6309                           ; 1 bytes @ 0x27
  6310                           
  6311  00C7                     checkChannelStatus@samples:	
  6312                           ; 1 bytes @ 0x27
  6313                           
  6314  00C7                     qsort@x:	
  6315                           ; 1 bytes @ 0x27
  6316                           
  6317                           
  6318                           ; 1 bytes @ 0x27
  6319  00C7                     	ds	1
  6320  00C8                     ??_setOutputPower:	
  6321  00C8                     ??_setLensDia:	
  6322                           ; 1 bytes @ 0x28
  6323                           
  6324  00C8                     ??_setDPOffset:	
  6325                           ; 1 bytes @ 0x28
  6326                           
  6327  00C8                     ??_setSkyTemp:	
  6328                           ; 1 bytes @ 0x28
  6329                           
  6330  00C8                     ??_setFudgeFactor:	
  6331                           ; 1 bytes @ 0x28
  6332                           
  6333  00C8                     qsort@base:	
  6334                           ; 1 bytes @ 0x28
  6335                           
  6336  00C8                     checkChannelStatus@avg:	
  6337                           ; 1 bytes @ 0x28
  6338                           
  6339                           
  6340                           ; 2 bytes @ 0x28
  6341  00C8                     	ds	1
  6342  00C9                     qsort@l:	
  6343  00C9                     _calcRequiredPower$2782:	
  6344                           ; 2 bytes @ 0x29
  6345                           
  6346                           
  6347                           ; 4 bytes @ 0x29
  6348  00C9                     	ds	1
  6349  00CA                     checkChannelStatus@current:	
  6350                           
  6351                           ; 4 bytes @ 0x2A
  6352  00CA                     	ds	1
  6353  00CB                     channelSetup@heater:	
  6354  00CB                     qsort@r:	
  6355                           ; 2 bytes @ 0x2B
  6356                           
  6357                           
  6358                           ; 2 bytes @ 0x2B
  6359  00CB                     	ds	1
  6360  00CC                     setOutputPower@heater:	
  6361  00CC                     _setLensDia$2776:	
  6362                           ; 2 bytes @ 0x2C
  6363                           
  6364                           
  6365                           ; 4 bytes @ 0x2C
  6366  00CC                     	ds	1
  6367  00CD                     qsort@s:	
  6368  00CD                     _channelView$2775:	
  6369                           ; 2 bytes @ 0x2D
  6370                           
  6371  00CD                     _calcRequiredPower$2783:	
  6372                           ; 4 bytes @ 0x2D
  6373                           
  6374                           
  6375                           ; 4 bytes @ 0x2D
  6376  00CD                     	ds	1
  6377  00CE                     checkChannelStatus@channel:	
  6378                           
  6379                           ; 1 bytes @ 0x2E
  6380  00CE                     	ds	1
  6381  00CF                     checkChannelStatus@heater:	
  6382  00CF                     qsort@i:	
  6383                           ; 2 bytes @ 0x2F
  6384                           
  6385                           
  6386                           ; 2 bytes @ 0x2F
  6387  00CF                     	ds	2
  6388  00D1                     channelView@n:	
  6389  00D1                     qsort@j:	
  6390                           ; 1 bytes @ 0x31
  6391                           
  6392  00D1                     calcRequiredPower@d:	
  6393                           ; 2 bytes @ 0x31
  6394                           
  6395                           
  6396                           ; 4 bytes @ 0x31
  6397  00D1                     	ds	1
  6398  00D2                     ??_menu:	
  6399                           
  6400                           ; 1 bytes @ 0x32
  6401  00D2                     	ds	1
  6402  00D3                     ??_channelThing:	
  6403                           
  6404                           ; 1 bytes @ 0x33
  6405  00D3                     	ds	2
  6406  00D5                     calcRequiredPower@phi:	
  6407                           
  6408                           ; 4 bytes @ 0x35
  6409  00D5                     	ds	1
  6410  00D6                     menu@page:	
  6411                           
  6412                           ; 1 bytes @ 0x36
  6413  00D6                     	ds	1
  6414  00D7                     menu@pb:	
  6415                           
  6416                           ; 1 bytes @ 0x37
  6417  00D7                     	ds	1
  6418  00D8                     menu@timeout:	
  6419                           
  6420                           ; 1 bytes @ 0x38
  6421  00D8                     	ds	1
  6422  00D9                     menu@func:	
  6423  00D9                     calcRequiredPower@A:	
  6424                           ; 2 bytes @ 0x39
  6425                           
  6426                           
  6427                           ; 4 bytes @ 0x39
  6428  00D9                     	ds	2
  6429  00DB                     menu@nextState:	
  6430                           
  6431                           ; 1 bytes @ 0x3B
  6432  00DB                     	ds	2
  6433  00DD                     _calcRequiredPower$2777:	
  6434                           
  6435                           ; 4 bytes @ 0x3D
  6436  00DD                     	ds	4
  6437  00E1                     calcRequiredPower@T1:	
  6438                           
  6439                           ; 4 bytes @ 0x41
  6440  00E1                     	ds	4
  6441  00E5                     calcRequiredPower@T2:	
  6442                           
  6443                           ; 4 bytes @ 0x45
  6444  00E5                     	ds	4
  6445  00E9                     calcRequiredPower@n:	
  6446                           
  6447                           ; 1 bytes @ 0x49
  6448  00E9                     	ds	1
  6449  00EA                     ??_main:	
  6450                           
  6451                           ; 1 bytes @ 0x4A
  6452  00EA                     	ds	1
  6453                           
  6454                           	psect	cstackCOMMON
  6455  0070                     __pcstackCOMMON:	
  6456  0070                     ?_initialize:	
  6457  0070                     ?_OLED_init:	
  6458                           ; 1 bytes @ 0x0
  6459                           
  6460  0070                     ?_OLED_loadSpecialChars:	
  6461                           ; 1 bytes @ 0x0
  6462                           
  6463  0070                     ?_OLED_command:	
  6464                           ; 1 bytes @ 0x0
  6465                           
  6466  0070                     ?_initGlobalData:	
  6467                           ; 1 bytes @ 0x0
  6468                           
  6469  0070                     ?_readNVM:	
  6470                           ; 1 bytes @ 0x0
  6471                           
  6472  0070                     ?_getAnalogValues:	
  6473                           ; 1 bytes @ 0x0
  6474                           
  6475  0070                     ?_systemCheck:	
  6476                           ; 1 bytes @ 0x0
  6477                           
  6478  0070                     ?_checkSensor:	
  6479                           ; 1 bytes @ 0x0
  6480                           
  6481  0070                     ?_calcRequiredPower:	
  6482                           ; 1 bytes @ 0x0
  6483                           
  6484  0070                     ?_checkChannelStatus:	
  6485                           ; 1 bytes @ 0x0
  6486                           
  6487  0070                     ?_channelThing:	
  6488                           ; 1 bytes @ 0x0
  6489                           
  6490  0070                     ?_controller:	
  6491                           ; 1 bytes @ 0x0
  6492                           
  6493  0070                     ?_getLastError:	
  6494                           ; 1 bytes @ 0x0
  6495                           
  6496  0070                     ?_viewErrorMessage:	
  6497                           ; 1 bytes @ 0x0
  6498                           
  6499  0070                     ?_menu:	
  6500                           ; 1 bytes @ 0x0
  6501                           
  6502  0070                     ?_pushButtonISR:	
  6503                           ; 1 bytes @ 0x0
  6504                           
  6505  0070                     ??_pushButtonISR:	
  6506                           ; 1 bytes @ 0x0
  6507                           
  6508  0070                     ?_rotISR:	
  6509                           ; 1 bytes @ 0x0
  6510                           
  6511  0070                     ??_rotISR:	
  6512                           ; 1 bytes @ 0x0
  6513                           
  6514  0070                     ?_uartReceiveISR:	
  6515                           ; 1 bytes @ 0x0
  6516                           
  6517  0070                     ?_strncpy:	
  6518                           ; 1 bytes @ 0x0
  6519                           
  6520  0070                     ?_returnToPage:	
  6521                           ; 1 bytes @ 0x0
  6522                           
  6523  0070                     ?_storeNVM:	
  6524                           ; 1 bytes @ 0x0
  6525                           
  6526  0070                     ?_main:	
  6527                           ; 1 bytes @ 0x0
  6528                           
  6529  0070                     ?_OLED_off:	
  6530                           ; 1 bytes @ 0x0
  6531                           
  6532  0070                     ?_OLED_write4bits:	
  6533                           ; 1 bytes @ 0x0
  6534                           
  6535  0070                     ?_OLED_waitForReady:	
  6536                           ; 1 bytes @ 0x0
  6537                           
  6538  0070                     ?_OLED_write:	
  6539                           ; 1 bytes @ 0x0
  6540                           
  6541  0070                     ?_ISR:	
  6542                           ; 1 bytes @ 0x0
  6543                           
  6544  0070                     ?_getRotDir:	
  6545                           ; 1 bytes @ 0x0
  6546                           
  6547  0070                     ?_getPB:	
  6548                           ; 1 bytes @ 0x0
  6549                           
  6550  0070                     ?_uartSendByte:	
  6551                           ; 1 bytes @ 0x0
  6552                           
  6553  0070                     ?_uartReset:	
  6554                           ; 1 bytes @ 0x0
  6555                           
  6556  0070                     ?_statusView:	
  6557                           ; 1 bytes @ 0x0
  6558                           
  6559  0070                     ?_channelView:	
  6560                           ; 1 bytes @ 0x0
  6561                           
  6562  0070                     ?_channelSetup:	
  6563                           ; 1 bytes @ 0x0
  6564                           
  6565  0070                     ?_setOutputPower:	
  6566                           ; 1 bytes @ 0x0
  6567                           
  6568  0070                     ?_setLensDia:	
  6569                           ; 1 bytes @ 0x0
  6570                           
  6571  0070                     ?_setup:	
  6572                           ; 1 bytes @ 0x0
  6573                           
  6574  0070                     ?_setDPOffset:	
  6575                           ; 1 bytes @ 0x0
  6576                           
  6577  0070                     ?_setSkyTemp:	
  6578                           ; 1 bytes @ 0x0
  6579                           
  6580  0070                     ?_setFudgeFactor:	
  6581                           ; 1 bytes @ 0x0
  6582                           
  6583  0070                     ?_error:	
  6584                           ; 1 bytes @ 0x0
  6585                           
  6586  0070                     strncpy@s:	
  6587                           ; 1 bytes @ 0x0
  6588                           
  6589                           
  6590                           ; 1 bytes @ 0x0
  6591  0070                     	ds	1
  6592  0071                     pushButtonISR@time:	
  6593  0071                     strncpy@n:	
  6594                           ; 1 bytes @ 0x1
  6595                           
  6596                           
  6597                           ; 2 bytes @ 0x1
  6598  0071                     	ds	2
  6599  0073                     ??_strncpy:	
  6600                           
  6601                           ; 1 bytes @ 0x3
  6602  0073                     	ds	1
  6603  0074                     strncpy@d:	
  6604                           
  6605                           ; 1 bytes @ 0x4
  6606  0074                     	ds	1
  6607  0075                     strncpy@cp:	
  6608                           
  6609                           ; 1 bytes @ 0x5
  6610  0075                     	ds	1
  6611  0076                     ??_uartReceiveISR:	
  6612                           
  6613                           ; 1 bytes @ 0x6
  6614  0076                     	ds	1
  6615  0077                     rotISR@input:	
  6616                           
  6617                           ; 1 bytes @ 0x7
  6618  0077                     	ds	1
  6619  0078                     ??_ISR:	
  6620                           
  6621                           ; 1 bytes @ 0x8
  6622  0078                     	ds	4
  6623                           
  6624                           	psect	cstackBANK0
  6625  0020                     __pcstackBANK0:	
  6626  0020                     ?___fleq:	
  6627  0020                     ??_initialize:	
  6628                           ; 1 bit 
  6629                           
  6630  0020                     ??_getLastError:	
  6631                           ; 1 bytes @ 0x0
  6632                           
  6633  0020                     ?_FLASH_EraseBlock:	
  6634                           ; 1 bytes @ 0x0
  6635                           
  6636  0020                     ??_OLED_write4bits:	
  6637                           ; 1 bytes @ 0x0
  6638                           
  6639  0020                     ??_OLED_waitForReady:	
  6640                           ; 1 bytes @ 0x0
  6641                           
  6642  0020                     ??_getRotDir:	
  6643                           ; 1 bytes @ 0x0
  6644                           
  6645  0020                     ??_getPB:	
  6646                           ; 1 bytes @ 0x0
  6647                           
  6648  0020                     ??_uartSendByte:	
  6649                           ; 1 bytes @ 0x0
  6650                           
  6651  0020                     ??_uartReset:	
  6652                           ; 1 bytes @ 0x0
  6653                           
  6654  0020                     ?_FLASH_ReadWord:	
  6655                           ; 1 bytes @ 0x0
  6656                           
  6657  0020                     ?__Umul8_16:	
  6658                           ; 2 bytes @ 0x0
  6659                           
  6660  0020                     ?_getAnalogValue:	
  6661                           ; 2 bytes @ 0x0
  6662                           
  6663  0020                     ?___awdiv:	
  6664                           ; 2 bytes @ 0x0
  6665                           
  6666  0020                     ?___awmod:	
  6667                           ; 2 bytes @ 0x0
  6668                           
  6669  0020                     ?_timeSince:	
  6670                           ; 2 bytes @ 0x0
  6671                           
  6672  0020                     ?___lmul:	
  6673                           ; 4 bytes @ 0x0
  6674                           
  6675  0020                     OLED_waitForReady@busy:	
  6676                           ; 4 bytes @ 0x0
  6677                           
  6678  0020                     uartSendByte@s:	
  6679                           ; 1 bytes @ 0x0
  6680                           
  6681  0020                     __Umul8_16@multiplicand:	
  6682                           ; 1 bytes @ 0x0
  6683                           
  6684  0020                     FLASH_ReadWord@flashAddr:	
  6685                           ; 1 bytes @ 0x0
  6686                           
  6687  0020                     FLASH_EraseBlock@startAddr:	
  6688                           ; 2 bytes @ 0x0
  6689                           
  6690  0020                     ___awdiv@divisor:	
  6691                           ; 2 bytes @ 0x0
  6692                           
  6693  0020                     ___awmod@divisor:	
  6694                           ; 2 bytes @ 0x0
  6695                           
  6696  0020                     timeSince@since:	
  6697                           ; 2 bytes @ 0x0
  6698                           
  6699  0020                     ___lmul@multiplier:	
  6700                           ; 4 bytes @ 0x0
  6701                           
  6702  0020                     ___fleq@ff1:	
  6703                           ; 4 bytes @ 0x0
  6704                           
  6705                           
  6706                           ; 4 bytes @ 0x0
  6707  0020                     	ds	1
  6708  0021                     getRotDir@ret:	
  6709  0021                     getPB@ret:	
  6710                           ; 1 bytes @ 0x1
  6711                           
  6712                           
  6713                           ; 1 bytes @ 0x1
  6714  0021                     	ds	1
  6715  0022                     ??_FLASH_EraseBlock:	
  6716  0022                     ??_FLASH_ReadWord:	
  6717                           ; 1 bytes @ 0x2
  6718                           
  6719  0022                     ??__Umul8_16:	
  6720                           ; 1 bytes @ 0x2
  6721                           
  6722  0022                     ??_getAnalogValue:	
  6723                           ; 1 bytes @ 0x2
  6724                           
  6725  0022                     OLED_write4bits@value:	
  6726                           ; 1 bytes @ 0x2
  6727                           
  6728  0022                     FLASH_ReadWord@GIEBitValue:	
  6729                           ; 1 bytes @ 0x2
  6730                           
  6731  0022                     FLASH_EraseBlock@GIEBitValue:	
  6732                           ; 1 bytes @ 0x2
  6733                           
  6734  0022                     _getLastError$1381:	
  6735                           ; 1 bytes @ 0x2
  6736                           
  6737  0022                     ___awdiv@dividend:	
  6738                           ; 2 bytes @ 0x2
  6739                           
  6740  0022                     ___awmod@dividend:	
  6741                           ; 2 bytes @ 0x2
  6742                           
  6743                           
  6744                           ; 2 bytes @ 0x2
  6745  0022                     	ds	1
  6746  0023                     ??_readNVM:	
  6747  0023                     ?_FLASH_WriteBlock:	
  6748                           ; 1 bytes @ 0x3
  6749                           
  6750  0023                     ?_OLED_send:	
  6751                           ; 1 bytes @ 0x3
  6752                           
  6753  0023                     OLED_send@mode:	
  6754                           ; 1 bytes @ 0x3
  6755                           
  6756  0023                     getAnalogValue@channel:	
  6757                           ; 1 bytes @ 0x3
  6758                           
  6759  0023                     FLASH_WriteBlock@writeAddr:	
  6760                           ; 1 bytes @ 0x3
  6761                           
  6762                           
  6763                           ; 2 bytes @ 0x3
  6764  0023                     	ds	1
  6765  0024                     ??_timeSince:	
  6766  0024                     ??_OLED_send:	
  6767                           ; 1 bytes @ 0x4
  6768                           
  6769  0024                     ??___awdiv:	
  6770                           ; 1 bytes @ 0x4
  6771                           
  6772  0024                     ??___awmod:	
  6773                           ; 1 bytes @ 0x4
  6774                           
  6775  0024                     __Umul8_16@product:	
  6776                           ; 1 bytes @ 0x4
  6777                           
  6778  0024                     ___lmul@multiplicand:	
  6779                           ; 2 bytes @ 0x4
  6780                           
  6781  0024                     ___fleq@ff2:	
  6782                           ; 4 bytes @ 0x4
  6783                           
  6784  0024                     readNVM@buf:	
  6785                           ; 4 bytes @ 0x4
  6786                           
  6787                           
  6788                           ; 64 bytes @ 0x4
  6789  0024                     	ds	1
  6790  0025                     OLED_send@value:	
  6791  0025                     FLASH_WriteBlock@flashWordArray:	
  6792                           ; 1 bytes @ 0x5
  6793                           
  6794  0025                     ___awdiv@counter:	
  6795                           ; 1 bytes @ 0x5
  6796                           
  6797  0025                     ___awmod@counter:	
  6798                           ; 1 bytes @ 0x5
  6799                           
  6800                           
  6801                           ; 1 bytes @ 0x5
  6802  0025                     	ds	1
  6803  0026                     ??_OLED_command:	
  6804  0026                     ??_FLASH_WriteBlock:	
  6805                           ; 1 bytes @ 0x6
  6806                           
  6807  0026                     ??_OLED_write:	
  6808                           ; 1 bytes @ 0x6
  6809                           
  6810  0026                     OLED_command@value:	
  6811                           ; 1 bytes @ 0x6
  6812                           
  6813  0026                     OLED_write@value:	
  6814                           ; 1 bytes @ 0x6
  6815                           
  6816  0026                     ___awdiv@sign:	
  6817                           ; 1 bytes @ 0x6
  6818                           
  6819  0026                     ___awmod@sign:	
  6820                           ; 1 bytes @ 0x6
  6821                           
  6822  0026                     __Umul8_16@word_mpld:	
  6823                           ; 1 bytes @ 0x6
  6824                           
  6825                           
  6826                           ; 2 bytes @ 0x6
  6827  0026                     	ds	1
  6828  0027                     ??_OLED_init:	
  6829  0027                     ??_OLED_loadSpecialChars:	
  6830                           ; 1 bytes @ 0x7
  6831                           
  6832  0027                     ?_paging:	
  6833                           ; 1 bytes @ 0x7
  6834                           
  6835  0027                     ??_OLED_off:	
  6836                           ; 1 bytes @ 0x7
  6837                           
  6838  0027                     ??_error:	
  6839                           ; 1 bytes @ 0x7
  6840                           
  6841  0027                     paging@lastPage:	
  6842                           ; 1 bytes @ 0x7
  6843                           
  6844  0027                     ___awdiv@quotient:	
  6845                           ; 1 bytes @ 0x7
  6846                           
  6847                           
  6848                           ; 2 bytes @ 0x7
  6849  0027                     	ds	1
  6850  0028                     ??_paging:	
  6851  0028                     ??___lmul:	
  6852                           ; 1 bytes @ 0x8
  6853                           
  6854  0028                     ??___fleq:	
  6855                           ; 1 bytes @ 0x8
  6856                           
  6857  0028                     error@error:	
  6858                           ; 1 bytes @ 0x8
  6859                           
  6860  0028                     __Umul8_16@multiplier:	
  6861                           ; 1 bytes @ 0x8
  6862                           
  6863  0028                     ___lmul@product:	
  6864                           ; 1 bytes @ 0x8
  6865                           
  6866  0028                     OLED_loadSpecialChars@special:	
  6867                           ; 4 bytes @ 0x8
  6868                           
  6869                           
  6870                           ; 32 bytes @ 0x8
  6871  0028                     	ds	1
  6872  0029                     ?_itoa:	
  6873  0029                     ?___bmul:	
  6874                           ; 1 bytes @ 0x9
  6875                           
  6876  0029                     ___bmul@multiplicand:	
  6877                           ; 1 bytes @ 0x9
  6878                           
  6879  0029                     itoa@str:	
  6880                           ; 1 bytes @ 0x9
  6881                           
  6882  0029                     FLASH_WriteBlock@blockStartAddr:	
  6883                           ; 2 bytes @ 0x9
  6884                           
  6885                           
  6886                           ; 2 bytes @ 0x9
  6887  0029                     	ds	1
  6888  002A                     ??___bmul:	
  6889  002A                     paging@currentPage:	
  6890                           ; 1 bytes @ 0xA
  6891                           
  6892                           
  6893                           ; 1 bytes @ 0xA
  6894  002A                     	ds	1
  6895  002B                     paging@dir:	
  6896  002B                     itoa@value:	
  6897                           ; 1 bytes @ 0xB
  6898                           
  6899  002B                     FLASH_WriteBlock@GIEBitValue:	
  6900                           ; 1 bytes @ 0xB
  6901                           
  6902  002B                     ___bmul@product:	
  6903                           ; 1 bytes @ 0xB
  6904                           
  6905                           
  6906                           ; 1 bytes @ 0xB
  6907  002B                     	ds	1
  6908  002C                     ?_ema:	
  6909  002C                     paging@n:	
  6910                           ; 2 bytes @ 0xC
  6911                           
  6912  002C                     itoa@width:	
  6913                           ; 1 bytes @ 0xC
  6914                           
  6915  002C                     FLASH_WriteBlock@i:	
  6916                           ; 1 bytes @ 0xC
  6917                           
  6918  002C                     ___bmul@multiplier:	
  6919                           ; 1 bytes @ 0xC
  6920                           
  6921  002C                     ema@in:	
  6922                           ; 1 bytes @ 0xC
  6923                           
  6924  002C                     timeSince@now:	
  6925                           ; 2 bytes @ 0xC
  6926                           
  6927                           
  6928                           ; 4 bytes @ 0xC
  6929  002C                     	ds	1
  6930  002D                     ??_itoa:	
  6931  002D                     ??_storeNVM:	
  6932                           ; 1 bytes @ 0xD
  6933                           
  6934  002D                     ?_memcpy:	
  6935                           ; 1 bytes @ 0xD
  6936                           
  6937  002D                     ?_OLED_print_xy:	
  6938                           ; 1 bytes @ 0xD
  6939                           
  6940  002D                     ?_setChannelSwitch:	
  6941                           ; 1 bytes @ 0xD
  6942                           
  6943  002D                     ?_swap:	
  6944                           ; 1 bytes @ 0xD
  6945                           
  6946  002D                     ?___wmul:	
  6947                           ; 1 bytes @ 0xD
  6948                           
  6949  002D                     OLED_print_xy@row:	
  6950                           ; 2 bytes @ 0xD
  6951                           
  6952  002D                     setChannelSwitch@state:	
  6953                           ; 1 bytes @ 0xD
  6954                           
  6955  002D                     memcpy@s1:	
  6956                           ; 1 bytes @ 0xD
  6957                           
  6958  002D                     ___wmul@multiplier:	
  6959                           ; 1 bytes @ 0xD
  6960                           
  6961  002D                     swap@len:	
  6962                           ; 2 bytes @ 0xD
  6963                           
  6964                           
  6965                           ; 2 bytes @ 0xD
  6966  002D                     	ds	1
  6967  002E                     ??_setChannelSwitch:	
  6968  002E                     OLED_print_xy@s:	
  6969                           ; 1 bytes @ 0xE
  6970                           
  6971  002E                     ema@average:	
  6972                           ; 2 bytes @ 0xE
  6973                           
  6974  002E                     memcpy@n:	
  6975                           ; 2 bytes @ 0xE
  6976                           
  6977                           
  6978                           ; 2 bytes @ 0xE
  6979  002E                     	ds	1
  6980  002F                     swap@s1:	
  6981  002F                     ___wmul@multiplicand:	
  6982                           ; 1 bytes @ 0xF
  6983                           
  6984  002F                     storeNVM@buf:	
  6985                           ; 2 bytes @ 0xF
  6986                           
  6987                           
  6988                           ; 64 bytes @ 0xF
  6989  002F                     	ds	1
  6990  0030                     ??_memcpy:	
  6991  0030                     ??_OLED_print_xy:	
  6992                           ; 1 bytes @ 0x10
  6993                           
  6994  0030                     setChannelSwitch@channel:	
  6995                           ; 1 bytes @ 0x10
  6996                           
  6997  0030                     swap@s2:	
  6998                           ; 1 bytes @ 0x10
  6999                           
  7000  0030                     ema@alpha:	
  7001                           ; 1 bytes @ 0x10
  7002                           
  7003                           
  7004                           ; 4 bytes @ 0x10
  7005  0030                     	ds	1
  7006  0031                     ??_controller:	
  7007  0031                     ??___wmul:	
  7008                           ; 1 bytes @ 0x11
  7009                           
  7010  0031                     ??_swap:	
  7011                           ; 1 bytes @ 0x11
  7012                           
  7013  0031                     memcpy@tmp:	
  7014                           ; 1 bytes @ 0x11
  7015                           
  7016  0031                     ___wmul@product:	
  7017                           ; 1 bytes @ 0x11
  7018                           
  7019  0031                     OLED_print_xy@row_offsets:	
  7020                           ; 2 bytes @ 0x11
  7021                           
  7022                           
  7023                           ; 4 bytes @ 0x11
  7024  0031                     	ds	1
  7025  0032                     swap@c:	
  7026  0032                     memcpy@d1:	
  7027                           ; 1 bytes @ 0x12
  7028                           
  7029                           
  7030                           ; 1 bytes @ 0x12
  7031  0032                     	ds	1
  7032  0033                     ??_initGlobalData:	
  7033  0033                     ??_returnToPage:	
  7034                           ; 1 bytes @ 0x13
  7035                           
  7036  0033                     ?_getNextState:	
  7037                           ; 1 bytes @ 0x13
  7038                           
  7039  0033                     ?___xxtofl:	
  7040                           ; 1 bytes @ 0x13
  7041                           
  7042  0033                     getNextState@intState:	
  7043                           ; 4 bytes @ 0x13
  7044                           
  7045  0033                     memcpy@d:	
  7046                           ; 1 bytes @ 0x13
  7047                           
  7048  0033                     ___xxtofl@val:	
  7049                           ; 1 bytes @ 0x13
  7050                           
  7051                           
  7052                           ; 4 bytes @ 0x13
  7053  0033                     	ds	1
  7054  0034                     ??_ema:	
  7055  0034                     getNextState@pb:	
  7056                           ; 1 bytes @ 0x14
  7057                           
  7058  0034                     memcpy@s:	
  7059                           ; 1 bytes @ 0x14
  7060                           
  7061                           
  7062                           ; 1 bytes @ 0x14
  7063  0034                     	ds	1
  7064  0035                     OLED_print_xy@col:	
  7065  0035                     getNextState@timeout:	
  7066                           ; 1 bytes @ 0x15
  7067                           
  7068  0035                     returnToPage@page:	
  7069                           ; 1 bytes @ 0x15
  7070                           
  7071                           
  7072                           ; 1 bytes @ 0x15
  7073  0035                     	ds	1
  7074  0036                     ??_viewErrorMessage:	
  7075  0036                     ??_getNextState:	
  7076                           ; 1 bytes @ 0x16
  7077                           
  7078  0036                     returnToPage@n:	
  7079                           ; 1 bytes @ 0x16
  7080                           
  7081  0036                     controller@tick:	
  7082                           ; 1 bytes @ 0x16
  7083                           
  7084                           
  7085                           ; 4 bytes @ 0x16
  7086  0036                     	ds	1
  7087  0037                     ??___xxtofl:	
  7088  0037                     initGlobalData@n:	
  7089                           ; 1 bytes @ 0x17
  7090                           
  7091                           
  7092                           ; 1 bytes @ 0x17
  7093  0037                     	ds	1
  7094  0038                     viewErrorMessage@errorCode:	
  7095  0038                     initGlobalData@heater:	
  7096                           ; 1 bytes @ 0x18
  7097                           
  7098                           
  7099                           ; 2 bytes @ 0x18
  7100  0038                     	ds	1
  7101  0039                     getNextState@state:	
  7102  0039                     _viewErrorMessage$1384:	
  7103                           ; 1 bytes @ 0x19
  7104                           
  7105                           
  7106                           ; 2 bytes @ 0x19
  7107  0039                     	ds	1
  7108  003A                     getNextState@n:	
  7109  003A                     controller@n:	
  7110                           ; 1 bytes @ 0x1A
  7111                           
  7112                           
  7113                           ; 1 bytes @ 0x1A
  7114  003A                     	ds	1
  7115  003B                     ___xxtofl@sign:	
  7116                           
  7117                           ; 1 bytes @ 0x1B
  7118  003B                     	ds	1
  7119  003C                     ___xxtofl@exp:	
  7120  003C                     ema@tmp0:	
  7121                           ; 1 bytes @ 0x1C
  7122                           
  7123                           
  7124                           ; 4 bytes @ 0x1C
  7125  003C                     	ds	1
  7126  003D                     ___xxtofl@arg:	
  7127                           
  7128                           ; 4 bytes @ 0x1D
  7129  003D                     	ds	4
  7130  0041                     ?___flmul:	
  7131  0041                     ___flmul@b:	
  7132                           ; 4 bytes @ 0x21
  7133                           
  7134                           
  7135                           ; 4 bytes @ 0x21
  7136  0041                     	ds	4
  7137  0045                     ___flmul@a:	
  7138                           
  7139                           ; 4 bytes @ 0x25
  7140  0045                     	ds	3
  7141  0048                     OLED_loadSpecialChars@n:	
  7142                           
  7143                           ; 1 bytes @ 0x28
  7144  0048                     	ds	1
  7145  0049                     ??___flmul:	
  7146                           
  7147                           ; 1 bytes @ 0x29
  7148  0049                     	ds	5
  7149  004E                     ___flmul@sign:	
  7150                           
  7151                           ; 1 bytes @ 0x2E
  7152  004E                     	ds	1
  7153  004F                     ___flmul@aexp:	
  7154                           
  7155                           ; 1 bytes @ 0x2F
  7156  004F                     	ds	1
  7157  0050                     ___flmul@grs:	
  7158                           
  7159                           ; 4 bytes @ 0x30
  7160  0050                     	ds	4
  7161  0054                     ___flmul@bexp:	
  7162                           
  7163                           ; 1 bytes @ 0x34
  7164  0054                     	ds	1
  7165  0055                     ___flmul@prod:	
  7166                           
  7167                           ; 4 bytes @ 0x35
  7168  0055                     	ds	4
  7169  0059                     ___flmul@temp:	
  7170                           
  7171                           ; 2 bytes @ 0x39
  7172  0059                     	ds	2
  7173  005B                     ?___fladd:	
  7174  005B                     ?___fldiv:	
  7175                           ; 4 bytes @ 0x3B
  7176                           
  7177  005B                     ___fladd@b:	
  7178                           ; 4 bytes @ 0x3B
  7179                           
  7180  005B                     ___fldiv@a:	
  7181                           ; 4 bytes @ 0x3B
  7182                           
  7183                           
  7184                           ; 4 bytes @ 0x3B
  7185  005B                     	ds	4
  7186  005F                     ___fladd@a:	
  7187  005F                     ___fldiv@b:	
  7188                           ; 4 bytes @ 0x3F
  7189                           
  7190                           
  7191                           ; 4 bytes @ 0x3F
  7192  005F                     	ds	4
  7193  0063                     ??___fladd:	
  7194  0063                     ??___fldiv:	
  7195                           ; 1 bytes @ 0x43
  7196                           
  7197                           
  7198                           ; 1 bytes @ 0x43
  7199  0063                     	ds	1
  7200  0064                     readNVM@n:	
  7201                           
  7202                           ; 1 bytes @ 0x44
  7203  0064                     	ds	7
  7204  006B                     ___fladd@signs:	
  7205                           
  7206                           ; 1 bytes @ 0x4B
  7207  006B                     	ds	1
  7208  006C                     ___fladd@aexp:	
  7209                           
  7210                           ; 1 bytes @ 0x4C
  7211  006C                     	ds	1
  7212  006D                     ___fladd@bexp:	
  7213                           
  7214                           ; 1 bytes @ 0x4D
  7215  006D                     	ds	1
  7216  006E                     ___fladd@grs:	
  7217                           
  7218                           ; 1 bytes @ 0x4E
  7219  006E                     	ds	1
  7220  006F                     ??_getAnalogValues:	
  7221  006F                     ??_spinInput:	
  7222                           ; 1 bytes @ 0x4F
  7223                           
  7224  006F                     ??_sortCur:	
  7225                           ; 1 bytes @ 0x4F
  7226                           
  7227  006F                     ??___flsub:	
  7228                           ; 1 bytes @ 0x4F
  7229                           
  7230  006F                     storeNVM@n:	
  7231                           ; 1 bytes @ 0x4F
  7232                           
  7233  006F                     _qsort$2812:	
  7234                           ; 1 bytes @ 0x4F
  7235                           
  7236                           
  7237                           ; 1 bytes @ 0x4F
  7238  006F                     	ds	1
  7239                           
  7240                           	psect	maintext
  7241  2D3B                     __pmaintext:	
  7242 ;;
  7243 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  7244 ;;
  7245 ;; *************** function _main *****************
  7246 ;; Defined at:
  7247 ;;		line 24 in file "main.c"
  7248 ;; Parameters:    Size  Location     Type
  7249 ;;		None
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;  sysCheckInte    4   23[BANK4 ] unsigned long 
  7252 ;;  idle            1   28[BANK4 ] unsigned char 
  7253 ;;  initDone        1   27[BANK4 ] unsigned char 
  7254 ;; Return value:  Size  Location     Type
  7255 ;;                  1    wreg      void 
  7256 ;; Registers used:
  7257 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7258 ;; Tracked objects:
  7259 ;;		On entry : B3F/0
  7260 ;;		On exit  : 0/0
  7261 ;;		Unchanged: 0/0
  7262 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7264 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7265 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7266 ;;      Totals:         0       0       1       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7267 ;;Total ram usage:        7 bytes
  7268 ;; Hardware stack levels required when called:    9
  7269 ;; This function calls:
  7270 ;;		_OLED_command
  7271 ;;		_OLED_init
  7272 ;;		_OLED_loadSpecialChars
  7273 ;;		_calcRequiredPower
  7274 ;;		_channelThing
  7275 ;;		_checkChannelStatus
  7276 ;;		_checkSensor
  7277 ;;		_controller
  7278 ;;		_getAnalogValues
  7279 ;;		_getLastError
  7280 ;;		_initGlobalData
  7281 ;;		_initialize
  7282 ;;		_menu
  7283 ;;		_readNVM
  7284 ;;		_systemCheck
  7285 ;;		_timeSince
  7286 ;;		_viewErrorMessage
  7287 ;; This function is called by:
  7288 ;;		Startup code after reset
  7289 ;; This function uses a non-reentrant model
  7290 ;;
  7291                           
  7292                           
  7293                           ;psect for function _main
  7294  2D3B                     _main:	
  7295                           
  7296                           ;main.c: 26:  uint32_t sysCheckInterval = 0;
  7297                           
  7298                           ;incstack = 0
  7299                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7300  2D3B  3000               	movlw	0
  7301  2D3C  0144               	movlb	4	; select bank4
  7302  2D3D  00E1               	movwf	(main@sysCheckInterval+3)^(0+512)
  7303  2D3E  3000               	movlw	0
  7304  2D3F  00E0               	movwf	(main@sysCheckInterval+2)^(0+512)
  7305  2D40  3000               	movlw	0
  7306  2D41  00DF               	movwf	(main@sysCheckInterval+1)^(0+512)
  7307  2D42  3000               	movlw	0
  7308  2D43  00DE               	movwf	main@sysCheckInterval^(0+512)
  7309                           
  7310                           ;main.c: 27:  uint8_t idle = 1;
  7311  2D44  01E3               	clrf	main@idle^(0+512)
  7312  2D45  0AE3               	incf	main@idle^(0+512),f
  7313                           
  7314                           ;main.c: 28:  uint8_t initDone = 0;
  7315  2D46  01E2               	clrf	main@initDone^(0+512)
  7316                           
  7317                           ;main.c: 30:  initialize();
  7318  2D47  31B6  2606  31AD   	fcall	_initialize
  7319                           
  7320                           ;main.c: 31:  LATBbits.LATB5 = 1;
  7321  2D4A  0140               	movlb	0	; select bank0
  7322  2D4B  1699               	bsf	25,5	;volatile
  7323                           
  7324                           ;main.c: 32:  OLED_init();
  7325  2D4C  31AB  2384  31AD   	fcall	_OLED_init
  7326                           
  7327                           ;main.c: 33:  OLED_loadSpecialChars();
  7328  2D4F  31B2  22BE  31AD   	fcall	_OLED_loadSpecialChars
  7329                           
  7330                           ;main.c: 34:  OLED_command(0x02);
  7331  2D52  3002               	movlw	2
  7332  2D53  31B1  2150  31AD   	fcall	_OLED_command
  7333                           
  7334                           ;main.c: 35:  OLED_command(0x01);
  7335  2D56  3001               	movlw	1
  7336  2D57  31B1  2150  31AD   	fcall	_OLED_command
  7337                           
  7338                           ;main.c: 36:  initGlobalData();
  7339  2D5A  3188  200C  31AD   	fcall	_initGlobalData
  7340                           
  7341                           ;main.c: 37:  LATCbits.LATC3 = 1;
  7342  2D5D  0140               	movlb	0	; select bank0
  7343  2D5E  159A               	bsf	26,3	;volatile
  7344                           
  7345                           ;main.c: 40:  if (PORTAbits.RA7)
  7346  2D5F  1F8C               	btfss	12,7	;volatile
  7347  2D60  2D64               	goto	l128
  7348                           
  7349                           ;main.c: 41:   readNVM();
  7350  2D61  31AA  2282  31AD   	fcall	_readNVM
  7351  2D64                     l128:	
  7352                           ;main.c: 43:  while (1) {
  7353                           
  7354  2D64  0064               	clrwdt	;# 
  7355                           
  7356                           ;main.c: 48:   getAnalogValues();
  7357  2D65  319A  22BE  31AD   	fcall	_getAnalogValues
  7358                           
  7359                           ;main.c: 50:   if (timeSince(sysCheckInterval) > 5) {
  7360  2D68  0144               	movlb	4	; select bank4
  7361  2D69  0861               	movf	(main@sysCheckInterval+3)^(0+512),w
  7362  2D6A  0140               	movlb	0	; select bank0
  7363  2D6B  00A3               	movwf	timeSince@since+3
  7364  2D6C  0144               	movlb	4	; select bank4
  7365  2D6D  0860               	movf	(main@sysCheckInterval+2)^(0+512),w
  7366  2D6E  0140               	movlb	0	; select bank0
  7367  2D6F  00A2               	movwf	timeSince@since+2
  7368  2D70  0144               	movlb	4	; select bank4
  7369  2D71  085F               	movf	(main@sysCheckInterval+1)^(0+512),w
  7370  2D72  0140               	movlb	0	; select bank0
  7371  2D73  00A1               	movwf	timeSince@since+1
  7372  2D74  0144               	movlb	4	; select bank4
  7373  2D75  085E               	movf	main@sysCheckInterval^(0+512),w
  7374  2D76  0140               	movlb	0	; select bank0
  7375  2D77  00A0               	movwf	timeSince@since
  7376  2D78  31B6  26E4  31AD   	fcall	_timeSince
  7377  2D7B  0140               	movlb	0	; select bank0
  7378  2D7C  0823               	movf	?_timeSince+3,w
  7379  2D7D  1D03               	btfss	3,2
  7380  2D7E  2D89               	goto	l9441
  7381  2D7F  0822               	movf	?_timeSince+2,w
  7382  2D80  1D03               	btfss	3,2
  7383  2D81  2D89               	goto	l9441
  7384  2D82  0821               	movf	?_timeSince+1,w
  7385  2D83  1D03               	btfss	3,2
  7386  2D84  2D89               	goto	l9441
  7387  2D85  3006               	movlw	6
  7388  2D86  0220               	subwf	?_timeSince,w
  7389  2D87  1C03               	btfss	3,0
  7390  2D88  2D95               	goto	l9445
  7391  2D89                     l9441:	
  7392                           
  7393                           ;main.c: 51:    sysCheckInterval = tick100ms;
  7394  2D89  0144               	movlb	4	; select bank4
  7395  2D8A  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
  7396  2D8B  00E1               	movwf	(main@sysCheckInterval+3)^(0+512)
  7397  2D8C  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
  7398  2D8D  00E0               	movwf	(main@sysCheckInterval+2)^(0+512)
  7399  2D8E  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
  7400  2D8F  00DF               	movwf	(main@sysCheckInterval+1)^(0+512)
  7401  2D90  0832               	movf	_tick100ms^(0+512),w	;volatile
  7402  2D91  00DE               	movwf	main@sysCheckInterval^(0+512)
  7403                           
  7404                           ;main.c: 52:    systemCheck();
  7405  2D92  31A3  23A2  31AD   	fcall	_systemCheck
  7406  2D95                     l9445:	
  7407                           
  7408                           ;main.c: 56:   if (checkSensor()) {
  7409  2D95  31A1  211B  31AD   	fcall	_checkSensor
  7410  2D98  3A00               	xorlw	0
  7411  2D99  1903               	skipnz
  7412  2D9A  2DA1               	goto	l9451
  7413                           
  7414                           ;main.c: 58:    calcRequiredPower();
  7415  2D9B  3180  20D5  31AD   	fcall	_calcRequiredPower
  7416                           
  7417                           ;main.c: 59:    initDone = 1;
  7418  2D9E  0144               	movlb	4	; select bank4
  7419  2D9F  01E2               	clrf	main@initDone^(0+512)
  7420  2DA0  0AE2               	incf	main@initDone^(0+512),f
  7421  2DA1                     l9451:	
  7422                           
  7423                           ;main.c: 63:   if (idle) {
  7424  2DA1  0144               	movlb	4	; select bank4
  7425  2DA2  0863               	movf	main@idle^(0+512),w
  7426  2DA3  1903               	btfsc	3,2
  7427  2DA4  2DB1               	goto	l9459
  7428                           
  7429                           ;main.c: 64:    if (initDone) {
  7430  2DA5  0862               	movf	main@initDone^(0+512),w
  7431  2DA6  1903               	btfsc	3,2
  7432  2DA7  2DB9               	goto	l9461
  7433                           
  7434                           ;main.c: 67:     checkChannelStatus();
  7435  2DA8  3194  2432  31AD   	fcall	_checkChannelStatus
  7436                           
  7437                           ;main.c: 68:     channelThing();
  7438  2DAB  318B  23CC  31AD   	fcall	_channelThing
  7439                           
  7440                           ;main.c: 69:     idle = 0;
  7441  2DAE  0144               	movlb	4	; select bank4
  7442  2DAF  01E3               	clrf	main@idle^(0+512)
  7443  2DB0  2DB9               	goto	l9461
  7444  2DB1                     l9459:	
  7445                           
  7446                           ;main.c: 73:    idle = controller();
  7447  2DB1  31AF  273D  31AD   	fcall	_controller
  7448  2DB4  0141               	movlb	1	; select bank1
  7449  2DB5  00EA               	movwf	??_main^(0+128)
  7450  2DB6  086A               	movf	??_main^(0+128),w
  7451  2DB7  0144               	movlb	4	; select bank4
  7452  2DB8  00E3               	movwf	main@idle^(0+512)
  7453  2DB9                     l9461:	
  7454                           
  7455                           ;main.c: 76:   if (getLastError() != NO_ERROR)
  7456  2DB9  31B1  21C6  31AD   	fcall	_getLastError
  7457  2DBC  3A00               	xorlw	0
  7458  2DBD  1903               	skipnz
  7459  2DBE  2DC3               	goto	l9465
  7460                           
  7461                           ;main.c: 77:    viewErrorMessage();
  7462  2DBF  31A5  250D  31AD   	fcall	_viewErrorMessage
  7463  2DC2  2DC6               	goto	l9467
  7464  2DC3                     l9465:	
  7465                           
  7466                           ;main.c: 79:    menu();
  7467  2DC3  3198  203B  31AD   	fcall	_menu
  7468  2DC6                     l9467:	
  7469                           
  7470                           ;main.c: 82:   _delay((unsigned long)((20)*(4000000UL/4000.0)));
  7471  2DC6  301A               	movlw	26
  7472  2DC7  0141               	movlb	1	; select bank1
  7473  2DC8  00EA               	movwf	??_main^(0+128)
  7474  2DC9  30F8               	movlw	248
  7475  2DCA                     u10867:	
  7476  2DCA  0B89               	decfsz	9,f
  7477  2DCB  2DCA               	goto	u10867
  7478  2DCC  0BEA               	decfsz	??_main^(0+128),f
  7479  2DCD  2DCA               	goto	u10867
  7480  2DCE  0000               	nop
  7481                           
  7482                           ;main.c: 83:   __nop();
  7483  2DCF  0000               	nop
  7484  2DD0  2D64               	goto	l128
  7485  2DD1                     __end_of_main:	
  7486                           
  7487                           	psect	text1
  7488  250D                     __ptext1:	
  7489 ;; *************** function _viewErrorMessage *****************
  7490 ;; Defined at:
  7491 ;;		line 32 in file "error.c"
  7492 ;; Parameters:    Size  Location     Type
  7493 ;;		None
  7494 ;; Auto vars:     Size  Location     Type
  7495 ;;  errorCode       1   24[BANK0 ] enum E7825
  7496 ;; Return value:  Size  Location     Type
  7497 ;;                  1    wreg      void 
  7498 ;; Registers used:
  7499 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7500 ;; Tracked objects:
  7501 ;;		On entry : 0/0
  7502 ;;		On exit  : 0/0
  7503 ;;		Unchanged: 0/0
  7504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7506 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7507 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7508 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7509 ;;Total ram usage:        5 bytes
  7510 ;; Hardware stack levels used:    1
  7511 ;; Hardware stack levels required when called:    7
  7512 ;; This function calls:
  7513 ;;		_OLED_command
  7514 ;;		_OLED_print_xy
  7515 ;;		___awmod
  7516 ;;		_getPB
  7517 ;; This function is called by:
  7518 ;;		_main
  7519 ;; This function uses a non-reentrant model
  7520 ;;
  7521                           
  7522                           
  7523                           ;psect for function _viewErrorMessage
  7524  250D                     _viewErrorMessage:	
  7525                           
  7526                           ;error.c: 34:  enum e_errorcode errorCode;;error.c: 36:  errorCode = (head == tail) ? NO
      +                          _ERROR : errorMessageQueue[tail];
  7527                           
  7528                           ;incstack = 0
  7529                           ; Regs used in _viewErrorMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7530  250D  0142               	movlb	2	; select bank2
  7531  250E  0865               	movf	_head^(0+256),w
  7532  250F  067C               	xorwf	_tail,w
  7533  2510  1903               	skipnz
  7534  2511  2D20               	goto	l9321
  7535  2512  087C               	movf	_tail,w
  7536  2513  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
  7537  2514  0086               	movwf	6
  7538  2515  3002               	movlw	2	; select bank4/5
  7539  2516  0087               	movwf	7
  7540  2517  0801               	movf	1,w
  7541  2518  0140               	movlb	0	; select bank0
  7542  2519  00B6               	movwf	??_viewErrorMessage
  7543  251A  01B7               	clrf	??_viewErrorMessage+1
  7544  251B  0836               	movf	??_viewErrorMessage,w
  7545  251C  00B9               	movwf	_viewErrorMessage$1384
  7546  251D  0837               	movf	??_viewErrorMessage+1,w
  7547  251E  00BA               	movwf	_viewErrorMessage$1384+1
  7548  251F  2D23               	goto	l9323
  7549  2520                     l9321:	
  7550  2520  0140               	movlb	0	; select bank0
  7551  2521  01B9               	clrf	_viewErrorMessage$1384
  7552  2522  01BA               	clrf	_viewErrorMessage$1384+1
  7553  2523                     l9323:	
  7554  2523  0839               	movf	_viewErrorMessage$1384,w
  7555  2524  00B6               	movwf	??_viewErrorMessage
  7556  2525  0836               	movf	??_viewErrorMessage,w
  7557  2526  00B8               	movwf	viewErrorMessage@errorCode
  7558                           
  7559                           ;error.c: 38:  OLED_command(0x02);
  7560  2527  3002               	movlw	2
  7561  2528  31B1  2150  31A5   	fcall	_OLED_command
  7562                           
  7563                           ;error.c: 39:  switch(errorCode) {
  7564  252B  2E30               	goto	l9355
  7565  252C                     l9327:	
  7566                           
  7567                           ;error.c: 41:   OLED_print_xy(0, 0, "Heater      ");
  7568  252C  01AD               	clrf	OLED_print_xy@row
  7569  252D  308C               	movlw	low (STR_62| (0+32768))
  7570  252E  00AE               	movwf	OLED_print_xy@s
  7571  252F  30B8               	movlw	high (STR_62| (0+32768))
  7572  2530  00AF               	movwf	OLED_print_xy@s+1
  7573  2531  3000               	movlw	0
  7574  2532  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7575                           
  7576                           ;error.c: 42:   OLED_print_xy(0, 1, "removed     ");
  7577  2535  0140               	movlb	0	; select bank0
  7578  2536  01AD               	clrf	OLED_print_xy@row
  7579  2537  0AAD               	incf	OLED_print_xy@row,f
  7580  2538  30C0               	movlw	low (STR_63| (0+32768))
  7581  2539  00AE               	movwf	OLED_print_xy@s
  7582  253A  30B8               	movlw	high (STR_63| (0+32768))
  7583  253B  00AF               	movwf	OLED_print_xy@s+1
  7584  253C  3000               	movlw	0
  7585  253D  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7586                           
  7587                           ;error.c: 43:   break;
  7588  2540  2E5C               	goto	l9357
  7589  2541                     l9329:	
  7590                           
  7591                           ;error.c: 45:   OLED_print_xy(0, 0, "Output      ");
  7592  2541  01AD               	clrf	OLED_print_xy@row
  7593  2542  30A6               	movlw	low (STR_64| (0+32768))
  7594  2543  00AE               	movwf	OLED_print_xy@s
  7595  2544  30B8               	movlw	high (STR_64| (0+32768))
  7596  2545  00AF               	movwf	OLED_print_xy@s+1
  7597  2546  3000               	movlw	0
  7598  2547  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7599                           
  7600                           ;error.c: 46:   OLED_print_xy(0, 1, "shorted!    ");
  7601  254A  0140               	movlb	0	; select bank0
  7602  254B  01AD               	clrf	OLED_print_xy@row
  7603  254C  0AAD               	incf	OLED_print_xy@row,f
  7604  254D  30E7               	movlw	low (STR_65| (0+32768))
  7605  254E  00AE               	movwf	OLED_print_xy@s
  7606  254F  30B8               	movlw	high (STR_65| (0+32768))
  7607  2550  00AF               	movwf	OLED_print_xy@s+1
  7608  2551  3000               	movlw	0
  7609  2552  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7610                           
  7611                           ;error.c: 47:   break;
  7612  2555  2E5C               	goto	l9357
  7613  2556                     l9331:	
  7614                           
  7615                           ;error.c: 49:   OLED_print_xy(0, 0, "Overcurrent ");
  7616  2556  01AD               	clrf	OLED_print_xy@row
  7617  2557  304F               	movlw	low (STR_66| (0+32768))
  7618  2558  00AE               	movwf	OLED_print_xy@s
  7619  2559  30B9               	movlw	high (STR_66| (0+32768))
  7620  255A  00AF               	movwf	OLED_print_xy@s+1
  7621  255B  3000               	movlw	0
  7622  255C  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7623                           
  7624                           ;error.c: 50:   OLED_print_xy(0, 1, "detected!   ");
  7625  255F  0140               	movlb	0	; select bank0
  7626  2560  01AD               	clrf	OLED_print_xy@row
  7627  2561  0AAD               	incf	OLED_print_xy@row,f
  7628  2562  300E               	movlw	low (STR_67| (0+32768))
  7629  2563  00AE               	movwf	OLED_print_xy@s
  7630  2564  30B9               	movlw	high (STR_67| (0+32768))
  7631  2565  00AF               	movwf	OLED_print_xy@s+1
  7632  2566  3000               	movlw	0
  7633  2567  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7634                           
  7635                           ;error.c: 51:   break;
  7636  256A  2E5C               	goto	l9357
  7637  256B                     l9333:	
  7638                           
  7639                           ;error.c: 53:   OLED_print_xy(0, 0, "Heater      ");
  7640  256B  01AD               	clrf	OLED_print_xy@row
  7641  256C  308C               	movlw	low (STR_62| (0+32768))
  7642  256D  00AE               	movwf	OLED_print_xy@s
  7643  256E  30B8               	movlw	high (STR_62| (0+32768))
  7644  256F  00AF               	movwf	OLED_print_xy@s+1
  7645  2570  3000               	movlw	0
  7646  2571  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7647                           
  7648                           ;error.c: 54:   OLED_print_xy(0, 1, "overcurrent ");
  7649  2574  0140               	movlb	0	; select bank0
  7650  2575  01AD               	clrf	OLED_print_xy@row
  7651  2576  0AAD               	incf	OLED_print_xy@row,f
  7652  2577  305C               	movlw	low (STR_69| (0+32768))
  7653  2578  00AE               	movwf	OLED_print_xy@s
  7654  2579  30B9               	movlw	high (STR_69| (0+32768))
  7655  257A  00AF               	movwf	OLED_print_xy@s+1
  7656  257B  3000               	movlw	0
  7657  257C  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7658                           
  7659                           ;error.c: 55:   break;
  7660  257F  2E5C               	goto	l9357
  7661  2580                     l9335:	
  7662                           
  7663                           ;error.c: 57:   OLED_print_xy(0, 0, "Supply volt.");
  7664  2580  01AD               	clrf	OLED_print_xy@row
  7665  2581  3069               	movlw	low (STR_70| (0+32768))
  7666  2582  00AE               	movwf	OLED_print_xy@s
  7667  2583  30B9               	movlw	high (STR_70| (0+32768))
  7668  2584  00AF               	movwf	OLED_print_xy@s+1
  7669  2585  3000               	movlw	0
  7670  2586  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7671                           
  7672                           ;error.c: 58:   OLED_print_xy(0, 1, "too high!   ");
  7673  2589  0140               	movlb	0	; select bank0
  7674  258A  01AD               	clrf	OLED_print_xy@row
  7675  258B  0AAD               	incf	OLED_print_xy@row,f
  7676  258C  301B               	movlw	low (STR_71| (0+32768))
  7677  258D  00AE               	movwf	OLED_print_xy@s
  7678  258E  30B9               	movlw	high (STR_71| (0+32768))
  7679  258F  00AF               	movwf	OLED_print_xy@s+1
  7680  2590  3000               	movlw	0
  7681  2591  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7682                           
  7683                           ;error.c: 59:   break;
  7684  2594  2E5C               	goto	l9357
  7685  2595                     l9337:	
  7686                           
  7687                           ;error.c: 61:   OLED_print_xy(0, 0, "Supply volt.");
  7688  2595  01AD               	clrf	OLED_print_xy@row
  7689  2596  3069               	movlw	low (STR_70| (0+32768))
  7690  2597  00AE               	movwf	OLED_print_xy@s
  7691  2598  30B9               	movlw	high (STR_70| (0+32768))
  7692  2599  00AF               	movwf	OLED_print_xy@s+1
  7693  259A  3000               	movlw	0
  7694  259B  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7695                           
  7696                           ;error.c: 62:   OLED_print_xy(0, 1, "too low!    ");
  7697  259E  0140               	movlb	0	; select bank0
  7698  259F  01AD               	clrf	OLED_print_xy@row
  7699  25A0  0AAD               	incf	OLED_print_xy@row,f
  7700  25A1  30F4               	movlw	low (STR_73| (0+32768))
  7701  25A2  00AE               	movwf	OLED_print_xy@s
  7702  25A3  30B8               	movlw	high (STR_73| (0+32768))
  7703  25A4  00AF               	movwf	OLED_print_xy@s+1
  7704  25A5  3000               	movlw	0
  7705  25A6  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7706                           
  7707                           ;error.c: 63:   break;
  7708  25A9  2E5C               	goto	l9357
  7709  25AA                     l9339:	
  7710                           
  7711                           ;error.c: 65:   OLED_print_xy(0, 0, "Sensor      ");
  7712  25AA  01AD               	clrf	OLED_print_xy@row
  7713  25AB  3099               	movlw	low (STR_74| (0+32768))
  7714  25AC  00AE               	movwf	OLED_print_xy@s
  7715  25AD  30B8               	movlw	high (STR_74| (0+32768))
  7716  25AE  00AF               	movwf	OLED_print_xy@s+1
  7717  25AF  3000               	movlw	0
  7718  25B0  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7719                           
  7720                           ;error.c: 66:   OLED_print_xy(0, 1, "timeout     ");
  7721  25B3  0140               	movlb	0	; select bank0
  7722  25B4  01AD               	clrf	OLED_print_xy@row
  7723  25B5  0AAD               	incf	OLED_print_xy@row,f
  7724  25B6  30DA               	movlw	low (STR_75| (0+32768))
  7725  25B7  00AE               	movwf	OLED_print_xy@s
  7726  25B8  30B8               	movlw	high (STR_75| (0+32768))
  7727  25B9  00AF               	movwf	OLED_print_xy@s+1
  7728  25BA  3000               	movlw	0
  7729  25BB  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7730                           
  7731                           ;error.c: 67:   break;
  7732  25BE  2E5C               	goto	l9357
  7733  25BF                     l9341:	
  7734                           
  7735                           ;error.c: 69:   OLED_print_xy(0, 0, "Sensor wrong");
  7736  25BF  01AD               	clrf	OLED_print_xy@row
  7737  25C0  3083               	movlw	low (STR_76| (0+32768))
  7738  25C1  00AE               	movwf	OLED_print_xy@s
  7739  25C2  30B9               	movlw	high (STR_76| (0+32768))
  7740  25C3  00AF               	movwf	OLED_print_xy@s+1
  7741  25C4  3000               	movlw	0
  7742  25C5  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7743                           
  7744                           ;error.c: 70:   OLED_print_xy(0, 1, "checksum    ");
  7745  25C8  0140               	movlb	0	; select bank0
  7746  25C9  01AD               	clrf	OLED_print_xy@row
  7747  25CA  0AAD               	incf	OLED_print_xy@row,f
  7748  25CB  3001               	movlw	low (STR_77| (0+32768))
  7749  25CC  00AE               	movwf	OLED_print_xy@s
  7750  25CD  30B9               	movlw	high (STR_77| (0+32768))
  7751  25CE  00AF               	movwf	OLED_print_xy@s+1
  7752  25CF  3000               	movlw	0
  7753  25D0  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7754                           
  7755                           ;error.c: 71:   break;
  7756  25D3  2E5C               	goto	l9357
  7757  25D4                     l9343:	
  7758                           
  7759                           ;error.c: 73:   OLED_print_xy(0, 0, "OVERCURRENT ");
  7760  25D4  01AD               	clrf	OLED_print_xy@row
  7761  25D5  3035               	movlw	low (STR_78| (0+32768))
  7762  25D6  00AE               	movwf	OLED_print_xy@s
  7763  25D7  30B9               	movlw	high (STR_78| (0+32768))
  7764  25D8  00AF               	movwf	OLED_print_xy@s+1
  7765  25D9  3000               	movlw	0
  7766  25DA  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7767                           
  7768                           ;error.c: 74:   OLED_print_xy(0, 1, "TURN OFF NOW");
  7769  25DD  0140               	movlb	0	; select bank0
  7770  25DE  01AD               	clrf	OLED_print_xy@row
  7771  25DF  0AAD               	incf	OLED_print_xy@row,f
  7772  25E0  3076               	movlw	low (STR_79| (0+32768))
  7773  25E1  00AE               	movwf	OLED_print_xy@s
  7774  25E2  30B9               	movlw	high (STR_79| (0+32768))
  7775  25E3  00AF               	movwf	OLED_print_xy@s+1
  7776  25E4  3000               	movlw	0
  7777  25E5  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7778                           
  7779                           ;error.c: 75:   break;
  7780  25E8  2E5C               	goto	l9357
  7781  25E9                     l9345:	
  7782                           
  7783                           ;error.c: 77:   OLED_print_xy(0, 0, "Overcurrent ");
  7784  25E9  01AD               	clrf	OLED_print_xy@row
  7785  25EA  304F               	movlw	low (STR_66| (0+32768))
  7786  25EB  00AE               	movwf	OLED_print_xy@s
  7787  25EC  30B9               	movlw	high (STR_66| (0+32768))
  7788  25ED  00AF               	movwf	OLED_print_xy@s+1
  7789  25EE  3000               	movlw	0
  7790  25EF  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7791                           
  7792                           ;error.c: 78:   OLED_print_xy(0, 1, "Please check");
  7793  25F2  0140               	movlb	0	; select bank0
  7794  25F3  01AD               	clrf	OLED_print_xy@row
  7795  25F4  0AAD               	incf	OLED_print_xy@row,f
  7796  25F5  3090               	movlw	low (STR_81| (0+32768))
  7797  25F6  00AE               	movwf	OLED_print_xy@s
  7798  25F7  30B9               	movlw	high (STR_81| (0+32768))
  7799  25F8  00AF               	movwf	OLED_print_xy@s+1
  7800  25F9  3000               	movlw	0
  7801  25FA  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7802                           
  7803                           ;error.c: 79:   if (getPB() == PB_SHORT)
  7804  25FD  31B1  217A  31A5   	fcall	_getPB
  7805  2600  3A01               	xorlw	1
  7806  2601  1D03               	skipz
  7807  2602  2E5C               	goto	l9357
  7808                           
  7809                           ;error.c: 80:    LATCbits.LATC3 = 1;
  7810  2603  0140               	movlb	0	; select bank0
  7811  2604  159A               	bsf	26,3	;volatile
  7812  2605  2E5C               	goto	l9357
  7813  2606                     l9351:	
  7814                           
  7815                           ;error.c: 83:   OLED_print_xy(0, 0, "Menu broken ");
  7816  2606  01AD               	clrf	OLED_print_xy@row
  7817  2607  3042               	movlw	low (STR_82| (0+32768))
  7818  2608  00AE               	movwf	OLED_print_xy@s
  7819  2609  30B9               	movlw	high (STR_82| (0+32768))
  7820  260A  00AF               	movwf	OLED_print_xy@s+1
  7821  260B  3000               	movlw	0
  7822  260C  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7823                           
  7824                           ;error.c: 84:   OLED_print_xy(0, 1, "    :-)     ");
  7825  260F  0140               	movlb	0	; select bank0
  7826  2610  01AD               	clrf	OLED_print_xy@row
  7827  2611  0AAD               	incf	OLED_print_xy@row,f
  7828  2612  30B3               	movlw	low (STR_83| (0+32768))
  7829  2613  00AE               	movwf	OLED_print_xy@s
  7830  2614  30B8               	movlw	high (STR_83| (0+32768))
  7831  2615  00AF               	movwf	OLED_print_xy@s+1
  7832  2616  3000               	movlw	0
  7833  2617  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7834                           
  7835                           ;error.c: 85:   break;
  7836  261A  2E5C               	goto	l9357
  7837  261B                     l9353:	
  7838                           
  7839                           ;error.c: 87:   OLED_print_xy(0, 0, "Unknown     ");
  7840  261B  01AD               	clrf	OLED_print_xy@row
  7841  261C  30CD               	movlw	low (STR_84| (0+32768))
  7842  261D  00AE               	movwf	OLED_print_xy@s
  7843  261E  30B8               	movlw	high (STR_84| (0+32768))
  7844  261F  00AF               	movwf	OLED_print_xy@s+1
  7845  2620  3000               	movlw	0
  7846  2621  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7847                           
  7848                           ;error.c: 88:   OLED_print_xy(0, 1, "error code  ");
  7849  2624  0140               	movlb	0	; select bank0
  7850  2625  01AD               	clrf	OLED_print_xy@row
  7851  2626  0AAD               	incf	OLED_print_xy@row,f
  7852  2627  3028               	movlw	low (STR_85| (0+32768))
  7853  2628  00AE               	movwf	OLED_print_xy@s
  7854  2629  30B9               	movlw	high (STR_85| (0+32768))
  7855  262A  00AF               	movwf	OLED_print_xy@s+1
  7856  262B  3000               	movlw	0
  7857  262C  31B3  23A1  31A5   	fcall	_OLED_print_xy
  7858                           
  7859                           ;error.c: 89:  }
  7860  262F  2E5C               	goto	l9357
  7861  2630                     l9355:	
  7862  2630  0140               	movlb	0	; select bank0
  7863  2631  0838               	movf	viewErrorMessage@errorCode,w
  7864  2632  00B6               	movwf	??_viewErrorMessage
  7865  2633  01B7               	clrf	??_viewErrorMessage+1
  7866                           
  7867                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7868                           ; Switch size 1, requested type "simple"
  7869                           ; Number of cases is 1, Range of values is 0 to 0
  7870                           ; switch strategies available:
  7871                           ; Name         Instructions Cycles
  7872                           ; simple_byte            4     3 (average)
  7873                           ; direct_byte            8     6 (fixed)
  7874                           ; jumptable            260     6 (fixed)
  7875                           ;	Chosen strategy is simple_byte
  7876  2634  0837               	movf	??_viewErrorMessage+1,w
  7877  2635  3A00               	xorlw	0	; case 0
  7878  2636  1903               	skipnz
  7879  2637  2E39               	goto	l9599
  7880  2638  2E1B               	goto	l9353
  7881  2639                     l9599:	
  7882                           
  7883                           ; Switch size 1, requested type "simple"
  7884                           ; Number of cases is 11, Range of values is 1 to 12
  7885                           ; switch strategies available:
  7886                           ; Name         Instructions Cycles
  7887                           ; direct_byte           33     9 (fixed)
  7888                           ; simple_byte           34    18 (average)
  7889                           ; jumptable            263     9 (fixed)
  7890                           ;	Chosen strategy is simple_byte
  7891  2639  0836               	movf	??_viewErrorMessage,w
  7892  263A  3A01               	xorlw	1	; case 1
  7893  263B  1903               	skipnz
  7894  263C  2D2C               	goto	l9327
  7895  263D  3A03               	xorlw	3	; case 2
  7896  263E  1903               	skipnz
  7897  263F  2D41               	goto	l9329
  7898  2640  3A01               	xorlw	1	; case 3
  7899  2641  1903               	skipnz
  7900  2642  2D56               	goto	l9331
  7901  2643  3A07               	xorlw	7	; case 4
  7902  2644  1903               	skipnz
  7903  2645  2D6B               	goto	l9333
  7904  2646  3A01               	xorlw	1	; case 5
  7905  2647  1903               	skipnz
  7906  2648  2D80               	goto	l9335
  7907  2649  3A03               	xorlw	3	; case 6
  7908  264A  1903               	skipnz
  7909  264B  2D95               	goto	l9337
  7910  264C  3A01               	xorlw	1	; case 7
  7911  264D  1903               	skipnz
  7912  264E  2DAA               	goto	l9339
  7913  264F  3A0F               	xorlw	15	; case 8
  7914  2650  1903               	skipnz
  7915  2651  2DBF               	goto	l9341
  7916  2652  3A01               	xorlw	1	; case 9
  7917  2653  1903               	skipnz
  7918  2654  2DD4               	goto	l9343
  7919  2655  3A03               	xorlw	3	; case 10
  7920  2656  1903               	skipnz
  7921  2657  2DE9               	goto	l9345
  7922  2658  3A06               	xorlw	6	; case 12
  7923  2659  1903               	skipnz
  7924  265A  2E06               	goto	l9351
  7925  265B  2E1B               	goto	l9353
  7926  265C                     l9357:	
  7927                           
  7928                           ;error.c: 91:  if (getPB() == PB_SHORT) {
  7929  265C  31B1  217A  31A5   	fcall	_getPB
  7930  265F  3A01               	xorlw	1
  7931  2660  1D03               	skipz
  7932  2661  2E7A               	goto	l9363
  7933                           
  7934                           ;error.c: 92:   if (head != tail)
  7935  2662  0142               	movlb	2	; select bank2
  7936  2663  0865               	movf	_head^(0+256),w
  7937  2664  067C               	xorwf	_tail,w
  7938  2665  1903               	skipnz
  7939  2666  2E7A               	goto	l9363
  7940                           
  7941                           ;error.c: 93:    tail = (tail + 1) % 10;
  7942  2667  300A               	movlw	10
  7943  2668  0140               	movlb	0	; select bank0
  7944  2669  00A0               	movwf	___awmod@divisor
  7945  266A  3000               	movlw	0
  7946  266B  00A1               	movwf	___awmod@divisor+1
  7947  266C  087C               	movf	_tail,w
  7948  266D  3E01               	addlw	1
  7949  266E  00A2               	movwf	___awmod@dividend
  7950  266F  3000               	movlw	0
  7951  2670  1803               	skipnc
  7952  2671  3001               	movlw	1
  7953  2672  00A3               	movwf	___awmod@dividend+1
  7954  2673  31B4  24E9         	fcall	___awmod
  7955  2675  0140               	movlb	0	; select bank0
  7956  2676  0820               	movf	?___awmod,w
  7957  2677  00B6               	movwf	??_viewErrorMessage
  7958  2678  0836               	movf	??_viewErrorMessage,w
  7959  2679  00FC               	movwf	_tail
  7960  267A                     l9363:	
  7961                           
  7962                           ;error.c: 96:  g_screenRefresh = 1;
  7963  267A  0141               	movlb	1	; select bank1
  7964  267B  01ED               	clrf	_g_screenRefresh^(0+128)
  7965  267C  0AED               	incf	_g_screenRefresh^(0+128),f
  7966  267D  0008               	return
  7967  267E                     __end_of_viewErrorMessage:	
  7968                           
  7969                           	psect	text2
  7970  23A2                     __ptext2:	
  7971 ;; *************** function _systemCheck *****************
  7972 ;; Defined at:
  7973 ;;		line 136 in file "system.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;		None
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;  str             3   29[BANK1 ] unsigned char [3]
  7978 ;;  n               1    0        unsigned char 
  7979 ;; Return value:  Size  Location     Type
  7980 ;;                  1    wreg      void 
  7981 ;; Registers used:
  7982 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7983 ;; Tracked objects:
  7984 ;;		On entry : 0/0
  7985 ;;		On exit  : 0/0
  7986 ;;		Unchanged: 0/0
  7987 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7989 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7990 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7991 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7992 ;;Total ram usage:        8 bytes
  7993 ;; Hardware stack levels used:    1
  7994 ;; Hardware stack levels required when called:    7
  7995 ;; This function calls:
  7996 ;;		_OLED_command
  7997 ;;		_OLED_off
  7998 ;;		_OLED_print_xy
  7999 ;;		___fldiv
  8000 ;;		___flge
  8001 ;;		___flmul
  8002 ;;		___xxtofl
  8003 ;;		_error
  8004 ;;		_getAnalogValue
  8005 ;;		_itoa
  8006 ;;		_setChannelSwitch
  8007 ;; This function is called by:
  8008 ;;		_main
  8009 ;; This function uses a non-reentrant model
  8010 ;;
  8011                           
  8012                           
  8013                           ;psect for function _systemCheck
  8014  23A2                     _systemCheck:	
  8015                           
  8016                           ;system.c: 138:  uint8_t n;;system.c: 139:  char str[3];;system.c: 143:  if (data.curren
      +                          t > 3.5) {
  8017                           
  8018                           ;incstack = 0
  8019                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8020  23A2  3040               	movlw	64
  8021  23A3  0141               	movlb	1	; select bank1
  8022  23A4  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8023  23A5  3060               	movlw	96
  8024  23A6  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8025  23A7  3000               	movlw	0
  8026  23A8  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8027  23A9  3000               	movlw	0
  8028  23AA  00AD               	movwf	___flge@ff1^(0+128)
  8029  23AB  304A               	movlw	74
  8030  23AC  0086               	movwf	6
  8031  23AD  3027               	movlw	39
  8032  23AE  0087               	movwf	7
  8033  23AF  3155               	addfsr 1,21
  8034  23B0  3F40               	moviw [0]fsr1
  8035  23B1  00B1               	movwf	___flge@ff2^(0+128)
  8036  23B2  3F41               	moviw [1]fsr1
  8037  23B3  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8038  23B4  3F42               	moviw [2]fsr1
  8039  23B5  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8040  23B6  3F43               	moviw [3]fsr1
  8041  23B7  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8042  23B8  31AA  2206  31A3   	fcall	___flge
  8043  23BB  1803               	btfsc	3,0
  8044  23BC  2C3E               	goto	l8925
  8045                           
  8046                           ;system.c: 145:   setChannelSwitch(255, 0);
  8047  23BD  0140               	movlb	0	; select bank0
  8048  23BE  01AD               	clrf	setChannelSwitch@state
  8049  23BF  30FF               	movlw	255
  8050  23C0  31B5  2576  31A3   	fcall	_setChannelSwitch
  8051                           
  8052                           ;system.c: 146:   LATCbits.LATC3 = 0;
  8053  23C3  0140               	movlb	0	; select bank0
  8054  23C4  119A               	bcf	26,3	;volatile
  8055                           
  8056                           ;system.c: 148:   if (( (getAnalogValue(0b010001) * 5.0) / (1023.0 * 0.05 * 50.0) ) > 3.
      +                          5) {
  8057  23C5  3040               	movlw	64
  8058  23C6  0141               	movlb	1	; select bank1
  8059  23C7  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8060  23C8  3060               	movlw	96
  8061  23C9  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8062  23CA  3000               	movlw	0
  8063  23CB  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8064  23CC  3000               	movlw	0
  8065  23CD  00AD               	movwf	___flge@ff1^(0+128)
  8066  23CE  3045               	movlw	69
  8067  23CF  0140               	movlb	0	; select bank0
  8068  23D0  00DE               	movwf	___fldiv@a+3
  8069  23D1  301F               	movlw	31
  8070  23D2  00DD               	movwf	___fldiv@a+2
  8071  23D3  30D8               	movlw	216
  8072  23D4  00DC               	movwf	___fldiv@a+1
  8073  23D5  3000               	movlw	0
  8074  23D6  00DB               	movwf	___fldiv@a
  8075  23D7  3040               	movlw	64
  8076  23D8  00C4               	movwf	___flmul@b+3
  8077  23D9  30A0               	movlw	160
  8078  23DA  00C3               	movwf	___flmul@b+2
  8079  23DB  3000               	movlw	0
  8080  23DC  00C2               	movwf	___flmul@b+1
  8081  23DD  3000               	movlw	0
  8082  23DE  00C1               	movwf	___flmul@b
  8083  23DF  3011               	movlw	17
  8084  23E0  31B1  21FA  31A3   	fcall	_getAnalogValue
  8085  23E3  0140               	movlb	0	; select bank0
  8086  23E4  0820               	movf	?_getAnalogValue,w
  8087  23E5  0141               	movlb	1	; select bank1
  8088  23E6  00B9               	movwf	??_systemCheck^(0+128)
  8089  23E7  0140               	movlb	0	; select bank0
  8090  23E8  0821               	movf	?_getAnalogValue+1,w
  8091  23E9  0141               	movlb	1	; select bank1
  8092  23EA  00BA               	movwf	(??_systemCheck^(0+128)+1)
  8093  23EB  01BB               	clrf	(??_systemCheck^(0+128)+2)
  8094  23EC  01BC               	clrf	(??_systemCheck^(0+128)+3)
  8095  23ED  083C               	movf	(??_systemCheck+3)^(0+128),w
  8096  23EE  0140               	movlb	0	; select bank0
  8097  23EF  00B6               	movwf	___xxtofl@val+3
  8098  23F0  0141               	movlb	1	; select bank1
  8099  23F1  083B               	movf	(??_systemCheck+2)^(0+128),w
  8100  23F2  0140               	movlb	0	; select bank0
  8101  23F3  00B5               	movwf	___xxtofl@val+2
  8102  23F4  0141               	movlb	1	; select bank1
  8103  23F5  083A               	movf	(??_systemCheck+1)^(0+128),w
  8104  23F6  0140               	movlb	0	; select bank0
  8105  23F7  00B4               	movwf	___xxtofl@val+1
  8106  23F8  0141               	movlb	1	; select bank1
  8107  23F9  0839               	movf	??_systemCheck^(0+128),w
  8108  23FA  0140               	movlb	0	; select bank0
  8109  23FB  00B3               	movwf	___xxtofl@val
  8110  23FC  3000               	movlw	0
  8111  23FD  31AC  240F  31A3   	fcall	___xxtofl
  8112  2400  0140               	movlb	0	; select bank0
  8113  2401  0836               	movf	?___xxtofl+3,w
  8114  2402  00C8               	movwf	___flmul@a+3
  8115  2403  0835               	movf	?___xxtofl+2,w
  8116  2404  00C7               	movwf	___flmul@a+2
  8117  2405  0834               	movf	?___xxtofl+1,w
  8118  2406  00C6               	movwf	___flmul@a+1
  8119  2407  0833               	movf	?___xxtofl,w
  8120  2408  00C5               	movwf	___flmul@a
  8121  2409  3185  2561  31A3   	fcall	___flmul
  8122  240C  0140               	movlb	0	; select bank0
  8123  240D  0844               	movf	?___flmul+3,w
  8124  240E  00E2               	movwf	___fldiv@b+3
  8125  240F  0843               	movf	?___flmul+2,w
  8126  2410  00E1               	movwf	___fldiv@b+2
  8127  2411  0842               	movf	?___flmul+1,w
  8128  2412  00E0               	movwf	___fldiv@b+1
  8129  2413  0841               	movf	?___flmul,w
  8130  2414  00DF               	movwf	___fldiv@b
  8131  2415  319E  2628  31A3   	fcall	___fldiv
  8132  2418  0140               	movlb	0	; select bank0
  8133  2419  085E               	movf	?___fldiv+3,w
  8134  241A  0141               	movlb	1	; select bank1
  8135  241B  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8136  241C  0140               	movlb	0	; select bank0
  8137  241D  085D               	movf	?___fldiv+2,w
  8138  241E  0141               	movlb	1	; select bank1
  8139  241F  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8140  2420  0140               	movlb	0	; select bank0
  8141  2421  085C               	movf	?___fldiv+1,w
  8142  2422  0141               	movlb	1	; select bank1
  8143  2423  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8144  2424  0140               	movlb	0	; select bank0
  8145  2425  085B               	movf	?___fldiv,w
  8146  2426  0141               	movlb	1	; select bank1
  8147  2427  00B1               	movwf	___flge@ff2^(0+128)
  8148  2428  31AA  2206  31A3   	fcall	___flge
  8149  242B  1803               	btfsc	3,0
  8150  242C  2C2F               	goto	l8919
  8151                           
  8152                           ;system.c: 151:    error(ERR_NUKED);
  8153  242D  3009               	movlw	9
  8154  242E  2C3B               	goto	L1
  8155  242F                     l8919:	
  8156                           ;system.c: 152:   } else {
  8157                           
  8158                           
  8159                           ;system.c: 154:    if (! data.status.OVERCURRENT) {
  8160  242F  3073               	movlw	115
  8161  2430  0086               	movwf	6
  8162  2431  3027               	movlw	39
  8163  2432  0087               	movwf	7
  8164  2433  1901               	btfsc	1,2
  8165  2434  2C3E               	goto	l8925
  8166                           
  8167                           ;system.c: 155:     data.status.OVERCURRENT = 1;
  8168  2435  3073               	movlw	115
  8169  2436  0086               	movwf	6
  8170  2437  3027               	movlw	39
  8171  2438  0087               	movwf	7
  8172  2439  1501               	bsf	1,2
  8173                           
  8174                           ;system.c: 156:     error(ERR_OVERCURRENT);
  8175  243A  300A               	movlw	10
  8176  243B                     L1:	
  8177  243B  3198  2000  31A3   	fcall	_error
  8178  243E                     l8925:	
  8179                           
  8180                           ;system.c: 166:  if ((data.voltage > 13.8) || (data.voltage <= 11.0)) {
  8181  243E  3041               	movlw	65
  8182  243F  0141               	movlb	1	; select bank1
  8183  2440  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8184  2441  305C               	movlw	92
  8185  2442  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8186  2443  30CC               	movlw	204
  8187  2444  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8188  2445  30CD               	movlw	205
  8189  2446  00AD               	movwf	___flge@ff1^(0+128)
  8190  2447  304A               	movlw	74
  8191  2448  0086               	movwf	6
  8192  2449  3027               	movlw	39
  8193  244A  0087               	movwf	7
  8194  244B  3151               	addfsr 1,17
  8195  244C  3F40               	moviw [0]fsr1
  8196  244D  00B1               	movwf	___flge@ff2^(0+128)
  8197  244E  3F41               	moviw [1]fsr1
  8198  244F  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8199  2450  3F42               	moviw [2]fsr1
  8200  2451  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8201  2452  3F43               	moviw [3]fsr1
  8202  2453  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8203  2454  31AA  2206  31A3   	fcall	___flge
  8204  2457  1C03               	btfss	3,0
  8205  2458  2C74               	goto	l8929
  8206  2459  3041               	movlw	65
  8207  245A  0141               	movlb	1	; select bank1
  8208  245B  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8209  245C  3030               	movlw	48
  8210  245D  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8211  245E  3000               	movlw	0
  8212  245F  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8213  2460  3000               	movlw	0
  8214  2461  00AD               	movwf	___flge@ff1^(0+128)
  8215  2462  304A               	movlw	74
  8216  2463  0086               	movwf	6
  8217  2464  3027               	movlw	39
  8218  2465  0087               	movwf	7
  8219  2466  3151               	addfsr 1,17
  8220  2467  3F40               	moviw [0]fsr1
  8221  2468  00B1               	movwf	___flge@ff2^(0+128)
  8222  2469  3F41               	moviw [1]fsr1
  8223  246A  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8224  246B  3F42               	moviw [2]fsr1
  8225  246C  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8226  246D  3F43               	moviw [3]fsr1
  8227  246E  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8228  246F  31AA  2206  31A3   	fcall	___flge
  8229  2472  1C03               	btfss	3,0
  8230  2473  2C78               	goto	l8967
  8231  2474                     l8929:	
  8232                           
  8233                           ;system.c: 167:   error(ERR_VOLT_CRIT);
  8234  2474  300B               	movlw	11
  8235  2475  3198  2000         	fcall	_error
  8236                           
  8237                           ;system.c: 168:   return;
  8238  2477  0008               	return
  8239  2478                     l8967:	
  8240  2478  3041               	movlw	65
  8241  2479  0141               	movlb	1	; select bank1
  8242  247A  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8243  247B  3050               	movlw	80
  8244  247C  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8245  247D  3000               	movlw	0
  8246  247E  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8247  247F  3000               	movlw	0
  8248  2480  00AD               	movwf	___flge@ff1^(0+128)
  8249  2481  304A               	movlw	74
  8250  2482  0086               	movwf	6
  8251  2483  3027               	movlw	39
  8252  2484  0087               	movwf	7
  8253  2485  3151               	addfsr 1,17
  8254  2486  3F40               	moviw [0]fsr1
  8255  2487  00B1               	movwf	___flge@ff2^(0+128)
  8256  2488  3F41               	moviw [1]fsr1
  8257  2489  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8258  248A  3F42               	moviw [2]fsr1
  8259  248B  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8260  248C  3F43               	moviw [3]fsr1
  8261  248D  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8262  248E  31AA  2206  31A3   	fcall	___flge
  8263  2491  1803               	btfsc	3,0
  8264  2492  2CBD               	goto	l8977
  8265  2493  3041               	movlw	65
  8266  2494  0141               	movlb	1	; select bank1
  8267  2495  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8268  2496  305C               	movlw	92
  8269  2497  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8270  2498  30CC               	movlw	204
  8271  2499  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8272  249A  30CD               	movlw	205
  8273  249B  00AD               	movwf	___flge@ff1^(0+128)
  8274  249C  304A               	movlw	74
  8275  249D  0086               	movwf	6
  8276  249E  3027               	movlw	39
  8277  249F  0087               	movwf	7
  8278  24A0  3151               	addfsr 1,17
  8279  24A1  3F40               	moviw [0]fsr1
  8280  24A2  00B1               	movwf	___flge@ff2^(0+128)
  8281  24A3  3F41               	moviw [1]fsr1
  8282  24A4  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8283  24A5  3F42               	moviw [2]fsr1
  8284  24A6  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8285  24A7  3F43               	moviw [3]fsr1
  8286  24A8  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8287  24A9  31AA  2206  31A3   	fcall	___flge
  8288  24AC  1C03               	btfss	3,0
  8289  24AD  2CBD               	goto	l8977
  8290                           
  8291                           ;system.c: 187:   if (! data.status.BAT_HIGH) {
  8292  24AE  3073               	movlw	115
  8293  24AF  0086               	movwf	6
  8294  24B0  3027               	movlw	39
  8295  24B1  0087               	movwf	7
  8296  24B2  1881               	btfsc	1,1
  8297  24B3  0008               	return
  8298                           
  8299                           ;system.c: 188:    data.status.BAT_HIGH = 1;
  8300  24B4  3073               	movlw	115
  8301  24B5  0086               	movwf	6
  8302  24B6  3027               	movlw	39
  8303  24B7  0087               	movwf	7
  8304  24B8  1481               	bsf	1,1
  8305                           
  8306                           ;system.c: 189:    error(WARN_VOLT_HIGH);
  8307  24B9  3005               	movlw	5
  8308  24BA  3198  2000         	fcall	_error
  8309  24BC  0008               	return
  8310  24BD                     l8977:	
  8311  24BD  3041               	movlw	65
  8312  24BE  0141               	movlb	1	; select bank1
  8313  24BF  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8314  24C0  3030               	movlw	48
  8315  24C1  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8316  24C2  3000               	movlw	0
  8317  24C3  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8318  24C4  3000               	movlw	0
  8319  24C5  00AD               	movwf	___flge@ff1^(0+128)
  8320  24C6  304A               	movlw	74
  8321  24C7  0086               	movwf	6
  8322  24C8  3027               	movlw	39
  8323  24C9  0087               	movwf	7
  8324  24CA  3151               	addfsr 1,17
  8325  24CB  3F40               	moviw [0]fsr1
  8326  24CC  00B1               	movwf	___flge@ff2^(0+128)
  8327  24CD  3F41               	moviw [1]fsr1
  8328  24CE  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8329  24CF  3F42               	moviw [2]fsr1
  8330  24D0  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8331  24D1  3F43               	moviw [3]fsr1
  8332  24D2  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8333  24D3  31AA  2206  31A3   	fcall	___flge
  8334  24D6  1803               	btfsc	3,0
  8335  24D7  2D02               	goto	l8987
  8336  24D8  3041               	movlw	65
  8337  24D9  0141               	movlb	1	; select bank1
  8338  24DA  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8339  24DB  3036               	movlw	54
  8340  24DC  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8341  24DD  3066               	movlw	102
  8342  24DE  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8343  24DF  3066               	movlw	102
  8344  24E0  00AD               	movwf	___flge@ff1^(0+128)
  8345  24E1  304A               	movlw	74
  8346  24E2  0086               	movwf	6
  8347  24E3  3027               	movlw	39
  8348  24E4  0087               	movwf	7
  8349  24E5  3151               	addfsr 1,17
  8350  24E6  3F40               	moviw [0]fsr1
  8351  24E7  00B1               	movwf	___flge@ff2^(0+128)
  8352  24E8  3F41               	moviw [1]fsr1
  8353  24E9  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8354  24EA  3F42               	moviw [2]fsr1
  8355  24EB  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8356  24EC  3F43               	moviw [3]fsr1
  8357  24ED  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8358  24EE  31AA  2206  31A3   	fcall	___flge
  8359  24F1  1C03               	btfss	3,0
  8360  24F2  2D02               	goto	l8987
  8361                           
  8362                           ;system.c: 192:   if (! data.status.BAT_LOW) {
  8363  24F3  3073               	movlw	115
  8364  24F4  0086               	movwf	6
  8365  24F5  3027               	movlw	39
  8366  24F6  0087               	movwf	7
  8367  24F7  1801               	btfsc	1,0
  8368  24F8  0008               	return
  8369                           
  8370                           ;system.c: 193:    data.status.BAT_LOW = 1;
  8371  24F9  3073               	movlw	115
  8372  24FA  0086               	movwf	6
  8373  24FB  3027               	movlw	39
  8374  24FC  0087               	movwf	7
  8375  24FD  1401               	bsf	1,0
  8376                           
  8377                           ;system.c: 194:    error(WARN_VOLT_LOW);
  8378  24FE  3006               	movlw	6
  8379  24FF  3198  2000         	fcall	_error
  8380  2501  0008               	return
  8381  2502                     l8987:	
  8382                           
  8383                           ;system.c: 197:   data.status.BAT_HIGH = 0;
  8384  2502  3073               	movlw	115
  8385  2503  0086               	movwf	6
  8386  2504  3027               	movlw	39
  8387  2505  0087               	movwf	7
  8388  2506  1081               	bcf	1,1
  8389                           
  8390                           ;system.c: 198:   data.status.BAT_LOW = 0;
  8391  2507  3073               	movlw	115
  8392  2508  0086               	movwf	6
  8393  2509  3027               	movlw	39
  8394  250A  0087               	movwf	7
  8395  250B  1001               	bcf	1,0
  8396  250C  0008               	return
  8397  250D                     __end_of_systemCheck:	
  8398                           
  8399                           	psect	text3
  8400  1001                     __ptext3:	
  8401 ;; *************** function _OLED_off *****************
  8402 ;; Defined at:
  8403 ;;		line 12 in file "oled.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;		None
  8406 ;; Auto vars:     Size  Location     Type
  8407 ;;		None
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  1    wreg      void 
  8410 ;; Registers used:
  8411 ;;		wreg, status,2, status,0, pclath, cstack
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8421 ;;Total ram usage:        0 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    6
  8424 ;; This function calls:
  8425 ;;		_OLED_command
  8426 ;; This function is called by:
  8427 ;;		_systemCheck
  8428 ;; This function uses a non-reentrant model
  8429 ;;
  8430                           
  8431                           
  8432                           ;psect for function _OLED_off
  8433  1001                     _OLED_off:	
  8434                           
  8435                           ;oled.c: 14:  OLED_command(0x08);
  8436                           
  8437                           ;incstack = 0
  8438                           ; Regs used in _OLED_off: [wreg+status,2+status,0+pclath+cstack]
  8439  1001  3008               	movlw	8
  8440  1002  31B1  2150  3190   	fcall	_OLED_command
  8441                           
  8442                           ;oled.c: 15:  OLED_command(0x13);
  8443  1005  3013               	movlw	19
  8444  1006  31B1  2150         	fcall	_OLED_command
  8445  1008  0008               	return
  8446  1009                     __end_of_OLED_off:	
  8447                           
  8448                           	psect	text4
  8449  2A82                     __ptext4:	
  8450 ;; *************** function _readNVM *****************
  8451 ;; Defined at:
  8452 ;;		line 493 in file "system.c"
  8453 ;; Parameters:    Size  Location     Type
  8454 ;;		None
  8455 ;; Auto vars:     Size  Location     Type
  8456 ;;  buf            64    4[BANK0 ] unsigned short [32]
  8457 ;;  nvm            32    0[BANK1 ] struct .
  8458 ;;  n               1   68[BANK0 ] unsigned char 
  8459 ;; Return value:  Size  Location     Type
  8460 ;;                  1    wreg      void 
  8461 ;; Registers used:
  8462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8463 ;; Tracked objects:
  8464 ;;		On entry : 0/0
  8465 ;;		On exit  : 0/0
  8466 ;;		Unchanged: 0/0
  8467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8469 ;;      Locals:         0      65      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8470 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8471 ;;      Totals:         0      66      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8472 ;;Total ram usage:       98 bytes
  8473 ;; Hardware stack levels used:    1
  8474 ;; Hardware stack levels required when called:    4
  8475 ;; This function calls:
  8476 ;;		_FLASH_ReadWord
  8477 ;; This function is called by:
  8478 ;;		_main
  8479 ;; This function uses a non-reentrant model
  8480 ;;
  8481                           
  8482                           
  8483                           ;psect for function _readNVM
  8484  2A82                     _readNVM:	
  8485                           
  8486                           ;system.c: 495:  uint8_t n;;system.c: 496:  t_nvmData nvm;;system.c: 497:  uint16_t buf[
      +                          32];;system.c: 499:  for(n = 0; n < 32; n++) {
  8487                           
  8488                           ;incstack = 0
  8489                           ; Regs used in _readNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8490  2A82  0140               	movlb	0	; select bank0
  8491  2A83  01E4               	clrf	readNVM@n
  8492  2A84                     l8893:	
  8493                           
  8494                           ;system.c: 500:   buf[n] = FLASH_ReadWord(0x3F80 + n);
  8495  2A84  0864               	movf	readNVM@n,w
  8496  2A85  3E80               	addlw	128
  8497  2A86  00A0               	movwf	FLASH_ReadWord@flashAddr
  8498  2A87  303F               	movlw	63
  8499  2A88  1803               	skipnc
  8500  2A89  3040               	movlw	64
  8501  2A8A  00A1               	movwf	FLASH_ReadWord@flashAddr+1
  8502  2A8B  31B2  2257  31AA   	fcall	_FLASH_ReadWord
  8503  2A8E  0140               	movlb	0	; select bank0
  8504  2A8F  3564               	lslf	readNVM@n,w
  8505  2A90  3E24               	addlw	(low (readNVM@buf| 0))& (0+255)
  8506  2A91  0086               	movwf	6
  8507  2A92  0187               	clrf	7
  8508  2A93  0820               	movf	?_FLASH_ReadWord,w
  8509  2A94  3FC0               	movwi [0]fsr1
  8510  2A95  0821               	movf	?_FLASH_ReadWord+1,w
  8511  2A96  3FC1               	movwi [1]fsr1
  8512                           
  8513                           ;system.c: 501:   nvm.raw[n] = (uint8_t)(buf[n] & 0x00ff);
  8514  2A97  3564               	lslf	readNVM@n,w
  8515  2A98  3E24               	addlw	(low (readNVM@buf| 0))& (0+255)
  8516  2A99  0086               	movwf	6
  8517  2A9A  0187               	clrf	7
  8518  2A9B  0801               	movf	1,w
  8519  2A9C  00A3               	movwf	??_readNVM
  8520  2A9D  0864               	movf	readNVM@n,w
  8521  2A9E  3EA0               	addlw	(low (readNVM@nvm| 0))& (0+255)
  8522  2A9F  0086               	movwf	6
  8523  2AA0  0187               	clrf	7
  8524  2AA1  0823               	movf	??_readNVM,w
  8525  2AA2  0081               	movwf	1
  8526                           
  8527                           ;system.c: 502:  }
  8528  2AA3  3001               	movlw	1
  8529  2AA4  00A3               	movwf	??_readNVM
  8530  2AA5  0823               	movf	??_readNVM,w
  8531  2AA6  07E4               	addwf	readNVM@n,f
  8532  2AA7  3020               	movlw	32
  8533  2AA8  0264               	subwf	readNVM@n,w
  8534  2AA9  1C03               	skipc
  8535  2AAA  2A84               	goto	l8893
  8536                           
  8537                           ;system.c: 504:  data.heater[0].lensDia = nvm.lensDia[0];
  8538  2AAB  3089               	movlw	137
  8539  2AAC  0086               	movwf	6
  8540  2AAD  3027               	movlw	39
  8541  2AAE  0087               	movwf	7
  8542  2AAF  0141               	movlb	1	; select bank1
  8543  2AB0  0820               	movf	readNVM@nvm^(0+128),w
  8544  2AB1  3FC0               	movwi [0]fsr1
  8545  2AB2  0821               	movf	(readNVM@nvm+1)^(0+128),w
  8546  2AB3  3FC1               	movwi [1]fsr1
  8547  2AB4  0822               	movf	(readNVM@nvm+2)^(0+128),w
  8548  2AB5  3FC2               	movwi [2]fsr1
  8549  2AB6  0823               	movf	(readNVM@nvm+3)^(0+128),w
  8550  2AB7  3FC3               	movwi [3]fsr1
  8551                           
  8552                           ;system.c: 505:  data.heater[1].lensDia = nvm.lensDia[1];
  8553  2AB8  30A8               	movlw	168
  8554  2AB9  0086               	movwf	6
  8555  2ABA  3027               	movlw	39
  8556  2ABB  0087               	movwf	7
  8557  2ABC  0824               	movf	(readNVM@nvm^(0+128)+4),w
  8558  2ABD  3FC0               	movwi [0]fsr1
  8559  2ABE  0825               	movf	((readNVM@nvm+1)^(0+128)+4),w
  8560  2ABF  3FC1               	movwi [1]fsr1
  8561  2AC0  0826               	movf	((readNVM@nvm+2)^(0+128)+4),w
  8562  2AC1  3FC2               	movwi [2]fsr1
  8563  2AC2  0827               	movf	((readNVM@nvm+3)^(0+128)+4),w
  8564  2AC3  3FC3               	movwi [3]fsr1
  8565                           
  8566                           ;system.c: 506:  data.heater[2].lensDia = nvm.lensDia[2];
  8567  2AC4  30C7               	movlw	199
  8568  2AC5  0086               	movwf	6
  8569  2AC6  3027               	movlw	39
  8570  2AC7  0087               	movwf	7
  8571  2AC8  0828               	movf	(readNVM@nvm^(0+128)+8),w
  8572  2AC9  3FC0               	movwi [0]fsr1
  8573  2ACA  0829               	movf	((readNVM@nvm+1)^(0+128)+8),w
  8574  2ACB  3FC1               	movwi [1]fsr1
  8575  2ACC  082A               	movf	((readNVM@nvm+2)^(0+128)+8),w
  8576  2ACD  3FC2               	movwi [2]fsr1
  8577  2ACE  082B               	movf	((readNVM@nvm+3)^(0+128)+8),w
  8578  2ACF  3FC3               	movwi [3]fsr1
  8579                           
  8580                           ;system.c: 507:  data.heater[3].lensDia = nvm.lensDia[3];
  8581  2AD0  30E6               	movlw	230
  8582  2AD1  0086               	movwf	6
  8583  2AD2  3027               	movlw	39
  8584  2AD3  0087               	movwf	7
  8585  2AD4  082C               	movf	(readNVM@nvm^(0+128)+12),w
  8586  2AD5  3FC0               	movwi [0]fsr1
  8587  2AD6  082D               	movf	((readNVM@nvm+1)^(0+128)+12),w
  8588  2AD7  3FC1               	movwi [1]fsr1
  8589  2AD8  082E               	movf	((readNVM@nvm+2)^(0+128)+12),w
  8590  2AD9  3FC2               	movwi [2]fsr1
  8591  2ADA  082F               	movf	((readNVM@nvm+3)^(0+128)+12),w
  8592  2ADB  3FC3               	movwi [3]fsr1
  8593                           
  8594                           ;system.c: 508:  data.dpOffset = nvm.dpOffset;
  8595  2ADC  304A               	movlw	74
  8596  2ADD  0086               	movwf	6
  8597  2ADE  3027               	movlw	39
  8598  2ADF  0087               	movwf	7
  8599  2AE0  315D               	addfsr 1,29
  8600  2AE1  0830               	movf	(readNVM@nvm^(0+128)+16),w
  8601  2AE2  3FC0               	movwi [0]fsr1
  8602  2AE3  0831               	movf	((readNVM@nvm+1)^(0+128)+16),w
  8603  2AE4  3FC1               	movwi [1]fsr1
  8604  2AE5  0832               	movf	((readNVM@nvm+2)^(0+128)+16),w
  8605  2AE6  3FC2               	movwi [2]fsr1
  8606  2AE7  0833               	movf	((readNVM@nvm+3)^(0+128)+16),w
  8607  2AE8  3FC3               	movwi [3]fsr1
  8608                           
  8609                           ;system.c: 509:  data.skyTemp = nvm.skyTemp;
  8610  2AE9  306B               	movlw	107
  8611  2AEA  0086               	movwf	6
  8612  2AEB  3027               	movlw	39
  8613  2AEC  0087               	movwf	7
  8614  2AED  0834               	movf	(readNVM@nvm^(0+128)+20),w
  8615  2AEE  3FC0               	movwi [0]fsr1
  8616  2AEF  0835               	movf	((readNVM@nvm+1)^(0+128)+20),w
  8617  2AF0  3FC1               	movwi [1]fsr1
  8618  2AF1  0836               	movf	((readNVM@nvm+2)^(0+128)+20),w
  8619  2AF2  3FC2               	movwi [2]fsr1
  8620  2AF3  0837               	movf	((readNVM@nvm+3)^(0+128)+20),w
  8621  2AF4  3FC3               	movwi [3]fsr1
  8622                           
  8623                           ;system.c: 510:  data.fudgeFactor = nvm.fudgeFactor;
  8624  2AF5  306F               	movlw	111
  8625  2AF6  0086               	movwf	6
  8626  2AF7  3027               	movlw	39
  8627  2AF8  0087               	movwf	7
  8628  2AF9  0838               	movf	(readNVM@nvm^(0+128)+24),w
  8629  2AFA  3FC0               	movwi [0]fsr1
  8630  2AFB  0839               	movf	((readNVM@nvm+1)^(0+128)+24),w
  8631  2AFC  3FC1               	movwi [1]fsr1
  8632  2AFD  083A               	movf	((readNVM@nvm+2)^(0+128)+24),w
  8633  2AFE  3FC2               	movwi [2]fsr1
  8634  2AFF  083B               	movf	((readNVM@nvm+3)^(0+128)+24),w
  8635  2B00  3FC3               	movwi [3]fsr1
  8636  2B01  0008               	return
  8637  2B02                     __end_of_readNVM:	
  8638                           
  8639                           	psect	text5
  8640  3257                     __ptext5:	
  8641 ;; *************** function _FLASH_ReadWord *****************
  8642 ;; Defined at:
  8643 ;;		line 8 in file "memory.c"
  8644 ;; Parameters:    Size  Location     Type
  8645 ;;  flashAddr       2    0[BANK0 ] unsigned short 
  8646 ;; Auto vars:     Size  Location     Type
  8647 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  8648 ;; Return value:  Size  Location     Type
  8649 ;;                  2    0[BANK0 ] unsigned short 
  8650 ;; Registers used:
  8651 ;;		wreg, status,2, status,0
  8652 ;; Tracked objects:
  8653 ;;		On entry : 0/0
  8654 ;;		On exit  : 0/0
  8655 ;;		Unchanged: 0/0
  8656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8657 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8660 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8661 ;;Total ram usage:        3 bytes
  8662 ;; Hardware stack levels used:    1
  8663 ;; Hardware stack levels required when called:    3
  8664 ;; This function calls:
  8665 ;;		Nothing
  8666 ;; This function is called by:
  8667 ;;		_readNVM
  8668 ;;		_FLASH_WriteWord
  8669 ;; This function uses a non-reentrant model
  8670 ;;
  8671                           
  8672                           
  8673                           ;psect for function _FLASH_ReadWord
  8674  3257                     _FLASH_ReadWord:	
  8675                           
  8676                           ;memory.c: 8: uint16_t FLASH_ReadWord(uint16_t flashAddr);memory.c: 9: {;memory.c: 10:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
  8677                           
  8678                           ;incstack = 0
  8679                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  8680  3257  3000               	movlw	0
  8681  3258  1B8B               	btfsc	11,7	;volatile
  8682  3259  3001               	movlw	1
  8683  325A  0140               	movlb	0	; select bank0
  8684  325B  00A2               	movwf	FLASH_ReadWord@GIEBitValue
  8685                           
  8686                           ;memory.c: 12:  INTCONbits.GIE = 0;
  8687  325C  138B               	bcf	11,7	;volatile
  8688                           
  8689                           ;memory.c: 13:  NVMADRL = (flashAddr & 0x00FF);
  8690  325D  0820               	movf	FLASH_ReadWord@flashAddr,w
  8691  325E  0150               	movlb	16	; select bank16
  8692  325F  009A               	movwf	26	;volatile
  8693                           
  8694                           ;memory.c: 14:  NVMADRH = ((flashAddr & 0xFF00) >> 8);
  8695  3260  0140               	movlb	0	; select bank0
  8696  3261  0821               	movf	FLASH_ReadWord@flashAddr+1,w
  8697  3262  0150               	movlb	16	; select bank16
  8698  3263  009B               	movwf	27	;volatile
  8699                           
  8700                           ;memory.c: 16:  NVMCON1bits.NVMREGS = 0;
  8701  3264  131E               	bcf	30,6	;volsfr
  8702                           
  8703                           ;memory.c: 17:  NVMCON1bits.RD = 1;
  8704  3265  141E               	bsf	30,0	;volsfr
  8705                           
  8706                           ;memory.c: 18:  __nop();
  8707  3266  0000               	nop
  8708                           
  8709                           ;memory.c: 19:  __nop();
  8710  3267  0000               	nop
  8711                           
  8712                           ;memory.c: 20:  INTCONbits.GIE = GIEBitValue;
  8713  3268  0140               	movlb	0	; select bank0
  8714  3269  0C22               	rrf	FLASH_ReadWord@GIEBitValue,w
  8715  326A  1C03               	skipc
  8716  326B  138B               	bcf	11,7	;volatile
  8717  326C  1803               	skipnc
  8718  326D  178B               	bsf	11,7	;volatile
  8719                           
  8720                           ;memory.c: 22:  return((uint16_t) ((NVMDATH << 8) | NVMDATL));
  8721  326E  0150               	movlb	16	; select bank16
  8722  326F  081D               	movf	29,w	;volatile
  8723  3270  0140               	movlb	0	; select bank0
  8724  3271  00A1               	movwf	?_FLASH_ReadWord+1
  8725  3272  0150               	movlb	16	; select bank16
  8726  3273  081C               	movf	28,w	;volatile
  8727  3274  0140               	movlb	0	; select bank0
  8728  3275  00A0               	movwf	?_FLASH_ReadWord
  8729  3276  0008               	return
  8730  3277                     __end_of_FLASH_ReadWord:	
  8731                           
  8732                           	psect	text6
  8733  183B                     __ptext6:	
  8734 ;; *************** function _menu *****************
  8735 ;; Defined at:
  8736 ;;		line 94 in file "menuhelper.c"
  8737 ;; Parameters:    Size  Location     Type
  8738 ;;		None
  8739 ;; Auto vars:     Size  Location     Type
  8740 ;;  func            2   57[BANK1 ] PTR FTN()unsigned char 
  8741 ;;		 -> setFudgeFactor(1), setSkyTemp(1), setDPOffset(1), setup(1), 
  8742 ;;		 -> setLensDia(1), setOutputPower(1), channelSetup(1), channelView(1), 
  8743 ;;		 -> statusView(1), 
  8744 ;;  nextState       1   59[BANK1 ] char 
  8745 ;;  timeout         1   56[BANK1 ] unsigned char 
  8746 ;;  pb              1   55[BANK1 ] enum E7869
  8747 ;;  page            1   54[BANK1 ] char 
  8748 ;; Return value:  Size  Location     Type
  8749 ;;                  1    wreg      void 
  8750 ;; Registers used:
  8751 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8752 ;; Tracked objects:
  8753 ;;		On entry : 0/0
  8754 ;;		On exit  : 0/0
  8755 ;;		Unchanged: 0/0
  8756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8758 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8759 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8760 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8761 ;;Total ram usage:       10 bytes
  8762 ;; Hardware stack levels used:    1
  8763 ;; Hardware stack levels required when called:    8
  8764 ;; This function calls:
  8765 ;;		_OLED_command
  8766 ;;		_channelSetup
  8767 ;;		_channelView
  8768 ;;		_error
  8769 ;;		_getNextState
  8770 ;;		_getPB
  8771 ;;		_setDPOffset
  8772 ;;		_setFudgeFactor
  8773 ;;		_setLensDia
  8774 ;;		_setOutputPower
  8775 ;;		_setSkyTemp
  8776 ;;		_setup
  8777 ;;		_statusView
  8778 ;;		_timeSince
  8779 ;; This function is called by:
  8780 ;;		_main
  8781 ;; This function uses a non-reentrant model
  8782 ;;
  8783                           
  8784                           
  8785                           ;psect for function _menu
  8786  183B                     _menu:	
  8787                           
  8788                           ;menuhelper.c: 100:  enum e_buttonPress pb;;menuhelper.c: 101:  t_stateFuncPtr func;;men
      +                          uhelper.c: 104:  if (sleep) {
  8789                           
  8790                           ;incstack = 0
  8791                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8792  183B  0142               	movlb	2	; select bank2
  8793  183C  0864               	movf	menu@sleep^(0+256),w
  8794  183D  1903               	btfsc	3,2
  8795  183E  2865               	goto	l9379
  8796                           
  8797                           ;menuhelper.c: 105:   if (timeSince(userActivity) < 1200) {
  8798  183F  085F               	movf	(_userActivity+3)^(0+256),w	;volatile
  8799  1840  0140               	movlb	0	; select bank0
  8800  1841  00A3               	movwf	timeSince@since+3
  8801  1842  0142               	movlb	2	; select bank2
  8802  1843  085E               	movf	(_userActivity+2)^(0+256),w	;volatile
  8803  1844  0140               	movlb	0	; select bank0
  8804  1845  00A2               	movwf	timeSince@since+2
  8805  1846  0142               	movlb	2	; select bank2
  8806  1847  085D               	movf	(_userActivity+1)^(0+256),w	;volatile
  8807  1848  0140               	movlb	0	; select bank0
  8808  1849  00A1               	movwf	timeSince@since+1
  8809  184A  0142               	movlb	2	; select bank2
  8810  184B  085C               	movf	_userActivity^(0+256),w	;volatile
  8811  184C  0140               	movlb	0	; select bank0
  8812  184D  00A0               	movwf	timeSince@since
  8813  184E  31B6  26E4  3198   	fcall	_timeSince
  8814  1851  0140               	movlb	0	; select bank0
  8815  1852  0823               	movf	?_timeSince+3,w
  8816  1853  1D03               	btfss	3,2
  8817  1854  0008               	return
  8818  1855  0822               	movf	?_timeSince+2,w
  8819  1856  1D03               	btfss	3,2
  8820  1857  0008               	return
  8821  1858  30B0               	movlw	176
  8822  1859  0220               	subwf	?_timeSince,w
  8823  185A  3004               	movlw	4
  8824  185B  3B21               	subwfb	?_timeSince+1,w
  8825  185C  1803               	btfsc	3,0
  8826  185D  0008               	return
  8827                           
  8828                           ;menuhelper.c: 107:    sleep = 0;
  8829  185E  0142               	movlb	2	; select bank2
  8830  185F  01E4               	clrf	menu@sleep^(0+256)
  8831                           
  8832                           ;menuhelper.c: 108:    OLED_command(0x08 | 0x04);
  8833  1860  300C               	movlw	12
  8834  1861  31B1  2150  3198   	fcall	_OLED_command
  8835                           
  8836                           ;menuhelper.c: 109:   } else {
  8837  1864  288B               	goto	l9387
  8838  1865                     l9379:	
  8839                           
  8840                           ;menuhelper.c: 113:   if (timeSince(userActivity) > 1200) {
  8841  1865  085F               	movf	(_userActivity+3)^(0+256),w	;volatile
  8842  1866  0140               	movlb	0	; select bank0
  8843  1867  00A3               	movwf	timeSince@since+3
  8844  1868  0142               	movlb	2	; select bank2
  8845  1869  085E               	movf	(_userActivity+2)^(0+256),w	;volatile
  8846  186A  0140               	movlb	0	; select bank0
  8847  186B  00A2               	movwf	timeSince@since+2
  8848  186C  0142               	movlb	2	; select bank2
  8849  186D  085D               	movf	(_userActivity+1)^(0+256),w	;volatile
  8850  186E  0140               	movlb	0	; select bank0
  8851  186F  00A1               	movwf	timeSince@since+1
  8852  1870  0142               	movlb	2	; select bank2
  8853  1871  085C               	movf	_userActivity^(0+256),w	;volatile
  8854  1872  0140               	movlb	0	; select bank0
  8855  1873  00A0               	movwf	timeSince@since
  8856  1874  31B6  26E4  3198   	fcall	_timeSince
  8857  1877  0140               	movlb	0	; select bank0
  8858  1878  0823               	movf	?_timeSince+3,w
  8859  1879  1D03               	btfss	3,2
  8860  187A  2884               	goto	l9381
  8861  187B  0822               	movf	?_timeSince+2,w
  8862  187C  1D03               	btfss	3,2
  8863  187D  2884               	goto	l9381
  8864  187E  30B1               	movlw	177
  8865  187F  0220               	subwf	?_timeSince,w
  8866  1880  3004               	movlw	4
  8867  1881  3B21               	subwfb	?_timeSince+1,w
  8868  1882  1C03               	btfss	3,0
  8869  1883  288B               	goto	l9387
  8870  1884                     l9381:	
  8871                           
  8872                           ;menuhelper.c: 114:    sleep = 1;
  8873  1884  0142               	movlb	2	; select bank2
  8874  1885  01E4               	clrf	menu@sleep^(0+256)
  8875  1886  0AE4               	incf	menu@sleep^(0+256),f
  8876                           
  8877                           ;menuhelper.c: 115:    OLED_command(0x08 | 0x00);
  8878  1887  3008               	movlw	8
  8879  1888  31B1  2150         	fcall	_OLED_command
  8880  188A  0008               	return
  8881  188B                     l9387:	
  8882                           
  8883                           ;menuhelper.c: 121:  func = stateFuncTbl[state];
  8884  188B  0142               	movlb	2	; select bank2
  8885  188C  0863               	movf	menu@state^(0+256),w
  8886  188D  0141               	movlb	1	; select bank1
  8887  188E  00D2               	movwf	??_menu^(0+128)
  8888  188F  01D3               	clrf	(??_menu^(0+128)+1)
  8889  1890  35D2               	lslf	??_menu^(0+128),f
  8890  1891  0DD3               	rlf	(??_menu^(0+128)+1),f
  8891  1892  3000               	movlw	low (_stateFuncTbl| (0+32768))
  8892  1893  0752               	addwf	??_menu^(0+128),w
  8893  1894  0084               	movwf	4
  8894  1895  30B8               	movlw	high (_stateFuncTbl| (0+32768))
  8895  1896  3D53               	addwfc	(??_menu+1)^(0+128),w
  8896  1897  0085               	movwf	5
  8897  1898  3F00               	moviw [0]fsr0
  8898  1899  00D9               	movwf	menu@func^(0+128)
  8899  189A  3F01               	moviw [1]fsr0
  8900  189B  00DA               	movwf	(menu@func+1)^(0+128)
  8901                           
  8902                           ;menuhelper.c: 122:  if (func)
  8903  189C  0859               	movf	menu@func^(0+128),w
  8904  189D  045A               	iorwf	(menu@func+1)^(0+128),w
  8905  189E  1903               	btfsc	3,2
  8906  189F  28AA               	goto	l9393
  8907                           
  8908                           ;menuhelper.c: 123:   page = (*func)();
  8909  18A0  085A               	movf	(menu@func+1)^(0+128),w
  8910  18A1  008A               	movwf	10
  8911  18A2  0859               	movf	menu@func^(0+128),w
  8912  18A3  000A               	callw
  8913  18A4  3198               	pagesel	$
  8914  18A5  0141               	movlb	1	; select bank1
  8915  18A6  00D2               	movwf	??_menu^(0+128)
  8916  18A7  0852               	movf	??_menu^(0+128),w
  8917  18A8  00D6               	movwf	menu@page^(0+128)
  8918  18A9  28AE               	goto	l9395
  8919  18AA                     l9393:	
  8920                           
  8921                           ;menuhelper.c: 125:   error(ERR_MENU);
  8922  18AA  300C               	movlw	12
  8923  18AB  3198  2000  3198   	fcall	_error
  8924  18AE                     l9395:	
  8925                           
  8926                           ;menuhelper.c: 127:  g_screenRefresh = 0;
  8927  18AE  0141               	movlb	1	; select bank1
  8928  18AF  01ED               	clrf	_g_screenRefresh^(0+128)
  8929                           
  8930                           ;menuhelper.c: 128:  pb = getPB();
  8931  18B0  31B1  217A  3198   	fcall	_getPB
  8932  18B3  0141               	movlb	1	; select bank1
  8933  18B4  00D2               	movwf	??_menu^(0+128)
  8934  18B5  0852               	movf	??_menu^(0+128),w
  8935  18B6  00D7               	movwf	menu@pb^(0+128)
  8936                           
  8937                           ;menuhelper.c: 129:  timeout = (timeSince(userActivity) > 300);
  8938  18B7  0142               	movlb	2	; select bank2
  8939  18B8  085F               	movf	(_userActivity+3)^(0+256),w	;volatile
  8940  18B9  0140               	movlb	0	; select bank0
  8941  18BA  00A3               	movwf	timeSince@since+3
  8942  18BB  0142               	movlb	2	; select bank2
  8943  18BC  085E               	movf	(_userActivity+2)^(0+256),w	;volatile
  8944  18BD  0140               	movlb	0	; select bank0
  8945  18BE  00A2               	movwf	timeSince@since+2
  8946  18BF  0142               	movlb	2	; select bank2
  8947  18C0  085D               	movf	(_userActivity+1)^(0+256),w	;volatile
  8948  18C1  0140               	movlb	0	; select bank0
  8949  18C2  00A1               	movwf	timeSince@since+1
  8950  18C3  0142               	movlb	2	; select bank2
  8951  18C4  085C               	movf	_userActivity^(0+256),w	;volatile
  8952  18C5  0140               	movlb	0	; select bank0
  8953  18C6  00A0               	movwf	timeSince@since
  8954  18C7  31B6  26E4  3198   	fcall	_timeSince
  8955  18CA  0140               	movlb	0	; select bank0
  8956  18CB  0823               	movf	?_timeSince+3,w
  8957  18CC  1D03               	btfss	3,2
  8958  18CD  28D7               	goto	u10741
  8959  18CE  0822               	movf	?_timeSince+2,w
  8960  18CF  1D03               	btfss	3,2
  8961  18D0  28D7               	goto	u10741
  8962  18D1  302D               	movlw	45
  8963  18D2  0220               	subwf	?_timeSince,w
  8964  18D3  3001               	movlw	1
  8965  18D4  3B21               	subwfb	?_timeSince+1,w
  8966  18D5  1C03               	btfss	3,0
  8967  18D6  28D9               	goto	u10740
  8968  18D7                     u10741:	
  8969  18D7  3001               	movlw	1
  8970  18D8  28DA               	goto	u10750
  8971  18D9                     u10740:	
  8972  18D9  3000               	movlw	0
  8973  18DA                     u10750:	
  8974  18DA  0141               	movlb	1	; select bank1
  8975  18DB  00D2               	movwf	??_menu^(0+128)
  8976  18DC  0852               	movf	??_menu^(0+128),w
  8977  18DD  00D8               	movwf	menu@timeout^(0+128)
  8978                           
  8979                           ;menuhelper.c: 131:  nextState = getNextState(state, page, pb, timeout);
  8980  18DE  0856               	movf	menu@page^(0+128),w
  8981  18DF  00D2               	movwf	??_menu^(0+128)
  8982  18E0  0852               	movf	??_menu^(0+128),w
  8983  18E1  0140               	movlb	0	; select bank0
  8984  18E2  00B3               	movwf	getNextState@intState
  8985  18E3  0141               	movlb	1	; select bank1
  8986  18E4  0857               	movf	menu@pb^(0+128),w
  8987  18E5  00D3               	movwf	(??_menu+1)^(0+128)
  8988  18E6  0853               	movf	(??_menu+1)^(0+128),w
  8989  18E7  0140               	movlb	0	; select bank0
  8990  18E8  00B4               	movwf	getNextState@pb
  8991  18E9  0141               	movlb	1	; select bank1
  8992  18EA  0858               	movf	menu@timeout^(0+128),w
  8993  18EB  00D4               	movwf	(??_menu+2)^(0+128)
  8994  18EC  0854               	movf	(??_menu+2)^(0+128),w
  8995  18ED  0140               	movlb	0	; select bank0
  8996  18EE  00B5               	movwf	getNextState@timeout
  8997  18EF  0142               	movlb	2	; select bank2
  8998  18F0  0863               	movf	menu@state^(0+256),w
  8999  18F1  31A0  2053  3198   	fcall	_getNextState
  9000  18F4  0141               	movlb	1	; select bank1
  9001  18F5  00D5               	movwf	(??_menu+3)^(0+128)
  9002  18F6  0855               	movf	(??_menu+3)^(0+128),w
  9003  18F7  00DB               	movwf	menu@nextState^(0+128)
  9004                           
  9005                           ;menuhelper.c: 133:  if (nextState > -1) {
  9006  18F8  1BDB               	btfsc	menu@nextState^(0+128),7
  9007  18F9  2914               	goto	l9411
  9008                           
  9009                           ;menuhelper.c: 135:   if (state != nextState) {
  9010  18FA  085B               	movf	menu@nextState^(0+128),w
  9011  18FB  00D2               	movwf	??_menu^(0+128)
  9012  18FC  01D3               	clrf	(??_menu^(0+128)+1)
  9013  18FD  1BD2               	btfsc	??_menu^(0+128),7
  9014  18FE  03D3               	decf	(??_menu^(0+128)+1),f
  9015  18FF  0142               	movlb	2	; select bank2
  9016  1900  0863               	movf	menu@state^(0+256),w
  9017  1901  0141               	movlb	1	; select bank1
  9018  1902  00D4               	movwf	(??_menu+2)^(0+128)
  9019  1903  01D5               	clrf	((??_menu+2)^(0+128)+1)
  9020  1904  0853               	movf	(??_menu+1)^(0+128),w
  9021  1905  0655               	xorwf	(??_menu+3)^(0+128),w
  9022  1906  1D03               	skipz
  9023  1907  290A               	goto	u10775
  9024  1908  0852               	movf	??_menu^(0+128),w
  9025  1909  0654               	xorwf	(??_menu+2)^(0+128),w
  9026  190A                     u10775:	
  9027  190A  1903               	skipnz
  9028  190B  0008               	return
  9029                           
  9030                           ;menuhelper.c: 136:    g_screenRefresh = 1;
  9031  190C  01ED               	clrf	_g_screenRefresh^(0+128)
  9032  190D  0AED               	incf	_g_screenRefresh^(0+128),f
  9033                           
  9034                           ;menuhelper.c: 137:    state = nextState;
  9035  190E  085B               	movf	menu@nextState^(0+128),w
  9036  190F  00D2               	movwf	??_menu^(0+128)
  9037  1910  0852               	movf	??_menu^(0+128),w
  9038  1911  0142               	movlb	2	; select bank2
  9039  1912  00E3               	movwf	menu@state^(0+256)
  9040  1913  0008               	return
  9041  1914                     l9411:	
  9042                           
  9043                           ;menuhelper.c: 140:   error(ERR_MENU);
  9044  1914  300C               	movlw	12
  9045  1915  3198  2000         	fcall	_error
  9046  1917  0008               	return
  9047  1918                     __end_of_menu:	
  9048                           
  9049                           	psect	text7
  9050  2919                     __ptext7:	
  9051 ;; *************** function _setFudgeFactor *****************
  9052 ;; Defined at:
  9053 ;;		line 331 in file "menu.c"
  9054 ;; Parameters:    Size  Location     Type
  9055 ;;		None
  9056 ;; Auto vars:     Size  Location     Type
  9057 ;;		None
  9058 ;; Return value:  Size  Location     Type
  9059 ;;                  1    wreg      unsigned char 
  9060 ;; Registers used:
  9061 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9062 ;; Tracked objects:
  9063 ;;		On entry : 0/0
  9064 ;;		On exit  : 0/0
  9065 ;;		Unchanged: 0/0
  9066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9069 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9070 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9071 ;;Total ram usage:        1 bytes
  9072 ;; Hardware stack levels used:    1
  9073 ;; Hardware stack levels required when called:    7
  9074 ;; This function calls:
  9075 ;;		_OLED_print_xy
  9076 ;;		_ftoa
  9077 ;;		_getPB
  9078 ;;		_returnToPage
  9079 ;;		_spinInput
  9080 ;;		_storeNVM
  9081 ;; This function is called by:
  9082 ;;		_menu
  9083 ;; This function uses a non-reentrant model
  9084 ;;
  9085                           
  9086                           
  9087                           ;psect for function _setFudgeFactor
  9088  2919                     _setFudgeFactor:	
  9089                           
  9090                           ;menu.c: 333:  returnToPage(0);
  9091                           
  9092                           ;incstack = 0
  9093                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9094  2919  3000               	movlw	0
  9095  291A  31B3  23D3  31A9   	fcall	_returnToPage
  9096                           
  9097                           ;menu.c: 334:  if (g_screenRefresh)
  9098  291D  0141               	movlb	1	; select bank1
  9099  291E  086D               	movf	_g_screenRefresh^(0+128),w
  9100  291F  1903               	btfsc	3,2
  9101  2920  292B               	goto	l8535
  9102                           
  9103                           ;menu.c: 335:   OLED_print_xy(0, 0, "Fudge factor");
  9104  2921  0140               	movlb	0	; select bank0
  9105  2922  01AD               	clrf	OLED_print_xy@row
  9106  2923  3063               	movlw	low ((STR_48+24)| (0+32768))
  9107  2924  00AE               	movwf	OLED_print_xy@s
  9108  2925  30B8               	movlw	high ((STR_48+24)| (0+32768))
  9109  2926  00AF               	movwf	OLED_print_xy@s+1
  9110  2927  3000               	movlw	0
  9111  2928  31B3  23A1  31A9   	fcall	_OLED_print_xy
  9112  292B                     l8535:	
  9113                           
  9114                           ;menu.c: 336:  spinInput(&data.fudgeFactor, 0.1, 5.0, 0.1);
  9115  292B  306F               	movlw	111
  9116  292C  0141               	movlb	1	; select bank1
  9117  292D  00B9               	movwf	spinInput@input^(0+128)
  9118  292E  3027               	movlw	39
  9119  292F  00BA               	movwf	(spinInput@input^(0+128)+1)
  9120  2930  303D               	movlw	61
  9121  2931  00BE               	movwf	(spinInput@min+3)^(0+128)
  9122  2932  30CC               	movlw	204
  9123  2933  00BD               	movwf	(spinInput@min+2)^(0+128)
  9124  2934  30CC               	movlw	204
  9125  2935  00BC               	movwf	(spinInput@min+1)^(0+128)
  9126  2936  30CD               	movlw	205
  9127  2937  00BB               	movwf	spinInput@min^(0+128)
  9128  2938  3040               	movlw	64
  9129  2939  00C2               	movwf	(spinInput@max+3)^(0+128)
  9130  293A  30A0               	movlw	160
  9131  293B  00C1               	movwf	(spinInput@max+2)^(0+128)
  9132  293C  3000               	movlw	0
  9133  293D  00C0               	movwf	(spinInput@max+1)^(0+128)
  9134  293E  3000               	movlw	0
  9135  293F  00BF               	movwf	spinInput@max^(0+128)
  9136  2940  303D               	movlw	61
  9137  2941  00C6               	movwf	(spinInput@step+3)^(0+128)
  9138  2942  30CC               	movlw	204
  9139  2943  00C5               	movwf	(spinInput@step+2)^(0+128)
  9140  2944  30CC               	movlw	204
  9141  2945  00C4               	movwf	(spinInput@step+1)^(0+128)
  9142  2946  30CD               	movlw	205
  9143  2947  00C3               	movwf	spinInput@step^(0+128)
  9144  2948  31AC  24A5  31A9   	fcall	_spinInput
  9145                           
  9146                           ;menu.c: 337:  ftoa(str, data.fudgeFactor, 3, 1);
  9147  294B  306F               	movlw	111
  9148  294C  0086               	movwf	6
  9149  294D  3027               	movlw	39
  9150  294E  0087               	movwf	7
  9151  294F  3F40               	moviw [0]fsr1
  9152  2950  0141               	movlb	1	; select bank1
  9153  2951  00B9               	movwf	ftoa@fValue^(0+128)
  9154  2952  3F41               	moviw [1]fsr1
  9155  2953  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9156  2954  3F42               	moviw [2]fsr1
  9157  2955  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9158  2956  3F43               	moviw [3]fsr1
  9159  2957  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9160  2958  3003               	movlw	3
  9161  2959  00C8               	movwf	??_setFudgeFactor^(0+128)
  9162  295A  0848               	movf	??_setFudgeFactor^(0+128),w
  9163  295B  00BD               	movwf	ftoa@width^(0+128)
  9164  295C  01BE               	clrf	ftoa@prec^(0+128)
  9165  295D  0ABE               	incf	ftoa@prec^(0+128),f
  9166  295E  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9167  295F  31A2  223B  31A9   	fcall	_ftoa
  9168                           
  9169                           ;menu.c: 338:  OLED_print_xy(0, 1, "\004");
  9170  2962  0140               	movlb	0	; select bank0
  9171  2963  01AD               	clrf	OLED_print_xy@row
  9172  2964  0AAD               	incf	OLED_print_xy@row,f
  9173  2965  3003               	movlw	low ((STR_54+5)| (0+32768))
  9174  2966  00AE               	movwf	OLED_print_xy@s
  9175  2967  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9176  2968  00AF               	movwf	OLED_print_xy@s+1
  9177  2969  3000               	movlw	0
  9178  296A  31B3  23A1  31A9   	fcall	_OLED_print_xy
  9179                           
  9180                           ;menu.c: 339:  OLED_print_xy(1, 1, str);
  9181  296D  0140               	movlb	0	; select bank0
  9182  296E  01AD               	clrf	OLED_print_xy@row
  9183  296F  0AAD               	incf	OLED_print_xy@row,f
  9184  2970  30E6               	movlw	low _str
  9185  2971  00AE               	movwf	OLED_print_xy@s
  9186  2972  3001               	movlw	high _str
  9187  2973  00AF               	movwf	OLED_print_xy@s+1
  9188  2974  3001               	movlw	1
  9189  2975  31B3  23A1  31A9   	fcall	_OLED_print_xy
  9190                           
  9191                           ;menu.c: 340:  OLED_print_xy(4, 1, " \003      ");
  9192  2978  0140               	movlb	0	; select bank0
  9193  2979  01AD               	clrf	OLED_print_xy@row
  9194  297A  0AAD               	incf	OLED_print_xy@row,f
  9195  297B  30A6               	movlw	low (STR_61| (0+32768))
  9196  297C  00AE               	movwf	OLED_print_xy@s
  9197  297D  30BA               	movlw	high (STR_61| (0+32768))
  9198  297E  00AF               	movwf	OLED_print_xy@s+1
  9199  297F  3004               	movlw	4
  9200  2980  31B3  23A1  31A9   	fcall	_OLED_print_xy
  9201                           
  9202                           ;menu.c: 341:  if (getPB() == PB_SHORT) {
  9203  2983  31B1  217A  31A9   	fcall	_getPB
  9204  2986  3A01               	xorlw	1
  9205  2987  1D03               	skipz
  9206  2988  298D               	goto	l8547
  9207                           
  9208                           ;menu.c: 342:   storeNVM();
  9209  2989  31AB  2302         	fcall	_storeNVM
  9210                           
  9211                           ;menu.c: 343:   return 0;
  9212  298B  3000               	movlw	0
  9213  298C  0008               	return
  9214  298D                     l8547:	
  9215                           
  9216                           ;menu.c: 345:  return 1;
  9217  298D  3001               	movlw	1
  9218  298E  0008               	return
  9219  298F                     __end_of_setFudgeFactor:	
  9220                           
  9221                           	psect	text8
  9222  28A4                     __ptext8:	
  9223 ;; *************** function _setSkyTemp *****************
  9224 ;; Defined at:
  9225 ;;		line 310 in file "menu.c"
  9226 ;; Parameters:    Size  Location     Type
  9227 ;;		None
  9228 ;; Auto vars:     Size  Location     Type
  9229 ;;		None
  9230 ;; Return value:  Size  Location     Type
  9231 ;;                  1    wreg      unsigned char 
  9232 ;; Registers used:
  9233 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9234 ;; Tracked objects:
  9235 ;;		On entry : 0/0
  9236 ;;		On exit  : 0/0
  9237 ;;		Unchanged: 0/0
  9238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9239 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9240 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9241 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9242 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9243 ;;Total ram usage:        1 bytes
  9244 ;; Hardware stack levels used:    1
  9245 ;; Hardware stack levels required when called:    7
  9246 ;; This function calls:
  9247 ;;		_OLED_print_xy
  9248 ;;		_ftoa
  9249 ;;		_getPB
  9250 ;;		_returnToPage
  9251 ;;		_spinInput
  9252 ;;		_storeNVM
  9253 ;; This function is called by:
  9254 ;;		_menu
  9255 ;; This function uses a non-reentrant model
  9256 ;;
  9257                           
  9258                           
  9259                           ;psect for function _setSkyTemp
  9260  28A4                     _setSkyTemp:	
  9261                           
  9262                           ;menu.c: 312:  returnToPage(0);
  9263                           
  9264                           ;incstack = 0
  9265                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9266  28A4  3000               	movlw	0
  9267  28A5  31B3  23D3  31A8   	fcall	_returnToPage
  9268                           
  9269                           ;menu.c: 313:  if (g_screenRefresh)
  9270  28A8  0141               	movlb	1	; select bank1
  9271  28A9  086D               	movf	_g_screenRefresh^(0+128),w
  9272  28AA  1903               	btfsc	3,2
  9273  28AB  28B6               	goto	l8513
  9274                           
  9275                           ;menu.c: 314:   OLED_print_xy(0, 0, "Sky temp.   ");
  9276  28AC  0140               	movlb	0	; select bank0
  9277  28AD  01AD               	clrf	OLED_print_xy@row
  9278  28AE  30F8               	movlw	low (STR_56| (0+32768))
  9279  28AF  00AE               	movwf	OLED_print_xy@s
  9280  28B0  30B9               	movlw	high (STR_56| (0+32768))
  9281  28B1  00AF               	movwf	OLED_print_xy@s+1
  9282  28B2  3000               	movlw	0
  9283  28B3  31B3  23A1  31A8   	fcall	_OLED_print_xy
  9284  28B6                     l8513:	
  9285                           
  9286                           ;menu.c: 315:  spinInput(&data.skyTemp, -50, -20, 1);
  9287  28B6  306B               	movlw	107
  9288  28B7  0141               	movlb	1	; select bank1
  9289  28B8  00B9               	movwf	spinInput@input^(0+128)
  9290  28B9  3027               	movlw	39
  9291  28BA  00BA               	movwf	(spinInput@input^(0+128)+1)
  9292  28BB  30C2               	movlw	194
  9293  28BC  00BE               	movwf	(spinInput@min+3)^(0+128)
  9294  28BD  3048               	movlw	72
  9295  28BE  00BD               	movwf	(spinInput@min+2)^(0+128)
  9296  28BF  3000               	movlw	0
  9297  28C0  00BC               	movwf	(spinInput@min+1)^(0+128)
  9298  28C1  3000               	movlw	0
  9299  28C2  00BB               	movwf	spinInput@min^(0+128)
  9300  28C3  30C1               	movlw	193
  9301  28C4  00C2               	movwf	(spinInput@max+3)^(0+128)
  9302  28C5  30A0               	movlw	160
  9303  28C6  00C1               	movwf	(spinInput@max+2)^(0+128)
  9304  28C7  3000               	movlw	0
  9305  28C8  00C0               	movwf	(spinInput@max+1)^(0+128)
  9306  28C9  3000               	movlw	0
  9307  28CA  00BF               	movwf	spinInput@max^(0+128)
  9308  28CB  303F               	movlw	63
  9309  28CC  00C6               	movwf	(spinInput@step+3)^(0+128)
  9310  28CD  3080               	movlw	128
  9311  28CE  00C5               	movwf	(spinInput@step+2)^(0+128)
  9312  28CF  3000               	movlw	0
  9313  28D0  00C4               	movwf	(spinInput@step+1)^(0+128)
  9314  28D1  3000               	movlw	0
  9315  28D2  00C3               	movwf	spinInput@step^(0+128)
  9316  28D3  31AC  24A5  31A8   	fcall	_spinInput
  9317                           
  9318                           ;menu.c: 316:  ftoa(str, data.skyTemp, 3, 0);
  9319  28D6  306B               	movlw	107
  9320  28D7  0086               	movwf	6
  9321  28D8  3027               	movlw	39
  9322  28D9  0087               	movwf	7
  9323  28DA  3F40               	moviw [0]fsr1
  9324  28DB  0141               	movlb	1	; select bank1
  9325  28DC  00B9               	movwf	ftoa@fValue^(0+128)
  9326  28DD  3F41               	moviw [1]fsr1
  9327  28DE  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9328  28DF  3F42               	moviw [2]fsr1
  9329  28E0  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9330  28E1  3F43               	moviw [3]fsr1
  9331  28E2  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9332  28E3  3003               	movlw	3
  9333  28E4  00C8               	movwf	??_setSkyTemp^(0+128)
  9334  28E5  0848               	movf	??_setSkyTemp^(0+128),w
  9335  28E6  00BD               	movwf	ftoa@width^(0+128)
  9336  28E7  01BE               	clrf	ftoa@prec^(0+128)
  9337  28E8  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9338  28E9  31A2  223B  31A8   	fcall	_ftoa
  9339                           
  9340                           ;menu.c: 317:  OLED_print_xy(0, 1, "\004");
  9341  28EC  0140               	movlb	0	; select bank0
  9342  28ED  01AD               	clrf	OLED_print_xy@row
  9343  28EE  0AAD               	incf	OLED_print_xy@row,f
  9344  28EF  3003               	movlw	low ((STR_54+5)| (0+32768))
  9345  28F0  00AE               	movwf	OLED_print_xy@s
  9346  28F1  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9347  28F2  00AF               	movwf	OLED_print_xy@s+1
  9348  28F3  3000               	movlw	0
  9349  28F4  31B3  23A1  31A8   	fcall	_OLED_print_xy
  9350                           
  9351                           ;menu.c: 318:  OLED_print_xy(1, 1, str);
  9352  28F7  0140               	movlb	0	; select bank0
  9353  28F8  01AD               	clrf	OLED_print_xy@row
  9354  28F9  0AAD               	incf	OLED_print_xy@row,f
  9355  28FA  30E6               	movlw	low _str
  9356  28FB  00AE               	movwf	OLED_print_xy@s
  9357  28FC  3001               	movlw	high _str
  9358  28FD  00AF               	movwf	OLED_print_xy@s+1
  9359  28FE  3001               	movlw	1
  9360  28FF  31B3  23A1  31A8   	fcall	_OLED_print_xy
  9361                           
  9362                           ;menu.c: 319:  OLED_print_xy(4, 1, "\001 \003     ");
  9363  2902  0140               	movlb	0	; select bank0
  9364  2903  01AD               	clrf	OLED_print_xy@row
  9365  2904  0AAD               	incf	OLED_print_xy@row,f
  9366  2905  309D               	movlw	low (STR_58| (0+32768))
  9367  2906  00AE               	movwf	OLED_print_xy@s
  9368  2907  30BA               	movlw	high (STR_58| (0+32768))
  9369  2908  00AF               	movwf	OLED_print_xy@s+1
  9370  2909  3004               	movlw	4
  9371  290A  31B3  23A1  31A8   	fcall	_OLED_print_xy
  9372                           
  9373                           ;menu.c: 320:  if (getPB() == PB_SHORT) {
  9374  290D  31B1  217A  31A8   	fcall	_getPB
  9375  2910  3A01               	xorlw	1
  9376  2911  1D03               	skipz
  9377  2912  2917               	goto	l8525
  9378                           
  9379                           ;menu.c: 321:   storeNVM();
  9380  2913  31AB  2302         	fcall	_storeNVM
  9381                           
  9382                           ;menu.c: 322:   return 0;
  9383  2915  3000               	movlw	0
  9384  2916  0008               	return
  9385  2917                     l8525:	
  9386                           
  9387                           ;menu.c: 324:  return 1;
  9388  2917  3001               	movlw	1
  9389  2918  0008               	return
  9390  2919                     __end_of_setSkyTemp:	
  9391                           
  9392                           	psect	text9
  9393  298F                     __ptext9:	
  9394 ;; *************** function _setDPOffset *****************
  9395 ;; Defined at:
  9396 ;;		line 289 in file "menu.c"
  9397 ;; Parameters:    Size  Location     Type
  9398 ;;		None
  9399 ;; Auto vars:     Size  Location     Type
  9400 ;;		None
  9401 ;; Return value:  Size  Location     Type
  9402 ;;                  1    wreg      unsigned char 
  9403 ;; Registers used:
  9404 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9405 ;; Tracked objects:
  9406 ;;		On entry : 0/0
  9407 ;;		On exit  : 0/0
  9408 ;;		Unchanged: 0/0
  9409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9412 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9413 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9414 ;;Total ram usage:        1 bytes
  9415 ;; Hardware stack levels used:    1
  9416 ;; Hardware stack levels required when called:    7
  9417 ;; This function calls:
  9418 ;;		_OLED_print_xy
  9419 ;;		_ftoa
  9420 ;;		_getPB
  9421 ;;		_returnToPage
  9422 ;;		_spinInput
  9423 ;;		_storeNVM
  9424 ;; This function is called by:
  9425 ;;		_menu
  9426 ;; This function uses a non-reentrant model
  9427 ;;
  9428                           
  9429                           
  9430                           ;psect for function _setDPOffset
  9431  298F                     _setDPOffset:	
  9432                           
  9433                           ;menu.c: 291:  returnToPage(0);
  9434                           
  9435                           ;incstack = 0
  9436                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9437  298F  3000               	movlw	0
  9438  2990  31B3  23D3  31A9   	fcall	_returnToPage
  9439                           
  9440                           ;menu.c: 292:  if (g_screenRefresh)
  9441  2993  0141               	movlb	1	; select bank1
  9442  2994  086D               	movf	_g_screenRefresh^(0+128),w
  9443  2995  1903               	btfsc	3,2
  9444  2996  29A1               	goto	l8491
  9445                           
  9446                           ;menu.c: 293:   OLED_print_xy(0, 0, "DP offset   ");
  9447  2997  0140               	movlb	0	; select bank0
  9448  2998  01AD               	clrf	OLED_print_xy@row
  9449  2999  3012               	movlw	low (STR_53| (0+32768))
  9450  299A  00AE               	movwf	OLED_print_xy@s
  9451  299B  30BA               	movlw	high (STR_53| (0+32768))
  9452  299C  00AF               	movwf	OLED_print_xy@s+1
  9453  299D  3000               	movlw	0
  9454  299E  31B3  23A1  31A9   	fcall	_OLED_print_xy
  9455  29A1                     l8491:	
  9456                           
  9457                           ;menu.c: 294:  spinInput(&data.dpOffset, 0, 10, 0.5);
  9458  29A1  3067               	movlw	103
  9459  29A2  0141               	movlb	1	; select bank1
  9460  29A3  00B9               	movwf	spinInput@input^(0+128)
  9461  29A4  3027               	movlw	39
  9462  29A5  00BA               	movwf	(spinInput@input^(0+128)+1)
  9463  29A6  3000               	movlw	0
  9464  29A7  00BE               	movwf	(spinInput@min+3)^(0+128)
  9465  29A8  3000               	movlw	0
  9466  29A9  00BD               	movwf	(spinInput@min+2)^(0+128)
  9467  29AA  3000               	movlw	0
  9468  29AB  00BC               	movwf	(spinInput@min+1)^(0+128)
  9469  29AC  3000               	movlw	0
  9470  29AD  00BB               	movwf	spinInput@min^(0+128)
  9471  29AE  3041               	movlw	65
  9472  29AF  00C2               	movwf	(spinInput@max+3)^(0+128)
  9473  29B0  3020               	movlw	32
  9474  29B1  00C1               	movwf	(spinInput@max+2)^(0+128)
  9475  29B2  3000               	movlw	0
  9476  29B3  00C0               	movwf	(spinInput@max+1)^(0+128)
  9477  29B4  3000               	movlw	0
  9478  29B5  00BF               	movwf	spinInput@max^(0+128)
  9479  29B6  303F               	movlw	63
  9480  29B7  00C6               	movwf	(spinInput@step+3)^(0+128)
  9481  29B8  3000               	movlw	0
  9482  29B9  00C5               	movwf	(spinInput@step+2)^(0+128)
  9483  29BA  3000               	movlw	0
  9484  29BB  00C4               	movwf	(spinInput@step+1)^(0+128)
  9485  29BC  3000               	movlw	0
  9486  29BD  00C3               	movwf	spinInput@step^(0+128)
  9487  29BE  31AC  24A5  31A9   	fcall	_spinInput
  9488                           
  9489                           ;menu.c: 295:  ftoa(str, data.dpOffset, 4, 1);
  9490  29C1  304A               	movlw	74
  9491  29C2  0086               	movwf	6
  9492  29C3  3027               	movlw	39
  9493  29C4  0087               	movwf	7
  9494  29C5  315D               	addfsr 1,29
  9495  29C6  3F40               	moviw [0]fsr1
  9496  29C7  0141               	movlb	1	; select bank1
  9497  29C8  00B9               	movwf	ftoa@fValue^(0+128)
  9498  29C9  3F41               	moviw [1]fsr1
  9499  29CA  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9500  29CB  3F42               	moviw [2]fsr1
  9501  29CC  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9502  29CD  3F43               	moviw [3]fsr1
  9503  29CE  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9504  29CF  3004               	movlw	4
  9505  29D0  00C8               	movwf	??_setDPOffset^(0+128)
  9506  29D1  0848               	movf	??_setDPOffset^(0+128),w
  9507  29D2  00BD               	movwf	ftoa@width^(0+128)
  9508  29D3  01BE               	clrf	ftoa@prec^(0+128)
  9509  29D4  0ABE               	incf	ftoa@prec^(0+128),f
  9510  29D5  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9511  29D6  31A2  223B  31A9   	fcall	_ftoa
  9512                           
  9513                           ;menu.c: 296:  OLED_print_xy(0, 1, "temp.\004");
  9514  29D9  0140               	movlb	0	; select bank0
  9515  29DA  01AD               	clrf	OLED_print_xy@row
  9516  29DB  0AAD               	incf	OLED_print_xy@row,f
  9517  29DC  30FE               	movlw	low (STR_54| (0+32768))
  9518  29DD  00AE               	movwf	OLED_print_xy@s
  9519  29DE  30BA               	movlw	high (STR_54| (0+32768))
  9520  29DF  00AF               	movwf	OLED_print_xy@s+1
  9521  29E0  3000               	movlw	0
  9522  29E1  31B3  23A1  31A9   	fcall	_OLED_print_xy
  9523                           
  9524                           ;menu.c: 297:  OLED_print_xy(6, 1, str);
  9525  29E4  0140               	movlb	0	; select bank0
  9526  29E5  01AD               	clrf	OLED_print_xy@row
  9527  29E6  0AAD               	incf	OLED_print_xy@row,f
  9528  29E7  30E6               	movlw	low _str
  9529  29E8  00AE               	movwf	OLED_print_xy@s
  9530  29E9  3001               	movlw	high _str
  9531  29EA  00AF               	movwf	OLED_print_xy@s+1
  9532  29EB  3006               	movlw	6
  9533  29EC  31B3  23A1  31A9   	fcall	_OLED_print_xy
  9534                           
  9535                           ;menu.c: 298:  OLED_print_xy(10, 1, "\001\003");
  9536  29EF  0140               	movlb	0	; select bank0
  9537  29F0  01AD               	clrf	OLED_print_xy@row
  9538  29F1  0AAD               	incf	OLED_print_xy@row,f
  9539  29F2  3029               	movlw	low (STR_55| (0+32768))
  9540  29F3  00AE               	movwf	OLED_print_xy@s
  9541  29F4  30BB               	movlw	high (STR_55| (0+32768))
  9542  29F5  00AF               	movwf	OLED_print_xy@s+1
  9543  29F6  300A               	movlw	10
  9544  29F7  31B3  23A1  31A9   	fcall	_OLED_print_xy
  9545                           
  9546                           ;menu.c: 299:  if (getPB() == PB_SHORT) {
  9547  29FA  31B1  217A  31A9   	fcall	_getPB
  9548  29FD  3A01               	xorlw	1
  9549  29FE  1D03               	skipz
  9550  29FF  2A04               	goto	l8503
  9551                           
  9552                           ;menu.c: 300:   storeNVM();
  9553  2A00  31AB  2302         	fcall	_storeNVM
  9554                           
  9555                           ;menu.c: 301:   return 0;
  9556  2A02  3000               	movlw	0
  9557  2A03  0008               	return
  9558  2A04                     l8503:	
  9559                           
  9560                           ;menu.c: 303:  return 1;
  9561  2A04  3001               	movlw	1
  9562  2A05  0008               	return
  9563  2A06                     __end_of_setDPOffset:	
  9564                           
  9565                           	psect	text10
  9566  2E87                     __ptext10:	
  9567 ;; *************** function _setup *****************
  9568 ;; Defined at:
  9569 ;;		line 265 in file "menu.c"
  9570 ;; Parameters:    Size  Location     Type
  9571 ;;		None
  9572 ;; Auto vars:     Size  Location     Type
  9573 ;;		None
  9574 ;; Return value:  Size  Location     Type
  9575 ;;                  1    wreg      unsigned char 
  9576 ;; Registers used:
  9577 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9578 ;; Tracked objects:
  9579 ;;		On entry : 0/0
  9580 ;;		On exit  : 0/0
  9581 ;;		Unchanged: 0/0
  9582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9585 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9586 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9587 ;;Total ram usage:        2 bytes
  9588 ;; Hardware stack levels used:    1
  9589 ;; Hardware stack levels required when called:    7
  9590 ;; This function calls:
  9591 ;;		_OLED_print_xy
  9592 ;;		_ftoa
  9593 ;;		_paging
  9594 ;;		_returnToPage
  9595 ;; This function is called by:
  9596 ;;		_menu
  9597 ;; This function uses a non-reentrant model
  9598 ;;
  9599                           
  9600                           
  9601                           ;psect for function _setup
  9602  2E87                     _setup:	
  9603                           
  9604                           ;menu.c: 267:  static uint8_t page = 0;;menu.c: 269:  returnToPage(page);
  9605                           
  9606                           ;incstack = 0
  9607                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9608  2E87  0142               	movlb	2	; select bank2
  9609  2E88  0866               	movf	setup@page^(0+256),w
  9610  2E89  31B3  23D3  31AE   	fcall	_returnToPage
  9611                           
  9612                           ;menu.c: 270:  if (g_screenRefresh) {
  9613  2E8C  0141               	movlb	1	; select bank1
  9614  2E8D  086D               	movf	_g_screenRefresh^(0+128),w
  9615  2E8E  1903               	btfsc	3,2
  9616  2E8F  2F2C               	goto	l8479
  9617                           
  9618                           ;menu.c: 271:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
  9619  2E90  0140               	movlb	0	; select bank0
  9620  2E91  01AD               	clrf	OLED_print_xy@row
  9621  2E92  304B               	movlw	low (STR_48| (0+32768))
  9622  2E93  00AE               	movwf	OLED_print_xy@s
  9623  2E94  30B8               	movlw	high (STR_48| (0+32768))
  9624  2E95  00AF               	movwf	OLED_print_xy@s+1
  9625  2E96  3000               	movlw	0
  9626  2E97  31B3  23A1  31AE   	fcall	_OLED_print_xy
  9627                           
  9628                           ;menu.c: 272:   OLED_print_xy(0, 1, "temp. ");
  9629  2E9A  0140               	movlb	0	; select bank0
  9630  2E9B  01AD               	clrf	OLED_print_xy@row
  9631  2E9C  0AAD               	incf	OLED_print_xy@row,f
  9632  2E9D  300C               	movlw	low (STR_49| (0+32768))
  9633  2E9E  00AE               	movwf	OLED_print_xy@s
  9634  2E9F  30BB               	movlw	high (STR_49| (0+32768))
  9635  2EA0  00AF               	movwf	OLED_print_xy@s+1
  9636  2EA1  3000               	movlw	0
  9637  2EA2  31B3  23A1  31AE   	fcall	_OLED_print_xy
  9638                           
  9639                           ;menu.c: 273:   ftoa(str, data.dpOffset, 4, 1);
  9640  2EA5  304A               	movlw	74
  9641  2EA6  0086               	movwf	6
  9642  2EA7  3027               	movlw	39
  9643  2EA8  0087               	movwf	7
  9644  2EA9  315D               	addfsr 1,29
  9645  2EAA  3F40               	moviw [0]fsr1
  9646  2EAB  0141               	movlb	1	; select bank1
  9647  2EAC  00B9               	movwf	ftoa@fValue^(0+128)
  9648  2EAD  3F41               	moviw [1]fsr1
  9649  2EAE  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9650  2EAF  3F42               	moviw [2]fsr1
  9651  2EB0  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9652  2EB1  3F43               	moviw [3]fsr1
  9653  2EB2  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9654  2EB3  3004               	movlw	4
  9655  2EB4  00C7               	movwf	??_setup^(0+128)
  9656  2EB5  0847               	movf	??_setup^(0+128),w
  9657  2EB6  00BD               	movwf	ftoa@width^(0+128)
  9658  2EB7  01BE               	clrf	ftoa@prec^(0+128)
  9659  2EB8  0ABE               	incf	ftoa@prec^(0+128),f
  9660  2EB9  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9661  2EBA  31A2  223B  31AE   	fcall	_ftoa
  9662                           
  9663                           ;menu.c: 274:   OLED_print_xy(6, 1, str);
  9664  2EBD  0140               	movlb	0	; select bank0
  9665  2EBE  01AD               	clrf	OLED_print_xy@row
  9666  2EBF  0AAD               	incf	OLED_print_xy@row,f
  9667  2EC0  30E6               	movlw	low _str
  9668  2EC1  00AE               	movwf	OLED_print_xy@s
  9669  2EC2  3001               	movlw	high _str
  9670  2EC3  00AF               	movwf	OLED_print_xy@s+1
  9671  2EC4  3006               	movlw	6
  9672  2EC5  31B3  23A1  31AE   	fcall	_OLED_print_xy
  9673                           
  9674                           ;menu.c: 275:   OLED_print_xy(10, 1, "\001 ");
  9675  2EC8  0140               	movlb	0	; select bank0
  9676  2EC9  01AD               	clrf	OLED_print_xy@row
  9677  2ECA  0AAD               	incf	OLED_print_xy@row,f
  9678  2ECB  302C               	movlw	low (STR_50| (0+32768))
  9679  2ECC  00AE               	movwf	OLED_print_xy@s
  9680  2ECD  30BB               	movlw	high (STR_50| (0+32768))
  9681  2ECE  00AF               	movwf	OLED_print_xy@s+1
  9682  2ECF  300A               	movlw	10
  9683  2ED0  31B3  23A1  31AE   	fcall	_OLED_print_xy
  9684                           
  9685                           ;menu.c: 276:   ftoa(str, data.skyTemp, 3, 0);
  9686  2ED3  306B               	movlw	107
  9687  2ED4  0086               	movwf	6
  9688  2ED5  3027               	movlw	39
  9689  2ED6  0087               	movwf	7
  9690  2ED7  3F40               	moviw [0]fsr1
  9691  2ED8  0141               	movlb	1	; select bank1
  9692  2ED9  00B9               	movwf	ftoa@fValue^(0+128)
  9693  2EDA  3F41               	moviw [1]fsr1
  9694  2EDB  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9695  2EDC  3F42               	moviw [2]fsr1
  9696  2EDD  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9697  2EDE  3F43               	moviw [3]fsr1
  9698  2EDF  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9699  2EE0  3003               	movlw	3
  9700  2EE1  00C7               	movwf	??_setup^(0+128)
  9701  2EE2  0847               	movf	??_setup^(0+128),w
  9702  2EE3  00BD               	movwf	ftoa@width^(0+128)
  9703  2EE4  01BE               	clrf	ftoa@prec^(0+128)
  9704  2EE5  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9705  2EE6  31A2  223B  31AE   	fcall	_ftoa
  9706                           
  9707                           ;menu.c: 277:   OLED_print_xy(12 + 0, 1, str);
  9708  2EE9  0140               	movlb	0	; select bank0
  9709  2EEA  01AD               	clrf	OLED_print_xy@row
  9710  2EEB  0AAD               	incf	OLED_print_xy@row,f
  9711  2EEC  30E6               	movlw	low _str
  9712  2EED  00AE               	movwf	OLED_print_xy@s
  9713  2EEE  3001               	movlw	high _str
  9714  2EEF  00AF               	movwf	OLED_print_xy@s+1
  9715  2EF0  300C               	movlw	12
  9716  2EF1  31B3  23A1  31AE   	fcall	_OLED_print_xy
  9717                           
  9718                           ;menu.c: 278:   OLED_print_xy(12 + 3, 1, "\001        ");
  9719  2EF4  0140               	movlb	0	; select bank0
  9720  2EF5  01AD               	clrf	OLED_print_xy@row
  9721  2EF6  0AAD               	incf	OLED_print_xy@row,f
  9722  2EF7  3093               	movlw	low (STR_51| (0+32768))
  9723  2EF8  00AE               	movwf	OLED_print_xy@s
  9724  2EF9  30BA               	movlw	high (STR_51| (0+32768))
  9725  2EFA  00AF               	movwf	OLED_print_xy@s+1
  9726  2EFB  300F               	movlw	15
  9727  2EFC  31B3  23A1  31AE   	fcall	_OLED_print_xy
  9728                           
  9729                           ;menu.c: 279:   ftoa(str, data.fudgeFactor, 3, 1);
  9730  2EFF  306F               	movlw	111
  9731  2F00  0086               	movwf	6
  9732  2F01  3027               	movlw	39
  9733  2F02  0087               	movwf	7
  9734  2F03  3F40               	moviw [0]fsr1
  9735  2F04  0141               	movlb	1	; select bank1
  9736  2F05  00B9               	movwf	ftoa@fValue^(0+128)
  9737  2F06  3F41               	moviw [1]fsr1
  9738  2F07  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9739  2F08  3F42               	moviw [2]fsr1
  9740  2F09  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9741  2F0A  3F43               	moviw [3]fsr1
  9742  2F0B  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9743  2F0C  3003               	movlw	3
  9744  2F0D  00C7               	movwf	??_setup^(0+128)
  9745  2F0E  0847               	movf	??_setup^(0+128),w
  9746  2F0F  00BD               	movwf	ftoa@width^(0+128)
  9747  2F10  01BE               	clrf	ftoa@prec^(0+128)
  9748  2F11  0ABE               	incf	ftoa@prec^(0+128),f
  9749  2F12  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9750  2F13  31A2  223B  31AE   	fcall	_ftoa
  9751                           
  9752                           ;menu.c: 280:   OLED_print_xy(2 * 12 + 0, 1, str);
  9753  2F16  0140               	movlb	0	; select bank0
  9754  2F17  01AD               	clrf	OLED_print_xy@row
  9755  2F18  0AAD               	incf	OLED_print_xy@row,f
  9756  2F19  30E6               	movlw	low _str
  9757  2F1A  00AE               	movwf	OLED_print_xy@s
  9758  2F1B  3001               	movlw	high _str
  9759  2F1C  00AF               	movwf	OLED_print_xy@s+1
  9760  2F1D  3018               	movlw	24
  9761  2F1E  31B3  23A1  31AE   	fcall	_OLED_print_xy
  9762                           
  9763                           ;menu.c: 281:   OLED_print_xy(2 * 12 + 4, 1, "         ");
  9764  2F21  0140               	movlb	0	; select bank0
  9765  2F22  01AD               	clrf	OLED_print_xy@row
  9766  2F23  0AAD               	incf	OLED_print_xy@row,f
  9767  2F24  30A0               	movlw	low ((STR_28+3)| (0+32768))
  9768  2F25  00AE               	movwf	OLED_print_xy@s
  9769  2F26  30B9               	movlw	high ((STR_28+3)| (0+32768))
  9770  2F27  00AF               	movwf	OLED_print_xy@s+1
  9771  2F28  301C               	movlw	28
  9772  2F29  31B3  23A1  31AE   	fcall	_OLED_print_xy
  9773  2F2C                     l8479:	
  9774                           
  9775                           ;menu.c: 283:  page = paging(page, 3);
  9776  2F2C  3003               	movlw	3
  9777  2F2D  0141               	movlb	1	; select bank1
  9778  2F2E  00C7               	movwf	??_setup^(0+128)
  9779  2F2F  0847               	movf	??_setup^(0+128),w
  9780  2F30  0140               	movlb	0	; select bank0
  9781  2F31  00A7               	movwf	paging@lastPage
  9782  2F32  0142               	movlb	2	; select bank2
  9783  2F33  0866               	movf	setup@page^(0+256),w
  9784  2F34  3187  278D         	fcall	_paging
  9785  2F36  0141               	movlb	1	; select bank1
  9786  2F37  00C8               	movwf	(??_setup+1)^(0+128)
  9787  2F38  0848               	movf	(??_setup+1)^(0+128),w
  9788  2F39  0142               	movlb	2	; select bank2
  9789  2F3A  00E6               	movwf	setup@page^(0+256)
  9790                           
  9791                           ;menu.c: 284:  return page;
  9792  2F3B  0866               	movf	setup@page^(0+256),w
  9793  2F3C  0008               	return
  9794  2F3D                     __end_of_setup:	
  9795                           
  9796                           	psect	text11
  9797  2DD1                     __ptext11:	
  9798 ;; *************** function _setLensDia *****************
  9799 ;; Defined at:
  9800 ;;		line 244 in file "menu.c"
  9801 ;; Parameters:    Size  Location     Type
  9802 ;;		None
  9803 ;; Auto vars:     Size  Location     Type
  9804 ;;		None
  9805 ;; Return value:  Size  Location     Type
  9806 ;;                  1    wreg      unsigned char 
  9807 ;; Registers used:
  9808 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9809 ;; Tracked objects:
  9810 ;;		On entry : 0/0
  9811 ;;		On exit  : 0/0
  9812 ;;		Unchanged: 0/0
  9813 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9814 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9815 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9816 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9817 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9818 ;;Total ram usage:        8 bytes
  9819 ;; Hardware stack levels used:    1
  9820 ;; Hardware stack levels required when called:    7
  9821 ;; This function calls:
  9822 ;;		_OLED_print_xy
  9823 ;;		___wmul
  9824 ;;		_ftoa
  9825 ;;		_getPB
  9826 ;;		_returnToPage
  9827 ;;		_spinInput
  9828 ;;		_storeNVM
  9829 ;; This function is called by:
  9830 ;;		_menu
  9831 ;; This function uses a non-reentrant model
  9832 ;;
  9833                           
  9834                           
  9835                           ;psect for function _setLensDia
  9836  2DD1                     _setLensDia:	
  9837                           
  9838                           ;menu.c: 246:  returnToPage(0);
  9839                           
  9840                           ;incstack = 0
  9841                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9842  2DD1  3000               	movlw	0
  9843  2DD2  31B3  23D3  31AD   	fcall	_returnToPage
  9844                           
  9845                           ;menu.c: 247:  if (g_screenRefresh)
  9846  2DD5  0141               	movlb	1	; select bank1
  9847  2DD6  086D               	movf	_g_screenRefresh^(0+128),w
  9848  2DD7  1903               	btfsc	3,2
  9849  2DD8  2DE3               	goto	l8435
  9850                           
  9851                           ;menu.c: 248:   OLED_print_xy(0, 0, "Lens diam.  ");
  9852  2DD9  0140               	movlb	0	; select bank0
  9853  2DDA  01AD               	clrf	OLED_print_xy@row
  9854  2DDB  301F               	movlw	low (STR_34| (0+32768))
  9855  2DDC  00AE               	movwf	OLED_print_xy@s
  9856  2DDD  30BA               	movlw	high (STR_34| (0+32768))
  9857  2DDE  00AF               	movwf	OLED_print_xy@s+1
  9858  2DDF  3000               	movlw	0
  9859  2DE0  31B3  23A1  31AD   	fcall	_OLED_print_xy
  9860  2DE3                     l8435:	
  9861                           
  9862                           ;menu.c: 249:  spinInput(&data.heater[selectedChannel].lensDia, 1, 16, 0.5);
  9863  2DE3  0141               	movlb	1	; select bank1
  9864  2DE4  086B               	movf	_selectedChannel^(0+128),w
  9865  2DE5  00C8               	movwf	??_setLensDia^(0+128)
  9866  2DE6  01C9               	clrf	(??_setLensDia^(0+128)+1)
  9867  2DE7  0848               	movf	??_setLensDia^(0+128),w
  9868  2DE8  0140               	movlb	0	; select bank0
  9869  2DE9  00AD               	movwf	___wmul@multiplier
  9870  2DEA  0141               	movlb	1	; select bank1
  9871  2DEB  0849               	movf	(??_setLensDia+1)^(0+128),w
  9872  2DEC  0140               	movlb	0	; select bank0
  9873  2DED  00AE               	movwf	___wmul@multiplier+1
  9874  2DEE  301F               	movlw	31
  9875  2DEF  00AF               	movwf	___wmul@multiplicand
  9876  2DF0  3000               	movlw	0
  9877  2DF1  00B0               	movwf	___wmul@multiplicand+1
  9878  2DF2  31B1  21DE  31AD   	fcall	___wmul
  9879  2DF5  3089               	movlw	137
  9880  2DF6  0141               	movlb	1	; select bank1
  9881  2DF7  00CA               	movwf	(??_setLensDia+2)^(0+128)
  9882  2DF8  3027               	movlw	39
  9883  2DF9  00CB               	movwf	((??_setLensDia+2)^(0+128)+1)
  9884  2DFA  0140               	movlb	0	; select bank0
  9885  2DFB  082D               	movf	?___wmul,w
  9886  2DFC  0141               	movlb	1	; select bank1
  9887  2DFD  074A               	addwf	(??_setLensDia+2)^(0+128),w
  9888  2DFE  00B9               	movwf	spinInput@input^(0+128)
  9889  2DFF  0140               	movlb	0	; select bank0
  9890  2E00  082E               	movf	?___wmul+1,w
  9891  2E01  0141               	movlb	1	; select bank1
  9892  2E02  3D4B               	addwfc	(??_setLensDia+3)^(0+128),w
  9893  2E03  00BA               	movwf	(spinInput@input+1)^(0+128)
  9894  2E04  303F               	movlw	63
  9895  2E05  00BE               	movwf	(spinInput@min+3)^(0+128)
  9896  2E06  3080               	movlw	128
  9897  2E07  00BD               	movwf	(spinInput@min+2)^(0+128)
  9898  2E08  3000               	movlw	0
  9899  2E09  00BC               	movwf	(spinInput@min+1)^(0+128)
  9900  2E0A  3000               	movlw	0
  9901  2E0B  00BB               	movwf	spinInput@min^(0+128)
  9902  2E0C  3041               	movlw	65
  9903  2E0D  00C2               	movwf	(spinInput@max+3)^(0+128)
  9904  2E0E  3080               	movlw	128
  9905  2E0F  00C1               	movwf	(spinInput@max+2)^(0+128)
  9906  2E10  3000               	movlw	0
  9907  2E11  00C0               	movwf	(spinInput@max+1)^(0+128)
  9908  2E12  3000               	movlw	0
  9909  2E13  00BF               	movwf	spinInput@max^(0+128)
  9910  2E14  303F               	movlw	63
  9911  2E15  00C6               	movwf	(spinInput@step+3)^(0+128)
  9912  2E16  3000               	movlw	0
  9913  2E17  00C5               	movwf	(spinInput@step+2)^(0+128)
  9914  2E18  3000               	movlw	0
  9915  2E19  00C4               	movwf	(spinInput@step+1)^(0+128)
  9916  2E1A  3000               	movlw	0
  9917  2E1B  00C3               	movwf	spinInput@step^(0+128)
  9918  2E1C  31AC  24A5  31AD   	fcall	_spinInput
  9919                           
  9920                           ;menu.c: 250:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
  9921  2E1F  0141               	movlb	1	; select bank1
  9922  2E20  086B               	movf	_selectedChannel^(0+128),w
  9923  2E21  00C8               	movwf	??_setLensDia^(0+128)
  9924  2E22  01C9               	clrf	(??_setLensDia^(0+128)+1)
  9925  2E23  0848               	movf	??_setLensDia^(0+128),w
  9926  2E24  0140               	movlb	0	; select bank0
  9927  2E25  00AD               	movwf	___wmul@multiplier
  9928  2E26  0141               	movlb	1	; select bank1
  9929  2E27  0849               	movf	(??_setLensDia+1)^(0+128),w
  9930  2E28  0140               	movlb	0	; select bank0
  9931  2E29  00AE               	movwf	___wmul@multiplier+1
  9932  2E2A  301F               	movlw	31
  9933  2E2B  00AF               	movwf	___wmul@multiplicand
  9934  2E2C  3000               	movlw	0
  9935  2E2D  00B0               	movwf	___wmul@multiplicand+1
  9936  2E2E  31B1  21DE  31AD   	fcall	___wmul
  9937  2E31  3089               	movlw	137
  9938  2E32  0141               	movlb	1	; select bank1
  9939  2E33  00CA               	movwf	(??_setLensDia+2)^(0+128)
  9940  2E34  3027               	movlw	39
  9941  2E35  00CB               	movwf	((??_setLensDia+2)^(0+128)+1)
  9942  2E36  0140               	movlb	0	; select bank0
  9943  2E37  082D               	movf	?___wmul,w
  9944  2E38  0141               	movlb	1	; select bank1
  9945  2E39  074A               	addwf	(??_setLensDia+2)^(0+128),w
  9946  2E3A  0086               	movwf	6
  9947  2E3B  0140               	movlb	0	; select bank0
  9948  2E3C  082E               	movf	?___wmul+1,w
  9949  2E3D  0141               	movlb	1	; select bank1
  9950  2E3E  3D4B               	addwfc	(??_setLensDia+3)^(0+128),w
  9951  2E3F  0087               	movwf	7
  9952  2E40  3F40               	moviw [0]fsr1
  9953  2E41  00CC               	movwf	_setLensDia$2776^(0+128)
  9954  2E42  3F41               	moviw [1]fsr1
  9955  2E43  00CD               	movwf	(_setLensDia$2776+1)^(0+128)
  9956  2E44  3F42               	moviw [2]fsr1
  9957  2E45  00CE               	movwf	(_setLensDia$2776+2)^(0+128)
  9958  2E46  3F43               	moviw [3]fsr1
  9959  2E47  00CF               	movwf	(_setLensDia$2776+3)^(0+128)
  9960                           
  9961                           ;menu.c: 250:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
  9962  2E48  084F               	movf	(_setLensDia$2776+3)^(0+128),w
  9963  2E49  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9964  2E4A  084E               	movf	(_setLensDia$2776+2)^(0+128),w
  9965  2E4B  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9966  2E4C  084D               	movf	(_setLensDia$2776+1)^(0+128),w
  9967  2E4D  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9968  2E4E  084C               	movf	_setLensDia$2776^(0+128),w
  9969  2E4F  00B9               	movwf	ftoa@fValue^(0+128)
  9970  2E50  3004               	movlw	4
  9971  2E51  00C8               	movwf	??_setLensDia^(0+128)
  9972  2E52  0848               	movf	??_setLensDia^(0+128),w
  9973  2E53  00BD               	movwf	ftoa@width^(0+128)
  9974  2E54  01BE               	clrf	ftoa@prec^(0+128)
  9975  2E55  0ABE               	incf	ftoa@prec^(0+128),f
  9976  2E56  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9977  2E57  31A2  223B  31AD   	fcall	_ftoa
  9978                           
  9979                           ;menu.c: 251:  OLED_print_xy(0, 1, "\004");
  9980  2E5A  0140               	movlb	0	; select bank0
  9981  2E5B  01AD               	clrf	OLED_print_xy@row
  9982  2E5C  0AAD               	incf	OLED_print_xy@row,f
  9983  2E5D  3003               	movlw	low ((STR_54+5)| (0+32768))
  9984  2E5E  00AE               	movwf	OLED_print_xy@s
  9985  2E5F  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9986  2E60  00AF               	movwf	OLED_print_xy@s+1
  9987  2E61  3000               	movlw	0
  9988  2E62  31B3  23A1  31AD   	fcall	_OLED_print_xy
  9989                           
  9990                           ;menu.c: 252:  OLED_print_xy(1, 1, str);
  9991  2E65  0140               	movlb	0	; select bank0
  9992  2E66  01AD               	clrf	OLED_print_xy@row
  9993  2E67  0AAD               	incf	OLED_print_xy@row,f
  9994  2E68  30E6               	movlw	low _str
  9995  2E69  00AE               	movwf	OLED_print_xy@s
  9996  2E6A  3001               	movlw	high _str
  9997  2E6B  00AF               	movwf	OLED_print_xy@s+1
  9998  2E6C  3001               	movlw	1
  9999  2E6D  31B3  23A1  31AD   	fcall	_OLED_print_xy
 10000                           
 10001                           ;menu.c: 253:  OLED_print_xy(5, 1, " inch \003");
 10002  2E70  0140               	movlb	0	; select bank0
 10003  2E71  01AD               	clrf	OLED_print_xy@row
 10004  2E72  0AAD               	incf	OLED_print_xy@row,f
 10005  2E73  30B8               	movlw	low (STR_47| (0+32768))
 10006  2E74  00AE               	movwf	OLED_print_xy@s
 10007  2E75  30BA               	movlw	high (STR_47| (0+32768))
 10008  2E76  00AF               	movwf	OLED_print_xy@s+1
 10009  2E77  3005               	movlw	5
 10010  2E78  31B3  23A1  31AD   	fcall	_OLED_print_xy
 10011                           
 10012                           ;menu.c: 254:  if (getPB() == PB_SHORT) {
 10013  2E7B  31B1  217A  31AD   	fcall	_getPB
 10014  2E7E  3A01               	xorlw	1
 10015  2E7F  1D03               	skipz
 10016  2E80  2E85               	goto	l8455
 10017                           
 10018                           ;menu.c: 255:   storeNVM();
 10019  2E81  31AB  2302         	fcall	_storeNVM
 10020                           
 10021                           ;menu.c: 256:   return 0;
 10022  2E83  3000               	movlw	0
 10023  2E84  0008               	return
 10024  2E85                     l8455:	
 10025                           
 10026                           ;menu.c: 259:  return 1;
 10027  2E85  3001               	movlw	1
 10028  2E86  0008               	return
 10029  2E87                     __end_of_setLensDia:	
 10030                           
 10031                           	psect	text12
 10032  267E                     __ptext12:	
 10033 ;; *************** function _setOutputPower *****************
 10034 ;; Defined at:
 10035 ;;		line 196 in file "menu.c"
 10036 ;; Parameters:    Size  Location     Type
 10037 ;;		None
 10038 ;; Auto vars:     Size  Location     Type
 10039 ;;  heater          2   44[BANK1 ] PTR struct .
 10040 ;;		 -> data.heater(124), data(166), 
 10041 ;; Return value:  Size  Location     Type
 10042 ;;                  1    wreg      unsigned char 
 10043 ;; Registers used:
 10044 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10045 ;; Tracked objects:
 10046 ;;		On entry : 0/0
 10047 ;;		On exit  : 0/0
 10048 ;;		Unchanged: 0/0
 10049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10050 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10051 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10052 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10053 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10054 ;;Total ram usage:        6 bytes
 10055 ;; Hardware stack levels used:    1
 10056 ;; Hardware stack levels required when called:    7
 10057 ;; This function calls:
 10058 ;;		_OLED_print_xy
 10059 ;;		___fleq
 10060 ;;		___flge
 10061 ;;		___wmul
 10062 ;;		_ftoa
 10063 ;;		_getPB
 10064 ;;		_itoa
 10065 ;;		_returnToPage
 10066 ;;		_spinInput
 10067 ;; This function is called by:
 10068 ;;		_menu
 10069 ;; This function uses a non-reentrant model
 10070 ;;
 10071                           
 10072                           
 10073                           ;psect for function _setOutputPower
 10074  267E                     _setOutputPower:	
 10075                           
 10076                           ;menu.c: 198:  t_heater *heater = &(data.heater)[selectedChannel];
 10077                           
 10078                           ;incstack = 0
 10079                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10080  267E  0141               	movlb	1	; select bank1
 10081  267F  086B               	movf	_selectedChannel^(0+128),w
 10082  2680  00C8               	movwf	??_setOutputPower^(0+128)
 10083  2681  01C9               	clrf	(??_setOutputPower^(0+128)+1)
 10084  2682  0848               	movf	??_setOutputPower^(0+128),w
 10085  2683  0140               	movlb	0	; select bank0
 10086  2684  00AD               	movwf	___wmul@multiplier
 10087  2685  0141               	movlb	1	; select bank1
 10088  2686  0849               	movf	(??_setOutputPower+1)^(0+128),w
 10089  2687  0140               	movlb	0	; select bank0
 10090  2688  00AE               	movwf	___wmul@multiplier+1
 10091  2689  301F               	movlw	31
 10092  268A  00AF               	movwf	___wmul@multiplicand
 10093  268B  3000               	movlw	0
 10094  268C  00B0               	movwf	___wmul@multiplicand+1
 10095  268D  31B1  21DE  31A6   	fcall	___wmul
 10096  2690  3074               	movlw	116
 10097  2691  0141               	movlb	1	; select bank1
 10098  2692  00CA               	movwf	(??_setOutputPower+2)^(0+128)
 10099  2693  3027               	movlw	39
 10100  2694  00CB               	movwf	((??_setOutputPower+2)^(0+128)+1)
 10101  2695  0140               	movlb	0	; select bank0
 10102  2696  082D               	movf	?___wmul,w
 10103  2697  0141               	movlb	1	; select bank1
 10104  2698  074A               	addwf	(??_setOutputPower+2)^(0+128),w
 10105  2699  00CC               	movwf	setOutputPower@heater^(0+128)
 10106  269A  0140               	movlb	0	; select bank0
 10107  269B  082E               	movf	?___wmul+1,w
 10108  269C  0141               	movlb	1	; select bank1
 10109  269D  3D4B               	addwfc	(??_setOutputPower+3)^(0+128),w
 10110  269E  00CD               	movwf	(setOutputPower@heater+1)^(0+128)
 10111                           
 10112                           ;menu.c: 200:  returnToPage(0);
 10113  269F  3000               	movlw	0
 10114  26A0  31B3  23D3  31A6   	fcall	_returnToPage
 10115                           
 10116                           ;menu.c: 202:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 10117  26A3  0141               	movlb	1	; select bank1
 10118  26A4  084C               	movf	setOutputPower@heater^(0+128),w
 10119  26A5  0086               	movwf	6
 10120  26A6  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10121  26A7  0087               	movwf	7
 10122  26A8  315E               	addfsr 1,30
 10123  26A9  0301               	decf	1,w
 10124  26AA  1903               	btfsc	3,2
 10125  26AB  2EB4               	goto	l8369
 10126  26AC  084C               	movf	setOutputPower@heater^(0+128),w
 10127  26AD  0086               	movwf	6
 10128  26AE  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10129  26AF  0087               	movwf	7
 10130  26B0  315E               	addfsr 1,30
 10131  26B1  0801               	movf	1,w
 10132  26B2  1D03               	btfss	3,2
 10133  26B3  2FBF               	goto	l8403
 10134  26B4                     l8369:	
 10135                           
 10136                           ;menu.c: 204:   if (g_screenRefresh)
 10137  26B4  086D               	movf	_g_screenRefresh^(0+128),w
 10138  26B5  1903               	btfsc	3,2
 10139  26B6  2EC1               	goto	l8373
 10140                           
 10141                           ;menu.c: 205:    OLED_print_xy(0, 0, "Output power");
 10142  26B7  0140               	movlb	0	; select bank0
 10143  26B8  01AD               	clrf	OLED_print_xy@row
 10144  26B9  307A               	movlw	low (STR_22| (0+32768))
 10145  26BA  00AE               	movwf	OLED_print_xy@s
 10146  26BB  30BA               	movlw	high (STR_22| (0+32768))
 10147  26BC  00AF               	movwf	OLED_print_xy@s+1
 10148  26BD  3000               	movlw	0
 10149  26BE  31B3  23A1  31A6   	fcall	_OLED_print_xy
 10150  26C1                     l8373:	
 10151                           
 10152                           ;menu.c: 206:   spinInput(&heater->Pset, -0.25, heater->Pmax, 0.25);
 10153  26C1  0141               	movlb	1	; select bank1
 10154  26C2  084C               	movf	setOutputPower@heater^(0+128),w
 10155  26C3  3E10               	addlw	16
 10156  26C4  00B9               	movwf	spinInput@input^(0+128)
 10157  26C5  3000               	movlw	0
 10158  26C6  3D4D               	addwfc	(setOutputPower@heater+1)^(0+128),w
 10159  26C7  00BA               	movwf	(spinInput@input+1)^(0+128)
 10160  26C8  30BE               	movlw	190
 10161  26C9  00BE               	movwf	(spinInput@min+3)^(0+128)
 10162  26CA  3080               	movlw	128
 10163  26CB  00BD               	movwf	(spinInput@min+2)^(0+128)
 10164  26CC  3000               	movlw	0
 10165  26CD  00BC               	movwf	(spinInput@min+1)^(0+128)
 10166  26CE  3000               	movlw	0
 10167  26CF  00BB               	movwf	spinInput@min^(0+128)
 10168  26D0  084C               	movf	setOutputPower@heater^(0+128),w
 10169  26D1  0086               	movwf	6
 10170  26D2  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10171  26D3  0087               	movwf	7
 10172  26D4  3144               	addfsr 1,4
 10173  26D5  3F40               	moviw [0]fsr1
 10174  26D6  00BF               	movwf	spinInput@max^(0+128)
 10175  26D7  3F41               	moviw [1]fsr1
 10176  26D8  00C0               	movwf	(spinInput@max+1)^(0+128)
 10177  26D9  3F42               	moviw [2]fsr1
 10178  26DA  00C1               	movwf	(spinInput@max+2)^(0+128)
 10179  26DB  3F43               	moviw [3]fsr1
 10180  26DC  00C2               	movwf	(spinInput@max+3)^(0+128)
 10181  26DD  303E               	movlw	62
 10182  26DE  00C6               	movwf	(spinInput@step+3)^(0+128)
 10183  26DF  3080               	movlw	128
 10184  26E0  00C5               	movwf	(spinInput@step+2)^(0+128)
 10185  26E1  3000               	movlw	0
 10186  26E2  00C4               	movwf	(spinInput@step+1)^(0+128)
 10187  26E3  3000               	movlw	0
 10188  26E4  00C3               	movwf	spinInput@step^(0+128)
 10189  26E5  31AC  24A5  31A6   	fcall	_spinInput
 10190                           
 10191                           ;menu.c: 207:   if (heater->Pset == 0) {
 10192  26E8  0141               	movlb	1	; select bank1
 10193  26E9  084C               	movf	setOutputPower@heater^(0+128),w
 10194  26EA  0086               	movwf	6
 10195  26EB  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10196  26EC  0087               	movwf	7
 10197  26ED  3150               	addfsr 1,16
 10198  26EE  3F40               	moviw [0]fsr1
 10199  26EF  0140               	movlb	0	; select bank0
 10200  26F0  00A0               	movwf	___fleq@ff1
 10201  26F1  3F41               	moviw [1]fsr1
 10202  26F2  00A1               	movwf	___fleq@ff1+1
 10203  26F3  3F42               	moviw [2]fsr1
 10204  26F4  00A2               	movwf	___fleq@ff1+2
 10205  26F5  3F43               	moviw [3]fsr1
 10206  26F6  00A3               	movwf	___fleq@ff1+3
 10207  26F7  3000               	movlw	0
 10208  26F8  00A7               	movwf	___fleq@ff2+3
 10209  26F9  3000               	movlw	0
 10210  26FA  00A6               	movwf	___fleq@ff2+2
 10211  26FB  3000               	movlw	0
 10212  26FC  00A5               	movwf	___fleq@ff2+1
 10213  26FD  3000               	movlw	0
 10214  26FE  00A4               	movwf	___fleq@ff2
 10215  26FF  31B5  25BD  31A6   	fcall	___fleq
 10216  2702  1C03               	btfss	3,0
 10217  2703  2F37               	goto	l8385
 10218                           
 10219                           ;menu.c: 208:    itoa(str, selectedChannel + 1, 1);
 10220  2704  30E6               	movlw	low _str
 10221  2705  0140               	movlb	0	; select bank0
 10222  2706  00A9               	movwf	itoa@str
 10223  2707  3001               	movlw	high _str
 10224  2708  00AA               	movwf	itoa@str+1
 10225  2709  0141               	movlb	1	; select bank1
 10226  270A  086B               	movf	_selectedChannel^(0+128),w
 10227  270B  3E01               	addlw	1
 10228  270C  00C8               	movwf	??_setOutputPower^(0+128)
 10229  270D  0848               	movf	??_setOutputPower^(0+128),w
 10230  270E  0140               	movlb	0	; select bank0
 10231  270F  00AB               	movwf	itoa@value
 10232  2710  01AC               	clrf	itoa@width
 10233  2711  0AAC               	incf	itoa@width,f
 10234  2712  31B7  273E  31A6   	fcall	_itoa
 10235                           
 10236                           ;menu.c: 209:    OLED_print_xy(0, 1, "\004Ch. ");
 10237  2715  0140               	movlb	0	; select bank0
 10238  2716  01AD               	clrf	OLED_print_xy@row
 10239  2717  0AAD               	incf	OLED_print_xy@row,f
 10240  2718  3013               	movlw	low (STR_37| (0+32768))
 10241  2719  00AE               	movwf	OLED_print_xy@s
 10242  271A  30BB               	movlw	high (STR_37| (0+32768))
 10243  271B  00AF               	movwf	OLED_print_xy@s+1
 10244  271C  3000               	movlw	0
 10245  271D  31B3  23A1  31A6   	fcall	_OLED_print_xy
 10246                           
 10247                           ;menu.c: 210:    OLED_print_xy(5, 1, str);
 10248  2720  0140               	movlb	0	; select bank0
 10249  2721  01AD               	clrf	OLED_print_xy@row
 10250  2722  0AAD               	incf	OLED_print_xy@row,f
 10251  2723  30E6               	movlw	low _str
 10252  2724  00AE               	movwf	OLED_print_xy@s
 10253  2725  3001               	movlw	high _str
 10254  2726  00AF               	movwf	OLED_print_xy@s+1
 10255  2727  3005               	movlw	5
 10256  2728  31B3  23A1  31A6   	fcall	_OLED_print_xy
 10257                           
 10258                           ;menu.c: 211:    OLED_print_xy(6, 1, " off \003");
 10259  272B  0140               	movlb	0	; select bank0
 10260  272C  01AD               	clrf	OLED_print_xy@row
 10261  272D  0AAD               	incf	OLED_print_xy@row,f
 10262  272E  30F0               	movlw	low (STR_38| (0+32768))
 10263  272F  00AE               	movwf	OLED_print_xy@s
 10264  2730  30BA               	movlw	high (STR_38| (0+32768))
 10265  2731  00AF               	movwf	OLED_print_xy@s+1
 10266  2732  3006               	movlw	6
 10267  2733  31B3  23A1  31A6   	fcall	_OLED_print_xy
 10268                           
 10269                           ;menu.c: 212:   } else if (heater->Pset < 0) {
 10270  2736  2FFC               	goto	l8415
 10271  2737                     l8385:	
 10272  2737  0141               	movlb	1	; select bank1
 10273  2738  084C               	movf	setOutputPower@heater^(0+128),w
 10274  2739  0086               	movwf	6
 10275  273A  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10276  273B  0087               	movwf	7
 10277  273C  3150               	addfsr 1,16
 10278  273D  3F40               	moviw [0]fsr1
 10279  273E  00AD               	movwf	___flge@ff1^(0+128)
 10280  273F  3F41               	moviw [1]fsr1
 10281  2740  00AE               	movwf	(___flge@ff1+1)^(0+128)
 10282  2741  3F42               	moviw [2]fsr1
 10283  2742  00AF               	movwf	(___flge@ff1+2)^(0+128)
 10284  2743  3F43               	moviw [3]fsr1
 10285  2744  00B0               	movwf	(___flge@ff1+3)^(0+128)
 10286  2745  3000               	movlw	0
 10287  2746  00B4               	movwf	(___flge@ff2+3)^(0+128)
 10288  2747  3000               	movlw	0
 10289  2748  00B3               	movwf	(___flge@ff2+2)^(0+128)
 10290  2749  3000               	movlw	0
 10291  274A  00B2               	movwf	(___flge@ff2+1)^(0+128)
 10292  274B  3000               	movlw	0
 10293  274C  00B1               	movwf	___flge@ff2^(0+128)
 10294  274D  31AA  2206  31A6   	fcall	___flge
 10295  2750  1803               	btfsc	3,0
 10296  2751  2F85               	goto	l8395
 10297                           
 10298                           ;menu.c: 213:    itoa(str, selectedChannel + 1, 1);
 10299  2752  30E6               	movlw	low _str
 10300  2753  0140               	movlb	0	; select bank0
 10301  2754  00A9               	movwf	itoa@str
 10302  2755  3001               	movlw	high _str
 10303  2756  00AA               	movwf	itoa@str+1
 10304  2757  0141               	movlb	1	; select bank1
 10305  2758  086B               	movf	_selectedChannel^(0+128),w
 10306  2759  3E01               	addlw	1
 10307  275A  00C8               	movwf	??_setOutputPower^(0+128)
 10308  275B  0848               	movf	??_setOutputPower^(0+128),w
 10309  275C  0140               	movlb	0	; select bank0
 10310  275D  00AB               	movwf	itoa@value
 10311  275E  01AC               	clrf	itoa@width
 10312  275F  0AAC               	incf	itoa@width,f
 10313  2760  31B7  273E  31A6   	fcall	_itoa
 10314                           
 10315                           ;menu.c: 214:    OLED_print_xy(0, 1, "\004Ch. ");
 10316  2763  0140               	movlb	0	; select bank0
 10317  2764  01AD               	clrf	OLED_print_xy@row
 10318  2765  0AAD               	incf	OLED_print_xy@row,f
 10319  2766  3013               	movlw	low (STR_37| (0+32768))
 10320  2767  00AE               	movwf	OLED_print_xy@s
 10321  2768  30BB               	movlw	high (STR_37| (0+32768))
 10322  2769  00AF               	movwf	OLED_print_xy@s+1
 10323  276A  3000               	movlw	0
 10324  276B  31B3  23A1  31A6   	fcall	_OLED_print_xy
 10325                           
 10326                           ;menu.c: 215:    OLED_print_xy(5, 1, str);
 10327  276E  0140               	movlb	0	; select bank0
 10328  276F  01AD               	clrf	OLED_print_xy@row
 10329  2770  0AAD               	incf	OLED_print_xy@row,f
 10330  2771  30E6               	movlw	low _str
 10331  2772  00AE               	movwf	OLED_print_xy@s
 10332  2773  3001               	movlw	high _str
 10333  2774  00AF               	movwf	OLED_print_xy@s+1
 10334  2775  3005               	movlw	5
 10335  2776  31B3  23A1  31A6   	fcall	_OLED_print_xy
 10336                           
 10337                           ;menu.c: 216:    OLED_print_xy(6, 1, " auto\003");
 10338  2779  0140               	movlb	0	; select bank0
 10339  277A  01AD               	clrf	OLED_print_xy@row
 10340  277B  0AAD               	incf	OLED_print_xy@row,f
 10341  277C  30F7               	movlw	low (STR_40| (0+32768))
 10342  277D  00AE               	movwf	OLED_print_xy@s
 10343  277E  30BA               	movlw	high (STR_40| (0+32768))
 10344  277F  00AF               	movwf	OLED_print_xy@s+1
 10345  2780  3006               	movlw	6
 10346  2781  31B3  23A1  31A6   	fcall	_OLED_print_xy
 10347                           
 10348                           ;menu.c: 217:   } else {
 10349  2784  2FFC               	goto	l8415
 10350  2785                     l8395:	
 10351                           
 10352                           ;menu.c: 218:    OLED_print_xy(0, 1, "\004");
 10353  2785  0140               	movlb	0	; select bank0
 10354  2786  01AD               	clrf	OLED_print_xy@row
 10355  2787  0AAD               	incf	OLED_print_xy@row,f
 10356  2788  3003               	movlw	low ((STR_54+5)| (0+32768))
 10357  2789  00AE               	movwf	OLED_print_xy@s
 10358  278A  30BB               	movlw	high ((STR_54+5)| (0+32768))
 10359  278B  00AF               	movwf	OLED_print_xy@s+1
 10360  278C  3000               	movlw	0
 10361  278D  31B3  23A1  31A6   	fcall	_OLED_print_xy
 10362                           
 10363                           ;menu.c: 219:    ftoa(str, heater->Pset, 4, 1);
 10364  2790  0141               	movlb	1	; select bank1
 10365  2791  084C               	movf	setOutputPower@heater^(0+128),w
 10366  2792  0086               	movwf	6
 10367  2793  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10368  2794  0087               	movwf	7
 10369  2795  3150               	addfsr 1,16
 10370  2796  3F40               	moviw [0]fsr1
 10371  2797  00B9               	movwf	ftoa@fValue^(0+128)
 10372  2798  3F41               	moviw [1]fsr1
 10373  2799  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10374  279A  3F42               	moviw [2]fsr1
 10375  279B  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10376  279C  3F43               	moviw [3]fsr1
 10377  279D  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10378  279E  3004               	movlw	4
 10379  279F  00C8               	movwf	??_setOutputPower^(0+128)
 10380  27A0  0848               	movf	??_setOutputPower^(0+128),w
 10381  27A1  00BD               	movwf	ftoa@width^(0+128)
 10382  27A2  01BE               	clrf	ftoa@prec^(0+128)
 10383  27A3  0ABE               	incf	ftoa@prec^(0+128),f
 10384  27A4  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 10385  27A5  31A2  223B  31A6   	fcall	_ftoa
 10386                           
 10387                           ;menu.c: 220:    OLED_print_xy(1, 1, str);
 10388  27A8  0140               	movlb	0	; select bank0
 10389  27A9  01AD               	clrf	OLED_print_xy@row
 10390  27AA  0AAD               	incf	OLED_print_xy@row,f
 10391  27AB  30E6               	movlw	low _str
 10392  27AC  00AE               	movwf	OLED_print_xy@s
 10393  27AD  3001               	movlw	high _str
 10394  27AE  00AF               	movwf	OLED_print_xy@s+1
 10395  27AF  3001               	movlw	1
 10396  27B0  31B3  23A1  31A6   	fcall	_OLED_print_xy
 10397                           
 10398                           ;menu.c: 221:    OLED_print_xy(5, 1, "W man.\003");
 10399  27B3  0140               	movlb	0	; select bank0
 10400  27B4  01AD               	clrf	OLED_print_xy@row
 10401  27B5  0AAD               	incf	OLED_print_xy@row,f
 10402  27B6  30C0               	movlw	low (STR_42| (0+32768))
 10403  27B7  00AE               	movwf	OLED_print_xy@s
 10404  27B8  30BA               	movlw	high (STR_42| (0+32768))
 10405  27B9  00AF               	movwf	OLED_print_xy@s+1
 10406  27BA  3005               	movlw	5
 10407  27BB  31B3  23A1  31A6   	fcall	_OLED_print_xy
 10408  27BE  2FFC               	goto	l8415
 10409  27BF                     l8403:	
 10410  27BF  084C               	movf	setOutputPower@heater^(0+128),w
 10411  27C0  0086               	movwf	6
 10412  27C1  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10413  27C2  0087               	movwf	7
 10414  27C3  315E               	addfsr 1,30
 10415  27C4  3004               	movlw	4
 10416  27C5  0601               	xorwf	1,w
 10417  27C6  1903               	btfsc	3,2
 10418  27C7  2FD1               	goto	l8407
 10419  27C8  084C               	movf	setOutputPower@heater^(0+128),w
 10420  27C9  0086               	movwf	6
 10421  27CA  084D               	movf	(setOutputPower@heater+1)^(0+128),w
 10422  27CB  0087               	movwf	7
 10423  27CC  315E               	addfsr 1,30
 10424  27CD  3003               	movlw	3
 10425  27CE  0601               	xorwf	1,w
 10426  27CF  1D03               	btfss	3,2
 10427  27D0  2FFE               	goto	l8421
 10428  27D1                     l8407:	
 10429                           
 10430                           ;menu.c: 226:   if (g_screenRefresh) {
 10431  27D1  086D               	movf	_g_screenRefresh^(0+128),w
 10432  27D2  1903               	btfsc	3,2
 10433  27D3  2FE9               	goto	l8411
 10434                           
 10435                           ;menu.c: 227:    OLED_print_xy(0, 0, "Hold button ");
 10436  27D4  0140               	movlb	0	; select bank0
 10437  27D5  01AD               	clrf	OLED_print_xy@row
 10438  27D6  302C               	movlw	low (STR_43| (0+32768))
 10439  27D7  00AE               	movwf	OLED_print_xy@s
 10440  27D8  30BA               	movlw	high (STR_43| (0+32768))
 10441  27D9  00AF               	movwf	OLED_print_xy@s+1
 10442  27DA  3000               	movlw	0
 10443  27DB  31B3  23A1  31A6   	fcall	_OLED_print_xy
 10444                           
 10445                           ;menu.c: 228:    OLED_print_xy(0, 1, "to re-enable");
 10446  27DE  0140               	movlb	0	; select bank0
 10447  27DF  01AD               	clrf	OLED_print_xy@row
 10448  27E0  0AAD               	incf	OLED_print_xy@row,f
 10449  27E1  3060               	movlw	low (STR_44| (0+32768))
 10450  27E2  00AE               	movwf	OLED_print_xy@s
 10451  27E3  30BA               	movlw	high (STR_44| (0+32768))
 10452  27E4  00AF               	movwf	OLED_print_xy@s+1
 10453  27E5  3000               	movlw	0
 10454  27E6  31B3  23A1  31A6   	fcall	_OLED_print_xy
 10455  27E9                     l8411:	
 10456                           
 10457                           ;menu.c: 230:   if (getPB() == PB_LONG)
 10458  27E9  31B1  217A  31A6   	fcall	_getPB
 10459  27EC  3A02               	xorlw	2
 10460  27ED  1D03               	skipz
 10461  27EE  2FFC               	goto	l8415
 10462                           
 10463                           ;menu.c: 231:    heater->status = CH_UNCHECKED;
 10464  27EF  0141               	movlb	1	; select bank1
 10465  27F0  084C               	movf	setOutputPower@heater^(0+128),w
 10466  27F1  3E1E               	addlw	30
 10467  27F2  00C8               	movwf	??_setOutputPower^(0+128)
 10468  27F3  3000               	movlw	0
 10469  27F4  3D4D               	addwfc	(setOutputPower@heater+1)^(0+128),w
 10470  27F5  00C9               	movwf	(??_setOutputPower+1)^(0+128)
 10471  27F6  0848               	movf	??_setOutputPower^(0+128),w
 10472  27F7  0086               	movwf	6
 10473  27F8  0849               	movf	(??_setOutputPower+1)^(0+128),w
 10474  27F9  0087               	movwf	7
 10475  27FA  3005               	movlw	5
 10476  27FB  0081               	movwf	1
 10477  27FC                     l8415:	
 10478                           
 10479                           ;menu.c: 232:   return 0;
 10480  27FC  3000               	movlw	0
 10481  27FD  0008               	return
 10482  27FE                     l8421:	
 10483                           
 10484                           ;menu.c: 236:   return 1;
 10485  27FE  3001               	movlw	1
 10486  27FF  0008               	return
 10487  2800                     __end_of_setOutputPower:	
 10488                           
 10489                           	psect	text13
 10490  1918                     __ptext13:	
 10491 ;; *************** function _channelSetup *****************
 10492 ;; Defined at:
 10493 ;;		line 141 in file "menu.c"
 10494 ;; Parameters:    Size  Location     Type
 10495 ;;		None
 10496 ;; Auto vars:     Size  Location     Type
 10497 ;;  heater          2   43[BANK1 ] PTR struct .
 10498 ;;		 -> data.heater(124), data(166), 
 10499 ;; Return value:  Size  Location     Type
 10500 ;;                  1    wreg      unsigned char 
 10501 ;; Registers used:
 10502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10503 ;; Tracked objects:
 10504 ;;		On entry : 0/0
 10505 ;;		On exit  : 0/0
 10506 ;;		Unchanged: 0/0
 10507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10509 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10510 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10511 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10512 ;;Total ram usage:        6 bytes
 10513 ;; Hardware stack levels used:    1
 10514 ;; Hardware stack levels required when called:    7
 10515 ;; This function calls:
 10516 ;;		_OLED_print_xy
 10517 ;;		___fleq
 10518 ;;		___flge
 10519 ;;		___wmul
 10520 ;;		_ftoa
 10521 ;;		_itoa
 10522 ;;		_paging
 10523 ;;		_returnToPage
 10524 ;; This function is called by:
 10525 ;;		_menu
 10526 ;; This function uses a non-reentrant model
 10527 ;;
 10528                           
 10529                           
 10530                           ;psect for function _channelSetup
 10531  1918                     _channelSetup:	
 10532                           
 10533                           ;menu.c: 143:  static uint8_t page = 0;;menu.c: 144:  t_heater *heater = &(data.heater)[
      +                          selectedChannel];
 10534                           
 10535                           ;incstack = 0
 10536                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10537  1918  0141               	movlb	1	; select bank1
 10538  1919  086B               	movf	_selectedChannel^(0+128),w
 10539  191A  00C7               	movwf	??_channelSetup^(0+128)
 10540  191B  01C8               	clrf	(??_channelSetup^(0+128)+1)
 10541  191C  0847               	movf	??_channelSetup^(0+128),w
 10542  191D  0140               	movlb	0	; select bank0
 10543  191E  00AD               	movwf	___wmul@multiplier
 10544  191F  0141               	movlb	1	; select bank1
 10545  1920  0848               	movf	(??_channelSetup+1)^(0+128),w
 10546  1921  0140               	movlb	0	; select bank0
 10547  1922  00AE               	movwf	___wmul@multiplier+1
 10548  1923  301F               	movlw	31
 10549  1924  00AF               	movwf	___wmul@multiplicand
 10550  1925  3000               	movlw	0
 10551  1926  00B0               	movwf	___wmul@multiplicand+1
 10552  1927  31B1  21DE  3199   	fcall	___wmul
 10553  192A  3074               	movlw	116
 10554  192B  0141               	movlb	1	; select bank1
 10555  192C  00C9               	movwf	(??_channelSetup+2)^(0+128)
 10556  192D  3027               	movlw	39
 10557  192E  00CA               	movwf	((??_channelSetup+2)^(0+128)+1)
 10558  192F  0140               	movlb	0	; select bank0
 10559  1930  082D               	movf	?___wmul,w
 10560  1931  0141               	movlb	1	; select bank1
 10561  1932  0749               	addwf	(??_channelSetup+2)^(0+128),w
 10562  1933  00CB               	movwf	channelSetup@heater^(0+128)
 10563  1934  0140               	movlb	0	; select bank0
 10564  1935  082E               	movf	?___wmul+1,w
 10565  1936  0141               	movlb	1	; select bank1
 10566  1937  3D4A               	addwfc	(??_channelSetup+3)^(0+128),w
 10567  1938  00CC               	movwf	(channelSetup@heater+1)^(0+128)
 10568                           
 10569                           ;menu.c: 146:  returnToPage(page);
 10570  1939  0142               	movlb	2	; select bank2
 10571  193A  0867               	movf	channelSetup@page^(0+256),w
 10572  193B  31B3  23D3  3199   	fcall	_returnToPage
 10573                           
 10574                           ;menu.c: 148:  if ((heater->status == CH_ENABLED) || (heater->status == CH_DISABLED)) {
 10575  193E  0141               	movlb	1	; select bank1
 10576  193F  084B               	movf	channelSetup@heater^(0+128),w
 10577  1940  0086               	movwf	6
 10578  1941  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10579  1942  0087               	movwf	7
 10580  1943  315E               	addfsr 1,30
 10581  1944  0301               	decf	1,w
 10582  1945  1903               	btfsc	3,2
 10583  1946  294F               	goto	l8309
 10584  1947  084B               	movf	channelSetup@heater^(0+128),w
 10585  1948  0086               	movwf	6
 10586  1949  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10587  194A  0087               	movwf	7
 10588  194B  315E               	addfsr 1,30
 10589  194C  0801               	movf	1,w
 10590  194D  1D03               	btfss	3,2
 10591  194E  2A1A               	goto	l8337
 10592  194F                     l8309:	
 10593                           
 10594                           ;menu.c: 149:   OLED_print_xy(0, 0, "Output power");
 10595  194F  0140               	movlb	0	; select bank0
 10596  1950  01AD               	clrf	OLED_print_xy@row
 10597  1951  307A               	movlw	low (STR_22| (0+32768))
 10598  1952  00AE               	movwf	OLED_print_xy@s
 10599  1953  30BA               	movlw	high (STR_22| (0+32768))
 10600  1954  00AF               	movwf	OLED_print_xy@s+1
 10601  1955  3000               	movlw	0
 10602  1956  31B3  23A1  3199   	fcall	_OLED_print_xy
 10603                           
 10604                           ;menu.c: 150:   if (heater->Pset == 0) {
 10605  1959  0141               	movlb	1	; select bank1
 10606  195A  084B               	movf	channelSetup@heater^(0+128),w
 10607  195B  0086               	movwf	6
 10608  195C  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10609  195D  0087               	movwf	7
 10610  195E  3150               	addfsr 1,16
 10611  195F  3F40               	moviw [0]fsr1
 10612  1960  0140               	movlb	0	; select bank0
 10613  1961  00A0               	movwf	___fleq@ff1
 10614  1962  3F41               	moviw [1]fsr1
 10615  1963  00A1               	movwf	___fleq@ff1+1
 10616  1964  3F42               	moviw [2]fsr1
 10617  1965  00A2               	movwf	___fleq@ff1+2
 10618  1966  3F43               	moviw [3]fsr1
 10619  1967  00A3               	movwf	___fleq@ff1+3
 10620  1968  3000               	movlw	0
 10621  1969  00A7               	movwf	___fleq@ff2+3
 10622  196A  3000               	movlw	0
 10623  196B  00A6               	movwf	___fleq@ff2+2
 10624  196C  3000               	movlw	0
 10625  196D  00A5               	movwf	___fleq@ff2+1
 10626  196E  3000               	movlw	0
 10627  196F  00A4               	movwf	___fleq@ff2
 10628  1970  31B5  25BD  3199   	fcall	___fleq
 10629  1973  1C03               	btfss	3,0
 10630  1974  29A3               	goto	l8321
 10631                           
 10632                           ;menu.c: 151:    OLED_print_xy(0, 1, "Ch. ");
 10633  1975  0140               	movlb	0	; select bank0
 10634  1976  01AD               	clrf	OLED_print_xy@row
 10635  1977  0AAD               	incf	OLED_print_xy@row,f
 10636  1978  3014               	movlw	low ((STR_37+1)| (0+32768))
 10637  1979  00AE               	movwf	OLED_print_xy@s
 10638  197A  30BB               	movlw	high ((STR_37+1)| (0+32768))
 10639  197B  00AF               	movwf	OLED_print_xy@s+1
 10640  197C  3000               	movlw	0
 10641  197D  31B3  23A1  3199   	fcall	_OLED_print_xy
 10642                           
 10643                           ;menu.c: 152:    itoa(str, selectedChannel + 1, 1);
 10644  1980  30E6               	movlw	low _str
 10645  1981  0140               	movlb	0	; select bank0
 10646  1982  00A9               	movwf	itoa@str
 10647  1983  3001               	movlw	high _str
 10648  1984  00AA               	movwf	itoa@str+1
 10649  1985  0141               	movlb	1	; select bank1
 10650  1986  086B               	movf	_selectedChannel^(0+128),w
 10651  1987  3E01               	addlw	1
 10652  1988  00C7               	movwf	??_channelSetup^(0+128)
 10653  1989  0847               	movf	??_channelSetup^(0+128),w
 10654  198A  0140               	movlb	0	; select bank0
 10655  198B  00AB               	movwf	itoa@value
 10656  198C  01AC               	clrf	itoa@width
 10657  198D  0AAC               	incf	itoa@width,f
 10658  198E  31B7  273E  3199   	fcall	_itoa
 10659                           
 10660                           ;menu.c: 153:    OLED_print_xy(4, 1, str);
 10661  1991  0140               	movlb	0	; select bank0
 10662  1992  01AD               	clrf	OLED_print_xy@row
 10663  1993  0AAD               	incf	OLED_print_xy@row,f
 10664  1994  30E6               	movlw	low _str
 10665  1995  00AE               	movwf	OLED_print_xy@s
 10666  1996  3001               	movlw	high _str
 10667  1997  00AF               	movwf	OLED_print_xy@s+1
 10668  1998  3004               	movlw	4
 10669  1999  31B3  23A1  3199   	fcall	_OLED_print_xy
 10670                           
 10671                           ;menu.c: 154:    OLED_print_xy(5, 1, " off   ");
 10672  199C  0140               	movlb	0	; select bank0
 10673  199D  01AD               	clrf	OLED_print_xy@row
 10674  199E  0AAD               	incf	OLED_print_xy@row,f
 10675  199F  30D0               	movlw	low (STR_24| (0+32768))
 10676  19A0  00AE               	movwf	OLED_print_xy@s
 10677  19A1  30BA               	movlw	high (STR_24| (0+32768))
 10678  19A2  29EB               	goto	L3
 10679  19A3                     l8321:	
 10680                           ;menu.c: 155:   } else if (heater->Pset < 0) {
 10681                           
 10682  19A3  0141               	movlb	1	; select bank1
 10683  19A4  084B               	movf	channelSetup@heater^(0+128),w
 10684  19A5  0086               	movwf	6
 10685  19A6  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10686  19A7  0087               	movwf	7
 10687  19A8  3150               	addfsr 1,16
 10688  19A9  3F40               	moviw [0]fsr1
 10689  19AA  00AD               	movwf	___flge@ff1^(0+128)
 10690  19AB  3F41               	moviw [1]fsr1
 10691  19AC  00AE               	movwf	(___flge@ff1+1)^(0+128)
 10692  19AD  3F42               	moviw [2]fsr1
 10693  19AE  00AF               	movwf	(___flge@ff1+2)^(0+128)
 10694  19AF  3F43               	moviw [3]fsr1
 10695  19B0  00B0               	movwf	(___flge@ff1+3)^(0+128)
 10696  19B1  3000               	movlw	0
 10697  19B2  00B4               	movwf	(___flge@ff2+3)^(0+128)
 10698  19B3  3000               	movlw	0
 10699  19B4  00B3               	movwf	(___flge@ff2+2)^(0+128)
 10700  19B5  3000               	movlw	0
 10701  19B6  00B2               	movwf	(___flge@ff2+1)^(0+128)
 10702  19B7  3000               	movlw	0
 10703  19B8  00B1               	movwf	___flge@ff2^(0+128)
 10704  19B9  31AA  2206  3199   	fcall	___flge
 10705  19BC  1803               	btfsc	3,0
 10706  19BD  29EE               	goto	l8331
 10707                           
 10708                           ;menu.c: 156:    OLED_print_xy(0, 1, "Ch. ");
 10709  19BE  0140               	movlb	0	; select bank0
 10710  19BF  01AD               	clrf	OLED_print_xy@row
 10711  19C0  0AAD               	incf	OLED_print_xy@row,f
 10712  19C1  3014               	movlw	low ((STR_37+1)| (0+32768))
 10713  19C2  00AE               	movwf	OLED_print_xy@s
 10714  19C3  30BB               	movlw	high ((STR_37+1)| (0+32768))
 10715  19C4  00AF               	movwf	OLED_print_xy@s+1
 10716  19C5  3000               	movlw	0
 10717  19C6  31B3  23A1  3199   	fcall	_OLED_print_xy
 10718                           
 10719                           ;menu.c: 157:    itoa(str, selectedChannel + 1, 1);
 10720  19C9  30E6               	movlw	low _str
 10721  19CA  0140               	movlb	0	; select bank0
 10722  19CB  00A9               	movwf	itoa@str
 10723  19CC  3001               	movlw	high _str
 10724  19CD  00AA               	movwf	itoa@str+1
 10725  19CE  0141               	movlb	1	; select bank1
 10726  19CF  086B               	movf	_selectedChannel^(0+128),w
 10727  19D0  3E01               	addlw	1
 10728  19D1  00C7               	movwf	??_channelSetup^(0+128)
 10729  19D2  0847               	movf	??_channelSetup^(0+128),w
 10730  19D3  0140               	movlb	0	; select bank0
 10731  19D4  00AB               	movwf	itoa@value
 10732  19D5  01AC               	clrf	itoa@width
 10733  19D6  0AAC               	incf	itoa@width,f
 10734  19D7  31B7  273E  3199   	fcall	_itoa
 10735                           
 10736                           ;menu.c: 158:    OLED_print_xy(4, 1, str);
 10737  19DA  0140               	movlb	0	; select bank0
 10738  19DB  01AD               	clrf	OLED_print_xy@row
 10739  19DC  0AAD               	incf	OLED_print_xy@row,f
 10740  19DD  30E6               	movlw	low _str
 10741  19DE  00AE               	movwf	OLED_print_xy@s
 10742  19DF  3001               	movlw	high _str
 10743  19E0  00AF               	movwf	OLED_print_xy@s+1
 10744  19E1  3004               	movlw	4
 10745  19E2  31B3  23A1  3199   	fcall	_OLED_print_xy
 10746                           
 10747                           ;menu.c: 159:    OLED_print_xy(5, 1, " auto  ");
 10748  19E5  0140               	movlb	0	; select bank0
 10749  19E6  01AD               	clrf	OLED_print_xy@row
 10750  19E7  0AAD               	incf	OLED_print_xy@row,f
 10751  19E8  30E0               	movlw	low (STR_26| (0+32768))
 10752  19E9  00AE               	movwf	OLED_print_xy@s
 10753  19EA  30BA               	movlw	high (STR_26| (0+32768))
 10754  19EB                     L3:	
 10755  19EB  00AF               	movwf	OLED_print_xy@s+1
 10756  19EC  3005               	movlw	5
 10757  19ED  2A72               	goto	L2
 10758  19EE                     l8331:	
 10759                           ;menu.c: 160:   } else {
 10760                           
 10761                           
 10762                           ;menu.c: 161:    ftoa(str, heater->Pset, 4, 1);
 10763  19EE  0141               	movlb	1	; select bank1
 10764  19EF  084B               	movf	channelSetup@heater^(0+128),w
 10765  19F0  0086               	movwf	6
 10766  19F1  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10767  19F2  0087               	movwf	7
 10768  19F3  3150               	addfsr 1,16
 10769  19F4  3F40               	moviw [0]fsr1
 10770  19F5  00B9               	movwf	ftoa@fValue^(0+128)
 10771  19F6  3F41               	moviw [1]fsr1
 10772  19F7  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10773  19F8  3F42               	moviw [2]fsr1
 10774  19F9  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10775  19FA  3F43               	moviw [3]fsr1
 10776  19FB  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10777  19FC  3004               	movlw	4
 10778  19FD  00C7               	movwf	??_channelSetup^(0+128)
 10779  19FE  0847               	movf	??_channelSetup^(0+128),w
 10780  19FF  00BD               	movwf	ftoa@width^(0+128)
 10781  1A00  01BE               	clrf	ftoa@prec^(0+128)
 10782  1A01  0ABE               	incf	ftoa@prec^(0+128),f
 10783  1A02  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 10784  1A03  31A2  223B  3199   	fcall	_ftoa
 10785                           
 10786                           ;menu.c: 162:    OLED_print_xy(0, 1, str);
 10787  1A06  0140               	movlb	0	; select bank0
 10788  1A07  01AD               	clrf	OLED_print_xy@row
 10789  1A08  0AAD               	incf	OLED_print_xy@row,f
 10790  1A09  30E6               	movlw	low _str
 10791  1A0A  00AE               	movwf	OLED_print_xy@s
 10792  1A0B  3001               	movlw	high _str
 10793  1A0C  00AF               	movwf	OLED_print_xy@s+1
 10794  1A0D  3000               	movlw	0
 10795  1A0E  31B3  23A1  3199   	fcall	_OLED_print_xy
 10796                           
 10797                           ;menu.c: 163:    OLED_print_xy(4, 1, "W manual");
 10798  1A11  0140               	movlb	0	; select bank0
 10799  1A12  01AD               	clrf	OLED_print_xy@row
 10800  1A13  0AAD               	incf	OLED_print_xy@row,f
 10801  1A14  30AF               	movlw	low (STR_17| (0+32768))
 10802  1A15  00AE               	movwf	OLED_print_xy@s
 10803  1A16  30BA               	movlw	high (STR_17| (0+32768))
 10804  1A17  00AF               	movwf	OLED_print_xy@s+1
 10805  1A18  3004               	movlw	4
 10806  1A19  2A72               	goto	L2
 10807  1A1A                     l8337:	
 10808  1A1A  084B               	movf	channelSetup@heater^(0+128),w
 10809  1A1B  0086               	movwf	6
 10810  1A1C  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10811  1A1D  0087               	movwf	7
 10812  1A1E  315E               	addfsr 1,30
 10813  1A1F  3002               	movlw	2
 10814  1A20  0601               	xorwf	1,w
 10815  1A21  1D03               	btfss	3,2
 10816  1A22  2A34               	goto	l8341
 10817                           
 10818                           ;menu.c: 168:   OLED_print_xy(0, 0, "Not         ");
 10819  1A23  0140               	movlb	0	; select bank0
 10820  1A24  01AD               	clrf	OLED_print_xy@row
 10821  1A25  309D               	movlw	low (STR_28| (0+32768))
 10822  1A26  00AE               	movwf	OLED_print_xy@s
 10823  1A27  30B9               	movlw	high (STR_28| (0+32768))
 10824  1A28  00AF               	movwf	OLED_print_xy@s+1
 10825  1A29  3000               	movlw	0
 10826  1A2A  31B3  23A1  3199   	fcall	_OLED_print_xy
 10827                           
 10828                           ;menu.c: 169:   OLED_print_xy(0, 1, "connected   ");
 10829  1A2D  0140               	movlb	0	; select bank0
 10830  1A2E  01AD               	clrf	OLED_print_xy@row
 10831  1A2F  0AAD               	incf	OLED_print_xy@row,f
 10832  1A30  3005               	movlw	low (STR_29| (0+32768))
 10833  1A31  00AE               	movwf	OLED_print_xy@s
 10834  1A32  30BA               	movlw	high (STR_29| (0+32768))
 10835  1A33  2A70               	goto	L4
 10836  1A34                     l8341:	
 10837                           ;menu.c: 171:  } else if (heater->status == CH_UNCHECKED) {
 10838                           
 10839  1A34  084B               	movf	channelSetup@heater^(0+128),w
 10840  1A35  0086               	movwf	6
 10841  1A36  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10842  1A37  0087               	movwf	7
 10843  1A38  315E               	addfsr 1,30
 10844  1A39  3005               	movlw	5
 10845  1A3A  0601               	xorwf	1,w
 10846  1A3B  1D03               	btfss	3,2
 10847  1A3C  2A4E               	goto	l8345
 10848                           
 10849                           ;menu.c: 173:   OLED_print_xy(0, 0, "Testing     ");
 10850  1A3D  0140               	movlb	0	; select bank0
 10851  1A3E  01AD               	clrf	OLED_print_xy@row
 10852  1A3F  30B7               	movlw	low (STR_30| (0+32768))
 10853  1A40  00AE               	movwf	OLED_print_xy@s
 10854  1A41  30B9               	movlw	high (STR_30| (0+32768))
 10855  1A42  00AF               	movwf	OLED_print_xy@s+1
 10856  1A43  3000               	movlw	0
 10857  1A44  31B3  23A1  3199   	fcall	_OLED_print_xy
 10858                           
 10859                           ;menu.c: 174:   OLED_print_xy(0, 1, "heater...   ");
 10860  1A47  0140               	movlb	0	; select bank0
 10861  1A48  01AD               	clrf	OLED_print_xy@row
 10862  1A49  0AAD               	incf	OLED_print_xy@row,f
 10863  1A4A  30EB               	movlw	low (STR_31| (0+32768))
 10864  1A4B  00AE               	movwf	OLED_print_xy@s
 10865  1A4C  30B9               	movlw	high (STR_31| (0+32768))
 10866  1A4D  2A70               	goto	L4
 10867  1A4E                     l8345:	
 10868                           ;menu.c: 176:  } else if ((heater->status == CH_OVERCURRENT) || (heater->status == CH_SH
      +                          ORTED)) {
 10869                           
 10870  1A4E  084B               	movf	channelSetup@heater^(0+128),w
 10871  1A4F  0086               	movwf	6
 10872  1A50  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10873  1A51  0087               	movwf	7
 10874  1A52  315E               	addfsr 1,30
 10875  1A53  3004               	movlw	4
 10876  1A54  0601               	xorwf	1,w
 10877  1A55  1903               	btfsc	3,2
 10878  1A56  2A60               	goto	l8349
 10879  1A57  084B               	movf	channelSetup@heater^(0+128),w
 10880  1A58  0086               	movwf	6
 10881  1A59  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10882  1A5A  0087               	movwf	7
 10883  1A5B  315E               	addfsr 1,30
 10884  1A5C  3003               	movlw	3
 10885  1A5D  0601               	xorwf	1,w
 10886  1A5E  1D03               	btfss	3,2
 10887  1A5F  2A75               	goto	l473
 10888  1A60                     l8349:	
 10889                           
 10890                           ;menu.c: 178:   OLED_print_xy(0, 0, "Reset       ");
 10891  1A60  0140               	movlb	0	; select bank0
 10892  1A61  01AD               	clrf	OLED_print_xy@row
 10893  1A62  30AA               	movlw	low (STR_32| (0+32768))
 10894  1A63  00AE               	movwf	OLED_print_xy@s
 10895  1A64  30B9               	movlw	high (STR_32| (0+32768))
 10896  1A65  00AF               	movwf	OLED_print_xy@s+1
 10897  1A66  3000               	movlw	0
 10898  1A67  31B3  23A1  3199   	fcall	_OLED_print_xy
 10899                           
 10900                           ;menu.c: 179:   OLED_print_xy(0, 1, "channel     ");
 10901  1A6A  0140               	movlb	0	; select bank0
 10902  1A6B  01AD               	clrf	OLED_print_xy@row
 10903  1A6C  0AAD               	incf	OLED_print_xy@row,f
 10904  1A6D  30C4               	movlw	low (STR_33| (0+32768))
 10905  1A6E  00AE               	movwf	OLED_print_xy@s
 10906  1A6F  30B9               	movlw	high (STR_33| (0+32768))
 10907  1A70                     L4:	
 10908  1A70  00AF               	movwf	OLED_print_xy@s+1
 10909  1A71  3000               	movlw	0
 10910  1A72                     L2:	
 10911  1A72  31B3  23A1  3199   	fcall	_OLED_print_xy
 10912  1A75                     l473:	
 10913                           
 10914                           ;menu.c: 183:  OLED_print_xy(12, 0, "Lens diam.  ");
 10915  1A75  0140               	movlb	0	; select bank0
 10916  1A76  01AD               	clrf	OLED_print_xy@row
 10917  1A77  301F               	movlw	low (STR_34| (0+32768))
 10918  1A78  00AE               	movwf	OLED_print_xy@s
 10919  1A79  30BA               	movlw	high (STR_34| (0+32768))
 10920  1A7A  00AF               	movwf	OLED_print_xy@s+1
 10921  1A7B  300C               	movlw	12
 10922  1A7C  31B3  23A1  3199   	fcall	_OLED_print_xy
 10923                           
 10924                           ;menu.c: 184:  ftoa(str, heater->lensDia, 4, 1);
 10925  1A7F  0141               	movlb	1	; select bank1
 10926  1A80  084B               	movf	channelSetup@heater^(0+128),w
 10927  1A81  0086               	movwf	6
 10928  1A82  084C               	movf	(channelSetup@heater+1)^(0+128),w
 10929  1A83  0087               	movwf	7
 10930  1A84  3155               	addfsr 1,21
 10931  1A85  3F40               	moviw [0]fsr1
 10932  1A86  00B9               	movwf	ftoa@fValue^(0+128)
 10933  1A87  3F41               	moviw [1]fsr1
 10934  1A88  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10935  1A89  3F42               	moviw [2]fsr1
 10936  1A8A  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10937  1A8B  3F43               	moviw [3]fsr1
 10938  1A8C  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10939  1A8D  3004               	movlw	4
 10940  1A8E  00C7               	movwf	??_channelSetup^(0+128)
 10941  1A8F  0847               	movf	??_channelSetup^(0+128),w
 10942  1A90  00BD               	movwf	ftoa@width^(0+128)
 10943  1A91  01BE               	clrf	ftoa@prec^(0+128)
 10944  1A92  0ABE               	incf	ftoa@prec^(0+128),f
 10945  1A93  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 10946  1A94  31A2  223B  3199   	fcall	_ftoa
 10947                           
 10948                           ;menu.c: 185:  OLED_print_xy(12 + 0, 1, str);
 10949  1A97  0140               	movlb	0	; select bank0
 10950  1A98  01AD               	clrf	OLED_print_xy@row
 10951  1A99  0AAD               	incf	OLED_print_xy@row,f
 10952  1A9A  30E6               	movlw	low _str
 10953  1A9B  00AE               	movwf	OLED_print_xy@s
 10954  1A9C  3001               	movlw	high _str
 10955  1A9D  00AF               	movwf	OLED_print_xy@s+1
 10956  1A9E  300C               	movlw	12
 10957  1A9F  31B3  23A1  3199   	fcall	_OLED_print_xy
 10958                           
 10959                           ;menu.c: 186:  OLED_print_xy(12 + 5, 1, " inch  ");
 10960  1AA2  0140               	movlb	0	; select bank0
 10961  1AA3  01AD               	clrf	OLED_print_xy@row
 10962  1AA4  0AAD               	incf	OLED_print_xy@row,f
 10963  1AA5  30D8               	movlw	low (STR_35| (0+32768))
 10964  1AA6  00AE               	movwf	OLED_print_xy@s
 10965  1AA7  30BA               	movlw	high (STR_35| (0+32768))
 10966  1AA8  00AF               	movwf	OLED_print_xy@s+1
 10967  1AA9  3011               	movlw	17
 10968  1AAA  31B3  23A1  3199   	fcall	_OLED_print_xy
 10969                           
 10970                           ;menu.c: 188:  page = paging(page, 2);
 10971  1AAD  3002               	movlw	2
 10972  1AAE  0141               	movlb	1	; select bank1
 10973  1AAF  00C7               	movwf	??_channelSetup^(0+128)
 10974  1AB0  0847               	movf	??_channelSetup^(0+128),w
 10975  1AB1  0140               	movlb	0	; select bank0
 10976  1AB2  00A7               	movwf	paging@lastPage
 10977  1AB3  0142               	movlb	2	; select bank2
 10978  1AB4  0867               	movf	channelSetup@page^(0+256),w
 10979  1AB5  3187  278D         	fcall	_paging
 10980  1AB7  0141               	movlb	1	; select bank1
 10981  1AB8  00C8               	movwf	(??_channelSetup+1)^(0+128)
 10982  1AB9  0848               	movf	(??_channelSetup+1)^(0+128),w
 10983  1ABA  0142               	movlb	2	; select bank2
 10984  1ABB  00E7               	movwf	channelSetup@page^(0+256)
 10985                           
 10986                           ;menu.c: 190:  return page;
 10987  1ABC  0867               	movf	channelSetup@page^(0+256),w
 10988  1ABD  0008               	return
 10989  1ABE                     __end_of_channelSetup:	
 10990                           
 10991                           	psect	text14
 10992  091A                     __ptext14:	
 10993 ;; *************** function _channelView *****************
 10994 ;; Defined at:
 10995 ;;		line 76 in file "menu.c"
 10996 ;; Parameters:    Size  Location     Type
 10997 ;;		None
 10998 ;; Auto vars:     Size  Location     Type
 10999 ;;  n               1   49[BANK1 ] unsigned char 
 11000 ;; Return value:  Size  Location     Type
 11001 ;;                  1    wreg      unsigned char 
 11002 ;; Registers used:
 11003 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11004 ;; Tracked objects:
 11005 ;;		On entry : 0/0
 11006 ;;		On exit  : 0/0
 11007 ;;		Unchanged: 0/0
 11008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11009 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11010 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11011 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11012 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11013 ;;Total ram usage:       11 bytes
 11014 ;; Hardware stack levels used:    1
 11015 ;; Hardware stack levels required when called:    7
 11016 ;; This function calls:
 11017 ;;		_OLED_print_xy
 11018 ;;		___bmul
 11019 ;;		___wmul
 11020 ;;		_ftoa
 11021 ;;		_itoa
 11022 ;;		_paging
 11023 ;;		_returnToPage
 11024 ;; This function is called by:
 11025 ;;		_menu
 11026 ;; This function uses a non-reentrant model
 11027 ;;
 11028                           
 11029                           
 11030                           ;psect for function _channelView
 11031  091A                     _channelView:	
 11032                           
 11033                           ;menu.c: 78:  static uint8_t page = 0;;menu.c: 79:  uint8_t n;;menu.c: 81:  returnToPage
      +                          (page);
 11034                           
 11035                           ;incstack = 0
 11036                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11037  091A  0142               	movlb	2	; select bank2
 11038  091B  0868               	movf	channelView@page^(0+256),w
 11039  091C  31B3  23D3  3189   	fcall	_returnToPage
 11040                           
 11041                           ;menu.c: 82:  if (g_screenRefresh) {
 11042  091F  0141               	movlb	1	; select bank1
 11043  0920  086D               	movf	_g_screenRefresh^(0+128),w
 11044  0921  1903               	btfsc	3,2
 11045  0922  29E2               	goto	l8249
 11046                           
 11047                           ;menu.c: 83:   for (n = 0; n < 4; n++) {
 11048  0923  01D1               	clrf	channelView@n^(0+128)
 11049  0924                     l8225:	
 11050  0924  3004               	movlw	4
 11051  0925  0251               	subwf	channelView@n^(0+128),w
 11052  0926  1803               	btfsc	3,0
 11053  0927  29E2               	goto	l8249
 11054                           
 11055                           ;menu.c: 84:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
 11056  0928  0140               	movlb	0	; select bank0
 11057  0929  01AD               	clrf	OLED_print_xy@row
 11058  092A  3025               	movlw	low (STR_10| (0+32768))
 11059  092B  00AE               	movwf	OLED_print_xy@s
 11060  092C  30BB               	movlw	high (STR_10| (0+32768))
 11061  092D  00AF               	movwf	OLED_print_xy@s+1
 11062  092E  300C               	movlw	12
 11063  092F  0141               	movlb	1	; select bank1
 11064  0930  00C7               	movwf	??_channelView^(0+128)
 11065  0931  0847               	movf	??_channelView^(0+128),w
 11066  0932  0140               	movlb	0	; select bank0
 11067  0933  00A9               	movwf	___bmul@multiplicand
 11068  0934  0141               	movlb	1	; select bank1
 11069  0935  0851               	movf	channelView@n^(0+128),w
 11070  0936  31B1  219D  3189   	fcall	___bmul
 11071  0939  31B3  23A1  3189   	fcall	_OLED_print_xy
 11072                           
 11073                           ;menu.c: 85:    itoa(str, n + 1, 1);
 11074  093C  30E6               	movlw	low _str
 11075  093D  0140               	movlb	0	; select bank0
 11076  093E  00A9               	movwf	itoa@str
 11077  093F  3001               	movlw	high _str
 11078  0940  00AA               	movwf	itoa@str+1
 11079  0941  0141               	movlb	1	; select bank1
 11080  0942  0851               	movf	channelView@n^(0+128),w
 11081  0943  3E01               	addlw	1
 11082  0944  00C7               	movwf	??_channelView^(0+128)
 11083  0945  0847               	movf	??_channelView^(0+128),w
 11084  0946  0140               	movlb	0	; select bank0
 11085  0947  00AB               	movwf	itoa@value
 11086  0948  01AC               	clrf	itoa@width
 11087  0949  0AAC               	incf	itoa@width,f
 11088  094A  31B7  273E  3189   	fcall	_itoa
 11089                           
 11090                           ;menu.c: 86:    OLED_print_xy(n * 12 + 3, 0, str);
 11091  094D  0140               	movlb	0	; select bank0
 11092  094E  01AD               	clrf	OLED_print_xy@row
 11093  094F  30E6               	movlw	low _str
 11094  0950  00AE               	movwf	OLED_print_xy@s
 11095  0951  3001               	movlw	high _str
 11096  0952  00AF               	movwf	OLED_print_xy@s+1
 11097  0953  300C               	movlw	12
 11098  0954  0141               	movlb	1	; select bank1
 11099  0955  00C7               	movwf	??_channelView^(0+128)
 11100  0956  0847               	movf	??_channelView^(0+128),w
 11101  0957  0140               	movlb	0	; select bank0
 11102  0958  00A9               	movwf	___bmul@multiplicand
 11103  0959  0141               	movlb	1	; select bank1
 11104  095A  0851               	movf	channelView@n^(0+128),w
 11105  095B  31B1  219D  3189   	fcall	___bmul
 11106  095E  3E03               	addlw	3
 11107  095F  31B3  23A1  3189   	fcall	_OLED_print_xy
 11108                           
 11109                           ;menu.c: 87:    OLED_print_xy(n * 12 + 4, 0, ": ");
 11110  0962  0140               	movlb	0	; select bank0
 11111  0963  01AD               	clrf	OLED_print_xy@row
 11112  0964  3032               	movlw	low (STR_11| (0+32768))
 11113  0965  00AE               	movwf	OLED_print_xy@s
 11114  0966  30BB               	movlw	high (STR_11| (0+32768))
 11115  0967  00AF               	movwf	OLED_print_xy@s+1
 11116  0968  300C               	movlw	12
 11117  0969  0141               	movlb	1	; select bank1
 11118  096A  00C7               	movwf	??_channelView^(0+128)
 11119  096B  0847               	movf	??_channelView^(0+128),w
 11120  096C  0140               	movlb	0	; select bank0
 11121  096D  00A9               	movwf	___bmul@multiplicand
 11122  096E  0141               	movlb	1	; select bank1
 11123  096F  0851               	movf	channelView@n^(0+128),w
 11124  0970  31B1  219D  3189   	fcall	___bmul
 11125  0973  3E04               	addlw	4
 11126  0974  31B3  23A1  3189   	fcall	_OLED_print_xy
 11127                           
 11128                           ;menu.c: 88:    ftoa(str, data.heater[n].lensDia, 4, 1);
 11129  0977  0141               	movlb	1	; select bank1
 11130  0978  0851               	movf	channelView@n^(0+128),w
 11131  0979  00C7               	movwf	??_channelView^(0+128)
 11132  097A  01C8               	clrf	(??_channelView^(0+128)+1)
 11133  097B  0847               	movf	??_channelView^(0+128),w
 11134  097C  0140               	movlb	0	; select bank0
 11135  097D  00AD               	movwf	___wmul@multiplier
 11136  097E  0141               	movlb	1	; select bank1
 11137  097F  0848               	movf	(??_channelView+1)^(0+128),w
 11138  0980  0140               	movlb	0	; select bank0
 11139  0981  00AE               	movwf	___wmul@multiplier+1
 11140  0982  301F               	movlw	31
 11141  0983  00AF               	movwf	___wmul@multiplicand
 11142  0984  3000               	movlw	0
 11143  0985  00B0               	movwf	___wmul@multiplicand+1
 11144  0986  31B1  21DE  3189   	fcall	___wmul
 11145  0989  3089               	movlw	137
 11146  098A  0141               	movlb	1	; select bank1
 11147  098B  00C9               	movwf	(??_channelView+2)^(0+128)
 11148  098C  3027               	movlw	39
 11149  098D  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11150  098E  0140               	movlb	0	; select bank0
 11151  098F  082D               	movf	?___wmul,w
 11152  0990  0141               	movlb	1	; select bank1
 11153  0991  0749               	addwf	(??_channelView+2)^(0+128),w
 11154  0992  0086               	movwf	6
 11155  0993  0140               	movlb	0	; select bank0
 11156  0994  082E               	movf	?___wmul+1,w
 11157  0995  0141               	movlb	1	; select bank1
 11158  0996  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11159  0997  0087               	movwf	7
 11160  0998  3F40               	moviw [0]fsr1
 11161  0999  00CD               	movwf	_channelView$2775^(0+128)
 11162  099A  3F41               	moviw [1]fsr1
 11163  099B  00CE               	movwf	(_channelView$2775+1)^(0+128)
 11164  099C  3F42               	moviw [2]fsr1
 11165  099D  00CF               	movwf	(_channelView$2775+2)^(0+128)
 11166  099E  3F43               	moviw [3]fsr1
 11167  099F  00D0               	movwf	(_channelView$2775+3)^(0+128)
 11168                           
 11169                           ;menu.c: 88:    ftoa(str, data.heater[n].lensDia, 4, 1);
 11170  09A0  0850               	movf	(_channelView$2775+3)^(0+128),w
 11171  09A1  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11172  09A2  084F               	movf	(_channelView$2775+2)^(0+128),w
 11173  09A3  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11174  09A4  084E               	movf	(_channelView$2775+1)^(0+128),w
 11175  09A5  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11176  09A6  084D               	movf	_channelView$2775^(0+128),w
 11177  09A7  00B9               	movwf	ftoa@fValue^(0+128)
 11178  09A8  3004               	movlw	4
 11179  09A9  00C7               	movwf	??_channelView^(0+128)
 11180  09AA  0847               	movf	??_channelView^(0+128),w
 11181  09AB  00BD               	movwf	ftoa@width^(0+128)
 11182  09AC  01BE               	clrf	ftoa@prec^(0+128)
 11183  09AD  0ABE               	incf	ftoa@prec^(0+128),f
 11184  09AE  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11185  09AF  31A2  223B  3189   	fcall	_ftoa
 11186                           
 11187                           ;menu.c: 89:    OLED_print_xy(n * 12 + 6, 0, str);
 11188  09B2  0140               	movlb	0	; select bank0
 11189  09B3  01AD               	clrf	OLED_print_xy@row
 11190  09B4  30E6               	movlw	low _str
 11191  09B5  00AE               	movwf	OLED_print_xy@s
 11192  09B6  3001               	movlw	high _str
 11193  09B7  00AF               	movwf	OLED_print_xy@s+1
 11194  09B8  300C               	movlw	12
 11195  09B9  0141               	movlb	1	; select bank1
 11196  09BA  00C7               	movwf	??_channelView^(0+128)
 11197  09BB  0847               	movf	??_channelView^(0+128),w
 11198  09BC  0140               	movlb	0	; select bank0
 11199  09BD  00A9               	movwf	___bmul@multiplicand
 11200  09BE  0141               	movlb	1	; select bank1
 11201  09BF  0851               	movf	channelView@n^(0+128),w
 11202  09C0  31B1  219D  3189   	fcall	___bmul
 11203  09C3  3E06               	addlw	6
 11204  09C4  31B3  23A1  3189   	fcall	_OLED_print_xy
 11205                           
 11206                           ;menu.c: 90:    OLED_print_xy(n * 12 + 10, 0, "\" ");
 11207  09C7  0140               	movlb	0	; select bank0
 11208  09C8  01AD               	clrf	OLED_print_xy@row
 11209  09C9  302F               	movlw	low (STR_12| (0+32768))
 11210  09CA  00AE               	movwf	OLED_print_xy@s
 11211  09CB  30BB               	movlw	high (STR_12| (0+32768))
 11212  09CC  00AF               	movwf	OLED_print_xy@s+1
 11213  09CD  300C               	movlw	12
 11214  09CE  0141               	movlb	1	; select bank1
 11215  09CF  00C7               	movwf	??_channelView^(0+128)
 11216  09D0  0847               	movf	??_channelView^(0+128),w
 11217  09D1  0140               	movlb	0	; select bank0
 11218  09D2  00A9               	movwf	___bmul@multiplicand
 11219  09D3  0141               	movlb	1	; select bank1
 11220  09D4  0851               	movf	channelView@n^(0+128),w
 11221  09D5  31B1  219D  3189   	fcall	___bmul
 11222  09D8  3E0A               	addlw	10
 11223  09D9  31B3  23A1  3189   	fcall	_OLED_print_xy
 11224                           
 11225                           ;menu.c: 91:   }
 11226  09DC  3001               	movlw	1
 11227  09DD  0141               	movlb	1	; select bank1
 11228  09DE  00C7               	movwf	??_channelView^(0+128)
 11229  09DF  0847               	movf	??_channelView^(0+128),w
 11230  09E0  07D1               	addwf	channelView@n^(0+128),f
 11231  09E1  2924               	goto	l8225
 11232  09E2                     l8249:	
 11233                           
 11234                           ;menu.c: 94:  for (n = 0; n < 4; n++) {
 11235  09E2  01D1               	clrf	channelView@n^(0+128)
 11236  09E3                     l8251:	
 11237  09E3  3004               	movlw	4
 11238  09E4  0251               	subwf	channelView@n^(0+128),w
 11239  09E5  1803               	btfsc	3,0
 11240  09E6  2BB6               	goto	l8289
 11241  09E7  2B74               	goto	l8283
 11242  09E8                     l8255:	
 11243                           
 11244                           ;menu.c: 97:    OLED_print_xy(n * 12 + 0, 1, "Please wait!");
 11245  09E8  0140               	movlb	0	; select bank0
 11246  09E9  01AD               	clrf	OLED_print_xy@row
 11247  09EA  0AAD               	incf	OLED_print_xy@row,f
 11248  09EB  3039               	movlw	low (STR_13| (0+32768))
 11249  09EC  00AE               	movwf	OLED_print_xy@s
 11250  09ED  30BA               	movlw	high (STR_13| (0+32768))
 11251  09EE  00AF               	movwf	OLED_print_xy@s+1
 11252  09EF  300C               	movlw	12
 11253  09F0  0141               	movlb	1	; select bank1
 11254  09F1  00C7               	movwf	??_channelView^(0+128)
 11255  09F2  0847               	movf	??_channelView^(0+128),w
 11256  09F3  0140               	movlb	0	; select bank0
 11257  09F4  00A9               	movwf	___bmul@multiplicand
 11258  09F5  0141               	movlb	1	; select bank1
 11259  09F6  0851               	movf	channelView@n^(0+128),w
 11260  09F7  31B1  219D  3189   	fcall	___bmul
 11261  09FA  31B3  23A1  3189   	fcall	_OLED_print_xy
 11262                           
 11263                           ;menu.c: 98:    break;
 11264  09FD  2BB0               	goto	l8285
 11265  09FE                     l8257:	
 11266                           
 11267                           ;menu.c: 100:    OLED_print_xy(n * 12 + 0, 1, "Disabled    ");
 11268  09FE  0140               	movlb	0	; select bank0
 11269  09FF  01AD               	clrf	OLED_print_xy@row
 11270  0A00  0AAD               	incf	OLED_print_xy@row,f
 11271  0A01  30DE               	movlw	low (STR_14| (0+32768))
 11272  0A02  00AE               	movwf	OLED_print_xy@s
 11273  0A03  30B9               	movlw	high (STR_14| (0+32768))
 11274  0A04  00AF               	movwf	OLED_print_xy@s+1
 11275  0A05  300C               	movlw	12
 11276  0A06  0141               	movlb	1	; select bank1
 11277  0A07  00C7               	movwf	??_channelView^(0+128)
 11278  0A08  0847               	movf	??_channelView^(0+128),w
 11279  0A09  0140               	movlb	0	; select bank0
 11280  0A0A  00A9               	movwf	___bmul@multiplicand
 11281  0A0B  0141               	movlb	1	; select bank1
 11282  0A0C  0851               	movf	channelView@n^(0+128),w
 11283  0A0D  31B1  219D  3189   	fcall	___bmul
 11284  0A10  31B3  23A1  3189   	fcall	_OLED_print_xy
 11285                           
 11286                           ;menu.c: 101:    break;
 11287  0A13  2BB0               	goto	l8285
 11288  0A14                     l8259:	
 11289                           
 11290                           ;menu.c: 103:    ftoa(str, data.heater[n].Patt, 4, 1);
 11291  0A14  0851               	movf	channelView@n^(0+128),w
 11292  0A15  00C7               	movwf	??_channelView^(0+128)
 11293  0A16  01C8               	clrf	(??_channelView^(0+128)+1)
 11294  0A17  0847               	movf	??_channelView^(0+128),w
 11295  0A18  0140               	movlb	0	; select bank0
 11296  0A19  00AD               	movwf	___wmul@multiplier
 11297  0A1A  0141               	movlb	1	; select bank1
 11298  0A1B  0848               	movf	(??_channelView+1)^(0+128),w
 11299  0A1C  0140               	movlb	0	; select bank0
 11300  0A1D  00AE               	movwf	___wmul@multiplier+1
 11301  0A1E  301F               	movlw	31
 11302  0A1F  00AF               	movwf	___wmul@multiplicand
 11303  0A20  3000               	movlw	0
 11304  0A21  00B0               	movwf	___wmul@multiplicand+1
 11305  0A22  31B1  21DE  3189   	fcall	___wmul
 11306  0A25  3080               	movlw	128
 11307  0A26  0141               	movlb	1	; select bank1
 11308  0A27  00C9               	movwf	(??_channelView+2)^(0+128)
 11309  0A28  3027               	movlw	39
 11310  0A29  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11311  0A2A  0140               	movlb	0	; select bank0
 11312  0A2B  082D               	movf	?___wmul,w
 11313  0A2C  0141               	movlb	1	; select bank1
 11314  0A2D  0749               	addwf	(??_channelView+2)^(0+128),w
 11315  0A2E  0086               	movwf	6
 11316  0A2F  0140               	movlb	0	; select bank0
 11317  0A30  082E               	movf	?___wmul+1,w
 11318  0A31  0141               	movlb	1	; select bank1
 11319  0A32  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11320  0A33  0087               	movwf	7
 11321  0A34  3F40               	moviw [0]fsr1
 11322  0A35  00CD               	movwf	_channelView$2775^(0+128)
 11323  0A36  3F41               	moviw [1]fsr1
 11324  0A37  00CE               	movwf	(_channelView$2775+1)^(0+128)
 11325  0A38  3F42               	moviw [2]fsr1
 11326  0A39  00CF               	movwf	(_channelView$2775+2)^(0+128)
 11327  0A3A  3F43               	moviw [3]fsr1
 11328  0A3B  00D0               	movwf	(_channelView$2775+3)^(0+128)
 11329                           
 11330                           ;menu.c: 103:    ftoa(str, data.heater[n].Patt, 4, 1);
 11331  0A3C  0850               	movf	(_channelView$2775+3)^(0+128),w
 11332  0A3D  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11333  0A3E  084F               	movf	(_channelView$2775+2)^(0+128),w
 11334  0A3F  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11335  0A40  084E               	movf	(_channelView$2775+1)^(0+128),w
 11336  0A41  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11337  0A42  084D               	movf	_channelView$2775^(0+128),w
 11338  0A43  00B9               	movwf	ftoa@fValue^(0+128)
 11339  0A44  3004               	movlw	4
 11340  0A45  00C7               	movwf	??_channelView^(0+128)
 11341  0A46  0847               	movf	??_channelView^(0+128),w
 11342  0A47  00BD               	movwf	ftoa@width^(0+128)
 11343  0A48  01BE               	clrf	ftoa@prec^(0+128)
 11344  0A49  0ABE               	incf	ftoa@prec^(0+128),f
 11345  0A4A  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11346  0A4B  31A2  223B  3189   	fcall	_ftoa
 11347                           
 11348                           ;menu.c: 105:    OLED_print_xy(n * 12 + 0, 1, str);
 11349  0A4E  0140               	movlb	0	; select bank0
 11350  0A4F  01AD               	clrf	OLED_print_xy@row
 11351  0A50  0AAD               	incf	OLED_print_xy@row,f
 11352  0A51  30E6               	movlw	low _str
 11353  0A52  00AE               	movwf	OLED_print_xy@s
 11354  0A53  3001               	movlw	high _str
 11355  0A54  00AF               	movwf	OLED_print_xy@s+1
 11356  0A55  300C               	movlw	12
 11357  0A56  0141               	movlb	1	; select bank1
 11358  0A57  00C7               	movwf	??_channelView^(0+128)
 11359  0A58  0847               	movf	??_channelView^(0+128),w
 11360  0A59  0140               	movlb	0	; select bank0
 11361  0A5A  00A9               	movwf	___bmul@multiplicand
 11362  0A5B  0141               	movlb	1	; select bank1
 11363  0A5C  0851               	movf	channelView@n^(0+128),w
 11364  0A5D  31B1  219D  3189   	fcall	___bmul
 11365  0A60  31B3  23A1  3189   	fcall	_OLED_print_xy
 11366                           
 11367                           ;menu.c: 109:    if (data.heater[n].mode == MODE_AUTO) {
 11368  0A63  0141               	movlb	1	; select bank1
 11369  0A64  0851               	movf	channelView@n^(0+128),w
 11370  0A65  00C7               	movwf	??_channelView^(0+128)
 11371  0A66  01C8               	clrf	(??_channelView^(0+128)+1)
 11372  0A67  0847               	movf	??_channelView^(0+128),w
 11373  0A68  0140               	movlb	0	; select bank0
 11374  0A69  00AD               	movwf	___wmul@multiplier
 11375  0A6A  0141               	movlb	1	; select bank1
 11376  0A6B  0848               	movf	(??_channelView+1)^(0+128),w
 11377  0A6C  0140               	movlb	0	; select bank0
 11378  0A6D  00AE               	movwf	___wmul@multiplier+1
 11379  0A6E  301F               	movlw	31
 11380  0A6F  00AF               	movwf	___wmul@multiplicand
 11381  0A70  3000               	movlw	0
 11382  0A71  00B0               	movwf	___wmul@multiplicand+1
 11383  0A72  31B1  21DE  3189   	fcall	___wmul
 11384  0A75  3091               	movlw	145
 11385  0A76  0141               	movlb	1	; select bank1
 11386  0A77  00C9               	movwf	(??_channelView+2)^(0+128)
 11387  0A78  3027               	movlw	39
 11388  0A79  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11389  0A7A  0140               	movlb	0	; select bank0
 11390  0A7B  082D               	movf	?___wmul,w
 11391  0A7C  0141               	movlb	1	; select bank1
 11392  0A7D  0749               	addwf	(??_channelView+2)^(0+128),w
 11393  0A7E  0086               	movwf	6
 11394  0A7F  0140               	movlb	0	; select bank0
 11395  0A80  082E               	movf	?___wmul+1,w
 11396  0A81  0141               	movlb	1	; select bank1
 11397  0A82  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11398  0A83  0087               	movwf	7
 11399  0A84  0301               	decf	1,w
 11400  0A85  1D03               	btfss	3,2
 11401  0A86  2B05               	goto	l8271
 11402                           
 11403                           ;menu.c: 110:     OLED_print_xy(n * 12 + 4, 1, " (");
 11404  0A87  0140               	movlb	0	; select bank0
 11405  0A88  01AD               	clrf	OLED_print_xy@row
 11406  0A89  0AAD               	incf	OLED_print_xy@row,f
 11407  0A8A  3035               	movlw	low (STR_15| (0+32768))
 11408  0A8B  00AE               	movwf	OLED_print_xy@s
 11409  0A8C  30BB               	movlw	high (STR_15| (0+32768))
 11410  0A8D  00AF               	movwf	OLED_print_xy@s+1
 11411  0A8E  300C               	movlw	12
 11412  0A8F  0141               	movlb	1	; select bank1
 11413  0A90  00C7               	movwf	??_channelView^(0+128)
 11414  0A91  0847               	movf	??_channelView^(0+128),w
 11415  0A92  0140               	movlb	0	; select bank0
 11416  0A93  00A9               	movwf	___bmul@multiplicand
 11417  0A94  0141               	movlb	1	; select bank1
 11418  0A95  0851               	movf	channelView@n^(0+128),w
 11419  0A96  31B1  219D  3189   	fcall	___bmul
 11420  0A99  3E04               	addlw	4
 11421  0A9A  31B3  23A1  3189   	fcall	_OLED_print_xy
 11422                           
 11423                           ;menu.c: 111:     ftoa(str, data.heater[n].Preq, 4,1);
 11424  0A9D  0141               	movlb	1	; select bank1
 11425  0A9E  0851               	movf	channelView@n^(0+128),w
 11426  0A9F  00C7               	movwf	??_channelView^(0+128)
 11427  0AA0  01C8               	clrf	(??_channelView^(0+128)+1)
 11428  0AA1  0847               	movf	??_channelView^(0+128),w
 11429  0AA2  0140               	movlb	0	; select bank0
 11430  0AA3  00AD               	movwf	___wmul@multiplier
 11431  0AA4  0141               	movlb	1	; select bank1
 11432  0AA5  0848               	movf	(??_channelView+1)^(0+128),w
 11433  0AA6  0140               	movlb	0	; select bank0
 11434  0AA7  00AE               	movwf	___wmul@multiplier+1
 11435  0AA8  301F               	movlw	31
 11436  0AA9  00AF               	movwf	___wmul@multiplicand
 11437  0AAA  3000               	movlw	0
 11438  0AAB  00B0               	movwf	___wmul@multiplicand+1
 11439  0AAC  31B1  21DE  3189   	fcall	___wmul
 11440  0AAF  307C               	movlw	124
 11441  0AB0  0141               	movlb	1	; select bank1
 11442  0AB1  00C9               	movwf	(??_channelView+2)^(0+128)
 11443  0AB2  3027               	movlw	39
 11444  0AB3  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11445  0AB4  0140               	movlb	0	; select bank0
 11446  0AB5  082D               	movf	?___wmul,w
 11447  0AB6  0141               	movlb	1	; select bank1
 11448  0AB7  0749               	addwf	(??_channelView+2)^(0+128),w
 11449  0AB8  0086               	movwf	6
 11450  0AB9  0140               	movlb	0	; select bank0
 11451  0ABA  082E               	movf	?___wmul+1,w
 11452  0ABB  0141               	movlb	1	; select bank1
 11453  0ABC  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11454  0ABD  0087               	movwf	7
 11455  0ABE  3F40               	moviw [0]fsr1
 11456  0ABF  00CD               	movwf	_channelView$2775^(0+128)
 11457  0AC0  3F41               	moviw [1]fsr1
 11458  0AC1  00CE               	movwf	(_channelView$2775+1)^(0+128)
 11459  0AC2  3F42               	moviw [2]fsr1
 11460  0AC3  00CF               	movwf	(_channelView$2775+2)^(0+128)
 11461  0AC4  3F43               	moviw [3]fsr1
 11462  0AC5  00D0               	movwf	(_channelView$2775+3)^(0+128)
 11463                           
 11464                           ;menu.c: 111:     ftoa(str, data.heater[n].Preq, 4,1);
 11465  0AC6  0850               	movf	(_channelView$2775+3)^(0+128),w
 11466  0AC7  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11467  0AC8  084F               	movf	(_channelView$2775+2)^(0+128),w
 11468  0AC9  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11469  0ACA  084E               	movf	(_channelView$2775+1)^(0+128),w
 11470  0ACB  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11471  0ACC  084D               	movf	_channelView$2775^(0+128),w
 11472  0ACD  00B9               	movwf	ftoa@fValue^(0+128)
 11473  0ACE  3004               	movlw	4
 11474  0ACF  00C7               	movwf	??_channelView^(0+128)
 11475  0AD0  0847               	movf	??_channelView^(0+128),w
 11476  0AD1  00BD               	movwf	ftoa@width^(0+128)
 11477  0AD2  01BE               	clrf	ftoa@prec^(0+128)
 11478  0AD3  0ABE               	incf	ftoa@prec^(0+128),f
 11479  0AD4  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11480  0AD5  31A2  223B  3189   	fcall	_ftoa
 11481                           
 11482                           ;menu.c: 112:     OLED_print_xy(n * 12 + 6, 1, str);
 11483  0AD8  0140               	movlb	0	; select bank0
 11484  0AD9  01AD               	clrf	OLED_print_xy@row
 11485  0ADA  0AAD               	incf	OLED_print_xy@row,f
 11486  0ADB  30E6               	movlw	low _str
 11487  0ADC  00AE               	movwf	OLED_print_xy@s
 11488  0ADD  3001               	movlw	high _str
 11489  0ADE  00AF               	movwf	OLED_print_xy@s+1
 11490  0ADF  300C               	movlw	12
 11491  0AE0  0141               	movlb	1	; select bank1
 11492  0AE1  00C7               	movwf	??_channelView^(0+128)
 11493  0AE2  0847               	movf	??_channelView^(0+128),w
 11494  0AE3  0140               	movlb	0	; select bank0
 11495  0AE4  00A9               	movwf	___bmul@multiplicand
 11496  0AE5  0141               	movlb	1	; select bank1
 11497  0AE6  0851               	movf	channelView@n^(0+128),w
 11498  0AE7  31B1  219D  3189   	fcall	___bmul
 11499  0AEA  3E06               	addlw	6
 11500  0AEB  31B3  23A1  3189   	fcall	_OLED_print_xy
 11501                           
 11502                           ;menu.c: 113:     OLED_print_xy(n * 12 + 10, 1, "W)");
 11503  0AEE  0140               	movlb	0	; select bank0
 11504  0AEF  01AD               	clrf	OLED_print_xy@row
 11505  0AF0  0AAD               	incf	OLED_print_xy@row,f
 11506  0AF1  3038               	movlw	low (STR_16| (0+32768))
 11507  0AF2  00AE               	movwf	OLED_print_xy@s
 11508  0AF3  30BB               	movlw	high (STR_16| (0+32768))
 11509  0AF4  00AF               	movwf	OLED_print_xy@s+1
 11510  0AF5  300C               	movlw	12
 11511  0AF6  0141               	movlb	1	; select bank1
 11512  0AF7  00C7               	movwf	??_channelView^(0+128)
 11513  0AF8  0847               	movf	??_channelView^(0+128),w
 11514  0AF9  0140               	movlb	0	; select bank0
 11515  0AFA  00A9               	movwf	___bmul@multiplicand
 11516  0AFB  0141               	movlb	1	; select bank1
 11517  0AFC  0851               	movf	channelView@n^(0+128),w
 11518  0AFD  31B1  219D  3189   	fcall	___bmul
 11519  0B00  3E0A               	addlw	10
 11520  0B01  31B3  23A1  3189   	fcall	_OLED_print_xy
 11521                           
 11522                           ;menu.c: 114:    } else {
 11523  0B04  2BB0               	goto	l8285
 11524  0B05                     l8271:	
 11525                           
 11526                           ;menu.c: 115:     OLED_print_xy(n * 12 + 4, 1, "W manual");
 11527  0B05  0140               	movlb	0	; select bank0
 11528  0B06  01AD               	clrf	OLED_print_xy@row
 11529  0B07  0AAD               	incf	OLED_print_xy@row,f
 11530  0B08  30AF               	movlw	low (STR_17| (0+32768))
 11531  0B09  00AE               	movwf	OLED_print_xy@s
 11532  0B0A  30BA               	movlw	high (STR_17| (0+32768))
 11533  0B0B  00AF               	movwf	OLED_print_xy@s+1
 11534  0B0C  300C               	movlw	12
 11535  0B0D  0141               	movlb	1	; select bank1
 11536  0B0E  00C7               	movwf	??_channelView^(0+128)
 11537  0B0F  0847               	movf	??_channelView^(0+128),w
 11538  0B10  0140               	movlb	0	; select bank0
 11539  0B11  00A9               	movwf	___bmul@multiplicand
 11540  0B12  0141               	movlb	1	; select bank1
 11541  0B13  0851               	movf	channelView@n^(0+128),w
 11542  0B14  31B1  219D  3189   	fcall	___bmul
 11543  0B17  3E04               	addlw	4
 11544  0B18  31B3  23A1  3189   	fcall	_OLED_print_xy
 11545  0B1B  2BB0               	goto	l8285
 11546  0B1C                     l8273:	
 11547                           
 11548                           ;menu.c: 119:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
 11549  0B1C  0140               	movlb	0	; select bank0
 11550  0B1D  01AD               	clrf	OLED_print_xy@row
 11551  0B1E  0AAD               	incf	OLED_print_xy@row,f
 11552  0B1F  3053               	movlw	low (STR_18| (0+32768))
 11553  0B20  00AE               	movwf	OLED_print_xy@s
 11554  0B21  30BA               	movlw	high (STR_18| (0+32768))
 11555  0B22  00AF               	movwf	OLED_print_xy@s+1
 11556  0B23  300C               	movlw	12
 11557  0B24  0141               	movlb	1	; select bank1
 11558  0B25  00C7               	movwf	??_channelView^(0+128)
 11559  0B26  0847               	movf	??_channelView^(0+128),w
 11560  0B27  0140               	movlb	0	; select bank0
 11561  0B28  00A9               	movwf	___bmul@multiplicand
 11562  0B29  0141               	movlb	1	; select bank1
 11563  0B2A  0851               	movf	channelView@n^(0+128),w
 11564  0B2B  31B1  219D  3189   	fcall	___bmul
 11565  0B2E  31B3  23A1  3189   	fcall	_OLED_print_xy
 11566                           
 11567                           ;menu.c: 120:    break;
 11568  0B31  2BB0               	goto	l8285
 11569  0B32                     l8275:	
 11570                           
 11571                           ;menu.c: 122:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
 11572  0B32  0140               	movlb	0	; select bank0
 11573  0B33  01AD               	clrf	OLED_print_xy@row
 11574  0B34  0AAD               	incf	OLED_print_xy@row,f
 11575  0B35  30D1               	movlw	low (STR_19| (0+32768))
 11576  0B36  00AE               	movwf	OLED_print_xy@s
 11577  0B37  30B9               	movlw	high (STR_19| (0+32768))
 11578  0B38  00AF               	movwf	OLED_print_xy@s+1
 11579  0B39  300C               	movlw	12
 11580  0B3A  0141               	movlb	1	; select bank1
 11581  0B3B  00C7               	movwf	??_channelView^(0+128)
 11582  0B3C  0847               	movf	??_channelView^(0+128),w
 11583  0B3D  0140               	movlb	0	; select bank0
 11584  0B3E  00A9               	movwf	___bmul@multiplicand
 11585  0B3F  0141               	movlb	1	; select bank1
 11586  0B40  0851               	movf	channelView@n^(0+128),w
 11587  0B41  31B1  219D  3189   	fcall	___bmul
 11588  0B44  31B3  23A1  3189   	fcall	_OLED_print_xy
 11589                           
 11590                           ;menu.c: 123:    break;
 11591  0B47  2BB0               	goto	l8285
 11592  0B48                     l8277:	
 11593                           
 11594                           ;menu.c: 125:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
 11595  0B48  0140               	movlb	0	; select bank0
 11596  0B49  01AD               	clrf	OLED_print_xy@row
 11597  0B4A  0AAD               	incf	OLED_print_xy@row,f
 11598  0B4B  3046               	movlw	low (STR_20| (0+32768))
 11599  0B4C  00AE               	movwf	OLED_print_xy@s
 11600  0B4D  30BA               	movlw	high (STR_20| (0+32768))
 11601  0B4E  00AF               	movwf	OLED_print_xy@s+1
 11602  0B4F  300C               	movlw	12
 11603  0B50  0141               	movlb	1	; select bank1
 11604  0B51  00C7               	movwf	??_channelView^(0+128)
 11605  0B52  0847               	movf	??_channelView^(0+128),w
 11606  0B53  0140               	movlb	0	; select bank0
 11607  0B54  00A9               	movwf	___bmul@multiplicand
 11608  0B55  0141               	movlb	1	; select bank1
 11609  0B56  0851               	movf	channelView@n^(0+128),w
 11610  0B57  31B1  219D  3189   	fcall	___bmul
 11611  0B5A  31B3  23A1  3189   	fcall	_OLED_print_xy
 11612                           
 11613                           ;menu.c: 126:    break;
 11614  0B5D  2BB0               	goto	l8285
 11615  0B5E                     l8279:	
 11616                           
 11617                           ;menu.c: 128:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
 11618  0B5E  0140               	movlb	0	; select bank0
 11619  0B5F  01AD               	clrf	OLED_print_xy@row
 11620  0B60  0AAD               	incf	OLED_print_xy@row,f
 11621  0B61  306D               	movlw	low (STR_21| (0+32768))
 11622  0B62  00AE               	movwf	OLED_print_xy@s
 11623  0B63  30BA               	movlw	high (STR_21| (0+32768))
 11624  0B64  00AF               	movwf	OLED_print_xy@s+1
 11625  0B65  300C               	movlw	12
 11626  0B66  0141               	movlb	1	; select bank1
 11627  0B67  00C7               	movwf	??_channelView^(0+128)
 11628  0B68  0847               	movf	??_channelView^(0+128),w
 11629  0B69  0140               	movlb	0	; select bank0
 11630  0B6A  00A9               	movwf	___bmul@multiplicand
 11631  0B6B  0141               	movlb	1	; select bank1
 11632  0B6C  0851               	movf	channelView@n^(0+128),w
 11633  0B6D  31B1  219D  3189   	fcall	___bmul
 11634  0B70  31B3  23A1  3189   	fcall	_OLED_print_xy
 11635                           
 11636                           ;menu.c: 129:    break;
 11637  0B73  2BB0               	goto	l8285
 11638  0B74                     l8283:	
 11639  0B74  0851               	movf	channelView@n^(0+128),w
 11640  0B75  00C7               	movwf	??_channelView^(0+128)
 11641  0B76  01C8               	clrf	(??_channelView^(0+128)+1)
 11642  0B77  0847               	movf	??_channelView^(0+128),w
 11643  0B78  0140               	movlb	0	; select bank0
 11644  0B79  00AD               	movwf	___wmul@multiplier
 11645  0B7A  0141               	movlb	1	; select bank1
 11646  0B7B  0848               	movf	(??_channelView+1)^(0+128),w
 11647  0B7C  0140               	movlb	0	; select bank0
 11648  0B7D  00AE               	movwf	___wmul@multiplier+1
 11649  0B7E  301F               	movlw	31
 11650  0B7F  00AF               	movwf	___wmul@multiplicand
 11651  0B80  3000               	movlw	0
 11652  0B81  00B0               	movwf	___wmul@multiplicand+1
 11653  0B82  31B1  21DE  3189   	fcall	___wmul
 11654  0B85  3092               	movlw	146
 11655  0B86  0141               	movlb	1	; select bank1
 11656  0B87  00C9               	movwf	(??_channelView+2)^(0+128)
 11657  0B88  3027               	movlw	39
 11658  0B89  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11659  0B8A  0140               	movlb	0	; select bank0
 11660  0B8B  082D               	movf	?___wmul,w
 11661  0B8C  0141               	movlb	1	; select bank1
 11662  0B8D  0749               	addwf	(??_channelView+2)^(0+128),w
 11663  0B8E  0086               	movwf	6
 11664  0B8F  0140               	movlb	0	; select bank0
 11665  0B90  082E               	movf	?___wmul+1,w
 11666  0B91  0141               	movlb	1	; select bank1
 11667  0B92  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11668  0B93  0087               	movwf	7
 11669  0B94  0801               	movf	1,w
 11670  0B95  00CB               	movwf	(??_channelView+4)^(0+128)
 11671  0B96  01CC               	clrf	((??_channelView+4)^(0+128)+1)
 11672                           
 11673                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11674                           ; Switch size 1, requested type "simple"
 11675                           ; Number of cases is 1, Range of values is 0 to 0
 11676                           ; switch strategies available:
 11677                           ; Name         Instructions Cycles
 11678                           ; simple_byte            4     3 (average)
 11679                           ; direct_byte            8     6 (fixed)
 11680                           ; jumptable            260     6 (fixed)
 11681                           ;	Chosen strategy is simple_byte
 11682  0B97  084C               	movf	(??_channelView+5)^(0+128),w
 11683  0B98  3A00               	xorlw	0	; case 0
 11684  0B99  1903               	skipnz
 11685  0B9A  2B9C               	goto	l9601
 11686  0B9B  2B5E               	goto	l8279
 11687  0B9C                     l9601:	
 11688                           
 11689                           ; Switch size 1, requested type "simple"
 11690                           ; Number of cases is 6, Range of values is 0 to 5
 11691                           ; switch strategies available:
 11692                           ; Name         Instructions Cycles
 11693                           ; direct_byte           18     6 (fixed)
 11694                           ; simple_byte           19    10 (average)
 11695                           ; jumptable            260     6 (fixed)
 11696                           ;	Chosen strategy is simple_byte
 11697  0B9C  084B               	movf	(??_channelView+4)^(0+128),w
 11698  0B9D  3A00               	xorlw	0	; case 0
 11699  0B9E  1903               	skipnz
 11700  0B9F  29FE               	goto	l8257
 11701  0BA0  3A01               	xorlw	1	; case 1
 11702  0BA1  1903               	skipnz
 11703  0BA2  2A14               	goto	l8259
 11704  0BA3  3A03               	xorlw	3	; case 2
 11705  0BA4  1903               	skipnz
 11706  0BA5  2B1C               	goto	l8273
 11707  0BA6  3A01               	xorlw	1	; case 3
 11708  0BA7  1903               	skipnz
 11709  0BA8  2B32               	goto	l8275
 11710  0BA9  3A07               	xorlw	7	; case 4
 11711  0BAA  1903               	skipnz
 11712  0BAB  2B48               	goto	l8277
 11713  0BAC  3A01               	xorlw	1	; case 5
 11714  0BAD  1903               	skipnz
 11715  0BAE  29E8               	goto	l8255
 11716  0BAF  2B5E               	goto	l8279
 11717  0BB0                     l8285:	
 11718                           
 11719                           ;menu.c: 131:  }
 11720  0BB0  3001               	movlw	1
 11721  0BB1  0141               	movlb	1	; select bank1
 11722  0BB2  00C7               	movwf	??_channelView^(0+128)
 11723  0BB3  0847               	movf	??_channelView^(0+128),w
 11724  0BB4  07D1               	addwf	channelView@n^(0+128),f
 11725  0BB5  29E3               	goto	l8251
 11726  0BB6                     l8289:	
 11727                           
 11728                           ;menu.c: 132:  page = paging(page, 4);
 11729  0BB6  3004               	movlw	4
 11730  0BB7  00C7               	movwf	??_channelView^(0+128)
 11731  0BB8  0847               	movf	??_channelView^(0+128),w
 11732  0BB9  0140               	movlb	0	; select bank0
 11733  0BBA  00A7               	movwf	paging@lastPage
 11734  0BBB  0142               	movlb	2	; select bank2
 11735  0BBC  0868               	movf	channelView@page^(0+256),w
 11736  0BBD  3187  278D         	fcall	_paging
 11737  0BBF  0141               	movlb	1	; select bank1
 11738  0BC0  00C8               	movwf	(??_channelView+1)^(0+128)
 11739  0BC1  0848               	movf	(??_channelView+1)^(0+128),w
 11740  0BC2  0142               	movlb	2	; select bank2
 11741  0BC3  00E8               	movwf	channelView@page^(0+256)
 11742                           
 11743                           ;menu.c: 133:  selectedChannel = page;
 11744  0BC4  0868               	movf	channelView@page^(0+256),w
 11745  0BC5  0141               	movlb	1	; select bank1
 11746  0BC6  00C7               	movwf	??_channelView^(0+128)
 11747  0BC7  0847               	movf	??_channelView^(0+128),w
 11748  0BC8  00EB               	movwf	_selectedChannel^(0+128)
 11749                           
 11750                           ;menu.c: 135:  return page;
 11751  0BC9  0142               	movlb	2	; select bank2
 11752  0BCA  0868               	movf	channelView@page^(0+256),w
 11753  0BCB  0008               	return
 11754  0BCC                     __end_of_channelView:	
 11755                           
 11756                           	psect	text15
 11757  1072                     __ptext15:	
 11758 ;; *************** function _statusView *****************
 11759 ;; Defined at:
 11760 ;;		line 17 in file "menu.c"
 11761 ;; Parameters:    Size  Location     Type
 11762 ;;		None
 11763 ;; Auto vars:     Size  Location     Type
 11764 ;;		None
 11765 ;; Return value:  Size  Location     Type
 11766 ;;                  1    wreg      unsigned char 
 11767 ;; Registers used:
 11768 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11769 ;; Tracked objects:
 11770 ;;		On entry : 0/0
 11771 ;;		On exit  : 0/0
 11772 ;;		Unchanged: 0/0
 11773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11775 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11776 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11777 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11778 ;;Total ram usage:        2 bytes
 11779 ;; Hardware stack levels used:    1
 11780 ;; Hardware stack levels required when called:    7
 11781 ;; This function calls:
 11782 ;;		_OLED_print_xy
 11783 ;;		_ftoa
 11784 ;;		_itoa
 11785 ;;		_paging
 11786 ;;		_returnToPage
 11787 ;; This function is called by:
 11788 ;;		_menu
 11789 ;; This function uses a non-reentrant model
 11790 ;;
 11791                           
 11792                           
 11793                           ;psect for function _statusView
 11794  1072                     _statusView:	
 11795                           
 11796                           ;menu.c: 19:  static uint8_t page = 0;;menu.c: 20:  static uint8_t prevSensorStat = 1;;m
      +                          enu.c: 23:  if (prevSensorStat != data.status.SENSOR_OK) {
 11797                           
 11798                           ;incstack = 0
 11799                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11800  1072  3073               	movlw	115
 11801  1073  0086               	movwf	6
 11802  1074  3027               	movlw	39
 11803  1075  0087               	movwf	7
 11804  1076  0C01               	rrf	1,w
 11805  1077  0141               	movlb	1	; select bank1
 11806  1078  00C7               	movwf	??_statusView^(0+128)
 11807  1079  0CC7               	rrf	??_statusView^(0+128),f
 11808  107A  0C47               	rrf	??_statusView^(0+128),w
 11809  107B  3901               	andlw	1
 11810  107C  0142               	movlb	2	; select bank2
 11811  107D  066F               	xorwf	statusView@prevSensorStat^(0+256),w
 11812  107E  1903               	skipnz
 11813  107F  2899               	goto	l8165
 11814                           
 11815                           ;menu.c: 24:   prevSensorStat = data.status.SENSOR_OK;
 11816  1080  3073               	movlw	115
 11817  1081  0086               	movwf	6
 11818  1082  3027               	movlw	39
 11819  1083  0087               	movwf	7
 11820  1084  3000               	movlw	0
 11821  1085  1981               	btfsc	1,3
 11822  1086  3001               	movlw	1
 11823  1087  00EF               	movwf	statusView@prevSensorStat^(0+256)
 11824                           
 11825                           ;menu.c: 26:   if (data.status.SENSOR_OK)
 11826  1088  3073               	movlw	115
 11827  1089  0086               	movwf	6
 11828  108A  3027               	movlw	39
 11829  108B  0087               	movwf	7
 11830  108C  1D81               	btfss	1,3
 11831  108D  2890               	goto	l8161
 11832                           
 11833                           ;menu.c: 27:    page = 0;
 11834  108E  01E9               	clrf	statusView@page^(0+256)
 11835  108F  2896               	goto	l8163
 11836  1090                     l8161:	
 11837                           
 11838                           ;menu.c: 29:    page = 3;
 11839  1090  3003               	movlw	3
 11840  1091  0141               	movlb	1	; select bank1
 11841  1092  00C7               	movwf	??_statusView^(0+128)
 11842  1093  0847               	movf	??_statusView^(0+128),w
 11843  1094  0142               	movlb	2	; select bank2
 11844  1095  00E9               	movwf	statusView@page^(0+256)
 11845  1096                     l8163:	
 11846                           
 11847                           ;menu.c: 30:   g_screenRefresh = 1;
 11848  1096  0141               	movlb	1	; select bank1
 11849  1097  01ED               	clrf	_g_screenRefresh^(0+128)
 11850  1098  0AED               	incf	_g_screenRefresh^(0+128),f
 11851  1099                     l8165:	
 11852                           
 11853                           ;menu.c: 33:  returnToPage(page);
 11854  1099  0142               	movlb	2	; select bank2
 11855  109A  0869               	movf	statusView@page^(0+256),w
 11856  109B  31B3  23D3  3190   	fcall	_returnToPage
 11857                           
 11858                           ;menu.c: 34:  if (g_screenRefresh) {
 11859  109E  0141               	movlb	1	; select bank1
 11860  109F  086D               	movf	_g_screenRefresh^(0+128),w
 11861  10A0  1903               	btfsc	3,2
 11862  10A1  28B7               	goto	l8171
 11863                           
 11864                           ;menu.c: 35:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   PowerVers
      +                          ion:");
 11865  10A2  0140               	movlb	0	; select bank0
 11866  10A3  01AD               	clrf	OLED_print_xy@row
 11867  10A4  3012               	movlw	low (STR_1| (0+32768))
 11868  10A5  00AE               	movwf	OLED_print_xy@s
 11869  10A6  30B8               	movlw	high (STR_1| (0+32768))
 11870  10A7  00AF               	movwf	OLED_print_xy@s+1
 11871  10A8  3000               	movlw	0
 11872  10A9  31B3  23A1  3190   	fcall	_OLED_print_xy
 11873                           
 11874                           ;menu.c: 36:   OLED_print_xy(4 * 12, 1, "Sensor:");
 11875  10AC  0140               	movlb	0	; select bank0
 11876  10AD  01AD               	clrf	OLED_print_xy@row
 11877  10AE  0AAD               	incf	OLED_print_xy@row,f
 11878  10AF  30E8               	movlw	low (STR_2| (0+32768))
 11879  10B0  00AE               	movwf	OLED_print_xy@s
 11880  10B1  30BA               	movlw	high (STR_2| (0+32768))
 11881  10B2  00AF               	movwf	OLED_print_xy@s+1
 11882  10B3  3030               	movlw	48
 11883  10B4  31B3  23A1  3190   	fcall	_OLED_print_xy
 11884  10B7                     l8171:	
 11885                           
 11886                           ;menu.c: 38:  if (data.status.AUX_SENSOR_OK) {
 11887  10B7  3073               	movlw	115
 11888  10B8  0086               	movwf	6
 11889  10B9  3027               	movlw	39
 11890  10BA  0087               	movwf	7
 11891  10BB  1E01               	btfss	1,4
 11892  10BC  2915               	goto	l8183
 11893                           
 11894                           ;menu.c: 39:   ftoa(str, data.tempC, 5, 1);
 11895  10BD  304A               	movlw	74
 11896  10BE  0086               	movwf	6
 11897  10BF  3027               	movlw	39
 11898  10C0  0087               	movwf	7
 11899  10C1  3F40               	moviw [0]fsr1
 11900  10C2  0141               	movlb	1	; select bank1
 11901  10C3  00B9               	movwf	ftoa@fValue^(0+128)
 11902  10C4  3F41               	moviw [1]fsr1
 11903  10C5  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11904  10C6  3F42               	moviw [2]fsr1
 11905  10C7  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11906  10C8  3F43               	moviw [3]fsr1
 11907  10C9  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11908  10CA  3005               	movlw	5
 11909  10CB  00C7               	movwf	??_statusView^(0+128)
 11910  10CC  0847               	movf	??_statusView^(0+128),w
 11911  10CD  00BD               	movwf	ftoa@width^(0+128)
 11912  10CE  01BE               	clrf	ftoa@prec^(0+128)
 11913  10CF  0ABE               	incf	ftoa@prec^(0+128),f
 11914  10D0  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11915  10D1  31A2  223B  3190   	fcall	_ftoa
 11916                           
 11917                           ;menu.c: 40:   OLED_print_xy(0, 1, str);
 11918  10D4  0140               	movlb	0	; select bank0
 11919  10D5  01AD               	clrf	OLED_print_xy@row
 11920  10D6  0AAD               	incf	OLED_print_xy@row,f
 11921  10D7  30E6               	movlw	low _str
 11922  10D8  00AE               	movwf	OLED_print_xy@s
 11923  10D9  3001               	movlw	high _str
 11924  10DA  00AF               	movwf	OLED_print_xy@s+1
 11925  10DB  3000               	movlw	0
 11926  10DC  31B3  23A1  3190   	fcall	_OLED_print_xy
 11927                           
 11928                           ;menu.c: 41:   OLED_print_xy(5, 1, "\001 \002");
 11929  10DF  0140               	movlb	0	; select bank0
 11930  10E0  01AD               	clrf	OLED_print_xy@row
 11931  10E1  0AAD               	incf	OLED_print_xy@row,f
 11932  10E2  301D               	movlw	low (STR_3| (0+32768))
 11933  10E3  00AE               	movwf	OLED_print_xy@s
 11934  10E4  30BB               	movlw	high (STR_3| (0+32768))
 11935  10E5  00AF               	movwf	OLED_print_xy@s+1
 11936  10E6  3005               	movlw	5
 11937  10E7  31B3  23A1  3190   	fcall	_OLED_print_xy
 11938                           
 11939                           ;menu.c: 42:   ftoa(str, data.tempAux, 3, 0);
 11940  10EA  304A               	movlw	74
 11941  10EB  0086               	movwf	6
 11942  10EC  3027               	movlw	39
 11943  10ED  0087               	movwf	7
 11944  10EE  314D               	addfsr 1,13
 11945  10EF  3F40               	moviw [0]fsr1
 11946  10F0  0141               	movlb	1	; select bank1
 11947  10F1  00B9               	movwf	ftoa@fValue^(0+128)
 11948  10F2  3F41               	moviw [1]fsr1
 11949  10F3  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11950  10F4  3F42               	moviw [2]fsr1
 11951  10F5  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11952  10F6  3F43               	moviw [3]fsr1
 11953  10F7  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11954  10F8  3003               	movlw	3
 11955  10F9  00C7               	movwf	??_statusView^(0+128)
 11956  10FA  0847               	movf	??_statusView^(0+128),w
 11957  10FB  00BD               	movwf	ftoa@width^(0+128)
 11958  10FC  01BE               	clrf	ftoa@prec^(0+128)
 11959  10FD  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11960  10FE  31A2  223B  3190   	fcall	_ftoa
 11961                           
 11962                           ;menu.c: 43:   OLED_print_xy(8, 1, str);
 11963  1101  0140               	movlb	0	; select bank0
 11964  1102  01AD               	clrf	OLED_print_xy@row
 11965  1103  0AAD               	incf	OLED_print_xy@row,f
 11966  1104  30E6               	movlw	low _str
 11967  1105  00AE               	movwf	OLED_print_xy@s
 11968  1106  3001               	movlw	high _str
 11969  1107  00AF               	movwf	OLED_print_xy@s+1
 11970  1108  3008               	movlw	8
 11971  1109  31B3  23A1  3190   	fcall	_OLED_print_xy
 11972                           
 11973                           ;menu.c: 44:   OLED_print_xy(11, 1, "\001");
 11974  110C  0140               	movlb	0	; select bank0
 11975  110D  01AD               	clrf	OLED_print_xy@row
 11976  110E  0AAD               	incf	OLED_print_xy@row,f
 11977  110F  303B               	movlw	low (STR_4| (0+32768))
 11978  1110  00AE               	movwf	OLED_print_xy@s
 11979  1111  30BB               	movlw	high (STR_4| (0+32768))
 11980  1112  00AF               	movwf	OLED_print_xy@s+1
 11981  1113  300B               	movlw	11
 11982  1114  293F               	goto	L5
 11983  1115                     l8183:	
 11984                           ;menu.c: 45:  } else {
 11985                           
 11986                           
 11987                           ;menu.c: 46:   ftoa(str, data.tempC, 5, 1);
 11988  1115  304A               	movlw	74
 11989  1116  0086               	movwf	6
 11990  1117  3027               	movlw	39
 11991  1118  0087               	movwf	7
 11992  1119  3F40               	moviw [0]fsr1
 11993  111A  0141               	movlb	1	; select bank1
 11994  111B  00B9               	movwf	ftoa@fValue^(0+128)
 11995  111C  3F41               	moviw [1]fsr1
 11996  111D  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11997  111E  3F42               	moviw [2]fsr1
 11998  111F  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11999  1120  3F43               	moviw [3]fsr1
 12000  1121  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12001  1122  3005               	movlw	5
 12002  1123  00C7               	movwf	??_statusView^(0+128)
 12003  1124  0847               	movf	??_statusView^(0+128),w
 12004  1125  00BD               	movwf	ftoa@width^(0+128)
 12005  1126  01BE               	clrf	ftoa@prec^(0+128)
 12006  1127  0ABE               	incf	ftoa@prec^(0+128),f
 12007  1128  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 12008  1129  31A2  223B  3190   	fcall	_ftoa
 12009                           
 12010                           ;menu.c: 47:   OLED_print_xy(0, 1, str);
 12011  112C  0140               	movlb	0	; select bank0
 12012  112D  01AD               	clrf	OLED_print_xy@row
 12013  112E  0AAD               	incf	OLED_print_xy@row,f
 12014  112F  30E6               	movlw	low _str
 12015  1130  00AE               	movwf	OLED_print_xy@s
 12016  1131  3001               	movlw	high _str
 12017  1132  00AF               	movwf	OLED_print_xy@s+1
 12018  1133  3000               	movlw	0
 12019  1134  31B3  23A1  3190   	fcall	_OLED_print_xy
 12020                           
 12021                           ;menu.c: 48:   OLED_print_xy(5, 1, "\001      ");
 12022  1137  0140               	movlb	0	; select bank0
 12023  1138  01AD               	clrf	OLED_print_xy@row
 12024  1139  0AAD               	incf	OLED_print_xy@row,f
 12025  113A  30C8               	movlw	low (STR_5| (0+32768))
 12026  113B  00AE               	movwf	OLED_print_xy@s
 12027  113C  30BA               	movlw	high (STR_5| (0+32768))
 12028  113D  00AF               	movwf	OLED_print_xy@s+1
 12029  113E  3005               	movlw	5
 12030  113F                     L5:	
 12031  113F  31B3  23A1  3190   	fcall	_OLED_print_xy
 12032                           
 12033                           ;menu.c: 50:  ftoa(str, data.relHum, 5, 1);
 12034                           
 12035                           ;menu.c: 49:  }
 12036  1142  304A               	movlw	74
 12037  1143  0086               	movwf	6
 12038  1144  3027               	movlw	39
 12039  1145  0087               	movwf	7
 12040  1146  3144               	addfsr 1,4
 12041  1147  3F40               	moviw [0]fsr1
 12042  1148  0141               	movlb	1	; select bank1
 12043  1149  00B9               	movwf	ftoa@fValue^(0+128)
 12044  114A  3F41               	moviw [1]fsr1
 12045  114B  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12046  114C  3F42               	moviw [2]fsr1
 12047  114D  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12048  114E  3F43               	moviw [3]fsr1
 12049  114F  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12050  1150  3005               	movlw	5
 12051  1151  00C7               	movwf	??_statusView^(0+128)
 12052  1152  0847               	movf	??_statusView^(0+128),w
 12053  1153  00BD               	movwf	ftoa@width^(0+128)
 12054  1154  01BE               	clrf	ftoa@prec^(0+128)
 12055  1155  0ABE               	incf	ftoa@prec^(0+128),f
 12056  1156  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 12057  1157  31A2  223B  3190   	fcall	_ftoa
 12058                           
 12059                           ;menu.c: 51:  OLED_print_xy(12, 1, str);
 12060  115A  0140               	movlb	0	; select bank0
 12061  115B  01AD               	clrf	OLED_print_xy@row
 12062  115C  0AAD               	incf	OLED_print_xy@row,f
 12063  115D  30E6               	movlw	low _str
 12064  115E  00AE               	movwf	OLED_print_xy@s
 12065  115F  3001               	movlw	high _str
 12066  1160  00AF               	movwf	OLED_print_xy@s+1
 12067  1161  300C               	movlw	12
 12068  1162  31B3  23A1  3190   	fcall	_OLED_print_xy
 12069                           
 12070                           ;menu.c: 52:  OLED_print_xy(12 + 5, 1, "%     ");
 12071  1165  0140               	movlb	0	; select bank0
 12072  1166  01AD               	clrf	OLED_print_xy@row
 12073  1167  0AAD               	incf	OLED_print_xy@row,f
 12074  1168  3005               	movlw	low (STR_6| (0+32768))
 12075  1169  00AE               	movwf	OLED_print_xy@s
 12076  116A  30BB               	movlw	high (STR_6| (0+32768))
 12077  116B  00AF               	movwf	OLED_print_xy@s+1
 12078  116C  3011               	movlw	17
 12079  116D  31B3  23A1  3190   	fcall	_OLED_print_xy
 12080                           
 12081                           ;menu.c: 53:  ftoa(str, data.dewPointC, 5, 1);
 12082  1170  304A               	movlw	74
 12083  1171  0086               	movwf	6
 12084  1172  3027               	movlw	39
 12085  1173  0087               	movwf	7
 12086  1174  3148               	addfsr 1,8
 12087  1175  3F40               	moviw [0]fsr1
 12088  1176  0141               	movlb	1	; select bank1
 12089  1177  00B9               	movwf	ftoa@fValue^(0+128)
 12090  1178  3F41               	moviw [1]fsr1
 12091  1179  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12092  117A  3F42               	moviw [2]fsr1
 12093  117B  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12094  117C  3F43               	moviw [3]fsr1
 12095  117D  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12096  117E  3005               	movlw	5
 12097  117F  00C7               	movwf	??_statusView^(0+128)
 12098  1180  0847               	movf	??_statusView^(0+128),w
 12099  1181  00BD               	movwf	ftoa@width^(0+128)
 12100  1182  01BE               	clrf	ftoa@prec^(0+128)
 12101  1183  0ABE               	incf	ftoa@prec^(0+128),f
 12102  1184  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 12103  1185  31A2  223B  3190   	fcall	_ftoa
 12104                           
 12105                           ;menu.c: 54:  OLED_print_xy(2 * 12, 1, str);
 12106  1188  0140               	movlb	0	; select bank0
 12107  1189  01AD               	clrf	OLED_print_xy@row
 12108  118A  0AAD               	incf	OLED_print_xy@row,f
 12109  118B  30E6               	movlw	low _str
 12110  118C  00AE               	movwf	OLED_print_xy@s
 12111  118D  3001               	movlw	high _str
 12112  118E  00AF               	movwf	OLED_print_xy@s+1
 12113  118F  3018               	movlw	24
 12114  1190  31B3  23A1  3190   	fcall	_OLED_print_xy
 12115                           
 12116                           ;menu.c: 55:  OLED_print_xy(2 * 12 + 5, 1, "\001      ");
 12117  1193  0140               	movlb	0	; select bank0
 12118  1194  01AD               	clrf	OLED_print_xy@row
 12119  1195  0AAD               	incf	OLED_print_xy@row,f
 12120  1196  30C8               	movlw	low (STR_5| (0+32768))
 12121  1197  00AE               	movwf	OLED_print_xy@s
 12122  1198  30BA               	movlw	high (STR_5| (0+32768))
 12123  1199  00AF               	movwf	OLED_print_xy@s+1
 12124  119A  301D               	movlw	29
 12125  119B  31B3  23A1  3190   	fcall	_OLED_print_xy
 12126                           
 12127                           ;menu.c: 56:  ftoa(str, data.voltage, 4, 1);
 12128  119E  304A               	movlw	74
 12129  119F  0086               	movwf	6
 12130  11A0  3027               	movlw	39
 12131  11A1  0087               	movwf	7
 12132  11A2  3151               	addfsr 1,17
 12133  11A3  3F40               	moviw [0]fsr1
 12134  11A4  0141               	movlb	1	; select bank1
 12135  11A5  00B9               	movwf	ftoa@fValue^(0+128)
 12136  11A6  3F41               	moviw [1]fsr1
 12137  11A7  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12138  11A8  3F42               	moviw [2]fsr1
 12139  11A9  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12140  11AA  3F43               	moviw [3]fsr1
 12141  11AB  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12142  11AC  3004               	movlw	4
 12143  11AD  00C7               	movwf	??_statusView^(0+128)
 12144  11AE  0847               	movf	??_statusView^(0+128),w
 12145  11AF  00BD               	movwf	ftoa@width^(0+128)
 12146  11B0  01BE               	clrf	ftoa@prec^(0+128)
 12147  11B1  0ABE               	incf	ftoa@prec^(0+128),f
 12148  11B2  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 12149  11B3  31A2  223B  3190   	fcall	_ftoa
 12150                           
 12151                           ;menu.c: 57:  OLED_print_xy(3 * 12, 1, str);
 12152  11B6  0140               	movlb	0	; select bank0
 12153  11B7  01AD               	clrf	OLED_print_xy@row
 12154  11B8  0AAD               	incf	OLED_print_xy@row,f
 12155  11B9  30E6               	movlw	low _str
 12156  11BA  00AE               	movwf	OLED_print_xy@s
 12157  11BB  3001               	movlw	high _str
 12158  11BC  00AF               	movwf	OLED_print_xy@s+1
 12159  11BD  3024               	movlw	36
 12160  11BE  31B3  23A1  3190   	fcall	_OLED_print_xy
 12161                           
 12162                           ;menu.c: 58:  OLED_print_xy(3 * 12 + 4, 1, "V  ");
 12163  11C1  0140               	movlb	0	; select bank0
 12164  11C2  01AD               	clrf	OLED_print_xy@row
 12165  11C3  0AAD               	incf	OLED_print_xy@row,f
 12166  11C4  3021               	movlw	low (STR_8| (0+32768))
 12167  11C5  00AE               	movwf	OLED_print_xy@s
 12168  11C6  30BB               	movlw	high (STR_8| (0+32768))
 12169  11C7  00AF               	movwf	OLED_print_xy@s+1
 12170  11C8  3028               	movlw	40
 12171  11C9  31B3  23A1  3190   	fcall	_OLED_print_xy
 12172                           
 12173                           ;menu.c: 59:  ftoa(str, data.power, 4, 1);
 12174  11CC  304A               	movlw	74
 12175  11CD  0086               	movwf	6
 12176  11CE  3027               	movlw	39
 12177  11CF  0087               	movwf	7
 12178  11D0  3159               	addfsr 1,25
 12179  11D1  3F40               	moviw [0]fsr1
 12180  11D2  0141               	movlb	1	; select bank1
 12181  11D3  00B9               	movwf	ftoa@fValue^(0+128)
 12182  11D4  3F41               	moviw [1]fsr1
 12183  11D5  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12184  11D6  3F42               	moviw [2]fsr1
 12185  11D7  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12186  11D8  3F43               	moviw [3]fsr1
 12187  11D9  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12188  11DA  3004               	movlw	4
 12189  11DB  00C7               	movwf	??_statusView^(0+128)
 12190  11DC  0847               	movf	??_statusView^(0+128),w
 12191  11DD  00BD               	movwf	ftoa@width^(0+128)
 12192  11DE  01BE               	clrf	ftoa@prec^(0+128)
 12193  11DF  0ABE               	incf	ftoa@prec^(0+128),f
 12194  11E0  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 12195  11E1  31A2  223B  3190   	fcall	_ftoa
 12196                           
 12197                           ;menu.c: 60:  OLED_print_xy(3 * 12 + 7, 1, str);
 12198  11E4  0140               	movlb	0	; select bank0
 12199  11E5  01AD               	clrf	OLED_print_xy@row
 12200  11E6  0AAD               	incf	OLED_print_xy@row,f
 12201  11E7  30E6               	movlw	low _str
 12202  11E8  00AE               	movwf	OLED_print_xy@s
 12203  11E9  3001               	movlw	high _str
 12204  11EA  00AF               	movwf	OLED_print_xy@s+1
 12205  11EB  302B               	movlw	43
 12206  11EC  31B3  23A1  3190   	fcall	_OLED_print_xy
 12207                           
 12208                           ;menu.c: 61:  OLED_print_xy(3 * 12 + 11, 1, "W");
 12209  11EF  0140               	movlb	0	; select bank0
 12210  11F0  01AD               	clrf	OLED_print_xy@row
 12211  11F1  0AAD               	incf	OLED_print_xy@row,f
 12212  11F2  3081               	movlw	low ((STR_79+11)| (0+32768))
 12213  11F3  00AE               	movwf	OLED_print_xy@s
 12214  11F4  30B9               	movlw	high ((STR_79+11)| (0+32768))
 12215  11F5  00AF               	movwf	OLED_print_xy@s+1
 12216  11F6  302F               	movlw	47
 12217  11F7  31B3  23A1  3190   	fcall	_OLED_print_xy
 12218                           
 12219                           ;menu.c: 62:  itoa(str, 1, 3);
 12220  11FA  30E6               	movlw	low _str
 12221  11FB  0140               	movlb	0	; select bank0
 12222  11FC  00A9               	movwf	itoa@str
 12223  11FD  3001               	movlw	high _str
 12224  11FE  00AA               	movwf	itoa@str+1
 12225  11FF  01AB               	clrf	itoa@value
 12226  1200  0AAB               	incf	itoa@value,f
 12227  1201  3003               	movlw	3
 12228  1202  0141               	movlb	1	; select bank1
 12229  1203  00C7               	movwf	??_statusView^(0+128)
 12230  1204  0847               	movf	??_statusView^(0+128),w
 12231  1205  0140               	movlb	0	; select bank0
 12232  1206  00AC               	movwf	itoa@width
 12233  1207  31B7  273E  3190   	fcall	_itoa
 12234                           
 12235                           ;menu.c: 63:  OLED_print_xy(4 * 12 + 8, 0, str);
 12236  120A  0140               	movlb	0	; select bank0
 12237  120B  01AD               	clrf	OLED_print_xy@row
 12238  120C  30E6               	movlw	low _str
 12239  120D  00AE               	movwf	OLED_print_xy@s
 12240  120E  3001               	movlw	high _str
 12241  120F  00AF               	movwf	OLED_print_xy@s+1
 12242  1210  3038               	movlw	56
 12243  1211  31B3  23A1  3190   	fcall	_OLED_print_xy
 12244                           
 12245                           ;menu.c: 65:  if (data.status.SENSOR_OK) {
 12246  1214  3073               	movlw	115
 12247  1215  0086               	movwf	6
 12248  1216  3027               	movlw	39
 12249  1217  0087               	movwf	7
 12250  1218  1D81               	btfss	1,3
 12251  1219  2A4D               	goto	l8215
 12252                           
 12253                           ;menu.c: 66:   itoa(str, data.sensorVersion, 3);
 12254  121A  30E6               	movlw	low _str
 12255  121B  0140               	movlb	0	; select bank0
 12256  121C  00A9               	movwf	itoa@str
 12257  121D  3001               	movlw	high _str
 12258  121E  00AA               	movwf	itoa@str+1
 12259  121F  304A               	movlw	74
 12260  1220  0086               	movwf	6
 12261  1221  3027               	movlw	39
 12262  1222  0087               	movwf	7
 12263  1223  314C               	addfsr 1,12
 12264  1224  0801               	movf	1,w
 12265  1225  0141               	movlb	1	; select bank1
 12266  1226  00C7               	movwf	??_statusView^(0+128)
 12267  1227  0847               	movf	??_statusView^(0+128),w
 12268  1228  0140               	movlb	0	; select bank0
 12269  1229  00AB               	movwf	itoa@value
 12270  122A  3003               	movlw	3
 12271  122B  0141               	movlb	1	; select bank1
 12272  122C  00C8               	movwf	(??_statusView+1)^(0+128)
 12273  122D  0848               	movf	(??_statusView+1)^(0+128),w
 12274  122E  0140               	movlb	0	; select bank0
 12275  122F  00AC               	movwf	itoa@width
 12276  1230  31B7  273E  3190   	fcall	_itoa
 12277                           
 12278                           ;menu.c: 67:   OLED_print_xy(4 * 12 + 8, 1, str);
 12279  1233  0140               	movlb	0	; select bank0
 12280  1234  01AD               	clrf	OLED_print_xy@row
 12281  1235  0AAD               	incf	OLED_print_xy@row,f
 12282  1236  30E6               	movlw	low _str
 12283  1237  00AE               	movwf	OLED_print_xy@s
 12284  1238  3001               	movlw	high _str
 12285  1239  00AF               	movwf	OLED_print_xy@s+1
 12286  123A  3038               	movlw	56
 12287  123B  31B3  23A1  3190   	fcall	_OLED_print_xy
 12288                           
 12289                           ;menu.c: 68:   page = paging(page, 5);
 12290  123E  3005               	movlw	5
 12291  123F  0141               	movlb	1	; select bank1
 12292  1240  00C7               	movwf	??_statusView^(0+128)
 12293  1241  0847               	movf	??_statusView^(0+128),w
 12294  1242  0140               	movlb	0	; select bank0
 12295  1243  00A7               	movwf	paging@lastPage
 12296  1244  0142               	movlb	2	; select bank2
 12297  1245  0869               	movf	statusView@page^(0+256),w
 12298  1246  3187  278D         	fcall	_paging
 12299  1248  0141               	movlb	1	; select bank1
 12300  1249  00C8               	movwf	(??_statusView+1)^(0+128)
 12301  124A  0848               	movf	(??_statusView+1)^(0+128),w
 12302  124B  0142               	movlb	2	; select bank2
 12303  124C  00E9               	movwf	statusView@page^(0+256)
 12304  124D                     l8215:	
 12305                           
 12306                           ;menu.c: 70:  return page;
 12307  124D  0142               	movlb	2	; select bank2
 12308  124E  0869               	movf	statusView@page^(0+256),w
 12309  124F  0008               	return
 12310  1250                     __end_of_statusView:	
 12311                           
 12312                           	psect	text16
 12313  2B02                     __ptext16:	
 12314 ;; *************** function _storeNVM *****************
 12315 ;; Defined at:
 12316 ;;		line 468 in file "system.c"
 12317 ;; Parameters:    Size  Location     Type
 12318 ;;		None
 12319 ;; Auto vars:     Size  Location     Type
 12320 ;;  buf            64   15[BANK0 ] unsigned short [32]
 12321 ;;  nvm            32    0[BANK1 ] struct .
 12322 ;;  n               1   79[BANK0 ] unsigned char 
 12323 ;; Return value:  Size  Location     Type
 12324 ;;                  1    wreg      unsigned char 
 12325 ;; Registers used:
 12326 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12327 ;; Tracked objects:
 12328 ;;		On entry : 0/0
 12329 ;;		On exit  : 0/0
 12330 ;;		Unchanged: 0/0
 12331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12333 ;;      Locals:         0      65      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12334 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12335 ;;      Totals:         0      67      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12336 ;;Total ram usage:       99 bytes
 12337 ;; Hardware stack levels used:    1
 12338 ;; Hardware stack levels required when called:    5
 12339 ;; This function calls:
 12340 ;;		_FLASH_EraseBlock
 12341 ;;		_FLASH_WriteBlock
 12342 ;; This function is called by:
 12343 ;;		_setLensDia
 12344 ;;		_setDPOffset
 12345 ;;		_setSkyTemp
 12346 ;;		_setFudgeFactor
 12347 ;; This function uses a non-reentrant model
 12348 ;;
 12349                           
 12350                           
 12351                           ;psect for function _storeNVM
 12352  2B02                     _storeNVM:	
 12353                           
 12354                           ;system.c: 470:  uint8_t n;;system.c: 471:  t_nvmData nvm;;system.c: 472:  uint16_t buf[
      +                          32];;system.c: 474:  nvm.lensDia[0] = data.heater[0].lensDia;
 12355                           
 12356                           ;incstack = 0
 12357                           ; Regs used in _storeNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12358  2B02  3089               	movlw	137
 12359  2B03  0086               	movwf	6
 12360  2B04  3027               	movlw	39
 12361  2B05  0087               	movwf	7
 12362  2B06  3F40               	moviw [0]fsr1
 12363  2B07  0141               	movlb	1	; select bank1
 12364  2B08  00A0               	movwf	storeNVM@nvm^(0+128)
 12365  2B09  3F41               	moviw [1]fsr1
 12366  2B0A  00A1               	movwf	(storeNVM@nvm+1)^(0+128)
 12367  2B0B  3F42               	moviw [2]fsr1
 12368  2B0C  00A2               	movwf	(storeNVM@nvm+2)^(0+128)
 12369  2B0D  3F43               	moviw [3]fsr1
 12370  2B0E  00A3               	movwf	(storeNVM@nvm+3)^(0+128)
 12371                           
 12372                           ;system.c: 475:  nvm.lensDia[1] = data.heater[1].lensDia;
 12373  2B0F  30A8               	movlw	168
 12374  2B10  0086               	movwf	6
 12375  2B11  3027               	movlw	39
 12376  2B12  0087               	movwf	7
 12377  2B13  3F40               	moviw [0]fsr1
 12378  2B14  00A4               	movwf	(storeNVM@nvm^(0+128)+4)
 12379  2B15  3F41               	moviw [1]fsr1
 12380  2B16  00A5               	movwf	((storeNVM@nvm+1)^(0+128)+4)
 12381  2B17  3F42               	moviw [2]fsr1
 12382  2B18  00A6               	movwf	((storeNVM@nvm+2)^(0+128)+4)
 12383  2B19  3F43               	moviw [3]fsr1
 12384  2B1A  00A7               	movwf	((storeNVM@nvm+3)^(0+128)+4)
 12385                           
 12386                           ;system.c: 476:  nvm.lensDia[2] = data.heater[2].lensDia;
 12387  2B1B  30C7               	movlw	199
 12388  2B1C  0086               	movwf	6
 12389  2B1D  3027               	movlw	39
 12390  2B1E  0087               	movwf	7
 12391  2B1F  3F40               	moviw [0]fsr1
 12392  2B20  00A8               	movwf	(storeNVM@nvm^(0+128)+8)
 12393  2B21  3F41               	moviw [1]fsr1
 12394  2B22  00A9               	movwf	((storeNVM@nvm+1)^(0+128)+8)
 12395  2B23  3F42               	moviw [2]fsr1
 12396  2B24  00AA               	movwf	((storeNVM@nvm+2)^(0+128)+8)
 12397  2B25  3F43               	moviw [3]fsr1
 12398  2B26  00AB               	movwf	((storeNVM@nvm+3)^(0+128)+8)
 12399                           
 12400                           ;system.c: 477:  nvm.lensDia[3] = data.heater[3].lensDia;
 12401  2B27  30E6               	movlw	230
 12402  2B28  0086               	movwf	6
 12403  2B29  3027               	movlw	39
 12404  2B2A  0087               	movwf	7
 12405  2B2B  3F40               	moviw [0]fsr1
 12406  2B2C  00AC               	movwf	(storeNVM@nvm^(0+128)+12)
 12407  2B2D  3F41               	moviw [1]fsr1
 12408  2B2E  00AD               	movwf	((storeNVM@nvm+1)^(0+128)+12)
 12409  2B2F  3F42               	moviw [2]fsr1
 12410  2B30  00AE               	movwf	((storeNVM@nvm+2)^(0+128)+12)
 12411  2B31  3F43               	moviw [3]fsr1
 12412  2B32  00AF               	movwf	((storeNVM@nvm+3)^(0+128)+12)
 12413                           
 12414                           ;system.c: 478:  nvm.dpOffset = data.dpOffset;
 12415  2B33  304A               	movlw	74
 12416  2B34  0086               	movwf	6
 12417  2B35  3027               	movlw	39
 12418  2B36  0087               	movwf	7
 12419  2B37  315D               	addfsr 1,29
 12420  2B38  3F40               	moviw [0]fsr1
 12421  2B39  00B0               	movwf	(storeNVM@nvm^(0+128)+16)
 12422  2B3A  3F41               	moviw [1]fsr1
 12423  2B3B  00B1               	movwf	((storeNVM@nvm+1)^(0+128)+16)
 12424  2B3C  3F42               	moviw [2]fsr1
 12425  2B3D  00B2               	movwf	((storeNVM@nvm+2)^(0+128)+16)
 12426  2B3E  3F43               	moviw [3]fsr1
 12427  2B3F  00B3               	movwf	((storeNVM@nvm+3)^(0+128)+16)
 12428                           
 12429                           ;system.c: 479:  nvm.skyTemp = data.skyTemp;
 12430  2B40  306B               	movlw	107
 12431  2B41  0086               	movwf	6
 12432  2B42  3027               	movlw	39
 12433  2B43  0087               	movwf	7
 12434  2B44  3F40               	moviw [0]fsr1
 12435  2B45  00B4               	movwf	(storeNVM@nvm^(0+128)+20)
 12436  2B46  3F41               	moviw [1]fsr1
 12437  2B47  00B5               	movwf	((storeNVM@nvm+1)^(0+128)+20)
 12438  2B48  3F42               	moviw [2]fsr1
 12439  2B49  00B6               	movwf	((storeNVM@nvm+2)^(0+128)+20)
 12440  2B4A  3F43               	moviw [3]fsr1
 12441  2B4B  00B7               	movwf	((storeNVM@nvm+3)^(0+128)+20)
 12442                           
 12443                           ;system.c: 480:  nvm.fudgeFactor = data.fudgeFactor;
 12444  2B4C  306F               	movlw	111
 12445  2B4D  0086               	movwf	6
 12446  2B4E  3027               	movlw	39
 12447  2B4F  0087               	movwf	7
 12448  2B50  3F40               	moviw [0]fsr1
 12449  2B51  00B8               	movwf	(storeNVM@nvm^(0+128)+24)
 12450  2B52  3F41               	moviw [1]fsr1
 12451  2B53  00B9               	movwf	((storeNVM@nvm+1)^(0+128)+24)
 12452  2B54  3F42               	moviw [2]fsr1
 12453  2B55  00BA               	movwf	((storeNVM@nvm+2)^(0+128)+24)
 12454  2B56  3F43               	moviw [3]fsr1
 12455  2B57  00BB               	movwf	((storeNVM@nvm+3)^(0+128)+24)
 12456                           
 12457                           ;system.c: 482:  for(n = 0; n < 32; n++) {
 12458  2B58  0140               	movlb	0	; select bank0
 12459  2B59  01EF               	clrf	storeNVM@n
 12460  2B5A                     l8055:	
 12461                           
 12462                           ;system.c: 483:   buf[n] = (uint16_t)nvm.raw[n];
 12463  2B5A  086F               	movf	storeNVM@n,w
 12464  2B5B  3EA0               	addlw	(low (storeNVM@nvm| 0))& (0+255)
 12465  2B5C  0086               	movwf	6
 12466  2B5D  0187               	clrf	7
 12467  2B5E  0801               	movf	1,w
 12468  2B5F  00AD               	movwf	??_storeNVM
 12469  2B60  01AE               	clrf	??_storeNVM+1
 12470  2B61  356F               	lslf	storeNVM@n,w
 12471  2B62  3E2F               	addlw	(low (storeNVM@buf| 0))& (0+255)
 12472  2B63  0086               	movwf	6
 12473  2B64  0187               	clrf	7
 12474  2B65  082D               	movf	??_storeNVM,w
 12475  2B66  3FC0               	movwi [0]fsr1
 12476  2B67  082E               	movf	??_storeNVM+1,w
 12477  2B68  3FC1               	movwi [1]fsr1
 12478                           
 12479                           ;system.c: 484:  }
 12480  2B69  3001               	movlw	1
 12481  2B6A  00AD               	movwf	??_storeNVM
 12482  2B6B  082D               	movf	??_storeNVM,w
 12483  2B6C  07EF               	addwf	storeNVM@n,f
 12484  2B6D  3020               	movlw	32
 12485  2B6E  026F               	subwf	storeNVM@n,w
 12486  2B6F  1C03               	skipc
 12487  2B70  2B5A               	goto	l8055
 12488                           
 12489                           ;system.c: 486:  FLASH_EraseBlock(0x3f80);
 12490  2B71  3080               	movlw	128
 12491  2B72  00A0               	movwf	FLASH_EraseBlock@startAddr
 12492  2B73  303F               	movlw	63
 12493  2B74  00A1               	movwf	FLASH_EraseBlock@startAddr+1
 12494  2B75  31B2  2237  31AB   	fcall	_FLASH_EraseBlock
 12495                           
 12496                           ;system.c: 487:  FLASH_WriteBlock(0x3f80, buf);
 12497  2B78  3080               	movlw	128
 12498  2B79  0140               	movlb	0	; select bank0
 12499  2B7A  00A3               	movwf	FLASH_WriteBlock@writeAddr
 12500  2B7B  303F               	movlw	63
 12501  2B7C  00A4               	movwf	FLASH_WriteBlock@writeAddr+1
 12502  2B7D  302F               	movlw	(low (storeNVM@buf| 0))& (0+255)
 12503  2B7E  00AD               	movwf	??_storeNVM
 12504  2B7F  082D               	movf	??_storeNVM,w
 12505  2B80  00A5               	movwf	FLASH_WriteBlock@flashWordArray
 12506  2B81  31B7  279B         	fcall	_FLASH_WriteBlock
 12507  2B83  0008               	return
 12508  2B84                     __end_of_storeNVM:	
 12509                           
 12510                           	psect	text17
 12511  379B                     __ptext17:	
 12512 ;; *************** function _FLASH_WriteBlock *****************
 12513 ;; Defined at:
 12514 ;;		line 43 in file "memory.c"
 12515 ;; Parameters:    Size  Location     Type
 12516 ;;  writeAddr       2    3[BANK0 ] unsigned short 
 12517 ;;  flashWordArr    1    5[BANK0 ] PTR unsigned short 
 12518 ;;		 -> storeNVM@buf(64), 
 12519 ;; Auto vars:     Size  Location     Type
 12520 ;;  blockStartAd    2    9[BANK0 ] unsigned short 
 12521 ;;  i               1   12[BANK0 ] unsigned char 
 12522 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
 12523 ;; Return value:  Size  Location     Type
 12524 ;;                  1    wreg      char 
 12525 ;; Registers used:
 12526 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12527 ;; Tracked objects:
 12528 ;;		On entry : 0/0
 12529 ;;		On exit  : 0/0
 12530 ;;		Unchanged: 0/0
 12531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12532 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12533 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12534 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12535 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12536 ;;Total ram usage:       10 bytes
 12537 ;; Hardware stack levels used:    1
 12538 ;; Hardware stack levels required when called:    4
 12539 ;; This function calls:
 12540 ;;		_FLASH_EraseBlock
 12541 ;; This function is called by:
 12542 ;;		_storeNVM
 12543 ;;		_FLASH_WriteWord
 12544 ;; This function uses a non-reentrant model
 12545 ;;
 12546                           
 12547                           
 12548                           ;psect for function _FLASH_WriteBlock
 12549  379B                     _FLASH_WriteBlock:	
 12550                           
 12551                           ;memory.c: 43: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t *flashWordArray);mem
      +                          ory.c: 44: {;memory.c: 45:  uint16_t blockStartAddr = (uint16_t) (writeAddr & ((0x4000 -
      +                           1) ^ (32 - 1)));
 12552                           
 12553                           ;incstack = 0
 12554                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12555  379B  30E0               	movlw	224
 12556  379C  0140               	movlb	0	; select bank0
 12557  379D  0523               	andwf	FLASH_WriteBlock@writeAddr,w
 12558  379E  00A9               	movwf	FLASH_WriteBlock@blockStartAddr
 12559  379F  303F               	movlw	63
 12560  37A0  0524               	andwf	FLASH_WriteBlock@writeAddr+1,w
 12561  37A1  00AA               	movwf	FLASH_WriteBlock@blockStartAddr+1
 12562                           
 12563                           ;memory.c: 46:  uint8_t GIEBitValue = INTCONbits.GIE;
 12564  37A2  3000               	movlw	0
 12565  37A3  1B8B               	btfsc	11,7	;volatile
 12566  37A4  3001               	movlw	1
 12567  37A5  00AB               	movwf	FLASH_WriteBlock@GIEBitValue
 12568                           
 12569                           ;memory.c: 47:  uint8_t i;;memory.c: 51:  if (writeAddr != blockStartAddr) {
 12570  37A6  082A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 12571  37A7  0624               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 12572  37A8  1D03               	skipz
 12573  37A9  2FAC               	goto	u7975
 12574  37AA  0829               	movf	FLASH_WriteBlock@blockStartAddr,w
 12575  37AB  0623               	xorwf	FLASH_WriteBlock@writeAddr,w
 12576  37AC                     u7975:	
 12577  37AC  1D03               	btfss	3,2
 12578  37AD  0008               	return
 12579                           
 12580                           ;memory.c: 55:  INTCONbits.GIE = 0;
 12581                           
 12582                           ;memory.c: 53:  }
 12583  37AE  138B               	bcf	11,7	;volatile
 12584                           
 12585                           ;memory.c: 58:  FLASH_EraseBlock(writeAddr);
 12586  37AF  0824               	movf	FLASH_WriteBlock@writeAddr+1,w
 12587  37B0  00A1               	movwf	FLASH_EraseBlock@startAddr+1
 12588  37B1  0823               	movf	FLASH_WriteBlock@writeAddr,w
 12589  37B2  00A0               	movwf	FLASH_EraseBlock@startAddr
 12590  37B3  31B2  2237  31B7   	fcall	_FLASH_EraseBlock
 12591                           
 12592                           ;memory.c: 61:  NVMCON1bits.NVMREGS = 0;
 12593  37B6  0150               	movlb	16	; select bank16
 12594  37B7  131E               	bcf	30,6	;volsfr
 12595                           
 12596                           ;memory.c: 62:  NVMCON1bits.WREN = 1;
 12597  37B8  151E               	bsf	30,2	;volsfr
 12598                           
 12599                           ;memory.c: 63:  NVMCON1bits.LWLO = 1;
 12600  37B9  169E               	bsf	30,5	;volsfr
 12601                           
 12602                           ;memory.c: 65:  for (i = 0; i < 32; i++) {
 12603  37BA  0140               	movlb	0	; select bank0
 12604  37BB  01AC               	clrf	FLASH_WriteBlock@i
 12605  37BC                     l7345:	
 12606                           
 12607                           ;memory.c: 67:   NVMADRL = (writeAddr & 0xFF);
 12608  37BC  0823               	movf	FLASH_WriteBlock@writeAddr,w
 12609  37BD  0150               	movlb	16	; select bank16
 12610  37BE  009A               	movwf	26	;volatile
 12611                           
 12612                           ;memory.c: 69:   NVMADRH = ((writeAddr & 0xFF00) >> 8);
 12613  37BF  0140               	movlb	0	; select bank0
 12614  37C0  0824               	movf	FLASH_WriteBlock@writeAddr+1,w
 12615  37C1  0150               	movlb	16	; select bank16
 12616  37C2  009B               	movwf	27	;volatile
 12617                           
 12618                           ;memory.c: 72:   NVMDATL = flashWordArray[i];
 12619  37C3  0140               	movlb	0	; select bank0
 12620  37C4  352C               	lslf	FLASH_WriteBlock@i,w
 12621  37C5  0725               	addwf	FLASH_WriteBlock@flashWordArray,w
 12622  37C6  00A6               	movwf	??_FLASH_WriteBlock
 12623  37C7  0826               	movf	??_FLASH_WriteBlock,w
 12624  37C8  0086               	movwf	6
 12625  37C9  0187               	clrf	7
 12626  37CA  0801               	movf	1,w
 12627  37CB  0150               	movlb	16	; select bank16
 12628  37CC  009C               	movwf	28	;volatile
 12629                           
 12630                           ;memory.c: 73:   NVMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 12631  37CD  0140               	movlb	0	; select bank0
 12632  37CE  352C               	lslf	FLASH_WriteBlock@i,w
 12633  37CF  0725               	addwf	FLASH_WriteBlock@flashWordArray,w
 12634  37D0  00A6               	movwf	??_FLASH_WriteBlock
 12635  37D1  0826               	movf	??_FLASH_WriteBlock,w
 12636  37D2  0086               	movwf	6
 12637  37D3  0187               	clrf	7
 12638  37D4  3F40               	moviw [0]fsr1
 12639  37D5  00A7               	movwf	??_FLASH_WriteBlock+1
 12640  37D6  3F41               	moviw [1]fsr1
 12641  37D7  00A8               	movwf	??_FLASH_WriteBlock+2
 12642  37D8  0828               	movf	??_FLASH_WriteBlock+2,w
 12643  37D9  0150               	movlb	16	; select bank16
 12644  37DA  009D               	movwf	29	;volatile
 12645                           
 12646                           ;memory.c: 75:   if (i == (32 - 1)) {
 12647  37DB  301F               	movlw	31
 12648  37DC  0140               	movlb	0	; select bank0
 12649  37DD  062C               	xorwf	FLASH_WriteBlock@i,w
 12650  37DE  1D03               	btfss	3,2
 12651  37DF  2FE2               	goto	l7357
 12652                           
 12653                           ;memory.c: 77:    NVMCON1bits.LWLO = 0;
 12654  37E0  0150               	movlb	16	; select bank16
 12655  37E1  129E               	bcf	30,5	;volsfr
 12656  37E2                     l7357:	
 12657                           
 12658                           ;memory.c: 80:   NVMCON2 = 0x55;
 12659  37E2  3055               	movlw	85
 12660  37E3  0150               	movlb	16	; select bank16
 12661  37E4  009F               	movwf	31	;volsfr
 12662                           
 12663                           ;memory.c: 81:   NVMCON2 = 0xAA;
 12664  37E5  30AA               	movlw	170
 12665  37E6  009F               	movwf	31	;volsfr
 12666                           
 12667                           ;memory.c: 82:   NVMCON1bits.WR = 1;
 12668  37E7  149E               	bsf	30,1	;volsfr
 12669                           
 12670                           ;memory.c: 83:   __nop();
 12671  37E8  0000               	nop
 12672                           
 12673                           ;memory.c: 84:   __nop();
 12674  37E9  0000               	nop
 12675                           
 12676                           ;memory.c: 86:   writeAddr++;
 12677  37EA  3001               	movlw	1
 12678  37EB  0140               	movlb	0	; select bank0
 12679  37EC  07A3               	addwf	FLASH_WriteBlock@writeAddr,f
 12680  37ED  3000               	movlw	0
 12681  37EE  3DA4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 12682                           
 12683                           ;memory.c: 87:  }
 12684  37EF  3001               	movlw	1
 12685  37F0  00A6               	movwf	??_FLASH_WriteBlock
 12686  37F1  0826               	movf	??_FLASH_WriteBlock,w
 12687  37F2  07AC               	addwf	FLASH_WriteBlock@i,f
 12688  37F3  3020               	movlw	32
 12689  37F4  022C               	subwf	FLASH_WriteBlock@i,w
 12690  37F5  1C03               	skipc
 12691  37F6  2FBC               	goto	l7345
 12692                           
 12693                           ;memory.c: 89:  NVMCON1bits.WREN = 0;
 12694  37F7  0150               	movlb	16	; select bank16
 12695  37F8  111E               	bcf	30,2	;volsfr
 12696                           
 12697                           ;memory.c: 90:  INTCONbits.GIE = GIEBitValue;
 12698  37F9  0140               	movlb	0	; select bank0
 12699  37FA  0C2B               	rrf	FLASH_WriteBlock@GIEBitValue,w
 12700  37FB  1C03               	skipc
 12701  37FC  138B               	bcf	11,7	;volatile
 12702  37FD  1803               	skipnc
 12703  37FE  178B               	bsf	11,7	;volatile
 12704  37FF  0008               	return
 12705  3800                     __end_of_FLASH_WriteBlock:	
 12706                           
 12707                           	psect	text18
 12708  3237                     __ptext18:	
 12709 ;; *************** function _FLASH_EraseBlock *****************
 12710 ;; Defined at:
 12711 ;;		line 95 in file "memory.c"
 12712 ;; Parameters:    Size  Location     Type
 12713 ;;  startAddr       2    0[BANK0 ] unsigned short 
 12714 ;; Auto vars:     Size  Location     Type
 12715 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 12716 ;; Return value:  Size  Location     Type
 12717 ;;                  1    wreg      void 
 12718 ;; Registers used:
 12719 ;;		wreg, status,2, status,0
 12720 ;; Tracked objects:
 12721 ;;		On entry : 0/0
 12722 ;;		On exit  : 0/0
 12723 ;;		Unchanged: 0/0
 12724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12725 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12728 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12729 ;;Total ram usage:        3 bytes
 12730 ;; Hardware stack levels used:    1
 12731 ;; Hardware stack levels required when called:    3
 12732 ;; This function calls:
 12733 ;;		Nothing
 12734 ;; This function is called by:
 12735 ;;		_storeNVM
 12736 ;;		_FLASH_WriteBlock
 12737 ;; This function uses a non-reentrant model
 12738 ;;
 12739                           
 12740                           
 12741                           ;psect for function _FLASH_EraseBlock
 12742  3237                     _FLASH_EraseBlock:	
 12743                           
 12744                           ;memory.c: 95: void FLASH_EraseBlock(uint16_t startAddr);memory.c: 96: {;memory.c: 97:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
 12745                           
 12746                           ;incstack = 0
 12747                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 12748  3237  3000               	movlw	0
 12749  3238  1B8B               	btfsc	11,7	;volatile
 12750  3239  3001               	movlw	1
 12751  323A  0140               	movlb	0	; select bank0
 12752  323B  00A2               	movwf	FLASH_EraseBlock@GIEBitValue
 12753                           
 12754                           ;memory.c: 100:  INTCONbits.GIE = 0;
 12755  323C  138B               	bcf	11,7	;volatile
 12756                           
 12757                           ;memory.c: 102:  NVMADRL = (startAddr & 0xFF);
 12758  323D  0820               	movf	FLASH_EraseBlock@startAddr,w
 12759  323E  0150               	movlb	16	; select bank16
 12760  323F  009A               	movwf	26	;volatile
 12761                           
 12762                           ;memory.c: 104:  NVMADRH = ((startAddr & 0xFF00) >> 8);
 12763  3240  0140               	movlb	0	; select bank0
 12764  3241  0821               	movf	FLASH_EraseBlock@startAddr+1,w
 12765  3242  0150               	movlb	16	; select bank16
 12766  3243  009B               	movwf	27	;volatile
 12767                           
 12768                           ;memory.c: 107:  NVMCON1bits.NVMREGS = 0;
 12769  3244  131E               	bcf	30,6	;volsfr
 12770                           
 12771                           ;memory.c: 108:  NVMCON1bits.FREE = 1;
 12772  3245  161E               	bsf	30,4	;volsfr
 12773                           
 12774                           ;memory.c: 109:  NVMCON1bits.WREN = 1;
 12775  3246  151E               	bsf	30,2	;volsfr
 12776                           
 12777                           ;memory.c: 112:  NVMCON2 = 0x55;
 12778  3247  3055               	movlw	85
 12779  3248  009F               	movwf	31	;volsfr
 12780                           
 12781                           ;memory.c: 113:  NVMCON2 = 0xAA;
 12782  3249  30AA               	movlw	170
 12783  324A  009F               	movwf	31	;volsfr
 12784                           
 12785                           ;memory.c: 114:  NVMCON1bits.WR = 1;
 12786  324B  149E               	bsf	30,1	;volsfr
 12787                           
 12788                           ;memory.c: 115:  __nop();
 12789  324C  0000               	nop
 12790                           
 12791                           ;memory.c: 116:  __nop();
 12792  324D  0000               	nop
 12793                           
 12794                           ;memory.c: 118:  NVMCON1bits.WREN = 0;
 12795  324E  0150               	movlb	16	; select bank16
 12796  324F  111E               	bcf	30,2	;volsfr
 12797                           
 12798                           ;memory.c: 119:  INTCONbits.GIE = GIEBitValue;
 12799  3250  0140               	movlb	0	; select bank0
 12800  3251  0C22               	rrf	FLASH_EraseBlock@GIEBitValue,w
 12801  3252  1C03               	skipc
 12802  3253  138B               	bcf	11,7	;volatile
 12803  3254  1803               	skipnc
 12804  3255  178B               	bsf	11,7	;volatile
 12805  3256  0008               	return
 12806  3257                     __end_of_FLASH_EraseBlock:	
 12807                           
 12808                           	psect	text19
 12809  2CA5                     __ptext19:	
 12810 ;; *************** function _spinInput *****************
 12811 ;; Defined at:
 12812 ;;		line 100 in file "inputs.c"
 12813 ;; Parameters:    Size  Location     Type
 12814 ;;  input           2   25[BANK1 ] PTR float 
 12815 ;;		 -> data.heater(124), data(166), 
 12816 ;;  min             4   27[BANK1 ] float 
 12817 ;;  max             4   31[BANK1 ] float 
 12818 ;;  step            4   35[BANK1 ] float 
 12819 ;; Auto vars:     Size  Location     Type
 12820 ;;  dir             1   39[BANK1 ] enum E7865
 12821 ;; Return value:  Size  Location     Type
 12822 ;;                  1    wreg      void 
 12823 ;; Registers used:
 12824 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12825 ;; Tracked objects:
 12826 ;;		On entry : 0/0
 12827 ;;		On exit  : 0/0
 12828 ;;		Unchanged: 0/0
 12829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12830 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12831 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12832 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12833 ;;      Totals:         0       1      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12834 ;;Total ram usage:       16 bytes
 12835 ;; Hardware stack levels used:    1
 12836 ;; Hardware stack levels required when called:    5
 12837 ;; This function calls:
 12838 ;;		___fladd
 12839 ;;		___flge
 12840 ;;		___flsub
 12841 ;;		_getRotDir
 12842 ;; This function is called by:
 12843 ;;		_setOutputPower
 12844 ;;		_setLensDia
 12845 ;;		_setDPOffset
 12846 ;;		_setSkyTemp
 12847 ;;		_setFudgeFactor
 12848 ;; This function uses a non-reentrant model
 12849 ;;
 12850                           
 12851                           
 12852                           ;psect for function _spinInput
 12853  2CA5                     _spinInput:	
 12854                           
 12855                           ;inputs.c: 100: void spinInput(float *input, float min, float max, float step);inputs.c:
      +                           101: {;inputs.c: 102:  enum e_direction dir = getRotDir();
 12856                           
 12857                           ;incstack = 0
 12858                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12859  2CA5  31B1  216F  31AC   	fcall	_getRotDir
 12860  2CA8  0140               	movlb	0	; select bank0
 12861  2CA9  00EF               	movwf	??_spinInput
 12862  2CAA  086F               	movf	??_spinInput,w
 12863  2CAB  0141               	movlb	1	; select bank1
 12864  2CAC  00C7               	movwf	spinInput@dir^(0+128)
 12865                           
 12866                           ;inputs.c: 104:  if ((dir == ROT_CCW) && (*input > min))
 12867  2CAD  3002               	movlw	2
 12868  2CAE  0647               	xorwf	spinInput@dir^(0+128),w
 12869  2CAF  1D03               	btfss	3,2
 12870  2CB0  2CEF               	goto	l7897
 12871  2CB1  083E               	movf	(spinInput@min+3)^(0+128),w
 12872  2CB2  00B0               	movwf	(___flge@ff1+3)^(0+128)
 12873  2CB3  083D               	movf	(spinInput@min+2)^(0+128),w
 12874  2CB4  00AF               	movwf	(___flge@ff1+2)^(0+128)
 12875  2CB5  083C               	movf	(spinInput@min+1)^(0+128),w
 12876  2CB6  00AE               	movwf	(___flge@ff1+1)^(0+128)
 12877  2CB7  083B               	movf	spinInput@min^(0+128),w
 12878  2CB8  00AD               	movwf	___flge@ff1^(0+128)
 12879  2CB9  0839               	movf	spinInput@input^(0+128),w
 12880  2CBA  0086               	movwf	6
 12881  2CBB  083A               	movf	(spinInput@input+1)^(0+128),w
 12882  2CBC  0087               	movwf	7
 12883  2CBD  3F40               	moviw [0]fsr1
 12884  2CBE  00B1               	movwf	___flge@ff2^(0+128)
 12885  2CBF  3F41               	moviw [1]fsr1
 12886  2CC0  00B2               	movwf	(___flge@ff2+1)^(0+128)
 12887  2CC1  3F42               	moviw [2]fsr1
 12888  2CC2  00B3               	movwf	(___flge@ff2+2)^(0+128)
 12889  2CC3  3F43               	moviw [3]fsr1
 12890  2CC4  00B4               	movwf	(___flge@ff2+3)^(0+128)
 12891  2CC5  31AA  2206  31AC   	fcall	___flge
 12892  2CC8  1803               	btfsc	3,0
 12893  2CC9  2CEF               	goto	l7897
 12894                           
 12895                           ;inputs.c: 105:   *input -= step;
 12896  2CCA  0141               	movlb	1	; select bank1
 12897  2CCB  0846               	movf	(spinInput@step+3)^(0+128),w
 12898  2CCC  00A3               	movwf	(___flsub@a+3)^(0+128)
 12899  2CCD  0845               	movf	(spinInput@step+2)^(0+128),w
 12900  2CCE  00A2               	movwf	(___flsub@a+2)^(0+128)
 12901  2CCF  0844               	movf	(spinInput@step+1)^(0+128),w
 12902  2CD0  00A1               	movwf	(___flsub@a+1)^(0+128)
 12903  2CD1  0843               	movf	spinInput@step^(0+128),w
 12904  2CD2  00A0               	movwf	___flsub@a^(0+128)
 12905  2CD3  0839               	movf	spinInput@input^(0+128),w
 12906  2CD4  0086               	movwf	6
 12907  2CD5  083A               	movf	(spinInput@input+1)^(0+128),w
 12908  2CD6  0087               	movwf	7
 12909  2CD7  3F40               	moviw [0]fsr1
 12910  2CD8  00A4               	movwf	___flsub@b^(0+128)
 12911  2CD9  3F41               	moviw [1]fsr1
 12912  2CDA  00A5               	movwf	(___flsub@b+1)^(0+128)
 12913  2CDB  3F42               	moviw [2]fsr1
 12914  2CDC  00A6               	movwf	(___flsub@b+2)^(0+128)
 12915  2CDD  3F43               	moviw [3]fsr1
 12916  2CDE  00A7               	movwf	(___flsub@b+3)^(0+128)
 12917  2CDF  31B4  2405         	fcall	___flsub
 12918  2CE1  0141               	movlb	1	; select bank1
 12919  2CE2  0839               	movf	spinInput@input^(0+128),w
 12920  2CE3  0086               	movwf	6
 12921  2CE4  083A               	movf	(spinInput@input+1)^(0+128),w
 12922  2CE5  0087               	movwf	7
 12923  2CE6  0820               	movf	?___flsub^(0+128),w
 12924  2CE7  3FC0               	movwi [0]fsr1
 12925  2CE8  0821               	movf	(?___flsub+1)^(0+128),w
 12926  2CE9  3FC1               	movwi [1]fsr1
 12927  2CEA  0822               	movf	(?___flsub+2)^(0+128),w
 12928  2CEB  3FC2               	movwi [2]fsr1
 12929  2CEC  0823               	movf	(?___flsub+3)^(0+128),w
 12930  2CED  3FC3               	movwi [3]fsr1
 12931  2CEE  0008               	return
 12932  2CEF                     l7897:	
 12933  2CEF  0141               	movlb	1	; select bank1
 12934  2CF0  0347               	decf	spinInput@dir^(0+128),w
 12935  2CF1  1D03               	btfss	3,2
 12936  2CF2  0008               	return
 12937  2CF3  0839               	movf	spinInput@input^(0+128),w
 12938  2CF4  0086               	movwf	6
 12939  2CF5  083A               	movf	(spinInput@input+1)^(0+128),w
 12940  2CF6  0087               	movwf	7
 12941  2CF7  3F40               	moviw [0]fsr1
 12942  2CF8  00AD               	movwf	___flge@ff1^(0+128)
 12943  2CF9  3F41               	moviw [1]fsr1
 12944  2CFA  00AE               	movwf	(___flge@ff1+1)^(0+128)
 12945  2CFB  3F42               	moviw [2]fsr1
 12946  2CFC  00AF               	movwf	(___flge@ff1+2)^(0+128)
 12947  2CFD  3F43               	moviw [3]fsr1
 12948  2CFE  00B0               	movwf	(___flge@ff1+3)^(0+128)
 12949  2CFF  0842               	movf	(spinInput@max+3)^(0+128),w
 12950  2D00  00B4               	movwf	(___flge@ff2+3)^(0+128)
 12951  2D01  0841               	movf	(spinInput@max+2)^(0+128),w
 12952  2D02  00B3               	movwf	(___flge@ff2+2)^(0+128)
 12953  2D03  0840               	movf	(spinInput@max+1)^(0+128),w
 12954  2D04  00B2               	movwf	(___flge@ff2+1)^(0+128)
 12955  2D05  083F               	movf	spinInput@max^(0+128),w
 12956  2D06  00B1               	movwf	___flge@ff2^(0+128)
 12957  2D07  31AA  2206  31AC   	fcall	___flge
 12958  2D0A  1803               	btfsc	3,0
 12959  2D0B  0008               	return
 12960                           
 12961                           ;inputs.c: 107:   *input += step;
 12962  2D0C  0141               	movlb	1	; select bank1
 12963  2D0D  0846               	movf	(spinInput@step+3)^(0+128),w
 12964  2D0E  0140               	movlb	0	; select bank0
 12965  2D0F  00DE               	movwf	___fladd@b+3
 12966  2D10  0141               	movlb	1	; select bank1
 12967  2D11  0845               	movf	(spinInput@step+2)^(0+128),w
 12968  2D12  0140               	movlb	0	; select bank0
 12969  2D13  00DD               	movwf	___fladd@b+2
 12970  2D14  0141               	movlb	1	; select bank1
 12971  2D15  0844               	movf	(spinInput@step+1)^(0+128),w
 12972  2D16  0140               	movlb	0	; select bank0
 12973  2D17  00DC               	movwf	___fladd@b+1
 12974  2D18  0141               	movlb	1	; select bank1
 12975  2D19  0843               	movf	spinInput@step^(0+128),w
 12976  2D1A  0140               	movlb	0	; select bank0
 12977  2D1B  00DB               	movwf	___fladd@b
 12978  2D1C  0141               	movlb	1	; select bank1
 12979  2D1D  0839               	movf	spinInput@input^(0+128),w
 12980  2D1E  0086               	movwf	6
 12981  2D1F  083A               	movf	(spinInput@input+1)^(0+128),w
 12982  2D20  0087               	movwf	7
 12983  2D21  3F40               	moviw [0]fsr1
 12984  2D22  0140               	movlb	0	; select bank0
 12985  2D23  00DF               	movwf	___fladd@a
 12986  2D24  3F41               	moviw [1]fsr1
 12987  2D25  00E0               	movwf	___fladd@a+1
 12988  2D26  3F42               	moviw [2]fsr1
 12989  2D27  00E1               	movwf	___fladd@a+2
 12990  2D28  3F43               	moviw [3]fsr1
 12991  2D29  00E2               	movwf	___fladd@a+3
 12992  2D2A  3192  2250         	fcall	___fladd
 12993  2D2C  0141               	movlb	1	; select bank1
 12994  2D2D  0839               	movf	spinInput@input^(0+128),w
 12995  2D2E  0086               	movwf	6
 12996  2D2F  083A               	movf	(spinInput@input+1)^(0+128),w
 12997  2D30  0087               	movwf	7
 12998  2D31  0140               	movlb	0	; select bank0
 12999  2D32  085B               	movf	?___fladd,w
 13000  2D33  3FC0               	movwi [0]fsr1
 13001  2D34  085C               	movf	?___fladd+1,w
 13002  2D35  3FC1               	movwi [1]fsr1
 13003  2D36  085D               	movf	?___fladd+2,w
 13004  2D37  3FC2               	movwi [2]fsr1
 13005  2D38  085E               	movf	?___fladd+3,w
 13006  2D39  3FC3               	movwi [3]fsr1
 13007  2D3A  0008               	return
 13008  2D3B                     __end_of_spinInput:	
 13009                           
 13010                           	psect	text20
 13011  317A                     __ptext20:	
 13012 ;; *************** function _getPB *****************
 13013 ;; Defined at:
 13014 ;;		line 89 in file "inputs.c"
 13015 ;; Parameters:    Size  Location     Type
 13016 ;;		None
 13017 ;; Auto vars:     Size  Location     Type
 13018 ;;  ret             1    1[BANK0 ] enum E7869
 13019 ;; Return value:  Size  Location     Type
 13020 ;;                  1    wreg      enum E7869
 13021 ;; Registers used:
 13022 ;;		wreg, status,2, status,0
 13023 ;; Tracked objects:
 13024 ;;		On entry : 0/0
 13025 ;;		On exit  : 0/0
 13026 ;;		Unchanged: 0/0
 13027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13028 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13029 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13030 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13031 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13032 ;;Total ram usage:        2 bytes
 13033 ;; Hardware stack levels used:    1
 13034 ;; Hardware stack levels required when called:    3
 13035 ;; This function calls:
 13036 ;;		Nothing
 13037 ;; This function is called by:
 13038 ;;		_setOutputPower
 13039 ;;		_setLensDia
 13040 ;;		_setDPOffset
 13041 ;;		_setSkyTemp
 13042 ;;		_setFudgeFactor
 13043 ;;		_viewErrorMessage
 13044 ;;		_menu
 13045 ;; This function uses a non-reentrant model
 13046 ;;
 13047                           
 13048                           
 13049                           ;psect for function _getPB
 13050  317A                     _getPB:	
 13051                           
 13052                           ;inputs.c: 91:  enum e_buttonPress ret = pbState;
 13053                           
 13054                           ;incstack = 0
 13055                           ; Regs used in _getPB: [wreg+status,2+status,0]
 13056  317A  087D               	movf	_pbState,w	;volatile
 13057  317B  0140               	movlb	0	; select bank0
 13058  317C  00A0               	movwf	??_getPB
 13059  317D  0820               	movf	??_getPB,w
 13060  317E  00A1               	movwf	getPB@ret
 13061                           
 13062                           ;inputs.c: 92:  if (pbState != PB_WAIT)
 13063  317F  3004               	movlw	4
 13064  3180  067D               	xorwf	_pbState,w	;volatile
 13065  3181  1D03               	btfss	3,2
 13066                           
 13067                           ;inputs.c: 93:   pbState = PB_NONE;
 13068  3182  01FD               	clrf	_pbState	;volatile
 13069                           
 13070                           ;inputs.c: 94:  return ret;
 13071  3183  0821               	movf	getPB@ret,w
 13072  3184  0008               	return
 13073  3185                     __end_of_getPB:	
 13074                           
 13075                           	psect	text21
 13076  2053                     __ptext21:	
 13077 ;; *************** function _getNextState *****************
 13078 ;; Defined at:
 13079 ;;		line 148 in file "menuhelper.c"
 13080 ;; Parameters:    Size  Location     Type
 13081 ;;  state           1    wreg     enum E7960
 13082 ;;  intState        1   19[BANK0 ] unsigned char 
 13083 ;;  pb              1   20[BANK0 ] enum E7869
 13084 ;;  timeout         1   21[BANK0 ] unsigned char 
 13085 ;; Auto vars:     Size  Location     Type
 13086 ;;  state           1   25[BANK0 ] enum E7960
 13087 ;;  n               1   26[BANK0 ] unsigned char 
 13088 ;; Return value:  Size  Location     Type
 13089 ;;                  1    wreg      char 
 13090 ;; Registers used:
 13091 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13092 ;; Tracked objects:
 13093 ;;		On entry : 0/0
 13094 ;;		On exit  : 0/0
 13095 ;;		Unchanged: 0/0
 13096 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13097 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13098 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13099 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13100 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13101 ;;Total ram usage:        8 bytes
 13102 ;; Hardware stack levels used:    1
 13103 ;; Hardware stack levels required when called:    4
 13104 ;; This function calls:
 13105 ;;		___wmul
 13106 ;; This function is called by:
 13107 ;;		_menu
 13108 ;; This function uses a non-reentrant model
 13109 ;;
 13110                           
 13111                           
 13112                           ;psect for function _getNextState
 13113  2053                     _getNextState:	
 13114                           
 13115                           ;incstack = 0
 13116                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13117                           ;getNextState@state stored from wreg
 13118  2053  0140               	movlb	0	; select bank0
 13119  2054  00B9               	movwf	getNextState@state
 13120                           
 13121                           ;menuhelper.c: 148: int8_t getNextState(enum e_menuStates state, uint8_t intState,;menuh
      +                          elper.c: 149:    enum e_buttonPress pb, uint8_t timeout);menuhelper.c: 150: {;menuhelper
      +                          .c: 151:  uint8_t n;;menuhelper.c: 154:  for(n = 0; n < sizeof(nextStateTbl)/sizeof(next
      +                          StateTbl[0]); n++) {
 13122  2055  01BA               	clrf	getNextState@n
 13123  2056                     l8565:	
 13124                           
 13125                           ;menuhelper.c: 155:   if ((nextStateTbl[n].state == state)) {
 13126  2056  083A               	movf	getNextState@n,w
 13127  2057  00B6               	movwf	??_getNextState
 13128  2058  01B7               	clrf	??_getNextState+1
 13129  2059  0836               	movf	??_getNextState,w
 13130  205A  00AD               	movwf	___wmul@multiplier
 13131  205B  0837               	movf	??_getNextState+1,w
 13132  205C  00AE               	movwf	___wmul@multiplier+1
 13133  205D  3006               	movlw	6
 13134  205E  00AF               	movwf	___wmul@multiplicand
 13135  205F  3000               	movlw	0
 13136  2060  00B0               	movwf	___wmul@multiplicand+1
 13137  2061  31B1  21DE  31A0   	fcall	___wmul
 13138  2064  0140               	movlb	0	; select bank0
 13139  2065  082E               	movf	?___wmul+1,w
 13140  2066  0085               	movwf	5
 13141  2067  082D               	movf	?___wmul,w
 13142  2068  0084               	movwf	4
 13143  2069  3000               	movlw	low (_nextStateTbl| (0+32768))
 13144  206A  0784               	addwf	4,f
 13145  206B  30B0               	movlw	high (_nextStateTbl| (0+32768))
 13146  206C  3D85               	addwfc	5,f
 13147  206D  0800               	movf	0,w	;code access
 13148  206E  0639               	xorwf	getNextState@state,w
 13149  206F  1D03               	skipz
 13150  2070  2911               	goto	l8597
 13151                           
 13152                           ;menuhelper.c: 157:    if ((nextStateTbl[n].intState == intState) ||
 13153  2071  083A               	movf	getNextState@n,w
 13154  2072  00B6               	movwf	??_getNextState
 13155  2073  01B7               	clrf	??_getNextState+1
 13156  2074  0836               	movf	??_getNextState,w
 13157  2075  00AD               	movwf	___wmul@multiplier
 13158  2076  0837               	movf	??_getNextState+1,w
 13159  2077  00AE               	movwf	___wmul@multiplier+1
 13160  2078  3006               	movlw	6
 13161  2079  00AF               	movwf	___wmul@multiplicand
 13162  207A  3000               	movlw	0
 13163  207B  00B0               	movwf	___wmul@multiplicand+1
 13164  207C  31B1  21DE  31A0   	fcall	___wmul
 13165  207F  0140               	movlb	0	; select bank0
 13166  2080  082E               	movf	?___wmul+1,w
 13167  2081  0085               	movwf	5
 13168  2082  082D               	movf	?___wmul,w
 13169  2083  0084               	movwf	4
 13170  2084  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 13171  2085  0784               	addwf	4,f
 13172  2086  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 13173  2087  3D85               	addwfc	5,f
 13174  2088  0800               	movf	0,w	;code access
 13175  2089  0633               	xorwf	getNextState@intState,w
 13176  208A  1903               	skipnz
 13177  208B  28A7               	goto	l8571
 13178  208C  083A               	movf	getNextState@n,w
 13179  208D  00B6               	movwf	??_getNextState
 13180  208E  01B7               	clrf	??_getNextState+1
 13181  208F  0836               	movf	??_getNextState,w
 13182  2090  00AD               	movwf	___wmul@multiplier
 13183  2091  0837               	movf	??_getNextState+1,w
 13184  2092  00AE               	movwf	___wmul@multiplier+1
 13185  2093  3006               	movlw	6
 13186  2094  00AF               	movwf	___wmul@multiplicand
 13187  2095  3000               	movlw	0
 13188  2096  00B0               	movwf	___wmul@multiplicand+1
 13189  2097  31B1  21DE  31A0   	fcall	___wmul
 13190  209A  0140               	movlb	0	; select bank0
 13191  209B  082E               	movf	?___wmul+1,w
 13192  209C  0085               	movwf	5
 13193  209D  082D               	movf	?___wmul,w
 13194  209E  0084               	movwf	4
 13195  209F  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 13196  20A0  0784               	addwf	4,f
 13197  20A1  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 13198  20A2  3D85               	addwfc	5,f
 13199  20A3  0012               	moviw fsr0++
 13200  20A4  3AFF               	xorlw	255
 13201  20A5  1D03               	btfss	3,2
 13202  20A6  2911               	goto	l8597
 13203  20A7                     l8571:	
 13204                           
 13205                           ;menuhelper.c: 158:     (nextStateTbl[n].intState == 255)) {;menuhelper.c: 159:     if (
      +                          timeout)
 13206  20A7  0835               	movf	getNextState@timeout,w
 13207  20A8  1903               	btfsc	3,2
 13208  20A9  28C2               	goto	l8577
 13209                           
 13210                           ;menuhelper.c: 160:      return nextStateTbl[n].timeout;
 13211  20AA  083A               	movf	getNextState@n,w
 13212  20AB  00B6               	movwf	??_getNextState
 13213  20AC  01B7               	clrf	??_getNextState+1
 13214  20AD  0836               	movf	??_getNextState,w
 13215  20AE  00AD               	movwf	___wmul@multiplier
 13216  20AF  0837               	movf	??_getNextState+1,w
 13217  20B0  00AE               	movwf	___wmul@multiplier+1
 13218  20B1  3006               	movlw	6
 13219  20B2  00AF               	movwf	___wmul@multiplicand
 13220  20B3  3000               	movlw	0
 13221  20B4  00B0               	movwf	___wmul@multiplicand+1
 13222  20B5  31B1  21DE         	fcall	___wmul
 13223  20B7  0140               	movlb	0	; select bank0
 13224  20B8  082E               	movf	?___wmul+1,w
 13225  20B9  0085               	movwf	5
 13226  20BA  082D               	movf	?___wmul,w
 13227  20BB  0084               	movwf	4
 13228  20BC  3004               	movlw	low ((_nextStateTbl+4)| (0+32768))
 13229  20BD  0784               	addwf	4,f
 13230  20BE  30B0               	movlw	high ((_nextStateTbl+4)| (0+32768))
 13231  20BF  3D85               	addwfc	5,f
 13232  20C0  0800               	movf	0,w	;code access
 13233  20C1  0008               	return
 13234  20C2                     l8577:	
 13235                           
 13236                           ;menuhelper.c: 162:     if (pb == PB_SHORT)
 13237  20C2  0334               	decf	getNextState@pb,w
 13238  20C3  1D03               	btfss	3,2
 13239  20C4  28DD               	goto	l8585
 13240                           
 13241                           ;menuhelper.c: 163:      return nextStateTbl[n].pbShort;
 13242  20C5  083A               	movf	getNextState@n,w
 13243  20C6  00B6               	movwf	??_getNextState
 13244  20C7  01B7               	clrf	??_getNextState+1
 13245  20C8  0836               	movf	??_getNextState,w
 13246  20C9  00AD               	movwf	___wmul@multiplier
 13247  20CA  0837               	movf	??_getNextState+1,w
 13248  20CB  00AE               	movwf	___wmul@multiplier+1
 13249  20CC  3006               	movlw	6
 13250  20CD  00AF               	movwf	___wmul@multiplicand
 13251  20CE  3000               	movlw	0
 13252  20CF  00B0               	movwf	___wmul@multiplicand+1
 13253  20D0  31B1  21DE         	fcall	___wmul
 13254  20D2  0140               	movlb	0	; select bank0
 13255  20D3  082E               	movf	?___wmul+1,w
 13256  20D4  0085               	movwf	5
 13257  20D5  082D               	movf	?___wmul,w
 13258  20D6  0084               	movwf	4
 13259  20D7  3002               	movlw	low ((_nextStateTbl+2)| (0+32768))
 13260  20D8  0784               	addwf	4,f
 13261  20D9  30B0               	movlw	high ((_nextStateTbl+2)| (0+32768))
 13262  20DA  3D85               	addwfc	5,f
 13263  20DB  0800               	movf	0,w	;code access
 13264  20DC  0008               	return
 13265  20DD                     l8585:	
 13266  20DD  3002               	movlw	2
 13267  20DE  0634               	xorwf	getNextState@pb,w
 13268  20DF  1D03               	btfss	3,2
 13269  20E0  28F9               	goto	l8593
 13270                           
 13271                           ;menuhelper.c: 165:      return nextStateTbl[n].pbLong;
 13272  20E1  083A               	movf	getNextState@n,w
 13273  20E2  00B6               	movwf	??_getNextState
 13274  20E3  01B7               	clrf	??_getNextState+1
 13275  20E4  0836               	movf	??_getNextState,w
 13276  20E5  00AD               	movwf	___wmul@multiplier
 13277  20E6  0837               	movf	??_getNextState+1,w
 13278  20E7  00AE               	movwf	___wmul@multiplier+1
 13279  20E8  3006               	movlw	6
 13280  20E9  00AF               	movwf	___wmul@multiplicand
 13281  20EA  3000               	movlw	0
 13282  20EB  00B0               	movwf	___wmul@multiplicand+1
 13283  20EC  31B1  21DE         	fcall	___wmul
 13284  20EE  0140               	movlb	0	; select bank0
 13285  20EF  082E               	movf	?___wmul+1,w
 13286  20F0  0085               	movwf	5
 13287  20F1  082D               	movf	?___wmul,w
 13288  20F2  0084               	movwf	4
 13289  20F3  3003               	movlw	low ((_nextStateTbl+3)| (0+32768))
 13290  20F4  0784               	addwf	4,f
 13291  20F5  30B0               	movlw	high ((_nextStateTbl+3)| (0+32768))
 13292  20F6  3D85               	addwfc	5,f
 13293  20F7  0800               	movf	0,w	;code access
 13294  20F8  0008               	return
 13295  20F9                     l8593:	
 13296                           
 13297                           ;menuhelper.c: 167:      return nextStateTbl[n].noAction;
 13298  20F9  083A               	movf	getNextState@n,w
 13299  20FA  00B6               	movwf	??_getNextState
 13300  20FB  01B7               	clrf	??_getNextState+1
 13301  20FC  0836               	movf	??_getNextState,w
 13302  20FD  00AD               	movwf	___wmul@multiplier
 13303  20FE  0837               	movf	??_getNextState+1,w
 13304  20FF  00AE               	movwf	___wmul@multiplier+1
 13305  2100  3006               	movlw	6
 13306  2101  00AF               	movwf	___wmul@multiplicand
 13307  2102  3000               	movlw	0
 13308  2103  00B0               	movwf	___wmul@multiplicand+1
 13309  2104  31B1  21DE         	fcall	___wmul
 13310  2106  0140               	movlb	0	; select bank0
 13311  2107  082E               	movf	?___wmul+1,w
 13312  2108  0085               	movwf	5
 13313  2109  082D               	movf	?___wmul,w
 13314  210A  0084               	movwf	4
 13315  210B  3005               	movlw	low ((_nextStateTbl+5)| (0+32768))
 13316  210C  0784               	addwf	4,f
 13317  210D  30B0               	movlw	high ((_nextStateTbl+5)| (0+32768))
 13318  210E  3D85               	addwfc	5,f
 13319  210F  0800               	movf	0,w	;code access
 13320  2110  0008               	return
 13321  2111                     l8597:	
 13322                           
 13323                           ;menuhelper.c: 170:  }
 13324  2111  3001               	movlw	1
 13325  2112  00B6               	movwf	??_getNextState
 13326  2113  0836               	movf	??_getNextState,w
 13327  2114  07BA               	addwf	getNextState@n,f
 13328  2115  3012               	movlw	18
 13329  2116  023A               	subwf	getNextState@n,w
 13330  2117  1C03               	skipc
 13331  2118  2856               	goto	l8565
 13332                           
 13333                           ;menuhelper.c: 171:  return -1;
 13334  2119  30FF               	movlw	255
 13335  211A  0008               	return
 13336  211B                     __end_of_getNextState:	
 13337                           
 13338                           	psect	text22
 13339  33D3                     __ptext22:	
 13340 ;; *************** function _returnToPage *****************
 13341 ;; Defined at:
 13342 ;;		line 219 in file "menuhelper.c"
 13343 ;; Parameters:    Size  Location     Type
 13344 ;;  page            1    wreg     unsigned char 
 13345 ;; Auto vars:     Size  Location     Type
 13346 ;;  page            1   21[BANK0 ] unsigned char 
 13347 ;;  n               1   22[BANK0 ] unsigned char 
 13348 ;; Return value:  Size  Location     Type
 13349 ;;                  1    wreg      void 
 13350 ;; Registers used:
 13351 ;;		wreg, status,2, status,0, pclath, cstack
 13352 ;; Tracked objects:
 13353 ;;		On entry : 0/0
 13354 ;;		On exit  : 0/0
 13355 ;;		Unchanged: 0/0
 13356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13358 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13359 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13360 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13361 ;;Total ram usage:        4 bytes
 13362 ;; Hardware stack levels used:    1
 13363 ;; Hardware stack levels required when called:    6
 13364 ;; This function calls:
 13365 ;;		_OLED_command
 13366 ;;		___wmul
 13367 ;; This function is called by:
 13368 ;;		_statusView
 13369 ;;		_channelView
 13370 ;;		_channelSetup
 13371 ;;		_setOutputPower
 13372 ;;		_setLensDia
 13373 ;;		_setup
 13374 ;;		_setDPOffset
 13375 ;;		_setSkyTemp
 13376 ;;		_setFudgeFactor
 13377 ;; This function uses a non-reentrant model
 13378 ;;
 13379                           
 13380                           
 13381                           ;psect for function _returnToPage
 13382  33D3                     _returnToPage:	
 13383                           
 13384                           ;incstack = 0
 13385                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 13386                           ;returnToPage@page stored from wreg
 13387  33D3  0140               	movlb	0	; select bank0
 13388  33D4  00B5               	movwf	returnToPage@page
 13389                           
 13390                           ;menuhelper.c: 219: void returnToPage(uint8_t page);menuhelper.c: 220: {;menuhelper.c: 2
      +                          21:  uint8_t n;;menuhelper.c: 223:  if (! g_screenRefresh)
 13391  33D5  0141               	movlb	1	; select bank1
 13392  33D6  086D               	movf	_g_screenRefresh^(0+128),w
 13393  33D7  1903               	btfsc	3,2
 13394  33D8  0008               	return
 13395                           
 13396                           ;menuhelper.c: 225:  OLED_command(0x01);
 13397  33D9  3001               	movlw	1
 13398  33DA  31B1  2150  31B3   	fcall	_OLED_command
 13399                           
 13400                           ;menuhelper.c: 226:  OLED_command(0x02);
 13401  33DD  3002               	movlw	2
 13402  33DE  31B1  2150  31B3   	fcall	_OLED_command
 13403                           
 13404                           ;menuhelper.c: 227:  for(n = 0; n < 12 * page; n++) {
 13405  33E1  0140               	movlb	0	; select bank0
 13406  33E2  01B6               	clrf	returnToPage@n
 13407  33E3                     l7915:	
 13408  33E3  0835               	movf	returnToPage@page,w
 13409  33E4  00B3               	movwf	??_returnToPage
 13410  33E5  01B4               	clrf	??_returnToPage+1
 13411  33E6  0833               	movf	??_returnToPage,w
 13412  33E7  00AD               	movwf	___wmul@multiplier
 13413  33E8  0834               	movf	??_returnToPage+1,w
 13414  33E9  00AE               	movwf	___wmul@multiplier+1
 13415  33EA  300C               	movlw	12
 13416  33EB  00AF               	movwf	___wmul@multiplicand
 13417  33EC  3000               	movlw	0
 13418  33ED  00B0               	movwf	___wmul@multiplicand+1
 13419  33EE  31B1  21DE  31B3   	fcall	___wmul
 13420  33F1  0140               	movlb	0	; select bank0
 13421  33F2  082E               	movf	?___wmul+1,w
 13422  33F3  3A80               	xorlw	128
 13423  33F4  3C80               	sublw	128
 13424  33F5  1D03               	skipz
 13425  33F6  2BF9               	goto	u9165
 13426  33F7  082D               	movf	?___wmul,w
 13427  33F8  0236               	subwf	returnToPage@n,w
 13428  33F9                     u9165:	
 13429  33F9  1803               	btfsc	3,0
 13430  33FA  0008               	return
 13431                           
 13432                           ;menuhelper.c: 228:   OLED_command(0x10 | 0x08 | 0x00);
 13433  33FB  3018               	movlw	24
 13434  33FC  31B1  2150  31B3   	fcall	_OLED_command
 13435                           
 13436                           ;menuhelper.c: 229:  }
 13437  33FF  3001               	movlw	1
 13438  3400  0140               	movlb	0	; select bank0
 13439  3401  00B3               	movwf	??_returnToPage
 13440  3402  0833               	movf	??_returnToPage,w
 13441  3403  07B6               	addwf	returnToPage@n,f
 13442  3404  2BE3               	goto	l7915
 13443  3405                     __end_of_returnToPage:	
 13444                           
 13445                           	psect	text23
 13446  078D                     __ptext23:	
 13447 ;; *************** function _paging *****************
 13448 ;; Defined at:
 13449 ;;		line 178 in file "menuhelper.c"
 13450 ;; Parameters:    Size  Location     Type
 13451 ;;  currentPage     1    wreg     unsigned char 
 13452 ;;  lastPage        1    7[BANK0 ] const unsigned char 
 13453 ;; Auto vars:     Size  Location     Type
 13454 ;;  currentPage     1   10[BANK0 ] unsigned char 
 13455 ;;  n               1   12[BANK0 ] unsigned char 
 13456 ;;  dir             1   11[BANK0 ] enum E7865
 13457 ;; Return value:  Size  Location     Type
 13458 ;;                  1    wreg      unsigned char 
 13459 ;; Registers used:
 13460 ;;		wreg, status,2, status,0, pclath, cstack
 13461 ;; Tracked objects:
 13462 ;;		On entry : 0/0
 13463 ;;		On exit  : 0/0
 13464 ;;		Unchanged: 0/0
 13465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13466 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13467 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13468 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13469 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13470 ;;Total ram usage:        6 bytes
 13471 ;; Hardware stack levels used:    1
 13472 ;; Hardware stack levels required when called:    6
 13473 ;; This function calls:
 13474 ;;		_OLED_command
 13475 ;;		_getRotDir
 13476 ;; This function is called by:
 13477 ;;		_statusView
 13478 ;;		_channelView
 13479 ;;		_channelSetup
 13480 ;;		_setup
 13481 ;; This function uses a non-reentrant model
 13482 ;;
 13483                           
 13484                           
 13485                           ;psect for function _paging
 13486  078D                     _paging:	
 13487                           
 13488                           ;incstack = 0
 13489                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 13490                           ;paging@currentPage stored from wreg
 13491  078D  0140               	movlb	0	; select bank0
 13492  078E  00AA               	movwf	paging@currentPage
 13493                           
 13494                           ;menuhelper.c: 178: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 179: {;menuhelper.c: 180:  uint8_t n;;menuhelper.c: 181:  enum e_direction dir;;me
      +                          nuhelper.c: 182:  static enum e_direction lastDir = ROT_STOP;;menuhelper.c: 185:  PIE0bi
      +                          ts.IOCIE = 0;
 13495  078F  014E               	movlb	14	; select bank14
 13496  0790  1216               	bcf	22,4	;volatile
 13497                           
 13498                           ;menuhelper.c: 187:  dir = getRotDir();
 13499  0791  31B1  216F  3187   	fcall	_getRotDir
 13500  0794  0140               	movlb	0	; select bank0
 13501  0795  00A8               	movwf	??_paging
 13502  0796  0828               	movf	??_paging,w
 13503  0797  00AB               	movwf	paging@dir
 13504                           
 13505                           ;menuhelper.c: 190:  if (dir == lastDir) {
 13506  0798  082B               	movf	paging@dir,w
 13507  0799  0142               	movlb	2	; select bank2
 13508  079A  0662               	xorwf	paging@lastDir^(0+256),w
 13509  079B  1D03               	skipz
 13510  079C  2FEF               	goto	l8035
 13511                           
 13512                           ;menuhelper.c: 192:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 13513  079D  0140               	movlb	0	; select bank0
 13514  079E  032B               	decf	paging@dir,w
 13515  079F  1D03               	btfss	3,2
 13516  07A0  2FCE               	goto	l8015
 13517  07A1  0827               	movf	paging@lastPage,w
 13518  07A2  3EFF               	addlw	255
 13519  07A3  00A8               	movwf	??_paging
 13520  07A4  30FF               	movlw	255
 13521  07A5  1803               	skipnc
 13522  07A6  3000               	movlw	0
 13523  07A7  00A9               	movwf	??_paging+1
 13524  07A8  0829               	movf	??_paging+1,w
 13525  07A9  3A80               	xorlw	128
 13526  07AA  3C80               	sublw	128
 13527  07AB  1D03               	skipz
 13528  07AC  2FAF               	goto	u9305
 13529  07AD  0828               	movf	??_paging,w
 13530  07AE  022A               	subwf	paging@currentPage,w
 13531  07AF                     u9305:	
 13532  07AF  1803               	skipnc
 13533  07B0  2FCE               	goto	l8015
 13534                           
 13535                           ;menuhelper.c: 193:    currentPage++;
 13536  07B1  3001               	movlw	1
 13537  07B2  0140               	movlb	0	; select bank0
 13538  07B3  00A8               	movwf	??_paging
 13539  07B4  0828               	movf	??_paging,w
 13540  07B5  07AA               	addwf	paging@currentPage,f
 13541                           
 13542                           ;menuhelper.c: 194:    for(n = 0; n < 12; n++) {
 13543  07B6  01AC               	clrf	paging@n
 13544  07B7                     l8007:	
 13545                           
 13546                           ;menuhelper.c: 195:     OLED_command(0x10 | 0x08 | 0x00);
 13547  07B7  3018               	movlw	24
 13548  07B8  31B1  2150  3187   	fcall	_OLED_command
 13549                           
 13550                           ;menuhelper.c: 196:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 13551  07BB  301A               	movlw	26
 13552  07BC  0140               	movlb	0	; select bank0
 13553  07BD  00A8               	movwf	??_paging
 13554  07BE  30F8               	movlw	248
 13555  07BF                     u10877:	
 13556  07BF  0B89               	decfsz	9,f
 13557  07C0  2FBF               	goto	u10877
 13558  07C1  0BA8               	decfsz	??_paging,f
 13559  07C2  2FBF               	goto	u10877
 13560  07C3  0000               	nop
 13561                           
 13562                           ;menuhelper.c: 197:    }
 13563  07C4  3001               	movlw	1
 13564  07C5  0140               	movlb	0	; select bank0
 13565  07C6  00A8               	movwf	??_paging
 13566  07C7  0828               	movf	??_paging,w
 13567  07C8  07AC               	addwf	paging@n,f
 13568  07C9  300C               	movlw	12
 13569  07CA  022C               	subwf	paging@n,w
 13570  07CB  1803               	btfsc	3,0
 13571  07CC  2FEF               	goto	l8035
 13572  07CD  2FB7               	goto	l8007
 13573  07CE                     l8015:	
 13574  07CE  3002               	movlw	2
 13575  07CF  0140               	movlb	0	; select bank0
 13576  07D0  062B               	xorwf	paging@dir,w
 13577  07D1  1D03               	btfss	3,2
 13578  07D2  2FEF               	goto	l8035
 13579  07D3  082A               	movf	paging@currentPage,w
 13580  07D4  1903               	btfsc	3,2
 13581  07D5  2FEF               	goto	l8035
 13582                           
 13583                           ;menuhelper.c: 201:    currentPage--;
 13584  07D6  3001               	movlw	1
 13585  07D7  02AA               	subwf	paging@currentPage,f
 13586                           
 13587                           ;menuhelper.c: 202:    for(n = 0; n < 12; n++) {
 13588  07D8  01AC               	clrf	paging@n
 13589  07D9                     l8027:	
 13590                           
 13591                           ;menuhelper.c: 203:     OLED_command(0x10 | 0x08 | 0x04);;
 13592  07D9  301C               	movlw	28
 13593  07DA  31B1  2150  3187   	fcall	_OLED_command
 13594                           
 13595                           ;menuhelper.c: 204:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 13596  07DD  301A               	movlw	26
 13597  07DE  0140               	movlb	0	; select bank0
 13598  07DF  00A8               	movwf	??_paging
 13599  07E0  30F8               	movlw	248
 13600  07E1                     u10887:	
 13601  07E1  0B89               	decfsz	9,f
 13602  07E2  2FE1               	goto	u10887
 13603  07E3  0BA8               	decfsz	??_paging,f
 13604  07E4  2FE1               	goto	u10887
 13605  07E5  0000               	nop
 13606                           
 13607                           ;menuhelper.c: 205:    }
 13608  07E6  3001               	movlw	1
 13609  07E7  0140               	movlb	0	; select bank0
 13610  07E8  00A8               	movwf	??_paging
 13611  07E9  0828               	movf	??_paging,w
 13612  07EA  07AC               	addwf	paging@n,f
 13613  07EB  300C               	movlw	12
 13614  07EC  022C               	subwf	paging@n,w
 13615  07ED  1C03               	skipc
 13616  07EE  2FD9               	goto	l8027
 13617  07EF                     l8035:	
 13618                           
 13619                           ;menuhelper.c: 209:  lastDir = dir;
 13620  07EF  0140               	movlb	0	; select bank0
 13621  07F0  082B               	movf	paging@dir,w
 13622  07F1  00A8               	movwf	??_paging
 13623  07F2  0828               	movf	??_paging,w
 13624  07F3  0142               	movlb	2	; select bank2
 13625  07F4  00E2               	movwf	paging@lastDir^(0+256)
 13626                           
 13627                           ;menuhelper.c: 210:  PIE0bits.IOCIE = 1;
 13628  07F5  014E               	movlb	14	; select bank14
 13629  07F6  1616               	bsf	22,4	;volatile
 13630                           
 13631                           ;menuhelper.c: 212:  return currentPage;
 13632  07F7  0140               	movlb	0	; select bank0
 13633  07F8  082A               	movf	paging@currentPage,w
 13634  07F9  0008               	return
 13635  07FA                     __end_of_paging:	
 13636                           
 13637                           	psect	text24
 13638  316F                     __ptext24:	
 13639 ;; *************** function _getRotDir *****************
 13640 ;; Defined at:
 13641 ;;		line 79 in file "inputs.c"
 13642 ;; Parameters:    Size  Location     Type
 13643 ;;		None
 13644 ;; Auto vars:     Size  Location     Type
 13645 ;;  ret             1    1[BANK0 ] enum E7865
 13646 ;; Return value:  Size  Location     Type
 13647 ;;                  1    wreg      enum E7865
 13648 ;; Registers used:
 13649 ;;		wreg, status,2
 13650 ;; Tracked objects:
 13651 ;;		On entry : 0/0
 13652 ;;		On exit  : 0/0
 13653 ;;		Unchanged: 0/0
 13654 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13655 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13656 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13657 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13658 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13659 ;;Total ram usage:        2 bytes
 13660 ;; Hardware stack levels used:    1
 13661 ;; Hardware stack levels required when called:    3
 13662 ;; This function calls:
 13663 ;;		Nothing
 13664 ;; This function is called by:
 13665 ;;		_spinInput
 13666 ;;		_paging
 13667 ;; This function uses a non-reentrant model
 13668 ;;
 13669                           
 13670                           
 13671                           ;psect for function _getRotDir
 13672  316F                     _getRotDir:	
 13673                           
 13674                           ;inputs.c: 81:  enum e_direction ret = rotDir;
 13675                           
 13676                           ;incstack = 0
 13677                           ; Regs used in _getRotDir: [wreg+status,2]
 13678  316F  0142               	movlb	2	; select bank2
 13679  3170  086C               	movf	_rotDir^(0+256),w	;volatile
 13680  3171  0140               	movlb	0	; select bank0
 13681  3172  00A0               	movwf	??_getRotDir
 13682  3173  0820               	movf	??_getRotDir,w
 13683  3174  00A1               	movwf	getRotDir@ret
 13684                           
 13685                           ;inputs.c: 82:  rotDir = ROT_STOP;
 13686  3175  0142               	movlb	2	; select bank2
 13687  3176  01EC               	clrf	_rotDir^(0+256)	;volatile
 13688                           
 13689                           ;inputs.c: 83:  return ret;
 13690  3177  0140               	movlb	0	; select bank0
 13691  3178  0821               	movf	getRotDir@ret,w
 13692  3179  0008               	return
 13693  317A                     __end_of_getRotDir:	
 13694                           
 13695                           	psect	text25
 13696  373E                     __ptext25:	
 13697 ;; *************** function _itoa *****************
 13698 ;; Defined at:
 13699 ;;		line 47 in file "common.c"
 13700 ;; Parameters:    Size  Location     Type
 13701 ;;  str             2    9[BANK0 ] PTR unsigned char 
 13702 ;;		 -> systemCheck@str(3), str(10), 
 13703 ;;  value           1   11[BANK0 ] unsigned char 
 13704 ;;  width           1   12[BANK0 ] unsigned char 
 13705 ;; Auto vars:     Size  Location     Type
 13706 ;;		None
 13707 ;; Return value:  Size  Location     Type
 13708 ;;                  1    wreg      void 
 13709 ;; Registers used:
 13710 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13711 ;; Tracked objects:
 13712 ;;		On entry : 0/0
 13713 ;;		On exit  : 0/0
 13714 ;;		Unchanged: 0/0
 13715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13716 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13717 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13718 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13719 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13720 ;;Total ram usage:       11 bytes
 13721 ;; Hardware stack levels used:    1
 13722 ;; Hardware stack levels required when called:    4
 13723 ;; This function calls:
 13724 ;;		___awdiv
 13725 ;;		___awmod
 13726 ;; This function is called by:
 13727 ;;		_statusView
 13728 ;;		_channelView
 13729 ;;		_channelSetup
 13730 ;;		_setOutputPower
 13731 ;;		_systemCheck
 13732 ;; This function uses a non-reentrant model
 13733 ;;
 13734                           
 13735                           
 13736                           ;psect for function _itoa
 13737  373E                     _itoa:	
 13738                           
 13739                           ;common.c: 47: void itoa(char *str, uint8_t value, uint8_t width);common.c: 48: {;common
      +                          .c: 49:  str[width] = '\0';
 13740                           
 13741                           ;incstack = 0
 13742                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13743  373E  0140               	movlb	0	; select bank0
 13744  373F  082C               	movf	itoa@width,w
 13745  3740  00AD               	movwf	??_itoa
 13746  3741  01AE               	clrf	??_itoa+1
 13747  3742  082D               	movf	??_itoa,w
 13748  3743  0729               	addwf	itoa@str,w
 13749  3744  0086               	movwf	6
 13750  3745  082E               	movf	??_itoa+1,w
 13751  3746  3D2A               	addwfc	itoa@str+1,w
 13752  3747  0087               	movwf	7
 13753  3748  0181               	clrf	1
 13754  3749                     l7981:	
 13755                           ;common.c: 50:  while (value && width > 0) {
 13756                           
 13757                           
 13758                           ;common.c: 50:  while (value && width > 0) {
 13759  3749  082B               	movf	itoa@value,w
 13760  374A  1903               	btfsc	3,2
 13761  374B  2F97               	goto	l7987
 13762  374C  082C               	movf	itoa@width,w
 13763  374D  1903               	btfsc	3,2
 13764  374E  2F97               	goto	l7987
 13765                           
 13766                           ;common.c: 51:   str[--width] = (value % 10) + '0';
 13767  374F  300A               	movlw	10
 13768  3750  00A0               	movwf	___awmod@divisor
 13769  3751  3000               	movlw	0
 13770  3752  00A1               	movwf	___awmod@divisor+1
 13771  3753  082B               	movf	itoa@value,w
 13772  3754  00AD               	movwf	??_itoa
 13773  3755  01AE               	clrf	??_itoa+1
 13774  3756  082D               	movf	??_itoa,w
 13775  3757  00A2               	movwf	___awmod@dividend
 13776  3758  082E               	movf	??_itoa+1,w
 13777  3759  00A3               	movwf	___awmod@dividend+1
 13778  375A  31B4  24E9  31B7   	fcall	___awmod
 13779  375D  0140               	movlb	0	; select bank0
 13780  375E  0820               	movf	?___awmod,w
 13781  375F  3E30               	addlw	48
 13782  3760  00AF               	movwf	??_itoa+2
 13783  3761  3001               	movlw	1
 13784  3762  02AC               	subwf	itoa@width,f
 13785  3763  082C               	movf	itoa@width,w
 13786  3764  00B0               	movwf	??_itoa+3
 13787  3765  01B1               	clrf	??_itoa+4
 13788  3766  0830               	movf	??_itoa+3,w
 13789  3767  0729               	addwf	itoa@str,w
 13790  3768  00B2               	movwf	??_itoa+5
 13791  3769  0831               	movf	??_itoa+4,w
 13792  376A  3D2A               	addwfc	itoa@str+1,w
 13793  376B  00B3               	movwf	??_itoa+6
 13794  376C  0832               	movf	??_itoa+5,w
 13795  376D  0086               	movwf	6
 13796  376E  0833               	movf	??_itoa+6,w
 13797  376F  0087               	movwf	7
 13798  3770  082F               	movf	??_itoa+2,w
 13799  3771  0081               	movwf	1
 13800                           
 13801                           ;common.c: 52:   value = value / 10;
 13802  3772  300A               	movlw	10
 13803  3773  00A0               	movwf	___awdiv@divisor
 13804  3774  3000               	movlw	0
 13805  3775  00A1               	movwf	___awdiv@divisor+1
 13806  3776  082B               	movf	itoa@value,w
 13807  3777  00AD               	movwf	??_itoa
 13808  3778  01AE               	clrf	??_itoa+1
 13809  3779  082D               	movf	??_itoa,w
 13810  377A  00A2               	movwf	___awdiv@dividend
 13811  377B  082E               	movf	??_itoa+1,w
 13812  377C  00A3               	movwf	___awdiv@dividend+1
 13813  377D  31A0  2001  31B7   	fcall	___awdiv
 13814  3780  0140               	movlb	0	; select bank0
 13815  3781  0820               	movf	?___awdiv,w
 13816  3782  00AF               	movwf	??_itoa+2
 13817  3783  082F               	movf	??_itoa+2,w
 13818  3784  00AB               	movwf	itoa@value
 13819  3785  2F49               	goto	l7981
 13820  3786                     l7985:	
 13821                           
 13822                           ;common.c: 55:   str[--width] = ' ';
 13823  3786  3001               	movlw	1
 13824  3787  02AC               	subwf	itoa@width,f
 13825  3788  082C               	movf	itoa@width,w
 13826  3789  00AD               	movwf	??_itoa
 13827  378A  01AE               	clrf	??_itoa+1
 13828  378B  082D               	movf	??_itoa,w
 13829  378C  0729               	addwf	itoa@str,w
 13830  378D  00AF               	movwf	??_itoa+2
 13831  378E  082E               	movf	??_itoa+1,w
 13832  378F  3D2A               	addwfc	itoa@str+1,w
 13833  3790  00B0               	movwf	??_itoa+3
 13834  3791  082F               	movf	??_itoa+2,w
 13835  3792  0086               	movwf	6
 13836  3793  0830               	movf	??_itoa+3,w
 13837  3794  0087               	movwf	7
 13838  3795  3020               	movlw	32
 13839  3796  0081               	movwf	1
 13840  3797                     l7987:	
 13841                           
 13842                           ;common.c: 54:  while(width)
 13843  3797  082C               	movf	itoa@width,w
 13844  3798  1903               	btfsc	3,2
 13845  3799  0008               	return
 13846  379A  2F86               	goto	l7985
 13847  379B                     __end_of_itoa:	
 13848                           
 13849                           	psect	text26
 13850  223B                     __ptext26:	
 13851 ;; *************** function _ftoa *****************
 13852 ;; Defined at:
 13853 ;;		line 8 in file "common.c"
 13854 ;; Parameters:    Size  Location     Type
 13855 ;;  str             1    wreg     PTR unsigned char 
 13856 ;;		 -> str(10), 
 13857 ;;  fValue          4   25[BANK1 ] float 
 13858 ;;  width           1   29[BANK1 ] unsigned char 
 13859 ;;  prec            1   30[BANK1 ] unsigned char 
 13860 ;; Auto vars:     Size  Location     Type
 13861 ;;  str             1   38[BANK1 ] PTR unsigned char 
 13862 ;;		 -> str(10), 
 13863 ;;  pos             1   37[BANK1 ] unsigned char 
 13864 ;;  w               1   36[BANK1 ] unsigned char 
 13865 ;;  intValue        1   35[BANK1 ] unsigned char 
 13866 ;;  sign            1   34[BANK1 ] unsigned char 
 13867 ;;  len             1   33[BANK1 ] unsigned char 
 13868 ;; Return value:  Size  Location     Type
 13869 ;;                  1    wreg      void 
 13870 ;; Registers used:
 13871 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13872 ;; Tracked objects:
 13873 ;;		On entry : 0/0
 13874 ;;		On exit  : 0/0
 13875 ;;		Unchanged: 0/0
 13876 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13877 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13878 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13879 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13880 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13881 ;;Total ram usage:       14 bytes
 13882 ;; Hardware stack levels used:    1
 13883 ;; Hardware stack levels required when called:    5
 13884 ;; This function calls:
 13885 ;;		___fldiv
 13886 ;;		___flge
 13887 ;;		___flmul
 13888 ;;		___flsub
 13889 ;;		___fltol
 13890 ;;		___wmul
 13891 ;;		___xxtofl
 13892 ;; This function is called by:
 13893 ;;		_statusView
 13894 ;;		_channelView
 13895 ;;		_channelSetup
 13896 ;;		_setOutputPower
 13897 ;;		_setLensDia
 13898 ;;		_setup
 13899 ;;		_setDPOffset
 13900 ;;		_setSkyTemp
 13901 ;;		_setFudgeFactor
 13902 ;; This function uses a non-reentrant model
 13903 ;;
 13904                           
 13905                           
 13906                           ;psect for function _ftoa
 13907  223B                     _ftoa:	
 13908                           
 13909                           ;incstack = 0
 13910                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13911                           ;ftoa@str stored from wreg
 13912  223B  0141               	movlb	1	; select bank1
 13913  223C  00C6               	movwf	ftoa@str^(0+128)
 13914                           
 13915                           ;common.c: 8: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          9: {;common.c: 10:  uint8_t len = 1;
 13916  223D  01C1               	clrf	ftoa@len^(0+128)
 13917  223E  0AC1               	incf	ftoa@len^(0+128),f
 13918                           
 13919                           ;common.c: 12:  uint8_t pos = 0;
 13920  223F  01C5               	clrf	ftoa@pos^(0+128)
 13921                           
 13922                           ;common.c: 14:  uint8_t sign = 0;
 13923  2240  01C2               	clrf	ftoa@sign^(0+128)
 13924                           
 13925                           ;common.c: 16:  if (fValue < 0) {
 13926  2241  083C               	movf	(ftoa@fValue+3)^(0+128),w
 13927  2242  00B0               	movwf	(___flge@ff1+3)^(0+128)
 13928  2243  083B               	movf	(ftoa@fValue+2)^(0+128),w
 13929  2244  00AF               	movwf	(___flge@ff1+2)^(0+128)
 13930  2245  083A               	movf	(ftoa@fValue+1)^(0+128),w
 13931  2246  00AE               	movwf	(___flge@ff1+1)^(0+128)
 13932  2247  0839               	movf	ftoa@fValue^(0+128),w
 13933  2248  00AD               	movwf	___flge@ff1^(0+128)
 13934  2249  3000               	movlw	0
 13935  224A  00B4               	movwf	(___flge@ff2+3)^(0+128)
 13936  224B  3000               	movlw	0
 13937  224C  00B3               	movwf	(___flge@ff2+2)^(0+128)
 13938  224D  3000               	movlw	0
 13939  224E  00B2               	movwf	(___flge@ff2+1)^(0+128)
 13940  224F  3000               	movlw	0
 13941  2250  00B1               	movwf	___flge@ff2^(0+128)
 13942  2251  31AA  2206  31A2   	fcall	___flge
 13943  2254  1803               	btfsc	3,0
 13944  2255  2A86               	goto	l7939
 13945                           
 13946                           ;common.c: 17:   fValue *= -1;
 13947  2256  30BF               	movlw	191
 13948  2257  0140               	movlb	0	; select bank0
 13949  2258  00C4               	movwf	___flmul@b+3
 13950  2259  3080               	movlw	128
 13951  225A  00C3               	movwf	___flmul@b+2
 13952  225B  3000               	movlw	0
 13953  225C  00C2               	movwf	___flmul@b+1
 13954  225D  3000               	movlw	0
 13955  225E  00C1               	movwf	___flmul@b
 13956  225F  0141               	movlb	1	; select bank1
 13957  2260  083C               	movf	(ftoa@fValue+3)^(0+128),w
 13958  2261  0140               	movlb	0	; select bank0
 13959  2262  00C8               	movwf	___flmul@a+3
 13960  2263  0141               	movlb	1	; select bank1
 13961  2264  083B               	movf	(ftoa@fValue+2)^(0+128),w
 13962  2265  0140               	movlb	0	; select bank0
 13963  2266  00C7               	movwf	___flmul@a+2
 13964  2267  0141               	movlb	1	; select bank1
 13965  2268  083A               	movf	(ftoa@fValue+1)^(0+128),w
 13966  2269  0140               	movlb	0	; select bank0
 13967  226A  00C6               	movwf	___flmul@a+1
 13968  226B  0141               	movlb	1	; select bank1
 13969  226C  0839               	movf	ftoa@fValue^(0+128),w
 13970  226D  0140               	movlb	0	; select bank0
 13971  226E  00C5               	movwf	___flmul@a
 13972  226F  3185  2561  31A2   	fcall	___flmul
 13973  2272  0140               	movlb	0	; select bank0
 13974  2273  0844               	movf	?___flmul+3,w
 13975  2274  0141               	movlb	1	; select bank1
 13976  2275  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 13977  2276  0140               	movlb	0	; select bank0
 13978  2277  0843               	movf	?___flmul+2,w
 13979  2278  0141               	movlb	1	; select bank1
 13980  2279  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 13981  227A  0140               	movlb	0	; select bank0
 13982  227B  0842               	movf	?___flmul+1,w
 13983  227C  0141               	movlb	1	; select bank1
 13984  227D  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 13985  227E  0140               	movlb	0	; select bank0
 13986  227F  0841               	movf	?___flmul,w
 13987  2280  0141               	movlb	1	; select bank1
 13988  2281  00B9               	movwf	ftoa@fValue^(0+128)
 13989                           
 13990                           ;common.c: 18:   sign = 1;
 13991  2282  01C2               	clrf	ftoa@sign^(0+128)
 13992  2283  0AC2               	incf	ftoa@sign^(0+128),f
 13993                           
 13994                           ;common.c: 19:   width--;
 13995  2284  3001               	movlw	1
 13996  2285  02BD               	subwf	ftoa@width^(0+128),f
 13997  2286                     l7939:	
 13998                           
 13999                           ;common.c: 21:  while(fValue >= 10.0) {
 14000  2286  0141               	movlb	1	; select bank1
 14001  2287  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14002  2288  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14003  2289  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14004  228A  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14005  228B  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14006  228C  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14007  228D  0839               	movf	ftoa@fValue^(0+128),w
 14008  228E  00AD               	movwf	___flge@ff1^(0+128)
 14009  228F  3041               	movlw	65
 14010  2290  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14011  2291  3020               	movlw	32
 14012  2292  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14013  2293  3000               	movlw	0
 14014  2294  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14015  2295  3000               	movlw	0
 14016  2296  00B1               	movwf	___flge@ff2^(0+128)
 14017  2297  31AA  2206  31A2   	fcall	___flge
 14018  229A  1C03               	btfss	3,0
 14019  229B  2ACD               	goto	l7941
 14020                           
 14021                           ;common.c: 22:   fValue /= 10;
 14022  229C  3041               	movlw	65
 14023  229D  0140               	movlb	0	; select bank0
 14024  229E  00DE               	movwf	___fldiv@a+3
 14025  229F  3020               	movlw	32
 14026  22A0  00DD               	movwf	___fldiv@a+2
 14027  22A1  3000               	movlw	0
 14028  22A2  00DC               	movwf	___fldiv@a+1
 14029  22A3  3000               	movlw	0
 14030  22A4  00DB               	movwf	___fldiv@a
 14031  22A5  0141               	movlb	1	; select bank1
 14032  22A6  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14033  22A7  0140               	movlb	0	; select bank0
 14034  22A8  00E2               	movwf	___fldiv@b+3
 14035  22A9  0141               	movlb	1	; select bank1
 14036  22AA  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14037  22AB  0140               	movlb	0	; select bank0
 14038  22AC  00E1               	movwf	___fldiv@b+2
 14039  22AD  0141               	movlb	1	; select bank1
 14040  22AE  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14041  22AF  0140               	movlb	0	; select bank0
 14042  22B0  00E0               	movwf	___fldiv@b+1
 14043  22B1  0141               	movlb	1	; select bank1
 14044  22B2  0839               	movf	ftoa@fValue^(0+128),w
 14045  22B3  0140               	movlb	0	; select bank0
 14046  22B4  00DF               	movwf	___fldiv@b
 14047  22B5  319E  2628  31A2   	fcall	___fldiv
 14048  22B8  0140               	movlb	0	; select bank0
 14049  22B9  085E               	movf	?___fldiv+3,w
 14050  22BA  0141               	movlb	1	; select bank1
 14051  22BB  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 14052  22BC  0140               	movlb	0	; select bank0
 14053  22BD  085D               	movf	?___fldiv+2,w
 14054  22BE  0141               	movlb	1	; select bank1
 14055  22BF  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 14056  22C0  0140               	movlb	0	; select bank0
 14057  22C1  085C               	movf	?___fldiv+1,w
 14058  22C2  0141               	movlb	1	; select bank1
 14059  22C3  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 14060  22C4  0140               	movlb	0	; select bank0
 14061  22C5  085B               	movf	?___fldiv,w
 14062  22C6  0141               	movlb	1	; select bank1
 14063  22C7  00B9               	movwf	ftoa@fValue^(0+128)
 14064                           
 14065                           ;common.c: 23:   len++;
 14066  22C8  3001               	movlw	1
 14067  22C9  00BF               	movwf	??_ftoa^(0+128)
 14068  22CA  083F               	movf	??_ftoa^(0+128),w
 14069  22CB  07C1               	addwf	ftoa@len^(0+128),f
 14070  22CC  2A86               	goto	l7939
 14071  22CD                     l7941:	
 14072                           
 14073                           ;common.c: 25:  w = len + prec;
 14074  22CD  0141               	movlb	1	; select bank1
 14075  22CE  0841               	movf	ftoa@len^(0+128),w
 14076  22CF  073E               	addwf	ftoa@prec^(0+128),w
 14077  22D0  00BF               	movwf	??_ftoa^(0+128)
 14078  22D1  083F               	movf	??_ftoa^(0+128),w
 14079  22D2  00C4               	movwf	ftoa@w^(0+128)
 14080                           
 14081                           ;common.c: 26:  if (prec == 0)
 14082  22D3  083E               	movf	ftoa@prec^(0+128),w
 14083  22D4  1D03               	btfss	3,2
 14084  22D5  2ADA               	goto	l7949
 14085                           
 14086                           ;common.c: 27:   width++;
 14087  22D6  3001               	movlw	1
 14088  22D7  00BF               	movwf	??_ftoa^(0+128)
 14089  22D8  083F               	movf	??_ftoa^(0+128),w
 14090  22D9  07BD               	addwf	ftoa@width^(0+128),f
 14091  22DA                     l7949:	
 14092                           
 14093                           ;common.c: 28:  while(--width > w)
 14094  22DA  3001               	movlw	1
 14095  22DB  02BD               	subwf	ftoa@width^(0+128),f
 14096  22DC  083D               	movf	ftoa@width^(0+128),w
 14097  22DD  0244               	subwf	ftoa@w^(0+128),w
 14098  22DE  1803               	btfsc	3,0
 14099  22DF  2AF0               	goto	l7951
 14100                           
 14101                           ;common.c: 29:   str[pos++] = ' ';
 14102  22E0  3020               	movlw	32
 14103  22E1  00BF               	movwf	??_ftoa^(0+128)
 14104  22E2  0845               	movf	ftoa@pos^(0+128),w
 14105  22E3  0746               	addwf	ftoa@str^(0+128),w
 14106  22E4  00C0               	movwf	(??_ftoa+1)^(0+128)
 14107  22E5  0840               	movf	(??_ftoa+1)^(0+128),w
 14108  22E6  0086               	movwf	6
 14109  22E7  3001               	movlw	1	; select bank2/3
 14110  22E8  0087               	movwf	7
 14111  22E9  083F               	movf	??_ftoa^(0+128),w
 14112  22EA  0081               	movwf	1
 14113  22EB  3001               	movlw	1
 14114  22EC  00BF               	movwf	??_ftoa^(0+128)
 14115  22ED  083F               	movf	??_ftoa^(0+128),w
 14116  22EE  07C5               	addwf	ftoa@pos^(0+128),f
 14117  22EF  2ADA               	goto	l7949
 14118  22F0                     l7951:	
 14119                           
 14120                           ;common.c: 30:  if (sign)
 14121  22F0  0842               	movf	ftoa@sign^(0+128),w
 14122  22F1  1903               	btfsc	3,2
 14123  22F2  2B02               	goto	l7971
 14124                           
 14125                           ;common.c: 31:   str[pos++] = '-';
 14126  22F3  302D               	movlw	45
 14127  22F4                     L6:	
 14128  22F4  00BF               	movwf	??_ftoa^(0+128)
 14129  22F5  0845               	movf	ftoa@pos^(0+128),w
 14130  22F6  0746               	addwf	ftoa@str^(0+128),w
 14131  22F7  00C0               	movwf	(??_ftoa+1)^(0+128)
 14132  22F8  0840               	movf	(??_ftoa+1)^(0+128),w
 14133  22F9  0086               	movwf	6
 14134  22FA  3001               	movlw	1	; select bank2/3
 14135  22FB  0087               	movwf	7
 14136  22FC  083F               	movf	??_ftoa^(0+128),w
 14137  22FD  0081               	movwf	1
 14138  22FE  3001               	movlw	1
 14139  22FF  00BF               	movwf	??_ftoa^(0+128)
 14140  2300  083F               	movf	??_ftoa^(0+128),w
 14141  2301  07C5               	addwf	ftoa@pos^(0+128),f
 14142  2302                     l7971:	
 14143                           
 14144                           ;common.c: 32:  while(w--) {
 14145  2302  3001               	movlw	1
 14146  2303  02C4               	subwf	ftoa@w^(0+128),f
 14147  2304  0A44               	incf	ftoa@w^(0+128),w
 14148  2305  1903               	btfsc	3,2
 14149  2306  2B99               	goto	l7973
 14150                           
 14151                           ;common.c: 33:   intValue = fValue;
 14152  2307  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14153  2308  00AB               	movwf	(___fltol@f1+3)^(0+128)
 14154  2309  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14155  230A  00AA               	movwf	(___fltol@f1+2)^(0+128)
 14156  230B  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14157  230C  00A9               	movwf	(___fltol@f1+1)^(0+128)
 14158  230D  0839               	movf	ftoa@fValue^(0+128),w
 14159  230E  00A8               	movwf	___fltol@f1^(0+128)
 14160  230F  31A8  203E  31A2   	fcall	___fltol
 14161  2312  0141               	movlb	1	; select bank1
 14162  2313  0828               	movf	?___fltol^(0+128),w
 14163  2314  00BF               	movwf	??_ftoa^(0+128)
 14164  2315  083F               	movf	??_ftoa^(0+128),w
 14165  2316  00C3               	movwf	ftoa@intValue^(0+128)
 14166                           
 14167                           ;common.c: 34:   fValue = fValue * 10 - (10 * intValue);
 14168  2317  300A               	movlw	10
 14169  2318  0140               	movlb	0	; select bank0
 14170  2319  00AF               	movwf	___wmul@multiplicand
 14171  231A  3000               	movlw	0
 14172  231B  00B0               	movwf	___wmul@multiplicand+1
 14173  231C  0141               	movlb	1	; select bank1
 14174  231D  0843               	movf	ftoa@intValue^(0+128),w
 14175  231E  00BF               	movwf	??_ftoa^(0+128)
 14176  231F  01C0               	clrf	(??_ftoa^(0+128)+1)
 14177  2320  083F               	movf	??_ftoa^(0+128),w
 14178  2321  0140               	movlb	0	; select bank0
 14179  2322  00AD               	movwf	___wmul@multiplier
 14180  2323  0141               	movlb	1	; select bank1
 14181  2324  0840               	movf	(??_ftoa+1)^(0+128),w
 14182  2325  0140               	movlb	0	; select bank0
 14183  2326  00AE               	movwf	___wmul@multiplier+1
 14184  2327  31B1  21DE  31A2   	fcall	___wmul
 14185  232A  0140               	movlb	0	; select bank0
 14186  232B  082D               	movf	?___wmul,w
 14187  232C  00B3               	movwf	___xxtofl@val
 14188  232D  082E               	movf	?___wmul+1,w
 14189  232E  00B4               	movwf	___xxtofl@val+1
 14190  232F  0D89               	rlf	9,f
 14191  2330  3B89               	subwfb	9,f
 14192  2331  0989               	comf	9,f
 14193  2332  00B5               	movwf	___xxtofl@val+2
 14194  2333  00B6               	movwf	___xxtofl@val+3
 14195  2334  3001               	movlw	1
 14196  2335  31AC  240F  31A2   	fcall	___xxtofl
 14197  2338  0140               	movlb	0	; select bank0
 14198  2339  0836               	movf	?___xxtofl+3,w
 14199  233A  0141               	movlb	1	; select bank1
 14200  233B  00A3               	movwf	(___flsub@a+3)^(0+128)
 14201  233C  0140               	movlb	0	; select bank0
 14202  233D  0835               	movf	?___xxtofl+2,w
 14203  233E  0141               	movlb	1	; select bank1
 14204  233F  00A2               	movwf	(___flsub@a+2)^(0+128)
 14205  2340  0140               	movlb	0	; select bank0
 14206  2341  0834               	movf	?___xxtofl+1,w
 14207  2342  0141               	movlb	1	; select bank1
 14208  2343  00A1               	movwf	(___flsub@a+1)^(0+128)
 14209  2344  0140               	movlb	0	; select bank0
 14210  2345  0833               	movf	?___xxtofl,w
 14211  2346  0141               	movlb	1	; select bank1
 14212  2347  00A0               	movwf	___flsub@a^(0+128)
 14213  2348  3041               	movlw	65
 14214  2349  0140               	movlb	0	; select bank0
 14215  234A  00C4               	movwf	___flmul@b+3
 14216  234B  3020               	movlw	32
 14217  234C  00C3               	movwf	___flmul@b+2
 14218  234D  3000               	movlw	0
 14219  234E  00C2               	movwf	___flmul@b+1
 14220  234F  3000               	movlw	0
 14221  2350  00C1               	movwf	___flmul@b
 14222  2351  0141               	movlb	1	; select bank1
 14223  2352  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14224  2353  0140               	movlb	0	; select bank0
 14225  2354  00C8               	movwf	___flmul@a+3
 14226  2355  0141               	movlb	1	; select bank1
 14227  2356  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14228  2357  0140               	movlb	0	; select bank0
 14229  2358  00C7               	movwf	___flmul@a+2
 14230  2359  0141               	movlb	1	; select bank1
 14231  235A  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14232  235B  0140               	movlb	0	; select bank0
 14233  235C  00C6               	movwf	___flmul@a+1
 14234  235D  0141               	movlb	1	; select bank1
 14235  235E  0839               	movf	ftoa@fValue^(0+128),w
 14236  235F  0140               	movlb	0	; select bank0
 14237  2360  00C5               	movwf	___flmul@a
 14238  2361  3185  2561  31A2   	fcall	___flmul
 14239  2364  0140               	movlb	0	; select bank0
 14240  2365  0844               	movf	?___flmul+3,w
 14241  2366  0141               	movlb	1	; select bank1
 14242  2367  00A7               	movwf	(___flsub@b+3)^(0+128)
 14243  2368  0140               	movlb	0	; select bank0
 14244  2369  0843               	movf	?___flmul+2,w
 14245  236A  0141               	movlb	1	; select bank1
 14246  236B  00A6               	movwf	(___flsub@b+2)^(0+128)
 14247  236C  0140               	movlb	0	; select bank0
 14248  236D  0842               	movf	?___flmul+1,w
 14249  236E  0141               	movlb	1	; select bank1
 14250  236F  00A5               	movwf	(___flsub@b+1)^(0+128)
 14251  2370  0140               	movlb	0	; select bank0
 14252  2371  0841               	movf	?___flmul,w
 14253  2372  0141               	movlb	1	; select bank1
 14254  2373  00A4               	movwf	___flsub@b^(0+128)
 14255  2374  31B4  2405  31A2   	fcall	___flsub
 14256  2377  0141               	movlb	1	; select bank1
 14257  2378  0823               	movf	(?___flsub+3)^(0+128),w
 14258  2379  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 14259  237A  0822               	movf	(?___flsub+2)^(0+128),w
 14260  237B  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 14261  237C  0821               	movf	(?___flsub+1)^(0+128),w
 14262  237D  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 14263  237E  0820               	movf	?___flsub^(0+128),w
 14264  237F  00B9               	movwf	ftoa@fValue^(0+128)
 14265                           
 14266                           ;common.c: 35:   str[pos++] = intValue + '0';
 14267  2380  0843               	movf	ftoa@intValue^(0+128),w
 14268  2381  3E30               	addlw	48
 14269  2382  00BF               	movwf	??_ftoa^(0+128)
 14270  2383  0845               	movf	ftoa@pos^(0+128),w
 14271  2384  0746               	addwf	ftoa@str^(0+128),w
 14272  2385  00C0               	movwf	(??_ftoa+1)^(0+128)
 14273  2386  0840               	movf	(??_ftoa+1)^(0+128),w
 14274  2387  0086               	movwf	6
 14275  2388  3001               	movlw	1	; select bank2/3
 14276  2389  0087               	movwf	7
 14277  238A  083F               	movf	??_ftoa^(0+128),w
 14278  238B  0081               	movwf	1
 14279  238C  3001               	movlw	1
 14280  238D  00BF               	movwf	??_ftoa^(0+128)
 14281  238E  083F               	movf	??_ftoa^(0+128),w
 14282  238F  07C5               	addwf	ftoa@pos^(0+128),f
 14283                           
 14284                           ;common.c: 36:   if (w && (w == prec))
 14285  2390  0844               	movf	ftoa@w^(0+128),w
 14286  2391  1903               	btfsc	3,2
 14287  2392  2B02               	goto	l7971
 14288  2393  0844               	movf	ftoa@w^(0+128),w
 14289  2394  063E               	xorwf	ftoa@prec^(0+128),w
 14290  2395  1D03               	skipz
 14291  2396  2B02               	goto	l7971
 14292                           
 14293                           ;common.c: 37:    str[pos++] = '.';
 14294  2397  302E               	movlw	46
 14295  2398  2AF4               	goto	L6
 14296  2399                     l7973:	
 14297                           
 14298                           ;common.c: 40:  str[pos] = '\0';
 14299  2399  0845               	movf	ftoa@pos^(0+128),w
 14300  239A  0746               	addwf	ftoa@str^(0+128),w
 14301  239B  00BF               	movwf	??_ftoa^(0+128)
 14302  239C  083F               	movf	??_ftoa^(0+128),w
 14303  239D  0086               	movwf	6
 14304  239E  3001               	movlw	1	; select bank2/3
 14305  239F  0087               	movwf	7
 14306  23A0  0181               	clrf	1
 14307  23A1  0008               	return
 14308  23A2                     __end_of_ftoa:	
 14309                           
 14310                           	psect	text27
 14311  33A1                     __ptext27:	
 14312 ;; *************** function _OLED_print_xy *****************
 14313 ;; Defined at:
 14314 ;;		line 144 in file "oled.c"
 14315 ;; Parameters:    Size  Location     Type
 14316 ;;  col             1    wreg     unsigned char 
 14317 ;;  row             1   13[BANK0 ] unsigned char 
 14318 ;;  s               2   14[BANK0 ] PTR unsigned char 
 14319 ;;		 -> STR_87(4), systemCheck@str(3), STR_86(12), STR_85(13), 
 14320 ;;		 -> STR_84(13), STR_83(13), STR_82(13), STR_81(13), 
 14321 ;;		 -> STR_80(13), STR_79(13), STR_78(13), STR_77(13), 
 14322 ;;		 -> STR_76(13), STR_75(13), STR_74(13), STR_73(13), 
 14323 ;;		 -> STR_72(13), STR_71(13), STR_70(13), STR_69(13), 
 14324 ;;		 -> STR_68(13), STR_67(13), STR_66(13), STR_65(13), 
 14325 ;;		 -> STR_64(13), STR_63(13), STR_62(13), STR_61(9), 
 14326 ;;		 -> STR_60(2), STR_59(13), STR_58(9), STR_57(2), 
 14327 ;;		 -> STR_56(13), STR_55(3), STR_54(7), STR_53(13), 
 14328 ;;		 -> STR_52(10), STR_51(10), STR_50(3), STR_49(7), 
 14329 ;;		 -> STR_48(37), STR_47(8), STR_46(2), STR_45(13), 
 14330 ;;		 -> STR_44(13), STR_43(13), STR_42(8), STR_41(2), 
 14331 ;;		 -> STR_40(7), STR_39(6), STR_38(7), STR_37(6), 
 14332 ;;		 -> STR_36(13), STR_35(8), STR_34(13), STR_33(13), 
 14333 ;;		 -> STR_32(13), STR_31(13), STR_30(13), STR_29(13), 
 14334 ;;		 -> STR_28(13), STR_27(9), STR_26(8), STR_25(5), 
 14335 ;;		 -> STR_24(8), STR_23(5), STR_22(13), STR_21(13), 
 14336 ;;		 -> STR_20(13), STR_19(13), STR_18(13), STR_17(9), 
 14337 ;;		 -> STR_16(3), STR_15(3), STR_14(13), STR_13(13), 
 14338 ;;		 -> STR_12(3), STR_11(3), STR_10(4), STR_9(2), 
 14339 ;;		 -> STR_8(4), STR_7(8), STR_6(7), STR_5(8), 
 14340 ;;		 -> STR_4(2), STR_3(4), str(10), STR_2(8), 
 14341 ;;		 -> STR_1(57), 
 14342 ;; Auto vars:     Size  Location     Type
 14343 ;;  col             1   21[BANK0 ] unsigned char 
 14344 ;;  row_offsets     4   17[BANK0 ] unsigned char [4]
 14345 ;; Return value:  Size  Location     Type
 14346 ;;                  1    wreg      void 
 14347 ;; Registers used:
 14348 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14349 ;; Tracked objects:
 14350 ;;		On entry : 0/0
 14351 ;;		On exit  : 0/0
 14352 ;;		Unchanged: 0/0
 14353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14354 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14355 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14356 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14357 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14358 ;;Total ram usage:        9 bytes
 14359 ;; Hardware stack levels used:    1
 14360 ;; Hardware stack levels required when called:    6
 14361 ;; This function calls:
 14362 ;;		_OLED_command
 14363 ;;		_OLED_write
 14364 ;; This function is called by:
 14365 ;;		_statusView
 14366 ;;		_channelView
 14367 ;;		_channelSetup
 14368 ;;		_setOutputPower
 14369 ;;		_setLensDia
 14370 ;;		_setup
 14371 ;;		_setDPOffset
 14372 ;;		_setSkyTemp
 14373 ;;		_setFudgeFactor
 14374 ;;		_viewErrorMessage
 14375 ;;		_systemCheck
 14376 ;; This function uses a non-reentrant model
 14377 ;;
 14378                           
 14379                           
 14380                           ;psect for function _OLED_print_xy
 14381  33A1                     _OLED_print_xy:	
 14382                           
 14383                           ;incstack = 0
 14384                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14385                           ;OLED_print_xy@col stored from wreg
 14386  33A1  0140               	movlb	0	; select bank0
 14387  33A2  00B5               	movwf	OLED_print_xy@col
 14388                           
 14389                           ;oled.c: 144: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 145: {;oled.
      +                          c: 146:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 14390  33A3  0144               	movlb	4	; select bank4
 14391  33A4  086B               	movf	(OLED_print_xy@F7968+3)^(0+512),w
 14392  33A5  0140               	movlb	0	; select bank0
 14393  33A6  00B4               	movwf	OLED_print_xy@row_offsets+3
 14394  33A7  0144               	movlb	4	; select bank4
 14395  33A8  086A               	movf	(OLED_print_xy@F7968+2)^(0+512),w
 14396  33A9  0140               	movlb	0	; select bank0
 14397  33AA  00B3               	movwf	OLED_print_xy@row_offsets+2
 14398  33AB  0144               	movlb	4	; select bank4
 14399  33AC  0869               	movf	(OLED_print_xy@F7968+1)^(0+512),w
 14400  33AD  0140               	movlb	0	; select bank0
 14401  33AE  00B2               	movwf	OLED_print_xy@row_offsets+1
 14402  33AF  0144               	movlb	4	; select bank4
 14403  33B0  0868               	movf	OLED_print_xy@F7968^(0+512),w
 14404  33B1  0140               	movlb	0	; select bank0
 14405  33B2  00B1               	movwf	OLED_print_xy@row_offsets
 14406                           
 14407                           ;oled.c: 148:  OLED_command(0x80 | (col + row_offsets[row]));
 14408  33B3  082D               	movf	OLED_print_xy@row,w
 14409  33B4  3E31               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 14410  33B5  0086               	movwf	6
 14411  33B6  0187               	clrf	7
 14412  33B7  0801               	movf	1,w
 14413  33B8  0735               	addwf	OLED_print_xy@col,w
 14414  33B9  3880               	iorlw	128
 14415  33BA  31B1  2150  31B3   	fcall	_OLED_command
 14416  33BD                     l7877:	
 14417                           ;oled.c: 149:  while (*s != (char) ((void*)0)) {
 14418                           
 14419                           
 14420                           ;oled.c: 149:  while (*s != (char) ((void*)0)) {
 14421  33BD  0140               	movlb	0	; select bank0
 14422  33BE  082E               	movf	OLED_print_xy@s,w
 14423  33BF  0084               	movwf	4
 14424  33C0  082F               	movf	OLED_print_xy@s+1,w
 14425  33C1  0085               	movwf	5
 14426  33C2  0012               	moviw fsr0++
 14427  33C3  1903               	btfsc	3,2
 14428  33C4  0008               	return
 14429                           
 14430                           ;oled.c: 150:   OLED_write(*s++);
 14431  33C5  082E               	movf	OLED_print_xy@s,w
 14432  33C6  0084               	movwf	4
 14433  33C7  082F               	movf	OLED_print_xy@s+1,w
 14434  33C8  0085               	movwf	5
 14435  33C9  0800               	movf	0,w	;code access
 14436  33CA  31B1  2164  31B3   	fcall	_OLED_write
 14437  33CD  3001               	movlw	1
 14438  33CE  0140               	movlb	0	; select bank0
 14439  33CF  07AE               	addwf	OLED_print_xy@s,f
 14440  33D0  3000               	movlw	0
 14441  33D1  3DAF               	addwfc	OLED_print_xy@s+1,f
 14442  33D2  2BBD               	goto	l7877
 14443  33D3                     __end_of_OLED_print_xy:	
 14444                           
 14445                           	psect	text28
 14446  3606                     __ptext28:	
 14447 ;; *************** function _initialize *****************
 14448 ;; Defined at:
 14449 ;;		line 125 in file "main.c"
 14450 ;; Parameters:    Size  Location     Type
 14451 ;;		None
 14452 ;; Auto vars:     Size  Location     Type
 14453 ;;		None
 14454 ;; Return value:  Size  Location     Type
 14455 ;;                  1    wreg      void 
 14456 ;; Registers used:
 14457 ;;		wreg, status,2, status,0
 14458 ;; Tracked objects:
 14459 ;;		On entry : 0/0
 14460 ;;		On exit  : 0/0
 14461 ;;		Unchanged: 0/0
 14462 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14467 ;;Total ram usage:        0 bytes
 14468 ;; Hardware stack levels used:    1
 14469 ;; Hardware stack levels required when called:    3
 14470 ;; This function calls:
 14471 ;;		Nothing
 14472 ;; This function is called by:
 14473 ;;		_main
 14474 ;; This function uses a non-reentrant model
 14475 ;;
 14476                           
 14477                           
 14478                           ;psect for function _initialize
 14479  3606                     _initialize:	
 14480                           
 14481                           ;main.c: 127:  OSCFRQ = 0b00000010;
 14482                           
 14483                           ;incstack = 0
 14484                           ; Regs used in _initialize: [wreg+status,2+status,0]
 14485  3606  3002               	movlw	2
 14486  3607  0151               	movlb	17	; select bank17
 14487  3608  0093               	movwf	19	;volatile
 14488                           
 14489                           ;main.c: 128:  OSCCON1 = 0b01100000;
 14490  3609  3060               	movlw	96
 14491  360A  008D               	movwf	13	;volatile
 14492  360B                     l146:	
 14493                           ;main.c: 129:  while (!OSCCON3bits.ORDY);
 14494                           
 14495  360B  1E0F               	btfss	15,4	;volatile
 14496  360C  2E0B               	goto	l146
 14497                           
 14498                           ;main.c: 132:  RX1DTPPSbits.RX1DTPPS = 0x17;
 14499  360D  017D               	movlb	61	; select bank61
 14500  360E  084B               	movf	75,w	;volatile
 14501  360F  39C0               	andlw	-64
 14502  3610  3817               	iorlw	23
 14503  3611  00CB               	movwf	75	;volatile
 14504                           
 14505                           ;main.c: 133:  RC6PPS = 0x0F;
 14506  3612  300F               	movlw	15
 14507  3613  017E               	movlb	62	; select bank62
 14508  3614  00A6               	movwf	38	;volatile
 14509                           
 14510                           ;main.c: 136:  ANSELA = 0b01000000;
 14511  3615  3040               	movlw	64
 14512  3616  00B8               	movwf	56	;volatile
 14513                           
 14514                           ;main.c: 137:  ANSELB = 0b00000000;
 14515  3617  01C3               	clrf	67	;volatile
 14516                           
 14517                           ;main.c: 138:  ANSELC = 0b00000011;
 14518  3618  3003               	movlw	3
 14519  3619  00CE               	movwf	78	;volatile
 14520                           
 14521                           ;main.c: 141:  TRISA = 0b11110000;
 14522  361A  30F0               	movlw	240
 14523  361B  0140               	movlb	0	; select bank0
 14524  361C  0092               	movwf	18	;volatile
 14525                           
 14526                           ;main.c: 142:  TRISB = 0b00000000;
 14527  361D  0193               	clrf	19	;volatile
 14528                           
 14529                           ;main.c: 143:  TRISC = 0b10000111;
 14530  361E  3087               	movlw	135
 14531  361F  0094               	movwf	20	;volatile
 14532                           
 14533                           ;main.c: 144:  LATA = 0;
 14534  3620  0198               	clrf	24	;volatile
 14535                           
 14536                           ;main.c: 147:  ADCON0bits.ADON = 1;
 14537  3621  0141               	movlb	1	; select bank1
 14538  3622  141D               	bsf	29,0	;volatile
 14539                           
 14540                           ;main.c: 148:  ADCON1 = 0b11100000;
 14541  3623  30E0               	movlw	224
 14542  3624  009E               	movwf	30	;volatile
 14543                           
 14544                           ;main.c: 151:  T0CON0 = 0b10000000;
 14545  3625  3080               	movlw	128
 14546  3626  014B               	movlb	11	; select bank11
 14547  3627  009E               	movwf	30	;volatile
 14548                           
 14549                           ;main.c: 152:  T0CON1 = 0b01000111;
 14550  3628  3047               	movlw	71
 14551  3629  009F               	movwf	31	;volatile
 14552                           
 14553                           ;main.c: 153:  TMR0 = 178;
 14554  362A  30B2               	movlw	178
 14555  362B  009C               	movwf	28	;volatile
 14556                           
 14557                           ;main.c: 156:  T1CON = 0b00110011;
 14558  362C  3033               	movlw	51
 14559  362D  0144               	movlb	4	; select bank4
 14560  362E  008E               	movwf	14	;volatile
 14561                           
 14562                           ;main.c: 157:  T1CLK = 0b00000001;
 14563  362F  3001               	movlw	1
 14564  3630  0091               	movwf	17	;volatile
 14565                           
 14566                           ;main.c: 158:  TMR1 = 53035;
 14567  3631  30CF               	movlw	207
 14568  3632  008D               	movwf	13	;volatile
 14569  3633  302B               	movlw	43
 14570  3634  008C               	movwf	12	;volatile
 14571                           
 14572                           ;main.c: 161:  PIE0 = 0b00110000;
 14573  3635  3030               	movlw	48
 14574  3636  014E               	movlb	14	; select bank14
 14575  3637  0096               	movwf	22	;volatile
 14576                           
 14577                           ;main.c: 162:  PIE3 = 0b00100000;
 14578  3638  3020               	movlw	32
 14579  3639  0099               	movwf	25	;volatile
 14580                           
 14581                           ;main.c: 163:  PIE4 = 0b00000001;
 14582  363A  3001               	movlw	1
 14583  363B  009A               	movwf	26	;volatile
 14584                           
 14585                           ;main.c: 164:  INTCON = 0b11000000;
 14586  363C  30C0               	movlw	192
 14587  363D  008B               	movwf	11	;volatile
 14588                           
 14589                           ;main.c: 167:  IOCAP = 0b10110000;
 14590  363E  30B0               	movlw	176
 14591  363F  017E               	movlb	62	; select bank62
 14592  3640  00BD               	movwf	61	;volatile
 14593                           
 14594                           ;main.c: 168:  IOCAN = 0b10110000;
 14595  3641  30B0               	movlw	176
 14596  3642  00BE               	movwf	62	;volatile
 14597                           
 14598                           ;main.c: 169:  IOCCN = 0b00000100;
 14599  3643  3004               	movlw	4
 14600  3644  00D4               	movwf	84	;volatile
 14601                           
 14602                           ;main.c: 173:  BAUD1CON = 0b00001000;
 14603  3645  3008               	movlw	8
 14604  3646  0142               	movlb	2	; select bank2
 14605  3647  009F               	movwf	31	;volatile
 14606                           
 14607                           ;main.c: 174:  SPBRGL = 25;
 14608  3648  3019               	movlw	25
 14609  3649  009B               	movwf	27	;volatile
 14610                           
 14611                           ;main.c: 175:  RC1STA = 0b10010000;
 14612  364A  3090               	movlw	144
 14613  364B  009D               	movwf	29	;volatile
 14614                           
 14615                           ;main.c: 176:  TX1STA = 0b00100000;
 14616  364C  3020               	movlw	32
 14617  364D  009E               	movwf	30	;volatile
 14618  364E  0008               	return
 14619  364F                     __end_of_initialize:	
 14620                           
 14621                           	psect	text29
 14622  080C                     __ptext29:	
 14623 ;; *************** function _initGlobalData *****************
 14624 ;; Defined at:
 14625 ;;		line 91 in file "main.c"
 14626 ;; Parameters:    Size  Location     Type
 14627 ;;		None
 14628 ;; Auto vars:     Size  Location     Type
 14629 ;;  heater          2   24[BANK0 ] PTR struct .
 14630 ;;		 -> data.heater(124), data(166), 
 14631 ;;  n               1   23[BANK0 ] unsigned char 
 14632 ;; Return value:  Size  Location     Type
 14633 ;;                  1    wreg      void 
 14634 ;; Registers used:
 14635 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14636 ;; Tracked objects:
 14637 ;;		On entry : 0/0
 14638 ;;		On exit  : 0/0
 14639 ;;		Unchanged: 0/0
 14640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14641 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14642 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14643 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14644 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14645 ;;Total ram usage:        7 bytes
 14646 ;; Hardware stack levels used:    1
 14647 ;; Hardware stack levels required when called:    4
 14648 ;; This function calls:
 14649 ;;		___wmul
 14650 ;; This function is called by:
 14651 ;;		_main
 14652 ;; This function uses a non-reentrant model
 14653 ;;
 14654                           
 14655                           
 14656                           ;psect for function _initGlobalData
 14657  080C                     _initGlobalData:	
 14658                           
 14659                           ;main.c: 93:  uint8_t n;;main.c: 94:  t_heater *heater;;main.c: 96:  data.tempC = 0;
 14660                           
 14661                           ;incstack = 0
 14662                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14663  080C  304A               	movlw	74
 14664  080D  0086               	movwf	6
 14665  080E  3027               	movlw	39
 14666  080F  0087               	movwf	7
 14667  0810  3000               	movlw	0
 14668  0811  3FC0               	movwi [0]fsr1
 14669  0812  3000               	movlw	0
 14670  0813  3FC1               	movwi [1]fsr1
 14671  0814  3000               	movlw	0
 14672  0815  3FC2               	movwi [2]fsr1
 14673  0816  3000               	movlw	0
 14674  0817  3FC3               	movwi [3]fsr1
 14675                           
 14676                           ;main.c: 97:  data.relHum = 0;
 14677  0818  304A               	movlw	74
 14678  0819  0086               	movwf	6
 14679  081A  3027               	movlw	39
 14680  081B  0087               	movwf	7
 14681  081C  3144               	addfsr 1,4
 14682  081D  3000               	movlw	0
 14683  081E  3FC0               	movwi [0]fsr1
 14684  081F  3000               	movlw	0
 14685  0820  3FC1               	movwi [1]fsr1
 14686  0821  3000               	movlw	0
 14687  0822  3FC2               	movwi [2]fsr1
 14688  0823  3000               	movlw	0
 14689  0824  3FC3               	movwi [3]fsr1
 14690                           
 14691                           ;main.c: 98:  data.dewPointC = 0;
 14692  0825  304A               	movlw	74
 14693  0826  0086               	movwf	6
 14694  0827  3027               	movlw	39
 14695  0828  0087               	movwf	7
 14696  0829  3148               	addfsr 1,8
 14697  082A  3000               	movlw	0
 14698  082B  3FC0               	movwi [0]fsr1
 14699  082C  3000               	movlw	0
 14700  082D  3FC1               	movwi [1]fsr1
 14701  082E  3000               	movlw	0
 14702  082F  3FC2               	movwi [2]fsr1
 14703  0830  3000               	movlw	0
 14704  0831  3FC3               	movwi [3]fsr1
 14705                           
 14706                           ;main.c: 99:  data.sensorVersion = 0;
 14707  0832  304A               	movlw	74
 14708  0833  0086               	movwf	6
 14709  0834  3027               	movlw	39
 14710  0835  0087               	movwf	7
 14711  0836  314C               	addfsr 1,12
 14712  0837  0181               	clrf	1
 14713                           
 14714                           ;main.c: 100:  data.tempAux = 0;
 14715  0838  304A               	movlw	74
 14716  0839  0086               	movwf	6
 14717  083A  3027               	movlw	39
 14718  083B  0087               	movwf	7
 14719  083C  314D               	addfsr 1,13
 14720  083D  3000               	movlw	0
 14721  083E  3FC0               	movwi [0]fsr1
 14722  083F  3000               	movlw	0
 14723  0840  3FC1               	movwi [1]fsr1
 14724  0841  3000               	movlw	0
 14725  0842  3FC2               	movwi [2]fsr1
 14726  0843  3000               	movlw	0
 14727  0844  3FC3               	movwi [3]fsr1
 14728                           
 14729                           ;main.c: 101:  data.voltage = 0;
 14730  0845  304A               	movlw	74
 14731  0846  0086               	movwf	6
 14732  0847  3027               	movlw	39
 14733  0848  0087               	movwf	7
 14734  0849  3151               	addfsr 1,17
 14735  084A  3000               	movlw	0
 14736  084B  3FC0               	movwi [0]fsr1
 14737  084C  3000               	movlw	0
 14738  084D  3FC1               	movwi [1]fsr1
 14739  084E  3000               	movlw	0
 14740  084F  3FC2               	movwi [2]fsr1
 14741  0850  3000               	movlw	0
 14742  0851  3FC3               	movwi [3]fsr1
 14743                           
 14744                           ;main.c: 102:  data.current = 0;
 14745  0852  304A               	movlw	74
 14746  0853  0086               	movwf	6
 14747  0854  3027               	movlw	39
 14748  0855  0087               	movwf	7
 14749  0856  3155               	addfsr 1,21
 14750  0857  3000               	movlw	0
 14751  0858  3FC0               	movwi [0]fsr1
 14752  0859  3000               	movlw	0
 14753  085A  3FC1               	movwi [1]fsr1
 14754  085B  3000               	movlw	0
 14755  085C  3FC2               	movwi [2]fsr1
 14756  085D  3000               	movlw	0
 14757  085E  3FC3               	movwi [3]fsr1
 14758                           
 14759                           ;main.c: 103:  data.power = 0;
 14760  085F  304A               	movlw	74
 14761  0860  0086               	movwf	6
 14762  0861  3027               	movlw	39
 14763  0862  0087               	movwf	7
 14764  0863  3159               	addfsr 1,25
 14765  0864  3000               	movlw	0
 14766  0865  3FC0               	movwi [0]fsr1
 14767  0866  3000               	movlw	0
 14768  0867  3FC1               	movwi [1]fsr1
 14769  0868  3000               	movlw	0
 14770  0869  3FC2               	movwi [2]fsr1
 14771  086A  3000               	movlw	0
 14772  086B  3FC3               	movwi [3]fsr1
 14773                           
 14774                           ;main.c: 104:  data.dpOffset = 3.0;
 14775  086C  304A               	movlw	74
 14776  086D  0086               	movwf	6
 14777  086E  3027               	movlw	39
 14778  086F  0087               	movwf	7
 14779  0870  315D               	addfsr 1,29
 14780  0871  3000               	movlw	0
 14781  0872  3FC0               	movwi [0]fsr1
 14782  0873  3000               	movlw	0
 14783  0874  3FC1               	movwi [1]fsr1
 14784  0875  3040               	movlw	64
 14785  0876  3FC2               	movwi [2]fsr1
 14786  0877  3040               	movlw	64
 14787  0878  3FC3               	movwi [3]fsr1
 14788                           
 14789                           ;main.c: 105:  data.skyTemp = -40;
 14790  0879  306B               	movlw	107
 14791  087A  0086               	movwf	6
 14792  087B  3027               	movlw	39
 14793  087C  0087               	movwf	7
 14794  087D  3000               	movlw	0
 14795  087E  3FC0               	movwi [0]fsr1
 14796  087F  3000               	movlw	0
 14797  0880  3FC1               	movwi [1]fsr1
 14798  0881  3020               	movlw	32
 14799  0882  3FC2               	movwi [2]fsr1
 14800  0883  30C2               	movlw	194
 14801  0884  3FC3               	movwi [3]fsr1
 14802                           
 14803                           ;main.c: 106:  data.fudgeFactor = 1.0;
 14804  0885  306F               	movlw	111
 14805  0886  0086               	movwf	6
 14806  0887  3027               	movlw	39
 14807  0888  0087               	movwf	7
 14808  0889  3000               	movlw	0
 14809  088A  3FC0               	movwi [0]fsr1
 14810  088B  3000               	movlw	0
 14811  088C  3FC1               	movwi [1]fsr1
 14812  088D  3080               	movlw	128
 14813  088E  3FC2               	movwi [2]fsr1
 14814  088F  303F               	movlw	63
 14815  0890  3FC3               	movwi [3]fsr1
 14816                           
 14817                           ;main.c: 108:  for (n = 0; n < 4; n++) {
 14818  0891  0140               	movlb	0	; select bank0
 14819  0892  01B7               	clrf	initGlobalData@n
 14820  0893                     l8865:	
 14821                           
 14822                           ;main.c: 109:   heater = &(data.heater)[n];
 14823  0893  0837               	movf	initGlobalData@n,w
 14824  0894  00B3               	movwf	??_initGlobalData
 14825  0895  01B4               	clrf	??_initGlobalData+1
 14826  0896  0833               	movf	??_initGlobalData,w
 14827  0897  00AD               	movwf	___wmul@multiplier
 14828  0898  0834               	movf	??_initGlobalData+1,w
 14829  0899  00AE               	movwf	___wmul@multiplier+1
 14830  089A  301F               	movlw	31
 14831  089B  00AF               	movwf	___wmul@multiplicand
 14832  089C  3000               	movlw	0
 14833  089D  00B0               	movwf	___wmul@multiplicand+1
 14834  089E  31B1  21DE  3188   	fcall	___wmul
 14835  08A1  3074               	movlw	116
 14836  08A2  0140               	movlb	0	; select bank0
 14837  08A3  00B5               	movwf	??_initGlobalData+2
 14838  08A4  3027               	movlw	39
 14839  08A5  00B6               	movwf	??_initGlobalData+3
 14840  08A6  082D               	movf	?___wmul,w
 14841  08A7  0735               	addwf	??_initGlobalData+2,w
 14842  08A8  00B8               	movwf	initGlobalData@heater
 14843  08A9  082E               	movf	?___wmul+1,w
 14844  08AA  3D36               	addwfc	??_initGlobalData+3,w
 14845  08AB  00B9               	movwf	initGlobalData@heater+1
 14846                           
 14847                           ;main.c: 110:   heater->lensDia = 4;
 14848  08AC  0838               	movf	initGlobalData@heater,w
 14849  08AD  0086               	movwf	6
 14850  08AE  0839               	movf	initGlobalData@heater+1,w
 14851  08AF  0087               	movwf	7
 14852  08B0  3155               	addfsr 1,21
 14853  08B1  3000               	movlw	0
 14854  08B2  3FC0               	movwi [0]fsr1
 14855  08B3  3000               	movlw	0
 14856  08B4  3FC1               	movwi [1]fsr1
 14857  08B5  3080               	movlw	128
 14858  08B6  3FC2               	movwi [2]fsr1
 14859  08B7  3040               	movlw	64
 14860  08B8  3FC3               	movwi [3]fsr1
 14861                           
 14862                           ;main.c: 111:   heater->status = CH_UNCHECKED;
 14863  08B9  0838               	movf	initGlobalData@heater,w
 14864  08BA  3E1E               	addlw	30
 14865  08BB  00B3               	movwf	??_initGlobalData
 14866  08BC  3000               	movlw	0
 14867  08BD  3D39               	addwfc	initGlobalData@heater+1,w
 14868  08BE  00B4               	movwf	??_initGlobalData+1
 14869  08BF  0833               	movf	??_initGlobalData,w
 14870  08C0  0086               	movwf	6
 14871  08C1  0834               	movf	??_initGlobalData+1,w
 14872  08C2  0087               	movwf	7
 14873  08C3  3005               	movlw	5
 14874  08C4  0081               	movwf	1
 14875                           
 14876                           ;main.c: 112:   heater->mode = MODE_AUTO;
 14877  08C5  0838               	movf	initGlobalData@heater,w
 14878  08C6  3E1D               	addlw	29
 14879  08C7  00B3               	movwf	??_initGlobalData
 14880  08C8  3000               	movlw	0
 14881  08C9  3D39               	addwfc	initGlobalData@heater+1,w
 14882  08CA  00B4               	movwf	??_initGlobalData+1
 14883  08CB  0833               	movf	??_initGlobalData,w
 14884  08CC  0086               	movwf	6
 14885  08CD  0834               	movf	??_initGlobalData+1,w
 14886  08CE  0087               	movwf	7
 14887  08CF  3001               	movlw	1
 14888  08D0  0081               	movwf	1
 14889                           
 14890                           ;main.c: 113:   heater->Pmax = 0;
 14891  08D1  0838               	movf	initGlobalData@heater,w
 14892  08D2  0086               	movwf	6
 14893  08D3  0839               	movf	initGlobalData@heater+1,w
 14894  08D4  0087               	movwf	7
 14895  08D5  3144               	addfsr 1,4
 14896  08D6  3000               	movlw	0
 14897  08D7  3FC0               	movwi [0]fsr1
 14898  08D8  3000               	movlw	0
 14899  08D9  3FC1               	movwi [1]fsr1
 14900  08DA  3000               	movlw	0
 14901  08DB  3FC2               	movwi [2]fsr1
 14902  08DC  3000               	movlw	0
 14903  08DD  3FC3               	movwi [3]fsr1
 14904                           
 14905                           ;main.c: 114:   heater->Pset = -1;
 14906  08DE  0838               	movf	initGlobalData@heater,w
 14907  08DF  0086               	movwf	6
 14908  08E0  0839               	movf	initGlobalData@heater+1,w
 14909  08E1  0087               	movwf	7
 14910  08E2  3150               	addfsr 1,16
 14911  08E3  3000               	movlw	0
 14912  08E4  3FC0               	movwi [0]fsr1
 14913  08E5  3000               	movlw	0
 14914  08E6  3FC1               	movwi [1]fsr1
 14915  08E7  3080               	movlw	128
 14916  08E8  3FC2               	movwi [2]fsr1
 14917  08E9  30BF               	movlw	191
 14918  08EA  3FC3               	movwi [3]fsr1
 14919                           
 14920                           ;main.c: 115:   heater->Preq = 0;
 14921  08EB  0838               	movf	initGlobalData@heater,w
 14922  08EC  0086               	movwf	6
 14923  08ED  0839               	movf	initGlobalData@heater+1,w
 14924  08EE  0087               	movwf	7
 14925  08EF  3148               	addfsr 1,8
 14926  08F0  3000               	movlw	0
 14927  08F1  3FC0               	movwi [0]fsr1
 14928  08F2  3000               	movlw	0
 14929  08F3  3FC1               	movwi [1]fsr1
 14930  08F4  3000               	movlw	0
 14931  08F5  3FC2               	movwi [2]fsr1
 14932  08F6  3000               	movlw	0
 14933  08F7  3FC3               	movwi [3]fsr1
 14934                           
 14935                           ;main.c: 116:   heater->Patt = 0;
 14936  08F8  0838               	movf	initGlobalData@heater,w
 14937  08F9  0086               	movwf	6
 14938  08FA  0839               	movf	initGlobalData@heater+1,w
 14939  08FB  0087               	movwf	7
 14940  08FC  314C               	addfsr 1,12
 14941  08FD  3000               	movlw	0
 14942  08FE  3FC0               	movwi [0]fsr1
 14943  08FF  3000               	movlw	0
 14944  0900  3FC1               	movwi [1]fsr1
 14945  0901  3000               	movlw	0
 14946  0902  3FC2               	movwi [2]fsr1
 14947  0903  3000               	movlw	0
 14948  0904  3FC3               	movwi [3]fsr1
 14949                           
 14950                           ;main.c: 117:   heater->current = 0;
 14951  0905  0838               	movf	initGlobalData@heater,w
 14952  0906  0086               	movwf	6
 14953  0907  0839               	movf	initGlobalData@heater+1,w
 14954  0908  0087               	movwf	7
 14955  0909  3000               	movlw	0
 14956  090A  3FC0               	movwi [0]fsr1
 14957  090B  3000               	movlw	0
 14958  090C  3FC1               	movwi [1]fsr1
 14959  090D  3000               	movlw	0
 14960  090E  3FC2               	movwi [2]fsr1
 14961  090F  3000               	movlw	0
 14962  0910  3FC3               	movwi [3]fsr1
 14963                           
 14964                           ;main.c: 118:  }
 14965  0911  3001               	movlw	1
 14966  0912  00B3               	movwf	??_initGlobalData
 14967  0913  0833               	movf	??_initGlobalData,w
 14968  0914  07B7               	addwf	initGlobalData@n,f
 14969  0915  3004               	movlw	4
 14970  0916  0237               	subwf	initGlobalData@n,w
 14971  0917  1803               	btfsc	3,0
 14972  0918  0008               	return
 14973  0919  2893               	goto	l8865
 14974  091A                     __end_of_initGlobalData:	
 14975                           
 14976                           	psect	text30
 14977  31C6                     __ptext30:	
 14978 ;; *************** function _getLastError *****************
 14979 ;; Defined at:
 14980 ;;		line 24 in file "error.c"
 14981 ;; Parameters:    Size  Location     Type
 14982 ;;		None
 14983 ;; Auto vars:     Size  Location     Type
 14984 ;;		None
 14985 ;; Return value:  Size  Location     Type
 14986 ;;                  1    wreg      enum E8249
 14987 ;; Registers used:
 14988 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 14989 ;; Tracked objects:
 14990 ;;		On entry : 0/0
 14991 ;;		On exit  : 0/0
 14992 ;;		Unchanged: 0/0
 14993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14995 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14997 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14998 ;;Total ram usage:        4 bytes
 14999 ;; Hardware stack levels used:    1
 15000 ;; Hardware stack levels required when called:    3
 15001 ;; This function calls:
 15002 ;;		Nothing
 15003 ;; This function is called by:
 15004 ;;		_main
 15005 ;; This function uses a non-reentrant model
 15006 ;;
 15007                           
 15008                           
 15009                           ;psect for function _getLastError
 15010  31C6                     _getLastError:	
 15011                           
 15012                           ;error.c: 26:  return (head == tail) ? NO_ERROR : errorMessageQueue[tail];
 15013                           
 15014                           ;incstack = 0
 15015                           ; Regs used in _getLastError: [wreg+fsr1l+fsr1h+status,2+status,0]
 15016  31C6  0142               	movlb	2	; select bank2
 15017  31C7  0865               	movf	_head^(0+256),w
 15018  31C8  067C               	xorwf	_tail,w
 15019  31C9  1903               	skipnz
 15020  31CA  29D9               	goto	l9311
 15021  31CB  087C               	movf	_tail,w
 15022  31CC  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 15023  31CD  0086               	movwf	6
 15024  31CE  3002               	movlw	2	; select bank4/5
 15025  31CF  0087               	movwf	7
 15026  31D0  0801               	movf	1,w
 15027  31D1  0140               	movlb	0	; select bank0
 15028  31D2  00A0               	movwf	??_getLastError
 15029  31D3  01A1               	clrf	??_getLastError+1
 15030  31D4  0820               	movf	??_getLastError,w
 15031  31D5  00A2               	movwf	_getLastError$1381
 15032  31D6  0821               	movf	??_getLastError+1,w
 15033  31D7  00A3               	movwf	_getLastError$1381+1
 15034  31D8  29DC               	goto	l9313
 15035  31D9                     l9311:	
 15036  31D9  0140               	movlb	0	; select bank0
 15037  31DA  01A2               	clrf	_getLastError$1381
 15038  31DB  01A3               	clrf	_getLastError$1381+1
 15039  31DC                     l9313:	
 15040  31DC  0822               	movf	_getLastError$1381,w
 15041  31DD  0008               	return
 15042  31DE                     __end_of_getLastError:	
 15043                           
 15044                           	psect	text31
 15045  1ABE                     __ptext31:	
 15046 ;; *************** function _getAnalogValues *****************
 15047 ;; Defined at:
 15048 ;;		line 317 in file "system.c"
 15049 ;; Parameters:    Size  Location     Type
 15050 ;;		None
 15051 ;; Auto vars:     Size  Location     Type
 15052 ;;  adc             2   17[BANK1 ] unsigned short 
 15053 ;; Return value:  Size  Location     Type
 15054 ;;                  1    wreg      void 
 15055 ;; Registers used:
 15056 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15057 ;; Tracked objects:
 15058 ;;		On entry : 0/0
 15059 ;;		On exit  : 0/0
 15060 ;;		Unchanged: 0/0
 15061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15063 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15065 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15066 ;;Total ram usage:        6 bytes
 15067 ;; Hardware stack levels used:    1
 15068 ;; Hardware stack levels required when called:    5
 15069 ;; This function calls:
 15070 ;;		___fladd
 15071 ;;		___fldiv
 15072 ;;		___flmul
 15073 ;;		___xxtofl
 15074 ;;		_ema
 15075 ;;		_getAnalogValue
 15076 ;; This function is called by:
 15077 ;;		_main
 15078 ;; This function uses a non-reentrant model
 15079 ;;
 15080                           
 15081                           
 15082                           ;psect for function _getAnalogValues
 15083  1ABE                     _getAnalogValues:	
 15084                           
 15085                           ;system.c: 319:  static uint16_t avgT, avgV, avgI;;system.c: 320:  uint16_t adc;;system.
      +                          c: 322:  adc = getAnalogValue(0b000110);
 15086                           
 15087                           ;incstack = 0
 15088                           ; Regs used in _getAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15089  1ABE  3006               	movlw	6
 15090  1ABF  31B1  21FA  319A   	fcall	_getAnalogValue
 15091  1AC2  0140               	movlb	0	; select bank0
 15092  1AC3  0821               	movf	?_getAnalogValue+1,w
 15093  1AC4  0141               	movlb	1	; select bank1
 15094  1AC5  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 15095  1AC6  0140               	movlb	0	; select bank0
 15096  1AC7  0820               	movf	?_getAnalogValue,w
 15097  1AC8  0141               	movlb	1	; select bank1
 15098  1AC9  00B1               	movwf	getAnalogValues@adc^(0+128)
 15099                           
 15100                           ;system.c: 323:  avgT = ema(adc, avgT, ( (uint32_t)(0.5 * 65535) ));
 15101  1ACA  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 15102  1ACB  0140               	movlb	0	; select bank0
 15103  1ACC  00AD               	movwf	ema@in+1
 15104  1ACD  0141               	movlb	1	; select bank1
 15105  1ACE  0831               	movf	getAnalogValues@adc^(0+128),w
 15106  1ACF  0140               	movlb	0	; select bank0
 15107  1AD0  00AC               	movwf	ema@in
 15108  1AD1  0143               	movlb	3	; select bank3
 15109  1AD2  0863               	movf	(getAnalogValues@avgT+1)^(0+384),w
 15110  1AD3  0140               	movlb	0	; select bank0
 15111  1AD4  00AF               	movwf	ema@average+1
 15112  1AD5  0143               	movlb	3	; select bank3
 15113  1AD6  0862               	movf	getAnalogValues@avgT^(0+384),w
 15114  1AD7  0140               	movlb	0	; select bank0
 15115  1AD8  00AE               	movwf	ema@average
 15116  1AD9  3000               	movlw	0
 15117  1ADA  00B3               	movwf	ema@alpha+3
 15118  1ADB  3000               	movlw	0
 15119  1ADC  00B2               	movwf	ema@alpha+2
 15120  1ADD  307F               	movlw	127
 15121  1ADE  00B1               	movwf	ema@alpha+1
 15122  1ADF  30FF               	movlw	255
 15123  1AE0  00B0               	movwf	ema@alpha
 15124  1AE1  3190  2009  319A   	fcall	_ema
 15125  1AE4  0140               	movlb	0	; select bank0
 15126  1AE5  082D               	movf	?_ema+1,w
 15127  1AE6  0143               	movlb	3	; select bank3
 15128  1AE7  00E3               	movwf	(getAnalogValues@avgT+1)^(0+384)
 15129  1AE8  0140               	movlb	0	; select bank0
 15130  1AE9  082C               	movf	?_ema,w
 15131  1AEA  0143               	movlb	3	; select bank3
 15132  1AEB  00E2               	movwf	getAnalogValues@avgT^(0+384)
 15133                           
 15134                           ;system.c: 324:  adc = getAnalogValue(0b010000);
 15135  1AEC  3010               	movlw	16
 15136  1AED  31B1  21FA  319A   	fcall	_getAnalogValue
 15137  1AF0  0140               	movlb	0	; select bank0
 15138  1AF1  0821               	movf	?_getAnalogValue+1,w
 15139  1AF2  0141               	movlb	1	; select bank1
 15140  1AF3  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 15141  1AF4  0140               	movlb	0	; select bank0
 15142  1AF5  0820               	movf	?_getAnalogValue,w
 15143  1AF6  0141               	movlb	1	; select bank1
 15144  1AF7  00B1               	movwf	getAnalogValues@adc^(0+128)
 15145                           
 15146                           ;system.c: 325:  avgV = ema(adc, avgV, ( (uint32_t)(0.8 * 65535) ));
 15147  1AF8  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 15148  1AF9  0140               	movlb	0	; select bank0
 15149  1AFA  00AD               	movwf	ema@in+1
 15150  1AFB  0141               	movlb	1	; select bank1
 15151  1AFC  0831               	movf	getAnalogValues@adc^(0+128),w
 15152  1AFD  0140               	movlb	0	; select bank0
 15153  1AFE  00AC               	movwf	ema@in
 15154  1AFF  0143               	movlb	3	; select bank3
 15155  1B00  0861               	movf	(getAnalogValues@avgV+1)^(0+384),w
 15156  1B01  0140               	movlb	0	; select bank0
 15157  1B02  00AF               	movwf	ema@average+1
 15158  1B03  0143               	movlb	3	; select bank3
 15159  1B04  0860               	movf	getAnalogValues@avgV^(0+384),w
 15160  1B05  0140               	movlb	0	; select bank0
 15161  1B06  00AE               	movwf	ema@average
 15162  1B07  3000               	movlw	0
 15163  1B08  00B3               	movwf	ema@alpha+3
 15164  1B09  3000               	movlw	0
 15165  1B0A  00B2               	movwf	ema@alpha+2
 15166  1B0B  30CC               	movlw	204
 15167  1B0C  00B1               	movwf	ema@alpha+1
 15168  1B0D  30CC               	movlw	204
 15169  1B0E  00B0               	movwf	ema@alpha
 15170  1B0F  3190  2009  319A   	fcall	_ema
 15171  1B12  0140               	movlb	0	; select bank0
 15172  1B13  082D               	movf	?_ema+1,w
 15173  1B14  0143               	movlb	3	; select bank3
 15174  1B15  00E1               	movwf	(getAnalogValues@avgV+1)^(0+384)
 15175  1B16  0140               	movlb	0	; select bank0
 15176  1B17  082C               	movf	?_ema,w
 15177  1B18  0143               	movlb	3	; select bank3
 15178  1B19  00E0               	movwf	getAnalogValues@avgV^(0+384)
 15179                           
 15180                           ;system.c: 326:  adc = getAnalogValue(0b010001);
 15181  1B1A  3011               	movlw	17
 15182  1B1B  31B1  21FA  319A   	fcall	_getAnalogValue
 15183  1B1E  0140               	movlb	0	; select bank0
 15184  1B1F  0821               	movf	?_getAnalogValue+1,w
 15185  1B20  0141               	movlb	1	; select bank1
 15186  1B21  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 15187  1B22  0140               	movlb	0	; select bank0
 15188  1B23  0820               	movf	?_getAnalogValue,w
 15189  1B24  0141               	movlb	1	; select bank1
 15190  1B25  00B1               	movwf	getAnalogValues@adc^(0+128)
 15191                           
 15192                           ;system.c: 327:  avgI = ema(adc, avgI, ( (uint32_t)(0.3 * 65535) ));
 15193  1B26  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 15194  1B27  0140               	movlb	0	; select bank0
 15195  1B28  00AD               	movwf	ema@in+1
 15196  1B29  0141               	movlb	1	; select bank1
 15197  1B2A  0831               	movf	getAnalogValues@adc^(0+128),w
 15198  1B2B  0140               	movlb	0	; select bank0
 15199  1B2C  00AC               	movwf	ema@in
 15200  1B2D  0144               	movlb	4	; select bank4
 15201  1B2E  0837               	movf	(getAnalogValues@avgI+1)^(0+512),w
 15202  1B2F  0140               	movlb	0	; select bank0
 15203  1B30  00AF               	movwf	ema@average+1
 15204  1B31  0144               	movlb	4	; select bank4
 15205  1B32  0836               	movf	getAnalogValues@avgI^(0+512),w
 15206  1B33  0140               	movlb	0	; select bank0
 15207  1B34  00AE               	movwf	ema@average
 15208  1B35  3000               	movlw	0
 15209  1B36  00B3               	movwf	ema@alpha+3
 15210  1B37  3000               	movlw	0
 15211  1B38  00B2               	movwf	ema@alpha+2
 15212  1B39  304C               	movlw	76
 15213  1B3A  00B1               	movwf	ema@alpha+1
 15214  1B3B  30CC               	movlw	204
 15215  1B3C  00B0               	movwf	ema@alpha
 15216  1B3D  3190  2009  319A   	fcall	_ema
 15217  1B40  0140               	movlb	0	; select bank0
 15218  1B41  082D               	movf	?_ema+1,w
 15219  1B42  0144               	movlb	4	; select bank4
 15220  1B43  00B7               	movwf	(getAnalogValues@avgI+1)^(0+512)
 15221  1B44  0140               	movlb	0	; select bank0
 15222  1B45  082C               	movf	?_ema,w
 15223  1B46  0144               	movlb	4	; select bank4
 15224  1B47  00B6               	movwf	getAnalogValues@avgI^(0+512)
 15225                           
 15226                           ;system.c: 328:  data.tempAux = ( (avgT * 0.1191) - 34.512 );
 15227  1B48  30C2               	movlw	194
 15228  1B49  0140               	movlb	0	; select bank0
 15229  1B4A  00DE               	movwf	___fladd@b+3
 15230  1B4B  300A               	movlw	10
 15231  1B4C  00DD               	movwf	___fladd@b+2
 15232  1B4D  300C               	movlw	12
 15233  1B4E  00DC               	movwf	___fladd@b+1
 15234  1B4F  304A               	movlw	74
 15235  1B50  00DB               	movwf	___fladd@b
 15236  1B51  303D               	movlw	61
 15237  1B52  00C4               	movwf	___flmul@b+3
 15238  1B53  30F3               	movlw	243
 15239  1B54  00C3               	movwf	___flmul@b+2
 15240  1B55  30EA               	movlw	234
 15241  1B56  00C2               	movwf	___flmul@b+1
 15242  1B57  30B3               	movlw	179
 15243  1B58  00C1               	movwf	___flmul@b
 15244  1B59  0143               	movlb	3	; select bank3
 15245  1B5A  0862               	movf	getAnalogValues@avgT^(0+384),w
 15246  1B5B  0140               	movlb	0	; select bank0
 15247  1B5C  00B3               	movwf	___xxtofl@val
 15248  1B5D  0143               	movlb	3	; select bank3
 15249  1B5E  0863               	movf	(getAnalogValues@avgT+1)^(0+384),w
 15250  1B5F  0140               	movlb	0	; select bank0
 15251  1B60  00B4               	movwf	___xxtofl@val+1
 15252  1B61  01B5               	clrf	___xxtofl@val+2
 15253  1B62  01B6               	clrf	___xxtofl@val+3
 15254  1B63  3000               	movlw	0
 15255  1B64  31AC  240F  319A   	fcall	___xxtofl
 15256  1B67  0140               	movlb	0	; select bank0
 15257  1B68  0836               	movf	?___xxtofl+3,w
 15258  1B69  00C8               	movwf	___flmul@a+3
 15259  1B6A  0835               	movf	?___xxtofl+2,w
 15260  1B6B  00C7               	movwf	___flmul@a+2
 15261  1B6C  0834               	movf	?___xxtofl+1,w
 15262  1B6D  00C6               	movwf	___flmul@a+1
 15263  1B6E  0833               	movf	?___xxtofl,w
 15264  1B6F  00C5               	movwf	___flmul@a
 15265  1B70  3185  2561  319A   	fcall	___flmul
 15266  1B73  0140               	movlb	0	; select bank0
 15267  1B74  0844               	movf	?___flmul+3,w
 15268  1B75  00E2               	movwf	___fladd@a+3
 15269  1B76  0843               	movf	?___flmul+2,w
 15270  1B77  00E1               	movwf	___fladd@a+2
 15271  1B78  0842               	movf	?___flmul+1,w
 15272  1B79  00E0               	movwf	___fladd@a+1
 15273  1B7A  0841               	movf	?___flmul,w
 15274  1B7B  00DF               	movwf	___fladd@a
 15275  1B7C  3192  2250  319A   	fcall	___fladd
 15276  1B7F  304A               	movlw	74
 15277  1B80  0086               	movwf	6
 15278  1B81  3027               	movlw	39
 15279  1B82  0087               	movwf	7
 15280  1B83  314D               	addfsr 1,13
 15281  1B84  0140               	movlb	0	; select bank0
 15282  1B85  085B               	movf	?___fladd,w
 15283  1B86  3FC0               	movwi [0]fsr1
 15284  1B87  085C               	movf	?___fladd+1,w
 15285  1B88  3FC1               	movwi [1]fsr1
 15286  1B89  085D               	movf	?___fladd+2,w
 15287  1B8A  3FC2               	movwi [2]fsr1
 15288  1B8B  085E               	movf	?___fladd+3,w
 15289  1B8C  3FC3               	movwi [3]fsr1
 15290                           
 15291                           ;system.c: 329:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 15292  1B8D  3040               	movlw	64
 15293  1B8E  00C4               	movwf	___flmul@b+3
 15294  1B8F  30A0               	movlw	160
 15295  1B90  00C3               	movwf	___flmul@b+2
 15296  1B91  3000               	movlw	0
 15297  1B92  00C2               	movwf	___flmul@b+1
 15298  1B93  3000               	movlw	0
 15299  1B94  00C1               	movwf	___flmul@b
 15300  1B95  0143               	movlb	3	; select bank3
 15301  1B96  0860               	movf	getAnalogValues@avgV^(0+384),w
 15302  1B97  0140               	movlb	0	; select bank0
 15303  1B98  00B3               	movwf	___xxtofl@val
 15304  1B99  0143               	movlb	3	; select bank3
 15305  1B9A  0861               	movf	(getAnalogValues@avgV+1)^(0+384),w
 15306  1B9B  0140               	movlb	0	; select bank0
 15307  1B9C  00B4               	movwf	___xxtofl@val+1
 15308  1B9D  01B5               	clrf	___xxtofl@val+2
 15309  1B9E  01B6               	clrf	___xxtofl@val+3
 15310  1B9F  3000               	movlw	0
 15311  1BA0  31AC  240F  319A   	fcall	___xxtofl
 15312  1BA3  0140               	movlb	0	; select bank0
 15313  1BA4  0836               	movf	?___xxtofl+3,w
 15314  1BA5  00C8               	movwf	___flmul@a+3
 15315  1BA6  0835               	movf	?___xxtofl+2,w
 15316  1BA7  00C7               	movwf	___flmul@a+2
 15317  1BA8  0834               	movf	?___xxtofl+1,w
 15318  1BA9  00C6               	movwf	___flmul@a+1
 15319  1BAA  0833               	movf	?___xxtofl,w
 15320  1BAB  00C5               	movwf	___flmul@a
 15321  1BAC  3185  2561  319A   	fcall	___flmul
 15322  1BAF  0140               	movlb	0	; select bank0
 15323  1BB0  0844               	movf	?___flmul+3,w
 15324  1BB1  0141               	movlb	1	; select bank1
 15325  1BB2  00B0               	movwf	(_getAnalogValues$2784+3)^(0+128)
 15326  1BB3  0140               	movlb	0	; select bank0
 15327  1BB4  0843               	movf	?___flmul+2,w
 15328  1BB5  0141               	movlb	1	; select bank1
 15329  1BB6  00AF               	movwf	(_getAnalogValues$2784+2)^(0+128)
 15330  1BB7  0140               	movlb	0	; select bank0
 15331  1BB8  0842               	movf	?___flmul+1,w
 15332  1BB9  0141               	movlb	1	; select bank1
 15333  1BBA  00AE               	movwf	(_getAnalogValues$2784+1)^(0+128)
 15334  1BBB  0140               	movlb	0	; select bank0
 15335  1BBC  0841               	movf	?___flmul,w
 15336  1BBD  0141               	movlb	1	; select bank1
 15337  1BBE  00AD               	movwf	_getAnalogValues$2784^(0+128)
 15338                           
 15339                           ;system.c: 329:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 15340  1BBF  3047               	movlw	71
 15341  1BC0  0140               	movlb	0	; select bank0
 15342  1BC1  00DE               	movwf	___fldiv@a+3
 15343  1BC2  303B               	movlw	59
 15344  1BC3  00DD               	movwf	___fldiv@a+2
 15345  1BC4  30D1               	movlw	209
 15346  1BC5  00DC               	movwf	___fldiv@a+1
 15347  1BC6  3000               	movlw	0
 15348  1BC7  00DB               	movwf	___fldiv@a
 15349  1BC8  3043               	movlw	67
 15350  1BC9  00C4               	movwf	___flmul@b+3
 15351  1BCA  3045               	movlw	69
 15352  1BCB  00C3               	movwf	___flmul@b+2
 15353  1BCC  3000               	movlw	0
 15354  1BCD  00C2               	movwf	___flmul@b+1
 15355  1BCE  3000               	movlw	0
 15356  1BCF  00C1               	movwf	___flmul@b
 15357  1BD0  0141               	movlb	1	; select bank1
 15358  1BD1  0830               	movf	(_getAnalogValues$2784+3)^(0+128),w
 15359  1BD2  0140               	movlb	0	; select bank0
 15360  1BD3  00C8               	movwf	___flmul@a+3
 15361  1BD4  0141               	movlb	1	; select bank1
 15362  1BD5  082F               	movf	(_getAnalogValues$2784+2)^(0+128),w
 15363  1BD6  0140               	movlb	0	; select bank0
 15364  1BD7  00C7               	movwf	___flmul@a+2
 15365  1BD8  0141               	movlb	1	; select bank1
 15366  1BD9  082E               	movf	(_getAnalogValues$2784+1)^(0+128),w
 15367  1BDA  0140               	movlb	0	; select bank0
 15368  1BDB  00C6               	movwf	___flmul@a+1
 15369  1BDC  0141               	movlb	1	; select bank1
 15370  1BDD  082D               	movf	_getAnalogValues$2784^(0+128),w
 15371  1BDE  0140               	movlb	0	; select bank0
 15372  1BDF  00C5               	movwf	___flmul@a
 15373  1BE0  3185  2561  319A   	fcall	___flmul
 15374  1BE3  0140               	movlb	0	; select bank0
 15375  1BE4  0844               	movf	?___flmul+3,w
 15376  1BE5  00E2               	movwf	___fldiv@b+3
 15377  1BE6  0843               	movf	?___flmul+2,w
 15378  1BE7  00E1               	movwf	___fldiv@b+2
 15379  1BE8  0842               	movf	?___flmul+1,w
 15380  1BE9  00E0               	movwf	___fldiv@b+1
 15381  1BEA  0841               	movf	?___flmul,w
 15382  1BEB  00DF               	movwf	___fldiv@b
 15383  1BEC  319E  2628  319A   	fcall	___fldiv
 15384  1BEF  304A               	movlw	74
 15385  1BF0  0086               	movwf	6
 15386  1BF1  3027               	movlw	39
 15387  1BF2  0087               	movwf	7
 15388  1BF3  3151               	addfsr 1,17
 15389  1BF4  0140               	movlb	0	; select bank0
 15390  1BF5  085B               	movf	?___fldiv,w
 15391  1BF6  3FC0               	movwi [0]fsr1
 15392  1BF7  085C               	movf	?___fldiv+1,w
 15393  1BF8  3FC1               	movwi [1]fsr1
 15394  1BF9  085D               	movf	?___fldiv+2,w
 15395  1BFA  3FC2               	movwi [2]fsr1
 15396  1BFB  085E               	movf	?___fldiv+3,w
 15397  1BFC  3FC3               	movwi [3]fsr1
 15398                           
 15399                           ;system.c: 330:  data.current = ( (avgI * 5.0) / (1023.0 * 0.05 * 50.0) );
 15400  1BFD  3045               	movlw	69
 15401  1BFE  00DE               	movwf	___fldiv@a+3
 15402  1BFF  301F               	movlw	31
 15403  1C00  00DD               	movwf	___fldiv@a+2
 15404  1C01  30D8               	movlw	216
 15405  1C02  00DC               	movwf	___fldiv@a+1
 15406  1C03  3000               	movlw	0
 15407  1C04  00DB               	movwf	___fldiv@a
 15408  1C05  3040               	movlw	64
 15409  1C06  00C4               	movwf	___flmul@b+3
 15410  1C07  30A0               	movlw	160
 15411  1C08  00C3               	movwf	___flmul@b+2
 15412  1C09  3000               	movlw	0
 15413  1C0A  00C2               	movwf	___flmul@b+1
 15414  1C0B  3000               	movlw	0
 15415  1C0C  00C1               	movwf	___flmul@b
 15416  1C0D  0144               	movlb	4	; select bank4
 15417  1C0E  0836               	movf	getAnalogValues@avgI^(0+512),w
 15418  1C0F  0140               	movlb	0	; select bank0
 15419  1C10  00B3               	movwf	___xxtofl@val
 15420  1C11  0144               	movlb	4	; select bank4
 15421  1C12  0837               	movf	(getAnalogValues@avgI+1)^(0+512),w
 15422  1C13  0140               	movlb	0	; select bank0
 15423  1C14  00B4               	movwf	___xxtofl@val+1
 15424  1C15  01B5               	clrf	___xxtofl@val+2
 15425  1C16  01B6               	clrf	___xxtofl@val+3
 15426  1C17  3000               	movlw	0
 15427  1C18  31AC  240F  319A   	fcall	___xxtofl
 15428  1C1B  0140               	movlb	0	; select bank0
 15429  1C1C  0836               	movf	?___xxtofl+3,w
 15430  1C1D  00C8               	movwf	___flmul@a+3
 15431  1C1E  0835               	movf	?___xxtofl+2,w
 15432  1C1F  00C7               	movwf	___flmul@a+2
 15433  1C20  0834               	movf	?___xxtofl+1,w
 15434  1C21  00C6               	movwf	___flmul@a+1
 15435  1C22  0833               	movf	?___xxtofl,w
 15436  1C23  00C5               	movwf	___flmul@a
 15437  1C24  3185  2561  319A   	fcall	___flmul
 15438  1C27  0140               	movlb	0	; select bank0
 15439  1C28  0844               	movf	?___flmul+3,w
 15440  1C29  00E2               	movwf	___fldiv@b+3
 15441  1C2A  0843               	movf	?___flmul+2,w
 15442  1C2B  00E1               	movwf	___fldiv@b+2
 15443  1C2C  0842               	movf	?___flmul+1,w
 15444  1C2D  00E0               	movwf	___fldiv@b+1
 15445  1C2E  0841               	movf	?___flmul,w
 15446  1C2F  00DF               	movwf	___fldiv@b
 15447  1C30  319E  2628  319A   	fcall	___fldiv
 15448  1C33  304A               	movlw	74
 15449  1C34  0086               	movwf	6
 15450  1C35  3027               	movlw	39
 15451  1C36  0087               	movwf	7
 15452  1C37  3155               	addfsr 1,21
 15453  1C38  0140               	movlb	0	; select bank0
 15454  1C39  085B               	movf	?___fldiv,w
 15455  1C3A  3FC0               	movwi [0]fsr1
 15456  1C3B  085C               	movf	?___fldiv+1,w
 15457  1C3C  3FC1               	movwi [1]fsr1
 15458  1C3D  085D               	movf	?___fldiv+2,w
 15459  1C3E  3FC2               	movwi [2]fsr1
 15460  1C3F  085E               	movf	?___fldiv+3,w
 15461  1C40  3FC3               	movwi [3]fsr1
 15462                           
 15463                           ;system.c: 331:  data.power = data.voltage * data.current;
 15464  1C41  304A               	movlw	74
 15465  1C42  0086               	movwf	6
 15466  1C43  3027               	movlw	39
 15467  1C44  0087               	movwf	7
 15468  1C45  3155               	addfsr 1,21
 15469  1C46  3F40               	moviw [0]fsr1
 15470  1C47  00C1               	movwf	___flmul@b
 15471  1C48  3F41               	moviw [1]fsr1
 15472  1C49  00C2               	movwf	___flmul@b+1
 15473  1C4A  3F42               	moviw [2]fsr1
 15474  1C4B  00C3               	movwf	___flmul@b+2
 15475  1C4C  3F43               	moviw [3]fsr1
 15476  1C4D  00C4               	movwf	___flmul@b+3
 15477  1C4E  304A               	movlw	74
 15478  1C4F  0086               	movwf	6
 15479  1C50  3027               	movlw	39
 15480  1C51  0087               	movwf	7
 15481  1C52  3151               	addfsr 1,17
 15482  1C53  3F40               	moviw [0]fsr1
 15483  1C54  00C5               	movwf	___flmul@a
 15484  1C55  3F41               	moviw [1]fsr1
 15485  1C56  00C6               	movwf	___flmul@a+1
 15486  1C57  3F42               	moviw [2]fsr1
 15487  1C58  00C7               	movwf	___flmul@a+2
 15488  1C59  3F43               	moviw [3]fsr1
 15489  1C5A  00C8               	movwf	___flmul@a+3
 15490  1C5B  3185  2561         	fcall	___flmul
 15491  1C5D  304A               	movlw	74
 15492  1C5E  0086               	movwf	6
 15493  1C5F  3027               	movlw	39
 15494  1C60  0087               	movwf	7
 15495  1C61  3159               	addfsr 1,25
 15496  1C62  0140               	movlb	0	; select bank0
 15497  1C63  0841               	movf	?___flmul,w
 15498  1C64  3FC0               	movwi [0]fsr1
 15499  1C65  0842               	movf	?___flmul+1,w
 15500  1C66  3FC1               	movwi [1]fsr1
 15501  1C67  0843               	movf	?___flmul+2,w
 15502  1C68  3FC2               	movwi [2]fsr1
 15503  1C69  0844               	movf	?___flmul+3,w
 15504  1C6A  3FC3               	movwi [3]fsr1
 15505  1C6B  0008               	return
 15506  1C6C                     __end_of_getAnalogValues:	
 15507                           
 15508                           	psect	text32
 15509  2F3D                     __ptext32:	
 15510 ;; *************** function _controller *****************
 15511 ;; Defined at:
 15512 ;;		line 440 in file "system.c"
 15513 ;; Parameters:    Size  Location     Type
 15514 ;;		None
 15515 ;; Auto vars:     Size  Location     Type
 15516 ;;  tick            4   22[BANK0 ] unsigned long 
 15517 ;;  n               1   26[BANK0 ] unsigned char 
 15518 ;; Return value:  Size  Location     Type
 15519 ;;                  1    wreg      unsigned char 
 15520 ;; Registers used:
 15521 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15522 ;; Tracked objects:
 15523 ;;		On entry : 0/0
 15524 ;;		On exit  : 0/0
 15525 ;;		Unchanged: 0/0
 15526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15528 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15529 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15530 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15531 ;;Total ram usage:       10 bytes
 15532 ;; Hardware stack levels used:    1
 15533 ;; Hardware stack levels required when called:    4
 15534 ;; This function calls:
 15535 ;;		___bmul
 15536 ;;		_setChannelSwitch
 15537 ;;		_timeSince
 15538 ;; This function is called by:
 15539 ;;		_main
 15540 ;; This function uses a non-reentrant model
 15541 ;;
 15542                           
 15543                           
 15544                           ;psect for function _controller
 15545  2F3D                     _controller:	
 15546                           
 15547                           ;system.c: 442:  static uint32_t dutyCycleTimer;;system.c: 443:  uint32_t tick;;system.c
      +                          : 444:  static uint8_t idle;;system.c: 445:  uint8_t n;;system.c: 447:  if (idle) {
 15548                           
 15549                           ;incstack = 0
 15550                           ; Regs used in _controller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15551  2F3D  0142               	movlb	2	; select bank2
 15552  2F3E  0860               	movf	controller@idle^(0+256),w
 15553  2F3F  1903               	btfsc	3,2
 15554  2F40  2F4C               	goto	l9279
 15555                           
 15556                           ;system.c: 448:   dutyCycleTimer = tick100ms;
 15557  2F41  0144               	movlb	4	; select bank4
 15558  2F42  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 15559  2F43  00AD               	movwf	(controller@dutyCycleTimer+3)^(0+512)
 15560  2F44  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 15561  2F45  00AC               	movwf	(controller@dutyCycleTimer+2)^(0+512)
 15562  2F46  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 15563  2F47  00AB               	movwf	(controller@dutyCycleTimer+1)^(0+512)
 15564  2F48  0832               	movf	_tick100ms^(0+512),w	;volatile
 15565  2F49  00AA               	movwf	controller@dutyCycleTimer^(0+512)
 15566                           
 15567                           ;system.c: 449:   idle = 0;
 15568  2F4A  0142               	movlb	2	; select bank2
 15569  2F4B  01E0               	clrf	controller@idle^(0+256)
 15570  2F4C                     l9279:	
 15571                           
 15572                           ;system.c: 452:  tick = timeSince(dutyCycleTimer);
 15573  2F4C  0144               	movlb	4	; select bank4
 15574  2F4D  082D               	movf	(controller@dutyCycleTimer+3)^(0+512),w
 15575  2F4E  0140               	movlb	0	; select bank0
 15576  2F4F  00A3               	movwf	timeSince@since+3
 15577  2F50  0144               	movlb	4	; select bank4
 15578  2F51  082C               	movf	(controller@dutyCycleTimer+2)^(0+512),w
 15579  2F52  0140               	movlb	0	; select bank0
 15580  2F53  00A2               	movwf	timeSince@since+2
 15581  2F54  0144               	movlb	4	; select bank4
 15582  2F55  082B               	movf	(controller@dutyCycleTimer+1)^(0+512),w
 15583  2F56  0140               	movlb	0	; select bank0
 15584  2F57  00A1               	movwf	timeSince@since+1
 15585  2F58  0144               	movlb	4	; select bank4
 15586  2F59  082A               	movf	controller@dutyCycleTimer^(0+512),w
 15587  2F5A  0140               	movlb	0	; select bank0
 15588  2F5B  00A0               	movwf	timeSince@since
 15589  2F5C  31B6  26E4  31AF   	fcall	_timeSince
 15590  2F5F  0140               	movlb	0	; select bank0
 15591  2F60  0823               	movf	?_timeSince+3,w
 15592  2F61  00B9               	movwf	controller@tick+3
 15593  2F62  0822               	movf	?_timeSince+2,w
 15594  2F63  00B8               	movwf	controller@tick+2
 15595  2F64  0821               	movf	?_timeSince+1,w
 15596  2F65  00B7               	movwf	controller@tick+1
 15597  2F66  0820               	movf	?_timeSince,w
 15598  2F67  00B6               	movwf	controller@tick
 15599                           
 15600                           ;system.c: 453:  if (tick <= 100) {
 15601  2F68  0839               	movf	controller@tick+3,w
 15602  2F69  1D03               	btfss	3,2
 15603  2F6A  2FFA               	goto	l925
 15604  2F6B  0838               	movf	controller@tick+2,w
 15605  2F6C  1D03               	btfss	3,2
 15606  2F6D  2FFA               	goto	l925
 15607  2F6E  0837               	movf	controller@tick+1,w
 15608  2F6F  1D03               	btfss	3,2
 15609  2F70  2FFA               	goto	l925
 15610  2F71  3065               	movlw	101
 15611  2F72  0236               	subwf	controller@tick,w
 15612  2F73  1803               	btfsc	3,0
 15613  2F74  2FFA               	goto	l925
 15614                           
 15615                           ;system.c: 454:   for(n = 0; n < 4; n++) {
 15616  2F75  01BA               	clrf	controller@n
 15617  2F76                     l9289:	
 15618                           
 15619                           ;system.c: 455:    if (tick >= virtChannels[n].stop)
 15620  2F76  3009               	movlw	9
 15621  2F77  00B1               	movwf	??_controller
 15622  2F78  0831               	movf	??_controller,w
 15623  2F79  00A9               	movwf	___bmul@multiplicand
 15624  2F7A  083A               	movf	controller@n,w
 15625  2F7B  31B1  219D  31AF   	fcall	___bmul
 15626  2F7E  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 15627  2F7F  0086               	movwf	6
 15628  2F80  3002               	movlw	2	; select bank5/6
 15629  2F81  0087               	movwf	7
 15630  2F82  0801               	movf	1,w
 15631  2F83  0140               	movlb	0	; select bank0
 15632  2F84  00B2               	movwf	??_controller+1
 15633  2F85  01B3               	clrf	??_controller+2
 15634  2F86  01B4               	clrf	??_controller+3
 15635  2F87  01B5               	clrf	??_controller+4
 15636  2F88  0835               	movf	??_controller+4,w
 15637  2F89  0239               	subwf	controller@tick+3,w
 15638  2F8A  1D03               	skipz
 15639  2F8B  2F96               	goto	u10615
 15640  2F8C  0834               	movf	??_controller+3,w
 15641  2F8D  0238               	subwf	controller@tick+2,w
 15642  2F8E  1D03               	skipz
 15643  2F8F  2F96               	goto	u10615
 15644  2F90  0833               	movf	??_controller+2,w
 15645  2F91  0237               	subwf	controller@tick+1,w
 15646  2F92  1D03               	skipz
 15647  2F93  2F96               	goto	u10615
 15648  2F94  0832               	movf	??_controller+1,w
 15649  2F95  0236               	subwf	controller@tick,w
 15650  2F96                     u10615:	
 15651  2F96  1C03               	skipc
 15652  2F97  2F9A               	goto	l9293
 15653                           
 15654                           ;system.c: 456:     setChannelSwitch(virtChannels[n].phyChanNum, 0);
 15655  2F98  01AD               	clrf	setChannelSwitch@state
 15656  2F99  2FE0               	goto	L7
 15657  2F9A                     l9293:	
 15658  2F9A  3009               	movlw	9
 15659  2F9B  00B1               	movwf	??_controller
 15660  2F9C  0831               	movf	??_controller,w
 15661  2F9D  00A9               	movwf	___bmul@multiplicand
 15662  2F9E  083A               	movf	controller@n,w
 15663  2F9F  31B1  219D  31AF   	fcall	___bmul
 15664  2FA2  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 15665  2FA3  0086               	movwf	6
 15666  2FA4  3002               	movlw	2	; select bank5/6
 15667  2FA5  0087               	movwf	7
 15668  2FA6  0801               	movf	1,w
 15669  2FA7  0140               	movlb	0	; select bank0
 15670  2FA8  00B2               	movwf	??_controller+1
 15671  2FA9  01B3               	clrf	??_controller+2
 15672  2FAA  01B4               	clrf	??_controller+3
 15673  2FAB  01B5               	clrf	??_controller+4
 15674  2FAC  0835               	movf	??_controller+4,w
 15675  2FAD  0239               	subwf	controller@tick+3,w
 15676  2FAE  1D03               	skipz
 15677  2FAF  2FBA               	goto	u10625
 15678  2FB0  0834               	movf	??_controller+3,w
 15679  2FB1  0238               	subwf	controller@tick+2,w
 15680  2FB2  1D03               	skipz
 15681  2FB3  2FBA               	goto	u10625
 15682  2FB4  0833               	movf	??_controller+2,w
 15683  2FB5  0237               	subwf	controller@tick+1,w
 15684  2FB6  1D03               	skipz
 15685  2FB7  2FBA               	goto	u10625
 15686  2FB8  0832               	movf	??_controller+1,w
 15687  2FB9  0236               	subwf	controller@tick,w
 15688  2FBA                     u10625:	
 15689  2FBA  1C03               	skipc
 15690  2FBB  2FF0               	goto	l9299
 15691  2FBC  3009               	movlw	9
 15692  2FBD  00B1               	movwf	??_controller
 15693  2FBE  0831               	movf	??_controller,w
 15694  2FBF  00A9               	movwf	___bmul@multiplicand
 15695  2FC0  083A               	movf	controller@n,w
 15696  2FC1  31B1  219D  31AF   	fcall	___bmul
 15697  2FC4  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 15698  2FC5  0086               	movwf	6
 15699  2FC6  3002               	movlw	2	; select bank5/6
 15700  2FC7  0087               	movwf	7
 15701  2FC8  0801               	movf	1,w
 15702  2FC9  0140               	movlb	0	; select bank0
 15703  2FCA  00B2               	movwf	??_controller+1
 15704  2FCB  01B3               	clrf	??_controller+2
 15705  2FCC  01B4               	clrf	??_controller+3
 15706  2FCD  01B5               	clrf	??_controller+4
 15707  2FCE  0835               	movf	??_controller+4,w
 15708  2FCF  0239               	subwf	controller@tick+3,w
 15709  2FD0  1D03               	skipz
 15710  2FD1  2FDC               	goto	u10635
 15711  2FD2  0834               	movf	??_controller+3,w
 15712  2FD3  0238               	subwf	controller@tick+2,w
 15713  2FD4  1D03               	skipz
 15714  2FD5  2FDC               	goto	u10635
 15715  2FD6  0833               	movf	??_controller+2,w
 15716  2FD7  0237               	subwf	controller@tick+1,w
 15717  2FD8  1D03               	skipz
 15718  2FD9  2FDC               	goto	u10635
 15719  2FDA  0832               	movf	??_controller+1,w
 15720  2FDB  0236               	subwf	controller@tick,w
 15721  2FDC                     u10635:	
 15722  2FDC  1803               	skipnc
 15723  2FDD  2FF0               	goto	l9299
 15724                           
 15725                           ;system.c: 458:     setChannelSwitch(virtChannels[n].phyChanNum, 1);
 15726  2FDE  01AD               	clrf	setChannelSwitch@state
 15727  2FDF  0AAD               	incf	setChannelSwitch@state,f
 15728  2FE0                     L7:	
 15729  2FE0  3009               	movlw	9
 15730  2FE1  00B1               	movwf	??_controller
 15731  2FE2  0831               	movf	??_controller,w
 15732  2FE3  00A9               	movwf	___bmul@multiplicand
 15733  2FE4  083A               	movf	controller@n,w
 15734  2FE5  31B1  219D  31AF   	fcall	___bmul
 15735  2FE8  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 15736  2FE9  0086               	movwf	6
 15737  2FEA  3002               	movlw	2	; select bank5/6
 15738  2FEB  0087               	movwf	7
 15739  2FEC  0801               	movf	1,w
 15740  2FED  31B5  2576  31AF   	fcall	_setChannelSwitch
 15741  2FF0                     l9299:	
 15742                           
 15743                           ;system.c: 459:   }
 15744  2FF0  3001               	movlw	1
 15745  2FF1  0140               	movlb	0	; select bank0
 15746  2FF2  00B1               	movwf	??_controller
 15747  2FF3  0831               	movf	??_controller,w
 15748  2FF4  07BA               	addwf	controller@n,f
 15749  2FF5  3004               	movlw	4
 15750  2FF6  023A               	subwf	controller@n,w
 15751  2FF7  1803               	btfsc	3,0
 15752  2FF8  2FFD               	goto	l9303
 15753  2FF9  2F76               	goto	l9289
 15754  2FFA                     l925:	
 15755                           
 15756                           ;system.c: 461:   idle = 1;
 15757  2FFA  0142               	movlb	2	; select bank2
 15758  2FFB  01E0               	clrf	controller@idle^(0+256)
 15759  2FFC  0AE0               	incf	controller@idle^(0+256),f
 15760  2FFD                     l9303:	
 15761                           
 15762                           ;system.c: 464:  return idle;
 15763  2FFD  0142               	movlb	2	; select bank2
 15764  2FFE  0860               	movf	controller@idle^(0+256),w
 15765  2FFF  0008               	return
 15766  3000                     __end_of_controller:	
 15767                           
 15768                           	psect	text33
 15769  211B                     __ptext33:	
 15770 ;; *************** function _checkSensor *****************
 15771 ;; Defined at:
 15772 ;;		line 207 in file "system.c"
 15773 ;; Parameters:    Size  Location     Type
 15774 ;;		None
 15775 ;; Auto vars:     Size  Location     Type
 15776 ;;  dp              2    0        PTR struct .
 15777 ;; Return value:  Size  Location     Type
 15778 ;;                  1    wreg      unsigned char 
 15779 ;; Registers used:
 15780 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15781 ;; Tracked objects:
 15782 ;;		On entry : 0/0
 15783 ;;		On exit  : 0/0
 15784 ;;		Unchanged: 0/0
 15785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15786 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15787 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15788 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15789 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15790 ;;Total ram usage:        2 bytes
 15791 ;; Hardware stack levels used:    1
 15792 ;; Hardware stack levels required when called:    5
 15793 ;; This function calls:
 15794 ;;		___flge
 15795 ;;		_error
 15796 ;;		_timeSince
 15797 ;;		_uartReset
 15798 ;;		_uartSendByte
 15799 ;; This function is called by:
 15800 ;;		_main
 15801 ;; This function uses a non-reentrant model
 15802 ;;
 15803                           
 15804                           
 15805                           ;psect for function _checkSensor
 15806  211B                     _checkSensor:	
 15807                           
 15808                           ;system.c: 209:  t_dataPacket *dp;;system.c: 210:  static uint32_t sensorUpdateInterval 
      +                          = 100;;system.c: 211:  static uint32_t sensorTimeout = 0;;system.c: 212:  static uint8_t
      +                           state = 0;;system.c: 215:  if ((data.tempAux < -30) || (data.tempAux > 60)) {
 15809                           
 15810                           ;incstack = 0
 15811                           ; Regs used in _checkSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15812  211B  304A               	movlw	74
 15813  211C  0086               	movwf	6
 15814  211D  3027               	movlw	39
 15815  211E  0087               	movwf	7
 15816  211F  314D               	addfsr 1,13
 15817  2120  3F40               	moviw [0]fsr1
 15818  2121  0141               	movlb	1	; select bank1
 15819  2122  00AD               	movwf	___flge@ff1^(0+128)
 15820  2123  3F41               	moviw [1]fsr1
 15821  2124  00AE               	movwf	(___flge@ff1+1)^(0+128)
 15822  2125  3F42               	moviw [2]fsr1
 15823  2126  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15824  2127  3F43               	moviw [3]fsr1
 15825  2128  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15826  2129  30C1               	movlw	193
 15827  212A  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15828  212B  30F0               	movlw	240
 15829  212C  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15830  212D  3000               	movlw	0
 15831  212E  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15832  212F  3000               	movlw	0
 15833  2130  00B1               	movwf	___flge@ff2^(0+128)
 15834  2131  31AA  2206  31A1   	fcall	___flge
 15835  2134  1C03               	btfss	3,0
 15836  2135  2951               	goto	l8993
 15837  2136  3042               	movlw	66
 15838  2137  0141               	movlb	1	; select bank1
 15839  2138  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15840  2139  3070               	movlw	112
 15841  213A  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15842  213B  3000               	movlw	0
 15843  213C  00AE               	movwf	(___flge@ff1+1)^(0+128)
 15844  213D  3000               	movlw	0
 15845  213E  00AD               	movwf	___flge@ff1^(0+128)
 15846  213F  304A               	movlw	74
 15847  2140  0086               	movwf	6
 15848  2141  3027               	movlw	39
 15849  2142  0087               	movwf	7
 15850  2143  314D               	addfsr 1,13
 15851  2144  3F40               	moviw [0]fsr1
 15852  2145  00B1               	movwf	___flge@ff2^(0+128)
 15853  2146  3F41               	moviw [1]fsr1
 15854  2147  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15855  2148  3F42               	moviw [2]fsr1
 15856  2149  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15857  214A  3F43               	moviw [3]fsr1
 15858  214B  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15859  214C  31AA  2206  31A1   	fcall	___flge
 15860  214F  1803               	btfsc	3,0
 15861  2150  2957               	goto	l8995
 15862  2151                     l8993:	
 15863                           
 15864                           ;system.c: 216:   data.status.AUX_SENSOR_OK = 0;
 15865  2151  3073               	movlw	115
 15866  2152  0086               	movwf	6
 15867  2153  3027               	movlw	39
 15868  2154  0087               	movwf	7
 15869  2155  1201               	bcf	1,4
 15870                           
 15871                           ;system.c: 217:  } else
 15872  2156  2A27               	goto	l9051
 15873  2157                     l8995:	
 15874                           
 15875                           ;system.c: 218:   data.status.AUX_SENSOR_OK = 1;
 15876  2157  3073               	movlw	115
 15877  2158  0086               	movwf	6
 15878  2159  3027               	movlw	39
 15879  215A  0087               	movwf	7
 15880  215B  1601               	bsf	1,4
 15881  215C  2A27               	goto	l9051
 15882  215D                     l8997:	
 15883                           
 15884                           ;system.c: 223:   if (timeSince(sensorUpdateInterval) >= 100) {
 15885  215D  0144               	movlb	4	; select bank4
 15886  215E  0867               	movf	(checkSensor@sensorUpdateInterval+3)^(0+512),w
 15887  215F  0140               	movlb	0	; select bank0
 15888  2160  00A3               	movwf	timeSince@since+3
 15889  2161  0144               	movlb	4	; select bank4
 15890  2162  0866               	movf	(checkSensor@sensorUpdateInterval+2)^(0+512),w
 15891  2163  0140               	movlb	0	; select bank0
 15892  2164  00A2               	movwf	timeSince@since+2
 15893  2165  0144               	movlb	4	; select bank4
 15894  2166  0865               	movf	(checkSensor@sensorUpdateInterval+1)^(0+512),w
 15895  2167  0140               	movlb	0	; select bank0
 15896  2168  00A1               	movwf	timeSince@since+1
 15897  2169  0144               	movlb	4	; select bank4
 15898  216A  0864               	movf	checkSensor@sensorUpdateInterval^(0+512),w
 15899  216B  0140               	movlb	0	; select bank0
 15900  216C  00A0               	movwf	timeSince@since
 15901  216D  31B6  26E4  31A1   	fcall	_timeSince
 15902  2170  0140               	movlb	0	; select bank0
 15903  2171  0823               	movf	?_timeSince+3,w
 15904  2172  1D03               	btfss	3,2
 15905  2173  297E               	goto	l8999
 15906  2174  0822               	movf	?_timeSince+2,w
 15907  2175  1D03               	btfss	3,2
 15908  2176  297E               	goto	l8999
 15909  2177  0821               	movf	?_timeSince+1,w
 15910  2178  1D03               	btfss	3,2
 15911  2179  297E               	goto	l8999
 15912  217A  3064               	movlw	100
 15913  217B  0220               	subwf	?_timeSince,w
 15914  217C  1C03               	btfss	3,0
 15915  217D  2A39               	goto	l9053
 15916  217E                     l8999:	
 15917                           
 15918                           ;system.c: 224:    sensorUpdateInterval = sensorTimeout = tick100ms;
 15919  217E  0144               	movlb	4	; select bank4
 15920  217F  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 15921  2180  00B1               	movwf	(checkSensor@sensorTimeout+3)^(0+512)
 15922  2181  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 15923  2182  00B0               	movwf	(checkSensor@sensorTimeout+2)^(0+512)
 15924  2183  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 15925  2184  00AF               	movwf	(checkSensor@sensorTimeout+1)^(0+512)
 15926  2185  0832               	movf	_tick100ms^(0+512),w	;volatile
 15927  2186  00AE               	movwf	checkSensor@sensorTimeout^(0+512)
 15928  2187  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 15929  2188  00E7               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+512)
 15930  2189  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 15931  218A  00E6               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+512)
 15932  218B  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 15933  218C  00E5               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+512)
 15934  218D  082E               	movf	checkSensor@sensorTimeout^(0+512),w
 15935  218E  00E4               	movwf	checkSensor@sensorUpdateInterval^(0+512)
 15936                           
 15937                           ;system.c: 225:    uartSendByte('?');
 15938  218F  303F               	movlw	63
 15939  2190  31B1  215A  31A1   	fcall	_uartSendByte
 15940                           
 15941                           ;system.c: 226:    state = 1;
 15942  2193  0142               	movlb	2	; select bank2
 15943  2194  01E1               	clrf	checkSensor@state^(0+256)
 15944  2195  0AE1               	incf	checkSensor@state^(0+256),f
 15945  2196  2A39               	goto	l9053
 15946  2197                     l9005:	
 15947                           
 15948                           ;system.c: 231:   if (timeSince(sensorTimeout) > 20) {
 15949  2197  0144               	movlb	4	; select bank4
 15950  2198  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 15951  2199  0140               	movlb	0	; select bank0
 15952  219A  00A3               	movwf	timeSince@since+3
 15953  219B  0144               	movlb	4	; select bank4
 15954  219C  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 15955  219D  0140               	movlb	0	; select bank0
 15956  219E  00A2               	movwf	timeSince@since+2
 15957  219F  0144               	movlb	4	; select bank4
 15958  21A0  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 15959  21A1  0140               	movlb	0	; select bank0
 15960  21A2  00A1               	movwf	timeSince@since+1
 15961  21A3  0144               	movlb	4	; select bank4
 15962  21A4  082E               	movf	checkSensor@sensorTimeout^(0+512),w
 15963  21A5  0140               	movlb	0	; select bank0
 15964  21A6  00A0               	movwf	timeSince@since
 15965  21A7  31B6  26E4  31A1   	fcall	_timeSince
 15966  21AA  0140               	movlb	0	; select bank0
 15967  21AB  0823               	movf	?_timeSince+3,w
 15968  21AC  1D03               	btfss	3,2
 15969  21AD  29B8               	goto	l9007
 15970  21AE  0822               	movf	?_timeSince+2,w
 15971  21AF  1D03               	btfss	3,2
 15972  21B0  29B8               	goto	l9007
 15973  21B1  0821               	movf	?_timeSince+1,w
 15974  21B2  1D03               	btfss	3,2
 15975  21B3  29B8               	goto	l9007
 15976  21B4  3015               	movlw	21
 15977  21B5  0220               	subwf	?_timeSince,w
 15978  21B6  1C03               	btfss	3,0
 15979  21B7  29CD               	goto	l9017
 15980  21B8                     l9007:	
 15981                           
 15982                           ;system.c: 232:    if (data.status.SENSOR_OK) {
 15983  21B8  3073               	movlw	115
 15984  21B9  0086               	movwf	6
 15985  21BA  3027               	movlw	39
 15986  21BB  0087               	movwf	7
 15987  21BC  1D81               	btfss	1,3
 15988  21BD  29C7               	goto	l9013
 15989                           
 15990                           ;system.c: 233:     data.status.SENSOR_OK = 0;
 15991  21BE  3073               	movlw	115
 15992  21BF  0086               	movwf	6
 15993  21C0  3027               	movlw	39
 15994  21C1  0087               	movwf	7
 15995  21C2  1181               	bcf	1,3
 15996                           
 15997                           ;system.c: 234:     error(WARN_SENSOR_TIMEOUT);
 15998  21C3  3007               	movlw	7
 15999  21C4  3198  2000  31A1   	fcall	_error
 16000  21C7                     l9013:	
 16001                           
 16002                           ;system.c: 236:    state = 0;
 16003  21C7  0142               	movlb	2	; select bank2
 16004  21C8  01E1               	clrf	checkSensor@state^(0+256)
 16005                           
 16006                           ;system.c: 237:    uartReset();
 16007  21C9  31B1  2148  31A1   	fcall	_uartReset
 16008                           
 16009                           ;system.c: 238:   } else if (uartDataReadyFlag) {
 16010  21CC  2A39               	goto	l9053
 16011  21CD                     l9017:	
 16012  21CD  0142               	movlb	2	; select bank2
 16013  21CE  086D               	movf	_uartDataReadyFlag^(0+256),w	;volatile
 16014  21CF  1903               	btfsc	3,2
 16015  21D0  2A39               	goto	l9053
 16016                           
 16017                           ;system.c: 239:    uartDataReadyFlag = 0;
 16018  21D1  01ED               	clrf	_uartDataReadyFlag^(0+256)	;volatile
 16019                           
 16020                           ;system.c: 241:    if ((dataPacket.header == 0xAA) && (dataPacket.status == 1)) {
 16021  21D2  30AA               	movlw	170
 16022  21D3  0144               	movlb	4	; select bank4
 16023  21D4  0638               	xorwf	_dataPacket^(0+512),w	;volatile
 16024  21D5  1D03               	btfss	3,2
 16025  21D6  2A12               	goto	l9039
 16026  21D7  033A               	decf	(_dataPacket^(0+512)+2),w	;volatile
 16027  21D8  1D03               	btfss	3,2
 16028  21D9  2A12               	goto	l9039
 16029                           
 16030                           ;system.c: 242:     data.tempC = dataPacket.tempC;
 16031  21DA  304A               	movlw	74
 16032  21DB  0086               	movwf	6
 16033  21DC  3027               	movlw	39
 16034  21DD  0087               	movwf	7
 16035  21DE  083B               	movf	(_dataPacket^(0+512)+3),w	;volatile
 16036  21DF  3FC0               	movwi [0]fsr1
 16037  21E0  083C               	movf	((_dataPacket+1)^(0+512)+3),w	;volatile
 16038  21E1  3FC1               	movwi [1]fsr1
 16039  21E2  083D               	movf	((_dataPacket+2)^(0+512)+3),w	;volatile
 16040  21E3  3FC2               	movwi [2]fsr1
 16041  21E4  083E               	movf	((_dataPacket+3)^(0+512)+3),w	;volatile
 16042  21E5  3FC3               	movwi [3]fsr1
 16043                           
 16044                           ;system.c: 243:     data.relHum = dataPacket.relHum;
 16045  21E6  304A               	movlw	74
 16046  21E7  0086               	movwf	6
 16047  21E8  3027               	movlw	39
 16048  21E9  0087               	movwf	7
 16049  21EA  3144               	addfsr 1,4
 16050  21EB  083F               	movf	(_dataPacket^(0+512)+7),w	;volatile
 16051  21EC  3FC0               	movwi [0]fsr1
 16052  21ED  0840               	movf	((_dataPacket+1)^(0+512)+7),w	;volatile
 16053  21EE  3FC1               	movwi [1]fsr1
 16054  21EF  0841               	movf	((_dataPacket+2)^(0+512)+7),w	;volatile
 16055  21F0  3FC2               	movwi [2]fsr1
 16056  21F1  0842               	movf	((_dataPacket+3)^(0+512)+7),w	;volatile
 16057  21F2  3FC3               	movwi [3]fsr1
 16058                           
 16059                           ;system.c: 244:     data.dewPointC = dataPacket.dewPointC;
 16060  21F3  304A               	movlw	74
 16061  21F4  0086               	movwf	6
 16062  21F5  3027               	movlw	39
 16063  21F6  0087               	movwf	7
 16064  21F7  3148               	addfsr 1,8
 16065  21F8  0843               	movf	(_dataPacket^(0+512)+11),w	;volatile
 16066  21F9  3FC0               	movwi [0]fsr1
 16067  21FA  0844               	movf	((_dataPacket+1)^(0+512)+11),w	;volatile
 16068  21FB  3FC1               	movwi [1]fsr1
 16069  21FC  0845               	movf	((_dataPacket+2)^(0+512)+11),w	;volatile
 16070  21FD  3FC2               	movwi [2]fsr1
 16071  21FE  0846               	movf	((_dataPacket+3)^(0+512)+11),w	;volatile
 16072  21FF  3FC3               	movwi [3]fsr1
 16073                           
 16074                           ;system.c: 245:     data.sensorVersion = dataPacket.version;
 16075  2200  0839               	movf	(_dataPacket^(0+512)+1),w	;volatile
 16076  2201  0141               	movlb	1	; select bank1
 16077  2202  00B9               	movwf	??_checkSensor^(0+128)
 16078  2203  3056               	movlw	86
 16079  2204  0086               	movwf	6
 16080  2205  3027               	movlw	39
 16081  2206  0087               	movwf	7
 16082  2207  0839               	movf	??_checkSensor^(0+128),w
 16083  2208  0081               	movwf	1
 16084                           
 16085                           ;system.c: 246:     data.status.SENSOR_OK = 1;
 16086  2209  3073               	movlw	115
 16087  220A  0086               	movwf	6
 16088  220B  3027               	movlw	39
 16089  220C  0087               	movwf	7
 16090  220D  1581               	bsf	1,3
 16091                           
 16092                           ;system.c: 247:     state = 0;
 16093  220E  0142               	movlb	2	; select bank2
 16094  220F  01E1               	clrf	checkSensor@state^(0+256)
 16095                           
 16096                           ;system.c: 249:     return 1;
 16097  2210  3001               	movlw	1
 16098  2211  0008               	return
 16099  2212                     l9039:	
 16100                           
 16101                           ;system.c: 252:     if (data.status.SENSOR_OK) {
 16102  2212  3073               	movlw	115
 16103  2213  0086               	movwf	6
 16104  2214  3027               	movlw	39
 16105  2215  0087               	movwf	7
 16106  2216  1D81               	btfss	1,3
 16107  2217  2A21               	goto	l9045
 16108                           
 16109                           ;system.c: 253:      data.status.SENSOR_OK = 0;
 16110  2218  3073               	movlw	115
 16111  2219  0086               	movwf	6
 16112  221A  3027               	movlw	39
 16113  221B  0087               	movwf	7
 16114  221C  1181               	bcf	1,3
 16115                           
 16116                           ;system.c: 254:      error(WARN_SENSOR_CHECKSUM);
 16117  221D  3008               	movlw	8
 16118  221E  3198  2000  31A1   	fcall	_error
 16119  2221                     l9045:	
 16120                           
 16121                           ;system.c: 256:     uartReset();
 16122  2221  31B1  2148  31A1   	fcall	_uartReset
 16123  2224                     l9047:	
 16124                           
 16125                           ;system.c: 258:    state = 0;
 16126  2224  0142               	movlb	2	; select bank2
 16127  2225  01E1               	clrf	checkSensor@state^(0+256)
 16128  2226  2A39               	goto	l9053
 16129  2227                     l9051:	
 16130  2227  0142               	movlb	2	; select bank2
 16131  2228  0861               	movf	checkSensor@state^(0+256),w
 16132  2229  0141               	movlb	1	; select bank1
 16133  222A  00B9               	movwf	??_checkSensor^(0+128)
 16134  222B  01BA               	clrf	(??_checkSensor^(0+128)+1)
 16135                           
 16136                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16137                           ; Switch size 1, requested type "simple"
 16138                           ; Number of cases is 1, Range of values is 0 to 0
 16139                           ; switch strategies available:
 16140                           ; Name         Instructions Cycles
 16141                           ; simple_byte            4     3 (average)
 16142                           ; direct_byte            8     6 (fixed)
 16143                           ; jumptable            260     6 (fixed)
 16144                           ;	Chosen strategy is simple_byte
 16145  222C  083A               	movf	(??_checkSensor+1)^(0+128),w
 16146  222D  3A00               	xorlw	0	; case 0
 16147  222E  1903               	skipnz
 16148  222F  2A31               	goto	l9603
 16149  2230  2A24               	goto	l9047
 16150  2231                     l9603:	
 16151                           
 16152                           ; Switch size 1, requested type "simple"
 16153                           ; Number of cases is 2, Range of values is 0 to 1
 16154                           ; switch strategies available:
 16155                           ; Name         Instructions Cycles
 16156                           ; simple_byte            7     4 (average)
 16157                           ; direct_byte           10     6 (fixed)
 16158                           ; jumptable            260     6 (fixed)
 16159                           ;	Chosen strategy is simple_byte
 16160  2231  0839               	movf	??_checkSensor^(0+128),w
 16161  2232  3A00               	xorlw	0	; case 0
 16162  2233  1903               	skipnz
 16163  2234  295D               	goto	l8997
 16164  2235  3A01               	xorlw	1	; case 1
 16165  2236  1903               	skipnz
 16166  2237  2997               	goto	l9005
 16167  2238  2A24               	goto	l9047
 16168  2239                     l9053:	
 16169                           
 16170                           ;system.c: 265:  return 0;
 16171  2239  3000               	movlw	0
 16172  223A  0008               	return
 16173  223B                     __end_of_checkSensor:	
 16174                           
 16175                           	psect	text34
 16176  315A                     __ptext34:	
 16177 ;; *************** function _uartSendByte *****************
 16178 ;; Defined at:
 16179 ;;		line 11 in file "uart.c"
 16180 ;; Parameters:    Size  Location     Type
 16181 ;;  s               1    wreg     unsigned char 
 16182 ;; Auto vars:     Size  Location     Type
 16183 ;;  s               1    0[BANK0 ] unsigned char 
 16184 ;; Return value:  Size  Location     Type
 16185 ;;                  1    wreg      void 
 16186 ;; Registers used:
 16187 ;;		wreg
 16188 ;; Tracked objects:
 16189 ;;		On entry : 0/0
 16190 ;;		On exit  : 0/0
 16191 ;;		Unchanged: 0/0
 16192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16196 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16197 ;;Total ram usage:        1 bytes
 16198 ;; Hardware stack levels used:    1
 16199 ;; Hardware stack levels required when called:    3
 16200 ;; This function calls:
 16201 ;;		Nothing
 16202 ;; This function is called by:
 16203 ;;		_checkSensor
 16204 ;; This function uses a non-reentrant model
 16205 ;;
 16206                           
 16207                           
 16208                           ;psect for function _uartSendByte
 16209  315A                     _uartSendByte:	
 16210                           
 16211                           ;incstack = 0
 16212                           ; Regs used in _uartSendByte: [wreg]
 16213                           ;uartSendByte@s stored from wreg
 16214  315A  0140               	movlb	0	; select bank0
 16215  315B  00A0               	movwf	uartSendByte@s
 16216                           
 16217                           ;uart.c: 11: void uartSendByte(char s);uart.c: 12: {;uart.c: 13:  TX1REG = s;
 16218  315C  0820               	movf	uartSendByte@s,w
 16219  315D  0142               	movlb	2	; select bank2
 16220  315E  009A               	movwf	26	;volatile
 16221                           
 16222                           ;uart.c: 14:  __nop();
 16223  315F  0000               	nop
 16224  3160                     l372:	
 16225                           ;uart.c: 15:  while (!PIR3bits.TX1IF);
 16226                           
 16227  3160  014E               	movlb	14	; select bank14
 16228  3161  1A0F               	btfsc	15,4	;volatile
 16229  3162  0008               	return
 16230  3163  2960               	goto	l372
 16231  3164                     __end_of_uartSendByte:	
 16232                           
 16233                           	psect	text35
 16234  3148                     __ptext35:	
 16235 ;; *************** function _uartReset *****************
 16236 ;; Defined at:
 16237 ;;		line 60 in file "uart.c"
 16238 ;; Parameters:    Size  Location     Type
 16239 ;;		None
 16240 ;; Auto vars:     Size  Location     Type
 16241 ;;  dump            1    0        unsigned char 
 16242 ;; Return value:  Size  Location     Type
 16243 ;;                  1    wreg      void 
 16244 ;; Registers used:
 16245 ;;		wreg, status,2
 16246 ;; Tracked objects:
 16247 ;;		On entry : 0/0
 16248 ;;		On exit  : 0/0
 16249 ;;		Unchanged: 0/0
 16250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16254 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16255 ;;Total ram usage:        1 bytes
 16256 ;; Hardware stack levels used:    1
 16257 ;; Hardware stack levels required when called:    3
 16258 ;; This function calls:
 16259 ;;		Nothing
 16260 ;; This function is called by:
 16261 ;;		_checkSensor
 16262 ;; This function uses a non-reentrant model
 16263 ;;
 16264                           
 16265                           
 16266                           ;psect for function _uartReset
 16267  3148                     _uartReset:	
 16268                           
 16269                           ;incstack = 0
 16270                           ; Regs used in _uartReset: [wreg+status,2]
 16271  3148  0142               	movlb	2	; select bank2
 16272  3149  0819               	movf	25,w	;volatile
 16273                           
 16274                           ;uart.c: 64:  RC1STAbits.CREN = 0;
 16275  314A  121D               	bcf	29,4	;volatile
 16276                           
 16277                           ;uart.c: 65:  RC1STAbits.CREN = 1;
 16278  314B  161D               	bsf	29,4	;volatile
 16279                           
 16280                           ;uart.c: 66:  RC1STAbits.SPEN = 0;
 16281  314C  139D               	bcf	29,7	;volatile
 16282                           
 16283                           ;uart.c: 67:  RC1STAbits.SPEN = 1;
 16284  314D  179D               	bsf	29,7	;volatile
 16285                           
 16286                           ;uart.c: 68:  rxCount = 0;
 16287  314E  01EB               	clrf	_rxCount^(0+256)	;volatile
 16288  314F  0008               	return
 16289  3150                     __end_of_uartReset:	
 16290                           
 16291                           	psect	text36
 16292  36E4                     __ptext36:	
 16293 ;; *************** function _timeSince *****************
 16294 ;; Defined at:
 16295 ;;		line 10 in file "interrupt.c"
 16296 ;; Parameters:    Size  Location     Type
 16297 ;;  since           4    0[BANK0 ] unsigned long 
 16298 ;; Auto vars:     Size  Location     Type
 16299 ;;  now             4   12[BANK0 ] unsigned long 
 16300 ;; Return value:  Size  Location     Type
 16301 ;;                  4    0[BANK0 ] unsigned long 
 16302 ;; Registers used:
 16303 ;;		wreg
 16304 ;; Tracked objects:
 16305 ;;		On entry : 0/0
 16306 ;;		On exit  : 0/0
 16307 ;;		Unchanged: 0/0
 16308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16309 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16310 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16311 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16312 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16313 ;;Total ram usage:       16 bytes
 16314 ;; Hardware stack levels used:    1
 16315 ;; Hardware stack levels required when called:    3
 16316 ;; This function calls:
 16317 ;;		Nothing
 16318 ;; This function is called by:
 16319 ;;		_main
 16320 ;;		_menu
 16321 ;;		_checkSensor
 16322 ;;		_controller
 16323 ;; This function uses a non-reentrant model
 16324 ;;
 16325                           
 16326                           
 16327                           ;psect for function _timeSince
 16328  36E4                     _timeSince:	
 16329                           
 16330                           ;interrupt.c: 10: uint32_t timeSince(uint32_t since);interrupt.c: 11: {;interrupt.c: 12:
      +                            uint32_t now = tick100ms;
 16331                           
 16332                           ;incstack = 0
 16333                           ; Regs used in _timeSince: [wreg]
 16334  36E4  0144               	movlb	4	; select bank4
 16335  36E5  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 16336  36E6  0140               	movlb	0	; select bank0
 16337  36E7  00AF               	movwf	timeSince@now+3
 16338  36E8  0144               	movlb	4	; select bank4
 16339  36E9  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 16340  36EA  0140               	movlb	0	; select bank0
 16341  36EB  00AE               	movwf	timeSince@now+2
 16342  36EC  0144               	movlb	4	; select bank4
 16343  36ED  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 16344  36EE  0140               	movlb	0	; select bank0
 16345  36EF  00AD               	movwf	timeSince@now+1
 16346  36F0  0144               	movlb	4	; select bank4
 16347  36F1  0832               	movf	_tick100ms^(0+512),w	;volatile
 16348  36F2  0140               	movlb	0	; select bank0
 16349  36F3  00AC               	movwf	timeSince@now
 16350                           
 16351                           ;interrupt.c: 13:  if (now >= since)
 16352  36F4  0823               	movf	timeSince@since+3,w
 16353  36F5  022F               	subwf	timeSince@now+3,w
 16354  36F6  1D03               	skipz
 16355  36F7  2F02               	goto	u9455
 16356  36F8  0822               	movf	timeSince@since+2,w
 16357  36F9  022E               	subwf	timeSince@now+2,w
 16358  36FA  1D03               	skipz
 16359  36FB  2F02               	goto	u9455
 16360  36FC  0821               	movf	timeSince@since+1,w
 16361  36FD  022D               	subwf	timeSince@now+1,w
 16362  36FE  1D03               	skipz
 16363  36FF  2F02               	goto	u9455
 16364  3700  0820               	movf	timeSince@since,w
 16365  3701  022C               	subwf	timeSince@now,w
 16366  3702                     u9455:	
 16367  3702  1C03               	skipc
 16368  3703  2F19               	goto	l8133
 16369                           
 16370                           ;interrupt.c: 14:   return (now - since);
 16371  3704  0820               	movf	timeSince@since,w
 16372  3705  022C               	subwf	timeSince@now,w
 16373  3706  00A4               	movwf	??_timeSince
 16374  3707  0821               	movf	timeSince@since+1,w
 16375  3708  3B2D               	subwfb	timeSince@now+1,w
 16376  3709  00A5               	movwf	??_timeSince+1
 16377  370A  0822               	movf	timeSince@since+2,w
 16378  370B  3B2E               	subwfb	timeSince@now+2,w
 16379  370C  00A6               	movwf	??_timeSince+2
 16380  370D  0823               	movf	timeSince@since+3,w
 16381  370E  3B2F               	subwfb	timeSince@now+3,w
 16382  370F  00A7               	movwf	??_timeSince+3
 16383  3710  0827               	movf	??_timeSince+3,w
 16384  3711  00A3               	movwf	?_timeSince+3
 16385  3712  0826               	movf	??_timeSince+2,w
 16386  3713  00A2               	movwf	?_timeSince+2
 16387  3714  0825               	movf	??_timeSince+1,w
 16388  3715  00A1               	movwf	?_timeSince+1
 16389  3716  0824               	movf	??_timeSince,w
 16390  3717  00A0               	movwf	?_timeSince
 16391  3718  0008               	return
 16392  3719                     l8133:	
 16393                           
 16394                           ;interrupt.c: 16:  return (now + (1 + 1000000000UL - since));
 16395  3719  3001               	movlw	1
 16396  371A  00A4               	movwf	??_timeSince
 16397  371B  30CA               	movlw	202
 16398  371C  00A5               	movwf	??_timeSince+1
 16399  371D  309A               	movlw	154
 16400  371E  00A6               	movwf	??_timeSince+2
 16401  371F  303B               	movlw	59
 16402  3720  00A7               	movwf	??_timeSince+3
 16403  3721  0820               	movf	timeSince@since,w
 16404  3722  022C               	subwf	timeSince@now,w
 16405  3723  00A8               	movwf	??_timeSince+4
 16406  3724  0821               	movf	timeSince@since+1,w
 16407  3725  3B2D               	subwfb	timeSince@now+1,w
 16408  3726  00A9               	movwf	??_timeSince+5
 16409  3727  0822               	movf	timeSince@since+2,w
 16410  3728  3B2E               	subwfb	timeSince@now+2,w
 16411  3729  00AA               	movwf	??_timeSince+6
 16412  372A  0823               	movf	timeSince@since+3,w
 16413  372B  3B2F               	subwfb	timeSince@now+3,w
 16414  372C  00AB               	movwf	??_timeSince+7
 16415  372D  0828               	movf	??_timeSince+4,w
 16416  372E  07A4               	addwf	??_timeSince,f
 16417  372F  0829               	movf	??_timeSince+5,w
 16418  3730  3DA5               	addwfc	??_timeSince+1,f
 16419  3731  082A               	movf	??_timeSince+6,w
 16420  3732  3DA6               	addwfc	??_timeSince+2,f
 16421  3733  082B               	movf	??_timeSince+7,w
 16422  3734  3DA7               	addwfc	??_timeSince+3,f
 16423  3735  0827               	movf	??_timeSince+3,w
 16424  3736  00A3               	movwf	?_timeSince+3
 16425  3737  0826               	movf	??_timeSince+2,w
 16426  3738  00A2               	movwf	?_timeSince+2
 16427  3739  0825               	movf	??_timeSince+1,w
 16428  373A  00A1               	movwf	?_timeSince+1
 16429  373B  0824               	movf	??_timeSince,w
 16430  373C  00A0               	movwf	?_timeSince
 16431  373D  0008               	return
 16432  373E                     __end_of_timeSince:	
 16433                           
 16434                           	psect	text37
 16435  1432                     __ptext37:	
 16436 ;; *************** function _checkChannelStatus *****************
 16437 ;; Defined at:
 16438 ;;		line 55 in file "system.c"
 16439 ;; Parameters:    Size  Location     Type
 16440 ;;		None
 16441 ;; Auto vars:     Size  Location     Type
 16442 ;;  current         4   42[BANK1 ] float 
 16443 ;;  heater          2   47[BANK1 ] PTR struct .
 16444 ;;		 -> data.heater(124), data(166), 
 16445 ;;  avg             2   40[BANK1 ] unsigned short 
 16446 ;;  adc             2   29[BANK1 ] unsigned short 
 16447 ;;  channel         1   46[BANK1 ] unsigned char 
 16448 ;;  samples         1   39[BANK1 ] unsigned char 
 16449 ;; Return value:  Size  Location     Type
 16450 ;;                  1    wreg      void 
 16451 ;; Registers used:
 16452 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16453 ;; Tracked objects:
 16454 ;;		On entry : 0/0
 16455 ;;		On exit  : 0/0
 16456 ;;		Unchanged: 0/0
 16457 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16458 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16459 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16460 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16461 ;;      Totals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16462 ;;Total ram usage:       24 bytes
 16463 ;; Hardware stack levels used:    1
 16464 ;; Hardware stack levels required when called:    5
 16465 ;; This function calls:
 16466 ;;		___fldiv
 16467 ;;		___fleq
 16468 ;;		___flge
 16469 ;;		___flmul
 16470 ;;		___fltol
 16471 ;;		___wmul
 16472 ;;		___xxtofl
 16473 ;;		_ema
 16474 ;;		_error
 16475 ;;		_getAnalogValue
 16476 ;;		_setChannelSwitch
 16477 ;; This function is called by:
 16478 ;;		_main
 16479 ;; This function uses a non-reentrant model
 16480 ;;
 16481                           
 16482                           
 16483                           ;psect for function _checkChannelStatus
 16484  1432                     _checkChannelStatus:	
 16485                           
 16486                           ;system.c: 57:  uint16_t adc, avg;;system.c: 58:  uint8_t channel, samples;;system.c: 59
      +                          :  float current;;system.c: 60:  t_heater *heater;;system.c: 62:  for (channel = 0; chan
      +                          nel < 4; channel++) {
 16487                           
 16488                           ;incstack = 0
 16489                           ; Regs used in _checkChannelStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16490  1432  0141               	movlb	1	; select bank1
 16491  1433  01CE               	clrf	checkChannelStatus@channel^(0+128)
 16492  1434                     l9099:	
 16493                           
 16494                           ;system.c: 64:   heater = &(data.heater)[channel];
 16495  1434  084E               	movf	checkChannelStatus@channel^(0+128),w
 16496  1435  00B9               	movwf	??_checkChannelStatus^(0+128)
 16497  1436  01BA               	clrf	(??_checkChannelStatus^(0+128)+1)
 16498  1437  0839               	movf	??_checkChannelStatus^(0+128),w
 16499  1438  0140               	movlb	0	; select bank0
 16500  1439  00AD               	movwf	___wmul@multiplier
 16501  143A  0141               	movlb	1	; select bank1
 16502  143B  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16503  143C  0140               	movlb	0	; select bank0
 16504  143D  00AE               	movwf	___wmul@multiplier+1
 16505  143E  301F               	movlw	31
 16506  143F  00AF               	movwf	___wmul@multiplicand
 16507  1440  3000               	movlw	0
 16508  1441  00B0               	movwf	___wmul@multiplicand+1
 16509  1442  31B1  21DE  3194   	fcall	___wmul
 16510  1445  3074               	movlw	116
 16511  1446  0141               	movlb	1	; select bank1
 16512  1447  00BB               	movwf	(??_checkChannelStatus+2)^(0+128)
 16513  1448  3027               	movlw	39
 16514  1449  00BC               	movwf	((??_checkChannelStatus+2)^(0+128)+1)
 16515  144A  0140               	movlb	0	; select bank0
 16516  144B  082D               	movf	?___wmul,w
 16517  144C  0141               	movlb	1	; select bank1
 16518  144D  073B               	addwf	(??_checkChannelStatus+2)^(0+128),w
 16519  144E  00CF               	movwf	checkChannelStatus@heater^(0+128)
 16520  144F  0140               	movlb	0	; select bank0
 16521  1450  082E               	movf	?___wmul+1,w
 16522  1451  0141               	movlb	1	; select bank1
 16523  1452  3D3C               	addwfc	(??_checkChannelStatus+3)^(0+128),w
 16524  1453  00D0               	movwf	(checkChannelStatus@heater+1)^(0+128)
 16525                           
 16526                           ;system.c: 66:   if (heater->status == CH_OVERCURRENT)
 16527  1454  084F               	movf	checkChannelStatus@heater^(0+128),w
 16528  1455  0086               	movwf	6
 16529  1456  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16530  1457  0087               	movwf	7
 16531  1458  315E               	addfsr 1,30
 16532  1459  3004               	movlw	4
 16533  145A  0601               	xorwf	1,w
 16534  145B  1903               	btfsc	3,2
 16535  145C  2FF6               	goto	l9185
 16536                           
 16537                           ;system.c: 69:   setChannelSwitch(channel, 1);
 16538  145D  0140               	movlb	0	; select bank0
 16539  145E  01AD               	clrf	setChannelSwitch@state
 16540  145F  0AAD               	incf	setChannelSwitch@state,f
 16541  1460  0141               	movlb	1	; select bank1
 16542  1461  084E               	movf	checkChannelStatus@channel^(0+128),w
 16543  1462  31B5  2576  3194   	fcall	_setChannelSwitch
 16544                           
 16545                           ;system.c: 70:   samples = 0;
 16546  1465  0141               	movlb	1	; select bank1
 16547  1466  01C7               	clrf	checkChannelStatus@samples^(0+128)
 16548                           
 16549                           ;system.c: 71:   avg = heater->current;
 16550  1467  084F               	movf	checkChannelStatus@heater^(0+128),w
 16551  1468  0086               	movwf	6
 16552  1469  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16553  146A  0087               	movwf	7
 16554  146B  3F40               	moviw [0]fsr1
 16555  146C  00A8               	movwf	___fltol@f1^(0+128)
 16556  146D  3F41               	moviw [1]fsr1
 16557  146E  00A9               	movwf	(___fltol@f1+1)^(0+128)
 16558  146F  3F42               	moviw [2]fsr1
 16559  1470  00AA               	movwf	(___fltol@f1+2)^(0+128)
 16560  1471  3F43               	moviw [3]fsr1
 16561  1472  00AB               	movwf	(___fltol@f1+3)^(0+128)
 16562  1473  31A8  203E  3194   	fcall	___fltol
 16563  1476  0141               	movlb	1	; select bank1
 16564  1477  0829               	movf	(?___fltol+1)^(0+128),w
 16565  1478  00C9               	movwf	(checkChannelStatus@avg+1)^(0+128)
 16566  1479  0828               	movf	?___fltol^(0+128),w
 16567  147A  00C8               	movwf	checkChannelStatus@avg^(0+128)
 16568  147B                     l9111:	
 16569                           
 16570                           ;system.c: 73:    adc = getAnalogValue(0b010001);
 16571  147B  3011               	movlw	17
 16572  147C  31B1  21FA  3194   	fcall	_getAnalogValue
 16573  147F  0140               	movlb	0	; select bank0
 16574  1480  0821               	movf	?_getAnalogValue+1,w
 16575  1481  0141               	movlb	1	; select bank1
 16576  1482  00BE               	movwf	(checkChannelStatus@adc+1)^(0+128)
 16577  1483  0140               	movlb	0	; select bank0
 16578  1484  0820               	movf	?_getAnalogValue,w
 16579  1485  0141               	movlb	1	; select bank1
 16580  1486  00BD               	movwf	checkChannelStatus@adc^(0+128)
 16581                           
 16582                           ;system.c: 75:    avg = ema(adc, avg, ( (uint32_t)(0.7 * 65535) ));
 16583  1487  083E               	movf	(checkChannelStatus@adc+1)^(0+128),w
 16584  1488  0140               	movlb	0	; select bank0
 16585  1489  00AD               	movwf	ema@in+1
 16586  148A  0141               	movlb	1	; select bank1
 16587  148B  083D               	movf	checkChannelStatus@adc^(0+128),w
 16588  148C  0140               	movlb	0	; select bank0
 16589  148D  00AC               	movwf	ema@in
 16590  148E  0141               	movlb	1	; select bank1
 16591  148F  0849               	movf	(checkChannelStatus@avg+1)^(0+128),w
 16592  1490  0140               	movlb	0	; select bank0
 16593  1491  00AF               	movwf	ema@average+1
 16594  1492  0141               	movlb	1	; select bank1
 16595  1493  0848               	movf	checkChannelStatus@avg^(0+128),w
 16596  1494  0140               	movlb	0	; select bank0
 16597  1495  00AE               	movwf	ema@average
 16598  1496  3000               	movlw	0
 16599  1497  00B3               	movwf	ema@alpha+3
 16600  1498  3000               	movlw	0
 16601  1499  00B2               	movwf	ema@alpha+2
 16602  149A  30B3               	movlw	179
 16603  149B  00B1               	movwf	ema@alpha+1
 16604  149C  3032               	movlw	50
 16605  149D  00B0               	movwf	ema@alpha
 16606  149E  3190  2009  3194   	fcall	_ema
 16607  14A1  0140               	movlb	0	; select bank0
 16608  14A2  082D               	movf	?_ema+1,w
 16609  14A3  0141               	movlb	1	; select bank1
 16610  14A4  00C9               	movwf	(checkChannelStatus@avg+1)^(0+128)
 16611  14A5  0140               	movlb	0	; select bank0
 16612  14A6  082C               	movf	?_ema,w
 16613  14A7  0141               	movlb	1	; select bank1
 16614  14A8  00C8               	movwf	checkChannelStatus@avg^(0+128)
 16615                           
 16616                           ;system.c: 76:   } while (samples++ < 50);
 16617  14A9  0847               	movf	checkChannelStatus@samples^(0+128),w
 16618  14AA  0AC7               	incf	checkChannelStatus@samples^(0+128),f
 16619  14AB  00B9               	movwf	??_checkChannelStatus^(0+128)
 16620  14AC  3032               	movlw	50
 16621  14AD  0239               	subwf	??_checkChannelStatus^(0+128),w
 16622  14AE  1C03               	skipc
 16623  14AF  2C7B               	goto	l9111
 16624                           
 16625                           ;system.c: 77:   setChannelSwitch(channel, 0);
 16626  14B0  0140               	movlb	0	; select bank0
 16627  14B1  01AD               	clrf	setChannelSwitch@state
 16628  14B2  0141               	movlb	1	; select bank1
 16629  14B3  084E               	movf	checkChannelStatus@channel^(0+128),w
 16630  14B4  31B5  2576  3194   	fcall	_setChannelSwitch
 16631                           
 16632                           ;system.c: 80:   current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 16633  14B7  3045               	movlw	69
 16634  14B8  0140               	movlb	0	; select bank0
 16635  14B9  00DE               	movwf	___fldiv@a+3
 16636  14BA  301F               	movlw	31
 16637  14BB  00DD               	movwf	___fldiv@a+2
 16638  14BC  30D8               	movlw	216
 16639  14BD  00DC               	movwf	___fldiv@a+1
 16640  14BE  3000               	movlw	0
 16641  14BF  00DB               	movwf	___fldiv@a
 16642  14C0  3040               	movlw	64
 16643  14C1  00C4               	movwf	___flmul@b+3
 16644  14C2  30A0               	movlw	160
 16645  14C3  00C3               	movwf	___flmul@b+2
 16646  14C4  3000               	movlw	0
 16647  14C5  00C2               	movwf	___flmul@b+1
 16648  14C6  3000               	movlw	0
 16649  14C7  00C1               	movwf	___flmul@b
 16650  14C8  0141               	movlb	1	; select bank1
 16651  14C9  0848               	movf	checkChannelStatus@avg^(0+128),w
 16652  14CA  0140               	movlb	0	; select bank0
 16653  14CB  00B3               	movwf	___xxtofl@val
 16654  14CC  0141               	movlb	1	; select bank1
 16655  14CD  0849               	movf	(checkChannelStatus@avg+1)^(0+128),w
 16656  14CE  0140               	movlb	0	; select bank0
 16657  14CF  00B4               	movwf	___xxtofl@val+1
 16658  14D0  01B5               	clrf	___xxtofl@val+2
 16659  14D1  01B6               	clrf	___xxtofl@val+3
 16660  14D2  3000               	movlw	0
 16661  14D3  31AC  240F  3194   	fcall	___xxtofl
 16662  14D6  0140               	movlb	0	; select bank0
 16663  14D7  0836               	movf	?___xxtofl+3,w
 16664  14D8  00C8               	movwf	___flmul@a+3
 16665  14D9  0835               	movf	?___xxtofl+2,w
 16666  14DA  00C7               	movwf	___flmul@a+2
 16667  14DB  0834               	movf	?___xxtofl+1,w
 16668  14DC  00C6               	movwf	___flmul@a+1
 16669  14DD  0833               	movf	?___xxtofl,w
 16670  14DE  00C5               	movwf	___flmul@a
 16671  14DF  3185  2561  3194   	fcall	___flmul
 16672  14E2  0140               	movlb	0	; select bank0
 16673  14E3  0844               	movf	?___flmul+3,w
 16674  14E4  00E2               	movwf	___fldiv@b+3
 16675  14E5  0843               	movf	?___flmul+2,w
 16676  14E6  00E1               	movwf	___fldiv@b+2
 16677  14E7  0842               	movf	?___flmul+1,w
 16678  14E8  00E0               	movwf	___fldiv@b+1
 16679  14E9  0841               	movf	?___flmul,w
 16680  14EA  00DF               	movwf	___fldiv@b
 16681  14EB  319E  2628  3194   	fcall	___fldiv
 16682  14EE  0140               	movlb	0	; select bank0
 16683  14EF  085E               	movf	?___fldiv+3,w
 16684  14F0  0141               	movlb	1	; select bank1
 16685  14F1  00CD               	movwf	(checkChannelStatus@current+3)^(0+128)
 16686  14F2  0140               	movlb	0	; select bank0
 16687  14F3  085D               	movf	?___fldiv+2,w
 16688  14F4  0141               	movlb	1	; select bank1
 16689  14F5  00CC               	movwf	(checkChannelStatus@current+2)^(0+128)
 16690  14F6  0140               	movlb	0	; select bank0
 16691  14F7  085C               	movf	?___fldiv+1,w
 16692  14F8  0141               	movlb	1	; select bank1
 16693  14F9  00CB               	movwf	(checkChannelStatus@current+1)^(0+128)
 16694  14FA  0140               	movlb	0	; select bank0
 16695  14FB  085B               	movf	?___fldiv,w
 16696  14FC  0141               	movlb	1	; select bank1
 16697  14FD  00CA               	movwf	checkChannelStatus@current^(0+128)
 16698                           
 16699                           ;system.c: 83:   if (current < 0.05) {
 16700  14FE  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 16701  14FF  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16702  1500  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 16703  1501  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16704  1502  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 16705  1503  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16706  1504  084A               	movf	checkChannelStatus@current^(0+128),w
 16707  1505  00AD               	movwf	___flge@ff1^(0+128)
 16708  1506  303D               	movlw	61
 16709  1507  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16710  1508  304C               	movlw	76
 16711  1509  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16712  150A  30CC               	movlw	204
 16713  150B  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16714  150C  30CD               	movlw	205
 16715  150D  00B1               	movwf	___flge@ff2^(0+128)
 16716  150E  31AA  2206  3194   	fcall	___flge
 16717  1511  1803               	btfsc	3,0
 16718  1512  2D2D               	goto	l9129
 16719                           
 16720                           ;system.c: 85:    if (heater->status == CH_ENABLED)
 16721  1513  0141               	movlb	1	; select bank1
 16722  1514  084F               	movf	checkChannelStatus@heater^(0+128),w
 16723  1515  0086               	movwf	6
 16724  1516  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16725  1517  0087               	movwf	7
 16726  1518  315E               	addfsr 1,30
 16727  1519  0301               	decf	1,w
 16728  151A  1D03               	btfss	3,2
 16729  151B  2D20               	goto	l9127
 16730                           
 16731                           ;system.c: 86:     error(WARN_REMOVED);
 16732  151C  3001               	movlw	1
 16733  151D  3198  2000  3194   	fcall	_error
 16734  1520                     l9127:	
 16735                           
 16736                           ;system.c: 87:    heater->status = CH_OPEN;
 16737  1520  0141               	movlb	1	; select bank1
 16738  1521  084F               	movf	checkChannelStatus@heater^(0+128),w
 16739  1522  3E1E               	addlw	30
 16740  1523  00B9               	movwf	??_checkChannelStatus^(0+128)
 16741  1524  3000               	movlw	0
 16742  1525  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16743  1526  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 16744  1527  0839               	movf	??_checkChannelStatus^(0+128),w
 16745  1528  0086               	movwf	6
 16746  1529  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16747  152A  0087               	movwf	7
 16748  152B  3002               	movlw	2
 16749  152C  2FF5               	goto	L8
 16750  152D                     l9129:	
 16751                           ;system.c: 88:   } else if ((current > 2.0) || !PORTCbits.RC2) {
 16752                           
 16753  152D  3040               	movlw	64
 16754  152E  0141               	movlb	1	; select bank1
 16755  152F  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16756  1530  3000               	movlw	0
 16757  1531  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16758  1532  3000               	movlw	0
 16759  1533  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16760  1534  3000               	movlw	0
 16761  1535  00AD               	movwf	___flge@ff1^(0+128)
 16762  1536  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 16763  1537  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16764  1538  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 16765  1539  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16766  153A  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 16767  153B  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16768  153C  084A               	movf	checkChannelStatus@current^(0+128),w
 16769  153D  00B1               	movwf	___flge@ff2^(0+128)
 16770  153E  31AA  2206  3194   	fcall	___flge
 16771  1541  1C03               	btfss	3,0
 16772  1542  2D46               	goto	l9133
 16773  1543  0140               	movlb	0	; select bank0
 16774  1544  190E               	btfsc	14,2	;volatile
 16775  1545  2D74               	goto	l9147
 16776  1546                     l9133:	
 16777                           
 16778                           ;system.c: 91:    error(WARN_HEATER_OVERCURRENT);
 16779  1546  3004               	movlw	4
 16780  1547  3198  2000  3194   	fcall	_error
 16781                           
 16782                           ;system.c: 92:    heater->status = CH_OVERCURRENT;
 16783  154A  0141               	movlb	1	; select bank1
 16784  154B  084F               	movf	checkChannelStatus@heater^(0+128),w
 16785  154C  3E1E               	addlw	30
 16786  154D  00B9               	movwf	??_checkChannelStatus^(0+128)
 16787  154E  3000               	movlw	0
 16788  154F  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16789  1550  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 16790  1551  0839               	movf	??_checkChannelStatus^(0+128),w
 16791  1552  0086               	movwf	6
 16792  1553  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16793  1554  0087               	movwf	7
 16794  1555  3004               	movlw	4
 16795  1556  0081               	movwf	1
 16796                           
 16797                           ;system.c: 94:    if (!PORTCbits.RC2) {
 16798  1557  0140               	movlb	0	; select bank0
 16799  1558  190E               	btfsc	14,2	;volatile
 16800  1559  2FF6               	goto	l9185
 16801                           
 16802                           ;system.c: 95:     heater->status = CH_SHORTED;
 16803  155A  0141               	movlb	1	; select bank1
 16804  155B  084F               	movf	checkChannelStatus@heater^(0+128),w
 16805  155C  3E1E               	addlw	30
 16806  155D  00B9               	movwf	??_checkChannelStatus^(0+128)
 16807  155E  3000               	movlw	0
 16808  155F  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16809  1560  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 16810  1561  0839               	movf	??_checkChannelStatus^(0+128),w
 16811  1562  0086               	movwf	6
 16812  1563  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16813  1564  0087               	movwf	7
 16814  1565  3003               	movlw	3
 16815  1566  0081               	movwf	1
 16816                           
 16817                           ;system.c: 96:     LATCbits.LATC3 = 0;
 16818  1567  0140               	movlb	0	; select bank0
 16819  1568  119A               	bcf	26,3	;volatile
 16820                           
 16821                           ;system.c: 97:     _delay((unsigned long)((5)*(4000000UL/4000.0)));
 16822  1569  3007               	movlw	7
 16823  156A  0141               	movlb	1	; select bank1
 16824  156B  00B9               	movwf	??_checkChannelStatus^(0+128)
 16825  156C  307D               	movlw	125
 16826  156D                     u10897:	
 16827  156D  0B89               	decfsz	9,f
 16828  156E  2D6D               	goto	u10897
 16829  156F  0BB9               	decfsz	??_checkChannelStatus^(0+128),f
 16830  1570  2D6D               	goto	u10897
 16831                           
 16832                           ;system.c: 98:     LATCbits.LATC3 = 1;
 16833  1571  0140               	movlb	0	; select bank0
 16834  1572  159A               	bsf	26,3	;volatile
 16835  1573  2FF6               	goto	l9185
 16836  1574                     l9147:	
 16837                           
 16838                           ;system.c: 101:    heater->current = current;
 16839  1574  0141               	movlb	1	; select bank1
 16840  1575  084F               	movf	checkChannelStatus@heater^(0+128),w
 16841  1576  0086               	movwf	6
 16842  1577  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16843  1578  0087               	movwf	7
 16844  1579  084A               	movf	checkChannelStatus@current^(0+128),w
 16845  157A  3FC0               	movwi [0]fsr1
 16846  157B  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 16847  157C  3FC1               	movwi [1]fsr1
 16848  157D  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 16849  157E  3FC2               	movwi [2]fsr1
 16850  157F  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 16851  1580  3FC3               	movwi [3]fsr1
 16852                           
 16853                           ;system.c: 102:    heater->Pmax = data.voltage * current;
 16854  1581  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 16855  1582  0140               	movlb	0	; select bank0
 16856  1583  00C4               	movwf	___flmul@b+3
 16857  1584  0141               	movlb	1	; select bank1
 16858  1585  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 16859  1586  0140               	movlb	0	; select bank0
 16860  1587  00C3               	movwf	___flmul@b+2
 16861  1588  0141               	movlb	1	; select bank1
 16862  1589  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 16863  158A  0140               	movlb	0	; select bank0
 16864  158B  00C2               	movwf	___flmul@b+1
 16865  158C  0141               	movlb	1	; select bank1
 16866  158D  084A               	movf	checkChannelStatus@current^(0+128),w
 16867  158E  0140               	movlb	0	; select bank0
 16868  158F  00C1               	movwf	___flmul@b
 16869  1590  304A               	movlw	74
 16870  1591  0086               	movwf	6
 16871  1592  3027               	movlw	39
 16872  1593  0087               	movwf	7
 16873  1594  3151               	addfsr 1,17
 16874  1595  3F40               	moviw [0]fsr1
 16875  1596  00C5               	movwf	___flmul@a
 16876  1597  3F41               	moviw [1]fsr1
 16877  1598  00C6               	movwf	___flmul@a+1
 16878  1599  3F42               	moviw [2]fsr1
 16879  159A  00C7               	movwf	___flmul@a+2
 16880  159B  3F43               	moviw [3]fsr1
 16881  159C  00C8               	movwf	___flmul@a+3
 16882  159D  3185  2561  3194   	fcall	___flmul
 16883  15A0  0141               	movlb	1	; select bank1
 16884  15A1  084F               	movf	checkChannelStatus@heater^(0+128),w
 16885  15A2  0086               	movwf	6
 16886  15A3  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16887  15A4  0087               	movwf	7
 16888  15A5  3144               	addfsr 1,4
 16889  15A6  0140               	movlb	0	; select bank0
 16890  15A7  0841               	movf	?___flmul,w
 16891  15A8  3FC0               	movwi [0]fsr1
 16892  15A9  0842               	movf	?___flmul+1,w
 16893  15AA  3FC1               	movwi [1]fsr1
 16894  15AB  0843               	movf	?___flmul+2,w
 16895  15AC  3FC2               	movwi [2]fsr1
 16896  15AD  0844               	movf	?___flmul+3,w
 16897  15AE  3FC3               	movwi [3]fsr1
 16898                           
 16899                           ;system.c: 105:    if (heater->Pset > heater->Pmax)
 16900  15AF  0141               	movlb	1	; select bank1
 16901  15B0  084F               	movf	checkChannelStatus@heater^(0+128),w
 16902  15B1  0086               	movwf	6
 16903  15B2  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16904  15B3  0087               	movwf	7
 16905  15B4  3144               	addfsr 1,4
 16906  15B5  3F40               	moviw [0]fsr1
 16907  15B6  00AD               	movwf	___flge@ff1^(0+128)
 16908  15B7  3F41               	moviw [1]fsr1
 16909  15B8  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16910  15B9  3F42               	moviw [2]fsr1
 16911  15BA  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16912  15BB  3F43               	moviw [3]fsr1
 16913  15BC  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16914  15BD  084F               	movf	checkChannelStatus@heater^(0+128),w
 16915  15BE  0086               	movwf	6
 16916  15BF  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16917  15C0  0087               	movwf	7
 16918  15C1  3150               	addfsr 1,16
 16919  15C2  3F40               	moviw [0]fsr1
 16920  15C3  00B1               	movwf	___flge@ff2^(0+128)
 16921  15C4  3F41               	moviw [1]fsr1
 16922  15C5  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16923  15C6  3F42               	moviw [2]fsr1
 16924  15C7  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16925  15C8  3F43               	moviw [3]fsr1
 16926  15C9  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16927  15CA  31AA  2206  3194   	fcall	___flge
 16928  15CD  1803               	btfsc	3,0
 16929  15CE  2DEA               	goto	l808
 16930                           
 16931                           ;system.c: 106:     heater->Pset = heater->Pmax;
 16932  15CF  0141               	movlb	1	; select bank1
 16933  15D0  084F               	movf	checkChannelStatus@heater^(0+128),w
 16934  15D1  0086               	movwf	6
 16935  15D2  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16936  15D3  0087               	movwf	7
 16937  15D4  3144               	addfsr 1,4
 16938  15D5  3F40               	moviw [0]fsr1
 16939  15D6  00B9               	movwf	??_checkChannelStatus^(0+128)
 16940  15D7  3F41               	moviw [1]fsr1
 16941  15D8  00BA               	movwf	(??_checkChannelStatus^(0+128)+1)
 16942  15D9  3F42               	moviw [2]fsr1
 16943  15DA  00BB               	movwf	(??_checkChannelStatus^(0+128)+2)
 16944  15DB  3F43               	moviw [3]fsr1
 16945  15DC  00BC               	movwf	(??_checkChannelStatus^(0+128)+3)
 16946  15DD  084F               	movf	checkChannelStatus@heater^(0+128),w
 16947  15DE  0086               	movwf	6
 16948  15DF  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16949  15E0  0087               	movwf	7
 16950  15E1  3150               	addfsr 1,16
 16951  15E2  0839               	movf	??_checkChannelStatus^(0+128),w
 16952  15E3  3FC0               	movwi [0]fsr1
 16953  15E4  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16954  15E5  3FC1               	movwi [1]fsr1
 16955  15E6  083B               	movf	(??_checkChannelStatus+2)^(0+128),w
 16956  15E7  3FC2               	movwi [2]fsr1
 16957  15E8  083C               	movf	(??_checkChannelStatus+3)^(0+128),w
 16958  15E9  3FC3               	movwi [3]fsr1
 16959  15EA                     l808:	
 16960                           
 16961                           ;system.c: 108:    if (data.status.SENSOR_OK) {
 16962  15EA  3073               	movlw	115
 16963  15EB  0086               	movwf	6
 16964  15EC  3027               	movlw	39
 16965  15ED  0087               	movwf	7
 16966  15EE  1D81               	btfss	1,3
 16967  15EF  2E36               	goto	l9163
 16968                           
 16969                           ;system.c: 109:     if (heater->Pset < 0)
 16970  15F0  0141               	movlb	1	; select bank1
 16971  15F1  084F               	movf	checkChannelStatus@heater^(0+128),w
 16972  15F2  0086               	movwf	6
 16973  15F3  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16974  15F4  0087               	movwf	7
 16975  15F5  3150               	addfsr 1,16
 16976  15F6  3F40               	moviw [0]fsr1
 16977  15F7  00AD               	movwf	___flge@ff1^(0+128)
 16978  15F8  3F41               	moviw [1]fsr1
 16979  15F9  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16980  15FA  3F42               	moviw [2]fsr1
 16981  15FB  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16982  15FC  3F43               	moviw [3]fsr1
 16983  15FD  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16984  15FE  3000               	movlw	0
 16985  15FF  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16986  1600  3000               	movlw	0
 16987  1601  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16988  1602  3000               	movlw	0
 16989  1603  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16990  1604  3000               	movlw	0
 16991  1605  00B1               	movwf	___flge@ff2^(0+128)
 16992  1606  31AA  2206  3194   	fcall	___flge
 16993  1609  1803               	btfsc	3,0
 16994  160A  2E19               	goto	l9159
 16995                           
 16996                           ;system.c: 110:      heater->mode = MODE_AUTO;
 16997  160B  0141               	movlb	1	; select bank1
 16998  160C  084F               	movf	checkChannelStatus@heater^(0+128),w
 16999  160D  3E1D               	addlw	29
 17000  160E  00B9               	movwf	??_checkChannelStatus^(0+128)
 17001  160F  3000               	movlw	0
 17002  1610  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 17003  1611  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17004  1612  0839               	movf	??_checkChannelStatus^(0+128),w
 17005  1613  0086               	movwf	6
 17006  1614  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17007  1615  0087               	movwf	7
 17008  1616  3001               	movlw	1
 17009  1617  0081               	movwf	1
 17010  1618  2E57               	goto	l9167
 17011  1619                     l9159:	
 17012  1619  3000               	movlw	0
 17013  161A  0141               	movlb	1	; select bank1
 17014  161B  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17015  161C  3000               	movlw	0
 17016  161D  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17017  161E  3000               	movlw	0
 17018  161F  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17019  1620  3000               	movlw	0
 17020  1621  00AD               	movwf	___flge@ff1^(0+128)
 17021  1622  084F               	movf	checkChannelStatus@heater^(0+128),w
 17022  1623  0086               	movwf	6
 17023  1624  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17024  1625  0087               	movwf	7
 17025  1626  3150               	addfsr 1,16
 17026  1627  3F40               	moviw [0]fsr1
 17027  1628  00B1               	movwf	___flge@ff2^(0+128)
 17028  1629  3F41               	moviw [1]fsr1
 17029  162A  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17030  162B  3F42               	moviw [2]fsr1
 17031  162C  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17032  162D  3F43               	moviw [3]fsr1
 17033  162E  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17034  162F  31AA  2206  3194   	fcall	___flge
 17035  1632  1803               	btfsc	3,0
 17036  1633  2E57               	goto	l9167
 17037                           
 17038                           ;system.c: 112:      heater->mode = MODE_MANUAL;
 17039  1634  0141               	movlb	1	; select bank1
 17040  1635  2E51               	goto	l9165
 17041  1636                     l9163:	
 17042                           
 17043                           ;system.c: 114:     heater->Pset = heater->Pmax;
 17044  1636  0141               	movlb	1	; select bank1
 17045  1637  084F               	movf	checkChannelStatus@heater^(0+128),w
 17046  1638  0086               	movwf	6
 17047  1639  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17048  163A  0087               	movwf	7
 17049  163B  3144               	addfsr 1,4
 17050  163C  3F40               	moviw [0]fsr1
 17051  163D  00B9               	movwf	??_checkChannelStatus^(0+128)
 17052  163E  3F41               	moviw [1]fsr1
 17053  163F  00BA               	movwf	(??_checkChannelStatus^(0+128)+1)
 17054  1640  3F42               	moviw [2]fsr1
 17055  1641  00BB               	movwf	(??_checkChannelStatus^(0+128)+2)
 17056  1642  3F43               	moviw [3]fsr1
 17057  1643  00BC               	movwf	(??_checkChannelStatus^(0+128)+3)
 17058  1644  084F               	movf	checkChannelStatus@heater^(0+128),w
 17059  1645  0086               	movwf	6
 17060  1646  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17061  1647  0087               	movwf	7
 17062  1648  3150               	addfsr 1,16
 17063  1649  0839               	movf	??_checkChannelStatus^(0+128),w
 17064  164A  3FC0               	movwi [0]fsr1
 17065  164B  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17066  164C  3FC1               	movwi [1]fsr1
 17067  164D  083B               	movf	(??_checkChannelStatus+2)^(0+128),w
 17068  164E  3FC2               	movwi [2]fsr1
 17069  164F  083C               	movf	(??_checkChannelStatus+3)^(0+128),w
 17070  1650  3FC3               	movwi [3]fsr1
 17071  1651                     l9165:	
 17072                           
 17073                           ;system.c: 115:     heater->mode = MODE_MANUAL;
 17074  1651  084F               	movf	checkChannelStatus@heater^(0+128),w
 17075  1652  0086               	movwf	6
 17076  1653  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17077  1654  0087               	movwf	7
 17078  1655  315D               	addfsr 1,29
 17079  1656  0181               	clrf	1
 17080  1657                     l9167:	
 17081                           
 17082                           ;system.c: 118:    if (heater->Pset == 0)
 17083  1657  0141               	movlb	1	; select bank1
 17084  1658  084F               	movf	checkChannelStatus@heater^(0+128),w
 17085  1659  0086               	movwf	6
 17086  165A  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17087  165B  0087               	movwf	7
 17088  165C  3150               	addfsr 1,16
 17089  165D  3F40               	moviw [0]fsr1
 17090  165E  0140               	movlb	0	; select bank0
 17091  165F  00A0               	movwf	___fleq@ff1
 17092  1660  3F41               	moviw [1]fsr1
 17093  1661  00A1               	movwf	___fleq@ff1+1
 17094  1662  3F42               	moviw [2]fsr1
 17095  1663  00A2               	movwf	___fleq@ff1+2
 17096  1664  3F43               	moviw [3]fsr1
 17097  1665  00A3               	movwf	___fleq@ff1+3
 17098  1666  3000               	movlw	0
 17099  1667  00A7               	movwf	___fleq@ff2+3
 17100  1668  3000               	movlw	0
 17101  1669  00A6               	movwf	___fleq@ff2+2
 17102  166A  3000               	movlw	0
 17103  166B  00A5               	movwf	___fleq@ff2+1
 17104  166C  3000               	movlw	0
 17105  166D  00A4               	movwf	___fleq@ff2
 17106  166E  31B5  25BD  3194   	fcall	___fleq
 17107  1671  1C03               	btfss	3,0
 17108  1672  2E7B               	goto	l9171
 17109                           
 17110                           ;system.c: 119:     heater->status = CH_DISABLED;
 17111  1673  0141               	movlb	1	; select bank1
 17112  1674  084F               	movf	checkChannelStatus@heater^(0+128),w
 17113  1675  0086               	movwf	6
 17114  1676  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17115  1677  0087               	movwf	7
 17116  1678  315E               	addfsr 1,30
 17117  1679  0181               	clrf	1
 17118  167A  2E88               	goto	l815
 17119  167B                     l9171:	
 17120                           
 17121                           ;system.c: 121:     heater->status = CH_ENABLED;
 17122  167B  0141               	movlb	1	; select bank1
 17123  167C  084F               	movf	checkChannelStatus@heater^(0+128),w
 17124  167D  3E1E               	addlw	30
 17125  167E  00B9               	movwf	??_checkChannelStatus^(0+128)
 17126  167F  3000               	movlw	0
 17127  1680  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 17128  1681  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17129  1682  0839               	movf	??_checkChannelStatus^(0+128),w
 17130  1683  0086               	movwf	6
 17131  1684  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17132  1685  0087               	movwf	7
 17133  1686  3001               	movlw	1
 17134  1687  0081               	movwf	1
 17135  1688                     l815:	
 17136                           
 17137                           ;system.c: 124:    if (heater->mode == MODE_AUTO)
 17138  1688  084F               	movf	checkChannelStatus@heater^(0+128),w
 17139  1689  0086               	movwf	6
 17140  168A  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17141  168B  0087               	movwf	7
 17142  168C  315D               	addfsr 1,29
 17143  168D  0301               	decf	1,w
 17144  168E  1D03               	btfss	3,2
 17145  168F  2F3A               	goto	l9179
 17146                           
 17147                           ;system.c: 125:     heater->DCreq = (((heater->Preq / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Preq / heater->Pmax) * 100) : (100));
 17148  1690  3042               	movlw	66
 17149  1691  0140               	movlb	0	; select bank0
 17150  1692  00C4               	movwf	___flmul@b+3
 17151  1693  30C8               	movlw	200
 17152  1694  00C3               	movwf	___flmul@b+2
 17153  1695  3000               	movlw	0
 17154  1696  00C2               	movwf	___flmul@b+1
 17155  1697  3000               	movlw	0
 17156  1698  00C1               	movwf	___flmul@b
 17157  1699  0141               	movlb	1	; select bank1
 17158  169A  084F               	movf	checkChannelStatus@heater^(0+128),w
 17159  169B  0086               	movwf	6
 17160  169C  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17161  169D  0087               	movwf	7
 17162  169E  3144               	addfsr 1,4
 17163  169F  3F40               	moviw [0]fsr1
 17164  16A0  0140               	movlb	0	; select bank0
 17165  16A1  00DB               	movwf	___fldiv@a
 17166  16A2  3F41               	moviw [1]fsr1
 17167  16A3  00DC               	movwf	___fldiv@a+1
 17168  16A4  3F42               	moviw [2]fsr1
 17169  16A5  00DD               	movwf	___fldiv@a+2
 17170  16A6  3F43               	moviw [3]fsr1
 17171  16A7  00DE               	movwf	___fldiv@a+3
 17172  16A8  0141               	movlb	1	; select bank1
 17173  16A9  084F               	movf	checkChannelStatus@heater^(0+128),w
 17174  16AA  0086               	movwf	6
 17175  16AB  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17176  16AC  0087               	movwf	7
 17177  16AD  3148               	addfsr 1,8
 17178  16AE  3F40               	moviw [0]fsr1
 17179  16AF  0140               	movlb	0	; select bank0
 17180  16B0  00DF               	movwf	___fldiv@b
 17181  16B1  3F41               	moviw [1]fsr1
 17182  16B2  00E0               	movwf	___fldiv@b+1
 17183  16B3  3F42               	moviw [2]fsr1
 17184  16B4  00E1               	movwf	___fldiv@b+2
 17185  16B5  3F43               	moviw [3]fsr1
 17186  16B6  00E2               	movwf	___fldiv@b+3
 17187  16B7  319E  2628  3194   	fcall	___fldiv
 17188  16BA  0140               	movlb	0	; select bank0
 17189  16BB  085E               	movf	?___fldiv+3,w
 17190  16BC  00C8               	movwf	___flmul@a+3
 17191  16BD  085D               	movf	?___fldiv+2,w
 17192  16BE  00C7               	movwf	___flmul@a+2
 17193  16BF  085C               	movf	?___fldiv+1,w
 17194  16C0  00C6               	movwf	___flmul@a+1
 17195  16C1  085B               	movf	?___fldiv,w
 17196  16C2  00C5               	movwf	___flmul@a
 17197  16C3  3185  2561  3194   	fcall	___flmul
 17198  16C6  0140               	movlb	0	; select bank0
 17199  16C7  0844               	movf	?___flmul+3,w
 17200  16C8  0141               	movlb	1	; select bank1
 17201  16C9  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17202  16CA  0140               	movlb	0	; select bank0
 17203  16CB  0843               	movf	?___flmul+2,w
 17204  16CC  0141               	movlb	1	; select bank1
 17205  16CD  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17206  16CE  0140               	movlb	0	; select bank0
 17207  16CF  0842               	movf	?___flmul+1,w
 17208  16D0  0141               	movlb	1	; select bank1
 17209  16D1  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17210  16D2  0140               	movlb	0	; select bank0
 17211  16D3  0841               	movf	?___flmul,w
 17212  16D4  0141               	movlb	1	; select bank1
 17213  16D5  00AD               	movwf	___flge@ff1^(0+128)
 17214  16D6  3042               	movlw	66
 17215  16D7  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17216  16D8  30C8               	movlw	200
 17217  16D9  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17218  16DA  3000               	movlw	0
 17219  16DB  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17220  16DC  3000               	movlw	0
 17221  16DD  00B1               	movwf	___flge@ff2^(0+128)
 17222  16DE  31AA  2206  3194   	fcall	___flge
 17223  16E1  1C03               	btfss	3,0
 17224  16E2  2EEC               	goto	l9177
 17225  16E3  3042               	movlw	66
 17226  16E4  0141               	movlb	1	; select bank1
 17227  16E5  00C2               	movwf	(_checkChannelStatus$1891+3)^(0+128)
 17228  16E6  30C8               	movlw	200
 17229  16E7  00C1               	movwf	(_checkChannelStatus$1891+2)^(0+128)
 17230  16E8  3000               	movlw	0
 17231  16E9  00C0               	movwf	(_checkChannelStatus$1891+1)^(0+128)
 17232  16EA  3000               	movlw	0
 17233  16EB  2F31               	goto	L9
 17234  16EC                     l9177:	
 17235  16EC  3042               	movlw	66
 17236  16ED  0140               	movlb	0	; select bank0
 17237  16EE  00C4               	movwf	___flmul@b+3
 17238  16EF  30C8               	movlw	200
 17239  16F0  00C3               	movwf	___flmul@b+2
 17240  16F1  3000               	movlw	0
 17241  16F2  00C2               	movwf	___flmul@b+1
 17242  16F3  3000               	movlw	0
 17243  16F4  00C1               	movwf	___flmul@b
 17244  16F5  0141               	movlb	1	; select bank1
 17245  16F6  084F               	movf	checkChannelStatus@heater^(0+128),w
 17246  16F7  0086               	movwf	6
 17247  16F8  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17248  16F9  0087               	movwf	7
 17249  16FA  3144               	addfsr 1,4
 17250  16FB  3F40               	moviw [0]fsr1
 17251  16FC  0140               	movlb	0	; select bank0
 17252  16FD  00DB               	movwf	___fldiv@a
 17253  16FE  3F41               	moviw [1]fsr1
 17254  16FF  00DC               	movwf	___fldiv@a+1
 17255  1700  3F42               	moviw [2]fsr1
 17256  1701  00DD               	movwf	___fldiv@a+2
 17257  1702  3F43               	moviw [3]fsr1
 17258  1703  00DE               	movwf	___fldiv@a+3
 17259  1704  0141               	movlb	1	; select bank1
 17260  1705  084F               	movf	checkChannelStatus@heater^(0+128),w
 17261  1706  0086               	movwf	6
 17262  1707  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17263  1708  0087               	movwf	7
 17264  1709  3148               	addfsr 1,8
 17265  170A  3F40               	moviw [0]fsr1
 17266  170B  0140               	movlb	0	; select bank0
 17267  170C  00DF               	movwf	___fldiv@b
 17268  170D  3F41               	moviw [1]fsr1
 17269  170E  00E0               	movwf	___fldiv@b+1
 17270  170F  3F42               	moviw [2]fsr1
 17271  1710  00E1               	movwf	___fldiv@b+2
 17272  1711  3F43               	moviw [3]fsr1
 17273  1712  00E2               	movwf	___fldiv@b+3
 17274  1713  319E  2628  3194   	fcall	___fldiv
 17275  1716  0140               	movlb	0	; select bank0
 17276  1717  085E               	movf	?___fldiv+3,w
 17277  1718  00C8               	movwf	___flmul@a+3
 17278  1719  085D               	movf	?___fldiv+2,w
 17279  171A  00C7               	movwf	___flmul@a+2
 17280  171B  085C               	movf	?___fldiv+1,w
 17281  171C  00C6               	movwf	___flmul@a+1
 17282  171D  085B               	movf	?___fldiv,w
 17283  171E  00C5               	movwf	___flmul@a
 17284  171F  3185  2561  3194   	fcall	___flmul
 17285  1722  0140               	movlb	0	; select bank0
 17286  1723  0844               	movf	?___flmul+3,w
 17287  1724  0141               	movlb	1	; select bank1
 17288  1725  00C2               	movwf	(_checkChannelStatus$1891+3)^(0+128)
 17289  1726  0140               	movlb	0	; select bank0
 17290  1727  0843               	movf	?___flmul+2,w
 17291  1728  0141               	movlb	1	; select bank1
 17292  1729  00C1               	movwf	(_checkChannelStatus$1891+2)^(0+128)
 17293  172A  0140               	movlb	0	; select bank0
 17294  172B  0842               	movf	?___flmul+1,w
 17295  172C  0141               	movlb	1	; select bank1
 17296  172D  00C0               	movwf	(_checkChannelStatus$1891+1)^(0+128)
 17297  172E  0140               	movlb	0	; select bank0
 17298  172F  0841               	movf	?___flmul,w
 17299  1730  0141               	movlb	1	; select bank1
 17300  1731                     L9:	
 17301  1731  00BF               	movwf	_checkChannelStatus$1891^(0+128)
 17302  1732  0842               	movf	(_checkChannelStatus$1891+3)^(0+128),w
 17303  1733  00AB               	movwf	(___fltol@f1+3)^(0+128)
 17304  1734  0841               	movf	(_checkChannelStatus$1891+2)^(0+128),w
 17305  1735  00AA               	movwf	(___fltol@f1+2)^(0+128)
 17306  1736  0840               	movf	(_checkChannelStatus$1891+1)^(0+128),w
 17307  1737  00A9               	movwf	(___fltol@f1+1)^(0+128)
 17308  1738  083F               	movf	_checkChannelStatus$1891^(0+128),w
 17309  1739  2FE3               	goto	L11
 17310  173A                     l9179:	
 17311                           
 17312                           ;system.c: 127:     heater->DCreq = (((heater->Pset / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Pset / heater->Pmax) * 100) : (100));
 17313  173A  3042               	movlw	66
 17314  173B  0140               	movlb	0	; select bank0
 17315  173C  00C4               	movwf	___flmul@b+3
 17316  173D  30C8               	movlw	200
 17317  173E  00C3               	movwf	___flmul@b+2
 17318  173F  3000               	movlw	0
 17319  1740  00C2               	movwf	___flmul@b+1
 17320  1741  3000               	movlw	0
 17321  1742  00C1               	movwf	___flmul@b
 17322  1743  0141               	movlb	1	; select bank1
 17323  1744  084F               	movf	checkChannelStatus@heater^(0+128),w
 17324  1745  0086               	movwf	6
 17325  1746  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17326  1747  0087               	movwf	7
 17327  1748  3144               	addfsr 1,4
 17328  1749  3F40               	moviw [0]fsr1
 17329  174A  0140               	movlb	0	; select bank0
 17330  174B  00DB               	movwf	___fldiv@a
 17331  174C  3F41               	moviw [1]fsr1
 17332  174D  00DC               	movwf	___fldiv@a+1
 17333  174E  3F42               	moviw [2]fsr1
 17334  174F  00DD               	movwf	___fldiv@a+2
 17335  1750  3F43               	moviw [3]fsr1
 17336  1751  00DE               	movwf	___fldiv@a+3
 17337  1752  0141               	movlb	1	; select bank1
 17338  1753  084F               	movf	checkChannelStatus@heater^(0+128),w
 17339  1754  0086               	movwf	6
 17340  1755  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17341  1756  0087               	movwf	7
 17342  1757  3150               	addfsr 1,16
 17343  1758  3F40               	moviw [0]fsr1
 17344  1759  0140               	movlb	0	; select bank0
 17345  175A  00DF               	movwf	___fldiv@b
 17346  175B  3F41               	moviw [1]fsr1
 17347  175C  00E0               	movwf	___fldiv@b+1
 17348  175D  3F42               	moviw [2]fsr1
 17349  175E  00E1               	movwf	___fldiv@b+2
 17350  175F  3F43               	moviw [3]fsr1
 17351  1760  00E2               	movwf	___fldiv@b+3
 17352  1761  319E  2628  3194   	fcall	___fldiv
 17353  1764  0140               	movlb	0	; select bank0
 17354  1765  085E               	movf	?___fldiv+3,w
 17355  1766  00C8               	movwf	___flmul@a+3
 17356  1767  085D               	movf	?___fldiv+2,w
 17357  1768  00C7               	movwf	___flmul@a+2
 17358  1769  085C               	movf	?___fldiv+1,w
 17359  176A  00C6               	movwf	___flmul@a+1
 17360  176B  085B               	movf	?___fldiv,w
 17361  176C  00C5               	movwf	___flmul@a
 17362  176D  3185  2561  3194   	fcall	___flmul
 17363  1770  0140               	movlb	0	; select bank0
 17364  1771  0844               	movf	?___flmul+3,w
 17365  1772  0141               	movlb	1	; select bank1
 17366  1773  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17367  1774  0140               	movlb	0	; select bank0
 17368  1775  0843               	movf	?___flmul+2,w
 17369  1776  0141               	movlb	1	; select bank1
 17370  1777  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17371  1778  0140               	movlb	0	; select bank0
 17372  1779  0842               	movf	?___flmul+1,w
 17373  177A  0141               	movlb	1	; select bank1
 17374  177B  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17375  177C  0140               	movlb	0	; select bank0
 17376  177D  0841               	movf	?___flmul,w
 17377  177E  0141               	movlb	1	; select bank1
 17378  177F  00AD               	movwf	___flge@ff1^(0+128)
 17379  1780  3042               	movlw	66
 17380  1781  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17381  1782  30C8               	movlw	200
 17382  1783  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17383  1784  3000               	movlw	0
 17384  1785  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17385  1786  3000               	movlw	0
 17386  1787  00B1               	movwf	___flge@ff2^(0+128)
 17387  1788  31AA  2206  3194   	fcall	___flge
 17388  178B  1C03               	btfss	3,0
 17389  178C  2F96               	goto	l9183
 17390  178D  3042               	movlw	66
 17391  178E  0141               	movlb	1	; select bank1
 17392  178F  00C6               	movwf	(_checkChannelStatus$1892+3)^(0+128)
 17393  1790  30C8               	movlw	200
 17394  1791  00C5               	movwf	(_checkChannelStatus$1892+2)^(0+128)
 17395  1792  3000               	movlw	0
 17396  1793  00C4               	movwf	(_checkChannelStatus$1892+1)^(0+128)
 17397  1794  3000               	movlw	0
 17398  1795  2FDB               	goto	L10
 17399  1796                     l9183:	
 17400  1796  3042               	movlw	66
 17401  1797  0140               	movlb	0	; select bank0
 17402  1798  00C4               	movwf	___flmul@b+3
 17403  1799  30C8               	movlw	200
 17404  179A  00C3               	movwf	___flmul@b+2
 17405  179B  3000               	movlw	0
 17406  179C  00C2               	movwf	___flmul@b+1
 17407  179D  3000               	movlw	0
 17408  179E  00C1               	movwf	___flmul@b
 17409  179F  0141               	movlb	1	; select bank1
 17410  17A0  084F               	movf	checkChannelStatus@heater^(0+128),w
 17411  17A1  0086               	movwf	6
 17412  17A2  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17413  17A3  0087               	movwf	7
 17414  17A4  3144               	addfsr 1,4
 17415  17A5  3F40               	moviw [0]fsr1
 17416  17A6  0140               	movlb	0	; select bank0
 17417  17A7  00DB               	movwf	___fldiv@a
 17418  17A8  3F41               	moviw [1]fsr1
 17419  17A9  00DC               	movwf	___fldiv@a+1
 17420  17AA  3F42               	moviw [2]fsr1
 17421  17AB  00DD               	movwf	___fldiv@a+2
 17422  17AC  3F43               	moviw [3]fsr1
 17423  17AD  00DE               	movwf	___fldiv@a+3
 17424  17AE  0141               	movlb	1	; select bank1
 17425  17AF  084F               	movf	checkChannelStatus@heater^(0+128),w
 17426  17B0  0086               	movwf	6
 17427  17B1  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17428  17B2  0087               	movwf	7
 17429  17B3  3150               	addfsr 1,16
 17430  17B4  3F40               	moviw [0]fsr1
 17431  17B5  0140               	movlb	0	; select bank0
 17432  17B6  00DF               	movwf	___fldiv@b
 17433  17B7  3F41               	moviw [1]fsr1
 17434  17B8  00E0               	movwf	___fldiv@b+1
 17435  17B9  3F42               	moviw [2]fsr1
 17436  17BA  00E1               	movwf	___fldiv@b+2
 17437  17BB  3F43               	moviw [3]fsr1
 17438  17BC  00E2               	movwf	___fldiv@b+3
 17439  17BD  319E  2628  3194   	fcall	___fldiv
 17440  17C0  0140               	movlb	0	; select bank0
 17441  17C1  085E               	movf	?___fldiv+3,w
 17442  17C2  00C8               	movwf	___flmul@a+3
 17443  17C3  085D               	movf	?___fldiv+2,w
 17444  17C4  00C7               	movwf	___flmul@a+2
 17445  17C5  085C               	movf	?___fldiv+1,w
 17446  17C6  00C6               	movwf	___flmul@a+1
 17447  17C7  085B               	movf	?___fldiv,w
 17448  17C8  00C5               	movwf	___flmul@a
 17449  17C9  3185  2561  3194   	fcall	___flmul
 17450  17CC  0140               	movlb	0	; select bank0
 17451  17CD  0844               	movf	?___flmul+3,w
 17452  17CE  0141               	movlb	1	; select bank1
 17453  17CF  00C6               	movwf	(_checkChannelStatus$1892+3)^(0+128)
 17454  17D0  0140               	movlb	0	; select bank0
 17455  17D1  0843               	movf	?___flmul+2,w
 17456  17D2  0141               	movlb	1	; select bank1
 17457  17D3  00C5               	movwf	(_checkChannelStatus$1892+2)^(0+128)
 17458  17D4  0140               	movlb	0	; select bank0
 17459  17D5  0842               	movf	?___flmul+1,w
 17460  17D6  0141               	movlb	1	; select bank1
 17461  17D7  00C4               	movwf	(_checkChannelStatus$1892+1)^(0+128)
 17462  17D8  0140               	movlb	0	; select bank0
 17463  17D9  0841               	movf	?___flmul,w
 17464  17DA  0141               	movlb	1	; select bank1
 17465  17DB                     L10:	
 17466  17DB  00C3               	movwf	_checkChannelStatus$1892^(0+128)
 17467  17DC  0846               	movf	(_checkChannelStatus$1892+3)^(0+128),w
 17468  17DD  00AB               	movwf	(___fltol@f1+3)^(0+128)
 17469  17DE  0845               	movf	(_checkChannelStatus$1892+2)^(0+128),w
 17470  17DF  00AA               	movwf	(___fltol@f1+2)^(0+128)
 17471  17E0  0844               	movf	(_checkChannelStatus$1892+1)^(0+128),w
 17472  17E1  00A9               	movwf	(___fltol@f1+1)^(0+128)
 17473  17E2  0843               	movf	_checkChannelStatus$1892^(0+128),w
 17474  17E3                     L11:	
 17475  17E3  00A8               	movwf	___fltol@f1^(0+128)
 17476  17E4  31A8  203E  3194   	fcall	___fltol
 17477  17E7  0141               	movlb	1	; select bank1
 17478  17E8  0828               	movf	?___fltol^(0+128),w
 17479  17E9  00B9               	movwf	??_checkChannelStatus^(0+128)
 17480  17EA  084F               	movf	checkChannelStatus@heater^(0+128),w
 17481  17EB  3E14               	addlw	20
 17482  17EC  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17483  17ED  3000               	movlw	0
 17484  17EE  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 17485  17EF  00BB               	movwf	(??_checkChannelStatus+2)^(0+128)
 17486  17F0  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17487  17F1  0086               	movwf	6
 17488  17F2  083B               	movf	(??_checkChannelStatus+2)^(0+128),w
 17489  17F3  0087               	movwf	7
 17490  17F4  0839               	movf	??_checkChannelStatus^(0+128),w
 17491  17F5                     L8:	
 17492  17F5  0081               	movwf	1
 17493  17F6                     l9185:	
 17494  17F6  3001               	movlw	1
 17495  17F7  0141               	movlb	1	; select bank1
 17496  17F8  00B9               	movwf	??_checkChannelStatus^(0+128)
 17497  17F9  0839               	movf	??_checkChannelStatus^(0+128),w
 17498  17FA  07CE               	addwf	checkChannelStatus@channel^(0+128),f
 17499  17FB  3004               	movlw	4
 17500  17FC  024E               	subwf	checkChannelStatus@channel^(0+128),w
 17501  17FD  1803               	btfsc	3,0
 17502  17FE  0008               	return
 17503  17FF  2C34               	goto	l9099
 17504  1800                     __end_of_checkChannelStatus:	
 17505                           
 17506                           	psect	text38
 17507  3576                     __ptext38:	
 17508 ;; *************** function _setChannelSwitch *****************
 17509 ;; Defined at:
 17510 ;;		line 6 in file "io.c"
 17511 ;; Parameters:    Size  Location     Type
 17512 ;;  channel         1    wreg     unsigned char 
 17513 ;;  state           1   13[BANK0 ] unsigned char 
 17514 ;; Auto vars:     Size  Location     Type
 17515 ;;  channel         1   16[BANK0 ] unsigned char 
 17516 ;; Return value:  Size  Location     Type
 17517 ;;                  1    wreg      void 
 17518 ;; Registers used:
 17519 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17520 ;; Tracked objects:
 17521 ;;		On entry : 0/0
 17522 ;;		On exit  : 0/0
 17523 ;;		Unchanged: 0/0
 17524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17525 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17526 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17527 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17528 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17529 ;;Total ram usage:        4 bytes
 17530 ;; Hardware stack levels used:    1
 17531 ;; Hardware stack levels required when called:    3
 17532 ;; This function calls:
 17533 ;;		Nothing
 17534 ;; This function is called by:
 17535 ;;		_checkChannelStatus
 17536 ;;		_systemCheck
 17537 ;;		_controller
 17538 ;; This function uses a non-reentrant model
 17539 ;;
 17540                           
 17541                           
 17542                           ;psect for function _setChannelSwitch
 17543  3576                     _setChannelSwitch:	
 17544                           
 17545                           ;incstack = 0
 17546                           ; Regs used in _setChannelSwitch: [wreg-fsr0h+status,2+status,0]
 17547                           ;setChannelSwitch@channel stored from wreg
 17548  3576  0140               	movlb	0	; select bank0
 17549  3577  00B0               	movwf	setChannelSwitch@channel
 17550                           
 17551                           ;io.c: 6: void setChannelSwitch(uint8_t channel, uint8_t state);io.c: 7: {;io.c: 8:  swi
      +                          tch(channel) {
 17552  3578  2DA6               	goto	l8619
 17553  3579                     l8607:	
 17554                           
 17555                           ;io.c: 10:   LATAbits.LATA0 = state;
 17556  3579  0C2D               	rrf	setChannelSwitch@state,w
 17557  357A  1C03               	skipc
 17558  357B  1018               	bcf	24,0	;volatile
 17559  357C  1803               	skipnc
 17560  357D  1418               	bsf	24,0	;volatile
 17561                           
 17562                           ;io.c: 11:   break;
 17563  357E  0008               	return
 17564  357F                     l8609:	
 17565                           
 17566                           ;io.c: 13:   LATAbits.LATA1 = state;
 17567  357F  0C2D               	rrf	setChannelSwitch@state,w
 17568  3580  1C03               	skipc
 17569  3581  1098               	bcf	24,1	;volatile
 17570  3582  1803               	skipnc
 17571  3583  1498               	bsf	24,1	;volatile
 17572                           
 17573                           ;io.c: 14:   break;
 17574  3584  0008               	return
 17575  3585                     l8611:	
 17576                           
 17577                           ;io.c: 16:   LATAbits.LATA2 = state;
 17578  3585  0C2D               	rrf	setChannelSwitch@state,w
 17579  3586  1C03               	skipc
 17580  3587  1118               	bcf	24,2	;volatile
 17581  3588  1803               	skipnc
 17582  3589  1518               	bsf	24,2	;volatile
 17583                           
 17584                           ;io.c: 17:   break;
 17585  358A  0008               	return
 17586  358B                     l8613:	
 17587                           
 17588                           ;io.c: 19:   LATAbits.LATA3 = state;
 17589  358B  0C2D               	rrf	setChannelSwitch@state,w
 17590  358C  1C03               	skipc
 17591  358D  1198               	bcf	24,3	;volatile
 17592  358E  1803               	skipnc
 17593  358F  1598               	bsf	24,3	;volatile
 17594                           
 17595                           ;io.c: 20:   break;
 17596  3590  0008               	return
 17597  3591                     l8615:	
 17598                           
 17599                           ;io.c: 22:   LATAbits.LATA0 = state;
 17600  3591  0C2D               	rrf	setChannelSwitch@state,w
 17601  3592  1C03               	skipc
 17602  3593  1018               	bcf	24,0	;volatile
 17603  3594  1803               	skipnc
 17604  3595  1418               	bsf	24,0	;volatile
 17605                           
 17606                           ;io.c: 23:   LATAbits.LATA1 = state;
 17607  3596  0C2D               	rrf	setChannelSwitch@state,w
 17608  3597  1C03               	skipc
 17609  3598  1098               	bcf	24,1	;volatile
 17610  3599  1803               	skipnc
 17611  359A  1498               	bsf	24,1	;volatile
 17612                           
 17613                           ;io.c: 24:   LATAbits.LATA2 = state;
 17614  359B  0C2D               	rrf	setChannelSwitch@state,w
 17615  359C  1C03               	skipc
 17616  359D  1118               	bcf	24,2	;volatile
 17617  359E  1803               	skipnc
 17618  359F  1518               	bsf	24,2	;volatile
 17619                           
 17620                           ;io.c: 25:   LATAbits.LATA3 = state;
 17621  35A0  0C2D               	rrf	setChannelSwitch@state,w
 17622  35A1  1C03               	skipc
 17623  35A2  1198               	bcf	24,3	;volatile
 17624  35A3  1803               	skipnc
 17625  35A4  1598               	bsf	24,3	;volatile
 17626                           
 17627                           ;io.c: 26:   break;
 17628  35A5  0008               	return
 17629  35A6                     l8619:	
 17630  35A6  0830               	movf	setChannelSwitch@channel,w
 17631  35A7  00AE               	movwf	??_setChannelSwitch
 17632  35A8  01AF               	clrf	??_setChannelSwitch+1
 17633                           
 17634                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17635                           ; Switch size 1, requested type "simple"
 17636                           ; Number of cases is 1, Range of values is 0 to 0
 17637                           ; switch strategies available:
 17638                           ; Name         Instructions Cycles
 17639                           ; simple_byte            4     3 (average)
 17640                           ; direct_byte            8     6 (fixed)
 17641                           ; jumptable            260     6 (fixed)
 17642                           ;	Chosen strategy is simple_byte
 17643  35A9  082F               	movf	??_setChannelSwitch+1,w
 17644  35AA  3A00               	xorlw	0	; case 0
 17645  35AB  1903               	skipnz
 17646  35AC  2DAE               	goto	l9605
 17647  35AD  2D91               	goto	l8615
 17648  35AE                     l9605:	
 17649                           
 17650                           ; Switch size 1, requested type "simple"
 17651                           ; Number of cases is 4, Range of values is 0 to 3
 17652                           ; switch strategies available:
 17653                           ; Name         Instructions Cycles
 17654                           ; simple_byte           13     7 (average)
 17655                           ; direct_byte           14     6 (fixed)
 17656                           ; jumptable            260     6 (fixed)
 17657                           ;	Chosen strategy is simple_byte
 17658  35AE  082E               	movf	??_setChannelSwitch,w
 17659  35AF  3A00               	xorlw	0	; case 0
 17660  35B0  1903               	skipnz
 17661  35B1  2D79               	goto	l8607
 17662  35B2  3A01               	xorlw	1	; case 1
 17663  35B3  1903               	skipnz
 17664  35B4  2D7F               	goto	l8609
 17665  35B5  3A03               	xorlw	3	; case 2
 17666  35B6  1903               	skipnz
 17667  35B7  2D85               	goto	l8611
 17668  35B8  3A01               	xorlw	1	; case 3
 17669  35B9  1903               	skipnz
 17670  35BA  2D8B               	goto	l8613
 17671  35BB  2D91               	goto	l8615
 17672  35BC  0008               	return
 17673  35BD                     __end_of_setChannelSwitch:	
 17674                           
 17675                           	psect	text39
 17676  31FA                     __ptext39:	
 17677 ;; *************** function _getAnalogValue *****************
 17678 ;; Defined at:
 17679 ;;		line 33 in file "io.c"
 17680 ;; Parameters:    Size  Location     Type
 17681 ;;  channel         1    wreg     unsigned char 
 17682 ;; Auto vars:     Size  Location     Type
 17683 ;;  channel         1    3[BANK0 ] unsigned char 
 17684 ;; Return value:  Size  Location     Type
 17685 ;;                  2    0[BANK0 ] unsigned short 
 17686 ;; Registers used:
 17687 ;;		wreg, status,2, status,0
 17688 ;; Tracked objects:
 17689 ;;		On entry : 0/0
 17690 ;;		On exit  : 0/0
 17691 ;;		Unchanged: 0/0
 17692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17693 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17694 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17695 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17696 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17697 ;;Total ram usage:        4 bytes
 17698 ;; Hardware stack levels used:    1
 17699 ;; Hardware stack levels required when called:    3
 17700 ;; This function calls:
 17701 ;;		Nothing
 17702 ;; This function is called by:
 17703 ;;		_checkChannelStatus
 17704 ;;		_systemCheck
 17705 ;;		_getAnalogValues
 17706 ;; This function uses a non-reentrant model
 17707 ;;
 17708                           
 17709                           
 17710                           ;psect for function _getAnalogValue
 17711  31FA                     _getAnalogValue:	
 17712                           
 17713                           ;incstack = 0
 17714                           ; Regs used in _getAnalogValue: [wreg+status,2+status,0]
 17715                           ;getAnalogValue@channel stored from wreg
 17716  31FA  0140               	movlb	0	; select bank0
 17717  31FB  00A3               	movwf	getAnalogValue@channel
 17718                           
 17719                           ;io.c: 33: uint16_t getAnalogValue(uint8_t channel);io.c: 34: {;io.c: 35:  ADCON0bits.CH
      +                          S = channel;
 17720  31FC  0823               	movf	getAnalogValue@channel,w
 17721  31FD  00A2               	movwf	??_getAnalogValue
 17722  31FE  0DA2               	rlf	??_getAnalogValue,f
 17723  31FF  0DA2               	rlf	??_getAnalogValue,f
 17724  3200  0141               	movlb	1	; select bank1
 17725  3201  081D               	movf	29,w	;volatile
 17726  3202  0140               	movlb	0	; select bank0
 17727  3203  0622               	xorwf	??_getAnalogValue,w
 17728  3204  3903               	andlw	-253
 17729  3205  0622               	xorwf	??_getAnalogValue,w
 17730  3206  0141               	movlb	1	; select bank1
 17731  3207  009D               	movwf	29	;volatile
 17732                           
 17733                           ;io.c: 36:  _delay((unsigned long)((5)*(4000000UL/4000000.0)));
 17734  3208  3200               	nop2	;2 cycle nop
 17735  3209  3200               	nop2	;2 cycle nop
 17736  320A  0000               	nop
 17737                           
 17738                           ;io.c: 37:  ADCON0bits.GO = 1;
 17739  320B  0141               	movlb	1	; select bank1
 17740  320C  149D               	bsf	29,1	;volatile
 17741  320D                     l732:	
 17742                           ;io.c: 38:  while (ADCON0bits.GO);
 17743                           
 17744  320D  189D               	btfsc	29,1	;volatile
 17745  320E  2A0D               	goto	l732
 17746                           
 17747                           ;io.c: 39:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 17748  320F  081C               	movf	28,w	;volatile
 17749  3210  0140               	movlb	0	; select bank0
 17750  3211  00A1               	movwf	?_getAnalogValue+1
 17751  3212  0141               	movlb	1	; select bank1
 17752  3213  081B               	movf	27,w	;volatile
 17753  3214  0140               	movlb	0	; select bank0
 17754  3215  00A0               	movwf	?_getAnalogValue
 17755  3216  0008               	return
 17756  3217                     __end_of_getAnalogValue:	
 17757                           
 17758                           	psect	text40
 17759  1800                     __ptext40:	
 17760 ;; *************** function _error *****************
 17761 ;; Defined at:
 17762 ;;		line 13 in file "error.c"
 17763 ;; Parameters:    Size  Location     Type
 17764 ;;  error           1    wreg     enum E7825
 17765 ;; Auto vars:     Size  Location     Type
 17766 ;;  error           1    8[BANK0 ] enum E7825
 17767 ;; Return value:  Size  Location     Type
 17768 ;;                  1    wreg      void 
 17769 ;; Registers used:
 17770 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17771 ;; Tracked objects:
 17772 ;;		On entry : 0/0
 17773 ;;		On exit  : 0/0
 17774 ;;		Unchanged: 0/0
 17775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17777 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17778 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17779 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17780 ;;Total ram usage:        2 bytes
 17781 ;; Hardware stack levels used:    1
 17782 ;; Hardware stack levels required when called:    4
 17783 ;; This function calls:
 17784 ;;		___awmod
 17785 ;; This function is called by:
 17786 ;;		_menu
 17787 ;;		_checkChannelStatus
 17788 ;;		_systemCheck
 17789 ;;		_checkSensor
 17790 ;; This function uses a non-reentrant model
 17791 ;;
 17792                           
 17793                           
 17794                           ;psect for function _error
 17795  1800                     _error:	
 17796                           
 17797                           ;incstack = 0
 17798                           ; Regs used in _error: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17799                           ;error@error stored from wreg
 17800  1800  0140               	movlb	0	; select bank0
 17801  1801  00A8               	movwf	error@error
 17802                           
 17803                           ;error.c: 13: void error(enum e_errorcode error);error.c: 14: {;error.c: 15:  errorMessa
      +                          geQueue[head] = error;
 17804  1802  0828               	movf	error@error,w
 17805  1803  00A7               	movwf	??_error
 17806  1804  0142               	movlb	2	; select bank2
 17807  1805  0865               	movf	_head^(0+256),w
 17808  1806  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 17809  1807  0086               	movwf	6
 17810  1808  3002               	movlw	2	; select bank4/5
 17811  1809  0087               	movwf	7
 17812  180A  0140               	movlb	0	; select bank0
 17813  180B  0827               	movf	??_error,w
 17814  180C  0081               	movwf	1
 17815                           
 17816                           ;error.c: 16:  head = (head + 1) % 10;
 17817  180D  300A               	movlw	10
 17818  180E  00A0               	movwf	___awmod@divisor
 17819  180F  3000               	movlw	0
 17820  1810  00A1               	movwf	___awmod@divisor+1
 17821  1811  0142               	movlb	2	; select bank2
 17822  1812  0865               	movf	_head^(0+256),w
 17823  1813  3E01               	addlw	1
 17824  1814  0140               	movlb	0	; select bank0
 17825  1815  00A2               	movwf	___awmod@dividend
 17826  1816  3000               	movlw	0
 17827  1817  1803               	skipnc
 17828  1818  3001               	movlw	1
 17829  1819  00A3               	movwf	___awmod@dividend+1
 17830  181A  31B4  24E9  3198   	fcall	___awmod
 17831  181D  0140               	movlb	0	; select bank0
 17832  181E  0820               	movf	?___awmod,w
 17833  181F  00A7               	movwf	??_error
 17834  1820  0827               	movf	??_error,w
 17835  1821  0142               	movlb	2	; select bank2
 17836  1822  00E5               	movwf	_head^(0+256)
 17837                           
 17838                           ;error.c: 17:  if (head == tail)
 17839  1823  0865               	movf	_head^(0+256),w
 17840  1824  067C               	xorwf	_tail,w
 17841  1825  1D03               	skipz
 17842  1826  0008               	return
 17843                           
 17844                           ;error.c: 18:   tail = (tail + 1) % 10;
 17845  1827  300A               	movlw	10
 17846  1828  0140               	movlb	0	; select bank0
 17847  1829  00A0               	movwf	___awmod@divisor
 17848  182A  3000               	movlw	0
 17849  182B  00A1               	movwf	___awmod@divisor+1
 17850  182C  087C               	movf	_tail,w
 17851  182D  3E01               	addlw	1
 17852  182E  00A2               	movwf	___awmod@dividend
 17853  182F  3000               	movlw	0
 17854  1830  1803               	skipnc
 17855  1831  3001               	movlw	1
 17856  1832  00A3               	movwf	___awmod@dividend+1
 17857  1833  31B4  24E9         	fcall	___awmod
 17858  1835  0140               	movlb	0	; select bank0
 17859  1836  0820               	movf	?___awmod,w
 17860  1837  00A7               	movwf	??_error
 17861  1838  0827               	movf	??_error,w
 17862  1839  00FC               	movwf	_tail
 17863  183A  0008               	return
 17864  183B                     __end_of_error:	
 17865                           
 17866                           	psect	text41
 17867  34E9                     __ptext41:	
 17868 ;; *************** function ___awmod *****************
 17869 ;; Defined at:
 17870 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 17871 ;; Parameters:    Size  Location     Type
 17872 ;;  divisor         2    0[BANK0 ] int 
 17873 ;;  dividend        2    2[BANK0 ] int 
 17874 ;; Auto vars:     Size  Location     Type
 17875 ;;  sign            1    6[BANK0 ] unsigned char 
 17876 ;;  counter         1    5[BANK0 ] unsigned char 
 17877 ;; Return value:  Size  Location     Type
 17878 ;;                  2    0[BANK0 ] int 
 17879 ;; Registers used:
 17880 ;;		wreg, status,2, status,0
 17881 ;; Tracked objects:
 17882 ;;		On entry : 0/0
 17883 ;;		On exit  : 0/0
 17884 ;;		Unchanged: 0/0
 17885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17886 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17887 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17888 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17889 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17890 ;;Total ram usage:        7 bytes
 17891 ;; Hardware stack levels used:    1
 17892 ;; Hardware stack levels required when called:    3
 17893 ;; This function calls:
 17894 ;;		Nothing
 17895 ;; This function is called by:
 17896 ;;		_error
 17897 ;;		_viewErrorMessage
 17898 ;;		_itoa
 17899 ;; This function uses a non-reentrant model
 17900 ;;
 17901                           
 17902                           
 17903                           ;psect for function ___awmod
 17904  34E9                     ___awmod:	
 17905                           
 17906                           ;incstack = 0
 17907                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 17908  34E9  0140               	movlb	0	; select bank0
 17909  34EA  01A6               	clrf	___awmod@sign
 17910  34EB  1FA3               	btfss	___awmod@dividend+1,7
 17911  34EC  2CF4               	goto	l7453
 17912  34ED  09A2               	comf	___awmod@dividend,f
 17913  34EE  09A3               	comf	___awmod@dividend+1,f
 17914  34EF  0AA2               	incf	___awmod@dividend,f
 17915  34F0  1903               	skipnz
 17916  34F1  0AA3               	incf	___awmod@dividend+1,f
 17917  34F2  01A6               	clrf	___awmod@sign
 17918  34F3  0AA6               	incf	___awmod@sign,f
 17919  34F4                     l7453:	
 17920  34F4  1FA1               	btfss	___awmod@divisor+1,7
 17921  34F5  2CFB               	goto	l7457
 17922  34F6  09A0               	comf	___awmod@divisor,f
 17923  34F7  09A1               	comf	___awmod@divisor+1,f
 17924  34F8  0AA0               	incf	___awmod@divisor,f
 17925  34F9  1903               	skipnz
 17926  34FA  0AA1               	incf	___awmod@divisor+1,f
 17927  34FB                     l7457:	
 17928  34FB  0820               	movf	___awmod@divisor,w
 17929  34FC  0421               	iorwf	___awmod@divisor+1,w
 17930  34FD  1903               	btfsc	3,2
 17931  34FE  2D22               	goto	l7475
 17932  34FF  01A5               	clrf	___awmod@counter
 17933  3500  0AA5               	incf	___awmod@counter,f
 17934  3501                     l7465:	
 17935  3501  1BA1               	btfsc	___awmod@divisor+1,7
 17936  3502  2D0D               	goto	l7467
 17937  3503  3001               	movlw	1
 17938  3504                     u8195:	
 17939  3504  35A0               	lslf	___awmod@divisor,f
 17940  3505  0DA1               	rlf	___awmod@divisor+1,f
 17941  3506  0B89               	decfsz	9,f
 17942  3507  2D04               	goto	u8195
 17943  3508  3001               	movlw	1
 17944  3509  00A4               	movwf	??___awmod
 17945  350A  0824               	movf	??___awmod,w
 17946  350B  07A5               	addwf	___awmod@counter,f
 17947  350C  2D01               	goto	l7465
 17948  350D                     l7467:	
 17949  350D  0821               	movf	___awmod@divisor+1,w
 17950  350E  0223               	subwf	___awmod@dividend+1,w
 17951  350F  1D03               	skipz
 17952  3510  2D13               	goto	u8215
 17953  3511  0820               	movf	___awmod@divisor,w
 17954  3512  0222               	subwf	___awmod@dividend,w
 17955  3513                     u8215:	
 17956  3513  1C03               	skipc
 17957  3514  2D19               	goto	l7471
 17958  3515  0820               	movf	___awmod@divisor,w
 17959  3516  02A2               	subwf	___awmod@dividend,f
 17960  3517  0821               	movf	___awmod@divisor+1,w
 17961  3518  3BA3               	subwfb	___awmod@dividend+1,f
 17962  3519                     l7471:	
 17963  3519  3001               	movlw	1
 17964  351A                     u8225:	
 17965  351A  36A1               	lsrf	___awmod@divisor+1,f
 17966  351B  0CA0               	rrf	___awmod@divisor,f
 17967  351C  0B89               	decfsz	9,f
 17968  351D  2D1A               	goto	u8225
 17969  351E  3001               	movlw	1
 17970  351F  02A5               	subwf	___awmod@counter,f
 17971  3520  1D03               	btfss	3,2
 17972  3521  2D0D               	goto	l7467
 17973  3522                     l7475:	
 17974  3522  0826               	movf	___awmod@sign,w
 17975  3523  1903               	btfsc	3,2
 17976  3524  2D2A               	goto	l7479
 17977  3525  09A2               	comf	___awmod@dividend,f
 17978  3526  09A3               	comf	___awmod@dividend+1,f
 17979  3527  0AA2               	incf	___awmod@dividend,f
 17980  3528  1903               	skipnz
 17981  3529  0AA3               	incf	___awmod@dividend+1,f
 17982  352A                     l7479:	
 17983  352A  0823               	movf	___awmod@dividend+1,w
 17984  352B  00A1               	movwf	?___awmod+1
 17985  352C  0822               	movf	___awmod@dividend,w
 17986  352D  00A0               	movwf	?___awmod
 17987  352E  0008               	return
 17988  352F                     __end_of___awmod:	
 17989                           
 17990                           	psect	text42
 17991  1009                     __ptext42:	
 17992 ;; *************** function _ema *****************
 17993 ;; Defined at:
 17994 ;;		line 64 in file "common.c"
 17995 ;; Parameters:    Size  Location     Type
 17996 ;;  in              2   12[BANK0 ] unsigned short 
 17997 ;;  average         2   14[BANK0 ] unsigned short 
 17998 ;;  alpha           4   16[BANK0 ] unsigned long 
 17999 ;; Auto vars:     Size  Location     Type
 18000 ;;  tmp0            4   28[BANK0 ] unsigned long 
 18001 ;; Return value:  Size  Location     Type
 18002 ;;                  2   12[BANK0 ] unsigned short 
 18003 ;; Registers used:
 18004 ;;		wreg, status,2, status,0, pclath, cstack
 18005 ;; Tracked objects:
 18006 ;;		On entry : 0/0
 18007 ;;		On exit  : 0/0
 18008 ;;		Unchanged: 0/0
 18009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18010 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18011 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18012 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18013 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18014 ;;Total ram usage:       20 bytes
 18015 ;; Hardware stack levels used:    1
 18016 ;; Hardware stack levels required when called:    4
 18017 ;; This function calls:
 18018 ;;		___lmul
 18019 ;; This function is called by:
 18020 ;;		_checkChannelStatus
 18021 ;;		_getAnalogValues
 18022 ;; This function uses a non-reentrant model
 18023 ;;
 18024                           
 18025                           
 18026                           ;psect for function _ema
 18027  1009                     _ema:	
 18028                           
 18029                           ;common.c: 64: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 65:
      +                           {;common.c: 66:  uint32_t tmp0;;common.c: 67:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 18030                           
 18031                           ;incstack = 0
 18032                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 18033  1009  0140               	movlb	0	; select bank0
 18034  100A  082E               	movf	ema@average,w
 18035  100B  00A0               	movwf	___lmul@multiplier
 18036  100C  082F               	movf	ema@average+1,w
 18037  100D  00A1               	movwf	___lmul@multiplier+1
 18038  100E  01A2               	clrf	___lmul@multiplier+2
 18039  100F  01A3               	clrf	___lmul@multiplier+3
 18040  1010  3000               	movlw	0
 18041  1011  00B4               	movwf	??_ema
 18042  1012  3000               	movlw	0
 18043  1013  00B5               	movwf	??_ema+1
 18044  1014  3001               	movlw	1
 18045  1015  00B6               	movwf	??_ema+2
 18046  1016  3000               	movlw	0
 18047  1017  00B7               	movwf	??_ema+3
 18048  1018  0830               	movf	ema@alpha,w
 18049  1019  02B4               	subwf	??_ema,f
 18050  101A  0831               	movf	ema@alpha+1,w
 18051  101B  3BB5               	subwfb	??_ema+1,f
 18052  101C  0832               	movf	ema@alpha+2,w
 18053  101D  3BB6               	subwfb	??_ema+2,f
 18054  101E  0833               	movf	ema@alpha+3,w
 18055  101F  3BB7               	subwfb	??_ema+3,f
 18056  1020  0837               	movf	??_ema+3,w
 18057  1021  00A7               	movwf	___lmul@multiplicand+3
 18058  1022  0836               	movf	??_ema+2,w
 18059  1023  00A6               	movwf	___lmul@multiplicand+2
 18060  1024  0835               	movf	??_ema+1,w
 18061  1025  00A5               	movwf	___lmul@multiplicand+1
 18062  1026  0834               	movf	??_ema,w
 18063  1027  00A4               	movwf	___lmul@multiplicand
 18064  1028  31B3  2340  3190   	fcall	___lmul
 18065  102B  0140               	movlb	0	; select bank0
 18066  102C  0820               	movf	?___lmul,w
 18067  102D  00B8               	movwf	??_ema+4
 18068  102E  0821               	movf	?___lmul+1,w
 18069  102F  00B9               	movwf	??_ema+5
 18070  1030  0822               	movf	?___lmul+2,w
 18071  1031  00BA               	movwf	??_ema+6
 18072  1032  0823               	movf	?___lmul+3,w
 18073  1033  00BB               	movwf	??_ema+7
 18074  1034  082C               	movf	ema@in,w
 18075  1035  00A0               	movwf	___lmul@multiplier
 18076  1036  082D               	movf	ema@in+1,w
 18077  1037  00A1               	movwf	___lmul@multiplier+1
 18078  1038  01A2               	clrf	___lmul@multiplier+2
 18079  1039  01A3               	clrf	___lmul@multiplier+3
 18080  103A  0833               	movf	ema@alpha+3,w
 18081  103B  00A7               	movwf	___lmul@multiplicand+3
 18082  103C  0832               	movf	ema@alpha+2,w
 18083  103D  00A6               	movwf	___lmul@multiplicand+2
 18084  103E  0831               	movf	ema@alpha+1,w
 18085  103F  00A5               	movwf	___lmul@multiplicand+1
 18086  1040  0830               	movf	ema@alpha,w
 18087  1041  00A4               	movwf	___lmul@multiplicand
 18088  1042  31B3  2340  3190   	fcall	___lmul
 18089  1045  0140               	movlb	0	; select bank0
 18090  1046  0820               	movf	?___lmul,w
 18091  1047  07B8               	addwf	??_ema+4,f
 18092  1048  0821               	movf	?___lmul+1,w
 18093  1049  3DB9               	addwfc	??_ema+5,f
 18094  104A  0822               	movf	?___lmul+2,w
 18095  104B  3DBA               	addwfc	??_ema+6,f
 18096  104C  0823               	movf	?___lmul+3,w
 18097  104D  3DBB               	addwfc	??_ema+7,f
 18098  104E  083B               	movf	??_ema+7,w
 18099  104F  00BF               	movwf	ema@tmp0+3
 18100  1050  083A               	movf	??_ema+6,w
 18101  1051  00BE               	movwf	ema@tmp0+2
 18102  1052  0839               	movf	??_ema+5,w
 18103  1053  00BD               	movwf	ema@tmp0+1
 18104  1054  0838               	movf	??_ema+4,w
 18105  1055  00BC               	movwf	ema@tmp0
 18106                           
 18107                           ;common.c: 68:  return(tmp0 + 32768) / 65536;
 18108  1056  3000               	movlw	0
 18109  1057  00B4               	movwf	??_ema
 18110  1058  3080               	movlw	128
 18111  1059  00B5               	movwf	??_ema+1
 18112  105A  3000               	movlw	0
 18113  105B  00B6               	movwf	??_ema+2
 18114  105C  3000               	movlw	0
 18115  105D  00B7               	movwf	??_ema+3
 18116  105E  083C               	movf	ema@tmp0,w
 18117  105F  07B4               	addwf	??_ema,f
 18118  1060  083D               	movf	ema@tmp0+1,w
 18119  1061  3DB5               	addwfc	??_ema+1,f
 18120  1062  083E               	movf	ema@tmp0+2,w
 18121  1063  3DB6               	addwfc	??_ema+2,f
 18122  1064  083F               	movf	ema@tmp0+3,w
 18123  1065  3DB7               	addwfc	??_ema+3,f
 18124  1066  3010               	movlw	16
 18125  1067                     u9915:	
 18126  1067  36B7               	lsrf	??_ema+3,f
 18127  1068  0CB6               	rrf	??_ema+2,f
 18128  1069  0CB5               	rrf	??_ema+1,f
 18129  106A  0CB4               	rrf	??_ema,f
 18130  106B  0B89               	decfsz	9,f
 18131  106C  2867               	goto	u9915
 18132  106D  0835               	movf	??_ema+1,w
 18133  106E  00AD               	movwf	?_ema+1
 18134  106F  0834               	movf	??_ema,w
 18135  1070  00AC               	movwf	?_ema
 18136  1071  0008               	return
 18137  1072                     __end_of_ema:	
 18138                           
 18139                           	psect	text43
 18140  3340                     __ptext43:	
 18141 ;; *************** function ___lmul *****************
 18142 ;; Defined at:
 18143 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 18144 ;; Parameters:    Size  Location     Type
 18145 ;;  multiplier      4    0[BANK0 ] unsigned long 
 18146 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 18147 ;; Auto vars:     Size  Location     Type
 18148 ;;  product         4    8[BANK0 ] unsigned long 
 18149 ;; Return value:  Size  Location     Type
 18150 ;;                  4    0[BANK0 ] unsigned long 
 18151 ;; Registers used:
 18152 ;;		wreg, status,2, status,0
 18153 ;; Tracked objects:
 18154 ;;		On entry : 0/0
 18155 ;;		On exit  : 0/0
 18156 ;;		Unchanged: 0/0
 18157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18158 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18159 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18161 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18162 ;;Total ram usage:       12 bytes
 18163 ;; Hardware stack levels used:    1
 18164 ;; Hardware stack levels required when called:    3
 18165 ;; This function calls:
 18166 ;;		Nothing
 18167 ;; This function is called by:
 18168 ;;		_ema
 18169 ;; This function uses a non-reentrant model
 18170 ;;
 18171                           
 18172                           
 18173                           ;psect for function ___lmul
 18174  3340                     ___lmul:	
 18175                           
 18176                           ;incstack = 0
 18177                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 18178  3340  3000               	movlw	0
 18179  3341  0140               	movlb	0	; select bank0
 18180  3342  00AB               	movwf	___lmul@product+3
 18181  3343  3000               	movlw	0
 18182  3344  00AA               	movwf	___lmul@product+2
 18183  3345  3000               	movlw	0
 18184  3346  00A9               	movwf	___lmul@product+1
 18185  3347  3000               	movlw	0
 18186  3348  00A8               	movwf	___lmul@product
 18187  3349                     l8087:	
 18188  3349  1C20               	btfss	___lmul@multiplier,0
 18189  334A  2B53               	goto	l8091
 18190  334B  0824               	movf	___lmul@multiplicand,w
 18191  334C  07A8               	addwf	___lmul@product,f
 18192  334D  0825               	movf	___lmul@multiplicand+1,w
 18193  334E  3DA9               	addwfc	___lmul@product+1,f
 18194  334F  0826               	movf	___lmul@multiplicand+2,w
 18195  3350  3DAA               	addwfc	___lmul@product+2,f
 18196  3351  0827               	movf	___lmul@multiplicand+3,w
 18197  3352  3DAB               	addwfc	___lmul@product+3,f
 18198  3353                     l8091:	
 18199  3353  3001               	movlw	1
 18200  3354                     u9375:	
 18201  3354  35A4               	lslf	___lmul@multiplicand,f
 18202  3355  0DA5               	rlf	___lmul@multiplicand+1,f
 18203  3356  0DA6               	rlf	___lmul@multiplicand+2,f
 18204  3357  0DA7               	rlf	___lmul@multiplicand+3,f
 18205  3358  0B89               	decfsz	9,f
 18206  3359  2B54               	goto	u9375
 18207  335A  3001               	movlw	1
 18208  335B                     u9385:	
 18209  335B  36A3               	lsrf	___lmul@multiplier+3,f
 18210  335C  0CA2               	rrf	___lmul@multiplier+2,f
 18211  335D  0CA1               	rrf	___lmul@multiplier+1,f
 18212  335E  0CA0               	rrf	___lmul@multiplier,f
 18213  335F  0B89               	decfsz	9,f
 18214  3360  2B5B               	goto	u9385
 18215  3361  0823               	movf	___lmul@multiplier+3,w
 18216  3362  0422               	iorwf	___lmul@multiplier+2,w
 18217  3363  0421               	iorwf	___lmul@multiplier+1,w
 18218  3364  0420               	iorwf	___lmul@multiplier,w
 18219  3365  1D03               	skipz
 18220  3366  2B49               	goto	l8087
 18221  3367  082B               	movf	___lmul@product+3,w
 18222  3368  00A3               	movwf	?___lmul+3
 18223  3369  082A               	movf	___lmul@product+2,w
 18224  336A  00A2               	movwf	?___lmul+2
 18225  336B  0829               	movf	___lmul@product+1,w
 18226  336C  00A1               	movwf	?___lmul+1
 18227  336D  0828               	movf	___lmul@product,w
 18228  336E  00A0               	movwf	?___lmul
 18229  336F  0008               	return
 18230  3370                     __end_of___lmul:	
 18231                           
 18232                           	psect	text44
 18233  35BD                     __ptext44:	
 18234 ;; *************** function ___fleq *****************
 18235 ;; Defined at:
 18236 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 18237 ;; Parameters:    Size  Location     Type
 18238 ;;  ff1             4    0[BANK0 ] unsigned long 
 18239 ;;  ff2             4    4[BANK0 ] unsigned long 
 18240 ;; Auto vars:     Size  Location     Type
 18241 ;;		None
 18242 ;; Return value:  Size  Location     Type
 18243 ;;		None               void
 18244 ;; Registers used:
 18245 ;;		wreg, status,2, status,0
 18246 ;; Tracked objects:
 18247 ;;		On entry : 0/0
 18248 ;;		On exit  : 0/0
 18249 ;;		Unchanged: 0/0
 18250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18251 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18253 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18254 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18255 ;;Total ram usage:       12 bytes
 18256 ;; Hardware stack levels used:    1
 18257 ;; Hardware stack levels required when called:    3
 18258 ;; This function calls:
 18259 ;;		Nothing
 18260 ;; This function is called by:
 18261 ;;		_channelSetup
 18262 ;;		_setOutputPower
 18263 ;;		_checkChannelStatus
 18264 ;; This function uses a non-reentrant model
 18265 ;;
 18266                           
 18267                           
 18268                           ;psect for function ___fleq
 18269  35BD                     ___fleq:	
 18270                           
 18271                           ;incstack = 0
 18272                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 18273  35BD  3000               	movlw	0
 18274  35BE  0140               	movlb	0	; select bank0
 18275  35BF  0520               	andwf	___fleq@ff1,w
 18276  35C0  00A8               	movwf	??___fleq
 18277  35C1  3000               	movlw	0
 18278  35C2  0521               	andwf	___fleq@ff1+1,w
 18279  35C3  00A9               	movwf	??___fleq+1
 18280  35C4  3080               	movlw	128
 18281  35C5  0522               	andwf	___fleq@ff1+2,w
 18282  35C6  00AA               	movwf	??___fleq+2
 18283  35C7  307F               	movlw	127
 18284  35C8  0523               	andwf	___fleq@ff1+3,w
 18285  35C9  00AB               	movwf	??___fleq+3
 18286  35CA  082B               	movf	??___fleq+3,w
 18287  35CB  042A               	iorwf	??___fleq+2,w
 18288  35CC  0429               	iorwf	??___fleq+1,w
 18289  35CD  0428               	iorwf	??___fleq,w
 18290  35CE  1D03               	skipz
 18291  35CF  2DD8               	goto	l1286
 18292  35D0  3000               	movlw	0
 18293  35D1  00A3               	movwf	___fleq@ff1+3
 18294  35D2  3000               	movlw	0
 18295  35D3  00A2               	movwf	___fleq@ff1+2
 18296  35D4  3000               	movlw	0
 18297  35D5  00A1               	movwf	___fleq@ff1+1
 18298  35D6  3000               	movlw	0
 18299  35D7  00A0               	movwf	___fleq@ff1
 18300  35D8                     l1286:	
 18301  35D8  3000               	movlw	0
 18302  35D9  0524               	andwf	___fleq@ff2,w
 18303  35DA  00A8               	movwf	??___fleq
 18304  35DB  3000               	movlw	0
 18305  35DC  0525               	andwf	___fleq@ff2+1,w
 18306  35DD  00A9               	movwf	??___fleq+1
 18307  35DE  3080               	movlw	128
 18308  35DF  0526               	andwf	___fleq@ff2+2,w
 18309  35E0  00AA               	movwf	??___fleq+2
 18310  35E1  307F               	movlw	127
 18311  35E2  0527               	andwf	___fleq@ff2+3,w
 18312  35E3  00AB               	movwf	??___fleq+3
 18313  35E4  082B               	movf	??___fleq+3,w
 18314  35E5  042A               	iorwf	??___fleq+2,w
 18315  35E6  0429               	iorwf	??___fleq+1,w
 18316  35E7  0428               	iorwf	??___fleq,w
 18317  35E8  1D03               	skipz
 18318  35E9  2DF2               	goto	l1287
 18319  35EA  3000               	movlw	0
 18320  35EB  00A7               	movwf	___fleq@ff2+3
 18321  35EC  3000               	movlw	0
 18322  35ED  00A6               	movwf	___fleq@ff2+2
 18323  35EE  3000               	movlw	0
 18324  35EF  00A5               	movwf	___fleq@ff2+1
 18325  35F0  3000               	movlw	0
 18326  35F1  00A4               	movwf	___fleq@ff2
 18327  35F2                     l1287:	
 18328  35F2  0827               	movf	___fleq@ff2+3,w
 18329  35F3  0623               	xorwf	___fleq@ff1+3,w
 18330  35F4  1D03               	skipz
 18331  35F5  2E00               	goto	u9425
 18332  35F6  0826               	movf	___fleq@ff2+2,w
 18333  35F7  0622               	xorwf	___fleq@ff1+2,w
 18334  35F8  1D03               	skipz
 18335  35F9  2E00               	goto	u9425
 18336  35FA  0825               	movf	___fleq@ff2+1,w
 18337  35FB  0621               	xorwf	___fleq@ff1+1,w
 18338  35FC  1D03               	skipz
 18339  35FD  2E00               	goto	u9425
 18340  35FE  0824               	movf	___fleq@ff2,w
 18341  35FF  0620               	xorwf	___fleq@ff1,w
 18342  3600                     u9425:	
 18343  3600  1903               	skipnz
 18344  3601  2E04               	goto	l8107
 18345  3602  1003               	clrc
 18346  3603  0008               	return
 18347  3604                     l8107:	
 18348  3604  1403               	setc
 18349  3605  0008               	return
 18350  3606                     __end_of___fleq:	
 18351                           
 18352                           	psect	text45
 18353  0BCC                     __ptext45:	
 18354 ;; *************** function _channelThing *****************
 18355 ;; Defined at:
 18356 ;;		line 372 in file "system.c"
 18357 ;; Parameters:    Size  Location     Type
 18358 ;;		None
 18359 ;; Auto vars:     Size  Location     Type
 18360 ;;  grpB            4   18[BANK4 ] char [4]
 18361 ;;  grpA            4   12[BANK4 ] char [4]
 18362 ;;  totalGrpB       4    8[BANK4 ] float 
 18363 ;;  totalGrpA       4    4[BANK4 ] float 
 18364 ;;  total           4    0[BANK4 ] float 
 18365 ;;  n               1   22[BANK4 ] unsigned char 
 18366 ;;  numGrpB         1   17[BANK4 ] unsigned char 
 18367 ;;  numGrpA         1   16[BANK4 ] unsigned char 
 18368 ;; Return value:  Size  Location     Type
 18369 ;;                  1    wreg      void 
 18370 ;; Registers used:
 18371 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18372 ;; Tracked objects:
 18373 ;;		On entry : 0/0
 18374 ;;		On exit  : 0/0
 18375 ;;		Unchanged: 0/0
 18376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18378 ;;      Locals:         0       0       0       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18379 ;;      Temps:          0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18380 ;;      Totals:         0       0      11       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18381 ;;Total ram usage:       34 bytes
 18382 ;; Hardware stack levels used:    1
 18383 ;; Hardware stack levels required when called:    7
 18384 ;; This function calls:
 18385 ;;		___bmul
 18386 ;;		___fladd
 18387 ;;		___fldiv
 18388 ;;		___flge
 18389 ;;		___flmul
 18390 ;;		___wmul
 18391 ;;		___xxtofl
 18392 ;;		_qsort
 18393 ;; This function is called by:
 18394 ;;		_main
 18395 ;; This function uses a non-reentrant model
 18396 ;;
 18397                           
 18398                           
 18399                           ;psect for function _channelThing
 18400  0BCC                     _channelThing:	
 18401                           
 18402                           ;system.c: 374:  uint8_t n;;system.c: 375:  float total, totalGrpA, totalGrpB;;system.c:
      +                           376:  uint8_t numGrpA, numGrpB;;system.c: 377:  int8_t grpA[4], grpB[4];;system.c: 380:
      +                            for(n = 0; n < 4; n++) {
 18403                           
 18404                           ;incstack = 0
 18405                           ; Regs used in _channelThing: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18406  0BCC  0144               	movlb	4	; select bank4
 18407  0BCD  01DD               	clrf	channelThing@n^(0+512)
 18408  0BCE                     l9195:	
 18409                           
 18410                           ;system.c: 381:   grpA[n] = -1;
 18411  0BCE  085D               	movf	channelThing@n^(0+512),w
 18412  0BCF  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18413  0BD0  0086               	movwf	6
 18414  0BD1  3002               	movlw	2	; select bank4/5
 18415  0BD2  0087               	movwf	7
 18416  0BD3  0181               	clrf	1
 18417  0BD4  0381               	decf	1,f
 18418                           
 18419                           ;system.c: 382:   grpB[n] = -1;
 18420  0BD5  085D               	movf	channelThing@n^(0+512),w
 18421  0BD6  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18422  0BD7  0086               	movwf	6
 18423  0BD8  3002               	movlw	2	; select bank4/5
 18424  0BD9  0087               	movwf	7
 18425  0BDA  0181               	clrf	1
 18426  0BDB  0381               	decf	1,f
 18427                           
 18428                           ;system.c: 384:   virtChannels[n].phyChanNum = n;
 18429  0BDC  085D               	movf	channelThing@n^(0+512),w
 18430  0BDD  0141               	movlb	1	; select bank1
 18431  0BDE  00D3               	movwf	??_channelThing^(0+128)
 18432  0BDF  01D4               	clrf	(??_channelThing^(0+128)+1)
 18433  0BE0  3009               	movlw	9
 18434  0BE1  00D5               	movwf	(??_channelThing+2)^(0+128)
 18435  0BE2  0855               	movf	(??_channelThing+2)^(0+128),w
 18436  0BE3  0140               	movlb	0	; select bank0
 18437  0BE4  00A9               	movwf	___bmul@multiplicand
 18438  0BE5  0144               	movlb	4	; select bank4
 18439  0BE6  085D               	movf	channelThing@n^(0+512),w
 18440  0BE7  31B1  219D  318B   	fcall	___bmul
 18441  0BEA  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 18442  0BEB  0086               	movwf	6
 18443  0BEC  3002               	movlw	2	; select bank5/6
 18444  0BED  0087               	movwf	7
 18445  0BEE  0141               	movlb	1	; select bank1
 18446  0BEF  0853               	movf	??_channelThing^(0+128),w
 18447  0BF0  3FC0               	movwi [0]fsr1
 18448  0BF1  0854               	movf	(??_channelThing+1)^(0+128),w
 18449  0BF2  3FC1               	movwi [1]fsr1
 18450                           
 18451                           ;system.c: 385:   virtChannels[n].current = data.heater[n].current;
 18452  0BF3  0144               	movlb	4	; select bank4
 18453  0BF4  085D               	movf	channelThing@n^(0+512),w
 18454  0BF5  0141               	movlb	1	; select bank1
 18455  0BF6  00D3               	movwf	??_channelThing^(0+128)
 18456  0BF7  01D4               	clrf	(??_channelThing^(0+128)+1)
 18457  0BF8  0853               	movf	??_channelThing^(0+128),w
 18458  0BF9  0140               	movlb	0	; select bank0
 18459  0BFA  00AD               	movwf	___wmul@multiplier
 18460  0BFB  0141               	movlb	1	; select bank1
 18461  0BFC  0854               	movf	(??_channelThing+1)^(0+128),w
 18462  0BFD  0140               	movlb	0	; select bank0
 18463  0BFE  00AE               	movwf	___wmul@multiplier+1
 18464  0BFF  301F               	movlw	31
 18465  0C00  00AF               	movwf	___wmul@multiplicand
 18466  0C01  3000               	movlw	0
 18467  0C02  00B0               	movwf	___wmul@multiplicand+1
 18468  0C03  31B1  21DE  318B   	fcall	___wmul
 18469  0C06  3074               	movlw	116
 18470  0C07  0141               	movlb	1	; select bank1
 18471  0C08  00D5               	movwf	(??_channelThing+2)^(0+128)
 18472  0C09  3027               	movlw	39
 18473  0C0A  00D6               	movwf	((??_channelThing+2)^(0+128)+1)
 18474  0C0B  0140               	movlb	0	; select bank0
 18475  0C0C  082D               	movf	?___wmul,w
 18476  0C0D  0141               	movlb	1	; select bank1
 18477  0C0E  0755               	addwf	(??_channelThing+2)^(0+128),w
 18478  0C0F  0086               	movwf	6
 18479  0C10  0140               	movlb	0	; select bank0
 18480  0C11  082E               	movf	?___wmul+1,w
 18481  0C12  0141               	movlb	1	; select bank1
 18482  0C13  3D56               	addwfc	(??_channelThing+3)^(0+128),w
 18483  0C14  0087               	movwf	7
 18484  0C15  3F40               	moviw [0]fsr1
 18485  0C16  00D7               	movwf	(??_channelThing+4)^(0+128)
 18486  0C17  3F41               	moviw [1]fsr1
 18487  0C18  00D8               	movwf	((??_channelThing+4)^(0+128)+1)
 18488  0C19  3F42               	moviw [2]fsr1
 18489  0C1A  00D9               	movwf	((??_channelThing+4)^(0+128)+2)
 18490  0C1B  3F43               	moviw [3]fsr1
 18491  0C1C  00DA               	movwf	((??_channelThing+4)^(0+128)+3)
 18492  0C1D  3009               	movlw	9
 18493  0C1E  00DB               	movwf	(??_channelThing+8)^(0+128)
 18494  0C1F  085B               	movf	(??_channelThing+8)^(0+128),w
 18495  0C20  0140               	movlb	0	; select bank0
 18496  0C21  00A9               	movwf	___bmul@multiplicand
 18497  0C22  0144               	movlb	4	; select bank4
 18498  0C23  085D               	movf	channelThing@n^(0+512),w
 18499  0C24  31B1  219D  318B   	fcall	___bmul
 18500  0C27  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18501  0C28  0086               	movwf	6
 18502  0C29  3002               	movlw	2	; select bank5/6
 18503  0C2A  0087               	movwf	7
 18504  0C2B  0141               	movlb	1	; select bank1
 18505  0C2C  0857               	movf	(??_channelThing+4)^(0+128),w
 18506  0C2D  3FC0               	movwi [0]fsr1
 18507  0C2E  0858               	movf	(??_channelThing+5)^(0+128),w
 18508  0C2F  3FC1               	movwi [1]fsr1
 18509  0C30  0859               	movf	(??_channelThing+6)^(0+128),w
 18510  0C31  3FC2               	movwi [2]fsr1
 18511  0C32  085A               	movf	(??_channelThing+7)^(0+128),w
 18512  0C33  3FC3               	movwi [3]fsr1
 18513                           
 18514                           ;system.c: 386:   virtChannels[n].DC = data.heater[n].DCreq;
 18515  0C34  0144               	movlb	4	; select bank4
 18516  0C35  085D               	movf	channelThing@n^(0+512),w
 18517  0C36  0141               	movlb	1	; select bank1
 18518  0C37  00D3               	movwf	??_channelThing^(0+128)
 18519  0C38  01D4               	clrf	(??_channelThing^(0+128)+1)
 18520  0C39  0853               	movf	??_channelThing^(0+128),w
 18521  0C3A  0140               	movlb	0	; select bank0
 18522  0C3B  00AD               	movwf	___wmul@multiplier
 18523  0C3C  0141               	movlb	1	; select bank1
 18524  0C3D  0854               	movf	(??_channelThing+1)^(0+128),w
 18525  0C3E  0140               	movlb	0	; select bank0
 18526  0C3F  00AE               	movwf	___wmul@multiplier+1
 18527  0C40  301F               	movlw	31
 18528  0C41  00AF               	movwf	___wmul@multiplicand
 18529  0C42  3000               	movlw	0
 18530  0C43  00B0               	movwf	___wmul@multiplicand+1
 18531  0C44  31B1  21DE  318B   	fcall	___wmul
 18532  0C47  3088               	movlw	136
 18533  0C48  0141               	movlb	1	; select bank1
 18534  0C49  00D5               	movwf	(??_channelThing+2)^(0+128)
 18535  0C4A  3027               	movlw	39
 18536  0C4B  00D6               	movwf	((??_channelThing+2)^(0+128)+1)
 18537  0C4C  0140               	movlb	0	; select bank0
 18538  0C4D  082D               	movf	?___wmul,w
 18539  0C4E  0141               	movlb	1	; select bank1
 18540  0C4F  0755               	addwf	(??_channelThing+2)^(0+128),w
 18541  0C50  0086               	movwf	6
 18542  0C51  0140               	movlb	0	; select bank0
 18543  0C52  082E               	movf	?___wmul+1,w
 18544  0C53  0141               	movlb	1	; select bank1
 18545  0C54  3D56               	addwfc	(??_channelThing+3)^(0+128),w
 18546  0C55  0087               	movwf	7
 18547  0C56  0801               	movf	1,w
 18548  0C57  00D7               	movwf	(??_channelThing+4)^(0+128)
 18549  0C58  3009               	movlw	9
 18550  0C59  00D8               	movwf	(??_channelThing+5)^(0+128)
 18551  0C5A  0858               	movf	(??_channelThing+5)^(0+128),w
 18552  0C5B  0140               	movlb	0	; select bank0
 18553  0C5C  00A9               	movwf	___bmul@multiplicand
 18554  0C5D  0144               	movlb	4	; select bank4
 18555  0C5E  085D               	movf	channelThing@n^(0+512),w
 18556  0C5F  31B1  219D  318B   	fcall	___bmul
 18557  0C62  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18558  0C63  0086               	movwf	6
 18559  0C64  3002               	movlw	2	; select bank5/6
 18560  0C65  0087               	movwf	7
 18561  0C66  0141               	movlb	1	; select bank1
 18562  0C67  0857               	movf	(??_channelThing+4)^(0+128),w
 18563  0C68  0081               	movwf	1
 18564                           
 18565                           ;system.c: 387:  }
 18566  0C69  3001               	movlw	1
 18567  0C6A  00D3               	movwf	??_channelThing^(0+128)
 18568  0C6B  0853               	movf	??_channelThing^(0+128),w
 18569  0C6C  0144               	movlb	4	; select bank4
 18570  0C6D  07DD               	addwf	channelThing@n^(0+512),f
 18571  0C6E  3004               	movlw	4
 18572  0C6F  025D               	subwf	channelThing@n^(0+512),w
 18573  0C70  1C03               	skipc
 18574  0C71  2BCE               	goto	l9195
 18575                           
 18576                           ;system.c: 390:  qsort(virtChannels, 4, sizeof(virtChannels[0]), sortCur);
 18577  0C72  3004               	movlw	4
 18578  0C73  0141               	movlb	1	; select bank1
 18579  0C74  00BB               	movwf	qsort@nel^(0+128)
 18580  0C75  3000               	movlw	0
 18581  0C76  00BC               	movwf	(qsort@nel^(0+128)+1)
 18582  0C77  3009               	movlw	9
 18583  0C78  00BD               	movwf	qsort@width^(0+128)
 18584  0C79  3000               	movlw	0
 18585  0C7A  00BE               	movwf	(qsort@width^(0+128)+1)
 18586  0C7B  3007               	movlw	low _sortCur
 18587  0C7C  00BF               	movwf	qsort@compar^(0+128)
 18588  0C7D  3028               	movlw	high _sortCur
 18589  0C7E  00C0               	movwf	(qsort@compar^(0+128)+1)
 18590  0C7F  30A0               	movlw	(low (_virtChannels| (0+512)))& (0+255)
 18591  0C80  319C  246C  318B   	fcall	_qsort
 18592                           
 18593                           ;system.c: 392:  total = totalGrpA = totalGrpB = 0;
 18594  0C83  3000               	movlw	0
 18595  0C84  0144               	movlb	4	; select bank4
 18596  0C85  00D2               	movwf	(channelThing@totalGrpB+3)^(0+512)
 18597  0C86  3000               	movlw	0
 18598  0C87  00D1               	movwf	(channelThing@totalGrpB+2)^(0+512)
 18599  0C88  3000               	movlw	0
 18600  0C89  00D0               	movwf	(channelThing@totalGrpB+1)^(0+512)
 18601  0C8A  3000               	movlw	0
 18602  0C8B  00CF               	movwf	channelThing@totalGrpB^(0+512)
 18603  0C8C  0852               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18604  0C8D  00CE               	movwf	(channelThing@totalGrpA+3)^(0+512)
 18605  0C8E  0851               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18606  0C8F  00CD               	movwf	(channelThing@totalGrpA+2)^(0+512)
 18607  0C90  0850               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18608  0C91  00CC               	movwf	(channelThing@totalGrpA+1)^(0+512)
 18609  0C92  084F               	movf	channelThing@totalGrpB^(0+512),w
 18610  0C93  00CB               	movwf	channelThing@totalGrpA^(0+512)
 18611  0C94  084E               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18612  0C95  00CA               	movwf	(channelThing@total+3)^(0+512)
 18613  0C96  084D               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18614  0C97  00C9               	movwf	(channelThing@total+2)^(0+512)
 18615  0C98  084C               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18616  0C99  00C8               	movwf	(channelThing@total+1)^(0+512)
 18617  0C9A  084B               	movf	channelThing@totalGrpA^(0+512),w
 18618  0C9B  00C7               	movwf	channelThing@total^(0+512)
 18619                           
 18620                           ;system.c: 393:  numGrpA = numGrpB = 0;
 18621  0C9C  01D8               	clrf	channelThing@numGrpB^(0+512)
 18622  0C9D  01D7               	clrf	channelThing@numGrpA^(0+512)
 18623                           
 18624                           ;system.c: 397:  for(n = 0; n < 4; n++) {
 18625  0C9E  01DD               	clrf	channelThing@n^(0+512)
 18626  0C9F                     l9219:	
 18627                           
 18628                           ;system.c: 398:   total += virtChannels[n].current;
 18629  0C9F  3009               	movlw	9
 18630  0CA0  0141               	movlb	1	; select bank1
 18631  0CA1  00D3               	movwf	??_channelThing^(0+128)
 18632  0CA2  0853               	movf	??_channelThing^(0+128),w
 18633  0CA3  0140               	movlb	0	; select bank0
 18634  0CA4  00A9               	movwf	___bmul@multiplicand
 18635  0CA5  0144               	movlb	4	; select bank4
 18636  0CA6  085D               	movf	channelThing@n^(0+512),w
 18637  0CA7  31B1  219D  318B   	fcall	___bmul
 18638  0CAA  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18639  0CAB  0086               	movwf	6
 18640  0CAC  3002               	movlw	2	; select bank5/6
 18641  0CAD  0087               	movwf	7
 18642  0CAE  3F40               	moviw [0]fsr1
 18643  0CAF  0140               	movlb	0	; select bank0
 18644  0CB0  00DB               	movwf	___fladd@b
 18645  0CB1  3F41               	moviw [1]fsr1
 18646  0CB2  00DC               	movwf	___fladd@b+1
 18647  0CB3  3F42               	moviw [2]fsr1
 18648  0CB4  00DD               	movwf	___fladd@b+2
 18649  0CB5  3F43               	moviw [3]fsr1
 18650  0CB6  00DE               	movwf	___fladd@b+3
 18651  0CB7  0144               	movlb	4	; select bank4
 18652  0CB8  084A               	movf	(channelThing@total+3)^(0+512),w
 18653  0CB9  0140               	movlb	0	; select bank0
 18654  0CBA  00E2               	movwf	___fladd@a+3
 18655  0CBB  0144               	movlb	4	; select bank4
 18656  0CBC  0849               	movf	(channelThing@total+2)^(0+512),w
 18657  0CBD  0140               	movlb	0	; select bank0
 18658  0CBE  00E1               	movwf	___fladd@a+2
 18659  0CBF  0144               	movlb	4	; select bank4
 18660  0CC0  0848               	movf	(channelThing@total+1)^(0+512),w
 18661  0CC1  0140               	movlb	0	; select bank0
 18662  0CC2  00E0               	movwf	___fladd@a+1
 18663  0CC3  0144               	movlb	4	; select bank4
 18664  0CC4  0847               	movf	channelThing@total^(0+512),w
 18665  0CC5  0140               	movlb	0	; select bank0
 18666  0CC6  00DF               	movwf	___fladd@a
 18667  0CC7  3192  2250  318B   	fcall	___fladd
 18668  0CCA  0140               	movlb	0	; select bank0
 18669  0CCB  085E               	movf	?___fladd+3,w
 18670  0CCC  0144               	movlb	4	; select bank4
 18671  0CCD  00CA               	movwf	(channelThing@total+3)^(0+512)
 18672  0CCE  0140               	movlb	0	; select bank0
 18673  0CCF  085D               	movf	?___fladd+2,w
 18674  0CD0  0144               	movlb	4	; select bank4
 18675  0CD1  00C9               	movwf	(channelThing@total+2)^(0+512)
 18676  0CD2  0140               	movlb	0	; select bank0
 18677  0CD3  085C               	movf	?___fladd+1,w
 18678  0CD4  0144               	movlb	4	; select bank4
 18679  0CD5  00C8               	movwf	(channelThing@total+1)^(0+512)
 18680  0CD6  0140               	movlb	0	; select bank0
 18681  0CD7  085B               	movf	?___fladd,w
 18682  0CD8  0144               	movlb	4	; select bank4
 18683  0CD9  00C7               	movwf	channelThing@total^(0+512)
 18684                           
 18685                           ;system.c: 399:   if (totalGrpA + virtChannels[n].current <= 3.5) {
 18686  0CDA  3040               	movlw	64
 18687  0CDB  0141               	movlb	1	; select bank1
 18688  0CDC  00B0               	movwf	(___flge@ff1+3)^(0+128)
 18689  0CDD  3060               	movlw	96
 18690  0CDE  00AF               	movwf	(___flge@ff1+2)^(0+128)
 18691  0CDF  3000               	movlw	0
 18692  0CE0  00AE               	movwf	(___flge@ff1+1)^(0+128)
 18693  0CE1  3000               	movlw	0
 18694  0CE2  00AD               	movwf	___flge@ff1^(0+128)
 18695  0CE3  0144               	movlb	4	; select bank4
 18696  0CE4  084E               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18697  0CE5  0140               	movlb	0	; select bank0
 18698  0CE6  00DE               	movwf	___fladd@b+3
 18699  0CE7  0144               	movlb	4	; select bank4
 18700  0CE8  084D               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18701  0CE9  0140               	movlb	0	; select bank0
 18702  0CEA  00DD               	movwf	___fladd@b+2
 18703  0CEB  0144               	movlb	4	; select bank4
 18704  0CEC  084C               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18705  0CED  0140               	movlb	0	; select bank0
 18706  0CEE  00DC               	movwf	___fladd@b+1
 18707  0CEF  0144               	movlb	4	; select bank4
 18708  0CF0  084B               	movf	channelThing@totalGrpA^(0+512),w
 18709  0CF1  0140               	movlb	0	; select bank0
 18710  0CF2  00DB               	movwf	___fladd@b
 18711  0CF3  3009               	movlw	9
 18712  0CF4  0141               	movlb	1	; select bank1
 18713  0CF5  00D3               	movwf	??_channelThing^(0+128)
 18714  0CF6  0853               	movf	??_channelThing^(0+128),w
 18715  0CF7  0140               	movlb	0	; select bank0
 18716  0CF8  00A9               	movwf	___bmul@multiplicand
 18717  0CF9  0144               	movlb	4	; select bank4
 18718  0CFA  085D               	movf	channelThing@n^(0+512),w
 18719  0CFB  31B1  219D  318B   	fcall	___bmul
 18720  0CFE  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18721  0CFF  0086               	movwf	6
 18722  0D00  3002               	movlw	2	; select bank5/6
 18723  0D01  0087               	movwf	7
 18724  0D02  3F40               	moviw [0]fsr1
 18725  0D03  0140               	movlb	0	; select bank0
 18726  0D04  00DF               	movwf	___fladd@a
 18727  0D05  3F41               	moviw [1]fsr1
 18728  0D06  00E0               	movwf	___fladd@a+1
 18729  0D07  3F42               	moviw [2]fsr1
 18730  0D08  00E1               	movwf	___fladd@a+2
 18731  0D09  3F43               	moviw [3]fsr1
 18732  0D0A  00E2               	movwf	___fladd@a+3
 18733  0D0B  3192  2250  318B   	fcall	___fladd
 18734  0D0E  0140               	movlb	0	; select bank0
 18735  0D0F  085E               	movf	?___fladd+3,w
 18736  0D10  0141               	movlb	1	; select bank1
 18737  0D11  00B4               	movwf	(___flge@ff2+3)^(0+128)
 18738  0D12  0140               	movlb	0	; select bank0
 18739  0D13  085D               	movf	?___fladd+2,w
 18740  0D14  0141               	movlb	1	; select bank1
 18741  0D15  00B3               	movwf	(___flge@ff2+2)^(0+128)
 18742  0D16  0140               	movlb	0	; select bank0
 18743  0D17  085C               	movf	?___fladd+1,w
 18744  0D18  0141               	movlb	1	; select bank1
 18745  0D19  00B2               	movwf	(___flge@ff2+1)^(0+128)
 18746  0D1A  0140               	movlb	0	; select bank0
 18747  0D1B  085B               	movf	?___fladd,w
 18748  0D1C  0141               	movlb	1	; select bank1
 18749  0D1D  00B1               	movwf	___flge@ff2^(0+128)
 18750  0D1E  31AA  2206  318B   	fcall	___flge
 18751  0D21  1C03               	btfss	3,0
 18752  0D22  2D70               	goto	l9227
 18753                           
 18754                           ;system.c: 400:    totalGrpA += virtChannels[n].current;
 18755  0D23  3009               	movlw	9
 18756  0D24  0141               	movlb	1	; select bank1
 18757  0D25  00D3               	movwf	??_channelThing^(0+128)
 18758  0D26  0853               	movf	??_channelThing^(0+128),w
 18759  0D27  0140               	movlb	0	; select bank0
 18760  0D28  00A9               	movwf	___bmul@multiplicand
 18761  0D29  0144               	movlb	4	; select bank4
 18762  0D2A  085D               	movf	channelThing@n^(0+512),w
 18763  0D2B  31B1  219D  318B   	fcall	___bmul
 18764  0D2E  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18765  0D2F  0086               	movwf	6
 18766  0D30  3002               	movlw	2	; select bank5/6
 18767  0D31  0087               	movwf	7
 18768  0D32  3F40               	moviw [0]fsr1
 18769  0D33  0140               	movlb	0	; select bank0
 18770  0D34  00DB               	movwf	___fladd@b
 18771  0D35  3F41               	moviw [1]fsr1
 18772  0D36  00DC               	movwf	___fladd@b+1
 18773  0D37  3F42               	moviw [2]fsr1
 18774  0D38  00DD               	movwf	___fladd@b+2
 18775  0D39  3F43               	moviw [3]fsr1
 18776  0D3A  00DE               	movwf	___fladd@b+3
 18777  0D3B  0144               	movlb	4	; select bank4
 18778  0D3C  084E               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18779  0D3D  0140               	movlb	0	; select bank0
 18780  0D3E  00E2               	movwf	___fladd@a+3
 18781  0D3F  0144               	movlb	4	; select bank4
 18782  0D40  084D               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18783  0D41  0140               	movlb	0	; select bank0
 18784  0D42  00E1               	movwf	___fladd@a+2
 18785  0D43  0144               	movlb	4	; select bank4
 18786  0D44  084C               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18787  0D45  0140               	movlb	0	; select bank0
 18788  0D46  00E0               	movwf	___fladd@a+1
 18789  0D47  0144               	movlb	4	; select bank4
 18790  0D48  084B               	movf	channelThing@totalGrpA^(0+512),w
 18791  0D49  0140               	movlb	0	; select bank0
 18792  0D4A  00DF               	movwf	___fladd@a
 18793  0D4B  3192  2250  318B   	fcall	___fladd
 18794  0D4E  0140               	movlb	0	; select bank0
 18795  0D4F  085E               	movf	?___fladd+3,w
 18796  0D50  0144               	movlb	4	; select bank4
 18797  0D51  00CE               	movwf	(channelThing@totalGrpA+3)^(0+512)
 18798  0D52  0140               	movlb	0	; select bank0
 18799  0D53  085D               	movf	?___fladd+2,w
 18800  0D54  0144               	movlb	4	; select bank4
 18801  0D55  00CD               	movwf	(channelThing@totalGrpA+2)^(0+512)
 18802  0D56  0140               	movlb	0	; select bank0
 18803  0D57  085C               	movf	?___fladd+1,w
 18804  0D58  0144               	movlb	4	; select bank4
 18805  0D59  00CC               	movwf	(channelThing@totalGrpA+1)^(0+512)
 18806  0D5A  0140               	movlb	0	; select bank0
 18807  0D5B  085B               	movf	?___fladd,w
 18808  0D5C  0144               	movlb	4	; select bank4
 18809  0D5D  00CB               	movwf	channelThing@totalGrpA^(0+512)
 18810                           
 18811                           ;system.c: 401:    grpA[numGrpA++] = n;
 18812  0D5E  085D               	movf	channelThing@n^(0+512),w
 18813  0D5F  0141               	movlb	1	; select bank1
 18814  0D60  00D3               	movwf	??_channelThing^(0+128)
 18815  0D61  0144               	movlb	4	; select bank4
 18816  0D62  0857               	movf	channelThing@numGrpA^(0+512),w
 18817  0D63  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18818  0D64  0086               	movwf	6
 18819  0D65  3002               	movlw	2	; select bank4/5
 18820  0D66  0087               	movwf	7
 18821  0D67  0141               	movlb	1	; select bank1
 18822  0D68  0853               	movf	??_channelThing^(0+128),w
 18823  0D69  0081               	movwf	1
 18824  0D6A  3001               	movlw	1
 18825  0D6B  00D3               	movwf	??_channelThing^(0+128)
 18826  0D6C  0853               	movf	??_channelThing^(0+128),w
 18827  0D6D  0144               	movlb	4	; select bank4
 18828  0D6E  07D7               	addwf	channelThing@numGrpA^(0+512),f
 18829                           
 18830                           ;system.c: 402:   } else if (totalGrpB + virtChannels[n].current <= 3.5) {
 18831  0D6F  2E05               	goto	l9235
 18832  0D70                     l9227:	
 18833  0D70  3040               	movlw	64
 18834  0D71  0141               	movlb	1	; select bank1
 18835  0D72  00B0               	movwf	(___flge@ff1+3)^(0+128)
 18836  0D73  3060               	movlw	96
 18837  0D74  00AF               	movwf	(___flge@ff1+2)^(0+128)
 18838  0D75  3000               	movlw	0
 18839  0D76  00AE               	movwf	(___flge@ff1+1)^(0+128)
 18840  0D77  3000               	movlw	0
 18841  0D78  00AD               	movwf	___flge@ff1^(0+128)
 18842  0D79  0144               	movlb	4	; select bank4
 18843  0D7A  0852               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18844  0D7B  0140               	movlb	0	; select bank0
 18845  0D7C  00DE               	movwf	___fladd@b+3
 18846  0D7D  0144               	movlb	4	; select bank4
 18847  0D7E  0851               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18848  0D7F  0140               	movlb	0	; select bank0
 18849  0D80  00DD               	movwf	___fladd@b+2
 18850  0D81  0144               	movlb	4	; select bank4
 18851  0D82  0850               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18852  0D83  0140               	movlb	0	; select bank0
 18853  0D84  00DC               	movwf	___fladd@b+1
 18854  0D85  0144               	movlb	4	; select bank4
 18855  0D86  084F               	movf	channelThing@totalGrpB^(0+512),w
 18856  0D87  0140               	movlb	0	; select bank0
 18857  0D88  00DB               	movwf	___fladd@b
 18858  0D89  3009               	movlw	9
 18859  0D8A  0141               	movlb	1	; select bank1
 18860  0D8B  00D3               	movwf	??_channelThing^(0+128)
 18861  0D8C  0853               	movf	??_channelThing^(0+128),w
 18862  0D8D  0140               	movlb	0	; select bank0
 18863  0D8E  00A9               	movwf	___bmul@multiplicand
 18864  0D8F  0144               	movlb	4	; select bank4
 18865  0D90  085D               	movf	channelThing@n^(0+512),w
 18866  0D91  31B1  219D  318B   	fcall	___bmul
 18867  0D94  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18868  0D95  0086               	movwf	6
 18869  0D96  3002               	movlw	2	; select bank5/6
 18870  0D97  0087               	movwf	7
 18871  0D98  3F40               	moviw [0]fsr1
 18872  0D99  0140               	movlb	0	; select bank0
 18873  0D9A  00DF               	movwf	___fladd@a
 18874  0D9B  3F41               	moviw [1]fsr1
 18875  0D9C  00E0               	movwf	___fladd@a+1
 18876  0D9D  3F42               	moviw [2]fsr1
 18877  0D9E  00E1               	movwf	___fladd@a+2
 18878  0D9F  3F43               	moviw [3]fsr1
 18879  0DA0  00E2               	movwf	___fladd@a+3
 18880  0DA1  3192  2250  318B   	fcall	___fladd
 18881  0DA4  0140               	movlb	0	; select bank0
 18882  0DA5  085E               	movf	?___fladd+3,w
 18883  0DA6  0141               	movlb	1	; select bank1
 18884  0DA7  00B4               	movwf	(___flge@ff2+3)^(0+128)
 18885  0DA8  0140               	movlb	0	; select bank0
 18886  0DA9  085D               	movf	?___fladd+2,w
 18887  0DAA  0141               	movlb	1	; select bank1
 18888  0DAB  00B3               	movwf	(___flge@ff2+2)^(0+128)
 18889  0DAC  0140               	movlb	0	; select bank0
 18890  0DAD  085C               	movf	?___fladd+1,w
 18891  0DAE  0141               	movlb	1	; select bank1
 18892  0DAF  00B2               	movwf	(___flge@ff2+1)^(0+128)
 18893  0DB0  0140               	movlb	0	; select bank0
 18894  0DB1  085B               	movf	?___fladd,w
 18895  0DB2  0141               	movlb	1	; select bank1
 18896  0DB3  00B1               	movwf	___flge@ff2^(0+128)
 18897  0DB4  31AA  2206  318B   	fcall	___flge
 18898  0DB7  1C03               	btfss	3,0
 18899  0DB8  2E05               	goto	l9235
 18900                           
 18901                           ;system.c: 403:    totalGrpB += virtChannels[n].current;
 18902  0DB9  3009               	movlw	9
 18903  0DBA  0141               	movlb	1	; select bank1
 18904  0DBB  00D3               	movwf	??_channelThing^(0+128)
 18905  0DBC  0853               	movf	??_channelThing^(0+128),w
 18906  0DBD  0140               	movlb	0	; select bank0
 18907  0DBE  00A9               	movwf	___bmul@multiplicand
 18908  0DBF  0144               	movlb	4	; select bank4
 18909  0DC0  085D               	movf	channelThing@n^(0+512),w
 18910  0DC1  31B1  219D  318B   	fcall	___bmul
 18911  0DC4  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18912  0DC5  0086               	movwf	6
 18913  0DC6  3002               	movlw	2	; select bank5/6
 18914  0DC7  0087               	movwf	7
 18915  0DC8  3F40               	moviw [0]fsr1
 18916  0DC9  0140               	movlb	0	; select bank0
 18917  0DCA  00DB               	movwf	___fladd@b
 18918  0DCB  3F41               	moviw [1]fsr1
 18919  0DCC  00DC               	movwf	___fladd@b+1
 18920  0DCD  3F42               	moviw [2]fsr1
 18921  0DCE  00DD               	movwf	___fladd@b+2
 18922  0DCF  3F43               	moviw [3]fsr1
 18923  0DD0  00DE               	movwf	___fladd@b+3
 18924  0DD1  0144               	movlb	4	; select bank4
 18925  0DD2  0852               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18926  0DD3  0140               	movlb	0	; select bank0
 18927  0DD4  00E2               	movwf	___fladd@a+3
 18928  0DD5  0144               	movlb	4	; select bank4
 18929  0DD6  0851               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18930  0DD7  0140               	movlb	0	; select bank0
 18931  0DD8  00E1               	movwf	___fladd@a+2
 18932  0DD9  0144               	movlb	4	; select bank4
 18933  0DDA  0850               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18934  0DDB  0140               	movlb	0	; select bank0
 18935  0DDC  00E0               	movwf	___fladd@a+1
 18936  0DDD  0144               	movlb	4	; select bank4
 18937  0DDE  084F               	movf	channelThing@totalGrpB^(0+512),w
 18938  0DDF  0140               	movlb	0	; select bank0
 18939  0DE0  00DF               	movwf	___fladd@a
 18940  0DE1  3192  2250  318B   	fcall	___fladd
 18941  0DE4  0140               	movlb	0	; select bank0
 18942  0DE5  085E               	movf	?___fladd+3,w
 18943  0DE6  0144               	movlb	4	; select bank4
 18944  0DE7  00D2               	movwf	(channelThing@totalGrpB+3)^(0+512)
 18945  0DE8  0140               	movlb	0	; select bank0
 18946  0DE9  085D               	movf	?___fladd+2,w
 18947  0DEA  0144               	movlb	4	; select bank4
 18948  0DEB  00D1               	movwf	(channelThing@totalGrpB+2)^(0+512)
 18949  0DEC  0140               	movlb	0	; select bank0
 18950  0DED  085C               	movf	?___fladd+1,w
 18951  0DEE  0144               	movlb	4	; select bank4
 18952  0DEF  00D0               	movwf	(channelThing@totalGrpB+1)^(0+512)
 18953  0DF0  0140               	movlb	0	; select bank0
 18954  0DF1  085B               	movf	?___fladd,w
 18955  0DF2  0144               	movlb	4	; select bank4
 18956  0DF3  00CF               	movwf	channelThing@totalGrpB^(0+512)
 18957                           
 18958                           ;system.c: 404:    grpB[numGrpB++] = n;
 18959  0DF4  085D               	movf	channelThing@n^(0+512),w
 18960  0DF5  0141               	movlb	1	; select bank1
 18961  0DF6  00D3               	movwf	??_channelThing^(0+128)
 18962  0DF7  0144               	movlb	4	; select bank4
 18963  0DF8  0858               	movf	channelThing@numGrpB^(0+512),w
 18964  0DF9  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18965  0DFA  0086               	movwf	6
 18966  0DFB  3002               	movlw	2	; select bank4/5
 18967  0DFC  0087               	movwf	7
 18968  0DFD  0141               	movlb	1	; select bank1
 18969  0DFE  0853               	movf	??_channelThing^(0+128),w
 18970  0DFF  0081               	movwf	1
 18971  0E00  3001               	movlw	1
 18972  0E01  00D3               	movwf	??_channelThing^(0+128)
 18973  0E02  0853               	movf	??_channelThing^(0+128),w
 18974  0E03  0144               	movlb	4	; select bank4
 18975  0E04  07D8               	addwf	channelThing@numGrpB^(0+512),f
 18976  0E05                     l9235:	
 18977                           
 18978                           ;system.c: 406:  }
 18979  0E05  3001               	movlw	1
 18980  0E06  0141               	movlb	1	; select bank1
 18981  0E07  00D3               	movwf	??_channelThing^(0+128)
 18982  0E08  0853               	movf	??_channelThing^(0+128),w
 18983  0E09  0144               	movlb	4	; select bank4
 18984  0E0A  07DD               	addwf	channelThing@n^(0+512),f
 18985  0E0B  3004               	movlw	4
 18986  0E0C  025D               	subwf	channelThing@n^(0+512),w
 18987  0E0D  1C03               	skipc
 18988  0E0E  2C9F               	goto	l9219
 18989                           
 18990                           ;system.c: 409:  qsort(grpA, numGrpA, sizeof(grpA[0]), sortDC);
 18991  0E0F  0857               	movf	channelThing@numGrpA^(0+512),w
 18992  0E10  0141               	movlb	1	; select bank1
 18993  0E11  00D3               	movwf	??_channelThing^(0+128)
 18994  0E12  01D4               	clrf	(??_channelThing^(0+128)+1)
 18995  0E13  0853               	movf	??_channelThing^(0+128),w
 18996  0E14  00BB               	movwf	qsort@nel^(0+128)
 18997  0E15  0854               	movf	(??_channelThing+1)^(0+128),w
 18998  0E16  00BC               	movwf	(qsort@nel+1)^(0+128)
 18999  0E17  3001               	movlw	1
 19000  0E18  00BD               	movwf	qsort@width^(0+128)
 19001  0E19  3000               	movlw	0
 19002  0E1A  00BE               	movwf	(qsort@width^(0+128)+1)
 19003  0E1B  306F               	movlw	low _sortDC
 19004  0E1C  00BF               	movwf	qsort@compar^(0+128)
 19005  0E1D  3034               	movlw	high _sortDC
 19006  0E1E  00C0               	movwf	(qsort@compar^(0+128)+1)
 19007  0E1F  3053               	movlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19008  0E20  319C  246C  318B   	fcall	_qsort
 19009                           
 19010                           ;system.c: 410:  qsort(grpB, numGrpB, sizeof(grpB[0]), sortDCRev);
 19011  0E23  0144               	movlb	4	; select bank4
 19012  0E24  0858               	movf	channelThing@numGrpB^(0+512),w
 19013  0E25  0141               	movlb	1	; select bank1
 19014  0E26  00D3               	movwf	??_channelThing^(0+128)
 19015  0E27  01D4               	clrf	(??_channelThing^(0+128)+1)
 19016  0E28  0853               	movf	??_channelThing^(0+128),w
 19017  0E29  00BB               	movwf	qsort@nel^(0+128)
 19018  0E2A  0854               	movf	(??_channelThing+1)^(0+128),w
 19019  0E2B  00BC               	movwf	(qsort@nel+1)^(0+128)
 19020  0E2C  3001               	movlw	1
 19021  0E2D  00BD               	movwf	qsort@width^(0+128)
 19022  0E2E  3000               	movlw	0
 19023  0E2F  00BE               	movwf	(qsort@width^(0+128)+1)
 19024  0E30  303A               	movlw	low _sortDCRev
 19025  0E31  00BF               	movwf	qsort@compar^(0+128)
 19026  0E32  3034               	movlw	high _sortDCRev
 19027  0E33  00C0               	movwf	(qsort@compar^(0+128)+1)
 19028  0E34  3059               	movlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19029  0E35  319C  246C  318B   	fcall	_qsort
 19030                           
 19031                           ;system.c: 413:  for(n = 0; n < numGrpA; n++) {
 19032  0E38  0144               	movlb	4	; select bank4
 19033  0E39  01DD               	clrf	channelThing@n^(0+512)
 19034  0E3A                     l9251:	
 19035  0E3A  0857               	movf	channelThing@numGrpA^(0+512),w
 19036  0E3B  025D               	subwf	channelThing@n^(0+512),w
 19037  0E3C  1803               	btfsc	3,0
 19038  0E3D  2EF4               	goto	l9253
 19039                           
 19040                           ;system.c: 414:   if (grpB[n] > -1) {
 19041  0E3E  085D               	movf	channelThing@n^(0+512),w
 19042  0E3F  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19043  0E40  0086               	movwf	6
 19044  0E41  3002               	movlw	2	; select bank4/5
 19045  0E42  0087               	movwf	7
 19046  0E43  1B81               	btfsc	1,7
 19047  0E44  2EAC               	goto	l909
 19048                           
 19049                           ;system.c: 415:    if (virtChannels[grpA[n]].DC + virtChannels[grpB[n]].DC > 100)
 19050  0E45  3009               	movlw	9
 19051  0E46  0141               	movlb	1	; select bank1
 19052  0E47  00D3               	movwf	??_channelThing^(0+128)
 19053  0E48  0853               	movf	??_channelThing^(0+128),w
 19054  0E49  0140               	movlb	0	; select bank0
 19055  0E4A  00A9               	movwf	___bmul@multiplicand
 19056  0E4B  0144               	movlb	4	; select bank4
 19057  0E4C  085D               	movf	channelThing@n^(0+512),w
 19058  0E4D  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19059  0E4E  0086               	movwf	6
 19060  0E4F  3002               	movlw	2	; select bank4/5
 19061  0E50  0087               	movwf	7
 19062  0E51  0801               	movf	1,w
 19063  0E52  31B1  219D  318B   	fcall	___bmul
 19064  0E55  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19065  0E56  0086               	movwf	6
 19066  0E57  3002               	movlw	2	; select bank5/6
 19067  0E58  0087               	movwf	7
 19068  0E59  3009               	movlw	9
 19069  0E5A  0141               	movlb	1	; select bank1
 19070  0E5B  00D4               	movwf	(??_channelThing+1)^(0+128)
 19071  0E5C  0854               	movf	(??_channelThing+1)^(0+128),w
 19072  0E5D  0140               	movlb	0	; select bank0
 19073  0E5E  00A9               	movwf	___bmul@multiplicand
 19074  0E5F  0144               	movlb	4	; select bank4
 19075  0E60  085D               	movf	channelThing@n^(0+512),w
 19076  0E61  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19077  0E62  0084               	movwf	4
 19078  0E63  3002               	movlw	2	; select bank4/5
 19079  0E64  0085               	movwf	5
 19080  0E65  0800               	movf	0,w
 19081  0E66  31B1  219D  318B   	fcall	___bmul
 19082  0E69  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19083  0E6A  0084               	movwf	4
 19084  0E6B  3002               	movlw	2	; select bank5/6
 19085  0E6C  0085               	movwf	5
 19086  0E6D  0800               	movf	0,w
 19087  0E6E  0701               	addwf	1,w
 19088  0E6F  0141               	movlb	1	; select bank1
 19089  0E70  00D5               	movwf	(??_channelThing+2)^(0+128)
 19090  0E71  01D6               	clrf	((??_channelThing+2)^(0+128)+1)
 19091  0E72  0DD6               	rlf	(??_channelThing+3)^(0+128),f
 19092  0E73  0856               	movf	(??_channelThing+3)^(0+128),w
 19093  0E74  3A80               	xorlw	128
 19094  0E75  00D7               	movwf	(??_channelThing+4)^(0+128)
 19095  0E76  3080               	movlw	128
 19096  0E77  0257               	subwf	(??_channelThing+4)^(0+128),w
 19097  0E78  1D03               	skipz
 19098  0E79  2E7C               	goto	u10555
 19099  0E7A  3065               	movlw	101
 19100  0E7B  0255               	subwf	(??_channelThing+2)^(0+128),w
 19101  0E7C                     u10555:	
 19102  0E7C  1C03               	skipc
 19103  0E7D  2EAC               	goto	l909
 19104                           
 19105                           ;system.c: 416:     virtChannels[grpB[n]].DC = 100 - virtChannels[grpA[n]].DC;
 19106  0E7E  3009               	movlw	9
 19107  0E7F  0141               	movlb	1	; select bank1
 19108  0E80  00D3               	movwf	??_channelThing^(0+128)
 19109  0E81  0853               	movf	??_channelThing^(0+128),w
 19110  0E82  0140               	movlb	0	; select bank0
 19111  0E83  00A9               	movwf	___bmul@multiplicand
 19112  0E84  0144               	movlb	4	; select bank4
 19113  0E85  085D               	movf	channelThing@n^(0+512),w
 19114  0E86  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19115  0E87  0086               	movwf	6
 19116  0E88  3002               	movlw	2	; select bank4/5
 19117  0E89  0087               	movwf	7
 19118  0E8A  0801               	movf	1,w
 19119  0E8B  31B1  219D  318B   	fcall	___bmul
 19120  0E8E  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19121  0E8F  0086               	movwf	6
 19122  0E90  3002               	movlw	2	; select bank5/6
 19123  0E91  0087               	movwf	7
 19124  0E92  0801               	movf	1,w
 19125  0E93  3C64               	sublw	100
 19126  0E94  0141               	movlb	1	; select bank1
 19127  0E95  00D4               	movwf	(??_channelThing+1)^(0+128)
 19128  0E96  3009               	movlw	9
 19129  0E97  00D5               	movwf	(??_channelThing+2)^(0+128)
 19130  0E98  0855               	movf	(??_channelThing+2)^(0+128),w
 19131  0E99  0140               	movlb	0	; select bank0
 19132  0E9A  00A9               	movwf	___bmul@multiplicand
 19133  0E9B  0144               	movlb	4	; select bank4
 19134  0E9C  085D               	movf	channelThing@n^(0+512),w
 19135  0E9D  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19136  0E9E  0086               	movwf	6
 19137  0E9F  3002               	movlw	2	; select bank4/5
 19138  0EA0  0087               	movwf	7
 19139  0EA1  0801               	movf	1,w
 19140  0EA2  31B1  219D  318B   	fcall	___bmul
 19141  0EA5  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19142  0EA6  0086               	movwf	6
 19143  0EA7  3002               	movlw	2	; select bank5/6
 19144  0EA8  0087               	movwf	7
 19145  0EA9  0141               	movlb	1	; select bank1
 19146  0EAA  0854               	movf	(??_channelThing+1)^(0+128),w
 19147  0EAB  0081               	movwf	1
 19148  0EAC                     l909:	
 19149                           ;system.c: 417:   }
 19150                           
 19151                           
 19152                           ;system.c: 420:   virtChannels[grpA[n]].start = 0;
 19153  0EAC  3009               	movlw	9
 19154  0EAD  0141               	movlb	1	; select bank1
 19155  0EAE  00D3               	movwf	??_channelThing^(0+128)
 19156  0EAF  0853               	movf	??_channelThing^(0+128),w
 19157  0EB0  0140               	movlb	0	; select bank0
 19158  0EB1  00A9               	movwf	___bmul@multiplicand
 19159  0EB2  0144               	movlb	4	; select bank4
 19160  0EB3  085D               	movf	channelThing@n^(0+512),w
 19161  0EB4  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19162  0EB5  0086               	movwf	6
 19163  0EB6  3002               	movlw	2	; select bank4/5
 19164  0EB7  0087               	movwf	7
 19165  0EB8  0801               	movf	1,w
 19166  0EB9  31B1  219D  318B   	fcall	___bmul
 19167  0EBC  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 19168  0EBD  0086               	movwf	6
 19169  0EBE  3002               	movlw	2	; select bank5/6
 19170  0EBF  0087               	movwf	7
 19171  0EC0  0181               	clrf	1
 19172                           
 19173                           ;system.c: 421:   virtChannels[grpA[n]].stop = virtChannels[grpA[n]].DC;
 19174  0EC1  3009               	movlw	9
 19175  0EC2  0141               	movlb	1	; select bank1
 19176  0EC3  00D3               	movwf	??_channelThing^(0+128)
 19177  0EC4  0853               	movf	??_channelThing^(0+128),w
 19178  0EC5  0140               	movlb	0	; select bank0
 19179  0EC6  00A9               	movwf	___bmul@multiplicand
 19180  0EC7  0144               	movlb	4	; select bank4
 19181  0EC8  085D               	movf	channelThing@n^(0+512),w
 19182  0EC9  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19183  0ECA  0086               	movwf	6
 19184  0ECB  3002               	movlw	2	; select bank4/5
 19185  0ECC  0087               	movwf	7
 19186  0ECD  0801               	movf	1,w
 19187  0ECE  31B1  219D  318B   	fcall	___bmul
 19188  0ED1  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19189  0ED2  0086               	movwf	6
 19190  0ED3  3002               	movlw	2	; select bank5/6
 19191  0ED4  0087               	movwf	7
 19192  0ED5  0801               	movf	1,w
 19193  0ED6  0141               	movlb	1	; select bank1
 19194  0ED7  00D4               	movwf	(??_channelThing+1)^(0+128)
 19195  0ED8  3009               	movlw	9
 19196  0ED9  00D5               	movwf	(??_channelThing+2)^(0+128)
 19197  0EDA  0855               	movf	(??_channelThing+2)^(0+128),w
 19198  0EDB  0140               	movlb	0	; select bank0
 19199  0EDC  00A9               	movwf	___bmul@multiplicand
 19200  0EDD  0144               	movlb	4	; select bank4
 19201  0EDE  085D               	movf	channelThing@n^(0+512),w
 19202  0EDF  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19203  0EE0  0086               	movwf	6
 19204  0EE1  3002               	movlw	2	; select bank4/5
 19205  0EE2  0087               	movwf	7
 19206  0EE3  0801               	movf	1,w
 19207  0EE4  31B1  219D  318B   	fcall	___bmul
 19208  0EE7  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 19209  0EE8  0086               	movwf	6
 19210  0EE9  3002               	movlw	2	; select bank5/6
 19211  0EEA  0087               	movwf	7
 19212  0EEB  0141               	movlb	1	; select bank1
 19213  0EEC  0854               	movf	(??_channelThing+1)^(0+128),w
 19214  0EED  0081               	movwf	1
 19215                           
 19216                           ;system.c: 422:  }
 19217  0EEE  3001               	movlw	1
 19218  0EEF  00D3               	movwf	??_channelThing^(0+128)
 19219  0EF0  0853               	movf	??_channelThing^(0+128),w
 19220  0EF1  0144               	movlb	4	; select bank4
 19221  0EF2  07DD               	addwf	channelThing@n^(0+512),f
 19222  0EF3  2E3A               	goto	l9251
 19223  0EF4                     l9253:	
 19224                           
 19225                           ;system.c: 424:  for(n = 0; n < numGrpB; n++) {
 19226  0EF4  01DD               	clrf	channelThing@n^(0+512)
 19227  0EF5                     l9259:	
 19228  0EF5  0858               	movf	channelThing@numGrpB^(0+512),w
 19229  0EF6  025D               	subwf	channelThing@n^(0+512),w
 19230  0EF7  1803               	btfsc	3,0
 19231  0EF8  2F45               	goto	l9261
 19232                           
 19233                           ;system.c: 425:   virtChannels[grpB[n]].start = 100 - virtChannels[grpB[n]].DC ;
 19234  0EF9  3009               	movlw	9
 19235  0EFA  0141               	movlb	1	; select bank1
 19236  0EFB  00D3               	movwf	??_channelThing^(0+128)
 19237  0EFC  0853               	movf	??_channelThing^(0+128),w
 19238  0EFD  0140               	movlb	0	; select bank0
 19239  0EFE  00A9               	movwf	___bmul@multiplicand
 19240  0EFF  0144               	movlb	4	; select bank4
 19241  0F00  085D               	movf	channelThing@n^(0+512),w
 19242  0F01  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19243  0F02  0086               	movwf	6
 19244  0F03  3002               	movlw	2	; select bank4/5
 19245  0F04  0087               	movwf	7
 19246  0F05  0801               	movf	1,w
 19247  0F06  31B1  219D  318B   	fcall	___bmul
 19248  0F09  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19249  0F0A  0086               	movwf	6
 19250  0F0B  3002               	movlw	2	; select bank5/6
 19251  0F0C  0087               	movwf	7
 19252  0F0D  0801               	movf	1,w
 19253  0F0E  3C64               	sublw	100
 19254  0F0F  0141               	movlb	1	; select bank1
 19255  0F10  00D4               	movwf	(??_channelThing+1)^(0+128)
 19256  0F11  3009               	movlw	9
 19257  0F12  00D5               	movwf	(??_channelThing+2)^(0+128)
 19258  0F13  0855               	movf	(??_channelThing+2)^(0+128),w
 19259  0F14  0140               	movlb	0	; select bank0
 19260  0F15  00A9               	movwf	___bmul@multiplicand
 19261  0F16  0144               	movlb	4	; select bank4
 19262  0F17  085D               	movf	channelThing@n^(0+512),w
 19263  0F18  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19264  0F19  0086               	movwf	6
 19265  0F1A  3002               	movlw	2	; select bank4/5
 19266  0F1B  0087               	movwf	7
 19267  0F1C  0801               	movf	1,w
 19268  0F1D  31B1  219D  318B   	fcall	___bmul
 19269  0F20  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 19270  0F21  0086               	movwf	6
 19271  0F22  3002               	movlw	2	; select bank5/6
 19272  0F23  0087               	movwf	7
 19273  0F24  0141               	movlb	1	; select bank1
 19274  0F25  0854               	movf	(??_channelThing+1)^(0+128),w
 19275  0F26  0081               	movwf	1
 19276                           
 19277                           ;system.c: 426:   virtChannels[grpB[n]].stop = 100;
 19278  0F27  3064               	movlw	100
 19279  0F28  00D3               	movwf	??_channelThing^(0+128)
 19280  0F29  3009               	movlw	9
 19281  0F2A  00D4               	movwf	(??_channelThing+1)^(0+128)
 19282  0F2B  0854               	movf	(??_channelThing+1)^(0+128),w
 19283  0F2C  0140               	movlb	0	; select bank0
 19284  0F2D  00A9               	movwf	___bmul@multiplicand
 19285  0F2E  0144               	movlb	4	; select bank4
 19286  0F2F  085D               	movf	channelThing@n^(0+512),w
 19287  0F30  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19288  0F31  0086               	movwf	6
 19289  0F32  3002               	movlw	2	; select bank4/5
 19290  0F33  0087               	movwf	7
 19291  0F34  0801               	movf	1,w
 19292  0F35  31B1  219D  318B   	fcall	___bmul
 19293  0F38  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 19294  0F39  0086               	movwf	6
 19295  0F3A  3002               	movlw	2	; select bank5/6
 19296  0F3B  0087               	movwf	7
 19297  0F3C  0141               	movlb	1	; select bank1
 19298  0F3D  0853               	movf	??_channelThing^(0+128),w
 19299  0F3E  0081               	movwf	1
 19300                           
 19301                           ;system.c: 427:  }
 19302  0F3F  3001               	movlw	1
 19303  0F40  00D3               	movwf	??_channelThing^(0+128)
 19304  0F41  0853               	movf	??_channelThing^(0+128),w
 19305  0F42  0144               	movlb	4	; select bank4
 19306  0F43  07DD               	addwf	channelThing@n^(0+512),f
 19307  0F44  2EF5               	goto	l9259
 19308  0F45                     l9261:	
 19309                           
 19310                           ;system.c: 430:  for(n = 0; n < 4; n++) {
 19311  0F45  01DD               	clrf	channelThing@n^(0+512)
 19312  0F46                     l9267:	
 19313                           
 19314                           ;system.c: 431:   data.heater[virtChannels[n].phyChanNum].Patt =
 19315  0F46  3009               	movlw	9
 19316  0F47  0141               	movlb	1	; select bank1
 19317  0F48  00D3               	movwf	??_channelThing^(0+128)
 19318  0F49  0853               	movf	??_channelThing^(0+128),w
 19319  0F4A  0140               	movlb	0	; select bank0
 19320  0F4B  00A9               	movwf	___bmul@multiplicand
 19321  0F4C  0144               	movlb	4	; select bank4
 19322  0F4D  085D               	movf	channelThing@n^(0+512),w
 19323  0F4E  31B1  219D  318B   	fcall	___bmul
 19324  0F51  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19325  0F52  0086               	movwf	6
 19326  0F53  3002               	movlw	2	; select bank5/6
 19327  0F54  0087               	movwf	7
 19328  0F55  3F40               	moviw [0]fsr1
 19329  0F56  0140               	movlb	0	; select bank0
 19330  0F57  00AD               	movwf	___wmul@multiplier
 19331  0F58  3F41               	moviw [1]fsr1
 19332  0F59  00AE               	movwf	___wmul@multiplier+1
 19333  0F5A  301F               	movlw	31
 19334  0F5B  00AF               	movwf	___wmul@multiplicand
 19335  0F5C  3000               	movlw	0
 19336  0F5D  00B0               	movwf	___wmul@multiplicand+1
 19337  0F5E  31B1  21DE  318B   	fcall	___wmul
 19338  0F61  3080               	movlw	128
 19339  0F62  0141               	movlb	1	; select bank1
 19340  0F63  00D4               	movwf	(??_channelThing+1)^(0+128)
 19341  0F64  3027               	movlw	39
 19342  0F65  00D5               	movwf	((??_channelThing+1)^(0+128)+1)
 19343  0F66  0140               	movlb	0	; select bank0
 19344  0F67  082D               	movf	?___wmul,w
 19345  0F68  0141               	movlb	1	; select bank1
 19346  0F69  0754               	addwf	(??_channelThing+1)^(0+128),w
 19347  0F6A  0086               	movwf	6
 19348  0F6B  0140               	movlb	0	; select bank0
 19349  0F6C  082E               	movf	?___wmul+1,w
 19350  0F6D  0141               	movlb	1	; select bank1
 19351  0F6E  3D55               	addwfc	(??_channelThing+2)^(0+128),w
 19352  0F6F  0087               	movwf	7
 19353  0F70  3042               	movlw	66
 19354  0F71  0140               	movlb	0	; select bank0
 19355  0F72  00DE               	movwf	___fldiv@a+3
 19356  0F73  30C8               	movlw	200
 19357  0F74  00DD               	movwf	___fldiv@a+2
 19358  0F75  3000               	movlw	0
 19359  0F76  00DC               	movwf	___fldiv@a+1
 19360  0F77  3000               	movlw	0
 19361  0F78  00DB               	movwf	___fldiv@a
 19362  0F79  301F               	movlw	31
 19363  0F7A  00AF               	movwf	___wmul@multiplicand
 19364  0F7B  3000               	movlw	0
 19365  0F7C  00B0               	movwf	___wmul@multiplicand+1
 19366  0F7D  3009               	movlw	9
 19367  0F7E  0141               	movlb	1	; select bank1
 19368  0F7F  00D6               	movwf	(??_channelThing+3)^(0+128)
 19369  0F80  0856               	movf	(??_channelThing+3)^(0+128),w
 19370  0F81  0140               	movlb	0	; select bank0
 19371  0F82  00A9               	movwf	___bmul@multiplicand
 19372  0F83  0144               	movlb	4	; select bank4
 19373  0F84  085D               	movf	channelThing@n^(0+512),w
 19374  0F85  31B1  219D  318B   	fcall	___bmul
 19375  0F88  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19376  0F89  0084               	movwf	4
 19377  0F8A  3002               	movlw	2	; select bank5/6
 19378  0F8B  0085               	movwf	5
 19379  0F8C  3F00               	moviw [0]fsr0
 19380  0F8D  0140               	movlb	0	; select bank0
 19381  0F8E  00AD               	movwf	___wmul@multiplier
 19382  0F8F  3F01               	moviw [1]fsr0
 19383  0F90  00AE               	movwf	___wmul@multiplier+1
 19384  0F91  31B1  21DE  318B   	fcall	___wmul
 19385  0F94  3078               	movlw	120
 19386  0F95  0141               	movlb	1	; select bank1
 19387  0F96  00D7               	movwf	(??_channelThing+4)^(0+128)
 19388  0F97  3027               	movlw	39
 19389  0F98  00D8               	movwf	((??_channelThing+4)^(0+128)+1)
 19390  0F99  0140               	movlb	0	; select bank0
 19391  0F9A  082D               	movf	?___wmul,w
 19392  0F9B  0141               	movlb	1	; select bank1
 19393  0F9C  0757               	addwf	(??_channelThing+4)^(0+128),w
 19394  0F9D  0084               	movwf	4
 19395  0F9E  0140               	movlb	0	; select bank0
 19396  0F9F  082E               	movf	?___wmul+1,w
 19397  0FA0  0141               	movlb	1	; select bank1
 19398  0FA1  3D58               	addwfc	(??_channelThing+5)^(0+128),w
 19399  0FA2  0085               	movwf	5
 19400  0FA3  3F00               	moviw [0]fsr0
 19401  0FA4  0140               	movlb	0	; select bank0
 19402  0FA5  00C1               	movwf	___flmul@b
 19403  0FA6  3F01               	moviw [1]fsr0
 19404  0FA7  00C2               	movwf	___flmul@b+1
 19405  0FA8  3F02               	moviw [2]fsr0
 19406  0FA9  00C3               	movwf	___flmul@b+2
 19407  0FAA  3F03               	moviw [3]fsr0
 19408  0FAB  00C4               	movwf	___flmul@b+3
 19409  0FAC  3009               	movlw	9
 19410  0FAD  0141               	movlb	1	; select bank1
 19411  0FAE  00D9               	movwf	(??_channelThing+6)^(0+128)
 19412  0FAF  0859               	movf	(??_channelThing+6)^(0+128),w
 19413  0FB0  0140               	movlb	0	; select bank0
 19414  0FB1  00A9               	movwf	___bmul@multiplicand
 19415  0FB2  0144               	movlb	4	; select bank4
 19416  0FB3  085D               	movf	channelThing@n^(0+512),w
 19417  0FB4  31B1  219D  318B   	fcall	___bmul
 19418  0FB7  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19419  0FB8  0084               	movwf	4
 19420  0FB9  3002               	movlw	2	; select bank5/6
 19421  0FBA  0085               	movwf	5
 19422  0FBB  0800               	movf	0,w
 19423  0FBC  0141               	movlb	1	; select bank1
 19424  0FBD  00DA               	movwf	(??_channelThing+7)^(0+128)
 19425  0FBE  01DB               	clrf	((??_channelThing+7)^(0+128)+1)
 19426  0FBF  01DC               	clrf	((??_channelThing+7)^(0+128)+2)
 19427  0FC0  01DD               	clrf	((??_channelThing+7)^(0+128)+3)
 19428  0FC1  085D               	movf	(??_channelThing+10)^(0+128),w
 19429  0FC2  0140               	movlb	0	; select bank0
 19430  0FC3  00B6               	movwf	___xxtofl@val+3
 19431  0FC4  0141               	movlb	1	; select bank1
 19432  0FC5  085C               	movf	(??_channelThing+9)^(0+128),w
 19433  0FC6  0140               	movlb	0	; select bank0
 19434  0FC7  00B5               	movwf	___xxtofl@val+2
 19435  0FC8  0141               	movlb	1	; select bank1
 19436  0FC9  085B               	movf	(??_channelThing+8)^(0+128),w
 19437  0FCA  0140               	movlb	0	; select bank0
 19438  0FCB  00B4               	movwf	___xxtofl@val+1
 19439  0FCC  0141               	movlb	1	; select bank1
 19440  0FCD  085A               	movf	(??_channelThing+7)^(0+128),w
 19441  0FCE  0140               	movlb	0	; select bank0
 19442  0FCF  00B3               	movwf	___xxtofl@val
 19443  0FD0  3001               	movlw	1
 19444  0FD1  31AC  240F  318B   	fcall	___xxtofl
 19445  0FD4  0140               	movlb	0	; select bank0
 19446  0FD5  0836               	movf	?___xxtofl+3,w
 19447  0FD6  00C8               	movwf	___flmul@a+3
 19448  0FD7  0835               	movf	?___xxtofl+2,w
 19449  0FD8  00C7               	movwf	___flmul@a+2
 19450  0FD9  0834               	movf	?___xxtofl+1,w
 19451  0FDA  00C6               	movwf	___flmul@a+1
 19452  0FDB  0833               	movf	?___xxtofl,w
 19453  0FDC  00C5               	movwf	___flmul@a
 19454  0FDD  3185  2561  318B   	fcall	___flmul
 19455  0FE0  0140               	movlb	0	; select bank0
 19456  0FE1  0844               	movf	?___flmul+3,w
 19457  0FE2  00E2               	movwf	___fldiv@b+3
 19458  0FE3  0843               	movf	?___flmul+2,w
 19459  0FE4  00E1               	movwf	___fldiv@b+2
 19460  0FE5  0842               	movf	?___flmul+1,w
 19461  0FE6  00E0               	movwf	___fldiv@b+1
 19462  0FE7  0841               	movf	?___flmul,w
 19463  0FE8  00DF               	movwf	___fldiv@b
 19464  0FE9  319E  2628  318B   	fcall	___fldiv
 19465  0FEC  0140               	movlb	0	; select bank0
 19466  0FED  085B               	movf	?___fldiv,w
 19467  0FEE  3FC0               	movwi [0]fsr1
 19468  0FEF  085C               	movf	?___fldiv+1,w
 19469  0FF0  3FC1               	movwi [1]fsr1
 19470  0FF1  085D               	movf	?___fldiv+2,w
 19471  0FF2  3FC2               	movwi [2]fsr1
 19472  0FF3  085E               	movf	?___fldiv+3,w
 19473  0FF4  3FC3               	movwi [3]fsr1
 19474                           
 19475                           ;system.c: 433:  }
 19476  0FF5  3001               	movlw	1
 19477  0FF6  0141               	movlb	1	; select bank1
 19478  0FF7  00D3               	movwf	??_channelThing^(0+128)
 19479  0FF8  0853               	movf	??_channelThing^(0+128),w
 19480  0FF9  0144               	movlb	4	; select bank4
 19481  0FFA  07DD               	addwf	channelThing@n^(0+512),f
 19482  0FFB  3004               	movlw	4
 19483  0FFC  025D               	subwf	channelThing@n^(0+512),w
 19484  0FFD  1803               	btfsc	3,0
 19485  0FFE  0008               	return
 19486  0FFF  2F46               	goto	l9267
 19487  1000                     __end_of_channelThing:	
 19488                           
 19489                           	psect	text46
 19490  1C6C                     __ptext46:	
 19491 ;; *************** function _qsort *****************
 19492 ;; Defined at:
 19493 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 19494 ;; Parameters:    Size  Location     Type
 19495 ;;  vbase           1    wreg     PTR void 
 19496 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19497 ;;  nel             2   27[BANK1 ] unsigned int 
 19498 ;;  width           2   29[BANK1 ] unsigned int 
 19499 ;;  compar          2   31[BANK1 ] PTR FTN(PTR const void ,
 19500 ;;		 -> sortCur(2), sortDCRev(2), sortDC(2), 
 19501 ;; Auto vars:     Size  Location     Type
 19502 ;;  vbase           1   38[BANK1 ] PTR void 
 19503 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19504 ;;  stack          64    0[BANK3 ] struct .[16]
 19505 ;;  xbuf           60    0[BANK2 ] unsigned char [60]
 19506 ;;  j               2   49[BANK1 ] int 
 19507 ;;  i               2   47[BANK1 ] int 
 19508 ;;  s               2   45[BANK1 ] int 
 19509 ;;  r               2   43[BANK1 ] int 
 19510 ;;  l               2   41[BANK1 ] int 
 19511 ;;  base            1   40[BANK1 ] PTR unsigned char 
 19512 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19513 ;;  x               1   39[BANK1 ] PTR unsigned char 
 19514 ;;		 -> qsort@xbuf(60), 
 19515 ;; Return value:  Size  Location     Type
 19516 ;;                  1    wreg      void 
 19517 ;; Registers used:
 19518 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19519 ;; Tracked objects:
 19520 ;;		On entry : 0/0
 19521 ;;		On exit  : 0/0
 19522 ;;		Unchanged: 0/0
 19523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19524 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19525 ;;      Locals:         0       1      13      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19526 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19527 ;;      Totals:         0       1      24      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19528 ;;Total ram usage:      149 bytes
 19529 ;; Hardware stack levels used:    1
 19530 ;; Hardware stack levels required when called:    6
 19531 ;; This function calls:
 19532 ;;		___awdiv
 19533 ;;		___bmul
 19534 ;;		_memcpy
 19535 ;;		_sortCur
 19536 ;;		_sortDC
 19537 ;;		_sortDCRev
 19538 ;;		_swap
 19539 ;; This function is called by:
 19540 ;;		_channelThing
 19541 ;; This function uses a non-reentrant model
 19542 ;;
 19543                           
 19544                           
 19545                           ;psect for function _qsort
 19546  1C6C                     _qsort:	
 19547                           
 19548                           ;incstack = 0
 19549                           ; Regs used in _qsort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19550                           ;qsort@vbase stored from wreg
 19551  1C6C  0141               	movlb	1	; select bank1
 19552  1C6D  00C6               	movwf	qsort@vbase^(0+128)
 19553  1C6E  0846               	movf	qsort@vbase^(0+128),w
 19554  1C6F  00C1               	movwf	??_qsort^(0+128)
 19555  1C70  0841               	movf	??_qsort^(0+128),w
 19556  1C71  00C8               	movwf	qsort@base^(0+128)
 19557  1C72  3000               	movlw	0
 19558  1C73  023E               	subwf	(qsort@width+1)^(0+128),w
 19559  1C74  303C               	movlw	60
 19560  1C75  1903               	skipnz
 19561  1C76  023D               	subwf	qsort@width^(0+128),w
 19562  1C77  1803               	skipnc
 19563  1C78  0008               	return
 19564  1C79  3020               	movlw	(low (qsort@xbuf| (0+256)))& (0+255)
 19565  1C7A  00C1               	movwf	??_qsort^(0+128)
 19566  1C7B  0841               	movf	??_qsort^(0+128),w
 19567  1C7C  00C7               	movwf	qsort@x^(0+128)
 19568  1C7D  083D               	movf	qsort@width^(0+128),w
 19569  1C7E  0747               	addwf	qsort@x^(0+128),w
 19570  1C7F  00C1               	movwf	??_qsort^(0+128)
 19571  1C80  0841               	movf	??_qsort^(0+128),w
 19572  1C81  0086               	movwf	6
 19573  1C82  3001               	movlw	1	; select bank2/3
 19574  1C83  0087               	movwf	7
 19575  1C84  0181               	clrf	1
 19576  1C85  01CD               	clrf	qsort@s^(0+128)
 19577  1C86  01CE               	clrf	(qsort@s+1)^(0+128)
 19578  1C87  0143               	movlb	3	; select bank3
 19579  1C88  01A0               	clrf	qsort@stack^(0+384)
 19580  1C89  01A1               	clrf	(qsort@stack+1)^(0+384)
 19581  1C8A  0141               	movlb	1	; select bank1
 19582  1C8B  083B               	movf	qsort@nel^(0+128),w
 19583  1C8C  3EFF               	addlw	255
 19584  1C8D  0143               	movlb	3	; select bank3
 19585  1C8E  00A2               	movwf	(qsort@stack^(0+384)+2)
 19586  1C8F  30FF               	movlw	255
 19587  1C90  0141               	movlb	1	; select bank1
 19588  1C91  3D3C               	addwfc	(qsort@nel+1)^(0+128),w
 19589  1C92  0143               	movlb	3	; select bank3
 19590  1C93  00A3               	movwf	((qsort@stack+1)^(0+384)+2)
 19591  1C94                     l8655:	
 19592  1C94  0141               	movlb	1	; select bank1
 19593  1C95  084D               	movf	qsort@s^(0+128),w
 19594  1C96  00C1               	movwf	??_qsort^(0+128)
 19595  1C97  3001               	movlw	1
 19596  1C98                     u9935:	
 19597  1C98  35C1               	lslf	??_qsort^(0+128),f
 19598  1C99  3EFF               	addlw	-1
 19599  1C9A  1D03               	skipz
 19600  1C9B  2C98               	goto	u9935
 19601  1C9C  3541               	lslf	??_qsort^(0+128),w
 19602  1C9D  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19603  1C9E  0086               	movwf	6
 19604  1C9F  3001               	movlw	1	; select bank3/4
 19605  1CA0  0087               	movwf	7
 19606  1CA1  3F40               	moviw [0]fsr1
 19607  1CA2  00C9               	movwf	qsort@l^(0+128)
 19608  1CA3  3F41               	moviw [1]fsr1
 19609  1CA4  00CA               	movwf	(qsort@l+1)^(0+128)
 19610  1CA5  084D               	movf	qsort@s^(0+128),w
 19611  1CA6  00C1               	movwf	??_qsort^(0+128)
 19612  1CA7  3001               	movlw	1
 19613  1CA8                     u9945:	
 19614  1CA8  35C1               	lslf	??_qsort^(0+128),f
 19615  1CA9  3EFF               	addlw	-1
 19616  1CAA  1D03               	skipz
 19617  1CAB  2CA8               	goto	u9945
 19618  1CAC  3541               	lslf	??_qsort^(0+128),w
 19619  1CAD  3E02               	addlw	2
 19620  1CAE  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19621  1CAF  0086               	movwf	6
 19622  1CB0  3001               	movlw	1	; select bank3/4
 19623  1CB1  0087               	movwf	7
 19624  1CB2  3F40               	moviw [0]fsr1
 19625  1CB3  00CB               	movwf	qsort@r^(0+128)
 19626  1CB4  3F41               	moviw [1]fsr1
 19627  1CB5  00CC               	movwf	(qsort@r+1)^(0+128)
 19628  1CB6  30FF               	movlw	255
 19629  1CB7  07CD               	addwf	qsort@s^(0+128),f
 19630  1CB8  30FF               	movlw	255
 19631  1CB9  3DCE               	addwfc	(qsort@s+1)^(0+128),f
 19632  1CBA                     l8661:	
 19633  1CBA  0141               	movlb	1	; select bank1
 19634  1CBB  084A               	movf	(qsort@l+1)^(0+128),w
 19635  1CBC  00D0               	movwf	(qsort@i+1)^(0+128)
 19636  1CBD  0849               	movf	qsort@l^(0+128),w
 19637  1CBE  00CF               	movwf	qsort@i^(0+128)
 19638  1CBF  084C               	movf	(qsort@r+1)^(0+128),w
 19639  1CC0  00D2               	movwf	(qsort@j+1)^(0+128)
 19640  1CC1  084B               	movf	qsort@r^(0+128),w
 19641  1CC2  00D1               	movwf	qsort@j^(0+128)
 19642  1CC3  083D               	movf	qsort@width^(0+128),w
 19643  1CC4  00C1               	movwf	??_qsort^(0+128)
 19644  1CC5  0841               	movf	??_qsort^(0+128),w
 19645  1CC6  0140               	movlb	0	; select bank0
 19646  1CC7  00A9               	movwf	___bmul@multiplicand
 19647  1CC8  0141               	movlb	1	; select bank1
 19648  1CC9  0851               	movf	qsort@j^(0+128),w
 19649  1CCA  074F               	addwf	qsort@i^(0+128),w
 19650  1CCB  0140               	movlb	0	; select bank0
 19651  1CCC  00A2               	movwf	___awdiv@dividend
 19652  1CCD  0141               	movlb	1	; select bank1
 19653  1CCE  0852               	movf	(qsort@j+1)^(0+128),w
 19654  1CCF  3D50               	addwfc	(qsort@i+1)^(0+128),w
 19655  1CD0  0140               	movlb	0	; select bank0
 19656  1CD1  00A3               	movwf	___awdiv@dividend+1
 19657  1CD2  3002               	movlw	2
 19658  1CD3  00A0               	movwf	___awdiv@divisor
 19659  1CD4  3000               	movlw	0
 19660  1CD5  00A1               	movwf	___awdiv@divisor+1
 19661  1CD6  31A0  2001  319C   	fcall	___awdiv
 19662  1CD9  0140               	movlb	0	; select bank0
 19663  1CDA  0820               	movf	?___awdiv,w
 19664  1CDB  31B1  219D  319C   	fcall	___bmul
 19665  1CDE  0141               	movlb	1	; select bank1
 19666  1CDF  0748               	addwf	qsort@base^(0+128),w
 19667  1CE0  00C2               	movwf	(??_qsort+1)^(0+128)
 19668  1CE1  0842               	movf	(??_qsort+1)^(0+128),w
 19669  1CE2  0140               	movlb	0	; select bank0
 19670  1CE3  00AD               	movwf	memcpy@s1
 19671  1CE4  0141               	movlb	1	; select bank1
 19672  1CE5  083E               	movf	(qsort@width+1)^(0+128),w
 19673  1CE6  0140               	movlb	0	; select bank0
 19674  1CE7  00AF               	movwf	memcpy@n+1
 19675  1CE8  0141               	movlb	1	; select bank1
 19676  1CE9  083D               	movf	qsort@width^(0+128),w
 19677  1CEA  0140               	movlb	0	; select bank0
 19678  1CEB  00AE               	movwf	memcpy@n
 19679  1CEC  0141               	movlb	1	; select bank1
 19680  1CED  0847               	movf	qsort@x^(0+128),w
 19681  1CEE  31B2  22E5  319C   	fcall	_memcpy
 19682  1CF1                     l8669:	
 19683  1CF1  0141               	movlb	1	; select bank1
 19684  1CF2  083D               	movf	qsort@width^(0+128),w
 19685  1CF3  00C1               	movwf	??_qsort^(0+128)
 19686  1CF4  0841               	movf	??_qsort^(0+128),w
 19687  1CF5  0140               	movlb	0	; select bank0
 19688  1CF6  00A9               	movwf	___bmul@multiplicand
 19689  1CF7  0141               	movlb	1	; select bank1
 19690  1CF8  084F               	movf	qsort@i^(0+128),w
 19691  1CF9  31B1  219D  319C   	fcall	___bmul
 19692  1CFC  0141               	movlb	1	; select bank1
 19693  1CFD  0748               	addwf	qsort@base^(0+128),w
 19694  1CFE  00C2               	movwf	(??_qsort+1)^(0+128)
 19695  1CFF  0842               	movf	(??_qsort+1)^(0+128),w
 19696  1D00  0140               	movlb	0	; select bank0
 19697  1D01  00EF               	movwf	_qsort$2812
 19698  1D02  086F               	movf	_qsort$2812,w
 19699  1D03  0141               	movlb	1	; select bank1
 19700  1D04  00B3               	movwf	sortCur@cmp1^(0+128)
 19701  1D05  3002               	movlw	2
 19702  1D06  00B4               	movwf	(sortCur@cmp1+1)^(0+128)
 19703  1D07  0847               	movf	qsort@x^(0+128),w
 19704  1D08  00B5               	movwf	sortCur@cmp2^(0+128)
 19705  1D09  3001               	movlw	1
 19706  1D0A  00B6               	movwf	(sortCur@cmp2+1)^(0+128)
 19707  1D0B  0840               	movf	(qsort@compar+1)^(0+128),w
 19708  1D0C  008A               	movwf	10
 19709  1D0D  083F               	movf	qsort@compar^(0+128),w
 19710  1D0E  000A               	callw
 19711  1D0F  319C               	pagesel	$
 19712  1D10  0141               	movlb	1	; select bank1
 19713  1D11  1FB4               	btfss	(?_sortCur+1)^(0+128),7
 19714  1D12  2D1C               	goto	l8675
 19715  1D13  3001               	movlw	1
 19716  1D14  07CF               	addwf	qsort@i^(0+128),f
 19717  1D15  3000               	movlw	0
 19718  1D16  3DD0               	addwfc	(qsort@i+1)^(0+128),f
 19719  1D17  2CF1               	goto	l8669
 19720  1D18                     l8673:	
 19721  1D18  30FF               	movlw	255
 19722  1D19  07D1               	addwf	qsort@j^(0+128),f
 19723  1D1A  30FF               	movlw	255
 19724  1D1B  3DD2               	addwfc	(qsort@j+1)^(0+128),f
 19725  1D1C                     l8675:	
 19726  1D1C  083D               	movf	qsort@width^(0+128),w
 19727  1D1D  00C1               	movwf	??_qsort^(0+128)
 19728  1D1E  0841               	movf	??_qsort^(0+128),w
 19729  1D1F  0140               	movlb	0	; select bank0
 19730  1D20  00A9               	movwf	___bmul@multiplicand
 19731  1D21  0141               	movlb	1	; select bank1
 19732  1D22  0851               	movf	qsort@j^(0+128),w
 19733  1D23  31B1  219D  319C   	fcall	___bmul
 19734  1D26  0141               	movlb	1	; select bank1
 19735  1D27  0748               	addwf	qsort@base^(0+128),w
 19736  1D28  00C2               	movwf	(??_qsort+1)^(0+128)
 19737  1D29  0842               	movf	(??_qsort+1)^(0+128),w
 19738  1D2A  0140               	movlb	0	; select bank0
 19739  1D2B  00EF               	movwf	_qsort$2812
 19740  1D2C  0141               	movlb	1	; select bank1
 19741  1D2D  0847               	movf	qsort@x^(0+128),w
 19742  1D2E  00B3               	movwf	sortCur@cmp1^(0+128)
 19743  1D2F  3001               	movlw	1
 19744  1D30  00B4               	movwf	(sortCur@cmp1+1)^(0+128)
 19745  1D31  0140               	movlb	0	; select bank0
 19746  1D32  086F               	movf	_qsort$2812,w
 19747  1D33  0141               	movlb	1	; select bank1
 19748  1D34  00B5               	movwf	sortCur@cmp2^(0+128)
 19749  1D35  3002               	movlw	2
 19750  1D36  00B6               	movwf	(sortCur@cmp2+1)^(0+128)
 19751  1D37  0840               	movf	(qsort@compar+1)^(0+128),w
 19752  1D38  008A               	movwf	10
 19753  1D39  083F               	movf	qsort@compar^(0+128),w
 19754  1D3A  000A               	callw
 19755  1D3B  319C               	pagesel	$
 19756  1D3C  0141               	movlb	1	; select bank1
 19757  1D3D  1BB4               	btfsc	(?_sortCur+1)^(0+128),7
 19758  1D3E  2D18               	goto	l8673
 19759  1D3F  0852               	movf	(qsort@j+1)^(0+128),w
 19760  1D40  3A80               	xorlw	128
 19761  1D41  00C1               	movwf	??_qsort^(0+128)
 19762  1D42  0850               	movf	(qsort@i+1)^(0+128),w
 19763  1D43  3A80               	xorlw	128
 19764  1D44  0241               	subwf	??_qsort^(0+128),w
 19765  1D45  1D03               	skipz
 19766  1D46  2D49               	goto	u9975
 19767  1D47  084F               	movf	qsort@i^(0+128),w
 19768  1D48  0251               	subwf	qsort@j^(0+128),w
 19769  1D49                     u9975:	
 19770  1D49  1C03               	skipc
 19771  1D4A  2D81               	goto	l8687
 19772  1D4B  0141               	movlb	1	; select bank1
 19773  1D4C  083E               	movf	(qsort@width+1)^(0+128),w
 19774  1D4D  0140               	movlb	0	; select bank0
 19775  1D4E  00AE               	movwf	swap@len+1
 19776  1D4F  0141               	movlb	1	; select bank1
 19777  1D50  083D               	movf	qsort@width^(0+128),w
 19778  1D51  0140               	movlb	0	; select bank0
 19779  1D52  00AD               	movwf	swap@len
 19780  1D53  0141               	movlb	1	; select bank1
 19781  1D54  083D               	movf	qsort@width^(0+128),w
 19782  1D55  00C1               	movwf	??_qsort^(0+128)
 19783  1D56  0841               	movf	??_qsort^(0+128),w
 19784  1D57  0140               	movlb	0	; select bank0
 19785  1D58  00A9               	movwf	___bmul@multiplicand
 19786  1D59  0141               	movlb	1	; select bank1
 19787  1D5A  084F               	movf	qsort@i^(0+128),w
 19788  1D5B  31B1  219D  319C   	fcall	___bmul
 19789  1D5E  0141               	movlb	1	; select bank1
 19790  1D5F  0748               	addwf	qsort@base^(0+128),w
 19791  1D60  00C2               	movwf	(??_qsort+1)^(0+128)
 19792  1D61  0842               	movf	(??_qsort+1)^(0+128),w
 19793  1D62  0140               	movlb	0	; select bank0
 19794  1D63  00AF               	movwf	swap@s1
 19795  1D64  0141               	movlb	1	; select bank1
 19796  1D65  083D               	movf	qsort@width^(0+128),w
 19797  1D66  00C3               	movwf	(??_qsort+2)^(0+128)
 19798  1D67  0843               	movf	(??_qsort+2)^(0+128),w
 19799  1D68  0140               	movlb	0	; select bank0
 19800  1D69  00A9               	movwf	___bmul@multiplicand
 19801  1D6A  0141               	movlb	1	; select bank1
 19802  1D6B  0851               	movf	qsort@j^(0+128),w
 19803  1D6C  31B1  219D  319C   	fcall	___bmul
 19804  1D6F  0141               	movlb	1	; select bank1
 19805  1D70  0748               	addwf	qsort@base^(0+128),w
 19806  1D71  00C4               	movwf	(??_qsort+3)^(0+128)
 19807  1D72  0844               	movf	(??_qsort+3)^(0+128),w
 19808  1D73  0140               	movlb	0	; select bank0
 19809  1D74  00B0               	movwf	swap@s2
 19810  1D75  31B3  2311  319C   	fcall	_swap
 19811  1D78  3001               	movlw	1
 19812  1D79  0141               	movlb	1	; select bank1
 19813  1D7A  07CF               	addwf	qsort@i^(0+128),f
 19814  1D7B  3000               	movlw	0
 19815  1D7C  3DD0               	addwfc	(qsort@i+1)^(0+128),f
 19816  1D7D  30FF               	movlw	255
 19817  1D7E  07D1               	addwf	qsort@j^(0+128),f
 19818  1D7F  30FF               	movlw	255
 19819  1D80  3DD2               	addwfc	(qsort@j+1)^(0+128),f
 19820  1D81                     l8687:	
 19821  1D81  0141               	movlb	1	; select bank1
 19822  1D82  0852               	movf	(qsort@j+1)^(0+128),w
 19823  1D83  3A80               	xorlw	128
 19824  1D84  00C1               	movwf	??_qsort^(0+128)
 19825  1D85  0850               	movf	(qsort@i+1)^(0+128),w
 19826  1D86  3A80               	xorlw	128
 19827  1D87  0241               	subwf	??_qsort^(0+128),w
 19828  1D88  1D03               	skipz
 19829  1D89  2D8C               	goto	u9985
 19830  1D8A  084F               	movf	qsort@i^(0+128),w
 19831  1D8B  0251               	subwf	qsort@j^(0+128),w
 19832  1D8C                     u9985:	
 19833  1D8C  1803               	skipnc
 19834  1D8D  2CF1               	goto	l8669
 19835  1D8E  0141               	movlb	1	; select bank1
 19836  1D8F  084F               	movf	qsort@i^(0+128),w
 19837  1D90  024B               	subwf	qsort@r^(0+128),w
 19838  1D91  00C1               	movwf	??_qsort^(0+128)
 19839  1D92  0850               	movf	(qsort@i+1)^(0+128),w
 19840  1D93  3B4C               	subwfb	(qsort@r+1)^(0+128),w
 19841  1D94  00C2               	movwf	(??_qsort+1)^(0+128)
 19842  1D95  0849               	movf	qsort@l^(0+128),w
 19843  1D96  0251               	subwf	qsort@j^(0+128),w
 19844  1D97  00C3               	movwf	(??_qsort+2)^(0+128)
 19845  1D98  084A               	movf	(qsort@l+1)^(0+128),w
 19846  1D99  3B52               	subwfb	(qsort@j+1)^(0+128),w
 19847  1D9A  00C4               	movwf	(??_qsort+3)^(0+128)
 19848  1D9B  0844               	movf	(??_qsort+3)^(0+128),w
 19849  1D9C  3A80               	xorlw	128
 19850  1D9D  00C5               	movwf	(??_qsort+4)^(0+128)
 19851  1D9E  0842               	movf	(??_qsort+1)^(0+128),w
 19852  1D9F  3A80               	xorlw	128
 19853  1DA0  0245               	subwf	(??_qsort+4)^(0+128),w
 19854  1DA1  1D03               	skipz
 19855  1DA2  2DA5               	goto	u9995
 19856  1DA3  0841               	movf	??_qsort^(0+128),w
 19857  1DA4  0243               	subwf	(??_qsort+2)^(0+128),w
 19858  1DA5                     u9995:	
 19859  1DA5  1803               	skipnc
 19860  1DA6  2DE0               	goto	l8697
 19861  1DA7  0141               	movlb	1	; select bank1
 19862  1DA8  0850               	movf	(qsort@i+1)^(0+128),w
 19863  1DA9  3A80               	xorlw	128
 19864  1DAA  00C1               	movwf	??_qsort^(0+128)
 19865  1DAB  084C               	movf	(qsort@r+1)^(0+128),w
 19866  1DAC  3A80               	xorlw	128
 19867  1DAD  0241               	subwf	??_qsort^(0+128),w
 19868  1DAE  1D03               	skipz
 19869  1DAF  2DB2               	goto	u10005
 19870  1DB0  084B               	movf	qsort@r^(0+128),w
 19871  1DB1  024F               	subwf	qsort@i^(0+128),w
 19872  1DB2                     u10005:	
 19873  1DB2  1803               	skipnc
 19874  1DB3  2DDA               	goto	l8695
 19875  1DB4  3001               	movlw	1
 19876  1DB5  0141               	movlb	1	; select bank1
 19877  1DB6  07CD               	addwf	qsort@s^(0+128),f
 19878  1DB7  3000               	movlw	0
 19879  1DB8  3DCE               	addwfc	(qsort@s+1)^(0+128),f
 19880  1DB9  084D               	movf	qsort@s^(0+128),w
 19881  1DBA  00C1               	movwf	??_qsort^(0+128)
 19882  1DBB  3001               	movlw	1
 19883  1DBC                     u10015:	
 19884  1DBC  35C1               	lslf	??_qsort^(0+128),f
 19885  1DBD  3EFF               	addlw	-1
 19886  1DBE  1D03               	skipz
 19887  1DBF  2DBC               	goto	u10015
 19888  1DC0  3541               	lslf	??_qsort^(0+128),w
 19889  1DC1  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19890  1DC2  0086               	movwf	6
 19891  1DC3  3001               	movlw	1	; select bank3/4
 19892  1DC4  0087               	movwf	7
 19893  1DC5  084F               	movf	qsort@i^(0+128),w
 19894  1DC6  3FC0               	movwi [0]fsr1
 19895  1DC7  0850               	movf	(qsort@i+1)^(0+128),w
 19896  1DC8  3FC1               	movwi [1]fsr1
 19897  1DC9  084D               	movf	qsort@s^(0+128),w
 19898  1DCA  00C1               	movwf	??_qsort^(0+128)
 19899  1DCB  3001               	movlw	1
 19900  1DCC                     u10025:	
 19901  1DCC  35C1               	lslf	??_qsort^(0+128),f
 19902  1DCD  3EFF               	addlw	-1
 19903  1DCE  1D03               	skipz
 19904  1DCF  2DCC               	goto	u10025
 19905  1DD0  3541               	lslf	??_qsort^(0+128),w
 19906  1DD1  3E02               	addlw	2
 19907  1DD2  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19908  1DD3  0086               	movwf	6
 19909  1DD4  3001               	movlw	1	; select bank3/4
 19910  1DD5  0087               	movwf	7
 19911  1DD6  084B               	movf	qsort@r^(0+128),w
 19912  1DD7  3FC0               	movwi [0]fsr1
 19913  1DD8  084C               	movf	(qsort@r+1)^(0+128),w
 19914  1DD9  3FC1               	movwi [1]fsr1
 19915  1DDA                     l8695:	
 19916  1DDA  0141               	movlb	1	; select bank1
 19917  1DDB  0852               	movf	(qsort@j+1)^(0+128),w
 19918  1DDC  00CC               	movwf	(qsort@r+1)^(0+128)
 19919  1DDD  0851               	movf	qsort@j^(0+128),w
 19920  1DDE  00CB               	movwf	qsort@r^(0+128)
 19921  1DDF  2E18               	goto	l8703
 19922  1DE0                     l8697:	
 19923  1DE0  0141               	movlb	1	; select bank1
 19924  1DE1  084A               	movf	(qsort@l+1)^(0+128),w
 19925  1DE2  3A80               	xorlw	128
 19926  1DE3  00C1               	movwf	??_qsort^(0+128)
 19927  1DE4  0852               	movf	(qsort@j+1)^(0+128),w
 19928  1DE5  3A80               	xorlw	128
 19929  1DE6  0241               	subwf	??_qsort^(0+128),w
 19930  1DE7  1D03               	skipz
 19931  1DE8  2DEB               	goto	u10035
 19932  1DE9  0851               	movf	qsort@j^(0+128),w
 19933  1DEA  0249               	subwf	qsort@l^(0+128),w
 19934  1DEB                     u10035:	
 19935  1DEB  1803               	skipnc
 19936  1DEC  2E13               	goto	l8701
 19937  1DED  3001               	movlw	1
 19938  1DEE  0141               	movlb	1	; select bank1
 19939  1DEF  07CD               	addwf	qsort@s^(0+128),f
 19940  1DF0  3000               	movlw	0
 19941  1DF1  3DCE               	addwfc	(qsort@s+1)^(0+128),f
 19942  1DF2  084D               	movf	qsort@s^(0+128),w
 19943  1DF3  00C1               	movwf	??_qsort^(0+128)
 19944  1DF4  3001               	movlw	1
 19945  1DF5                     u10045:	
 19946  1DF5  35C1               	lslf	??_qsort^(0+128),f
 19947  1DF6  3EFF               	addlw	-1
 19948  1DF7  1D03               	skipz
 19949  1DF8  2DF5               	goto	u10045
 19950  1DF9  3541               	lslf	??_qsort^(0+128),w
 19951  1DFA  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19952  1DFB  0086               	movwf	6
 19953  1DFC  3001               	movlw	1	; select bank3/4
 19954  1DFD  0087               	movwf	7
 19955  1DFE  0849               	movf	qsort@l^(0+128),w
 19956  1DFF  3FC0               	movwi [0]fsr1
 19957  1E00  084A               	movf	(qsort@l+1)^(0+128),w
 19958  1E01  3FC1               	movwi [1]fsr1
 19959  1E02  084D               	movf	qsort@s^(0+128),w
 19960  1E03  00C1               	movwf	??_qsort^(0+128)
 19961  1E04  3001               	movlw	1
 19962  1E05                     u10055:	
 19963  1E05  35C1               	lslf	??_qsort^(0+128),f
 19964  1E06  3EFF               	addlw	-1
 19965  1E07  1D03               	skipz
 19966  1E08  2E05               	goto	u10055
 19967  1E09  3541               	lslf	??_qsort^(0+128),w
 19968  1E0A  3E02               	addlw	2
 19969  1E0B  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19970  1E0C  0086               	movwf	6
 19971  1E0D  3001               	movlw	1	; select bank3/4
 19972  1E0E  0087               	movwf	7
 19973  1E0F  0851               	movf	qsort@j^(0+128),w
 19974  1E10  3FC0               	movwi [0]fsr1
 19975  1E11  0852               	movf	(qsort@j+1)^(0+128),w
 19976  1E12  3FC1               	movwi [1]fsr1
 19977  1E13                     l8701:	
 19978  1E13  0141               	movlb	1	; select bank1
 19979  1E14  0850               	movf	(qsort@i+1)^(0+128),w
 19980  1E15  00CA               	movwf	(qsort@l+1)^(0+128)
 19981  1E16  084F               	movf	qsort@i^(0+128),w
 19982  1E17  00C9               	movwf	qsort@l^(0+128)
 19983  1E18                     l8703:	
 19984  1E18  084A               	movf	(qsort@l+1)^(0+128),w
 19985  1E19  3A80               	xorlw	128
 19986  1E1A  00C1               	movwf	??_qsort^(0+128)
 19987  1E1B  084C               	movf	(qsort@r+1)^(0+128),w
 19988  1E1C  3A80               	xorlw	128
 19989  1E1D  0241               	subwf	??_qsort^(0+128),w
 19990  1E1E  1D03               	skipz
 19991  1E1F  2E22               	goto	u10065
 19992  1E20  084B               	movf	qsort@r^(0+128),w
 19993  1E21  0249               	subwf	qsort@l^(0+128),w
 19994  1E22                     u10065:	
 19995  1E22  1C03               	skipc
 19996  1E23  2CBA               	goto	l8661
 19997  1E24  0141               	movlb	1	; select bank1
 19998  1E25  1BCE               	btfsc	(qsort@s+1)^(0+128),7
 19999  1E26  0008               	return
 20000  1E27  2C94               	goto	l8655
 20001  1E28                     __end_of_qsort:	
 20002                           
 20003                           	psect	text47
 20004  3311                     __ptext47:	
 20005 ;; *************** function _swap *****************
 20006 ;; Defined at:
 20007 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 20008 ;; Parameters:    Size  Location     Type
 20009 ;;  len             2   13[BANK0 ] unsigned int 
 20010 ;;  s1              1   15[BANK0 ] PTR unsigned char 
 20011 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20012 ;;  s2              1   16[BANK0 ] PTR unsigned char 
 20013 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20014 ;; Auto vars:     Size  Location     Type
 20015 ;;  c               1   18[BANK0 ] unsigned char 
 20016 ;; Return value:  Size  Location     Type
 20017 ;;                  1    wreg      void 
 20018 ;; Registers used:
 20019 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20020 ;; Tracked objects:
 20021 ;;		On entry : 0/0
 20022 ;;		On exit  : 0/0
 20023 ;;		Unchanged: 0/0
 20024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20025 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20026 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20027 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20028 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20029 ;;Total ram usage:        6 bytes
 20030 ;; Hardware stack levels used:    1
 20031 ;; Hardware stack levels required when called:    3
 20032 ;; This function calls:
 20033 ;;		Nothing
 20034 ;; This function is called by:
 20035 ;;		_qsort
 20036 ;; This function uses a non-reentrant model
 20037 ;;
 20038                           
 20039                           
 20040                           ;psect for function _swap
 20041  3311                     _swap:	
 20042  3311                     l1572:	
 20043                           ;incstack = 0
 20044                           ; Regs used in _swap: [wreg+fsr1l+fsr1h+status,2+status,0]
 20045                           
 20046  3311  3001               	movlw	1
 20047  3312  0140               	movlb	0	; select bank0
 20048  3313  02AD               	subwf	swap@len,f
 20049  3314  3000               	movlw	0
 20050  3315  3BAE               	subwfb	swap@len+1,f
 20051  3316  0A2D               	incf	swap@len,w
 20052  3317  1903               	btfsc	3,2
 20053  3318  0A2E               	incf	swap@len+1,w
 20054  3319  1903               	btfsc	3,2
 20055  331A  0008               	return
 20056  331B  082F               	movf	swap@s1,w
 20057  331C  0086               	movwf	6
 20058  331D  3002               	movlw	2	; select bank4/5
 20059  331E  0087               	movwf	7
 20060  331F  0801               	movf	1,w
 20061  3320  00B1               	movwf	??_swap
 20062  3321  0831               	movf	??_swap,w
 20063  3322  00B2               	movwf	swap@c
 20064  3323  0830               	movf	swap@s2,w
 20065  3324  0086               	movwf	6
 20066  3325  3002               	movlw	2	; select bank4/5
 20067  3326  0087               	movwf	7
 20068  3327  0801               	movf	1,w
 20069  3328  00B1               	movwf	??_swap
 20070  3329  082F               	movf	swap@s1,w
 20071  332A  0086               	movwf	6
 20072  332B  3002               	movlw	2	; select bank4/5
 20073  332C  0087               	movwf	7
 20074  332D  0831               	movf	??_swap,w
 20075  332E  0081               	movwf	1
 20076  332F  3001               	movlw	1
 20077  3330  00B1               	movwf	??_swap
 20078  3331  0831               	movf	??_swap,w
 20079  3332  07AF               	addwf	swap@s1,f
 20080  3333  0832               	movf	swap@c,w
 20081  3334  00B1               	movwf	??_swap
 20082  3335  0830               	movf	swap@s2,w
 20083  3336  0086               	movwf	6
 20084  3337  3002               	movlw	2	; select bank4/5
 20085  3338  0087               	movwf	7
 20086  3339  0831               	movf	??_swap,w
 20087  333A  0081               	movwf	1
 20088  333B  3001               	movlw	1
 20089  333C  00B1               	movwf	??_swap
 20090  333D  0831               	movf	??_swap,w
 20091  333E  07B0               	addwf	swap@s2,f
 20092  333F  2B11               	goto	l1572
 20093  3340                     __end_of_swap:	
 20094                           
 20095                           	psect	text48
 20096  2807                     __ptext48:	
 20097 ;; *************** function _sortCur *****************
 20098 ;; Defined at:
 20099 ;;		line 359 in file "system.c"
 20100 ;; Parameters:    Size  Location     Type
 20101 ;;  cmp1            2   19[BANK1 ] PTR const void 
 20102 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20103 ;;  cmp2            2   21[BANK1 ] PTR const void 
 20104 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20105 ;; Auto vars:     Size  Location     Type
 20106 ;;  b               2   25[BANK1 ] PTR struct .
 20107 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20108 ;;  a               2   23[BANK1 ] PTR struct .
 20109 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20110 ;; Return value:  Size  Location     Type
 20111 ;;                  2   19[BANK1 ] int 
 20112 ;; Registers used:
 20113 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20114 ;; Tracked objects:
 20115 ;;		On entry : 0/0
 20116 ;;		On exit  : 0/0
 20117 ;;		Unchanged: 0/0
 20118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20119 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20120 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20121 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20122 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20123 ;;Total ram usage:        8 bytes
 20124 ;; Hardware stack levels used:    1
 20125 ;; Hardware stack levels required when called:    5
 20126 ;; This function calls:
 20127 ;;		___flsub
 20128 ;;		___fltol
 20129 ;; This function is called by:
 20130 ;;		_channelThing
 20131 ;;		_qsort
 20132 ;; This function uses a non-reentrant model
 20133 ;;
 20134                           
 20135                           
 20136                           ;psect for function _sortCur
 20137  2807                     _sortCur:	
 20138                           
 20139                           ;system.c: 359: int sortCur(const void *cmp1, const void *cmp2);system.c: 360: {;system.
      +                          c: 361:  t_virtChannel *a = (t_virtChannel *)cmp1;
 20140                           
 20141                           ;incstack = 0
 20142                           ; Regs used in _sortCur: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20143  2807  0141               	movlb	1	; select bank1
 20144  2808  0834               	movf	(sortCur@cmp1+1)^(0+128),w
 20145  2809  00B8               	movwf	(sortCur@a+1)^(0+128)
 20146  280A  0833               	movf	sortCur@cmp1^(0+128),w
 20147  280B  00B7               	movwf	sortCur@a^(0+128)
 20148                           
 20149                           ;system.c: 362:  t_virtChannel *b = (t_virtChannel *)cmp2;
 20150  280C  0836               	movf	(sortCur@cmp2+1)^(0+128),w
 20151  280D  00BA               	movwf	(sortCur@b+1)^(0+128)
 20152  280E  0835               	movf	sortCur@cmp2^(0+128),w
 20153  280F  00B9               	movwf	sortCur@b^(0+128)
 20154                           
 20155                           ;system.c: 364:  return (b->current - a->current);
 20156  2810  0839               	movf	sortCur@b^(0+128),w
 20157  2811  0086               	movwf	6
 20158  2812  083A               	movf	(sortCur@b+1)^(0+128),w
 20159  2813  0087               	movwf	7
 20160  2814  3142               	addfsr 1,2
 20161  2815  3F40               	moviw [0]fsr1
 20162  2816  00A4               	movwf	___flsub@b^(0+128)
 20163  2817  3F41               	moviw [1]fsr1
 20164  2818  00A5               	movwf	(___flsub@b+1)^(0+128)
 20165  2819  3F42               	moviw [2]fsr1
 20166  281A  00A6               	movwf	(___flsub@b+2)^(0+128)
 20167  281B  3F43               	moviw [3]fsr1
 20168  281C  00A7               	movwf	(___flsub@b+3)^(0+128)
 20169  281D  0837               	movf	sortCur@a^(0+128),w
 20170  281E  0086               	movwf	6
 20171  281F  0838               	movf	(sortCur@a+1)^(0+128),w
 20172  2820  0087               	movwf	7
 20173  2821  3142               	addfsr 1,2
 20174  2822  3F40               	moviw [0]fsr1
 20175  2823  00A0               	movwf	___flsub@a^(0+128)
 20176  2824  3F41               	moviw [1]fsr1
 20177  2825  00A1               	movwf	(___flsub@a+1)^(0+128)
 20178  2826  3F42               	moviw [2]fsr1
 20179  2827  00A2               	movwf	(___flsub@a+2)^(0+128)
 20180  2828  3F43               	moviw [3]fsr1
 20181  2829  00A3               	movwf	(___flsub@a+3)^(0+128)
 20182  282A  31B4  2405  31A8   	fcall	___flsub
 20183  282D  0141               	movlb	1	; select bank1
 20184  282E  0823               	movf	(?___flsub+3)^(0+128),w
 20185  282F  00AB               	movwf	(___fltol@f1+3)^(0+128)
 20186  2830  0822               	movf	(?___flsub+2)^(0+128),w
 20187  2831  00AA               	movwf	(___fltol@f1+2)^(0+128)
 20188  2832  0821               	movf	(?___flsub+1)^(0+128),w
 20189  2833  00A9               	movwf	(___fltol@f1+1)^(0+128)
 20190  2834  0820               	movf	?___flsub^(0+128),w
 20191  2835  00A8               	movwf	___fltol@f1^(0+128)
 20192  2836  31A8  203E         	fcall	___fltol
 20193  2838  0141               	movlb	1	; select bank1
 20194  2839  0829               	movf	(?___fltol+1)^(0+128),w
 20195  283A  00B4               	movwf	(?_sortCur+1)^(0+128)
 20196  283B  0828               	movf	?___fltol^(0+128),w
 20197  283C  00B3               	movwf	?_sortCur^(0+128)
 20198  283D  0008               	return
 20199  283E                     __end_of_sortCur:	
 20200                           
 20201                           	psect	text49
 20202  346F                     __ptext49:	
 20203 ;; *************** function _sortDC *****************
 20204 ;; Defined at:
 20205 ;;		line 337 in file "system.c"
 20206 ;; Parameters:    Size  Location     Type
 20207 ;;  cmp1            2   19[BANK1 ] PTR const void 
 20208 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20209 ;;  cmp2            2   21[BANK1 ] PTR const void 
 20210 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20211 ;; Auto vars:     Size  Location     Type
 20212 ;;  b               1   26[BANK1 ] unsigned char 
 20213 ;;  a               1   25[BANK1 ] unsigned char 
 20214 ;; Return value:  Size  Location     Type
 20215 ;;                  2   19[BANK1 ] int 
 20216 ;; Registers used:
 20217 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20218 ;; Tracked objects:
 20219 ;;		On entry : 0/0
 20220 ;;		On exit  : 0/0
 20221 ;;		Unchanged: 0/0
 20222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20223 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20224 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20225 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20226 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20227 ;;Total ram usage:        8 bytes
 20228 ;; Hardware stack levels used:    1
 20229 ;; Hardware stack levels required when called:    4
 20230 ;; This function calls:
 20231 ;;		___bmul
 20232 ;; This function is called by:
 20233 ;;		_channelThing
 20234 ;;		_qsort
 20235 ;; This function uses a non-reentrant model
 20236 ;;
 20237                           
 20238                           
 20239                           ;psect for function _sortDC
 20240  346F                     _sortDC:	
 20241                           
 20242                           ;system.c: 337: int sortDC(const void *cmp1, const void *cmp2);system.c: 338: {;system.c
      +                          : 339:  uint8_t a = *(uint8_t *)cmp1;
 20243                           
 20244                           ;incstack = 0
 20245                           ; Regs used in _sortDC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20246  346F  0141               	movlb	1	; select bank1
 20247  3470  0833               	movf	sortDC@cmp1^(0+128),w
 20248  3471  0086               	movwf	6
 20249  3472  0834               	movf	(sortDC@cmp1+1)^(0+128),w
 20250  3473  0087               	movwf	7
 20251  3474  0801               	movf	1,w
 20252  3475  00B7               	movwf	??_sortDC^(0+128)
 20253  3476  0837               	movf	??_sortDC^(0+128),w
 20254  3477  00B9               	movwf	sortDC@a^(0+128)
 20255                           
 20256                           ;system.c: 340:  uint8_t b = *(uint8_t *)cmp2;
 20257  3478  0835               	movf	sortDC@cmp2^(0+128),w
 20258  3479  0086               	movwf	6
 20259  347A  0836               	movf	(sortDC@cmp2+1)^(0+128),w
 20260  347B  0087               	movwf	7
 20261  347C  0801               	movf	1,w
 20262  347D  00B7               	movwf	??_sortDC^(0+128)
 20263  347E  0837               	movf	??_sortDC^(0+128),w
 20264  347F  00BA               	movwf	sortDC@b^(0+128)
 20265                           
 20266                           ;system.c: 342:  return (virtChannels[b].DC - virtChannels[a].DC);
 20267  3480  3009               	movlw	9
 20268  3481  00B7               	movwf	??_sortDC^(0+128)
 20269  3482  0837               	movf	??_sortDC^(0+128),w
 20270  3483  0140               	movlb	0	; select bank0
 20271  3484  00A9               	movwf	___bmul@multiplicand
 20272  3485  0141               	movlb	1	; select bank1
 20273  3486  083A               	movf	sortDC@b^(0+128),w
 20274  3487  31B1  219D  31B4   	fcall	___bmul
 20275  348A  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20276  348B  0086               	movwf	6
 20277  348C  3002               	movlw	2	; select bank5/6
 20278  348D  0087               	movwf	7
 20279  348E  3009               	movlw	9
 20280  348F  0141               	movlb	1	; select bank1
 20281  3490  00B8               	movwf	(??_sortDC+1)^(0+128)
 20282  3491  0838               	movf	(??_sortDC+1)^(0+128),w
 20283  3492  0140               	movlb	0	; select bank0
 20284  3493  00A9               	movwf	___bmul@multiplicand
 20285  3494  0141               	movlb	1	; select bank1
 20286  3495  0839               	movf	sortDC@a^(0+128),w
 20287  3496  31B1  219D         	fcall	___bmul
 20288  3498  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20289  3499  0084               	movwf	4
 20290  349A  3002               	movlw	2	; select bank5/6
 20291  349B  0085               	movwf	5
 20292  349C  0800               	movf	0,w
 20293  349D  0201               	subwf	1,w
 20294  349E  0141               	movlb	1	; select bank1
 20295  349F  00B3               	movwf	?_sortDC^(0+128)
 20296  34A0  01B4               	clrf	(?_sortDC^(0+128)+1)
 20297  34A1  1C03               	skipc
 20298  34A2  03B4               	decf	(?_sortDC+1)^(0+128),f
 20299  34A3  0008               	return
 20300  34A4                     __end_of_sortDC:	
 20301                           
 20302                           	psect	text50
 20303  343A                     __ptext50:	
 20304 ;; *************** function _sortDCRev *****************
 20305 ;; Defined at:
 20306 ;;		line 348 in file "system.c"
 20307 ;; Parameters:    Size  Location     Type
 20308 ;;  cmp1            2   19[BANK1 ] PTR const void 
 20309 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20310 ;;  cmp2            2   21[BANK1 ] PTR const void 
 20311 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20312 ;; Auto vars:     Size  Location     Type
 20313 ;;  b               1   26[BANK1 ] unsigned char 
 20314 ;;  a               1   25[BANK1 ] unsigned char 
 20315 ;; Return value:  Size  Location     Type
 20316 ;;                  2   19[BANK1 ] int 
 20317 ;; Registers used:
 20318 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20319 ;; Tracked objects:
 20320 ;;		On entry : 0/0
 20321 ;;		On exit  : 0/0
 20322 ;;		Unchanged: 0/0
 20323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20324 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20325 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20326 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20327 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20328 ;;Total ram usage:        8 bytes
 20329 ;; Hardware stack levels used:    1
 20330 ;; Hardware stack levels required when called:    4
 20331 ;; This function calls:
 20332 ;;		___bmul
 20333 ;; This function is called by:
 20334 ;;		_channelThing
 20335 ;;		_qsort
 20336 ;; This function uses a non-reentrant model
 20337 ;;
 20338                           
 20339                           
 20340                           ;psect for function _sortDCRev
 20341  343A                     _sortDCRev:	
 20342                           
 20343                           ;system.c: 348: int sortDCRev(const void *cmp1, const void *cmp2);system.c: 349: {;syste
      +                          m.c: 350:  uint8_t a = *(uint8_t *)cmp1;
 20344                           
 20345                           ;incstack = 0
 20346                           ; Regs used in _sortDCRev: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20347  343A  0141               	movlb	1	; select bank1
 20348  343B  0833               	movf	sortDCRev@cmp1^(0+128),w
 20349  343C  0086               	movwf	6
 20350  343D  0834               	movf	(sortDCRev@cmp1+1)^(0+128),w
 20351  343E  0087               	movwf	7
 20352  343F  0801               	movf	1,w
 20353  3440  00B7               	movwf	??_sortDCRev^(0+128)
 20354  3441  0837               	movf	??_sortDCRev^(0+128),w
 20355  3442  00B9               	movwf	sortDCRev@a^(0+128)
 20356                           
 20357                           ;system.c: 351:  uint8_t b = *(uint8_t *)cmp2;
 20358  3443  0835               	movf	sortDCRev@cmp2^(0+128),w
 20359  3444  0086               	movwf	6
 20360  3445  0836               	movf	(sortDCRev@cmp2+1)^(0+128),w
 20361  3446  0087               	movwf	7
 20362  3447  0801               	movf	1,w
 20363  3448  00B7               	movwf	??_sortDCRev^(0+128)
 20364  3449  0837               	movf	??_sortDCRev^(0+128),w
 20365  344A  00BA               	movwf	sortDCRev@b^(0+128)
 20366                           
 20367                           ;system.c: 353:  return (virtChannels[a].DC - virtChannels[b].DC);
 20368  344B  3009               	movlw	9
 20369  344C  00B7               	movwf	??_sortDCRev^(0+128)
 20370  344D  0837               	movf	??_sortDCRev^(0+128),w
 20371  344E  0140               	movlb	0	; select bank0
 20372  344F  00A9               	movwf	___bmul@multiplicand
 20373  3450  0141               	movlb	1	; select bank1
 20374  3451  0839               	movf	sortDCRev@a^(0+128),w
 20375  3452  31B1  219D  31B4   	fcall	___bmul
 20376  3455  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20377  3456  0086               	movwf	6
 20378  3457  3002               	movlw	2	; select bank5/6
 20379  3458  0087               	movwf	7
 20380  3459  3009               	movlw	9
 20381  345A  0141               	movlb	1	; select bank1
 20382  345B  00B8               	movwf	(??_sortDCRev+1)^(0+128)
 20383  345C  0838               	movf	(??_sortDCRev+1)^(0+128),w
 20384  345D  0140               	movlb	0	; select bank0
 20385  345E  00A9               	movwf	___bmul@multiplicand
 20386  345F  0141               	movlb	1	; select bank1
 20387  3460  083A               	movf	sortDCRev@b^(0+128),w
 20388  3461  31B1  219D         	fcall	___bmul
 20389  3463  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20390  3464  0084               	movwf	4
 20391  3465  3002               	movlw	2	; select bank5/6
 20392  3466  0085               	movwf	5
 20393  3467  0800               	movf	0,w
 20394  3468  0201               	subwf	1,w
 20395  3469  0141               	movlb	1	; select bank1
 20396  346A  00B3               	movwf	?_sortDCRev^(0+128)
 20397  346B  01B4               	clrf	(?_sortDCRev^(0+128)+1)
 20398  346C  1C03               	skipc
 20399  346D  03B4               	decf	(?_sortDCRev+1)^(0+128),f
 20400  346E  0008               	return
 20401  346F                     __end_of_sortDCRev:	
 20402                           
 20403                           	psect	text51
 20404  319D                     __ptext51:	
 20405 ;; *************** function ___bmul *****************
 20406 ;; Defined at:
 20407 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 20408 ;; Parameters:    Size  Location     Type
 20409 ;;  multiplier      1    wreg     unsigned char 
 20410 ;;  multiplicand    1    9[BANK0 ] unsigned char 
 20411 ;; Auto vars:     Size  Location     Type
 20412 ;;  multiplier      1   12[BANK0 ] unsigned char 
 20413 ;;  product         1   11[BANK0 ] unsigned char 
 20414 ;; Return value:  Size  Location     Type
 20415 ;;                  1    wreg      unsigned char 
 20416 ;; Registers used:
 20417 ;;		wreg, status,2, status,0
 20418 ;; Tracked objects:
 20419 ;;		On entry : 0/0
 20420 ;;		On exit  : 0/0
 20421 ;;		Unchanged: 0/0
 20422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20423 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20424 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20425 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20426 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20427 ;;Total ram usage:        4 bytes
 20428 ;; Hardware stack levels used:    1
 20429 ;; Hardware stack levels required when called:    3
 20430 ;; This function calls:
 20431 ;;		Nothing
 20432 ;; This function is called by:
 20433 ;;		_channelView
 20434 ;;		_sortDC
 20435 ;;		_sortDCRev
 20436 ;;		_channelThing
 20437 ;;		_controller
 20438 ;;		_qsort
 20439 ;; This function uses a non-reentrant model
 20440 ;;
 20441                           
 20442                           
 20443                           ;psect for function ___bmul
 20444  319D                     ___bmul:	
 20445                           
 20446                           ;incstack = 0
 20447                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 20448                           ;___bmul@multiplier stored from wreg
 20449  319D  0140               	movlb	0	; select bank0
 20450  319E  00AC               	movwf	___bmul@multiplier
 20451  319F  01AB               	clrf	___bmul@product
 20452  31A0                     l7389:	
 20453  31A0  1C2C               	btfss	___bmul@multiplier,0
 20454  31A1  29A6               	goto	l7393
 20455  31A2  0829               	movf	___bmul@multiplicand,w
 20456  31A3  00AA               	movwf	??___bmul
 20457  31A4  082A               	movf	??___bmul,w
 20458  31A5  07AB               	addwf	___bmul@product,f
 20459  31A6                     l7393:	
 20460  31A6  1003               	clrc
 20461  31A7  0DA9               	rlf	___bmul@multiplicand,f
 20462  31A8  1003               	clrc
 20463  31A9  0CAC               	rrf	___bmul@multiplier,f
 20464  31AA  082C               	movf	___bmul@multiplier,w
 20465  31AB  1D03               	btfss	3,2
 20466  31AC  29A0               	goto	l7389
 20467  31AD  082B               	movf	___bmul@product,w
 20468  31AE  0008               	return
 20469  31AF                     __end_of___bmul:	
 20470                           
 20471                           	psect	text52
 20472  283E                     __ptext52:	
 20473 ;; *************** function ___fltol *****************
 20474 ;; Defined at:
 20475 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 20476 ;; Parameters:    Size  Location     Type
 20477 ;;  f1              4    8[BANK1 ] unsigned char 
 20478 ;; Auto vars:     Size  Location     Type
 20479 ;;  exp1            1   18[BANK1 ] unsigned char 
 20480 ;;  sign1           1   17[BANK1 ] unsigned char 
 20481 ;; Return value:  Size  Location     Type
 20482 ;;                  4    8[BANK1 ] long 
 20483 ;; Registers used:
 20484 ;;		wreg, status,2, status,0
 20485 ;; Tracked objects:
 20486 ;;		On entry : 0/0
 20487 ;;		On exit  : 0/0
 20488 ;;		Unchanged: 0/0
 20489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20490 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20491 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20492 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20493 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20494 ;;Total ram usage:       11 bytes
 20495 ;; Hardware stack levels used:    1
 20496 ;; Hardware stack levels required when called:    3
 20497 ;; This function calls:
 20498 ;;		Nothing
 20499 ;; This function is called by:
 20500 ;;		_checkChannelStatus
 20501 ;;		_sortCur
 20502 ;;		_ftoa
 20503 ;; This function uses a non-reentrant model
 20504 ;;
 20505                           
 20506                           
 20507                           ;psect for function ___fltol
 20508  283E                     ___fltol:	
 20509                           
 20510                           ;incstack = 0
 20511                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 20512  283E  1003               	clrc
 20513  283F  0141               	movlb	1	; select bank1
 20514  2840  0D2A               	rlf	(___fltol@f1+2)^(0+128),w
 20515  2841  0D2B               	rlf	(___fltol@f1+3)^(0+128),w
 20516  2842  00AC               	movwf	??___fltol^(0+128)
 20517  2843  082C               	movf	??___fltol^(0+128),w
 20518  2844  00B2               	movwf	___fltol@exp1^(0+128)
 20519  2845  0832               	movf	___fltol@exp1^(0+128),w
 20520  2846  1D03               	btfss	3,2
 20521  2847  2851               	goto	l7509
 20522  2848                     l7505:	
 20523  2848  3000               	movlw	0
 20524  2849  00AB               	movwf	(?___fltol+3)^(0+128)
 20525  284A  3000               	movlw	0
 20526  284B  00AA               	movwf	(?___fltol+2)^(0+128)
 20527  284C  3000               	movlw	0
 20528  284D  00A9               	movwf	(?___fltol+1)^(0+128)
 20529  284E  3000               	movlw	0
 20530  284F  00A8               	movwf	?___fltol^(0+128)
 20531  2850  0008               	return
 20532  2851                     l7509:	
 20533  2851  0828               	movf	___fltol@f1^(0+128),w
 20534  2852  00AC               	movwf	??___fltol^(0+128)
 20535  2853  0829               	movf	(___fltol@f1+1)^(0+128),w
 20536  2854  00AD               	movwf	(??___fltol^(0+128)+1)
 20537  2855  082A               	movf	(___fltol@f1+2)^(0+128),w
 20538  2856  00AE               	movwf	(??___fltol^(0+128)+2)
 20539  2857  082B               	movf	(___fltol@f1+3)^(0+128),w
 20540  2858  00AF               	movwf	(??___fltol^(0+128)+3)
 20541  2859  301F               	movlw	31
 20542  285A                     u8315:	
 20543  285A  36AF               	lsrf	(??___fltol^(0+128)+3),f
 20544  285B  0CAE               	rrf	(??___fltol^(0+128)+2),f
 20545  285C  0CAD               	rrf	(??___fltol^(0+128)+1),f
 20546  285D  0CAC               	rrf	??___fltol^(0+128),f
 20547  285E  0B89               	decfsz	9,f
 20548  285F  285A               	goto	u8315
 20549  2860  082C               	movf	??___fltol^(0+128),w
 20550  2861  00B0               	movwf	(??___fltol+4)^(0+128)
 20551  2862  0830               	movf	(??___fltol+4)^(0+128),w
 20552  2863  00B1               	movwf	___fltol@sign1^(0+128)
 20553  2864  17AA               	bsf	(___fltol@f1^(0+128)+2),7
 20554  2865  30FF               	movlw	255
 20555  2866  05A8               	andwf	___fltol@f1^(0+128),f
 20556  2867  30FF               	movlw	255
 20557  2868  05A9               	andwf	(___fltol@f1+1)^(0+128),f
 20558  2869  30FF               	movlw	255
 20559  286A  05AA               	andwf	(___fltol@f1+2)^(0+128),f
 20560  286B  3000               	movlw	0
 20561  286C  05AB               	andwf	(___fltol@f1+3)^(0+128),f
 20562  286D  3096               	movlw	150
 20563  286E  02B2               	subwf	___fltol@exp1^(0+128),f
 20564  286F  1FB2               	btfss	___fltol@exp1^(0+128),7
 20565  2870  2884               	goto	l7527
 20566  2871  0832               	movf	___fltol@exp1^(0+128),w
 20567  2872  3A80               	xorlw	128
 20568  2873  3E97               	addlw	151
 20569  2874  1C03               	btfss	3,0
 20570  2875  2848               	goto	l7505
 20571  2876                     l7525:	
 20572  2876  3001               	movlw	1
 20573  2877                     u8345:	
 20574  2877  36AB               	lsrf	(___fltol@f1+3)^(0+128),f
 20575  2878  0CAA               	rrf	(___fltol@f1+2)^(0+128),f
 20576  2879  0CA9               	rrf	(___fltol@f1+1)^(0+128),f
 20577  287A  0CA8               	rrf	___fltol@f1^(0+128),f
 20578  287B  0B89               	decfsz	9,f
 20579  287C  2877               	goto	u8345
 20580  287D  3001               	movlw	1
 20581  287E  00AC               	movwf	??___fltol^(0+128)
 20582  287F  082C               	movf	??___fltol^(0+128),w
 20583  2880  07B2               	addwf	___fltol@exp1^(0+128),f
 20584  2881  1903               	btfsc	3,2
 20585  2882  2895               	goto	l7535
 20586  2883  2876               	goto	l7525
 20587  2884                     l7527:	
 20588  2884  3020               	movlw	32
 20589  2885  0232               	subwf	___fltol@exp1^(0+128),w
 20590  2886  1803               	btfsc	3,0
 20591  2887  2848               	goto	l7505
 20592  2888                     l1318:	
 20593  2888  0832               	movf	___fltol@exp1^(0+128),w
 20594  2889  1903               	btfsc	3,2
 20595  288A  2895               	goto	l7535
 20596  288B  3001               	movlw	1
 20597  288C                     u8375:	
 20598  288C  35A8               	lslf	___fltol@f1^(0+128),f
 20599  288D  0DA9               	rlf	(___fltol@f1+1)^(0+128),f
 20600  288E  0DAA               	rlf	(___fltol@f1+2)^(0+128),f
 20601  288F  0DAB               	rlf	(___fltol@f1+3)^(0+128),f
 20602  2890  0B89               	decfsz	9,f
 20603  2891  288C               	goto	u8375
 20604  2892  3001               	movlw	1
 20605  2893  02B2               	subwf	___fltol@exp1^(0+128),f
 20606  2894  2888               	goto	l1318
 20607  2895                     l7535:	
 20608  2895  0831               	movf	___fltol@sign1^(0+128),w
 20609  2896  1903               	btfsc	3,2
 20610  2897  0008               	return
 20611  2898  09A8               	comf	___fltol@f1^(0+128),f
 20612  2899  09A9               	comf	(___fltol@f1+1)^(0+128),f
 20613  289A  09AA               	comf	(___fltol@f1+2)^(0+128),f
 20614  289B  09AB               	comf	(___fltol@f1+3)^(0+128),f
 20615  289C  0AA8               	incf	___fltol@f1^(0+128),f
 20616  289D  1903               	skipnz
 20617  289E  0AA9               	incf	(___fltol@f1+1)^(0+128),f
 20618  289F  1903               	skipnz
 20619  28A0  0AAA               	incf	(___fltol@f1+2)^(0+128),f
 20620  28A1  1903               	skipnz
 20621  28A2  0AAB               	incf	(___fltol@f1+3)^(0+128),f
 20622  28A3  0008               	return
 20623  28A4                     __end_of___fltol:	
 20624                           
 20625                           	psect	text53
 20626  32E5                     __ptext53:	
 20627 ;; *************** function _memcpy *****************
 20628 ;; Defined at:
 20629 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 20630 ;; Parameters:    Size  Location     Type
 20631 ;;  d1              1    wreg     PTR void 
 20632 ;;		 -> qsort@xbuf(60), 
 20633 ;;  s1              1   13[BANK0 ] PTR const void 
 20634 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20635 ;;  n               2   14[BANK0 ] unsigned int 
 20636 ;; Auto vars:     Size  Location     Type
 20637 ;;  d1              1   18[BANK0 ] PTR void 
 20638 ;;		 -> qsort@xbuf(60), 
 20639 ;;  s               1   20[BANK0 ] PTR const unsigned char 
 20640 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20641 ;;  d               1   19[BANK0 ] PTR unsigned char 
 20642 ;;		 -> qsort@xbuf(60), 
 20643 ;;  tmp             1   17[BANK0 ] unsigned char 
 20644 ;; Return value:  Size  Location     Type
 20645 ;;                  1    wreg      PTR void 
 20646 ;; Registers used:
 20647 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20648 ;; Tracked objects:
 20649 ;;		On entry : 0/0
 20650 ;;		On exit  : 0/0
 20651 ;;		Unchanged: 0/0
 20652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20653 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20654 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20655 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20656 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20657 ;;Total ram usage:        8 bytes
 20658 ;; Hardware stack levels used:    1
 20659 ;; Hardware stack levels required when called:    3
 20660 ;; This function calls:
 20661 ;;		Nothing
 20662 ;; This function is called by:
 20663 ;;		_qsort
 20664 ;; This function uses a non-reentrant model
 20665 ;;
 20666                           
 20667                           
 20668                           ;psect for function _memcpy
 20669  32E5                     _memcpy:	
 20670                           
 20671                           ;incstack = 0
 20672                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 20673                           ;memcpy@d1 stored from wreg
 20674  32E5  0140               	movlb	0	; select bank0
 20675  32E6  00B2               	movwf	memcpy@d1
 20676  32E7  082D               	movf	memcpy@s1,w
 20677  32E8  00B0               	movwf	??_memcpy
 20678  32E9  0830               	movf	??_memcpy,w
 20679  32EA  00B4               	movwf	memcpy@s
 20680  32EB  0832               	movf	memcpy@d1,w
 20681  32EC  00B0               	movwf	??_memcpy
 20682  32ED  0830               	movf	??_memcpy,w
 20683  32EE  00B3               	movwf	memcpy@d
 20684  32EF                     l1616:	
 20685  32EF  3001               	movlw	1
 20686  32F0  02AE               	subwf	memcpy@n,f
 20687  32F1  3000               	movlw	0
 20688  32F2  3BAF               	subwfb	memcpy@n+1,f
 20689  32F3  0A2E               	incf	memcpy@n,w
 20690  32F4  1903               	btfsc	3,2
 20691  32F5  0A2F               	incf	memcpy@n+1,w
 20692  32F6  1903               	btfsc	3,2
 20693  32F7  0008               	return
 20694  32F8  0834               	movf	memcpy@s,w
 20695  32F9  0086               	movwf	6
 20696  32FA  3002               	movlw	2	; select bank4/5
 20697  32FB  0087               	movwf	7
 20698  32FC  0801               	movf	1,w
 20699  32FD  00B0               	movwf	??_memcpy
 20700  32FE  0830               	movf	??_memcpy,w
 20701  32FF  00B1               	movwf	memcpy@tmp
 20702  3300  3001               	movlw	1
 20703  3301  00B0               	movwf	??_memcpy
 20704  3302  0830               	movf	??_memcpy,w
 20705  3303  07B4               	addwf	memcpy@s,f
 20706  3304  0831               	movf	memcpy@tmp,w
 20707  3305  00B0               	movwf	??_memcpy
 20708  3306  0833               	movf	memcpy@d,w
 20709  3307  0086               	movwf	6
 20710  3308  3001               	movlw	1	; select bank2/3
 20711  3309  0087               	movwf	7
 20712  330A  0830               	movf	??_memcpy,w
 20713  330B  0081               	movwf	1
 20714  330C  3001               	movlw	1
 20715  330D  00B0               	movwf	??_memcpy
 20716  330E  0830               	movf	??_memcpy,w
 20717  330F  07B3               	addwf	memcpy@d,f
 20718  3310  2AEF               	goto	l1616
 20719  3311                     __end_of_memcpy:	
 20720                           
 20721                           	psect	text54
 20722  2001                     __ptext54:	
 20723 ;; *************** function ___awdiv *****************
 20724 ;; Defined at:
 20725 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 20726 ;; Parameters:    Size  Location     Type
 20727 ;;  divisor         2    0[BANK0 ] int 
 20728 ;;  dividend        2    2[BANK0 ] int 
 20729 ;; Auto vars:     Size  Location     Type
 20730 ;;  quotient        2    7[BANK0 ] int 
 20731 ;;  sign            1    6[BANK0 ] unsigned char 
 20732 ;;  counter         1    5[BANK0 ] unsigned char 
 20733 ;; Return value:  Size  Location     Type
 20734 ;;                  2    0[BANK0 ] int 
 20735 ;; Registers used:
 20736 ;;		wreg, status,2, status,0
 20737 ;; Tracked objects:
 20738 ;;		On entry : 0/0
 20739 ;;		On exit  : 0/0
 20740 ;;		Unchanged: 0/0
 20741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20742 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20743 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20744 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20745 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20746 ;;Total ram usage:        9 bytes
 20747 ;; Hardware stack levels used:    1
 20748 ;; Hardware stack levels required when called:    3
 20749 ;; This function calls:
 20750 ;;		Nothing
 20751 ;; This function is called by:
 20752 ;;		_itoa
 20753 ;;		_qsort
 20754 ;; This function uses a non-reentrant model
 20755 ;;
 20756                           
 20757                           
 20758                           ;psect for function ___awdiv
 20759  2001                     ___awdiv:	
 20760                           
 20761                           ;incstack = 0
 20762                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20763  2001  0140               	movlb	0	; select bank0
 20764  2002  01A6               	clrf	___awdiv@sign
 20765  2003  1FA1               	btfss	___awdiv@divisor+1,7
 20766  2004  280C               	goto	l7409
 20767  2005  09A0               	comf	___awdiv@divisor,f
 20768  2006  09A1               	comf	___awdiv@divisor+1,f
 20769  2007  0AA0               	incf	___awdiv@divisor,f
 20770  2008  1903               	skipnz
 20771  2009  0AA1               	incf	___awdiv@divisor+1,f
 20772  200A  01A6               	clrf	___awdiv@sign
 20773  200B  0AA6               	incf	___awdiv@sign,f
 20774  200C                     l7409:	
 20775  200C  1FA3               	btfss	___awdiv@dividend+1,7
 20776  200D  2817               	goto	l7415
 20777  200E  09A2               	comf	___awdiv@dividend,f
 20778  200F  09A3               	comf	___awdiv@dividend+1,f
 20779  2010  0AA2               	incf	___awdiv@dividend,f
 20780  2011  1903               	skipnz
 20781  2012  0AA3               	incf	___awdiv@dividend+1,f
 20782  2013  3001               	movlw	1
 20783  2014  00A4               	movwf	??___awdiv
 20784  2015  0824               	movf	??___awdiv,w
 20785  2016  06A6               	xorwf	___awdiv@sign,f
 20786  2017                     l7415:	
 20787  2017  01A7               	clrf	___awdiv@quotient
 20788  2018  01A8               	clrf	___awdiv@quotient+1
 20789  2019  0820               	movf	___awdiv@divisor,w
 20790  201A  0421               	iorwf	___awdiv@divisor+1,w
 20791  201B  1903               	btfsc	3,2
 20792  201C  2846               	goto	l7437
 20793  201D  01A5               	clrf	___awdiv@counter
 20794  201E  0AA5               	incf	___awdiv@counter,f
 20795  201F                     l7425:	
 20796  201F  1BA1               	btfsc	___awdiv@divisor+1,7
 20797  2020  282B               	goto	l7427
 20798  2021  3001               	movlw	1
 20799  2022                     u8095:	
 20800  2022  35A0               	lslf	___awdiv@divisor,f
 20801  2023  0DA1               	rlf	___awdiv@divisor+1,f
 20802  2024  0B89               	decfsz	9,f
 20803  2025  2822               	goto	u8095
 20804  2026  3001               	movlw	1
 20805  2027  00A4               	movwf	??___awdiv
 20806  2028  0824               	movf	??___awdiv,w
 20807  2029  07A5               	addwf	___awdiv@counter,f
 20808  202A  281F               	goto	l7425
 20809  202B                     l7427:	
 20810  202B  3001               	movlw	1
 20811  202C                     u8115:	
 20812  202C  35A7               	lslf	___awdiv@quotient,f
 20813  202D  0DA8               	rlf	___awdiv@quotient+1,f
 20814  202E  0B89               	decfsz	9,f
 20815  202F  282C               	goto	u8115
 20816  2030  0821               	movf	___awdiv@divisor+1,w
 20817  2031  0223               	subwf	___awdiv@dividend+1,w
 20818  2032  1D03               	skipz
 20819  2033  2836               	goto	u8125
 20820  2034  0820               	movf	___awdiv@divisor,w
 20821  2035  0222               	subwf	___awdiv@dividend,w
 20822  2036                     u8125:	
 20823  2036  1C03               	skipc
 20824  2037  283D               	goto	l7433
 20825  2038  0820               	movf	___awdiv@divisor,w
 20826  2039  02A2               	subwf	___awdiv@dividend,f
 20827  203A  0821               	movf	___awdiv@divisor+1,w
 20828  203B  3BA3               	subwfb	___awdiv@dividend+1,f
 20829  203C  1427               	bsf	___awdiv@quotient,0
 20830  203D                     l7433:	
 20831  203D  3001               	movlw	1
 20832  203E                     u8135:	
 20833  203E  36A1               	lsrf	___awdiv@divisor+1,f
 20834  203F  0CA0               	rrf	___awdiv@divisor,f
 20835  2040  0B89               	decfsz	9,f
 20836  2041  283E               	goto	u8135
 20837  2042  3001               	movlw	1
 20838  2043  02A5               	subwf	___awdiv@counter,f
 20839  2044  1D03               	btfss	3,2
 20840  2045  282B               	goto	l7427
 20841  2046                     l7437:	
 20842  2046  0826               	movf	___awdiv@sign,w
 20843  2047  1903               	btfsc	3,2
 20844  2048  284E               	goto	l7441
 20845  2049  09A7               	comf	___awdiv@quotient,f
 20846  204A  09A8               	comf	___awdiv@quotient+1,f
 20847  204B  0AA7               	incf	___awdiv@quotient,f
 20848  204C  1903               	skipnz
 20849  204D  0AA8               	incf	___awdiv@quotient+1,f
 20850  204E                     l7441:	
 20851  204E  0828               	movf	___awdiv@quotient+1,w
 20852  204F  00A1               	movwf	?___awdiv+1
 20853  2050  0827               	movf	___awdiv@quotient,w
 20854  2051  00A0               	movwf	?___awdiv
 20855  2052  0008               	return
 20856  2053                     __end_of___awdiv:	
 20857                           
 20858                           	psect	text55
 20859  2C0F                     __ptext55:	
 20860 ;; *************** function ___xxtofl *****************
 20861 ;; Defined at:
 20862 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 20863 ;; Parameters:    Size  Location     Type
 20864 ;;  sign            1    wreg     unsigned char 
 20865 ;;  val             4   19[BANK0 ] long 
 20866 ;; Auto vars:     Size  Location     Type
 20867 ;;  sign            1   27[BANK0 ] unsigned char 
 20868 ;;  arg             4   29[BANK0 ] unsigned long 
 20869 ;;  exp             1   28[BANK0 ] unsigned char 
 20870 ;; Return value:  Size  Location     Type
 20871 ;;                  4   19[BANK0 ] unsigned char 
 20872 ;; Registers used:
 20873 ;;		wreg, status,2, status,0
 20874 ;; Tracked objects:
 20875 ;;		On entry : 0/0
 20876 ;;		On exit  : 0/0
 20877 ;;		Unchanged: 0/0
 20878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20879 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20880 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20881 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20882 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20883 ;;Total ram usage:       14 bytes
 20884 ;; Hardware stack levels used:    1
 20885 ;; Hardware stack levels required when called:    3
 20886 ;; This function calls:
 20887 ;;		Nothing
 20888 ;; This function is called by:
 20889 ;;		_checkChannelStatus
 20890 ;;		_systemCheck
 20891 ;;		_getAnalogValues
 20892 ;;		_channelThing
 20893 ;;		_ftoa
 20894 ;; This function uses a non-reentrant model
 20895 ;;
 20896                           
 20897                           
 20898                           ;psect for function ___xxtofl
 20899  2C0F                     ___xxtofl:	
 20900                           
 20901                           ;incstack = 0
 20902                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 20903                           ;___xxtofl@sign stored from wreg
 20904  2C0F  0140               	movlb	0	; select bank0
 20905  2C10  00BB               	movwf	___xxtofl@sign
 20906  2C11  083B               	movf	___xxtofl@sign,w
 20907  2C12  1D03               	btfss	3,2
 20908  2C13  1FB6               	btfss	___xxtofl@val+3,7
 20909  2C14  2C25               	goto	l7831
 20910  2C15  0933               	comf	___xxtofl@val,w
 20911  2C16  00BD               	movwf	___xxtofl@arg
 20912  2C17  0934               	comf	___xxtofl@val+1,w
 20913  2C18  00BE               	movwf	___xxtofl@arg+1
 20914  2C19  0935               	comf	___xxtofl@val+2,w
 20915  2C1A  00BF               	movwf	___xxtofl@arg+2
 20916  2C1B  0936               	comf	___xxtofl@val+3,w
 20917  2C1C  00C0               	movwf	___xxtofl@arg+3
 20918  2C1D  0ABD               	incf	___xxtofl@arg,f
 20919  2C1E  1903               	skipnz
 20920  2C1F  0ABE               	incf	___xxtofl@arg+1,f
 20921  2C20  1903               	skipnz
 20922  2C21  0ABF               	incf	___xxtofl@arg+2,f
 20923  2C22  1903               	skipnz
 20924  2C23  0AC0               	incf	___xxtofl@arg+3,f
 20925  2C24  2C2D               	goto	l1552
 20926  2C25                     l7831:	
 20927  2C25  0836               	movf	___xxtofl@val+3,w
 20928  2C26  00C0               	movwf	___xxtofl@arg+3
 20929  2C27  0835               	movf	___xxtofl@val+2,w
 20930  2C28  00BF               	movwf	___xxtofl@arg+2
 20931  2C29  0834               	movf	___xxtofl@val+1,w
 20932  2C2A  00BE               	movwf	___xxtofl@arg+1
 20933  2C2B  0833               	movf	___xxtofl@val,w
 20934  2C2C  00BD               	movwf	___xxtofl@arg
 20935  2C2D                     l1552:	
 20936  2C2D  0836               	movf	___xxtofl@val+3,w
 20937  2C2E  0435               	iorwf	___xxtofl@val+2,w
 20938  2C2F  0434               	iorwf	___xxtofl@val+1,w
 20939  2C30  0433               	iorwf	___xxtofl@val,w
 20940  2C31  1D03               	skipz
 20941  2C32  2C3C               	goto	l7837
 20942  2C33  3000               	movlw	0
 20943  2C34  00B6               	movwf	?___xxtofl+3
 20944  2C35  3000               	movlw	0
 20945  2C36  00B5               	movwf	?___xxtofl+2
 20946  2C37  3000               	movlw	0
 20947  2C38  00B4               	movwf	?___xxtofl+1
 20948  2C39  3000               	movlw	0
 20949  2C3A  00B3               	movwf	?___xxtofl
 20950  2C3B  0008               	return
 20951  2C3C                     l7837:	
 20952  2C3C  3096               	movlw	150
 20953  2C3D  00B7               	movwf	??___xxtofl
 20954  2C3E  0837               	movf	??___xxtofl,w
 20955  2C3F  00BC               	movwf	___xxtofl@exp
 20956  2C40                     l7841:	
 20957  2C40  30FE               	movlw	254
 20958  2C41  0540               	andwf	___xxtofl@arg+3,w
 20959  2C42  1903               	btfsc	3,2
 20960  2C43  2C63               	goto	l1558
 20961  2C44  3001               	movlw	1
 20962  2C45  00B7               	movwf	??___xxtofl
 20963  2C46  0837               	movf	??___xxtofl,w
 20964  2C47  07BC               	addwf	___xxtofl@exp,f
 20965  2C48  3001               	movlw	1
 20966  2C49                     u8985:	
 20967  2C49  36C0               	lsrf	___xxtofl@arg+3,f
 20968  2C4A  0CBF               	rrf	___xxtofl@arg+2,f
 20969  2C4B  0CBE               	rrf	___xxtofl@arg+1,f
 20970  2C4C  0CBD               	rrf	___xxtofl@arg,f
 20971  2C4D  0B89               	decfsz	9,f
 20972  2C4E  2C49               	goto	u8985
 20973  2C4F  2C40               	goto	l7841
 20974  2C50                     l7843:	
 20975  2C50  3001               	movlw	1
 20976  2C51  00B7               	movwf	??___xxtofl
 20977  2C52  0837               	movf	??___xxtofl,w
 20978  2C53  07BC               	addwf	___xxtofl@exp,f
 20979  2C54  3001               	movlw	1
 20980  2C55  07BD               	addwf	___xxtofl@arg,f
 20981  2C56  3000               	movlw	0
 20982  2C57  3DBE               	addwfc	___xxtofl@arg+1,f
 20983  2C58  3000               	movlw	0
 20984  2C59  3DBF               	addwfc	___xxtofl@arg+2,f
 20985  2C5A  3000               	movlw	0
 20986  2C5B  3DC0               	addwfc	___xxtofl@arg+3,f
 20987  2C5C  3001               	movlw	1
 20988  2C5D                     u9005:	
 20989  2C5D  36C0               	lsrf	___xxtofl@arg+3,f
 20990  2C5E  0CBF               	rrf	___xxtofl@arg+2,f
 20991  2C5F  0CBE               	rrf	___xxtofl@arg+1,f
 20992  2C60  0CBD               	rrf	___xxtofl@arg,f
 20993  2C61  0B89               	decfsz	9,f
 20994  2C62  2C5D               	goto	u9005
 20995  2C63                     l1558:	
 20996  2C63  30FF               	movlw	255
 20997  2C64  0540               	andwf	___xxtofl@arg+3,w
 20998  2C65  1903               	btfsc	3,2
 20999  2C66  2C75               	goto	l7851
 21000  2C67  2C50               	goto	l7843
 21001  2C68                     l7853:	
 21002  2C68  3002               	movlw	2
 21003  2C69  023C               	subwf	___xxtofl@exp,w
 21004  2C6A  1C03               	btfss	3,0
 21005  2C6B  2C77               	goto	l1565
 21006  2C6C  3001               	movlw	1
 21007  2C6D  02BC               	subwf	___xxtofl@exp,f
 21008  2C6E  3001               	movlw	1
 21009  2C6F                     u9025:	
 21010  2C6F  35BD               	lslf	___xxtofl@arg,f
 21011  2C70  0DBE               	rlf	___xxtofl@arg+1,f
 21012  2C71  0DBF               	rlf	___xxtofl@arg+2,f
 21013  2C72  0DC0               	rlf	___xxtofl@arg+3,f
 21014  2C73  0B89               	decfsz	9,f
 21015  2C74  2C6F               	goto	u9025
 21016  2C75                     l7851:	
 21017  2C75  1FBF               	btfss	___xxtofl@arg+2,7
 21018  2C76  2C68               	goto	l7853
 21019  2C77                     l1565:	
 21020  2C77  183C               	btfsc	___xxtofl@exp,0
 21021  2C78  2C81               	goto	l1566
 21022  2C79  30FF               	movlw	255
 21023  2C7A  05BD               	andwf	___xxtofl@arg,f
 21024  2C7B  30FF               	movlw	255
 21025  2C7C  05BE               	andwf	___xxtofl@arg+1,f
 21026  2C7D  307F               	movlw	127
 21027  2C7E  05BF               	andwf	___xxtofl@arg+2,f
 21028  2C7F  30FF               	movlw	255
 21029  2C80  05C0               	andwf	___xxtofl@arg+3,f
 21030  2C81                     l1566:	
 21031  2C81  1003               	clrc
 21032  2C82  0CBC               	rrf	___xxtofl@exp,f
 21033  2C83  083C               	movf	___xxtofl@exp,w
 21034  2C84  00B7               	movwf	??___xxtofl
 21035  2C85  01B8               	clrf	??___xxtofl+1
 21036  2C86  01B9               	clrf	??___xxtofl+2
 21037  2C87  01BA               	clrf	??___xxtofl+3
 21038  2C88  3018               	movlw	24
 21039  2C89                     u9065:	
 21040  2C89  35B7               	lslf	??___xxtofl,f
 21041  2C8A  0DB8               	rlf	??___xxtofl+1,f
 21042  2C8B  0DB9               	rlf	??___xxtofl+2,f
 21043  2C8C  0DBA               	rlf	??___xxtofl+3,f
 21044  2C8D  0B89               	decfsz	9,f
 21045  2C8E  2C89               	goto	u9065
 21046  2C8F  0837               	movf	??___xxtofl,w
 21047  2C90  04BD               	iorwf	___xxtofl@arg,f
 21048  2C91  0838               	movf	??___xxtofl+1,w
 21049  2C92  04BE               	iorwf	___xxtofl@arg+1,f
 21050  2C93  0839               	movf	??___xxtofl+2,w
 21051  2C94  04BF               	iorwf	___xxtofl@arg+2,f
 21052  2C95  083A               	movf	??___xxtofl+3,w
 21053  2C96  04C0               	iorwf	___xxtofl@arg+3,f
 21054  2C97  083B               	movf	___xxtofl@sign,w
 21055  2C98  1D03               	btfss	3,2
 21056  2C99  1FB6               	btfss	___xxtofl@val+3,7
 21057  2C9A  2C9C               	goto	l7865
 21058  2C9B  17C0               	bsf	___xxtofl@arg+3,7
 21059  2C9C                     l7865:	
 21060  2C9C  0840               	movf	___xxtofl@arg+3,w
 21061  2C9D  00B6               	movwf	?___xxtofl+3
 21062  2C9E  083F               	movf	___xxtofl@arg+2,w
 21063  2C9F  00B5               	movwf	?___xxtofl+2
 21064  2CA0  083E               	movf	___xxtofl@arg+1,w
 21065  2CA1  00B4               	movwf	?___xxtofl+1
 21066  2CA2  083D               	movf	___xxtofl@arg,w
 21067  2CA3  00B3               	movwf	?___xxtofl
 21068  2CA4  0008               	return
 21069  2CA5                     __end_of___xxtofl:	
 21070                           
 21071                           	psect	text56
 21072  2A06                     __ptext56:	
 21073 ;; *************** function ___flge *****************
 21074 ;; Defined at:
 21075 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 21076 ;; Parameters:    Size  Location     Type
 21077 ;;  ff1             4   13[BANK1 ] unsigned char 
 21078 ;;  ff2             4   17[BANK1 ] unsigned char 
 21079 ;; Auto vars:     Size  Location     Type
 21080 ;;		None
 21081 ;; Return value:  Size  Location     Type
 21082 ;;		None               void
 21083 ;; Registers used:
 21084 ;;		wreg, status,2, status,0
 21085 ;; Tracked objects:
 21086 ;;		On entry : 0/0
 21087 ;;		On exit  : 0/0
 21088 ;;		Unchanged: 0/0
 21089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21090 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21092 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21093 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21094 ;;Total ram usage:       12 bytes
 21095 ;; Hardware stack levels used:    1
 21096 ;; Hardware stack levels required when called:    3
 21097 ;; This function calls:
 21098 ;;		Nothing
 21099 ;; This function is called by:
 21100 ;;		_spinInput
 21101 ;;		_channelSetup
 21102 ;;		_setOutputPower
 21103 ;;		_checkChannelStatus
 21104 ;;		_systemCheck
 21105 ;;		_checkSensor
 21106 ;;		_channelThing
 21107 ;;		_ftoa
 21108 ;; This function uses a non-reentrant model
 21109 ;;
 21110                           
 21111                           
 21112                           ;psect for function ___flge
 21113  2A06                     ___flge:	
 21114                           
 21115                           ;incstack = 0
 21116                           ; Regs used in ___flge: [wreg+status,2+status,0]
 21117  2A06  3000               	movlw	0
 21118  2A07  0141               	movlb	1	; select bank1
 21119  2A08  052D               	andwf	___flge@ff1^(0+128),w
 21120  2A09  00B5               	movwf	??___flge^(0+128)
 21121  2A0A  3000               	movlw	0
 21122  2A0B  052E               	andwf	(___flge@ff1+1)^(0+128),w
 21123  2A0C  00B6               	movwf	(??___flge^(0+128)+1)
 21124  2A0D  3080               	movlw	128
 21125  2A0E  052F               	andwf	(___flge@ff1+2)^(0+128),w
 21126  2A0F  00B7               	movwf	(??___flge^(0+128)+2)
 21127  2A10  307F               	movlw	127
 21128  2A11  0530               	andwf	(___flge@ff1+3)^(0+128),w
 21129  2A12  00B8               	movwf	(??___flge^(0+128)+3)
 21130  2A13  0838               	movf	(??___flge+3)^(0+128),w
 21131  2A14  0437               	iorwf	(??___flge+2)^(0+128),w
 21132  2A15  0436               	iorwf	(??___flge+1)^(0+128),w
 21133  2A16  0435               	iorwf	??___flge^(0+128),w
 21134  2A17  1D03               	skipz
 21135  2A18  2A21               	goto	l1295
 21136  2A19  3000               	movlw	0
 21137  2A1A  00B0               	movwf	(___flge@ff1+3)^(0+128)
 21138  2A1B  3000               	movlw	0
 21139  2A1C  00AF               	movwf	(___flge@ff1+2)^(0+128)
 21140  2A1D  3000               	movlw	0
 21141  2A1E  00AE               	movwf	(___flge@ff1+1)^(0+128)
 21142  2A1F  3000               	movlw	0
 21143  2A20  00AD               	movwf	___flge@ff1^(0+128)
 21144  2A21                     l1295:	
 21145  2A21  3000               	movlw	0
 21146  2A22  0531               	andwf	___flge@ff2^(0+128),w
 21147  2A23  00B5               	movwf	??___flge^(0+128)
 21148  2A24  3000               	movlw	0
 21149  2A25  0532               	andwf	(___flge@ff2+1)^(0+128),w
 21150  2A26  00B6               	movwf	(??___flge^(0+128)+1)
 21151  2A27  3080               	movlw	128
 21152  2A28  0533               	andwf	(___flge@ff2+2)^(0+128),w
 21153  2A29  00B7               	movwf	(??___flge^(0+128)+2)
 21154  2A2A  307F               	movlw	127
 21155  2A2B  0534               	andwf	(___flge@ff2+3)^(0+128),w
 21156  2A2C  00B8               	movwf	(??___flge^(0+128)+3)
 21157  2A2D  0838               	movf	(??___flge+3)^(0+128),w
 21158  2A2E  0437               	iorwf	(??___flge+2)^(0+128),w
 21159  2A2F  0436               	iorwf	(??___flge+1)^(0+128),w
 21160  2A30  0435               	iorwf	??___flge^(0+128),w
 21161  2A31  1D03               	skipz
 21162  2A32  2A3B               	goto	l7489
 21163  2A33  3000               	movlw	0
 21164  2A34  00B4               	movwf	(___flge@ff2+3)^(0+128)
 21165  2A35  3000               	movlw	0
 21166  2A36  00B3               	movwf	(___flge@ff2+2)^(0+128)
 21167  2A37  3000               	movlw	0
 21168  2A38  00B2               	movwf	(___flge@ff2+1)^(0+128)
 21169  2A39  3000               	movlw	0
 21170  2A3A  00B1               	movwf	___flge@ff2^(0+128)
 21171  2A3B                     l7489:	
 21172  2A3B  1FB0               	btfss	(___flge@ff1+3)^(0+128),7
 21173  2A3C  2A55               	goto	l7493
 21174  2A3D  3000               	movlw	0
 21175  2A3E  00B5               	movwf	??___flge^(0+128)
 21176  2A3F  3000               	movlw	0
 21177  2A40  00B6               	movwf	(??___flge^(0+128)+1)
 21178  2A41  3000               	movlw	0
 21179  2A42  00B7               	movwf	(??___flge^(0+128)+2)
 21180  2A43  3080               	movlw	128
 21181  2A44  00B8               	movwf	(??___flge^(0+128)+3)
 21182  2A45  082D               	movf	___flge@ff1^(0+128),w
 21183  2A46  02B5               	subwf	??___flge^(0+128),f
 21184  2A47  082E               	movf	(___flge@ff1+1)^(0+128),w
 21185  2A48  3BB6               	subwfb	(??___flge^(0+128)+1),f
 21186  2A49  082F               	movf	(___flge@ff1+2)^(0+128),w
 21187  2A4A  3BB7               	subwfb	(??___flge^(0+128)+2),f
 21188  2A4B  0830               	movf	(___flge@ff1+3)^(0+128),w
 21189  2A4C  3BB8               	subwfb	(??___flge^(0+128)+3),f
 21190  2A4D  0838               	movf	(??___flge+3)^(0+128),w
 21191  2A4E  00B0               	movwf	(___flge@ff1+3)^(0+128)
 21192  2A4F  0837               	movf	(??___flge+2)^(0+128),w
 21193  2A50  00AF               	movwf	(___flge@ff1+2)^(0+128)
 21194  2A51  0836               	movf	(??___flge+1)^(0+128),w
 21195  2A52  00AE               	movwf	(___flge@ff1+1)^(0+128)
 21196  2A53  0835               	movf	??___flge^(0+128),w
 21197  2A54  00AD               	movwf	___flge@ff1^(0+128)
 21198  2A55                     l7493:	
 21199  2A55  1FB4               	btfss	(___flge@ff2+3)^(0+128),7
 21200  2A56  2A6F               	goto	l1298
 21201  2A57  3000               	movlw	0
 21202  2A58  00B5               	movwf	??___flge^(0+128)
 21203  2A59  3000               	movlw	0
 21204  2A5A  00B6               	movwf	(??___flge^(0+128)+1)
 21205  2A5B  3000               	movlw	0
 21206  2A5C  00B7               	movwf	(??___flge^(0+128)+2)
 21207  2A5D  3080               	movlw	128
 21208  2A5E  00B8               	movwf	(??___flge^(0+128)+3)
 21209  2A5F  0831               	movf	___flge@ff2^(0+128),w
 21210  2A60  02B5               	subwf	??___flge^(0+128),f
 21211  2A61  0832               	movf	(___flge@ff2+1)^(0+128),w
 21212  2A62  3BB6               	subwfb	(??___flge^(0+128)+1),f
 21213  2A63  0833               	movf	(___flge@ff2+2)^(0+128),w
 21214  2A64  3BB7               	subwfb	(??___flge^(0+128)+2),f
 21215  2A65  0834               	movf	(___flge@ff2+3)^(0+128),w
 21216  2A66  3BB8               	subwfb	(??___flge^(0+128)+3),f
 21217  2A67  0838               	movf	(??___flge+3)^(0+128),w
 21218  2A68  00B4               	movwf	(___flge@ff2+3)^(0+128)
 21219  2A69  0837               	movf	(??___flge+2)^(0+128),w
 21220  2A6A  00B3               	movwf	(___flge@ff2+2)^(0+128)
 21221  2A6B  0836               	movf	(??___flge+1)^(0+128),w
 21222  2A6C  00B2               	movwf	(___flge@ff2+1)^(0+128)
 21223  2A6D  0835               	movf	??___flge^(0+128),w
 21224  2A6E  00B1               	movwf	___flge@ff2^(0+128)
 21225  2A6F                     l1298:	
 21226  2A6F  3080               	movlw	128
 21227  2A70  06B0               	xorwf	(___flge@ff1+3)^(0+128),f
 21228  2A71  3080               	movlw	128
 21229  2A72  06B4               	xorwf	(___flge@ff2+3)^(0+128),f
 21230  2A73  0834               	movf	(___flge@ff2+3)^(0+128),w
 21231  2A74  0230               	subwf	(___flge@ff1+3)^(0+128),w
 21232  2A75  1D03               	skipz
 21233  2A76  0008               	return
 21234  2A77  0833               	movf	(___flge@ff2+2)^(0+128),w
 21235  2A78  022F               	subwf	(___flge@ff1+2)^(0+128),w
 21236  2A79  1D03               	skipz
 21237  2A7A  0008               	return
 21238  2A7B  0832               	movf	(___flge@ff2+1)^(0+128),w
 21239  2A7C  022E               	subwf	(___flge@ff1+1)^(0+128),w
 21240  2A7D  1D03               	skipz
 21241  2A7E  0008               	return
 21242  2A7F  0831               	movf	___flge@ff2^(0+128),w
 21243  2A80  022D               	subwf	___flge@ff1^(0+128),w
 21244  2A81  0008               	return
 21245  2A82                     __end_of___flge:	
 21246                           
 21247                           	psect	text57
 21248  00D5                     __ptext57:	
 21249 ;; *************** function _calcRequiredPower *****************
 21250 ;; Defined at:
 21251 ;;		line 277 in file "system.c"
 21252 ;; Parameters:    Size  Location     Type
 21253 ;;		None
 21254 ;; Auto vars:     Size  Location     Type
 21255 ;;  T2              4   69[BANK1 ] float 
 21256 ;;  T1              4   65[BANK1 ] float 
 21257 ;;  A               4   57[BANK1 ] float 
 21258 ;;  phi             4   53[BANK1 ] float 
 21259 ;;  d               4   49[BANK1 ] float 
 21260 ;;  Rth             4   21[BANK1 ] float 
 21261 ;;  p               4   17[BANK1 ] float 
 21262 ;;  n               1   73[BANK1 ] unsigned char 
 21263 ;; Return value:  Size  Location     Type
 21264 ;;                  1    wreg      void 
 21265 ;; Registers used:
 21266 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21267 ;; Tracked objects:
 21268 ;;		On entry : 0/0
 21269 ;;		On exit  : 0/0
 21270 ;;		Unchanged: 0/0
 21271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21273 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21274 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21275 ;;      Totals:         0       0      61       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21276 ;;Total ram usage:       61 bytes
 21277 ;; Hardware stack levels used:    1
 21278 ;; Hardware stack levels required when called:    5
 21279 ;; This function calls:
 21280 ;;		___fladd
 21281 ;;		___fldiv
 21282 ;;		___flmul
 21283 ;;		___flsub
 21284 ;;		___wmul
 21285 ;; This function is called by:
 21286 ;;		_main
 21287 ;; This function uses a non-reentrant model
 21288 ;;
 21289                           
 21290                           
 21291                           ;psect for function _calcRequiredPower
 21292  00D5                     _calcRequiredPower:	
 21293                           
 21294                           ;system.c: 279:  uint8_t n;;system.c: 280:  float d, A, T1, T2, phi;;system.c: 281:  flo
      +                          at p, Rth;;system.c: 283:  for (n = 0; n < 4; n++) {
 21295                           
 21296                           ;incstack = 0
 21297                           ; Regs used in _calcRequiredPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21298  00D5  0141               	movlb	1	; select bank1
 21299  00D6  01E9               	clrf	calcRequiredPower@n^(0+128)
 21300  00D7                     l9067:	
 21301                           
 21302                           ;system.c: 293:   d = 0.0254 * data.heater[n].lensDia;
 21303  00D7  303C               	movlw	60
 21304  00D8  0140               	movlb	0	; select bank0
 21305  00D9  00C4               	movwf	___flmul@b+3
 21306  00DA  30D0               	movlw	208
 21307  00DB  00C3               	movwf	___flmul@b+2
 21308  00DC  3013               	movlw	19
 21309  00DD  00C2               	movwf	___flmul@b+1
 21310  00DE  30A9               	movlw	169
 21311  00DF  00C1               	movwf	___flmul@b
 21312  00E0  0141               	movlb	1	; select bank1
 21313  00E1  0869               	movf	calcRequiredPower@n^(0+128),w
 21314  00E2  00AD               	movwf	??_calcRequiredPower^(0+128)
 21315  00E3  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 21316  00E4  082D               	movf	??_calcRequiredPower^(0+128),w
 21317  00E5  0140               	movlb	0	; select bank0
 21318  00E6  00AD               	movwf	___wmul@multiplier
 21319  00E7  0141               	movlb	1	; select bank1
 21320  00E8  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 21321  00E9  0140               	movlb	0	; select bank0
 21322  00EA  00AE               	movwf	___wmul@multiplier+1
 21323  00EB  301F               	movlw	31
 21324  00EC  00AF               	movwf	___wmul@multiplicand
 21325  00ED  3000               	movlw	0
 21326  00EE  00B0               	movwf	___wmul@multiplicand+1
 21327  00EF  31B1  21DE  3180   	fcall	___wmul
 21328  00F2  3089               	movlw	137
 21329  00F3  0141               	movlb	1	; select bank1
 21330  00F4  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 21331  00F5  3027               	movlw	39
 21332  00F6  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 21333  00F7  0140               	movlb	0	; select bank0
 21334  00F8  082D               	movf	?___wmul,w
 21335  00F9  0141               	movlb	1	; select bank1
 21336  00FA  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 21337  00FB  0086               	movwf	6
 21338  00FC  0140               	movlb	0	; select bank0
 21339  00FD  082E               	movf	?___wmul+1,w
 21340  00FE  0141               	movlb	1	; select bank1
 21341  00FF  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21342  0100  0087               	movwf	7
 21343  0101  3F40               	moviw [0]fsr1
 21344  0102  0140               	movlb	0	; select bank0
 21345  0103  00C5               	movwf	___flmul@a
 21346  0104  3F41               	moviw [1]fsr1
 21347  0105  00C6               	movwf	___flmul@a+1
 21348  0106  3F42               	moviw [2]fsr1
 21349  0107  00C7               	movwf	___flmul@a+2
 21350  0108  3F43               	moviw [3]fsr1
 21351  0109  00C8               	movwf	___flmul@a+3
 21352  010A  3185  2561  3180   	fcall	___flmul
 21353  010D  0140               	movlb	0	; select bank0
 21354  010E  0844               	movf	?___flmul+3,w
 21355  010F  0141               	movlb	1	; select bank1
 21356  0110  00D4               	movwf	(calcRequiredPower@d+3)^(0+128)
 21357  0111  0140               	movlb	0	; select bank0
 21358  0112  0843               	movf	?___flmul+2,w
 21359  0113  0141               	movlb	1	; select bank1
 21360  0114  00D3               	movwf	(calcRequiredPower@d+2)^(0+128)
 21361  0115  0140               	movlb	0	; select bank0
 21362  0116  0842               	movf	?___flmul+1,w
 21363  0117  0141               	movlb	1	; select bank1
 21364  0118  00D2               	movwf	(calcRequiredPower@d+1)^(0+128)
 21365  0119  0140               	movlb	0	; select bank0
 21366  011A  0841               	movf	?___flmul,w
 21367  011B  0141               	movlb	1	; select bank1
 21368  011C  00D1               	movwf	calcRequiredPower@d^(0+128)
 21369                           
 21370                           ;system.c: 294:   A = (3.14 * d * d) / 4;
 21371  011D  3040               	movlw	64
 21372  011E  0140               	movlb	0	; select bank0
 21373  011F  00C4               	movwf	___flmul@b+3
 21374  0120  3048               	movlw	72
 21375  0121  00C3               	movwf	___flmul@b+2
 21376  0122  30F5               	movlw	245
 21377  0123  00C2               	movwf	___flmul@b+1
 21378  0124  30C3               	movlw	195
 21379  0125  00C1               	movwf	___flmul@b
 21380  0126  0141               	movlb	1	; select bank1
 21381  0127  0854               	movf	(calcRequiredPower@d+3)^(0+128),w
 21382  0128  0140               	movlb	0	; select bank0
 21383  0129  00C8               	movwf	___flmul@a+3
 21384  012A  0141               	movlb	1	; select bank1
 21385  012B  0853               	movf	(calcRequiredPower@d+2)^(0+128),w
 21386  012C  0140               	movlb	0	; select bank0
 21387  012D  00C7               	movwf	___flmul@a+2
 21388  012E  0141               	movlb	1	; select bank1
 21389  012F  0852               	movf	(calcRequiredPower@d+1)^(0+128),w
 21390  0130  0140               	movlb	0	; select bank0
 21391  0131  00C6               	movwf	___flmul@a+1
 21392  0132  0141               	movlb	1	; select bank1
 21393  0133  0851               	movf	calcRequiredPower@d^(0+128),w
 21394  0134  0140               	movlb	0	; select bank0
 21395  0135  00C5               	movwf	___flmul@a
 21396  0136  3185  2561  3180   	fcall	___flmul
 21397  0139  0140               	movlb	0	; select bank0
 21398  013A  0844               	movf	?___flmul+3,w
 21399  013B  0141               	movlb	1	; select bank1
 21400  013C  00E0               	movwf	(_calcRequiredPower$2777+3)^(0+128)
 21401  013D  0140               	movlb	0	; select bank0
 21402  013E  0843               	movf	?___flmul+2,w
 21403  013F  0141               	movlb	1	; select bank1
 21404  0140  00DF               	movwf	(_calcRequiredPower$2777+2)^(0+128)
 21405  0141  0140               	movlb	0	; select bank0
 21406  0142  0842               	movf	?___flmul+1,w
 21407  0143  0141               	movlb	1	; select bank1
 21408  0144  00DE               	movwf	(_calcRequiredPower$2777+1)^(0+128)
 21409  0145  0140               	movlb	0	; select bank0
 21410  0146  0841               	movf	?___flmul,w
 21411  0147  0141               	movlb	1	; select bank1
 21412  0148  00DD               	movwf	_calcRequiredPower$2777^(0+128)
 21413                           
 21414                           ;system.c: 294:   A = (3.14 * d * d) / 4;
 21415  0149  3040               	movlw	64
 21416  014A  0140               	movlb	0	; select bank0
 21417  014B  00DE               	movwf	___fldiv@a+3
 21418  014C  3080               	movlw	128
 21419  014D  00DD               	movwf	___fldiv@a+2
 21420  014E  3000               	movlw	0
 21421  014F  00DC               	movwf	___fldiv@a+1
 21422  0150  3000               	movlw	0
 21423  0151  00DB               	movwf	___fldiv@a
 21424  0152  0141               	movlb	1	; select bank1
 21425  0153  0854               	movf	(calcRequiredPower@d+3)^(0+128),w
 21426  0154  0140               	movlb	0	; select bank0
 21427  0155  00C4               	movwf	___flmul@b+3
 21428  0156  0141               	movlb	1	; select bank1
 21429  0157  0853               	movf	(calcRequiredPower@d+2)^(0+128),w
 21430  0158  0140               	movlb	0	; select bank0
 21431  0159  00C3               	movwf	___flmul@b+2
 21432  015A  0141               	movlb	1	; select bank1
 21433  015B  0852               	movf	(calcRequiredPower@d+1)^(0+128),w
 21434  015C  0140               	movlb	0	; select bank0
 21435  015D  00C2               	movwf	___flmul@b+1
 21436  015E  0141               	movlb	1	; select bank1
 21437  015F  0851               	movf	calcRequiredPower@d^(0+128),w
 21438  0160  0140               	movlb	0	; select bank0
 21439  0161  00C1               	movwf	___flmul@b
 21440  0162  0141               	movlb	1	; select bank1
 21441  0163  0860               	movf	(_calcRequiredPower$2777+3)^(0+128),w
 21442  0164  0140               	movlb	0	; select bank0
 21443  0165  00C8               	movwf	___flmul@a+3
 21444  0166  0141               	movlb	1	; select bank1
 21445  0167  085F               	movf	(_calcRequiredPower$2777+2)^(0+128),w
 21446  0168  0140               	movlb	0	; select bank0
 21447  0169  00C7               	movwf	___flmul@a+2
 21448  016A  0141               	movlb	1	; select bank1
 21449  016B  085E               	movf	(_calcRequiredPower$2777+1)^(0+128),w
 21450  016C  0140               	movlb	0	; select bank0
 21451  016D  00C6               	movwf	___flmul@a+1
 21452  016E  0141               	movlb	1	; select bank1
 21453  016F  085D               	movf	_calcRequiredPower$2777^(0+128),w
 21454  0170  0140               	movlb	0	; select bank0
 21455  0171  00C5               	movwf	___flmul@a
 21456  0172  3185  2561  3180   	fcall	___flmul
 21457  0175  0140               	movlb	0	; select bank0
 21458  0176  0844               	movf	?___flmul+3,w
 21459  0177  00E2               	movwf	___fldiv@b+3
 21460  0178  0843               	movf	?___flmul+2,w
 21461  0179  00E1               	movwf	___fldiv@b+2
 21462  017A  0842               	movf	?___flmul+1,w
 21463  017B  00E0               	movwf	___fldiv@b+1
 21464  017C  0841               	movf	?___flmul,w
 21465  017D  00DF               	movwf	___fldiv@b
 21466  017E  319E  2628  3180   	fcall	___fldiv
 21467  0181  0140               	movlb	0	; select bank0
 21468  0182  085E               	movf	?___fldiv+3,w
 21469  0183  0141               	movlb	1	; select bank1
 21470  0184  00DC               	movwf	(calcRequiredPower@A+3)^(0+128)
 21471  0185  0140               	movlb	0	; select bank0
 21472  0186  085D               	movf	?___fldiv+2,w
 21473  0187  0141               	movlb	1	; select bank1
 21474  0188  00DB               	movwf	(calcRequiredPower@A+2)^(0+128)
 21475  0189  0140               	movlb	0	; select bank0
 21476  018A  085C               	movf	?___fldiv+1,w
 21477  018B  0141               	movlb	1	; select bank1
 21478  018C  00DA               	movwf	(calcRequiredPower@A+1)^(0+128)
 21479  018D  0140               	movlb	0	; select bank0
 21480  018E  085B               	movf	?___fldiv,w
 21481  018F  0141               	movlb	1	; select bank1
 21482  0190  00D9               	movwf	calcRequiredPower@A^(0+128)
 21483                           
 21484                           ;system.c: 296:   T1 = data.dewPointC + data.dpOffset + 273.15;
 21485  0191  304A               	movlw	74
 21486  0192  0086               	movwf	6
 21487  0193  3027               	movlw	39
 21488  0194  0087               	movwf	7
 21489  0195  315D               	addfsr 1,29
 21490  0196  3F40               	moviw [0]fsr1
 21491  0197  0140               	movlb	0	; select bank0
 21492  0198  00DB               	movwf	___fladd@b
 21493  0199  3F41               	moviw [1]fsr1
 21494  019A  00DC               	movwf	___fladd@b+1
 21495  019B  3F42               	moviw [2]fsr1
 21496  019C  00DD               	movwf	___fladd@b+2
 21497  019D  3F43               	moviw [3]fsr1
 21498  019E  00DE               	movwf	___fladd@b+3
 21499  019F  304A               	movlw	74
 21500  01A0  0086               	movwf	6
 21501  01A1  3027               	movlw	39
 21502  01A2  0087               	movwf	7
 21503  01A3  3148               	addfsr 1,8
 21504  01A4  3F40               	moviw [0]fsr1
 21505  01A5  00DF               	movwf	___fladd@a
 21506  01A6  3F41               	moviw [1]fsr1
 21507  01A7  00E0               	movwf	___fladd@a+1
 21508  01A8  3F42               	moviw [2]fsr1
 21509  01A9  00E1               	movwf	___fladd@a+2
 21510  01AA  3F43               	moviw [3]fsr1
 21511  01AB  00E2               	movwf	___fladd@a+3
 21512  01AC  3192  2250  3180   	fcall	___fladd
 21513  01AF  0140               	movlb	0	; select bank0
 21514  01B0  085E               	movf	?___fladd+3,w
 21515  01B1  0141               	movlb	1	; select bank1
 21516  01B2  00BC               	movwf	(_calcRequiredPower$2778+3)^(0+128)
 21517  01B3  0140               	movlb	0	; select bank0
 21518  01B4  085D               	movf	?___fladd+2,w
 21519  01B5  0141               	movlb	1	; select bank1
 21520  01B6  00BB               	movwf	(_calcRequiredPower$2778+2)^(0+128)
 21521  01B7  0140               	movlb	0	; select bank0
 21522  01B8  085C               	movf	?___fladd+1,w
 21523  01B9  0141               	movlb	1	; select bank1
 21524  01BA  00BA               	movwf	(_calcRequiredPower$2778+1)^(0+128)
 21525  01BB  0140               	movlb	0	; select bank0
 21526  01BC  085B               	movf	?___fladd,w
 21527  01BD  0141               	movlb	1	; select bank1
 21528  01BE  00B9               	movwf	_calcRequiredPower$2778^(0+128)
 21529                           
 21530                           ;system.c: 296:   T1 = data.dewPointC + data.dpOffset + 273.15;
 21531  01BF  3043               	movlw	67
 21532  01C0  0140               	movlb	0	; select bank0
 21533  01C1  00DE               	movwf	___fladd@b+3
 21534  01C2  3088               	movlw	136
 21535  01C3  00DD               	movwf	___fladd@b+2
 21536  01C4  3093               	movlw	147
 21537  01C5  00DC               	movwf	___fladd@b+1
 21538  01C6  3033               	movlw	51
 21539  01C7  00DB               	movwf	___fladd@b
 21540  01C8  0141               	movlb	1	; select bank1
 21541  01C9  083C               	movf	(_calcRequiredPower$2778+3)^(0+128),w
 21542  01CA  0140               	movlb	0	; select bank0
 21543  01CB  00E2               	movwf	___fladd@a+3
 21544  01CC  0141               	movlb	1	; select bank1
 21545  01CD  083B               	movf	(_calcRequiredPower$2778+2)^(0+128),w
 21546  01CE  0140               	movlb	0	; select bank0
 21547  01CF  00E1               	movwf	___fladd@a+2
 21548  01D0  0141               	movlb	1	; select bank1
 21549  01D1  083A               	movf	(_calcRequiredPower$2778+1)^(0+128),w
 21550  01D2  0140               	movlb	0	; select bank0
 21551  01D3  00E0               	movwf	___fladd@a+1
 21552  01D4  0141               	movlb	1	; select bank1
 21553  01D5  0839               	movf	_calcRequiredPower$2778^(0+128),w
 21554  01D6  0140               	movlb	0	; select bank0
 21555  01D7  00DF               	movwf	___fladd@a
 21556  01D8  3192  2250  3180   	fcall	___fladd
 21557  01DB  0140               	movlb	0	; select bank0
 21558  01DC  085E               	movf	?___fladd+3,w
 21559  01DD  0141               	movlb	1	; select bank1
 21560  01DE  00E4               	movwf	(calcRequiredPower@T1+3)^(0+128)
 21561  01DF  0140               	movlb	0	; select bank0
 21562  01E0  085D               	movf	?___fladd+2,w
 21563  01E1  0141               	movlb	1	; select bank1
 21564  01E2  00E3               	movwf	(calcRequiredPower@T1+2)^(0+128)
 21565  01E3  0140               	movlb	0	; select bank0
 21566  01E4  085C               	movf	?___fladd+1,w
 21567  01E5  0141               	movlb	1	; select bank1
 21568  01E6  00E2               	movwf	(calcRequiredPower@T1+1)^(0+128)
 21569  01E7  0140               	movlb	0	; select bank0
 21570  01E8  085B               	movf	?___fladd,w
 21571  01E9  0141               	movlb	1	; select bank1
 21572  01EA  00E1               	movwf	calcRequiredPower@T1^(0+128)
 21573                           
 21574                           ;system.c: 297:   T2 = data.skyTemp + 273.15;
 21575  01EB  3043               	movlw	67
 21576  01EC  0140               	movlb	0	; select bank0
 21577  01ED  00DE               	movwf	___fladd@b+3
 21578  01EE  3088               	movlw	136
 21579  01EF  00DD               	movwf	___fladd@b+2
 21580  01F0  3093               	movlw	147
 21581  01F1  00DC               	movwf	___fladd@b+1
 21582  01F2  3033               	movlw	51
 21583  01F3  00DB               	movwf	___fladd@b
 21584  01F4  306B               	movlw	107
 21585  01F5  0086               	movwf	6
 21586  01F6  3027               	movlw	39
 21587  01F7  0087               	movwf	7
 21588  01F8  3F40               	moviw [0]fsr1
 21589  01F9  00DF               	movwf	___fladd@a
 21590  01FA  3F41               	moviw [1]fsr1
 21591  01FB  00E0               	movwf	___fladd@a+1
 21592  01FC  3F42               	moviw [2]fsr1
 21593  01FD  00E1               	movwf	___fladd@a+2
 21594  01FE  3F43               	moviw [3]fsr1
 21595  01FF  00E2               	movwf	___fladd@a+3
 21596  0200  3192  2250  3180   	fcall	___fladd
 21597  0203  0140               	movlb	0	; select bank0
 21598  0204  085E               	movf	?___fladd+3,w
 21599  0205  0141               	movlb	1	; select bank1
 21600  0206  00E8               	movwf	(calcRequiredPower@T2+3)^(0+128)
 21601  0207  0140               	movlb	0	; select bank0
 21602  0208  085D               	movf	?___fladd+2,w
 21603  0209  0141               	movlb	1	; select bank1
 21604  020A  00E7               	movwf	(calcRequiredPower@T2+2)^(0+128)
 21605  020B  0140               	movlb	0	; select bank0
 21606  020C  085C               	movf	?___fladd+1,w
 21607  020D  0141               	movlb	1	; select bank1
 21608  020E  00E6               	movwf	(calcRequiredPower@T2+1)^(0+128)
 21609  020F  0140               	movlb	0	; select bank0
 21610  0210  085B               	movf	?___fladd,w
 21611  0211  0141               	movlb	1	; select bank1
 21612  0212  00E5               	movwf	calcRequiredPower@T2^(0+128)
 21613                           
 21614                           ;system.c: 299:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21615  0213  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 21616  0214  0140               	movlb	0	; select bank0
 21617  0215  00C4               	movwf	___flmul@b+3
 21618  0216  0141               	movlb	1	; select bank1
 21619  0217  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 21620  0218  0140               	movlb	0	; select bank0
 21621  0219  00C3               	movwf	___flmul@b+2
 21622  021A  0141               	movlb	1	; select bank1
 21623  021B  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 21624  021C  0140               	movlb	0	; select bank0
 21625  021D  00C2               	movwf	___flmul@b+1
 21626  021E  0141               	movlb	1	; select bank1
 21627  021F  0865               	movf	calcRequiredPower@T2^(0+128),w
 21628  0220  0140               	movlb	0	; select bank0
 21629  0221  00C1               	movwf	___flmul@b
 21630  0222  0141               	movlb	1	; select bank1
 21631  0223  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 21632  0224  0140               	movlb	0	; select bank0
 21633  0225  00C8               	movwf	___flmul@a+3
 21634  0226  0141               	movlb	1	; select bank1
 21635  0227  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 21636  0228  0140               	movlb	0	; select bank0
 21637  0229  00C7               	movwf	___flmul@a+2
 21638  022A  0141               	movlb	1	; select bank1
 21639  022B  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 21640  022C  0140               	movlb	0	; select bank0
 21641  022D  00C6               	movwf	___flmul@a+1
 21642  022E  0141               	movlb	1	; select bank1
 21643  022F  0865               	movf	calcRequiredPower@T2^(0+128),w
 21644  0230  0140               	movlb	0	; select bank0
 21645  0231  00C5               	movwf	___flmul@a
 21646  0232  3185  2561  3180   	fcall	___flmul
 21647  0235  0140               	movlb	0	; select bank0
 21648  0236  0844               	movf	?___flmul+3,w
 21649  0237  0141               	movlb	1	; select bank1
 21650  0238  00E0               	movwf	(_calcRequiredPower$2777+3)^(0+128)
 21651  0239  0140               	movlb	0	; select bank0
 21652  023A  0843               	movf	?___flmul+2,w
 21653  023B  0141               	movlb	1	; select bank1
 21654  023C  00DF               	movwf	(_calcRequiredPower$2777+2)^(0+128)
 21655  023D  0140               	movlb	0	; select bank0
 21656  023E  0842               	movf	?___flmul+1,w
 21657  023F  0141               	movlb	1	; select bank1
 21658  0240  00DE               	movwf	(_calcRequiredPower$2777+1)^(0+128)
 21659  0241  0140               	movlb	0	; select bank0
 21660  0242  0841               	movf	?___flmul,w
 21661  0243  0141               	movlb	1	; select bank1
 21662  0244  00DD               	movwf	_calcRequiredPower$2777^(0+128)
 21663                           
 21664                           ;system.c: 299:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21665  0245  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 21666  0246  0140               	movlb	0	; select bank0
 21667  0247  00C4               	movwf	___flmul@b+3
 21668  0248  0141               	movlb	1	; select bank1
 21669  0249  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 21670  024A  0140               	movlb	0	; select bank0
 21671  024B  00C3               	movwf	___flmul@b+2
 21672  024C  0141               	movlb	1	; select bank1
 21673  024D  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 21674  024E  0140               	movlb	0	; select bank0
 21675  024F  00C2               	movwf	___flmul@b+1
 21676  0250  0141               	movlb	1	; select bank1
 21677  0251  0865               	movf	calcRequiredPower@T2^(0+128),w
 21678  0252  0140               	movlb	0	; select bank0
 21679  0253  00C1               	movwf	___flmul@b
 21680  0254  0141               	movlb	1	; select bank1
 21681  0255  0860               	movf	(_calcRequiredPower$2777+3)^(0+128),w
 21682  0256  0140               	movlb	0	; select bank0
 21683  0257  00C8               	movwf	___flmul@a+3
 21684  0258  0141               	movlb	1	; select bank1
 21685  0259  085F               	movf	(_calcRequiredPower$2777+2)^(0+128),w
 21686  025A  0140               	movlb	0	; select bank0
 21687  025B  00C7               	movwf	___flmul@a+2
 21688  025C  0141               	movlb	1	; select bank1
 21689  025D  085E               	movf	(_calcRequiredPower$2777+1)^(0+128),w
 21690  025E  0140               	movlb	0	; select bank0
 21691  025F  00C6               	movwf	___flmul@a+1
 21692  0260  0141               	movlb	1	; select bank1
 21693  0261  085D               	movf	_calcRequiredPower$2777^(0+128),w
 21694  0262  0140               	movlb	0	; select bank0
 21695  0263  00C5               	movwf	___flmul@a
 21696  0264  3185  2561  3180   	fcall	___flmul
 21697  0267  0140               	movlb	0	; select bank0
 21698  0268  0844               	movf	?___flmul+3,w
 21699  0269  0141               	movlb	1	; select bank1
 21700  026A  00C0               	movwf	(_calcRequiredPower$2779+3)^(0+128)
 21701  026B  0140               	movlb	0	; select bank0
 21702  026C  0843               	movf	?___flmul+2,w
 21703  026D  0141               	movlb	1	; select bank1
 21704  026E  00BF               	movwf	(_calcRequiredPower$2779+2)^(0+128)
 21705  026F  0140               	movlb	0	; select bank0
 21706  0270  0842               	movf	?___flmul+1,w
 21707  0271  0141               	movlb	1	; select bank1
 21708  0272  00BE               	movwf	(_calcRequiredPower$2779+1)^(0+128)
 21709  0273  0140               	movlb	0	; select bank0
 21710  0274  0841               	movf	?___flmul,w
 21711  0275  0141               	movlb	1	; select bank1
 21712  0276  00BD               	movwf	_calcRequiredPower$2779^(0+128)
 21713                           
 21714                           ;system.c: 299:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21715  0277  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 21716  0278  0140               	movlb	0	; select bank0
 21717  0279  00C4               	movwf	___flmul@b+3
 21718  027A  0141               	movlb	1	; select bank1
 21719  027B  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 21720  027C  0140               	movlb	0	; select bank0
 21721  027D  00C3               	movwf	___flmul@b+2
 21722  027E  0141               	movlb	1	; select bank1
 21723  027F  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 21724  0280  0140               	movlb	0	; select bank0
 21725  0281  00C2               	movwf	___flmul@b+1
 21726  0282  0141               	movlb	1	; select bank1
 21727  0283  0861               	movf	calcRequiredPower@T1^(0+128),w
 21728  0284  0140               	movlb	0	; select bank0
 21729  0285  00C1               	movwf	___flmul@b
 21730  0286  0141               	movlb	1	; select bank1
 21731  0287  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 21732  0288  0140               	movlb	0	; select bank0
 21733  0289  00C8               	movwf	___flmul@a+3
 21734  028A  0141               	movlb	1	; select bank1
 21735  028B  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 21736  028C  0140               	movlb	0	; select bank0
 21737  028D  00C7               	movwf	___flmul@a+2
 21738  028E  0141               	movlb	1	; select bank1
 21739  028F  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 21740  0290  0140               	movlb	0	; select bank0
 21741  0291  00C6               	movwf	___flmul@a+1
 21742  0292  0141               	movlb	1	; select bank1
 21743  0293  0861               	movf	calcRequiredPower@T1^(0+128),w
 21744  0294  0140               	movlb	0	; select bank0
 21745  0295  00C5               	movwf	___flmul@a
 21746  0296  3185  2561  3180   	fcall	___flmul
 21747  0299  0140               	movlb	0	; select bank0
 21748  029A  0844               	movf	?___flmul+3,w
 21749  029B  0141               	movlb	1	; select bank1
 21750  029C  00C4               	movwf	(_calcRequiredPower$2780+3)^(0+128)
 21751  029D  0140               	movlb	0	; select bank0
 21752  029E  0843               	movf	?___flmul+2,w
 21753  029F  0141               	movlb	1	; select bank1
 21754  02A0  00C3               	movwf	(_calcRequiredPower$2780+2)^(0+128)
 21755  02A1  0140               	movlb	0	; select bank0
 21756  02A2  0842               	movf	?___flmul+1,w
 21757  02A3  0141               	movlb	1	; select bank1
 21758  02A4  00C2               	movwf	(_calcRequiredPower$2780+1)^(0+128)
 21759  02A5  0140               	movlb	0	; select bank0
 21760  02A6  0841               	movf	?___flmul,w
 21761  02A7  0141               	movlb	1	; select bank1
 21762  02A8  00C1               	movwf	_calcRequiredPower$2780^(0+128)
 21763                           
 21764                           ;system.c: 299:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21765  02A9  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 21766  02AA  0140               	movlb	0	; select bank0
 21767  02AB  00C4               	movwf	___flmul@b+3
 21768  02AC  0141               	movlb	1	; select bank1
 21769  02AD  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 21770  02AE  0140               	movlb	0	; select bank0
 21771  02AF  00C3               	movwf	___flmul@b+2
 21772  02B0  0141               	movlb	1	; select bank1
 21773  02B1  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 21774  02B2  0140               	movlb	0	; select bank0
 21775  02B3  00C2               	movwf	___flmul@b+1
 21776  02B4  0141               	movlb	1	; select bank1
 21777  02B5  0861               	movf	calcRequiredPower@T1^(0+128),w
 21778  02B6  0140               	movlb	0	; select bank0
 21779  02B7  00C1               	movwf	___flmul@b
 21780  02B8  0141               	movlb	1	; select bank1
 21781  02B9  0844               	movf	(_calcRequiredPower$2780+3)^(0+128),w
 21782  02BA  0140               	movlb	0	; select bank0
 21783  02BB  00C8               	movwf	___flmul@a+3
 21784  02BC  0141               	movlb	1	; select bank1
 21785  02BD  0843               	movf	(_calcRequiredPower$2780+2)^(0+128),w
 21786  02BE  0140               	movlb	0	; select bank0
 21787  02BF  00C7               	movwf	___flmul@a+2
 21788  02C0  0141               	movlb	1	; select bank1
 21789  02C1  0842               	movf	(_calcRequiredPower$2780+1)^(0+128),w
 21790  02C2  0140               	movlb	0	; select bank0
 21791  02C3  00C6               	movwf	___flmul@a+1
 21792  02C4  0141               	movlb	1	; select bank1
 21793  02C5  0841               	movf	_calcRequiredPower$2780^(0+128),w
 21794  02C6  0140               	movlb	0	; select bank0
 21795  02C7  00C5               	movwf	___flmul@a
 21796  02C8  3185  2561  3180   	fcall	___flmul
 21797  02CB  0140               	movlb	0	; select bank0
 21798  02CC  0844               	movf	?___flmul+3,w
 21799  02CD  0141               	movlb	1	; select bank1
 21800  02CE  00C8               	movwf	(_calcRequiredPower$2781+3)^(0+128)
 21801  02CF  0140               	movlb	0	; select bank0
 21802  02D0  0843               	movf	?___flmul+2,w
 21803  02D1  0141               	movlb	1	; select bank1
 21804  02D2  00C7               	movwf	(_calcRequiredPower$2781+2)^(0+128)
 21805  02D3  0140               	movlb	0	; select bank0
 21806  02D4  0842               	movf	?___flmul+1,w
 21807  02D5  0141               	movlb	1	; select bank1
 21808  02D6  00C6               	movwf	(_calcRequiredPower$2781+1)^(0+128)
 21809  02D7  0140               	movlb	0	; select bank0
 21810  02D8  0841               	movf	?___flmul,w
 21811  02D9  0141               	movlb	1	; select bank1
 21812  02DA  00C5               	movwf	_calcRequiredPower$2781^(0+128)
 21813                           
 21814                           ;system.c: 299:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21815  02DB  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 21816  02DC  0140               	movlb	0	; select bank0
 21817  02DD  00C4               	movwf	___flmul@b+3
 21818  02DE  0141               	movlb	1	; select bank1
 21819  02DF  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 21820  02E0  0140               	movlb	0	; select bank0
 21821  02E1  00C3               	movwf	___flmul@b+2
 21822  02E2  0141               	movlb	1	; select bank1
 21823  02E3  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 21824  02E4  0140               	movlb	0	; select bank0
 21825  02E5  00C2               	movwf	___flmul@b+1
 21826  02E6  0141               	movlb	1	; select bank1
 21827  02E7  0865               	movf	calcRequiredPower@T2^(0+128),w
 21828  02E8  0140               	movlb	0	; select bank0
 21829  02E9  00C1               	movwf	___flmul@b
 21830  02EA  0141               	movlb	1	; select bank1
 21831  02EB  0840               	movf	(_calcRequiredPower$2779+3)^(0+128),w
 21832  02EC  0140               	movlb	0	; select bank0
 21833  02ED  00C8               	movwf	___flmul@a+3
 21834  02EE  0141               	movlb	1	; select bank1
 21835  02EF  083F               	movf	(_calcRequiredPower$2779+2)^(0+128),w
 21836  02F0  0140               	movlb	0	; select bank0
 21837  02F1  00C7               	movwf	___flmul@a+2
 21838  02F2  0141               	movlb	1	; select bank1
 21839  02F3  083E               	movf	(_calcRequiredPower$2779+1)^(0+128),w
 21840  02F4  0140               	movlb	0	; select bank0
 21841  02F5  00C6               	movwf	___flmul@a+1
 21842  02F6  0141               	movlb	1	; select bank1
 21843  02F7  083D               	movf	_calcRequiredPower$2779^(0+128),w
 21844  02F8  0140               	movlb	0	; select bank0
 21845  02F9  00C5               	movwf	___flmul@a
 21846  02FA  3185  2561  3180   	fcall	___flmul
 21847  02FD  0140               	movlb	0	; select bank0
 21848  02FE  0844               	movf	?___flmul+3,w
 21849  02FF  0141               	movlb	1	; select bank1
 21850  0300  00A3               	movwf	(___flsub@a+3)^(0+128)
 21851  0301  0140               	movlb	0	; select bank0
 21852  0302  0843               	movf	?___flmul+2,w
 21853  0303  0141               	movlb	1	; select bank1
 21854  0304  00A2               	movwf	(___flsub@a+2)^(0+128)
 21855  0305  0140               	movlb	0	; select bank0
 21856  0306  0842               	movf	?___flmul+1,w
 21857  0307  0141               	movlb	1	; select bank1
 21858  0308  00A1               	movwf	(___flsub@a+1)^(0+128)
 21859  0309  0140               	movlb	0	; select bank0
 21860  030A  0841               	movf	?___flmul,w
 21861  030B  0141               	movlb	1	; select bank1
 21862  030C  00A0               	movwf	___flsub@a^(0+128)
 21863  030D  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 21864  030E  0140               	movlb	0	; select bank0
 21865  030F  00C4               	movwf	___flmul@b+3
 21866  0310  0141               	movlb	1	; select bank1
 21867  0311  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 21868  0312  0140               	movlb	0	; select bank0
 21869  0313  00C3               	movwf	___flmul@b+2
 21870  0314  0141               	movlb	1	; select bank1
 21871  0315  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 21872  0316  0140               	movlb	0	; select bank0
 21873  0317  00C2               	movwf	___flmul@b+1
 21874  0318  0141               	movlb	1	; select bank1
 21875  0319  0861               	movf	calcRequiredPower@T1^(0+128),w
 21876  031A  0140               	movlb	0	; select bank0
 21877  031B  00C1               	movwf	___flmul@b
 21878  031C  0141               	movlb	1	; select bank1
 21879  031D  0848               	movf	(_calcRequiredPower$2781+3)^(0+128),w
 21880  031E  0140               	movlb	0	; select bank0
 21881  031F  00C8               	movwf	___flmul@a+3
 21882  0320  0141               	movlb	1	; select bank1
 21883  0321  0847               	movf	(_calcRequiredPower$2781+2)^(0+128),w
 21884  0322  0140               	movlb	0	; select bank0
 21885  0323  00C7               	movwf	___flmul@a+2
 21886  0324  0141               	movlb	1	; select bank1
 21887  0325  0846               	movf	(_calcRequiredPower$2781+1)^(0+128),w
 21888  0326  0140               	movlb	0	; select bank0
 21889  0327  00C6               	movwf	___flmul@a+1
 21890  0328  0141               	movlb	1	; select bank1
 21891  0329  0845               	movf	_calcRequiredPower$2781^(0+128),w
 21892  032A  0140               	movlb	0	; select bank0
 21893  032B  00C5               	movwf	___flmul@a
 21894  032C  3185  2561  3180   	fcall	___flmul
 21895  032F  0140               	movlb	0	; select bank0
 21896  0330  0844               	movf	?___flmul+3,w
 21897  0331  0141               	movlb	1	; select bank1
 21898  0332  00A7               	movwf	(___flsub@b+3)^(0+128)
 21899  0333  0140               	movlb	0	; select bank0
 21900  0334  0843               	movf	?___flmul+2,w
 21901  0335  0141               	movlb	1	; select bank1
 21902  0336  00A6               	movwf	(___flsub@b+2)^(0+128)
 21903  0337  0140               	movlb	0	; select bank0
 21904  0338  0842               	movf	?___flmul+1,w
 21905  0339  0141               	movlb	1	; select bank1
 21906  033A  00A5               	movwf	(___flsub@b+1)^(0+128)
 21907  033B  0140               	movlb	0	; select bank0
 21908  033C  0841               	movf	?___flmul,w
 21909  033D  0141               	movlb	1	; select bank1
 21910  033E  00A4               	movwf	___flsub@b^(0+128)
 21911  033F  31B4  2405  3180   	fcall	___flsub
 21912  0342  0141               	movlb	1	; select bank1
 21913  0343  0823               	movf	(?___flsub+3)^(0+128),w
 21914  0344  00CC               	movwf	(_calcRequiredPower$2782+3)^(0+128)
 21915  0345  0822               	movf	(?___flsub+2)^(0+128),w
 21916  0346  00CB               	movwf	(_calcRequiredPower$2782+2)^(0+128)
 21917  0347  0821               	movf	(?___flsub+1)^(0+128),w
 21918  0348  00CA               	movwf	(_calcRequiredPower$2782+1)^(0+128)
 21919  0349  0820               	movf	?___flsub^(0+128),w
 21920  034A  00C9               	movwf	_calcRequiredPower$2782^(0+128)
 21921                           
 21922                           ;system.c: 299:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21923  034B  3033               	movlw	51
 21924  034C  0140               	movlb	0	; select bank0
 21925  034D  00C4               	movwf	___flmul@b+3
 21926  034E  3067               	movlw	103
 21927  034F  00C3               	movwf	___flmul@b+2
 21928  0350  3059               	movlw	89
 21929  0351  00C2               	movwf	___flmul@b+1
 21930  0352  3032               	movlw	50
 21931  0353  00C1               	movwf	___flmul@b
 21932  0354  0141               	movlb	1	; select bank1
 21933  0355  085C               	movf	(calcRequiredPower@A+3)^(0+128),w
 21934  0356  0140               	movlb	0	; select bank0
 21935  0357  00C8               	movwf	___flmul@a+3
 21936  0358  0141               	movlb	1	; select bank1
 21937  0359  085B               	movf	(calcRequiredPower@A+2)^(0+128),w
 21938  035A  0140               	movlb	0	; select bank0
 21939  035B  00C7               	movwf	___flmul@a+2
 21940  035C  0141               	movlb	1	; select bank1
 21941  035D  085A               	movf	(calcRequiredPower@A+1)^(0+128),w
 21942  035E  0140               	movlb	0	; select bank0
 21943  035F  00C6               	movwf	___flmul@a+1
 21944  0360  0141               	movlb	1	; select bank1
 21945  0361  0859               	movf	calcRequiredPower@A^(0+128),w
 21946  0362  0140               	movlb	0	; select bank0
 21947  0363  00C5               	movwf	___flmul@a
 21948  0364  3185  2561  3180   	fcall	___flmul
 21949  0367  0140               	movlb	0	; select bank0
 21950  0368  0844               	movf	?___flmul+3,w
 21951  0369  0141               	movlb	1	; select bank1
 21952  036A  00D0               	movwf	(_calcRequiredPower$2783+3)^(0+128)
 21953  036B  0140               	movlb	0	; select bank0
 21954  036C  0843               	movf	?___flmul+2,w
 21955  036D  0141               	movlb	1	; select bank1
 21956  036E  00CF               	movwf	(_calcRequiredPower$2783+2)^(0+128)
 21957  036F  0140               	movlb	0	; select bank0
 21958  0370  0842               	movf	?___flmul+1,w
 21959  0371  0141               	movlb	1	; select bank1
 21960  0372  00CE               	movwf	(_calcRequiredPower$2783+1)^(0+128)
 21961  0373  0140               	movlb	0	; select bank0
 21962  0374  0841               	movf	?___flmul,w
 21963  0375  0141               	movlb	1	; select bank1
 21964  0376  00CD               	movwf	_calcRequiredPower$2783^(0+128)
 21965                           
 21966                           ;system.c: 299:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21967  0377  084C               	movf	(_calcRequiredPower$2782+3)^(0+128),w
 21968  0378  0140               	movlb	0	; select bank0
 21969  0379  00C4               	movwf	___flmul@b+3
 21970  037A  0141               	movlb	1	; select bank1
 21971  037B  084B               	movf	(_calcRequiredPower$2782+2)^(0+128),w
 21972  037C  0140               	movlb	0	; select bank0
 21973  037D  00C3               	movwf	___flmul@b+2
 21974  037E  0141               	movlb	1	; select bank1
 21975  037F  084A               	movf	(_calcRequiredPower$2782+1)^(0+128),w
 21976  0380  0140               	movlb	0	; select bank0
 21977  0381  00C2               	movwf	___flmul@b+1
 21978  0382  0141               	movlb	1	; select bank1
 21979  0383  0849               	movf	_calcRequiredPower$2782^(0+128),w
 21980  0384  0140               	movlb	0	; select bank0
 21981  0385  00C1               	movwf	___flmul@b
 21982  0386  0141               	movlb	1	; select bank1
 21983  0387  0850               	movf	(_calcRequiredPower$2783+3)^(0+128),w
 21984  0388  0140               	movlb	0	; select bank0
 21985  0389  00C8               	movwf	___flmul@a+3
 21986  038A  0141               	movlb	1	; select bank1
 21987  038B  084F               	movf	(_calcRequiredPower$2783+2)^(0+128),w
 21988  038C  0140               	movlb	0	; select bank0
 21989  038D  00C7               	movwf	___flmul@a+2
 21990  038E  0141               	movlb	1	; select bank1
 21991  038F  084E               	movf	(_calcRequiredPower$2783+1)^(0+128),w
 21992  0390  0140               	movlb	0	; select bank0
 21993  0391  00C6               	movwf	___flmul@a+1
 21994  0392  0141               	movlb	1	; select bank1
 21995  0393  084D               	movf	_calcRequiredPower$2783^(0+128),w
 21996  0394  0140               	movlb	0	; select bank0
 21997  0395  00C5               	movwf	___flmul@a
 21998  0396  3185  2561  3180   	fcall	___flmul
 21999  0399  0140               	movlb	0	; select bank0
 22000  039A  0844               	movf	?___flmul+3,w
 22001  039B  0141               	movlb	1	; select bank1
 22002  039C  00D8               	movwf	(calcRequiredPower@phi+3)^(0+128)
 22003  039D  0140               	movlb	0	; select bank0
 22004  039E  0843               	movf	?___flmul+2,w
 22005  039F  0141               	movlb	1	; select bank1
 22006  03A0  00D7               	movwf	(calcRequiredPower@phi+2)^(0+128)
 22007  03A1  0140               	movlb	0	; select bank0
 22008  03A2  0842               	movf	?___flmul+1,w
 22009  03A3  0141               	movlb	1	; select bank1
 22010  03A4  00D6               	movwf	(calcRequiredPower@phi+1)^(0+128)
 22011  03A5  0140               	movlb	0	; select bank0
 22012  03A6  0841               	movf	?___flmul,w
 22013  03A7  0141               	movlb	1	; select bank1
 22014  03A8  00D5               	movwf	calcRequiredPower@phi^(0+128)
 22015                           
 22016                           ;system.c: 301:   data.heater[n].Preq = phi * data.fudgeFactor;
 22017  03A9  0869               	movf	calcRequiredPower@n^(0+128),w
 22018  03AA  00AD               	movwf	??_calcRequiredPower^(0+128)
 22019  03AB  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 22020  03AC  082D               	movf	??_calcRequiredPower^(0+128),w
 22021  03AD  0140               	movlb	0	; select bank0
 22022  03AE  00AD               	movwf	___wmul@multiplier
 22023  03AF  0141               	movlb	1	; select bank1
 22024  03B0  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 22025  03B1  0140               	movlb	0	; select bank0
 22026  03B2  00AE               	movwf	___wmul@multiplier+1
 22027  03B3  301F               	movlw	31
 22028  03B4  00AF               	movwf	___wmul@multiplicand
 22029  03B5  3000               	movlw	0
 22030  03B6  00B0               	movwf	___wmul@multiplicand+1
 22031  03B7  31B1  21DE  3180   	fcall	___wmul
 22032  03BA  307C               	movlw	124
 22033  03BB  0141               	movlb	1	; select bank1
 22034  03BC  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 22035  03BD  3027               	movlw	39
 22036  03BE  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22037  03BF  0140               	movlb	0	; select bank0
 22038  03C0  082D               	movf	?___wmul,w
 22039  03C1  0141               	movlb	1	; select bank1
 22040  03C2  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22041  03C3  0086               	movwf	6
 22042  03C4  0140               	movlb	0	; select bank0
 22043  03C5  082E               	movf	?___wmul+1,w
 22044  03C6  0141               	movlb	1	; select bank1
 22045  03C7  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22046  03C8  0087               	movwf	7
 22047  03C9  0858               	movf	(calcRequiredPower@phi+3)^(0+128),w
 22048  03CA  0140               	movlb	0	; select bank0
 22049  03CB  00C4               	movwf	___flmul@b+3
 22050  03CC  0141               	movlb	1	; select bank1
 22051  03CD  0857               	movf	(calcRequiredPower@phi+2)^(0+128),w
 22052  03CE  0140               	movlb	0	; select bank0
 22053  03CF  00C3               	movwf	___flmul@b+2
 22054  03D0  0141               	movlb	1	; select bank1
 22055  03D1  0856               	movf	(calcRequiredPower@phi+1)^(0+128),w
 22056  03D2  0140               	movlb	0	; select bank0
 22057  03D3  00C2               	movwf	___flmul@b+1
 22058  03D4  0141               	movlb	1	; select bank1
 22059  03D5  0855               	movf	calcRequiredPower@phi^(0+128),w
 22060  03D6  0140               	movlb	0	; select bank0
 22061  03D7  00C1               	movwf	___flmul@b
 22062  03D8  306F               	movlw	111
 22063  03D9  0084               	movwf	4
 22064  03DA  3027               	movlw	39
 22065  03DB  0085               	movwf	5
 22066  03DC  3F00               	moviw [0]fsr0
 22067  03DD  00C5               	movwf	___flmul@a
 22068  03DE  3F01               	moviw [1]fsr0
 22069  03DF  00C6               	movwf	___flmul@a+1
 22070  03E0  3F02               	moviw [2]fsr0
 22071  03E1  00C7               	movwf	___flmul@a+2
 22072  03E2  3F03               	moviw [3]fsr0
 22073  03E3  00C8               	movwf	___flmul@a+3
 22074  03E4  3185  2561  3180   	fcall	___flmul
 22075  03E7  0140               	movlb	0	; select bank0
 22076  03E8  0841               	movf	?___flmul,w
 22077  03E9  3FC0               	movwi [0]fsr1
 22078  03EA  0842               	movf	?___flmul+1,w
 22079  03EB  3FC1               	movwi [1]fsr1
 22080  03EC  0843               	movf	?___flmul+2,w
 22081  03ED  3FC2               	movwi [2]fsr1
 22082  03EE  0844               	movf	?___flmul+3,w
 22083  03EF  3FC3               	movwi [3]fsr1
 22084                           
 22085                           ;system.c: 304:   p = 2 * 3.14 * 0.0254 * data.heater[n].lensDia;
 22086  03F0  303E               	movlw	62
 22087  03F1  00C4               	movwf	___flmul@b+3
 22088  03F2  3023               	movlw	35
 22089  03F3  00C3               	movwf	___flmul@b+2
 22090  03F4  3057               	movlw	87
 22091  03F5  00C2               	movwf	___flmul@b+1
 22092  03F6  301D               	movlw	29
 22093  03F7  00C1               	movwf	___flmul@b
 22094  03F8  0141               	movlb	1	; select bank1
 22095  03F9  0869               	movf	calcRequiredPower@n^(0+128),w
 22096  03FA  00AD               	movwf	??_calcRequiredPower^(0+128)
 22097  03FB  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 22098  03FC  082D               	movf	??_calcRequiredPower^(0+128),w
 22099  03FD  0140               	movlb	0	; select bank0
 22100  03FE  00AD               	movwf	___wmul@multiplier
 22101  03FF  0141               	movlb	1	; select bank1
 22102  0400  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 22103  0401  0140               	movlb	0	; select bank0
 22104  0402  00AE               	movwf	___wmul@multiplier+1
 22105  0403  301F               	movlw	31
 22106  0404  00AF               	movwf	___wmul@multiplicand
 22107  0405  3000               	movlw	0
 22108  0406  00B0               	movwf	___wmul@multiplicand+1
 22109  0407  31B1  21DE  3180   	fcall	___wmul
 22110  040A  3089               	movlw	137
 22111  040B  0141               	movlb	1	; select bank1
 22112  040C  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 22113  040D  3027               	movlw	39
 22114  040E  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22115  040F  0140               	movlb	0	; select bank0
 22116  0410  082D               	movf	?___wmul,w
 22117  0411  0141               	movlb	1	; select bank1
 22118  0412  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22119  0413  0086               	movwf	6
 22120  0414  0140               	movlb	0	; select bank0
 22121  0415  082E               	movf	?___wmul+1,w
 22122  0416  0141               	movlb	1	; select bank1
 22123  0417  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22124  0418  0087               	movwf	7
 22125  0419  3F40               	moviw [0]fsr1
 22126  041A  0140               	movlb	0	; select bank0
 22127  041B  00C5               	movwf	___flmul@a
 22128  041C  3F41               	moviw [1]fsr1
 22129  041D  00C6               	movwf	___flmul@a+1
 22130  041E  3F42               	moviw [2]fsr1
 22131  041F  00C7               	movwf	___flmul@a+2
 22132  0420  3F43               	moviw [3]fsr1
 22133  0421  00C8               	movwf	___flmul@a+3
 22134  0422  3185  2561  3180   	fcall	___flmul
 22135  0425  0140               	movlb	0	; select bank0
 22136  0426  0844               	movf	?___flmul+3,w
 22137  0427  0141               	movlb	1	; select bank1
 22138  0428  00B4               	movwf	(calcRequiredPower@p+3)^(0+128)
 22139  0429  0140               	movlb	0	; select bank0
 22140  042A  0843               	movf	?___flmul+2,w
 22141  042B  0141               	movlb	1	; select bank1
 22142  042C  00B3               	movwf	(calcRequiredPower@p+2)^(0+128)
 22143  042D  0140               	movlb	0	; select bank0
 22144  042E  0842               	movf	?___flmul+1,w
 22145  042F  0141               	movlb	1	; select bank1
 22146  0430  00B2               	movwf	(calcRequiredPower@p+1)^(0+128)
 22147  0431  0140               	movlb	0	; select bank0
 22148  0432  0841               	movf	?___flmul,w
 22149  0433  0141               	movlb	1	; select bank1
 22150  0434  00B1               	movwf	calcRequiredPower@p^(0+128)
 22151                           
 22152                           ;system.c: 305:   A = p * 0.03;
 22153  0435  303C               	movlw	60
 22154  0436  0140               	movlb	0	; select bank0
 22155  0437  00C4               	movwf	___flmul@b+3
 22156  0438  30F5               	movlw	245
 22157  0439  00C3               	movwf	___flmul@b+2
 22158  043A  30C2               	movlw	194
 22159  043B  00C2               	movwf	___flmul@b+1
 22160  043C  308F               	movlw	143
 22161  043D  00C1               	movwf	___flmul@b
 22162  043E  0141               	movlb	1	; select bank1
 22163  043F  0834               	movf	(calcRequiredPower@p+3)^(0+128),w
 22164  0440  0140               	movlb	0	; select bank0
 22165  0441  00C8               	movwf	___flmul@a+3
 22166  0442  0141               	movlb	1	; select bank1
 22167  0443  0833               	movf	(calcRequiredPower@p+2)^(0+128),w
 22168  0444  0140               	movlb	0	; select bank0
 22169  0445  00C7               	movwf	___flmul@a+2
 22170  0446  0141               	movlb	1	; select bank1
 22171  0447  0832               	movf	(calcRequiredPower@p+1)^(0+128),w
 22172  0448  0140               	movlb	0	; select bank0
 22173  0449  00C6               	movwf	___flmul@a+1
 22174  044A  0141               	movlb	1	; select bank1
 22175  044B  0831               	movf	calcRequiredPower@p^(0+128),w
 22176  044C  0140               	movlb	0	; select bank0
 22177  044D  00C5               	movwf	___flmul@a
 22178  044E  3185  2561  3180   	fcall	___flmul
 22179  0451  0140               	movlb	0	; select bank0
 22180  0452  0844               	movf	?___flmul+3,w
 22181  0453  0141               	movlb	1	; select bank1
 22182  0454  00DC               	movwf	(calcRequiredPower@A+3)^(0+128)
 22183  0455  0140               	movlb	0	; select bank0
 22184  0456  0843               	movf	?___flmul+2,w
 22185  0457  0141               	movlb	1	; select bank1
 22186  0458  00DB               	movwf	(calcRequiredPower@A+2)^(0+128)
 22187  0459  0140               	movlb	0	; select bank0
 22188  045A  0842               	movf	?___flmul+1,w
 22189  045B  0141               	movlb	1	; select bank1
 22190  045C  00DA               	movwf	(calcRequiredPower@A+1)^(0+128)
 22191  045D  0140               	movlb	0	; select bank0
 22192  045E  0841               	movf	?___flmul,w
 22193  045F  0141               	movlb	1	; select bank1
 22194  0460  00D9               	movwf	calcRequiredPower@A^(0+128)
 22195                           
 22196                           ;system.c: 307:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 22197  0461  303F               	movlw	63
 22198  0462  0140               	movlb	0	; select bank0
 22199  0463  00C4               	movwf	___flmul@b+3
 22200  0464  3059               	movlw	89
 22201  0465  00C3               	movwf	___flmul@b+2
 22202  0466  3099               	movlw	153
 22203  0467  00C2               	movwf	___flmul@b+1
 22204  0468  309A               	movlw	154
 22205  0469  00C1               	movwf	___flmul@b
 22206  046A  3040               	movlw	64
 22207  046B  00DE               	movwf	___fldiv@a+3
 22208  046C  3000               	movlw	0
 22209  046D  00DD               	movwf	___fldiv@a+2
 22210  046E  3000               	movlw	0
 22211  046F  00DC               	movwf	___fldiv@a+1
 22212  0470  3000               	movlw	0
 22213  0471  00DB               	movwf	___fldiv@a
 22214  0472  0141               	movlb	1	; select bank1
 22215  0473  0869               	movf	calcRequiredPower@n^(0+128),w
 22216  0474  00AD               	movwf	??_calcRequiredPower^(0+128)
 22217  0475  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 22218  0476  082D               	movf	??_calcRequiredPower^(0+128),w
 22219  0477  0140               	movlb	0	; select bank0
 22220  0478  00AD               	movwf	___wmul@multiplier
 22221  0479  0141               	movlb	1	; select bank1
 22222  047A  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 22223  047B  0140               	movlb	0	; select bank0
 22224  047C  00AE               	movwf	___wmul@multiplier+1
 22225  047D  301F               	movlw	31
 22226  047E  00AF               	movwf	___wmul@multiplicand
 22227  047F  3000               	movlw	0
 22228  0480  00B0               	movwf	___wmul@multiplicand+1
 22229  0481  31B1  21DE  3180   	fcall	___wmul
 22230  0484  3089               	movlw	137
 22231  0485  0141               	movlb	1	; select bank1
 22232  0486  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 22233  0487  3027               	movlw	39
 22234  0488  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22235  0489  0140               	movlb	0	; select bank0
 22236  048A  082D               	movf	?___wmul,w
 22237  048B  0141               	movlb	1	; select bank1
 22238  048C  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22239  048D  0086               	movwf	6
 22240  048E  0140               	movlb	0	; select bank0
 22241  048F  082E               	movf	?___wmul+1,w
 22242  0490  0141               	movlb	1	; select bank1
 22243  0491  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22244  0492  0087               	movwf	7
 22245  0493  3F40               	moviw [0]fsr1
 22246  0494  0140               	movlb	0	; select bank0
 22247  0495  00DF               	movwf	___fldiv@b
 22248  0496  3F41               	moviw [1]fsr1
 22249  0497  00E0               	movwf	___fldiv@b+1
 22250  0498  3F42               	moviw [2]fsr1
 22251  0499  00E1               	movwf	___fldiv@b+2
 22252  049A  3F43               	moviw [3]fsr1
 22253  049B  00E2               	movwf	___fldiv@b+3
 22254  049C  319E  2628  3180   	fcall	___fldiv
 22255  049F  0140               	movlb	0	; select bank0
 22256  04A0  085E               	movf	?___fldiv+3,w
 22257  04A1  00C8               	movwf	___flmul@a+3
 22258  04A2  085D               	movf	?___fldiv+2,w
 22259  04A3  00C7               	movwf	___flmul@a+2
 22260  04A4  085C               	movf	?___fldiv+1,w
 22261  04A5  00C6               	movwf	___flmul@a+1
 22262  04A6  085B               	movf	?___fldiv,w
 22263  04A7  00C5               	movwf	___flmul@a
 22264  04A8  3185  2561  3180   	fcall	___flmul
 22265  04AB  0140               	movlb	0	; select bank0
 22266  04AC  0844               	movf	?___flmul+3,w
 22267  04AD  0141               	movlb	1	; select bank1
 22268  04AE  00E0               	movwf	(_calcRequiredPower$2777+3)^(0+128)
 22269  04AF  0140               	movlb	0	; select bank0
 22270  04B0  0843               	movf	?___flmul+2,w
 22271  04B1  0141               	movlb	1	; select bank1
 22272  04B2  00DF               	movwf	(_calcRequiredPower$2777+2)^(0+128)
 22273  04B3  0140               	movlb	0	; select bank0
 22274  04B4  0842               	movf	?___flmul+1,w
 22275  04B5  0141               	movlb	1	; select bank1
 22276  04B6  00DE               	movwf	(_calcRequiredPower$2777+1)^(0+128)
 22277  04B7  0140               	movlb	0	; select bank0
 22278  04B8  0841               	movf	?___flmul,w
 22279  04B9  0141               	movlb	1	; select bank1
 22280  04BA  00DD               	movwf	_calcRequiredPower$2777^(0+128)
 22281                           
 22282                           ;system.c: 307:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 22283  04BB  085C               	movf	(calcRequiredPower@A+3)^(0+128),w
 22284  04BC  0140               	movlb	0	; select bank0
 22285  04BD  00C4               	movwf	___flmul@b+3
 22286  04BE  0141               	movlb	1	; select bank1
 22287  04BF  085B               	movf	(calcRequiredPower@A+2)^(0+128),w
 22288  04C0  0140               	movlb	0	; select bank0
 22289  04C1  00C3               	movwf	___flmul@b+2
 22290  04C2  0141               	movlb	1	; select bank1
 22291  04C3  085A               	movf	(calcRequiredPower@A+1)^(0+128),w
 22292  04C4  0140               	movlb	0	; select bank0
 22293  04C5  00C2               	movwf	___flmul@b+1
 22294  04C6  0141               	movlb	1	; select bank1
 22295  04C7  0859               	movf	calcRequiredPower@A^(0+128),w
 22296  04C8  0140               	movlb	0	; select bank0
 22297  04C9  00C1               	movwf	___flmul@b
 22298  04CA  0141               	movlb	1	; select bank1
 22299  04CB  0860               	movf	(_calcRequiredPower$2777+3)^(0+128),w
 22300  04CC  0140               	movlb	0	; select bank0
 22301  04CD  00C8               	movwf	___flmul@a+3
 22302  04CE  0141               	movlb	1	; select bank1
 22303  04CF  085F               	movf	(_calcRequiredPower$2777+2)^(0+128),w
 22304  04D0  0140               	movlb	0	; select bank0
 22305  04D1  00C7               	movwf	___flmul@a+2
 22306  04D2  0141               	movlb	1	; select bank1
 22307  04D3  085E               	movf	(_calcRequiredPower$2777+1)^(0+128),w
 22308  04D4  0140               	movlb	0	; select bank0
 22309  04D5  00C6               	movwf	___flmul@a+1
 22310  04D6  0141               	movlb	1	; select bank1
 22311  04D7  085D               	movf	_calcRequiredPower$2777^(0+128),w
 22312  04D8  0140               	movlb	0	; select bank0
 22313  04D9  00C5               	movwf	___flmul@a
 22314  04DA  3185  2561  3180   	fcall	___flmul
 22315  04DD  0140               	movlb	0	; select bank0
 22316  04DE  0844               	movf	?___flmul+3,w
 22317  04DF  0141               	movlb	1	; select bank1
 22318  04E0  00B8               	movwf	(calcRequiredPower@Rth+3)^(0+128)
 22319  04E1  0140               	movlb	0	; select bank0
 22320  04E2  0843               	movf	?___flmul+2,w
 22321  04E3  0141               	movlb	1	; select bank1
 22322  04E4  00B7               	movwf	(calcRequiredPower@Rth+2)^(0+128)
 22323  04E5  0140               	movlb	0	; select bank0
 22324  04E6  0842               	movf	?___flmul+1,w
 22325  04E7  0141               	movlb	1	; select bank1
 22326  04E8  00B6               	movwf	(calcRequiredPower@Rth+1)^(0+128)
 22327  04E9  0140               	movlb	0	; select bank0
 22328  04EA  0841               	movf	?___flmul,w
 22329  04EB  0141               	movlb	1	; select bank1
 22330  04EC  00B5               	movwf	calcRequiredPower@Rth^(0+128)
 22331                           
 22332                           ;system.c: 309:   data.heater[n].dt = phi * Rth - data.dewPointC;
 22333  04ED  0869               	movf	calcRequiredPower@n^(0+128),w
 22334  04EE  00AD               	movwf	??_calcRequiredPower^(0+128)
 22335  04EF  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 22336  04F0  082D               	movf	??_calcRequiredPower^(0+128),w
 22337  04F1  0140               	movlb	0	; select bank0
 22338  04F2  00AD               	movwf	___wmul@multiplier
 22339  04F3  0141               	movlb	1	; select bank1
 22340  04F4  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 22341  04F5  0140               	movlb	0	; select bank0
 22342  04F6  00AE               	movwf	___wmul@multiplier+1
 22343  04F7  301F               	movlw	31
 22344  04F8  00AF               	movwf	___wmul@multiplicand
 22345  04F9  3000               	movlw	0
 22346  04FA  00B0               	movwf	___wmul@multiplicand+1
 22347  04FB  31B1  21DE  3180   	fcall	___wmul
 22348  04FE  308D               	movlw	141
 22349  04FF  0141               	movlb	1	; select bank1
 22350  0500  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 22351  0501  3027               	movlw	39
 22352  0502  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22353  0503  0140               	movlb	0	; select bank0
 22354  0504  082D               	movf	?___wmul,w
 22355  0505  0141               	movlb	1	; select bank1
 22356  0506  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22357  0507  0086               	movwf	6
 22358  0508  0140               	movlb	0	; select bank0
 22359  0509  082E               	movf	?___wmul+1,w
 22360  050A  0141               	movlb	1	; select bank1
 22361  050B  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22362  050C  0087               	movwf	7
 22363  050D  304A               	movlw	74
 22364  050E  0084               	movwf	4
 22365  050F  3027               	movlw	39
 22366  0510  0085               	movwf	5
 22367  0511  3108               	addfsr 0,8
 22368  0512  3F00               	moviw [0]fsr0
 22369  0513  00A0               	movwf	___flsub@a^(0+128)
 22370  0514  3F01               	moviw [1]fsr0
 22371  0515  00A1               	movwf	(___flsub@a+1)^(0+128)
 22372  0516  3F02               	moviw [2]fsr0
 22373  0517  00A2               	movwf	(___flsub@a+2)^(0+128)
 22374  0518  3F03               	moviw [3]fsr0
 22375  0519  00A3               	movwf	(___flsub@a+3)^(0+128)
 22376  051A  0838               	movf	(calcRequiredPower@Rth+3)^(0+128),w
 22377  051B  0140               	movlb	0	; select bank0
 22378  051C  00C4               	movwf	___flmul@b+3
 22379  051D  0141               	movlb	1	; select bank1
 22380  051E  0837               	movf	(calcRequiredPower@Rth+2)^(0+128),w
 22381  051F  0140               	movlb	0	; select bank0
 22382  0520  00C3               	movwf	___flmul@b+2
 22383  0521  0141               	movlb	1	; select bank1
 22384  0522  0836               	movf	(calcRequiredPower@Rth+1)^(0+128),w
 22385  0523  0140               	movlb	0	; select bank0
 22386  0524  00C2               	movwf	___flmul@b+1
 22387  0525  0141               	movlb	1	; select bank1
 22388  0526  0835               	movf	calcRequiredPower@Rth^(0+128),w
 22389  0527  0140               	movlb	0	; select bank0
 22390  0528  00C1               	movwf	___flmul@b
 22391  0529  0141               	movlb	1	; select bank1
 22392  052A  0858               	movf	(calcRequiredPower@phi+3)^(0+128),w
 22393  052B  0140               	movlb	0	; select bank0
 22394  052C  00C8               	movwf	___flmul@a+3
 22395  052D  0141               	movlb	1	; select bank1
 22396  052E  0857               	movf	(calcRequiredPower@phi+2)^(0+128),w
 22397  052F  0140               	movlb	0	; select bank0
 22398  0530  00C7               	movwf	___flmul@a+2
 22399  0531  0141               	movlb	1	; select bank1
 22400  0532  0856               	movf	(calcRequiredPower@phi+1)^(0+128),w
 22401  0533  0140               	movlb	0	; select bank0
 22402  0534  00C6               	movwf	___flmul@a+1
 22403  0535  0141               	movlb	1	; select bank1
 22404  0536  0855               	movf	calcRequiredPower@phi^(0+128),w
 22405  0537  0140               	movlb	0	; select bank0
 22406  0538  00C5               	movwf	___flmul@a
 22407  0539  3185  2561  3180   	fcall	___flmul
 22408  053C  0140               	movlb	0	; select bank0
 22409  053D  0844               	movf	?___flmul+3,w
 22410  053E  0141               	movlb	1	; select bank1
 22411  053F  00A7               	movwf	(___flsub@b+3)^(0+128)
 22412  0540  0140               	movlb	0	; select bank0
 22413  0541  0843               	movf	?___flmul+2,w
 22414  0542  0141               	movlb	1	; select bank1
 22415  0543  00A6               	movwf	(___flsub@b+2)^(0+128)
 22416  0544  0140               	movlb	0	; select bank0
 22417  0545  0842               	movf	?___flmul+1,w
 22418  0546  0141               	movlb	1	; select bank1
 22419  0547  00A5               	movwf	(___flsub@b+1)^(0+128)
 22420  0548  0140               	movlb	0	; select bank0
 22421  0549  0841               	movf	?___flmul,w
 22422  054A  0141               	movlb	1	; select bank1
 22423  054B  00A4               	movwf	___flsub@b^(0+128)
 22424  054C  31B4  2405  3180   	fcall	___flsub
 22425  054F  0141               	movlb	1	; select bank1
 22426  0550  0820               	movf	?___flsub^(0+128),w
 22427  0551  3FC0               	movwi [0]fsr1
 22428  0552  0821               	movf	(?___flsub+1)^(0+128),w
 22429  0553  3FC1               	movwi [1]fsr1
 22430  0554  0822               	movf	(?___flsub+2)^(0+128),w
 22431  0555  3FC2               	movwi [2]fsr1
 22432  0556  0823               	movf	(?___flsub+3)^(0+128),w
 22433  0557  3FC3               	movwi [3]fsr1
 22434                           
 22435                           ;system.c: 310:  }
 22436  0558  3001               	movlw	1
 22437  0559  00AD               	movwf	??_calcRequiredPower^(0+128)
 22438  055A  082D               	movf	??_calcRequiredPower^(0+128),w
 22439  055B  07E9               	addwf	calcRequiredPower@n^(0+128),f
 22440  055C  3004               	movlw	4
 22441  055D  0269               	subwf	calcRequiredPower@n^(0+128),w
 22442  055E  1803               	btfsc	3,0
 22443  055F  0008               	return
 22444  0560  28D7               	goto	l9067
 22445  0561                     __end_of_calcRequiredPower:	
 22446                           
 22447                           	psect	text58
 22448  31DE                     __ptext58:	
 22449 ;; *************** function ___wmul *****************
 22450 ;; Defined at:
 22451 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 22452 ;; Parameters:    Size  Location     Type
 22453 ;;  multiplier      2   13[BANK0 ] unsigned int 
 22454 ;;  multiplicand    2   15[BANK0 ] unsigned int 
 22455 ;; Auto vars:     Size  Location     Type
 22456 ;;  product         2   17[BANK0 ] unsigned int 
 22457 ;; Return value:  Size  Location     Type
 22458 ;;                  2   13[BANK0 ] unsigned int 
 22459 ;; Registers used:
 22460 ;;		wreg, status,2, status,0
 22461 ;; Tracked objects:
 22462 ;;		On entry : 0/0
 22463 ;;		On exit  : 0/0
 22464 ;;		Unchanged: 0/0
 22465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22466 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22467 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22468 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22469 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22470 ;;Total ram usage:        6 bytes
 22471 ;; Hardware stack levels used:    1
 22472 ;; Hardware stack levels required when called:    3
 22473 ;; This function calls:
 22474 ;;		Nothing
 22475 ;; This function is called by:
 22476 ;;		_initGlobalData
 22477 ;;		_channelView
 22478 ;;		_channelSetup
 22479 ;;		_setOutputPower
 22480 ;;		_setLensDia
 22481 ;;		_getNextState
 22482 ;;		_returnToPage
 22483 ;;		_checkChannelStatus
 22484 ;;		_calcRequiredPower
 22485 ;;		_channelThing
 22486 ;;		_ftoa
 22487 ;;		_qsort
 22488 ;; This function uses a non-reentrant model
 22489 ;;
 22490                           
 22491                           
 22492                           ;psect for function ___wmul
 22493  31DE                     ___wmul:	
 22494                           
 22495                           ;incstack = 0
 22496                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 22497  31DE  0140               	movlb	0	; select bank0
 22498  31DF  01B1               	clrf	___wmul@product
 22499  31E0  01B2               	clrf	___wmul@product+1
 22500  31E1                     l7375:	
 22501  31E1  1C2D               	btfss	___wmul@multiplier,0
 22502  31E2  29E7               	goto	l1117
 22503  31E3  082F               	movf	___wmul@multiplicand,w
 22504  31E4  07B1               	addwf	___wmul@product,f
 22505  31E5  0830               	movf	___wmul@multiplicand+1,w
 22506  31E6  3DB2               	addwfc	___wmul@product+1,f
 22507  31E7                     l1117:	
 22508  31E7  3001               	movlw	1
 22509  31E8                     u8015:	
 22510  31E8  35AF               	lslf	___wmul@multiplicand,f
 22511  31E9  0DB0               	rlf	___wmul@multiplicand+1,f
 22512  31EA  0B89               	decfsz	9,f
 22513  31EB  29E8               	goto	u8015
 22514  31EC  3001               	movlw	1
 22515  31ED                     u8025:	
 22516  31ED  36AE               	lsrf	___wmul@multiplier+1,f
 22517  31EE  0CAD               	rrf	___wmul@multiplier,f
 22518  31EF  0B89               	decfsz	9,f
 22519  31F0  29ED               	goto	u8025
 22520  31F1  082D               	movf	___wmul@multiplier,w
 22521  31F2  042E               	iorwf	___wmul@multiplier+1,w
 22522  31F3  1D03               	btfss	3,2
 22523  31F4  29E1               	goto	l7375
 22524  31F5  0832               	movf	___wmul@product+1,w
 22525  31F6  00AE               	movwf	?___wmul+1
 22526  31F7  0831               	movf	___wmul@product,w
 22527  31F8  00AD               	movwf	?___wmul
 22528  31F9  0008               	return
 22529  31FA                     __end_of___wmul:	
 22530                           
 22531                           	psect	text59
 22532  3405                     __ptext59:	
 22533 ;; *************** function ___flsub *****************
 22534 ;; Defined at:
 22535 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 22536 ;; Parameters:    Size  Location     Type
 22537 ;;  a               4    0[BANK1 ] unsigned int 
 22538 ;;  b               4    4[BANK1 ] unsigned int 
 22539 ;; Auto vars:     Size  Location     Type
 22540 ;;		None
 22541 ;; Return value:  Size  Location     Type
 22542 ;;                  4    0[BANK1 ] unsigned int 
 22543 ;; Registers used:
 22544 ;;		wreg, status,2, status,0, pclath, cstack
 22545 ;; Tracked objects:
 22546 ;;		On entry : 0/0
 22547 ;;		On exit  : 0/0
 22548 ;;		Unchanged: 0/0
 22549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22550 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22552 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22553 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22554 ;;Total ram usage:        8 bytes
 22555 ;; Hardware stack levels used:    1
 22556 ;; Hardware stack levels required when called:    4
 22557 ;; This function calls:
 22558 ;;		___fladd
 22559 ;; This function is called by:
 22560 ;;		_spinInput
 22561 ;;		_calcRequiredPower
 22562 ;;		_sortCur
 22563 ;;		_ftoa
 22564 ;; This function uses a non-reentrant model
 22565 ;;
 22566                           
 22567                           
 22568                           ;psect for function ___flsub
 22569  3405                     ___flsub:	
 22570                           
 22571                           ;incstack = 0
 22572                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 22573  3405  3080               	movlw	128
 22574  3406  0141               	movlb	1	; select bank1
 22575  3407  06A3               	xorwf	(___flsub@a+3)^(0+128),f
 22576  3408  0827               	movf	(___flsub@b+3)^(0+128),w
 22577  3409  0140               	movlb	0	; select bank0
 22578  340A  00DE               	movwf	___fladd@b+3
 22579  340B  0141               	movlb	1	; select bank1
 22580  340C  0826               	movf	(___flsub@b+2)^(0+128),w
 22581  340D  0140               	movlb	0	; select bank0
 22582  340E  00DD               	movwf	___fladd@b+2
 22583  340F  0141               	movlb	1	; select bank1
 22584  3410  0825               	movf	(___flsub@b+1)^(0+128),w
 22585  3411  0140               	movlb	0	; select bank0
 22586  3412  00DC               	movwf	___fladd@b+1
 22587  3413  0141               	movlb	1	; select bank1
 22588  3414  0824               	movf	___flsub@b^(0+128),w
 22589  3415  0140               	movlb	0	; select bank0
 22590  3416  00DB               	movwf	___fladd@b
 22591  3417  0141               	movlb	1	; select bank1
 22592  3418  0823               	movf	(___flsub@a+3)^(0+128),w
 22593  3419  0140               	movlb	0	; select bank0
 22594  341A  00E2               	movwf	___fladd@a+3
 22595  341B  0141               	movlb	1	; select bank1
 22596  341C  0822               	movf	(___flsub@a+2)^(0+128),w
 22597  341D  0140               	movlb	0	; select bank0
 22598  341E  00E1               	movwf	___fladd@a+2
 22599  341F  0141               	movlb	1	; select bank1
 22600  3420  0821               	movf	(___flsub@a+1)^(0+128),w
 22601  3421  0140               	movlb	0	; select bank0
 22602  3422  00E0               	movwf	___fladd@a+1
 22603  3423  0141               	movlb	1	; select bank1
 22604  3424  0820               	movf	___flsub@a^(0+128),w
 22605  3425  0140               	movlb	0	; select bank0
 22606  3426  00DF               	movwf	___fladd@a
 22607  3427  3192  2250         	fcall	___fladd
 22608  3429  0140               	movlb	0	; select bank0
 22609  342A  085E               	movf	?___fladd+3,w
 22610  342B  0141               	movlb	1	; select bank1
 22611  342C  00A3               	movwf	(?___flsub+3)^(0+128)
 22612  342D  0140               	movlb	0	; select bank0
 22613  342E  085D               	movf	?___fladd+2,w
 22614  342F  0141               	movlb	1	; select bank1
 22615  3430  00A2               	movwf	(?___flsub+2)^(0+128)
 22616  3431  0140               	movlb	0	; select bank0
 22617  3432  085C               	movf	?___fladd+1,w
 22618  3433  0141               	movlb	1	; select bank1
 22619  3434  00A1               	movwf	(?___flsub+1)^(0+128)
 22620  3435  0140               	movlb	0	; select bank0
 22621  3436  085B               	movf	?___fladd,w
 22622  3437  0141               	movlb	1	; select bank1
 22623  3438  00A0               	movwf	?___flsub^(0+128)
 22624  3439  0008               	return
 22625  343A                     __end_of___flsub:	
 22626                           
 22627                           	psect	text60
 22628  1250                     __ptext60:	
 22629 ;; *************** function ___fladd *****************
 22630 ;; Defined at:
 22631 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 22632 ;; Parameters:    Size  Location     Type
 22633 ;;  b               4   59[BANK0 ] unsigned int 
 22634 ;;  a               4   63[BANK0 ] unsigned int 
 22635 ;; Auto vars:     Size  Location     Type
 22636 ;;  grs             1   78[BANK0 ] unsigned char 
 22637 ;;  bexp            1   77[BANK0 ] unsigned char 
 22638 ;;  aexp            1   76[BANK0 ] unsigned char 
 22639 ;;  signs           1   75[BANK0 ] unsigned char 
 22640 ;; Return value:  Size  Location     Type
 22641 ;;                  4   59[BANK0 ] unsigned char 
 22642 ;; Registers used:
 22643 ;;		wreg, status,2, status,0
 22644 ;; Tracked objects:
 22645 ;;		On entry : 0/0
 22646 ;;		On exit  : 0/0
 22647 ;;		Unchanged: 0/0
 22648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22649 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22650 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22651 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22652 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22653 ;;Total ram usage:       20 bytes
 22654 ;; Hardware stack levels used:    1
 22655 ;; Hardware stack levels required when called:    3
 22656 ;; This function calls:
 22657 ;;		Nothing
 22658 ;; This function is called by:
 22659 ;;		_spinInput
 22660 ;;		_calcRequiredPower
 22661 ;;		_getAnalogValues
 22662 ;;		_channelThing
 22663 ;;		___flsub
 22664 ;; This function uses a non-reentrant model
 22665 ;;
 22666                           
 22667                           
 22668                           ;psect for function ___fladd
 22669  1250                     ___fladd:	
 22670                           
 22671                           ;incstack = 0
 22672                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 22673  1250  0140               	movlb	0	; select bank0
 22674  1251  085E               	movf	___fladd@b+3,w
 22675  1252  3980               	andlw	128
 22676  1253  00E3               	movwf	??___fladd
 22677  1254  0863               	movf	??___fladd,w
 22678  1255  00EB               	movwf	___fladd@signs
 22679  1256  355E               	lslf	___fladd@b+3,w
 22680  1257  00E3               	movwf	??___fladd
 22681  1258  0863               	movf	??___fladd,w
 22682  1259  00ED               	movwf	___fladd@bexp
 22683  125A  1BDD               	btfsc	___fladd@b+2,7
 22684  125B  146D               	bsf	___fladd@bexp,0
 22685  125C  086D               	movf	___fladd@bexp,w
 22686  125D  1903               	btfsc	3,2
 22687  125E  2A6D               	goto	l7121
 22688  125F  0A6D               	incf	___fladd@bexp,w
 22689  1260  1D03               	btfss	3,2
 22690  1261  2A6A               	goto	l7117
 22691  1262  3000               	movlw	0
 22692  1263  00DE               	movwf	___fladd@b+3
 22693  1264  3000               	movlw	0
 22694  1265  00DD               	movwf	___fladd@b+2
 22695  1266  3000               	movlw	0
 22696  1267  00DC               	movwf	___fladd@b+1
 22697  1268  3000               	movlw	0
 22698  1269  00DB               	movwf	___fladd@b
 22699  126A                     l7117:	
 22700  126A  17DD               	bsf	___fladd@b+2,7
 22701  126B  01DE               	clrf	___fladd@b+3
 22702  126C  2A75               	goto	l7123
 22703  126D                     l7121:	
 22704  126D  3000               	movlw	0
 22705  126E  00DE               	movwf	___fladd@b+3
 22706  126F  3000               	movlw	0
 22707  1270  00DD               	movwf	___fladd@b+2
 22708  1271  3000               	movlw	0
 22709  1272  00DC               	movwf	___fladd@b+1
 22710  1273  3000               	movlw	0
 22711  1274  00DB               	movwf	___fladd@b
 22712  1275                     l7123:	
 22713  1275  0862               	movf	___fladd@a+3,w
 22714  1276  3980               	andlw	128
 22715  1277  00E3               	movwf	??___fladd
 22716  1278  0863               	movf	??___fladd,w
 22717  1279  00EC               	movwf	___fladd@aexp
 22718  127A  086C               	movf	___fladd@aexp,w
 22719  127B  066B               	xorwf	___fladd@signs,w
 22720  127C  1D03               	btfss	3,2
 22721  127D  176B               	bsf	___fladd@signs,6
 22722  127E  3562               	lslf	___fladd@a+3,w
 22723  127F  00E3               	movwf	??___fladd
 22724  1280  0863               	movf	??___fladd,w
 22725  1281  00EC               	movwf	___fladd@aexp
 22726  1282  1BE1               	btfsc	___fladd@a+2,7
 22727  1283  146C               	bsf	___fladd@aexp,0
 22728  1284  086C               	movf	___fladd@aexp,w
 22729  1285  1903               	btfsc	3,2
 22730  1286  2A95               	goto	l7145
 22731  1287  0A6C               	incf	___fladd@aexp,w
 22732  1288  1D03               	btfss	3,2
 22733  1289  2A92               	goto	l7141
 22734  128A  3000               	movlw	0
 22735  128B  00E2               	movwf	___fladd@a+3
 22736  128C  3000               	movlw	0
 22737  128D  00E1               	movwf	___fladd@a+2
 22738  128E  3000               	movlw	0
 22739  128F  00E0               	movwf	___fladd@a+1
 22740  1290  3000               	movlw	0
 22741  1291  00DF               	movwf	___fladd@a
 22742  1292                     l7141:	
 22743  1292  17E1               	bsf	___fladd@a+2,7
 22744  1293  01E2               	clrf	___fladd@a+3
 22745  1294  2A9D               	goto	l1418
 22746  1295                     l7145:	
 22747  1295  3000               	movlw	0
 22748  1296  00E2               	movwf	___fladd@a+3
 22749  1297  3000               	movlw	0
 22750  1298  00E1               	movwf	___fladd@a+2
 22751  1299  3000               	movlw	0
 22752  129A  00E0               	movwf	___fladd@a+1
 22753  129B  3000               	movlw	0
 22754  129C  00DF               	movwf	___fladd@a
 22755  129D                     l1418:	
 22756  129D  086D               	movf	___fladd@bexp,w
 22757  129E  026C               	subwf	___fladd@aexp,w
 22758  129F  1803               	skipnc
 22759  12A0  2AE3               	goto	l7181
 22760  12A1  1F6B               	btfss	___fladd@signs,6
 22761  12A2  2AA7               	goto	l7151
 22762  12A3  3080               	movlw	128
 22763  12A4  00E3               	movwf	??___fladd
 22764  12A5  0863               	movf	??___fladd,w
 22765  12A6  06EB               	xorwf	___fladd@signs,f
 22766  12A7                     l7151:	
 22767  12A7  086D               	movf	___fladd@bexp,w
 22768  12A8  00E3               	movwf	??___fladd
 22769  12A9  0863               	movf	??___fladd,w
 22770  12AA  00EE               	movwf	___fladd@grs
 22771  12AB  086C               	movf	___fladd@aexp,w
 22772  12AC  00E3               	movwf	??___fladd
 22773  12AD  0863               	movf	??___fladd,w
 22774  12AE  00ED               	movwf	___fladd@bexp
 22775  12AF  086E               	movf	___fladd@grs,w
 22776  12B0  00E3               	movwf	??___fladd
 22777  12B1  0863               	movf	??___fladd,w
 22778  12B2  00EC               	movwf	___fladd@aexp
 22779  12B3  085B               	movf	___fladd@b,w
 22780  12B4  00E3               	movwf	??___fladd
 22781  12B5  0863               	movf	??___fladd,w
 22782  12B6  00EE               	movwf	___fladd@grs
 22783  12B7  085F               	movf	___fladd@a,w
 22784  12B8  00E3               	movwf	??___fladd
 22785  12B9  0863               	movf	??___fladd,w
 22786  12BA  00DB               	movwf	___fladd@b
 22787  12BB  086E               	movf	___fladd@grs,w
 22788  12BC  00E3               	movwf	??___fladd
 22789  12BD  0863               	movf	??___fladd,w
 22790  12BE  00DF               	movwf	___fladd@a
 22791  12BF  085C               	movf	___fladd@b+1,w
 22792  12C0  00E3               	movwf	??___fladd
 22793  12C1  0863               	movf	??___fladd,w
 22794  12C2  00EE               	movwf	___fladd@grs
 22795  12C3  0860               	movf	___fladd@a+1,w
 22796  12C4  00E3               	movwf	??___fladd
 22797  12C5  0863               	movf	??___fladd,w
 22798  12C6  00DC               	movwf	___fladd@b+1
 22799  12C7  086E               	movf	___fladd@grs,w
 22800  12C8  00E3               	movwf	??___fladd
 22801  12C9  0863               	movf	??___fladd,w
 22802  12CA  00E0               	movwf	___fladd@a+1
 22803  12CB  085D               	movf	___fladd@b+2,w
 22804  12CC  00E3               	movwf	??___fladd
 22805  12CD  0863               	movf	??___fladd,w
 22806  12CE  00EE               	movwf	___fladd@grs
 22807  12CF  0861               	movf	___fladd@a+2,w
 22808  12D0  00E3               	movwf	??___fladd
 22809  12D1  0863               	movf	??___fladd,w
 22810  12D2  00DD               	movwf	___fladd@b+2
 22811  12D3  086E               	movf	___fladd@grs,w
 22812  12D4  00E3               	movwf	??___fladd
 22813  12D5  0863               	movf	??___fladd,w
 22814  12D6  00E1               	movwf	___fladd@a+2
 22815  12D7  085E               	movf	___fladd@b+3,w
 22816  12D8  00E3               	movwf	??___fladd
 22817  12D9  0863               	movf	??___fladd,w
 22818  12DA  00EE               	movwf	___fladd@grs
 22819  12DB  0862               	movf	___fladd@a+3,w
 22820  12DC  00E3               	movwf	??___fladd
 22821  12DD  0863               	movf	??___fladd,w
 22822  12DE  00DE               	movwf	___fladd@b+3
 22823  12DF  086E               	movf	___fladd@grs,w
 22824  12E0  00E3               	movwf	??___fladd
 22825  12E1  0863               	movf	??___fladd,w
 22826  12E2  00E2               	movwf	___fladd@a+3
 22827  12E3                     l7181:	
 22828  12E3  01EE               	clrf	___fladd@grs
 22829  12E4  086C               	movf	___fladd@aexp,w
 22830  12E5  00E3               	movwf	??___fladd
 22831  12E6  01E4               	clrf	??___fladd+1
 22832  12E7  0864               	movf	??___fladd+1,w
 22833  12E8  00E6               	movwf	??___fladd+3
 22834  12E9  086D               	movf	___fladd@bexp,w
 22835  12EA  0263               	subwf	??___fladd,w
 22836  12EB  00E5               	movwf	??___fladd+2
 22837  12EC  1C03               	skipc
 22838  12ED  03E6               	decf	??___fladd+3,f
 22839  12EE  0866               	movf	??___fladd+3,w
 22840  12EF  3A80               	xorlw	128
 22841  12F0  00E7               	movwf	??___fladd+4
 22842  12F1  3080               	movlw	128
 22843  12F2  0267               	subwf	??___fladd+4,w
 22844  12F3  1D03               	skipz
 22845  12F4  2AF7               	goto	u7605
 22846  12F5  301A               	movlw	26
 22847  12F6  0265               	subwf	??___fladd+2,w
 22848  12F7                     u7605:	
 22849  12F7  1C03               	skipc
 22850  12F8  2B2B               	goto	l7199
 22851  12F9  0140               	movlb	0	; select bank0
 22852  12FA  085E               	movf	___fladd@b+3,w
 22853  12FB  045D               	iorwf	___fladd@b+2,w
 22854  12FC  045C               	iorwf	___fladd@b+1,w
 22855  12FD  045B               	iorwf	___fladd@b,w
 22856  12FE  1903               	btfsc	3,2
 22857  12FF  2B02               	goto	u7610
 22858  1300  3001               	movlw	1
 22859  1301  2B03               	goto	u7620
 22860  1302                     u7610:	
 22861  1302  3000               	movlw	0
 22862  1303                     u7620:	
 22863  1303  00E3               	movwf	??___fladd
 22864  1304  0863               	movf	??___fladd,w
 22865  1305  00EE               	movwf	___fladd@grs
 22866  1306  3000               	movlw	0
 22867  1307  00DE               	movwf	___fladd@b+3
 22868  1308  3000               	movlw	0
 22869  1309  00DD               	movwf	___fladd@b+2
 22870  130A  3000               	movlw	0
 22871  130B  00DC               	movwf	___fladd@b+1
 22872  130C  3000               	movlw	0
 22873  130D  00DB               	movwf	___fladd@b
 22874  130E  086C               	movf	___fladd@aexp,w
 22875  130F  00E3               	movwf	??___fladd
 22876  1310  0863               	movf	??___fladd,w
 22877  1311  00ED               	movwf	___fladd@bexp
 22878  1312  2B30               	goto	l1422
 22879  1313                     l1424:	
 22880  1313  1C6E               	btfss	___fladd@grs,0
 22881  1314  2B1B               	goto	l7189
 22882  1315  366E               	lsrf	___fladd@grs,w
 22883  1316  3801               	iorlw	1
 22884  1317  00E3               	movwf	??___fladd
 22885  1318  0863               	movf	??___fladd,w
 22886  1319  00EE               	movwf	___fladd@grs
 22887  131A  2B1D               	goto	l7191
 22888  131B                     l7189:	
 22889  131B  1003               	clrc
 22890  131C  0CEE               	rrf	___fladd@grs,f
 22891  131D                     l7191:	
 22892  131D  185B               	btfsc	___fladd@b,0
 22893  131E  17EE               	bsf	___fladd@grs,7
 22894  131F  3001               	movlw	1
 22895  1320  00E3               	movwf	??___fladd
 22896  1321                     u7655:	
 22897  1321  37DE               	asrf	___fladd@b+3,f
 22898  1322  0CDD               	rrf	___fladd@b+2,f
 22899  1323  0CDC               	rrf	___fladd@b+1,f
 22900  1324  0CDB               	rrf	___fladd@b,f
 22901  1325  0BE3               	decfsz	??___fladd& (0+127),f
 22902  1326  2B21               	goto	u7655
 22903  1327  3001               	movlw	1
 22904  1328  00E3               	movwf	??___fladd
 22905  1329  0863               	movf	??___fladd,w
 22906  132A  07ED               	addwf	___fladd@bexp,f
 22907  132B                     l7199:	
 22908  132B  0140               	movlb	0	; select bank0
 22909  132C  086C               	movf	___fladd@aexp,w
 22910  132D  026D               	subwf	___fladd@bexp,w
 22911  132E  1C03               	skipc
 22912  132F  2B13               	goto	l1424
 22913  1330                     l1422:	
 22914  1330  1B6B               	btfsc	___fladd@signs,6
 22915  1331  2B61               	goto	l7225
 22916  1332  086D               	movf	___fladd@bexp,w
 22917  1333  1D03               	btfss	3,2
 22918  1334  2B3E               	goto	l7207
 22919  1335  3000               	movlw	0
 22920  1336  00DE               	movwf	?___fladd+3
 22921  1337  3000               	movlw	0
 22922  1338  00DD               	movwf	?___fladd+2
 22923  1339  3000               	movlw	0
 22924  133A  00DC               	movwf	?___fladd+1
 22925  133B  3000               	movlw	0
 22926  133C  00DB               	movwf	?___fladd
 22927  133D  0008               	return
 22928  133E                     l7207:	
 22929  133E  085F               	movf	___fladd@a,w
 22930  133F  07DB               	addwf	___fladd@b,f
 22931  1340  0860               	movf	___fladd@a+1,w
 22932  1341  3DDC               	addwfc	___fladd@b+1,f
 22933  1342  0861               	movf	___fladd@a+2,w
 22934  1343  3DDD               	addwfc	___fladd@b+2,f
 22935  1344  0862               	movf	___fladd@a+3,w
 22936  1345  3DDE               	addwfc	___fladd@b+3,f
 22937  1346  1C5E               	btfss	___fladd@b+3,0
 22938  1347  2BDB               	goto	l7259
 22939  1348  1C6E               	btfss	___fladd@grs,0
 22940  1349  2B50               	goto	l7215
 22941  134A  366E               	lsrf	___fladd@grs,w
 22942  134B  3801               	iorlw	1
 22943  134C  00E3               	movwf	??___fladd
 22944  134D  0863               	movf	??___fladd,w
 22945  134E  00EE               	movwf	___fladd@grs
 22946  134F  2B52               	goto	l7217
 22947  1350                     l7215:	
 22948  1350  1003               	clrc
 22949  1351  0CEE               	rrf	___fladd@grs,f
 22950  1352                     l7217:	
 22951  1352  185B               	btfsc	___fladd@b,0
 22952  1353  17EE               	bsf	___fladd@grs,7
 22953  1354  3001               	movlw	1
 22954  1355  00E3               	movwf	??___fladd
 22955  1356                     u7725:	
 22956  1356  37DE               	asrf	___fladd@b+3,f
 22957  1357  0CDD               	rrf	___fladd@b+2,f
 22958  1358  0CDC               	rrf	___fladd@b+1,f
 22959  1359  0CDB               	rrf	___fladd@b,f
 22960  135A  0BE3               	decfsz	??___fladd& (0+127),f
 22961  135B  2B56               	goto	u7725
 22962  135C  3001               	movlw	1
 22963  135D  00E3               	movwf	??___fladd
 22964  135E  0863               	movf	??___fladd,w
 22965  135F  07ED               	addwf	___fladd@bexp,f
 22966  1360  2BDB               	goto	l7259
 22967  1361                     l7225:	
 22968  1361  085E               	movf	___fladd@b+3,w
 22969  1362  3A80               	xorlw	128
 22970  1363  00E3               	movwf	??___fladd
 22971  1364  0862               	movf	___fladd@a+3,w
 22972  1365  3A80               	xorlw	128
 22973  1366  0263               	subwf	??___fladd,w
 22974  1367  1D03               	skipz
 22975  1368  2B73               	goto	u7733
 22976  1369  0861               	movf	___fladd@a+2,w
 22977  136A  025D               	subwf	___fladd@b+2,w
 22978  136B  1D03               	skipz
 22979  136C  2B73               	goto	u7733
 22980  136D  0860               	movf	___fladd@a+1,w
 22981  136E  025C               	subwf	___fladd@b+1,w
 22982  136F  1D03               	skipz
 22983  1370  2B73               	goto	u7733
 22984  1371  085F               	movf	___fladd@a,w
 22985  1372  025B               	subwf	___fladd@b,w
 22986  1373                     u7733:	
 22987  1373  1803               	skipnc
 22988  1374  2BAB               	goto	l7235
 22989  1375  30FF               	movlw	255
 22990  1376  00E3               	movwf	??___fladd
 22991  1377  30FF               	movlw	255
 22992  1378  00E4               	movwf	??___fladd+1
 22993  1379  30FF               	movlw	255
 22994  137A  00E5               	movwf	??___fladd+2
 22995  137B  30FF               	movlw	255
 22996  137C  00E6               	movwf	??___fladd+3
 22997  137D  085B               	movf	___fladd@b,w
 22998  137E  025F               	subwf	___fladd@a,w
 22999  137F  00E7               	movwf	??___fladd+4
 23000  1380  085C               	movf	___fladd@b+1,w
 23001  1381  3B60               	subwfb	___fladd@a+1,w
 23002  1382  00E8               	movwf	??___fladd+5
 23003  1383  085D               	movf	___fladd@b+2,w
 23004  1384  3B61               	subwfb	___fladd@a+2,w
 23005  1385  00E9               	movwf	??___fladd+6
 23006  1386  085E               	movf	___fladd@b+3,w
 23007  1387  3B62               	subwfb	___fladd@a+3,w
 23008  1388  00EA               	movwf	??___fladd+7
 23009  1389  0867               	movf	??___fladd+4,w
 23010  138A  07E3               	addwf	??___fladd,f
 23011  138B  0868               	movf	??___fladd+5,w
 23012  138C  3DE4               	addwfc	??___fladd+1,f
 23013  138D  0869               	movf	??___fladd+6,w
 23014  138E  3DE5               	addwfc	??___fladd+2,f
 23015  138F  086A               	movf	??___fladd+7,w
 23016  1390  3DE6               	addwfc	??___fladd+3,f
 23017  1391  0866               	movf	??___fladd+3,w
 23018  1392  00DE               	movwf	___fladd@b+3
 23019  1393  0865               	movf	??___fladd+2,w
 23020  1394  00DD               	movwf	___fladd@b+2
 23021  1395  0864               	movf	??___fladd+1,w
 23022  1396  00DC               	movwf	___fladd@b+1
 23023  1397  0863               	movf	??___fladd,w
 23024  1398  00DB               	movwf	___fladd@b
 23025  1399  3080               	movlw	128
 23026  139A  00E3               	movwf	??___fladd
 23027  139B  0863               	movf	??___fladd,w
 23028  139C  06EB               	xorwf	___fladd@signs,f
 23029  139D  09EE               	comf	___fladd@grs,f
 23030  139E  0AEE               	incf	___fladd@grs,f
 23031  139F  086E               	movf	___fladd@grs,w
 23032  13A0  1D03               	btfss	3,2
 23033  13A1  2BB3               	goto	l1439
 23034  13A2  3001               	movlw	1
 23035  13A3  07DB               	addwf	___fladd@b,f
 23036  13A4  3000               	movlw	0
 23037  13A5  3DDC               	addwfc	___fladd@b+1,f
 23038  13A6  3000               	movlw	0
 23039  13A7  3DDD               	addwfc	___fladd@b+2,f
 23040  13A8  3000               	movlw	0
 23041  13A9  3DDE               	addwfc	___fladd@b+3,f
 23042  13AA  2BB3               	goto	l1439
 23043  13AB                     l7235:	
 23044  13AB  085F               	movf	___fladd@a,w
 23045  13AC  02DB               	subwf	___fladd@b,f
 23046  13AD  0860               	movf	___fladd@a+1,w
 23047  13AE  3BDC               	subwfb	___fladd@b+1,f
 23048  13AF  0861               	movf	___fladd@a+2,w
 23049  13B0  3BDD               	subwfb	___fladd@b+2,f
 23050  13B1  0862               	movf	___fladd@a+3,w
 23051  13B2  3BDE               	subwfb	___fladd@b+3,f
 23052  13B3                     l1439:	
 23053  13B3  085E               	movf	___fladd@b+3,w
 23054  13B4  045D               	iorwf	___fladd@b+2,w
 23055  13B5  045C               	iorwf	___fladd@b+1,w
 23056  13B6  045B               	iorwf	___fladd@b,w
 23057  13B7  1D03               	skipz
 23058  13B8  2BD9               	goto	l7257
 23059  13B9  086E               	movf	___fladd@grs,w
 23060  13BA  1D03               	btfss	3,2
 23061  13BB  2BD9               	goto	l7257
 23062  13BC  3000               	movlw	0
 23063  13BD  00DE               	movwf	?___fladd+3
 23064  13BE  3000               	movlw	0
 23065  13BF  00DD               	movwf	?___fladd+2
 23066  13C0  3000               	movlw	0
 23067  13C1  00DC               	movwf	?___fladd+1
 23068  13C2  3000               	movlw	0
 23069  13C3  00DB               	movwf	?___fladd
 23070  13C4  0008               	return
 23071  13C5                     l7243:	
 23072  13C5  3001               	movlw	1
 23073  13C6                     u7775:	
 23074  13C6  35DB               	lslf	___fladd@b,f
 23075  13C7  0DDC               	rlf	___fladd@b+1,f
 23076  13C8  0DDD               	rlf	___fladd@b+2,f
 23077  13C9  0DDE               	rlf	___fladd@b+3,f
 23078  13CA  0B89               	decfsz	9,f
 23079  13CB  2BC6               	goto	u7775
 23080  13CC  1BEE               	btfsc	___fladd@grs,7
 23081  13CD  145B               	bsf	___fladd@b,0
 23082  13CE  1C6E               	btfss	___fladd@grs,0
 23083  13CF  2BD2               	goto	l7251
 23084  13D0  1403               	setc
 23085  13D1  2BD3               	goto	L13
 23086  13D2                     l7251:	
 23087  13D2  1003               	clrc
 23088  13D3                     L13:	
 23089  13D3  0DEE               	rlf	___fladd@grs,f
 23090  13D4  086D               	movf	___fladd@bexp,w
 23091  13D5  1903               	btfsc	3,2
 23092  13D6  2BD9               	goto	l7257
 23093  13D7  3001               	movlw	1
 23094  13D8  02ED               	subwf	___fladd@bexp,f
 23095  13D9                     l7257:	
 23096  13D9  1FDD               	btfss	___fladd@b+2,7
 23097  13DA  2BC5               	goto	l7243
 23098  13DB                     l7259:	
 23099  13DB  01EC               	clrf	___fladd@aexp
 23100  13DC  1FEE               	btfss	___fladd@grs,7
 23101  13DD  2BE6               	goto	l7269
 23102  13DE  086E               	movf	___fladd@grs,w
 23103  13DF  397F               	andlw	127
 23104  13E0  1903               	btfsc	3,2
 23105  13E1  185B               	btfsc	___fladd@b,0
 23106  13E2  2BE4               	goto	l7265
 23107  13E3  2BE6               	goto	l7269
 23108  13E4                     l7265:	
 23109  13E4  01EC               	clrf	___fladd@aexp
 23110  13E5  0AEC               	incf	___fladd@aexp,f
 23111  13E6                     l7269:	
 23112  13E6  086C               	movf	___fladd@aexp,w
 23113  13E7  1903               	btfsc	3,2
 23114  13E8  2C12               	goto	l1452
 23115  13E9  3001               	movlw	1
 23116  13EA  07DB               	addwf	___fladd@b,f
 23117  13EB  3000               	movlw	0
 23118  13EC  3DDC               	addwfc	___fladd@b+1,f
 23119  13ED  3000               	movlw	0
 23120  13EE  3DDD               	addwfc	___fladd@b+2,f
 23121  13EF  3000               	movlw	0
 23122  13F0  3DDE               	addwfc	___fladd@b+3,f
 23123  13F1  1C5E               	btfss	___fladd@b+3,0
 23124  13F2  2C12               	goto	l1452
 23125  13F3  085B               	movf	___fladd@b,w
 23126  13F4  00E3               	movwf	??___fladd
 23127  13F5  085C               	movf	___fladd@b+1,w
 23128  13F6  00E4               	movwf	??___fladd+1
 23129  13F7  085D               	movf	___fladd@b+2,w
 23130  13F8  00E5               	movwf	??___fladd+2
 23131  13F9  085E               	movf	___fladd@b+3,w
 23132  13FA  00E6               	movwf	??___fladd+3
 23133  13FB  3001               	movlw	1
 23134  13FC  00E7               	movwf	??___fladd+4
 23135  13FD                     u7875:	
 23136  13FD  37E6               	asrf	??___fladd+3,f
 23137  13FE  0CE5               	rrf	??___fladd+2,f
 23138  13FF  0CE4               	rrf	??___fladd+1,f
 23139  1400  0CE3               	rrf	??___fladd,f
 23140  1401  0BE7               	decfsz	??___fladd+4,f
 23141  1402  2BFD               	goto	u7875
 23142  1403  0866               	movf	??___fladd+3,w
 23143  1404  00DE               	movwf	___fladd@b+3
 23144  1405  0865               	movf	??___fladd+2,w
 23145  1406  00DD               	movwf	___fladd@b+2
 23146  1407  0864               	movf	??___fladd+1,w
 23147  1408  00DC               	movwf	___fladd@b+1
 23148  1409  0863               	movf	??___fladd,w
 23149  140A  00DB               	movwf	___fladd@b
 23150  140B  0A6D               	incf	___fladd@bexp,w
 23151  140C  1903               	btfsc	3,2
 23152  140D  2C12               	goto	l1452
 23153  140E  3001               	movlw	1
 23154  140F  00E3               	movwf	??___fladd
 23155  1410  0863               	movf	??___fladd,w
 23156  1411  07ED               	addwf	___fladd@bexp,f
 23157  1412                     l1452:	
 23158  1412  0A6D               	incf	___fladd@bexp,w
 23159  1413  1D03               	btfss	3,2
 23160  1414  086D               	movf	___fladd@bexp,w
 23161  1415  1D03               	btfss	3,2
 23162  1416  2C22               	goto	l7287
 23163  1417  3000               	movlw	0
 23164  1418  00DE               	movwf	___fladd@b+3
 23165  1419  3000               	movlw	0
 23166  141A  00DD               	movwf	___fladd@b+2
 23167  141B  3000               	movlw	0
 23168  141C  00DC               	movwf	___fladd@b+1
 23169  141D  3000               	movlw	0
 23170  141E  00DB               	movwf	___fladd@b
 23171  141F  086D               	movf	___fladd@bexp,w
 23172  1420  1903               	btfsc	3,2
 23173  1421  01EB               	clrf	___fladd@signs
 23174  1422                     l7287:	
 23175  1422  1C6D               	btfss	___fladd@bexp,0
 23176  1423  2C26               	goto	l7291
 23177  1424  17DD               	bsf	___fladd@b+2,7
 23178  1425  2C2A               	goto	l1460
 23179  1426                     l7291:	
 23180  1426  307F               	movlw	127
 23181  1427  00E3               	movwf	??___fladd
 23182  1428  0863               	movf	??___fladd,w
 23183  1429  05DD               	andwf	___fladd@b+2,f
 23184  142A                     l1460:	
 23185  142A  366D               	lsrf	___fladd@bexp,w
 23186  142B  00E3               	movwf	??___fladd
 23187  142C  0863               	movf	??___fladd,w
 23188  142D  00DE               	movwf	___fladd@b+3
 23189  142E  1FEB               	btfss	___fladd@signs,7
 23190  142F  0008               	return
 23191  1430  17DE               	bsf	___fladd@b+3,7
 23192  1431  0008               	return
 23193  1432                     __end_of___fladd:	
 23194                           
 23195                           	psect	text61
 23196  0561                     __ptext61:	
 23197 ;; *************** function ___flmul *****************
 23198 ;; Defined at:
 23199 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 23200 ;; Parameters:    Size  Location     Type
 23201 ;;  b               4   33[BANK0 ] unsigned char 
 23202 ;;  a               4   37[BANK0 ] unsigned char 
 23203 ;; Auto vars:     Size  Location     Type
 23204 ;;  prod            4   53[BANK0 ] struct .
 23205 ;;  grs             4   48[BANK0 ] unsigned long 
 23206 ;;  temp            2   57[BANK0 ] struct .
 23207 ;;  bexp            1   52[BANK0 ] unsigned char 
 23208 ;;  aexp            1   47[BANK0 ] unsigned char 
 23209 ;;  sign            1   46[BANK0 ] unsigned char 
 23210 ;; Return value:  Size  Location     Type
 23211 ;;                  4   33[BANK0 ] unsigned char 
 23212 ;; Registers used:
 23213 ;;		wreg, status,2, status,0, pclath, cstack
 23214 ;; Tracked objects:
 23215 ;;		On entry : 0/0
 23216 ;;		On exit  : 0/0
 23217 ;;		Unchanged: 0/0
 23218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23219 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23220 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23221 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23222 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23223 ;;Total ram usage:       26 bytes
 23224 ;; Hardware stack levels used:    1
 23225 ;; Hardware stack levels required when called:    4
 23226 ;; This function calls:
 23227 ;;		__Umul8_16
 23228 ;; This function is called by:
 23229 ;;		_checkChannelStatus
 23230 ;;		_systemCheck
 23231 ;;		_calcRequiredPower
 23232 ;;		_getAnalogValues
 23233 ;;		_channelThing
 23234 ;;		_ftoa
 23235 ;; This function uses a non-reentrant model
 23236 ;;
 23237                           
 23238                           
 23239                           ;psect for function ___flmul
 23240  0561                     ___flmul:	
 23241                           
 23242                           ;incstack = 0
 23243                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 23244  0561  0140               	movlb	0	; select bank0
 23245  0562  0844               	movf	___flmul@b+3,w
 23246  0563  3980               	andlw	128
 23247  0564  00C9               	movwf	??___flmul
 23248  0565  0849               	movf	??___flmul,w
 23249  0566  00CE               	movwf	___flmul@sign
 23250  0567  3544               	lslf	___flmul@b+3,w
 23251  0568  00C9               	movwf	??___flmul
 23252  0569  0849               	movf	??___flmul,w
 23253  056A  00D4               	movwf	___flmul@bexp
 23254  056B  1BC3               	btfsc	___flmul@b+2,7
 23255  056C  1454               	bsf	___flmul@bexp,0
 23256  056D  0854               	movf	___flmul@bexp,w
 23257  056E  1903               	btfsc	3,2
 23258  056F  2D7D               	goto	l7701
 23259  0570  0A54               	incf	___flmul@bexp,w
 23260  0571  1D03               	btfss	3,2
 23261  0572  2D7B               	goto	l7699
 23262  0573  3000               	movlw	0
 23263  0574  00C4               	movwf	___flmul@b+3
 23264  0575  3000               	movlw	0
 23265  0576  00C3               	movwf	___flmul@b+2
 23266  0577  3000               	movlw	0
 23267  0578  00C2               	movwf	___flmul@b+1
 23268  0579  3000               	movlw	0
 23269  057A  00C1               	movwf	___flmul@b
 23270  057B                     l7699:	
 23271  057B  17C3               	bsf	___flmul@b+2,7
 23272  057C  2D85               	goto	l7703
 23273  057D                     l7701:	
 23274  057D  3000               	movlw	0
 23275  057E  00C4               	movwf	___flmul@b+3
 23276  057F  3000               	movlw	0
 23277  0580  00C3               	movwf	___flmul@b+2
 23278  0581  3000               	movlw	0
 23279  0582  00C2               	movwf	___flmul@b+1
 23280  0583  3000               	movlw	0
 23281  0584  00C1               	movwf	___flmul@b
 23282  0585                     l7703:	
 23283  0585  0848               	movf	___flmul@a+3,w
 23284  0586  3980               	andlw	128
 23285  0587  00C9               	movwf	??___flmul
 23286  0588  0849               	movf	??___flmul,w
 23287  0589  06CE               	xorwf	___flmul@sign,f
 23288  058A  3548               	lslf	___flmul@a+3,w
 23289  058B  00C9               	movwf	??___flmul
 23290  058C  0849               	movf	??___flmul,w
 23291  058D  00CF               	movwf	___flmul@aexp
 23292  058E  1BC7               	btfsc	___flmul@a+2,7
 23293  058F  144F               	bsf	___flmul@aexp,0
 23294  0590  084F               	movf	___flmul@aexp,w
 23295  0591  1903               	btfsc	3,2
 23296  0592  2DA0               	goto	l7719
 23297  0593  0A4F               	incf	___flmul@aexp,w
 23298  0594  1D03               	btfss	3,2
 23299  0595  2D9E               	goto	l7717
 23300  0596  3000               	movlw	0
 23301  0597  00C8               	movwf	___flmul@a+3
 23302  0598  3000               	movlw	0
 23303  0599  00C7               	movwf	___flmul@a+2
 23304  059A  3000               	movlw	0
 23305  059B  00C6               	movwf	___flmul@a+1
 23306  059C  3000               	movlw	0
 23307  059D  00C5               	movwf	___flmul@a
 23308  059E                     l7717:	
 23309  059E  17C7               	bsf	___flmul@a+2,7
 23310  059F  2DA8               	goto	l7721
 23311  05A0                     l7719:	
 23312  05A0  3000               	movlw	0
 23313  05A1  00C8               	movwf	___flmul@a+3
 23314  05A2  3000               	movlw	0
 23315  05A3  00C7               	movwf	___flmul@a+2
 23316  05A4  3000               	movlw	0
 23317  05A5  00C6               	movwf	___flmul@a+1
 23318  05A6  3000               	movlw	0
 23319  05A7  00C5               	movwf	___flmul@a
 23320  05A8                     l7721:	
 23321  05A8  084F               	movf	___flmul@aexp,w
 23322  05A9  1D03               	btfss	3,2
 23323  05AA  0854               	movf	___flmul@bexp,w
 23324  05AB  1D03               	btfss	3,2
 23325  05AC  2DB6               	goto	l7729
 23326  05AD  3000               	movlw	0
 23327  05AE  00C4               	movwf	?___flmul+3
 23328  05AF  3000               	movlw	0
 23329  05B0  00C3               	movwf	?___flmul+2
 23330  05B1  3000               	movlw	0
 23331  05B2  00C2               	movwf	?___flmul+1
 23332  05B3  3000               	movlw	0
 23333  05B4  00C1               	movwf	?___flmul
 23334  05B5  0008               	return
 23335  05B6                     l7729:	
 23336  05B6  0841               	movf	___flmul@b,w
 23337  05B7  00C9               	movwf	??___flmul
 23338  05B8  0849               	movf	??___flmul,w
 23339  05B9  00A0               	movwf	__Umul8_16@multiplicand
 23340  05BA  0847               	movf	___flmul@a+2,w
 23341  05BB  31B2  2217  3185   	fcall	__Umul8_16
 23342  05BE  0140               	movlb	0	; select bank0
 23343  05BF  0821               	movf	?__Umul8_16+1,w
 23344  05C0  00DA               	movwf	___flmul@temp+1
 23345  05C1  0820               	movf	?__Umul8_16,w
 23346  05C2  00D9               	movwf	___flmul@temp
 23347  05C3  0859               	movf	___flmul@temp,w
 23348  05C4  00C9               	movwf	??___flmul
 23349  05C5  01CA               	clrf	??___flmul+1
 23350  05C6  01CB               	clrf	??___flmul+2
 23351  05C7  01CC               	clrf	??___flmul+3
 23352  05C8  084C               	movf	??___flmul+3,w
 23353  05C9  00D3               	movwf	___flmul@grs+3
 23354  05CA  084B               	movf	??___flmul+2,w
 23355  05CB  00D2               	movwf	___flmul@grs+2
 23356  05CC  084A               	movf	??___flmul+1,w
 23357  05CD  00D1               	movwf	___flmul@grs+1
 23358  05CE  0849               	movf	??___flmul,w
 23359  05CF  00D0               	movwf	___flmul@grs
 23360  05D0  085A               	movf	___flmul@temp+1,w
 23361  05D1  00C9               	movwf	??___flmul
 23362  05D2  01CA               	clrf	??___flmul+1
 23363  05D3  01CB               	clrf	??___flmul+2
 23364  05D4  01CC               	clrf	??___flmul+3
 23365  05D5  084C               	movf	??___flmul+3,w
 23366  05D6  00D8               	movwf	___flmul@prod+3
 23367  05D7  084B               	movf	??___flmul+2,w
 23368  05D8  00D7               	movwf	___flmul@prod+2
 23369  05D9  084A               	movf	??___flmul+1,w
 23370  05DA  00D6               	movwf	___flmul@prod+1
 23371  05DB  0849               	movf	??___flmul,w
 23372  05DC  00D5               	movwf	___flmul@prod
 23373  05DD  0842               	movf	___flmul@b+1,w
 23374  05DE  00C9               	movwf	??___flmul
 23375  05DF  0849               	movf	??___flmul,w
 23376  05E0  00A0               	movwf	__Umul8_16@multiplicand
 23377  05E1  0846               	movf	___flmul@a+1,w
 23378  05E2  31B2  2217  3185   	fcall	__Umul8_16
 23379  05E5  0140               	movlb	0	; select bank0
 23380  05E6  0821               	movf	?__Umul8_16+1,w
 23381  05E7  00DA               	movwf	___flmul@temp+1
 23382  05E8  0820               	movf	?__Umul8_16,w
 23383  05E9  00D9               	movwf	___flmul@temp
 23384  05EA  0859               	movf	___flmul@temp,w
 23385  05EB  00C9               	movwf	??___flmul
 23386  05EC  01CA               	clrf	??___flmul+1
 23387  05ED  01CB               	clrf	??___flmul+2
 23388  05EE  01CC               	clrf	??___flmul+3
 23389  05EF  0849               	movf	??___flmul,w
 23390  05F0  07D0               	addwf	___flmul@grs,f
 23391  05F1  084A               	movf	??___flmul+1,w
 23392  05F2  3DD1               	addwfc	___flmul@grs+1,f
 23393  05F3  084B               	movf	??___flmul+2,w
 23394  05F4  3DD2               	addwfc	___flmul@grs+2,f
 23395  05F5  084C               	movf	??___flmul+3,w
 23396  05F6  3DD3               	addwfc	___flmul@grs+3,f
 23397  05F7  085A               	movf	___flmul@temp+1,w
 23398  05F8  00C9               	movwf	??___flmul
 23399  05F9  01CA               	clrf	??___flmul+1
 23400  05FA  01CB               	clrf	??___flmul+2
 23401  05FB  01CC               	clrf	??___flmul+3
 23402  05FC  0849               	movf	??___flmul,w
 23403  05FD  07D5               	addwf	___flmul@prod,f
 23404  05FE  084A               	movf	??___flmul+1,w
 23405  05FF  3DD6               	addwfc	___flmul@prod+1,f
 23406  0600  084B               	movf	??___flmul+2,w
 23407  0601  3DD7               	addwfc	___flmul@prod+2,f
 23408  0602  084C               	movf	??___flmul+3,w
 23409  0603  3DD8               	addwfc	___flmul@prod+3,f
 23410  0604  0843               	movf	___flmul@b+2,w
 23411  0605  00C9               	movwf	??___flmul
 23412  0606  0849               	movf	??___flmul,w
 23413  0607  00A0               	movwf	__Umul8_16@multiplicand
 23414  0608  0845               	movf	___flmul@a,w
 23415  0609  31B2  2217  3185   	fcall	__Umul8_16
 23416  060C  0140               	movlb	0	; select bank0
 23417  060D  0821               	movf	?__Umul8_16+1,w
 23418  060E  00DA               	movwf	___flmul@temp+1
 23419  060F  0820               	movf	?__Umul8_16,w
 23420  0610  00D9               	movwf	___flmul@temp
 23421  0611  0859               	movf	___flmul@temp,w
 23422  0612  00C9               	movwf	??___flmul
 23423  0613  01CA               	clrf	??___flmul+1
 23424  0614  01CB               	clrf	??___flmul+2
 23425  0615  01CC               	clrf	??___flmul+3
 23426  0616  0849               	movf	??___flmul,w
 23427  0617  07D0               	addwf	___flmul@grs,f
 23428  0618  084A               	movf	??___flmul+1,w
 23429  0619  3DD1               	addwfc	___flmul@grs+1,f
 23430  061A  084B               	movf	??___flmul+2,w
 23431  061B  3DD2               	addwfc	___flmul@grs+2,f
 23432  061C  084C               	movf	??___flmul+3,w
 23433  061D  3DD3               	addwfc	___flmul@grs+3,f
 23434  061E  085A               	movf	___flmul@temp+1,w
 23435  061F  00C9               	movwf	??___flmul
 23436  0620  01CA               	clrf	??___flmul+1
 23437  0621  01CB               	clrf	??___flmul+2
 23438  0622  01CC               	clrf	??___flmul+3
 23439  0623  0849               	movf	??___flmul,w
 23440  0624  07D5               	addwf	___flmul@prod,f
 23441  0625  084A               	movf	??___flmul+1,w
 23442  0626  3DD6               	addwfc	___flmul@prod+1,f
 23443  0627  084B               	movf	??___flmul+2,w
 23444  0628  3DD7               	addwfc	___flmul@prod+2,f
 23445  0629  084C               	movf	??___flmul+3,w
 23446  062A  3DD8               	addwfc	___flmul@prod+3,f
 23447  062B  3008               	movlw	8
 23448  062C                     u8775:	
 23449  062C  35D0               	lslf	___flmul@grs,f
 23450  062D  0DD1               	rlf	___flmul@grs+1,f
 23451  062E  0DD2               	rlf	___flmul@grs+2,f
 23452  062F  0DD3               	rlf	___flmul@grs+3,f
 23453  0630  0B89               	decfsz	9,f
 23454  0631  2E2C               	goto	u8775
 23455  0632  0842               	movf	___flmul@b+1,w
 23456  0633  00C9               	movwf	??___flmul
 23457  0634  0849               	movf	??___flmul,w
 23458  0635  00A0               	movwf	__Umul8_16@multiplicand
 23459  0636  0845               	movf	___flmul@a,w
 23460  0637  31B2  2217  3185   	fcall	__Umul8_16
 23461  063A  0140               	movlb	0	; select bank0
 23462  063B  0821               	movf	?__Umul8_16+1,w
 23463  063C  00DA               	movwf	___flmul@temp+1
 23464  063D  0820               	movf	?__Umul8_16,w
 23465  063E  00D9               	movwf	___flmul@temp
 23466  063F  0859               	movf	___flmul@temp,w
 23467  0640  07D0               	addwf	___flmul@grs,f
 23468  0641  085A               	movf	___flmul@temp+1,w
 23469  0642  3DD1               	addwfc	___flmul@grs+1,f
 23470  0643  3000               	movlw	0
 23471  0644  3DD2               	addwfc	___flmul@grs+2,f
 23472  0645  3DD3               	addwfc	___flmul@grs+3,f
 23473  0646  0841               	movf	___flmul@b,w
 23474  0647  00C9               	movwf	??___flmul
 23475  0648  0849               	movf	??___flmul,w
 23476  0649  00A0               	movwf	__Umul8_16@multiplicand
 23477  064A  0846               	movf	___flmul@a+1,w
 23478  064B  31B2  2217  3185   	fcall	__Umul8_16
 23479  064E  0140               	movlb	0	; select bank0
 23480  064F  0821               	movf	?__Umul8_16+1,w
 23481  0650  00DA               	movwf	___flmul@temp+1
 23482  0651  0820               	movf	?__Umul8_16,w
 23483  0652  00D9               	movwf	___flmul@temp
 23484  0653  0859               	movf	___flmul@temp,w
 23485  0654  07D0               	addwf	___flmul@grs,f
 23486  0655  085A               	movf	___flmul@temp+1,w
 23487  0656  3DD1               	addwfc	___flmul@grs+1,f
 23488  0657  3000               	movlw	0
 23489  0658  3DD2               	addwfc	___flmul@grs+2,f
 23490  0659  3DD3               	addwfc	___flmul@grs+3,f
 23491  065A  3008               	movlw	8
 23492  065B                     u8785:	
 23493  065B  35D0               	lslf	___flmul@grs,f
 23494  065C  0DD1               	rlf	___flmul@grs+1,f
 23495  065D  0DD2               	rlf	___flmul@grs+2,f
 23496  065E  0DD3               	rlf	___flmul@grs+3,f
 23497  065F  0B89               	decfsz	9,f
 23498  0660  2E5B               	goto	u8785
 23499  0661  0841               	movf	___flmul@b,w
 23500  0662  00C9               	movwf	??___flmul
 23501  0663  0849               	movf	??___flmul,w
 23502  0664  00A0               	movwf	__Umul8_16@multiplicand
 23503  0665  0845               	movf	___flmul@a,w
 23504  0666  31B2  2217  3185   	fcall	__Umul8_16
 23505  0669  0140               	movlb	0	; select bank0
 23506  066A  0821               	movf	?__Umul8_16+1,w
 23507  066B  00DA               	movwf	___flmul@temp+1
 23508  066C  0820               	movf	?__Umul8_16,w
 23509  066D  00D9               	movwf	___flmul@temp
 23510  066E  0859               	movf	___flmul@temp,w
 23511  066F  07D0               	addwf	___flmul@grs,f
 23512  0670  085A               	movf	___flmul@temp+1,w
 23513  0671  3DD1               	addwfc	___flmul@grs+1,f
 23514  0672  3000               	movlw	0
 23515  0673  3DD2               	addwfc	___flmul@grs+2,f
 23516  0674  3DD3               	addwfc	___flmul@grs+3,f
 23517  0675  0842               	movf	___flmul@b+1,w
 23518  0676  00C9               	movwf	??___flmul
 23519  0677  0849               	movf	??___flmul,w
 23520  0678  00A0               	movwf	__Umul8_16@multiplicand
 23521  0679  0847               	movf	___flmul@a+2,w
 23522  067A  31B2  2217  3185   	fcall	__Umul8_16
 23523  067D  0140               	movlb	0	; select bank0
 23524  067E  0821               	movf	?__Umul8_16+1,w
 23525  067F  00DA               	movwf	___flmul@temp+1
 23526  0680  0820               	movf	?__Umul8_16,w
 23527  0681  00D9               	movwf	___flmul@temp
 23528  0682  0859               	movf	___flmul@temp,w
 23529  0683  07D5               	addwf	___flmul@prod,f
 23530  0684  085A               	movf	___flmul@temp+1,w
 23531  0685  3DD6               	addwfc	___flmul@prod+1,f
 23532  0686  3000               	movlw	0
 23533  0687  3DD7               	addwfc	___flmul@prod+2,f
 23534  0688  3DD8               	addwfc	___flmul@prod+3,f
 23535  0689  0843               	movf	___flmul@b+2,w
 23536  068A  00C9               	movwf	??___flmul
 23537  068B  0849               	movf	??___flmul,w
 23538  068C  00A0               	movwf	__Umul8_16@multiplicand
 23539  068D  0846               	movf	___flmul@a+1,w
 23540  068E  31B2  2217  3185   	fcall	__Umul8_16
 23541  0691  0140               	movlb	0	; select bank0
 23542  0692  0821               	movf	?__Umul8_16+1,w
 23543  0693  00DA               	movwf	___flmul@temp+1
 23544  0694  0820               	movf	?__Umul8_16,w
 23545  0695  00D9               	movwf	___flmul@temp
 23546  0696  0859               	movf	___flmul@temp,w
 23547  0697  07D5               	addwf	___flmul@prod,f
 23548  0698  085A               	movf	___flmul@temp+1,w
 23549  0699  3DD6               	addwfc	___flmul@prod+1,f
 23550  069A  3000               	movlw	0
 23551  069B  3DD7               	addwfc	___flmul@prod+2,f
 23552  069C  3DD8               	addwfc	___flmul@prod+3,f
 23553  069D  0843               	movf	___flmul@b+2,w
 23554  069E  00C9               	movwf	??___flmul
 23555  069F  0849               	movf	??___flmul,w
 23556  06A0  00A0               	movwf	__Umul8_16@multiplicand
 23557  06A1  0847               	movf	___flmul@a+2,w
 23558  06A2  31B2  2217  3185   	fcall	__Umul8_16
 23559  06A5  0140               	movlb	0	; select bank0
 23560  06A6  0821               	movf	?__Umul8_16+1,w
 23561  06A7  00DA               	movwf	___flmul@temp+1
 23562  06A8  0820               	movf	?__Umul8_16,w
 23563  06A9  00D9               	movwf	___flmul@temp
 23564  06AA  0859               	movf	___flmul@temp,w
 23565  06AB  00C9               	movwf	??___flmul
 23566  06AC  085A               	movf	___flmul@temp+1,w
 23567  06AD  00CA               	movwf	??___flmul+1
 23568  06AE  01CB               	clrf	??___flmul+2
 23569  06AF  01CC               	clrf	??___flmul+3
 23570  06B0  3008               	movlw	8
 23571  06B1                     u8795:	
 23572  06B1  35C9               	lslf	??___flmul,f
 23573  06B2  0DCA               	rlf	??___flmul+1,f
 23574  06B3  0DCB               	rlf	??___flmul+2,f
 23575  06B4  0DCC               	rlf	??___flmul+3,f
 23576  06B5  0B89               	decfsz	9,f
 23577  06B6  2EB1               	goto	u8795
 23578  06B7  0849               	movf	??___flmul,w
 23579  06B8  07D5               	addwf	___flmul@prod,f
 23580  06B9  084A               	movf	??___flmul+1,w
 23581  06BA  3DD6               	addwfc	___flmul@prod+1,f
 23582  06BB  084B               	movf	??___flmul+2,w
 23583  06BC  3DD7               	addwfc	___flmul@prod+2,f
 23584  06BD  084C               	movf	??___flmul+3,w
 23585  06BE  3DD8               	addwfc	___flmul@prod+3,f
 23586  06BF  0850               	movf	___flmul@grs,w
 23587  06C0  00C9               	movwf	??___flmul
 23588  06C1  0851               	movf	___flmul@grs+1,w
 23589  06C2  00CA               	movwf	??___flmul+1
 23590  06C3  0852               	movf	___flmul@grs+2,w
 23591  06C4  00CB               	movwf	??___flmul+2
 23592  06C5  0853               	movf	___flmul@grs+3,w
 23593  06C6  00CC               	movwf	??___flmul+3
 23594  06C7  3018               	movlw	24
 23595  06C8                     u8805:	
 23596  06C8  36CC               	lsrf	??___flmul+3,f
 23597  06C9  0CCB               	rrf	??___flmul+2,f
 23598  06CA  0CCA               	rrf	??___flmul+1,f
 23599  06CB  0CC9               	rrf	??___flmul,f
 23600  06CC  0B89               	decfsz	9,f
 23601  06CD  2EC8               	goto	u8805
 23602  06CE  0849               	movf	??___flmul,w
 23603  06CF  07D5               	addwf	___flmul@prod,f
 23604  06D0  084A               	movf	??___flmul+1,w
 23605  06D1  3DD6               	addwfc	___flmul@prod+1,f
 23606  06D2  084B               	movf	??___flmul+2,w
 23607  06D3  3DD7               	addwfc	___flmul@prod+2,f
 23608  06D4  084C               	movf	??___flmul+3,w
 23609  06D5  3DD8               	addwfc	___flmul@prod+3,f
 23610  06D6  3008               	movlw	8
 23611  06D7                     u8815:	
 23612  06D7  35D0               	lslf	___flmul@grs,f
 23613  06D8  0DD1               	rlf	___flmul@grs+1,f
 23614  06D9  0DD2               	rlf	___flmul@grs+2,f
 23615  06DA  0DD3               	rlf	___flmul@grs+3,f
 23616  06DB  0B89               	decfsz	9,f
 23617  06DC  2ED7               	goto	u8815
 23618  06DD  0854               	movf	___flmul@bexp,w
 23619  06DE  074F               	addwf	___flmul@aexp,w
 23620  06DF  00C9               	movwf	??___flmul
 23621  06E0  01CA               	clrf	??___flmul+1
 23622  06E1  0DCA               	rlf	??___flmul+1,f
 23623  06E2  0849               	movf	??___flmul,w
 23624  06E3  3E82               	addlw	130
 23625  06E4  00D9               	movwf	___flmul@temp
 23626  06E5  30FF               	movlw	255
 23627  06E6  3D4A               	addwfc	??___flmul+1,w
 23628  06E7  00DA               	movwf	___flmul@temp+1
 23629  06E8                     l7781:	
 23630  06E8  1BD7               	btfsc	___flmul@prod+2,7
 23631  06E9  2EFF               	goto	l7783
 23632  06EA  3001               	movlw	1
 23633  06EB                     u8825:	
 23634  06EB  35D5               	lslf	___flmul@prod,f
 23635  06EC  0DD6               	rlf	___flmul@prod+1,f
 23636  06ED  0DD7               	rlf	___flmul@prod+2,f
 23637  06EE  0DD8               	rlf	___flmul@prod+3,f
 23638  06EF  0B89               	decfsz	9,f
 23639  06F0  2EEB               	goto	u8825
 23640  06F1  1BD3               	btfsc	___flmul@grs+3,7
 23641  06F2  1455               	bsf	___flmul@prod,0
 23642  06F3  3001               	movlw	1
 23643  06F4                     u8845:	
 23644  06F4  35D0               	lslf	___flmul@grs,f
 23645  06F5  0DD1               	rlf	___flmul@grs+1,f
 23646  06F6  0DD2               	rlf	___flmul@grs+2,f
 23647  06F7  0DD3               	rlf	___flmul@grs+3,f
 23648  06F8  0B89               	decfsz	9,f
 23649  06F9  2EF4               	goto	u8845
 23650  06FA  30FF               	movlw	255
 23651  06FB  07D9               	addwf	___flmul@temp,f
 23652  06FC  30FF               	movlw	255
 23653  06FD  3DDA               	addwfc	___flmul@temp+1,f
 23654  06FE  2EE8               	goto	l7781
 23655  06FF                     l7783:	
 23656  06FF  01CF               	clrf	___flmul@aexp
 23657  0700  1FD3               	btfss	___flmul@grs+3,7
 23658  0701  2F18               	goto	l7793
 23659  0702  30FF               	movlw	255
 23660  0703  0550               	andwf	___flmul@grs,w
 23661  0704  00C9               	movwf	??___flmul
 23662  0705  30FF               	movlw	255
 23663  0706  0551               	andwf	___flmul@grs+1,w
 23664  0707  00CA               	movwf	??___flmul+1
 23665  0708  30FF               	movlw	255
 23666  0709  0552               	andwf	___flmul@grs+2,w
 23667  070A  00CB               	movwf	??___flmul+2
 23668  070B  307F               	movlw	127
 23669  070C  0553               	andwf	___flmul@grs+3,w
 23670  070D  00CC               	movwf	??___flmul+3
 23671  070E  084C               	movf	??___flmul+3,w
 23672  070F  044B               	iorwf	??___flmul+2,w
 23673  0710  044A               	iorwf	??___flmul+1,w
 23674  0711  0449               	iorwf	??___flmul,w
 23675  0712  1903               	skipnz
 23676  0713  1855               	btfsc	___flmul@prod,0
 23677  0714  2F16               	goto	l7789
 23678  0715  2F18               	goto	l7793
 23679  0716                     l7789:	
 23680  0716  01CF               	clrf	___flmul@aexp
 23681  0717  0ACF               	incf	___flmul@aexp,f
 23682  0718                     l7793:	
 23683  0718  084F               	movf	___flmul@aexp,w
 23684  0719  1903               	btfsc	3,2
 23685  071A  2F41               	goto	l7803
 23686  071B  3001               	movlw	1
 23687  071C  07D5               	addwf	___flmul@prod,f
 23688  071D  3000               	movlw	0
 23689  071E  3DD6               	addwfc	___flmul@prod+1,f
 23690  071F  3000               	movlw	0
 23691  0720  3DD7               	addwfc	___flmul@prod+2,f
 23692  0721  3000               	movlw	0
 23693  0722  3DD8               	addwfc	___flmul@prod+3,f
 23694  0723  1C58               	btfss	___flmul@prod+3,0
 23695  0724  2F41               	goto	l7803
 23696  0725  0855               	movf	___flmul@prod,w
 23697  0726  00C9               	movwf	??___flmul
 23698  0727  0856               	movf	___flmul@prod+1,w
 23699  0728  00CA               	movwf	??___flmul+1
 23700  0729  0857               	movf	___flmul@prod+2,w
 23701  072A  00CB               	movwf	??___flmul+2
 23702  072B  0858               	movf	___flmul@prod+3,w
 23703  072C  00CC               	movwf	??___flmul+3
 23704  072D  3001               	movlw	1
 23705  072E  00CD               	movwf	??___flmul+4
 23706  072F                     u8915:	
 23707  072F  37CC               	asrf	??___flmul+3,f
 23708  0730  0CCB               	rrf	??___flmul+2,f
 23709  0731  0CCA               	rrf	??___flmul+1,f
 23710  0732  0CC9               	rrf	??___flmul,f
 23711  0733  0BCD               	decfsz	??___flmul+4,f
 23712  0734  2F2F               	goto	u8915
 23713  0735  084C               	movf	??___flmul+3,w
 23714  0736  00D8               	movwf	___flmul@prod+3
 23715  0737  084B               	movf	??___flmul+2,w
 23716  0738  00D7               	movwf	___flmul@prod+2
 23717  0739  084A               	movf	??___flmul+1,w
 23718  073A  00D6               	movwf	___flmul@prod+1
 23719  073B  0849               	movf	??___flmul,w
 23720  073C  00D5               	movwf	___flmul@prod
 23721  073D  3001               	movlw	1
 23722  073E  07D9               	addwf	___flmul@temp,f
 23723  073F  3000               	movlw	0
 23724  0740  3DDA               	addwfc	___flmul@temp+1,f
 23725  0741                     l7803:	
 23726  0741  085A               	movf	___flmul@temp+1,w
 23727  0742  3A80               	xorlw	128
 23728  0743  00C9               	movwf	??___flmul
 23729  0744  3080               	movlw	128
 23730  0745  0249               	subwf	??___flmul,w
 23731  0746  1D03               	skipz
 23732  0747  2F4A               	goto	u8925
 23733  0748  30FF               	movlw	255
 23734  0749  0259               	subwf	___flmul@temp,w
 23735  074A                     u8925:	
 23736  074A  1C03               	skipc
 23737  074B  2F56               	goto	l7807
 23738  074C  307F               	movlw	127
 23739  074D  0140               	movlb	0	; select bank0
 23740  074E  00D8               	movwf	___flmul@prod+3
 23741  074F  3080               	movlw	128
 23742  0750  00D7               	movwf	___flmul@prod+2
 23743  0751  3000               	movlw	0
 23744  0752  00D6               	movwf	___flmul@prod+1
 23745  0753  3000               	movlw	0
 23746  0754  00D5               	movwf	___flmul@prod
 23747  0755  2F80               	goto	l1526
 23748  0756                     l7807:	
 23749  0756  0140               	movlb	0	; select bank0
 23750  0757  085A               	movf	___flmul@temp+1,w
 23751  0758  3A80               	xorlw	128
 23752  0759  00C9               	movwf	??___flmul
 23753  075A  3080               	movlw	128
 23754  075B  0249               	subwf	??___flmul,w
 23755  075C  1D03               	skipz
 23756  075D  2F60               	goto	u8935
 23757  075E  3001               	movlw	1
 23758  075F  0259               	subwf	___flmul@temp,w
 23759  0760                     u8935:	
 23760  0760  1803               	skipnc
 23761  0761  2F6D               	goto	l7813
 23762  0762  3000               	movlw	0
 23763  0763  0140               	movlb	0	; select bank0
 23764  0764  00D8               	movwf	___flmul@prod+3
 23765  0765  3000               	movlw	0
 23766  0766  00D7               	movwf	___flmul@prod+2
 23767  0767  3000               	movlw	0
 23768  0768  00D6               	movwf	___flmul@prod+1
 23769  0769  3000               	movlw	0
 23770  076A  00D5               	movwf	___flmul@prod
 23771  076B  01CE               	clrf	___flmul@sign
 23772  076C  2F80               	goto	l1526
 23773  076D                     l7813:	
 23774  076D  0140               	movlb	0	; select bank0
 23775  076E  0859               	movf	___flmul@temp,w
 23776  076F  00C9               	movwf	??___flmul
 23777  0770  0849               	movf	??___flmul,w
 23778  0771  00D4               	movwf	___flmul@bexp
 23779  0772  30FF               	movlw	255
 23780  0773  05D5               	andwf	___flmul@prod,f
 23781  0774  30FF               	movlw	255
 23782  0775  05D6               	andwf	___flmul@prod+1,f
 23783  0776  307F               	movlw	127
 23784  0777  05D7               	andwf	___flmul@prod+2,f
 23785  0778  3000               	movlw	0
 23786  0779  05D8               	andwf	___flmul@prod+3,f
 23787  077A  1854               	btfsc	___flmul@bexp,0
 23788  077B  17D7               	bsf	___flmul@prod+2,7
 23789  077C  3654               	lsrf	___flmul@bexp,w
 23790  077D  00C9               	movwf	??___flmul
 23791  077E  0849               	movf	??___flmul,w
 23792  077F  00D8               	movwf	___flmul@prod+3
 23793  0780                     l1526:	
 23794  0780  084E               	movf	___flmul@sign,w
 23795  0781  00C9               	movwf	??___flmul
 23796  0782  0849               	movf	??___flmul,w
 23797  0783  04D8               	iorwf	___flmul@prod+3,f
 23798  0784  0858               	movf	___flmul@prod+3,w
 23799  0785  00C4               	movwf	?___flmul+3
 23800  0786  0857               	movf	___flmul@prod+2,w
 23801  0787  00C3               	movwf	?___flmul+2
 23802  0788  0856               	movf	___flmul@prod+1,w
 23803  0789  00C2               	movwf	?___flmul+1
 23804  078A  0855               	movf	___flmul@prod,w
 23805  078B  00C1               	movwf	?___flmul
 23806  078C  0008               	return
 23807  078D                     __end_of___flmul:	
 23808                           
 23809                           	psect	text62
 23810  3217                     __ptext62:	
 23811 ;; *************** function __Umul8_16 *****************
 23812 ;; Defined at:
 23813 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 23814 ;; Parameters:    Size  Location     Type
 23815 ;;  multiplier      1    wreg     unsigned char 
 23816 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 23817 ;; Auto vars:     Size  Location     Type
 23818 ;;  multiplier      1    8[BANK0 ] unsigned char 
 23819 ;;  word_mpld       2    6[BANK0 ] unsigned int 
 23820 ;;  product         2    4[BANK0 ] unsigned int 
 23821 ;; Return value:  Size  Location     Type
 23822 ;;                  2    0[BANK0 ] unsigned int 
 23823 ;; Registers used:
 23824 ;;		wreg, status,2, status,0
 23825 ;; Tracked objects:
 23826 ;;		On entry : 0/0
 23827 ;;		On exit  : 0/0
 23828 ;;		Unchanged: 0/0
 23829 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23830 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23831 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23832 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23833 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23834 ;;Total ram usage:        9 bytes
 23835 ;; Hardware stack levels used:    1
 23836 ;; Hardware stack levels required when called:    3
 23837 ;; This function calls:
 23838 ;;		Nothing
 23839 ;; This function is called by:
 23840 ;;		___flmul
 23841 ;; This function uses a non-reentrant model
 23842 ;;
 23843                           
 23844                           
 23845                           ;psect for function __Umul8_16
 23846  3217                     __Umul8_16:	
 23847                           
 23848                           ;incstack = 0
 23849                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 23850                           ;__Umul8_16@multiplier stored from wreg
 23851  3217  0140               	movlb	0	; select bank0
 23852  3218  00A8               	movwf	__Umul8_16@multiplier
 23853  3219  01A4               	clrf	__Umul8_16@product
 23854  321A  01A5               	clrf	__Umul8_16@product+1
 23855  321B  0820               	movf	__Umul8_16@multiplicand,w
 23856  321C  00A2               	movwf	??__Umul8_16
 23857  321D  01A3               	clrf	??__Umul8_16+1
 23858  321E  0822               	movf	??__Umul8_16,w
 23859  321F  00A6               	movwf	__Umul8_16@word_mpld
 23860  3220  0823               	movf	??__Umul8_16+1,w
 23861  3221  00A7               	movwf	__Umul8_16@word_mpld+1
 23862  3222                     l7301:	
 23863  3222  1C28               	btfss	__Umul8_16@multiplier,0
 23864  3223  2A28               	goto	l1611
 23865  3224  0826               	movf	__Umul8_16@word_mpld,w
 23866  3225  07A4               	addwf	__Umul8_16@product,f
 23867  3226  0827               	movf	__Umul8_16@word_mpld+1,w
 23868  3227  3DA5               	addwfc	__Umul8_16@product+1,f
 23869  3228                     l1611:	
 23870  3228  3001               	movlw	1
 23871  3229                     u7955:	
 23872  3229  35A6               	lslf	__Umul8_16@word_mpld,f
 23873  322A  0DA7               	rlf	__Umul8_16@word_mpld+1,f
 23874  322B  0B89               	decfsz	9,f
 23875  322C  2A29               	goto	u7955
 23876  322D  1003               	clrc
 23877  322E  0CA8               	rrf	__Umul8_16@multiplier,f
 23878  322F  0828               	movf	__Umul8_16@multiplier,w
 23879  3230  1D03               	btfss	3,2
 23880  3231  2A22               	goto	l7301
 23881  3232  0825               	movf	__Umul8_16@product+1,w
 23882  3233  00A1               	movwf	?__Umul8_16+1
 23883  3234  0824               	movf	__Umul8_16@product,w
 23884  3235  00A0               	movwf	?__Umul8_16
 23885  3236  0008               	return
 23886  3237                     __end_of__Umul8_16:	
 23887                           
 23888                           	psect	text63
 23889  1E28                     __ptext63:	
 23890 ;; *************** function ___fldiv *****************
 23891 ;; Defined at:
 23892 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 23893 ;; Parameters:    Size  Location     Type
 23894 ;;  a               4   59[BANK0 ] unsigned int 
 23895 ;;  b               4   63[BANK0 ] unsigned int 
 23896 ;; Auto vars:     Size  Location     Type
 23897 ;;  grs             4    7[BANK1 ] unsigned long 
 23898 ;;  rem             4    0[BANK1 ] unsigned long 
 23899 ;;  new_exp         2    5[BANK1 ] int 
 23900 ;;  aexp            1   12[BANK1 ] unsigned char 
 23901 ;;  bexp            1   11[BANK1 ] unsigned char 
 23902 ;;  sign            1    4[BANK1 ] unsigned char 
 23903 ;; Return value:  Size  Location     Type
 23904 ;;                  4   59[BANK0 ] unsigned char 
 23905 ;; Registers used:
 23906 ;;		wreg, status,2, status,0
 23907 ;; Tracked objects:
 23908 ;;		On entry : 0/0
 23909 ;;		On exit  : 0/0
 23910 ;;		Unchanged: 0/0
 23911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23912 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23913 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23914 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23915 ;;      Totals:         0      13      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23916 ;;Total ram usage:       26 bytes
 23917 ;; Hardware stack levels used:    1
 23918 ;; Hardware stack levels required when called:    3
 23919 ;; This function calls:
 23920 ;;		Nothing
 23921 ;; This function is called by:
 23922 ;;		_checkChannelStatus
 23923 ;;		_systemCheck
 23924 ;;		_calcRequiredPower
 23925 ;;		_getAnalogValues
 23926 ;;		_channelThing
 23927 ;;		_ftoa
 23928 ;; This function uses a non-reentrant model
 23929 ;;
 23930                           
 23931                           
 23932                           ;psect for function ___fldiv
 23933  1E28                     ___fldiv:	
 23934                           
 23935                           ;incstack = 0
 23936                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 23937  1E28  0140               	movlb	0	; select bank0
 23938  1E29  0862               	movf	___fldiv@b+3,w
 23939  1E2A  3980               	andlw	128
 23940  1E2B  00E3               	movwf	??___fldiv
 23941  1E2C  0863               	movf	??___fldiv,w
 23942  1E2D  0141               	movlb	1	; select bank1
 23943  1E2E  00A4               	movwf	___fldiv@sign^(0+128)
 23944  1E2F  0140               	movlb	0	; select bank0
 23945  1E30  3562               	lslf	___fldiv@b+3,w
 23946  1E31  00E3               	movwf	??___fldiv
 23947  1E32  0863               	movf	??___fldiv,w
 23948  1E33  0141               	movlb	1	; select bank1
 23949  1E34  00AB               	movwf	___fldiv@bexp^(0+128)
 23950  1E35  0140               	movlb	0	; select bank0
 23951  1E36  1FE1               	btfss	___fldiv@b+2,7
 23952  1E37  2E3A               	goto	l7553
 23953  1E38  0141               	movlb	1	; select bank1
 23954  1E39  142B               	bsf	___fldiv@bexp^(0+128),0
 23955  1E3A                     l7553:	
 23956  1E3A  0141               	movlb	1	; select bank1
 23957  1E3B  082B               	movf	___fldiv@bexp^(0+128),w
 23958  1E3C  1903               	btfsc	3,2
 23959  1E3D  2E4E               	goto	l7563
 23960  1E3E  0A2B               	incf	___fldiv@bexp^(0+128),w
 23961  1E3F  1D03               	btfss	3,2
 23962  1E40  2E4A               	goto	l7559
 23963  1E41  3000               	movlw	0
 23964  1E42  0140               	movlb	0	; select bank0
 23965  1E43  00E2               	movwf	___fldiv@b+3
 23966  1E44  3000               	movlw	0
 23967  1E45  00E1               	movwf	___fldiv@b+2
 23968  1E46  3000               	movlw	0
 23969  1E47  00E0               	movwf	___fldiv@b+1
 23970  1E48  3000               	movlw	0
 23971  1E49  00DF               	movwf	___fldiv@b
 23972  1E4A                     l7559:	
 23973  1E4A  0140               	movlb	0	; select bank0
 23974  1E4B  17E1               	bsf	___fldiv@b+2,7
 23975  1E4C  01E2               	clrf	___fldiv@b+3
 23976  1E4D  2E57               	goto	l7565
 23977  1E4E                     l7563:	
 23978  1E4E  3000               	movlw	0
 23979  1E4F  0140               	movlb	0	; select bank0
 23980  1E50  00E2               	movwf	___fldiv@b+3
 23981  1E51  3000               	movlw	0
 23982  1E52  00E1               	movwf	___fldiv@b+2
 23983  1E53  3000               	movlw	0
 23984  1E54  00E0               	movwf	___fldiv@b+1
 23985  1E55  3000               	movlw	0
 23986  1E56  00DF               	movwf	___fldiv@b
 23987  1E57                     l7565:	
 23988  1E57  085E               	movf	___fldiv@a+3,w
 23989  1E58  3980               	andlw	128
 23990  1E59  00E3               	movwf	??___fldiv
 23991  1E5A  0863               	movf	??___fldiv,w
 23992  1E5B  0141               	movlb	1	; select bank1
 23993  1E5C  06A4               	xorwf	___fldiv@sign^(0+128),f
 23994  1E5D  0140               	movlb	0	; select bank0
 23995  1E5E  355E               	lslf	___fldiv@a+3,w
 23996  1E5F  00E3               	movwf	??___fldiv
 23997  1E60  0863               	movf	??___fldiv,w
 23998  1E61  0141               	movlb	1	; select bank1
 23999  1E62  00AC               	movwf	___fldiv@aexp^(0+128)
 24000  1E63  0140               	movlb	0	; select bank0
 24001  1E64  1FDD               	btfss	___fldiv@a+2,7
 24002  1E65  2E68               	goto	l7573
 24003  1E66  0141               	movlb	1	; select bank1
 24004  1E67  142C               	bsf	___fldiv@aexp^(0+128),0
 24005  1E68                     l7573:	
 24006  1E68  0141               	movlb	1	; select bank1
 24007  1E69  082C               	movf	___fldiv@aexp^(0+128),w
 24008  1E6A  1903               	btfsc	3,2
 24009  1E6B  2E7C               	goto	l7583
 24010  1E6C  0A2C               	incf	___fldiv@aexp^(0+128),w
 24011  1E6D  1D03               	btfss	3,2
 24012  1E6E  2E78               	goto	l7579
 24013  1E6F  3000               	movlw	0
 24014  1E70  0140               	movlb	0	; select bank0
 24015  1E71  00DE               	movwf	___fldiv@a+3
 24016  1E72  3000               	movlw	0
 24017  1E73  00DD               	movwf	___fldiv@a+2
 24018  1E74  3000               	movlw	0
 24019  1E75  00DC               	movwf	___fldiv@a+1
 24020  1E76  3000               	movlw	0
 24021  1E77  00DB               	movwf	___fldiv@a
 24022  1E78                     l7579:	
 24023  1E78  0140               	movlb	0	; select bank0
 24024  1E79  17DD               	bsf	___fldiv@a+2,7
 24025  1E7A  01DE               	clrf	___fldiv@a+3
 24026  1E7B  2E85               	goto	l1474
 24027  1E7C                     l7583:	
 24028  1E7C  3000               	movlw	0
 24029  1E7D  0140               	movlb	0	; select bank0
 24030  1E7E  00DE               	movwf	___fldiv@a+3
 24031  1E7F  3000               	movlw	0
 24032  1E80  00DD               	movwf	___fldiv@a+2
 24033  1E81  3000               	movlw	0
 24034  1E82  00DC               	movwf	___fldiv@a+1
 24035  1E83  3000               	movlw	0
 24036  1E84  00DB               	movwf	___fldiv@a
 24037  1E85                     l1474:	
 24038  1E85  085E               	movf	___fldiv@a+3,w
 24039  1E86  045D               	iorwf	___fldiv@a+2,w
 24040  1E87  045C               	iorwf	___fldiv@a+1,w
 24041  1E88  045B               	iorwf	___fldiv@a,w
 24042  1E89  1D03               	skipz
 24043  1E8A  2EA6               	goto	l7593
 24044  1E8B  3000               	movlw	0
 24045  1E8C  00E2               	movwf	___fldiv@b+3
 24046  1E8D  3000               	movlw	0
 24047  1E8E  00E1               	movwf	___fldiv@b+2
 24048  1E8F  3000               	movlw	0
 24049  1E90  00E0               	movwf	___fldiv@b+1
 24050  1E91  3000               	movlw	0
 24051  1E92  00DF               	movwf	___fldiv@b
 24052  1E93  3080               	movlw	128
 24053  1E94  04E1               	iorwf	___fldiv@b+2,f
 24054  1E95  307F               	movlw	127
 24055  1E96  04E2               	iorwf	___fldiv@b+3,f
 24056  1E97                     L14:	
 24057  1E97  0141               	movlb	1	; select bank1
 24058  1E98  0824               	movf	___fldiv@sign^(0+128),w
 24059  1E99  0140               	movlb	0	; select bank0
 24060  1E9A  00E3               	movwf	??___fldiv
 24061  1E9B  0863               	movf	??___fldiv,w
 24062  1E9C  04E2               	iorwf	___fldiv@b+3,f
 24063  1E9D  0862               	movf	___fldiv@b+3,w
 24064  1E9E  00DE               	movwf	?___fldiv+3
 24065  1E9F  0861               	movf	___fldiv@b+2,w
 24066  1EA0  00DD               	movwf	?___fldiv+2
 24067  1EA1  0860               	movf	___fldiv@b+1,w
 24068  1EA2  00DC               	movwf	?___fldiv+1
 24069  1EA3  085F               	movf	___fldiv@b,w
 24070  1EA4  00DB               	movwf	?___fldiv
 24071  1EA5  0008               	return
 24072  1EA6                     l7593:	
 24073  1EA6  0141               	movlb	1	; select bank1
 24074  1EA7  082B               	movf	___fldiv@bexp^(0+128),w
 24075  1EA8  1D03               	btfss	3,2
 24076  1EA9  2EB4               	goto	l7599
 24077  1EAA  3000               	movlw	0
 24078  1EAB  0140               	movlb	0	; select bank0
 24079  1EAC  00DE               	movwf	?___fldiv+3
 24080  1EAD  3000               	movlw	0
 24081  1EAE  00DD               	movwf	?___fldiv+2
 24082  1EAF  3000               	movlw	0
 24083  1EB0  00DC               	movwf	?___fldiv+1
 24084  1EB1  3000               	movlw	0
 24085  1EB2  00DB               	movwf	?___fldiv
 24086  1EB3  0008               	return
 24087  1EB4                     l7599:	
 24088  1EB4  082B               	movf	___fldiv@bexp^(0+128),w
 24089  1EB5  0140               	movlb	0	; select bank0
 24090  1EB6  00E3               	movwf	??___fldiv
 24091  1EB7  01E4               	clrf	??___fldiv+1
 24092  1EB8  0864               	movf	??___fldiv+1,w
 24093  1EB9  00E6               	movwf	??___fldiv+3
 24094  1EBA  0141               	movlb	1	; select bank1
 24095  1EBB  082C               	movf	___fldiv@aexp^(0+128),w
 24096  1EBC  0140               	movlb	0	; select bank0
 24097  1EBD  0263               	subwf	??___fldiv,w
 24098  1EBE  00E5               	movwf	??___fldiv+2
 24099  1EBF  1C03               	skipc
 24100  1EC0  03E6               	decf	??___fldiv+3,f
 24101  1EC1  0865               	movf	??___fldiv+2,w
 24102  1EC2  3E7F               	addlw	127
 24103  1EC3  0141               	movlb	1	; select bank1
 24104  1EC4  00A5               	movwf	___fldiv@new_exp^(0+128)
 24105  1EC5  3000               	movlw	0
 24106  1EC6  0140               	movlb	0	; select bank0
 24107  1EC7  3D66               	addwfc	??___fldiv+3,w
 24108  1EC8  0141               	movlb	1	; select bank1
 24109  1EC9  00A6               	movwf	(___fldiv@new_exp+1)^(0+128)
 24110  1ECA  0140               	movlb	0	; select bank0
 24111  1ECB  0862               	movf	___fldiv@b+3,w
 24112  1ECC  0141               	movlb	1	; select bank1
 24113  1ECD  00A3               	movwf	(___fldiv@rem+3)^(0+128)
 24114  1ECE  0140               	movlb	0	; select bank0
 24115  1ECF  0861               	movf	___fldiv@b+2,w
 24116  1ED0  0141               	movlb	1	; select bank1
 24117  1ED1  00A2               	movwf	(___fldiv@rem+2)^(0+128)
 24118  1ED2  0140               	movlb	0	; select bank0
 24119  1ED3  0860               	movf	___fldiv@b+1,w
 24120  1ED4  0141               	movlb	1	; select bank1
 24121  1ED5  00A1               	movwf	(___fldiv@rem+1)^(0+128)
 24122  1ED6  0140               	movlb	0	; select bank0
 24123  1ED7  085F               	movf	___fldiv@b,w
 24124  1ED8  0141               	movlb	1	; select bank1
 24125  1ED9  00A0               	movwf	___fldiv@rem^(0+128)
 24126  1EDA  3000               	movlw	0
 24127  1EDB  0140               	movlb	0	; select bank0
 24128  1EDC  00E2               	movwf	___fldiv@b+3
 24129  1EDD  3000               	movlw	0
 24130  1EDE  00E1               	movwf	___fldiv@b+2
 24131  1EDF  3000               	movlw	0
 24132  1EE0  00E0               	movwf	___fldiv@b+1
 24133  1EE1  3000               	movlw	0
 24134  1EE2  00DF               	movwf	___fldiv@b
 24135  1EE3  3000               	movlw	0
 24136  1EE4  0141               	movlb	1	; select bank1
 24137  1EE5  00AA               	movwf	(___fldiv@grs+3)^(0+128)
 24138  1EE6  3000               	movlw	0
 24139  1EE7  00A9               	movwf	(___fldiv@grs+2)^(0+128)
 24140  1EE8  3000               	movlw	0
 24141  1EE9  00A8               	movwf	(___fldiv@grs+1)^(0+128)
 24142  1EEA  3000               	movlw	0
 24143  1EEB  00A7               	movwf	___fldiv@grs^(0+128)
 24144  1EEC  01AC               	clrf	___fldiv@aexp^(0+128)
 24145  1EED                     l7627:	
 24146  1EED  301A               	movlw	26
 24147  1EEE  022C               	subwf	___fldiv@aexp^(0+128),w
 24148  1EEF  1803               	btfsc	3,0
 24149  1EF0  2F40               	goto	l7629
 24150  1EF1  082C               	movf	___fldiv@aexp^(0+128),w
 24151  1EF2  1903               	btfsc	3,2
 24152  1EF3  2F10               	goto	l7619
 24153  1EF4  3001               	movlw	1
 24154  1EF5                     u8495:	
 24155  1EF5  35A0               	lslf	___fldiv@rem^(0+128),f
 24156  1EF6  0DA1               	rlf	(___fldiv@rem+1)^(0+128),f
 24157  1EF7  0DA2               	rlf	(___fldiv@rem+2)^(0+128),f
 24158  1EF8  0DA3               	rlf	(___fldiv@rem+3)^(0+128),f
 24159  1EF9  0B89               	decfsz	9,f
 24160  1EFA  2EF5               	goto	u8495
 24161  1EFB  3001               	movlw	1
 24162  1EFC                     u8505:	
 24163  1EFC  0140               	movlb	0	; select bank0
 24164  1EFD  35DF               	lslf	___fldiv@b,f
 24165  1EFE  0DE0               	rlf	___fldiv@b+1,f
 24166  1EFF  0DE1               	rlf	___fldiv@b+2,f
 24167  1F00  0DE2               	rlf	___fldiv@b+3,f
 24168  1F01  0B89               	decfsz	9,f
 24169  1F02  2EFC               	goto	u8505
 24170  1F03  0141               	movlb	1	; select bank1
 24171  1F04  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 24172  1F05  2F08               	goto	l7617
 24173  1F06  0140               	movlb	0	; select bank0
 24174  1F07  145F               	bsf	___fldiv@b,0
 24175  1F08                     l7617:	
 24176  1F08  3001               	movlw	1
 24177  1F09                     u8525:	
 24178  1F09  0141               	movlb	1	; select bank1
 24179  1F0A  35A7               	lslf	___fldiv@grs^(0+128),f
 24180  1F0B  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 24181  1F0C  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 24182  1F0D  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 24183  1F0E  0B89               	decfsz	9,f
 24184  1F0F  2F09               	goto	u8525
 24185  1F10                     l7619:	
 24186  1F10  0140               	movlb	0	; select bank0
 24187  1F11  085E               	movf	___fldiv@a+3,w
 24188  1F12  0141               	movlb	1	; select bank1
 24189  1F13  0223               	subwf	(___fldiv@rem+3)^(0+128),w
 24190  1F14  1D03               	skipz
 24191  1F15  2F26               	goto	u8535
 24192  1F16  0140               	movlb	0	; select bank0
 24193  1F17  085D               	movf	___fldiv@a+2,w
 24194  1F18  0141               	movlb	1	; select bank1
 24195  1F19  0222               	subwf	(___fldiv@rem+2)^(0+128),w
 24196  1F1A  1D03               	skipz
 24197  1F1B  2F26               	goto	u8535
 24198  1F1C  0140               	movlb	0	; select bank0
 24199  1F1D  085C               	movf	___fldiv@a+1,w
 24200  1F1E  0141               	movlb	1	; select bank1
 24201  1F1F  0221               	subwf	(___fldiv@rem+1)^(0+128),w
 24202  1F20  1D03               	skipz
 24203  1F21  2F26               	goto	u8535
 24204  1F22  0140               	movlb	0	; select bank0
 24205  1F23  085B               	movf	___fldiv@a,w
 24206  1F24  0141               	movlb	1	; select bank1
 24207  1F25  0220               	subwf	___fldiv@rem^(0+128),w
 24208  1F26                     u8535:	
 24209  1F26  1C03               	skipc
 24210  1F27  2F39               	goto	l7625
 24211  1F28  172A               	bsf	(___fldiv@grs^(0+128)+3),6
 24212  1F29  0140               	movlb	0	; select bank0
 24213  1F2A  085B               	movf	___fldiv@a,w
 24214  1F2B  0141               	movlb	1	; select bank1
 24215  1F2C  02A0               	subwf	___fldiv@rem^(0+128),f
 24216  1F2D  0140               	movlb	0	; select bank0
 24217  1F2E  085C               	movf	___fldiv@a+1,w
 24218  1F2F  0141               	movlb	1	; select bank1
 24219  1F30  3BA1               	subwfb	(___fldiv@rem+1)^(0+128),f
 24220  1F31  0140               	movlb	0	; select bank0
 24221  1F32  085D               	movf	___fldiv@a+2,w
 24222  1F33  0141               	movlb	1	; select bank1
 24223  1F34  3BA2               	subwfb	(___fldiv@rem+2)^(0+128),f
 24224  1F35  0140               	movlb	0	; select bank0
 24225  1F36  085E               	movf	___fldiv@a+3,w
 24226  1F37  0141               	movlb	1	; select bank1
 24227  1F38  3BA3               	subwfb	(___fldiv@rem+3)^(0+128),f
 24228  1F39                     l7625:	
 24229  1F39  3001               	movlw	1
 24230  1F3A  0140               	movlb	0	; select bank0
 24231  1F3B  00E3               	movwf	??___fldiv
 24232  1F3C  0863               	movf	??___fldiv,w
 24233  1F3D  0141               	movlb	1	; select bank1
 24234  1F3E  07AC               	addwf	___fldiv@aexp^(0+128),f
 24235  1F3F  2EED               	goto	l7627
 24236  1F40                     l7629:	
 24237  1F40  0823               	movf	(___fldiv@rem+3)^(0+128),w
 24238  1F41  0422               	iorwf	(___fldiv@rem+2)^(0+128),w
 24239  1F42  0421               	iorwf	(___fldiv@rem+1)^(0+128),w
 24240  1F43  0420               	iorwf	___fldiv@rem^(0+128),w
 24241  1F44  1D03               	btfss	3,2
 24242  1F45  1427               	bsf	___fldiv@grs^(0+128),0
 24243  1F46                     l7643:	
 24244  1F46  0140               	movlb	0	; select bank0
 24245  1F47  1BE1               	btfsc	___fldiv@b+2,7
 24246  1F48  2F62               	goto	l7645
 24247  1F49  3001               	movlw	1
 24248  1F4A                     u8565:	
 24249  1F4A  35DF               	lslf	___fldiv@b,f
 24250  1F4B  0DE0               	rlf	___fldiv@b+1,f
 24251  1F4C  0DE1               	rlf	___fldiv@b+2,f
 24252  1F4D  0DE2               	rlf	___fldiv@b+3,f
 24253  1F4E  0B89               	decfsz	9,f
 24254  1F4F  2F4A               	goto	u8565
 24255  1F50  0141               	movlb	1	; select bank1
 24256  1F51  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 24257  1F52  2F55               	goto	l7639
 24258  1F53  0140               	movlb	0	; select bank0
 24259  1F54  145F               	bsf	___fldiv@b,0
 24260  1F55                     l7639:	
 24261  1F55  3001               	movlw	1
 24262  1F56                     u8585:	
 24263  1F56  0141               	movlb	1	; select bank1
 24264  1F57  35A7               	lslf	___fldiv@grs^(0+128),f
 24265  1F58  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 24266  1F59  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 24267  1F5A  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 24268  1F5B  0B89               	decfsz	9,f
 24269  1F5C  2F56               	goto	u8585
 24270  1F5D  30FF               	movlw	255
 24271  1F5E  07A5               	addwf	___fldiv@new_exp^(0+128),f
 24272  1F5F  30FF               	movlw	255
 24273  1F60  3DA6               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 24274  1F61  2F46               	goto	l7643
 24275  1F62                     l7645:	
 24276  1F62  0141               	movlb	1	; select bank1
 24277  1F63  01AC               	clrf	___fldiv@aexp^(0+128)
 24278  1F64  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 24279  1F65  2F84               	goto	l7655
 24280  1F66  30FF               	movlw	255
 24281  1F67  0527               	andwf	___fldiv@grs^(0+128),w
 24282  1F68  0140               	movlb	0	; select bank0
 24283  1F69  00E3               	movwf	??___fldiv
 24284  1F6A  30FF               	movlw	255
 24285  1F6B  0141               	movlb	1	; select bank1
 24286  1F6C  0528               	andwf	(___fldiv@grs+1)^(0+128),w
 24287  1F6D  0140               	movlb	0	; select bank0
 24288  1F6E  00E4               	movwf	??___fldiv+1
 24289  1F6F  30FF               	movlw	255
 24290  1F70  0141               	movlb	1	; select bank1
 24291  1F71  0529               	andwf	(___fldiv@grs+2)^(0+128),w
 24292  1F72  0140               	movlb	0	; select bank0
 24293  1F73  00E5               	movwf	??___fldiv+2
 24294  1F74  307F               	movlw	127
 24295  1F75  0141               	movlb	1	; select bank1
 24296  1F76  052A               	andwf	(___fldiv@grs+3)^(0+128),w
 24297  1F77  0140               	movlb	0	; select bank0
 24298  1F78  00E6               	movwf	??___fldiv+3
 24299  1F79  0866               	movf	??___fldiv+3,w
 24300  1F7A  0465               	iorwf	??___fldiv+2,w
 24301  1F7B  0464               	iorwf	??___fldiv+1,w
 24302  1F7C  0463               	iorwf	??___fldiv,w
 24303  1F7D  1903               	skipnz
 24304  1F7E  185F               	btfsc	___fldiv@b,0
 24305  1F7F  2F81               	goto	l7651
 24306  1F80  2F84               	goto	l7655
 24307  1F81                     l7651:	
 24308  1F81  0141               	movlb	1	; select bank1
 24309  1F82  01AC               	clrf	___fldiv@aexp^(0+128)
 24310  1F83  0AAC               	incf	___fldiv@aexp^(0+128),f
 24311  1F84                     l7655:	
 24312  1F84  0141               	movlb	1	; select bank1
 24313  1F85  082C               	movf	___fldiv@aexp^(0+128),w
 24314  1F86  1903               	btfsc	3,2
 24315  1F87  2FB0               	goto	l7665
 24316  1F88  3001               	movlw	1
 24317  1F89  0140               	movlb	0	; select bank0
 24318  1F8A  07DF               	addwf	___fldiv@b,f
 24319  1F8B  3000               	movlw	0
 24320  1F8C  3DE0               	addwfc	___fldiv@b+1,f
 24321  1F8D  3000               	movlw	0
 24322  1F8E  3DE1               	addwfc	___fldiv@b+2,f
 24323  1F8F  3000               	movlw	0
 24324  1F90  3DE2               	addwfc	___fldiv@b+3,f
 24325  1F91  1C62               	btfss	___fldiv@b+3,0
 24326  1F92  2FB0               	goto	l7665
 24327  1F93  085F               	movf	___fldiv@b,w
 24328  1F94  00E3               	movwf	??___fldiv
 24329  1F95  0860               	movf	___fldiv@b+1,w
 24330  1F96  00E4               	movwf	??___fldiv+1
 24331  1F97  0861               	movf	___fldiv@b+2,w
 24332  1F98  00E5               	movwf	??___fldiv+2
 24333  1F99  0862               	movf	___fldiv@b+3,w
 24334  1F9A  00E6               	movwf	??___fldiv+3
 24335  1F9B  3001               	movlw	1
 24336  1F9C  00E7               	movwf	??___fldiv+4
 24337  1F9D                     u8655:	
 24338  1F9D  37E6               	asrf	??___fldiv+3,f
 24339  1F9E  0CE5               	rrf	??___fldiv+2,f
 24340  1F9F  0CE4               	rrf	??___fldiv+1,f
 24341  1FA0  0CE3               	rrf	??___fldiv,f
 24342  1FA1  0BE7               	decfsz	??___fldiv+4,f
 24343  1FA2  2F9D               	goto	u8655
 24344  1FA3  0866               	movf	??___fldiv+3,w
 24345  1FA4  00E2               	movwf	___fldiv@b+3
 24346  1FA5  0865               	movf	??___fldiv+2,w
 24347  1FA6  00E1               	movwf	___fldiv@b+2
 24348  1FA7  0864               	movf	??___fldiv+1,w
 24349  1FA8  00E0               	movwf	___fldiv@b+1
 24350  1FA9  0863               	movf	??___fldiv,w
 24351  1FAA  00DF               	movwf	___fldiv@b
 24352  1FAB  3001               	movlw	1
 24353  1FAC  0141               	movlb	1	; select bank1
 24354  1FAD  07A5               	addwf	___fldiv@new_exp^(0+128),f
 24355  1FAE  3000               	movlw	0
 24356  1FAF  3DA6               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 24357  1FB0                     l7665:	
 24358  1FB0  0141               	movlb	1	; select bank1
 24359  1FB1  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 24360  1FB2  3A80               	xorlw	128
 24361  1FB3  0140               	movlb	0	; select bank0
 24362  1FB4  00E3               	movwf	??___fldiv
 24363  1FB5  3080               	movlw	128
 24364  1FB6  0263               	subwf	??___fldiv,w
 24365  1FB7  1D03               	skipz
 24366  1FB8  2FBC               	goto	u8665
 24367  1FB9  30FF               	movlw	255
 24368  1FBA  0141               	movlb	1	; select bank1
 24369  1FBB  0225               	subwf	___fldiv@new_exp^(0+128),w
 24370  1FBC                     u8665:	
 24371  1FBC  1C03               	skipc
 24372  1FBD  2FCC               	goto	l1495
 24373  1FBE  30FF               	movlw	255
 24374  1FBF  0141               	movlb	1	; select bank1
 24375  1FC0  00A5               	movwf	___fldiv@new_exp^(0+128)
 24376  1FC1  3000               	movlw	0
 24377  1FC2  00A6               	movwf	(___fldiv@new_exp^(0+128)+1)
 24378  1FC3  3000               	movlw	0
 24379  1FC4  0140               	movlb	0	; select bank0
 24380  1FC5  00E2               	movwf	___fldiv@b+3
 24381  1FC6  3000               	movlw	0
 24382  1FC7  00E1               	movwf	___fldiv@b+2
 24383  1FC8  3000               	movlw	0
 24384  1FC9  00E0               	movwf	___fldiv@b+1
 24385  1FCA  3000               	movlw	0
 24386  1FCB  00DF               	movwf	___fldiv@b
 24387  1FCC                     l1495:	
 24388  1FCC  0141               	movlb	1	; select bank1
 24389  1FCD  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 24390  1FCE  3A80               	xorlw	128
 24391  1FCF  0140               	movlb	0	; select bank0
 24392  1FD0  00E3               	movwf	??___fldiv
 24393  1FD1  3080               	movlw	128
 24394  1FD2  0263               	subwf	??___fldiv,w
 24395  1FD3  1D03               	skipz
 24396  1FD4  2FD8               	goto	u8675
 24397  1FD5  3001               	movlw	1
 24398  1FD6  0141               	movlb	1	; select bank1
 24399  1FD7  0225               	subwf	___fldiv@new_exp^(0+128),w
 24400  1FD8                     u8675:	
 24401  1FD8  1803               	skipnc
 24402  1FD9  2FE8               	goto	l1496
 24403  1FDA  0141               	movlb	1	; select bank1
 24404  1FDB  01A5               	clrf	___fldiv@new_exp^(0+128)
 24405  1FDC  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
 24406  1FDD  3000               	movlw	0
 24407  1FDE  0140               	movlb	0	; select bank0
 24408  1FDF  00E2               	movwf	___fldiv@b+3
 24409  1FE0  3000               	movlw	0
 24410  1FE1  00E1               	movwf	___fldiv@b+2
 24411  1FE2  3000               	movlw	0
 24412  1FE3  00E0               	movwf	___fldiv@b+1
 24413  1FE4  3000               	movlw	0
 24414  1FE5  00DF               	movwf	___fldiv@b
 24415  1FE6  0141               	movlb	1	; select bank1
 24416  1FE7  01A4               	clrf	___fldiv@sign^(0+128)
 24417  1FE8                     l1496:	
 24418  1FE8  0141               	movlb	1	; select bank1
 24419  1FE9  0825               	movf	___fldiv@new_exp^(0+128),w
 24420  1FEA  0140               	movlb	0	; select bank0
 24421  1FEB  00E3               	movwf	??___fldiv
 24422  1FEC  0863               	movf	??___fldiv,w
 24423  1FED  0141               	movlb	1	; select bank1
 24424  1FEE  00AB               	movwf	___fldiv@bexp^(0+128)
 24425  1FEF  1C2B               	btfss	___fldiv@bexp^(0+128),0
 24426  1FF0  2FF4               	goto	l7679
 24427  1FF1  0140               	movlb	0	; select bank0
 24428  1FF2  17E1               	bsf	___fldiv@b+2,7
 24429  1FF3  2FF9               	goto	l1498
 24430  1FF4                     l7679:	
 24431  1FF4  307F               	movlw	127
 24432  1FF5  0140               	movlb	0	; select bank0
 24433  1FF6  00E3               	movwf	??___fldiv
 24434  1FF7  0863               	movf	??___fldiv,w
 24435  1FF8  05E1               	andwf	___fldiv@b+2,f
 24436  1FF9                     l1498:	
 24437  1FF9  0141               	movlb	1	; select bank1
 24438  1FFA  362B               	lsrf	___fldiv@bexp^(0+128),w
 24439  1FFB  0140               	movlb	0	; select bank0
 24440  1FFC  00E3               	movwf	??___fldiv
 24441  1FFD  0863               	movf	??___fldiv,w
 24442  1FFE  00E2               	movwf	___fldiv@b+3
 24443  1FFF  2E97               	goto	L14
 24444  2000                     __end_of___fldiv:	
 24445                           
 24446                           	psect	text64
 24447  32BE                     __ptext64:	
 24448 ;; *************** function _OLED_loadSpecialChars *****************
 24449 ;; Defined at:
 24450 ;;		line 155 in file "oled.c"
 24451 ;; Parameters:    Size  Location     Type
 24452 ;;		None
 24453 ;; Auto vars:     Size  Location     Type
 24454 ;;  special        32    8[BANK0 ] unsigned char [32]
 24455 ;;  n               1   40[BANK0 ] unsigned char 
 24456 ;; Return value:  Size  Location     Type
 24457 ;;                  1    wreg      void 
 24458 ;; Registers used:
 24459 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24460 ;; Tracked objects:
 24461 ;;		On entry : 0/0
 24462 ;;		On exit  : 0/0
 24463 ;;		Unchanged: 0/0
 24464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24466 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24467 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24468 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24469 ;;Total ram usage:       34 bytes
 24470 ;; Hardware stack levels used:    1
 24471 ;; Hardware stack levels required when called:    6
 24472 ;; This function calls:
 24473 ;;		_OLED_command
 24474 ;;		_OLED_write
 24475 ;; This function is called by:
 24476 ;;		_main
 24477 ;; This function uses a non-reentrant model
 24478 ;;
 24479                           
 24480                           
 24481                           ;psect for function _OLED_loadSpecialChars
 24482  32BE                     _OLED_loadSpecialChars:	
 24483                           
 24484                           ;oled.c: 157:  uint8_t special[] = {0x18, 0x18, 0x03, 0x04, 0x04, 0x04, 0x03, 0x00,
 24485                           
 24486                           ;incstack = 0
 24487                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24488  32BE  3020               	movlw	low OLED_loadSpecialChars@F7971
 24489  32BF  0086               	movwf	6
 24490  32C0  3003               	movlw	high OLED_loadSpecialChars@F7971
 24491  32C1  0087               	movwf	7
 24492  32C2  3028               	movlw	low OLED_loadSpecialChars@special
 24493  32C3  0084               	movwf	4
 24494  32C4  3000               	movlw	high OLED_loadSpecialChars@special
 24495  32C5  0085               	movwf	5
 24496  32C6  3020               	movlw	32
 24497  32C7  0140               	movlb	0	; select bank0
 24498  32C8  00A7               	movwf	??_OLED_loadSpecialChars
 24499  32C9                     u10090:	
 24500  32C9  0016               	moviw fsr1++
 24501  32CA  001A               	movwi fsr0++
 24502  32CB  0BA7               	decfsz	??_OLED_loadSpecialChars,f
 24503  32CC  2AC9               	goto	u10090
 24504                           
 24505                           ;oled.c: 162:  uint8_t n;;oled.c: 164:  OLED_command(0x40 + 8);
 24506  32CD  3048               	movlw	72
 24507  32CE  31B1  2150  31B2   	fcall	_OLED_command
 24508                           
 24509                           ;oled.c: 165:  for(n = 0; n < sizeof(special); n++) {
 24510  32D1  0140               	movlb	0	; select bank0
 24511  32D2  01C8               	clrf	OLED_loadSpecialChars@n
 24512  32D3                     l8835:	
 24513                           
 24514                           ;oled.c: 166:   OLED_write(special[n]);
 24515  32D3  0848               	movf	OLED_loadSpecialChars@n,w
 24516  32D4  3E28               	addlw	(low (OLED_loadSpecialChars@special| 0))& (0+255)
 24517  32D5  0086               	movwf	6
 24518  32D6  0187               	clrf	7
 24519  32D7  0801               	movf	1,w
 24520  32D8  31B1  2164  31B2   	fcall	_OLED_write
 24521                           
 24522                           ;oled.c: 167:  }
 24523  32DB  3001               	movlw	1
 24524  32DC  0140               	movlb	0	; select bank0
 24525  32DD  00A7               	movwf	??_OLED_loadSpecialChars
 24526  32DE  0827               	movf	??_OLED_loadSpecialChars,w
 24527  32DF  07C8               	addwf	OLED_loadSpecialChars@n,f
 24528  32E0  3020               	movlw	32
 24529  32E1  0248               	subwf	OLED_loadSpecialChars@n,w
 24530  32E2  1803               	btfsc	3,0
 24531  32E3  0008               	return
 24532  32E4  2AD3               	goto	l8835
 24533  32E5                     __end_of_OLED_loadSpecialChars:	
 24534                           
 24535                           	psect	text65
 24536  3164                     __ptext65:	
 24537 ;; *************** function _OLED_write *****************
 24538 ;; Defined at:
 24539 ;;		line 76 in file "oled.c"
 24540 ;; Parameters:    Size  Location     Type
 24541 ;;  value           1    wreg     unsigned char 
 24542 ;; Auto vars:     Size  Location     Type
 24543 ;;  value           1    6[BANK0 ] unsigned char 
 24544 ;; Return value:  Size  Location     Type
 24545 ;;                  1    wreg      void 
 24546 ;; Registers used:
 24547 ;;		wreg, status,2, status,0, pclath, cstack
 24548 ;; Tracked objects:
 24549 ;;		On entry : 0/0
 24550 ;;		On exit  : 0/0
 24551 ;;		Unchanged: 0/0
 24552 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24556 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24557 ;;Total ram usage:        1 bytes
 24558 ;; Hardware stack levels used:    1
 24559 ;; Hardware stack levels required when called:    5
 24560 ;; This function calls:
 24561 ;;		_OLED_send
 24562 ;;		_OLED_waitForReady
 24563 ;; This function is called by:
 24564 ;;		_OLED_print_xy
 24565 ;;		_OLED_loadSpecialChars
 24566 ;;		_OLED_print
 24567 ;; This function uses a non-reentrant model
 24568 ;;
 24569                           
 24570                           
 24571                           ;psect for function _OLED_write
 24572  3164                     _OLED_write:	
 24573                           
 24574                           ;incstack = 0
 24575                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 24576                           ;OLED_write@value stored from wreg
 24577  3164  0140               	movlb	0	; select bank0
 24578  3165  00A6               	movwf	OLED_write@value
 24579                           
 24580                           ;oled.c: 76: void OLED_write(uint8_t value);oled.c: 77: {;oled.c: 78:  OLED_send(value, 
      +                          1);
 24581  3166  01A3               	clrf	OLED_send@mode
 24582  3167  0AA3               	incf	OLED_send@mode,f
 24583  3168  0826               	movf	OLED_write@value,w
 24584  3169  31B1  21AF  31B1   	fcall	_OLED_send
 24585                           
 24586                           ;oled.c: 79:  OLED_waitForReady();
 24587  316C  31B2  2297         	fcall	_OLED_waitForReady
 24588  316E  0008               	return
 24589  316F                     __end_of_OLED_write:	
 24590                           
 24591                           	psect	text66
 24592  2B84                     __ptext66:	
 24593 ;; *************** function _OLED_init *****************
 24594 ;; Defined at:
 24595 ;;		line 82 in file "oled.c"
 24596 ;; Parameters:    Size  Location     Type
 24597 ;;		None
 24598 ;; Auto vars:     Size  Location     Type
 24599 ;;		None
 24600 ;; Return value:  Size  Location     Type
 24601 ;;                  1    wreg      void 
 24602 ;; Registers used:
 24603 ;;		wreg, status,2, status,0, pclath, cstack
 24604 ;; Tracked objects:
 24605 ;;		On entry : 0/0
 24606 ;;		On exit  : 0/0
 24607 ;;		Unchanged: 0/0
 24608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24611 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24612 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24613 ;;Total ram usage:        1 bytes
 24614 ;; Hardware stack levels used:    1
 24615 ;; Hardware stack levels required when called:    6
 24616 ;; This function calls:
 24617 ;;		_OLED_command
 24618 ;;		_OLED_write4bits
 24619 ;; This function is called by:
 24620 ;;		_main
 24621 ;; This function uses a non-reentrant model
 24622 ;;
 24623                           
 24624                           
 24625                           ;psect for function _OLED_init
 24626  2B84                     _OLED_init:	
 24627                           
 24628                           ;oled.c: 84:  LATBbits.LATB4 = 0;
 24629                           
 24630                           ;incstack = 0
 24631                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 24632  2B84  0140               	movlb	0	; select bank0
 24633  2B85  1219               	bcf	25,4	;volatile
 24634                           
 24635                           ;oled.c: 85:  LATBbits.LATB2 = 0;
 24636  2B86  1119               	bcf	25,2	;volatile
 24637                           
 24638                           ;oled.c: 86:  LATBbits.LATB3 = 0;
 24639  2B87  1199               	bcf	25,3	;volatile
 24640                           
 24641                           ;oled.c: 88:  _delay((unsigned long)((50)*(4000000UL/4000.0)));
 24642  2B88  3041               	movlw	65
 24643  2B89  0140               	movlb	0	; select bank0
 24644  2B8A  00A7               	movwf	??_OLED_init
 24645  2B8B  30EE               	movlw	238
 24646  2B8C                     u10907:	
 24647  2B8C  0B89               	decfsz	9,f
 24648  2B8D  2B8C               	goto	u10907
 24649  2B8E  0BA7               	decfsz	??_OLED_init,f
 24650  2B8F  2B8C               	goto	u10907
 24651  2B90  0000               	nop
 24652                           
 24653                           ;oled.c: 92:  LATBbits.LATB1 = 0;
 24654  2B91  0140               	movlb	0	; select bank0
 24655  2B92  1099               	bcf	25,1	;volatile
 24656                           
 24657                           ;oled.c: 93:  LATBbits.LATB0 = 0;
 24658  2B93  1019               	bcf	25,0	;volatile
 24659                           
 24660                           ;oled.c: 94:  LATCbits.LATC5 = 0;
 24661  2B94  129A               	bcf	26,5	;volatile
 24662                           
 24663                           ;oled.c: 95:  LATCbits.LATC4 = 0;
 24664  2B95  121A               	bcf	26,4	;volatile
 24665                           
 24666                           ;oled.c: 106:  OLED_write4bits(0x03);
 24667  2B96  3003               	movlw	3
 24668  2B97  31B4  24A4  31AB   	fcall	_OLED_write4bits
 24669                           
 24670                           ;oled.c: 107:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24671  2B9A  3007               	movlw	7
 24672  2B9B  0140               	movlb	0	; select bank0
 24673  2B9C  00A7               	movwf	??_OLED_init
 24674  2B9D  307D               	movlw	125
 24675  2B9E                     u10917:	
 24676  2B9E  0B89               	decfsz	9,f
 24677  2B9F  2B9E               	goto	u10917
 24678  2BA0  0BA7               	decfsz	??_OLED_init,f
 24679  2BA1  2B9E               	goto	u10917
 24680                           
 24681                           ;oled.c: 108:  OLED_write4bits(0x08);
 24682  2BA2  3008               	movlw	8
 24683  2BA3  31B4  24A4  31AB   	fcall	_OLED_write4bits
 24684                           
 24685                           ;oled.c: 109:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24686  2BA6  3007               	movlw	7
 24687  2BA7  0140               	movlb	0	; select bank0
 24688  2BA8  00A7               	movwf	??_OLED_init
 24689  2BA9  307D               	movlw	125
 24690  2BAA                     u10927:	
 24691  2BAA  0B89               	decfsz	9,f
 24692  2BAB  2BAA               	goto	u10927
 24693  2BAC  0BA7               	decfsz	??_OLED_init,f
 24694  2BAD  2BAA               	goto	u10927
 24695                           
 24696                           ;oled.c: 111:  OLED_write4bits(0x02);
 24697  2BAE  3002               	movlw	2
 24698  2BAF  31B4  24A4  31AB   	fcall	_OLED_write4bits
 24699                           
 24700                           ;oled.c: 112:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24701  2BB2  3007               	movlw	7
 24702  2BB3  0140               	movlb	0	; select bank0
 24703  2BB4  00A7               	movwf	??_OLED_init
 24704  2BB5  307D               	movlw	125
 24705  2BB6                     u10937:	
 24706  2BB6  0B89               	decfsz	9,f
 24707  2BB7  2BB6               	goto	u10937
 24708  2BB8  0BA7               	decfsz	??_OLED_init,f
 24709  2BB9  2BB6               	goto	u10937
 24710                           
 24711                           ;oled.c: 113:  OLED_write4bits(0x02);
 24712  2BBA  3002               	movlw	2
 24713  2BBB  31B4  24A4  31AB   	fcall	_OLED_write4bits
 24714                           
 24715                           ;oled.c: 114:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24716  2BBE  3007               	movlw	7
 24717  2BBF  0140               	movlb	0	; select bank0
 24718  2BC0  00A7               	movwf	??_OLED_init
 24719  2BC1  307D               	movlw	125
 24720  2BC2                     u10947:	
 24721  2BC2  0B89               	decfsz	9,f
 24722  2BC3  2BC2               	goto	u10947
 24723  2BC4  0BA7               	decfsz	??_OLED_init,f
 24724  2BC5  2BC2               	goto	u10947
 24725                           
 24726                           ;oled.c: 115:  OLED_write4bits(0x08);
 24727  2BC6  3008               	movlw	8
 24728  2BC7  31B4  24A4  31AB   	fcall	_OLED_write4bits
 24729                           
 24730                           ;oled.c: 116:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24731  2BCA  3007               	movlw	7
 24732  2BCB  0140               	movlb	0	; select bank0
 24733  2BCC  00A7               	movwf	??_OLED_init
 24734  2BCD  307D               	movlw	125
 24735  2BCE                     u10957:	
 24736  2BCE  0B89               	decfsz	9,f
 24737  2BCF  2BCE               	goto	u10957
 24738  2BD0  0BA7               	decfsz	??_OLED_init,f
 24739  2BD1  2BCE               	goto	u10957
 24740                           
 24741                           ;oled.c: 118:  OLED_command(0x08);
 24742  2BD2  3008               	movlw	8
 24743  2BD3  31B1  2150  31AB   	fcall	_OLED_command
 24744                           
 24745                           ;oled.c: 119:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24746  2BD6  3007               	movlw	7
 24747  2BD7  0140               	movlb	0	; select bank0
 24748  2BD8  00A7               	movwf	??_OLED_init
 24749  2BD9  307D               	movlw	125
 24750  2BDA                     u10967:	
 24751  2BDA  0B89               	decfsz	9,f
 24752  2BDB  2BDA               	goto	u10967
 24753  2BDC  0BA7               	decfsz	??_OLED_init,f
 24754  2BDD  2BDA               	goto	u10967
 24755                           
 24756                           ;oled.c: 120:  OLED_command(0x01);
 24757  2BDE  3001               	movlw	1
 24758  2BDF  31B1  2150  31AB   	fcall	_OLED_command
 24759                           
 24760                           ;oled.c: 121:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24761  2BE2  3007               	movlw	7
 24762  2BE3  0140               	movlb	0	; select bank0
 24763  2BE4  00A7               	movwf	??_OLED_init
 24764  2BE5  307D               	movlw	125
 24765  2BE6                     u10977:	
 24766  2BE6  0B89               	decfsz	9,f
 24767  2BE7  2BE6               	goto	u10977
 24768  2BE8  0BA7               	decfsz	??_OLED_init,f
 24769  2BE9  2BE6               	goto	u10977
 24770                           
 24771                           ;oled.c: 122:  OLED_command(0x06);
 24772  2BEA  3006               	movlw	6
 24773  2BEB  31B1  2150  31AB   	fcall	_OLED_command
 24774                           
 24775                           ;oled.c: 123:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24776  2BEE  3007               	movlw	7
 24777  2BEF  0140               	movlb	0	; select bank0
 24778  2BF0  00A7               	movwf	??_OLED_init
 24779  2BF1  307D               	movlw	125
 24780  2BF2                     u10987:	
 24781  2BF2  0B89               	decfsz	9,f
 24782  2BF3  2BF2               	goto	u10987
 24783  2BF4  0BA7               	decfsz	??_OLED_init,f
 24784  2BF5  2BF2               	goto	u10987
 24785                           
 24786                           ;oled.c: 124:  OLED_command(0x02);
 24787  2BF6  3002               	movlw	2
 24788  2BF7  31B1  2150  31AB   	fcall	_OLED_command
 24789                           
 24790                           ;oled.c: 125:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24791  2BFA  3007               	movlw	7
 24792  2BFB  0140               	movlb	0	; select bank0
 24793  2BFC  00A7               	movwf	??_OLED_init
 24794  2BFD  307D               	movlw	125
 24795  2BFE                     u10997:	
 24796  2BFE  0B89               	decfsz	9,f
 24797  2BFF  2BFE               	goto	u10997
 24798  2C00  0BA7               	decfsz	??_OLED_init,f
 24799  2C01  2BFE               	goto	u10997
 24800                           
 24801                           ;oled.c: 126:  OLED_command(0x0C);
 24802  2C02  300C               	movlw	12
 24803  2C03  31B1  2150  31AB   	fcall	_OLED_command
 24804                           
 24805                           ;oled.c: 127:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24806  2C06  3007               	movlw	7
 24807  2C07  0140               	movlb	0	; select bank0
 24808  2C08  00A7               	movwf	??_OLED_init
 24809  2C09  307D               	movlw	125
 24810  2C0A                     u11007:	
 24811  2C0A  0B89               	decfsz	9,f
 24812  2C0B  2C0A               	goto	u11007
 24813  2C0C  0BA7               	decfsz	??_OLED_init,f
 24814  2C0D  2C0A               	goto	u11007
 24815  2C0E  0008               	return
 24816  2C0F                     __end_of_OLED_init:	
 24817                           
 24818                           	psect	text67
 24819  3150                     __ptext67:	
 24820 ;; *************** function _OLED_command *****************
 24821 ;; Defined at:
 24822 ;;		line 70 in file "oled.c"
 24823 ;; Parameters:    Size  Location     Type
 24824 ;;  value           1    wreg     unsigned char 
 24825 ;; Auto vars:     Size  Location     Type
 24826 ;;  value           1    6[BANK0 ] unsigned char 
 24827 ;; Return value:  Size  Location     Type
 24828 ;;                  1    wreg      void 
 24829 ;; Registers used:
 24830 ;;		wreg, status,2, status,0, pclath, cstack
 24831 ;; Tracked objects:
 24832 ;;		On entry : 0/0
 24833 ;;		On exit  : 0/0
 24834 ;;		Unchanged: 0/0
 24835 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24837 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24839 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24840 ;;Total ram usage:        1 bytes
 24841 ;; Hardware stack levels used:    1
 24842 ;; Hardware stack levels required when called:    5
 24843 ;; This function calls:
 24844 ;;		_OLED_send
 24845 ;;		_OLED_waitForReady
 24846 ;; This function is called by:
 24847 ;;		_main
 24848 ;;		_OLED_off
 24849 ;;		_OLED_init
 24850 ;;		_OLED_print_xy
 24851 ;;		_OLED_loadSpecialChars
 24852 ;;		_viewErrorMessage
 24853 ;;		_menu
 24854 ;;		_paging
 24855 ;;		_returnToPage
 24856 ;;		_systemCheck
 24857 ;;		_OLED_setCursor
 24858 ;; This function uses a non-reentrant model
 24859 ;;
 24860                           
 24861                           
 24862                           ;psect for function _OLED_command
 24863  3150                     _OLED_command:	
 24864                           
 24865                           ;incstack = 0
 24866                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 24867                           ;OLED_command@value stored from wreg
 24868  3150  0140               	movlb	0	; select bank0
 24869  3151  00A6               	movwf	OLED_command@value
 24870                           
 24871                           ;oled.c: 70: void OLED_command(uint8_t value);oled.c: 71: {;oled.c: 72:  OLED_send(value
      +                          , 0);
 24872  3152  01A3               	clrf	OLED_send@mode
 24873  3153  0826               	movf	OLED_command@value,w
 24874  3154  31B1  21AF  31B1   	fcall	_OLED_send
 24875                           
 24876                           ;oled.c: 73:  OLED_waitForReady();
 24877  3157  31B2  2297         	fcall	_OLED_waitForReady
 24878  3159  0008               	return
 24879  315A                     __end_of_OLED_command:	
 24880                           
 24881                           	psect	text68
 24882  3297                     __ptext68:	
 24883 ;; *************** function _OLED_waitForReady *****************
 24884 ;; Defined at:
 24885 ;;		line 42 in file "oled.c"
 24886 ;; Parameters:    Size  Location     Type
 24887 ;;		None
 24888 ;; Auto vars:     Size  Location     Type
 24889 ;;  busy            1    0[BANK0 ] unsigned char 
 24890 ;; Return value:  Size  Location     Type
 24891 ;;                  1    wreg      void 
 24892 ;; Registers used:
 24893 ;;		wreg, status,2, status,0
 24894 ;; Tracked objects:
 24895 ;;		On entry : 0/0
 24896 ;;		On exit  : 0/0
 24897 ;;		Unchanged: 0/0
 24898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24900 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24901 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24902 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24903 ;;Total ram usage:        1 bytes
 24904 ;; Hardware stack levels used:    1
 24905 ;; Hardware stack levels required when called:    3
 24906 ;; This function calls:
 24907 ;;		Nothing
 24908 ;; This function is called by:
 24909 ;;		_OLED_command
 24910 ;;		_OLED_write
 24911 ;; This function uses a non-reentrant model
 24912 ;;
 24913                           
 24914                           
 24915                           ;psect for function _OLED_waitForReady
 24916  3297                     _OLED_waitForReady:	
 24917                           
 24918                           ;oled.c: 46:  TRISCbits.TRISC4 = 1;
 24919                           
 24920                           ;incstack = 0
 24921                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0]
 24922  3297  0140               	movlb	0	; select bank0
 24923  3298  1614               	bsf	20,4	;volatile
 24924                           
 24925                           ;oled.c: 47:  LATBbits.LATB4 = 0;
 24926  3299  1219               	bcf	25,4	;volatile
 24927                           
 24928                           ;oled.c: 48:  LATBbits.LATB3 = 1;
 24929  329A  1599               	bsf	25,3	;volatile
 24930  329B                     l187:	
 24931                           ;oled.c: 50:  do {
 24932                           
 24933                           
 24934                           ;oled.c: 51:   LATBbits.LATB2 = 0;
 24935  329B  1119               	bcf	25,2	;volatile
 24936                           
 24937                           ;oled.c: 52:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 24938  329C  3003               	movlw	3
 24939  329D                     u11017:	
 24940  329D  0B89               	decfsz	9,f
 24941  329E  2A9D               	goto	u11017
 24942  329F  0000               	nop
 24943                           
 24944                           ;oled.c: 53:   LATBbits.LATB2 = 1;
 24945  32A0  0140               	movlb	0	; select bank0
 24946  32A1  1519               	bsf	25,2	;volatile
 24947                           
 24948                           ;oled.c: 55:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 24949  32A2  3003               	movlw	3
 24950  32A3                     u11027:	
 24951  32A3  0B89               	decfsz	9,f
 24952  32A4  2AA3               	goto	u11027
 24953  32A5  0000               	nop
 24954                           
 24955                           ;oled.c: 56:   busy = PORTCbits.RC4;
 24956  32A6  3000               	movlw	0
 24957  32A7  0140               	movlb	0	; select bank0
 24958  32A8  1A0E               	btfsc	14,4	;volatile
 24959  32A9  3001               	movlw	1
 24960  32AA  00A0               	movwf	OLED_waitForReady@busy
 24961                           
 24962                           ;oled.c: 58:   LATBbits.LATB2 = 0;
 24963  32AB  1119               	bcf	25,2	;volatile
 24964                           
 24965                           ;oled.c: 59:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 24966  32AC  3003               	movlw	3
 24967  32AD                     u11037:	
 24968  32AD  0B89               	decfsz	9,f
 24969  32AE  2AAD               	goto	u11037
 24970  32AF  0000               	nop
 24971                           
 24972                           ;oled.c: 61:   LATBbits.LATB2 = 1;
 24973  32B0  0140               	movlb	0	; select bank0
 24974  32B1  1519               	bsf	25,2	;volatile
 24975                           
 24976                           ;oled.c: 62:   _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 24977  32B2  3010               	movlw	16
 24978  32B3                     u11047:	
 24979  32B3  0B89               	decfsz	9,f
 24980  32B4  2AB3               	goto	u11047
 24981  32B5  3200               	nop2
 24982                           
 24983                           ;oled.c: 63:   LATBbits.LATB2 = 0;
 24984  32B6  0140               	movlb	0	; select bank0
 24985  32B7  1119               	bcf	25,2	;volatile
 24986                           
 24987                           ;oled.c: 64:  } while (busy);
 24988  32B8  0820               	movf	OLED_waitForReady@busy,w
 24989  32B9  1D03               	btfss	3,2
 24990  32BA  2A9B               	goto	l187
 24991                           
 24992                           ;oled.c: 66:  TRISCbits.TRISC4 = 0;
 24993  32BB  1214               	bcf	20,4	;volatile
 24994                           
 24995                           ;oled.c: 67:  LATBbits.LATB3 = 0;
 24996  32BC  1199               	bcf	25,3	;volatile
 24997  32BD  0008               	return
 24998  32BE                     __end_of_OLED_waitForReady:	
 24999                           
 25000                           	psect	text69
 25001  31AF                     __ptext69:	
 25002 ;; *************** function _OLED_send *****************
 25003 ;; Defined at:
 25004 ;;		line 31 in file "oled.c"
 25005 ;; Parameters:    Size  Location     Type
 25006 ;;  value           1    wreg     unsigned char 
 25007 ;;  mode            1    3[BANK0 ] unsigned char 
 25008 ;; Auto vars:     Size  Location     Type
 25009 ;;  value           1    5[BANK0 ] unsigned char 
 25010 ;; Return value:  Size  Location     Type
 25011 ;;                  1    wreg      void 
 25012 ;; Registers used:
 25013 ;;		wreg, status,2, status,0, pclath, cstack
 25014 ;; Tracked objects:
 25015 ;;		On entry : 0/0
 25016 ;;		On exit  : 0/0
 25017 ;;		Unchanged: 0/0
 25018 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25019 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25020 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25021 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25022 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25023 ;;Total ram usage:        3 bytes
 25024 ;; Hardware stack levels used:    1
 25025 ;; Hardware stack levels required when called:    4
 25026 ;; This function calls:
 25027 ;;		_OLED_write4bits
 25028 ;; This function is called by:
 25029 ;;		_OLED_command
 25030 ;;		_OLED_write
 25031 ;; This function uses a non-reentrant model
 25032 ;;
 25033                           
 25034                           
 25035                           ;psect for function _OLED_send
 25036  31AF                     _OLED_send:	
 25037                           
 25038                           ;incstack = 0
 25039                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 25040                           ;OLED_send@value stored from wreg
 25041  31AF  0140               	movlb	0	; select bank0
 25042  31B0  00A5               	movwf	OLED_send@value
 25043                           
 25044                           ;oled.c: 31: void OLED_send(uint8_t value, uint8_t mode);oled.c: 32: {;oled.c: 33:  LATB
      +                          bits.LATB4 = mode;
 25045  31B1  0C23               	rrf	OLED_send@mode,w
 25046  31B2  1C03               	skipc
 25047  31B3  1219               	bcf	25,4	;volatile
 25048  31B4  1803               	skipnc
 25049  31B5  1619               	bsf	25,4	;volatile
 25050                           
 25051                           ;oled.c: 34:  LATBbits.LATB3 = 0;
 25052  31B6  1199               	bcf	25,3	;volatile
 25053                           
 25054                           ;oled.c: 36:  OLED_write4bits(value >> 4);
 25055  31B7  0825               	movf	OLED_send@value,w
 25056  31B8  00A4               	movwf	??_OLED_send
 25057  31B9  3004               	movlw	4
 25058  31BA                     u7495:	
 25059  31BA  36A4               	lsrf	??_OLED_send,f
 25060  31BB  0B89               	decfsz	9,f
 25061  31BC  29BA               	goto	u7495
 25062  31BD  0824               	movf	??_OLED_send,w
 25063  31BE  31B4  24A4  31B1   	fcall	_OLED_write4bits
 25064                           
 25065                           ;oled.c: 37:  OLED_write4bits(value);
 25066  31C1  0140               	movlb	0	; select bank0
 25067  31C2  0825               	movf	OLED_send@value,w
 25068  31C3  31B4  24A4         	fcall	_OLED_write4bits
 25069  31C5  0008               	return
 25070  31C6                     __end_of_OLED_send:	
 25071                           
 25072                           	psect	text70
 25073  34A4                     __ptext70:	
 25074 ;; *************** function _OLED_write4bits *****************
 25075 ;; Defined at:
 25076 ;;		line 18 in file "oled.c"
 25077 ;; Parameters:    Size  Location     Type
 25078 ;;  value           1    wreg     unsigned char 
 25079 ;; Auto vars:     Size  Location     Type
 25080 ;;  value           1    2[BANK0 ] unsigned char 
 25081 ;; Return value:  Size  Location     Type
 25082 ;;                  1    wreg      void 
 25083 ;; Registers used:
 25084 ;;		wreg, status,2, status,0
 25085 ;; Tracked objects:
 25086 ;;		On entry : 0/0
 25087 ;;		On exit  : 0/0
 25088 ;;		Unchanged: 0/0
 25089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25092 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25093 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25094 ;;Total ram usage:        3 bytes
 25095 ;; Hardware stack levels used:    1
 25096 ;; Hardware stack levels required when called:    3
 25097 ;; This function calls:
 25098 ;;		Nothing
 25099 ;; This function is called by:
 25100 ;;		_OLED_send
 25101 ;;		_OLED_init
 25102 ;; This function uses a non-reentrant model
 25103 ;;
 25104                           
 25105                           
 25106                           ;psect for function _OLED_write4bits
 25107  34A4                     _OLED_write4bits:	
 25108                           
 25109                           ;incstack = 0
 25110                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0]
 25111                           ;OLED_write4bits@value stored from wreg
 25112  34A4  0140               	movlb	0	; select bank0
 25113  34A5  00A2               	movwf	OLED_write4bits@value
 25114                           
 25115                           ;oled.c: 18: void OLED_write4bits(uint8_t value);oled.c: 19: {;oled.c: 20:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 25116  34A6  0822               	movf	OLED_write4bits@value,w
 25117  34A7  3901               	andlw	1
 25118  34A8  00A0               	movwf	??_OLED_write4bits
 25119  34A9  0DA0               	rlf	??_OLED_write4bits,f
 25120  34AA  0819               	movf	25,w	;volatile
 25121  34AB  0620               	xorwf	??_OLED_write4bits,w
 25122  34AC  39FD               	andlw	-3
 25123  34AD  0620               	xorwf	??_OLED_write4bits,w
 25124  34AE  0099               	movwf	25	;volatile
 25125                           
 25126                           ;oled.c: 21:  LATBbits.LATB0 = (value >> 1) & 0x01;
 25127  34AF  0822               	movf	OLED_write4bits@value,w
 25128  34B0  00A0               	movwf	??_OLED_write4bits
 25129  34B1  3001               	movlw	1
 25130  34B2                     u7465:	
 25131  34B2  36A0               	lsrf	??_OLED_write4bits,f
 25132  34B3  0B89               	decfsz	9,f
 25133  34B4  2CB2               	goto	u7465
 25134  34B5  3001               	movlw	1
 25135  34B6  0520               	andwf	??_OLED_write4bits,w
 25136  34B7  00A1               	movwf	??_OLED_write4bits+1
 25137  34B8  0819               	movf	25,w	;volatile
 25138  34B9  0621               	xorwf	??_OLED_write4bits+1,w
 25139  34BA  39FE               	andlw	-2
 25140  34BB  0621               	xorwf	??_OLED_write4bits+1,w
 25141  34BC  0099               	movwf	25	;volatile
 25142                           
 25143                           ;oled.c: 22:  LATCbits.LATC5 = (value >> 2) & 0x01;
 25144  34BD  0822               	movf	OLED_write4bits@value,w
 25145  34BE  00A0               	movwf	??_OLED_write4bits
 25146  34BF  3002               	movlw	2
 25147  34C0                     u7475:	
 25148  34C0  36A0               	lsrf	??_OLED_write4bits,f
 25149  34C1  0B89               	decfsz	9,f
 25150  34C2  2CC0               	goto	u7475
 25151  34C3  0820               	movf	??_OLED_write4bits,w
 25152  34C4  3901               	andlw	1
 25153  34C5  00A1               	movwf	??_OLED_write4bits+1
 25154  34C6  0EA1               	swapf	??_OLED_write4bits+1,f
 25155  34C7  0DA1               	rlf	??_OLED_write4bits+1,f
 25156  34C8  081A               	movf	26,w	;volatile
 25157  34C9  0621               	xorwf	??_OLED_write4bits+1,w
 25158  34CA  39DF               	andlw	-33
 25159  34CB  0621               	xorwf	??_OLED_write4bits+1,w
 25160  34CC  009A               	movwf	26	;volatile
 25161                           
 25162                           ;oled.c: 23:  LATCbits.LATC4 = (value >> 3) & 0x01;
 25163  34CD  0822               	movf	OLED_write4bits@value,w
 25164  34CE  00A0               	movwf	??_OLED_write4bits
 25165  34CF  3003               	movlw	3
 25166  34D0                     u7485:	
 25167  34D0  36A0               	lsrf	??_OLED_write4bits,f
 25168  34D1  0B89               	decfsz	9,f
 25169  34D2  2CD0               	goto	u7485
 25170  34D3  0820               	movf	??_OLED_write4bits,w
 25171  34D4  3901               	andlw	1
 25172  34D5  00A1               	movwf	??_OLED_write4bits+1
 25173  34D6  0EA1               	swapf	??_OLED_write4bits+1,f
 25174  34D7  081A               	movf	26,w	;volatile
 25175  34D8  0621               	xorwf	??_OLED_write4bits+1,w
 25176  34D9  39EF               	andlw	-17
 25177  34DA  0621               	xorwf	??_OLED_write4bits+1,w
 25178  34DB  009A               	movwf	26	;volatile
 25179                           
 25180                           ;oled.c: 25:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25181  34DC  3010               	movlw	16
 25182  34DD                     u11057:	
 25183  34DD  0B89               	decfsz	9,f
 25184  34DE  2CDD               	goto	u11057
 25185  34DF  3200               	nop2
 25186                           
 25187                           ;oled.c: 26:  LATBbits.LATB2 = 1;
 25188  34E0  0140               	movlb	0	; select bank0
 25189  34E1  1519               	bsf	25,2	;volatile
 25190                           
 25191                           ;oled.c: 27:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25192  34E2  3010               	movlw	16
 25193  34E3                     u11067:	
 25194  34E3  0B89               	decfsz	9,f
 25195  34E4  2CE3               	goto	u11067
 25196  34E5  3200               	nop2
 25197                           
 25198                           ;oled.c: 28:  LATBbits.LATB2 = 0;
 25199  34E6  0140               	movlb	0	; select bank0
 25200  34E7  1119               	bcf	25,2	;volatile
 25201  34E8  0008               	return
 25202  34E9                     __end_of_OLED_write4bits:	
 25203                           
 25204                           	psect	intentry
 25205  0004                     __pintentry:	
 25206 ;; *************** function _ISR *****************
 25207 ;; Defined at:
 25208 ;;		line 22 in file "interrupt.c"
 25209 ;; Parameters:    Size  Location     Type
 25210 ;;		None
 25211 ;; Auto vars:     Size  Location     Type
 25212 ;;		None
 25213 ;; Return value:  Size  Location     Type
 25214 ;;                  1    wreg      void 
 25215 ;; Registers used:
 25216 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25217 ;; Tracked objects:
 25218 ;;		On entry : 0/0
 25219 ;;		On exit  : 0/0
 25220 ;;		Unchanged: 0/0
 25221 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25222 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25223 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25224 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25225 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25226 ;;Total ram usage:        4 bytes
 25227 ;; Hardware stack levels used:    1
 25228 ;; Hardware stack levels required when called:    2
 25229 ;; This function calls:
 25230 ;;		_pushButtonISR
 25231 ;;		_rotISR
 25232 ;;		_uartReceiveISR
 25233 ;; This function is called by:
 25234 ;;		Interrupt level 1
 25235 ;; This function uses a non-reentrant model
 25236 ;;
 25237                           
 25238  0004                     _ISR:	
 25239                           
 25240                           ;incstack = 0
 25241  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 25242                           
 25243                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25244  0005  3180               	pagesel	$
 25245                           
 25246                           ;interrupt.c: 24:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 25247  0006  014E               	movlb	14	; select bank14
 25248  0007  1A96               	btfsc	22,5	;volatile
 25249  0008  1E8C               	btfss	12,5	;volatile
 25250  0009  281C               	goto	i1l273
 25251                           
 25252                           ;interrupt.c: 27:   tick10ms++;
 25253  000A  3001               	movlw	1
 25254  000B  00F8               	movwf	??_ISR
 25255  000C  0878               	movf	??_ISR,w
 25256  000D  0142               	movlb	2	; select bank2
 25257  000E  07EE               	addwf	_tick10ms^(0+256),f	;volatile
 25258                           
 25259                           ;interrupt.c: 28:   if (pbState == PB_WAIT)
 25260  000F  3004               	movlw	4
 25261  0010  067D               	xorwf	_pbState,w	;volatile
 25262  0011  1D03               	btfss	3,2
 25263  0012  2816               	goto	i1l6881
 25264                           
 25265                           ;interrupt.c: 29:    pushButtonISR();
 25266  0013  31B6  2699  3180   	fcall	_pushButtonISR
 25267  0016                     i1l6881:	
 25268                           
 25269                           ;interrupt.c: 30:   TMR0 = 178;
 25270  0016  30B2               	movlw	178
 25271  0017  014B               	movlb	11	; select bank11
 25272  0018  009C               	movwf	28	;volatile
 25273                           
 25274                           ;interrupt.c: 31:   PIR0bits.TMR0IF = 0;
 25275  0019  014E               	movlb	14	; select bank14
 25276  001A  128C               	bcf	12,5	;volatile
 25277                           
 25278                           ;interrupt.c: 32:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 25279  001B  286C               	goto	i1l286
 25280  001C                     i1l273:	
 25281  001C  1A16               	btfsc	22,4	;volatile
 25282  001D  1E0C               	btfss	12,4	;volatile
 25283  001E  2838               	goto	i1l276
 25284                           
 25285                           ;interrupt.c: 34:   if (IOCAFbits.IOCAF7 == 1) {
 25286  001F  017E               	movlb	62	; select bank62
 25287  0020  1FBF               	btfss	63,7	;volatile
 25288  0021  2827               	goto	i1l6893
 25289                           
 25290                           ;interrupt.c: 35:    pushButtonISR();
 25291  0022  31B6  2699  3180   	fcall	_pushButtonISR
 25292                           
 25293                           ;interrupt.c: 36:    IOCAFbits.IOCAF7 = 0;
 25294  0025  017E               	movlb	62	; select bank62
 25295  0026  13BF               	bcf	63,7	;volatile
 25296  0027                     i1l6893:	
 25297                           
 25298                           ;interrupt.c: 38:   if (IOCAFbits.IOCAF4 == 1) {
 25299  0027  1E3F               	btfss	63,4	;volatile
 25300  0028  282E               	goto	i1l6899
 25301                           
 25302                           ;interrupt.c: 39:    rotISR();
 25303  0029  31B6  264F  3180   	fcall	_rotISR
 25304                           
 25305                           ;interrupt.c: 40:    IOCAFbits.IOCAF4 = 0;
 25306  002C  017E               	movlb	62	; select bank62
 25307  002D  123F               	bcf	63,4	;volatile
 25308  002E                     i1l6899:	
 25309                           
 25310                           ;interrupt.c: 42:   if (IOCAFbits.IOCAF5 == 1) {
 25311  002E  1EBF               	btfss	63,5	;volatile
 25312  002F  2835               	goto	i1l6905
 25313                           
 25314                           ;interrupt.c: 43:    rotISR();
 25315  0030  31B6  264F  3180   	fcall	_rotISR
 25316                           
 25317                           ;interrupt.c: 44:    IOCAFbits.IOCAF5 = 0;
 25318  0033  017E               	movlb	62	; select bank62
 25319  0034  12BF               	bcf	63,5	;volatile
 25320  0035                     i1l6905:	
 25321                           
 25322                           ;interrupt.c: 46:   PIR0bits.IOCIF = 0;
 25323  0035  014E               	movlb	14	; select bank14
 25324  0036  120C               	bcf	12,4	;volatile
 25325                           
 25326                           ;interrupt.c: 47:  } else if (INTCONbits.PEIE == 1) {
 25327  0037  286C               	goto	i1l286
 25328  0038                     i1l276:	
 25329  0038  1F0B               	btfss	11,6	;volatile
 25330  0039  286C               	goto	i1l286
 25331                           
 25332                           ;interrupt.c: 48:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 25333  003A  181A               	btfsc	26,0	;volatile
 25334  003B  1C10               	btfss	16,0	;volatile
 25335  003C  2865               	goto	i1l282
 25336                           
 25337                           ;interrupt.c: 51:    if (tick100ms++ >= 1000000000UL)
 25338  003D  0144               	movlb	4	; select bank4
 25339  003E  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 25340  003F  00FB               	movwf	??_ISR+3
 25341  0040  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 25342  0041  00FA               	movwf	??_ISR+2
 25343  0042  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 25344  0043  00F9               	movwf	??_ISR+1
 25345  0044  0832               	movf	_tick100ms^(0+512),w	;volatile
 25346  0045  00F8               	movwf	??_ISR
 25347  0046  3001               	movlw	1
 25348  0047  07B2               	addwf	_tick100ms^(0+512),f	;volatile
 25349  0048  3000               	movlw	0
 25350  0049  3DB3               	addwfc	(_tick100ms+1)^(0+512),f	;volatile
 25351  004A  3DB4               	addwfc	(_tick100ms+2)^(0+512),f	;volatile
 25352  004B  3DB5               	addwfc	(_tick100ms+3)^(0+512),f	;volatile
 25353  004C  3000               	movlw	0
 25354  004D  0278               	subwf	??_ISR,w
 25355  004E  30CA               	movlw	202
 25356  004F  3B79               	subwfb	??_ISR+1,w
 25357  0050  309A               	movlw	154
 25358  0051  3B7A               	subwfb	??_ISR+2,w
 25359  0052  303B               	movlw	59
 25360  0053  3B7B               	subwfb	??_ISR+3,w
 25361  0054  1C03               	btfss	3,0
 25362  0055  285E               	goto	i1l6915
 25363                           
 25364                           ;interrupt.c: 52:     tick100ms = 0;
 25365  0056  3000               	movlw	0
 25366  0057  00B5               	movwf	(_tick100ms+3)^(0+512)	;volatile
 25367  0058  3000               	movlw	0
 25368  0059  00B4               	movwf	(_tick100ms+2)^(0+512)	;volatile
 25369  005A  3000               	movlw	0
 25370  005B  00B3               	movwf	(_tick100ms+1)^(0+512)	;volatile
 25371  005C  3000               	movlw	0
 25372  005D  00B2               	movwf	_tick100ms^(0+512)	;volatile
 25373  005E                     i1l6915:	
 25374                           
 25375                           ;interrupt.c: 53:    TMR1 = 53035;
 25376  005E  30CF               	movlw	207
 25377  005F  008D               	movwf	13	;volatile
 25378  0060  302B               	movlw	43
 25379  0061  008C               	movwf	12	;volatile
 25380                           
 25381                           ;interrupt.c: 54:    PIR4bits.TMR1IF = 0;
 25382  0062  014E               	movlb	14	; select bank14
 25383  0063  1010               	bcf	16,0	;volatile
 25384                           
 25385                           ;interrupt.c: 55:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 25386  0064  286C               	goto	i1l286
 25387  0065                     i1l282:	
 25388  0065  1A99               	btfsc	25,5	;volatile
 25389  0066  1E8F               	btfss	15,5	;volatile
 25390  0067  286C               	goto	i1l286
 25391                           
 25392                           ;interrupt.c: 56:    uartReceiveISR();
 25393  0068  31B5  252F         	fcall	_uartReceiveISR
 25394                           
 25395                           ;interrupt.c: 57:    PIR3bits.RC1IF = 0;
 25396  006A  014E               	movlb	14	; select bank14
 25397  006B  128F               	bcf	15,5	;volatile
 25398  006C                     i1l286:	
 25399  006C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 25400  006D  0009               	retfie
 25401  006E                     __end_of_ISR:	
 25402                           
 25403                           	psect	text72
 25404  352F                     __ptext72:	
 25405 ;; *************** function _uartReceiveISR *****************
 25406 ;; Defined at:
 25407 ;;		line 21 in file "uart.c"
 25408 ;; Parameters:    Size  Location     Type
 25409 ;;		None
 25410 ;; Auto vars:     Size  Location     Type
 25411 ;;		None
 25412 ;; Return value:  Size  Location     Type
 25413 ;;                  1    wreg      void 
 25414 ;; Registers used:
 25415 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25416 ;; Tracked objects:
 25417 ;;		On entry : 0/0
 25418 ;;		On exit  : 0/0
 25419 ;;		Unchanged: 0/0
 25420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25421 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25422 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25423 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25424 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25425 ;;Total ram usage:        1 bytes
 25426 ;; Hardware stack levels used:    1
 25427 ;; Hardware stack levels required when called:    1
 25428 ;; This function calls:
 25429 ;;		_strncpy
 25430 ;; This function is called by:
 25431 ;;		_ISR
 25432 ;; This function uses a non-reentrant model
 25433 ;;
 25434                           
 25435                           
 25436                           ;psect for function _uartReceiveISR
 25437  352F                     _uartReceiveISR:	
 25438                           
 25439                           ;uart.c: 23:  static char buffer[20];;uart.c: 25:  static uint8_t checksum = 0;;uart.c: 
      +                          27:  if (RC1STAbits.OERR)
 25440                           
 25441                           ;incstack = 0
 25442                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25443  352F  0142               	movlb	2	; select bank2
 25444  3530  1C9D               	btfss	29,1	;volatile
 25445  3531  2D39               	goto	i1l6781
 25446                           
 25447                           ;uart.c: 28:  {;uart.c: 29:   RC1STAbits.CREN = 0;
 25448  3532  121D               	bcf	29,4	;volatile
 25449                           
 25450                           ;uart.c: 30:   RC1STAbits.CREN = 1;
 25451  3533  161D               	bsf	29,4	;volatile
 25452                           
 25453                           ;uart.c: 31:   rxOErrCount++;
 25454  3534  3001               	movlw	1
 25455  3535  00F6               	movwf	??_uartReceiveISR
 25456  3536  0876               	movf	??_uartReceiveISR,w
 25457  3537  0143               	movlb	3	; select bank3
 25458  3538  07E4               	addwf	_rxOErrCount^(0+384),f	;volatile
 25459  3539                     i1l6781:	
 25460                           
 25461                           ;uart.c: 33:  if (RC1STAbits.FERR)
 25462  3539  0142               	movlb	2	; select bank2
 25463  353A  1D1D               	btfss	29,2	;volatile
 25464  353B  2D43               	goto	i1l6787
 25465                           
 25466                           ;uart.c: 34:  {;uart.c: 35:   RC1STAbits.SPEN = 0;
 25467  353C  139D               	bcf	29,7	;volatile
 25468                           
 25469                           ;uart.c: 36:   RC1STAbits.SPEN = 1;
 25470  353D  179D               	bsf	29,7	;volatile
 25471                           
 25472                           ;uart.c: 37:   rxFErrCount++;
 25473  353E  3001               	movlw	1
 25474  353F  00F6               	movwf	??_uartReceiveISR
 25475  3540  0876               	movf	??_uartReceiveISR,w
 25476  3541  0143               	movlb	3	; select bank3
 25477  3542  07E5               	addwf	_rxFErrCount^(0+384),f	;volatile
 25478  3543                     i1l6787:	
 25479                           
 25480                           ;uart.c: 41:  if (rxCount < sizeof(dataPacket)) {
 25481  3543  300F               	movlw	15
 25482  3544  0142               	movlb	2	; select bank2
 25483  3545  026B               	subwf	_rxCount^(0+256),w	;volatile
 25484  3546  1803               	skipnc
 25485  3547  2D5F               	goto	i1l6793
 25486                           
 25487                           ;uart.c: 42:   buffer[rxCount] = RC1REG;
 25488  3548  0819               	movf	25,w	;volatile
 25489  3549  00F6               	movwf	??_uartReceiveISR
 25490  354A  086B               	movf	_rxCount^(0+256),w
 25491  354B  3EC4               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 25492  354C  0086               	movwf	6
 25493  354D  3002               	movlw	2	; select bank5/6
 25494  354E  0087               	movwf	7
 25495  354F  0876               	movf	??_uartReceiveISR,w
 25496  3550  0081               	movwf	1
 25497                           
 25498                           ;uart.c: 43:   checksum ^= buffer[rxCount];
 25499  3551  086B               	movf	_rxCount^(0+256),w
 25500  3552  3EC4               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 25501  3553  0086               	movwf	6
 25502  3554  3002               	movlw	2	; select bank5/6
 25503  3555  0087               	movwf	7
 25504  3556  0801               	movf	1,w
 25505  3557  00F6               	movwf	??_uartReceiveISR
 25506  3558  0876               	movf	??_uartReceiveISR,w
 25507  3559  06EA               	xorwf	uartReceiveISR@checksum^(0+256),f
 25508                           
 25509                           ;uart.c: 44:   rxCount++;
 25510  355A  3001               	movlw	1
 25511  355B  00F6               	movwf	??_uartReceiveISR
 25512  355C  0876               	movf	??_uartReceiveISR,w
 25513  355D  07EB               	addwf	_rxCount^(0+256),f	;volatile
 25514                           
 25515                           ;uart.c: 45:  } else {
 25516  355E  0008               	return
 25517  355F                     i1l6793:	
 25518                           
 25519                           ;uart.c: 47:   if (RC1REG == checksum) {
 25520  355F  0819               	movf	25,w	;volatile
 25521  3560  066A               	xorwf	uartReceiveISR@checksum^(0+256),w
 25522  3561  1D03               	skipz
 25523  3562  2D72               	goto	i1l6799
 25524                           
 25525                           ;uart.c: 49:    uartDataReadyFlag = 1;
 25526  3563  3001               	movlw	1
 25527  3564  00F6               	movwf	??_uartReceiveISR
 25528  3565  0876               	movf	??_uartReceiveISR,w
 25529  3566  00ED               	movwf	_uartDataReadyFlag^(0+256)	;volatile
 25530                           
 25531                           ;uart.c: 50:    strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 25532  3567  30C4               	movlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 25533  3568  00F6               	movwf	??_uartReceiveISR
 25534  3569  0876               	movf	??_uartReceiveISR,w
 25535  356A  00F0               	movwf	strncpy@s
 25536  356B  300F               	movlw	15
 25537  356C  00F1               	movwf	strncpy@n
 25538  356D  3000               	movlw	0
 25539  356E  00F2               	movwf	strncpy@n+1
 25540  356F  3038               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 25541  3570  31B3  2370         	fcall	_strncpy
 25542  3572                     i1l6799:	
 25543                           
 25544                           ;uart.c: 52:   checksum = 0;
 25545  3572  0142               	movlb	2	; select bank2
 25546  3573  01EA               	clrf	uartReceiveISR@checksum^(0+256)
 25547                           
 25548                           ;uart.c: 53:   rxCount = 0;
 25549  3574  01EB               	clrf	_rxCount^(0+256)	;volatile
 25550  3575  0008               	return
 25551  3576                     __end_of_uartReceiveISR:	
 25552                           
 25553                           	psect	text73
 25554  3370                     __ptext73:	
 25555 ;; *************** function _strncpy *****************
 25556 ;; Defined at:
 25557 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncpy.c"
 25558 ;; Parameters:    Size  Location     Type
 25559 ;;  d               1    wreg     PTR unsigned char 
 25560 ;;		 -> dataPacket(15), 
 25561 ;;  s               1    0[COMMON] PTR const unsigned char 
 25562 ;;		 -> uartReceiveISR@buffer(20), 
 25563 ;;  n               2    1[COMMON] unsigned int 
 25564 ;; Auto vars:     Size  Location     Type
 25565 ;;  d               1    4[COMMON] PTR unsigned char 
 25566 ;;		 -> dataPacket(15), 
 25567 ;;  cp              1    5[COMMON] PTR unsigned char 
 25568 ;;		 -> dataPacket(15), 
 25569 ;; Return value:  Size  Location     Type
 25570 ;;                  1    wreg      PTR unsigned char 
 25571 ;; Registers used:
 25572 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 25573 ;; Tracked objects:
 25574 ;;		On entry : 0/0
 25575 ;;		On exit  : 0/0
 25576 ;;		Unchanged: 0/0
 25577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25578 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25579 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25580 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25581 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25582 ;;Total ram usage:        6 bytes
 25583 ;; Hardware stack levels used:    1
 25584 ;; This function calls:
 25585 ;;		Nothing
 25586 ;; This function is called by:
 25587 ;;		_uartReceiveISR
 25588 ;; This function uses a non-reentrant model
 25589 ;;
 25590                           
 25591                           
 25592                           ;psect for function _strncpy
 25593  3370                     _strncpy:	
 25594                           
 25595                           ;incstack = 0
 25596                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 25597                           ;strncpy@d stored from wreg
 25598  3370  00F4               	movwf	strncpy@d
 25599  3371  0874               	movf	strncpy@d,w
 25600  3372  00F3               	movwf	??_strncpy
 25601  3373  0873               	movf	??_strncpy,w
 25602  3374  00F5               	movwf	strncpy@cp
 25603  3375                     i1l5457:	
 25604  3375  0871               	movf	strncpy@n,w
 25605  3376  0472               	iorwf	strncpy@n+1,w
 25606  3377  1903               	btfsc	3,2
 25607  3378  2B96               	goto	i1l5463
 25608  3379  3001               	movlw	1
 25609  337A  02F1               	subwf	strncpy@n,f
 25610  337B  3000               	movlw	0
 25611  337C  3BF2               	subwfb	strncpy@n+1,f
 25612  337D  0875               	movf	strncpy@cp,w
 25613  337E  0086               	movwf	6
 25614  337F  3002               	movlw	2	; select bank4/5
 25615  3380  0087               	movwf	7
 25616  3381  0AF5               	incf	strncpy@cp,f
 25617  3382  0870               	movf	strncpy@s,w
 25618  3383  0084               	movwf	4
 25619  3384  3002               	movlw	2	; select bank4/5
 25620  3385  0085               	movwf	5
 25621  3386  0AF0               	incf	strncpy@s,f
 25622  3387  0800               	movf	0,w
 25623  3388  3FC0               	movwi [0]fsr1
 25624  3389  0889               	movf	9,f
 25625  338A  1903               	btfsc	3,2
 25626  338B  2B96               	goto	i1l5463
 25627  338C  2B75               	goto	i1l5457
 25628  338D                     i1l5459:	
 25629  338D  0875               	movf	strncpy@cp,w
 25630  338E  0086               	movwf	6
 25631  338F  3002               	movlw	2	; select bank4/5
 25632  3390  0087               	movwf	7
 25633  3391  0181               	clrf	1
 25634  3392  3001               	movlw	1
 25635  3393  00F3               	movwf	??_strncpy
 25636  3394  0873               	movf	??_strncpy,w
 25637  3395  07F5               	addwf	strncpy@cp,f
 25638  3396                     i1l5463:	
 25639  3396  3001               	movlw	1
 25640  3397  02F1               	subwf	strncpy@n,f
 25641  3398  3000               	movlw	0
 25642  3399  3BF2               	subwfb	strncpy@n+1,f
 25643  339A  0A71               	incf	strncpy@n,w
 25644  339B  1D03               	skipz
 25645  339C  2B8D               	goto	i1l5459
 25646  339D  0A72               	incf	strncpy@n+1,w
 25647  339E  1903               	btfsc	3,2
 25648  339F  0008               	return
 25649  33A0  2B8D               	goto	i1l5459
 25650  33A1                     __end_of_strncpy:	
 25651                           
 25652                           	psect	text74
 25653  364F                     __ptext74:	
 25654 ;; *************** function _rotISR *****************
 25655 ;; Defined at:
 25656 ;;		line 34 in file "inputs.c"
 25657 ;; Parameters:    Size  Location     Type
 25658 ;;		None
 25659 ;; Auto vars:     Size  Location     Type
 25660 ;;  input           1    7[COMMON] unsigned char 
 25661 ;; Return value:  Size  Location     Type
 25662 ;;                  1    wreg      void 
 25663 ;; Registers used:
 25664 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 25665 ;; Tracked objects:
 25666 ;;		On entry : 0/0
 25667 ;;		On exit  : 0/0
 25668 ;;		Unchanged: 0/0
 25669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25670 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25671 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25672 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25673 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25674 ;;Total ram usage:        8 bytes
 25675 ;; Hardware stack levels used:    1
 25676 ;; This function calls:
 25677 ;;		Nothing
 25678 ;; This function is called by:
 25679 ;;		_ISR
 25680 ;; This function uses a non-reentrant model
 25681 ;;
 25682                           
 25683                           
 25684                           ;psect for function _rotISR
 25685  364F                     _rotISR:	
 25686                           
 25687                           ;inputs.c: 36:  uint8_t input;;inputs.c: 38:  input = (PORTAbits.RA5 << 1) | PORTAbits.R
      +                          A4;
 25688                           
 25689                           ;incstack = 0
 25690                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 25691  364F  0140               	movlb	0	; select bank0
 25692  3650  0E0C               	swapf	12,w	;volatile
 25693  3651  3901               	andlw	1
 25694  3652  00F0               	movwf	??_rotISR
 25695  3653  0E0C               	swapf	12,w	;volatile
 25696  3654  0C89               	rrf	9,f
 25697  3655  3901               	andlw	1
 25698  3656  0709               	addwf	9,w
 25699  3657  0470               	iorwf	??_rotISR,w
 25700  3658  00F1               	movwf	??_rotISR+1
 25701  3659  0871               	movf	??_rotISR+1,w
 25702  365A  00F7               	movwf	rotISR@input
 25703                           
 25704                           ;inputs.c: 41:  curRotState = transition_table[curRotState & 0b00000111][input];
 25705  365B  0141               	movlb	1	; select bank1
 25706  365C  086C               	movf	_curRotState^(0+128),w	;volatile
 25707  365D  3907               	andlw	7
 25708  365E  00F0               	movwf	??_rotISR
 25709  365F  01F1               	clrf	??_rotISR+1
 25710  3660  35F0               	lslf	??_rotISR,f
 25711  3661  0DF1               	rlf	??_rotISR+1,f
 25712  3662  35F0               	lslf	??_rotISR,f
 25713  3663  0DF1               	rlf	??_rotISR+1,f
 25714  3664  3070               	movlw	low (_transition_table| (0+32768))
 25715  3665  00F2               	movwf	??_rotISR+2
 25716  3666  30B8               	movlw	high (_transition_table| (0+32768))
 25717  3667  00F3               	movwf	??_rotISR+3
 25718  3668  0870               	movf	??_rotISR,w
 25719  3669  0772               	addwf	??_rotISR+2,w
 25720  366A  00F4               	movwf	??_rotISR+4
 25721  366B  0871               	movf	??_rotISR+1,w
 25722  366C  3D73               	addwfc	??_rotISR+3,w
 25723  366D  00F5               	movwf	??_rotISR+5
 25724  366E  0877               	movf	rotISR@input,w
 25725  366F  0774               	addwf	??_rotISR+4,w
 25726  3670  0084               	movwf	4
 25727  3671  0875               	movf	??_rotISR+5,w
 25728  3672  1803               	skipnc
 25729  3673  0A75               	incf	??_rotISR+5,w
 25730  3674  0085               	movwf	5
 25731  3675  0800               	movf	0,w	;code access
 25732  3676  00F6               	movwf	??_rotISR+6
 25733  3677  0876               	movf	??_rotISR+6,w
 25734  3678  00EC               	movwf	_curRotState^(0+128)	;volatile
 25735                           
 25736                           ;inputs.c: 44:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 25737  3679  1FEC               	btfss	_curRotState^(0+128),7	;volatile
 25738  367A  2E80               	goto	i1l6771
 25739  367B  3001               	movlw	1
 25740  367C  00F0               	movwf	??_rotISR
 25741  367D  0870               	movf	??_rotISR,w
 25742  367E  0142               	movlb	2	; select bank2
 25743  367F  00EC               	movwf	_rotDir^(0+256)	;volatile
 25744  3680                     i1l6771:	
 25745                           
 25746                           ;inputs.c: 45:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 25747  3680  0141               	movlb	1	; select bank1
 25748  3681  1F6C               	btfss	_curRotState^(0+128),6	;volatile
 25749  3682  2E88               	goto	i1l312
 25750  3683  3002               	movlw	2
 25751  3684  00F0               	movwf	??_rotISR
 25752  3685  0870               	movf	??_rotISR,w
 25753  3686  0142               	movlb	2	; select bank2
 25754  3687  00EC               	movwf	_rotDir^(0+256)	;volatile
 25755  3688                     i1l312:	
 25756                           
 25757                           ;inputs.c: 47:  userActivity = tick100ms;
 25758  3688  0144               	movlb	4	; select bank4
 25759  3689  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 25760  368A  0142               	movlb	2	; select bank2
 25761  368B  00DF               	movwf	(_userActivity+3)^(0+256)	;volatile
 25762  368C  0144               	movlb	4	; select bank4
 25763  368D  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 25764  368E  0142               	movlb	2	; select bank2
 25765  368F  00DE               	movwf	(_userActivity+2)^(0+256)	;volatile
 25766  3690  0144               	movlb	4	; select bank4
 25767  3691  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 25768  3692  0142               	movlb	2	; select bank2
 25769  3693  00DD               	movwf	(_userActivity+1)^(0+256)	;volatile
 25770  3694  0144               	movlb	4	; select bank4
 25771  3695  0832               	movf	_tick100ms^(0+512),w	;volatile
 25772  3696  0142               	movlb	2	; select bank2
 25773  3697  00DC               	movwf	_userActivity^(0+256)	;volatile
 25774  3698  0008               	return
 25775  3699                     __end_of_rotISR:	
 25776                           
 25777                           	psect	text75
 25778  3699                     __ptext75:	
 25779 ;; *************** function _pushButtonISR *****************
 25780 ;; Defined at:
 25781 ;;		line 54 in file "inputs.c"
 25782 ;; Parameters:    Size  Location     Type
 25783 ;;		None
 25784 ;; Auto vars:     Size  Location     Type
 25785 ;;  time            1    1[COMMON] unsigned char 
 25786 ;; Return value:  Size  Location     Type
 25787 ;;                  1    wreg      void 
 25788 ;; Registers used:
 25789 ;;		wreg, status,2, status,0
 25790 ;; Tracked objects:
 25791 ;;		On entry : 0/0
 25792 ;;		On exit  : 0/0
 25793 ;;		Unchanged: 0/0
 25794 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25795 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25796 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25797 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25798 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25799 ;;Total ram usage:        2 bytes
 25800 ;; Hardware stack levels used:    1
 25801 ;; This function calls:
 25802 ;;		Nothing
 25803 ;; This function is called by:
 25804 ;;		_ISR
 25805 ;; This function uses a non-reentrant model
 25806 ;;
 25807                           
 25808                           
 25809                           ;psect for function _pushButtonISR
 25810  3699                     _pushButtonISR:	
 25811                           
 25812                           ;inputs.c: 56:  uint8_t time;;inputs.c: 58:  if ((!PORTAbits.RA7) && (pbState != PB_WAIT
      +                          )) {
 25813                           
 25814                           ;incstack = 0
 25815                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0]
 25816  3699  0140               	movlb	0	; select bank0
 25817  369A  1B8C               	btfsc	12,7	;volatile
 25818  369B  2EB7               	goto	i1l6745
 25819  369C  3004               	movlw	4
 25820  369D  067D               	xorwf	_pbState,w	;volatile
 25821  369E  1903               	btfsc	3,2
 25822  369F  2EB7               	goto	i1l6745
 25823                           
 25824                           ;inputs.c: 59:   tick10ms = 0;
 25825  36A0  0142               	movlb	2	; select bank2
 25826  36A1  01EE               	clrf	_tick10ms^(0+256)	;volatile
 25827                           
 25828                           ;inputs.c: 60:   pbState = PB_WAIT;
 25829  36A2  3004               	movlw	4
 25830  36A3  00F0               	movwf	??_pushButtonISR
 25831  36A4  0870               	movf	??_pushButtonISR,w
 25832  36A5  00FD               	movwf	_pbState	;volatile
 25833                           
 25834                           ;inputs.c: 61:   userActivity = tick100ms;
 25835  36A6  0144               	movlb	4	; select bank4
 25836  36A7  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 25837  36A8  0142               	movlb	2	; select bank2
 25838  36A9  00DF               	movwf	(_userActivity+3)^(0+256)	;volatile
 25839  36AA  0144               	movlb	4	; select bank4
 25840  36AB  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 25841  36AC  0142               	movlb	2	; select bank2
 25842  36AD  00DE               	movwf	(_userActivity+2)^(0+256)	;volatile
 25843  36AE  0144               	movlb	4	; select bank4
 25844  36AF  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 25845  36B0  0142               	movlb	2	; select bank2
 25846  36B1  00DD               	movwf	(_userActivity+1)^(0+256)	;volatile
 25847  36B2  0144               	movlb	4	; select bank4
 25848  36B3  0832               	movf	_tick100ms^(0+512),w	;volatile
 25849  36B4  0142               	movlb	2	; select bank2
 25850  36B5  00DC               	movwf	_userActivity^(0+256)	;volatile
 25851                           
 25852                           ;inputs.c: 62:  } else if (pbState == PB_WAIT) {
 25853  36B6  0008               	return
 25854  36B7                     i1l6745:	
 25855  36B7  3004               	movlw	4
 25856  36B8  067D               	xorwf	_pbState,w	;volatile
 25857  36B9  1D03               	btfss	3,2
 25858  36BA  0008               	return
 25859                           
 25860                           ;inputs.c: 63:   time = tick10ms;
 25861  36BB  0142               	movlb	2	; select bank2
 25862  36BC  086E               	movf	_tick10ms^(0+256),w	;volatile
 25863  36BD  00F0               	movwf	??_pushButtonISR
 25864  36BE  0870               	movf	??_pushButtonISR,w
 25865  36BF  00F1               	movwf	pushButtonISR@time
 25866                           
 25867                           ;inputs.c: 64:   if ((time > 10) && (time <= 70) && (PORTAbits.RA7))
 25868  36C0  300B               	movlw	11
 25869  36C1  0271               	subwf	pushButtonISR@time,w
 25870  36C2  1C03               	skipc
 25871  36C3  2ED0               	goto	i1l6755
 25872  36C4  3047               	movlw	71
 25873  36C5  0271               	subwf	pushButtonISR@time,w
 25874  36C6  1803               	skipnc
 25875  36C7  2ED0               	goto	i1l6755
 25876  36C8  0140               	movlb	0	; select bank0
 25877  36C9  1F8C               	btfss	12,7	;volatile
 25878  36CA  2ED0               	goto	i1l6755
 25879                           
 25880                           ;inputs.c: 66:    pbState = PB_SHORT;
 25881  36CB  3001               	movlw	1
 25882  36CC  00F0               	movwf	??_pushButtonISR
 25883  36CD  0870               	movf	??_pushButtonISR,w
 25884  36CE  00FD               	movwf	_pbState	;volatile
 25885  36CF  0008               	return
 25886  36D0                     i1l6755:	
 25887  36D0  3047               	movlw	71
 25888  36D1  0271               	subwf	pushButtonISR@time,w
 25889  36D2  1C03               	skipc
 25890  36D3  2EDC               	goto	i1l321
 25891  36D4  0140               	movlb	0	; select bank0
 25892  36D5  1B8C               	btfsc	12,7	;volatile
 25893  36D6  2EDC               	goto	i1l321
 25894                           
 25895                           ;inputs.c: 69:    pbState = PB_LONG;
 25896  36D7  3002               	movlw	2
 25897  36D8  00F0               	movwf	??_pushButtonISR
 25898  36D9  0870               	movf	??_pushButtonISR,w
 25899  36DA  00FD               	movwf	_pbState	;volatile
 25900  36DB  0008               	return
 25901  36DC                     i1l321:	
 25902                           ;inputs.c: 70:   else if (PORTAbits.RA7)
 25903                           
 25904  36DC  0140               	movlb	0	; select bank0
 25905  36DD  1F8C               	btfss	12,7	;volatile
 25906  36DE  0008               	return
 25907                           
 25908                           ;inputs.c: 72:    pbState = PB_ABORT;
 25909  36DF  3003               	movlw	3
 25910  36E0  00F0               	movwf	??_pushButtonISR
 25911  36E1  0870               	movf	??_pushButtonISR,w
 25912  36E2  00FD               	movwf	_pbState	;volatile
 25913  36E3  0008               	return
 25914  36E4                     __end_of_pushButtonISR:	
 25915                           ;inputs.c: 73:  }
 25916                           
 25917  007E                     btemp	set	126	;btemp
 25918  007E                     int$flags	set	126
 25919  007E                     wtemp0	set	126


Data Sizes:
    Strings     783
    Constant    154
    Data        46
    BSS         134
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     80      80
    BANK1            80     75      78
    BANK2            80     60      80
    BANK3            80     64      80
    BANK4            80     29      80
    BANK5            80      0      56
    BANK6            80      0      32
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           26      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    qsort$2812	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$0	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@d1	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@s1	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK5[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    qsort@compar	PTR FTN(PTR const void ,PTR const void ,)int  size(2) Largest target is 2
		 -> sortCur(), sortDCRev(), sortDC(), 

    sp__memcpy	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@x	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@vbase	PTR void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    qsort@base	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s2	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s1	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> storeNVM@buf(BANK0[64]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> systemCheck@str(BANK1[3]), str(BANK3[10]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK3[10]), 

    sortCur@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@b	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@a	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    checkChannelStatus@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    menu@func	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    stateFuncTbl	const PTR FTN()unsigned char [9] size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setOutputPower@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    channelSetup@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    spinInput@input	PTR float  size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 57
		 -> STR_87(CODE[4]), systemCheck@str(BANK1[3]), STR_86(CODE[12]), STR_85(CODE[13]), 
		 -> STR_84(CODE[13]), STR_83(CODE[13]), STR_82(CODE[13]), STR_81(CODE[13]), 
		 -> STR_80(CODE[13]), STR_79(CODE[13]), STR_78(CODE[13]), STR_77(CODE[13]), 
		 -> STR_76(CODE[13]), STR_75(CODE[13]), STR_74(CODE[13]), STR_73(CODE[13]), 
		 -> STR_72(CODE[13]), STR_71(CODE[13]), STR_70(CODE[13]), STR_69(CODE[13]), 
		 -> STR_68(CODE[13]), STR_67(CODE[13]), STR_66(CODE[13]), STR_65(CODE[13]), 
		 -> STR_64(CODE[13]), STR_63(CODE[13]), STR_62(CODE[13]), STR_61(CODE[9]), 
		 -> STR_60(CODE[2]), STR_59(CODE[13]), STR_58(CODE[9]), STR_57(CODE[2]), 
		 -> STR_56(CODE[13]), STR_55(CODE[3]), STR_54(CODE[7]), STR_53(CODE[13]), 
		 -> STR_52(CODE[10]), STR_51(CODE[10]), STR_50(CODE[3]), STR_49(CODE[7]), 
		 -> STR_48(CODE[37]), STR_47(CODE[8]), STR_46(CODE[2]), STR_45(CODE[13]), 
		 -> STR_44(CODE[13]), STR_43(CODE[13]), STR_42(CODE[8]), STR_41(CODE[2]), 
		 -> STR_40(CODE[7]), STR_39(CODE[6]), STR_38(CODE[7]), STR_37(CODE[6]), 
		 -> STR_36(CODE[13]), STR_35(CODE[8]), STR_34(CODE[13]), STR_33(CODE[13]), 
		 -> STR_32(CODE[13]), STR_31(CODE[13]), STR_30(CODE[13]), STR_29(CODE[13]), 
		 -> STR_28(CODE[13]), STR_27(CODE[9]), STR_26(CODE[8]), STR_25(CODE[5]), 
		 -> STR_24(CODE[8]), STR_23(CODE[5]), STR_22(CODE[13]), STR_21(CODE[13]), 
		 -> STR_20(CODE[13]), STR_19(CODE[13]), STR_18(CODE[13]), STR_17(CODE[9]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[13]), STR_13(CODE[13]), 
		 -> STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[4]), STR_9(CODE[2]), 
		 -> STR_8(CODE[4]), STR_7(CODE[8]), STR_6(CODE[7]), STR_5(CODE[8]), 
		 -> STR_4(CODE[2]), STR_3(CODE[4]), str(BANK3[10]), STR_2(CODE[8]), 
		 -> STR_1(CODE[57]), 

    initGlobalData@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->_strncpy

Critical Paths under _main in BANK0

    _viewErrorMessage->_OLED_print_xy
    _OLED_off->_OLED_command
    _readNVM->_FLASH_ReadWord
    _setSkyTemp->_spinInput
    _setSkyTemp->_storeNVM
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setLensDia->_storeNVM
    _setFudgeFactor->_spinInput
    _setFudgeFactor->_storeNVM
    _setDPOffset->_spinInput
    _setDPOffset->_storeNVM
    _storeNVM->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _spinInput->___fladd
    _getNextState->___wmul
    _returnToPage->___wmul
    _paging->_OLED_command
    _itoa->___awdiv
    _OLED_print_xy->___bmul
    _initGlobalData->___wmul
    _getAnalogValues->___fladd
    _controller->_setChannelSwitch
    _setChannelSwitch->___bmul
    _error->___awmod
    _ema->___lmul
    _channelThing->_qsort
    _swap->___bmul
    ___bmul->___awdiv
    _memcpy->___bmul
    ___xxtofl->___wmul
    ___flge->___fladd
    _calcRequiredPower->___fladd
    ___wmul->___bmul
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_calcRequiredPower
    _systemCheck->___flge
    _menu->_channelView
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_spinInput
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setFudgeFactor->_spinInput
    _setDPOffset->_spinInput
    _spinInput->___flge
    _channelView->_ftoa
    _channelSetup->_ftoa
    _ftoa->___flge
    _getAnalogValues->___fldiv
    _checkSensor->___flge
    _checkChannelStatus->___flge
    _channelThing->_qsort
    _qsort->_sortCur
    _qsort->_sortDC
    _qsort->_sortDCRev
    _sortCur->___fltol
    ___fltol->___flsub
    ___flge->___fldiv
    _calcRequiredPower->___fldiv

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _channelThing->_qsort

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _channelThing->_qsort

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_channelThing

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0 1081259
                                             74 BANK1      1     1      0
                                             23 BANK4      6     6      0
                       _OLED_command
                          _OLED_init
              _OLED_loadSpecialChars
                  _calcRequiredPower
                       _channelThing
                 _checkChannelStatus
                        _checkSensor
                         _controller
                    _getAnalogValues
                       _getLastError
                     _initGlobalData
                         _initialize
                               _menu
                            _readNVM
                        _systemCheck
                          _timeSince
                   _viewErrorMessage
 ---------------------------------------------------------------------------------
 (1) _viewErrorMessage                                     5     5      0   23517
                                             22 BANK0      5     5      0
                       _OLED_command
                      _OLED_print_xy
                            ___awmod
                              _getPB
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                          8     8      0   47653
                                             25 BANK1      8     8      0
                       _OLED_command
                           _OLED_off
                      _OLED_print_xy
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _error
                     _getAnalogValue
                               _itoa
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _OLED_off                                             0     0      0     465
                       _OLED_command
 ---------------------------------------------------------------------------------
 (1) _readNVM                                             98    98      0     811
                                              3 BANK0     66    66      0
                                              0 BANK1     32    32      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     276
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _menu                                                10    10      0  837514
                                             50 BANK1     10    10      0
                       _OLED_command
                       _channelSetup *
                        _channelView *
                              _error
                       _getNextState
                              _getPB
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
                          _timeSince
 ---------------------------------------------------------------------------------
 (2) _statusView                                           2     2      0   78168
                                             39 BANK1      2     2      0
                      _OLED_print_xy
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                2     2      0   74106
                                             39 BANK1      2     2      0
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           1     1      0   92496
                                             40 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       6     6      0  109549
                                             40 BANK1      6     6      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                              _getPB
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           8     8      0  101596
                                             40 BANK1      8     8      0
                      _OLED_print_xy
                             ___wmul
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       1     1      0   92496
                                             40 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          1     1      0   92496
                                             40 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (3) _storeNVM                                            99    99      0    1824
                                             13 BANK0     67    67      0
                                              0 BANK1     32    32      0
                   _FLASH_EraseBlock
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_WriteBlock                                    10     7      3    1085
                                              3 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (5) _FLASH_EraseBlock                                     3     1      2     276
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           16     2     14   17784
                                             79 BANK0      1     1      0
                                             25 BANK1     15     1     14
                            ___fladd
                             ___flge
                            ___flsub
                             ___wmul (ARG)
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _getPB                                                2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         8     5      3    9776
                                             19 BANK0      8     5      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                         11    11      0   91080
                                             39 BANK1     11    11      0
                      _OLED_print_xy
                             ___bmul
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         6     6      0   92983
                                             39 BANK1      6     6      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         4     4      0    9599
                                             19 BANK0      4     4      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1252
                                              7 BANK0      6     5      1
                       _OLED_command
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _itoa                                                11     7      4    4062
                                              9 BANK0     11     7      4
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                14     8      6   41461
                                             25 BANK1     14     8      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   21794
                                             13 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       7     7      0    9416
                                             19 BANK0      7     7      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _getLastError                                         4     4      0      37
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _getAnalogValues                                      6     6      0   20705
                                             13 BANK1      6     6      0
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                                _ema
                     _getAnalogValue
 ---------------------------------------------------------------------------------
 (1) _controller                                          10    10      0    4914
                                             17 BANK0     10    10      0
                             ___bmul
                   _setChannelSwitch
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          4     4      0    6803
                                             25 BANK1      2     2      0
                             ___flge
                              _error
                          _timeSince
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            1     1      0       3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     819
                                              0 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (1) _checkChannelStatus                                  24    24      0   34463
                                             25 BANK1     24    24      0
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _ema
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _setChannelSwitch                                     4     3      1     819
                                             13 BANK0      4     3      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _getAnalogValue                                       4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _error                                                2     2      0    1184
                                              7 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1153
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ema                                                 20    12      8    1734
                                             12 BANK0     20    12      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     496
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     670
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _channelThing                                        34    34      0   58673
                                             51 BANK1     11    11      0
                                              0 BANK4     23    23      0
                             ___bmul
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                             ___wmul
                           ___xxtofl
                              _qsort
 ---------------------------------------------------------------------------------
 (2) _qsort                                              149   143      6   20901
                                             79 BANK0      1     1      0
                                             27 BANK1     24    18      6
                                              0 BANK2     60    60      0
                                              0 BANK3     64    64      0
                            ___awdiv
                             ___bmul
                             _memcpy
                            _sortCur *
                             _sortDC *
                          _sortDCRev *
                               _swap
 ---------------------------------------------------------------------------------
 (3) _swap                                                 6     2      4     465
                                             13 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDCRev                                            8     4      4    3056
                                             19 BANK1      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _sortDC                                               8     4      4    3056
                                             19 BANK1      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    2926
                                              9 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortCur                                              8     4      4    7064
                                             19 BANK1      8     4      4
                             ___bmul (ARG)
                            ___flsub
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             11     7      4     787
                                              8 BANK1     11     7      4
                            ___flsub (ARG)
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               8     5      3     424
                                             13 BANK0      8     5      3
                            ___awdiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     805
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1106
                                             19 BANK0     14    10      4
                             ___bmul (ARG)
                             ___wmul (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4766
                                             13 BANK1     12     4      8
                             ___bmul (ARG)
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   61    61      0   33700
                                             13 BANK1     61    61      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    9066
                                             13 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    5887
                                              0 BANK1      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    4922
                                             59 BANK0     20    12      8
                             ___bmul (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    8933
                                             33 BANK0     26    18      8
                          __Umul8_16
                             ___bmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     980
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             26    18      8    3843
                                             59 BANK0     13     5      8
                                              0 BANK1     13    13      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                               34    34      0    1066
                                              7 BANK0     34    34      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     465
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     589
                                              7 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     465
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            3     2      1     397
                                              3 BANK0      3     2      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0     124
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  4     4      0     416
                                              8 COMMON     4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (8) _uartReceiveISR                                       1     1      0     326
                                              6 COMMON     1     1      0
                            _strncpy
 ---------------------------------------------------------------------------------
 (9) _strncpy                                              6     3      3     326
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (8) _rotISR                                               8     8      0      23
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (8) _pushButtonISR                                        2     2      0      67
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_command
     _OLED_send
       _OLED_write4bits
     _OLED_waitForReady
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write4bits
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
   _calcRequiredPower
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flsub
       ___fladd
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _channelThing
     ___bmul
       ___awdiv (ARG)
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _qsort
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _memcpy
         ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _sortCur *
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
       _sortDC *
         ___bmul
           ___awdiv (ARG)
       _sortDCRev *
         ___bmul
           ___awdiv (ARG)
       _swap *
         ___bmul (ARG)
           ___awdiv (ARG)
   _checkChannelStatus
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fleq
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fltol
       ___flsub (ARG)
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _checkSensor
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _timeSince
     _uartReset
     _uartSendByte
   _controller
     ___bmul
       ___awdiv (ARG)
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
     _timeSince
   _getAnalogValues
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _getAnalogValue
   _getLastError
   _initGlobalData
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _initialize
   _menu
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___bmul
         ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _error *
       ___awmod
     _getNextState *
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
     _getPB *
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _itoa
         ___awdiv
         ___awmod
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _timeSince *
   _readNVM
     _FLASH_ReadWord
   _systemCheck
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_off
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getAnalogValue
     _itoa
       ___awdiv
       ___awmod
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _timeSince
   _viewErrorMessage
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___awmod
     _getPB

 _ISR (ROOT)
   _pushButtonISR
   _rotISR
   _uartReceiveISR
     _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4B      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     1F4       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     3C      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     40      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     1D      50      14      100.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      38      16       70.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      20      18       40.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              1A      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     1F4      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Feb 01 21:49:02 2020

                  _pushButtonISR 3699                    returnToPage@n 0036         __end_of_transition_table 388C  
                   _stateFuncTbl 3800                     ___fldiv@aexp 00AC                     ___fldiv@bexp 00AB  
                   ___fldiv@sign 00A4                   ___bmul@product 002B                      __CFG_CP$OFF 0000  
            __end_of_systemCheck 250D                     ___awdiv@sign 0026           _calcRequiredPower$2780 00C1  
         _calcRequiredPower$2781 00C5           _calcRequiredPower$2782 00C9           _calcRequiredPower$2783 00CD  
         _calcRequiredPower$2777 00DD           _calcRequiredPower$2778 00B9           _calcRequiredPower$2779 00BD  
            ___wmul@multiplicand 002F          ??_OLED_loadSpecialChars 0027              __Umul8_16@word_mpld 0026  
                    __CFG_LVP$ON 0000                     _virtChannels 02A0                              l128 2D64  
                            l146 360B                              l187 329B                              l372 3160  
                            l473 1A75                              l732 320D                              l815 1688  
                            l808 15EA                              l909 0EAC                              l925 2FFA  
                            _ISR 0004                              _ema 1009                              _str 01E6  
                   ___awmod@sign 0026                     __CFG_BORV$LO 0000                              wreg 0009  
               returnToPage@page 0035                     ___flmul@aexp 004F                     ___flmul@bexp 0054  
                   ___flmul@sign 004E                     ___flmul@temp 0059                     ___flmul@prod 0055  
                  __CFG_BBEN$OFF 0000   FLASH_WriteBlock@flashWordArray 0025         __end_of_setChannelSwitch 35BD  
                   _userActivity 015C                             ?_ISR 0070                 channelThing@grpA 0253  
               channelThing@grpB 0259                     __CFG_ZCD$OFF 0000                     ___fltol@exp1 00B2  
           __end_of_channelThing 1000                             l1117 31E7                             l1422 1330  
                           l1318 2888                             l1424 1313                             l1418 129D  
                           l1611 3228                             l1460 142A                             l1452 1412  
                           l1526 0780                             l1286 35D8                             l1439 13B3  
                           l1295 2A21                             l1287 35F2                             ?_ema 002C  
                           l1552 2C2D                             l1616 32EF                             l1474 1E85  
                           l1298 2A6F             __end_of_channelSetup 1ABE                             l1572 3311  
                           l1565 2C77                             l1566 2C81                             l1558 2C63  
                           l1495 1FCC                             l1496 1FE8                             l1498 1FF9  
                           l7121 126D                             l7123 1275                             l7301 3222  
                           l7141 1292                             l7117 126A                             l7215 1350  
                           l7207 133E                             l7151 12A7                             l8007 07B7  
                           l8015 07CE                             l7217 1352                             l7225 1361  
                           l7145 1295                             l7251 13D2                             l7243 13C5  
                           l7235 13AB                             l8107 3604                             l8027 07D9  
                           l8035 07EF                             l7181 12E3                             l8133 3719  
                           l9013 21C7                             l9005 2197                             l7191 131D  
                           l7415 2017                             l9111 147B                             l9007 21B8  
                           l8055 2B5A                             l8215 124D                             l7265 13E4  
                           l7257 13D9                             l7441 204E                             l7433 203D  
                           l7425 201F                             l7409 200C                             l7505 2848  
                           l9017 21CD                             l7345 37BC                             l8161 1090  
                           l8225 0924                             l8321 19A3                             l7291 1426  
                           l7259 13DB                             l7427 202B                             l8091 3353  
                           l9051 2227                             l8171 10B7                             l8163 1096  
                           l8251 09E3                             l8331 19EE                             l8411 27E9  
                           l8403 27BF                             l7701 057D                             l7269 13E6  
                           l7189 131B                             l7437 2046                             l7525 2876  
                           l7509 2851                             l7453 34F4                             l9133 1546  
                           l9045 2221                             l9053 2239                             l7357 37E2  
                           l8165 1099                             l8341 1A34                             l8309 194F  
                           l8421 27FE                             l7703 0585                             l7287 1422  
                           l7199 132B                             l7375 31E1                             l7535 2895  
                           l7527 2884                             l8087 3349                             l7471 3519  
                           l9127 1520                             l9047 2224                             l9039 2212  
                           l9303 2FFD                             l9311 31D9                             l8183 1115  
                           l8271 0B05                             l8255 09E8                             l8407 27D1  
                           l8415 27FC                             l8503 2A04                             l7625 1F39  
                           l7617 1F08                             l7553 1E3A                             l7721 05A8  
                           l7393 31A6                             l7465 3501                             l7457 34FB  
                           l9129 152D                             l9313 31DC                             l8273 0B1C  
                           l8257 09FE                             l8249 09E2                             l8345 1A4E  
                           l8337 1A1A                             l8513 28B6                             l9321 2520  
                           l7651 1F81                             l7643 1F46                             l7619 1F10  
                           l7627 1EED                             l7563 1E4E                             l7803 0741  
                           l9067 00D7                             l9251 0E3A                             l9235 0E05  
                           l9227 0D70                             l9219 0C9F                             l7467 350D  
                           l7475 3522                             l8611 3585                             l9171 167B  
                           l9163 1636                             l9147 1574                             l8275 0B32  
                           l8259 0A14                             l8283 0B74                             l8435 2DE3  
                           l9411 1914                             l9331 2556                             l9323 2523  
                           l7645 1F62                             l7629 1F40                             l7573 1E68  
                           l7565 1E57                             l7813 076D                             l7717 059E  
                           l7493 2A55                             l7389 31A0                             l8701 1E13  
                           l9261 0F45                             l9253 0EF4                             l8613 358B  
                           l9165 1651                             l8277 0B48                             l8285 0BB0  
                           l8349 1A60                             l8373 26C1                             l8525 2917  
                           l9341 25BF                             l9333 256B                             l7655 1F84  
                           l7639 1F55                             l7583 1E7C                             l7559 1E4A  
                           l7807 0756                             l7719 05A0                             l7831 2C25  
                           l8703 1E18                             l7479 352A                             l8615 3591  
                           l8607 3579                             l9183 1796                             l9167 1657  
                           l9159 1619                             l8279 0B5E                             l8455 2E85  
                           l8535 292B                             l9351 2606                             l9343 25D4  
                           l9335 2580                             l9327 252C                             l7665 1FB0  
                           l7593 1EA6                             l7729 05B6                             l7489 2A3B  
                           l7841 2C40                             l8609 357F                             l9177 16EC  
                           l9185 17F6                             l9601 0B9C                             l8289 0BB6  
                           l8385 2737                             l8369 26B4                             l9353 261B  
                           l9345 25E9                             l9337 2595                             l9329 2541  
                           l9441 2D89                             l7579 1E78                             l7851 2C75  
                           l7843 2C50                             l9267 0F46                             l9259 0EF5  
                           l9195 0BCE                             l8619 35A6                             l9179 173A  
                           l9099 1434                             l9603 2231                             l7915 33E3  
                           l8571 20A7                             l8395 2785                             l8491 29A1  
                           l8547 298D                             l9363 267A                             l9339 25AA  
                           l9355 2630                             l9451 2DA1                             l7781 06E8  
                           l7853 2C68                             l7837 2C3C                             l8661 1CBA  
                           l9605 35AE                             l9293 2F9A                             l7941 22CD  
                           l8565 2056                             l9381 1884                             l9357 265C  
                           l9461 2DB9                             l9445 2D95                             l7679 1FF4  
                           l7599 1EB4                             l7783 06FF                             l8655 1C94  
                           l9279 2F4C                             l7951 22F0                             l8479 2F2C  
                           l7793 0718                             l7865 2C9C                             l8673 1D18  
                           l9289 2F76                             l8593 20F9                             l8585 20DD  
                           l8577 20C2                             l9393 18AA                             l9465 2DC3  
                           l8835 32D3                             l7699 057B                             l8675 1D1C  
                           l9299 2FF0                             l7971 2302                             l7939 2286  
                           l9395 18AE                             l9387 188B                             l9379 1865  
                           l9467 2DC6                             l9459 2DB1                             l7789 0716  
                           l8669 1CF1                             l7877 33BD                             l7973 2399  
                           l7949 22DA                             l7981 3749                             l8597 2111  
                           l8925 243E                             l8695 1DDA                             l8687 1D81  
                           l8919 242F                             l8697 1DE0                             l8865 0893  
                           l7985 3786                             l7897 2CEF                             l8929 2474  
                           l7987 3797                             l8893 2A84                             l8967 2478  
                           l9599 2639                             STR_1 3812                             STR_2 3AE8  
                           l8993 2151                             l8977 24BD                             STR_3 3B1D  
                           STR_4 3B3B                             l8995 2157                             l8987 2502  
                           STR_5 3AC8                             STR_6 3B05                             l8997 215D  
                           STR_7 3AC8                             STR_8 3B21                             l8999 217E  
                           STR_9 3981                             _LATA 0018                             _PIE0 0716  
                           _PIE3 0719                             _PIE4 071A                             u8015 31E8  
                           u8025 31ED                             u8115 202C                             u9005 2C5D  
                           u8125 2036                             u8135 203E                             u8215 3513  
                           u9025 2C6F                             u8225 351A                             u7610 1302  
                           u8315 285A                             u7620 1303                             u7605 12F7  
                           u8095 2022                             u7465 34B2                             u8505 1EFC  
                           u9065 2C89                             u8345 2877                             u9305 07AF  
                           u7475 34C0                             u8195 3504                             u7485 34D0  
                           u8525 1F09                             u7733 1373                             u7725 1356  
                           u9165 33F9                             u7495 31BA                             u8535 1F26  
                           u7655 1321                             u8375 288C                             u9425 3600  
                           u8565 1F4A                             u8805 06C8                             u8655 1F9D  
                           u8495 1EF5                             u8815 06D7                             u7775 13C6  
                           u9375 3354                             u9455 3702                             u8665 1FBC  
                           u8585 1F56                             u8825 06EB                             u9385 335B  
                           u8675 1FD8                             u7955 3229                             u8915 072F  
                           u7875 13FD                             u8925 074A                             u8845 06F4  
                           u8935 0760                             u8775 062C                             u7975 37AC  
                           u8785 065B                             u8795 06B1                             u9915 1067  
                           u9935 1C98                             _TMR0 059C                             u8985 2C49  
                           u9945 1CA8                             _TMR1 020C                             u9975 1D49  
                           u9985 1D8C                             u9995 1DA5                    __CFG_FCMEN$ON 0000  
                  OLED_send@mode 0023                             _data 274A                             _head 0165  
                           _main 2D3B                             _ftoa 223B                             _menu 183B  
                           _itoa 373E                             _tail 007C                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             _swap 3311  
               channelSetup@page 0167                             btemp 007E                ?_FLASH_WriteBlock 0023  
                  __CFG_BOREN$ON 0000                             start 006E                      ?_OLED_write 0070  
                   spinInput@dir 00C7                  ___fldiv@new_exp 00A5                     spinInput@max 00BF  
                   spinInput@min 00BB                _calcRequiredPower 00D5               ??_FLASH_WriteBlock 0026  
                 ?_pushButtonISR 0070                    __CFG_CSWEN$ON 0000                ___bmul@multiplier 002C  
             ?_calcRequiredPower 0070                            ??_ISR 0078                            ??_ema 0034  
             __size_of_OLED_init 008B               __size_of_OLED_send 0017                   _setFudgeFactor 2919  
              channelThing@total 0247                    ___fltol@sign1 00B1                  __end_of___fladd 1432  
                          ?_main 0070                            ?_ftoa 00B9                            ?_menu 0070  
                __end_of___fldiv 2000                            ?_itoa 0029                  __end_of___awdiv 2053  
                          STR_10 3B25                            STR_11 3B32                            STR_12 3B2F  
                          STR_20 3A46                            STR_21 3A6D                            STR_13 3A39  
                          STR_22 3A7A                            STR_14 39DE                            STR_30 39B7  
                          STR_23 3B14                            STR_15 3B35                            STR_31 39EB  
                          STR_16 3B38                            STR_40 3AF7                            STR_24 3AD0  
                          STR_32 39AA                            STR_41 3B03                            STR_25 3B14  
                          STR_17 3AAF                            STR_33 39C4                    __CFG_WDTE$OFF 0000  
                          STR_50 3B2C                            STR_26 3AE0                            STR_42 3AC0  
                          STR_18 3A53                            STR_34 3A1F                            STR_27 3AAF  
                          STR_35 3AD8                            STR_51 3A93                            STR_43 3A2C  
                          STR_19 39D1                            STR_60 3B03                            STR_52 39A0  
                          STR_36 3A7A                            STR_44 3A60                            STR_28 399D  
                __end_of___awmod 352F                            STR_45 3A1F                            STR_37 3B13  
                          STR_61 3AA6                            STR_53 3A12                            STR_29 3A05  
                          STR_46 3B03                            STR_54 3AFE                            STR_38 3AF0  
                          STR_70 3969                            STR_62 388C                            STR_39 3B13  
                          STR_55 3B29                            STR_47 3AB8                            STR_71 391B  
                          STR_63 38C0                            STR_80 394F                            STR_72 3969  
                          STR_56 39F8                            STR_64 38A6                            STR_48 384B  
                          STR_57 3B03                            STR_49 3B0C                            STR_81 3990  
                          STR_73 38F4                            STR_65 38E7                            STR_58 3A9D  
                          STR_66 394F                            STR_82 3942                            STR_74 3899  
                          STR_59 3863                            STR_67 390E                            STR_75 38DA  
                          STR_83 38B3                            STR_68 388C                            STR_76 3983  
                          STR_84 38CD                            STR_69 395C                            STR_85 3928  
                          STR_77 3901                            STR_86 3A87                            STR_78 3935  
                          STR_87 3B19                            STR_79 3976                  __end_of___flmul 078D  
            ??_calcRequiredPower 00AD  checkSensor@sensorUpdateInterval 0264                  __end_of___flsub 343A  
                __end_of___fltol 28A4                            ?_swap 002D                            u10005 1DB2  
                          u10015 1DBC                            u10025 1DCC                            u10035 1DEB  
                          u10045 1DF5                            u11007 2C0A                            u10055 1E05  
                          u11017 329D                            u10065 1E22                            u10090 32C9  
                          u11027 32A3                            u11037 32AD                            u11047 32B3  
                          _T1CLK 0211                            u11057 34DD                            u11067 34E3  
                ___awdiv@divisor 0020                            u10615 2F96                            _T1CON 020E  
                          u10625 2FBA                            u10555 0E7C                            u10635 2FDC  
                          u10740 18D9                            u10741 18D7                            u10750 18DA  
                          u10907 2B8C                            u10917 2B9E                            u10927 2BAA  
                          u10775 190A                            u10937 2BB6                            u10947 2BC2  
                          u10867 2DCA                            u10957 2BCE                            u10877 07BF  
                          u10967 2BDA                            u10887 07E1                            u10977 2BE6  
                          u10897 156D                            u10987 2BF2                            u10997 2BFE  
                          _IOCAN 1F3E                            _IOCAP 1F3D                            _IOCCN 1F54  
                          i1l312 3688                            i1l321 36DC                            i1l273 001C  
                          i1l282 0065                            i1l276 0038                            i1l286 006C  
               __end_of_OLED_off 1009                  ___awdiv@counter 0025                     main@initDone 0262  
                          _TRISA 0012                            _TRISB 0013                            _TRISC 0014  
         uartReceiveISR@checksum 016A              ___lmul@multiplicand 0024             __size_of_checkSensor 0120  
                   ?_setDPOffset 0070                    __CFG_WRTB$OFF 0000                    __CFG_WRTC$OFF 0000  
     __end_of_checkChannelStatus 1800                   OLED_send@value 0025                            _getPB 317A  
            getNextState@timeout 0035                  __end_of_readNVM 2B02                   statusView@page 0169  
       statusView@prevSensorStat 016F                            ema@in 002C                            _error 1800  
                          _setup 2E87                            _qsort 1C6C                            ftoa@w 00C4  
                          pclath 000A             __size_of_channelView 02B2                            swap@c 0032  
                __end_of_sortCur 283E                            status 0003                            wtemp0 007E  
      __end_of_calcRequiredPower 0561                  __end_of_strncpy 33A1                      controller@n 003A  
                  spinInput@step 00C3                      _systemCheck 23A2                   __CFG_MCLRE$OFF 0000  
           __end_of_getLastError 31DE                  __initialization 0070                     __end_of_main 2DD1  
                   __end_of_ftoa 23A2                     __end_of_menu 1918                     __end_of_itoa 379B  
        __size_of_getAnalogValue 001D                     __end_of_swap 3340           __end_of_setFudgeFactor 298F  
                 __CFG_SAFEN$OFF 0000                 _viewErrorMessage 250D         controller@dutyCycleTimer 022A  
                         ??_main 00EA                           ??_ftoa 00BF                           ??_menu 00D2  
                         ??_itoa 002D                           ??_swap 0031                   OLED_print_xy@s 002E  
                  sortDCRev@cmp1 00B3                    sortDCRev@cmp2 00B5             __end_of_getNextState 211B  
        __size_of_FLASH_ReadWord 0020          __size_of_setOutputPower 0182              __size_of_OLED_write 000B  
              _uartDataReadyFlag 016D            getAnalogValue@channel 0023                  _setLensDia$2776 00CC  
                         ?_getPB 0070                           _ADCON1 009E        FLASH_WriteBlock@writeAddr 0023  
                         ?_error 0070                           _ADRESH 009C                           _ADRESL 009B  
               ___awdiv@dividend 0022                           ?_setup 0070                           _ANSELA 1F38  
                         _ANSELB 1F43                           _ANSELC 1F4E               __CFG_RSTOSC$HFINT1 0000  
                         ?_qsort 00BB                           _T0CON0 059E                           _T0CON1 059F  
                         _RC1REG 0119                           _RC1STA 011D                           _RC6PPS 1F26  
                 __CFG_WDTCCS$SC 0000                           i1l5463 3396                           i1l5457 3375  
                         i1l5459 338D                           i1l6745 36B7                           i1l6905 0035  
                         i1l6755 36D0                           i1l6771 3680                           i1l6915 005E  
                         i1l6781 3539                           i1l6793 355F                           i1l6881 0016  
                         i1l6787 3543                           i1l6893 0027                           i1l6799 3572  
                         _INTCON 000B                           i1l6899 002E                __end_of_OLED_init 2C0F  
      __size_of_FLASH_EraseBlock 0020                __end_of_OLED_send 31C6                           _OSCFRQ 0893  
                         _SPBRGL 011B                           _TX1REG 011A                           _TX1STA 011E  
           getNextState@intState 0033                 __end_of___xxtofl 2CA5                  ??_pushButtonISR 0070  
                 __CFG_PWRTE$OFF 0000                      menu@timeout 00D8                           ___flge 2A06  
                         ___bmul 319D                           ___fleq 35BD                           ___lmul 3340  
     OLED_loadSpecialChars@F7971 0320                        ??___fladd 0063                           ___wmul 31DE  
                      ??___fldiv 0063                        ??___awdiv 0024                   __CFG_STVREN$ON 0000  
                      ??___awmod 0024                        ??___flmul 0049                        ??___flsub 006F  
                      ??___fltol 00AC                  ?_setFudgeFactor 0070                           _paging 078D  
                         _memcpy 32E5                 ___awdiv@quotient 0027                  ___awmod@divisor 0020  
                         _rotISR 364F                           _rotDir 016C               channelSetup@heater 00CB  
        __size_of_initGlobalData 010E                    ?_OLED_command 0070                  ___awmod@counter 0025  
                         _sortDC 346F                           menu@pb 00D7                        ??_readNVM 0023  
        FLASH_ReadWord@flashAddr 0020               __size_of__Umul8_16 0020            __size_of_channelThing 0434  
          __size_of_channelSetup 01A6            OLED_waitForReady@busy 0020                           swap@s1 002F  
                         swap@s2 0030                OLED_command@value 0026                           qsort@i 00CF  
                         qsort@j 00D1                           qsort@l 00C9                           qsort@r 00CB  
                         qsort@s 00CD                           qsort@x 00C7                        ??_sortCur 006F  
               __end_of_storeNVM 2B84                        ??_strncpy 0073                       ___flge@ff1 00AD  
                     ___flge@ff2 00B1                     ___xxtofl@arg 003D                     ___xxtofl@exp 003C  
                   ___xxtofl@val 0033                       ___fleq@ff1 0020                       ___fleq@ff2 0024  
                 spinInput@input 00B9          __end_of__initialization 00D1                     ftoa@intValue 00C3  
     __size_of_calcRequiredPower 048C                       ___fltol@f1 00A8              ___bmul@multiplicand 0029  
                      ?_OLED_off 0070         __size_of_OLED_write4bits 0045                   __pcstackCOMMON 0070  
                   __pidataBANK1 07FA                     __pidataBANK2 07FB                     __pidataBANK4 0800  
                   __pidataBANK6 3277                    __end_of_getPB 3185             uartReceiveISR@buffer 02C4  
                  __end_of_error 183B                     _channelThing 0BCC         __size_of_getAnalogValues 01AE  
                   _channelSetup 1918                    __end_of_setup 2F3D                    __end_of_qsort 1E28  
                 ??_OLED_command 0026   __size_of_OLED_loadSpecialChars 0027    __end_of_OLED_loadSpecialChars 32E5  
             __size_of_getRotDir 000B      FLASH_WriteBlock@GIEBitValue 002B                          ??_getPB 0020  
         __size_of_OLED_print_xy 0032                          ??_error 0027                       _dataPacket 0238  
              ?_setChannelSwitch 002D                          ??_setup 00C7             __size_of_setDPOffset 0077  
                        ??_qsort 00C1                       __pbssBANK1 00EB                       __pbssBANK2 015C  
                     __pbssBANK3 01E0                       __pbssBANK4 0220                       __pbssBANK5 02A0  
        __size_of_uartReceiveISR 0047               ??_setChannelSwitch 002E            __size_of_getLastError 0018  
                   ??_OLED_write 0026                __end_of__Umul8_16 3237                       ??_OLED_off 0027  
            channelThing@numGrpA 0257              channelThing@numGrpB 0258                       __pmaintext 2D3B  
                 _getAnalogValue 31FA                          ?___flge 00AD                          ?___bmul 0029  
                        ?___fleq 0020                          ?___lmul 0020                          ?___wmul 002D  
                __CFG_PPS1WAY$ON 0000                       __pintentry 0004            __size_of_getNextState 00C8  
                        ?_paging 0027                          ?_memcpy 002D                _OLED_waitForReady 3297  
                 ___lmul@product 0028                          ?_rotISR 0070                          ?_sortDC 00B3  
      __size_of_FLASH_WriteBlock 0065               __size_of_timeSince 005A               ?_OLED_waitForReady 0070  
             __size_of_uartReset 0008                   _FLASH_ReadWord 3257            channelThing@totalGrpA 024B  
          channelThing@totalGrpB 024F                   _setOutputPower 267E                        ?___xxtofl 0033  
             __size_of_spinInput 0096                          _OSCCON1 088D               __size_of_sortDCRev 0035  
                        _NVMADRH 081B                          _NVMADRL 081A                          _NVMDATH 081D  
                        _NVMDATL 081C               __end_of_OLED_write 316F                          _NVMCON2 081F  
                   _getLastError 31C6              ??_OLED_waitForReady 0020                pushButtonISR@time 0071  
                  channelThing@n 025D         __end_of_viewErrorMessage 267E                 _FLASH_EraseBlock 3237  
                    rotISR@input 0077                       _controller 2F3D                     _getNextState 2053  
                   ?_systemCheck 0070               _checkChannelStatus 1432           __end_of_getAnalogValue 3217  
              __end_of_getRotDir 317A                       ema@average 002E                    _OLED_print_xy 33A1  
             getAnalogValues@adc 00B1        __end_of_OLED_waitForReady 32BE                  __size_of___flge 007C  
                __size_of___bmul 0012                  __size_of___fleq 0049                          ___fladd 1250  
                        ___fldiv 1E28                          ___awdiv 2001                  __size_of___lmul 0030  
                        ___awmod 34E9                          ___flmul 0561                          ___flsub 3405  
                        ___fltol 283E                  __size_of___wmul 001C                  OLED_write@value 0026  
            ?_checkChannelStatus 0070                    ?_uartSendByte 0070                        ?_storeNVM 0070  
                 _initGlobalData 080C           __end_of_FLASH_ReadWord 3277                  __size_of_paging 006D  
              ??_OLED_write4bits 0020                  __size_of_memcpy 002C                       _initialize 3606  
                __size_of_rotISR 004A           __end_of_setOutputPower 2800                          __ptext1 250D  
                        __ptext2 23A2                          __ptext3 1001                          __ptext4 2A82  
                        __ptext5 3257                          __ptext6 183B                          __ptext7 2919  
                        __ptext8 28A4                          __ptext9 298F                    ??_checkSensor 00B9  
                __size_of_sortDC 0035                          _pbState 007D                  __CFG_WRTAPP$OFF 0000  
                   __size_of_ISR 006A                          _readNVM 2A82                 _channelView$2775 00CD  
                        ema@tmp0 003C                     __size_of_ema 0069                       ??___xxtofl 0037  
               ___awmod@dividend 0022                ??_getAnalogValues 006F                        _IOCAFbits 1F3F  
                __CFG_WRTSAF$OFF 0000                          _rxCount 016B                    ??_channelView 00C7  
                        _sortCur 2807                          clrloop0 3186             ??_checkChannelStatus 00B9  
        setChannelSwitch@channel 0030                          _strncpy 3370             end_of_initialization 00D1  
                     _setLensDia 2DD1                          ftoa@len 00C1                          ftoa@pos 00C5  
                        ftoa@str 00C6                          paging@n 002C                          memcpy@d 0033  
                        memcpy@n 002E                          memcpy@s 0034                   paging@lastPage 0027  
          checkChannelStatus@adc 00BD             __end_of_OLED_command 315A            checkChannelStatus@avg 00C8  
                        init_ram 3191                          itoa@str 0029                          initloop 3192  
                     _setSkyTemp 28A4                __end_of_timeSince 373E                __end_of_uartReset 3150  
               ??_setFudgeFactor 00C8                        _OLED_init 2B84                        _OLED_send 31AF  
                ?_getAnalogValue 0020              OLED_setCursor@F7960 026C                    ?_returnToPage 0070  
              __end_of_spinInput 2D3B                   ?_OLED_print_xy 002D                __end_of_sortDCRev 346F  
             OLED_print_xy@F7968 0268                          sortDC@a 00B9                          sortDC@b 00BA  
                        swap@len 002D           __end_of_initGlobalData 091A                   ??_uartSendByte 0020  
      FLASH_ReadWord@GIEBitValue 0022            __CFG_WDTCPS$WDTCPS_31 0000                       ??_storeNVM 002D  
                ?_FLASH_ReadWord 0020                        _PORTAbits 000C                        _PORTCbits 000E  
                ?_setOutputPower 0070                       _qsort$2812 006F                  _selectedChannel 00EB  
                    ___fladd@grs 006E                    ___xxtofl@sign 003B                        _TRISCbits 0014  
                    ___fldiv@grs 00A7                      ___fldiv@rem 00A0              __end_of_checkSensor 223B  
           _getAnalogValues$2784 00AD                 __CFG_FEXTOSC$OFF 0000     OLED_loadSpecialChars@special 0028  
                 _uartReceiveISR 352F                      ___flmul@grs 0050                       _statusView 1072  
            __end_of_channelView 0BCC                      ?_controller 0070                getNextState@state 0039  
                channelView@page 0168                       ?_OLED_init 0070                   ??_returnToPage 0033  
                     ?_OLED_send 0023                FLASH_WriteBlock@i 002C            __end_of_pushButtonISR 36E4  
     __size_of_OLED_waitForReady 0027                __size_of_OLED_off 0008                  ?_initGlobalData 0070  
                 __end_of___flge 2A82             __end_of_nextStateTbl 306C                   __end_of___bmul 31AF  
                 __end_of___fleq 3606                   __end_of___lmul 3370                   __end_of___wmul 31FA  
                    ?_initialize 0070                 _FLASH_WriteBlock 379B                   __end_of_paging 07FA  
                 __end_of_memcpy 3311                       ftoa@fValue 00B9                   __end_of_rotISR 3699  
                 __end_of_sortDC 34A4              start_initialization 0070                      __end_of_ISR 006E  
                    __end_of_ema 1072         OLED_print_xy@row_offsets 0031           __end_of_uartReceiveISR 3576  
                    ?_setLensDia 0070                       readNVM@buf 0024                       readNVM@nvm 00A0  
           calcRequiredPower@Rth 00B5             calcRequiredPower@phi 00D5                      ?_setSkyTemp 0070  
           initGlobalData@heater 0038                  ??_OLED_print_xy 0030                   systemCheck@str 00BD  
                    sortCur@cmp1 00B3                      sortCur@cmp2 00B5                 __CFG_LPBOREN$OFF 0000  
        _checkChannelStatus$1891 00BF          _checkChannelStatus$1892 00C3                       error@error 0028  
                       ??___flge 00B5                         ??___bmul 002A                         ??___fleq 0028  
           __size_of_systemCheck 016B                   timeSince@since 0020                         ??___lmul 0028  
      __size_of_setChannelSwitch 0047                         ??___wmul 0031         checkChannelStatus@heater 00CF  
                      __Umul8_16 3217                      __pdataBANK1 00ED                      __pdataBANK2 016F  
                    __pdataBANK4 0264                      __pdataBANK6 0320                         ??_paging 0028  
                       ??_memcpy 0030      FLASH_EraseBlock@GIEBitValue 0022                         ??_rotISR 0070  
       __end_of_FLASH_EraseBlock 3257            setChannelSwitch@state 002D                      qsort@compar 00BF  
                       ??_sortDC 00B7                 OLED_print_xy@col 0035                      _checkSensor 211B  
                      ___fladd@a 005F                        ___fladd@b 005B                 OLED_print_xy@row 002D  
                      ___fldiv@a 005B                        ___fldiv@b 005F                      __pbssBIGRAM 274A  
            __size_of_controller 00C3                        ___flmul@a 0045                        ___flmul@b 0041  
                    __pbssCOMMON 007C                        ___flsub@a 00A0                        ___flsub@b 00A4  
                      ___latbits 0003                    ??_setDPOffset 00C8                    __pcstackBANK0 0020  
                  __pcstackBANK1 00A0                    __pcstackBANK2 0120                    __pcstackBANK3 01A0  
                  __pcstackBANK4 0247            _OLED_loadSpecialChars 32BE            __size_of_OLED_command 000A  
              __size_of___xxtofl 0096                paging@currentPage 002A                      _channelView 091A  
                ?_uartReceiveISR 0070             __end_of_uartSendByte 3164                      ?_statusView 0070  
              ?_viewErrorMessage 0070              __size_of_initialize 0049               ??_viewErrorMessage 0036  
                _OLED_write4bits 34A4                      ??_OLED_init 0027                      ??_OLED_send 0024  
                    storeNVM@buf 002F                      storeNVM@nvm 00A0             setOutputPower@heater 00CC  
          _viewErrorMessage$1384 0039                         ?___fladd 005B                  _getAnalogValues 1ABE  
                       ?___fldiv 005B                         ?___awdiv 0020                         ?___awmod 0020  
                       ?___flmul 0041                         ?___flsub 00A0                         ?___fltol 00A8  
                      _getRotDir 316F                       ?__Umul8_16 0020              __size_of_setLensDia 00B6  
                   _OLED_command 3150                         _BAUD1CON 011F                   getNextState@pb 0034  
              __size_of_storeNVM 0082                     channelView@n 00D1                         ?_readNVM 0070  
            __size_of_setSkyTemp 0075             __end_of_returnToPage 3405                   __size_of_getPB 000B  
                       ?_sortCur 00B3                   __size_of_error 003B                        _tick100ms 0232  
                       ?_strncpy 0070                   __size_of_setup 00B6                   __size_of_qsort 01BC  
 FLASH_WriteBlock@blockStartAddr 0029                 ??_getAnalogValue 0022              __end_of_setDPOffset 2A06  
                 ___wmul@product 0031                         _LATAbits 0018                         _LATBbits 0019  
                       _LATCbits 001A                        clear_ram0 3185                    paging@lastDir 0162  
                       _PIE0bits 0716                         _PIE3bits 0719                         _PIE4bits 071A  
                       _OLED_off 1001                         _PIR0bits 070C                         _PIR3bits 070F  
      FLASH_EraseBlock@startAddr 0020                         _PIR4bits 0710                 ??_FLASH_ReadWord 0022  
                      _timeSince 36E4                        _uartReset 3148                  initGlobalData@n 0037  
              __CFG_BBSIZE$BB512 0000                 ??_setOutputPower 00C8                       ?_getRotDir 0070  
                      _spinInput 2CA5                        _sortDCRev 343A                       _ADCON0bits 009D  
              ___wmul@multiplier 002D                     _RX1DTPPSbits 1ECB              __size_of_statusView 01DE  
         ?_OLED_loadSpecialChars 0070                    menu@nextState 00DB                       sortDC@cmp1 00B3  
                     sortDC@cmp2 00B5             OLED_write4bits@value 0022                      _curRotState 00EC  
                     sortDCRev@a 00B9                       sortDCRev@b 00BA                 _transition_table 3870  
           __end_of_stateFuncTbl 3812                ___lmul@multiplier 0020          __end_of_OLED_write4bits 34E9  
    __size_of_checkChannelStatus 03CE                     _nextStateTbl 3000                _getLastError$1381 0022  
                      ftoa@width 00BD         __end_of_FLASH_WriteBlock 3800                     ??_controller 0031  
        __end_of_getAnalogValues 1C6C              calcRequiredPower@T1 00E1              calcRequiredPower@T2 00E5  
               ??_initGlobalData 0033                        paging@dir 002B                    uartSendByte@s 0020  
                      menu@sleep 0164                        menu@state 0163                        memcpy@tmp 0031  
                     ?_timeSince 0020                       ?_uartReset 0070        checkChannelStatus@channel 00CE  
               _setChannelSwitch 3576                      ??__Umul8_16 0022                    ?_channelThing 0070  
                      itoa@value 002B              getAnalogValues@avgI 0236                    ?_channelSetup 0070  
            getAnalogValues@avgT 01E2              getAnalogValues@avgV 01E0                        itoa@width 002C  
               __size_of___fladd 01E2                       qsort@vbase 00C6                 __size_of___fldiv 01D8  
               __size_of___awdiv 0052                 __size_of___awmod 0046                       ?_spinInput 00B9  
               __size_of___flmul 022C                 __size_of___flsub 0035                 __size_of___fltol 0066  
                     qsort@stack 01A0                       qsort@width 00BD                       ?_sortDCRev 00B3  
         OLED_loadSpecialChars@n 0048                     ??_initialize 0020        checkChannelStatus@current 00CA  
      checkChannelStatus@samples 00C7                         ___xxtofl 2C0F                 __size_of_readNVM 0080  
             __end_of_controller 3000                      _rxFErrCount 01E5                _errorMessageQueue 0220  
          __size_of_uartSendByte 000A                      _setDPOffset 298F         checkSensor@sensorTimeout 022E  
                       __ptext10 2E87                         __ptext11 2DD1                         __ptext20 317A  
                       __ptext12 267E                         __ptext21 2053                         __ptext13 1918  
                       __ptext30 31C6                         __ptext22 33D3                         __ptext14 091A  
                       __ptext31 1ABE                         __ptext23 078D                         __ptext15 1072  
                       __ptext40 1800                         __ptext32 2F3D                         __ptext24 316F  
                       __ptext16 2B02                         __ptext41 34E9                         __ptext33 211B  
                       __ptext25 373E                         __ptext17 379B                         __ptext50 343A  
                       __ptext42 1009                         __ptext34 315A                         __ptext26 223B  
                       __ptext18 3237                         __ptext51 319D                         __ptext43 3340  
                       __ptext35 3148                         __ptext27 33A1                         __ptext19 2CA5  
                       __ptext60 1250                         __ptext52 283E                         __ptext44 35BD  
                       __ptext36 36E4                         __ptext28 3606                         __ptext61 0561  
                       __ptext53 32E5                         __ptext45 0BCC                         __ptext37 1432  
                       __ptext29 080C                         __ptext70 34A4                         __ptext62 3217  
                       __ptext54 2001                         __ptext46 1C6C                         __ptext38 3576  
                       __ptext63 1E28                         __ptext55 2C0F                         __ptext47 3311  
                       __ptext39 31FA                         __ptext72 352F                         __ptext64 32BE  
                       __ptext56 2A06                         __ptext48 2807                         __ptext73 3370  
                       __ptext65 3164                         __ptext57 00D5                         __ptext49 346F  
                       __ptext74 364F                         __ptext66 2B84                         __ptext58 31DE  
                       __ptext75 3699                         __ptext67 3150                         __ptext59 3405  
                       __ptext68 3297                         __ptext69 31AF                     ??_setLensDia 00C8  
               __size_of_sortCur 0037                    getNextState@n 003A                      _OSCCON3bits 088F  
               __size_of_strncpy 0031                         ema@alpha 0030                    __size_of_main 0096  
                  __size_of_ftoa 0167             main@sysCheckInterval 025E                    __size_of_menu 00DD  
                  __size_of_itoa 005D                     ??_setSkyTemp 00C8                         getPB@ret 0021  
                  __size_of_swap 002F                         _tick10ms 016E               __end_of_initialize 364F  
           __CFG_WDTCWS$WDTCWS_7 0000                       _RC1STAbits 011D                      _rxOErrCount 01E4  
                 ??_channelThing 00D3                   ??_channelSetup 00C7                         int$flags 007E  
                      setup@page 0166                      ??_getRotDir 0020                         main@idle 0263  
                       _storeNVM 2B02                     _uartSendByte 315A            __size_of_returnToPage 0032  
             __end_of_setLensDia 2E87          __size_of_setFudgeFactor 0076                ?_FLASH_EraseBlock 0020  
                   ?_checkSensor 0070                 ??_uartReceiveISR 0076                         ftoa@prec 00BE  
                       ftoa@sign 00C2               ??_FLASH_EraseBlock 0022                         readNVM@n 0064  
                     _INTCONbits 000B               calcRequiredPower@A 00D9               calcRequiredPower@d 00D1  
             calcRequiredPower@n 00E9               calcRequiredPower@p 00B1               __end_of_setSkyTemp 2919  
                    _NVMCON1bits 081E                         menu@page 00D6                         memcpy@d1 0032  
                       menu@func 00D9                         memcpy@s1 002D                    ?_getLastError 0070  
                   timeSince@now 002C                   __pstringtext10 38CD                   __pstringtext11 38DA  
                 __pstringtext20 394F                   __pstringtext12 38E7                   __pstringtext21 395C  
                 __pstringtext13 38F4                   __pstringtext30 39D1                   __pstringtext22 3969  
                 __pstringtext14 3901                   __pstringtext31 39DE                   __pstringtext23 3976  
                 __pstringtext15 390E                   __pstringtext40 3A53                   __pstringtext32 39EB  
                 __pstringtext24 3983                   __pstringtext16 391B                   __pstringtext41 3A60  
                 __pstringtext33 39F8                   __pstringtext25 3990                   __pstringtext17 3928  
                 __pstringtext50 3AC0                   __pstringtext42 3A6D                   __pstringtext34 3A05  
                 __pstringtext26 399D                   __pstringtext18 3935                   __pstringtext51 3AC8  
                 __pstringtext43 3A7A                   __pstringtext35 3A12                   __pstringtext27 39AA  
                 __pstringtext19 3942                   __pstringtext60 3B0C                   __pstringtext52 3AD0  
                 __pstringtext44 3A87                   __pstringtext36 3A1F                   __pstringtext28 39B7  
                 __pstringtext61 3B13                   __pstringtext53 3AD8                   __pstringtext45 3A93  
                 __pstringtext37 3A2C                   __pstringtext29 39C4                   __pstringtext70 3B35  
                 __pstringtext62 3B19                   __pstringtext54 3AE0                   __pstringtext46 3A9D  
                 __pstringtext38 3A39                   __pstringtext71 3B38                   __pstringtext63 3B1D  
                 __pstringtext55 3AE8                   __pstringtext47 3AA6                   __pstringtext39 3A46  
                 __pstringtext72 3B3B                   __pstringtext64 3B21                   __pstringtext56 3AF0  
                 __pstringtext48 3AAF                   __pstringtext73 0000                   __pstringtext65 3B25  
                 __pstringtext57 3AF7                   __pstringtext49 3AB8                   __pstringtext66 3B29  
                 __pstringtext58 3AFE                   __pstringtext67 3B2C                   __pstringtext59 3B05  
                 __pstringtext68 3B2F                   __pstringtext69 3B32           __size_of_pushButtonISR 004B  
                      qsort@base 00C8                     ?_channelView 0070                        qsort@xbuf 0120  
      viewErrorMessage@errorCode 0038                 ?_OLED_write4bits 0070                         intlevel1 0000  
                      storeNVM@n 006F                     ??_statusView 00C7                __CFG_CLKOUTEN$OFF 0000  
               ?_getAnalogValues 0070                    ?_getNextState 0033                    ??_systemCheck 00B9  
                     _OLED_write 3164                        strncpy@cp 0075            __end_of_OLED_print_xy 33D3  
                   _returnToPage 33D3                      ??_timeSince 0024                      ??_uartReset 0020  
                    ??_spinInput 006F                      ??_sortDCRev 00B7                     getRotDir@ret 0021  
      __size_of_viewErrorMessage 0171                         sortCur@a 00B7                         sortCur@b 00B9  
                  __pstringtext1 3000                    __pstringtext2 3870                    __pstringtext3 3800  
                  __pstringtext4 384B                    __pstringtext5 388C                    __pstringtext6 3899  
                  __pstringtext7 38A6                    __pstringtext8 38B3                    __pstringtext9 38C0  
                       qsort@nel 00BB           __Umul8_16@multiplicand 0020               __end_of_statusView 1250  
                 ??_getLastError 0020                         strncpy@d 0074                         strncpy@n 0071  
                       strncpy@s 0070                    ___fladd@signs 006B                 checkSensor@state 0161  
                   ___fladd@aexp 006C                     ___fladd@bexp 006D                   controller@idle 0160  
                 controller@tick 0036                   ??_getNextState 0036             __Umul8_16@multiplier 0028  
              __Umul8_16@product 0024                  _g_screenRefresh 00ED  
