

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Feb 01 13:46:01 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	idataBANK6,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	stringtext16,global,class=STRCODE,delta=2
    24                           	psect	stringtext17,global,class=STRCODE,delta=2
    25                           	psect	stringtext18,global,class=STRCODE,delta=2
    26                           	psect	stringtext19,global,class=STRCODE,delta=2
    27                           	psect	stringtext20,global,class=STRCODE,delta=2
    28                           	psect	stringtext21,global,class=STRCODE,delta=2
    29                           	psect	stringtext22,global,class=STRCODE,delta=2
    30                           	psect	stringtext23,global,class=STRCODE,delta=2
    31                           	psect	stringtext24,global,class=STRCODE,delta=2
    32                           	psect	stringtext25,global,class=STRCODE,delta=2
    33                           	psect	stringtext26,global,class=STRCODE,delta=2
    34                           	psect	stringtext27,global,class=STRCODE,delta=2
    35                           	psect	stringtext28,global,class=STRCODE,delta=2
    36                           	psect	stringtext29,global,class=STRCODE,delta=2
    37                           	psect	stringtext30,global,class=STRCODE,delta=2
    38                           	psect	stringtext31,global,class=STRCODE,delta=2
    39                           	psect	stringtext32,global,class=STRCODE,delta=2
    40                           	psect	stringtext33,global,class=STRCODE,delta=2
    41                           	psect	stringtext34,global,class=STRCODE,delta=2
    42                           	psect	stringtext35,global,class=STRCODE,delta=2
    43                           	psect	stringtext36,global,class=STRCODE,delta=2
    44                           	psect	stringtext37,global,class=STRCODE,delta=2
    45                           	psect	stringtext38,global,class=STRCODE,delta=2
    46                           	psect	stringtext39,global,class=STRCODE,delta=2
    47                           	psect	stringtext40,global,class=STRCODE,delta=2
    48                           	psect	stringtext41,global,class=STRCODE,delta=2
    49                           	psect	stringtext42,global,class=STRCODE,delta=2
    50                           	psect	stringtext43,global,class=STRCODE,delta=2
    51                           	psect	stringtext44,global,class=STRCODE,delta=2
    52                           	psect	stringtext45,global,class=STRCODE,delta=2
    53                           	psect	stringtext46,global,class=STRCODE,delta=2
    54                           	psect	stringtext47,global,class=STRCODE,delta=2
    55                           	psect	stringtext48,global,class=STRCODE,delta=2
    56                           	psect	stringtext49,global,class=STRCODE,delta=2
    57                           	psect	stringtext50,global,class=STRCODE,delta=2
    58                           	psect	stringtext51,global,class=STRCODE,delta=2
    59                           	psect	stringtext52,global,class=STRCODE,delta=2
    60                           	psect	stringtext53,global,class=STRCODE,delta=2
    61                           	psect	stringtext54,global,class=STRCODE,delta=2
    62                           	psect	stringtext55,global,class=STRCODE,delta=2
    63                           	psect	stringtext56,global,class=STRCODE,delta=2
    64                           	psect	stringtext57,global,class=STRCODE,delta=2
    65                           	psect	stringtext58,global,class=STRCODE,delta=2
    66                           	psect	stringtext59,global,class=STRCODE,delta=2
    67                           	psect	stringtext60,global,class=STRCODE,delta=2
    68                           	psect	stringtext61,global,class=STRCODE,delta=2
    69                           	psect	stringtext62,global,class=STRCODE,delta=2
    70                           	psect	stringtext63,global,class=STRCODE,delta=2
    71                           	psect	stringtext64,global,class=STRCODE,delta=2
    72                           	psect	stringtext65,global,class=STRCODE,delta=2
    73                           	psect	stringtext66,global,class=STRCODE,delta=2
    74                           	psect	stringtext67,global,class=STRCODE,delta=2
    75                           	psect	stringtext68,global,class=STRCODE,delta=2
    76                           	psect	stringtext69,global,class=STRCODE,delta=2
    77                           	psect	stringtext70,global,class=STRCODE,delta=2
    78                           	psect	stringtext71,global,class=STRCODE,delta=2
    79                           	psect	stringtext72,global,class=STRCODE,delta=2
    80                           	psect	stringtext73,global,class=STRCODE,delta=2
    81                           	psect	cinit,global,class=CODE,merge=1,delta=2
    82                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    83                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    84                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    85                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    86                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    87                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    88                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    89                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    90                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    91                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    92                           	psect	inittext,global,class=CODE,delta=2
    93                           	psect	clrtext,global,class=CODE,delta=2
    94                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    95                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    96                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    97                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    98                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    99                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   100                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   101                           	psect	text1,local,class=CODE,merge=1,delta=2
   102                           	psect	text2,local,class=CODE,merge=1,delta=2
   103                           	psect	text3,local,class=CODE,merge=1,delta=2
   104                           	psect	text4,local,class=CODE,merge=1,delta=2
   105                           	psect	text5,local,class=CODE,merge=1,delta=2
   106                           	psect	text6,local,class=CODE,merge=1,delta=2
   107                           	psect	text7,local,class=CODE,merge=1,delta=2
   108                           	psect	text8,local,class=CODE,merge=1,delta=2
   109                           	psect	text9,local,class=CODE,merge=1,delta=2
   110                           	psect	text10,local,class=CODE,merge=1,delta=2
   111                           	psect	text11,local,class=CODE,merge=1,delta=2
   112                           	psect	text12,local,class=CODE,merge=1,delta=2
   113                           	psect	text13,local,class=CODE,merge=1,delta=2
   114                           	psect	text14,local,class=CODE,merge=1,delta=2
   115                           	psect	text15,local,class=CODE,merge=1,delta=2
   116                           	psect	text16,local,class=CODE,merge=1,delta=2
   117                           	psect	text17,local,class=CODE,merge=1,delta=2
   118                           	psect	text18,local,class=CODE,merge=1,delta=2
   119                           	psect	text19,local,class=CODE,merge=1,delta=2
   120                           	psect	text20,local,class=CODE,merge=1,delta=2
   121                           	psect	text21,local,class=CODE,merge=1,delta=2
   122                           	psect	text22,local,class=CODE,merge=1,delta=2
   123                           	psect	text23,local,class=CODE,merge=1,delta=2
   124                           	psect	text24,local,class=CODE,merge=1,delta=2
   125                           	psect	text25,local,class=CODE,merge=1,delta=2
   126                           	psect	text26,local,class=CODE,merge=1,delta=2
   127                           	psect	text27,local,class=CODE,merge=1,delta=2
   128                           	psect	text28,local,class=CODE,merge=1,delta=2
   129                           	psect	text29,local,class=CODE,merge=1,delta=2
   130                           	psect	text30,local,class=CODE,merge=1,delta=2
   131                           	psect	text31,local,class=CODE,merge=1,delta=2
   132                           	psect	text32,local,class=CODE,merge=1,delta=2
   133                           	psect	text33,local,class=CODE,merge=1,delta=2
   134                           	psect	text34,local,class=CODE,merge=1,delta=2
   135                           	psect	text35,local,class=CODE,merge=1,delta=2
   136                           	psect	text36,local,class=CODE,merge=1,delta=2,group=1
   137                           	psect	text37,local,class=CODE,merge=1,delta=2
   138                           	psect	text38,local,class=CODE,merge=1,delta=2,group=1
   139                           	psect	text39,local,class=CODE,merge=1,delta=2,group=1
   140                           	psect	text40,local,class=CODE,merge=1,delta=2
   141                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
   142                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
   143                           	psect	text43,local,class=CODE,merge=1,delta=2
   144                           	psect	text44,local,class=CODE,merge=1,delta=2
   145                           	psect	text45,local,class=CODE,merge=1,delta=2
   146                           	psect	text46,local,class=CODE,merge=1,delta=2,group=1
   147                           	psect	text47,local,class=CODE,merge=1,delta=2,group=1
   148                           	psect	text48,local,class=CODE,merge=1,delta=2,group=2
   149                           	psect	text49,local,class=CODE,merge=1,delta=2,group=1
   150                           	psect	text50,local,class=CODE,merge=1,delta=2,group=1
   151                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
   152                           	psect	text52,local,class=CODE,merge=1,delta=2
   153                           	psect	text53,local,class=CODE,merge=1,delta=2,group=1
   154                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
   155                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
   156                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
   157                           	psect	text57,local,class=CODE,merge=1,delta=2,group=1
   158                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
   159                           	psect	text59,local,class=CODE,merge=1,delta=2
   160                           	psect	text60,local,class=CODE,merge=1,delta=2
   161                           	psect	text61,local,class=CODE,merge=1,delta=2
   162                           	psect	text62,local,class=CODE,merge=1,delta=2
   163                           	psect	text63,local,class=CODE,merge=1,delta=2
   164                           	psect	text64,local,class=CODE,merge=1,delta=2
   165                           	psect	text65,local,class=CODE,merge=1,delta=2
   166                           	psect	intentry,global,class=CODE,delta=2
   167                           	psect	text67,local,class=CODE,merge=1,delta=2
   168                           	psect	text68,local,class=CODE,merge=1,delta=2,group=2
   169                           	psect	text69,local,class=CODE,merge=1,delta=2
   170                           	psect	text70,local,class=CODE,merge=1,delta=2
   171                           	dabs	1,0xCA0,32
   172                           	dabs	1,0xC20,80
   173                           	dabs	1,0xBBA,54
   174                           	dabs	1,0x274A,0,_data
   175                           	dabs	1,0x7E,2
   176  0000                     
   177                           ; Version 2.10
   178                           ; Generated 31/07/2019 GMT
   179                           ; 
   180                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   181                           ; All rights reserved.
   182                           ; 
   183                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   184                           ; 
   185                           ; Redistribution and use in source and binary forms, with or without modification, are
   186                           ; permitted provided that the following conditions are met:
   187                           ; 
   188                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   189                           ;        conditions and the following disclaimer.
   190                           ; 
   191                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   192                           ;        of conditions and the following disclaimer in the documentation and/or other
   193                           ;        materials provided with the distribution.
   194                           ; 
   195                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   196                           ;        software without specific prior written permission.
   197                           ; 
   198                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   199                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   200                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   201                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   202                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   203                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   204                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   205                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   206                           ; 
   207                           ; 
   208                           ; Code-generator required, PIC16F15356 Definitions
   209                           ; 
   210                           ; SFR Addresses
   211  0000                     	;# 
   212  0001                     	;# 
   213  0002                     	;# 
   214  0003                     	;# 
   215  0004                     	;# 
   216  0005                     	;# 
   217  0006                     	;# 
   218  0007                     	;# 
   219  0008                     	;# 
   220  0009                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000D                     	;# 
   225  000E                     	;# 
   226  0010                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0016                     	;# 
   231  0018                     	;# 
   232  0019                     	;# 
   233  001A                     	;# 
   234  009B                     	;# 
   235  009B                     	;# 
   236  009C                     	;# 
   237  009D                     	;# 
   238  009E                     	;# 
   239  009F                     	;# 
   240  0119                     	;# 
   241  0119                     	;# 
   242  0119                     	;# 
   243  011A                     	;# 
   244  011A                     	;# 
   245  011A                     	;# 
   246  011B                     	;# 
   247  011B                     	;# 
   248  011B                     	;# 
   249  011B                     	;# 
   250  011B                     	;# 
   251  011C                     	;# 
   252  011C                     	;# 
   253  011C                     	;# 
   254  011D                     	;# 
   255  011D                     	;# 
   256  011D                     	;# 
   257  011E                     	;# 
   258  011E                     	;# 
   259  011E                     	;# 
   260  011F                     	;# 
   261  011F                     	;# 
   262  011F                     	;# 
   263  011F                     	;# 
   264  011F                     	;# 
   265  018C                     	;# 
   266  018D                     	;# 
   267  018E                     	;# 
   268  018F                     	;# 
   269  0190                     	;# 
   270  0191                     	;# 
   271  0192                     	;# 
   272  0196                     	;# 
   273  0197                     	;# 
   274  0198                     	;# 
   275  0199                     	;# 
   276  019A                     	;# 
   277  019B                     	;# 
   278  019C                     	;# 
   279  020C                     	;# 
   280  020C                     	;# 
   281  020D                     	;# 
   282  020E                     	;# 
   283  020F                     	;# 
   284  020F                     	;# 
   285  0210                     	;# 
   286  0210                     	;# 
   287  0211                     	;# 
   288  0211                     	;# 
   289  028C                     	;# 
   290  028C                     	;# 
   291  028D                     	;# 
   292  028D                     	;# 
   293  028E                     	;# 
   294  028F                     	;# 
   295  0290                     	;# 
   296  0291                     	;# 
   297  030C                     	;# 
   298  030C                     	;# 
   299  030D                     	;# 
   300  030E                     	;# 
   301  030F                     	;# 
   302  0310                     	;# 
   303  0310                     	;# 
   304  0311                     	;# 
   305  0312                     	;# 
   306  0313                     	;# 
   307  0314                     	;# 
   308  0314                     	;# 
   309  0315                     	;# 
   310  0316                     	;# 
   311  0318                     	;# 
   312  0318                     	;# 
   313  0319                     	;# 
   314  031A                     	;# 
   315  031C                     	;# 
   316  031C                     	;# 
   317  031D                     	;# 
   318  031E                     	;# 
   319  038C                     	;# 
   320  038C                     	;# 
   321  038D                     	;# 
   322  038E                     	;# 
   323  058C                     	;# 
   324  058C                     	;# 
   325  058D                     	;# 
   326  058E                     	;# 
   327  058F                     	;# 
   328  058F                     	;# 
   329  0590                     	;# 
   330  0591                     	;# 
   331  0592                     	;# 
   332  0593                     	;# 
   333  059C                     	;# 
   334  059C                     	;# 
   335  059D                     	;# 
   336  059D                     	;# 
   337  059E                     	;# 
   338  059F                     	;# 
   339  060C                     	;# 
   340  060D                     	;# 
   341  060E                     	;# 
   342  060F                     	;# 
   343  0610                     	;# 
   344  0611                     	;# 
   345  0612                     	;# 
   346  0613                     	;# 
   347  0614                     	;# 
   348  070C                     	;# 
   349  070D                     	;# 
   350  070E                     	;# 
   351  070F                     	;# 
   352  0710                     	;# 
   353  0711                     	;# 
   354  0712                     	;# 
   355  0713                     	;# 
   356  0716                     	;# 
   357  0717                     	;# 
   358  0718                     	;# 
   359  0719                     	;# 
   360  071A                     	;# 
   361  071B                     	;# 
   362  071C                     	;# 
   363  071D                     	;# 
   364  0796                     	;# 
   365  0797                     	;# 
   366  0798                     	;# 
   367  0799                     	;# 
   368  079A                     	;# 
   369  079B                     	;# 
   370  080C                     	;# 
   371  080D                     	;# 
   372  080E                     	;# 
   373  080F                     	;# 
   374  0810                     	;# 
   375  0811                     	;# 
   376  0812                     	;# 
   377  0813                     	;# 
   378  0814                     	;# 
   379  081A                     	;# 
   380  081A                     	;# 
   381  081B                     	;# 
   382  081C                     	;# 
   383  081C                     	;# 
   384  081D                     	;# 
   385  081E                     	;# 
   386  081F                     	;# 
   387  088C                     	;# 
   388  088D                     	;# 
   389  088E                     	;# 
   390  088F                     	;# 
   391  0890                     	;# 
   392  0891                     	;# 
   393  0892                     	;# 
   394  0893                     	;# 
   395  0895                     	;# 
   396  0896                     	;# 
   397  090C                     	;# 
   398  090E                     	;# 
   399  090F                     	;# 
   400  091F                     	;# 
   401  098F                     	;# 
   402  098F                     	;# 
   403  0990                     	;# 
   404  0991                     	;# 
   405  0992                     	;# 
   406  0993                     	;# 
   407  0994                     	;# 
   408  0995                     	;# 
   409  0996                     	;# 
   410  0997                     	;# 
   411  0A19                     	;# 
   412  0A19                     	;# 
   413  0A1A                     	;# 
   414  0A1A                     	;# 
   415  0A1B                     	;# 
   416  0A1B                     	;# 
   417  0A1B                     	;# 
   418  0A1C                     	;# 
   419  0A1C                     	;# 
   420  0A1D                     	;# 
   421  0A1D                     	;# 
   422  0A1E                     	;# 
   423  0A1E                     	;# 
   424  0A1F                     	;# 
   425  0A1F                     	;# 
   426  0A1F                     	;# 
   427  1E0F                     	;# 
   428  1E10                     	;# 
   429  1E11                     	;# 
   430  1E12                     	;# 
   431  1E13                     	;# 
   432  1E14                     	;# 
   433  1E15                     	;# 
   434  1E16                     	;# 
   435  1E17                     	;# 
   436  1E18                     	;# 
   437  1E19                     	;# 
   438  1E1A                     	;# 
   439  1E1B                     	;# 
   440  1E1C                     	;# 
   441  1E1D                     	;# 
   442  1E1E                     	;# 
   443  1E1F                     	;# 
   444  1E20                     	;# 
   445  1E21                     	;# 
   446  1E22                     	;# 
   447  1E23                     	;# 
   448  1E24                     	;# 
   449  1E25                     	;# 
   450  1E26                     	;# 
   451  1E27                     	;# 
   452  1E28                     	;# 
   453  1E29                     	;# 
   454  1E2A                     	;# 
   455  1E2B                     	;# 
   456  1E2C                     	;# 
   457  1E2D                     	;# 
   458  1E2E                     	;# 
   459  1E2F                     	;# 
   460  1E30                     	;# 
   461  1E31                     	;# 
   462  1E32                     	;# 
   463  1E33                     	;# 
   464  1E34                     	;# 
   465  1E35                     	;# 
   466  1E36                     	;# 
   467  1E37                     	;# 
   468  1E8F                     	;# 
   469  1E90                     	;# 
   470  1E91                     	;# 
   471  1E92                     	;# 
   472  1E93                     	;# 
   473  1E9C                     	;# 
   474  1EA1                     	;# 
   475  1EA2                     	;# 
   476  1EB1                     	;# 
   477  1EBB                     	;# 
   478  1EBC                     	;# 
   479  1EBD                     	;# 
   480  1EBE                     	;# 
   481  1EC3                     	;# 
   482  1EC5                     	;# 
   483  1EC6                     	;# 
   484  1EC7                     	;# 
   485  1EC8                     	;# 
   486  1EC9                     	;# 
   487  1ECA                     	;# 
   488  1ECB                     	;# 
   489  1ECC                     	;# 
   490  1ECD                     	;# 
   491  1ECE                     	;# 
   492  1F10                     	;# 
   493  1F11                     	;# 
   494  1F12                     	;# 
   495  1F13                     	;# 
   496  1F14                     	;# 
   497  1F15                     	;# 
   498  1F16                     	;# 
   499  1F17                     	;# 
   500  1F18                     	;# 
   501  1F19                     	;# 
   502  1F1A                     	;# 
   503  1F1B                     	;# 
   504  1F1C                     	;# 
   505  1F1D                     	;# 
   506  1F1E                     	;# 
   507  1F1F                     	;# 
   508  1F20                     	;# 
   509  1F21                     	;# 
   510  1F22                     	;# 
   511  1F23                     	;# 
   512  1F24                     	;# 
   513  1F25                     	;# 
   514  1F26                     	;# 
   515  1F27                     	;# 
   516  1F38                     	;# 
   517  1F39                     	;# 
   518  1F3A                     	;# 
   519  1F3B                     	;# 
   520  1F3C                     	;# 
   521  1F3D                     	;# 
   522  1F3E                     	;# 
   523  1F3F                     	;# 
   524  1F43                     	;# 
   525  1F44                     	;# 
   526  1F45                     	;# 
   527  1F46                     	;# 
   528  1F47                     	;# 
   529  1F48                     	;# 
   530  1F49                     	;# 
   531  1F4A                     	;# 
   532  1F4E                     	;# 
   533  1F4F                     	;# 
   534  1F50                     	;# 
   535  1F51                     	;# 
   536  1F52                     	;# 
   537  1F53                     	;# 
   538  1F54                     	;# 
   539  1F55                     	;# 
   540  1F65                     	;# 
   541  1F68                     	;# 
   542  1F69                     	;# 
   543  1F6A                     	;# 
   544  1F6B                     	;# 
   545  1FE4                     	;# 
   546  1FE5                     	;# 
   547  1FE6                     	;# 
   548  1FE7                     	;# 
   549  1FE8                     	;# 
   550  1FE8                     	;# 
   551  1FE9                     	;# 
   552  1FEA                     	;# 
   553  1FEB                     	;# 
   554  1FED                     	;# 
   555  1FEE                     	;# 
   556  1FEF                     	;# 
   557  0000                     	;# 
   558  0001                     	;# 
   559  0002                     	;# 
   560  0003                     	;# 
   561  0004                     	;# 
   562  0005                     	;# 
   563  0006                     	;# 
   564  0007                     	;# 
   565  0008                     	;# 
   566  0009                     	;# 
   567  000A                     	;# 
   568  000B                     	;# 
   569  000C                     	;# 
   570  000D                     	;# 
   571  000E                     	;# 
   572  0010                     	;# 
   573  0012                     	;# 
   574  0013                     	;# 
   575  0014                     	;# 
   576  0016                     	;# 
   577  0018                     	;# 
   578  0019                     	;# 
   579  001A                     	;# 
   580  009B                     	;# 
   581  009B                     	;# 
   582  009C                     	;# 
   583  009D                     	;# 
   584  009E                     	;# 
   585  009F                     	;# 
   586  0119                     	;# 
   587  0119                     	;# 
   588  0119                     	;# 
   589  011A                     	;# 
   590  011A                     	;# 
   591  011A                     	;# 
   592  011B                     	;# 
   593  011B                     	;# 
   594  011B                     	;# 
   595  011B                     	;# 
   596  011B                     	;# 
   597  011C                     	;# 
   598  011C                     	;# 
   599  011C                     	;# 
   600  011D                     	;# 
   601  011D                     	;# 
   602  011D                     	;# 
   603  011E                     	;# 
   604  011E                     	;# 
   605  011E                     	;# 
   606  011F                     	;# 
   607  011F                     	;# 
   608  011F                     	;# 
   609  011F                     	;# 
   610  011F                     	;# 
   611  018C                     	;# 
   612  018D                     	;# 
   613  018E                     	;# 
   614  018F                     	;# 
   615  0190                     	;# 
   616  0191                     	;# 
   617  0192                     	;# 
   618  0196                     	;# 
   619  0197                     	;# 
   620  0198                     	;# 
   621  0199                     	;# 
   622  019A                     	;# 
   623  019B                     	;# 
   624  019C                     	;# 
   625  020C                     	;# 
   626  020C                     	;# 
   627  020D                     	;# 
   628  020E                     	;# 
   629  020F                     	;# 
   630  020F                     	;# 
   631  0210                     	;# 
   632  0210                     	;# 
   633  0211                     	;# 
   634  0211                     	;# 
   635  028C                     	;# 
   636  028C                     	;# 
   637  028D                     	;# 
   638  028D                     	;# 
   639  028E                     	;# 
   640  028F                     	;# 
   641  0290                     	;# 
   642  0291                     	;# 
   643  030C                     	;# 
   644  030C                     	;# 
   645  030D                     	;# 
   646  030E                     	;# 
   647  030F                     	;# 
   648  0310                     	;# 
   649  0310                     	;# 
   650  0311                     	;# 
   651  0312                     	;# 
   652  0313                     	;# 
   653  0314                     	;# 
   654  0314                     	;# 
   655  0315                     	;# 
   656  0316                     	;# 
   657  0318                     	;# 
   658  0318                     	;# 
   659  0319                     	;# 
   660  031A                     	;# 
   661  031C                     	;# 
   662  031C                     	;# 
   663  031D                     	;# 
   664  031E                     	;# 
   665  038C                     	;# 
   666  038C                     	;# 
   667  038D                     	;# 
   668  038E                     	;# 
   669  058C                     	;# 
   670  058C                     	;# 
   671  058D                     	;# 
   672  058E                     	;# 
   673  058F                     	;# 
   674  058F                     	;# 
   675  0590                     	;# 
   676  0591                     	;# 
   677  0592                     	;# 
   678  0593                     	;# 
   679  059C                     	;# 
   680  059C                     	;# 
   681  059D                     	;# 
   682  059D                     	;# 
   683  059E                     	;# 
   684  059F                     	;# 
   685  060C                     	;# 
   686  060D                     	;# 
   687  060E                     	;# 
   688  060F                     	;# 
   689  0610                     	;# 
   690  0611                     	;# 
   691  0612                     	;# 
   692  0613                     	;# 
   693  0614                     	;# 
   694  070C                     	;# 
   695  070D                     	;# 
   696  070E                     	;# 
   697  070F                     	;# 
   698  0710                     	;# 
   699  0711                     	;# 
   700  0712                     	;# 
   701  0713                     	;# 
   702  0716                     	;# 
   703  0717                     	;# 
   704  0718                     	;# 
   705  0719                     	;# 
   706  071A                     	;# 
   707  071B                     	;# 
   708  071C                     	;# 
   709  071D                     	;# 
   710  0796                     	;# 
   711  0797                     	;# 
   712  0798                     	;# 
   713  0799                     	;# 
   714  079A                     	;# 
   715  079B                     	;# 
   716  080C                     	;# 
   717  080D                     	;# 
   718  080E                     	;# 
   719  080F                     	;# 
   720  0810                     	;# 
   721  0811                     	;# 
   722  0812                     	;# 
   723  0813                     	;# 
   724  0814                     	;# 
   725  081A                     	;# 
   726  081A                     	;# 
   727  081B                     	;# 
   728  081C                     	;# 
   729  081C                     	;# 
   730  081D                     	;# 
   731  081E                     	;# 
   732  081F                     	;# 
   733  088C                     	;# 
   734  088D                     	;# 
   735  088E                     	;# 
   736  088F                     	;# 
   737  0890                     	;# 
   738  0891                     	;# 
   739  0892                     	;# 
   740  0893                     	;# 
   741  0895                     	;# 
   742  0896                     	;# 
   743  090C                     	;# 
   744  090E                     	;# 
   745  090F                     	;# 
   746  091F                     	;# 
   747  098F                     	;# 
   748  098F                     	;# 
   749  0990                     	;# 
   750  0991                     	;# 
   751  0992                     	;# 
   752  0993                     	;# 
   753  0994                     	;# 
   754  0995                     	;# 
   755  0996                     	;# 
   756  0997                     	;# 
   757  0A19                     	;# 
   758  0A19                     	;# 
   759  0A1A                     	;# 
   760  0A1A                     	;# 
   761  0A1B                     	;# 
   762  0A1B                     	;# 
   763  0A1B                     	;# 
   764  0A1C                     	;# 
   765  0A1C                     	;# 
   766  0A1D                     	;# 
   767  0A1D                     	;# 
   768  0A1E                     	;# 
   769  0A1E                     	;# 
   770  0A1F                     	;# 
   771  0A1F                     	;# 
   772  0A1F                     	;# 
   773  1E0F                     	;# 
   774  1E10                     	;# 
   775  1E11                     	;# 
   776  1E12                     	;# 
   777  1E13                     	;# 
   778  1E14                     	;# 
   779  1E15                     	;# 
   780  1E16                     	;# 
   781  1E17                     	;# 
   782  1E18                     	;# 
   783  1E19                     	;# 
   784  1E1A                     	;# 
   785  1E1B                     	;# 
   786  1E1C                     	;# 
   787  1E1D                     	;# 
   788  1E1E                     	;# 
   789  1E1F                     	;# 
   790  1E20                     	;# 
   791  1E21                     	;# 
   792  1E22                     	;# 
   793  1E23                     	;# 
   794  1E24                     	;# 
   795  1E25                     	;# 
   796  1E26                     	;# 
   797  1E27                     	;# 
   798  1E28                     	;# 
   799  1E29                     	;# 
   800  1E2A                     	;# 
   801  1E2B                     	;# 
   802  1E2C                     	;# 
   803  1E2D                     	;# 
   804  1E2E                     	;# 
   805  1E2F                     	;# 
   806  1E30                     	;# 
   807  1E31                     	;# 
   808  1E32                     	;# 
   809  1E33                     	;# 
   810  1E34                     	;# 
   811  1E35                     	;# 
   812  1E36                     	;# 
   813  1E37                     	;# 
   814  1E8F                     	;# 
   815  1E90                     	;# 
   816  1E91                     	;# 
   817  1E92                     	;# 
   818  1E93                     	;# 
   819  1E9C                     	;# 
   820  1EA1                     	;# 
   821  1EA2                     	;# 
   822  1EB1                     	;# 
   823  1EBB                     	;# 
   824  1EBC                     	;# 
   825  1EBD                     	;# 
   826  1EBE                     	;# 
   827  1EC3                     	;# 
   828  1EC5                     	;# 
   829  1EC6                     	;# 
   830  1EC7                     	;# 
   831  1EC8                     	;# 
   832  1EC9                     	;# 
   833  1ECA                     	;# 
   834  1ECB                     	;# 
   835  1ECC                     	;# 
   836  1ECD                     	;# 
   837  1ECE                     	;# 
   838  1F10                     	;# 
   839  1F11                     	;# 
   840  1F12                     	;# 
   841  1F13                     	;# 
   842  1F14                     	;# 
   843  1F15                     	;# 
   844  1F16                     	;# 
   845  1F17                     	;# 
   846  1F18                     	;# 
   847  1F19                     	;# 
   848  1F1A                     	;# 
   849  1F1B                     	;# 
   850  1F1C                     	;# 
   851  1F1D                     	;# 
   852  1F1E                     	;# 
   853  1F1F                     	;# 
   854  1F20                     	;# 
   855  1F21                     	;# 
   856  1F22                     	;# 
   857  1F23                     	;# 
   858  1F24                     	;# 
   859  1F25                     	;# 
   860  1F26                     	;# 
   861  1F27                     	;# 
   862  1F38                     	;# 
   863  1F39                     	;# 
   864  1F3A                     	;# 
   865  1F3B                     	;# 
   866  1F3C                     	;# 
   867  1F3D                     	;# 
   868  1F3E                     	;# 
   869  1F3F                     	;# 
   870  1F43                     	;# 
   871  1F44                     	;# 
   872  1F45                     	;# 
   873  1F46                     	;# 
   874  1F47                     	;# 
   875  1F48                     	;# 
   876  1F49                     	;# 
   877  1F4A                     	;# 
   878  1F4E                     	;# 
   879  1F4F                     	;# 
   880  1F50                     	;# 
   881  1F51                     	;# 
   882  1F52                     	;# 
   883  1F53                     	;# 
   884  1F54                     	;# 
   885  1F55                     	;# 
   886  1F65                     	;# 
   887  1F68                     	;# 
   888  1F69                     	;# 
   889  1F6A                     	;# 
   890  1F6B                     	;# 
   891  1FE4                     	;# 
   892  1FE5                     	;# 
   893  1FE6                     	;# 
   894  1FE7                     	;# 
   895  1FE8                     	;# 
   896  1FE8                     	;# 
   897  1FE9                     	;# 
   898  1FEA                     	;# 
   899  1FEB                     	;# 
   900  1FED                     	;# 
   901  1FEE                     	;# 
   902  1FEF                     	;# 
   903  0000                     	;# 
   904  0001                     	;# 
   905  0002                     	;# 
   906  0003                     	;# 
   907  0004                     	;# 
   908  0005                     	;# 
   909  0006                     	;# 
   910  0007                     	;# 
   911  0008                     	;# 
   912  0009                     	;# 
   913  000A                     	;# 
   914  000B                     	;# 
   915  000C                     	;# 
   916  000D                     	;# 
   917  000E                     	;# 
   918  0010                     	;# 
   919  0012                     	;# 
   920  0013                     	;# 
   921  0014                     	;# 
   922  0016                     	;# 
   923  0018                     	;# 
   924  0019                     	;# 
   925  001A                     	;# 
   926  009B                     	;# 
   927  009B                     	;# 
   928  009C                     	;# 
   929  009D                     	;# 
   930  009E                     	;# 
   931  009F                     	;# 
   932  0119                     	;# 
   933  0119                     	;# 
   934  0119                     	;# 
   935  011A                     	;# 
   936  011A                     	;# 
   937  011A                     	;# 
   938  011B                     	;# 
   939  011B                     	;# 
   940  011B                     	;# 
   941  011B                     	;# 
   942  011B                     	;# 
   943  011C                     	;# 
   944  011C                     	;# 
   945  011C                     	;# 
   946  011D                     	;# 
   947  011D                     	;# 
   948  011D                     	;# 
   949  011E                     	;# 
   950  011E                     	;# 
   951  011E                     	;# 
   952  011F                     	;# 
   953  011F                     	;# 
   954  011F                     	;# 
   955  011F                     	;# 
   956  011F                     	;# 
   957  018C                     	;# 
   958  018D                     	;# 
   959  018E                     	;# 
   960  018F                     	;# 
   961  0190                     	;# 
   962  0191                     	;# 
   963  0192                     	;# 
   964  0196                     	;# 
   965  0197                     	;# 
   966  0198                     	;# 
   967  0199                     	;# 
   968  019A                     	;# 
   969  019B                     	;# 
   970  019C                     	;# 
   971  020C                     	;# 
   972  020C                     	;# 
   973  020D                     	;# 
   974  020E                     	;# 
   975  020F                     	;# 
   976  020F                     	;# 
   977  0210                     	;# 
   978  0210                     	;# 
   979  0211                     	;# 
   980  0211                     	;# 
   981  028C                     	;# 
   982  028C                     	;# 
   983  028D                     	;# 
   984  028D                     	;# 
   985  028E                     	;# 
   986  028F                     	;# 
   987  0290                     	;# 
   988  0291                     	;# 
   989  030C                     	;# 
   990  030C                     	;# 
   991  030D                     	;# 
   992  030E                     	;# 
   993  030F                     	;# 
   994  0310                     	;# 
   995  0310                     	;# 
   996  0311                     	;# 
   997  0312                     	;# 
   998  0313                     	;# 
   999  0314                     	;# 
  1000  0314                     	;# 
  1001  0315                     	;# 
  1002  0316                     	;# 
  1003  0318                     	;# 
  1004  0318                     	;# 
  1005  0319                     	;# 
  1006  031A                     	;# 
  1007  031C                     	;# 
  1008  031C                     	;# 
  1009  031D                     	;# 
  1010  031E                     	;# 
  1011  038C                     	;# 
  1012  038C                     	;# 
  1013  038D                     	;# 
  1014  038E                     	;# 
  1015  058C                     	;# 
  1016  058C                     	;# 
  1017  058D                     	;# 
  1018  058E                     	;# 
  1019  058F                     	;# 
  1020  058F                     	;# 
  1021  0590                     	;# 
  1022  0591                     	;# 
  1023  0592                     	;# 
  1024  0593                     	;# 
  1025  059C                     	;# 
  1026  059C                     	;# 
  1027  059D                     	;# 
  1028  059D                     	;# 
  1029  059E                     	;# 
  1030  059F                     	;# 
  1031  060C                     	;# 
  1032  060D                     	;# 
  1033  060E                     	;# 
  1034  060F                     	;# 
  1035  0610                     	;# 
  1036  0611                     	;# 
  1037  0612                     	;# 
  1038  0613                     	;# 
  1039  0614                     	;# 
  1040  070C                     	;# 
  1041  070D                     	;# 
  1042  070E                     	;# 
  1043  070F                     	;# 
  1044  0710                     	;# 
  1045  0711                     	;# 
  1046  0712                     	;# 
  1047  0713                     	;# 
  1048  0716                     	;# 
  1049  0717                     	;# 
  1050  0718                     	;# 
  1051  0719                     	;# 
  1052  071A                     	;# 
  1053  071B                     	;# 
  1054  071C                     	;# 
  1055  071D                     	;# 
  1056  0796                     	;# 
  1057  0797                     	;# 
  1058  0798                     	;# 
  1059  0799                     	;# 
  1060  079A                     	;# 
  1061  079B                     	;# 
  1062  080C                     	;# 
  1063  080D                     	;# 
  1064  080E                     	;# 
  1065  080F                     	;# 
  1066  0810                     	;# 
  1067  0811                     	;# 
  1068  0812                     	;# 
  1069  0813                     	;# 
  1070  0814                     	;# 
  1071  081A                     	;# 
  1072  081A                     	;# 
  1073  081B                     	;# 
  1074  081C                     	;# 
  1075  081C                     	;# 
  1076  081D                     	;# 
  1077  081E                     	;# 
  1078  081F                     	;# 
  1079  088C                     	;# 
  1080  088D                     	;# 
  1081  088E                     	;# 
  1082  088F                     	;# 
  1083  0890                     	;# 
  1084  0891                     	;# 
  1085  0892                     	;# 
  1086  0893                     	;# 
  1087  0895                     	;# 
  1088  0896                     	;# 
  1089  090C                     	;# 
  1090  090E                     	;# 
  1091  090F                     	;# 
  1092  091F                     	;# 
  1093  098F                     	;# 
  1094  098F                     	;# 
  1095  0990                     	;# 
  1096  0991                     	;# 
  1097  0992                     	;# 
  1098  0993                     	;# 
  1099  0994                     	;# 
  1100  0995                     	;# 
  1101  0996                     	;# 
  1102  0997                     	;# 
  1103  0A19                     	;# 
  1104  0A19                     	;# 
  1105  0A1A                     	;# 
  1106  0A1A                     	;# 
  1107  0A1B                     	;# 
  1108  0A1B                     	;# 
  1109  0A1B                     	;# 
  1110  0A1C                     	;# 
  1111  0A1C                     	;# 
  1112  0A1D                     	;# 
  1113  0A1D                     	;# 
  1114  0A1E                     	;# 
  1115  0A1E                     	;# 
  1116  0A1F                     	;# 
  1117  0A1F                     	;# 
  1118  0A1F                     	;# 
  1119  1E0F                     	;# 
  1120  1E10                     	;# 
  1121  1E11                     	;# 
  1122  1E12                     	;# 
  1123  1E13                     	;# 
  1124  1E14                     	;# 
  1125  1E15                     	;# 
  1126  1E16                     	;# 
  1127  1E17                     	;# 
  1128  1E18                     	;# 
  1129  1E19                     	;# 
  1130  1E1A                     	;# 
  1131  1E1B                     	;# 
  1132  1E1C                     	;# 
  1133  1E1D                     	;# 
  1134  1E1E                     	;# 
  1135  1E1F                     	;# 
  1136  1E20                     	;# 
  1137  1E21                     	;# 
  1138  1E22                     	;# 
  1139  1E23                     	;# 
  1140  1E24                     	;# 
  1141  1E25                     	;# 
  1142  1E26                     	;# 
  1143  1E27                     	;# 
  1144  1E28                     	;# 
  1145  1E29                     	;# 
  1146  1E2A                     	;# 
  1147  1E2B                     	;# 
  1148  1E2C                     	;# 
  1149  1E2D                     	;# 
  1150  1E2E                     	;# 
  1151  1E2F                     	;# 
  1152  1E30                     	;# 
  1153  1E31                     	;# 
  1154  1E32                     	;# 
  1155  1E33                     	;# 
  1156  1E34                     	;# 
  1157  1E35                     	;# 
  1158  1E36                     	;# 
  1159  1E37                     	;# 
  1160  1E8F                     	;# 
  1161  1E90                     	;# 
  1162  1E91                     	;# 
  1163  1E92                     	;# 
  1164  1E93                     	;# 
  1165  1E9C                     	;# 
  1166  1EA1                     	;# 
  1167  1EA2                     	;# 
  1168  1EB1                     	;# 
  1169  1EBB                     	;# 
  1170  1EBC                     	;# 
  1171  1EBD                     	;# 
  1172  1EBE                     	;# 
  1173  1EC3                     	;# 
  1174  1EC5                     	;# 
  1175  1EC6                     	;# 
  1176  1EC7                     	;# 
  1177  1EC8                     	;# 
  1178  1EC9                     	;# 
  1179  1ECA                     	;# 
  1180  1ECB                     	;# 
  1181  1ECC                     	;# 
  1182  1ECD                     	;# 
  1183  1ECE                     	;# 
  1184  1F10                     	;# 
  1185  1F11                     	;# 
  1186  1F12                     	;# 
  1187  1F13                     	;# 
  1188  1F14                     	;# 
  1189  1F15                     	;# 
  1190  1F16                     	;# 
  1191  1F17                     	;# 
  1192  1F18                     	;# 
  1193  1F19                     	;# 
  1194  1F1A                     	;# 
  1195  1F1B                     	;# 
  1196  1F1C                     	;# 
  1197  1F1D                     	;# 
  1198  1F1E                     	;# 
  1199  1F1F                     	;# 
  1200  1F20                     	;# 
  1201  1F21                     	;# 
  1202  1F22                     	;# 
  1203  1F23                     	;# 
  1204  1F24                     	;# 
  1205  1F25                     	;# 
  1206  1F26                     	;# 
  1207  1F27                     	;# 
  1208  1F38                     	;# 
  1209  1F39                     	;# 
  1210  1F3A                     	;# 
  1211  1F3B                     	;# 
  1212  1F3C                     	;# 
  1213  1F3D                     	;# 
  1214  1F3E                     	;# 
  1215  1F3F                     	;# 
  1216  1F43                     	;# 
  1217  1F44                     	;# 
  1218  1F45                     	;# 
  1219  1F46                     	;# 
  1220  1F47                     	;# 
  1221  1F48                     	;# 
  1222  1F49                     	;# 
  1223  1F4A                     	;# 
  1224  1F4E                     	;# 
  1225  1F4F                     	;# 
  1226  1F50                     	;# 
  1227  1F51                     	;# 
  1228  1F52                     	;# 
  1229  1F53                     	;# 
  1230  1F54                     	;# 
  1231  1F55                     	;# 
  1232  1F65                     	;# 
  1233  1F68                     	;# 
  1234  1F69                     	;# 
  1235  1F6A                     	;# 
  1236  1F6B                     	;# 
  1237  1FE4                     	;# 
  1238  1FE5                     	;# 
  1239  1FE6                     	;# 
  1240  1FE7                     	;# 
  1241  1FE8                     	;# 
  1242  1FE8                     	;# 
  1243  1FE9                     	;# 
  1244  1FEA                     	;# 
  1245  1FEB                     	;# 
  1246  1FED                     	;# 
  1247  1FEE                     	;# 
  1248  1FEF                     	;# 
  1249  0000                     	;# 
  1250  0001                     	;# 
  1251  0002                     	;# 
  1252  0003                     	;# 
  1253  0004                     	;# 
  1254  0005                     	;# 
  1255  0006                     	;# 
  1256  0007                     	;# 
  1257  0008                     	;# 
  1258  0009                     	;# 
  1259  000A                     	;# 
  1260  000B                     	;# 
  1261  000C                     	;# 
  1262  000D                     	;# 
  1263  000E                     	;# 
  1264  0010                     	;# 
  1265  0012                     	;# 
  1266  0013                     	;# 
  1267  0014                     	;# 
  1268  0016                     	;# 
  1269  0018                     	;# 
  1270  0019                     	;# 
  1271  001A                     	;# 
  1272  009B                     	;# 
  1273  009B                     	;# 
  1274  009C                     	;# 
  1275  009D                     	;# 
  1276  009E                     	;# 
  1277  009F                     	;# 
  1278  0119                     	;# 
  1279  0119                     	;# 
  1280  0119                     	;# 
  1281  011A                     	;# 
  1282  011A                     	;# 
  1283  011A                     	;# 
  1284  011B                     	;# 
  1285  011B                     	;# 
  1286  011B                     	;# 
  1287  011B                     	;# 
  1288  011B                     	;# 
  1289  011C                     	;# 
  1290  011C                     	;# 
  1291  011C                     	;# 
  1292  011D                     	;# 
  1293  011D                     	;# 
  1294  011D                     	;# 
  1295  011E                     	;# 
  1296  011E                     	;# 
  1297  011E                     	;# 
  1298  011F                     	;# 
  1299  011F                     	;# 
  1300  011F                     	;# 
  1301  011F                     	;# 
  1302  011F                     	;# 
  1303  018C                     	;# 
  1304  018D                     	;# 
  1305  018E                     	;# 
  1306  018F                     	;# 
  1307  0190                     	;# 
  1308  0191                     	;# 
  1309  0192                     	;# 
  1310  0196                     	;# 
  1311  0197                     	;# 
  1312  0198                     	;# 
  1313  0199                     	;# 
  1314  019A                     	;# 
  1315  019B                     	;# 
  1316  019C                     	;# 
  1317  020C                     	;# 
  1318  020C                     	;# 
  1319  020D                     	;# 
  1320  020E                     	;# 
  1321  020F                     	;# 
  1322  020F                     	;# 
  1323  0210                     	;# 
  1324  0210                     	;# 
  1325  0211                     	;# 
  1326  0211                     	;# 
  1327  028C                     	;# 
  1328  028C                     	;# 
  1329  028D                     	;# 
  1330  028D                     	;# 
  1331  028E                     	;# 
  1332  028F                     	;# 
  1333  0290                     	;# 
  1334  0291                     	;# 
  1335  030C                     	;# 
  1336  030C                     	;# 
  1337  030D                     	;# 
  1338  030E                     	;# 
  1339  030F                     	;# 
  1340  0310                     	;# 
  1341  0310                     	;# 
  1342  0311                     	;# 
  1343  0312                     	;# 
  1344  0313                     	;# 
  1345  0314                     	;# 
  1346  0314                     	;# 
  1347  0315                     	;# 
  1348  0316                     	;# 
  1349  0318                     	;# 
  1350  0318                     	;# 
  1351  0319                     	;# 
  1352  031A                     	;# 
  1353  031C                     	;# 
  1354  031C                     	;# 
  1355  031D                     	;# 
  1356  031E                     	;# 
  1357  038C                     	;# 
  1358  038C                     	;# 
  1359  038D                     	;# 
  1360  038E                     	;# 
  1361  058C                     	;# 
  1362  058C                     	;# 
  1363  058D                     	;# 
  1364  058E                     	;# 
  1365  058F                     	;# 
  1366  058F                     	;# 
  1367  0590                     	;# 
  1368  0591                     	;# 
  1369  0592                     	;# 
  1370  0593                     	;# 
  1371  059C                     	;# 
  1372  059C                     	;# 
  1373  059D                     	;# 
  1374  059D                     	;# 
  1375  059E                     	;# 
  1376  059F                     	;# 
  1377  060C                     	;# 
  1378  060D                     	;# 
  1379  060E                     	;# 
  1380  060F                     	;# 
  1381  0610                     	;# 
  1382  0611                     	;# 
  1383  0612                     	;# 
  1384  0613                     	;# 
  1385  0614                     	;# 
  1386  070C                     	;# 
  1387  070D                     	;# 
  1388  070E                     	;# 
  1389  070F                     	;# 
  1390  0710                     	;# 
  1391  0711                     	;# 
  1392  0712                     	;# 
  1393  0713                     	;# 
  1394  0716                     	;# 
  1395  0717                     	;# 
  1396  0718                     	;# 
  1397  0719                     	;# 
  1398  071A                     	;# 
  1399  071B                     	;# 
  1400  071C                     	;# 
  1401  071D                     	;# 
  1402  0796                     	;# 
  1403  0797                     	;# 
  1404  0798                     	;# 
  1405  0799                     	;# 
  1406  079A                     	;# 
  1407  079B                     	;# 
  1408  080C                     	;# 
  1409  080D                     	;# 
  1410  080E                     	;# 
  1411  080F                     	;# 
  1412  0810                     	;# 
  1413  0811                     	;# 
  1414  0812                     	;# 
  1415  0813                     	;# 
  1416  0814                     	;# 
  1417  081A                     	;# 
  1418  081A                     	;# 
  1419  081B                     	;# 
  1420  081C                     	;# 
  1421  081C                     	;# 
  1422  081D                     	;# 
  1423  081E                     	;# 
  1424  081F                     	;# 
  1425  088C                     	;# 
  1426  088D                     	;# 
  1427  088E                     	;# 
  1428  088F                     	;# 
  1429  0890                     	;# 
  1430  0891                     	;# 
  1431  0892                     	;# 
  1432  0893                     	;# 
  1433  0895                     	;# 
  1434  0896                     	;# 
  1435  090C                     	;# 
  1436  090E                     	;# 
  1437  090F                     	;# 
  1438  091F                     	;# 
  1439  098F                     	;# 
  1440  098F                     	;# 
  1441  0990                     	;# 
  1442  0991                     	;# 
  1443  0992                     	;# 
  1444  0993                     	;# 
  1445  0994                     	;# 
  1446  0995                     	;# 
  1447  0996                     	;# 
  1448  0997                     	;# 
  1449  0A19                     	;# 
  1450  0A19                     	;# 
  1451  0A1A                     	;# 
  1452  0A1A                     	;# 
  1453  0A1B                     	;# 
  1454  0A1B                     	;# 
  1455  0A1B                     	;# 
  1456  0A1C                     	;# 
  1457  0A1C                     	;# 
  1458  0A1D                     	;# 
  1459  0A1D                     	;# 
  1460  0A1E                     	;# 
  1461  0A1E                     	;# 
  1462  0A1F                     	;# 
  1463  0A1F                     	;# 
  1464  0A1F                     	;# 
  1465  1E0F                     	;# 
  1466  1E10                     	;# 
  1467  1E11                     	;# 
  1468  1E12                     	;# 
  1469  1E13                     	;# 
  1470  1E14                     	;# 
  1471  1E15                     	;# 
  1472  1E16                     	;# 
  1473  1E17                     	;# 
  1474  1E18                     	;# 
  1475  1E19                     	;# 
  1476  1E1A                     	;# 
  1477  1E1B                     	;# 
  1478  1E1C                     	;# 
  1479  1E1D                     	;# 
  1480  1E1E                     	;# 
  1481  1E1F                     	;# 
  1482  1E20                     	;# 
  1483  1E21                     	;# 
  1484  1E22                     	;# 
  1485  1E23                     	;# 
  1486  1E24                     	;# 
  1487  1E25                     	;# 
  1488  1E26                     	;# 
  1489  1E27                     	;# 
  1490  1E28                     	;# 
  1491  1E29                     	;# 
  1492  1E2A                     	;# 
  1493  1E2B                     	;# 
  1494  1E2C                     	;# 
  1495  1E2D                     	;# 
  1496  1E2E                     	;# 
  1497  1E2F                     	;# 
  1498  1E30                     	;# 
  1499  1E31                     	;# 
  1500  1E32                     	;# 
  1501  1E33                     	;# 
  1502  1E34                     	;# 
  1503  1E35                     	;# 
  1504  1E36                     	;# 
  1505  1E37                     	;# 
  1506  1E8F                     	;# 
  1507  1E90                     	;# 
  1508  1E91                     	;# 
  1509  1E92                     	;# 
  1510  1E93                     	;# 
  1511  1E9C                     	;# 
  1512  1EA1                     	;# 
  1513  1EA2                     	;# 
  1514  1EB1                     	;# 
  1515  1EBB                     	;# 
  1516  1EBC                     	;# 
  1517  1EBD                     	;# 
  1518  1EBE                     	;# 
  1519  1EC3                     	;# 
  1520  1EC5                     	;# 
  1521  1EC6                     	;# 
  1522  1EC7                     	;# 
  1523  1EC8                     	;# 
  1524  1EC9                     	;# 
  1525  1ECA                     	;# 
  1526  1ECB                     	;# 
  1527  1ECC                     	;# 
  1528  1ECD                     	;# 
  1529  1ECE                     	;# 
  1530  1F10                     	;# 
  1531  1F11                     	;# 
  1532  1F12                     	;# 
  1533  1F13                     	;# 
  1534  1F14                     	;# 
  1535  1F15                     	;# 
  1536  1F16                     	;# 
  1537  1F17                     	;# 
  1538  1F18                     	;# 
  1539  1F19                     	;# 
  1540  1F1A                     	;# 
  1541  1F1B                     	;# 
  1542  1F1C                     	;# 
  1543  1F1D                     	;# 
  1544  1F1E                     	;# 
  1545  1F1F                     	;# 
  1546  1F20                     	;# 
  1547  1F21                     	;# 
  1548  1F22                     	;# 
  1549  1F23                     	;# 
  1550  1F24                     	;# 
  1551  1F25                     	;# 
  1552  1F26                     	;# 
  1553  1F27                     	;# 
  1554  1F38                     	;# 
  1555  1F39                     	;# 
  1556  1F3A                     	;# 
  1557  1F3B                     	;# 
  1558  1F3C                     	;# 
  1559  1F3D                     	;# 
  1560  1F3E                     	;# 
  1561  1F3F                     	;# 
  1562  1F43                     	;# 
  1563  1F44                     	;# 
  1564  1F45                     	;# 
  1565  1F46                     	;# 
  1566  1F47                     	;# 
  1567  1F48                     	;# 
  1568  1F49                     	;# 
  1569  1F4A                     	;# 
  1570  1F4E                     	;# 
  1571  1F4F                     	;# 
  1572  1F50                     	;# 
  1573  1F51                     	;# 
  1574  1F52                     	;# 
  1575  1F53                     	;# 
  1576  1F54                     	;# 
  1577  1F55                     	;# 
  1578  1F65                     	;# 
  1579  1F68                     	;# 
  1580  1F69                     	;# 
  1581  1F6A                     	;# 
  1582  1F6B                     	;# 
  1583  1FE4                     	;# 
  1584  1FE5                     	;# 
  1585  1FE6                     	;# 
  1586  1FE7                     	;# 
  1587  1FE8                     	;# 
  1588  1FE8                     	;# 
  1589  1FE9                     	;# 
  1590  1FEA                     	;# 
  1591  1FEB                     	;# 
  1592  1FED                     	;# 
  1593  1FEE                     	;# 
  1594  1FEF                     	;# 
  1595  0000                     	;# 
  1596  0001                     	;# 
  1597  0002                     	;# 
  1598  0003                     	;# 
  1599  0004                     	;# 
  1600  0005                     	;# 
  1601  0006                     	;# 
  1602  0007                     	;# 
  1603  0008                     	;# 
  1604  0009                     	;# 
  1605  000A                     	;# 
  1606  000B                     	;# 
  1607  000C                     	;# 
  1608  000D                     	;# 
  1609  000E                     	;# 
  1610  0010                     	;# 
  1611  0012                     	;# 
  1612  0013                     	;# 
  1613  0014                     	;# 
  1614  0016                     	;# 
  1615  0018                     	;# 
  1616  0019                     	;# 
  1617  001A                     	;# 
  1618  009B                     	;# 
  1619  009B                     	;# 
  1620  009C                     	;# 
  1621  009D                     	;# 
  1622  009E                     	;# 
  1623  009F                     	;# 
  1624  0119                     	;# 
  1625  0119                     	;# 
  1626  0119                     	;# 
  1627  011A                     	;# 
  1628  011A                     	;# 
  1629  011A                     	;# 
  1630  011B                     	;# 
  1631  011B                     	;# 
  1632  011B                     	;# 
  1633  011B                     	;# 
  1634  011B                     	;# 
  1635  011C                     	;# 
  1636  011C                     	;# 
  1637  011C                     	;# 
  1638  011D                     	;# 
  1639  011D                     	;# 
  1640  011D                     	;# 
  1641  011E                     	;# 
  1642  011E                     	;# 
  1643  011E                     	;# 
  1644  011F                     	;# 
  1645  011F                     	;# 
  1646  011F                     	;# 
  1647  011F                     	;# 
  1648  011F                     	;# 
  1649  018C                     	;# 
  1650  018D                     	;# 
  1651  018E                     	;# 
  1652  018F                     	;# 
  1653  0190                     	;# 
  1654  0191                     	;# 
  1655  0192                     	;# 
  1656  0196                     	;# 
  1657  0197                     	;# 
  1658  0198                     	;# 
  1659  0199                     	;# 
  1660  019A                     	;# 
  1661  019B                     	;# 
  1662  019C                     	;# 
  1663  020C                     	;# 
  1664  020C                     	;# 
  1665  020D                     	;# 
  1666  020E                     	;# 
  1667  020F                     	;# 
  1668  020F                     	;# 
  1669  0210                     	;# 
  1670  0210                     	;# 
  1671  0211                     	;# 
  1672  0211                     	;# 
  1673  028C                     	;# 
  1674  028C                     	;# 
  1675  028D                     	;# 
  1676  028D                     	;# 
  1677  028E                     	;# 
  1678  028F                     	;# 
  1679  0290                     	;# 
  1680  0291                     	;# 
  1681  030C                     	;# 
  1682  030C                     	;# 
  1683  030D                     	;# 
  1684  030E                     	;# 
  1685  030F                     	;# 
  1686  0310                     	;# 
  1687  0310                     	;# 
  1688  0311                     	;# 
  1689  0312                     	;# 
  1690  0313                     	;# 
  1691  0314                     	;# 
  1692  0314                     	;# 
  1693  0315                     	;# 
  1694  0316                     	;# 
  1695  0318                     	;# 
  1696  0318                     	;# 
  1697  0319                     	;# 
  1698  031A                     	;# 
  1699  031C                     	;# 
  1700  031C                     	;# 
  1701  031D                     	;# 
  1702  031E                     	;# 
  1703  038C                     	;# 
  1704  038C                     	;# 
  1705  038D                     	;# 
  1706  038E                     	;# 
  1707  058C                     	;# 
  1708  058C                     	;# 
  1709  058D                     	;# 
  1710  058E                     	;# 
  1711  058F                     	;# 
  1712  058F                     	;# 
  1713  0590                     	;# 
  1714  0591                     	;# 
  1715  0592                     	;# 
  1716  0593                     	;# 
  1717  059C                     	;# 
  1718  059C                     	;# 
  1719  059D                     	;# 
  1720  059D                     	;# 
  1721  059E                     	;# 
  1722  059F                     	;# 
  1723  060C                     	;# 
  1724  060D                     	;# 
  1725  060E                     	;# 
  1726  060F                     	;# 
  1727  0610                     	;# 
  1728  0611                     	;# 
  1729  0612                     	;# 
  1730  0613                     	;# 
  1731  0614                     	;# 
  1732  070C                     	;# 
  1733  070D                     	;# 
  1734  070E                     	;# 
  1735  070F                     	;# 
  1736  0710                     	;# 
  1737  0711                     	;# 
  1738  0712                     	;# 
  1739  0713                     	;# 
  1740  0716                     	;# 
  1741  0717                     	;# 
  1742  0718                     	;# 
  1743  0719                     	;# 
  1744  071A                     	;# 
  1745  071B                     	;# 
  1746  071C                     	;# 
  1747  071D                     	;# 
  1748  0796                     	;# 
  1749  0797                     	;# 
  1750  0798                     	;# 
  1751  0799                     	;# 
  1752  079A                     	;# 
  1753  079B                     	;# 
  1754  080C                     	;# 
  1755  080D                     	;# 
  1756  080E                     	;# 
  1757  080F                     	;# 
  1758  0810                     	;# 
  1759  0811                     	;# 
  1760  0812                     	;# 
  1761  0813                     	;# 
  1762  0814                     	;# 
  1763  081A                     	;# 
  1764  081A                     	;# 
  1765  081B                     	;# 
  1766  081C                     	;# 
  1767  081C                     	;# 
  1768  081D                     	;# 
  1769  081E                     	;# 
  1770  081F                     	;# 
  1771  088C                     	;# 
  1772  088D                     	;# 
  1773  088E                     	;# 
  1774  088F                     	;# 
  1775  0890                     	;# 
  1776  0891                     	;# 
  1777  0892                     	;# 
  1778  0893                     	;# 
  1779  0895                     	;# 
  1780  0896                     	;# 
  1781  090C                     	;# 
  1782  090E                     	;# 
  1783  090F                     	;# 
  1784  091F                     	;# 
  1785  098F                     	;# 
  1786  098F                     	;# 
  1787  0990                     	;# 
  1788  0991                     	;# 
  1789  0992                     	;# 
  1790  0993                     	;# 
  1791  0994                     	;# 
  1792  0995                     	;# 
  1793  0996                     	;# 
  1794  0997                     	;# 
  1795  0A19                     	;# 
  1796  0A19                     	;# 
  1797  0A1A                     	;# 
  1798  0A1A                     	;# 
  1799  0A1B                     	;# 
  1800  0A1B                     	;# 
  1801  0A1B                     	;# 
  1802  0A1C                     	;# 
  1803  0A1C                     	;# 
  1804  0A1D                     	;# 
  1805  0A1D                     	;# 
  1806  0A1E                     	;# 
  1807  0A1E                     	;# 
  1808  0A1F                     	;# 
  1809  0A1F                     	;# 
  1810  0A1F                     	;# 
  1811  1E0F                     	;# 
  1812  1E10                     	;# 
  1813  1E11                     	;# 
  1814  1E12                     	;# 
  1815  1E13                     	;# 
  1816  1E14                     	;# 
  1817  1E15                     	;# 
  1818  1E16                     	;# 
  1819  1E17                     	;# 
  1820  1E18                     	;# 
  1821  1E19                     	;# 
  1822  1E1A                     	;# 
  1823  1E1B                     	;# 
  1824  1E1C                     	;# 
  1825  1E1D                     	;# 
  1826  1E1E                     	;# 
  1827  1E1F                     	;# 
  1828  1E20                     	;# 
  1829  1E21                     	;# 
  1830  1E22                     	;# 
  1831  1E23                     	;# 
  1832  1E24                     	;# 
  1833  1E25                     	;# 
  1834  1E26                     	;# 
  1835  1E27                     	;# 
  1836  1E28                     	;# 
  1837  1E29                     	;# 
  1838  1E2A                     	;# 
  1839  1E2B                     	;# 
  1840  1E2C                     	;# 
  1841  1E2D                     	;# 
  1842  1E2E                     	;# 
  1843  1E2F                     	;# 
  1844  1E30                     	;# 
  1845  1E31                     	;# 
  1846  1E32                     	;# 
  1847  1E33                     	;# 
  1848  1E34                     	;# 
  1849  1E35                     	;# 
  1850  1E36                     	;# 
  1851  1E37                     	;# 
  1852  1E8F                     	;# 
  1853  1E90                     	;# 
  1854  1E91                     	;# 
  1855  1E92                     	;# 
  1856  1E93                     	;# 
  1857  1E9C                     	;# 
  1858  1EA1                     	;# 
  1859  1EA2                     	;# 
  1860  1EB1                     	;# 
  1861  1EBB                     	;# 
  1862  1EBC                     	;# 
  1863  1EBD                     	;# 
  1864  1EBE                     	;# 
  1865  1EC3                     	;# 
  1866  1EC5                     	;# 
  1867  1EC6                     	;# 
  1868  1EC7                     	;# 
  1869  1EC8                     	;# 
  1870  1EC9                     	;# 
  1871  1ECA                     	;# 
  1872  1ECB                     	;# 
  1873  1ECC                     	;# 
  1874  1ECD                     	;# 
  1875  1ECE                     	;# 
  1876  1F10                     	;# 
  1877  1F11                     	;# 
  1878  1F12                     	;# 
  1879  1F13                     	;# 
  1880  1F14                     	;# 
  1881  1F15                     	;# 
  1882  1F16                     	;# 
  1883  1F17                     	;# 
  1884  1F18                     	;# 
  1885  1F19                     	;# 
  1886  1F1A                     	;# 
  1887  1F1B                     	;# 
  1888  1F1C                     	;# 
  1889  1F1D                     	;# 
  1890  1F1E                     	;# 
  1891  1F1F                     	;# 
  1892  1F20                     	;# 
  1893  1F21                     	;# 
  1894  1F22                     	;# 
  1895  1F23                     	;# 
  1896  1F24                     	;# 
  1897  1F25                     	;# 
  1898  1F26                     	;# 
  1899  1F27                     	;# 
  1900  1F38                     	;# 
  1901  1F39                     	;# 
  1902  1F3A                     	;# 
  1903  1F3B                     	;# 
  1904  1F3C                     	;# 
  1905  1F3D                     	;# 
  1906  1F3E                     	;# 
  1907  1F3F                     	;# 
  1908  1F43                     	;# 
  1909  1F44                     	;# 
  1910  1F45                     	;# 
  1911  1F46                     	;# 
  1912  1F47                     	;# 
  1913  1F48                     	;# 
  1914  1F49                     	;# 
  1915  1F4A                     	;# 
  1916  1F4E                     	;# 
  1917  1F4F                     	;# 
  1918  1F50                     	;# 
  1919  1F51                     	;# 
  1920  1F52                     	;# 
  1921  1F53                     	;# 
  1922  1F54                     	;# 
  1923  1F55                     	;# 
  1924  1F65                     	;# 
  1925  1F68                     	;# 
  1926  1F69                     	;# 
  1927  1F6A                     	;# 
  1928  1F6B                     	;# 
  1929  1FE4                     	;# 
  1930  1FE5                     	;# 
  1931  1FE6                     	;# 
  1932  1FE7                     	;# 
  1933  1FE8                     	;# 
  1934  1FE8                     	;# 
  1935  1FE9                     	;# 
  1936  1FEA                     	;# 
  1937  1FEB                     	;# 
  1938  1FED                     	;# 
  1939  1FEE                     	;# 
  1940  1FEF                     	;# 
  1941  0000                     	;# 
  1942  0001                     	;# 
  1943  0002                     	;# 
  1944  0003                     	;# 
  1945  0004                     	;# 
  1946  0005                     	;# 
  1947  0006                     	;# 
  1948  0007                     	;# 
  1949  0008                     	;# 
  1950  0009                     	;# 
  1951  000A                     	;# 
  1952  000B                     	;# 
  1953  000C                     	;# 
  1954  000D                     	;# 
  1955  000E                     	;# 
  1956  0010                     	;# 
  1957  0012                     	;# 
  1958  0013                     	;# 
  1959  0014                     	;# 
  1960  0016                     	;# 
  1961  0018                     	;# 
  1962  0019                     	;# 
  1963  001A                     	;# 
  1964  009B                     	;# 
  1965  009B                     	;# 
  1966  009C                     	;# 
  1967  009D                     	;# 
  1968  009E                     	;# 
  1969  009F                     	;# 
  1970  0119                     	;# 
  1971  0119                     	;# 
  1972  0119                     	;# 
  1973  011A                     	;# 
  1974  011A                     	;# 
  1975  011A                     	;# 
  1976  011B                     	;# 
  1977  011B                     	;# 
  1978  011B                     	;# 
  1979  011B                     	;# 
  1980  011B                     	;# 
  1981  011C                     	;# 
  1982  011C                     	;# 
  1983  011C                     	;# 
  1984  011D                     	;# 
  1985  011D                     	;# 
  1986  011D                     	;# 
  1987  011E                     	;# 
  1988  011E                     	;# 
  1989  011E                     	;# 
  1990  011F                     	;# 
  1991  011F                     	;# 
  1992  011F                     	;# 
  1993  011F                     	;# 
  1994  011F                     	;# 
  1995  018C                     	;# 
  1996  018D                     	;# 
  1997  018E                     	;# 
  1998  018F                     	;# 
  1999  0190                     	;# 
  2000  0191                     	;# 
  2001  0192                     	;# 
  2002  0196                     	;# 
  2003  0197                     	;# 
  2004  0198                     	;# 
  2005  0199                     	;# 
  2006  019A                     	;# 
  2007  019B                     	;# 
  2008  019C                     	;# 
  2009  020C                     	;# 
  2010  020C                     	;# 
  2011  020D                     	;# 
  2012  020E                     	;# 
  2013  020F                     	;# 
  2014  020F                     	;# 
  2015  0210                     	;# 
  2016  0210                     	;# 
  2017  0211                     	;# 
  2018  0211                     	;# 
  2019  028C                     	;# 
  2020  028C                     	;# 
  2021  028D                     	;# 
  2022  028D                     	;# 
  2023  028E                     	;# 
  2024  028F                     	;# 
  2025  0290                     	;# 
  2026  0291                     	;# 
  2027  030C                     	;# 
  2028  030C                     	;# 
  2029  030D                     	;# 
  2030  030E                     	;# 
  2031  030F                     	;# 
  2032  0310                     	;# 
  2033  0310                     	;# 
  2034  0311                     	;# 
  2035  0312                     	;# 
  2036  0313                     	;# 
  2037  0314                     	;# 
  2038  0314                     	;# 
  2039  0315                     	;# 
  2040  0316                     	;# 
  2041  0318                     	;# 
  2042  0318                     	;# 
  2043  0319                     	;# 
  2044  031A                     	;# 
  2045  031C                     	;# 
  2046  031C                     	;# 
  2047  031D                     	;# 
  2048  031E                     	;# 
  2049  038C                     	;# 
  2050  038C                     	;# 
  2051  038D                     	;# 
  2052  038E                     	;# 
  2053  058C                     	;# 
  2054  058C                     	;# 
  2055  058D                     	;# 
  2056  058E                     	;# 
  2057  058F                     	;# 
  2058  058F                     	;# 
  2059  0590                     	;# 
  2060  0591                     	;# 
  2061  0592                     	;# 
  2062  0593                     	;# 
  2063  059C                     	;# 
  2064  059C                     	;# 
  2065  059D                     	;# 
  2066  059D                     	;# 
  2067  059E                     	;# 
  2068  059F                     	;# 
  2069  060C                     	;# 
  2070  060D                     	;# 
  2071  060E                     	;# 
  2072  060F                     	;# 
  2073  0610                     	;# 
  2074  0611                     	;# 
  2075  0612                     	;# 
  2076  0613                     	;# 
  2077  0614                     	;# 
  2078  070C                     	;# 
  2079  070D                     	;# 
  2080  070E                     	;# 
  2081  070F                     	;# 
  2082  0710                     	;# 
  2083  0711                     	;# 
  2084  0712                     	;# 
  2085  0713                     	;# 
  2086  0716                     	;# 
  2087  0717                     	;# 
  2088  0718                     	;# 
  2089  0719                     	;# 
  2090  071A                     	;# 
  2091  071B                     	;# 
  2092  071C                     	;# 
  2093  071D                     	;# 
  2094  0796                     	;# 
  2095  0797                     	;# 
  2096  0798                     	;# 
  2097  0799                     	;# 
  2098  079A                     	;# 
  2099  079B                     	;# 
  2100  080C                     	;# 
  2101  080D                     	;# 
  2102  080E                     	;# 
  2103  080F                     	;# 
  2104  0810                     	;# 
  2105  0811                     	;# 
  2106  0812                     	;# 
  2107  0813                     	;# 
  2108  0814                     	;# 
  2109  081A                     	;# 
  2110  081A                     	;# 
  2111  081B                     	;# 
  2112  081C                     	;# 
  2113  081C                     	;# 
  2114  081D                     	;# 
  2115  081E                     	;# 
  2116  081F                     	;# 
  2117  088C                     	;# 
  2118  088D                     	;# 
  2119  088E                     	;# 
  2120  088F                     	;# 
  2121  0890                     	;# 
  2122  0891                     	;# 
  2123  0892                     	;# 
  2124  0893                     	;# 
  2125  0895                     	;# 
  2126  0896                     	;# 
  2127  090C                     	;# 
  2128  090E                     	;# 
  2129  090F                     	;# 
  2130  091F                     	;# 
  2131  098F                     	;# 
  2132  098F                     	;# 
  2133  0990                     	;# 
  2134  0991                     	;# 
  2135  0992                     	;# 
  2136  0993                     	;# 
  2137  0994                     	;# 
  2138  0995                     	;# 
  2139  0996                     	;# 
  2140  0997                     	;# 
  2141  0A19                     	;# 
  2142  0A19                     	;# 
  2143  0A1A                     	;# 
  2144  0A1A                     	;# 
  2145  0A1B                     	;# 
  2146  0A1B                     	;# 
  2147  0A1B                     	;# 
  2148  0A1C                     	;# 
  2149  0A1C                     	;# 
  2150  0A1D                     	;# 
  2151  0A1D                     	;# 
  2152  0A1E                     	;# 
  2153  0A1E                     	;# 
  2154  0A1F                     	;# 
  2155  0A1F                     	;# 
  2156  0A1F                     	;# 
  2157  1E0F                     	;# 
  2158  1E10                     	;# 
  2159  1E11                     	;# 
  2160  1E12                     	;# 
  2161  1E13                     	;# 
  2162  1E14                     	;# 
  2163  1E15                     	;# 
  2164  1E16                     	;# 
  2165  1E17                     	;# 
  2166  1E18                     	;# 
  2167  1E19                     	;# 
  2168  1E1A                     	;# 
  2169  1E1B                     	;# 
  2170  1E1C                     	;# 
  2171  1E1D                     	;# 
  2172  1E1E                     	;# 
  2173  1E1F                     	;# 
  2174  1E20                     	;# 
  2175  1E21                     	;# 
  2176  1E22                     	;# 
  2177  1E23                     	;# 
  2178  1E24                     	;# 
  2179  1E25                     	;# 
  2180  1E26                     	;# 
  2181  1E27                     	;# 
  2182  1E28                     	;# 
  2183  1E29                     	;# 
  2184  1E2A                     	;# 
  2185  1E2B                     	;# 
  2186  1E2C                     	;# 
  2187  1E2D                     	;# 
  2188  1E2E                     	;# 
  2189  1E2F                     	;# 
  2190  1E30                     	;# 
  2191  1E31                     	;# 
  2192  1E32                     	;# 
  2193  1E33                     	;# 
  2194  1E34                     	;# 
  2195  1E35                     	;# 
  2196  1E36                     	;# 
  2197  1E37                     	;# 
  2198  1E8F                     	;# 
  2199  1E90                     	;# 
  2200  1E91                     	;# 
  2201  1E92                     	;# 
  2202  1E93                     	;# 
  2203  1E9C                     	;# 
  2204  1EA1                     	;# 
  2205  1EA2                     	;# 
  2206  1EB1                     	;# 
  2207  1EBB                     	;# 
  2208  1EBC                     	;# 
  2209  1EBD                     	;# 
  2210  1EBE                     	;# 
  2211  1EC3                     	;# 
  2212  1EC5                     	;# 
  2213  1EC6                     	;# 
  2214  1EC7                     	;# 
  2215  1EC8                     	;# 
  2216  1EC9                     	;# 
  2217  1ECA                     	;# 
  2218  1ECB                     	;# 
  2219  1ECC                     	;# 
  2220  1ECD                     	;# 
  2221  1ECE                     	;# 
  2222  1F10                     	;# 
  2223  1F11                     	;# 
  2224  1F12                     	;# 
  2225  1F13                     	;# 
  2226  1F14                     	;# 
  2227  1F15                     	;# 
  2228  1F16                     	;# 
  2229  1F17                     	;# 
  2230  1F18                     	;# 
  2231  1F19                     	;# 
  2232  1F1A                     	;# 
  2233  1F1B                     	;# 
  2234  1F1C                     	;# 
  2235  1F1D                     	;# 
  2236  1F1E                     	;# 
  2237  1F1F                     	;# 
  2238  1F20                     	;# 
  2239  1F21                     	;# 
  2240  1F22                     	;# 
  2241  1F23                     	;# 
  2242  1F24                     	;# 
  2243  1F25                     	;# 
  2244  1F26                     	;# 
  2245  1F27                     	;# 
  2246  1F38                     	;# 
  2247  1F39                     	;# 
  2248  1F3A                     	;# 
  2249  1F3B                     	;# 
  2250  1F3C                     	;# 
  2251  1F3D                     	;# 
  2252  1F3E                     	;# 
  2253  1F3F                     	;# 
  2254  1F43                     	;# 
  2255  1F44                     	;# 
  2256  1F45                     	;# 
  2257  1F46                     	;# 
  2258  1F47                     	;# 
  2259  1F48                     	;# 
  2260  1F49                     	;# 
  2261  1F4A                     	;# 
  2262  1F4E                     	;# 
  2263  1F4F                     	;# 
  2264  1F50                     	;# 
  2265  1F51                     	;# 
  2266  1F52                     	;# 
  2267  1F53                     	;# 
  2268  1F54                     	;# 
  2269  1F55                     	;# 
  2270  1F65                     	;# 
  2271  1F68                     	;# 
  2272  1F69                     	;# 
  2273  1F6A                     	;# 
  2274  1F6B                     	;# 
  2275  1FE4                     	;# 
  2276  1FE5                     	;# 
  2277  1FE6                     	;# 
  2278  1FE7                     	;# 
  2279  1FE8                     	;# 
  2280  1FE8                     	;# 
  2281  1FE9                     	;# 
  2282  1FEA                     	;# 
  2283  1FEB                     	;# 
  2284  1FED                     	;# 
  2285  1FEE                     	;# 
  2286  1FEF                     	;# 
  2287  0000                     	;# 
  2288  0001                     	;# 
  2289  0002                     	;# 
  2290  0003                     	;# 
  2291  0004                     	;# 
  2292  0005                     	;# 
  2293  0006                     	;# 
  2294  0007                     	;# 
  2295  0008                     	;# 
  2296  0009                     	;# 
  2297  000A                     	;# 
  2298  000B                     	;# 
  2299  000C                     	;# 
  2300  000D                     	;# 
  2301  000E                     	;# 
  2302  0010                     	;# 
  2303  0012                     	;# 
  2304  0013                     	;# 
  2305  0014                     	;# 
  2306  0016                     	;# 
  2307  0018                     	;# 
  2308  0019                     	;# 
  2309  001A                     	;# 
  2310  009B                     	;# 
  2311  009B                     	;# 
  2312  009C                     	;# 
  2313  009D                     	;# 
  2314  009E                     	;# 
  2315  009F                     	;# 
  2316  0119                     	;# 
  2317  0119                     	;# 
  2318  0119                     	;# 
  2319  011A                     	;# 
  2320  011A                     	;# 
  2321  011A                     	;# 
  2322  011B                     	;# 
  2323  011B                     	;# 
  2324  011B                     	;# 
  2325  011B                     	;# 
  2326  011B                     	;# 
  2327  011C                     	;# 
  2328  011C                     	;# 
  2329  011C                     	;# 
  2330  011D                     	;# 
  2331  011D                     	;# 
  2332  011D                     	;# 
  2333  011E                     	;# 
  2334  011E                     	;# 
  2335  011E                     	;# 
  2336  011F                     	;# 
  2337  011F                     	;# 
  2338  011F                     	;# 
  2339  011F                     	;# 
  2340  011F                     	;# 
  2341  018C                     	;# 
  2342  018D                     	;# 
  2343  018E                     	;# 
  2344  018F                     	;# 
  2345  0190                     	;# 
  2346  0191                     	;# 
  2347  0192                     	;# 
  2348  0196                     	;# 
  2349  0197                     	;# 
  2350  0198                     	;# 
  2351  0199                     	;# 
  2352  019A                     	;# 
  2353  019B                     	;# 
  2354  019C                     	;# 
  2355  020C                     	;# 
  2356  020C                     	;# 
  2357  020D                     	;# 
  2358  020E                     	;# 
  2359  020F                     	;# 
  2360  020F                     	;# 
  2361  0210                     	;# 
  2362  0210                     	;# 
  2363  0211                     	;# 
  2364  0211                     	;# 
  2365  028C                     	;# 
  2366  028C                     	;# 
  2367  028D                     	;# 
  2368  028D                     	;# 
  2369  028E                     	;# 
  2370  028F                     	;# 
  2371  0290                     	;# 
  2372  0291                     	;# 
  2373  030C                     	;# 
  2374  030C                     	;# 
  2375  030D                     	;# 
  2376  030E                     	;# 
  2377  030F                     	;# 
  2378  0310                     	;# 
  2379  0310                     	;# 
  2380  0311                     	;# 
  2381  0312                     	;# 
  2382  0313                     	;# 
  2383  0314                     	;# 
  2384  0314                     	;# 
  2385  0315                     	;# 
  2386  0316                     	;# 
  2387  0318                     	;# 
  2388  0318                     	;# 
  2389  0319                     	;# 
  2390  031A                     	;# 
  2391  031C                     	;# 
  2392  031C                     	;# 
  2393  031D                     	;# 
  2394  031E                     	;# 
  2395  038C                     	;# 
  2396  038C                     	;# 
  2397  038D                     	;# 
  2398  038E                     	;# 
  2399  058C                     	;# 
  2400  058C                     	;# 
  2401  058D                     	;# 
  2402  058E                     	;# 
  2403  058F                     	;# 
  2404  058F                     	;# 
  2405  0590                     	;# 
  2406  0591                     	;# 
  2407  0592                     	;# 
  2408  0593                     	;# 
  2409  059C                     	;# 
  2410  059C                     	;# 
  2411  059D                     	;# 
  2412  059D                     	;# 
  2413  059E                     	;# 
  2414  059F                     	;# 
  2415  060C                     	;# 
  2416  060D                     	;# 
  2417  060E                     	;# 
  2418  060F                     	;# 
  2419  0610                     	;# 
  2420  0611                     	;# 
  2421  0612                     	;# 
  2422  0613                     	;# 
  2423  0614                     	;# 
  2424  070C                     	;# 
  2425  070D                     	;# 
  2426  070E                     	;# 
  2427  070F                     	;# 
  2428  0710                     	;# 
  2429  0711                     	;# 
  2430  0712                     	;# 
  2431  0713                     	;# 
  2432  0716                     	;# 
  2433  0717                     	;# 
  2434  0718                     	;# 
  2435  0719                     	;# 
  2436  071A                     	;# 
  2437  071B                     	;# 
  2438  071C                     	;# 
  2439  071D                     	;# 
  2440  0796                     	;# 
  2441  0797                     	;# 
  2442  0798                     	;# 
  2443  0799                     	;# 
  2444  079A                     	;# 
  2445  079B                     	;# 
  2446  080C                     	;# 
  2447  080D                     	;# 
  2448  080E                     	;# 
  2449  080F                     	;# 
  2450  0810                     	;# 
  2451  0811                     	;# 
  2452  0812                     	;# 
  2453  0813                     	;# 
  2454  0814                     	;# 
  2455  081A                     	;# 
  2456  081A                     	;# 
  2457  081B                     	;# 
  2458  081C                     	;# 
  2459  081C                     	;# 
  2460  081D                     	;# 
  2461  081E                     	;# 
  2462  081F                     	;# 
  2463  088C                     	;# 
  2464  088D                     	;# 
  2465  088E                     	;# 
  2466  088F                     	;# 
  2467  0890                     	;# 
  2468  0891                     	;# 
  2469  0892                     	;# 
  2470  0893                     	;# 
  2471  0895                     	;# 
  2472  0896                     	;# 
  2473  090C                     	;# 
  2474  090E                     	;# 
  2475  090F                     	;# 
  2476  091F                     	;# 
  2477  098F                     	;# 
  2478  098F                     	;# 
  2479  0990                     	;# 
  2480  0991                     	;# 
  2481  0992                     	;# 
  2482  0993                     	;# 
  2483  0994                     	;# 
  2484  0995                     	;# 
  2485  0996                     	;# 
  2486  0997                     	;# 
  2487  0A19                     	;# 
  2488  0A19                     	;# 
  2489  0A1A                     	;# 
  2490  0A1A                     	;# 
  2491  0A1B                     	;# 
  2492  0A1B                     	;# 
  2493  0A1B                     	;# 
  2494  0A1C                     	;# 
  2495  0A1C                     	;# 
  2496  0A1D                     	;# 
  2497  0A1D                     	;# 
  2498  0A1E                     	;# 
  2499  0A1E                     	;# 
  2500  0A1F                     	;# 
  2501  0A1F                     	;# 
  2502  0A1F                     	;# 
  2503  1E0F                     	;# 
  2504  1E10                     	;# 
  2505  1E11                     	;# 
  2506  1E12                     	;# 
  2507  1E13                     	;# 
  2508  1E14                     	;# 
  2509  1E15                     	;# 
  2510  1E16                     	;# 
  2511  1E17                     	;# 
  2512  1E18                     	;# 
  2513  1E19                     	;# 
  2514  1E1A                     	;# 
  2515  1E1B                     	;# 
  2516  1E1C                     	;# 
  2517  1E1D                     	;# 
  2518  1E1E                     	;# 
  2519  1E1F                     	;# 
  2520  1E20                     	;# 
  2521  1E21                     	;# 
  2522  1E22                     	;# 
  2523  1E23                     	;# 
  2524  1E24                     	;# 
  2525  1E25                     	;# 
  2526  1E26                     	;# 
  2527  1E27                     	;# 
  2528  1E28                     	;# 
  2529  1E29                     	;# 
  2530  1E2A                     	;# 
  2531  1E2B                     	;# 
  2532  1E2C                     	;# 
  2533  1E2D                     	;# 
  2534  1E2E                     	;# 
  2535  1E2F                     	;# 
  2536  1E30                     	;# 
  2537  1E31                     	;# 
  2538  1E32                     	;# 
  2539  1E33                     	;# 
  2540  1E34                     	;# 
  2541  1E35                     	;# 
  2542  1E36                     	;# 
  2543  1E37                     	;# 
  2544  1E8F                     	;# 
  2545  1E90                     	;# 
  2546  1E91                     	;# 
  2547  1E92                     	;# 
  2548  1E93                     	;# 
  2549  1E9C                     	;# 
  2550  1EA1                     	;# 
  2551  1EA2                     	;# 
  2552  1EB1                     	;# 
  2553  1EBB                     	;# 
  2554  1EBC                     	;# 
  2555  1EBD                     	;# 
  2556  1EBE                     	;# 
  2557  1EC3                     	;# 
  2558  1EC5                     	;# 
  2559  1EC6                     	;# 
  2560  1EC7                     	;# 
  2561  1EC8                     	;# 
  2562  1EC9                     	;# 
  2563  1ECA                     	;# 
  2564  1ECB                     	;# 
  2565  1ECC                     	;# 
  2566  1ECD                     	;# 
  2567  1ECE                     	;# 
  2568  1F10                     	;# 
  2569  1F11                     	;# 
  2570  1F12                     	;# 
  2571  1F13                     	;# 
  2572  1F14                     	;# 
  2573  1F15                     	;# 
  2574  1F16                     	;# 
  2575  1F17                     	;# 
  2576  1F18                     	;# 
  2577  1F19                     	;# 
  2578  1F1A                     	;# 
  2579  1F1B                     	;# 
  2580  1F1C                     	;# 
  2581  1F1D                     	;# 
  2582  1F1E                     	;# 
  2583  1F1F                     	;# 
  2584  1F20                     	;# 
  2585  1F21                     	;# 
  2586  1F22                     	;# 
  2587  1F23                     	;# 
  2588  1F24                     	;# 
  2589  1F25                     	;# 
  2590  1F26                     	;# 
  2591  1F27                     	;# 
  2592  1F38                     	;# 
  2593  1F39                     	;# 
  2594  1F3A                     	;# 
  2595  1F3B                     	;# 
  2596  1F3C                     	;# 
  2597  1F3D                     	;# 
  2598  1F3E                     	;# 
  2599  1F3F                     	;# 
  2600  1F43                     	;# 
  2601  1F44                     	;# 
  2602  1F45                     	;# 
  2603  1F46                     	;# 
  2604  1F47                     	;# 
  2605  1F48                     	;# 
  2606  1F49                     	;# 
  2607  1F4A                     	;# 
  2608  1F4E                     	;# 
  2609  1F4F                     	;# 
  2610  1F50                     	;# 
  2611  1F51                     	;# 
  2612  1F52                     	;# 
  2613  1F53                     	;# 
  2614  1F54                     	;# 
  2615  1F55                     	;# 
  2616  1F65                     	;# 
  2617  1F68                     	;# 
  2618  1F69                     	;# 
  2619  1F6A                     	;# 
  2620  1F6B                     	;# 
  2621  1FE4                     	;# 
  2622  1FE5                     	;# 
  2623  1FE6                     	;# 
  2624  1FE7                     	;# 
  2625  1FE8                     	;# 
  2626  1FE8                     	;# 
  2627  1FE9                     	;# 
  2628  1FEA                     	;# 
  2629  1FEB                     	;# 
  2630  1FED                     	;# 
  2631  1FEE                     	;# 
  2632  1FEF                     	;# 
  2633  0000                     	;# 
  2634  0001                     	;# 
  2635  0002                     	;# 
  2636  0003                     	;# 
  2637  0004                     	;# 
  2638  0005                     	;# 
  2639  0006                     	;# 
  2640  0007                     	;# 
  2641  0008                     	;# 
  2642  0009                     	;# 
  2643  000A                     	;# 
  2644  000B                     	;# 
  2645  000C                     	;# 
  2646  000D                     	;# 
  2647  000E                     	;# 
  2648  0010                     	;# 
  2649  0012                     	;# 
  2650  0013                     	;# 
  2651  0014                     	;# 
  2652  0016                     	;# 
  2653  0018                     	;# 
  2654  0019                     	;# 
  2655  001A                     	;# 
  2656  009B                     	;# 
  2657  009B                     	;# 
  2658  009C                     	;# 
  2659  009D                     	;# 
  2660  009E                     	;# 
  2661  009F                     	;# 
  2662  0119                     	;# 
  2663  0119                     	;# 
  2664  0119                     	;# 
  2665  011A                     	;# 
  2666  011A                     	;# 
  2667  011A                     	;# 
  2668  011B                     	;# 
  2669  011B                     	;# 
  2670  011B                     	;# 
  2671  011B                     	;# 
  2672  011B                     	;# 
  2673  011C                     	;# 
  2674  011C                     	;# 
  2675  011C                     	;# 
  2676  011D                     	;# 
  2677  011D                     	;# 
  2678  011D                     	;# 
  2679  011E                     	;# 
  2680  011E                     	;# 
  2681  011E                     	;# 
  2682  011F                     	;# 
  2683  011F                     	;# 
  2684  011F                     	;# 
  2685  011F                     	;# 
  2686  011F                     	;# 
  2687  018C                     	;# 
  2688  018D                     	;# 
  2689  018E                     	;# 
  2690  018F                     	;# 
  2691  0190                     	;# 
  2692  0191                     	;# 
  2693  0192                     	;# 
  2694  0196                     	;# 
  2695  0197                     	;# 
  2696  0198                     	;# 
  2697  0199                     	;# 
  2698  019A                     	;# 
  2699  019B                     	;# 
  2700  019C                     	;# 
  2701  020C                     	;# 
  2702  020C                     	;# 
  2703  020D                     	;# 
  2704  020E                     	;# 
  2705  020F                     	;# 
  2706  020F                     	;# 
  2707  0210                     	;# 
  2708  0210                     	;# 
  2709  0211                     	;# 
  2710  0211                     	;# 
  2711  028C                     	;# 
  2712  028C                     	;# 
  2713  028D                     	;# 
  2714  028D                     	;# 
  2715  028E                     	;# 
  2716  028F                     	;# 
  2717  0290                     	;# 
  2718  0291                     	;# 
  2719  030C                     	;# 
  2720  030C                     	;# 
  2721  030D                     	;# 
  2722  030E                     	;# 
  2723  030F                     	;# 
  2724  0310                     	;# 
  2725  0310                     	;# 
  2726  0311                     	;# 
  2727  0312                     	;# 
  2728  0313                     	;# 
  2729  0314                     	;# 
  2730  0314                     	;# 
  2731  0315                     	;# 
  2732  0316                     	;# 
  2733  0318                     	;# 
  2734  0318                     	;# 
  2735  0319                     	;# 
  2736  031A                     	;# 
  2737  031C                     	;# 
  2738  031C                     	;# 
  2739  031D                     	;# 
  2740  031E                     	;# 
  2741  038C                     	;# 
  2742  038C                     	;# 
  2743  038D                     	;# 
  2744  038E                     	;# 
  2745  058C                     	;# 
  2746  058C                     	;# 
  2747  058D                     	;# 
  2748  058E                     	;# 
  2749  058F                     	;# 
  2750  058F                     	;# 
  2751  0590                     	;# 
  2752  0591                     	;# 
  2753  0592                     	;# 
  2754  0593                     	;# 
  2755  059C                     	;# 
  2756  059C                     	;# 
  2757  059D                     	;# 
  2758  059D                     	;# 
  2759  059E                     	;# 
  2760  059F                     	;# 
  2761  060C                     	;# 
  2762  060D                     	;# 
  2763  060E                     	;# 
  2764  060F                     	;# 
  2765  0610                     	;# 
  2766  0611                     	;# 
  2767  0612                     	;# 
  2768  0613                     	;# 
  2769  0614                     	;# 
  2770  070C                     	;# 
  2771  070D                     	;# 
  2772  070E                     	;# 
  2773  070F                     	;# 
  2774  0710                     	;# 
  2775  0711                     	;# 
  2776  0712                     	;# 
  2777  0713                     	;# 
  2778  0716                     	;# 
  2779  0717                     	;# 
  2780  0718                     	;# 
  2781  0719                     	;# 
  2782  071A                     	;# 
  2783  071B                     	;# 
  2784  071C                     	;# 
  2785  071D                     	;# 
  2786  0796                     	;# 
  2787  0797                     	;# 
  2788  0798                     	;# 
  2789  0799                     	;# 
  2790  079A                     	;# 
  2791  079B                     	;# 
  2792  080C                     	;# 
  2793  080D                     	;# 
  2794  080E                     	;# 
  2795  080F                     	;# 
  2796  0810                     	;# 
  2797  0811                     	;# 
  2798  0812                     	;# 
  2799  0813                     	;# 
  2800  0814                     	;# 
  2801  081A                     	;# 
  2802  081A                     	;# 
  2803  081B                     	;# 
  2804  081C                     	;# 
  2805  081C                     	;# 
  2806  081D                     	;# 
  2807  081E                     	;# 
  2808  081F                     	;# 
  2809  088C                     	;# 
  2810  088D                     	;# 
  2811  088E                     	;# 
  2812  088F                     	;# 
  2813  0890                     	;# 
  2814  0891                     	;# 
  2815  0892                     	;# 
  2816  0893                     	;# 
  2817  0895                     	;# 
  2818  0896                     	;# 
  2819  090C                     	;# 
  2820  090E                     	;# 
  2821  090F                     	;# 
  2822  091F                     	;# 
  2823  098F                     	;# 
  2824  098F                     	;# 
  2825  0990                     	;# 
  2826  0991                     	;# 
  2827  0992                     	;# 
  2828  0993                     	;# 
  2829  0994                     	;# 
  2830  0995                     	;# 
  2831  0996                     	;# 
  2832  0997                     	;# 
  2833  0A19                     	;# 
  2834  0A19                     	;# 
  2835  0A1A                     	;# 
  2836  0A1A                     	;# 
  2837  0A1B                     	;# 
  2838  0A1B                     	;# 
  2839  0A1B                     	;# 
  2840  0A1C                     	;# 
  2841  0A1C                     	;# 
  2842  0A1D                     	;# 
  2843  0A1D                     	;# 
  2844  0A1E                     	;# 
  2845  0A1E                     	;# 
  2846  0A1F                     	;# 
  2847  0A1F                     	;# 
  2848  0A1F                     	;# 
  2849  1E0F                     	;# 
  2850  1E10                     	;# 
  2851  1E11                     	;# 
  2852  1E12                     	;# 
  2853  1E13                     	;# 
  2854  1E14                     	;# 
  2855  1E15                     	;# 
  2856  1E16                     	;# 
  2857  1E17                     	;# 
  2858  1E18                     	;# 
  2859  1E19                     	;# 
  2860  1E1A                     	;# 
  2861  1E1B                     	;# 
  2862  1E1C                     	;# 
  2863  1E1D                     	;# 
  2864  1E1E                     	;# 
  2865  1E1F                     	;# 
  2866  1E20                     	;# 
  2867  1E21                     	;# 
  2868  1E22                     	;# 
  2869  1E23                     	;# 
  2870  1E24                     	;# 
  2871  1E25                     	;# 
  2872  1E26                     	;# 
  2873  1E27                     	;# 
  2874  1E28                     	;# 
  2875  1E29                     	;# 
  2876  1E2A                     	;# 
  2877  1E2B                     	;# 
  2878  1E2C                     	;# 
  2879  1E2D                     	;# 
  2880  1E2E                     	;# 
  2881  1E2F                     	;# 
  2882  1E30                     	;# 
  2883  1E31                     	;# 
  2884  1E32                     	;# 
  2885  1E33                     	;# 
  2886  1E34                     	;# 
  2887  1E35                     	;# 
  2888  1E36                     	;# 
  2889  1E37                     	;# 
  2890  1E8F                     	;# 
  2891  1E90                     	;# 
  2892  1E91                     	;# 
  2893  1E92                     	;# 
  2894  1E93                     	;# 
  2895  1E9C                     	;# 
  2896  1EA1                     	;# 
  2897  1EA2                     	;# 
  2898  1EB1                     	;# 
  2899  1EBB                     	;# 
  2900  1EBC                     	;# 
  2901  1EBD                     	;# 
  2902  1EBE                     	;# 
  2903  1EC3                     	;# 
  2904  1EC5                     	;# 
  2905  1EC6                     	;# 
  2906  1EC7                     	;# 
  2907  1EC8                     	;# 
  2908  1EC9                     	;# 
  2909  1ECA                     	;# 
  2910  1ECB                     	;# 
  2911  1ECC                     	;# 
  2912  1ECD                     	;# 
  2913  1ECE                     	;# 
  2914  1F10                     	;# 
  2915  1F11                     	;# 
  2916  1F12                     	;# 
  2917  1F13                     	;# 
  2918  1F14                     	;# 
  2919  1F15                     	;# 
  2920  1F16                     	;# 
  2921  1F17                     	;# 
  2922  1F18                     	;# 
  2923  1F19                     	;# 
  2924  1F1A                     	;# 
  2925  1F1B                     	;# 
  2926  1F1C                     	;# 
  2927  1F1D                     	;# 
  2928  1F1E                     	;# 
  2929  1F1F                     	;# 
  2930  1F20                     	;# 
  2931  1F21                     	;# 
  2932  1F22                     	;# 
  2933  1F23                     	;# 
  2934  1F24                     	;# 
  2935  1F25                     	;# 
  2936  1F26                     	;# 
  2937  1F27                     	;# 
  2938  1F38                     	;# 
  2939  1F39                     	;# 
  2940  1F3A                     	;# 
  2941  1F3B                     	;# 
  2942  1F3C                     	;# 
  2943  1F3D                     	;# 
  2944  1F3E                     	;# 
  2945  1F3F                     	;# 
  2946  1F43                     	;# 
  2947  1F44                     	;# 
  2948  1F45                     	;# 
  2949  1F46                     	;# 
  2950  1F47                     	;# 
  2951  1F48                     	;# 
  2952  1F49                     	;# 
  2953  1F4A                     	;# 
  2954  1F4E                     	;# 
  2955  1F4F                     	;# 
  2956  1F50                     	;# 
  2957  1F51                     	;# 
  2958  1F52                     	;# 
  2959  1F53                     	;# 
  2960  1F54                     	;# 
  2961  1F55                     	;# 
  2962  1F65                     	;# 
  2963  1F68                     	;# 
  2964  1F69                     	;# 
  2965  1F6A                     	;# 
  2966  1F6B                     	;# 
  2967  1FE4                     	;# 
  2968  1FE5                     	;# 
  2969  1FE6                     	;# 
  2970  1FE7                     	;# 
  2971  1FE8                     	;# 
  2972  1FE8                     	;# 
  2973  1FE9                     	;# 
  2974  1FEA                     	;# 
  2975  1FEB                     	;# 
  2976  1FED                     	;# 
  2977  1FEE                     	;# 
  2978  1FEF                     	;# 
  2979  0000                     	;# 
  2980  0001                     	;# 
  2981  0002                     	;# 
  2982  0003                     	;# 
  2983  0004                     	;# 
  2984  0005                     	;# 
  2985  0006                     	;# 
  2986  0007                     	;# 
  2987  0008                     	;# 
  2988  0009                     	;# 
  2989  000A                     	;# 
  2990  000B                     	;# 
  2991  000C                     	;# 
  2992  000D                     	;# 
  2993  000E                     	;# 
  2994  0010                     	;# 
  2995  0012                     	;# 
  2996  0013                     	;# 
  2997  0014                     	;# 
  2998  0016                     	;# 
  2999  0018                     	;# 
  3000  0019                     	;# 
  3001  001A                     	;# 
  3002  009B                     	;# 
  3003  009B                     	;# 
  3004  009C                     	;# 
  3005  009D                     	;# 
  3006  009E                     	;# 
  3007  009F                     	;# 
  3008  0119                     	;# 
  3009  0119                     	;# 
  3010  0119                     	;# 
  3011  011A                     	;# 
  3012  011A                     	;# 
  3013  011A                     	;# 
  3014  011B                     	;# 
  3015  011B                     	;# 
  3016  011B                     	;# 
  3017  011B                     	;# 
  3018  011B                     	;# 
  3019  011C                     	;# 
  3020  011C                     	;# 
  3021  011C                     	;# 
  3022  011D                     	;# 
  3023  011D                     	;# 
  3024  011D                     	;# 
  3025  011E                     	;# 
  3026  011E                     	;# 
  3027  011E                     	;# 
  3028  011F                     	;# 
  3029  011F                     	;# 
  3030  011F                     	;# 
  3031  011F                     	;# 
  3032  011F                     	;# 
  3033  018C                     	;# 
  3034  018D                     	;# 
  3035  018E                     	;# 
  3036  018F                     	;# 
  3037  0190                     	;# 
  3038  0191                     	;# 
  3039  0192                     	;# 
  3040  0196                     	;# 
  3041  0197                     	;# 
  3042  0198                     	;# 
  3043  0199                     	;# 
  3044  019A                     	;# 
  3045  019B                     	;# 
  3046  019C                     	;# 
  3047  020C                     	;# 
  3048  020C                     	;# 
  3049  020D                     	;# 
  3050  020E                     	;# 
  3051  020F                     	;# 
  3052  020F                     	;# 
  3053  0210                     	;# 
  3054  0210                     	;# 
  3055  0211                     	;# 
  3056  0211                     	;# 
  3057  028C                     	;# 
  3058  028C                     	;# 
  3059  028D                     	;# 
  3060  028D                     	;# 
  3061  028E                     	;# 
  3062  028F                     	;# 
  3063  0290                     	;# 
  3064  0291                     	;# 
  3065  030C                     	;# 
  3066  030C                     	;# 
  3067  030D                     	;# 
  3068  030E                     	;# 
  3069  030F                     	;# 
  3070  0310                     	;# 
  3071  0310                     	;# 
  3072  0311                     	;# 
  3073  0312                     	;# 
  3074  0313                     	;# 
  3075  0314                     	;# 
  3076  0314                     	;# 
  3077  0315                     	;# 
  3078  0316                     	;# 
  3079  0318                     	;# 
  3080  0318                     	;# 
  3081  0319                     	;# 
  3082  031A                     	;# 
  3083  031C                     	;# 
  3084  031C                     	;# 
  3085  031D                     	;# 
  3086  031E                     	;# 
  3087  038C                     	;# 
  3088  038C                     	;# 
  3089  038D                     	;# 
  3090  038E                     	;# 
  3091  058C                     	;# 
  3092  058C                     	;# 
  3093  058D                     	;# 
  3094  058E                     	;# 
  3095  058F                     	;# 
  3096  058F                     	;# 
  3097  0590                     	;# 
  3098  0591                     	;# 
  3099  0592                     	;# 
  3100  0593                     	;# 
  3101  059C                     	;# 
  3102  059C                     	;# 
  3103  059D                     	;# 
  3104  059D                     	;# 
  3105  059E                     	;# 
  3106  059F                     	;# 
  3107  060C                     	;# 
  3108  060D                     	;# 
  3109  060E                     	;# 
  3110  060F                     	;# 
  3111  0610                     	;# 
  3112  0611                     	;# 
  3113  0612                     	;# 
  3114  0613                     	;# 
  3115  0614                     	;# 
  3116  070C                     	;# 
  3117  070D                     	;# 
  3118  070E                     	;# 
  3119  070F                     	;# 
  3120  0710                     	;# 
  3121  0711                     	;# 
  3122  0712                     	;# 
  3123  0713                     	;# 
  3124  0716                     	;# 
  3125  0717                     	;# 
  3126  0718                     	;# 
  3127  0719                     	;# 
  3128  071A                     	;# 
  3129  071B                     	;# 
  3130  071C                     	;# 
  3131  071D                     	;# 
  3132  0796                     	;# 
  3133  0797                     	;# 
  3134  0798                     	;# 
  3135  0799                     	;# 
  3136  079A                     	;# 
  3137  079B                     	;# 
  3138  080C                     	;# 
  3139  080D                     	;# 
  3140  080E                     	;# 
  3141  080F                     	;# 
  3142  0810                     	;# 
  3143  0811                     	;# 
  3144  0812                     	;# 
  3145  0813                     	;# 
  3146  0814                     	;# 
  3147  081A                     	;# 
  3148  081A                     	;# 
  3149  081B                     	;# 
  3150  081C                     	;# 
  3151  081C                     	;# 
  3152  081D                     	;# 
  3153  081E                     	;# 
  3154  081F                     	;# 
  3155  088C                     	;# 
  3156  088D                     	;# 
  3157  088E                     	;# 
  3158  088F                     	;# 
  3159  0890                     	;# 
  3160  0891                     	;# 
  3161  0892                     	;# 
  3162  0893                     	;# 
  3163  0895                     	;# 
  3164  0896                     	;# 
  3165  090C                     	;# 
  3166  090E                     	;# 
  3167  090F                     	;# 
  3168  091F                     	;# 
  3169  098F                     	;# 
  3170  098F                     	;# 
  3171  0990                     	;# 
  3172  0991                     	;# 
  3173  0992                     	;# 
  3174  0993                     	;# 
  3175  0994                     	;# 
  3176  0995                     	;# 
  3177  0996                     	;# 
  3178  0997                     	;# 
  3179  0A19                     	;# 
  3180  0A19                     	;# 
  3181  0A1A                     	;# 
  3182  0A1A                     	;# 
  3183  0A1B                     	;# 
  3184  0A1B                     	;# 
  3185  0A1B                     	;# 
  3186  0A1C                     	;# 
  3187  0A1C                     	;# 
  3188  0A1D                     	;# 
  3189  0A1D                     	;# 
  3190  0A1E                     	;# 
  3191  0A1E                     	;# 
  3192  0A1F                     	;# 
  3193  0A1F                     	;# 
  3194  0A1F                     	;# 
  3195  1E0F                     	;# 
  3196  1E10                     	;# 
  3197  1E11                     	;# 
  3198  1E12                     	;# 
  3199  1E13                     	;# 
  3200  1E14                     	;# 
  3201  1E15                     	;# 
  3202  1E16                     	;# 
  3203  1E17                     	;# 
  3204  1E18                     	;# 
  3205  1E19                     	;# 
  3206  1E1A                     	;# 
  3207  1E1B                     	;# 
  3208  1E1C                     	;# 
  3209  1E1D                     	;# 
  3210  1E1E                     	;# 
  3211  1E1F                     	;# 
  3212  1E20                     	;# 
  3213  1E21                     	;# 
  3214  1E22                     	;# 
  3215  1E23                     	;# 
  3216  1E24                     	;# 
  3217  1E25                     	;# 
  3218  1E26                     	;# 
  3219  1E27                     	;# 
  3220  1E28                     	;# 
  3221  1E29                     	;# 
  3222  1E2A                     	;# 
  3223  1E2B                     	;# 
  3224  1E2C                     	;# 
  3225  1E2D                     	;# 
  3226  1E2E                     	;# 
  3227  1E2F                     	;# 
  3228  1E30                     	;# 
  3229  1E31                     	;# 
  3230  1E32                     	;# 
  3231  1E33                     	;# 
  3232  1E34                     	;# 
  3233  1E35                     	;# 
  3234  1E36                     	;# 
  3235  1E37                     	;# 
  3236  1E8F                     	;# 
  3237  1E90                     	;# 
  3238  1E91                     	;# 
  3239  1E92                     	;# 
  3240  1E93                     	;# 
  3241  1E9C                     	;# 
  3242  1EA1                     	;# 
  3243  1EA2                     	;# 
  3244  1EB1                     	;# 
  3245  1EBB                     	;# 
  3246  1EBC                     	;# 
  3247  1EBD                     	;# 
  3248  1EBE                     	;# 
  3249  1EC3                     	;# 
  3250  1EC5                     	;# 
  3251  1EC6                     	;# 
  3252  1EC7                     	;# 
  3253  1EC8                     	;# 
  3254  1EC9                     	;# 
  3255  1ECA                     	;# 
  3256  1ECB                     	;# 
  3257  1ECC                     	;# 
  3258  1ECD                     	;# 
  3259  1ECE                     	;# 
  3260  1F10                     	;# 
  3261  1F11                     	;# 
  3262  1F12                     	;# 
  3263  1F13                     	;# 
  3264  1F14                     	;# 
  3265  1F15                     	;# 
  3266  1F16                     	;# 
  3267  1F17                     	;# 
  3268  1F18                     	;# 
  3269  1F19                     	;# 
  3270  1F1A                     	;# 
  3271  1F1B                     	;# 
  3272  1F1C                     	;# 
  3273  1F1D                     	;# 
  3274  1F1E                     	;# 
  3275  1F1F                     	;# 
  3276  1F20                     	;# 
  3277  1F21                     	;# 
  3278  1F22                     	;# 
  3279  1F23                     	;# 
  3280  1F24                     	;# 
  3281  1F25                     	;# 
  3282  1F26                     	;# 
  3283  1F27                     	;# 
  3284  1F38                     	;# 
  3285  1F39                     	;# 
  3286  1F3A                     	;# 
  3287  1F3B                     	;# 
  3288  1F3C                     	;# 
  3289  1F3D                     	;# 
  3290  1F3E                     	;# 
  3291  1F3F                     	;# 
  3292  1F43                     	;# 
  3293  1F44                     	;# 
  3294  1F45                     	;# 
  3295  1F46                     	;# 
  3296  1F47                     	;# 
  3297  1F48                     	;# 
  3298  1F49                     	;# 
  3299  1F4A                     	;# 
  3300  1F4E                     	;# 
  3301  1F4F                     	;# 
  3302  1F50                     	;# 
  3303  1F51                     	;# 
  3304  1F52                     	;# 
  3305  1F53                     	;# 
  3306  1F54                     	;# 
  3307  1F55                     	;# 
  3308  1F65                     	;# 
  3309  1F68                     	;# 
  3310  1F69                     	;# 
  3311  1F6A                     	;# 
  3312  1F6B                     	;# 
  3313  1FE4                     	;# 
  3314  1FE5                     	;# 
  3315  1FE6                     	;# 
  3316  1FE7                     	;# 
  3317  1FE8                     	;# 
  3318  1FE8                     	;# 
  3319  1FE9                     	;# 
  3320  1FEA                     	;# 
  3321  1FEB                     	;# 
  3322  1FED                     	;# 
  3323  1FEE                     	;# 
  3324  1FEF                     	;# 
  3325  0000                     	;# 
  3326  0001                     	;# 
  3327  0002                     	;# 
  3328  0003                     	;# 
  3329  0004                     	;# 
  3330  0005                     	;# 
  3331  0006                     	;# 
  3332  0007                     	;# 
  3333  0008                     	;# 
  3334  0009                     	;# 
  3335  000A                     	;# 
  3336  000B                     	;# 
  3337  000C                     	;# 
  3338  000D                     	;# 
  3339  000E                     	;# 
  3340  0010                     	;# 
  3341  0012                     	;# 
  3342  0013                     	;# 
  3343  0014                     	;# 
  3344  0016                     	;# 
  3345  0018                     	;# 
  3346  0019                     	;# 
  3347  001A                     	;# 
  3348  009B                     	;# 
  3349  009B                     	;# 
  3350  009C                     	;# 
  3351  009D                     	;# 
  3352  009E                     	;# 
  3353  009F                     	;# 
  3354  0119                     	;# 
  3355  0119                     	;# 
  3356  0119                     	;# 
  3357  011A                     	;# 
  3358  011A                     	;# 
  3359  011A                     	;# 
  3360  011B                     	;# 
  3361  011B                     	;# 
  3362  011B                     	;# 
  3363  011B                     	;# 
  3364  011B                     	;# 
  3365  011C                     	;# 
  3366  011C                     	;# 
  3367  011C                     	;# 
  3368  011D                     	;# 
  3369  011D                     	;# 
  3370  011D                     	;# 
  3371  011E                     	;# 
  3372  011E                     	;# 
  3373  011E                     	;# 
  3374  011F                     	;# 
  3375  011F                     	;# 
  3376  011F                     	;# 
  3377  011F                     	;# 
  3378  011F                     	;# 
  3379  018C                     	;# 
  3380  018D                     	;# 
  3381  018E                     	;# 
  3382  018F                     	;# 
  3383  0190                     	;# 
  3384  0191                     	;# 
  3385  0192                     	;# 
  3386  0196                     	;# 
  3387  0197                     	;# 
  3388  0198                     	;# 
  3389  0199                     	;# 
  3390  019A                     	;# 
  3391  019B                     	;# 
  3392  019C                     	;# 
  3393  020C                     	;# 
  3394  020C                     	;# 
  3395  020D                     	;# 
  3396  020E                     	;# 
  3397  020F                     	;# 
  3398  020F                     	;# 
  3399  0210                     	;# 
  3400  0210                     	;# 
  3401  0211                     	;# 
  3402  0211                     	;# 
  3403  028C                     	;# 
  3404  028C                     	;# 
  3405  028D                     	;# 
  3406  028D                     	;# 
  3407  028E                     	;# 
  3408  028F                     	;# 
  3409  0290                     	;# 
  3410  0291                     	;# 
  3411  030C                     	;# 
  3412  030C                     	;# 
  3413  030D                     	;# 
  3414  030E                     	;# 
  3415  030F                     	;# 
  3416  0310                     	;# 
  3417  0310                     	;# 
  3418  0311                     	;# 
  3419  0312                     	;# 
  3420  0313                     	;# 
  3421  0314                     	;# 
  3422  0314                     	;# 
  3423  0315                     	;# 
  3424  0316                     	;# 
  3425  0318                     	;# 
  3426  0318                     	;# 
  3427  0319                     	;# 
  3428  031A                     	;# 
  3429  031C                     	;# 
  3430  031C                     	;# 
  3431  031D                     	;# 
  3432  031E                     	;# 
  3433  038C                     	;# 
  3434  038C                     	;# 
  3435  038D                     	;# 
  3436  038E                     	;# 
  3437  058C                     	;# 
  3438  058C                     	;# 
  3439  058D                     	;# 
  3440  058E                     	;# 
  3441  058F                     	;# 
  3442  058F                     	;# 
  3443  0590                     	;# 
  3444  0591                     	;# 
  3445  0592                     	;# 
  3446  0593                     	;# 
  3447  059C                     	;# 
  3448  059C                     	;# 
  3449  059D                     	;# 
  3450  059D                     	;# 
  3451  059E                     	;# 
  3452  059F                     	;# 
  3453  060C                     	;# 
  3454  060D                     	;# 
  3455  060E                     	;# 
  3456  060F                     	;# 
  3457  0610                     	;# 
  3458  0611                     	;# 
  3459  0612                     	;# 
  3460  0613                     	;# 
  3461  0614                     	;# 
  3462  070C                     	;# 
  3463  070D                     	;# 
  3464  070E                     	;# 
  3465  070F                     	;# 
  3466  0710                     	;# 
  3467  0711                     	;# 
  3468  0712                     	;# 
  3469  0713                     	;# 
  3470  0716                     	;# 
  3471  0717                     	;# 
  3472  0718                     	;# 
  3473  0719                     	;# 
  3474  071A                     	;# 
  3475  071B                     	;# 
  3476  071C                     	;# 
  3477  071D                     	;# 
  3478  0796                     	;# 
  3479  0797                     	;# 
  3480  0798                     	;# 
  3481  0799                     	;# 
  3482  079A                     	;# 
  3483  079B                     	;# 
  3484  080C                     	;# 
  3485  080D                     	;# 
  3486  080E                     	;# 
  3487  080F                     	;# 
  3488  0810                     	;# 
  3489  0811                     	;# 
  3490  0812                     	;# 
  3491  0813                     	;# 
  3492  0814                     	;# 
  3493  081A                     	;# 
  3494  081A                     	;# 
  3495  081B                     	;# 
  3496  081C                     	;# 
  3497  081C                     	;# 
  3498  081D                     	;# 
  3499  081E                     	;# 
  3500  081F                     	;# 
  3501  088C                     	;# 
  3502  088D                     	;# 
  3503  088E                     	;# 
  3504  088F                     	;# 
  3505  0890                     	;# 
  3506  0891                     	;# 
  3507  0892                     	;# 
  3508  0893                     	;# 
  3509  0895                     	;# 
  3510  0896                     	;# 
  3511  090C                     	;# 
  3512  090E                     	;# 
  3513  090F                     	;# 
  3514  091F                     	;# 
  3515  098F                     	;# 
  3516  098F                     	;# 
  3517  0990                     	;# 
  3518  0991                     	;# 
  3519  0992                     	;# 
  3520  0993                     	;# 
  3521  0994                     	;# 
  3522  0995                     	;# 
  3523  0996                     	;# 
  3524  0997                     	;# 
  3525  0A19                     	;# 
  3526  0A19                     	;# 
  3527  0A1A                     	;# 
  3528  0A1A                     	;# 
  3529  0A1B                     	;# 
  3530  0A1B                     	;# 
  3531  0A1B                     	;# 
  3532  0A1C                     	;# 
  3533  0A1C                     	;# 
  3534  0A1D                     	;# 
  3535  0A1D                     	;# 
  3536  0A1E                     	;# 
  3537  0A1E                     	;# 
  3538  0A1F                     	;# 
  3539  0A1F                     	;# 
  3540  0A1F                     	;# 
  3541  1E0F                     	;# 
  3542  1E10                     	;# 
  3543  1E11                     	;# 
  3544  1E12                     	;# 
  3545  1E13                     	;# 
  3546  1E14                     	;# 
  3547  1E15                     	;# 
  3548  1E16                     	;# 
  3549  1E17                     	;# 
  3550  1E18                     	;# 
  3551  1E19                     	;# 
  3552  1E1A                     	;# 
  3553  1E1B                     	;# 
  3554  1E1C                     	;# 
  3555  1E1D                     	;# 
  3556  1E1E                     	;# 
  3557  1E1F                     	;# 
  3558  1E20                     	;# 
  3559  1E21                     	;# 
  3560  1E22                     	;# 
  3561  1E23                     	;# 
  3562  1E24                     	;# 
  3563  1E25                     	;# 
  3564  1E26                     	;# 
  3565  1E27                     	;# 
  3566  1E28                     	;# 
  3567  1E29                     	;# 
  3568  1E2A                     	;# 
  3569  1E2B                     	;# 
  3570  1E2C                     	;# 
  3571  1E2D                     	;# 
  3572  1E2E                     	;# 
  3573  1E2F                     	;# 
  3574  1E30                     	;# 
  3575  1E31                     	;# 
  3576  1E32                     	;# 
  3577  1E33                     	;# 
  3578  1E34                     	;# 
  3579  1E35                     	;# 
  3580  1E36                     	;# 
  3581  1E37                     	;# 
  3582  1E8F                     	;# 
  3583  1E90                     	;# 
  3584  1E91                     	;# 
  3585  1E92                     	;# 
  3586  1E93                     	;# 
  3587  1E9C                     	;# 
  3588  1EA1                     	;# 
  3589  1EA2                     	;# 
  3590  1EB1                     	;# 
  3591  1EBB                     	;# 
  3592  1EBC                     	;# 
  3593  1EBD                     	;# 
  3594  1EBE                     	;# 
  3595  1EC3                     	;# 
  3596  1EC5                     	;# 
  3597  1EC6                     	;# 
  3598  1EC7                     	;# 
  3599  1EC8                     	;# 
  3600  1EC9                     	;# 
  3601  1ECA                     	;# 
  3602  1ECB                     	;# 
  3603  1ECC                     	;# 
  3604  1ECD                     	;# 
  3605  1ECE                     	;# 
  3606  1F10                     	;# 
  3607  1F11                     	;# 
  3608  1F12                     	;# 
  3609  1F13                     	;# 
  3610  1F14                     	;# 
  3611  1F15                     	;# 
  3612  1F16                     	;# 
  3613  1F17                     	;# 
  3614  1F18                     	;# 
  3615  1F19                     	;# 
  3616  1F1A                     	;# 
  3617  1F1B                     	;# 
  3618  1F1C                     	;# 
  3619  1F1D                     	;# 
  3620  1F1E                     	;# 
  3621  1F1F                     	;# 
  3622  1F20                     	;# 
  3623  1F21                     	;# 
  3624  1F22                     	;# 
  3625  1F23                     	;# 
  3626  1F24                     	;# 
  3627  1F25                     	;# 
  3628  1F26                     	;# 
  3629  1F27                     	;# 
  3630  1F38                     	;# 
  3631  1F39                     	;# 
  3632  1F3A                     	;# 
  3633  1F3B                     	;# 
  3634  1F3C                     	;# 
  3635  1F3D                     	;# 
  3636  1F3E                     	;# 
  3637  1F3F                     	;# 
  3638  1F43                     	;# 
  3639  1F44                     	;# 
  3640  1F45                     	;# 
  3641  1F46                     	;# 
  3642  1F47                     	;# 
  3643  1F48                     	;# 
  3644  1F49                     	;# 
  3645  1F4A                     	;# 
  3646  1F4E                     	;# 
  3647  1F4F                     	;# 
  3648  1F50                     	;# 
  3649  1F51                     	;# 
  3650  1F52                     	;# 
  3651  1F53                     	;# 
  3652  1F54                     	;# 
  3653  1F55                     	;# 
  3654  1F65                     	;# 
  3655  1F68                     	;# 
  3656  1F69                     	;# 
  3657  1F6A                     	;# 
  3658  1F6B                     	;# 
  3659  1FE4                     	;# 
  3660  1FE5                     	;# 
  3661  1FE6                     	;# 
  3662  1FE7                     	;# 
  3663  1FE8                     	;# 
  3664  1FE8                     	;# 
  3665  1FE9                     	;# 
  3666  1FEA                     	;# 
  3667  1FEB                     	;# 
  3668  1FED                     	;# 
  3669  1FEE                     	;# 
  3670  1FEF                     	;# 
  3671  0000                     	;# 
  3672  0001                     	;# 
  3673  0002                     	;# 
  3674  0003                     	;# 
  3675  0004                     	;# 
  3676  0005                     	;# 
  3677  0006                     	;# 
  3678  0007                     	;# 
  3679  0008                     	;# 
  3680  0009                     	;# 
  3681  000A                     	;# 
  3682  000B                     	;# 
  3683  000C                     	;# 
  3684  000D                     	;# 
  3685  000E                     	;# 
  3686  0010                     	;# 
  3687  0012                     	;# 
  3688  0013                     	;# 
  3689  0014                     	;# 
  3690  0016                     	;# 
  3691  0018                     	;# 
  3692  0019                     	;# 
  3693  001A                     	;# 
  3694  009B                     	;# 
  3695  009B                     	;# 
  3696  009C                     	;# 
  3697  009D                     	;# 
  3698  009E                     	;# 
  3699  009F                     	;# 
  3700  0119                     	;# 
  3701  0119                     	;# 
  3702  0119                     	;# 
  3703  011A                     	;# 
  3704  011A                     	;# 
  3705  011A                     	;# 
  3706  011B                     	;# 
  3707  011B                     	;# 
  3708  011B                     	;# 
  3709  011B                     	;# 
  3710  011B                     	;# 
  3711  011C                     	;# 
  3712  011C                     	;# 
  3713  011C                     	;# 
  3714  011D                     	;# 
  3715  011D                     	;# 
  3716  011D                     	;# 
  3717  011E                     	;# 
  3718  011E                     	;# 
  3719  011E                     	;# 
  3720  011F                     	;# 
  3721  011F                     	;# 
  3722  011F                     	;# 
  3723  011F                     	;# 
  3724  011F                     	;# 
  3725  018C                     	;# 
  3726  018D                     	;# 
  3727  018E                     	;# 
  3728  018F                     	;# 
  3729  0190                     	;# 
  3730  0191                     	;# 
  3731  0192                     	;# 
  3732  0196                     	;# 
  3733  0197                     	;# 
  3734  0198                     	;# 
  3735  0199                     	;# 
  3736  019A                     	;# 
  3737  019B                     	;# 
  3738  019C                     	;# 
  3739  020C                     	;# 
  3740  020C                     	;# 
  3741  020D                     	;# 
  3742  020E                     	;# 
  3743  020F                     	;# 
  3744  020F                     	;# 
  3745  0210                     	;# 
  3746  0210                     	;# 
  3747  0211                     	;# 
  3748  0211                     	;# 
  3749  028C                     	;# 
  3750  028C                     	;# 
  3751  028D                     	;# 
  3752  028D                     	;# 
  3753  028E                     	;# 
  3754  028F                     	;# 
  3755  0290                     	;# 
  3756  0291                     	;# 
  3757  030C                     	;# 
  3758  030C                     	;# 
  3759  030D                     	;# 
  3760  030E                     	;# 
  3761  030F                     	;# 
  3762  0310                     	;# 
  3763  0310                     	;# 
  3764  0311                     	;# 
  3765  0312                     	;# 
  3766  0313                     	;# 
  3767  0314                     	;# 
  3768  0314                     	;# 
  3769  0315                     	;# 
  3770  0316                     	;# 
  3771  0318                     	;# 
  3772  0318                     	;# 
  3773  0319                     	;# 
  3774  031A                     	;# 
  3775  031C                     	;# 
  3776  031C                     	;# 
  3777  031D                     	;# 
  3778  031E                     	;# 
  3779  038C                     	;# 
  3780  038C                     	;# 
  3781  038D                     	;# 
  3782  038E                     	;# 
  3783  058C                     	;# 
  3784  058C                     	;# 
  3785  058D                     	;# 
  3786  058E                     	;# 
  3787  058F                     	;# 
  3788  058F                     	;# 
  3789  0590                     	;# 
  3790  0591                     	;# 
  3791  0592                     	;# 
  3792  0593                     	;# 
  3793  059C                     	;# 
  3794  059C                     	;# 
  3795  059D                     	;# 
  3796  059D                     	;# 
  3797  059E                     	;# 
  3798  059F                     	;# 
  3799  060C                     	;# 
  3800  060D                     	;# 
  3801  060E                     	;# 
  3802  060F                     	;# 
  3803  0610                     	;# 
  3804  0611                     	;# 
  3805  0612                     	;# 
  3806  0613                     	;# 
  3807  0614                     	;# 
  3808  070C                     	;# 
  3809  070D                     	;# 
  3810  070E                     	;# 
  3811  070F                     	;# 
  3812  0710                     	;# 
  3813  0711                     	;# 
  3814  0712                     	;# 
  3815  0713                     	;# 
  3816  0716                     	;# 
  3817  0717                     	;# 
  3818  0718                     	;# 
  3819  0719                     	;# 
  3820  071A                     	;# 
  3821  071B                     	;# 
  3822  071C                     	;# 
  3823  071D                     	;# 
  3824  0796                     	;# 
  3825  0797                     	;# 
  3826  0798                     	;# 
  3827  0799                     	;# 
  3828  079A                     	;# 
  3829  079B                     	;# 
  3830  080C                     	;# 
  3831  080D                     	;# 
  3832  080E                     	;# 
  3833  080F                     	;# 
  3834  0810                     	;# 
  3835  0811                     	;# 
  3836  0812                     	;# 
  3837  0813                     	;# 
  3838  0814                     	;# 
  3839  081A                     	;# 
  3840  081A                     	;# 
  3841  081B                     	;# 
  3842  081C                     	;# 
  3843  081C                     	;# 
  3844  081D                     	;# 
  3845  081E                     	;# 
  3846  081F                     	;# 
  3847  088C                     	;# 
  3848  088D                     	;# 
  3849  088E                     	;# 
  3850  088F                     	;# 
  3851  0890                     	;# 
  3852  0891                     	;# 
  3853  0892                     	;# 
  3854  0893                     	;# 
  3855  0895                     	;# 
  3856  0896                     	;# 
  3857  090C                     	;# 
  3858  090E                     	;# 
  3859  090F                     	;# 
  3860  091F                     	;# 
  3861  098F                     	;# 
  3862  098F                     	;# 
  3863  0990                     	;# 
  3864  0991                     	;# 
  3865  0992                     	;# 
  3866  0993                     	;# 
  3867  0994                     	;# 
  3868  0995                     	;# 
  3869  0996                     	;# 
  3870  0997                     	;# 
  3871  0A19                     	;# 
  3872  0A19                     	;# 
  3873  0A1A                     	;# 
  3874  0A1A                     	;# 
  3875  0A1B                     	;# 
  3876  0A1B                     	;# 
  3877  0A1B                     	;# 
  3878  0A1C                     	;# 
  3879  0A1C                     	;# 
  3880  0A1D                     	;# 
  3881  0A1D                     	;# 
  3882  0A1E                     	;# 
  3883  0A1E                     	;# 
  3884  0A1F                     	;# 
  3885  0A1F                     	;# 
  3886  0A1F                     	;# 
  3887  1E0F                     	;# 
  3888  1E10                     	;# 
  3889  1E11                     	;# 
  3890  1E12                     	;# 
  3891  1E13                     	;# 
  3892  1E14                     	;# 
  3893  1E15                     	;# 
  3894  1E16                     	;# 
  3895  1E17                     	;# 
  3896  1E18                     	;# 
  3897  1E19                     	;# 
  3898  1E1A                     	;# 
  3899  1E1B                     	;# 
  3900  1E1C                     	;# 
  3901  1E1D                     	;# 
  3902  1E1E                     	;# 
  3903  1E1F                     	;# 
  3904  1E20                     	;# 
  3905  1E21                     	;# 
  3906  1E22                     	;# 
  3907  1E23                     	;# 
  3908  1E24                     	;# 
  3909  1E25                     	;# 
  3910  1E26                     	;# 
  3911  1E27                     	;# 
  3912  1E28                     	;# 
  3913  1E29                     	;# 
  3914  1E2A                     	;# 
  3915  1E2B                     	;# 
  3916  1E2C                     	;# 
  3917  1E2D                     	;# 
  3918  1E2E                     	;# 
  3919  1E2F                     	;# 
  3920  1E30                     	;# 
  3921  1E31                     	;# 
  3922  1E32                     	;# 
  3923  1E33                     	;# 
  3924  1E34                     	;# 
  3925  1E35                     	;# 
  3926  1E36                     	;# 
  3927  1E37                     	;# 
  3928  1E8F                     	;# 
  3929  1E90                     	;# 
  3930  1E91                     	;# 
  3931  1E92                     	;# 
  3932  1E93                     	;# 
  3933  1E9C                     	;# 
  3934  1EA1                     	;# 
  3935  1EA2                     	;# 
  3936  1EB1                     	;# 
  3937  1EBB                     	;# 
  3938  1EBC                     	;# 
  3939  1EBD                     	;# 
  3940  1EBE                     	;# 
  3941  1EC3                     	;# 
  3942  1EC5                     	;# 
  3943  1EC6                     	;# 
  3944  1EC7                     	;# 
  3945  1EC8                     	;# 
  3946  1EC9                     	;# 
  3947  1ECA                     	;# 
  3948  1ECB                     	;# 
  3949  1ECC                     	;# 
  3950  1ECD                     	;# 
  3951  1ECE                     	;# 
  3952  1F10                     	;# 
  3953  1F11                     	;# 
  3954  1F12                     	;# 
  3955  1F13                     	;# 
  3956  1F14                     	;# 
  3957  1F15                     	;# 
  3958  1F16                     	;# 
  3959  1F17                     	;# 
  3960  1F18                     	;# 
  3961  1F19                     	;# 
  3962  1F1A                     	;# 
  3963  1F1B                     	;# 
  3964  1F1C                     	;# 
  3965  1F1D                     	;# 
  3966  1F1E                     	;# 
  3967  1F1F                     	;# 
  3968  1F20                     	;# 
  3969  1F21                     	;# 
  3970  1F22                     	;# 
  3971  1F23                     	;# 
  3972  1F24                     	;# 
  3973  1F25                     	;# 
  3974  1F26                     	;# 
  3975  1F27                     	;# 
  3976  1F38                     	;# 
  3977  1F39                     	;# 
  3978  1F3A                     	;# 
  3979  1F3B                     	;# 
  3980  1F3C                     	;# 
  3981  1F3D                     	;# 
  3982  1F3E                     	;# 
  3983  1F3F                     	;# 
  3984  1F43                     	;# 
  3985  1F44                     	;# 
  3986  1F45                     	;# 
  3987  1F46                     	;# 
  3988  1F47                     	;# 
  3989  1F48                     	;# 
  3990  1F49                     	;# 
  3991  1F4A                     	;# 
  3992  1F4E                     	;# 
  3993  1F4F                     	;# 
  3994  1F50                     	;# 
  3995  1F51                     	;# 
  3996  1F52                     	;# 
  3997  1F53                     	;# 
  3998  1F54                     	;# 
  3999  1F55                     	;# 
  4000  1F65                     	;# 
  4001  1F68                     	;# 
  4002  1F69                     	;# 
  4003  1F6A                     	;# 
  4004  1F6B                     	;# 
  4005  1FE4                     	;# 
  4006  1FE5                     	;# 
  4007  1FE6                     	;# 
  4008  1FE7                     	;# 
  4009  1FE8                     	;# 
  4010  1FE8                     	;# 
  4011  1FE9                     	;# 
  4012  1FEA                     	;# 
  4013  1FEB                     	;# 
  4014  1FED                     	;# 
  4015  1FEE                     	;# 
  4016  1FEF                     	;_data
  4017                           
  4018                           	psect	idataBANK1
  4019  07FA                     __pidataBANK1:	
  4020                           
  4021                           ;initializer for _g_screenRefresh
  4022  07FA  3401               	retlw	1
  4023                           
  4024                           	psect	idataBANK2
  4025  07FB                     __pidataBANK2:	
  4026                           
  4027                           ;initializer for statusView@prevSensorStat
  4028  07FB  3401               	retlw	1
  4029                           
  4030                           	psect	idataBANK4
  4031  3324                     __pidataBANK4:	
  4032                           
  4033                           ;initializer for checkSensor@sensorUpdateInterval
  4034  3324  3464               	retlw	100
  4035  3325  3400               	retlw	0
  4036  3326  3400               	retlw	0
  4037  3327  3400               	retlw	0
  4038                           
  4039                           ;initializer for OLED_print_xy@F7967
  4040  3328  3400               	retlw	0
  4041  3329  3440               	retlw	64
  4042  332A  3414               	retlw	20
  4043  332B  3454               	retlw	84
  4044                           
  4045                           ;initializer for OLED_setCursor@F7959
  4046  332C  3400               	retlw	0
  4047  332D  3440               	retlw	64
  4048  332E  3414               	retlw	20
  4049  332F  3454               	retlw	84
  4050                           
  4051                           	psect	idataBANK6
  4052  2000                     __pidataBANK6:	
  4053                           
  4054                           ;initializer for OLED_loadSpecialChars@F7970
  4055  2000  3418               	retlw	24
  4056  2001  3418               	retlw	24
  4057  2002  3403               	retlw	3
  4058  2003  3404               	retlw	4
  4059  2004  3404               	retlw	4
  4060  2005  3404               	retlw	4
  4061  2006  3403               	retlw	3
  4062  2007  3400               	retlw	0
  4063  2008  3400               	retlw	0
  4064  2009  3400               	retlw	0
  4065  200A  3400               	retlw	0
  4066  200B  3404               	retlw	4
  4067  200C  3400               	retlw	0
  4068  200D  3400               	retlw	0
  4069  200E  3400               	retlw	0
  4070  200F  3400               	retlw	0
  4071  2010  3401               	retlw	1
  4072  2011  3401               	retlw	1
  4073  2012  3405               	retlw	5
  4074  2013  3409               	retlw	9
  4075  2014  341F               	retlw	31
  4076  2015  3408               	retlw	8
  4077  2016  3404               	retlw	4
  4078  2017  3400               	retlw	0
  4079  2018  3400               	retlw	0
  4080  2019  3410               	retlw	16
  4081  201A  3418               	retlw	24
  4082  201B  341C               	retlw	28
  4083  201C  3418               	retlw	24
  4084  201D  3410               	retlw	16
  4085  201E  3400               	retlw	0
  4086  201F  3400               	retlw	0
  4087                           
  4088                           	psect	stringtext1
  4089  3000                     __pstringtext1:	
  4090  3000                     _nextStateTbl:	
  4091  3000  3400               	retlw	0
  4092  3001  34FF               	retlw	255
  4093  3002  3401               	retlw	1
  4094  3003  3405               	retlw	5
  4095  3004  3400               	retlw	0
  4096  3005  3400               	retlw	0
  4097  3006  3401               	retlw	1
  4098  3007  34FF               	retlw	255
  4099  3008  3400               	retlw	0
  4100  3009  3402               	retlw	2
  4101  300A  3401               	retlw	1
  4102  300B  3401               	retlw	1
  4103  300C  3402               	retlw	2
  4104  300D  3400               	retlw	0
  4105  300E  3403               	retlw	3
  4106  300F  3401               	retlw	1
  4107  3010  3401               	retlw	1
  4108  3011  3402               	retlw	2
  4109  3012  3402               	retlw	2
  4110  3013  3401               	retlw	1
  4111  3014  3404               	retlw	4
  4112  3015  3401               	retlw	1
  4113  3016  3401               	retlw	1
  4114  3017  3402               	retlw	2
  4115  3018  3402               	retlw	2
  4116  3019  3402               	retlw	2
  4117  301A  3402               	retlw	2
  4118  301B  3401               	retlw	1
  4119  301C  3401               	retlw	1
  4120  301D  3402               	retlw	2
  4121  301E  3403               	retlw	3
  4122  301F  3400               	retlw	0
  4123  3020  3402               	retlw	2
  4124  3021  3402               	retlw	2
  4125  3022  3402               	retlw	2
  4126  3023  3403               	retlw	3
  4127  3024  3403               	retlw	3
  4128  3025  3401               	retlw	1
  4129  3026  3402               	retlw	2
  4130  3027  3402               	retlw	2
  4131  3028  3402               	retlw	2
  4132  3029  3402               	retlw	2
  4133  302A  3404               	retlw	4
  4134  302B  3400               	retlw	0
  4135  302C  3402               	retlw	2
  4136  302D  3402               	retlw	2
  4137  302E  3402               	retlw	2
  4138  302F  3404               	retlw	4
  4139  3030  3405               	retlw	5
  4140  3031  3400               	retlw	0
  4141  3032  3406               	retlw	6
  4142  3033  3400               	retlw	0
  4143  3034  3400               	retlw	0
  4144  3035  3405               	retlw	5
  4145  3036  3405               	retlw	5
  4146  3037  3401               	retlw	1
  4147  3038  3407               	retlw	7
  4148  3039  3400               	retlw	0
  4149  303A  3400               	retlw	0
  4150  303B  3405               	retlw	5
  4151  303C  3405               	retlw	5
  4152  303D  3402               	retlw	2
  4153  303E  3408               	retlw	8
  4154  303F  3400               	retlw	0
  4155  3040  3400               	retlw	0
  4156  3041  3405               	retlw	5
  4157  3042  3406               	retlw	6
  4158  3043  3400               	retlw	0
  4159  3044  3405               	retlw	5
  4160  3045  3405               	retlw	5
  4161  3046  3405               	retlw	5
  4162  3047  3406               	retlw	6
  4163  3048  3407               	retlw	7
  4164  3049  3400               	retlw	0
  4165  304A  3405               	retlw	5
  4166  304B  3405               	retlw	5
  4167  304C  3405               	retlw	5
  4168  304D  3407               	retlw	7
  4169  304E  3408               	retlw	8
  4170  304F  3400               	retlw	0
  4171  3050  3405               	retlw	5
  4172  3051  3405               	retlw	5
  4173  3052  3405               	retlw	5
  4174  3053  3408               	retlw	8
  4175  3054                     __end_of_nextStateTbl:	
  4176                           
  4177                           	psect	stringtext2
  4178  3825                     __pstringtext2:	
  4179  3825                     _transition_table:	
  4180  3825  3400               	retlw	0
  4181  3826  3404               	retlw	4
  4182  3827  3401               	retlw	1
  4183  3828  3400               	retlw	0
  4184  3829  3482               	retlw	130
  4185  382A  3400               	retlw	0
  4186  382B  3401               	retlw	1
  4187  382C  3400               	retlw	0
  4188  382D  3402               	retlw	2
  4189  382E  3403               	retlw	3
  4190  382F  3401               	retlw	1
  4191  3830  3400               	retlw	0
  4192  3831  3402               	retlw	2
  4193  3832  3403               	retlw	3
  4194  3833  3400               	retlw	0
  4195  3834  3480               	retlw	128
  4196  3835  3445               	retlw	69
  4197  3836  3404               	retlw	4
  4198  3837  3400               	retlw	0
  4199  3838  3400               	retlw	0
  4200  3839  3405               	retlw	5
  4201  383A  3404               	retlw	4
  4202  383B  3406               	retlw	6
  4203  383C  3400               	retlw	0
  4204  383D  3405               	retlw	5
  4205  383E  3400               	retlw	0
  4206  383F  3406               	retlw	6
  4207  3840  3440               	retlw	64
  4208  3841                     __end_of_transition_table:	
  4209                           
  4210                           	psect	stringtext3
  4211  3054                     __pstringtext3:	
  4212  3054                     _stateFuncTbl:	
  4213  3054  345A               	retlw	low _statusView
  4214  3055  3410               	retlw	high _statusView
  4215  3056  3419               	retlw	low _channelView
  4216  3057  3409               	retlw	high _channelView
  4217  3058  345E               	retlw	low _channelSetup
  4218  3059  3426               	retlw	high _channelSetup
  4219  305A  34E0               	retlw	low _setOutputPower
  4220  305B  3424               	retlw	high _setOutputPower
  4221  305C  349F               	retlw	low _setLensDia
  4222  305D  342E               	retlw	high _setLensDia
  4223  305E  344A               	retlw	low _setup
  4224  305F  342F               	retlw	high _setup
  4225  3060  34CD               	retlw	low _setDPOffset
  4226  3061  342A               	retlw	high _setDPOffset
  4227  3062  34F8               	retlw	low _setSkyTemp
  4228  3063  3429               	retlw	high _setSkyTemp
  4229  3064  3462               	retlw	low _setFudgeFactor
  4230  3065  342A               	retlw	high _setFudgeFactor
  4231  3066                     __end_of_stateFuncTbl:	
  4232  0018                     _LATAbits	set	24
  4233  000C                     _PORTAbits	set	12
  4234  000B                     _INTCONbits	set	11
  4235  000E                     _PORTCbits	set	14
  4236  0014                     _TRISCbits	set	20
  4237  000B                     _INTCON	set	11
  4238  0014                     _TRISC	set	20
  4239  0013                     _TRISB	set	19
  4240  0012                     _TRISA	set	18
  4241  001A                     _LATCbits	set	26
  4242  0019                     _LATBbits	set	25
  4243  009B                     _ADRESL	set	155
  4244  009C                     _ADRESH	set	156
  4245  009E                     _ADCON1	set	158
  4246  009D                     _ADCON0bits	set	157
  4247  0119                     _RC1REG	set	281
  4248  011D                     _RC1STAbits	set	285
  4249  011A                     _TX1REG	set	282
  4250  011E                     _TX1STA	set	286
  4251  011D                     _RC1STA	set	285
  4252  011B                     _SPBRGL	set	283
  4253  011F                     _BAUD1CON	set	287
  4254  020C                     _TMR1	set	524
  4255  0211                     _T1CLK	set	529
  4256  020E                     _T1CON	set	526
  4257  059C                     _TMR0	set	1436
  4258  059F                     _T0CON1	set	1439
  4259  059E                     _T0CON0	set	1438
  4260  070F                     _PIR3bits	set	1807
  4261  0719                     _PIE3bits	set	1817
  4262  0710                     _PIR4bits	set	1808
  4263  071A                     _PIE4bits	set	1818
  4264  070C                     _PIR0bits	set	1804
  4265  0716                     _PIE0bits	set	1814
  4266  071A                     _PIE4	set	1818
  4267  0719                     _PIE3	set	1817
  4268  0716                     _PIE0	set	1814
  4269  088F                     _OSCCON3bits	set	2191
  4270  088D                     _OSCCON1	set	2189
  4271  0893                     _OSCFRQ	set	2195
  4272  1ECB                     _RX1DTPPSbits	set	7883
  4273  1F3F                     _IOCAFbits	set	7999
  4274  1F54                     _IOCCN	set	8020
  4275  1F3E                     _IOCAN	set	7998
  4276  1F3D                     _IOCAP	set	7997
  4277  1F4E                     _ANSELC	set	8014
  4278  1F43                     _ANSELB	set	8003
  4279  1F38                     _ANSELA	set	7992
  4280  1F26                     _RC6PPS	set	7974
  4281  3066                     STR_1:	
  4282  3066  3454               	retlw	84	;'T'
  4283  3067  3465               	retlw	101	;'e'
  4284  3068  346D               	retlw	109	;'m'
  4285  3069  3470               	retlw	112	;'p'
  4286  306A  3465               	retlw	101	;'e'
  4287  306B  3472               	retlw	114	;'r'
  4288  306C  3461               	retlw	97	;'a'
  4289  306D  3474               	retlw	116	;'t'
  4290  306E  3475               	retlw	117	;'u'
  4291  306F  3472               	retlw	114	;'r'
  4292  3070  3465               	retlw	101	;'e'
  4293  3071  3420               	retlw	32	;' '
  4294  3072  3452               	retlw	82	;'R'
  4295  3073  3465               	retlw	101	;'e'
  4296  3074  346C               	retlw	108	;'l'
  4297  3075  342E               	retlw	46	;'.'
  4298  3076  3468               	retlw	104	;'h'
  4299  3077  3475               	retlw	117	;'u'
  4300  3078  346D               	retlw	109	;'m'
  4301  3079  3469               	retlw	105	;'i'
  4302  307A  3464               	retlw	100	;'d'
  4303  307B  3469               	retlw	105	;'i'
  4304  307C  3474               	retlw	116	;'t'
  4305  307D  3479               	retlw	121	;'y'
  4306  307E  3444               	retlw	68	;'D'
  4307  307F  3465               	retlw	101	;'e'
  4308  3080  3477               	retlw	119	;'w'
  4309  3081  3470               	retlw	112	;'p'
  4310  3082  346F               	retlw	111	;'o'
  4311  3083  3469               	retlw	105	;'i'
  4312  3084  346E               	retlw	110	;'n'
  4313  3085  3474               	retlw	116	;'t'
  4314  3086  3420               	retlw	32	;' '
  4315  3087  3420               	retlw	32	;' '
  4316  3088  3420               	retlw	32	;' '
  4317  3089  3420               	retlw	32	;' '
  4318  308A  3442               	retlw	66	;'B'
  4319  308B  3461               	retlw	97	;'a'
  4320  308C  3474               	retlw	116	;'t'
  4321  308D  342E               	retlw	46	;'.'
  4322  308E  3420               	retlw	32	;' '
  4323  308F  3420               	retlw	32	;' '
  4324  3090  3420               	retlw	32	;' '
  4325  3091  3450               	retlw	80	;'P'
  4326  3092  346F               	retlw	111	;'o'
  4327  3093  3477               	retlw	119	;'w'
  4328  3094  3465               	retlw	101	;'e'
  4329  3095  3472               	retlw	114	;'r'
  4330  3096  3456               	retlw	86	;'V'
  4331  3097  3465               	retlw	101	;'e'
  4332  3098  3472               	retlw	114	;'r'
  4333  3099  3473               	retlw	115	;'s'
  4334  309A  3469               	retlw	105	;'i'
  4335  309B  346F               	retlw	111	;'o'
  4336  309C  346E               	retlw	110	;'n'
  4337  309D  343A               	retlw	58	;':'
  4338  309E  3400               	retlw	0
  4339                           
  4340                           	psect	stringtext4
  4341  3800                     __pstringtext4:	
  4342  3800                     STR_48:	
  4343  3800  3444               	retlw	68	;'D'
  4344  3801  3450               	retlw	80	;'P'
  4345  3802  3420               	retlw	32	;' '
  4346  3803  346F               	retlw	111	;'o'
  4347  3804  3466               	retlw	102	;'f'
  4348  3805  3466               	retlw	102	;'f'
  4349  3806  3473               	retlw	115	;'s'
  4350  3807  3465               	retlw	101	;'e'
  4351  3808  3474               	retlw	116	;'t'
  4352  3809  3420               	retlw	32	;' '
  4353  380A  3420               	retlw	32	;' '
  4354  380B  3420               	retlw	32	;' '
  4355  380C  3453               	retlw	83	;'S'
  4356  380D  346B               	retlw	107	;'k'
  4357  380E  3479               	retlw	121	;'y'
  4358  380F  3420               	retlw	32	;' '
  4359  3810  3474               	retlw	116	;'t'
  4360  3811  3465               	retlw	101	;'e'
  4361  3812  346D               	retlw	109	;'m'
  4362  3813  3470               	retlw	112	;'p'
  4363  3814  342E               	retlw	46	;'.'
  4364  3815  3420               	retlw	32	;' '
  4365  3816  3420               	retlw	32	;' '
  4366  3817  3420               	retlw	32	;' '
  4367  3818  3446               	retlw	70	;'F'
  4368  3819  3475               	retlw	117	;'u'
  4369  381A  3464               	retlw	100	;'d'
  4370  381B  3467               	retlw	103	;'g'
  4371  381C  3465               	retlw	101	;'e'
  4372  381D  3420               	retlw	32	;' '
  4373  381E  3466               	retlw	102	;'f'
  4374  381F  3461               	retlw	97	;'a'
  4375  3820  3463               	retlw	99	;'c'
  4376  3821  3474               	retlw	116	;'t'
  4377  3822  346F               	retlw	111	;'o'
  4378  3823  3472               	retlw	114	;'r'
  4379  3824  3400               	retlw	0
  4380                           
  4381                           	psect	stringtext5
  4382  3841                     __pstringtext5:	
  4383  3841                     STR_62:	
  4384  3841  3448               	retlw	72	;'H'
  4385  3842  3465               	retlw	101	;'e'
  4386  3843  3461               	retlw	97	;'a'
  4387  3844  3474               	retlw	116	;'t'
  4388  3845  3465               	retlw	101	;'e'
  4389  3846  3472               	retlw	114	;'r'
  4390  3847  3420               	retlw	32	;' '
  4391  3848  3420               	retlw	32	;' '
  4392  3849  3420               	retlw	32	;' '
  4393  384A  3420               	retlw	32	;' '
  4394  384B  3420               	retlw	32	;' '
  4395  384C  3420               	retlw	32	;' '
  4396  384D  3400               	retlw	0
  4397                           
  4398                           	psect	stringtext6
  4399  384E                     __pstringtext6:	
  4400  384E                     STR_74:	
  4401  384E  3453               	retlw	83	;'S'
  4402  384F  3465               	retlw	101	;'e'
  4403  3850  346E               	retlw	110	;'n'
  4404  3851  3473               	retlw	115	;'s'
  4405  3852  346F               	retlw	111	;'o'
  4406  3853  3472               	retlw	114	;'r'
  4407  3854  3420               	retlw	32	;' '
  4408  3855  3420               	retlw	32	;' '
  4409  3856  3420               	retlw	32	;' '
  4410  3857  3420               	retlw	32	;' '
  4411  3858  3420               	retlw	32	;' '
  4412  3859  3420               	retlw	32	;' '
  4413  385A  3400               	retlw	0
  4414                           
  4415                           	psect	stringtext7
  4416  385B                     __pstringtext7:	
  4417  385B                     STR_64:	
  4418  385B  344F               	retlw	79	;'O'
  4419  385C  3475               	retlw	117	;'u'
  4420  385D  3474               	retlw	116	;'t'
  4421  385E  3470               	retlw	112	;'p'
  4422  385F  3475               	retlw	117	;'u'
  4423  3860  3474               	retlw	116	;'t'
  4424  3861  3420               	retlw	32	;' '
  4425  3862  3420               	retlw	32	;' '
  4426  3863  3420               	retlw	32	;' '
  4427  3864  3420               	retlw	32	;' '
  4428  3865  3420               	retlw	32	;' '
  4429  3866  3420               	retlw	32	;' '
  4430  3867  3400               	retlw	0
  4431                           
  4432                           	psect	stringtext8
  4433  3868                     __pstringtext8:	
  4434  3868                     STR_83:	
  4435  3868  3420               	retlw	32	;' '
  4436  3869  3420               	retlw	32	;' '
  4437  386A  3420               	retlw	32	;' '
  4438  386B  3420               	retlw	32	;' '
  4439  386C  343A               	retlw	58	;':'
  4440  386D  342D               	retlw	45	;'-'
  4441  386E  3429               	retlw	41	;')'
  4442  386F  3420               	retlw	32	;' '
  4443  3870  3420               	retlw	32	;' '
  4444  3871  3420               	retlw	32	;' '
  4445  3872  3420               	retlw	32	;' '
  4446  3873  3420               	retlw	32	;' '
  4447  3874  3400               	retlw	0
  4448                           
  4449                           	psect	stringtext9
  4450  3875                     __pstringtext9:	
  4451  3875                     STR_63:	
  4452  3875  3472               	retlw	114	;'r'
  4453  3876  3465               	retlw	101	;'e'
  4454  3877  346D               	retlw	109	;'m'
  4455  3878  346F               	retlw	111	;'o'
  4456  3879  3476               	retlw	118	;'v'
  4457  387A  3465               	retlw	101	;'e'
  4458  387B  3464               	retlw	100	;'d'
  4459  387C  3420               	retlw	32	;' '
  4460  387D  3420               	retlw	32	;' '
  4461  387E  3420               	retlw	32	;' '
  4462  387F  3420               	retlw	32	;' '
  4463  3880  3420               	retlw	32	;' '
  4464  3881  3400               	retlw	0
  4465                           
  4466                           	psect	stringtext10
  4467  3882                     __pstringtext10:	
  4468  3882                     STR_84:	
  4469  3882  3455               	retlw	85	;'U'
  4470  3883  346E               	retlw	110	;'n'
  4471  3884  346B               	retlw	107	;'k'
  4472  3885  346E               	retlw	110	;'n'
  4473  3886  346F               	retlw	111	;'o'
  4474  3887  3477               	retlw	119	;'w'
  4475  3888  346E               	retlw	110	;'n'
  4476  3889  3420               	retlw	32	;' '
  4477  388A  3420               	retlw	32	;' '
  4478  388B  3420               	retlw	32	;' '
  4479  388C  3420               	retlw	32	;' '
  4480  388D  3420               	retlw	32	;' '
  4481  388E  3400               	retlw	0
  4482                           
  4483                           	psect	stringtext11
  4484  388F                     __pstringtext11:	
  4485  388F                     STR_75:	
  4486  388F  3474               	retlw	116	;'t'
  4487  3890  3469               	retlw	105	;'i'
  4488  3891  346D               	retlw	109	;'m'
  4489  3892  3465               	retlw	101	;'e'
  4490  3893  346F               	retlw	111	;'o'
  4491  3894  3475               	retlw	117	;'u'
  4492  3895  3474               	retlw	116	;'t'
  4493  3896  3420               	retlw	32	;' '
  4494  3897  3420               	retlw	32	;' '
  4495  3898  3420               	retlw	32	;' '
  4496  3899  3420               	retlw	32	;' '
  4497  389A  3420               	retlw	32	;' '
  4498  389B  3400               	retlw	0
  4499                           
  4500                           	psect	stringtext12
  4501  389C                     __pstringtext12:	
  4502  389C                     STR_65:	
  4503  389C  3473               	retlw	115	;'s'
  4504  389D  3468               	retlw	104	;'h'
  4505  389E  346F               	retlw	111	;'o'
  4506  389F  3472               	retlw	114	;'r'
  4507  38A0  3474               	retlw	116	;'t'
  4508  38A1  3465               	retlw	101	;'e'
  4509  38A2  3464               	retlw	100	;'d'
  4510  38A3  3421               	retlw	33	;'!'
  4511  38A4  3420               	retlw	32	;' '
  4512  38A5  3420               	retlw	32	;' '
  4513  38A6  3420               	retlw	32	;' '
  4514  38A7  3420               	retlw	32	;' '
  4515  38A8  3400               	retlw	0
  4516                           
  4517                           	psect	stringtext13
  4518  38A9                     __pstringtext13:	
  4519  38A9                     STR_73:	
  4520  38A9  3474               	retlw	116	;'t'
  4521  38AA  346F               	retlw	111	;'o'
  4522  38AB  346F               	retlw	111	;'o'
  4523  38AC  3420               	retlw	32	;' '
  4524  38AD  346C               	retlw	108	;'l'
  4525  38AE  346F               	retlw	111	;'o'
  4526  38AF  3477               	retlw	119	;'w'
  4527  38B0  3421               	retlw	33	;'!'
  4528  38B1  3420               	retlw	32	;' '
  4529  38B2  3420               	retlw	32	;' '
  4530  38B3  3420               	retlw	32	;' '
  4531  38B4  3420               	retlw	32	;' '
  4532  38B5  3400               	retlw	0
  4533                           
  4534                           	psect	stringtext14
  4535  38B6                     __pstringtext14:	
  4536  38B6                     STR_77:	
  4537  38B6  3463               	retlw	99	;'c'
  4538  38B7  3468               	retlw	104	;'h'
  4539  38B8  3465               	retlw	101	;'e'
  4540  38B9  3463               	retlw	99	;'c'
  4541  38BA  346B               	retlw	107	;'k'
  4542  38BB  3473               	retlw	115	;'s'
  4543  38BC  3475               	retlw	117	;'u'
  4544  38BD  346D               	retlw	109	;'m'
  4545  38BE  3420               	retlw	32	;' '
  4546  38BF  3420               	retlw	32	;' '
  4547  38C0  3420               	retlw	32	;' '
  4548  38C1  3420               	retlw	32	;' '
  4549  38C2  3400               	retlw	0
  4550                           
  4551                           	psect	stringtext15
  4552  38C3                     __pstringtext15:	
  4553  38C3                     STR_67:	
  4554  38C3  3464               	retlw	100	;'d'
  4555  38C4  3465               	retlw	101	;'e'
  4556  38C5  3474               	retlw	116	;'t'
  4557  38C6  3465               	retlw	101	;'e'
  4558  38C7  3463               	retlw	99	;'c'
  4559  38C8  3474               	retlw	116	;'t'
  4560  38C9  3465               	retlw	101	;'e'
  4561  38CA  3464               	retlw	100	;'d'
  4562  38CB  3421               	retlw	33	;'!'
  4563  38CC  3420               	retlw	32	;' '
  4564  38CD  3420               	retlw	32	;' '
  4565  38CE  3420               	retlw	32	;' '
  4566  38CF  3400               	retlw	0
  4567                           
  4568                           	psect	stringtext16
  4569  38D0                     __pstringtext16:	
  4570  38D0                     STR_71:	
  4571  38D0  3474               	retlw	116	;'t'
  4572  38D1  346F               	retlw	111	;'o'
  4573  38D2  346F               	retlw	111	;'o'
  4574  38D3  3420               	retlw	32	;' '
  4575  38D4  3468               	retlw	104	;'h'
  4576  38D5  3469               	retlw	105	;'i'
  4577  38D6  3467               	retlw	103	;'g'
  4578  38D7  3468               	retlw	104	;'h'
  4579  38D8  3421               	retlw	33	;'!'
  4580  38D9  3420               	retlw	32	;' '
  4581  38DA  3420               	retlw	32	;' '
  4582  38DB  3420               	retlw	32	;' '
  4583  38DC  3400               	retlw	0
  4584                           
  4585                           	psect	stringtext17
  4586  38DD                     __pstringtext17:	
  4587  38DD                     STR_85:	
  4588  38DD  3465               	retlw	101	;'e'
  4589  38DE  3472               	retlw	114	;'r'
  4590  38DF  3472               	retlw	114	;'r'
  4591  38E0  346F               	retlw	111	;'o'
  4592  38E1  3472               	retlw	114	;'r'
  4593  38E2  3420               	retlw	32	;' '
  4594  38E3  3463               	retlw	99	;'c'
  4595  38E4  346F               	retlw	111	;'o'
  4596  38E5  3464               	retlw	100	;'d'
  4597  38E6  3465               	retlw	101	;'e'
  4598  38E7  3420               	retlw	32	;' '
  4599  38E8  3420               	retlw	32	;' '
  4600  38E9  3400               	retlw	0
  4601                           
  4602                           	psect	stringtext18
  4603  38EA                     __pstringtext18:	
  4604  38EA                     STR_78:	
  4605  38EA  344F               	retlw	79	;'O'
  4606  38EB  3456               	retlw	86	;'V'
  4607  38EC  3445               	retlw	69	;'E'
  4608  38ED  3452               	retlw	82	;'R'
  4609  38EE  3443               	retlw	67	;'C'
  4610  38EF  3455               	retlw	85	;'U'
  4611  38F0  3452               	retlw	82	;'R'
  4612  38F1  3452               	retlw	82	;'R'
  4613  38F2  3445               	retlw	69	;'E'
  4614  38F3  344E               	retlw	78	;'N'
  4615  38F4  3454               	retlw	84	;'T'
  4616  38F5  3420               	retlw	32	;' '
  4617  38F6  3400               	retlw	0
  4618                           
  4619                           	psect	stringtext19
  4620  38F7                     __pstringtext19:	
  4621  38F7                     STR_82:	
  4622  38F7  344D               	retlw	77	;'M'
  4623  38F8  3465               	retlw	101	;'e'
  4624  38F9  346E               	retlw	110	;'n'
  4625  38FA  3475               	retlw	117	;'u'
  4626  38FB  3420               	retlw	32	;' '
  4627  38FC  3462               	retlw	98	;'b'
  4628  38FD  3472               	retlw	114	;'r'
  4629  38FE  346F               	retlw	111	;'o'
  4630  38FF  346B               	retlw	107	;'k'
  4631  3900  3465               	retlw	101	;'e'
  4632  3901  346E               	retlw	110	;'n'
  4633  3902  3420               	retlw	32	;' '
  4634  3903  3400               	retlw	0
  4635                           
  4636                           	psect	stringtext20
  4637  3904                     __pstringtext20:	
  4638  3904                     STR_66:	
  4639  3904  344F               	retlw	79	;'O'
  4640  3905  3476               	retlw	118	;'v'
  4641  3906  3465               	retlw	101	;'e'
  4642  3907  3472               	retlw	114	;'r'
  4643  3908  3463               	retlw	99	;'c'
  4644  3909  3475               	retlw	117	;'u'
  4645  390A  3472               	retlw	114	;'r'
  4646  390B  3472               	retlw	114	;'r'
  4647  390C  3465               	retlw	101	;'e'
  4648  390D  346E               	retlw	110	;'n'
  4649  390E  3474               	retlw	116	;'t'
  4650  390F  3420               	retlw	32	;' '
  4651  3910  3400               	retlw	0
  4652                           
  4653                           	psect	stringtext21
  4654  3911                     __pstringtext21:	
  4655  3911                     STR_69:	
  4656  3911  346F               	retlw	111	;'o'
  4657  3912  3476               	retlw	118	;'v'
  4658  3913  3465               	retlw	101	;'e'
  4659  3914  3472               	retlw	114	;'r'
  4660  3915  3463               	retlw	99	;'c'
  4661  3916  3475               	retlw	117	;'u'
  4662  3917  3472               	retlw	114	;'r'
  4663  3918  3472               	retlw	114	;'r'
  4664  3919  3465               	retlw	101	;'e'
  4665  391A  346E               	retlw	110	;'n'
  4666  391B  3474               	retlw	116	;'t'
  4667  391C  3420               	retlw	32	;' '
  4668  391D  3400               	retlw	0
  4669                           
  4670                           	psect	stringtext22
  4671  391E                     __pstringtext22:	
  4672  391E                     STR_70:	
  4673  391E  3453               	retlw	83	;'S'
  4674  391F  3475               	retlw	117	;'u'
  4675  3920  3470               	retlw	112	;'p'
  4676  3921  3470               	retlw	112	;'p'
  4677  3922  346C               	retlw	108	;'l'
  4678  3923  3479               	retlw	121	;'y'
  4679  3924  3420               	retlw	32	;' '
  4680  3925  3476               	retlw	118	;'v'
  4681  3926  346F               	retlw	111	;'o'
  4682  3927  346C               	retlw	108	;'l'
  4683  3928  3474               	retlw	116	;'t'
  4684  3929  342E               	retlw	46	;'.'
  4685  392A  3400               	retlw	0
  4686                           
  4687                           	psect	stringtext23
  4688  392B                     __pstringtext23:	
  4689  392B                     STR_79:	
  4690  392B  3454               	retlw	84	;'T'
  4691  392C  3455               	retlw	85	;'U'
  4692  392D  3452               	retlw	82	;'R'
  4693  392E  344E               	retlw	78	;'N'
  4694  392F  3420               	retlw	32	;' '
  4695  3930  344F               	retlw	79	;'O'
  4696  3931  3446               	retlw	70	;'F'
  4697  3932  3446               	retlw	70	;'F'
  4698  3933  3420               	retlw	32	;' '
  4699  3934  344E               	retlw	78	;'N'
  4700  3935  344F               	retlw	79	;'O'
  4701  3936  3457               	retlw	87	;'W'
  4702  3937  3400               	retlw	0
  4703                           
  4704                           	psect	stringtext24
  4705  3938                     __pstringtext24:	
  4706  3938                     STR_76:	
  4707  3938  3453               	retlw	83	;'S'
  4708  3939  3465               	retlw	101	;'e'
  4709  393A  346E               	retlw	110	;'n'
  4710  393B  3473               	retlw	115	;'s'
  4711  393C  346F               	retlw	111	;'o'
  4712  393D  3472               	retlw	114	;'r'
  4713  393E  3420               	retlw	32	;' '
  4714  393F  3477               	retlw	119	;'w'
  4715  3940  3472               	retlw	114	;'r'
  4716  3941  346F               	retlw	111	;'o'
  4717  3942  346E               	retlw	110	;'n'
  4718  3943  3467               	retlw	103	;'g'
  4719  3944  3400               	retlw	0
  4720                           
  4721                           	psect	stringtext25
  4722  3945                     __pstringtext25:	
  4723  3945                     STR_81:	
  4724  3945  3450               	retlw	80	;'P'
  4725  3946  346C               	retlw	108	;'l'
  4726  3947  3465               	retlw	101	;'e'
  4727  3948  3461               	retlw	97	;'a'
  4728  3949  3473               	retlw	115	;'s'
  4729  394A  3465               	retlw	101	;'e'
  4730  394B  3420               	retlw	32	;' '
  4731  394C  3463               	retlw	99	;'c'
  4732  394D  3468               	retlw	104	;'h'
  4733  394E  3465               	retlw	101	;'e'
  4734  394F  3463               	retlw	99	;'c'
  4735  3950  346B               	retlw	107	;'k'
  4736  3951  3400               	retlw	0
  4737                           
  4738                           	psect	stringtext26
  4739  3952                     __pstringtext26:	
  4740  3952                     STR_28:	
  4741  3952  344E               	retlw	78	;'N'
  4742  3953  346F               	retlw	111	;'o'
  4743  3954  3474               	retlw	116	;'t'
  4744  3955  3420               	retlw	32	;' '
  4745  3956  3420               	retlw	32	;' '
  4746  3957  3420               	retlw	32	;' '
  4747  3958  3420               	retlw	32	;' '
  4748  3959  3420               	retlw	32	;' '
  4749  395A  3420               	retlw	32	;' '
  4750  395B  3420               	retlw	32	;' '
  4751  395C  3420               	retlw	32	;' '
  4752  395D  3420               	retlw	32	;' '
  4753  395E  3400               	retlw	0
  4754                           
  4755                           	psect	stringtext27
  4756  395F                     __pstringtext27:	
  4757  395F                     STR_32:	
  4758  395F  3452               	retlw	82	;'R'
  4759  3960  3465               	retlw	101	;'e'
  4760  3961  3473               	retlw	115	;'s'
  4761  3962  3465               	retlw	101	;'e'
  4762  3963  3474               	retlw	116	;'t'
  4763  3964  3420               	retlw	32	;' '
  4764  3965  3420               	retlw	32	;' '
  4765  3966  3420               	retlw	32	;' '
  4766  3967  3420               	retlw	32	;' '
  4767  3968  3420               	retlw	32	;' '
  4768  3969  3420               	retlw	32	;' '
  4769  396A  3420               	retlw	32	;' '
  4770  396B  3400               	retlw	0
  4771                           
  4772                           	psect	stringtext28
  4773  396C                     __pstringtext28:	
  4774  396C                     STR_30:	
  4775  396C  3454               	retlw	84	;'T'
  4776  396D  3465               	retlw	101	;'e'
  4777  396E  3473               	retlw	115	;'s'
  4778  396F  3474               	retlw	116	;'t'
  4779  3970  3469               	retlw	105	;'i'
  4780  3971  346E               	retlw	110	;'n'
  4781  3972  3467               	retlw	103	;'g'
  4782  3973  3420               	retlw	32	;' '
  4783  3974  3420               	retlw	32	;' '
  4784  3975  3420               	retlw	32	;' '
  4785  3976  3420               	retlw	32	;' '
  4786  3977  3420               	retlw	32	;' '
  4787  3978  3400               	retlw	0
  4788                           
  4789                           	psect	stringtext29
  4790  3979                     __pstringtext29:	
  4791  3979                     STR_33:	
  4792  3979  3463               	retlw	99	;'c'
  4793  397A  3468               	retlw	104	;'h'
  4794  397B  3461               	retlw	97	;'a'
  4795  397C  346E               	retlw	110	;'n'
  4796  397D  346E               	retlw	110	;'n'
  4797  397E  3465               	retlw	101	;'e'
  4798  397F  346C               	retlw	108	;'l'
  4799  3980  3420               	retlw	32	;' '
  4800  3981  3420               	retlw	32	;' '
  4801  3982  3420               	retlw	32	;' '
  4802  3983  3420               	retlw	32	;' '
  4803  3984  3420               	retlw	32	;' '
  4804  3985  3400               	retlw	0
  4805                           
  4806                           	psect	stringtext30
  4807  3986                     __pstringtext30:	
  4808  3986                     STR_19:	
  4809  3986  3453               	retlw	83	;'S'
  4810  3987  3468               	retlw	104	;'h'
  4811  3988  346F               	retlw	111	;'o'
  4812  3989  3472               	retlw	114	;'r'
  4813  398A  3474               	retlw	116	;'t'
  4814  398B  3465               	retlw	101	;'e'
  4815  398C  3464               	retlw	100	;'d'
  4816  398D  3421               	retlw	33	;'!'
  4817  398E  3420               	retlw	32	;' '
  4818  398F  3420               	retlw	32	;' '
  4819  3990  3420               	retlw	32	;' '
  4820  3991  3420               	retlw	32	;' '
  4821  3992  3400               	retlw	0
  4822                           
  4823                           	psect	stringtext31
  4824  3993                     __pstringtext31:	
  4825  3993                     STR_14:	
  4826  3993  3444               	retlw	68	;'D'
  4827  3994  3469               	retlw	105	;'i'
  4828  3995  3473               	retlw	115	;'s'
  4829  3996  3461               	retlw	97	;'a'
  4830  3997  3462               	retlw	98	;'b'
  4831  3998  346C               	retlw	108	;'l'
  4832  3999  3465               	retlw	101	;'e'
  4833  399A  3464               	retlw	100	;'d'
  4834  399B  3420               	retlw	32	;' '
  4835  399C  3420               	retlw	32	;' '
  4836  399D  3420               	retlw	32	;' '
  4837  399E  3420               	retlw	32	;' '
  4838  399F  3400               	retlw	0
  4839                           
  4840                           	psect	stringtext32
  4841  39A0                     __pstringtext32:	
  4842  39A0                     STR_31:	
  4843  39A0  3468               	retlw	104	;'h'
  4844  39A1  3465               	retlw	101	;'e'
  4845  39A2  3461               	retlw	97	;'a'
  4846  39A3  3474               	retlw	116	;'t'
  4847  39A4  3465               	retlw	101	;'e'
  4848  39A5  3472               	retlw	114	;'r'
  4849  39A6  342E               	retlw	46	;'.'
  4850  39A7  342E               	retlw	46	;'.'
  4851  39A8  342E               	retlw	46	;'.'
  4852  39A9  3420               	retlw	32	;' '
  4853  39AA  3420               	retlw	32	;' '
  4854  39AB  3420               	retlw	32	;' '
  4855  39AC  3400               	retlw	0
  4856                           
  4857                           	psect	stringtext33
  4858  39AD                     __pstringtext33:	
  4859  39AD                     STR_56:	
  4860  39AD  3453               	retlw	83	;'S'
  4861  39AE  346B               	retlw	107	;'k'
  4862  39AF  3479               	retlw	121	;'y'
  4863  39B0  3420               	retlw	32	;' '
  4864  39B1  3474               	retlw	116	;'t'
  4865  39B2  3465               	retlw	101	;'e'
  4866  39B3  346D               	retlw	109	;'m'
  4867  39B4  3470               	retlw	112	;'p'
  4868  39B5  342E               	retlw	46	;'.'
  4869  39B6  3420               	retlw	32	;' '
  4870  39B7  3420               	retlw	32	;' '
  4871  39B8  3420               	retlw	32	;' '
  4872  39B9  3400               	retlw	0
  4873                           
  4874                           	psect	stringtext34
  4875  39BA                     __pstringtext34:	
  4876  39BA                     STR_29:	
  4877  39BA  3463               	retlw	99	;'c'
  4878  39BB  346F               	retlw	111	;'o'
  4879  39BC  346E               	retlw	110	;'n'
  4880  39BD  346E               	retlw	110	;'n'
  4881  39BE  3465               	retlw	101	;'e'
  4882  39BF  3463               	retlw	99	;'c'
  4883  39C0  3474               	retlw	116	;'t'
  4884  39C1  3465               	retlw	101	;'e'
  4885  39C2  3464               	retlw	100	;'d'
  4886  39C3  3420               	retlw	32	;' '
  4887  39C4  3420               	retlw	32	;' '
  4888  39C5  3420               	retlw	32	;' '
  4889  39C6  3400               	retlw	0
  4890                           
  4891                           	psect	stringtext35
  4892  39C7                     __pstringtext35:	
  4893  39C7                     STR_53:	
  4894  39C7  3444               	retlw	68	;'D'
  4895  39C8  3450               	retlw	80	;'P'
  4896  39C9  3420               	retlw	32	;' '
  4897  39CA  346F               	retlw	111	;'o'
  4898  39CB  3466               	retlw	102	;'f'
  4899  39CC  3466               	retlw	102	;'f'
  4900  39CD  3473               	retlw	115	;'s'
  4901  39CE  3465               	retlw	101	;'e'
  4902  39CF  3474               	retlw	116	;'t'
  4903  39D0  3420               	retlw	32	;' '
  4904  39D1  3420               	retlw	32	;' '
  4905  39D2  3420               	retlw	32	;' '
  4906  39D3  3400               	retlw	0
  4907                           
  4908                           	psect	stringtext36
  4909  39D4                     __pstringtext36:	
  4910  39D4                     STR_34:	
  4911  39D4  344C               	retlw	76	;'L'
  4912  39D5  3465               	retlw	101	;'e'
  4913  39D6  346E               	retlw	110	;'n'
  4914  39D7  3473               	retlw	115	;'s'
  4915  39D8  3420               	retlw	32	;' '
  4916  39D9  3464               	retlw	100	;'d'
  4917  39DA  3469               	retlw	105	;'i'
  4918  39DB  3461               	retlw	97	;'a'
  4919  39DC  346D               	retlw	109	;'m'
  4920  39DD  342E               	retlw	46	;'.'
  4921  39DE  3420               	retlw	32	;' '
  4922  39DF  3420               	retlw	32	;' '
  4923  39E0  3400               	retlw	0
  4924                           
  4925                           	psect	stringtext37
  4926  39E1                     __pstringtext37:	
  4927  39E1                     STR_43:	
  4928  39E1  3448               	retlw	72	;'H'
  4929  39E2  346F               	retlw	111	;'o'
  4930  39E3  346C               	retlw	108	;'l'
  4931  39E4  3464               	retlw	100	;'d'
  4932  39E5  3420               	retlw	32	;' '
  4933  39E6  3462               	retlw	98	;'b'
  4934  39E7  3475               	retlw	117	;'u'
  4935  39E8  3474               	retlw	116	;'t'
  4936  39E9  3474               	retlw	116	;'t'
  4937  39EA  346F               	retlw	111	;'o'
  4938  39EB  346E               	retlw	110	;'n'
  4939  39EC  3420               	retlw	32	;' '
  4940  39ED  3400               	retlw	0
  4941                           
  4942                           	psect	stringtext38
  4943  39EE                     __pstringtext38:	
  4944  39EE                     STR_13:	
  4945  39EE  3450               	retlw	80	;'P'
  4946  39EF  346C               	retlw	108	;'l'
  4947  39F0  3465               	retlw	101	;'e'
  4948  39F1  3461               	retlw	97	;'a'
  4949  39F2  3473               	retlw	115	;'s'
  4950  39F3  3465               	retlw	101	;'e'
  4951  39F4  3420               	retlw	32	;' '
  4952  39F5  3477               	retlw	119	;'w'
  4953  39F6  3461               	retlw	97	;'a'
  4954  39F7  3469               	retlw	105	;'i'
  4955  39F8  3474               	retlw	116	;'t'
  4956  39F9  3421               	retlw	33	;'!'
  4957  39FA  3400               	retlw	0
  4958                           
  4959                           	psect	stringtext39
  4960  39FB                     __pstringtext39:	
  4961  39FB                     STR_20:	
  4962  39FB  344F               	retlw	79	;'O'
  4963  39FC  3476               	retlw	118	;'v'
  4964  39FD  3465               	retlw	101	;'e'
  4965  39FE  3472               	retlw	114	;'r'
  4966  39FF  3463               	retlw	99	;'c'
  4967  3A00  3475               	retlw	117	;'u'
  4968  3A01  3472               	retlw	114	;'r'
  4969  3A02  3472               	retlw	114	;'r'
  4970  3A03  3465               	retlw	101	;'e'
  4971  3A04  346E               	retlw	110	;'n'
  4972  3A05  3474               	retlw	116	;'t'
  4973  3A06  3421               	retlw	33	;'!'
  4974  3A07  3400               	retlw	0
  4975                           
  4976                           	psect	stringtext40
  4977  3A08                     __pstringtext40:	
  4978  3A08                     STR_18:	
  4979  3A08  3444               	retlw	68	;'D'
  4980  3A09  3469               	retlw	105	;'i'
  4981  3A0A  3473               	retlw	115	;'s'
  4982  3A0B  3463               	retlw	99	;'c'
  4983  3A0C  346F               	retlw	111	;'o'
  4984  3A0D  346E               	retlw	110	;'n'
  4985  3A0E  346E               	retlw	110	;'n'
  4986  3A0F  3465               	retlw	101	;'e'
  4987  3A10  3463               	retlw	99	;'c'
  4988  3A11  3474               	retlw	116	;'t'
  4989  3A12  3465               	retlw	101	;'e'
  4990  3A13  3464               	retlw	100	;'d'
  4991  3A14  3400               	retlw	0
  4992                           
  4993                           	psect	stringtext41
  4994  3A15                     __pstringtext41:	
  4995  3A15                     STR_44:	
  4996  3A15  3474               	retlw	116	;'t'
  4997  3A16  346F               	retlw	111	;'o'
  4998  3A17  3420               	retlw	32	;' '
  4999  3A18  3472               	retlw	114	;'r'
  5000  3A19  3465               	retlw	101	;'e'
  5001  3A1A  342D               	retlw	45	;'-'
  5002  3A1B  3465               	retlw	101	;'e'
  5003  3A1C  346E               	retlw	110	;'n'
  5004  3A1D  3461               	retlw	97	;'a'
  5005  3A1E  3462               	retlw	98	;'b'
  5006  3A1F  346C               	retlw	108	;'l'
  5007  3A20  3465               	retlw	101	;'e'
  5008  3A21  3400               	retlw	0
  5009                           
  5010                           	psect	stringtext42
  5011  3A22                     __pstringtext42:	
  5012  3A22                     STR_21:	
  5013  3A22  344F               	retlw	79	;'O'
  5014  3A23  346E               	retlw	110	;'n'
  5015  3A24  3464               	retlw	100	;'d'
  5016  3A25  3472               	retlw	114	;'r'
  5017  3A26  3465               	retlw	101	;'e'
  5018  3A27  3453               	retlw	83	;'S'
  5019  3A28  3470               	retlw	112	;'p'
  5020  3A29  3465               	retlw	101	;'e'
  5021  3A2A  3463               	retlw	99	;'c'
  5022  3A2B  3469               	retlw	105	;'i'
  5023  3A2C  3461               	retlw	97	;'a'
  5024  3A2D  346C               	retlw	108	;'l'
  5025  3A2E  3400               	retlw	0
  5026                           
  5027                           	psect	stringtext43
  5028  3A2F                     __pstringtext43:	
  5029  3A2F                     STR_22:	
  5030  3A2F  344F               	retlw	79	;'O'
  5031  3A30  3475               	retlw	117	;'u'
  5032  3A31  3474               	retlw	116	;'t'
  5033  3A32  3470               	retlw	112	;'p'
  5034  3A33  3475               	retlw	117	;'u'
  5035  3A34  3474               	retlw	116	;'t'
  5036  3A35  3420               	retlw	32	;' '
  5037  3A36  3470               	retlw	112	;'p'
  5038  3A37  346F               	retlw	111	;'o'
  5039  3A38  3477               	retlw	119	;'w'
  5040  3A39  3465               	retlw	101	;'e'
  5041  3A3A  3472               	retlw	114	;'r'
  5042  3A3B  3400               	retlw	0
  5043                           
  5044                           	psect	stringtext44
  5045  3A3C                     __pstringtext44:	
  5046  3A3C                     STR_86:	
  5047  3A3C  3454               	retlw	84	;'T'
  5048  3A3D  3455               	retlw	85	;'U'
  5049  3A3E  3452               	retlw	82	;'R'
  5050  3A3F  344E               	retlw	78	;'N'
  5051  3A40  3449               	retlw	73	;'I'
  5052  3A41  344E               	retlw	78	;'N'
  5053  3A42  3447               	retlw	71	;'G'
  5054  3A43  3420               	retlw	32	;' '
  5055  3A44  344F               	retlw	79	;'O'
  5056  3A45  3446               	retlw	70	;'F'
  5057  3A46  3446               	retlw	70	;'F'
  5058  3A47  3400               	retlw	0
  5059                           
  5060                           	psect	stringtext45
  5061  3A48                     __pstringtext45:	
  5062  3A48                     STR_51:	
  5063  3A48  3401               	retlw	1
  5064  3A49  3420               	retlw	32	;' '
  5065  3A4A  3420               	retlw	32	;' '
  5066  3A4B  3420               	retlw	32	;' '
  5067  3A4C  3420               	retlw	32	;' '
  5068  3A4D  3420               	retlw	32	;' '
  5069  3A4E  3420               	retlw	32	;' '
  5070  3A4F  3420               	retlw	32	;' '
  5071  3A50  3420               	retlw	32	;' '
  5072  3A51  3400               	retlw	0
  5073                           
  5074                           	psect	stringtext46
  5075  3A52                     __pstringtext46:	
  5076  3A52                     STR_58:	
  5077  3A52  3401               	retlw	1
  5078  3A53  3420               	retlw	32	;' '
  5079  3A54  3403               	retlw	3
  5080  3A55  3420               	retlw	32	;' '
  5081  3A56  3420               	retlw	32	;' '
  5082  3A57  3420               	retlw	32	;' '
  5083  3A58  3420               	retlw	32	;' '
  5084  3A59  3420               	retlw	32	;' '
  5085  3A5A  3400               	retlw	0
  5086                           
  5087                           	psect	stringtext47
  5088  3A5B                     __pstringtext47:	
  5089  3A5B                     STR_61:	
  5090  3A5B  3420               	retlw	32	;' '
  5091  3A5C  3403               	retlw	3
  5092  3A5D  3420               	retlw	32	;' '
  5093  3A5E  3420               	retlw	32	;' '
  5094  3A5F  3420               	retlw	32	;' '
  5095  3A60  3420               	retlw	32	;' '
  5096  3A61  3420               	retlw	32	;' '
  5097  3A62  3420               	retlw	32	;' '
  5098  3A63  3400               	retlw	0
  5099                           
  5100                           	psect	stringtext48
  5101  3A64                     __pstringtext48:	
  5102  3A64                     STR_17:	
  5103  3A64  3457               	retlw	87	;'W'
  5104  3A65  3420               	retlw	32	;' '
  5105  3A66  346D               	retlw	109	;'m'
  5106  3A67  3461               	retlw	97	;'a'
  5107  3A68  346E               	retlw	110	;'n'
  5108  3A69  3475               	retlw	117	;'u'
  5109  3A6A  3461               	retlw	97	;'a'
  5110  3A6B  346C               	retlw	108	;'l'
  5111  3A6C  3400               	retlw	0
  5112                           
  5113                           	psect	stringtext49
  5114  3A6D                     __pstringtext49:	
  5115  3A6D                     STR_47:	
  5116  3A6D  3420               	retlw	32	;' '
  5117  3A6E  3469               	retlw	105	;'i'
  5118  3A6F  346E               	retlw	110	;'n'
  5119  3A70  3463               	retlw	99	;'c'
  5120  3A71  3468               	retlw	104	;'h'
  5121  3A72  3420               	retlw	32	;' '
  5122  3A73  3403               	retlw	3
  5123  3A74  3400               	retlw	0
  5124                           
  5125                           	psect	stringtext50
  5126  3A75                     __pstringtext50:	
  5127  3A75                     STR_42:	
  5128  3A75  3457               	retlw	87	;'W'
  5129  3A76  3420               	retlw	32	;' '
  5130  3A77  346D               	retlw	109	;'m'
  5131  3A78  3461               	retlw	97	;'a'
  5132  3A79  346E               	retlw	110	;'n'
  5133  3A7A  342E               	retlw	46	;'.'
  5134  3A7B  3403               	retlw	3
  5135  3A7C  3400               	retlw	0
  5136                           
  5137                           	psect	stringtext51
  5138  3A7D                     __pstringtext51:	
  5139  3A7D                     STR_5:	
  5140  3A7D  3401               	retlw	1
  5141  3A7E  3420               	retlw	32	;' '
  5142  3A7F  3420               	retlw	32	;' '
  5143  3A80  3420               	retlw	32	;' '
  5144  3A81  3420               	retlw	32	;' '
  5145  3A82  3420               	retlw	32	;' '
  5146  3A83  3420               	retlw	32	;' '
  5147  3A84  3400               	retlw	0
  5148                           
  5149                           	psect	stringtext52
  5150  3A85                     __pstringtext52:	
  5151  3A85                     STR_24:	
  5152  3A85  3420               	retlw	32	;' '
  5153  3A86  346F               	retlw	111	;'o'
  5154  3A87  3466               	retlw	102	;'f'
  5155  3A88  3466               	retlw	102	;'f'
  5156  3A89  3420               	retlw	32	;' '
  5157  3A8A  3420               	retlw	32	;' '
  5158  3A8B  3420               	retlw	32	;' '
  5159  3A8C  3400               	retlw	0
  5160                           
  5161                           	psect	stringtext53
  5162  3A8D                     __pstringtext53:	
  5163  3A8D                     STR_35:	
  5164  3A8D  3420               	retlw	32	;' '
  5165  3A8E  3469               	retlw	105	;'i'
  5166  3A8F  346E               	retlw	110	;'n'
  5167  3A90  3463               	retlw	99	;'c'
  5168  3A91  3468               	retlw	104	;'h'
  5169  3A92  3420               	retlw	32	;' '
  5170  3A93  3420               	retlw	32	;' '
  5171  3A94  3400               	retlw	0
  5172                           
  5173                           	psect	stringtext54
  5174  3A95                     __pstringtext54:	
  5175  3A95                     STR_26:	
  5176  3A95  3420               	retlw	32	;' '
  5177  3A96  3461               	retlw	97	;'a'
  5178  3A97  3475               	retlw	117	;'u'
  5179  3A98  3474               	retlw	116	;'t'
  5180  3A99  346F               	retlw	111	;'o'
  5181  3A9A  3420               	retlw	32	;' '
  5182  3A9B  3420               	retlw	32	;' '
  5183  3A9C  3400               	retlw	0
  5184                           
  5185                           	psect	stringtext55
  5186  3A9D                     __pstringtext55:	
  5187  3A9D                     STR_2:	
  5188  3A9D  3453               	retlw	83	;'S'
  5189  3A9E  3465               	retlw	101	;'e'
  5190  3A9F  346E               	retlw	110	;'n'
  5191  3AA0  3473               	retlw	115	;'s'
  5192  3AA1  346F               	retlw	111	;'o'
  5193  3AA2  3472               	retlw	114	;'r'
  5194  3AA3  343A               	retlw	58	;':'
  5195  3AA4  3400               	retlw	0
  5196                           
  5197                           	psect	stringtext56
  5198  3AA5                     __pstringtext56:	
  5199  3AA5                     STR_38:	
  5200  3AA5  3420               	retlw	32	;' '
  5201  3AA6  346F               	retlw	111	;'o'
  5202  3AA7  3466               	retlw	102	;'f'
  5203  3AA8  3466               	retlw	102	;'f'
  5204  3AA9  3420               	retlw	32	;' '
  5205  3AAA  3403               	retlw	3
  5206  3AAB  3400               	retlw	0
  5207                           
  5208                           	psect	stringtext57
  5209  3AAC                     __pstringtext57:	
  5210  3AAC                     STR_40:	
  5211  3AAC  3420               	retlw	32	;' '
  5212  3AAD  3461               	retlw	97	;'a'
  5213  3AAE  3475               	retlw	117	;'u'
  5214  3AAF  3474               	retlw	116	;'t'
  5215  3AB0  346F               	retlw	111	;'o'
  5216  3AB1  3403               	retlw	3
  5217  3AB2  3400               	retlw	0
  5218                           
  5219                           	psect	stringtext58
  5220  3AB3                     __pstringtext58:	
  5221  3AB3                     STR_54:	
  5222  3AB3  3474               	retlw	116	;'t'
  5223  3AB4  3465               	retlw	101	;'e'
  5224  3AB5  346D               	retlw	109	;'m'
  5225  3AB6  3470               	retlw	112	;'p'
  5226  3AB7  342E               	retlw	46	;'.'
  5227  3AB8  3404               	retlw	4
  5228  3AB9  3400               	retlw	0
  5229                           
  5230                           	psect	stringtext59
  5231  3ABA                     __pstringtext59:	
  5232  3ABA                     STR_6:	
  5233  3ABA  3425               	retlw	37	;'%'
  5234  3ABB  3420               	retlw	32	;' '
  5235  3ABC  3420               	retlw	32	;' '
  5236  3ABD  3420               	retlw	32	;' '
  5237  3ABE  3420               	retlw	32	;' '
  5238  3ABF  3420               	retlw	32	;' '
  5239  3AC0  3400               	retlw	0
  5240                           
  5241                           	psect	stringtext60
  5242  3AC1                     __pstringtext60:	
  5243  3AC1                     STR_49:	
  5244  3AC1  3474               	retlw	116	;'t'
  5245  3AC2  3465               	retlw	101	;'e'
  5246  3AC3  346D               	retlw	109	;'m'
  5247  3AC4  3470               	retlw	112	;'p'
  5248  3AC5  342E               	retlw	46	;'.'
  5249  3AC6  3420               	retlw	32	;' '
  5250  3AC7  3400               	retlw	0
  5251                           
  5252                           	psect	stringtext61
  5253  3AC8                     __pstringtext61:	
  5254  3AC8                     STR_37:	
  5255  3AC8  3404               	retlw	4
  5256  3AC9  3443               	retlw	67	;'C'
  5257  3ACA  3468               	retlw	104	;'h'
  5258  3ACB  342E               	retlw	46	;'.'
  5259  3ACC  3420               	retlw	32	;' '
  5260  3ACD  3400               	retlw	0
  5261                           
  5262                           	psect	stringtext62
  5263  3ACE                     __pstringtext62:	
  5264  3ACE                     STR_87:	
  5265  3ACE  3449               	retlw	73	;'I'
  5266  3ACF  344E               	retlw	78	;'N'
  5267  3AD0  3420               	retlw	32	;' '
  5268  3AD1  3400               	retlw	0
  5269                           
  5270                           	psect	stringtext63
  5271  3AD2                     __pstringtext63:	
  5272  3AD2                     STR_3:	
  5273  3AD2  3401               	retlw	1
  5274  3AD3  3420               	retlw	32	;' '
  5275  3AD4  3402               	retlw	2
  5276  3AD5  3400               	retlw	0
  5277                           
  5278                           	psect	stringtext64
  5279  3AD6                     __pstringtext64:	
  5280  3AD6                     STR_8:	
  5281  3AD6  3456               	retlw	86	;'V'
  5282  3AD7  3420               	retlw	32	;' '
  5283  3AD8  3420               	retlw	32	;' '
  5284  3AD9  3400               	retlw	0
  5285                           
  5286                           	psect	stringtext65
  5287  3ADA                     __pstringtext65:	
  5288  3ADA                     STR_10:	
  5289  3ADA  3443               	retlw	67	;'C'
  5290  3ADB  3468               	retlw	104	;'h'
  5291  3ADC  3420               	retlw	32	;' '
  5292  3ADD  3400               	retlw	0
  5293                           
  5294                           	psect	stringtext66
  5295  3ADE                     __pstringtext66:	
  5296  3ADE                     STR_55:	
  5297  3ADE  3401               	retlw	1
  5298  3ADF  3403               	retlw	3
  5299  3AE0  3400               	retlw	0
  5300                           
  5301                           	psect	stringtext67
  5302  3AE1                     __pstringtext67:	
  5303  3AE1                     STR_50:	
  5304  3AE1  3401               	retlw	1
  5305  3AE2  3420               	retlw	32	;' '
  5306  3AE3  3400               	retlw	0
  5307                           
  5308                           	psect	stringtext68
  5309  3AE4                     __pstringtext68:	
  5310  3AE4                     STR_12:	
  5311  3AE4  3422               	retlw	34	;'"'
  5312  3AE5  3420               	retlw	32	;' '
  5313  3AE6  3400               	retlw	0
  5314                           
  5315                           	psect	stringtext69
  5316  3AE7                     __pstringtext69:	
  5317  3AE7                     STR_11:	
  5318  3AE7  343A               	retlw	58	;':'
  5319  3AE8  3420               	retlw	32	;' '
  5320  3AE9  3400               	retlw	0
  5321                           
  5322                           	psect	stringtext70
  5323  3AEA                     __pstringtext70:	
  5324  3AEA                     STR_15:	
  5325  3AEA  3420               	retlw	32	;' '
  5326  3AEB  3428               	retlw	40	;'('
  5327  3AEC  3400               	retlw	0
  5328                           
  5329                           	psect	stringtext71
  5330  3AED                     __pstringtext71:	
  5331  3AED                     STR_16:	
  5332  3AED  3457               	retlw	87	;'W'
  5333  3AEE  3429               	retlw	41	;')'
  5334  3AEF  3400               	retlw	0
  5335                           
  5336                           	psect	stringtext72
  5337  3AF0                     __pstringtext72:	
  5338  3AF0                     STR_4:	
  5339  3AF0  3401               	retlw	1
  5340  3AF1  3400               	retlw	0
  5341                           
  5342                           	psect	stringtext73
  5343  0000                     __pstringtext73:	
  5344  3AB8                     
  5345                           ; #config settings
  5346  0000                     
  5347                           	psect	cinit
  5348  0070                     start_initialization:	
  5349  0070                     __initialization:		;BIGRAM
  5350                           
  5351                           ; Initialize objects allocated to BANK1
  5352  0070  0141               	movlb	1	; select bank1
  5353  0071  3187  27FA  3180   	fcall	__pidataBANK1	;fetch initializer
  5354  0074  00ED               	movwf	__pdataBANK1& (0+127)
  5355                           
  5356                           ; Initialize objects allocated to BANK2
  5357  0075  0142               	movlb	2	; select bank2
  5358  0076  3187  27FB  3180   	fcall	__pidataBANK2	;fetch initializer
  5359  0079  00EF               	movwf	__pdataBANK2& (0+127)
  5360                           
  5361                           ; Initialize objects allocated to BANK4
  5362  007A  3024               	movlw	low __pidataBANK4
  5363  007B  0084               	movwf	4
  5364  007C  30B3               	movlw	(high __pidataBANK4)| (0+128)
  5365  007D  0085               	movwf	5
  5366  007E  3064               	movlw	low __pdataBANK4
  5367  007F  0086               	movwf	6
  5368  0080  3002               	movlw	high __pdataBANK4
  5369  0081  0087               	movwf	7
  5370  0082  3000               	movlw	0
  5371  0083  00FF               	movwf	btemp+1
  5372  0084  300C               	movlw	12
  5373  0085  31B3  2318  3180   	fcall	init_ram
  5374                           
  5375                           ; Initialize objects allocated to BANK6
  5376  0088  3000               	movlw	low __pidataBANK6
  5377  0089  0084               	movwf	4
  5378  008A  30A0               	movlw	(high __pidataBANK6)| (0+128)
  5379  008B  0085               	movwf	5
  5380  008C  3020               	movlw	low __pdataBANK6
  5381  008D  0086               	movwf	6
  5382  008E  3003               	movlw	high __pdataBANK6
  5383  008F  0087               	movwf	7
  5384  0090  3000               	movlw	0
  5385  0091  00FF               	movwf	btemp+1
  5386  0092  3020               	movlw	32
  5387  0093  31B3  2318  3180   	fcall	init_ram
  5388                           
  5389                           ; Clear objects allocated to BIGRAM
  5390  0096  304A               	movlw	low (0+10058)
  5391  0097  0084               	movwf	4
  5392  0098  3027               	movlw	high (0+10058)
  5393  0099  0085               	movwf	5
  5394  009A  30A6               	movlw	166
  5395  009B  00FE               	movwf	btemp
  5396  009C  3000               	movlw	0
  5397  009D  00FF               	movwf	btemp+1
  5398  009E  31B3  230C  3180   	fcall	clear_ram0
  5399                           
  5400                           ; Clear objects allocated to COMMON
  5401  00A1  01FC               	clrf	__pbssCOMMON& (0+127)
  5402  00A2  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  5403                           
  5404                           ; Clear objects allocated to BANK1
  5405  00A3  0141               	movlb	1	; select bank1
  5406  00A4  01EB               	clrf	__pbssBANK1& (0+127)
  5407  00A5  01EC               	clrf	(__pbssBANK1+1)& (0+127)
  5408                           
  5409                           ; Clear objects allocated to BANK2
  5410  00A6  305C               	movlw	low __pbssBANK2
  5411  00A7  0084               	movwf	4
  5412  00A8  3001               	movlw	high __pbssBANK2
  5413  00A9  0085               	movwf	5
  5414  00AA  3013               	movlw	19
  5415  00AB  00FE               	movwf	btemp
  5416  00AC  3000               	movlw	0
  5417  00AD  00FF               	movwf	btemp+1
  5418  00AE  31B3  230C  3180   	fcall	clear_ram0
  5419                           
  5420                           ; Clear objects allocated to BANK3
  5421  00B1  30E0               	movlw	low __pbssBANK3
  5422  00B2  0084               	movwf	4
  5423  00B3  3001               	movlw	high __pbssBANK3
  5424  00B4  0085               	movwf	5
  5425  00B5  3010               	movlw	16
  5426  00B6  00FE               	movwf	btemp
  5427  00B7  3000               	movlw	0
  5428  00B8  00FF               	movwf	btemp+1
  5429  00B9  31B3  230C  3180   	fcall	clear_ram0
  5430                           
  5431                           ; Clear objects allocated to BANK4
  5432  00BC  3020               	movlw	low __pbssBANK4
  5433  00BD  0084               	movwf	4
  5434  00BE  3002               	movlw	high __pbssBANK4
  5435  00BF  0085               	movwf	5
  5436  00C0  3027               	movlw	39
  5437  00C1  00FE               	movwf	btemp
  5438  00C2  3000               	movlw	0
  5439  00C3  00FF               	movwf	btemp+1
  5440  00C4  31B3  230C  3180   	fcall	clear_ram0
  5441                           
  5442                           ; Clear objects allocated to BANK5
  5443  00C7  30A0               	movlw	low __pbssBANK5
  5444  00C8  0084               	movwf	4
  5445  00C9  3002               	movlw	high __pbssBANK5
  5446  00CA  0085               	movwf	5
  5447  00CB  3038               	movlw	56
  5448  00CC  00FE               	movwf	btemp
  5449  00CD  3000               	movlw	0
  5450  00CE  00FF               	movwf	btemp+1
  5451  00CF  31B3  230C         	fcall	clear_ram0
  5452  00D1                     end_of_initialization:	
  5453                           ;End of C runtime variable initialization code
  5454                           
  5455  00D1                     __end_of__initialization:	
  5456  00D1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5457  00D2  0140               	movlb	0
  5458  00D3  31AC  2C40         	ljmp	_main	;jump to C main() function
  5459                           
  5460                           	psect	bssCOMMON
  5461  007C                     __pbssCOMMON:	
  5462  007C                     _tail:	
  5463  007C                     	ds	1
  5464  007D                     _pbState:	
  5465  007D                     	ds	1
  5466                           
  5467                           	psect	bssBANK1
  5468  00EB                     __pbssBANK1:	
  5469  00EB                     _selectedChannel:	
  5470  00EB                     	ds	1
  5471  00EC                     _curRotState:	
  5472  00EC                     	ds	1
  5473                           
  5474                           	psect	dataBANK1
  5475  00ED                     __pdataBANK1:	
  5476  00ED                     _g_screenRefresh:	
  5477  00ED                     	ds	1
  5478                           
  5479                           	psect	bssBANK2
  5480  015C                     __pbssBANK2:	
  5481  015C                     _userActivity:	
  5482  015C                     	ds	4
  5483  0160                     controller@idle:	
  5484  0160                     	ds	1
  5485  0161                     checkSensor@state:	
  5486  0161                     	ds	1
  5487  0162                     paging@lastDir:	
  5488  0162                     	ds	1
  5489  0163                     menu@state:	
  5490  0163                     	ds	1
  5491  0164                     menu@sleep:	
  5492  0164                     	ds	1
  5493  0165                     _head:	
  5494  0165                     	ds	1
  5495  0166                     setup@page:	
  5496  0166                     	ds	1
  5497  0167                     channelSetup@page:	
  5498  0167                     	ds	1
  5499  0168                     channelView@page:	
  5500  0168                     	ds	1
  5501  0169                     statusView@page:	
  5502  0169                     	ds	1
  5503  016A                     uartReceiveISR@checksum:	
  5504  016A                     	ds	1
  5505  016B                     _rxCount:	
  5506  016B                     	ds	1
  5507  016C                     _rotDir:	
  5508  016C                     	ds	1
  5509  016D                     _uartDataReadyFlag:	
  5510  016D                     	ds	1
  5511  016E                     _tick10ms:	
  5512  016E                     	ds	1
  5513                           
  5514                           	psect	dataBANK2
  5515  016F                     __pdataBANK2:	
  5516  016F                     statusView@prevSensorStat:	
  5517  016F                     	ds	1
  5518                           
  5519                           	psect	bssBANK3
  5520  01E0                     __pbssBANK3:	
  5521  01E0                     getAnalogValues@avgV:	
  5522  01E0                     	ds	2
  5523  01E2                     getAnalogValues@avgT:	
  5524  01E2                     	ds	2
  5525  01E4                     _rxOErrCount:	
  5526  01E4                     	ds	1
  5527  01E5                     _rxFErrCount:	
  5528  01E5                     	ds	1
  5529  01E6                     _str:	
  5530  01E6                     	ds	10
  5531                           
  5532                           	psect	bssBANK4
  5533  0220                     __pbssBANK4:	
  5534  0220                     _errorMessageQueue:	
  5535  0220                     	ds	10
  5536  022A                     controller@dutyCycleTimer:	
  5537  022A                     	ds	4
  5538  022E                     checkSensor@sensorTimeout:	
  5539  022E                     	ds	4
  5540  0232                     _tick100ms:	
  5541  0232                     	ds	4
  5542  0236                     getAnalogValues@avgI:	
  5543  0236                     	ds	2
  5544  0238                     _dataPacket:	
  5545  0238                     	ds	15
  5546                           
  5547                           	psect	dataBANK4
  5548  0264                     __pdataBANK4:	
  5549  0264                     checkSensor@sensorUpdateInterval:	
  5550  0264                     	ds	4
  5551  0268                     OLED_print_xy@F7967:	
  5552  0268                     	ds	4
  5553  026C                     OLED_setCursor@F7959:	
  5554  026C                     	ds	4
  5555                           
  5556                           	psect	bssBANK5
  5557  02A0                     __pbssBANK5:	
  5558  02A0                     _virtChannels:	
  5559  02A0                     	ds	36
  5560  02C4                     uartReceiveISR@buffer:	
  5561  02C4                     	ds	20
  5562                           
  5563                           	psect	dataBANK6
  5564  0320                     __pdataBANK6:	
  5565  0320                     OLED_loadSpecialChars@F7970:	
  5566  0320                     	ds	32
  5567                           
  5568                           	psect	inittext
  5569  3318                     init_ram:	
  5570  3318  00FE               	movwf	126
  5571  3319                     initloop:	
  5572  3319  0012               	moviw fsr0++
  5573  331A  001E               	movwi fsr1++
  5574  331B  3001               	movlw	1
  5575  331C  02FE               	subwf	126,f
  5576  331D  3000               	movlw	0
  5577  331E  3BFF               	subwfb	127,f
  5578  331F  087F               	movf	127,w
  5579  3320  047E               	iorwf	126,w
  5580  3321  1903               	btfsc	3,2
  5581  3322  3400               	retlw	0
  5582  3323  2B19               	goto	initloop
  5583                           
  5584                           	psect	clrtext
  5585  330C                     clear_ram0:	
  5586                           ;	Called with FSR0 containing the base address, and
  5587                           ;	btemp/btemp+1 has the size to clear
  5588                           
  5589  330C  0064               	clrwdt	;clear the watchdog before getting into this loop
  5590  330D                     clrloop0:	
  5591  330D  0180               	clrf	0	;clear RAM location pointed to by FSR
  5592  330E  3101               	addfsr 0,1
  5593  330F  3001               	movlw	1
  5594  3310  02FE               	subwf	126,f
  5595  3311  3000               	movlw	0
  5596  3312  3BFF               	subwfb	127,f
  5597  3313  087F               	movf	127,w
  5598  3314  047E               	iorwf	126,w
  5599  3315  1903               	btfsc	3,2
  5600  3316  3400               	retlw	0	;all done for this memory range, return
  5601  3317  2B0D               	goto	clrloop0	;have we reached the end yet?
  5602                           
  5603                           	psect	cstackBANK4
  5604  0247                     __pcstackBANK4:	
  5605  0247                     channelThing@total:	
  5606                           
  5607                           ; 4 bytes @ 0x0
  5608  0247                     	ds	4
  5609  024B                     channelThing@totalGrpA:	
  5610                           
  5611                           ; 4 bytes @ 0x4
  5612  024B                     	ds	4
  5613  024F                     channelThing@totalGrpB:	
  5614                           
  5615                           ; 4 bytes @ 0x8
  5616  024F                     	ds	4
  5617  0253                     channelThing@grpA:	
  5618                           
  5619                           ; 4 bytes @ 0xC
  5620  0253                     	ds	4
  5621  0257                     channelThing@numGrpA:	
  5622                           
  5623                           ; 1 bytes @ 0x10
  5624  0257                     	ds	1
  5625  0258                     channelThing@numGrpB:	
  5626                           
  5627                           ; 1 bytes @ 0x11
  5628  0258                     	ds	1
  5629  0259                     channelThing@grpB:	
  5630                           
  5631                           ; 4 bytes @ 0x12
  5632  0259                     	ds	4
  5633  025D                     channelThing@n:	
  5634                           
  5635                           ; 1 bytes @ 0x16
  5636  025D                     	ds	1
  5637  025E                     main@sysCheckInterval:	
  5638                           
  5639                           ; 4 bytes @ 0x17
  5640  025E                     	ds	4
  5641  0262                     main@initDone:	
  5642                           
  5643                           ; 1 bytes @ 0x1B
  5644  0262                     	ds	1
  5645  0263                     main@idle:	
  5646                           
  5647                           ; 1 bytes @ 0x1C
  5648  0263                     	ds	1
  5649                           
  5650                           	psect	cstackBANK3
  5651  01A0                     __pcstackBANK3:	
  5652  01A0                     qsort@stack:	
  5653                           
  5654                           ; 64 bytes @ 0x0
  5655  01A0                     	ds	64
  5656                           
  5657                           	psect	cstackBANK2
  5658  0120                     __pcstackBANK2:	
  5659  0120                     qsort@xbuf:	
  5660                           
  5661                           ; 60 bytes @ 0x0
  5662  0120                     	ds	60
  5663                           
  5664                           	psect	cstackBANK1
  5665  00A0                     __pcstackBANK1:	
  5666  00A0                     ?___flsub:	
  5667  00A0                     ___flsub@a:	
  5668                           ; 4 bytes @ 0x0
  5669                           
  5670  00A0                     ___fldiv@rem:	
  5671                           ; 4 bytes @ 0x0
  5672                           
  5673                           
  5674                           ; 4 bytes @ 0x0
  5675  00A0                     	ds	4
  5676  00A4                     ___fldiv@sign:	
  5677  00A4                     ___flsub@b:	
  5678                           ; 1 bytes @ 0x4
  5679                           
  5680                           
  5681                           ; 4 bytes @ 0x4
  5682  00A4                     	ds	1
  5683  00A5                     ___fldiv@new_exp:	
  5684                           
  5685                           ; 2 bytes @ 0x5
  5686  00A5                     	ds	2
  5687  00A7                     ___fldiv@grs:	
  5688                           
  5689                           ; 4 bytes @ 0x7
  5690  00A7                     	ds	1
  5691  00A8                     ?___fltol:	
  5692  00A8                     ___fltol@f1:	
  5693                           ; 4 bytes @ 0x8
  5694                           
  5695                           
  5696                           ; 4 bytes @ 0x8
  5697  00A8                     	ds	3
  5698  00AB                     ___fldiv@bexp:	
  5699                           
  5700                           ; 1 bytes @ 0xB
  5701  00AB                     	ds	1
  5702  00AC                     ??___fltol:	
  5703  00AC                     ___fldiv@aexp:	
  5704                           ; 1 bytes @ 0xC
  5705                           
  5706                           
  5707                           ; 1 bytes @ 0xC
  5708  00AC                     	ds	1
  5709  00AD                     ?___flge:	
  5710  00AD                     ??_calcRequiredPower:	
  5711                           ; 1 bit 
  5712                           
  5713  00AD                     ___flge@ff1:	
  5714                           ; 1 bytes @ 0xD
  5715                           
  5716  00AD                     _getAnalogValues$2557:	
  5717                           ; 4 bytes @ 0xD
  5718                           
  5719                           
  5720                           ; 4 bytes @ 0xD
  5721  00AD                     	ds	4
  5722  00B1                     ___fltol@sign1:	
  5723  00B1                     getAnalogValues@adc:	
  5724                           ; 1 bytes @ 0x11
  5725                           
  5726  00B1                     calcRequiredPower@p:	
  5727                           ; 2 bytes @ 0x11
  5728                           
  5729  00B1                     ___flge@ff2:	
  5730                           ; 4 bytes @ 0x11
  5731                           
  5732                           
  5733                           ; 4 bytes @ 0x11
  5734  00B1                     	ds	1
  5735  00B2                     ___fltol@exp1:	
  5736                           
  5737                           ; 1 bytes @ 0x12
  5738  00B2                     	ds	1
  5739  00B3                     ?_itoa:	
  5740  00B3                     ?_sortDC:	
  5741                           ; 1 bytes @ 0x13
  5742                           
  5743  00B3                     ?_sortDCRev:	
  5744                           ; 2 bytes @ 0x13
  5745                           
  5746  00B3                     ?_sortCur:	
  5747                           ; 2 bytes @ 0x13
  5748                           
  5749  00B3                     sortDC@cmp1:	
  5750                           ; 2 bytes @ 0x13
  5751                           
  5752  00B3                     sortDCRev@cmp1:	
  5753                           ; 2 bytes @ 0x13
  5754                           
  5755  00B3                     sortCur@cmp1:	
  5756                           ; 2 bytes @ 0x13
  5757                           
  5758  00B3                     itoa@str:	
  5759                           ; 2 bytes @ 0x13
  5760                           
  5761                           
  5762                           ; 2 bytes @ 0x13
  5763  00B3                     	ds	2
  5764  00B5                     ??___flge:	
  5765  00B5                     itoa@value:	
  5766                           ; 1 bytes @ 0x15
  5767                           
  5768  00B5                     sortDC@cmp2:	
  5769                           ; 1 bytes @ 0x15
  5770                           
  5771  00B5                     sortDCRev@cmp2:	
  5772                           ; 2 bytes @ 0x15
  5773                           
  5774  00B5                     sortCur@cmp2:	
  5775                           ; 2 bytes @ 0x15
  5776                           
  5777  00B5                     calcRequiredPower@Rth:	
  5778                           ; 2 bytes @ 0x15
  5779                           
  5780                           
  5781                           ; 4 bytes @ 0x15
  5782  00B5                     	ds	1
  5783  00B6                     itoa@width:	
  5784                           
  5785                           ; 1 bytes @ 0x16
  5786  00B6                     	ds	1
  5787  00B7                     ??_itoa:	
  5788  00B7                     ??_sortDC:	
  5789                           ; 1 bytes @ 0x17
  5790                           
  5791  00B7                     ??_sortDCRev:	
  5792                           ; 1 bytes @ 0x17
  5793                           
  5794  00B7                     sortCur@a:	
  5795                           ; 1 bytes @ 0x17
  5796                           
  5797                           
  5798                           ; 2 bytes @ 0x17
  5799  00B7                     	ds	2
  5800  00B9                     ??_checkSensor:	
  5801  00B9                     ??_checkChannelStatus:	
  5802                           ; 1 bytes @ 0x19
  5803                           
  5804  00B9                     ?_ftoa:	
  5805                           ; 1 bytes @ 0x19
  5806                           
  5807  00B9                     ?_spinInput:	
  5808                           ; 1 bytes @ 0x19
  5809                           
  5810  00B9                     sortDC@a:	
  5811                           ; 1 bytes @ 0x19
  5812                           
  5813  00B9                     sortDCRev@a:	
  5814                           ; 1 bytes @ 0x19
  5815                           
  5816  00B9                     spinInput@input:	
  5817                           ; 1 bytes @ 0x19
  5818                           
  5819  00B9                     sortCur@b:	
  5820                           ; 2 bytes @ 0x19
  5821                           
  5822  00B9                     ftoa@fValue:	
  5823                           ; 2 bytes @ 0x19
  5824                           
  5825  00B9                     _calcRequiredPower$2551:	
  5826                           ; 4 bytes @ 0x19
  5827                           
  5828                           
  5829                           ; 4 bytes @ 0x19
  5830  00B9                     	ds	1
  5831  00BA                     sortDC@b:	
  5832  00BA                     sortDCRev@b:	
  5833                           ; 1 bytes @ 0x1A
  5834                           
  5835                           
  5836                           ; 1 bytes @ 0x1A
  5837  00BA                     	ds	1
  5838  00BB                     ?_qsort:	
  5839  00BB                     qsort@nel:	
  5840                           ; 1 bytes @ 0x1B
  5841                           
  5842  00BB                     spinInput@min:	
  5843                           ; 2 bytes @ 0x1B
  5844                           
  5845                           
  5846                           ; 4 bytes @ 0x1B
  5847  00BB                     	ds	2
  5848  00BD                     ftoa@width:	
  5849  00BD                     checkChannelStatus@adc:	
  5850                           ; 1 bytes @ 0x1D
  5851                           
  5852  00BD                     qsort@width:	
  5853                           ; 2 bytes @ 0x1D
  5854                           
  5855  00BD                     _calcRequiredPower$2552:	
  5856                           ; 2 bytes @ 0x1D
  5857                           
  5858                           
  5859                           ; 4 bytes @ 0x1D
  5860  00BD                     	ds	1
  5861  00BE                     ??_systemCheck:	
  5862  00BE                     ftoa@prec:	
  5863                           ; 1 bytes @ 0x1E
  5864                           
  5865                           
  5866                           ; 1 bytes @ 0x1E
  5867  00BE                     	ds	1
  5868  00BF                     ??_ftoa:	
  5869  00BF                     qsort@compar:	
  5870                           ; 1 bytes @ 0x1F
  5871                           
  5872  00BF                     spinInput@max:	
  5873                           ; 2 bytes @ 0x1F
  5874                           
  5875  00BF                     _checkChannelStatus$1841:	
  5876                           ; 4 bytes @ 0x1F
  5877                           
  5878                           
  5879                           ; 4 bytes @ 0x1F
  5880  00BF                     	ds	2
  5881  00C1                     ??_qsort:	
  5882  00C1                     ftoa@len:	
  5883                           ; 1 bytes @ 0x21
  5884                           
  5885  00C1                     _calcRequiredPower$2553:	
  5886                           ; 1 bytes @ 0x21
  5887                           
  5888                           
  5889                           ; 4 bytes @ 0x21
  5890  00C1                     	ds	1
  5891  00C2                     ftoa@sign:	
  5892  00C2                     systemCheck@str:	
  5893                           ; 1 bytes @ 0x22
  5894                           
  5895                           
  5896                           ; 3 bytes @ 0x22
  5897  00C2                     	ds	1
  5898  00C3                     ftoa@intValue:	
  5899  00C3                     spinInput@step:	
  5900                           ; 1 bytes @ 0x23
  5901                           
  5902  00C3                     _checkChannelStatus$1842:	
  5903                           ; 4 bytes @ 0x23
  5904                           
  5905                           
  5906                           ; 4 bytes @ 0x23
  5907  00C3                     	ds	1
  5908  00C4                     ftoa@w:	
  5909                           
  5910                           ; 1 bytes @ 0x24
  5911  00C4                     	ds	1
  5912  00C5                     systemCheck@n:	
  5913  00C5                     ftoa@pos:	
  5914                           ; 1 bytes @ 0x25
  5915                           
  5916  00C5                     _calcRequiredPower$2554:	
  5917                           ; 1 bytes @ 0x25
  5918                           
  5919                           
  5920                           ; 4 bytes @ 0x25
  5921  00C5                     	ds	1
  5922  00C6                     ftoa@str:	
  5923  00C6                     qsort@vbase:	
  5924                           ; 1 bytes @ 0x26
  5925                           
  5926                           
  5927                           ; 1 bytes @ 0x26
  5928  00C6                     	ds	1
  5929  00C7                     ??_statusView:	
  5930  00C7                     ??_channelView:	
  5931                           ; 1 bytes @ 0x27
  5932                           
  5933  00C7                     ??_channelSetup:	
  5934                           ; 1 bytes @ 0x27
  5935                           
  5936  00C7                     ??_setup:	
  5937                           ; 1 bytes @ 0x27
  5938                           
  5939  00C7                     spinInput@dir:	
  5940                           ; 1 bytes @ 0x27
  5941                           
  5942  00C7                     checkChannelStatus@samples:	
  5943                           ; 1 bytes @ 0x27
  5944                           
  5945  00C7                     qsort@x:	
  5946                           ; 1 bytes @ 0x27
  5947                           
  5948                           
  5949                           ; 1 bytes @ 0x27
  5950  00C7                     	ds	1
  5951  00C8                     ??_setOutputPower:	
  5952  00C8                     ??_setLensDia:	
  5953                           ; 1 bytes @ 0x28
  5954                           
  5955  00C8                     ??_setDPOffset:	
  5956                           ; 1 bytes @ 0x28
  5957                           
  5958  00C8                     ??_setSkyTemp:	
  5959                           ; 1 bytes @ 0x28
  5960                           
  5961  00C8                     ??_setFudgeFactor:	
  5962                           ; 1 bytes @ 0x28
  5963                           
  5964  00C8                     qsort@base:	
  5965                           ; 1 bytes @ 0x28
  5966                           
  5967  00C8                     checkChannelStatus@avg:	
  5968                           ; 1 bytes @ 0x28
  5969                           
  5970                           
  5971                           ; 2 bytes @ 0x28
  5972  00C8                     	ds	1
  5973  00C9                     qsort@l:	
  5974  00C9                     _calcRequiredPower$2555:	
  5975                           ; 2 bytes @ 0x29
  5976                           
  5977                           
  5978                           ; 4 bytes @ 0x29
  5979  00C9                     	ds	1
  5980  00CA                     checkChannelStatus@current:	
  5981                           
  5982                           ; 4 bytes @ 0x2A
  5983  00CA                     	ds	1
  5984  00CB                     channelSetup@chData:	
  5985  00CB                     qsort@r:	
  5986                           ; 2 bytes @ 0x2B
  5987                           
  5988                           
  5989                           ; 2 bytes @ 0x2B
  5990  00CB                     	ds	1
  5991  00CC                     setOutputPower@chData:	
  5992  00CC                     _setLensDia$2549:	
  5993                           ; 2 bytes @ 0x2C
  5994                           
  5995                           
  5996                           ; 4 bytes @ 0x2C
  5997  00CC                     	ds	1
  5998  00CD                     qsort@s:	
  5999  00CD                     _channelView$2548:	
  6000                           ; 2 bytes @ 0x2D
  6001                           
  6002  00CD                     _calcRequiredPower$2556:	
  6003                           ; 4 bytes @ 0x2D
  6004                           
  6005                           
  6006                           ; 4 bytes @ 0x2D
  6007  00CD                     	ds	1
  6008  00CE                     checkChannelStatus@channel:	
  6009                           
  6010                           ; 1 bytes @ 0x2E
  6011  00CE                     	ds	1
  6012  00CF                     checkChannelStatus@chData:	
  6013  00CF                     qsort@i:	
  6014                           ; 2 bytes @ 0x2F
  6015                           
  6016                           
  6017                           ; 2 bytes @ 0x2F
  6018  00CF                     	ds	2
  6019  00D1                     channelView@n:	
  6020  00D1                     qsort@j:	
  6021                           ; 1 bytes @ 0x31
  6022                           
  6023  00D1                     calcRequiredPower@d:	
  6024                           ; 2 bytes @ 0x31
  6025                           
  6026                           
  6027                           ; 4 bytes @ 0x31
  6028  00D1                     	ds	1
  6029  00D2                     ??_menu:	
  6030                           
  6031                           ; 1 bytes @ 0x32
  6032  00D2                     	ds	1
  6033  00D3                     ??_channelThing:	
  6034                           
  6035                           ; 1 bytes @ 0x33
  6036  00D3                     	ds	2
  6037  00D5                     calcRequiredPower@phi:	
  6038                           
  6039                           ; 4 bytes @ 0x35
  6040  00D5                     	ds	1
  6041  00D6                     menu@page:	
  6042                           
  6043                           ; 1 bytes @ 0x36
  6044  00D6                     	ds	1
  6045  00D7                     menu@pb:	
  6046                           
  6047                           ; 1 bytes @ 0x37
  6048  00D7                     	ds	1
  6049  00D8                     menu@timeout:	
  6050                           
  6051                           ; 1 bytes @ 0x38
  6052  00D8                     	ds	1
  6053  00D9                     menu@func:	
  6054  00D9                     calcRequiredPower@A:	
  6055                           ; 2 bytes @ 0x39
  6056                           
  6057                           
  6058                           ; 4 bytes @ 0x39
  6059  00D9                     	ds	2
  6060  00DB                     menu@nextState:	
  6061                           
  6062                           ; 1 bytes @ 0x3B
  6063  00DB                     	ds	2
  6064  00DD                     _calcRequiredPower$2550:	
  6065                           
  6066                           ; 4 bytes @ 0x3D
  6067  00DD                     	ds	4
  6068  00E1                     calcRequiredPower@T1:	
  6069                           
  6070                           ; 4 bytes @ 0x41
  6071  00E1                     	ds	4
  6072  00E5                     calcRequiredPower@T2:	
  6073                           
  6074                           ; 4 bytes @ 0x45
  6075  00E5                     	ds	4
  6076  00E9                     calcRequiredPower@n:	
  6077                           
  6078                           ; 1 bytes @ 0x49
  6079  00E9                     	ds	1
  6080  00EA                     ??_main:	
  6081                           
  6082                           ; 1 bytes @ 0x4A
  6083  00EA                     	ds	1
  6084                           
  6085                           	psect	cstackCOMMON
  6086  0070                     __pcstackCOMMON:	
  6087  0070                     ?_initialize:	
  6088  0070                     ?_OLED_init:	
  6089                           ; 1 bytes @ 0x0
  6090                           
  6091  0070                     ?_OLED_loadSpecialChars:	
  6092                           ; 1 bytes @ 0x0
  6093                           
  6094  0070                     ?_OLED_command:	
  6095                           ; 1 bytes @ 0x0
  6096                           
  6097  0070                     ?_initGlobalData:	
  6098                           ; 1 bytes @ 0x0
  6099                           
  6100  0070                     ?_getAnalogValues:	
  6101                           ; 1 bytes @ 0x0
  6102                           
  6103  0070                     ?_systemCheck:	
  6104                           ; 1 bytes @ 0x0
  6105                           
  6106  0070                     ?_checkSensor:	
  6107                           ; 1 bytes @ 0x0
  6108                           
  6109  0070                     ?_calcRequiredPower:	
  6110                           ; 1 bytes @ 0x0
  6111                           
  6112  0070                     ?_checkChannelStatus:	
  6113                           ; 1 bytes @ 0x0
  6114                           
  6115  0070                     ?_channelThing:	
  6116                           ; 1 bytes @ 0x0
  6117                           
  6118  0070                     ?_controller:	
  6119                           ; 1 bytes @ 0x0
  6120                           
  6121  0070                     ?_getLastError:	
  6122                           ; 1 bytes @ 0x0
  6123                           
  6124  0070                     ?_viewErrorMessage:	
  6125                           ; 1 bytes @ 0x0
  6126                           
  6127  0070                     ?_menu:	
  6128                           ; 1 bytes @ 0x0
  6129                           
  6130  0070                     ?_pushButtonISR:	
  6131                           ; 1 bytes @ 0x0
  6132                           
  6133  0070                     ??_pushButtonISR:	
  6134                           ; 1 bytes @ 0x0
  6135                           
  6136  0070                     ?_rotISR:	
  6137                           ; 1 bytes @ 0x0
  6138                           
  6139  0070                     ??_rotISR:	
  6140                           ; 1 bytes @ 0x0
  6141                           
  6142  0070                     ?_uartReceiveISR:	
  6143                           ; 1 bytes @ 0x0
  6144                           
  6145  0070                     ?_strncpy:	
  6146                           ; 1 bytes @ 0x0
  6147                           
  6148  0070                     ?_returnToPage:	
  6149                           ; 1 bytes @ 0x0
  6150                           
  6151  0070                     ?_main:	
  6152                           ; 1 bytes @ 0x0
  6153                           
  6154  0070                     ?_OLED_off:	
  6155                           ; 1 bytes @ 0x0
  6156                           
  6157  0070                     ?_OLED_write4bits:	
  6158                           ; 1 bytes @ 0x0
  6159                           
  6160  0070                     ?_OLED_waitForReady:	
  6161                           ; 1 bytes @ 0x0
  6162                           
  6163  0070                     ?_OLED_write:	
  6164                           ; 1 bytes @ 0x0
  6165                           
  6166  0070                     ?_ISR:	
  6167                           ; 1 bytes @ 0x0
  6168                           
  6169  0070                     ?_getRotDir:	
  6170                           ; 1 bytes @ 0x0
  6171                           
  6172  0070                     ?_getPB:	
  6173                           ; 1 bytes @ 0x0
  6174                           
  6175  0070                     ?_uartSendByte:	
  6176                           ; 1 bytes @ 0x0
  6177                           
  6178  0070                     ?_uartReset:	
  6179                           ; 1 bytes @ 0x0
  6180                           
  6181  0070                     ?_statusView:	
  6182                           ; 1 bytes @ 0x0
  6183                           
  6184  0070                     ?_channelView:	
  6185                           ; 1 bytes @ 0x0
  6186                           
  6187  0070                     ?_channelSetup:	
  6188                           ; 1 bytes @ 0x0
  6189                           
  6190  0070                     ?_setOutputPower:	
  6191                           ; 1 bytes @ 0x0
  6192                           
  6193  0070                     ?_setLensDia:	
  6194                           ; 1 bytes @ 0x0
  6195                           
  6196  0070                     ?_setup:	
  6197                           ; 1 bytes @ 0x0
  6198                           
  6199  0070                     ?_setDPOffset:	
  6200                           ; 1 bytes @ 0x0
  6201                           
  6202  0070                     ?_setSkyTemp:	
  6203                           ; 1 bytes @ 0x0
  6204                           
  6205  0070                     ?_setFudgeFactor:	
  6206                           ; 1 bytes @ 0x0
  6207                           
  6208  0070                     ?_error:	
  6209                           ; 1 bytes @ 0x0
  6210                           
  6211  0070                     strncpy@s:	
  6212                           ; 1 bytes @ 0x0
  6213                           
  6214                           
  6215                           ; 1 bytes @ 0x0
  6216  0070                     	ds	1
  6217  0071                     pushButtonISR@time:	
  6218  0071                     strncpy@n:	
  6219                           ; 1 bytes @ 0x1
  6220                           
  6221                           
  6222                           ; 2 bytes @ 0x1
  6223  0071                     	ds	2
  6224  0073                     ??_strncpy:	
  6225                           
  6226                           ; 1 bytes @ 0x3
  6227  0073                     	ds	1
  6228  0074                     strncpy@d:	
  6229                           
  6230                           ; 1 bytes @ 0x4
  6231  0074                     	ds	1
  6232  0075                     strncpy@cp:	
  6233                           
  6234                           ; 1 bytes @ 0x5
  6235  0075                     	ds	1
  6236  0076                     ??_uartReceiveISR:	
  6237                           
  6238                           ; 1 bytes @ 0x6
  6239  0076                     	ds	1
  6240  0077                     rotISR@input:	
  6241                           
  6242                           ; 1 bytes @ 0x7
  6243  0077                     	ds	1
  6244  0078                     ??_ISR:	
  6245                           
  6246                           ; 1 bytes @ 0x8
  6247  0078                     	ds	4
  6248                           
  6249                           	psect	cstackBANK0
  6250  0020                     __pcstackBANK0:	
  6251  0020                     ?___fleq:	
  6252  0020                     ??_initialize:	
  6253                           ; 1 bit 
  6254                           
  6255  0020                     ??_getLastError:	
  6256                           ; 1 bytes @ 0x0
  6257                           
  6258  0020                     ??_OLED_write4bits:	
  6259                           ; 1 bytes @ 0x0
  6260                           
  6261  0020                     ??_OLED_waitForReady:	
  6262                           ; 1 bytes @ 0x0
  6263                           
  6264  0020                     ??_getRotDir:	
  6265                           ; 1 bytes @ 0x0
  6266                           
  6267  0020                     ??_getPB:	
  6268                           ; 1 bytes @ 0x0
  6269                           
  6270  0020                     ??_uartSendByte:	
  6271                           ; 1 bytes @ 0x0
  6272                           
  6273  0020                     ??_uartReset:	
  6274                           ; 1 bytes @ 0x0
  6275                           
  6276  0020                     ?__Umul8_16:	
  6277                           ; 1 bytes @ 0x0
  6278                           
  6279  0020                     ?_getAnalogValue:	
  6280                           ; 2 bytes @ 0x0
  6281                           
  6282  0020                     ?___awdiv:	
  6283                           ; 2 bytes @ 0x0
  6284                           
  6285  0020                     ?___awmod:	
  6286                           ; 2 bytes @ 0x0
  6287                           
  6288  0020                     ?_timeSince:	
  6289                           ; 2 bytes @ 0x0
  6290                           
  6291  0020                     ?___lmul:	
  6292                           ; 4 bytes @ 0x0
  6293                           
  6294  0020                     OLED_waitForReady@busy:	
  6295                           ; 4 bytes @ 0x0
  6296                           
  6297  0020                     uartSendByte@s:	
  6298                           ; 1 bytes @ 0x0
  6299                           
  6300  0020                     __Umul8_16@multiplicand:	
  6301                           ; 1 bytes @ 0x0
  6302                           
  6303  0020                     ___awdiv@divisor:	
  6304                           ; 1 bytes @ 0x0
  6305                           
  6306  0020                     ___awmod@divisor:	
  6307                           ; 2 bytes @ 0x0
  6308                           
  6309  0020                     timeSince@since:	
  6310                           ; 2 bytes @ 0x0
  6311                           
  6312  0020                     ___lmul@multiplier:	
  6313                           ; 4 bytes @ 0x0
  6314                           
  6315  0020                     ___fleq@ff1:	
  6316                           ; 4 bytes @ 0x0
  6317                           
  6318                           
  6319                           ; 4 bytes @ 0x0
  6320  0020                     	ds	1
  6321  0021                     getRotDir@ret:	
  6322  0021                     getPB@ret:	
  6323                           ; 1 bytes @ 0x1
  6324                           
  6325                           
  6326                           ; 1 bytes @ 0x1
  6327  0021                     	ds	1
  6328  0022                     ??__Umul8_16:	
  6329  0022                     ??_getAnalogValue:	
  6330                           ; 1 bytes @ 0x2
  6331                           
  6332  0022                     OLED_write4bits@value:	
  6333                           ; 1 bytes @ 0x2
  6334                           
  6335  0022                     _getLastError$1358:	
  6336                           ; 1 bytes @ 0x2
  6337                           
  6338  0022                     ___awdiv@dividend:	
  6339                           ; 2 bytes @ 0x2
  6340                           
  6341  0022                     ___awmod@dividend:	
  6342                           ; 2 bytes @ 0x2
  6343                           
  6344                           
  6345                           ; 2 bytes @ 0x2
  6346  0022                     	ds	1
  6347  0023                     ?_OLED_send:	
  6348  0023                     OLED_send@mode:	
  6349                           ; 1 bytes @ 0x3
  6350                           
  6351  0023                     getAnalogValue@channel:	
  6352                           ; 1 bytes @ 0x3
  6353                           
  6354                           
  6355                           ; 1 bytes @ 0x3
  6356  0023                     	ds	1
  6357  0024                     ??_timeSince:	
  6358  0024                     ??_OLED_send:	
  6359                           ; 1 bytes @ 0x4
  6360                           
  6361  0024                     ??___awdiv:	
  6362                           ; 1 bytes @ 0x4
  6363                           
  6364  0024                     ??___awmod:	
  6365                           ; 1 bytes @ 0x4
  6366                           
  6367  0024                     __Umul8_16@product:	
  6368                           ; 1 bytes @ 0x4
  6369                           
  6370  0024                     ___lmul@multiplicand:	
  6371                           ; 2 bytes @ 0x4
  6372                           
  6373  0024                     ___fleq@ff2:	
  6374                           ; 4 bytes @ 0x4
  6375                           
  6376                           
  6377                           ; 4 bytes @ 0x4
  6378  0024                     	ds	1
  6379  0025                     OLED_send@value:	
  6380  0025                     ___awdiv@counter:	
  6381                           ; 1 bytes @ 0x5
  6382                           
  6383  0025                     ___awmod@counter:	
  6384                           ; 1 bytes @ 0x5
  6385                           
  6386                           
  6387                           ; 1 bytes @ 0x5
  6388  0025                     	ds	1
  6389  0026                     ??_OLED_command:	
  6390  0026                     ??_OLED_write:	
  6391                           ; 1 bytes @ 0x6
  6392                           
  6393  0026                     OLED_command@value:	
  6394                           ; 1 bytes @ 0x6
  6395                           
  6396  0026                     OLED_write@value:	
  6397                           ; 1 bytes @ 0x6
  6398                           
  6399  0026                     ___awdiv@sign:	
  6400                           ; 1 bytes @ 0x6
  6401                           
  6402  0026                     ___awmod@sign:	
  6403                           ; 1 bytes @ 0x6
  6404                           
  6405  0026                     __Umul8_16@word_mpld:	
  6406                           ; 1 bytes @ 0x6
  6407                           
  6408                           
  6409                           ; 2 bytes @ 0x6
  6410  0026                     	ds	1
  6411  0027                     ??_OLED_init:	
  6412  0027                     ??_OLED_loadSpecialChars:	
  6413                           ; 1 bytes @ 0x7
  6414                           
  6415  0027                     ?_paging:	
  6416                           ; 1 bytes @ 0x7
  6417                           
  6418  0027                     ??_OLED_off:	
  6419                           ; 1 bytes @ 0x7
  6420                           
  6421  0027                     ??_error:	
  6422                           ; 1 bytes @ 0x7
  6423                           
  6424  0027                     paging@lastPage:	
  6425                           ; 1 bytes @ 0x7
  6426                           
  6427  0027                     ___awdiv@quotient:	
  6428                           ; 1 bytes @ 0x7
  6429                           
  6430                           
  6431                           ; 2 bytes @ 0x7
  6432  0027                     	ds	1
  6433  0028                     ??_paging:	
  6434  0028                     ??___lmul:	
  6435                           ; 1 bytes @ 0x8
  6436                           
  6437  0028                     ??___fleq:	
  6438                           ; 1 bytes @ 0x8
  6439                           
  6440  0028                     error@error:	
  6441                           ; 1 bytes @ 0x8
  6442                           
  6443  0028                     __Umul8_16@multiplier:	
  6444                           ; 1 bytes @ 0x8
  6445                           
  6446  0028                     ___lmul@product:	
  6447                           ; 1 bytes @ 0x8
  6448                           
  6449  0028                     OLED_loadSpecialChars@special:	
  6450                           ; 4 bytes @ 0x8
  6451                           
  6452                           
  6453                           ; 32 bytes @ 0x8
  6454  0028                     	ds	1
  6455  0029                     ?___bmul:	
  6456  0029                     ___bmul@multiplicand:	
  6457                           ; 1 bytes @ 0x9
  6458                           
  6459                           
  6460                           ; 1 bytes @ 0x9
  6461  0029                     	ds	1
  6462  002A                     ??___bmul:	
  6463  002A                     paging@currentPage:	
  6464                           ; 1 bytes @ 0xA
  6465                           
  6466                           
  6467                           ; 1 bytes @ 0xA
  6468  002A                     	ds	1
  6469  002B                     paging@dir:	
  6470  002B                     ___bmul@product:	
  6471                           ; 1 bytes @ 0xB
  6472                           
  6473                           
  6474                           ; 1 bytes @ 0xB
  6475  002B                     	ds	1
  6476  002C                     ?_ema:	
  6477  002C                     paging@n:	
  6478                           ; 2 bytes @ 0xC
  6479                           
  6480  002C                     ___bmul@multiplier:	
  6481                           ; 1 bytes @ 0xC
  6482                           
  6483  002C                     ema@in:	
  6484                           ; 1 bytes @ 0xC
  6485                           
  6486  002C                     timeSince@now:	
  6487                           ; 2 bytes @ 0xC
  6488                           
  6489                           
  6490                           ; 4 bytes @ 0xC
  6491  002C                     	ds	1
  6492  002D                     ?_memcpy:	
  6493  002D                     ?_OLED_print_xy:	
  6494                           ; 1 bytes @ 0xD
  6495                           
  6496  002D                     ?_setChannelSwitch:	
  6497                           ; 1 bytes @ 0xD
  6498                           
  6499  002D                     ?_swap:	
  6500                           ; 1 bytes @ 0xD
  6501                           
  6502  002D                     ?___wmul:	
  6503                           ; 1 bytes @ 0xD
  6504                           
  6505  002D                     OLED_print_xy@row:	
  6506                           ; 2 bytes @ 0xD
  6507                           
  6508  002D                     setChannelSwitch@state:	
  6509                           ; 1 bytes @ 0xD
  6510                           
  6511  002D                     memcpy@s1:	
  6512                           ; 1 bytes @ 0xD
  6513                           
  6514  002D                     ___wmul@multiplier:	
  6515                           ; 1 bytes @ 0xD
  6516                           
  6517  002D                     swap@len:	
  6518                           ; 2 bytes @ 0xD
  6519                           
  6520                           
  6521                           ; 2 bytes @ 0xD
  6522  002D                     	ds	1
  6523  002E                     ??_setChannelSwitch:	
  6524  002E                     OLED_print_xy@s:	
  6525                           ; 1 bytes @ 0xE
  6526                           
  6527  002E                     ema@average:	
  6528                           ; 2 bytes @ 0xE
  6529                           
  6530  002E                     memcpy@n:	
  6531                           ; 2 bytes @ 0xE
  6532                           
  6533                           
  6534                           ; 2 bytes @ 0xE
  6535  002E                     	ds	1
  6536  002F                     swap@s1:	
  6537  002F                     ___wmul@multiplicand:	
  6538                           ; 1 bytes @ 0xF
  6539                           
  6540                           
  6541                           ; 2 bytes @ 0xF
  6542  002F                     	ds	1
  6543  0030                     ??_memcpy:	
  6544  0030                     ??_OLED_print_xy:	
  6545                           ; 1 bytes @ 0x10
  6546                           
  6547  0030                     setChannelSwitch@channel:	
  6548                           ; 1 bytes @ 0x10
  6549                           
  6550  0030                     swap@s2:	
  6551                           ; 1 bytes @ 0x10
  6552                           
  6553  0030                     ema@alpha:	
  6554                           ; 1 bytes @ 0x10
  6555                           
  6556                           
  6557                           ; 4 bytes @ 0x10
  6558  0030                     	ds	1
  6559  0031                     ??_controller:	
  6560  0031                     ??___wmul:	
  6561                           ; 1 bytes @ 0x11
  6562                           
  6563  0031                     ??_swap:	
  6564                           ; 1 bytes @ 0x11
  6565                           
  6566  0031                     memcpy@tmp:	
  6567                           ; 1 bytes @ 0x11
  6568                           
  6569  0031                     ___wmul@product:	
  6570                           ; 1 bytes @ 0x11
  6571                           
  6572  0031                     OLED_print_xy@row_offsets:	
  6573                           ; 2 bytes @ 0x11
  6574                           
  6575                           
  6576                           ; 4 bytes @ 0x11
  6577  0031                     	ds	1
  6578  0032                     swap@c:	
  6579  0032                     memcpy@d1:	
  6580                           ; 1 bytes @ 0x12
  6581                           
  6582                           
  6583                           ; 1 bytes @ 0x12
  6584  0032                     	ds	1
  6585  0033                     ??_initGlobalData:	
  6586  0033                     ??_returnToPage:	
  6587                           ; 1 bytes @ 0x13
  6588                           
  6589  0033                     ?_getNextState:	
  6590                           ; 1 bytes @ 0x13
  6591                           
  6592  0033                     ?___xxtofl:	
  6593                           ; 1 bytes @ 0x13
  6594                           
  6595  0033                     getNextState@intState:	
  6596                           ; 4 bytes @ 0x13
  6597                           
  6598  0033                     memcpy@d:	
  6599                           ; 1 bytes @ 0x13
  6600                           
  6601  0033                     ___xxtofl@val:	
  6602                           ; 1 bytes @ 0x13
  6603                           
  6604                           
  6605                           ; 4 bytes @ 0x13
  6606  0033                     	ds	1
  6607  0034                     ??_ema:	
  6608  0034                     getNextState@pb:	
  6609                           ; 1 bytes @ 0x14
  6610                           
  6611  0034                     memcpy@s:	
  6612                           ; 1 bytes @ 0x14
  6613                           
  6614                           
  6615                           ; 1 bytes @ 0x14
  6616  0034                     	ds	1
  6617  0035                     OLED_print_xy@col:	
  6618  0035                     getNextState@timeout:	
  6619                           ; 1 bytes @ 0x15
  6620                           
  6621  0035                     returnToPage@page:	
  6622                           ; 1 bytes @ 0x15
  6623                           
  6624                           
  6625                           ; 1 bytes @ 0x15
  6626  0035                     	ds	1
  6627  0036                     ??_viewErrorMessage:	
  6628  0036                     ??_getNextState:	
  6629                           ; 1 bytes @ 0x16
  6630                           
  6631  0036                     returnToPage@n:	
  6632                           ; 1 bytes @ 0x16
  6633                           
  6634  0036                     controller@tick:	
  6635                           ; 1 bytes @ 0x16
  6636                           
  6637                           
  6638                           ; 4 bytes @ 0x16
  6639  0036                     	ds	1
  6640  0037                     ??___xxtofl:	
  6641  0037                     initGlobalData@n:	
  6642                           ; 1 bytes @ 0x17
  6643                           
  6644                           
  6645                           ; 1 bytes @ 0x17
  6646  0037                     	ds	1
  6647  0038                     viewErrorMessage@errorCode:	
  6648  0038                     initGlobalData@chData:	
  6649                           ; 1 bytes @ 0x18
  6650                           
  6651                           
  6652                           ; 2 bytes @ 0x18
  6653  0038                     	ds	1
  6654  0039                     getNextState@state:	
  6655  0039                     _viewErrorMessage$1361:	
  6656                           ; 1 bytes @ 0x19
  6657                           
  6658                           
  6659                           ; 2 bytes @ 0x19
  6660  0039                     	ds	1
  6661  003A                     getNextState@n:	
  6662  003A                     controller@n:	
  6663                           ; 1 bytes @ 0x1A
  6664                           
  6665                           
  6666                           ; 1 bytes @ 0x1A
  6667  003A                     	ds	1
  6668  003B                     ___xxtofl@sign:	
  6669                           
  6670                           ; 1 bytes @ 0x1B
  6671  003B                     	ds	1
  6672  003C                     ___xxtofl@exp:	
  6673  003C                     ema@tmp0:	
  6674                           ; 1 bytes @ 0x1C
  6675                           
  6676                           
  6677                           ; 4 bytes @ 0x1C
  6678  003C                     	ds	1
  6679  003D                     ___xxtofl@arg:	
  6680                           
  6681                           ; 4 bytes @ 0x1D
  6682  003D                     	ds	4
  6683  0041                     ?___flmul:	
  6684  0041                     ___flmul@b:	
  6685                           ; 4 bytes @ 0x21
  6686                           
  6687                           
  6688                           ; 4 bytes @ 0x21
  6689  0041                     	ds	4
  6690  0045                     ___flmul@a:	
  6691                           
  6692                           ; 4 bytes @ 0x25
  6693  0045                     	ds	3
  6694  0048                     OLED_loadSpecialChars@n:	
  6695                           
  6696                           ; 1 bytes @ 0x28
  6697  0048                     	ds	1
  6698  0049                     ??___flmul:	
  6699                           
  6700                           ; 1 bytes @ 0x29
  6701  0049                     	ds	5
  6702  004E                     ___flmul@sign:	
  6703                           
  6704                           ; 1 bytes @ 0x2E
  6705  004E                     	ds	1
  6706  004F                     ___flmul@aexp:	
  6707                           
  6708                           ; 1 bytes @ 0x2F
  6709  004F                     	ds	1
  6710  0050                     ___flmul@grs:	
  6711                           
  6712                           ; 4 bytes @ 0x30
  6713  0050                     	ds	4
  6714  0054                     ___flmul@bexp:	
  6715                           
  6716                           ; 1 bytes @ 0x34
  6717  0054                     	ds	1
  6718  0055                     ___flmul@prod:	
  6719                           
  6720                           ; 4 bytes @ 0x35
  6721  0055                     	ds	4
  6722  0059                     ___flmul@temp:	
  6723                           
  6724                           ; 2 bytes @ 0x39
  6725  0059                     	ds	2
  6726  005B                     ?___fladd:	
  6727  005B                     ?___fldiv:	
  6728                           ; 4 bytes @ 0x3B
  6729                           
  6730  005B                     ___fladd@b:	
  6731                           ; 4 bytes @ 0x3B
  6732                           
  6733  005B                     ___fldiv@a:	
  6734                           ; 4 bytes @ 0x3B
  6735                           
  6736                           
  6737                           ; 4 bytes @ 0x3B
  6738  005B                     	ds	4
  6739  005F                     ___fladd@a:	
  6740  005F                     ___fldiv@b:	
  6741                           ; 4 bytes @ 0x3F
  6742                           
  6743                           
  6744                           ; 4 bytes @ 0x3F
  6745  005F                     	ds	4
  6746  0063                     ??___fladd:	
  6747  0063                     ??___fldiv:	
  6748                           ; 1 bytes @ 0x43
  6749                           
  6750                           
  6751                           ; 1 bytes @ 0x43
  6752  0063                     	ds	8
  6753  006B                     ___fladd@signs:	
  6754                           
  6755                           ; 1 bytes @ 0x4B
  6756  006B                     	ds	1
  6757  006C                     ___fladd@aexp:	
  6758                           
  6759                           ; 1 bytes @ 0x4C
  6760  006C                     	ds	1
  6761  006D                     ___fladd@bexp:	
  6762                           
  6763                           ; 1 bytes @ 0x4D
  6764  006D                     	ds	1
  6765  006E                     ___fladd@grs:	
  6766                           
  6767                           ; 1 bytes @ 0x4E
  6768  006E                     	ds	1
  6769  006F                     ??_getAnalogValues:	
  6770  006F                     ??_spinInput:	
  6771                           ; 1 bytes @ 0x4F
  6772                           
  6773  006F                     ??_sortCur:	
  6774                           ; 1 bytes @ 0x4F
  6775                           
  6776  006F                     ??___flsub:	
  6777                           ; 1 bytes @ 0x4F
  6778                           
  6779  006F                     _qsort$2585:	
  6780                           ; 1 bytes @ 0x4F
  6781                           
  6782                           
  6783                           ; 1 bytes @ 0x4F
  6784  006F                     	ds	1
  6785                           
  6786                           	psect	maintext
  6787  2C40                     __pmaintext:	
  6788 ;;
  6789 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  6790 ;;
  6791 ;; *************** function _main *****************
  6792 ;; Defined at:
  6793 ;;		line 23 in file "main.c"
  6794 ;; Parameters:    Size  Location     Type
  6795 ;;		None
  6796 ;; Auto vars:     Size  Location     Type
  6797 ;;  sysCheckInte    4   23[BANK4 ] unsigned long 
  6798 ;;  idle            1   28[BANK4 ] unsigned char 
  6799 ;;  initDone        1   27[BANK4 ] unsigned char 
  6800 ;; Return value:  Size  Location     Type
  6801 ;;                  1    wreg      void 
  6802 ;; Registers used:
  6803 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6804 ;; Tracked objects:
  6805 ;;		On entry : B3F/0
  6806 ;;		On exit  : 0/0
  6807 ;;		Unchanged: 0/0
  6808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6810 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6811 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6812 ;;      Totals:         0       0       1       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6813 ;;Total ram usage:        7 bytes
  6814 ;; Hardware stack levels required when called:    9
  6815 ;; This function calls:
  6816 ;;		_OLED_command
  6817 ;;		_OLED_init
  6818 ;;		_OLED_loadSpecialChars
  6819 ;;		_calcRequiredPower
  6820 ;;		_channelThing
  6821 ;;		_checkChannelStatus
  6822 ;;		_checkSensor
  6823 ;;		_controller
  6824 ;;		_getAnalogValues
  6825 ;;		_getLastError
  6826 ;;		_initGlobalData
  6827 ;;		_initialize
  6828 ;;		_menu
  6829 ;;		_systemCheck
  6830 ;;		_timeSince
  6831 ;;		_viewErrorMessage
  6832 ;; This function is called by:
  6833 ;;		Startup code after reset
  6834 ;; This function uses a non-reentrant model
  6835 ;;
  6836                           
  6837                           
  6838                           ;psect for function _main
  6839  2C40                     _main:	
  6840                           
  6841                           ;main.c: 25:  uint32_t sysCheckInterval = 0;
  6842                           
  6843                           ;incstack = 0
  6844                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6845  2C40  3000               	movlw	0
  6846  2C41  0144               	movlb	4	; select bank4
  6847  2C42  00E1               	movwf	(main@sysCheckInterval+3)^(0+512)
  6848  2C43  3000               	movlw	0
  6849  2C44  00E0               	movwf	(main@sysCheckInterval+2)^(0+512)
  6850  2C45  3000               	movlw	0
  6851  2C46  00DF               	movwf	(main@sysCheckInterval+1)^(0+512)
  6852  2C47  3000               	movlw	0
  6853  2C48  00DE               	movwf	main@sysCheckInterval^(0+512)
  6854                           
  6855                           ;main.c: 26:  uint8_t idle = 1;
  6856  2C49  01E3               	clrf	main@idle^(0+512)
  6857  2C4A  0AE3               	incf	main@idle^(0+512),f
  6858                           
  6859                           ;main.c: 27:  uint8_t initDone = 0;
  6860  2C4B  01E2               	clrf	main@initDone^(0+512)
  6861                           
  6862                           ;main.c: 29:  initialize();
  6863  2C4C  31B7  2725  31AC   	fcall	_initialize
  6864                           
  6865                           ;main.c: 30:  LATBbits.LATB5 = 1;
  6866  2C4F  0140               	movlb	0	; select bank0
  6867  2C50  1699               	bsf	25,5	;volatile
  6868                           
  6869                           ;main.c: 31:  OLED_init();
  6870  2C51  31AB  23B5  31AC   	fcall	_OLED_init
  6871                           
  6872                           ;main.c: 32:  OLED_loadSpecialChars();
  6873  2C54  31B3  23B4  31AC   	fcall	_OLED_loadSpecialChars
  6874                           
  6875                           ;main.c: 33:  OLED_command(0x02);
  6876  2C57  3002               	movlw	2
  6877  2C58  31B2  22E2  31AC   	fcall	_OLED_command
  6878                           
  6879                           ;main.c: 34:  OLED_command(0x01);
  6880  2C5B  3001               	movlw	1
  6881  2C5C  31B2  22E2  31AC   	fcall	_OLED_command
  6882                           
  6883                           ;main.c: 35:  initGlobalData();
  6884  2C5F  3188  200B  31AC   	fcall	_initGlobalData
  6885                           
  6886                           ;main.c: 36:  LATCbits.LATC3 = 1;
  6887  2C62  0140               	movlb	0	; select bank0
  6888  2C63  159A               	bsf	26,3	;volatile
  6889  2C64                     l121:	
  6890                           ;main.c: 40:  while (1) {
  6891                           
  6892  2C64  0064               	clrwdt	;# 
  6893                           
  6894                           ;main.c: 45:   getAnalogValues();
  6895  2C65  3198  20FB  31AC   	fcall	_getAnalogValues
  6896                           
  6897                           ;main.c: 47:   if (timeSince(sysCheckInterval) > 5) {
  6898  2C68  0144               	movlb	4	; select bank4
  6899  2C69  0861               	movf	(main@sysCheckInterval+3)^(0+512),w
  6900  2C6A  0140               	movlb	0	; select bank0
  6901  2C6B  00A3               	movwf	timeSince@since+3
  6902  2C6C  0144               	movlb	4	; select bank4
  6903  2C6D  0860               	movf	(main@sysCheckInterval+2)^(0+512),w
  6904  2C6E  0140               	movlb	0	; select bank0
  6905  2C6F  00A2               	movwf	timeSince@since+2
  6906  2C70  0144               	movlb	4	; select bank4
  6907  2C71  085F               	movf	(main@sysCheckInterval+1)^(0+512),w
  6908  2C72  0140               	movlb	0	; select bank0
  6909  2C73  00A1               	movwf	timeSince@since+1
  6910  2C74  0144               	movlb	4	; select bank4
  6911  2C75  085E               	movf	main@sysCheckInterval^(0+512),w
  6912  2C76  0140               	movlb	0	; select bank0
  6913  2C77  00A0               	movwf	timeSince@since
  6914  2C78  3190  2000  31AC   	fcall	_timeSince
  6915  2C7B  0140               	movlb	0	; select bank0
  6916  2C7C  0823               	movf	?_timeSince+3,w
  6917  2C7D  1D03               	btfss	3,2
  6918  2C7E  2C89               	goto	l8718
  6919  2C7F  0822               	movf	?_timeSince+2,w
  6920  2C80  1D03               	btfss	3,2
  6921  2C81  2C89               	goto	l8718
  6922  2C82  0821               	movf	?_timeSince+1,w
  6923  2C83  1D03               	btfss	3,2
  6924  2C84  2C89               	goto	l8718
  6925  2C85  3006               	movlw	6
  6926  2C86  0220               	subwf	?_timeSince,w
  6927  2C87  1C03               	btfss	3,0
  6928  2C88  2C95               	goto	l8722
  6929  2C89                     l8718:	
  6930                           
  6931                           ;main.c: 48:    sysCheckInterval = tick100ms;
  6932  2C89  0144               	movlb	4	; select bank4
  6933  2C8A  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
  6934  2C8B  00E1               	movwf	(main@sysCheckInterval+3)^(0+512)
  6935  2C8C  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
  6936  2C8D  00E0               	movwf	(main@sysCheckInterval+2)^(0+512)
  6937  2C8E  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
  6938  2C8F  00DF               	movwf	(main@sysCheckInterval+1)^(0+512)
  6939  2C90  0832               	movf	_tick100ms^(0+512),w	;volatile
  6940  2C91  00DE               	movwf	main@sysCheckInterval^(0+512)
  6941                           
  6942                           ;main.c: 49:    systemCheck();
  6943  2C92  319C  2465  31AC   	fcall	_systemCheck
  6944  2C95                     l8722:	
  6945                           
  6946                           ;main.c: 53:   if (checkSensor()) {
  6947  2C95  31A0  20E8  31AC   	fcall	_checkSensor
  6948  2C98  3A00               	xorlw	0
  6949  2C99  1903               	skipnz
  6950  2C9A  2CA1               	goto	l8728
  6951                           
  6952                           ;main.c: 55:    calcRequiredPower();
  6953  2C9B  3180  20D5  31AC   	fcall	_calcRequiredPower
  6954                           
  6955                           ;main.c: 56:    initDone = 1;
  6956  2C9E  0144               	movlb	4	; select bank4
  6957  2C9F  01E2               	clrf	main@initDone^(0+512)
  6958  2CA0  0AE2               	incf	main@initDone^(0+512),f
  6959  2CA1                     l8728:	
  6960                           
  6961                           ;main.c: 60:   if (idle) {
  6962  2CA1  0144               	movlb	4	; select bank4
  6963  2CA2  0863               	movf	main@idle^(0+512),w
  6964  2CA3  1903               	btfsc	3,2
  6965  2CA4  2CB1               	goto	l8736
  6966                           
  6967                           ;main.c: 61:    if (initDone) {
  6968  2CA5  0862               	movf	main@initDone^(0+512),w
  6969  2CA6  1903               	btfsc	3,2
  6970  2CA7  2CB9               	goto	l8738
  6971                           
  6972                           ;main.c: 64:     checkChannelStatus();
  6973  2CA8  3194  2414  31AC   	fcall	_checkChannelStatus
  6974                           
  6975                           ;main.c: 65:     channelThing();
  6976  2CAB  318B  23CC  31AC   	fcall	_channelThing
  6977                           
  6978                           ;main.c: 66:     idle = 0;
  6979  2CAE  0144               	movlb	4	; select bank4
  6980  2CAF  01E3               	clrf	main@idle^(0+512)
  6981  2CB0  2CB9               	goto	l8738
  6982  2CB1                     l8736:	
  6983                           
  6984                           ;main.c: 70:    idle = controller();
  6985  2CB1  31AD  25FD  31AC   	fcall	_controller
  6986  2CB4  0141               	movlb	1	; select bank1
  6987  2CB5  00EA               	movwf	??_main^(0+128)
  6988  2CB6  086A               	movf	??_main^(0+128),w
  6989  2CB7  0144               	movlb	4	; select bank4
  6990  2CB8  00E3               	movwf	main@idle^(0+512)
  6991  2CB9                     l8738:	
  6992                           
  6993                           ;main.c: 73:   if (getLastError() != NO_ERROR)
  6994  2CB9  31B3  2359  31AC   	fcall	_getLastError
  6995  2CBC  3A00               	xorlw	0
  6996  2CBD  1903               	skipnz
  6997  2CBE  2CC3               	goto	l8742
  6998                           
  6999                           ;main.c: 74:    viewErrorMessage();
  7000  2CBF  31A3  236F  31AC   	fcall	_viewErrorMessage
  7001  2CC2  2CC6               	goto	l8744
  7002  2CC3                     l8742:	
  7003                           
  7004                           ;main.c: 76:    menu();
  7005  2CC3  3198  201E  31AC   	fcall	_menu
  7006  2CC6                     l8744:	
  7007                           
  7008                           ;main.c: 79:   _delay((unsigned long)((20)*(4000000UL/4000.0)));
  7009  2CC6  301A               	movlw	26
  7010  2CC7  0141               	movlb	1	; select bank1
  7011  2CC8  00EA               	movwf	??_main^(0+128)
  7012  2CC9  30F8               	movlw	248
  7013  2CCA                     u10527:	
  7014  2CCA  0B89               	decfsz	9,f
  7015  2CCB  2CCA               	goto	u10527
  7016  2CCC  0BEA               	decfsz	??_main^(0+128),f
  7017  2CCD  2CCA               	goto	u10527
  7018  2CCE  0000               	nop
  7019                           
  7020                           ;main.c: 80:   __nop();
  7021  2CCF  0000               	nop
  7022  2CD0  2C64               	goto	l121
  7023  2CD1                     __end_of_main:	
  7024                           
  7025                           	psect	text1
  7026  236F                     __ptext1:	
  7027 ;; *************** function _viewErrorMessage *****************
  7028 ;; Defined at:
  7029 ;;		line 32 in file "error.c"
  7030 ;; Parameters:    Size  Location     Type
  7031 ;;		None
  7032 ;; Auto vars:     Size  Location     Type
  7033 ;;  errorCode       1   24[BANK0 ] enum E7825
  7034 ;; Return value:  Size  Location     Type
  7035 ;;                  1    wreg      void 
  7036 ;; Registers used:
  7037 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7038 ;; Tracked objects:
  7039 ;;		On entry : 0/0
  7040 ;;		On exit  : 0/0
  7041 ;;		Unchanged: 0/0
  7042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7043 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7044 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7045 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7046 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7047 ;;Total ram usage:        5 bytes
  7048 ;; Hardware stack levels used:    1
  7049 ;; Hardware stack levels required when called:    7
  7050 ;; This function calls:
  7051 ;;		_OLED_command
  7052 ;;		_OLED_print_xy
  7053 ;;		___awmod
  7054 ;;		_getPB
  7055 ;; This function is called by:
  7056 ;;		_main
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           
  7061                           ;psect for function _viewErrorMessage
  7062  236F                     _viewErrorMessage:	
  7063                           
  7064                           ;error.c: 34:  enum e_errorcode errorCode;;error.c: 36:  errorCode = (head == tail) ? NO
      +                          _ERROR : errorMessageQueue[tail];
  7065                           
  7066                           ;incstack = 0
  7067                           ; Regs used in _viewErrorMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7068  236F  0142               	movlb	2	; select bank2
  7069  2370  0865               	movf	_head^(0+256),w
  7070  2371  067C               	xorwf	_tail,w
  7071  2372  1903               	skipnz
  7072  2373  2B82               	goto	l8600
  7073  2374  087C               	movf	_tail,w
  7074  2375  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
  7075  2376  0086               	movwf	6
  7076  2377  3002               	movlw	2	; select bank4/5
  7077  2378  0087               	movwf	7
  7078  2379  0801               	movf	1,w
  7079  237A  0140               	movlb	0	; select bank0
  7080  237B  00B6               	movwf	??_viewErrorMessage
  7081  237C  01B7               	clrf	??_viewErrorMessage+1
  7082  237D  0836               	movf	??_viewErrorMessage,w
  7083  237E  00B9               	movwf	_viewErrorMessage$1361
  7084  237F  0837               	movf	??_viewErrorMessage+1,w
  7085  2380  00BA               	movwf	_viewErrorMessage$1361+1
  7086  2381  2B85               	goto	l8602
  7087  2382                     l8600:	
  7088  2382  0140               	movlb	0	; select bank0
  7089  2383  01B9               	clrf	_viewErrorMessage$1361
  7090  2384  01BA               	clrf	_viewErrorMessage$1361+1
  7091  2385                     l8602:	
  7092  2385  0839               	movf	_viewErrorMessage$1361,w
  7093  2386  00B6               	movwf	??_viewErrorMessage
  7094  2387  0836               	movf	??_viewErrorMessage,w
  7095  2388  00B8               	movwf	viewErrorMessage@errorCode
  7096                           
  7097                           ;error.c: 38:  OLED_command(0x02);
  7098  2389  3002               	movlw	2
  7099  238A  31B2  22E2  31A3   	fcall	_OLED_command
  7100                           
  7101                           ;error.c: 39:  switch(errorCode) {
  7102  238D  2C92               	goto	l8634
  7103  238E                     l8606:	
  7104                           
  7105                           ;error.c: 41:   OLED_print_xy(0, 0, "Heater      ");
  7106  238E  01AD               	clrf	OLED_print_xy@row
  7107  238F  3041               	movlw	low (STR_62| (0+32768))
  7108  2390  00AE               	movwf	OLED_print_xy@s
  7109  2391  30B8               	movlw	high (STR_62| (0+32768))
  7110  2392  00AF               	movwf	OLED_print_xy@s+1
  7111  2393  3000               	movlw	0
  7112  2394  31B4  2497  31A3   	fcall	_OLED_print_xy
  7113                           
  7114                           ;error.c: 42:   OLED_print_xy(0, 1, "removed     ");
  7115  2397  0140               	movlb	0	; select bank0
  7116  2398  01AD               	clrf	OLED_print_xy@row
  7117  2399  0AAD               	incf	OLED_print_xy@row,f
  7118  239A  3075               	movlw	low (STR_63| (0+32768))
  7119  239B  00AE               	movwf	OLED_print_xy@s
  7120  239C  30B8               	movlw	high (STR_63| (0+32768))
  7121  239D  00AF               	movwf	OLED_print_xy@s+1
  7122  239E  3000               	movlw	0
  7123  239F  31B4  2497  31A3   	fcall	_OLED_print_xy
  7124                           
  7125                           ;error.c: 43:   break;
  7126  23A2  2CBE               	goto	l8636
  7127  23A3                     l8608:	
  7128                           
  7129                           ;error.c: 45:   OLED_print_xy(0, 0, "Output      ");
  7130  23A3  01AD               	clrf	OLED_print_xy@row
  7131  23A4  305B               	movlw	low (STR_64| (0+32768))
  7132  23A5  00AE               	movwf	OLED_print_xy@s
  7133  23A6  30B8               	movlw	high (STR_64| (0+32768))
  7134  23A7  00AF               	movwf	OLED_print_xy@s+1
  7135  23A8  3000               	movlw	0
  7136  23A9  31B4  2497  31A3   	fcall	_OLED_print_xy
  7137                           
  7138                           ;error.c: 46:   OLED_print_xy(0, 1, "shorted!    ");
  7139  23AC  0140               	movlb	0	; select bank0
  7140  23AD  01AD               	clrf	OLED_print_xy@row
  7141  23AE  0AAD               	incf	OLED_print_xy@row,f
  7142  23AF  309C               	movlw	low (STR_65| (0+32768))
  7143  23B0  00AE               	movwf	OLED_print_xy@s
  7144  23B1  30B8               	movlw	high (STR_65| (0+32768))
  7145  23B2  00AF               	movwf	OLED_print_xy@s+1
  7146  23B3  3000               	movlw	0
  7147  23B4  31B4  2497  31A3   	fcall	_OLED_print_xy
  7148                           
  7149                           ;error.c: 47:   break;
  7150  23B7  2CBE               	goto	l8636
  7151  23B8                     l8610:	
  7152                           
  7153                           ;error.c: 49:   OLED_print_xy(0, 0, "Overcurrent ");
  7154  23B8  01AD               	clrf	OLED_print_xy@row
  7155  23B9  3004               	movlw	low (STR_66| (0+32768))
  7156  23BA  00AE               	movwf	OLED_print_xy@s
  7157  23BB  30B9               	movlw	high (STR_66| (0+32768))
  7158  23BC  00AF               	movwf	OLED_print_xy@s+1
  7159  23BD  3000               	movlw	0
  7160  23BE  31B4  2497  31A3   	fcall	_OLED_print_xy
  7161                           
  7162                           ;error.c: 50:   OLED_print_xy(0, 1, "detected!   ");
  7163  23C1  0140               	movlb	0	; select bank0
  7164  23C2  01AD               	clrf	OLED_print_xy@row
  7165  23C3  0AAD               	incf	OLED_print_xy@row,f
  7166  23C4  30C3               	movlw	low (STR_67| (0+32768))
  7167  23C5  00AE               	movwf	OLED_print_xy@s
  7168  23C6  30B8               	movlw	high (STR_67| (0+32768))
  7169  23C7  00AF               	movwf	OLED_print_xy@s+1
  7170  23C8  3000               	movlw	0
  7171  23C9  31B4  2497  31A3   	fcall	_OLED_print_xy
  7172                           
  7173                           ;error.c: 51:   break;
  7174  23CC  2CBE               	goto	l8636
  7175  23CD                     l8612:	
  7176                           
  7177                           ;error.c: 53:   OLED_print_xy(0, 0, "Heater      ");
  7178  23CD  01AD               	clrf	OLED_print_xy@row
  7179  23CE  3041               	movlw	low (STR_62| (0+32768))
  7180  23CF  00AE               	movwf	OLED_print_xy@s
  7181  23D0  30B8               	movlw	high (STR_62| (0+32768))
  7182  23D1  00AF               	movwf	OLED_print_xy@s+1
  7183  23D2  3000               	movlw	0
  7184  23D3  31B4  2497  31A3   	fcall	_OLED_print_xy
  7185                           
  7186                           ;error.c: 54:   OLED_print_xy(0, 1, "overcurrent ");
  7187  23D6  0140               	movlb	0	; select bank0
  7188  23D7  01AD               	clrf	OLED_print_xy@row
  7189  23D8  0AAD               	incf	OLED_print_xy@row,f
  7190  23D9  3011               	movlw	low (STR_69| (0+32768))
  7191  23DA  00AE               	movwf	OLED_print_xy@s
  7192  23DB  30B9               	movlw	high (STR_69| (0+32768))
  7193  23DC  00AF               	movwf	OLED_print_xy@s+1
  7194  23DD  3000               	movlw	0
  7195  23DE  31B4  2497  31A3   	fcall	_OLED_print_xy
  7196                           
  7197                           ;error.c: 55:   break;
  7198  23E1  2CBE               	goto	l8636
  7199  23E2                     l8614:	
  7200                           
  7201                           ;error.c: 57:   OLED_print_xy(0, 0, "Supply volt.");
  7202  23E2  01AD               	clrf	OLED_print_xy@row
  7203  23E3  301E               	movlw	low (STR_70| (0+32768))
  7204  23E4  00AE               	movwf	OLED_print_xy@s
  7205  23E5  30B9               	movlw	high (STR_70| (0+32768))
  7206  23E6  00AF               	movwf	OLED_print_xy@s+1
  7207  23E7  3000               	movlw	0
  7208  23E8  31B4  2497  31A3   	fcall	_OLED_print_xy
  7209                           
  7210                           ;error.c: 58:   OLED_print_xy(0, 1, "too high!   ");
  7211  23EB  0140               	movlb	0	; select bank0
  7212  23EC  01AD               	clrf	OLED_print_xy@row
  7213  23ED  0AAD               	incf	OLED_print_xy@row,f
  7214  23EE  30D0               	movlw	low (STR_71| (0+32768))
  7215  23EF  00AE               	movwf	OLED_print_xy@s
  7216  23F0  30B8               	movlw	high (STR_71| (0+32768))
  7217  23F1  00AF               	movwf	OLED_print_xy@s+1
  7218  23F2  3000               	movlw	0
  7219  23F3  31B4  2497  31A3   	fcall	_OLED_print_xy
  7220                           
  7221                           ;error.c: 59:   break;
  7222  23F6  2CBE               	goto	l8636
  7223  23F7                     l8616:	
  7224                           
  7225                           ;error.c: 61:   OLED_print_xy(0, 0, "Supply volt.");
  7226  23F7  01AD               	clrf	OLED_print_xy@row
  7227  23F8  301E               	movlw	low (STR_70| (0+32768))
  7228  23F9  00AE               	movwf	OLED_print_xy@s
  7229  23FA  30B9               	movlw	high (STR_70| (0+32768))
  7230  23FB  00AF               	movwf	OLED_print_xy@s+1
  7231  23FC  3000               	movlw	0
  7232  23FD  31B4  2497  31A3   	fcall	_OLED_print_xy
  7233                           
  7234                           ;error.c: 62:   OLED_print_xy(0, 1, "too low!    ");
  7235  2400  0140               	movlb	0	; select bank0
  7236  2401  01AD               	clrf	OLED_print_xy@row
  7237  2402  0AAD               	incf	OLED_print_xy@row,f
  7238  2403  30A9               	movlw	low (STR_73| (0+32768))
  7239  2404  00AE               	movwf	OLED_print_xy@s
  7240  2405  30B8               	movlw	high (STR_73| (0+32768))
  7241  2406  00AF               	movwf	OLED_print_xy@s+1
  7242  2407  3000               	movlw	0
  7243  2408  31B4  2497  31A3   	fcall	_OLED_print_xy
  7244                           
  7245                           ;error.c: 63:   break;
  7246  240B  2CBE               	goto	l8636
  7247  240C                     l8618:	
  7248                           
  7249                           ;error.c: 65:   OLED_print_xy(0, 0, "Sensor      ");
  7250  240C  01AD               	clrf	OLED_print_xy@row
  7251  240D  304E               	movlw	low (STR_74| (0+32768))
  7252  240E  00AE               	movwf	OLED_print_xy@s
  7253  240F  30B8               	movlw	high (STR_74| (0+32768))
  7254  2410  00AF               	movwf	OLED_print_xy@s+1
  7255  2411  3000               	movlw	0
  7256  2412  31B4  2497  31A3   	fcall	_OLED_print_xy
  7257                           
  7258                           ;error.c: 66:   OLED_print_xy(0, 1, "timeout     ");
  7259  2415  0140               	movlb	0	; select bank0
  7260  2416  01AD               	clrf	OLED_print_xy@row
  7261  2417  0AAD               	incf	OLED_print_xy@row,f
  7262  2418  308F               	movlw	low (STR_75| (0+32768))
  7263  2419  00AE               	movwf	OLED_print_xy@s
  7264  241A  30B8               	movlw	high (STR_75| (0+32768))
  7265  241B  00AF               	movwf	OLED_print_xy@s+1
  7266  241C  3000               	movlw	0
  7267  241D  31B4  2497  31A3   	fcall	_OLED_print_xy
  7268                           
  7269                           ;error.c: 67:   break;
  7270  2420  2CBE               	goto	l8636
  7271  2421                     l8620:	
  7272                           
  7273                           ;error.c: 69:   OLED_print_xy(0, 0, "Sensor wrong");
  7274  2421  01AD               	clrf	OLED_print_xy@row
  7275  2422  3038               	movlw	low (STR_76| (0+32768))
  7276  2423  00AE               	movwf	OLED_print_xy@s
  7277  2424  30B9               	movlw	high (STR_76| (0+32768))
  7278  2425  00AF               	movwf	OLED_print_xy@s+1
  7279  2426  3000               	movlw	0
  7280  2427  31B4  2497  31A3   	fcall	_OLED_print_xy
  7281                           
  7282                           ;error.c: 70:   OLED_print_xy(0, 1, "checksum    ");
  7283  242A  0140               	movlb	0	; select bank0
  7284  242B  01AD               	clrf	OLED_print_xy@row
  7285  242C  0AAD               	incf	OLED_print_xy@row,f
  7286  242D  30B6               	movlw	low (STR_77| (0+32768))
  7287  242E  00AE               	movwf	OLED_print_xy@s
  7288  242F  30B8               	movlw	high (STR_77| (0+32768))
  7289  2430  00AF               	movwf	OLED_print_xy@s+1
  7290  2431  3000               	movlw	0
  7291  2432  31B4  2497  31A3   	fcall	_OLED_print_xy
  7292                           
  7293                           ;error.c: 71:   break;
  7294  2435  2CBE               	goto	l8636
  7295  2436                     l8622:	
  7296                           
  7297                           ;error.c: 73:   OLED_print_xy(0, 0, "OVERCURRENT ");
  7298  2436  01AD               	clrf	OLED_print_xy@row
  7299  2437  30EA               	movlw	low (STR_78| (0+32768))
  7300  2438  00AE               	movwf	OLED_print_xy@s
  7301  2439  30B8               	movlw	high (STR_78| (0+32768))
  7302  243A  00AF               	movwf	OLED_print_xy@s+1
  7303  243B  3000               	movlw	0
  7304  243C  31B4  2497  31A3   	fcall	_OLED_print_xy
  7305                           
  7306                           ;error.c: 74:   OLED_print_xy(0, 1, "TURN OFF NOW");
  7307  243F  0140               	movlb	0	; select bank0
  7308  2440  01AD               	clrf	OLED_print_xy@row
  7309  2441  0AAD               	incf	OLED_print_xy@row,f
  7310  2442  302B               	movlw	low (STR_79| (0+32768))
  7311  2443  00AE               	movwf	OLED_print_xy@s
  7312  2444  30B9               	movlw	high (STR_79| (0+32768))
  7313  2445  00AF               	movwf	OLED_print_xy@s+1
  7314  2446  3000               	movlw	0
  7315  2447  31B4  2497  31A3   	fcall	_OLED_print_xy
  7316                           
  7317                           ;error.c: 75:   break;
  7318  244A  2CBE               	goto	l8636
  7319  244B                     l8624:	
  7320                           
  7321                           ;error.c: 77:   OLED_print_xy(0, 0, "Overcurrent ");
  7322  244B  01AD               	clrf	OLED_print_xy@row
  7323  244C  3004               	movlw	low (STR_66| (0+32768))
  7324  244D  00AE               	movwf	OLED_print_xy@s
  7325  244E  30B9               	movlw	high (STR_66| (0+32768))
  7326  244F  00AF               	movwf	OLED_print_xy@s+1
  7327  2450  3000               	movlw	0
  7328  2451  31B4  2497  31A3   	fcall	_OLED_print_xy
  7329                           
  7330                           ;error.c: 78:   OLED_print_xy(0, 1, "Please check");
  7331  2454  0140               	movlb	0	; select bank0
  7332  2455  01AD               	clrf	OLED_print_xy@row
  7333  2456  0AAD               	incf	OLED_print_xy@row,f
  7334  2457  3045               	movlw	low (STR_81| (0+32768))
  7335  2458  00AE               	movwf	OLED_print_xy@s
  7336  2459  30B9               	movlw	high (STR_81| (0+32768))
  7337  245A  00AF               	movwf	OLED_print_xy@s+1
  7338  245B  3000               	movlw	0
  7339  245C  31B4  2497  31A3   	fcall	_OLED_print_xy
  7340                           
  7341                           ;error.c: 79:   if (getPB() == PB_SHORT)
  7342  245F  3188  2000  31A3   	fcall	_getPB
  7343  2462  3A01               	xorlw	1
  7344  2463  1D03               	skipz
  7345  2464  2CBE               	goto	l8636
  7346                           
  7347                           ;error.c: 80:    LATCbits.LATC3 = 1;
  7348  2465  0140               	movlb	0	; select bank0
  7349  2466  159A               	bsf	26,3	;volatile
  7350  2467  2CBE               	goto	l8636
  7351  2468                     l8630:	
  7352                           
  7353                           ;error.c: 83:   OLED_print_xy(0, 0, "Menu broken ");
  7354  2468  01AD               	clrf	OLED_print_xy@row
  7355  2469  30F7               	movlw	low (STR_82| (0+32768))
  7356  246A  00AE               	movwf	OLED_print_xy@s
  7357  246B  30B8               	movlw	high (STR_82| (0+32768))
  7358  246C  00AF               	movwf	OLED_print_xy@s+1
  7359  246D  3000               	movlw	0
  7360  246E  31B4  2497  31A3   	fcall	_OLED_print_xy
  7361                           
  7362                           ;error.c: 84:   OLED_print_xy(0, 1, "    :-)     ");
  7363  2471  0140               	movlb	0	; select bank0
  7364  2472  01AD               	clrf	OLED_print_xy@row
  7365  2473  0AAD               	incf	OLED_print_xy@row,f
  7366  2474  3068               	movlw	low (STR_83| (0+32768))
  7367  2475  00AE               	movwf	OLED_print_xy@s
  7368  2476  30B8               	movlw	high (STR_83| (0+32768))
  7369  2477  00AF               	movwf	OLED_print_xy@s+1
  7370  2478  3000               	movlw	0
  7371  2479  31B4  2497  31A3   	fcall	_OLED_print_xy
  7372                           
  7373                           ;error.c: 85:   break;
  7374  247C  2CBE               	goto	l8636
  7375  247D                     l8632:	
  7376                           
  7377                           ;error.c: 87:   OLED_print_xy(0, 0, "Unknown     ");
  7378  247D  01AD               	clrf	OLED_print_xy@row
  7379  247E  3082               	movlw	low (STR_84| (0+32768))
  7380  247F  00AE               	movwf	OLED_print_xy@s
  7381  2480  30B8               	movlw	high (STR_84| (0+32768))
  7382  2481  00AF               	movwf	OLED_print_xy@s+1
  7383  2482  3000               	movlw	0
  7384  2483  31B4  2497  31A3   	fcall	_OLED_print_xy
  7385                           
  7386                           ;error.c: 88:   OLED_print_xy(0, 1, "error code  ");
  7387  2486  0140               	movlb	0	; select bank0
  7388  2487  01AD               	clrf	OLED_print_xy@row
  7389  2488  0AAD               	incf	OLED_print_xy@row,f
  7390  2489  30DD               	movlw	low (STR_85| (0+32768))
  7391  248A  00AE               	movwf	OLED_print_xy@s
  7392  248B  30B8               	movlw	high (STR_85| (0+32768))
  7393  248C  00AF               	movwf	OLED_print_xy@s+1
  7394  248D  3000               	movlw	0
  7395  248E  31B4  2497  31A3   	fcall	_OLED_print_xy
  7396                           
  7397                           ;error.c: 89:  }
  7398  2491  2CBE               	goto	l8636
  7399  2492                     l8634:	
  7400  2492  0140               	movlb	0	; select bank0
  7401  2493  0838               	movf	viewErrorMessage@errorCode,w
  7402  2494  00B6               	movwf	??_viewErrorMessage
  7403  2495  01B7               	clrf	??_viewErrorMessage+1
  7404                           
  7405                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7406                           ; Switch size 1, requested type "simple"
  7407                           ; Number of cases is 1, Range of values is 0 to 0
  7408                           ; switch strategies available:
  7409                           ; Name         Instructions Cycles
  7410                           ; simple_byte            4     3 (average)
  7411                           ; direct_byte            8     6 (fixed)
  7412                           ; jumptable            260     6 (fixed)
  7413                           ;	Chosen strategy is simple_byte
  7414  2496  0837               	movf	??_viewErrorMessage+1,w
  7415  2497  3A00               	xorlw	0	; case 0
  7416  2498  1903               	skipnz
  7417  2499  2C9B               	goto	l8860
  7418  249A  2C7D               	goto	l8632
  7419  249B                     l8860:	
  7420                           
  7421                           ; Switch size 1, requested type "simple"
  7422                           ; Number of cases is 11, Range of values is 1 to 11
  7423                           ; switch strategies available:
  7424                           ; Name         Instructions Cycles
  7425                           ; direct_byte           31     9 (fixed)
  7426                           ; simple_byte           34    18 (average)
  7427                           ; jumptable            263     9 (fixed)
  7428                           ;	Chosen strategy is simple_byte
  7429  249B  0836               	movf	??_viewErrorMessage,w
  7430  249C  3A01               	xorlw	1	; case 1
  7431  249D  1903               	skipnz
  7432  249E  2B8E               	goto	l8606
  7433  249F  3A03               	xorlw	3	; case 2
  7434  24A0  1903               	skipnz
  7435  24A1  2BA3               	goto	l8608
  7436  24A2  3A01               	xorlw	1	; case 3
  7437  24A3  1903               	skipnz
  7438  24A4  2BB8               	goto	l8610
  7439  24A5  3A07               	xorlw	7	; case 4
  7440  24A6  1903               	skipnz
  7441  24A7  2BCD               	goto	l8612
  7442  24A8  3A01               	xorlw	1	; case 5
  7443  24A9  1903               	skipnz
  7444  24AA  2BE2               	goto	l8614
  7445  24AB  3A03               	xorlw	3	; case 6
  7446  24AC  1903               	skipnz
  7447  24AD  2BF7               	goto	l8616
  7448  24AE  3A01               	xorlw	1	; case 7
  7449  24AF  1903               	skipnz
  7450  24B0  2C0C               	goto	l8618
  7451  24B1  3A0F               	xorlw	15	; case 8
  7452  24B2  1903               	skipnz
  7453  24B3  2C21               	goto	l8620
  7454  24B4  3A01               	xorlw	1	; case 9
  7455  24B5  1903               	skipnz
  7456  24B6  2C36               	goto	l8622
  7457  24B7  3A03               	xorlw	3	; case 10
  7458  24B8  1903               	skipnz
  7459  24B9  2C4B               	goto	l8624
  7460  24BA  3A01               	xorlw	1	; case 11
  7461  24BB  1903               	skipnz
  7462  24BC  2C68               	goto	l8630
  7463  24BD  2C7D               	goto	l8632
  7464  24BE                     l8636:	
  7465                           
  7466                           ;error.c: 91:  if (getPB() == PB_SHORT) {
  7467  24BE  3188  2000  31A3   	fcall	_getPB
  7468  24C1  3A01               	xorlw	1
  7469  24C2  1D03               	skipz
  7470  24C3  2CDC               	goto	l8642
  7471                           
  7472                           ;error.c: 92:   if (head != tail)
  7473  24C4  0142               	movlb	2	; select bank2
  7474  24C5  0865               	movf	_head^(0+256),w
  7475  24C6  067C               	xorwf	_tail,w
  7476  24C7  1903               	skipnz
  7477  24C8  2CDC               	goto	l8642
  7478                           
  7479                           ;error.c: 93:    tail = (tail + 1) % 10;
  7480  24C9  300A               	movlw	10
  7481  24CA  0140               	movlb	0	; select bank0
  7482  24CB  00A0               	movwf	___awmod@divisor
  7483  24CC  3000               	movlw	0
  7484  24CD  00A1               	movwf	___awmod@divisor+1
  7485  24CE  087C               	movf	_tail,w
  7486  24CF  3E01               	addlw	1
  7487  24D0  00A2               	movwf	___awmod@dividend
  7488  24D1  3000               	movlw	0
  7489  24D2  1803               	skipnc
  7490  24D3  3001               	movlw	1
  7491  24D4  00A3               	movwf	___awmod@dividend+1
  7492  24D5  31B6  2651         	fcall	___awmod
  7493  24D7  0140               	movlb	0	; select bank0
  7494  24D8  0820               	movf	?___awmod,w
  7495  24D9  00B6               	movwf	??_viewErrorMessage
  7496  24DA  0836               	movf	??_viewErrorMessage,w
  7497  24DB  00FC               	movwf	_tail
  7498  24DC                     l8642:	
  7499                           
  7500                           ;error.c: 96:  g_screenRefresh = 1;
  7501  24DC  0141               	movlb	1	; select bank1
  7502  24DD  01ED               	clrf	_g_screenRefresh^(0+128)
  7503  24DE  0AED               	incf	_g_screenRefresh^(0+128),f
  7504  24DF  0008               	return
  7505  24E0                     __end_of_viewErrorMessage:	
  7506                           
  7507                           	psect	text2
  7508  1C65                     __ptext2:	
  7509 ;; *************** function _systemCheck *****************
  7510 ;; Defined at:
  7511 ;;		line 136 in file "system.c"
  7512 ;; Parameters:    Size  Location     Type
  7513 ;;		None
  7514 ;; Auto vars:     Size  Location     Type
  7515 ;;  str             3   34[BANK1 ] unsigned char [3]
  7516 ;;  n               1   37[BANK1 ] unsigned char 
  7517 ;; Return value:  Size  Location     Type
  7518 ;;                  1    wreg      void 
  7519 ;; Registers used:
  7520 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7521 ;; Tracked objects:
  7522 ;;		On entry : 0/0
  7523 ;;		On exit  : 0/0
  7524 ;;		Unchanged: 0/0
  7525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7526 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7527 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7528 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7529 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7530 ;;Total ram usage:        8 bytes
  7531 ;; Hardware stack levels used:    1
  7532 ;; Hardware stack levels required when called:    7
  7533 ;; This function calls:
  7534 ;;		_OLED_command
  7535 ;;		_OLED_off
  7536 ;;		_OLED_print_xy
  7537 ;;		___fldiv
  7538 ;;		___flge
  7539 ;;		___flmul
  7540 ;;		___xxtofl
  7541 ;;		_error
  7542 ;;		_getAnalogValue
  7543 ;;		_itoa
  7544 ;;		_setChannelSwitch
  7545 ;; This function is called by:
  7546 ;;		_main
  7547 ;; This function uses a non-reentrant model
  7548 ;;
  7549                           
  7550                           
  7551                           ;psect for function _systemCheck
  7552  1C65                     _systemCheck:	
  7553                           
  7554                           ;system.c: 138:  uint8_t n;;system.c: 139:  char str[3];;system.c: 143:  if (data.curren
      +                          t > 3.5) {
  7555                           
  7556                           ;incstack = 0
  7557                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7558  1C65  3040               	movlw	64
  7559  1C66  0141               	movlb	1	; select bank1
  7560  1C67  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7561  1C68  3060               	movlw	96
  7562  1C69  00AF               	movwf	(___flge@ff1+2)^(0+128)
  7563  1C6A  3000               	movlw	0
  7564  1C6B  00AE               	movwf	(___flge@ff1+1)^(0+128)
  7565  1C6C  3000               	movlw	0
  7566  1C6D  00AD               	movwf	___flge@ff1^(0+128)
  7567  1C6E  304A               	movlw	74
  7568  1C6F  0086               	movwf	6
  7569  1C70  3027               	movlw	39
  7570  1C71  0087               	movwf	7
  7571  1C72  3155               	addfsr 1,21
  7572  1C73  3F40               	moviw [0]fsr1
  7573  1C74  00B1               	movwf	___flge@ff2^(0+128)
  7574  1C75  3F41               	moviw [1]fsr1
  7575  1C76  00B2               	movwf	(___flge@ff2+1)^(0+128)
  7576  1C77  3F42               	moviw [2]fsr1
  7577  1C78  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7578  1C79  3F43               	moviw [3]fsr1
  7579  1C7A  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7580  1C7B  31AB  2339  319C   	fcall	___flge
  7581  1C7E  1803               	btfsc	3,0
  7582  1C7F  2D01               	goto	l8210
  7583                           
  7584                           ;system.c: 145:   setChannelSwitch(255, 0);
  7585  1C80  0140               	movlb	0	; select bank0
  7586  1C81  01AD               	clrf	setChannelSwitch@state
  7587  1C82  30FF               	movlw	255
  7588  1C83  31B6  26DE  319C   	fcall	_setChannelSwitch
  7589                           
  7590                           ;system.c: 146:   LATCbits.LATC3 = 0;
  7591  1C86  0140               	movlb	0	; select bank0
  7592  1C87  119A               	bcf	26,3	;volatile
  7593                           
  7594                           ;system.c: 148:   if (( (getAnalogValue(0b010001) * 5.0) / (1023.0 * 0.05 * 50.0) ) > 3.
      +                          5) {
  7595  1C88  3040               	movlw	64
  7596  1C89  0141               	movlb	1	; select bank1
  7597  1C8A  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7598  1C8B  3060               	movlw	96
  7599  1C8C  00AF               	movwf	(___flge@ff1+2)^(0+128)
  7600  1C8D  3000               	movlw	0
  7601  1C8E  00AE               	movwf	(___flge@ff1+1)^(0+128)
  7602  1C8F  3000               	movlw	0
  7603  1C90  00AD               	movwf	___flge@ff1^(0+128)
  7604  1C91  3045               	movlw	69
  7605  1C92  0140               	movlb	0	; select bank0
  7606  1C93  00DE               	movwf	___fldiv@a+3
  7607  1C94  301F               	movlw	31
  7608  1C95  00DD               	movwf	___fldiv@a+2
  7609  1C96  30D8               	movlw	216
  7610  1C97  00DC               	movwf	___fldiv@a+1
  7611  1C98  3000               	movlw	0
  7612  1C99  00DB               	movwf	___fldiv@a
  7613  1C9A  3040               	movlw	64
  7614  1C9B  00C4               	movwf	___flmul@b+3
  7615  1C9C  30A0               	movlw	160
  7616  1C9D  00C3               	movwf	___flmul@b+2
  7617  1C9E  3000               	movlw	0
  7618  1C9F  00C2               	movwf	___flmul@b+1
  7619  1CA0  3000               	movlw	0
  7620  1CA1  00C1               	movwf	___flmul@b
  7621  1CA2  3011               	movlw	17
  7622  1CA3  3198  2001  319C   	fcall	_getAnalogValue
  7623  1CA6  0140               	movlb	0	; select bank0
  7624  1CA7  0820               	movf	?_getAnalogValue,w
  7625  1CA8  0141               	movlb	1	; select bank1
  7626  1CA9  00BE               	movwf	??_systemCheck^(0+128)
  7627  1CAA  0140               	movlb	0	; select bank0
  7628  1CAB  0821               	movf	?_getAnalogValue+1,w
  7629  1CAC  0141               	movlb	1	; select bank1
  7630  1CAD  00BF               	movwf	(??_systemCheck^(0+128)+1)
  7631  1CAE  01C0               	clrf	(??_systemCheck^(0+128)+2)
  7632  1CAF  01C1               	clrf	(??_systemCheck^(0+128)+3)
  7633  1CB0  0841               	movf	(??_systemCheck+3)^(0+128),w
  7634  1CB1  0140               	movlb	0	; select bank0
  7635  1CB2  00B6               	movwf	___xxtofl@val+3
  7636  1CB3  0141               	movlb	1	; select bank1
  7637  1CB4  0840               	movf	(??_systemCheck+2)^(0+128),w
  7638  1CB5  0140               	movlb	0	; select bank0
  7639  1CB6  00B5               	movwf	___xxtofl@val+2
  7640  1CB7  0141               	movlb	1	; select bank1
  7641  1CB8  083F               	movf	(??_systemCheck+1)^(0+128),w
  7642  1CB9  0140               	movlb	0	; select bank0
  7643  1CBA  00B4               	movwf	___xxtofl@val+1
  7644  1CBB  0141               	movlb	1	; select bank1
  7645  1CBC  083E               	movf	??_systemCheck^(0+128),w
  7646  1CBD  0140               	movlb	0	; select bank0
  7647  1CBE  00B3               	movwf	___xxtofl@val
  7648  1CBF  3000               	movlw	0
  7649  1CC0  31AC  24D1  319C   	fcall	___xxtofl
  7650  1CC3  0140               	movlb	0	; select bank0
  7651  1CC4  0836               	movf	?___xxtofl+3,w
  7652  1CC5  00C8               	movwf	___flmul@a+3
  7653  1CC6  0835               	movf	?___xxtofl+2,w
  7654  1CC7  00C7               	movwf	___flmul@a+2
  7655  1CC8  0834               	movf	?___xxtofl+1,w
  7656  1CC9  00C6               	movwf	___flmul@a+1
  7657  1CCA  0833               	movf	?___xxtofl,w
  7658  1CCB  00C5               	movwf	___flmul@a
  7659  1CCC  3185  2561  319C   	fcall	___flmul
  7660  1CCF  0140               	movlb	0	; select bank0
  7661  1CD0  0844               	movf	?___flmul+3,w
  7662  1CD1  00E2               	movwf	___fldiv@b+3
  7663  1CD2  0843               	movf	?___flmul+2,w
  7664  1CD3  00E1               	movwf	___fldiv@b+2
  7665  1CD4  0842               	movf	?___flmul+1,w
  7666  1CD5  00E0               	movwf	___fldiv@b+1
  7667  1CD6  0841               	movf	?___flmul,w
  7668  1CD7  00DF               	movwf	___fldiv@b
  7669  1CD8  319E  2628  319C   	fcall	___fldiv
  7670  1CDB  0140               	movlb	0	; select bank0
  7671  1CDC  085E               	movf	?___fldiv+3,w
  7672  1CDD  0141               	movlb	1	; select bank1
  7673  1CDE  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7674  1CDF  0140               	movlb	0	; select bank0
  7675  1CE0  085D               	movf	?___fldiv+2,w
  7676  1CE1  0141               	movlb	1	; select bank1
  7677  1CE2  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7678  1CE3  0140               	movlb	0	; select bank0
  7679  1CE4  085C               	movf	?___fldiv+1,w
  7680  1CE5  0141               	movlb	1	; select bank1
  7681  1CE6  00B2               	movwf	(___flge@ff2+1)^(0+128)
  7682  1CE7  0140               	movlb	0	; select bank0
  7683  1CE8  085B               	movf	?___fldiv,w
  7684  1CE9  0141               	movlb	1	; select bank1
  7685  1CEA  00B1               	movwf	___flge@ff2^(0+128)
  7686  1CEB  31AB  2339  319C   	fcall	___flge
  7687  1CEE  1803               	btfsc	3,0
  7688  1CEF  2CF2               	goto	l8204
  7689                           
  7690                           ;system.c: 151:    error(ERR_NUKED);
  7691  1CF0  3009               	movlw	9
  7692  1CF1  2CFE               	goto	L1
  7693  1CF2                     l8204:	
  7694                           ;system.c: 152:   } else {
  7695                           
  7696                           
  7697                           ;system.c: 154:    if (! data.status.OVERCURRENT) {
  7698  1CF2  3073               	movlw	115
  7699  1CF3  0086               	movwf	6
  7700  1CF4  3027               	movlw	39
  7701  1CF5  0087               	movwf	7
  7702  1CF6  1901               	btfsc	1,2
  7703  1CF7  2D01               	goto	l8210
  7704                           
  7705                           ;system.c: 155:     data.status.OVERCURRENT = 1;
  7706  1CF8  3073               	movlw	115
  7707  1CF9  0086               	movwf	6
  7708  1CFA  3027               	movlw	39
  7709  1CFB  0087               	movwf	7
  7710  1CFC  1501               	bsf	1,2
  7711                           
  7712                           ;system.c: 156:     error(ERR_OVERCURRENT);
  7713  1CFD  300A               	movlw	10
  7714  1CFE                     L1:	
  7715  1CFE  31B5  25D1  319C   	fcall	_error
  7716  1D01                     l8210:	
  7717                           
  7718                           ;system.c: 166:  if ((data.voltage > 13.8) || (data.voltage <= 11.0)) {
  7719  1D01  3041               	movlw	65
  7720  1D02  0141               	movlb	1	; select bank1
  7721  1D03  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7722  1D04  305C               	movlw	92
  7723  1D05  00AF               	movwf	(___flge@ff1+2)^(0+128)
  7724  1D06  30CC               	movlw	204
  7725  1D07  00AE               	movwf	(___flge@ff1+1)^(0+128)
  7726  1D08  30CD               	movlw	205
  7727  1D09  00AD               	movwf	___flge@ff1^(0+128)
  7728  1D0A  304A               	movlw	74
  7729  1D0B  0086               	movwf	6
  7730  1D0C  3027               	movlw	39
  7731  1D0D  0087               	movwf	7
  7732  1D0E  3151               	addfsr 1,17
  7733  1D0F  3F40               	moviw [0]fsr1
  7734  1D10  00B1               	movwf	___flge@ff2^(0+128)
  7735  1D11  3F41               	moviw [1]fsr1
  7736  1D12  00B2               	movwf	(___flge@ff2+1)^(0+128)
  7737  1D13  3F42               	moviw [2]fsr1
  7738  1D14  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7739  1D15  3F43               	moviw [3]fsr1
  7740  1D16  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7741  1D17  31AB  2339  319C   	fcall	___flge
  7742  1D1A  1C03               	btfss	3,0
  7743  1D1B  2D37               	goto	l8214
  7744  1D1C  3041               	movlw	65
  7745  1D1D  0141               	movlb	1	; select bank1
  7746  1D1E  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7747  1D1F  3030               	movlw	48
  7748  1D20  00AF               	movwf	(___flge@ff1+2)^(0+128)
  7749  1D21  3000               	movlw	0
  7750  1D22  00AE               	movwf	(___flge@ff1+1)^(0+128)
  7751  1D23  3000               	movlw	0
  7752  1D24  00AD               	movwf	___flge@ff1^(0+128)
  7753  1D25  304A               	movlw	74
  7754  1D26  0086               	movwf	6
  7755  1D27  3027               	movlw	39
  7756  1D28  0087               	movwf	7
  7757  1D29  3151               	addfsr 1,17
  7758  1D2A  3F40               	moviw [0]fsr1
  7759  1D2B  00B1               	movwf	___flge@ff2^(0+128)
  7760  1D2C  3F41               	moviw [1]fsr1
  7761  1D2D  00B2               	movwf	(___flge@ff2+1)^(0+128)
  7762  1D2E  3F42               	moviw [2]fsr1
  7763  1D2F  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7764  1D30  3F43               	moviw [3]fsr1
  7765  1D31  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7766  1D32  31AB  2339  319C   	fcall	___flge
  7767  1D35  1C03               	btfss	3,0
  7768  1D36  2D93               	goto	l8248
  7769  1D37                     l8214:	
  7770                           
  7771                           ;system.c: 167:   INTCON = 0;
  7772  1D37  018B               	clrf	11	;volatile
  7773                           
  7774                           ;system.c: 168:   OLED_command(0x01);
  7775  1D38  3001               	movlw	1
  7776  1D39  31B2  22E2  319C   	fcall	_OLED_command
  7777                           
  7778                           ;system.c: 169:   OLED_command(0x02);
  7779  1D3C  3002               	movlw	2
  7780  1D3D  31B2  22E2  319C   	fcall	_OLED_command
  7781                           
  7782                           ;system.c: 170:   OLED_print_xy(0, 0, "TURNING OFF");
  7783  1D40  0140               	movlb	0	; select bank0
  7784  1D41  01AD               	clrf	OLED_print_xy@row
  7785  1D42  303C               	movlw	low (STR_86| (0+32768))
  7786  1D43  00AE               	movwf	OLED_print_xy@s
  7787  1D44  30BA               	movlw	high (STR_86| (0+32768))
  7788  1D45  00AF               	movwf	OLED_print_xy@s+1
  7789  1D46  3000               	movlw	0
  7790  1D47  31B4  2497  319C   	fcall	_OLED_print_xy
  7791                           
  7792                           ;system.c: 171:   setChannelSwitch(255, 0);
  7793  1D4A  0140               	movlb	0	; select bank0
  7794  1D4B  01AD               	clrf	setChannelSwitch@state
  7795  1D4C  30FF               	movlw	255
  7796  1D4D  31B6  26DE  319C   	fcall	_setChannelSwitch
  7797                           
  7798                           ;system.c: 172:   LATCbits.LATC3 = 0;
  7799  1D50  0140               	movlb	0	; select bank0
  7800  1D51  119A               	bcf	26,3	;volatile
  7801                           
  7802                           ;system.c: 173:   for(n = 5; n > 0; n--) {
  7803  1D52  3005               	movlw	5
  7804  1D53  0141               	movlb	1	; select bank1
  7805  1D54  00BE               	movwf	??_systemCheck^(0+128)
  7806  1D55  083E               	movf	??_systemCheck^(0+128),w
  7807  1D56  00C5               	movwf	systemCheck@n^(0+128)
  7808  1D57                     l8232:	
  7809                           
  7810                           ;system.c: 174:    itoa(str, n, 1);
  7811  1D57  30C2               	movlw	low systemCheck@str
  7812  1D58  00B3               	movwf	itoa@str^(0+128)
  7813  1D59  3000               	movlw	high systemCheck@str
  7814  1D5A  00B4               	movwf	(itoa@str+1)^(0+128)
  7815  1D5B  0845               	movf	systemCheck@n^(0+128),w
  7816  1D5C  00BE               	movwf	??_systemCheck^(0+128)
  7817  1D5D  083E               	movf	??_systemCheck^(0+128),w
  7818  1D5E  00B5               	movwf	itoa@value^(0+128)
  7819  1D5F  01B6               	clrf	itoa@width^(0+128)
  7820  1D60  0AB6               	incf	itoa@width^(0+128),f
  7821  1D61  31A9  218F  319C   	fcall	_itoa
  7822                           
  7823                           ;system.c: 175:    OLED_print_xy(0, 1, "IN ");
  7824  1D64  0140               	movlb	0	; select bank0
  7825  1D65  01AD               	clrf	OLED_print_xy@row
  7826  1D66  0AAD               	incf	OLED_print_xy@row,f
  7827  1D67  30CE               	movlw	low (STR_87| (0+32768))
  7828  1D68  00AE               	movwf	OLED_print_xy@s
  7829  1D69  30BA               	movlw	high (STR_87| (0+32768))
  7830  1D6A  00AF               	movwf	OLED_print_xy@s+1
  7831  1D6B  3000               	movlw	0
  7832  1D6C  31B4  2497  319C   	fcall	_OLED_print_xy
  7833                           
  7834                           ;system.c: 176:    OLED_print_xy(3, 1, str);
  7835  1D6F  0140               	movlb	0	; select bank0
  7836  1D70  01AD               	clrf	OLED_print_xy@row
  7837  1D71  0AAD               	incf	OLED_print_xy@row,f
  7838  1D72  30C2               	movlw	low systemCheck@str
  7839  1D73  00AE               	movwf	OLED_print_xy@s
  7840  1D74  3000               	movlw	high systemCheck@str
  7841  1D75  00AF               	movwf	OLED_print_xy@s+1
  7842  1D76  3003               	movlw	3
  7843  1D77  31B4  2497  319C   	fcall	_OLED_print_xy
  7844                           
  7845                           ;system.c: 177:    _delay((unsigned long)((1000)*(4000000UL/4000.0)));
  7846  1D7A  3006               	movlw	6
  7847  1D7B  0141               	movlb	1	; select bank1
  7848  1D7C  00BF               	movwf	(??_systemCheck^(0+128)+1)
  7849  1D7D  3013               	movlw	19
  7850  1D7E  00BE               	movwf	??_systemCheck^(0+128)
  7851  1D7F  30AD               	movlw	173
  7852  1D80                     u10537:	
  7853  1D80  0B89               	decfsz	9,f
  7854  1D81  2D80               	goto	u10537
  7855  1D82  0BBE               	decfsz	??_systemCheck^(0+128),f
  7856  1D83  2D80               	goto	u10537
  7857  1D84  0BBF               	decfsz	(??_systemCheck^(0+128)+1),f
  7858  1D85  2D80               	goto	u10537
  7859  1D86  3200               	nop2
  7860                           
  7861                           ;system.c: 178:   }
  7862  1D87  3001               	movlw	1
  7863  1D88  0141               	movlb	1	; select bank1
  7864  1D89  02C5               	subwf	systemCheck@n^(0+128),f
  7865  1D8A  0845               	movf	systemCheck@n^(0+128),w
  7866  1D8B  1D03               	btfss	3,2
  7867  1D8C  2D57               	goto	l8232
  7868                           
  7869                           ;system.c: 179:   OLED_off();
  7870  1D8D  31B2  22DA  319C   	fcall	_OLED_off
  7871                           
  7872                           ;system.c: 180:   LATBbits.LATB5 = 0;
  7873  1D90  0140               	movlb	0	; select bank0
  7874  1D91  1299               	bcf	25,5	;volatile
  7875  1D92                     l821:	
  7876                           ;system.c: 182:   while(1);
  7877                           
  7878  1D92  2D92               	goto	l821
  7879  1D93                     l8248:	
  7880  1D93  3041               	movlw	65
  7881  1D94  0141               	movlb	1	; select bank1
  7882  1D95  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7883  1D96  3050               	movlw	80
  7884  1D97  00AF               	movwf	(___flge@ff1+2)^(0+128)
  7885  1D98  3000               	movlw	0
  7886  1D99  00AE               	movwf	(___flge@ff1+1)^(0+128)
  7887  1D9A  3000               	movlw	0
  7888  1D9B  00AD               	movwf	___flge@ff1^(0+128)
  7889  1D9C  304A               	movlw	74
  7890  1D9D  0086               	movwf	6
  7891  1D9E  3027               	movlw	39
  7892  1D9F  0087               	movwf	7
  7893  1DA0  3151               	addfsr 1,17
  7894  1DA1  3F40               	moviw [0]fsr1
  7895  1DA2  00B1               	movwf	___flge@ff2^(0+128)
  7896  1DA3  3F41               	moviw [1]fsr1
  7897  1DA4  00B2               	movwf	(___flge@ff2+1)^(0+128)
  7898  1DA5  3F42               	moviw [2]fsr1
  7899  1DA6  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7900  1DA7  3F43               	moviw [3]fsr1
  7901  1DA8  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7902  1DA9  31AB  2339  319C   	fcall	___flge
  7903  1DAC  1803               	btfsc	3,0
  7904  1DAD  2DD8               	goto	l8258
  7905  1DAE  3041               	movlw	65
  7906  1DAF  0141               	movlb	1	; select bank1
  7907  1DB0  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7908  1DB1  305C               	movlw	92
  7909  1DB2  00AF               	movwf	(___flge@ff1+2)^(0+128)
  7910  1DB3  30CC               	movlw	204
  7911  1DB4  00AE               	movwf	(___flge@ff1+1)^(0+128)
  7912  1DB5  30CD               	movlw	205
  7913  1DB6  00AD               	movwf	___flge@ff1^(0+128)
  7914  1DB7  304A               	movlw	74
  7915  1DB8  0086               	movwf	6
  7916  1DB9  3027               	movlw	39
  7917  1DBA  0087               	movwf	7
  7918  1DBB  3151               	addfsr 1,17
  7919  1DBC  3F40               	moviw [0]fsr1
  7920  1DBD  00B1               	movwf	___flge@ff2^(0+128)
  7921  1DBE  3F41               	moviw [1]fsr1
  7922  1DBF  00B2               	movwf	(___flge@ff2+1)^(0+128)
  7923  1DC0  3F42               	moviw [2]fsr1
  7924  1DC1  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7925  1DC2  3F43               	moviw [3]fsr1
  7926  1DC3  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7927  1DC4  31AB  2339  319C   	fcall	___flge
  7928  1DC7  1C03               	btfss	3,0
  7929  1DC8  2DD8               	goto	l8258
  7930                           
  7931                           ;system.c: 185:   if (! data.status.BAT_HIGH) {
  7932  1DC9  3073               	movlw	115
  7933  1DCA  0086               	movwf	6
  7934  1DCB  3027               	movlw	39
  7935  1DCC  0087               	movwf	7
  7936  1DCD  1881               	btfsc	1,1
  7937  1DCE  0008               	return
  7938                           
  7939                           ;system.c: 186:    data.status.BAT_HIGH = 1;
  7940  1DCF  3073               	movlw	115
  7941  1DD0  0086               	movwf	6
  7942  1DD1  3027               	movlw	39
  7943  1DD2  0087               	movwf	7
  7944  1DD3  1481               	bsf	1,1
  7945                           
  7946                           ;system.c: 187:    error(WARN_VOLT_HIGH);
  7947  1DD4  3005               	movlw	5
  7948  1DD5  31B5  25D1         	fcall	_error
  7949  1DD7  0008               	return
  7950  1DD8                     l8258:	
  7951  1DD8  3041               	movlw	65
  7952  1DD9  0141               	movlb	1	; select bank1
  7953  1DDA  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7954  1DDB  3030               	movlw	48
  7955  1DDC  00AF               	movwf	(___flge@ff1+2)^(0+128)
  7956  1DDD  3000               	movlw	0
  7957  1DDE  00AE               	movwf	(___flge@ff1+1)^(0+128)
  7958  1DDF  3000               	movlw	0
  7959  1DE0  00AD               	movwf	___flge@ff1^(0+128)
  7960  1DE1  304A               	movlw	74
  7961  1DE2  0086               	movwf	6
  7962  1DE3  3027               	movlw	39
  7963  1DE4  0087               	movwf	7
  7964  1DE5  3151               	addfsr 1,17
  7965  1DE6  3F40               	moviw [0]fsr1
  7966  1DE7  00B1               	movwf	___flge@ff2^(0+128)
  7967  1DE8  3F41               	moviw [1]fsr1
  7968  1DE9  00B2               	movwf	(___flge@ff2+1)^(0+128)
  7969  1DEA  3F42               	moviw [2]fsr1
  7970  1DEB  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7971  1DEC  3F43               	moviw [3]fsr1
  7972  1DED  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7973  1DEE  31AB  2339  319C   	fcall	___flge
  7974  1DF1  1803               	btfsc	3,0
  7975  1DF2  2E1D               	goto	l8268
  7976  1DF3  3041               	movlw	65
  7977  1DF4  0141               	movlb	1	; select bank1
  7978  1DF5  00B0               	movwf	(___flge@ff1+3)^(0+128)
  7979  1DF6  3036               	movlw	54
  7980  1DF7  00AF               	movwf	(___flge@ff1+2)^(0+128)
  7981  1DF8  3066               	movlw	102
  7982  1DF9  00AE               	movwf	(___flge@ff1+1)^(0+128)
  7983  1DFA  3066               	movlw	102
  7984  1DFB  00AD               	movwf	___flge@ff1^(0+128)
  7985  1DFC  304A               	movlw	74
  7986  1DFD  0086               	movwf	6
  7987  1DFE  3027               	movlw	39
  7988  1DFF  0087               	movwf	7
  7989  1E00  3151               	addfsr 1,17
  7990  1E01  3F40               	moviw [0]fsr1
  7991  1E02  00B1               	movwf	___flge@ff2^(0+128)
  7992  1E03  3F41               	moviw [1]fsr1
  7993  1E04  00B2               	movwf	(___flge@ff2+1)^(0+128)
  7994  1E05  3F42               	moviw [2]fsr1
  7995  1E06  00B3               	movwf	(___flge@ff2+2)^(0+128)
  7996  1E07  3F43               	moviw [3]fsr1
  7997  1E08  00B4               	movwf	(___flge@ff2+3)^(0+128)
  7998  1E09  31AB  2339  319C   	fcall	___flge
  7999  1E0C  1C03               	btfss	3,0
  8000  1E0D  2E1D               	goto	l8268
  8001                           
  8002                           ;system.c: 190:   if (! data.status.BAT_LOW) {
  8003  1E0E  3073               	movlw	115
  8004  1E0F  0086               	movwf	6
  8005  1E10  3027               	movlw	39
  8006  1E11  0087               	movwf	7
  8007  1E12  1801               	btfsc	1,0
  8008  1E13  0008               	return
  8009                           
  8010                           ;system.c: 191:    data.status.BAT_LOW = 1;
  8011  1E14  3073               	movlw	115
  8012  1E15  0086               	movwf	6
  8013  1E16  3027               	movlw	39
  8014  1E17  0087               	movwf	7
  8015  1E18  1401               	bsf	1,0
  8016                           
  8017                           ;system.c: 192:    error(WARN_VOLT_LOW);
  8018  1E19  3006               	movlw	6
  8019  1E1A  31B5  25D1         	fcall	_error
  8020  1E1C  0008               	return
  8021  1E1D                     l8268:	
  8022                           
  8023                           ;system.c: 195:   data.status.BAT_HIGH = 0;
  8024  1E1D  3073               	movlw	115
  8025  1E1E  0086               	movwf	6
  8026  1E1F  3027               	movlw	39
  8027  1E20  0087               	movwf	7
  8028  1E21  1081               	bcf	1,1
  8029                           
  8030                           ;system.c: 196:   data.status.BAT_LOW = 0;
  8031  1E22  3073               	movlw	115
  8032  1E23  0086               	movwf	6
  8033  1E24  3027               	movlw	39
  8034  1E25  0087               	movwf	7
  8035  1E26  1001               	bcf	1,0
  8036  1E27  0008               	return
  8037  1E28                     __end_of_systemCheck:	
  8038                           
  8039                           	psect	text3
  8040  32DA                     __ptext3:	
  8041 ;; *************** function _OLED_off *****************
  8042 ;; Defined at:
  8043 ;;		line 12 in file "oled.c"
  8044 ;; Parameters:    Size  Location     Type
  8045 ;;		None
  8046 ;; Auto vars:     Size  Location     Type
  8047 ;;		None
  8048 ;; Return value:  Size  Location     Type
  8049 ;;                  1    wreg      void 
  8050 ;; Registers used:
  8051 ;;		wreg, status,2, status,0, pclath, cstack
  8052 ;; Tracked objects:
  8053 ;;		On entry : 0/0
  8054 ;;		On exit  : 0/0
  8055 ;;		Unchanged: 0/0
  8056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8058 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8059 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8060 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8061 ;;Total ram usage:        0 bytes
  8062 ;; Hardware stack levels used:    1
  8063 ;; Hardware stack levels required when called:    6
  8064 ;; This function calls:
  8065 ;;		_OLED_command
  8066 ;; This function is called by:
  8067 ;;		_systemCheck
  8068 ;; This function uses a non-reentrant model
  8069 ;;
  8070                           
  8071                           
  8072                           ;psect for function _OLED_off
  8073  32DA                     _OLED_off:	
  8074                           
  8075                           ;oled.c: 14:  OLED_command(0x08);
  8076                           
  8077                           ;incstack = 0
  8078                           ; Regs used in _OLED_off: [wreg+status,2+status,0+pclath+cstack]
  8079  32DA  3008               	movlw	8
  8080  32DB  31B2  22E2  31B2   	fcall	_OLED_command
  8081                           
  8082                           ;oled.c: 15:  OLED_command(0x13);
  8083  32DE  3013               	movlw	19
  8084  32DF  31B2  22E2         	fcall	_OLED_command
  8085  32E1  0008               	return
  8086  32E2                     __end_of_OLED_off:	
  8087                           
  8088                           	psect	text4
  8089  181E                     __ptext4:	
  8090 ;; *************** function _menu *****************
  8091 ;; Defined at:
  8092 ;;		line 80 in file "menuhelper.c"
  8093 ;; Parameters:    Size  Location     Type
  8094 ;;		None
  8095 ;; Auto vars:     Size  Location     Type
  8096 ;;  func            2   57[BANK1 ] PTR FTN()unsigned char 
  8097 ;;		 -> setFudgeFactor(1), setSkyTemp(1), setDPOffset(1), setup(1), 
  8098 ;;		 -> setLensDia(1), setOutputPower(1), channelSetup(1), channelView(1), 
  8099 ;;		 -> statusView(1), 
  8100 ;;  nextState       1   59[BANK1 ] char 
  8101 ;;  timeout         1   56[BANK1 ] unsigned char 
  8102 ;;  pb              1   55[BANK1 ] enum E7868
  8103 ;;  page            1   54[BANK1 ] char 
  8104 ;; Return value:  Size  Location     Type
  8105 ;;                  1    wreg      void 
  8106 ;; Registers used:
  8107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8108 ;; Tracked objects:
  8109 ;;		On entry : 0/0
  8110 ;;		On exit  : 0/0
  8111 ;;		Unchanged: 0/0
  8112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8114 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8115 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8116 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8117 ;;Total ram usage:       10 bytes
  8118 ;; Hardware stack levels used:    1
  8119 ;; Hardware stack levels required when called:    8
  8120 ;; This function calls:
  8121 ;;		_OLED_command
  8122 ;;		_channelSetup
  8123 ;;		_channelView
  8124 ;;		_error
  8125 ;;		_getNextState
  8126 ;;		_getPB
  8127 ;;		_setDPOffset
  8128 ;;		_setFudgeFactor
  8129 ;;		_setLensDia
  8130 ;;		_setOutputPower
  8131 ;;		_setSkyTemp
  8132 ;;		_setup
  8133 ;;		_statusView
  8134 ;;		_timeSince
  8135 ;; This function is called by:
  8136 ;;		_main
  8137 ;; This function uses a non-reentrant model
  8138 ;;
  8139                           
  8140                           
  8141                           ;psect for function _menu
  8142  181E                     _menu:	
  8143                           
  8144                           ;menuhelper.c: 86:  enum e_buttonPress pb;;menuhelper.c: 87:  t_stateFuncPtr func;;menuh
      +                          elper.c: 90:  if (sleep) {
  8145                           
  8146                           ;incstack = 0
  8147                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8148  181E  0142               	movlb	2	; select bank2
  8149  181F  0864               	movf	menu@sleep^(0+256),w
  8150  1820  1903               	btfsc	3,2
  8151  1821  2848               	goto	l8658
  8152                           
  8153                           ;menuhelper.c: 91:   if (timeSince(userActivity) < 1200) {
  8154  1822  085F               	movf	(_userActivity+3)^(0+256),w	;volatile
  8155  1823  0140               	movlb	0	; select bank0
  8156  1824  00A3               	movwf	timeSince@since+3
  8157  1825  0142               	movlb	2	; select bank2
  8158  1826  085E               	movf	(_userActivity+2)^(0+256),w	;volatile
  8159  1827  0140               	movlb	0	; select bank0
  8160  1828  00A2               	movwf	timeSince@since+2
  8161  1829  0142               	movlb	2	; select bank2
  8162  182A  085D               	movf	(_userActivity+1)^(0+256),w	;volatile
  8163  182B  0140               	movlb	0	; select bank0
  8164  182C  00A1               	movwf	timeSince@since+1
  8165  182D  0142               	movlb	2	; select bank2
  8166  182E  085C               	movf	_userActivity^(0+256),w	;volatile
  8167  182F  0140               	movlb	0	; select bank0
  8168  1830  00A0               	movwf	timeSince@since
  8169  1831  3190  2000  3198   	fcall	_timeSince
  8170  1834  0140               	movlb	0	; select bank0
  8171  1835  0823               	movf	?_timeSince+3,w
  8172  1836  1D03               	btfss	3,2
  8173  1837  0008               	return
  8174  1838  0822               	movf	?_timeSince+2,w
  8175  1839  1D03               	btfss	3,2
  8176  183A  0008               	return
  8177  183B  30B0               	movlw	176
  8178  183C  0220               	subwf	?_timeSince,w
  8179  183D  3004               	movlw	4
  8180  183E  3B21               	subwfb	?_timeSince+1,w
  8181  183F  1803               	btfsc	3,0
  8182  1840  0008               	return
  8183                           
  8184                           ;menuhelper.c: 93:    sleep = 0;
  8185  1841  0142               	movlb	2	; select bank2
  8186  1842  01E4               	clrf	menu@sleep^(0+256)
  8187                           
  8188                           ;menuhelper.c: 94:    OLED_command(0x08 | 0x04);
  8189  1843  300C               	movlw	12
  8190  1844  31B2  22E2  3198   	fcall	_OLED_command
  8191                           
  8192                           ;menuhelper.c: 95:   } else {
  8193  1847  286E               	goto	l8666
  8194  1848                     l8658:	
  8195                           
  8196                           ;menuhelper.c: 99:   if (timeSince(userActivity) > 1200) {
  8197  1848  085F               	movf	(_userActivity+3)^(0+256),w	;volatile
  8198  1849  0140               	movlb	0	; select bank0
  8199  184A  00A3               	movwf	timeSince@since+3
  8200  184B  0142               	movlb	2	; select bank2
  8201  184C  085E               	movf	(_userActivity+2)^(0+256),w	;volatile
  8202  184D  0140               	movlb	0	; select bank0
  8203  184E  00A2               	movwf	timeSince@since+2
  8204  184F  0142               	movlb	2	; select bank2
  8205  1850  085D               	movf	(_userActivity+1)^(0+256),w	;volatile
  8206  1851  0140               	movlb	0	; select bank0
  8207  1852  00A1               	movwf	timeSince@since+1
  8208  1853  0142               	movlb	2	; select bank2
  8209  1854  085C               	movf	_userActivity^(0+256),w	;volatile
  8210  1855  0140               	movlb	0	; select bank0
  8211  1856  00A0               	movwf	timeSince@since
  8212  1857  3190  2000  3198   	fcall	_timeSince
  8213  185A  0140               	movlb	0	; select bank0
  8214  185B  0823               	movf	?_timeSince+3,w
  8215  185C  1D03               	btfss	3,2
  8216  185D  2867               	goto	l8660
  8217  185E  0822               	movf	?_timeSince+2,w
  8218  185F  1D03               	btfss	3,2
  8219  1860  2867               	goto	l8660
  8220  1861  30B1               	movlw	177
  8221  1862  0220               	subwf	?_timeSince,w
  8222  1863  3004               	movlw	4
  8223  1864  3B21               	subwfb	?_timeSince+1,w
  8224  1865  1C03               	btfss	3,0
  8225  1866  286E               	goto	l8666
  8226  1867                     l8660:	
  8227                           
  8228                           ;menuhelper.c: 100:    sleep = 1;
  8229  1867  0142               	movlb	2	; select bank2
  8230  1868  01E4               	clrf	menu@sleep^(0+256)
  8231  1869  0AE4               	incf	menu@sleep^(0+256),f
  8232                           
  8233                           ;menuhelper.c: 101:    OLED_command(0x08 | 0x00);
  8234  186A  3008               	movlw	8
  8235  186B  31B2  22E2         	fcall	_OLED_command
  8236  186D  0008               	return
  8237  186E                     l8666:	
  8238                           
  8239                           ;menuhelper.c: 107:  func = stateFuncTbl[state];
  8240  186E  0142               	movlb	2	; select bank2
  8241  186F  0863               	movf	menu@state^(0+256),w
  8242  1870  0141               	movlb	1	; select bank1
  8243  1871  00D2               	movwf	??_menu^(0+128)
  8244  1872  01D3               	clrf	(??_menu^(0+128)+1)
  8245  1873  35D2               	lslf	??_menu^(0+128),f
  8246  1874  0DD3               	rlf	(??_menu^(0+128)+1),f
  8247  1875  3054               	movlw	low (_stateFuncTbl| (0+32768))
  8248  1876  0752               	addwf	??_menu^(0+128),w
  8249  1877  0084               	movwf	4
  8250  1878  30B0               	movlw	high (_stateFuncTbl| (0+32768))
  8251  1879  3D53               	addwfc	(??_menu+1)^(0+128),w
  8252  187A  0085               	movwf	5
  8253  187B  3F00               	moviw [0]fsr0
  8254  187C  00D9               	movwf	menu@func^(0+128)
  8255  187D  3F01               	moviw [1]fsr0
  8256  187E  00DA               	movwf	(menu@func+1)^(0+128)
  8257                           
  8258                           ;menuhelper.c: 108:  if (func)
  8259  187F  0859               	movf	menu@func^(0+128),w
  8260  1880  045A               	iorwf	(menu@func+1)^(0+128),w
  8261  1881  1903               	btfsc	3,2
  8262  1882  288D               	goto	l8672
  8263                           
  8264                           ;menuhelper.c: 109:   page = (*func)();
  8265  1883  085A               	movf	(menu@func+1)^(0+128),w
  8266  1884  008A               	movwf	10
  8267  1885  0859               	movf	menu@func^(0+128),w
  8268  1886  000A               	callw
  8269  1887  3198               	pagesel	$
  8270  1888  0141               	movlb	1	; select bank1
  8271  1889  00D2               	movwf	??_menu^(0+128)
  8272  188A  0852               	movf	??_menu^(0+128),w
  8273  188B  00D6               	movwf	menu@page^(0+128)
  8274  188C  2891               	goto	l8674
  8275  188D                     l8672:	
  8276                           
  8277                           ;menuhelper.c: 111:   error(ERR_MENU);
  8278  188D  300B               	movlw	11
  8279  188E  31B5  25D1  3198   	fcall	_error
  8280  1891                     l8674:	
  8281                           
  8282                           ;menuhelper.c: 113:  g_screenRefresh = 0;
  8283  1891  0141               	movlb	1	; select bank1
  8284  1892  01ED               	clrf	_g_screenRefresh^(0+128)
  8285                           
  8286                           ;menuhelper.c: 114:  pb = getPB();
  8287  1893  3188  2000  3198   	fcall	_getPB
  8288  1896  0141               	movlb	1	; select bank1
  8289  1897  00D2               	movwf	??_menu^(0+128)
  8290  1898  0852               	movf	??_menu^(0+128),w
  8291  1899  00D7               	movwf	menu@pb^(0+128)
  8292                           
  8293                           ;menuhelper.c: 115:  timeout = (timeSince(userActivity) > 300);
  8294  189A  0142               	movlb	2	; select bank2
  8295  189B  085F               	movf	(_userActivity+3)^(0+256),w	;volatile
  8296  189C  0140               	movlb	0	; select bank0
  8297  189D  00A3               	movwf	timeSince@since+3
  8298  189E  0142               	movlb	2	; select bank2
  8299  189F  085E               	movf	(_userActivity+2)^(0+256),w	;volatile
  8300  18A0  0140               	movlb	0	; select bank0
  8301  18A1  00A2               	movwf	timeSince@since+2
  8302  18A2  0142               	movlb	2	; select bank2
  8303  18A3  085D               	movf	(_userActivity+1)^(0+256),w	;volatile
  8304  18A4  0140               	movlb	0	; select bank0
  8305  18A5  00A1               	movwf	timeSince@since+1
  8306  18A6  0142               	movlb	2	; select bank2
  8307  18A7  085C               	movf	_userActivity^(0+256),w	;volatile
  8308  18A8  0140               	movlb	0	; select bank0
  8309  18A9  00A0               	movwf	timeSince@since
  8310  18AA  3190  2000  3198   	fcall	_timeSince
  8311  18AD  0140               	movlb	0	; select bank0
  8312  18AE  0823               	movf	?_timeSince+3,w
  8313  18AF  1D03               	btfss	3,2
  8314  18B0  28BA               	goto	u10421
  8315  18B1  0822               	movf	?_timeSince+2,w
  8316  18B2  1D03               	btfss	3,2
  8317  18B3  28BA               	goto	u10421
  8318  18B4  302D               	movlw	45
  8319  18B5  0220               	subwf	?_timeSince,w
  8320  18B6  3001               	movlw	1
  8321  18B7  3B21               	subwfb	?_timeSince+1,w
  8322  18B8  1C03               	btfss	3,0
  8323  18B9  28BC               	goto	u10420
  8324  18BA                     u10421:	
  8325  18BA  3001               	movlw	1
  8326  18BB  28BD               	goto	u10430
  8327  18BC                     u10420:	
  8328  18BC  3000               	movlw	0
  8329  18BD                     u10430:	
  8330  18BD  0141               	movlb	1	; select bank1
  8331  18BE  00D2               	movwf	??_menu^(0+128)
  8332  18BF  0852               	movf	??_menu^(0+128),w
  8333  18C0  00D8               	movwf	menu@timeout^(0+128)
  8334                           
  8335                           ;menuhelper.c: 117:  nextState = getNextState(state, page, pb, timeout);
  8336  18C1  0856               	movf	menu@page^(0+128),w
  8337  18C2  00D2               	movwf	??_menu^(0+128)
  8338  18C3  0852               	movf	??_menu^(0+128),w
  8339  18C4  0140               	movlb	0	; select bank0
  8340  18C5  00B3               	movwf	getNextState@intState
  8341  18C6  0141               	movlb	1	; select bank1
  8342  18C7  0857               	movf	menu@pb^(0+128),w
  8343  18C8  00D3               	movwf	(??_menu+1)^(0+128)
  8344  18C9  0853               	movf	(??_menu+1)^(0+128),w
  8345  18CA  0140               	movlb	0	; select bank0
  8346  18CB  00B4               	movwf	getNextState@pb
  8347  18CC  0141               	movlb	1	; select bank1
  8348  18CD  0858               	movf	menu@timeout^(0+128),w
  8349  18CE  00D4               	movwf	(??_menu+2)^(0+128)
  8350  18CF  0854               	movf	(??_menu+2)^(0+128),w
  8351  18D0  0140               	movlb	0	; select bank0
  8352  18D1  00B5               	movwf	getNextState@timeout
  8353  18D2  0142               	movlb	2	; select bank2
  8354  18D3  0863               	movf	menu@state^(0+256),w
  8355  18D4  31A0  2020  3198   	fcall	_getNextState
  8356  18D7  0141               	movlb	1	; select bank1
  8357  18D8  00D5               	movwf	(??_menu+3)^(0+128)
  8358  18D9  0855               	movf	(??_menu+3)^(0+128),w
  8359  18DA  00DB               	movwf	menu@nextState^(0+128)
  8360                           
  8361                           ;menuhelper.c: 119:  if (nextState > -1) {
  8362  18DB  1BDB               	btfsc	menu@nextState^(0+128),7
  8363  18DC  28F7               	goto	l8690
  8364                           
  8365                           ;menuhelper.c: 121:   if (state != nextState) {
  8366  18DD  085B               	movf	menu@nextState^(0+128),w
  8367  18DE  00D2               	movwf	??_menu^(0+128)
  8368  18DF  01D3               	clrf	(??_menu^(0+128)+1)
  8369  18E0  1BD2               	btfsc	??_menu^(0+128),7
  8370  18E1  03D3               	decf	(??_menu^(0+128)+1),f
  8371  18E2  0142               	movlb	2	; select bank2
  8372  18E3  0863               	movf	menu@state^(0+256),w
  8373  18E4  0141               	movlb	1	; select bank1
  8374  18E5  00D4               	movwf	(??_menu+2)^(0+128)
  8375  18E6  01D5               	clrf	((??_menu+2)^(0+128)+1)
  8376  18E7  0853               	movf	(??_menu+1)^(0+128),w
  8377  18E8  0655               	xorwf	(??_menu+3)^(0+128),w
  8378  18E9  1D03               	skipz
  8379  18EA  28ED               	goto	u10455
  8380  18EB  0852               	movf	??_menu^(0+128),w
  8381  18EC  0654               	xorwf	(??_menu+2)^(0+128),w
  8382  18ED                     u10455:	
  8383  18ED  1903               	skipnz
  8384  18EE  0008               	return
  8385                           
  8386                           ;menuhelper.c: 122:    g_screenRefresh = 1;
  8387  18EF  01ED               	clrf	_g_screenRefresh^(0+128)
  8388  18F0  0AED               	incf	_g_screenRefresh^(0+128),f
  8389                           
  8390                           ;menuhelper.c: 123:    state = nextState;
  8391  18F1  085B               	movf	menu@nextState^(0+128),w
  8392  18F2  00D2               	movwf	??_menu^(0+128)
  8393  18F3  0852               	movf	??_menu^(0+128),w
  8394  18F4  0142               	movlb	2	; select bank2
  8395  18F5  00E3               	movwf	menu@state^(0+256)
  8396  18F6  0008               	return
  8397  18F7                     l8690:	
  8398                           
  8399                           ;menuhelper.c: 126:   error(ERR_MENU);
  8400  18F7  300B               	movlw	11
  8401  18F8  31B5  25D1         	fcall	_error
  8402  18FA  0008               	return
  8403  18FB                     __end_of_menu:	
  8404                           
  8405                           	psect	text5
  8406  2A62                     __ptext5:	
  8407 ;; *************** function _setFudgeFactor *****************
  8408 ;; Defined at:
  8409 ;;		line 317 in file "menu.c"
  8410 ;; Parameters:    Size  Location     Type
  8411 ;;		None
  8412 ;; Auto vars:     Size  Location     Type
  8413 ;;		None
  8414 ;; Return value:  Size  Location     Type
  8415 ;;                  1    wreg      unsigned char 
  8416 ;; Registers used:
  8417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8418 ;; Tracked objects:
  8419 ;;		On entry : 0/0
  8420 ;;		On exit  : 0/0
  8421 ;;		Unchanged: 0/0
  8422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8425 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8426 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8427 ;;Total ram usage:        1 bytes
  8428 ;; Hardware stack levels used:    1
  8429 ;; Hardware stack levels required when called:    7
  8430 ;; This function calls:
  8431 ;;		_OLED_print_xy
  8432 ;;		_ftoa
  8433 ;;		_returnToPage
  8434 ;;		_spinInput
  8435 ;; This function is called by:
  8436 ;;		_menu
  8437 ;; This function uses a non-reentrant model
  8438 ;;
  8439                           
  8440                           
  8441                           ;psect for function _setFudgeFactor
  8442  2A62                     _setFudgeFactor:	
  8443                           
  8444                           ;menu.c: 319:  returnToPage(0);
  8445                           
  8446                           ;incstack = 0
  8447                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8448  2A62  3000               	movlw	0
  8449  2A63  31B4  24C9  31AA   	fcall	_returnToPage
  8450                           
  8451                           ;menu.c: 320:  if (g_screenRefresh)
  8452  2A66  0141               	movlb	1	; select bank1
  8453  2A67  086D               	movf	_g_screenRefresh^(0+128),w
  8454  2A68  1903               	btfsc	3,2
  8455  2A69  2A74               	goto	l7868
  8456                           
  8457                           ;menu.c: 321:   OLED_print_xy(0, 0, "Fudge factor");
  8458  2A6A  0140               	movlb	0	; select bank0
  8459  2A6B  01AD               	clrf	OLED_print_xy@row
  8460  2A6C  3018               	movlw	low ((STR_48+24)| (0+32768))
  8461  2A6D  00AE               	movwf	OLED_print_xy@s
  8462  2A6E  30B8               	movlw	high ((STR_48+24)| (0+32768))
  8463  2A6F  00AF               	movwf	OLED_print_xy@s+1
  8464  2A70  3000               	movlw	0
  8465  2A71  31B4  2497  31AA   	fcall	_OLED_print_xy
  8466  2A74                     l7868:	
  8467                           
  8468                           ;menu.c: 322:  spinInput(&data.fudgeFactor, 0.1, 5.0, 0.1);
  8469  2A74  306F               	movlw	111
  8470  2A75  0141               	movlb	1	; select bank1
  8471  2A76  00B9               	movwf	spinInput@input^(0+128)
  8472  2A77  3027               	movlw	39
  8473  2A78  00BA               	movwf	(spinInput@input^(0+128)+1)
  8474  2A79  303D               	movlw	61
  8475  2A7A  00BE               	movwf	(spinInput@min+3)^(0+128)
  8476  2A7B  30CC               	movlw	204
  8477  2A7C  00BD               	movwf	(spinInput@min+2)^(0+128)
  8478  2A7D  30CC               	movlw	204
  8479  2A7E  00BC               	movwf	(spinInput@min+1)^(0+128)
  8480  2A7F  30CD               	movlw	205
  8481  2A80  00BB               	movwf	spinInput@min^(0+128)
  8482  2A81  3040               	movlw	64
  8483  2A82  00C2               	movwf	(spinInput@max+3)^(0+128)
  8484  2A83  30A0               	movlw	160
  8485  2A84  00C1               	movwf	(spinInput@max+2)^(0+128)
  8486  2A85  3000               	movlw	0
  8487  2A86  00C0               	movwf	(spinInput@max+1)^(0+128)
  8488  2A87  3000               	movlw	0
  8489  2A88  00BF               	movwf	spinInput@max^(0+128)
  8490  2A89  303D               	movlw	61
  8491  2A8A  00C6               	movwf	(spinInput@step+3)^(0+128)
  8492  2A8B  30CC               	movlw	204
  8493  2A8C  00C5               	movwf	(spinInput@step+2)^(0+128)
  8494  2A8D  30CC               	movlw	204
  8495  2A8E  00C4               	movwf	(spinInput@step+1)^(0+128)
  8496  2A8F  30CD               	movlw	205
  8497  2A90  00C3               	movwf	spinInput@step^(0+128)
  8498  2A91  31AD  2567  31AA   	fcall	_spinInput
  8499                           
  8500                           ;menu.c: 323:  ftoa(str, data.fudgeFactor, 3, 1);
  8501  2A94  306F               	movlw	111
  8502  2A95  0086               	movwf	6
  8503  2A96  3027               	movlw	39
  8504  2A97  0087               	movwf	7
  8505  2A98  3F40               	moviw [0]fsr1
  8506  2A99  0141               	movlb	1	; select bank1
  8507  2A9A  00B9               	movwf	ftoa@fValue^(0+128)
  8508  2A9B  3F41               	moviw [1]fsr1
  8509  2A9C  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  8510  2A9D  3F42               	moviw [2]fsr1
  8511  2A9E  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  8512  2A9F  3F43               	moviw [3]fsr1
  8513  2AA0  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  8514  2AA1  3003               	movlw	3
  8515  2AA2  00C8               	movwf	??_setFudgeFactor^(0+128)
  8516  2AA3  0848               	movf	??_setFudgeFactor^(0+128),w
  8517  2AA4  00BD               	movwf	ftoa@width^(0+128)
  8518  2AA5  01BE               	clrf	ftoa@prec^(0+128)
  8519  2AA6  0ABE               	incf	ftoa@prec^(0+128),f
  8520  2AA7  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  8521  2AA8  31A2  2208  31AA   	fcall	_ftoa
  8522                           
  8523                           ;menu.c: 324:  OLED_print_xy(0, 1, "\004");
  8524  2AAB  0140               	movlb	0	; select bank0
  8525  2AAC  01AD               	clrf	OLED_print_xy@row
  8526  2AAD  0AAD               	incf	OLED_print_xy@row,f
  8527  2AAE  30B8               	movlw	low ((STR_54+5)| (0+32768))
  8528  2AAF  00AE               	movwf	OLED_print_xy@s
  8529  2AB0  30BA               	movlw	high ((STR_54+5)| (0+32768))
  8530  2AB1  00AF               	movwf	OLED_print_xy@s+1
  8531  2AB2  3000               	movlw	0
  8532  2AB3  31B4  2497  31AA   	fcall	_OLED_print_xy
  8533                           
  8534                           ;menu.c: 325:  OLED_print_xy(1, 1, str);
  8535  2AB6  0140               	movlb	0	; select bank0
  8536  2AB7  01AD               	clrf	OLED_print_xy@row
  8537  2AB8  0AAD               	incf	OLED_print_xy@row,f
  8538  2AB9  30E6               	movlw	low _str
  8539  2ABA  00AE               	movwf	OLED_print_xy@s
  8540  2ABB  3001               	movlw	high _str
  8541  2ABC  00AF               	movwf	OLED_print_xy@s+1
  8542  2ABD  3001               	movlw	1
  8543  2ABE  31B4  2497  31AA   	fcall	_OLED_print_xy
  8544                           
  8545                           ;menu.c: 326:  OLED_print_xy(4, 1, " \003      ");
  8546  2AC1  0140               	movlb	0	; select bank0
  8547  2AC2  01AD               	clrf	OLED_print_xy@row
  8548  2AC3  0AAD               	incf	OLED_print_xy@row,f
  8549  2AC4  305B               	movlw	low (STR_61| (0+32768))
  8550  2AC5  00AE               	movwf	OLED_print_xy@s
  8551  2AC6  30BA               	movlw	high (STR_61| (0+32768))
  8552  2AC7  00AF               	movwf	OLED_print_xy@s+1
  8553  2AC8  3004               	movlw	4
  8554  2AC9  31B4  2497         	fcall	_OLED_print_xy
  8555                           
  8556                           ;menu.c: 327:  return 0;
  8557  2ACB  3000               	movlw	0
  8558  2ACC  0008               	return
  8559  2ACD                     __end_of_setFudgeFactor:	
  8560                           
  8561                           	psect	text6
  8562  29F8                     __ptext6:	
  8563 ;; *************** function _setSkyTemp *****************
  8564 ;; Defined at:
  8565 ;;		line 300 in file "menu.c"
  8566 ;; Parameters:    Size  Location     Type
  8567 ;;		None
  8568 ;; Auto vars:     Size  Location     Type
  8569 ;;		None
  8570 ;; Return value:  Size  Location     Type
  8571 ;;                  1    wreg      unsigned char 
  8572 ;; Registers used:
  8573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8574 ;; Tracked objects:
  8575 ;;		On entry : 0/0
  8576 ;;		On exit  : 0/0
  8577 ;;		Unchanged: 0/0
  8578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8581 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8582 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8583 ;;Total ram usage:        1 bytes
  8584 ;; Hardware stack levels used:    1
  8585 ;; Hardware stack levels required when called:    7
  8586 ;; This function calls:
  8587 ;;		_OLED_print_xy
  8588 ;;		_ftoa
  8589 ;;		_returnToPage
  8590 ;;		_spinInput
  8591 ;; This function is called by:
  8592 ;;		_menu
  8593 ;; This function uses a non-reentrant model
  8594 ;;
  8595                           
  8596                           
  8597                           ;psect for function _setSkyTemp
  8598  29F8                     _setSkyTemp:	
  8599                           
  8600                           ;menu.c: 302:  returnToPage(0);
  8601                           
  8602                           ;incstack = 0
  8603                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8604  29F8  3000               	movlw	0
  8605  29F9  31B4  24C9  31A9   	fcall	_returnToPage
  8606                           
  8607                           ;menu.c: 303:  if (g_screenRefresh)
  8608  29FC  0141               	movlb	1	; select bank1
  8609  29FD  086D               	movf	_g_screenRefresh^(0+128),w
  8610  29FE  1903               	btfsc	3,2
  8611  29FF  2A0A               	goto	l7854
  8612                           
  8613                           ;menu.c: 304:   OLED_print_xy(0, 0, "Sky temp.   ");
  8614  2A00  0140               	movlb	0	; select bank0
  8615  2A01  01AD               	clrf	OLED_print_xy@row
  8616  2A02  30AD               	movlw	low (STR_56| (0+32768))
  8617  2A03  00AE               	movwf	OLED_print_xy@s
  8618  2A04  30B9               	movlw	high (STR_56| (0+32768))
  8619  2A05  00AF               	movwf	OLED_print_xy@s+1
  8620  2A06  3000               	movlw	0
  8621  2A07  31B4  2497  31A9   	fcall	_OLED_print_xy
  8622  2A0A                     l7854:	
  8623                           
  8624                           ;menu.c: 305:  spinInput(&data.skyTemp, -50, -20, 1);
  8625  2A0A  306B               	movlw	107
  8626  2A0B  0141               	movlb	1	; select bank1
  8627  2A0C  00B9               	movwf	spinInput@input^(0+128)
  8628  2A0D  3027               	movlw	39
  8629  2A0E  00BA               	movwf	(spinInput@input^(0+128)+1)
  8630  2A0F  30C2               	movlw	194
  8631  2A10  00BE               	movwf	(spinInput@min+3)^(0+128)
  8632  2A11  3048               	movlw	72
  8633  2A12  00BD               	movwf	(spinInput@min+2)^(0+128)
  8634  2A13  3000               	movlw	0
  8635  2A14  00BC               	movwf	(spinInput@min+1)^(0+128)
  8636  2A15  3000               	movlw	0
  8637  2A16  00BB               	movwf	spinInput@min^(0+128)
  8638  2A17  30C1               	movlw	193
  8639  2A18  00C2               	movwf	(spinInput@max+3)^(0+128)
  8640  2A19  30A0               	movlw	160
  8641  2A1A  00C1               	movwf	(spinInput@max+2)^(0+128)
  8642  2A1B  3000               	movlw	0
  8643  2A1C  00C0               	movwf	(spinInput@max+1)^(0+128)
  8644  2A1D  3000               	movlw	0
  8645  2A1E  00BF               	movwf	spinInput@max^(0+128)
  8646  2A1F  303F               	movlw	63
  8647  2A20  00C6               	movwf	(spinInput@step+3)^(0+128)
  8648  2A21  3080               	movlw	128
  8649  2A22  00C5               	movwf	(spinInput@step+2)^(0+128)
  8650  2A23  3000               	movlw	0
  8651  2A24  00C4               	movwf	(spinInput@step+1)^(0+128)
  8652  2A25  3000               	movlw	0
  8653  2A26  00C3               	movwf	spinInput@step^(0+128)
  8654  2A27  31AD  2567  31A9   	fcall	_spinInput
  8655                           
  8656                           ;menu.c: 306:  ftoa(str, data.skyTemp, 3, 0);
  8657  2A2A  306B               	movlw	107
  8658  2A2B  0086               	movwf	6
  8659  2A2C  3027               	movlw	39
  8660  2A2D  0087               	movwf	7
  8661  2A2E  3F40               	moviw [0]fsr1
  8662  2A2F  0141               	movlb	1	; select bank1
  8663  2A30  00B9               	movwf	ftoa@fValue^(0+128)
  8664  2A31  3F41               	moviw [1]fsr1
  8665  2A32  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  8666  2A33  3F42               	moviw [2]fsr1
  8667  2A34  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  8668  2A35  3F43               	moviw [3]fsr1
  8669  2A36  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  8670  2A37  3003               	movlw	3
  8671  2A38  00C8               	movwf	??_setSkyTemp^(0+128)
  8672  2A39  0848               	movf	??_setSkyTemp^(0+128),w
  8673  2A3A  00BD               	movwf	ftoa@width^(0+128)
  8674  2A3B  01BE               	clrf	ftoa@prec^(0+128)
  8675  2A3C  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  8676  2A3D  31A2  2208  31A9   	fcall	_ftoa
  8677                           
  8678                           ;menu.c: 307:  OLED_print_xy(0, 1, "\004");
  8679  2A40  0140               	movlb	0	; select bank0
  8680  2A41  01AD               	clrf	OLED_print_xy@row
  8681  2A42  0AAD               	incf	OLED_print_xy@row,f
  8682  2A43  30B8               	movlw	low ((STR_54+5)| (0+32768))
  8683  2A44  00AE               	movwf	OLED_print_xy@s
  8684  2A45  30BA               	movlw	high ((STR_54+5)| (0+32768))
  8685  2A46  00AF               	movwf	OLED_print_xy@s+1
  8686  2A47  3000               	movlw	0
  8687  2A48  31B4  2497  31A9   	fcall	_OLED_print_xy
  8688                           
  8689                           ;menu.c: 308:  OLED_print_xy(1, 1, str);
  8690  2A4B  0140               	movlb	0	; select bank0
  8691  2A4C  01AD               	clrf	OLED_print_xy@row
  8692  2A4D  0AAD               	incf	OLED_print_xy@row,f
  8693  2A4E  30E6               	movlw	low _str
  8694  2A4F  00AE               	movwf	OLED_print_xy@s
  8695  2A50  3001               	movlw	high _str
  8696  2A51  00AF               	movwf	OLED_print_xy@s+1
  8697  2A52  3001               	movlw	1
  8698  2A53  31B4  2497  31A9   	fcall	_OLED_print_xy
  8699                           
  8700                           ;menu.c: 309:  OLED_print_xy(4, 1, "\001 \003     ");
  8701  2A56  0140               	movlb	0	; select bank0
  8702  2A57  01AD               	clrf	OLED_print_xy@row
  8703  2A58  0AAD               	incf	OLED_print_xy@row,f
  8704  2A59  3052               	movlw	low (STR_58| (0+32768))
  8705  2A5A  00AE               	movwf	OLED_print_xy@s
  8706  2A5B  30BA               	movlw	high (STR_58| (0+32768))
  8707  2A5C  00AF               	movwf	OLED_print_xy@s+1
  8708  2A5D  3004               	movlw	4
  8709  2A5E  31B4  2497         	fcall	_OLED_print_xy
  8710                           
  8711                           ;menu.c: 310:  return 0;
  8712  2A60  3000               	movlw	0
  8713  2A61  0008               	return
  8714  2A62                     __end_of_setSkyTemp:	
  8715                           
  8716                           	psect	text7
  8717  2ACD                     __ptext7:	
  8718 ;; *************** function _setDPOffset *****************
  8719 ;; Defined at:
  8720 ;;		line 283 in file "menu.c"
  8721 ;; Parameters:    Size  Location     Type
  8722 ;;		None
  8723 ;; Auto vars:     Size  Location     Type
  8724 ;;		None
  8725 ;; Return value:  Size  Location     Type
  8726 ;;                  1    wreg      unsigned char 
  8727 ;; Registers used:
  8728 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8729 ;; Tracked objects:
  8730 ;;		On entry : 0/0
  8731 ;;		On exit  : 0/0
  8732 ;;		Unchanged: 0/0
  8733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8734 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8735 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8736 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8737 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8738 ;;Total ram usage:        1 bytes
  8739 ;; Hardware stack levels used:    1
  8740 ;; Hardware stack levels required when called:    7
  8741 ;; This function calls:
  8742 ;;		_OLED_print_xy
  8743 ;;		_ftoa
  8744 ;;		_returnToPage
  8745 ;;		_spinInput
  8746 ;; This function is called by:
  8747 ;;		_menu
  8748 ;; This function uses a non-reentrant model
  8749 ;;
  8750                           
  8751                           
  8752                           ;psect for function _setDPOffset
  8753  2ACD                     _setDPOffset:	
  8754                           
  8755                           ;menu.c: 285:  returnToPage(0);
  8756                           
  8757                           ;incstack = 0
  8758                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8759  2ACD  3000               	movlw	0
  8760  2ACE  31B4  24C9  31AA   	fcall	_returnToPage
  8761                           
  8762                           ;menu.c: 286:  if (g_screenRefresh)
  8763  2AD1  0141               	movlb	1	; select bank1
  8764  2AD2  086D               	movf	_g_screenRefresh^(0+128),w
  8765  2AD3  1903               	btfsc	3,2
  8766  2AD4  2ADF               	goto	l7840
  8767                           
  8768                           ;menu.c: 287:   OLED_print_xy(0, 0, "DP offset   ");
  8769  2AD5  0140               	movlb	0	; select bank0
  8770  2AD6  01AD               	clrf	OLED_print_xy@row
  8771  2AD7  30C7               	movlw	low (STR_53| (0+32768))
  8772  2AD8  00AE               	movwf	OLED_print_xy@s
  8773  2AD9  30B9               	movlw	high (STR_53| (0+32768))
  8774  2ADA  00AF               	movwf	OLED_print_xy@s+1
  8775  2ADB  3000               	movlw	0
  8776  2ADC  31B4  2497  31AA   	fcall	_OLED_print_xy
  8777  2ADF                     l7840:	
  8778                           
  8779                           ;menu.c: 288:  spinInput(&data.dpOffset, 0, 10, 0.5);
  8780  2ADF  3067               	movlw	103
  8781  2AE0  0141               	movlb	1	; select bank1
  8782  2AE1  00B9               	movwf	spinInput@input^(0+128)
  8783  2AE2  3027               	movlw	39
  8784  2AE3  00BA               	movwf	(spinInput@input^(0+128)+1)
  8785  2AE4  3000               	movlw	0
  8786  2AE5  00BE               	movwf	(spinInput@min+3)^(0+128)
  8787  2AE6  3000               	movlw	0
  8788  2AE7  00BD               	movwf	(spinInput@min+2)^(0+128)
  8789  2AE8  3000               	movlw	0
  8790  2AE9  00BC               	movwf	(spinInput@min+1)^(0+128)
  8791  2AEA  3000               	movlw	0
  8792  2AEB  00BB               	movwf	spinInput@min^(0+128)
  8793  2AEC  3041               	movlw	65
  8794  2AED  00C2               	movwf	(spinInput@max+3)^(0+128)
  8795  2AEE  3020               	movlw	32
  8796  2AEF  00C1               	movwf	(spinInput@max+2)^(0+128)
  8797  2AF0  3000               	movlw	0
  8798  2AF1  00C0               	movwf	(spinInput@max+1)^(0+128)
  8799  2AF2  3000               	movlw	0
  8800  2AF3  00BF               	movwf	spinInput@max^(0+128)
  8801  2AF4  303F               	movlw	63
  8802  2AF5  00C6               	movwf	(spinInput@step+3)^(0+128)
  8803  2AF6  3000               	movlw	0
  8804  2AF7  00C5               	movwf	(spinInput@step+2)^(0+128)
  8805  2AF8  3000               	movlw	0
  8806  2AF9  00C4               	movwf	(spinInput@step+1)^(0+128)
  8807  2AFA  3000               	movlw	0
  8808  2AFB  00C3               	movwf	spinInput@step^(0+128)
  8809  2AFC  31AD  2567  31AA   	fcall	_spinInput
  8810                           
  8811                           ;menu.c: 289:  ftoa(str, data.dpOffset, 4, 1);
  8812  2AFF  304A               	movlw	74
  8813  2B00  0086               	movwf	6
  8814  2B01  3027               	movlw	39
  8815  2B02  0087               	movwf	7
  8816  2B03  315D               	addfsr 1,29
  8817  2B04  3F40               	moviw [0]fsr1
  8818  2B05  0141               	movlb	1	; select bank1
  8819  2B06  00B9               	movwf	ftoa@fValue^(0+128)
  8820  2B07  3F41               	moviw [1]fsr1
  8821  2B08  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  8822  2B09  3F42               	moviw [2]fsr1
  8823  2B0A  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  8824  2B0B  3F43               	moviw [3]fsr1
  8825  2B0C  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  8826  2B0D  3004               	movlw	4
  8827  2B0E  00C8               	movwf	??_setDPOffset^(0+128)
  8828  2B0F  0848               	movf	??_setDPOffset^(0+128),w
  8829  2B10  00BD               	movwf	ftoa@width^(0+128)
  8830  2B11  01BE               	clrf	ftoa@prec^(0+128)
  8831  2B12  0ABE               	incf	ftoa@prec^(0+128),f
  8832  2B13  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  8833  2B14  31A2  2208  31AA   	fcall	_ftoa
  8834                           
  8835                           ;menu.c: 290:  OLED_print_xy(0, 1, "temp.\004");
  8836  2B17  0140               	movlb	0	; select bank0
  8837  2B18  01AD               	clrf	OLED_print_xy@row
  8838  2B19  0AAD               	incf	OLED_print_xy@row,f
  8839  2B1A  30B3               	movlw	low (STR_54| (0+32768))
  8840  2B1B  00AE               	movwf	OLED_print_xy@s
  8841  2B1C  30BA               	movlw	high (STR_54| (0+32768))
  8842  2B1D  00AF               	movwf	OLED_print_xy@s+1
  8843  2B1E  3000               	movlw	0
  8844  2B1F  31B4  2497  31AA   	fcall	_OLED_print_xy
  8845                           
  8846                           ;menu.c: 291:  OLED_print_xy(6, 1, str);
  8847  2B22  0140               	movlb	0	; select bank0
  8848  2B23  01AD               	clrf	OLED_print_xy@row
  8849  2B24  0AAD               	incf	OLED_print_xy@row,f
  8850  2B25  30E6               	movlw	low _str
  8851  2B26  00AE               	movwf	OLED_print_xy@s
  8852  2B27  3001               	movlw	high _str
  8853  2B28  00AF               	movwf	OLED_print_xy@s+1
  8854  2B29  3006               	movlw	6
  8855  2B2A  31B4  2497  31AA   	fcall	_OLED_print_xy
  8856                           
  8857                           ;menu.c: 292:  OLED_print_xy(10, 1, "\001\003");
  8858  2B2D  0140               	movlb	0	; select bank0
  8859  2B2E  01AD               	clrf	OLED_print_xy@row
  8860  2B2F  0AAD               	incf	OLED_print_xy@row,f
  8861  2B30  30DE               	movlw	low (STR_55| (0+32768))
  8862  2B31  00AE               	movwf	OLED_print_xy@s
  8863  2B32  30BA               	movlw	high (STR_55| (0+32768))
  8864  2B33  00AF               	movwf	OLED_print_xy@s+1
  8865  2B34  300A               	movlw	10
  8866  2B35  31B4  2497         	fcall	_OLED_print_xy
  8867                           
  8868                           ;menu.c: 293:  return 0;
  8869  2B37  3000               	movlw	0
  8870  2B38  0008               	return
  8871  2B39                     __end_of_setDPOffset:	
  8872                           
  8873                           	psect	text8
  8874  2F4A                     __ptext8:	
  8875 ;; *************** function _setup *****************
  8876 ;; Defined at:
  8877 ;;		line 259 in file "menu.c"
  8878 ;; Parameters:    Size  Location     Type
  8879 ;;		None
  8880 ;; Auto vars:     Size  Location     Type
  8881 ;;		None
  8882 ;; Return value:  Size  Location     Type
  8883 ;;                  1    wreg      unsigned char 
  8884 ;; Registers used:
  8885 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8886 ;; Tracked objects:
  8887 ;;		On entry : 0/0
  8888 ;;		On exit  : 0/0
  8889 ;;		Unchanged: 0/0
  8890 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8891 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8892 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8893 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8894 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8895 ;;Total ram usage:        2 bytes
  8896 ;; Hardware stack levels used:    1
  8897 ;; Hardware stack levels required when called:    7
  8898 ;; This function calls:
  8899 ;;		_OLED_print_xy
  8900 ;;		_ftoa
  8901 ;;		_paging
  8902 ;;		_returnToPage
  8903 ;; This function is called by:
  8904 ;;		_menu
  8905 ;; This function uses a non-reentrant model
  8906 ;;
  8907                           
  8908                           
  8909                           ;psect for function _setup
  8910  2F4A                     _setup:	
  8911                           
  8912                           ;menu.c: 261:  static uint8_t page = 0;;menu.c: 263:  returnToPage(page);
  8913                           
  8914                           ;incstack = 0
  8915                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8916  2F4A  0142               	movlb	2	; select bank2
  8917  2F4B  0866               	movf	setup@page^(0+256),w
  8918  2F4C  31B4  24C9  31AF   	fcall	_returnToPage
  8919                           
  8920                           ;menu.c: 264:  if (g_screenRefresh) {
  8921  2F4F  0141               	movlb	1	; select bank1
  8922  2F50  086D               	movf	_g_screenRefresh^(0+128),w
  8923  2F51  1903               	btfsc	3,2
  8924  2F52  2FEF               	goto	l7828
  8925                           
  8926                           ;menu.c: 265:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
  8927  2F53  0140               	movlb	0	; select bank0
  8928  2F54  01AD               	clrf	OLED_print_xy@row
  8929  2F55  3000               	movlw	low (STR_48| (0+32768))
  8930  2F56  00AE               	movwf	OLED_print_xy@s
  8931  2F57  30B8               	movlw	high (STR_48| (0+32768))
  8932  2F58  00AF               	movwf	OLED_print_xy@s+1
  8933  2F59  3000               	movlw	0
  8934  2F5A  31B4  2497  31AF   	fcall	_OLED_print_xy
  8935                           
  8936                           ;menu.c: 266:   OLED_print_xy(0, 1, "temp. ");
  8937  2F5D  0140               	movlb	0	; select bank0
  8938  2F5E  01AD               	clrf	OLED_print_xy@row
  8939  2F5F  0AAD               	incf	OLED_print_xy@row,f
  8940  2F60  30C1               	movlw	low (STR_49| (0+32768))
  8941  2F61  00AE               	movwf	OLED_print_xy@s
  8942  2F62  30BA               	movlw	high (STR_49| (0+32768))
  8943  2F63  00AF               	movwf	OLED_print_xy@s+1
  8944  2F64  3000               	movlw	0
  8945  2F65  31B4  2497  31AF   	fcall	_OLED_print_xy
  8946                           
  8947                           ;menu.c: 267:   ftoa(str, data.dpOffset, 4, 1);
  8948  2F68  304A               	movlw	74
  8949  2F69  0086               	movwf	6
  8950  2F6A  3027               	movlw	39
  8951  2F6B  0087               	movwf	7
  8952  2F6C  315D               	addfsr 1,29
  8953  2F6D  3F40               	moviw [0]fsr1
  8954  2F6E  0141               	movlb	1	; select bank1
  8955  2F6F  00B9               	movwf	ftoa@fValue^(0+128)
  8956  2F70  3F41               	moviw [1]fsr1
  8957  2F71  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  8958  2F72  3F42               	moviw [2]fsr1
  8959  2F73  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  8960  2F74  3F43               	moviw [3]fsr1
  8961  2F75  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  8962  2F76  3004               	movlw	4
  8963  2F77  00C7               	movwf	??_setup^(0+128)
  8964  2F78  0847               	movf	??_setup^(0+128),w
  8965  2F79  00BD               	movwf	ftoa@width^(0+128)
  8966  2F7A  01BE               	clrf	ftoa@prec^(0+128)
  8967  2F7B  0ABE               	incf	ftoa@prec^(0+128),f
  8968  2F7C  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  8969  2F7D  31A2  2208  31AF   	fcall	_ftoa
  8970                           
  8971                           ;menu.c: 268:   OLED_print_xy(6, 1, str);
  8972  2F80  0140               	movlb	0	; select bank0
  8973  2F81  01AD               	clrf	OLED_print_xy@row
  8974  2F82  0AAD               	incf	OLED_print_xy@row,f
  8975  2F83  30E6               	movlw	low _str
  8976  2F84  00AE               	movwf	OLED_print_xy@s
  8977  2F85  3001               	movlw	high _str
  8978  2F86  00AF               	movwf	OLED_print_xy@s+1
  8979  2F87  3006               	movlw	6
  8980  2F88  31B4  2497  31AF   	fcall	_OLED_print_xy
  8981                           
  8982                           ;menu.c: 269:   OLED_print_xy(10, 1, "\001 ");
  8983  2F8B  0140               	movlb	0	; select bank0
  8984  2F8C  01AD               	clrf	OLED_print_xy@row
  8985  2F8D  0AAD               	incf	OLED_print_xy@row,f
  8986  2F8E  30E1               	movlw	low (STR_50| (0+32768))
  8987  2F8F  00AE               	movwf	OLED_print_xy@s
  8988  2F90  30BA               	movlw	high (STR_50| (0+32768))
  8989  2F91  00AF               	movwf	OLED_print_xy@s+1
  8990  2F92  300A               	movlw	10
  8991  2F93  31B4  2497  31AF   	fcall	_OLED_print_xy
  8992                           
  8993                           ;menu.c: 270:   ftoa(str, data.skyTemp, 3, 0);
  8994  2F96  306B               	movlw	107
  8995  2F97  0086               	movwf	6
  8996  2F98  3027               	movlw	39
  8997  2F99  0087               	movwf	7
  8998  2F9A  3F40               	moviw [0]fsr1
  8999  2F9B  0141               	movlb	1	; select bank1
  9000  2F9C  00B9               	movwf	ftoa@fValue^(0+128)
  9001  2F9D  3F41               	moviw [1]fsr1
  9002  2F9E  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9003  2F9F  3F42               	moviw [2]fsr1
  9004  2FA0  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9005  2FA1  3F43               	moviw [3]fsr1
  9006  2FA2  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9007  2FA3  3003               	movlw	3
  9008  2FA4  00C7               	movwf	??_setup^(0+128)
  9009  2FA5  0847               	movf	??_setup^(0+128),w
  9010  2FA6  00BD               	movwf	ftoa@width^(0+128)
  9011  2FA7  01BE               	clrf	ftoa@prec^(0+128)
  9012  2FA8  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9013  2FA9  31A2  2208  31AF   	fcall	_ftoa
  9014                           
  9015                           ;menu.c: 271:   OLED_print_xy(12 + 0, 1, str);
  9016  2FAC  0140               	movlb	0	; select bank0
  9017  2FAD  01AD               	clrf	OLED_print_xy@row
  9018  2FAE  0AAD               	incf	OLED_print_xy@row,f
  9019  2FAF  30E6               	movlw	low _str
  9020  2FB0  00AE               	movwf	OLED_print_xy@s
  9021  2FB1  3001               	movlw	high _str
  9022  2FB2  00AF               	movwf	OLED_print_xy@s+1
  9023  2FB3  300C               	movlw	12
  9024  2FB4  31B4  2497  31AF   	fcall	_OLED_print_xy
  9025                           
  9026                           ;menu.c: 272:   OLED_print_xy(12 + 3, 1, "\001        ");
  9027  2FB7  0140               	movlb	0	; select bank0
  9028  2FB8  01AD               	clrf	OLED_print_xy@row
  9029  2FB9  0AAD               	incf	OLED_print_xy@row,f
  9030  2FBA  3048               	movlw	low (STR_51| (0+32768))
  9031  2FBB  00AE               	movwf	OLED_print_xy@s
  9032  2FBC  30BA               	movlw	high (STR_51| (0+32768))
  9033  2FBD  00AF               	movwf	OLED_print_xy@s+1
  9034  2FBE  300F               	movlw	15
  9035  2FBF  31B4  2497  31AF   	fcall	_OLED_print_xy
  9036                           
  9037                           ;menu.c: 273:   ftoa(str, data.fudgeFactor, 3, 1);
  9038  2FC2  306F               	movlw	111
  9039  2FC3  0086               	movwf	6
  9040  2FC4  3027               	movlw	39
  9041  2FC5  0087               	movwf	7
  9042  2FC6  3F40               	moviw [0]fsr1
  9043  2FC7  0141               	movlb	1	; select bank1
  9044  2FC8  00B9               	movwf	ftoa@fValue^(0+128)
  9045  2FC9  3F41               	moviw [1]fsr1
  9046  2FCA  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9047  2FCB  3F42               	moviw [2]fsr1
  9048  2FCC  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9049  2FCD  3F43               	moviw [3]fsr1
  9050  2FCE  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9051  2FCF  3003               	movlw	3
  9052  2FD0  00C7               	movwf	??_setup^(0+128)
  9053  2FD1  0847               	movf	??_setup^(0+128),w
  9054  2FD2  00BD               	movwf	ftoa@width^(0+128)
  9055  2FD3  01BE               	clrf	ftoa@prec^(0+128)
  9056  2FD4  0ABE               	incf	ftoa@prec^(0+128),f
  9057  2FD5  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9058  2FD6  31A2  2208  31AF   	fcall	_ftoa
  9059                           
  9060                           ;menu.c: 274:   OLED_print_xy(2 * 12 + 0, 1, str);
  9061  2FD9  0140               	movlb	0	; select bank0
  9062  2FDA  01AD               	clrf	OLED_print_xy@row
  9063  2FDB  0AAD               	incf	OLED_print_xy@row,f
  9064  2FDC  30E6               	movlw	low _str
  9065  2FDD  00AE               	movwf	OLED_print_xy@s
  9066  2FDE  3001               	movlw	high _str
  9067  2FDF  00AF               	movwf	OLED_print_xy@s+1
  9068  2FE0  3018               	movlw	24
  9069  2FE1  31B4  2497  31AF   	fcall	_OLED_print_xy
  9070                           
  9071                           ;menu.c: 275:   OLED_print_xy(2 * 12 + 4, 1, "         ");
  9072  2FE4  0140               	movlb	0	; select bank0
  9073  2FE5  01AD               	clrf	OLED_print_xy@row
  9074  2FE6  0AAD               	incf	OLED_print_xy@row,f
  9075  2FE7  3055               	movlw	low ((STR_28+3)| (0+32768))
  9076  2FE8  00AE               	movwf	OLED_print_xy@s
  9077  2FE9  30B9               	movlw	high ((STR_28+3)| (0+32768))
  9078  2FEA  00AF               	movwf	OLED_print_xy@s+1
  9079  2FEB  301C               	movlw	28
  9080  2FEC  31B4  2497  31AF   	fcall	_OLED_print_xy
  9081  2FEF                     l7828:	
  9082                           
  9083                           ;menu.c: 277:  page = paging(page, 3);
  9084  2FEF  3003               	movlw	3
  9085  2FF0  0141               	movlb	1	; select bank1
  9086  2FF1  00C7               	movwf	??_setup^(0+128)
  9087  2FF2  0847               	movf	??_setup^(0+128),w
  9088  2FF3  0140               	movlb	0	; select bank0
  9089  2FF4  00A7               	movwf	paging@lastPage
  9090  2FF5  0142               	movlb	2	; select bank2
  9091  2FF6  0866               	movf	setup@page^(0+256),w
  9092  2FF7  3187  278D         	fcall	_paging
  9093  2FF9  0141               	movlb	1	; select bank1
  9094  2FFA  00C8               	movwf	(??_setup+1)^(0+128)
  9095  2FFB  0848               	movf	(??_setup+1)^(0+128),w
  9096  2FFC  0142               	movlb	2	; select bank2
  9097  2FFD  00E6               	movwf	setup@page^(0+256)
  9098                           
  9099                           ;menu.c: 278:  return page;
  9100  2FFE  0866               	movf	setup@page^(0+256),w
  9101  2FFF  0008               	return
  9102  3000                     __end_of_setup:	
  9103                           
  9104                           	psect	text9
  9105  2E9F                     __ptext9:	
  9106 ;; *************** function _setLensDia *****************
  9107 ;; Defined at:
  9108 ;;		line 243 in file "menu.c"
  9109 ;; Parameters:    Size  Location     Type
  9110 ;;		None
  9111 ;; Auto vars:     Size  Location     Type
  9112 ;;		None
  9113 ;; Return value:  Size  Location     Type
  9114 ;;                  1    wreg      unsigned char 
  9115 ;; Registers used:
  9116 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9117 ;; Tracked objects:
  9118 ;;		On entry : 0/0
  9119 ;;		On exit  : 0/0
  9120 ;;		Unchanged: 0/0
  9121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9122 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9123 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9124 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9125 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9126 ;;Total ram usage:        8 bytes
  9127 ;; Hardware stack levels used:    1
  9128 ;; Hardware stack levels required when called:    7
  9129 ;; This function calls:
  9130 ;;		_OLED_print_xy
  9131 ;;		___wmul
  9132 ;;		_ftoa
  9133 ;;		_returnToPage
  9134 ;;		_spinInput
  9135 ;; This function is called by:
  9136 ;;		_menu
  9137 ;; This function uses a non-reentrant model
  9138 ;;
  9139                           
  9140                           
  9141                           ;psect for function _setLensDia
  9142  2E9F                     _setLensDia:	
  9143                           
  9144                           ;menu.c: 245:  returnToPage(0);
  9145                           
  9146                           ;incstack = 0
  9147                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9148  2E9F  3000               	movlw	0
  9149  2EA0  31B4  24C9  31AE   	fcall	_returnToPage
  9150                           
  9151                           ;menu.c: 246:  if (g_screenRefresh)
  9152  2EA3  0141               	movlb	1	; select bank1
  9153  2EA4  086D               	movf	_g_screenRefresh^(0+128),w
  9154  2EA5  1903               	btfsc	3,2
  9155  2EA6  2EB1               	goto	l7792
  9156                           
  9157                           ;menu.c: 247:   OLED_print_xy(0, 0, "Lens diam.  ");
  9158  2EA7  0140               	movlb	0	; select bank0
  9159  2EA8  01AD               	clrf	OLED_print_xy@row
  9160  2EA9  30D4               	movlw	low (STR_34| (0+32768))
  9161  2EAA  00AE               	movwf	OLED_print_xy@s
  9162  2EAB  30B9               	movlw	high (STR_34| (0+32768))
  9163  2EAC  00AF               	movwf	OLED_print_xy@s+1
  9164  2EAD  3000               	movlw	0
  9165  2EAE  31B4  2497  31AE   	fcall	_OLED_print_xy
  9166  2EB1                     l7792:	
  9167                           
  9168                           ;menu.c: 248:  spinInput(&data.heater[selectedChannel].lensDia, 1, 16, 0.5);
  9169  2EB1  0141               	movlb	1	; select bank1
  9170  2EB2  086B               	movf	_selectedChannel^(0+128),w
  9171  2EB3  00C8               	movwf	??_setLensDia^(0+128)
  9172  2EB4  01C9               	clrf	(??_setLensDia^(0+128)+1)
  9173  2EB5  0848               	movf	??_setLensDia^(0+128),w
  9174  2EB6  0140               	movlb	0	; select bank0
  9175  2EB7  00AD               	movwf	___wmul@multiplier
  9176  2EB8  0141               	movlb	1	; select bank1
  9177  2EB9  0849               	movf	(??_setLensDia+1)^(0+128),w
  9178  2EBA  0140               	movlb	0	; select bank0
  9179  2EBB  00AE               	movwf	___wmul@multiplier+1
  9180  2EBC  301F               	movlw	31
  9181  2EBD  00AF               	movwf	___wmul@multiplicand
  9182  2EBE  3000               	movlw	0
  9183  2EBF  00B0               	movwf	___wmul@multiplicand+1
  9184  2EC0  31B3  2371  31AE   	fcall	___wmul
  9185  2EC3  3089               	movlw	137
  9186  2EC4  0141               	movlb	1	; select bank1
  9187  2EC5  00CA               	movwf	(??_setLensDia+2)^(0+128)
  9188  2EC6  3027               	movlw	39
  9189  2EC7  00CB               	movwf	((??_setLensDia+2)^(0+128)+1)
  9190  2EC8  0140               	movlb	0	; select bank0
  9191  2EC9  082D               	movf	?___wmul,w
  9192  2ECA  0141               	movlb	1	; select bank1
  9193  2ECB  074A               	addwf	(??_setLensDia+2)^(0+128),w
  9194  2ECC  00B9               	movwf	spinInput@input^(0+128)
  9195  2ECD  0140               	movlb	0	; select bank0
  9196  2ECE  082E               	movf	?___wmul+1,w
  9197  2ECF  0141               	movlb	1	; select bank1
  9198  2ED0  3D4B               	addwfc	(??_setLensDia+3)^(0+128),w
  9199  2ED1  00BA               	movwf	(spinInput@input+1)^(0+128)
  9200  2ED2  303F               	movlw	63
  9201  2ED3  00BE               	movwf	(spinInput@min+3)^(0+128)
  9202  2ED4  3080               	movlw	128
  9203  2ED5  00BD               	movwf	(spinInput@min+2)^(0+128)
  9204  2ED6  3000               	movlw	0
  9205  2ED7  00BC               	movwf	(spinInput@min+1)^(0+128)
  9206  2ED8  3000               	movlw	0
  9207  2ED9  00BB               	movwf	spinInput@min^(0+128)
  9208  2EDA  3041               	movlw	65
  9209  2EDB  00C2               	movwf	(spinInput@max+3)^(0+128)
  9210  2EDC  3080               	movlw	128
  9211  2EDD  00C1               	movwf	(spinInput@max+2)^(0+128)
  9212  2EDE  3000               	movlw	0
  9213  2EDF  00C0               	movwf	(spinInput@max+1)^(0+128)
  9214  2EE0  3000               	movlw	0
  9215  2EE1  00BF               	movwf	spinInput@max^(0+128)
  9216  2EE2  303F               	movlw	63
  9217  2EE3  00C6               	movwf	(spinInput@step+3)^(0+128)
  9218  2EE4  3000               	movlw	0
  9219  2EE5  00C5               	movwf	(spinInput@step+2)^(0+128)
  9220  2EE6  3000               	movlw	0
  9221  2EE7  00C4               	movwf	(spinInput@step+1)^(0+128)
  9222  2EE8  3000               	movlw	0
  9223  2EE9  00C3               	movwf	spinInput@step^(0+128)
  9224  2EEA  31AD  2567  31AE   	fcall	_spinInput
  9225                           
  9226                           ;menu.c: 249:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
  9227  2EED  0141               	movlb	1	; select bank1
  9228  2EEE  086B               	movf	_selectedChannel^(0+128),w
  9229  2EEF  00C8               	movwf	??_setLensDia^(0+128)
  9230  2EF0  01C9               	clrf	(??_setLensDia^(0+128)+1)
  9231  2EF1  0848               	movf	??_setLensDia^(0+128),w
  9232  2EF2  0140               	movlb	0	; select bank0
  9233  2EF3  00AD               	movwf	___wmul@multiplier
  9234  2EF4  0141               	movlb	1	; select bank1
  9235  2EF5  0849               	movf	(??_setLensDia+1)^(0+128),w
  9236  2EF6  0140               	movlb	0	; select bank0
  9237  2EF7  00AE               	movwf	___wmul@multiplier+1
  9238  2EF8  301F               	movlw	31
  9239  2EF9  00AF               	movwf	___wmul@multiplicand
  9240  2EFA  3000               	movlw	0
  9241  2EFB  00B0               	movwf	___wmul@multiplicand+1
  9242  2EFC  31B3  2371  31AE   	fcall	___wmul
  9243  2EFF  3089               	movlw	137
  9244  2F00  0141               	movlb	1	; select bank1
  9245  2F01  00CA               	movwf	(??_setLensDia+2)^(0+128)
  9246  2F02  3027               	movlw	39
  9247  2F03  00CB               	movwf	((??_setLensDia+2)^(0+128)+1)
  9248  2F04  0140               	movlb	0	; select bank0
  9249  2F05  082D               	movf	?___wmul,w
  9250  2F06  0141               	movlb	1	; select bank1
  9251  2F07  074A               	addwf	(??_setLensDia+2)^(0+128),w
  9252  2F08  0086               	movwf	6
  9253  2F09  0140               	movlb	0	; select bank0
  9254  2F0A  082E               	movf	?___wmul+1,w
  9255  2F0B  0141               	movlb	1	; select bank1
  9256  2F0C  3D4B               	addwfc	(??_setLensDia+3)^(0+128),w
  9257  2F0D  0087               	movwf	7
  9258  2F0E  3F40               	moviw [0]fsr1
  9259  2F0F  00CC               	movwf	_setLensDia$2549^(0+128)
  9260  2F10  3F41               	moviw [1]fsr1
  9261  2F11  00CD               	movwf	(_setLensDia$2549+1)^(0+128)
  9262  2F12  3F42               	moviw [2]fsr1
  9263  2F13  00CE               	movwf	(_setLensDia$2549+2)^(0+128)
  9264  2F14  3F43               	moviw [3]fsr1
  9265  2F15  00CF               	movwf	(_setLensDia$2549+3)^(0+128)
  9266                           
  9267                           ;menu.c: 249:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
  9268  2F16  084F               	movf	(_setLensDia$2549+3)^(0+128),w
  9269  2F17  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9270  2F18  084E               	movf	(_setLensDia$2549+2)^(0+128),w
  9271  2F19  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9272  2F1A  084D               	movf	(_setLensDia$2549+1)^(0+128),w
  9273  2F1B  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9274  2F1C  084C               	movf	_setLensDia$2549^(0+128),w
  9275  2F1D  00B9               	movwf	ftoa@fValue^(0+128)
  9276  2F1E  3004               	movlw	4
  9277  2F1F  00C8               	movwf	??_setLensDia^(0+128)
  9278  2F20  0848               	movf	??_setLensDia^(0+128),w
  9279  2F21  00BD               	movwf	ftoa@width^(0+128)
  9280  2F22  01BE               	clrf	ftoa@prec^(0+128)
  9281  2F23  0ABE               	incf	ftoa@prec^(0+128),f
  9282  2F24  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9283  2F25  31A2  2208  31AE   	fcall	_ftoa
  9284                           
  9285                           ;menu.c: 250:  OLED_print_xy(0, 1, "\004");
  9286  2F28  0140               	movlb	0	; select bank0
  9287  2F29  01AD               	clrf	OLED_print_xy@row
  9288  2F2A  0AAD               	incf	OLED_print_xy@row,f
  9289  2F2B  30B8               	movlw	low ((STR_54+5)| (0+32768))
  9290  2F2C  00AE               	movwf	OLED_print_xy@s
  9291  2F2D  30BA               	movlw	high ((STR_54+5)| (0+32768))
  9292  2F2E  00AF               	movwf	OLED_print_xy@s+1
  9293  2F2F  3000               	movlw	0
  9294  2F30  31B4  2497  31AE   	fcall	_OLED_print_xy
  9295                           
  9296                           ;menu.c: 251:  OLED_print_xy(1, 1, str);
  9297  2F33  0140               	movlb	0	; select bank0
  9298  2F34  01AD               	clrf	OLED_print_xy@row
  9299  2F35  0AAD               	incf	OLED_print_xy@row,f
  9300  2F36  30E6               	movlw	low _str
  9301  2F37  00AE               	movwf	OLED_print_xy@s
  9302  2F38  3001               	movlw	high _str
  9303  2F39  00AF               	movwf	OLED_print_xy@s+1
  9304  2F3A  3001               	movlw	1
  9305  2F3B  31B4  2497  31AE   	fcall	_OLED_print_xy
  9306                           
  9307                           ;menu.c: 252:  OLED_print_xy(5, 1, " inch \003");
  9308  2F3E  0140               	movlb	0	; select bank0
  9309  2F3F  01AD               	clrf	OLED_print_xy@row
  9310  2F40  0AAD               	incf	OLED_print_xy@row,f
  9311  2F41  306D               	movlw	low (STR_47| (0+32768))
  9312  2F42  00AE               	movwf	OLED_print_xy@s
  9313  2F43  30BA               	movlw	high (STR_47| (0+32768))
  9314  2F44  00AF               	movwf	OLED_print_xy@s+1
  9315  2F45  3005               	movlw	5
  9316  2F46  31B4  2497         	fcall	_OLED_print_xy
  9317                           
  9318                           ;menu.c: 253:  return 0;
  9319  2F48  3000               	movlw	0
  9320  2F49  0008               	return
  9321  2F4A                     __end_of_setLensDia:	
  9322                           
  9323                           	psect	text10
  9324  24E0                     __ptext10:	
  9325 ;; *************** function _setOutputPower *****************
  9326 ;; Defined at:
  9327 ;;		line 195 in file "menu.c"
  9328 ;; Parameters:    Size  Location     Type
  9329 ;;		None
  9330 ;; Auto vars:     Size  Location     Type
  9331 ;;  chData          2   44[BANK1 ] PTR struct .
  9332 ;;		 -> data.heater(124), data(166), 
  9333 ;; Return value:  Size  Location     Type
  9334 ;;                  1    wreg      unsigned char 
  9335 ;; Registers used:
  9336 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9337 ;; Tracked objects:
  9338 ;;		On entry : 0/0
  9339 ;;		On exit  : 0/0
  9340 ;;		Unchanged: 0/0
  9341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9343 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9344 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9345 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9346 ;;Total ram usage:        6 bytes
  9347 ;; Hardware stack levels used:    1
  9348 ;; Hardware stack levels required when called:    7
  9349 ;; This function calls:
  9350 ;;		_OLED_print_xy
  9351 ;;		___fleq
  9352 ;;		___flge
  9353 ;;		___wmul
  9354 ;;		_ftoa
  9355 ;;		_getPB
  9356 ;;		_itoa
  9357 ;;		_returnToPage
  9358 ;;		_spinInput
  9359 ;; This function is called by:
  9360 ;;		_menu
  9361 ;; This function uses a non-reentrant model
  9362 ;;
  9363                           
  9364                           
  9365                           ;psect for function _setOutputPower
  9366  24E0                     _setOutputPower:	
  9367                           
  9368                           ;menu.c: 197:  t_heater *chData = &data.heater[selectedChannel];
  9369                           
  9370                           ;incstack = 0
  9371                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9372  24E0  0141               	movlb	1	; select bank1
  9373  24E1  086B               	movf	_selectedChannel^(0+128),w
  9374  24E2  00C8               	movwf	??_setOutputPower^(0+128)
  9375  24E3  01C9               	clrf	(??_setOutputPower^(0+128)+1)
  9376  24E4  0848               	movf	??_setOutputPower^(0+128),w
  9377  24E5  0140               	movlb	0	; select bank0
  9378  24E6  00AD               	movwf	___wmul@multiplier
  9379  24E7  0141               	movlb	1	; select bank1
  9380  24E8  0849               	movf	(??_setOutputPower+1)^(0+128),w
  9381  24E9  0140               	movlb	0	; select bank0
  9382  24EA  00AE               	movwf	___wmul@multiplier+1
  9383  24EB  301F               	movlw	31
  9384  24EC  00AF               	movwf	___wmul@multiplicand
  9385  24ED  3000               	movlw	0
  9386  24EE  00B0               	movwf	___wmul@multiplicand+1
  9387  24EF  31B3  2371  31A4   	fcall	___wmul
  9388  24F2  3074               	movlw	116
  9389  24F3  0141               	movlb	1	; select bank1
  9390  24F4  00CA               	movwf	(??_setOutputPower+2)^(0+128)
  9391  24F5  3027               	movlw	39
  9392  24F6  00CB               	movwf	((??_setOutputPower+2)^(0+128)+1)
  9393  24F7  0140               	movlb	0	; select bank0
  9394  24F8  082D               	movf	?___wmul,w
  9395  24F9  0141               	movlb	1	; select bank1
  9396  24FA  074A               	addwf	(??_setOutputPower+2)^(0+128),w
  9397  24FB  00CC               	movwf	setOutputPower@chData^(0+128)
  9398  24FC  0140               	movlb	0	; select bank0
  9399  24FD  082E               	movf	?___wmul+1,w
  9400  24FE  0141               	movlb	1	; select bank1
  9401  24FF  3D4B               	addwfc	(??_setOutputPower+3)^(0+128),w
  9402  2500  00CD               	movwf	(setOutputPower@chData+1)^(0+128)
  9403                           
  9404                           ;menu.c: 199:  returnToPage(0);
  9405  2501  3000               	movlw	0
  9406  2502  31B4  24C9  31A4   	fcall	_returnToPage
  9407                           
  9408                           ;menu.c: 201:  if ((chData->status == CH_ENABLED) || (chData->status == CH_DISABLED)) {
  9409  2505  0141               	movlb	1	; select bank1
  9410  2506  084C               	movf	setOutputPower@chData^(0+128),w
  9411  2507  0086               	movwf	6
  9412  2508  084D               	movf	(setOutputPower@chData+1)^(0+128),w
  9413  2509  0087               	movwf	7
  9414  250A  315E               	addfsr 1,30
  9415  250B  0301               	decf	1,w
  9416  250C  1903               	btfsc	3,2
  9417  250D  2D16               	goto	l7726
  9418  250E  084C               	movf	setOutputPower@chData^(0+128),w
  9419  250F  0086               	movwf	6
  9420  2510  084D               	movf	(setOutputPower@chData+1)^(0+128),w
  9421  2511  0087               	movwf	7
  9422  2512  315E               	addfsr 1,30
  9423  2513  0801               	movf	1,w
  9424  2514  1D03               	btfss	3,2
  9425  2515  2E1D               	goto	l7760
  9426  2516                     l7726:	
  9427                           
  9428                           ;menu.c: 203:   if (g_screenRefresh)
  9429  2516  086D               	movf	_g_screenRefresh^(0+128),w
  9430  2517  1903               	btfsc	3,2
  9431  2518  2D23               	goto	l7730
  9432                           
  9433                           ;menu.c: 204:    OLED_print_xy(0, 0, "Output power");
  9434  2519  0140               	movlb	0	; select bank0
  9435  251A  01AD               	clrf	OLED_print_xy@row
  9436  251B  302F               	movlw	low (STR_22| (0+32768))
  9437  251C  00AE               	movwf	OLED_print_xy@s
  9438  251D  30BA               	movlw	high (STR_22| (0+32768))
  9439  251E  00AF               	movwf	OLED_print_xy@s+1
  9440  251F  3000               	movlw	0
  9441  2520  31B4  2497  31A4   	fcall	_OLED_print_xy
  9442  2523                     l7730:	
  9443                           
  9444                           ;menu.c: 205:   spinInput(&chData->Pset, -0.25, chData->Pmax, 0.25);
  9445  2523  0141               	movlb	1	; select bank1
  9446  2524  084C               	movf	setOutputPower@chData^(0+128),w
  9447  2525  3E10               	addlw	16
  9448  2526  00B9               	movwf	spinInput@input^(0+128)
  9449  2527  3000               	movlw	0
  9450  2528  3D4D               	addwfc	(setOutputPower@chData+1)^(0+128),w
  9451  2529  00BA               	movwf	(spinInput@input+1)^(0+128)
  9452  252A  30BE               	movlw	190
  9453  252B  00BE               	movwf	(spinInput@min+3)^(0+128)
  9454  252C  3080               	movlw	128
  9455  252D  00BD               	movwf	(spinInput@min+2)^(0+128)
  9456  252E  3000               	movlw	0
  9457  252F  00BC               	movwf	(spinInput@min+1)^(0+128)
  9458  2530  3000               	movlw	0
  9459  2531  00BB               	movwf	spinInput@min^(0+128)
  9460  2532  084C               	movf	setOutputPower@chData^(0+128),w
  9461  2533  0086               	movwf	6
  9462  2534  084D               	movf	(setOutputPower@chData+1)^(0+128),w
  9463  2535  0087               	movwf	7
  9464  2536  3144               	addfsr 1,4
  9465  2537  3F40               	moviw [0]fsr1
  9466  2538  00BF               	movwf	spinInput@max^(0+128)
  9467  2539  3F41               	moviw [1]fsr1
  9468  253A  00C0               	movwf	(spinInput@max+1)^(0+128)
  9469  253B  3F42               	moviw [2]fsr1
  9470  253C  00C1               	movwf	(spinInput@max+2)^(0+128)
  9471  253D  3F43               	moviw [3]fsr1
  9472  253E  00C2               	movwf	(spinInput@max+3)^(0+128)
  9473  253F  303E               	movlw	62
  9474  2540  00C6               	movwf	(spinInput@step+3)^(0+128)
  9475  2541  3080               	movlw	128
  9476  2542  00C5               	movwf	(spinInput@step+2)^(0+128)
  9477  2543  3000               	movlw	0
  9478  2544  00C4               	movwf	(spinInput@step+1)^(0+128)
  9479  2545  3000               	movlw	0
  9480  2546  00C3               	movwf	spinInput@step^(0+128)
  9481  2547  31AD  2567  31A4   	fcall	_spinInput
  9482                           
  9483                           ;menu.c: 206:   if (chData->Pset == 0) {
  9484  254A  0141               	movlb	1	; select bank1
  9485  254B  084C               	movf	setOutputPower@chData^(0+128),w
  9486  254C  0086               	movwf	6
  9487  254D  084D               	movf	(setOutputPower@chData+1)^(0+128),w
  9488  254E  0087               	movwf	7
  9489  254F  3150               	addfsr 1,16
  9490  2550  3F40               	moviw [0]fsr1
  9491  2551  0140               	movlb	0	; select bank0
  9492  2552  00A0               	movwf	___fleq@ff1
  9493  2553  3F41               	moviw [1]fsr1
  9494  2554  00A1               	movwf	___fleq@ff1+1
  9495  2555  3F42               	moviw [2]fsr1
  9496  2556  00A2               	movwf	___fleq@ff1+2
  9497  2557  3F43               	moviw [3]fsr1
  9498  2558  00A3               	movwf	___fleq@ff1+3
  9499  2559  3000               	movlw	0
  9500  255A  00A7               	movwf	___fleq@ff2+3
  9501  255B  3000               	movlw	0
  9502  255C  00A6               	movwf	___fleq@ff2+2
  9503  255D  3000               	movlw	0
  9504  255E  00A5               	movwf	___fleq@ff2+1
  9505  255F  3000               	movlw	0
  9506  2560  00A4               	movwf	___fleq@ff2
  9507  2561  31B7  276D  31A4   	fcall	___fleq
  9508  2564  1C03               	btfss	3,0
  9509  2565  2D97               	goto	l7742
  9510                           
  9511                           ;menu.c: 207:    itoa(str, selectedChannel + 1, 1);
  9512  2566  30E6               	movlw	low _str
  9513  2567  0141               	movlb	1	; select bank1
  9514  2568  00B3               	movwf	itoa@str^(0+128)
  9515  2569  3001               	movlw	high _str
  9516  256A  00B4               	movwf	(itoa@str+1)^(0+128)
  9517  256B  086B               	movf	_selectedChannel^(0+128),w
  9518  256C  3E01               	addlw	1
  9519  256D  00C8               	movwf	??_setOutputPower^(0+128)
  9520  256E  0848               	movf	??_setOutputPower^(0+128),w
  9521  256F  00B5               	movwf	itoa@value^(0+128)
  9522  2570  01B6               	clrf	itoa@width^(0+128)
  9523  2571  0AB6               	incf	itoa@width^(0+128),f
  9524  2572  31A9  218F  31A4   	fcall	_itoa
  9525                           
  9526                           ;menu.c: 208:    OLED_print_xy(0, 1, "\004Ch. ");
  9527  2575  0140               	movlb	0	; select bank0
  9528  2576  01AD               	clrf	OLED_print_xy@row
  9529  2577  0AAD               	incf	OLED_print_xy@row,f
  9530  2578  30C8               	movlw	low (STR_37| (0+32768))
  9531  2579  00AE               	movwf	OLED_print_xy@s
  9532  257A  30BA               	movlw	high (STR_37| (0+32768))
  9533  257B  00AF               	movwf	OLED_print_xy@s+1
  9534  257C  3000               	movlw	0
  9535  257D  31B4  2497  31A4   	fcall	_OLED_print_xy
  9536                           
  9537                           ;menu.c: 209:    OLED_print_xy(5, 1, str);
  9538  2580  0140               	movlb	0	; select bank0
  9539  2581  01AD               	clrf	OLED_print_xy@row
  9540  2582  0AAD               	incf	OLED_print_xy@row,f
  9541  2583  30E6               	movlw	low _str
  9542  2584  00AE               	movwf	OLED_print_xy@s
  9543  2585  3001               	movlw	high _str
  9544  2586  00AF               	movwf	OLED_print_xy@s+1
  9545  2587  3005               	movlw	5
  9546  2588  31B4  2497  31A4   	fcall	_OLED_print_xy
  9547                           
  9548                           ;menu.c: 210:    OLED_print_xy(6, 1, " off \003");
  9549  258B  0140               	movlb	0	; select bank0
  9550  258C  01AD               	clrf	OLED_print_xy@row
  9551  258D  0AAD               	incf	OLED_print_xy@row,f
  9552  258E  30A5               	movlw	low (STR_38| (0+32768))
  9553  258F  00AE               	movwf	OLED_print_xy@s
  9554  2590  30BA               	movlw	high (STR_38| (0+32768))
  9555  2591  00AF               	movwf	OLED_print_xy@s+1
  9556  2592  3006               	movlw	6
  9557  2593  31B4  2497  31A4   	fcall	_OLED_print_xy
  9558                           
  9559                           ;menu.c: 211:   } else if (chData->Pset < 0) {
  9560  2596  2E5A               	goto	l7772
  9561  2597                     l7742:	
  9562  2597  0141               	movlb	1	; select bank1
  9563  2598  084C               	movf	setOutputPower@chData^(0+128),w
  9564  2599  0086               	movwf	6
  9565  259A  084D               	movf	(setOutputPower@chData+1)^(0+128),w
  9566  259B  0087               	movwf	7
  9567  259C  3150               	addfsr 1,16
  9568  259D  3F40               	moviw [0]fsr1
  9569  259E  00AD               	movwf	___flge@ff1^(0+128)
  9570  259F  3F41               	moviw [1]fsr1
  9571  25A0  00AE               	movwf	(___flge@ff1+1)^(0+128)
  9572  25A1  3F42               	moviw [2]fsr1
  9573  25A2  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9574  25A3  3F43               	moviw [3]fsr1
  9575  25A4  00B0               	movwf	(___flge@ff1+3)^(0+128)
  9576  25A5  3000               	movlw	0
  9577  25A6  00B4               	movwf	(___flge@ff2+3)^(0+128)
  9578  25A7  3000               	movlw	0
  9579  25A8  00B3               	movwf	(___flge@ff2+2)^(0+128)
  9580  25A9  3000               	movlw	0
  9581  25AA  00B2               	movwf	(___flge@ff2+1)^(0+128)
  9582  25AB  3000               	movlw	0
  9583  25AC  00B1               	movwf	___flge@ff2^(0+128)
  9584  25AD  31AB  2339  31A4   	fcall	___flge
  9585  25B0  1803               	btfsc	3,0
  9586  25B1  2DE3               	goto	l7752
  9587                           
  9588                           ;menu.c: 212:    itoa(str, selectedChannel + 1, 1);
  9589  25B2  30E6               	movlw	low _str
  9590  25B3  0141               	movlb	1	; select bank1
  9591  25B4  00B3               	movwf	itoa@str^(0+128)
  9592  25B5  3001               	movlw	high _str
  9593  25B6  00B4               	movwf	(itoa@str+1)^(0+128)
  9594  25B7  086B               	movf	_selectedChannel^(0+128),w
  9595  25B8  3E01               	addlw	1
  9596  25B9  00C8               	movwf	??_setOutputPower^(0+128)
  9597  25BA  0848               	movf	??_setOutputPower^(0+128),w
  9598  25BB  00B5               	movwf	itoa@value^(0+128)
  9599  25BC  01B6               	clrf	itoa@width^(0+128)
  9600  25BD  0AB6               	incf	itoa@width^(0+128),f
  9601  25BE  31A9  218F  31A4   	fcall	_itoa
  9602                           
  9603                           ;menu.c: 213:    OLED_print_xy(0, 1, "\004Ch. ");
  9604  25C1  0140               	movlb	0	; select bank0
  9605  25C2  01AD               	clrf	OLED_print_xy@row
  9606  25C3  0AAD               	incf	OLED_print_xy@row,f
  9607  25C4  30C8               	movlw	low (STR_37| (0+32768))
  9608  25C5  00AE               	movwf	OLED_print_xy@s
  9609  25C6  30BA               	movlw	high (STR_37| (0+32768))
  9610  25C7  00AF               	movwf	OLED_print_xy@s+1
  9611  25C8  3000               	movlw	0
  9612  25C9  31B4  2497  31A4   	fcall	_OLED_print_xy
  9613                           
  9614                           ;menu.c: 214:    OLED_print_xy(5, 1, str);
  9615  25CC  0140               	movlb	0	; select bank0
  9616  25CD  01AD               	clrf	OLED_print_xy@row
  9617  25CE  0AAD               	incf	OLED_print_xy@row,f
  9618  25CF  30E6               	movlw	low _str
  9619  25D0  00AE               	movwf	OLED_print_xy@s
  9620  25D1  3001               	movlw	high _str
  9621  25D2  00AF               	movwf	OLED_print_xy@s+1
  9622  25D3  3005               	movlw	5
  9623  25D4  31B4  2497  31A4   	fcall	_OLED_print_xy
  9624                           
  9625                           ;menu.c: 215:    OLED_print_xy(6, 1, " auto\003");
  9626  25D7  0140               	movlb	0	; select bank0
  9627  25D8  01AD               	clrf	OLED_print_xy@row
  9628  25D9  0AAD               	incf	OLED_print_xy@row,f
  9629  25DA  30AC               	movlw	low (STR_40| (0+32768))
  9630  25DB  00AE               	movwf	OLED_print_xy@s
  9631  25DC  30BA               	movlw	high (STR_40| (0+32768))
  9632  25DD  00AF               	movwf	OLED_print_xy@s+1
  9633  25DE  3006               	movlw	6
  9634  25DF  31B4  2497  31A4   	fcall	_OLED_print_xy
  9635                           
  9636                           ;menu.c: 216:   } else {
  9637  25E2  2E5A               	goto	l7772
  9638  25E3                     l7752:	
  9639                           
  9640                           ;menu.c: 217:    OLED_print_xy(0, 1, "\004");
  9641  25E3  0140               	movlb	0	; select bank0
  9642  25E4  01AD               	clrf	OLED_print_xy@row
  9643  25E5  0AAD               	incf	OLED_print_xy@row,f
  9644  25E6  30B8               	movlw	low ((STR_54+5)| (0+32768))
  9645  25E7  00AE               	movwf	OLED_print_xy@s
  9646  25E8  30BA               	movlw	high ((STR_54+5)| (0+32768))
  9647  25E9  00AF               	movwf	OLED_print_xy@s+1
  9648  25EA  3000               	movlw	0
  9649  25EB  31B4  2497  31A4   	fcall	_OLED_print_xy
  9650                           
  9651                           ;menu.c: 218:    ftoa(str, chData->Pset, 4, 1);
  9652  25EE  0141               	movlb	1	; select bank1
  9653  25EF  084C               	movf	setOutputPower@chData^(0+128),w
  9654  25F0  0086               	movwf	6
  9655  25F1  084D               	movf	(setOutputPower@chData+1)^(0+128),w
  9656  25F2  0087               	movwf	7
  9657  25F3  3150               	addfsr 1,16
  9658  25F4  3F40               	moviw [0]fsr1
  9659  25F5  00B9               	movwf	ftoa@fValue^(0+128)
  9660  25F6  3F41               	moviw [1]fsr1
  9661  25F7  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9662  25F8  3F42               	moviw [2]fsr1
  9663  25F9  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9664  25FA  3F43               	moviw [3]fsr1
  9665  25FB  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9666  25FC  3004               	movlw	4
  9667  25FD  00C8               	movwf	??_setOutputPower^(0+128)
  9668  25FE  0848               	movf	??_setOutputPower^(0+128),w
  9669  25FF  00BD               	movwf	ftoa@width^(0+128)
  9670  2600  01BE               	clrf	ftoa@prec^(0+128)
  9671  2601  0ABE               	incf	ftoa@prec^(0+128),f
  9672  2602  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9673  2603  31A2  2208  31A4   	fcall	_ftoa
  9674                           
  9675                           ;menu.c: 219:    OLED_print_xy(1, 1, str);
  9676  2606  0140               	movlb	0	; select bank0
  9677  2607  01AD               	clrf	OLED_print_xy@row
  9678  2608  0AAD               	incf	OLED_print_xy@row,f
  9679  2609  30E6               	movlw	low _str
  9680  260A  00AE               	movwf	OLED_print_xy@s
  9681  260B  3001               	movlw	high _str
  9682  260C  00AF               	movwf	OLED_print_xy@s+1
  9683  260D  3001               	movlw	1
  9684  260E  31B4  2497  31A4   	fcall	_OLED_print_xy
  9685                           
  9686                           ;menu.c: 220:    OLED_print_xy(5, 1, "W man.\003");
  9687  2611  0140               	movlb	0	; select bank0
  9688  2612  01AD               	clrf	OLED_print_xy@row
  9689  2613  0AAD               	incf	OLED_print_xy@row,f
  9690  2614  3075               	movlw	low (STR_42| (0+32768))
  9691  2615  00AE               	movwf	OLED_print_xy@s
  9692  2616  30BA               	movlw	high (STR_42| (0+32768))
  9693  2617  00AF               	movwf	OLED_print_xy@s+1
  9694  2618  3005               	movlw	5
  9695  2619  31B4  2497  31A4   	fcall	_OLED_print_xy
  9696  261C  2E5A               	goto	l7772
  9697  261D                     l7760:	
  9698  261D  084C               	movf	setOutputPower@chData^(0+128),w
  9699  261E  0086               	movwf	6
  9700  261F  084D               	movf	(setOutputPower@chData+1)^(0+128),w
  9701  2620  0087               	movwf	7
  9702  2621  315E               	addfsr 1,30
  9703  2622  3004               	movlw	4
  9704  2623  0601               	xorwf	1,w
  9705  2624  1903               	btfsc	3,2
  9706  2625  2E2F               	goto	l7764
  9707  2626  084C               	movf	setOutputPower@chData^(0+128),w
  9708  2627  0086               	movwf	6
  9709  2628  084D               	movf	(setOutputPower@chData+1)^(0+128),w
  9710  2629  0087               	movwf	7
  9711  262A  315E               	addfsr 1,30
  9712  262B  3003               	movlw	3
  9713  262C  0601               	xorwf	1,w
  9714  262D  1D03               	btfss	3,2
  9715  262E  2E5C               	goto	l7778
  9716  262F                     l7764:	
  9717                           
  9718                           ;menu.c: 225:   if (g_screenRefresh) {
  9719  262F  086D               	movf	_g_screenRefresh^(0+128),w
  9720  2630  1903               	btfsc	3,2
  9721  2631  2E47               	goto	l7768
  9722                           
  9723                           ;menu.c: 226:    OLED_print_xy(0, 0, "Hold button ");
  9724  2632  0140               	movlb	0	; select bank0
  9725  2633  01AD               	clrf	OLED_print_xy@row
  9726  2634  30E1               	movlw	low (STR_43| (0+32768))
  9727  2635  00AE               	movwf	OLED_print_xy@s
  9728  2636  30B9               	movlw	high (STR_43| (0+32768))
  9729  2637  00AF               	movwf	OLED_print_xy@s+1
  9730  2638  3000               	movlw	0
  9731  2639  31B4  2497  31A4   	fcall	_OLED_print_xy
  9732                           
  9733                           ;menu.c: 227:    OLED_print_xy(0, 1, "to re-enable");
  9734  263C  0140               	movlb	0	; select bank0
  9735  263D  01AD               	clrf	OLED_print_xy@row
  9736  263E  0AAD               	incf	OLED_print_xy@row,f
  9737  263F  3015               	movlw	low (STR_44| (0+32768))
  9738  2640  00AE               	movwf	OLED_print_xy@s
  9739  2641  30BA               	movlw	high (STR_44| (0+32768))
  9740  2642  00AF               	movwf	OLED_print_xy@s+1
  9741  2643  3000               	movlw	0
  9742  2644  31B4  2497  31A4   	fcall	_OLED_print_xy
  9743  2647                     l7768:	
  9744                           
  9745                           ;menu.c: 229:   if (getPB() == PB_LONG)
  9746  2647  3188  2000  31A4   	fcall	_getPB
  9747  264A  3A02               	xorlw	2
  9748  264B  1D03               	skipz
  9749  264C  2E5A               	goto	l7772
  9750                           
  9751                           ;menu.c: 230:    chData->status = CH_UNCHECKED;
  9752  264D  0141               	movlb	1	; select bank1
  9753  264E  084C               	movf	setOutputPower@chData^(0+128),w
  9754  264F  3E1E               	addlw	30
  9755  2650  00C8               	movwf	??_setOutputPower^(0+128)
  9756  2651  3000               	movlw	0
  9757  2652  3D4D               	addwfc	(setOutputPower@chData+1)^(0+128),w
  9758  2653  00C9               	movwf	(??_setOutputPower+1)^(0+128)
  9759  2654  0848               	movf	??_setOutputPower^(0+128),w
  9760  2655  0086               	movwf	6
  9761  2656  0849               	movf	(??_setOutputPower+1)^(0+128),w
  9762  2657  0087               	movwf	7
  9763  2658  3005               	movlw	5
  9764  2659  0081               	movwf	1
  9765  265A                     l7772:	
  9766                           
  9767                           ;menu.c: 231:   return 0;
  9768  265A  3000               	movlw	0
  9769  265B  0008               	return
  9770  265C                     l7778:	
  9771                           
  9772                           ;menu.c: 235:   return 1;
  9773  265C  3001               	movlw	1
  9774  265D  0008               	return
  9775  265E                     __end_of_setOutputPower:	
  9776                           
  9777                           	psect	text11
  9778  265E                     __ptext11:	
  9779 ;; *************** function _channelSetup *****************
  9780 ;; Defined at:
  9781 ;;		line 140 in file "menu.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;		None
  9784 ;; Auto vars:     Size  Location     Type
  9785 ;;  chData          2   43[BANK1 ] PTR struct .
  9786 ;;		 -> data.heater(124), data(166), 
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  1    wreg      unsigned char 
  9789 ;; Registers used:
  9790 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9796 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9797 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9798 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9799 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9800 ;;Total ram usage:        6 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:    7
  9803 ;; This function calls:
  9804 ;;		_OLED_print_xy
  9805 ;;		___fleq
  9806 ;;		___flge
  9807 ;;		___wmul
  9808 ;;		_ftoa
  9809 ;;		_itoa
  9810 ;;		_paging
  9811 ;;		_returnToPage
  9812 ;; This function is called by:
  9813 ;;		_menu
  9814 ;; This function uses a non-reentrant model
  9815 ;;
  9816                           
  9817                           
  9818                           ;psect for function _channelSetup
  9819  265E                     _channelSetup:	
  9820                           
  9821                           ;menu.c: 142:  static uint8_t page = 0;;menu.c: 143:  t_heater *chData = &data.heater[se
      +                          lectedChannel];
  9822                           
  9823                           ;incstack = 0
  9824                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9825  265E  0141               	movlb	1	; select bank1
  9826  265F  086B               	movf	_selectedChannel^(0+128),w
  9827  2660  00C7               	movwf	??_channelSetup^(0+128)
  9828  2661  01C8               	clrf	(??_channelSetup^(0+128)+1)
  9829  2662  0847               	movf	??_channelSetup^(0+128),w
  9830  2663  0140               	movlb	0	; select bank0
  9831  2664  00AD               	movwf	___wmul@multiplier
  9832  2665  0141               	movlb	1	; select bank1
  9833  2666  0848               	movf	(??_channelSetup+1)^(0+128),w
  9834  2667  0140               	movlb	0	; select bank0
  9835  2668  00AE               	movwf	___wmul@multiplier+1
  9836  2669  301F               	movlw	31
  9837  266A  00AF               	movwf	___wmul@multiplicand
  9838  266B  3000               	movlw	0
  9839  266C  00B0               	movwf	___wmul@multiplicand+1
  9840  266D  31B3  2371  31A6   	fcall	___wmul
  9841  2670  3074               	movlw	116
  9842  2671  0141               	movlb	1	; select bank1
  9843  2672  00C9               	movwf	(??_channelSetup+2)^(0+128)
  9844  2673  3027               	movlw	39
  9845  2674  00CA               	movwf	((??_channelSetup+2)^(0+128)+1)
  9846  2675  0140               	movlb	0	; select bank0
  9847  2676  082D               	movf	?___wmul,w
  9848  2677  0141               	movlb	1	; select bank1
  9849  2678  0749               	addwf	(??_channelSetup+2)^(0+128),w
  9850  2679  00CB               	movwf	channelSetup@chData^(0+128)
  9851  267A  0140               	movlb	0	; select bank0
  9852  267B  082E               	movf	?___wmul+1,w
  9853  267C  0141               	movlb	1	; select bank1
  9854  267D  3D4A               	addwfc	(??_channelSetup+3)^(0+128),w
  9855  267E  00CC               	movwf	(channelSetup@chData+1)^(0+128)
  9856                           
  9857                           ;menu.c: 145:  returnToPage(page);
  9858  267F  0142               	movlb	2	; select bank2
  9859  2680  0867               	movf	channelSetup@page^(0+256),w
  9860  2681  31B4  24C9  31A6   	fcall	_returnToPage
  9861                           
  9862                           ;menu.c: 147:  if ((chData->status == CH_ENABLED) || (chData->status == CH_DISABLED)) {
  9863  2684  0141               	movlb	1	; select bank1
  9864  2685  084B               	movf	channelSetup@chData^(0+128),w
  9865  2686  0086               	movwf	6
  9866  2687  084C               	movf	(channelSetup@chData+1)^(0+128),w
  9867  2688  0087               	movwf	7
  9868  2689  315E               	addfsr 1,30
  9869  268A  0301               	decf	1,w
  9870  268B  1903               	btfsc	3,2
  9871  268C  2E95               	goto	l7666
  9872  268D  084B               	movf	channelSetup@chData^(0+128),w
  9873  268E  0086               	movwf	6
  9874  268F  084C               	movf	(channelSetup@chData+1)^(0+128),w
  9875  2690  0087               	movwf	7
  9876  2691  315E               	addfsr 1,30
  9877  2692  0801               	movf	1,w
  9878  2693  1D03               	btfss	3,2
  9879  2694  2F5C               	goto	l7694
  9880  2695                     l7666:	
  9881                           
  9882                           ;menu.c: 148:   OLED_print_xy(0, 0, "Output power");
  9883  2695  0140               	movlb	0	; select bank0
  9884  2696  01AD               	clrf	OLED_print_xy@row
  9885  2697  302F               	movlw	low (STR_22| (0+32768))
  9886  2698  00AE               	movwf	OLED_print_xy@s
  9887  2699  30BA               	movlw	high (STR_22| (0+32768))
  9888  269A  00AF               	movwf	OLED_print_xy@s+1
  9889  269B  3000               	movlw	0
  9890  269C  31B4  2497  31A6   	fcall	_OLED_print_xy
  9891                           
  9892                           ;menu.c: 149:   if (chData->Pset == 0) {
  9893  269F  0141               	movlb	1	; select bank1
  9894  26A0  084B               	movf	channelSetup@chData^(0+128),w
  9895  26A1  0086               	movwf	6
  9896  26A2  084C               	movf	(channelSetup@chData+1)^(0+128),w
  9897  26A3  0087               	movwf	7
  9898  26A4  3150               	addfsr 1,16
  9899  26A5  3F40               	moviw [0]fsr1
  9900  26A6  0140               	movlb	0	; select bank0
  9901  26A7  00A0               	movwf	___fleq@ff1
  9902  26A8  3F41               	moviw [1]fsr1
  9903  26A9  00A1               	movwf	___fleq@ff1+1
  9904  26AA  3F42               	moviw [2]fsr1
  9905  26AB  00A2               	movwf	___fleq@ff1+2
  9906  26AC  3F43               	moviw [3]fsr1
  9907  26AD  00A3               	movwf	___fleq@ff1+3
  9908  26AE  3000               	movlw	0
  9909  26AF  00A7               	movwf	___fleq@ff2+3
  9910  26B0  3000               	movlw	0
  9911  26B1  00A6               	movwf	___fleq@ff2+2
  9912  26B2  3000               	movlw	0
  9913  26B3  00A5               	movwf	___fleq@ff2+1
  9914  26B4  3000               	movlw	0
  9915  26B5  00A4               	movwf	___fleq@ff2
  9916  26B6  31B7  276D  31A6   	fcall	___fleq
  9917  26B9  1C03               	btfss	3,0
  9918  26BA  2EE7               	goto	l7678
  9919                           
  9920                           ;menu.c: 150:    OLED_print_xy(0, 1, "Ch. ");
  9921  26BB  0140               	movlb	0	; select bank0
  9922  26BC  01AD               	clrf	OLED_print_xy@row
  9923  26BD  0AAD               	incf	OLED_print_xy@row,f
  9924  26BE  30C9               	movlw	low ((STR_37+1)| (0+32768))
  9925  26BF  00AE               	movwf	OLED_print_xy@s
  9926  26C0  30BA               	movlw	high ((STR_37+1)| (0+32768))
  9927  26C1  00AF               	movwf	OLED_print_xy@s+1
  9928  26C2  3000               	movlw	0
  9929  26C3  31B4  2497  31A6   	fcall	_OLED_print_xy
  9930                           
  9931                           ;menu.c: 151:    itoa(str, selectedChannel + 1, 1);
  9932  26C6  30E6               	movlw	low _str
  9933  26C7  0141               	movlb	1	; select bank1
  9934  26C8  00B3               	movwf	itoa@str^(0+128)
  9935  26C9  3001               	movlw	high _str
  9936  26CA  00B4               	movwf	(itoa@str+1)^(0+128)
  9937  26CB  086B               	movf	_selectedChannel^(0+128),w
  9938  26CC  3E01               	addlw	1
  9939  26CD  00C7               	movwf	??_channelSetup^(0+128)
  9940  26CE  0847               	movf	??_channelSetup^(0+128),w
  9941  26CF  00B5               	movwf	itoa@value^(0+128)
  9942  26D0  01B6               	clrf	itoa@width^(0+128)
  9943  26D1  0AB6               	incf	itoa@width^(0+128),f
  9944  26D2  31A9  218F  31A6   	fcall	_itoa
  9945                           
  9946                           ;menu.c: 152:    OLED_print_xy(4, 1, str);
  9947  26D5  0140               	movlb	0	; select bank0
  9948  26D6  01AD               	clrf	OLED_print_xy@row
  9949  26D7  0AAD               	incf	OLED_print_xy@row,f
  9950  26D8  30E6               	movlw	low _str
  9951  26D9  00AE               	movwf	OLED_print_xy@s
  9952  26DA  3001               	movlw	high _str
  9953  26DB  00AF               	movwf	OLED_print_xy@s+1
  9954  26DC  3004               	movlw	4
  9955  26DD  31B4  2497  31A6   	fcall	_OLED_print_xy
  9956                           
  9957                           ;menu.c: 153:    OLED_print_xy(5, 1, " off   ");
  9958  26E0  0140               	movlb	0	; select bank0
  9959  26E1  01AD               	clrf	OLED_print_xy@row
  9960  26E2  0AAD               	incf	OLED_print_xy@row,f
  9961  26E3  3085               	movlw	low (STR_24| (0+32768))
  9962  26E4  00AE               	movwf	OLED_print_xy@s
  9963  26E5  30BA               	movlw	high (STR_24| (0+32768))
  9964  26E6  2F2D               	goto	L3
  9965  26E7                     l7678:	
  9966                           ;menu.c: 154:   } else if (chData->Pset < 0) {
  9967                           
  9968  26E7  0141               	movlb	1	; select bank1
  9969  26E8  084B               	movf	channelSetup@chData^(0+128),w
  9970  26E9  0086               	movwf	6
  9971  26EA  084C               	movf	(channelSetup@chData+1)^(0+128),w
  9972  26EB  0087               	movwf	7
  9973  26EC  3150               	addfsr 1,16
  9974  26ED  3F40               	moviw [0]fsr1
  9975  26EE  00AD               	movwf	___flge@ff1^(0+128)
  9976  26EF  3F41               	moviw [1]fsr1
  9977  26F0  00AE               	movwf	(___flge@ff1+1)^(0+128)
  9978  26F1  3F42               	moviw [2]fsr1
  9979  26F2  00AF               	movwf	(___flge@ff1+2)^(0+128)
  9980  26F3  3F43               	moviw [3]fsr1
  9981  26F4  00B0               	movwf	(___flge@ff1+3)^(0+128)
  9982  26F5  3000               	movlw	0
  9983  26F6  00B4               	movwf	(___flge@ff2+3)^(0+128)
  9984  26F7  3000               	movlw	0
  9985  26F8  00B3               	movwf	(___flge@ff2+2)^(0+128)
  9986  26F9  3000               	movlw	0
  9987  26FA  00B2               	movwf	(___flge@ff2+1)^(0+128)
  9988  26FB  3000               	movlw	0
  9989  26FC  00B1               	movwf	___flge@ff2^(0+128)
  9990  26FD  31AB  2339  31A6   	fcall	___flge
  9991  2700  1803               	btfsc	3,0
  9992  2701  2F30               	goto	l7688
  9993                           
  9994                           ;menu.c: 155:    OLED_print_xy(0, 1, "Ch. ");
  9995  2702  0140               	movlb	0	; select bank0
  9996  2703  01AD               	clrf	OLED_print_xy@row
  9997  2704  0AAD               	incf	OLED_print_xy@row,f
  9998  2705  30C9               	movlw	low ((STR_37+1)| (0+32768))
  9999  2706  00AE               	movwf	OLED_print_xy@s
 10000  2707  30BA               	movlw	high ((STR_37+1)| (0+32768))
 10001  2708  00AF               	movwf	OLED_print_xy@s+1
 10002  2709  3000               	movlw	0
 10003  270A  31B4  2497  31A6   	fcall	_OLED_print_xy
 10004                           
 10005                           ;menu.c: 156:    itoa(str, selectedChannel + 1, 1);
 10006  270D  30E6               	movlw	low _str
 10007  270E  0141               	movlb	1	; select bank1
 10008  270F  00B3               	movwf	itoa@str^(0+128)
 10009  2710  3001               	movlw	high _str
 10010  2711  00B4               	movwf	(itoa@str+1)^(0+128)
 10011  2712  086B               	movf	_selectedChannel^(0+128),w
 10012  2713  3E01               	addlw	1
 10013  2714  00C7               	movwf	??_channelSetup^(0+128)
 10014  2715  0847               	movf	??_channelSetup^(0+128),w
 10015  2716  00B5               	movwf	itoa@value^(0+128)
 10016  2717  01B6               	clrf	itoa@width^(0+128)
 10017  2718  0AB6               	incf	itoa@width^(0+128),f
 10018  2719  31A9  218F  31A6   	fcall	_itoa
 10019                           
 10020                           ;menu.c: 157:    OLED_print_xy(4, 1, str);
 10021  271C  0140               	movlb	0	; select bank0
 10022  271D  01AD               	clrf	OLED_print_xy@row
 10023  271E  0AAD               	incf	OLED_print_xy@row,f
 10024  271F  30E6               	movlw	low _str
 10025  2720  00AE               	movwf	OLED_print_xy@s
 10026  2721  3001               	movlw	high _str
 10027  2722  00AF               	movwf	OLED_print_xy@s+1
 10028  2723  3004               	movlw	4
 10029  2724  31B4  2497  31A6   	fcall	_OLED_print_xy
 10030                           
 10031                           ;menu.c: 158:    OLED_print_xy(5, 1, " auto  ");
 10032  2727  0140               	movlb	0	; select bank0
 10033  2728  01AD               	clrf	OLED_print_xy@row
 10034  2729  0AAD               	incf	OLED_print_xy@row,f
 10035  272A  3095               	movlw	low (STR_26| (0+32768))
 10036  272B  00AE               	movwf	OLED_print_xy@s
 10037  272C  30BA               	movlw	high (STR_26| (0+32768))
 10038  272D                     L3:	
 10039  272D  00AF               	movwf	OLED_print_xy@s+1
 10040  272E  3005               	movlw	5
 10041  272F  2FB4               	goto	L2
 10042  2730                     l7688:	
 10043                           ;menu.c: 159:   } else {
 10044                           
 10045                           
 10046                           ;menu.c: 160:    ftoa(str, chData->Pset, 4, 1);
 10047  2730  0141               	movlb	1	; select bank1
 10048  2731  084B               	movf	channelSetup@chData^(0+128),w
 10049  2732  0086               	movwf	6
 10050  2733  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10051  2734  0087               	movwf	7
 10052  2735  3150               	addfsr 1,16
 10053  2736  3F40               	moviw [0]fsr1
 10054  2737  00B9               	movwf	ftoa@fValue^(0+128)
 10055  2738  3F41               	moviw [1]fsr1
 10056  2739  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10057  273A  3F42               	moviw [2]fsr1
 10058  273B  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10059  273C  3F43               	moviw [3]fsr1
 10060  273D  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10061  273E  3004               	movlw	4
 10062  273F  00C7               	movwf	??_channelSetup^(0+128)
 10063  2740  0847               	movf	??_channelSetup^(0+128),w
 10064  2741  00BD               	movwf	ftoa@width^(0+128)
 10065  2742  01BE               	clrf	ftoa@prec^(0+128)
 10066  2743  0ABE               	incf	ftoa@prec^(0+128),f
 10067  2744  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 10068  2745  31A2  2208  31A6   	fcall	_ftoa
 10069                           
 10070                           ;menu.c: 161:    OLED_print_xy(0, 1, str);
 10071  2748  0140               	movlb	0	; select bank0
 10072  2749  01AD               	clrf	OLED_print_xy@row
 10073  274A  0AAD               	incf	OLED_print_xy@row,f
 10074  274B  30E6               	movlw	low _str
 10075  274C  00AE               	movwf	OLED_print_xy@s
 10076  274D  3001               	movlw	high _str
 10077  274E  00AF               	movwf	OLED_print_xy@s+1
 10078  274F  3000               	movlw	0
 10079  2750  31B4  2497  31A6   	fcall	_OLED_print_xy
 10080                           
 10081                           ;menu.c: 162:    OLED_print_xy(4, 1, "W manual");
 10082  2753  0140               	movlb	0	; select bank0
 10083  2754  01AD               	clrf	OLED_print_xy@row
 10084  2755  0AAD               	incf	OLED_print_xy@row,f
 10085  2756  3064               	movlw	low (STR_17| (0+32768))
 10086  2757  00AE               	movwf	OLED_print_xy@s
 10087  2758  30BA               	movlw	high (STR_17| (0+32768))
 10088  2759  00AF               	movwf	OLED_print_xy@s+1
 10089  275A  3004               	movlw	4
 10090  275B  2FB4               	goto	L2
 10091  275C                     l7694:	
 10092  275C  084B               	movf	channelSetup@chData^(0+128),w
 10093  275D  0086               	movwf	6
 10094  275E  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10095  275F  0087               	movwf	7
 10096  2760  315E               	addfsr 1,30
 10097  2761  3002               	movlw	2
 10098  2762  0601               	xorwf	1,w
 10099  2763  1D03               	btfss	3,2
 10100  2764  2F76               	goto	l7698
 10101                           
 10102                           ;menu.c: 167:   OLED_print_xy(0, 0, "Not         ");
 10103  2765  0140               	movlb	0	; select bank0
 10104  2766  01AD               	clrf	OLED_print_xy@row
 10105  2767  3052               	movlw	low (STR_28| (0+32768))
 10106  2768  00AE               	movwf	OLED_print_xy@s
 10107  2769  30B9               	movlw	high (STR_28| (0+32768))
 10108  276A  00AF               	movwf	OLED_print_xy@s+1
 10109  276B  3000               	movlw	0
 10110  276C  31B4  2497  31A6   	fcall	_OLED_print_xy
 10111                           
 10112                           ;menu.c: 168:   OLED_print_xy(0, 1, "connected   ");
 10113  276F  0140               	movlb	0	; select bank0
 10114  2770  01AD               	clrf	OLED_print_xy@row
 10115  2771  0AAD               	incf	OLED_print_xy@row,f
 10116  2772  30BA               	movlw	low (STR_29| (0+32768))
 10117  2773  00AE               	movwf	OLED_print_xy@s
 10118  2774  30B9               	movlw	high (STR_29| (0+32768))
 10119  2775  2FB2               	goto	L4
 10120  2776                     l7698:	
 10121                           ;menu.c: 170:  } else if (chData->status == CH_UNCHECKED) {
 10122                           
 10123  2776  084B               	movf	channelSetup@chData^(0+128),w
 10124  2777  0086               	movwf	6
 10125  2778  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10126  2779  0087               	movwf	7
 10127  277A  315E               	addfsr 1,30
 10128  277B  3005               	movlw	5
 10129  277C  0601               	xorwf	1,w
 10130  277D  1D03               	btfss	3,2
 10131  277E  2F90               	goto	l7702
 10132                           
 10133                           ;menu.c: 172:   OLED_print_xy(0, 0, "Testing     ");
 10134  277F  0140               	movlb	0	; select bank0
 10135  2780  01AD               	clrf	OLED_print_xy@row
 10136  2781  306C               	movlw	low (STR_30| (0+32768))
 10137  2782  00AE               	movwf	OLED_print_xy@s
 10138  2783  30B9               	movlw	high (STR_30| (0+32768))
 10139  2784  00AF               	movwf	OLED_print_xy@s+1
 10140  2785  3000               	movlw	0
 10141  2786  31B4  2497  31A6   	fcall	_OLED_print_xy
 10142                           
 10143                           ;menu.c: 173:   OLED_print_xy(0, 1, "heater...   ");
 10144  2789  0140               	movlb	0	; select bank0
 10145  278A  01AD               	clrf	OLED_print_xy@row
 10146  278B  0AAD               	incf	OLED_print_xy@row,f
 10147  278C  30A0               	movlw	low (STR_31| (0+32768))
 10148  278D  00AE               	movwf	OLED_print_xy@s
 10149  278E  30B9               	movlw	high (STR_31| (0+32768))
 10150  278F  2FB2               	goto	L4
 10151  2790                     l7702:	
 10152                           ;menu.c: 175:  } else if ((chData->status == CH_OVERCURRENT) || (chData->status == CH_SH
      +                          ORTED)) {
 10153                           
 10154  2790  084B               	movf	channelSetup@chData^(0+128),w
 10155  2791  0086               	movwf	6
 10156  2792  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10157  2793  0087               	movwf	7
 10158  2794  315E               	addfsr 1,30
 10159  2795  3004               	movlw	4
 10160  2796  0601               	xorwf	1,w
 10161  2797  1903               	btfsc	3,2
 10162  2798  2FA2               	goto	l7706
 10163  2799  084B               	movf	channelSetup@chData^(0+128),w
 10164  279A  0086               	movwf	6
 10165  279B  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10166  279C  0087               	movwf	7
 10167  279D  315E               	addfsr 1,30
 10168  279E  3003               	movlw	3
 10169  279F  0601               	xorwf	1,w
 10170  27A0  1D03               	btfss	3,2
 10171  27A1  2FB7               	goto	l464
 10172  27A2                     l7706:	
 10173                           
 10174                           ;menu.c: 177:   OLED_print_xy(0, 0, "Reset       ");
 10175  27A2  0140               	movlb	0	; select bank0
 10176  27A3  01AD               	clrf	OLED_print_xy@row
 10177  27A4  305F               	movlw	low (STR_32| (0+32768))
 10178  27A5  00AE               	movwf	OLED_print_xy@s
 10179  27A6  30B9               	movlw	high (STR_32| (0+32768))
 10180  27A7  00AF               	movwf	OLED_print_xy@s+1
 10181  27A8  3000               	movlw	0
 10182  27A9  31B4  2497  31A6   	fcall	_OLED_print_xy
 10183                           
 10184                           ;menu.c: 178:   OLED_print_xy(0, 1, "channel     ");
 10185  27AC  0140               	movlb	0	; select bank0
 10186  27AD  01AD               	clrf	OLED_print_xy@row
 10187  27AE  0AAD               	incf	OLED_print_xy@row,f
 10188  27AF  3079               	movlw	low (STR_33| (0+32768))
 10189  27B0  00AE               	movwf	OLED_print_xy@s
 10190  27B1  30B9               	movlw	high (STR_33| (0+32768))
 10191  27B2                     L4:	
 10192  27B2  00AF               	movwf	OLED_print_xy@s+1
 10193  27B3  3000               	movlw	0
 10194  27B4                     L2:	
 10195  27B4  31B4  2497  31A6   	fcall	_OLED_print_xy
 10196  27B7                     l464:	
 10197                           
 10198                           ;menu.c: 182:  OLED_print_xy(12, 0, "Lens diam.  ");
 10199  27B7  0140               	movlb	0	; select bank0
 10200  27B8  01AD               	clrf	OLED_print_xy@row
 10201  27B9  30D4               	movlw	low (STR_34| (0+32768))
 10202  27BA  00AE               	movwf	OLED_print_xy@s
 10203  27BB  30B9               	movlw	high (STR_34| (0+32768))
 10204  27BC  00AF               	movwf	OLED_print_xy@s+1
 10205  27BD  300C               	movlw	12
 10206  27BE  31B4  2497  31A6   	fcall	_OLED_print_xy
 10207                           
 10208                           ;menu.c: 183:  ftoa(str, chData->lensDia, 4, 1);
 10209  27C1  0141               	movlb	1	; select bank1
 10210  27C2  084B               	movf	channelSetup@chData^(0+128),w
 10211  27C3  0086               	movwf	6
 10212  27C4  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10213  27C5  0087               	movwf	7
 10214  27C6  3155               	addfsr 1,21
 10215  27C7  3F40               	moviw [0]fsr1
 10216  27C8  00B9               	movwf	ftoa@fValue^(0+128)
 10217  27C9  3F41               	moviw [1]fsr1
 10218  27CA  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10219  27CB  3F42               	moviw [2]fsr1
 10220  27CC  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10221  27CD  3F43               	moviw [3]fsr1
 10222  27CE  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10223  27CF  3004               	movlw	4
 10224  27D0  00C7               	movwf	??_channelSetup^(0+128)
 10225  27D1  0847               	movf	??_channelSetup^(0+128),w
 10226  27D2  00BD               	movwf	ftoa@width^(0+128)
 10227  27D3  01BE               	clrf	ftoa@prec^(0+128)
 10228  27D4  0ABE               	incf	ftoa@prec^(0+128),f
 10229  27D5  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 10230  27D6  31A2  2208  31A6   	fcall	_ftoa
 10231                           
 10232                           ;menu.c: 184:  OLED_print_xy(12 + 0, 1, str);
 10233  27D9  0140               	movlb	0	; select bank0
 10234  27DA  01AD               	clrf	OLED_print_xy@row
 10235  27DB  0AAD               	incf	OLED_print_xy@row,f
 10236  27DC  30E6               	movlw	low _str
 10237  27DD  00AE               	movwf	OLED_print_xy@s
 10238  27DE  3001               	movlw	high _str
 10239  27DF  00AF               	movwf	OLED_print_xy@s+1
 10240  27E0  300C               	movlw	12
 10241  27E1  31B4  2497  31A6   	fcall	_OLED_print_xy
 10242                           
 10243                           ;menu.c: 185:  OLED_print_xy(12 + 5, 1, " inch  ");
 10244  27E4  0140               	movlb	0	; select bank0
 10245  27E5  01AD               	clrf	OLED_print_xy@row
 10246  27E6  0AAD               	incf	OLED_print_xy@row,f
 10247  27E7  308D               	movlw	low (STR_35| (0+32768))
 10248  27E8  00AE               	movwf	OLED_print_xy@s
 10249  27E9  30BA               	movlw	high (STR_35| (0+32768))
 10250  27EA  00AF               	movwf	OLED_print_xy@s+1
 10251  27EB  3011               	movlw	17
 10252  27EC  31B4  2497  31A6   	fcall	_OLED_print_xy
 10253                           
 10254                           ;menu.c: 187:  page = paging(page, 2);
 10255  27EF  3002               	movlw	2
 10256  27F0  0141               	movlb	1	; select bank1
 10257  27F1  00C7               	movwf	??_channelSetup^(0+128)
 10258  27F2  0847               	movf	??_channelSetup^(0+128),w
 10259  27F3  0140               	movlb	0	; select bank0
 10260  27F4  00A7               	movwf	paging@lastPage
 10261  27F5  0142               	movlb	2	; select bank2
 10262  27F6  0867               	movf	channelSetup@page^(0+256),w
 10263  27F7  3187  278D         	fcall	_paging
 10264  27F9  0141               	movlb	1	; select bank1
 10265  27FA  00C8               	movwf	(??_channelSetup+1)^(0+128)
 10266  27FB  0848               	movf	(??_channelSetup+1)^(0+128),w
 10267  27FC  0142               	movlb	2	; select bank2
 10268  27FD  00E7               	movwf	channelSetup@page^(0+256)
 10269                           
 10270                           ;menu.c: 189:  return page;
 10271  27FE  0867               	movf	channelSetup@page^(0+256),w
 10272  27FF  0008               	return
 10273  2800                     __end_of_channelSetup:	
 10274                           
 10275                           	psect	text12
 10276  0919                     __ptext12:	
 10277 ;; *************** function _channelView *****************
 10278 ;; Defined at:
 10279 ;;		line 75 in file "menu.c"
 10280 ;; Parameters:    Size  Location     Type
 10281 ;;		None
 10282 ;; Auto vars:     Size  Location     Type
 10283 ;;  n               1   49[BANK1 ] unsigned char 
 10284 ;; Return value:  Size  Location     Type
 10285 ;;                  1    wreg      unsigned char 
 10286 ;; Registers used:
 10287 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10288 ;; Tracked objects:
 10289 ;;		On entry : 0/0
 10290 ;;		On exit  : 0/0
 10291 ;;		Unchanged: 0/0
 10292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10294 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10295 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10296 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10297 ;;Total ram usage:       11 bytes
 10298 ;; Hardware stack levels used:    1
 10299 ;; Hardware stack levels required when called:    7
 10300 ;; This function calls:
 10301 ;;		_OLED_print_xy
 10302 ;;		___bmul
 10303 ;;		___fltol
 10304 ;;		___wmul
 10305 ;;		_ftoa
 10306 ;;		_itoa
 10307 ;;		_paging
 10308 ;;		_returnToPage
 10309 ;; This function is called by:
 10310 ;;		_menu
 10311 ;; This function uses a non-reentrant model
 10312 ;;
 10313                           
 10314                           
 10315                           ;psect for function _channelView
 10316  0919                     _channelView:	
 10317                           
 10318                           ;menu.c: 77:  static uint8_t page = 0;;menu.c: 78:  uint8_t n;;menu.c: 80:  returnToPage
      +                          (page);
 10319                           
 10320                           ;incstack = 0
 10321                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10322  0919  0142               	movlb	2	; select bank2
 10323  091A  0868               	movf	channelView@page^(0+256),w
 10324  091B  31B4  24C9  3189   	fcall	_returnToPage
 10325                           
 10326                           ;menu.c: 81:  if (g_screenRefresh) {
 10327  091E  0141               	movlb	1	; select bank1
 10328  091F  086D               	movf	_g_screenRefresh^(0+128),w
 10329  0920  1903               	btfsc	3,2
 10330  0921  29E2               	goto	l7606
 10331                           
 10332                           ;menu.c: 82:   for (n = 0; n < 4; n++) {
 10333  0922  01D1               	clrf	channelView@n^(0+128)
 10334  0923                     l7588:	
 10335  0923  3004               	movlw	4
 10336  0924  0251               	subwf	channelView@n^(0+128),w
 10337  0925  1803               	btfsc	3,0
 10338  0926  29E2               	goto	l7606
 10339                           
 10340                           ;menu.c: 83:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
 10341  0927  0140               	movlb	0	; select bank0
 10342  0928  01AD               	clrf	OLED_print_xy@row
 10343  0929  30DA               	movlw	low (STR_10| (0+32768))
 10344  092A  00AE               	movwf	OLED_print_xy@s
 10345  092B  30BA               	movlw	high (STR_10| (0+32768))
 10346  092C  00AF               	movwf	OLED_print_xy@s+1
 10347  092D  300C               	movlw	12
 10348  092E  0141               	movlb	1	; select bank1
 10349  092F  00C7               	movwf	??_channelView^(0+128)
 10350  0930  0847               	movf	??_channelView^(0+128),w
 10351  0931  0140               	movlb	0	; select bank0
 10352  0932  00A9               	movwf	___bmul@multiplicand
 10353  0933  0141               	movlb	1	; select bank1
 10354  0934  0851               	movf	channelView@n^(0+128),w
 10355  0935  31B3  2330  3189   	fcall	___bmul
 10356  0938  31B4  2497  3189   	fcall	_OLED_print_xy
 10357                           
 10358                           ;menu.c: 84:    itoa(str, n + 1, 1);
 10359  093B  30E6               	movlw	low _str
 10360  093C  0141               	movlb	1	; select bank1
 10361  093D  00B3               	movwf	itoa@str^(0+128)
 10362  093E  3001               	movlw	high _str
 10363  093F  00B4               	movwf	(itoa@str+1)^(0+128)
 10364  0940  0851               	movf	channelView@n^(0+128),w
 10365  0941  3E01               	addlw	1
 10366  0942  00C7               	movwf	??_channelView^(0+128)
 10367  0943  0847               	movf	??_channelView^(0+128),w
 10368  0944  00B5               	movwf	itoa@value^(0+128)
 10369  0945  01B6               	clrf	itoa@width^(0+128)
 10370  0946  0AB6               	incf	itoa@width^(0+128),f
 10371  0947  31A9  218F  3189   	fcall	_itoa
 10372                           
 10373                           ;menu.c: 85:    OLED_print_xy(n * 12 + 3, 0, str);
 10374  094A  0140               	movlb	0	; select bank0
 10375  094B  01AD               	clrf	OLED_print_xy@row
 10376  094C  30E6               	movlw	low _str
 10377  094D  00AE               	movwf	OLED_print_xy@s
 10378  094E  3001               	movlw	high _str
 10379  094F  00AF               	movwf	OLED_print_xy@s+1
 10380  0950  300C               	movlw	12
 10381  0951  0141               	movlb	1	; select bank1
 10382  0952  00C7               	movwf	??_channelView^(0+128)
 10383  0953  0847               	movf	??_channelView^(0+128),w
 10384  0954  0140               	movlb	0	; select bank0
 10385  0955  00A9               	movwf	___bmul@multiplicand
 10386  0956  0141               	movlb	1	; select bank1
 10387  0957  0851               	movf	channelView@n^(0+128),w
 10388  0958  31B3  2330  3189   	fcall	___bmul
 10389  095B  3E03               	addlw	3
 10390  095C  31B4  2497  3189   	fcall	_OLED_print_xy
 10391                           
 10392                           ;menu.c: 86:    OLED_print_xy(n * 12 + 4, 0, ": ");
 10393  095F  0140               	movlb	0	; select bank0
 10394  0960  01AD               	clrf	OLED_print_xy@row
 10395  0961  30E7               	movlw	low (STR_11| (0+32768))
 10396  0962  00AE               	movwf	OLED_print_xy@s
 10397  0963  30BA               	movlw	high (STR_11| (0+32768))
 10398  0964  00AF               	movwf	OLED_print_xy@s+1
 10399  0965  300C               	movlw	12
 10400  0966  0141               	movlb	1	; select bank1
 10401  0967  00C7               	movwf	??_channelView^(0+128)
 10402  0968  0847               	movf	??_channelView^(0+128),w
 10403  0969  0140               	movlb	0	; select bank0
 10404  096A  00A9               	movwf	___bmul@multiplicand
 10405  096B  0141               	movlb	1	; select bank1
 10406  096C  0851               	movf	channelView@n^(0+128),w
 10407  096D  31B3  2330  3189   	fcall	___bmul
 10408  0970  3E04               	addlw	4
 10409  0971  31B4  2497  3189   	fcall	_OLED_print_xy
 10410                           
 10411                           ;menu.c: 87:    itoa(str, data.heater[n].lensDia, 2);
 10412  0974  30E6               	movlw	low _str
 10413  0975  0141               	movlb	1	; select bank1
 10414  0976  00B3               	movwf	itoa@str^(0+128)
 10415  0977  3001               	movlw	high _str
 10416  0978  00B4               	movwf	(itoa@str+1)^(0+128)
 10417  0979  301F               	movlw	31
 10418  097A  0140               	movlb	0	; select bank0
 10419  097B  00AF               	movwf	___wmul@multiplicand
 10420  097C  3000               	movlw	0
 10421  097D  00B0               	movwf	___wmul@multiplicand+1
 10422  097E  0141               	movlb	1	; select bank1
 10423  097F  0851               	movf	channelView@n^(0+128),w
 10424  0980  00C7               	movwf	??_channelView^(0+128)
 10425  0981  01C8               	clrf	(??_channelView^(0+128)+1)
 10426  0982  0847               	movf	??_channelView^(0+128),w
 10427  0983  0140               	movlb	0	; select bank0
 10428  0984  00AD               	movwf	___wmul@multiplier
 10429  0985  0141               	movlb	1	; select bank1
 10430  0986  0848               	movf	(??_channelView+1)^(0+128),w
 10431  0987  0140               	movlb	0	; select bank0
 10432  0988  00AE               	movwf	___wmul@multiplier+1
 10433  0989  31B3  2371  3189   	fcall	___wmul
 10434  098C  3089               	movlw	137
 10435  098D  0141               	movlb	1	; select bank1
 10436  098E  00C9               	movwf	(??_channelView+2)^(0+128)
 10437  098F  3027               	movlw	39
 10438  0990  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 10439  0991  0140               	movlb	0	; select bank0
 10440  0992  082D               	movf	?___wmul,w
 10441  0993  0141               	movlb	1	; select bank1
 10442  0994  0749               	addwf	(??_channelView+2)^(0+128),w
 10443  0995  0086               	movwf	6
 10444  0996  0140               	movlb	0	; select bank0
 10445  0997  082E               	movf	?___wmul+1,w
 10446  0998  0141               	movlb	1	; select bank1
 10447  0999  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 10448  099A  0087               	movwf	7
 10449  099B  3F40               	moviw [0]fsr1
 10450  099C  00A8               	movwf	___fltol@f1^(0+128)
 10451  099D  3F41               	moviw [1]fsr1
 10452  099E  00A9               	movwf	(___fltol@f1+1)^(0+128)
 10453  099F  3F42               	moviw [2]fsr1
 10454  09A0  00AA               	movwf	(___fltol@f1+2)^(0+128)
 10455  09A1  3F43               	moviw [3]fsr1
 10456  09A2  00AB               	movwf	(___fltol@f1+3)^(0+128)
 10457  09A3  31A8  20C0  3189   	fcall	___fltol
 10458  09A6  0141               	movlb	1	; select bank1
 10459  09A7  0828               	movf	?___fltol^(0+128),w
 10460  09A8  00CB               	movwf	(??_channelView+4)^(0+128)
 10461  09A9  084B               	movf	(??_channelView+4)^(0+128),w
 10462  09AA  00B5               	movwf	itoa@value^(0+128)
 10463  09AB  3002               	movlw	2
 10464  09AC  00CC               	movwf	(??_channelView+5)^(0+128)
 10465  09AD  084C               	movf	(??_channelView+5)^(0+128),w
 10466  09AE  00B6               	movwf	itoa@width^(0+128)
 10467  09AF  31A9  218F  3189   	fcall	_itoa
 10468                           
 10469                           ;menu.c: 88:    OLED_print_xy(n * 12 + 6, 0, str);
 10470  09B2  0140               	movlb	0	; select bank0
 10471  09B3  01AD               	clrf	OLED_print_xy@row
 10472  09B4  30E6               	movlw	low _str
 10473  09B5  00AE               	movwf	OLED_print_xy@s
 10474  09B6  3001               	movlw	high _str
 10475  09B7  00AF               	movwf	OLED_print_xy@s+1
 10476  09B8  300C               	movlw	12
 10477  09B9  0141               	movlb	1	; select bank1
 10478  09BA  00C7               	movwf	??_channelView^(0+128)
 10479  09BB  0847               	movf	??_channelView^(0+128),w
 10480  09BC  0140               	movlb	0	; select bank0
 10481  09BD  00A9               	movwf	___bmul@multiplicand
 10482  09BE  0141               	movlb	1	; select bank1
 10483  09BF  0851               	movf	channelView@n^(0+128),w
 10484  09C0  31B3  2330  3189   	fcall	___bmul
 10485  09C3  3E06               	addlw	6
 10486  09C4  31B4  2497  3189   	fcall	_OLED_print_xy
 10487                           
 10488                           ;menu.c: 89:    OLED_print_xy(n * 12 + 8, 0, "\" ");
 10489  09C7  0140               	movlb	0	; select bank0
 10490  09C8  01AD               	clrf	OLED_print_xy@row
 10491  09C9  30E4               	movlw	low (STR_12| (0+32768))
 10492  09CA  00AE               	movwf	OLED_print_xy@s
 10493  09CB  30BA               	movlw	high (STR_12| (0+32768))
 10494  09CC  00AF               	movwf	OLED_print_xy@s+1
 10495  09CD  300C               	movlw	12
 10496  09CE  0141               	movlb	1	; select bank1
 10497  09CF  00C7               	movwf	??_channelView^(0+128)
 10498  09D0  0847               	movf	??_channelView^(0+128),w
 10499  09D1  0140               	movlb	0	; select bank0
 10500  09D2  00A9               	movwf	___bmul@multiplicand
 10501  09D3  0141               	movlb	1	; select bank1
 10502  09D4  0851               	movf	channelView@n^(0+128),w
 10503  09D5  31B3  2330  3189   	fcall	___bmul
 10504  09D8  3E08               	addlw	8
 10505  09D9  31B4  2497  3189   	fcall	_OLED_print_xy
 10506                           
 10507                           ;menu.c: 90:   }
 10508  09DC  3001               	movlw	1
 10509  09DD  0141               	movlb	1	; select bank1
 10510  09DE  00C7               	movwf	??_channelView^(0+128)
 10511  09DF  0847               	movf	??_channelView^(0+128),w
 10512  09E0  07D1               	addwf	channelView@n^(0+128),f
 10513  09E1  2923               	goto	l7588
 10514  09E2                     l7606:	
 10515                           
 10516                           ;menu.c: 93:  for (n = 0; n < 4; n++) {
 10517  09E2  01D1               	clrf	channelView@n^(0+128)
 10518  09E3                     l7608:	
 10519  09E3  3004               	movlw	4
 10520  09E4  0251               	subwf	channelView@n^(0+128),w
 10521  09E5  1803               	btfsc	3,0
 10522  09E6  2BB6               	goto	l7646
 10523  09E7  2B74               	goto	l7640
 10524  09E8                     l7612:	
 10525                           
 10526                           ;menu.c: 96:    OLED_print_xy(n * 12 + 0, 1, "Please wait!");
 10527  09E8  0140               	movlb	0	; select bank0
 10528  09E9  01AD               	clrf	OLED_print_xy@row
 10529  09EA  0AAD               	incf	OLED_print_xy@row,f
 10530  09EB  30EE               	movlw	low (STR_13| (0+32768))
 10531  09EC  00AE               	movwf	OLED_print_xy@s
 10532  09ED  30B9               	movlw	high (STR_13| (0+32768))
 10533  09EE  00AF               	movwf	OLED_print_xy@s+1
 10534  09EF  300C               	movlw	12
 10535  09F0  0141               	movlb	1	; select bank1
 10536  09F1  00C7               	movwf	??_channelView^(0+128)
 10537  09F2  0847               	movf	??_channelView^(0+128),w
 10538  09F3  0140               	movlb	0	; select bank0
 10539  09F4  00A9               	movwf	___bmul@multiplicand
 10540  09F5  0141               	movlb	1	; select bank1
 10541  09F6  0851               	movf	channelView@n^(0+128),w
 10542  09F7  31B3  2330  3189   	fcall	___bmul
 10543  09FA  31B4  2497  3189   	fcall	_OLED_print_xy
 10544                           
 10545                           ;menu.c: 97:    break;
 10546  09FD  2BB0               	goto	l7642
 10547  09FE                     l7614:	
 10548                           
 10549                           ;menu.c: 99:    OLED_print_xy(n * 12 + 0, 1, "Disabled    ");
 10550  09FE  0140               	movlb	0	; select bank0
 10551  09FF  01AD               	clrf	OLED_print_xy@row
 10552  0A00  0AAD               	incf	OLED_print_xy@row,f
 10553  0A01  3093               	movlw	low (STR_14| (0+32768))
 10554  0A02  00AE               	movwf	OLED_print_xy@s
 10555  0A03  30B9               	movlw	high (STR_14| (0+32768))
 10556  0A04  00AF               	movwf	OLED_print_xy@s+1
 10557  0A05  300C               	movlw	12
 10558  0A06  0141               	movlb	1	; select bank1
 10559  0A07  00C7               	movwf	??_channelView^(0+128)
 10560  0A08  0847               	movf	??_channelView^(0+128),w
 10561  0A09  0140               	movlb	0	; select bank0
 10562  0A0A  00A9               	movwf	___bmul@multiplicand
 10563  0A0B  0141               	movlb	1	; select bank1
 10564  0A0C  0851               	movf	channelView@n^(0+128),w
 10565  0A0D  31B3  2330  3189   	fcall	___bmul
 10566  0A10  31B4  2497  3189   	fcall	_OLED_print_xy
 10567                           
 10568                           ;menu.c: 100:    break;
 10569  0A13  2BB0               	goto	l7642
 10570  0A14                     l7616:	
 10571                           
 10572                           ;menu.c: 102:    ftoa(str, data.heater[n].Patt, 4, 1);
 10573  0A14  0851               	movf	channelView@n^(0+128),w
 10574  0A15  00C7               	movwf	??_channelView^(0+128)
 10575  0A16  01C8               	clrf	(??_channelView^(0+128)+1)
 10576  0A17  0847               	movf	??_channelView^(0+128),w
 10577  0A18  0140               	movlb	0	; select bank0
 10578  0A19  00AD               	movwf	___wmul@multiplier
 10579  0A1A  0141               	movlb	1	; select bank1
 10580  0A1B  0848               	movf	(??_channelView+1)^(0+128),w
 10581  0A1C  0140               	movlb	0	; select bank0
 10582  0A1D  00AE               	movwf	___wmul@multiplier+1
 10583  0A1E  301F               	movlw	31
 10584  0A1F  00AF               	movwf	___wmul@multiplicand
 10585  0A20  3000               	movlw	0
 10586  0A21  00B0               	movwf	___wmul@multiplicand+1
 10587  0A22  31B3  2371  3189   	fcall	___wmul
 10588  0A25  3080               	movlw	128
 10589  0A26  0141               	movlb	1	; select bank1
 10590  0A27  00C9               	movwf	(??_channelView+2)^(0+128)
 10591  0A28  3027               	movlw	39
 10592  0A29  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 10593  0A2A  0140               	movlb	0	; select bank0
 10594  0A2B  082D               	movf	?___wmul,w
 10595  0A2C  0141               	movlb	1	; select bank1
 10596  0A2D  0749               	addwf	(??_channelView+2)^(0+128),w
 10597  0A2E  0086               	movwf	6
 10598  0A2F  0140               	movlb	0	; select bank0
 10599  0A30  082E               	movf	?___wmul+1,w
 10600  0A31  0141               	movlb	1	; select bank1
 10601  0A32  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 10602  0A33  0087               	movwf	7
 10603  0A34  3F40               	moviw [0]fsr1
 10604  0A35  00CD               	movwf	_channelView$2548^(0+128)
 10605  0A36  3F41               	moviw [1]fsr1
 10606  0A37  00CE               	movwf	(_channelView$2548+1)^(0+128)
 10607  0A38  3F42               	moviw [2]fsr1
 10608  0A39  00CF               	movwf	(_channelView$2548+2)^(0+128)
 10609  0A3A  3F43               	moviw [3]fsr1
 10610  0A3B  00D0               	movwf	(_channelView$2548+3)^(0+128)
 10611                           
 10612                           ;menu.c: 102:    ftoa(str, data.heater[n].Patt, 4, 1);
 10613  0A3C  0850               	movf	(_channelView$2548+3)^(0+128),w
 10614  0A3D  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10615  0A3E  084F               	movf	(_channelView$2548+2)^(0+128),w
 10616  0A3F  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10617  0A40  084E               	movf	(_channelView$2548+1)^(0+128),w
 10618  0A41  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10619  0A42  084D               	movf	_channelView$2548^(0+128),w
 10620  0A43  00B9               	movwf	ftoa@fValue^(0+128)
 10621  0A44  3004               	movlw	4
 10622  0A45  00C7               	movwf	??_channelView^(0+128)
 10623  0A46  0847               	movf	??_channelView^(0+128),w
 10624  0A47  00BD               	movwf	ftoa@width^(0+128)
 10625  0A48  01BE               	clrf	ftoa@prec^(0+128)
 10626  0A49  0ABE               	incf	ftoa@prec^(0+128),f
 10627  0A4A  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 10628  0A4B  31A2  2208  3189   	fcall	_ftoa
 10629                           
 10630                           ;menu.c: 104:    OLED_print_xy(n * 12 + 0, 1, str);
 10631  0A4E  0140               	movlb	0	; select bank0
 10632  0A4F  01AD               	clrf	OLED_print_xy@row
 10633  0A50  0AAD               	incf	OLED_print_xy@row,f
 10634  0A51  30E6               	movlw	low _str
 10635  0A52  00AE               	movwf	OLED_print_xy@s
 10636  0A53  3001               	movlw	high _str
 10637  0A54  00AF               	movwf	OLED_print_xy@s+1
 10638  0A55  300C               	movlw	12
 10639  0A56  0141               	movlb	1	; select bank1
 10640  0A57  00C7               	movwf	??_channelView^(0+128)
 10641  0A58  0847               	movf	??_channelView^(0+128),w
 10642  0A59  0140               	movlb	0	; select bank0
 10643  0A5A  00A9               	movwf	___bmul@multiplicand
 10644  0A5B  0141               	movlb	1	; select bank1
 10645  0A5C  0851               	movf	channelView@n^(0+128),w
 10646  0A5D  31B3  2330  3189   	fcall	___bmul
 10647  0A60  31B4  2497  3189   	fcall	_OLED_print_xy
 10648                           
 10649                           ;menu.c: 108:    if (data.heater[n].mode == MODE_AUTO) {
 10650  0A63  0141               	movlb	1	; select bank1
 10651  0A64  0851               	movf	channelView@n^(0+128),w
 10652  0A65  00C7               	movwf	??_channelView^(0+128)
 10653  0A66  01C8               	clrf	(??_channelView^(0+128)+1)
 10654  0A67  0847               	movf	??_channelView^(0+128),w
 10655  0A68  0140               	movlb	0	; select bank0
 10656  0A69  00AD               	movwf	___wmul@multiplier
 10657  0A6A  0141               	movlb	1	; select bank1
 10658  0A6B  0848               	movf	(??_channelView+1)^(0+128),w
 10659  0A6C  0140               	movlb	0	; select bank0
 10660  0A6D  00AE               	movwf	___wmul@multiplier+1
 10661  0A6E  301F               	movlw	31
 10662  0A6F  00AF               	movwf	___wmul@multiplicand
 10663  0A70  3000               	movlw	0
 10664  0A71  00B0               	movwf	___wmul@multiplicand+1
 10665  0A72  31B3  2371  3189   	fcall	___wmul
 10666  0A75  3091               	movlw	145
 10667  0A76  0141               	movlb	1	; select bank1
 10668  0A77  00C9               	movwf	(??_channelView+2)^(0+128)
 10669  0A78  3027               	movlw	39
 10670  0A79  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 10671  0A7A  0140               	movlb	0	; select bank0
 10672  0A7B  082D               	movf	?___wmul,w
 10673  0A7C  0141               	movlb	1	; select bank1
 10674  0A7D  0749               	addwf	(??_channelView+2)^(0+128),w
 10675  0A7E  0086               	movwf	6
 10676  0A7F  0140               	movlb	0	; select bank0
 10677  0A80  082E               	movf	?___wmul+1,w
 10678  0A81  0141               	movlb	1	; select bank1
 10679  0A82  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 10680  0A83  0087               	movwf	7
 10681  0A84  0301               	decf	1,w
 10682  0A85  1D03               	btfss	3,2
 10683  0A86  2B05               	goto	l7628
 10684                           
 10685                           ;menu.c: 109:     OLED_print_xy(n * 12 + 4, 1, " (");
 10686  0A87  0140               	movlb	0	; select bank0
 10687  0A88  01AD               	clrf	OLED_print_xy@row
 10688  0A89  0AAD               	incf	OLED_print_xy@row,f
 10689  0A8A  30EA               	movlw	low (STR_15| (0+32768))
 10690  0A8B  00AE               	movwf	OLED_print_xy@s
 10691  0A8C  30BA               	movlw	high (STR_15| (0+32768))
 10692  0A8D  00AF               	movwf	OLED_print_xy@s+1
 10693  0A8E  300C               	movlw	12
 10694  0A8F  0141               	movlb	1	; select bank1
 10695  0A90  00C7               	movwf	??_channelView^(0+128)
 10696  0A91  0847               	movf	??_channelView^(0+128),w
 10697  0A92  0140               	movlb	0	; select bank0
 10698  0A93  00A9               	movwf	___bmul@multiplicand
 10699  0A94  0141               	movlb	1	; select bank1
 10700  0A95  0851               	movf	channelView@n^(0+128),w
 10701  0A96  31B3  2330  3189   	fcall	___bmul
 10702  0A99  3E04               	addlw	4
 10703  0A9A  31B4  2497  3189   	fcall	_OLED_print_xy
 10704                           
 10705                           ;menu.c: 110:     ftoa(str, data.heater[n].Preq, 4,1);
 10706  0A9D  0141               	movlb	1	; select bank1
 10707  0A9E  0851               	movf	channelView@n^(0+128),w
 10708  0A9F  00C7               	movwf	??_channelView^(0+128)
 10709  0AA0  01C8               	clrf	(??_channelView^(0+128)+1)
 10710  0AA1  0847               	movf	??_channelView^(0+128),w
 10711  0AA2  0140               	movlb	0	; select bank0
 10712  0AA3  00AD               	movwf	___wmul@multiplier
 10713  0AA4  0141               	movlb	1	; select bank1
 10714  0AA5  0848               	movf	(??_channelView+1)^(0+128),w
 10715  0AA6  0140               	movlb	0	; select bank0
 10716  0AA7  00AE               	movwf	___wmul@multiplier+1
 10717  0AA8  301F               	movlw	31
 10718  0AA9  00AF               	movwf	___wmul@multiplicand
 10719  0AAA  3000               	movlw	0
 10720  0AAB  00B0               	movwf	___wmul@multiplicand+1
 10721  0AAC  31B3  2371  3189   	fcall	___wmul
 10722  0AAF  307C               	movlw	124
 10723  0AB0  0141               	movlb	1	; select bank1
 10724  0AB1  00C9               	movwf	(??_channelView+2)^(0+128)
 10725  0AB2  3027               	movlw	39
 10726  0AB3  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 10727  0AB4  0140               	movlb	0	; select bank0
 10728  0AB5  082D               	movf	?___wmul,w
 10729  0AB6  0141               	movlb	1	; select bank1
 10730  0AB7  0749               	addwf	(??_channelView+2)^(0+128),w
 10731  0AB8  0086               	movwf	6
 10732  0AB9  0140               	movlb	0	; select bank0
 10733  0ABA  082E               	movf	?___wmul+1,w
 10734  0ABB  0141               	movlb	1	; select bank1
 10735  0ABC  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 10736  0ABD  0087               	movwf	7
 10737  0ABE  3F40               	moviw [0]fsr1
 10738  0ABF  00CD               	movwf	_channelView$2548^(0+128)
 10739  0AC0  3F41               	moviw [1]fsr1
 10740  0AC1  00CE               	movwf	(_channelView$2548+1)^(0+128)
 10741  0AC2  3F42               	moviw [2]fsr1
 10742  0AC3  00CF               	movwf	(_channelView$2548+2)^(0+128)
 10743  0AC4  3F43               	moviw [3]fsr1
 10744  0AC5  00D0               	movwf	(_channelView$2548+3)^(0+128)
 10745                           
 10746                           ;menu.c: 110:     ftoa(str, data.heater[n].Preq, 4,1);
 10747  0AC6  0850               	movf	(_channelView$2548+3)^(0+128),w
 10748  0AC7  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10749  0AC8  084F               	movf	(_channelView$2548+2)^(0+128),w
 10750  0AC9  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10751  0ACA  084E               	movf	(_channelView$2548+1)^(0+128),w
 10752  0ACB  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10753  0ACC  084D               	movf	_channelView$2548^(0+128),w
 10754  0ACD  00B9               	movwf	ftoa@fValue^(0+128)
 10755  0ACE  3004               	movlw	4
 10756  0ACF  00C7               	movwf	??_channelView^(0+128)
 10757  0AD0  0847               	movf	??_channelView^(0+128),w
 10758  0AD1  00BD               	movwf	ftoa@width^(0+128)
 10759  0AD2  01BE               	clrf	ftoa@prec^(0+128)
 10760  0AD3  0ABE               	incf	ftoa@prec^(0+128),f
 10761  0AD4  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 10762  0AD5  31A2  2208  3189   	fcall	_ftoa
 10763                           
 10764                           ;menu.c: 111:     OLED_print_xy(n * 12 + 6, 1, str);
 10765  0AD8  0140               	movlb	0	; select bank0
 10766  0AD9  01AD               	clrf	OLED_print_xy@row
 10767  0ADA  0AAD               	incf	OLED_print_xy@row,f
 10768  0ADB  30E6               	movlw	low _str
 10769  0ADC  00AE               	movwf	OLED_print_xy@s
 10770  0ADD  3001               	movlw	high _str
 10771  0ADE  00AF               	movwf	OLED_print_xy@s+1
 10772  0ADF  300C               	movlw	12
 10773  0AE0  0141               	movlb	1	; select bank1
 10774  0AE1  00C7               	movwf	??_channelView^(0+128)
 10775  0AE2  0847               	movf	??_channelView^(0+128),w
 10776  0AE3  0140               	movlb	0	; select bank0
 10777  0AE4  00A9               	movwf	___bmul@multiplicand
 10778  0AE5  0141               	movlb	1	; select bank1
 10779  0AE6  0851               	movf	channelView@n^(0+128),w
 10780  0AE7  31B3  2330  3189   	fcall	___bmul
 10781  0AEA  3E06               	addlw	6
 10782  0AEB  31B4  2497  3189   	fcall	_OLED_print_xy
 10783                           
 10784                           ;menu.c: 112:     OLED_print_xy(n * 12 + 10, 1, "W)");
 10785  0AEE  0140               	movlb	0	; select bank0
 10786  0AEF  01AD               	clrf	OLED_print_xy@row
 10787  0AF0  0AAD               	incf	OLED_print_xy@row,f
 10788  0AF1  30ED               	movlw	low (STR_16| (0+32768))
 10789  0AF2  00AE               	movwf	OLED_print_xy@s
 10790  0AF3  30BA               	movlw	high (STR_16| (0+32768))
 10791  0AF4  00AF               	movwf	OLED_print_xy@s+1
 10792  0AF5  300C               	movlw	12
 10793  0AF6  0141               	movlb	1	; select bank1
 10794  0AF7  00C7               	movwf	??_channelView^(0+128)
 10795  0AF8  0847               	movf	??_channelView^(0+128),w
 10796  0AF9  0140               	movlb	0	; select bank0
 10797  0AFA  00A9               	movwf	___bmul@multiplicand
 10798  0AFB  0141               	movlb	1	; select bank1
 10799  0AFC  0851               	movf	channelView@n^(0+128),w
 10800  0AFD  31B3  2330  3189   	fcall	___bmul
 10801  0B00  3E0A               	addlw	10
 10802  0B01  31B4  2497  3189   	fcall	_OLED_print_xy
 10803                           
 10804                           ;menu.c: 113:    } else {
 10805  0B04  2BB0               	goto	l7642
 10806  0B05                     l7628:	
 10807                           
 10808                           ;menu.c: 114:     OLED_print_xy(n * 12 + 4, 1, "W manual");
 10809  0B05  0140               	movlb	0	; select bank0
 10810  0B06  01AD               	clrf	OLED_print_xy@row
 10811  0B07  0AAD               	incf	OLED_print_xy@row,f
 10812  0B08  3064               	movlw	low (STR_17| (0+32768))
 10813  0B09  00AE               	movwf	OLED_print_xy@s
 10814  0B0A  30BA               	movlw	high (STR_17| (0+32768))
 10815  0B0B  00AF               	movwf	OLED_print_xy@s+1
 10816  0B0C  300C               	movlw	12
 10817  0B0D  0141               	movlb	1	; select bank1
 10818  0B0E  00C7               	movwf	??_channelView^(0+128)
 10819  0B0F  0847               	movf	??_channelView^(0+128),w
 10820  0B10  0140               	movlb	0	; select bank0
 10821  0B11  00A9               	movwf	___bmul@multiplicand
 10822  0B12  0141               	movlb	1	; select bank1
 10823  0B13  0851               	movf	channelView@n^(0+128),w
 10824  0B14  31B3  2330  3189   	fcall	___bmul
 10825  0B17  3E04               	addlw	4
 10826  0B18  31B4  2497  3189   	fcall	_OLED_print_xy
 10827  0B1B  2BB0               	goto	l7642
 10828  0B1C                     l7630:	
 10829                           
 10830                           ;menu.c: 118:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
 10831  0B1C  0140               	movlb	0	; select bank0
 10832  0B1D  01AD               	clrf	OLED_print_xy@row
 10833  0B1E  0AAD               	incf	OLED_print_xy@row,f
 10834  0B1F  3008               	movlw	low (STR_18| (0+32768))
 10835  0B20  00AE               	movwf	OLED_print_xy@s
 10836  0B21  30BA               	movlw	high (STR_18| (0+32768))
 10837  0B22  00AF               	movwf	OLED_print_xy@s+1
 10838  0B23  300C               	movlw	12
 10839  0B24  0141               	movlb	1	; select bank1
 10840  0B25  00C7               	movwf	??_channelView^(0+128)
 10841  0B26  0847               	movf	??_channelView^(0+128),w
 10842  0B27  0140               	movlb	0	; select bank0
 10843  0B28  00A9               	movwf	___bmul@multiplicand
 10844  0B29  0141               	movlb	1	; select bank1
 10845  0B2A  0851               	movf	channelView@n^(0+128),w
 10846  0B2B  31B3  2330  3189   	fcall	___bmul
 10847  0B2E  31B4  2497  3189   	fcall	_OLED_print_xy
 10848                           
 10849                           ;menu.c: 119:    break;
 10850  0B31  2BB0               	goto	l7642
 10851  0B32                     l7632:	
 10852                           
 10853                           ;menu.c: 121:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
 10854  0B32  0140               	movlb	0	; select bank0
 10855  0B33  01AD               	clrf	OLED_print_xy@row
 10856  0B34  0AAD               	incf	OLED_print_xy@row,f
 10857  0B35  3086               	movlw	low (STR_19| (0+32768))
 10858  0B36  00AE               	movwf	OLED_print_xy@s
 10859  0B37  30B9               	movlw	high (STR_19| (0+32768))
 10860  0B38  00AF               	movwf	OLED_print_xy@s+1
 10861  0B39  300C               	movlw	12
 10862  0B3A  0141               	movlb	1	; select bank1
 10863  0B3B  00C7               	movwf	??_channelView^(0+128)
 10864  0B3C  0847               	movf	??_channelView^(0+128),w
 10865  0B3D  0140               	movlb	0	; select bank0
 10866  0B3E  00A9               	movwf	___bmul@multiplicand
 10867  0B3F  0141               	movlb	1	; select bank1
 10868  0B40  0851               	movf	channelView@n^(0+128),w
 10869  0B41  31B3  2330  3189   	fcall	___bmul
 10870  0B44  31B4  2497  3189   	fcall	_OLED_print_xy
 10871                           
 10872                           ;menu.c: 122:    break;
 10873  0B47  2BB0               	goto	l7642
 10874  0B48                     l7634:	
 10875                           
 10876                           ;menu.c: 124:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
 10877  0B48  0140               	movlb	0	; select bank0
 10878  0B49  01AD               	clrf	OLED_print_xy@row
 10879  0B4A  0AAD               	incf	OLED_print_xy@row,f
 10880  0B4B  30FB               	movlw	low (STR_20| (0+32768))
 10881  0B4C  00AE               	movwf	OLED_print_xy@s
 10882  0B4D  30B9               	movlw	high (STR_20| (0+32768))
 10883  0B4E  00AF               	movwf	OLED_print_xy@s+1
 10884  0B4F  300C               	movlw	12
 10885  0B50  0141               	movlb	1	; select bank1
 10886  0B51  00C7               	movwf	??_channelView^(0+128)
 10887  0B52  0847               	movf	??_channelView^(0+128),w
 10888  0B53  0140               	movlb	0	; select bank0
 10889  0B54  00A9               	movwf	___bmul@multiplicand
 10890  0B55  0141               	movlb	1	; select bank1
 10891  0B56  0851               	movf	channelView@n^(0+128),w
 10892  0B57  31B3  2330  3189   	fcall	___bmul
 10893  0B5A  31B4  2497  3189   	fcall	_OLED_print_xy
 10894                           
 10895                           ;menu.c: 125:    break;
 10896  0B5D  2BB0               	goto	l7642
 10897  0B5E                     l7636:	
 10898                           
 10899                           ;menu.c: 127:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
 10900  0B5E  0140               	movlb	0	; select bank0
 10901  0B5F  01AD               	clrf	OLED_print_xy@row
 10902  0B60  0AAD               	incf	OLED_print_xy@row,f
 10903  0B61  3022               	movlw	low (STR_21| (0+32768))
 10904  0B62  00AE               	movwf	OLED_print_xy@s
 10905  0B63  30BA               	movlw	high (STR_21| (0+32768))
 10906  0B64  00AF               	movwf	OLED_print_xy@s+1
 10907  0B65  300C               	movlw	12
 10908  0B66  0141               	movlb	1	; select bank1
 10909  0B67  00C7               	movwf	??_channelView^(0+128)
 10910  0B68  0847               	movf	??_channelView^(0+128),w
 10911  0B69  0140               	movlb	0	; select bank0
 10912  0B6A  00A9               	movwf	___bmul@multiplicand
 10913  0B6B  0141               	movlb	1	; select bank1
 10914  0B6C  0851               	movf	channelView@n^(0+128),w
 10915  0B6D  31B3  2330  3189   	fcall	___bmul
 10916  0B70  31B4  2497  3189   	fcall	_OLED_print_xy
 10917                           
 10918                           ;menu.c: 128:    break;
 10919  0B73  2BB0               	goto	l7642
 10920  0B74                     l7640:	
 10921  0B74  0851               	movf	channelView@n^(0+128),w
 10922  0B75  00C7               	movwf	??_channelView^(0+128)
 10923  0B76  01C8               	clrf	(??_channelView^(0+128)+1)
 10924  0B77  0847               	movf	??_channelView^(0+128),w
 10925  0B78  0140               	movlb	0	; select bank0
 10926  0B79  00AD               	movwf	___wmul@multiplier
 10927  0B7A  0141               	movlb	1	; select bank1
 10928  0B7B  0848               	movf	(??_channelView+1)^(0+128),w
 10929  0B7C  0140               	movlb	0	; select bank0
 10930  0B7D  00AE               	movwf	___wmul@multiplier+1
 10931  0B7E  301F               	movlw	31
 10932  0B7F  00AF               	movwf	___wmul@multiplicand
 10933  0B80  3000               	movlw	0
 10934  0B81  00B0               	movwf	___wmul@multiplicand+1
 10935  0B82  31B3  2371  3189   	fcall	___wmul
 10936  0B85  3092               	movlw	146
 10937  0B86  0141               	movlb	1	; select bank1
 10938  0B87  00C9               	movwf	(??_channelView+2)^(0+128)
 10939  0B88  3027               	movlw	39
 10940  0B89  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 10941  0B8A  0140               	movlb	0	; select bank0
 10942  0B8B  082D               	movf	?___wmul,w
 10943  0B8C  0141               	movlb	1	; select bank1
 10944  0B8D  0749               	addwf	(??_channelView+2)^(0+128),w
 10945  0B8E  0086               	movwf	6
 10946  0B8F  0140               	movlb	0	; select bank0
 10947  0B90  082E               	movf	?___wmul+1,w
 10948  0B91  0141               	movlb	1	; select bank1
 10949  0B92  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 10950  0B93  0087               	movwf	7
 10951  0B94  0801               	movf	1,w
 10952  0B95  00CB               	movwf	(??_channelView+4)^(0+128)
 10953  0B96  01CC               	clrf	((??_channelView+4)^(0+128)+1)
 10954                           
 10955                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 10956                           ; Switch size 1, requested type "simple"
 10957                           ; Number of cases is 1, Range of values is 0 to 0
 10958                           ; switch strategies available:
 10959                           ; Name         Instructions Cycles
 10960                           ; simple_byte            4     3 (average)
 10961                           ; direct_byte            8     6 (fixed)
 10962                           ; jumptable            260     6 (fixed)
 10963                           ;	Chosen strategy is simple_byte
 10964  0B97  084C               	movf	(??_channelView+5)^(0+128),w
 10965  0B98  3A00               	xorlw	0	; case 0
 10966  0B99  1903               	skipnz
 10967  0B9A  2B9C               	goto	l8862
 10968  0B9B  2B5E               	goto	l7636
 10969  0B9C                     l8862:	
 10970                           
 10971                           ; Switch size 1, requested type "simple"
 10972                           ; Number of cases is 6, Range of values is 0 to 5
 10973                           ; switch strategies available:
 10974                           ; Name         Instructions Cycles
 10975                           ; direct_byte           18     6 (fixed)
 10976                           ; simple_byte           19    10 (average)
 10977                           ; jumptable            260     6 (fixed)
 10978                           ;	Chosen strategy is simple_byte
 10979  0B9C  084B               	movf	(??_channelView+4)^(0+128),w
 10980  0B9D  3A00               	xorlw	0	; case 0
 10981  0B9E  1903               	skipnz
 10982  0B9F  29FE               	goto	l7614
 10983  0BA0  3A01               	xorlw	1	; case 1
 10984  0BA1  1903               	skipnz
 10985  0BA2  2A14               	goto	l7616
 10986  0BA3  3A03               	xorlw	3	; case 2
 10987  0BA4  1903               	skipnz
 10988  0BA5  2B1C               	goto	l7630
 10989  0BA6  3A01               	xorlw	1	; case 3
 10990  0BA7  1903               	skipnz
 10991  0BA8  2B32               	goto	l7632
 10992  0BA9  3A07               	xorlw	7	; case 4
 10993  0BAA  1903               	skipnz
 10994  0BAB  2B48               	goto	l7634
 10995  0BAC  3A01               	xorlw	1	; case 5
 10996  0BAD  1903               	skipnz
 10997  0BAE  29E8               	goto	l7612
 10998  0BAF  2B5E               	goto	l7636
 10999  0BB0                     l7642:	
 11000                           
 11001                           ;menu.c: 130:  }
 11002  0BB0  3001               	movlw	1
 11003  0BB1  0141               	movlb	1	; select bank1
 11004  0BB2  00C7               	movwf	??_channelView^(0+128)
 11005  0BB3  0847               	movf	??_channelView^(0+128),w
 11006  0BB4  07D1               	addwf	channelView@n^(0+128),f
 11007  0BB5  29E3               	goto	l7608
 11008  0BB6                     l7646:	
 11009                           
 11010                           ;menu.c: 131:  page = paging(page, 4);
 11011  0BB6  3004               	movlw	4
 11012  0BB7  00C7               	movwf	??_channelView^(0+128)
 11013  0BB8  0847               	movf	??_channelView^(0+128),w
 11014  0BB9  0140               	movlb	0	; select bank0
 11015  0BBA  00A7               	movwf	paging@lastPage
 11016  0BBB  0142               	movlb	2	; select bank2
 11017  0BBC  0868               	movf	channelView@page^(0+256),w
 11018  0BBD  3187  278D         	fcall	_paging
 11019  0BBF  0141               	movlb	1	; select bank1
 11020  0BC0  00C8               	movwf	(??_channelView+1)^(0+128)
 11021  0BC1  0848               	movf	(??_channelView+1)^(0+128),w
 11022  0BC2  0142               	movlb	2	; select bank2
 11023  0BC3  00E8               	movwf	channelView@page^(0+256)
 11024                           
 11025                           ;menu.c: 132:  selectedChannel = page;
 11026  0BC4  0868               	movf	channelView@page^(0+256),w
 11027  0BC5  0141               	movlb	1	; select bank1
 11028  0BC6  00C7               	movwf	??_channelView^(0+128)
 11029  0BC7  0847               	movf	??_channelView^(0+128),w
 11030  0BC8  00EB               	movwf	_selectedChannel^(0+128)
 11031                           
 11032                           ;menu.c: 134:  return page;
 11033  0BC9  0142               	movlb	2	; select bank2
 11034  0BCA  0868               	movf	channelView@page^(0+256),w
 11035  0BCB  0008               	return
 11036  0BCC                     __end_of_channelView:	
 11037                           
 11038                           	psect	text13
 11039  105A                     __ptext13:	
 11040 ;; *************** function _statusView *****************
 11041 ;; Defined at:
 11042 ;;		line 16 in file "menu.c"
 11043 ;; Parameters:    Size  Location     Type
 11044 ;;		None
 11045 ;; Auto vars:     Size  Location     Type
 11046 ;;		None
 11047 ;; Return value:  Size  Location     Type
 11048 ;;                  1    wreg      unsigned char 
 11049 ;; Registers used:
 11050 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11051 ;; Tracked objects:
 11052 ;;		On entry : 0/0
 11053 ;;		On exit  : 0/0
 11054 ;;		Unchanged: 0/0
 11055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11058 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11059 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11060 ;;Total ram usage:        2 bytes
 11061 ;; Hardware stack levels used:    1
 11062 ;; Hardware stack levels required when called:    7
 11063 ;; This function calls:
 11064 ;;		_OLED_print_xy
 11065 ;;		_ftoa
 11066 ;;		_itoa
 11067 ;;		_paging
 11068 ;;		_returnToPage
 11069 ;; This function is called by:
 11070 ;;		_menu
 11071 ;; This function uses a non-reentrant model
 11072 ;;
 11073                           
 11074                           
 11075                           ;psect for function _statusView
 11076  105A                     _statusView:	
 11077                           
 11078                           ;menu.c: 18:  static uint8_t page = 0;;menu.c: 19:  static uint8_t prevSensorStat = 1;;m
      +                          enu.c: 22:  if (prevSensorStat != data.status.SENSOR_OK) {
 11079                           
 11080                           ;incstack = 0
 11081                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11082  105A  3073               	movlw	115
 11083  105B  0086               	movwf	6
 11084  105C  3027               	movlw	39
 11085  105D  0087               	movwf	7
 11086  105E  0C01               	rrf	1,w
 11087  105F  0141               	movlb	1	; select bank1
 11088  1060  00C7               	movwf	??_statusView^(0+128)
 11089  1061  0CC7               	rrf	??_statusView^(0+128),f
 11090  1062  0C47               	rrf	??_statusView^(0+128),w
 11091  1063  3901               	andlw	1
 11092  1064  0142               	movlb	2	; select bank2
 11093  1065  066F               	xorwf	statusView@prevSensorStat^(0+256),w
 11094  1066  1903               	skipnz
 11095  1067  2881               	goto	l7528
 11096                           
 11097                           ;menu.c: 23:   prevSensorStat = data.status.SENSOR_OK;
 11098  1068  3073               	movlw	115
 11099  1069  0086               	movwf	6
 11100  106A  3027               	movlw	39
 11101  106B  0087               	movwf	7
 11102  106C  3000               	movlw	0
 11103  106D  1981               	btfsc	1,3
 11104  106E  3001               	movlw	1
 11105  106F  00EF               	movwf	statusView@prevSensorStat^(0+256)
 11106                           
 11107                           ;menu.c: 25:   if (data.status.SENSOR_OK)
 11108  1070  3073               	movlw	115
 11109  1071  0086               	movwf	6
 11110  1072  3027               	movlw	39
 11111  1073  0087               	movwf	7
 11112  1074  1D81               	btfss	1,3
 11113  1075  2878               	goto	l7524
 11114                           
 11115                           ;menu.c: 26:    page = 0;
 11116  1076  01E9               	clrf	statusView@page^(0+256)
 11117  1077  287E               	goto	l7526
 11118  1078                     l7524:	
 11119                           
 11120                           ;menu.c: 28:    page = 3;
 11121  1078  3003               	movlw	3
 11122  1079  0141               	movlb	1	; select bank1
 11123  107A  00C7               	movwf	??_statusView^(0+128)
 11124  107B  0847               	movf	??_statusView^(0+128),w
 11125  107C  0142               	movlb	2	; select bank2
 11126  107D  00E9               	movwf	statusView@page^(0+256)
 11127  107E                     l7526:	
 11128                           
 11129                           ;menu.c: 29:   g_screenRefresh = 1;
 11130  107E  0141               	movlb	1	; select bank1
 11131  107F  01ED               	clrf	_g_screenRefresh^(0+128)
 11132  1080  0AED               	incf	_g_screenRefresh^(0+128),f
 11133  1081                     l7528:	
 11134                           
 11135                           ;menu.c: 32:  returnToPage(page);
 11136  1081  0142               	movlb	2	; select bank2
 11137  1082  0869               	movf	statusView@page^(0+256),w
 11138  1083  31B4  24C9  3190   	fcall	_returnToPage
 11139                           
 11140                           ;menu.c: 33:  if (g_screenRefresh) {
 11141  1086  0141               	movlb	1	; select bank1
 11142  1087  086D               	movf	_g_screenRefresh^(0+128),w
 11143  1088  1903               	btfsc	3,2
 11144  1089  289F               	goto	l7534
 11145                           
 11146                           ;menu.c: 34:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   PowerVers
      +                          ion:");
 11147  108A  0140               	movlb	0	; select bank0
 11148  108B  01AD               	clrf	OLED_print_xy@row
 11149  108C  3066               	movlw	low (STR_1| (0+32768))
 11150  108D  00AE               	movwf	OLED_print_xy@s
 11151  108E  30B0               	movlw	high (STR_1| (0+32768))
 11152  108F  00AF               	movwf	OLED_print_xy@s+1
 11153  1090  3000               	movlw	0
 11154  1091  31B4  2497  3190   	fcall	_OLED_print_xy
 11155                           
 11156                           ;menu.c: 35:   OLED_print_xy(4 * 12, 1, "Sensor:");
 11157  1094  0140               	movlb	0	; select bank0
 11158  1095  01AD               	clrf	OLED_print_xy@row
 11159  1096  0AAD               	incf	OLED_print_xy@row,f
 11160  1097  309D               	movlw	low (STR_2| (0+32768))
 11161  1098  00AE               	movwf	OLED_print_xy@s
 11162  1099  30BA               	movlw	high (STR_2| (0+32768))
 11163  109A  00AF               	movwf	OLED_print_xy@s+1
 11164  109B  3030               	movlw	48
 11165  109C  31B4  2497  3190   	fcall	_OLED_print_xy
 11166  109F                     l7534:	
 11167                           
 11168                           ;menu.c: 37:  if (data.status.AUX_SENSOR_OK) {
 11169  109F  3073               	movlw	115
 11170  10A0  0086               	movwf	6
 11171  10A1  3027               	movlw	39
 11172  10A2  0087               	movwf	7
 11173  10A3  1E01               	btfss	1,4
 11174  10A4  28FD               	goto	l7546
 11175                           
 11176                           ;menu.c: 38:   ftoa(str, data.tempC, 5, 1);
 11177  10A5  304A               	movlw	74
 11178  10A6  0086               	movwf	6
 11179  10A7  3027               	movlw	39
 11180  10A8  0087               	movwf	7
 11181  10A9  3F40               	moviw [0]fsr1
 11182  10AA  0141               	movlb	1	; select bank1
 11183  10AB  00B9               	movwf	ftoa@fValue^(0+128)
 11184  10AC  3F41               	moviw [1]fsr1
 11185  10AD  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11186  10AE  3F42               	moviw [2]fsr1
 11187  10AF  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11188  10B0  3F43               	moviw [3]fsr1
 11189  10B1  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11190  10B2  3005               	movlw	5
 11191  10B3  00C7               	movwf	??_statusView^(0+128)
 11192  10B4  0847               	movf	??_statusView^(0+128),w
 11193  10B5  00BD               	movwf	ftoa@width^(0+128)
 11194  10B6  01BE               	clrf	ftoa@prec^(0+128)
 11195  10B7  0ABE               	incf	ftoa@prec^(0+128),f
 11196  10B8  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11197  10B9  31A2  2208  3190   	fcall	_ftoa
 11198                           
 11199                           ;menu.c: 39:   OLED_print_xy(0, 1, str);
 11200  10BC  0140               	movlb	0	; select bank0
 11201  10BD  01AD               	clrf	OLED_print_xy@row
 11202  10BE  0AAD               	incf	OLED_print_xy@row,f
 11203  10BF  30E6               	movlw	low _str
 11204  10C0  00AE               	movwf	OLED_print_xy@s
 11205  10C1  3001               	movlw	high _str
 11206  10C2  00AF               	movwf	OLED_print_xy@s+1
 11207  10C3  3000               	movlw	0
 11208  10C4  31B4  2497  3190   	fcall	_OLED_print_xy
 11209                           
 11210                           ;menu.c: 40:   OLED_print_xy(5, 1, "\001 \002");
 11211  10C7  0140               	movlb	0	; select bank0
 11212  10C8  01AD               	clrf	OLED_print_xy@row
 11213  10C9  0AAD               	incf	OLED_print_xy@row,f
 11214  10CA  30D2               	movlw	low (STR_3| (0+32768))
 11215  10CB  00AE               	movwf	OLED_print_xy@s
 11216  10CC  30BA               	movlw	high (STR_3| (0+32768))
 11217  10CD  00AF               	movwf	OLED_print_xy@s+1
 11218  10CE  3005               	movlw	5
 11219  10CF  31B4  2497  3190   	fcall	_OLED_print_xy
 11220                           
 11221                           ;menu.c: 41:   ftoa(str, data.tempAux, 3, 0);
 11222  10D2  304A               	movlw	74
 11223  10D3  0086               	movwf	6
 11224  10D4  3027               	movlw	39
 11225  10D5  0087               	movwf	7
 11226  10D6  314D               	addfsr 1,13
 11227  10D7  3F40               	moviw [0]fsr1
 11228  10D8  0141               	movlb	1	; select bank1
 11229  10D9  00B9               	movwf	ftoa@fValue^(0+128)
 11230  10DA  3F41               	moviw [1]fsr1
 11231  10DB  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11232  10DC  3F42               	moviw [2]fsr1
 11233  10DD  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11234  10DE  3F43               	moviw [3]fsr1
 11235  10DF  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11236  10E0  3003               	movlw	3
 11237  10E1  00C7               	movwf	??_statusView^(0+128)
 11238  10E2  0847               	movf	??_statusView^(0+128),w
 11239  10E3  00BD               	movwf	ftoa@width^(0+128)
 11240  10E4  01BE               	clrf	ftoa@prec^(0+128)
 11241  10E5  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11242  10E6  31A2  2208  3190   	fcall	_ftoa
 11243                           
 11244                           ;menu.c: 42:   OLED_print_xy(8, 1, str);
 11245  10E9  0140               	movlb	0	; select bank0
 11246  10EA  01AD               	clrf	OLED_print_xy@row
 11247  10EB  0AAD               	incf	OLED_print_xy@row,f
 11248  10EC  30E6               	movlw	low _str
 11249  10ED  00AE               	movwf	OLED_print_xy@s
 11250  10EE  3001               	movlw	high _str
 11251  10EF  00AF               	movwf	OLED_print_xy@s+1
 11252  10F0  3008               	movlw	8
 11253  10F1  31B4  2497  3190   	fcall	_OLED_print_xy
 11254                           
 11255                           ;menu.c: 43:   OLED_print_xy(11, 1, "\001");
 11256  10F4  0140               	movlb	0	; select bank0
 11257  10F5  01AD               	clrf	OLED_print_xy@row
 11258  10F6  0AAD               	incf	OLED_print_xy@row,f
 11259  10F7  30F0               	movlw	low (STR_4| (0+32768))
 11260  10F8  00AE               	movwf	OLED_print_xy@s
 11261  10F9  30BA               	movlw	high (STR_4| (0+32768))
 11262  10FA  00AF               	movwf	OLED_print_xy@s+1
 11263  10FB  300B               	movlw	11
 11264  10FC  2927               	goto	L5
 11265  10FD                     l7546:	
 11266                           ;menu.c: 44:  } else {
 11267                           
 11268                           
 11269                           ;menu.c: 45:   ftoa(str, data.tempC, 5, 1);
 11270  10FD  304A               	movlw	74
 11271  10FE  0086               	movwf	6
 11272  10FF  3027               	movlw	39
 11273  1100  0087               	movwf	7
 11274  1101  3F40               	moviw [0]fsr1
 11275  1102  0141               	movlb	1	; select bank1
 11276  1103  00B9               	movwf	ftoa@fValue^(0+128)
 11277  1104  3F41               	moviw [1]fsr1
 11278  1105  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11279  1106  3F42               	moviw [2]fsr1
 11280  1107  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11281  1108  3F43               	moviw [3]fsr1
 11282  1109  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11283  110A  3005               	movlw	5
 11284  110B  00C7               	movwf	??_statusView^(0+128)
 11285  110C  0847               	movf	??_statusView^(0+128),w
 11286  110D  00BD               	movwf	ftoa@width^(0+128)
 11287  110E  01BE               	clrf	ftoa@prec^(0+128)
 11288  110F  0ABE               	incf	ftoa@prec^(0+128),f
 11289  1110  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11290  1111  31A2  2208  3190   	fcall	_ftoa
 11291                           
 11292                           ;menu.c: 46:   OLED_print_xy(0, 1, str);
 11293  1114  0140               	movlb	0	; select bank0
 11294  1115  01AD               	clrf	OLED_print_xy@row
 11295  1116  0AAD               	incf	OLED_print_xy@row,f
 11296  1117  30E6               	movlw	low _str
 11297  1118  00AE               	movwf	OLED_print_xy@s
 11298  1119  3001               	movlw	high _str
 11299  111A  00AF               	movwf	OLED_print_xy@s+1
 11300  111B  3000               	movlw	0
 11301  111C  31B4  2497  3190   	fcall	_OLED_print_xy
 11302                           
 11303                           ;menu.c: 47:   OLED_print_xy(5, 1, "\001      ");
 11304  111F  0140               	movlb	0	; select bank0
 11305  1120  01AD               	clrf	OLED_print_xy@row
 11306  1121  0AAD               	incf	OLED_print_xy@row,f
 11307  1122  307D               	movlw	low (STR_5| (0+32768))
 11308  1123  00AE               	movwf	OLED_print_xy@s
 11309  1124  30BA               	movlw	high (STR_5| (0+32768))
 11310  1125  00AF               	movwf	OLED_print_xy@s+1
 11311  1126  3005               	movlw	5
 11312  1127                     L5:	
 11313  1127  31B4  2497  3190   	fcall	_OLED_print_xy
 11314                           
 11315                           ;menu.c: 49:  ftoa(str, data.relHum, 5, 1);
 11316                           
 11317                           ;menu.c: 48:  }
 11318  112A  304A               	movlw	74
 11319  112B  0086               	movwf	6
 11320  112C  3027               	movlw	39
 11321  112D  0087               	movwf	7
 11322  112E  3144               	addfsr 1,4
 11323  112F  3F40               	moviw [0]fsr1
 11324  1130  0141               	movlb	1	; select bank1
 11325  1131  00B9               	movwf	ftoa@fValue^(0+128)
 11326  1132  3F41               	moviw [1]fsr1
 11327  1133  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11328  1134  3F42               	moviw [2]fsr1
 11329  1135  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11330  1136  3F43               	moviw [3]fsr1
 11331  1137  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11332  1138  3005               	movlw	5
 11333  1139  00C7               	movwf	??_statusView^(0+128)
 11334  113A  0847               	movf	??_statusView^(0+128),w
 11335  113B  00BD               	movwf	ftoa@width^(0+128)
 11336  113C  01BE               	clrf	ftoa@prec^(0+128)
 11337  113D  0ABE               	incf	ftoa@prec^(0+128),f
 11338  113E  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11339  113F  31A2  2208  3190   	fcall	_ftoa
 11340                           
 11341                           ;menu.c: 50:  OLED_print_xy(12, 1, str);
 11342  1142  0140               	movlb	0	; select bank0
 11343  1143  01AD               	clrf	OLED_print_xy@row
 11344  1144  0AAD               	incf	OLED_print_xy@row,f
 11345  1145  30E6               	movlw	low _str
 11346  1146  00AE               	movwf	OLED_print_xy@s
 11347  1147  3001               	movlw	high _str
 11348  1148  00AF               	movwf	OLED_print_xy@s+1
 11349  1149  300C               	movlw	12
 11350  114A  31B4  2497  3190   	fcall	_OLED_print_xy
 11351                           
 11352                           ;menu.c: 51:  OLED_print_xy(12 + 5, 1, "%     ");
 11353  114D  0140               	movlb	0	; select bank0
 11354  114E  01AD               	clrf	OLED_print_xy@row
 11355  114F  0AAD               	incf	OLED_print_xy@row,f
 11356  1150  30BA               	movlw	low (STR_6| (0+32768))
 11357  1151  00AE               	movwf	OLED_print_xy@s
 11358  1152  30BA               	movlw	high (STR_6| (0+32768))
 11359  1153  00AF               	movwf	OLED_print_xy@s+1
 11360  1154  3011               	movlw	17
 11361  1155  31B4  2497  3190   	fcall	_OLED_print_xy
 11362                           
 11363                           ;menu.c: 52:  ftoa(str, data.dewPointC, 5, 1);
 11364  1158  304A               	movlw	74
 11365  1159  0086               	movwf	6
 11366  115A  3027               	movlw	39
 11367  115B  0087               	movwf	7
 11368  115C  3148               	addfsr 1,8
 11369  115D  3F40               	moviw [0]fsr1
 11370  115E  0141               	movlb	1	; select bank1
 11371  115F  00B9               	movwf	ftoa@fValue^(0+128)
 11372  1160  3F41               	moviw [1]fsr1
 11373  1161  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11374  1162  3F42               	moviw [2]fsr1
 11375  1163  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11376  1164  3F43               	moviw [3]fsr1
 11377  1165  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11378  1166  3005               	movlw	5
 11379  1167  00C7               	movwf	??_statusView^(0+128)
 11380  1168  0847               	movf	??_statusView^(0+128),w
 11381  1169  00BD               	movwf	ftoa@width^(0+128)
 11382  116A  01BE               	clrf	ftoa@prec^(0+128)
 11383  116B  0ABE               	incf	ftoa@prec^(0+128),f
 11384  116C  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11385  116D  31A2  2208  3190   	fcall	_ftoa
 11386                           
 11387                           ;menu.c: 53:  OLED_print_xy(2 * 12, 1, str);
 11388  1170  0140               	movlb	0	; select bank0
 11389  1171  01AD               	clrf	OLED_print_xy@row
 11390  1172  0AAD               	incf	OLED_print_xy@row,f
 11391  1173  30E6               	movlw	low _str
 11392  1174  00AE               	movwf	OLED_print_xy@s
 11393  1175  3001               	movlw	high _str
 11394  1176  00AF               	movwf	OLED_print_xy@s+1
 11395  1177  3018               	movlw	24
 11396  1178  31B4  2497  3190   	fcall	_OLED_print_xy
 11397                           
 11398                           ;menu.c: 54:  OLED_print_xy(2 * 12 + 5, 1, "\001      ");
 11399  117B  0140               	movlb	0	; select bank0
 11400  117C  01AD               	clrf	OLED_print_xy@row
 11401  117D  0AAD               	incf	OLED_print_xy@row,f
 11402  117E  307D               	movlw	low (STR_5| (0+32768))
 11403  117F  00AE               	movwf	OLED_print_xy@s
 11404  1180  30BA               	movlw	high (STR_5| (0+32768))
 11405  1181  00AF               	movwf	OLED_print_xy@s+1
 11406  1182  301D               	movlw	29
 11407  1183  31B4  2497  3190   	fcall	_OLED_print_xy
 11408                           
 11409                           ;menu.c: 55:  ftoa(str, data.voltage, 4, 1);
 11410  1186  304A               	movlw	74
 11411  1187  0086               	movwf	6
 11412  1188  3027               	movlw	39
 11413  1189  0087               	movwf	7
 11414  118A  3151               	addfsr 1,17
 11415  118B  3F40               	moviw [0]fsr1
 11416  118C  0141               	movlb	1	; select bank1
 11417  118D  00B9               	movwf	ftoa@fValue^(0+128)
 11418  118E  3F41               	moviw [1]fsr1
 11419  118F  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11420  1190  3F42               	moviw [2]fsr1
 11421  1191  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11422  1192  3F43               	moviw [3]fsr1
 11423  1193  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11424  1194  3004               	movlw	4
 11425  1195  00C7               	movwf	??_statusView^(0+128)
 11426  1196  0847               	movf	??_statusView^(0+128),w
 11427  1197  00BD               	movwf	ftoa@width^(0+128)
 11428  1198  01BE               	clrf	ftoa@prec^(0+128)
 11429  1199  0ABE               	incf	ftoa@prec^(0+128),f
 11430  119A  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11431  119B  31A2  2208  3190   	fcall	_ftoa
 11432                           
 11433                           ;menu.c: 56:  OLED_print_xy(3 * 12, 1, str);
 11434  119E  0140               	movlb	0	; select bank0
 11435  119F  01AD               	clrf	OLED_print_xy@row
 11436  11A0  0AAD               	incf	OLED_print_xy@row,f
 11437  11A1  30E6               	movlw	low _str
 11438  11A2  00AE               	movwf	OLED_print_xy@s
 11439  11A3  3001               	movlw	high _str
 11440  11A4  00AF               	movwf	OLED_print_xy@s+1
 11441  11A5  3024               	movlw	36
 11442  11A6  31B4  2497  3190   	fcall	_OLED_print_xy
 11443                           
 11444                           ;menu.c: 57:  OLED_print_xy(3 * 12 + 4, 1, "V  ");
 11445  11A9  0140               	movlb	0	; select bank0
 11446  11AA  01AD               	clrf	OLED_print_xy@row
 11447  11AB  0AAD               	incf	OLED_print_xy@row,f
 11448  11AC  30D6               	movlw	low (STR_8| (0+32768))
 11449  11AD  00AE               	movwf	OLED_print_xy@s
 11450  11AE  30BA               	movlw	high (STR_8| (0+32768))
 11451  11AF  00AF               	movwf	OLED_print_xy@s+1
 11452  11B0  3028               	movlw	40
 11453  11B1  31B4  2497  3190   	fcall	_OLED_print_xy
 11454                           
 11455                           ;menu.c: 58:  ftoa(str, data.power, 4, 1);
 11456  11B4  304A               	movlw	74
 11457  11B5  0086               	movwf	6
 11458  11B6  3027               	movlw	39
 11459  11B7  0087               	movwf	7
 11460  11B8  3159               	addfsr 1,25
 11461  11B9  3F40               	moviw [0]fsr1
 11462  11BA  0141               	movlb	1	; select bank1
 11463  11BB  00B9               	movwf	ftoa@fValue^(0+128)
 11464  11BC  3F41               	moviw [1]fsr1
 11465  11BD  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11466  11BE  3F42               	moviw [2]fsr1
 11467  11BF  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11468  11C0  3F43               	moviw [3]fsr1
 11469  11C1  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11470  11C2  3004               	movlw	4
 11471  11C3  00C7               	movwf	??_statusView^(0+128)
 11472  11C4  0847               	movf	??_statusView^(0+128),w
 11473  11C5  00BD               	movwf	ftoa@width^(0+128)
 11474  11C6  01BE               	clrf	ftoa@prec^(0+128)
 11475  11C7  0ABE               	incf	ftoa@prec^(0+128),f
 11476  11C8  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11477  11C9  31A2  2208  3190   	fcall	_ftoa
 11478                           
 11479                           ;menu.c: 59:  OLED_print_xy(3 * 12 + 7, 1, str);
 11480  11CC  0140               	movlb	0	; select bank0
 11481  11CD  01AD               	clrf	OLED_print_xy@row
 11482  11CE  0AAD               	incf	OLED_print_xy@row,f
 11483  11CF  30E6               	movlw	low _str
 11484  11D0  00AE               	movwf	OLED_print_xy@s
 11485  11D1  3001               	movlw	high _str
 11486  11D2  00AF               	movwf	OLED_print_xy@s+1
 11487  11D3  302B               	movlw	43
 11488  11D4  31B4  2497  3190   	fcall	_OLED_print_xy
 11489                           
 11490                           ;menu.c: 60:  OLED_print_xy(3 * 12 + 11, 1, "W");
 11491  11D7  0140               	movlb	0	; select bank0
 11492  11D8  01AD               	clrf	OLED_print_xy@row
 11493  11D9  0AAD               	incf	OLED_print_xy@row,f
 11494  11DA  3036               	movlw	low ((STR_79+11)| (0+32768))
 11495  11DB  00AE               	movwf	OLED_print_xy@s
 11496  11DC  30B9               	movlw	high ((STR_79+11)| (0+32768))
 11497  11DD  00AF               	movwf	OLED_print_xy@s+1
 11498  11DE  302F               	movlw	47
 11499  11DF  31B4  2497  3190   	fcall	_OLED_print_xy
 11500                           
 11501                           ;menu.c: 61:  itoa(str, 1, 3);
 11502  11E2  30E6               	movlw	low _str
 11503  11E3  0141               	movlb	1	; select bank1
 11504  11E4  00B3               	movwf	itoa@str^(0+128)
 11505  11E5  3001               	movlw	high _str
 11506  11E6  00B4               	movwf	(itoa@str+1)^(0+128)
 11507  11E7  01B5               	clrf	itoa@value^(0+128)
 11508  11E8  0AB5               	incf	itoa@value^(0+128),f
 11509  11E9  3003               	movlw	3
 11510  11EA  00C7               	movwf	??_statusView^(0+128)
 11511  11EB  0847               	movf	??_statusView^(0+128),w
 11512  11EC  00B6               	movwf	itoa@width^(0+128)
 11513  11ED  31A9  218F  3190   	fcall	_itoa
 11514                           
 11515                           ;menu.c: 62:  OLED_print_xy(4 * 12 + 8, 0, str);
 11516  11F0  0140               	movlb	0	; select bank0
 11517  11F1  01AD               	clrf	OLED_print_xy@row
 11518  11F2  30E6               	movlw	low _str
 11519  11F3  00AE               	movwf	OLED_print_xy@s
 11520  11F4  3001               	movlw	high _str
 11521  11F5  00AF               	movwf	OLED_print_xy@s+1
 11522  11F6  3038               	movlw	56
 11523  11F7  31B4  2497  3190   	fcall	_OLED_print_xy
 11524                           
 11525                           ;menu.c: 64:  if (data.status.SENSOR_OK) {
 11526  11FA  3073               	movlw	115
 11527  11FB  0086               	movwf	6
 11528  11FC  3027               	movlw	39
 11529  11FD  0087               	movwf	7
 11530  11FE  1D81               	btfss	1,3
 11531  11FF  2A2F               	goto	l7578
 11532                           
 11533                           ;menu.c: 65:   itoa(str, data.sensorVersion, 3);
 11534  1200  30E6               	movlw	low _str
 11535  1201  0141               	movlb	1	; select bank1
 11536  1202  00B3               	movwf	itoa@str^(0+128)
 11537  1203  3001               	movlw	high _str
 11538  1204  00B4               	movwf	(itoa@str+1)^(0+128)
 11539  1205  304A               	movlw	74
 11540  1206  0086               	movwf	6
 11541  1207  3027               	movlw	39
 11542  1208  0087               	movwf	7
 11543  1209  314C               	addfsr 1,12
 11544  120A  0801               	movf	1,w
 11545  120B  00C7               	movwf	??_statusView^(0+128)
 11546  120C  0847               	movf	??_statusView^(0+128),w
 11547  120D  00B5               	movwf	itoa@value^(0+128)
 11548  120E  3003               	movlw	3
 11549  120F  00C8               	movwf	(??_statusView+1)^(0+128)
 11550  1210  0848               	movf	(??_statusView+1)^(0+128),w
 11551  1211  00B6               	movwf	itoa@width^(0+128)
 11552  1212  31A9  218F  3190   	fcall	_itoa
 11553                           
 11554                           ;menu.c: 66:   OLED_print_xy(4 * 12 + 8, 1, str);
 11555  1215  0140               	movlb	0	; select bank0
 11556  1216  01AD               	clrf	OLED_print_xy@row
 11557  1217  0AAD               	incf	OLED_print_xy@row,f
 11558  1218  30E6               	movlw	low _str
 11559  1219  00AE               	movwf	OLED_print_xy@s
 11560  121A  3001               	movlw	high _str
 11561  121B  00AF               	movwf	OLED_print_xy@s+1
 11562  121C  3038               	movlw	56
 11563  121D  31B4  2497  3190   	fcall	_OLED_print_xy
 11564                           
 11565                           ;menu.c: 67:   page = paging(page, 5);
 11566  1220  3005               	movlw	5
 11567  1221  0141               	movlb	1	; select bank1
 11568  1222  00C7               	movwf	??_statusView^(0+128)
 11569  1223  0847               	movf	??_statusView^(0+128),w
 11570  1224  0140               	movlb	0	; select bank0
 11571  1225  00A7               	movwf	paging@lastPage
 11572  1226  0142               	movlb	2	; select bank2
 11573  1227  0869               	movf	statusView@page^(0+256),w
 11574  1228  3187  278D         	fcall	_paging
 11575  122A  0141               	movlb	1	; select bank1
 11576  122B  00C8               	movwf	(??_statusView+1)^(0+128)
 11577  122C  0848               	movf	(??_statusView+1)^(0+128),w
 11578  122D  0142               	movlb	2	; select bank2
 11579  122E  00E9               	movwf	statusView@page^(0+256)
 11580  122F                     l7578:	
 11581                           
 11582                           ;menu.c: 69:  return page;
 11583  122F  0142               	movlb	2	; select bank2
 11584  1230  0869               	movf	statusView@page^(0+256),w
 11585  1231  0008               	return
 11586  1232                     __end_of_statusView:	
 11587                           
 11588                           	psect	text14
 11589  0800                     __ptext14:	
 11590 ;; *************** function _getPB *****************
 11591 ;; Defined at:
 11592 ;;		line 89 in file "inputs.c"
 11593 ;; Parameters:    Size  Location     Type
 11594 ;;		None
 11595 ;; Auto vars:     Size  Location     Type
 11596 ;;  ret             1    1[BANK0 ] enum E7868
 11597 ;; Return value:  Size  Location     Type
 11598 ;;                  1    wreg      enum E7868
 11599 ;; Registers used:
 11600 ;;		wreg, status,2, status,0
 11601 ;; Tracked objects:
 11602 ;;		On entry : 0/0
 11603 ;;		On exit  : 0/0
 11604 ;;		Unchanged: 0/0
 11605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11607 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11608 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11609 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11610 ;;Total ram usage:        2 bytes
 11611 ;; Hardware stack levels used:    1
 11612 ;; Hardware stack levels required when called:    3
 11613 ;; This function calls:
 11614 ;;		Nothing
 11615 ;; This function is called by:
 11616 ;;		_setOutputPower
 11617 ;;		_viewErrorMessage
 11618 ;;		_menu
 11619 ;; This function uses a non-reentrant model
 11620 ;;
 11621                           
 11622                           
 11623                           ;psect for function _getPB
 11624  0800                     _getPB:	
 11625                           
 11626                           ;inputs.c: 91:  enum e_buttonPress ret = pbState;
 11627                           
 11628                           ;incstack = 0
 11629                           ; Regs used in _getPB: [wreg+status,2+status,0]
 11630  0800  087D               	movf	_pbState,w	;volatile
 11631  0801  0140               	movlb	0	; select bank0
 11632  0802  00A0               	movwf	??_getPB
 11633  0803  0820               	movf	??_getPB,w
 11634  0804  00A1               	movwf	getPB@ret
 11635                           
 11636                           ;inputs.c: 92:  if (pbState != PB_WAIT)
 11637  0805  3004               	movlw	4
 11638  0806  067D               	xorwf	_pbState,w	;volatile
 11639  0807  1D03               	btfss	3,2
 11640                           
 11641                           ;inputs.c: 93:   pbState = PB_NONE;
 11642  0808  01FD               	clrf	_pbState	;volatile
 11643                           
 11644                           ;inputs.c: 94:  return ret;
 11645  0809  0821               	movf	getPB@ret,w
 11646  080A  0008               	return
 11647  080B                     __end_of_getPB:	
 11648                           
 11649                           	psect	text15
 11650  2D67                     __ptext15:	
 11651 ;; *************** function _spinInput *****************
 11652 ;; Defined at:
 11653 ;;		line 100 in file "inputs.c"
 11654 ;; Parameters:    Size  Location     Type
 11655 ;;  input           2   25[BANK1 ] PTR float 
 11656 ;;		 -> data.heater(124), data(166), 
 11657 ;;  min             4   27[BANK1 ] float 
 11658 ;;  max             4   31[BANK1 ] float 
 11659 ;;  step            4   35[BANK1 ] float 
 11660 ;; Auto vars:     Size  Location     Type
 11661 ;;  dir             1   39[BANK1 ] enum E7864
 11662 ;; Return value:  Size  Location     Type
 11663 ;;                  1    wreg      void 
 11664 ;; Registers used:
 11665 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11666 ;; Tracked objects:
 11667 ;;		On entry : 0/0
 11668 ;;		On exit  : 0/0
 11669 ;;		Unchanged: 0/0
 11670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11671 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11672 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11673 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11674 ;;      Totals:         0       1      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11675 ;;Total ram usage:       16 bytes
 11676 ;; Hardware stack levels used:    1
 11677 ;; Hardware stack levels required when called:    5
 11678 ;; This function calls:
 11679 ;;		___fladd
 11680 ;;		___flge
 11681 ;;		___flsub
 11682 ;;		_getRotDir
 11683 ;; This function is called by:
 11684 ;;		_setOutputPower
 11685 ;;		_setLensDia
 11686 ;;		_setDPOffset
 11687 ;;		_setSkyTemp
 11688 ;;		_setFudgeFactor
 11689 ;; This function uses a non-reentrant model
 11690 ;;
 11691                           
 11692                           
 11693                           ;psect for function _spinInput
 11694  2D67                     _spinInput:	
 11695                           
 11696                           ;inputs.c: 100: void spinInput(float *input, float min, float max, float step);inputs.c:
      +                           101: {;inputs.c: 102:  enum e_direction dir = getRotDir();
 11697                           
 11698                           ;incstack = 0
 11699                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 11700  2D67  31B3  2301  31AD   	fcall	_getRotDir
 11701  2D6A  0140               	movlb	0	; select bank0
 11702  2D6B  00EF               	movwf	??_spinInput
 11703  2D6C  086F               	movf	??_spinInput,w
 11704  2D6D  0141               	movlb	1	; select bank1
 11705  2D6E  00C7               	movwf	spinInput@dir^(0+128)
 11706                           
 11707                           ;inputs.c: 104:  if ((dir == ROT_CCW) && (*input > min))
 11708  2D6F  3002               	movlw	2
 11709  2D70  0647               	xorwf	spinInput@dir^(0+128),w
 11710  2D71  1D03               	btfss	3,2
 11711  2D72  2DB1               	goto	l7286
 11712  2D73  083E               	movf	(spinInput@min+3)^(0+128),w
 11713  2D74  00B0               	movwf	(___flge@ff1+3)^(0+128)
 11714  2D75  083D               	movf	(spinInput@min+2)^(0+128),w
 11715  2D76  00AF               	movwf	(___flge@ff1+2)^(0+128)
 11716  2D77  083C               	movf	(spinInput@min+1)^(0+128),w
 11717  2D78  00AE               	movwf	(___flge@ff1+1)^(0+128)
 11718  2D79  083B               	movf	spinInput@min^(0+128),w
 11719  2D7A  00AD               	movwf	___flge@ff1^(0+128)
 11720  2D7B  0839               	movf	spinInput@input^(0+128),w
 11721  2D7C  0086               	movwf	6
 11722  2D7D  083A               	movf	(spinInput@input+1)^(0+128),w
 11723  2D7E  0087               	movwf	7
 11724  2D7F  3F40               	moviw [0]fsr1
 11725  2D80  00B1               	movwf	___flge@ff2^(0+128)
 11726  2D81  3F41               	moviw [1]fsr1
 11727  2D82  00B2               	movwf	(___flge@ff2+1)^(0+128)
 11728  2D83  3F42               	moviw [2]fsr1
 11729  2D84  00B3               	movwf	(___flge@ff2+2)^(0+128)
 11730  2D85  3F43               	moviw [3]fsr1
 11731  2D86  00B4               	movwf	(___flge@ff2+3)^(0+128)
 11732  2D87  31AB  2339  31AD   	fcall	___flge
 11733  2D8A  1803               	btfsc	3,0
 11734  2D8B  2DB1               	goto	l7286
 11735                           
 11736                           ;inputs.c: 105:   *input -= step;
 11737  2D8C  0141               	movlb	1	; select bank1
 11738  2D8D  0846               	movf	(spinInput@step+3)^(0+128),w
 11739  2D8E  00A3               	movwf	(___flsub@a+3)^(0+128)
 11740  2D8F  0845               	movf	(spinInput@step+2)^(0+128),w
 11741  2D90  00A2               	movwf	(___flsub@a+2)^(0+128)
 11742  2D91  0844               	movf	(spinInput@step+1)^(0+128),w
 11743  2D92  00A1               	movwf	(___flsub@a+1)^(0+128)
 11744  2D93  0843               	movf	spinInput@step^(0+128),w
 11745  2D94  00A0               	movwf	___flsub@a^(0+128)
 11746  2D95  0839               	movf	spinInput@input^(0+128),w
 11747  2D96  0086               	movwf	6
 11748  2D97  083A               	movf	(spinInput@input+1)^(0+128),w
 11749  2D98  0087               	movwf	7
 11750  2D99  3F40               	moviw [0]fsr1
 11751  2D9A  00A4               	movwf	___flsub@b^(0+128)
 11752  2D9B  3F41               	moviw [1]fsr1
 11753  2D9C  00A5               	movwf	(___flsub@b+1)^(0+128)
 11754  2D9D  3F42               	moviw [2]fsr1
 11755  2D9E  00A6               	movwf	(___flsub@b+2)^(0+128)
 11756  2D9F  3F43               	moviw [3]fsr1
 11757  2DA0  00A7               	movwf	(___flsub@b+3)^(0+128)
 11758  2DA1  31B4  24FB         	fcall	___flsub
 11759  2DA3  0141               	movlb	1	; select bank1
 11760  2DA4  0839               	movf	spinInput@input^(0+128),w
 11761  2DA5  0086               	movwf	6
 11762  2DA6  083A               	movf	(spinInput@input+1)^(0+128),w
 11763  2DA7  0087               	movwf	7
 11764  2DA8  0820               	movf	?___flsub^(0+128),w
 11765  2DA9  3FC0               	movwi [0]fsr1
 11766  2DAA  0821               	movf	(?___flsub+1)^(0+128),w
 11767  2DAB  3FC1               	movwi [1]fsr1
 11768  2DAC  0822               	movf	(?___flsub+2)^(0+128),w
 11769  2DAD  3FC2               	movwi [2]fsr1
 11770  2DAE  0823               	movf	(?___flsub+3)^(0+128),w
 11771  2DAF  3FC3               	movwi [3]fsr1
 11772  2DB0  0008               	return
 11773  2DB1                     l7286:	
 11774  2DB1  0141               	movlb	1	; select bank1
 11775  2DB2  0347               	decf	spinInput@dir^(0+128),w
 11776  2DB3  1D03               	btfss	3,2
 11777  2DB4  0008               	return
 11778  2DB5  0839               	movf	spinInput@input^(0+128),w
 11779  2DB6  0086               	movwf	6
 11780  2DB7  083A               	movf	(spinInput@input+1)^(0+128),w
 11781  2DB8  0087               	movwf	7
 11782  2DB9  3F40               	moviw [0]fsr1
 11783  2DBA  00AD               	movwf	___flge@ff1^(0+128)
 11784  2DBB  3F41               	moviw [1]fsr1
 11785  2DBC  00AE               	movwf	(___flge@ff1+1)^(0+128)
 11786  2DBD  3F42               	moviw [2]fsr1
 11787  2DBE  00AF               	movwf	(___flge@ff1+2)^(0+128)
 11788  2DBF  3F43               	moviw [3]fsr1
 11789  2DC0  00B0               	movwf	(___flge@ff1+3)^(0+128)
 11790  2DC1  0842               	movf	(spinInput@max+3)^(0+128),w
 11791  2DC2  00B4               	movwf	(___flge@ff2+3)^(0+128)
 11792  2DC3  0841               	movf	(spinInput@max+2)^(0+128),w
 11793  2DC4  00B3               	movwf	(___flge@ff2+2)^(0+128)
 11794  2DC5  0840               	movf	(spinInput@max+1)^(0+128),w
 11795  2DC6  00B2               	movwf	(___flge@ff2+1)^(0+128)
 11796  2DC7  083F               	movf	spinInput@max^(0+128),w
 11797  2DC8  00B1               	movwf	___flge@ff2^(0+128)
 11798  2DC9  31AB  2339  31AD   	fcall	___flge
 11799  2DCC  1803               	btfsc	3,0
 11800  2DCD  0008               	return
 11801                           
 11802                           ;inputs.c: 107:   *input += step;
 11803  2DCE  0141               	movlb	1	; select bank1
 11804  2DCF  0846               	movf	(spinInput@step+3)^(0+128),w
 11805  2DD0  0140               	movlb	0	; select bank0
 11806  2DD1  00DE               	movwf	___fladd@b+3
 11807  2DD2  0141               	movlb	1	; select bank1
 11808  2DD3  0845               	movf	(spinInput@step+2)^(0+128),w
 11809  2DD4  0140               	movlb	0	; select bank0
 11810  2DD5  00DD               	movwf	___fladd@b+2
 11811  2DD6  0141               	movlb	1	; select bank1
 11812  2DD7  0844               	movf	(spinInput@step+1)^(0+128),w
 11813  2DD8  0140               	movlb	0	; select bank0
 11814  2DD9  00DC               	movwf	___fladd@b+1
 11815  2DDA  0141               	movlb	1	; select bank1
 11816  2DDB  0843               	movf	spinInput@step^(0+128),w
 11817  2DDC  0140               	movlb	0	; select bank0
 11818  2DDD  00DB               	movwf	___fladd@b
 11819  2DDE  0141               	movlb	1	; select bank1
 11820  2DDF  0839               	movf	spinInput@input^(0+128),w
 11821  2DE0  0086               	movwf	6
 11822  2DE1  083A               	movf	(spinInput@input+1)^(0+128),w
 11823  2DE2  0087               	movwf	7
 11824  2DE3  3F40               	moviw [0]fsr1
 11825  2DE4  0140               	movlb	0	; select bank0
 11826  2DE5  00DF               	movwf	___fladd@a
 11827  2DE6  3F41               	moviw [1]fsr1
 11828  2DE7  00E0               	movwf	___fladd@a+1
 11829  2DE8  3F42               	moviw [2]fsr1
 11830  2DE9  00E1               	movwf	___fladd@a+2
 11831  2DEA  3F43               	moviw [3]fsr1
 11832  2DEB  00E2               	movwf	___fladd@a+3
 11833  2DEC  3192  2232         	fcall	___fladd
 11834  2DEE  0141               	movlb	1	; select bank1
 11835  2DEF  0839               	movf	spinInput@input^(0+128),w
 11836  2DF0  0086               	movwf	6
 11837  2DF1  083A               	movf	(spinInput@input+1)^(0+128),w
 11838  2DF2  0087               	movwf	7
 11839  2DF3  0140               	movlb	0	; select bank0
 11840  2DF4  085B               	movf	?___fladd,w
 11841  2DF5  3FC0               	movwi [0]fsr1
 11842  2DF6  085C               	movf	?___fladd+1,w
 11843  2DF7  3FC1               	movwi [1]fsr1
 11844  2DF8  085D               	movf	?___fladd+2,w
 11845  2DF9  3FC2               	movwi [2]fsr1
 11846  2DFA  085E               	movf	?___fladd+3,w
 11847  2DFB  3FC3               	movwi [3]fsr1
 11848  2DFC  0008               	return
 11849  2DFD                     __end_of_spinInput:	
 11850                           
 11851                           	psect	text16
 11852  2020                     __ptext16:	
 11853 ;; *************** function _getNextState *****************
 11854 ;; Defined at:
 11855 ;;		line 134 in file "menuhelper.c"
 11856 ;; Parameters:    Size  Location     Type
 11857 ;;  state           1    wreg     enum E7959
 11858 ;;  intState        1   19[BANK0 ] unsigned char 
 11859 ;;  pb              1   20[BANK0 ] enum E7868
 11860 ;;  timeout         1   21[BANK0 ] unsigned char 
 11861 ;; Auto vars:     Size  Location     Type
 11862 ;;  state           1   25[BANK0 ] enum E7959
 11863 ;;  n               1   26[BANK0 ] unsigned char 
 11864 ;; Return value:  Size  Location     Type
 11865 ;;                  1    wreg      char 
 11866 ;; Registers used:
 11867 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11868 ;; Tracked objects:
 11869 ;;		On entry : 0/0
 11870 ;;		On exit  : 0/0
 11871 ;;		Unchanged: 0/0
 11872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11873 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11874 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11875 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11876 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11877 ;;Total ram usage:        8 bytes
 11878 ;; Hardware stack levels used:    1
 11879 ;; Hardware stack levels required when called:    4
 11880 ;; This function calls:
 11881 ;;		___wmul
 11882 ;; This function is called by:
 11883 ;;		_menu
 11884 ;; This function uses a non-reentrant model
 11885 ;;
 11886                           
 11887                           
 11888                           ;psect for function _getNextState
 11889  2020                     _getNextState:	
 11890                           
 11891                           ;incstack = 0
 11892                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11893                           ;getNextState@state stored from wreg
 11894  2020  0140               	movlb	0	; select bank0
 11895  2021  00B9               	movwf	getNextState@state
 11896                           
 11897                           ;menuhelper.c: 134: int8_t getNextState(enum e_menuStates state, uint8_t intState,;menuh
      +                          elper.c: 135:    enum e_buttonPress pb, uint8_t timeout);menuhelper.c: 136: {;menuhelper
      +                          .c: 137:  uint8_t n;;menuhelper.c: 140:  for(n = 0; n < sizeof(nextStateTbl)/sizeof(next
      +                          StateTbl[0]); n++) {
 11898  2022  01BA               	clrf	getNextState@n
 11899  2023                     l7890:	
 11900                           
 11901                           ;menuhelper.c: 141:   if ((nextStateTbl[n].state == state)) {
 11902  2023  083A               	movf	getNextState@n,w
 11903  2024  00B6               	movwf	??_getNextState
 11904  2025  01B7               	clrf	??_getNextState+1
 11905  2026  0836               	movf	??_getNextState,w
 11906  2027  00AD               	movwf	___wmul@multiplier
 11907  2028  0837               	movf	??_getNextState+1,w
 11908  2029  00AE               	movwf	___wmul@multiplier+1
 11909  202A  3006               	movlw	6
 11910  202B  00AF               	movwf	___wmul@multiplicand
 11911  202C  3000               	movlw	0
 11912  202D  00B0               	movwf	___wmul@multiplicand+1
 11913  202E  31B3  2371  31A0   	fcall	___wmul
 11914  2031  0140               	movlb	0	; select bank0
 11915  2032  082E               	movf	?___wmul+1,w
 11916  2033  0085               	movwf	5
 11917  2034  082D               	movf	?___wmul,w
 11918  2035  0084               	movwf	4
 11919  2036  3000               	movlw	low (_nextStateTbl| (0+32768))
 11920  2037  0784               	addwf	4,f
 11921  2038  30B0               	movlw	high (_nextStateTbl| (0+32768))
 11922  2039  3D85               	addwfc	5,f
 11923  203A  0800               	movf	0,w	;code access
 11924  203B  0639               	xorwf	getNextState@state,w
 11925  203C  1D03               	skipz
 11926  203D  28DE               	goto	l7922
 11927                           
 11928                           ;menuhelper.c: 143:    if ((nextStateTbl[n].intState == intState) ||
 11929  203E  083A               	movf	getNextState@n,w
 11930  203F  00B6               	movwf	??_getNextState
 11931  2040  01B7               	clrf	??_getNextState+1
 11932  2041  0836               	movf	??_getNextState,w
 11933  2042  00AD               	movwf	___wmul@multiplier
 11934  2043  0837               	movf	??_getNextState+1,w
 11935  2044  00AE               	movwf	___wmul@multiplier+1
 11936  2045  3006               	movlw	6
 11937  2046  00AF               	movwf	___wmul@multiplicand
 11938  2047  3000               	movlw	0
 11939  2048  00B0               	movwf	___wmul@multiplicand+1
 11940  2049  31B3  2371  31A0   	fcall	___wmul
 11941  204C  0140               	movlb	0	; select bank0
 11942  204D  082E               	movf	?___wmul+1,w
 11943  204E  0085               	movwf	5
 11944  204F  082D               	movf	?___wmul,w
 11945  2050  0084               	movwf	4
 11946  2051  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 11947  2052  0784               	addwf	4,f
 11948  2053  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 11949  2054  3D85               	addwfc	5,f
 11950  2055  0800               	movf	0,w	;code access
 11951  2056  0633               	xorwf	getNextState@intState,w
 11952  2057  1903               	skipnz
 11953  2058  2874               	goto	l7896
 11954  2059  083A               	movf	getNextState@n,w
 11955  205A  00B6               	movwf	??_getNextState
 11956  205B  01B7               	clrf	??_getNextState+1
 11957  205C  0836               	movf	??_getNextState,w
 11958  205D  00AD               	movwf	___wmul@multiplier
 11959  205E  0837               	movf	??_getNextState+1,w
 11960  205F  00AE               	movwf	___wmul@multiplier+1
 11961  2060  3006               	movlw	6
 11962  2061  00AF               	movwf	___wmul@multiplicand
 11963  2062  3000               	movlw	0
 11964  2063  00B0               	movwf	___wmul@multiplicand+1
 11965  2064  31B3  2371  31A0   	fcall	___wmul
 11966  2067  0140               	movlb	0	; select bank0
 11967  2068  082E               	movf	?___wmul+1,w
 11968  2069  0085               	movwf	5
 11969  206A  082D               	movf	?___wmul,w
 11970  206B  0084               	movwf	4
 11971  206C  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 11972  206D  0784               	addwf	4,f
 11973  206E  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 11974  206F  3D85               	addwfc	5,f
 11975  2070  0012               	moviw fsr0++
 11976  2071  3AFF               	xorlw	255
 11977  2072  1D03               	btfss	3,2
 11978  2073  28DE               	goto	l7922
 11979  2074                     l7896:	
 11980                           
 11981                           ;menuhelper.c: 144:     (nextStateTbl[n].intState == 255)) {;menuhelper.c: 145:     if (
      +                          timeout)
 11982  2074  0835               	movf	getNextState@timeout,w
 11983  2075  1903               	btfsc	3,2
 11984  2076  288F               	goto	l7902
 11985                           
 11986                           ;menuhelper.c: 146:      return nextStateTbl[n].timeout;
 11987  2077  083A               	movf	getNextState@n,w
 11988  2078  00B6               	movwf	??_getNextState
 11989  2079  01B7               	clrf	??_getNextState+1
 11990  207A  0836               	movf	??_getNextState,w
 11991  207B  00AD               	movwf	___wmul@multiplier
 11992  207C  0837               	movf	??_getNextState+1,w
 11993  207D  00AE               	movwf	___wmul@multiplier+1
 11994  207E  3006               	movlw	6
 11995  207F  00AF               	movwf	___wmul@multiplicand
 11996  2080  3000               	movlw	0
 11997  2081  00B0               	movwf	___wmul@multiplicand+1
 11998  2082  31B3  2371         	fcall	___wmul
 11999  2084  0140               	movlb	0	; select bank0
 12000  2085  082E               	movf	?___wmul+1,w
 12001  2086  0085               	movwf	5
 12002  2087  082D               	movf	?___wmul,w
 12003  2088  0084               	movwf	4
 12004  2089  3004               	movlw	low ((_nextStateTbl+4)| (0+32768))
 12005  208A  0784               	addwf	4,f
 12006  208B  30B0               	movlw	high ((_nextStateTbl+4)| (0+32768))
 12007  208C  3D85               	addwfc	5,f
 12008  208D  0800               	movf	0,w	;code access
 12009  208E  0008               	return
 12010  208F                     l7902:	
 12011                           
 12012                           ;menuhelper.c: 148:     if (pb == PB_SHORT)
 12013  208F  0334               	decf	getNextState@pb,w
 12014  2090  1D03               	btfss	3,2
 12015  2091  28AA               	goto	l7910
 12016                           
 12017                           ;menuhelper.c: 149:      return nextStateTbl[n].pbShort;
 12018  2092  083A               	movf	getNextState@n,w
 12019  2093  00B6               	movwf	??_getNextState
 12020  2094  01B7               	clrf	??_getNextState+1
 12021  2095  0836               	movf	??_getNextState,w
 12022  2096  00AD               	movwf	___wmul@multiplier
 12023  2097  0837               	movf	??_getNextState+1,w
 12024  2098  00AE               	movwf	___wmul@multiplier+1
 12025  2099  3006               	movlw	6
 12026  209A  00AF               	movwf	___wmul@multiplicand
 12027  209B  3000               	movlw	0
 12028  209C  00B0               	movwf	___wmul@multiplicand+1
 12029  209D  31B3  2371         	fcall	___wmul
 12030  209F  0140               	movlb	0	; select bank0
 12031  20A0  082E               	movf	?___wmul+1,w
 12032  20A1  0085               	movwf	5
 12033  20A2  082D               	movf	?___wmul,w
 12034  20A3  0084               	movwf	4
 12035  20A4  3002               	movlw	low ((_nextStateTbl+2)| (0+32768))
 12036  20A5  0784               	addwf	4,f
 12037  20A6  30B0               	movlw	high ((_nextStateTbl+2)| (0+32768))
 12038  20A7  3D85               	addwfc	5,f
 12039  20A8  0800               	movf	0,w	;code access
 12040  20A9  0008               	return
 12041  20AA                     l7910:	
 12042  20AA  3002               	movlw	2
 12043  20AB  0634               	xorwf	getNextState@pb,w
 12044  20AC  1D03               	btfss	3,2
 12045  20AD  28C6               	goto	l7918
 12046                           
 12047                           ;menuhelper.c: 151:      return nextStateTbl[n].pbLong;
 12048  20AE  083A               	movf	getNextState@n,w
 12049  20AF  00B6               	movwf	??_getNextState
 12050  20B0  01B7               	clrf	??_getNextState+1
 12051  20B1  0836               	movf	??_getNextState,w
 12052  20B2  00AD               	movwf	___wmul@multiplier
 12053  20B3  0837               	movf	??_getNextState+1,w
 12054  20B4  00AE               	movwf	___wmul@multiplier+1
 12055  20B5  3006               	movlw	6
 12056  20B6  00AF               	movwf	___wmul@multiplicand
 12057  20B7  3000               	movlw	0
 12058  20B8  00B0               	movwf	___wmul@multiplicand+1
 12059  20B9  31B3  2371         	fcall	___wmul
 12060  20BB  0140               	movlb	0	; select bank0
 12061  20BC  082E               	movf	?___wmul+1,w
 12062  20BD  0085               	movwf	5
 12063  20BE  082D               	movf	?___wmul,w
 12064  20BF  0084               	movwf	4
 12065  20C0  3003               	movlw	low ((_nextStateTbl+3)| (0+32768))
 12066  20C1  0784               	addwf	4,f
 12067  20C2  30B0               	movlw	high ((_nextStateTbl+3)| (0+32768))
 12068  20C3  3D85               	addwfc	5,f
 12069  20C4  0800               	movf	0,w	;code access
 12070  20C5  0008               	return
 12071  20C6                     l7918:	
 12072                           
 12073                           ;menuhelper.c: 153:      return nextStateTbl[n].noAction;
 12074  20C6  083A               	movf	getNextState@n,w
 12075  20C7  00B6               	movwf	??_getNextState
 12076  20C8  01B7               	clrf	??_getNextState+1
 12077  20C9  0836               	movf	??_getNextState,w
 12078  20CA  00AD               	movwf	___wmul@multiplier
 12079  20CB  0837               	movf	??_getNextState+1,w
 12080  20CC  00AE               	movwf	___wmul@multiplier+1
 12081  20CD  3006               	movlw	6
 12082  20CE  00AF               	movwf	___wmul@multiplicand
 12083  20CF  3000               	movlw	0
 12084  20D0  00B0               	movwf	___wmul@multiplicand+1
 12085  20D1  31B3  2371         	fcall	___wmul
 12086  20D3  0140               	movlb	0	; select bank0
 12087  20D4  082E               	movf	?___wmul+1,w
 12088  20D5  0085               	movwf	5
 12089  20D6  082D               	movf	?___wmul,w
 12090  20D7  0084               	movwf	4
 12091  20D8  3005               	movlw	low ((_nextStateTbl+5)| (0+32768))
 12092  20D9  0784               	addwf	4,f
 12093  20DA  30B0               	movlw	high ((_nextStateTbl+5)| (0+32768))
 12094  20DB  3D85               	addwfc	5,f
 12095  20DC  0800               	movf	0,w	;code access
 12096  20DD  0008               	return
 12097  20DE                     l7922:	
 12098                           
 12099                           ;menuhelper.c: 156:  }
 12100  20DE  3001               	movlw	1
 12101  20DF  00B6               	movwf	??_getNextState
 12102  20E0  0836               	movf	??_getNextState,w
 12103  20E1  07BA               	addwf	getNextState@n,f
 12104  20E2  300E               	movlw	14
 12105  20E3  023A               	subwf	getNextState@n,w
 12106  20E4  1C03               	skipc
 12107  20E5  2823               	goto	l7890
 12108                           
 12109                           ;menuhelper.c: 157:  return -1;
 12110  20E6  30FF               	movlw	255
 12111  20E7  0008               	return
 12112  20E8                     __end_of_getNextState:	
 12113                           
 12114                           	psect	text17
 12115  34C9                     __ptext17:	
 12116 ;; *************** function _returnToPage *****************
 12117 ;; Defined at:
 12118 ;;		line 205 in file "menuhelper.c"
 12119 ;; Parameters:    Size  Location     Type
 12120 ;;  page            1    wreg     unsigned char 
 12121 ;; Auto vars:     Size  Location     Type
 12122 ;;  page            1   21[BANK0 ] unsigned char 
 12123 ;;  n               1   22[BANK0 ] unsigned char 
 12124 ;; Return value:  Size  Location     Type
 12125 ;;                  1    wreg      void 
 12126 ;; Registers used:
 12127 ;;		wreg, status,2, status,0, pclath, cstack
 12128 ;; Tracked objects:
 12129 ;;		On entry : 0/0
 12130 ;;		On exit  : 0/0
 12131 ;;		Unchanged: 0/0
 12132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12134 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12135 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12136 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12137 ;;Total ram usage:        4 bytes
 12138 ;; Hardware stack levels used:    1
 12139 ;; Hardware stack levels required when called:    6
 12140 ;; This function calls:
 12141 ;;		_OLED_command
 12142 ;;		___wmul
 12143 ;; This function is called by:
 12144 ;;		_statusView
 12145 ;;		_channelView
 12146 ;;		_channelSetup
 12147 ;;		_setOutputPower
 12148 ;;		_setLensDia
 12149 ;;		_setup
 12150 ;;		_setDPOffset
 12151 ;;		_setSkyTemp
 12152 ;;		_setFudgeFactor
 12153 ;; This function uses a non-reentrant model
 12154 ;;
 12155                           
 12156                           
 12157                           ;psect for function _returnToPage
 12158  34C9                     _returnToPage:	
 12159                           
 12160                           ;incstack = 0
 12161                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 12162                           ;returnToPage@page stored from wreg
 12163  34C9  0140               	movlb	0	; select bank0
 12164  34CA  00B5               	movwf	returnToPage@page
 12165                           
 12166                           ;menuhelper.c: 205: void returnToPage(uint8_t page);menuhelper.c: 206: {;menuhelper.c: 2
      +                          07:  uint8_t n;;menuhelper.c: 209:  if (! g_screenRefresh)
 12167  34CB  0141               	movlb	1	; select bank1
 12168  34CC  086D               	movf	_g_screenRefresh^(0+128),w
 12169  34CD  1903               	btfsc	3,2
 12170  34CE  0008               	return
 12171                           
 12172                           ;menuhelper.c: 211:  OLED_command(0x01);
 12173  34CF  3001               	movlw	1
 12174  34D0  31B2  22E2  31B4   	fcall	_OLED_command
 12175                           
 12176                           ;menuhelper.c: 212:  OLED_command(0x02);
 12177  34D3  3002               	movlw	2
 12178  34D4  31B2  22E2  31B4   	fcall	_OLED_command
 12179                           
 12180                           ;menuhelper.c: 213:  for(n = 0; n < 12 * page; n++) {
 12181  34D7  0140               	movlb	0	; select bank0
 12182  34D8  01B6               	clrf	returnToPage@n
 12183  34D9                     l7304:	
 12184  34D9  0835               	movf	returnToPage@page,w
 12185  34DA  00B3               	movwf	??_returnToPage
 12186  34DB  01B4               	clrf	??_returnToPage+1
 12187  34DC  0833               	movf	??_returnToPage,w
 12188  34DD  00AD               	movwf	___wmul@multiplier
 12189  34DE  0834               	movf	??_returnToPage+1,w
 12190  34DF  00AE               	movwf	___wmul@multiplier+1
 12191  34E0  300C               	movlw	12
 12192  34E1  00AF               	movwf	___wmul@multiplicand
 12193  34E2  3000               	movlw	0
 12194  34E3  00B0               	movwf	___wmul@multiplicand+1
 12195  34E4  31B3  2371  31B4   	fcall	___wmul
 12196  34E7  0140               	movlb	0	; select bank0
 12197  34E8  082E               	movf	?___wmul+1,w
 12198  34E9  3A80               	xorlw	128
 12199  34EA  3C80               	sublw	128
 12200  34EB  1D03               	skipz
 12201  34EC  2CEF               	goto	u8905
 12202  34ED  082D               	movf	?___wmul,w
 12203  34EE  0236               	subwf	returnToPage@n,w
 12204  34EF                     u8905:	
 12205  34EF  1803               	btfsc	3,0
 12206  34F0  0008               	return
 12207                           
 12208                           ;menuhelper.c: 214:   OLED_command(0x10 | 0x08 | 0x00);
 12209  34F1  3018               	movlw	24
 12210  34F2  31B2  22E2  31B4   	fcall	_OLED_command
 12211                           
 12212                           ;menuhelper.c: 215:  }
 12213  34F5  3001               	movlw	1
 12214  34F6  0140               	movlb	0	; select bank0
 12215  34F7  00B3               	movwf	??_returnToPage
 12216  34F8  0833               	movf	??_returnToPage,w
 12217  34F9  07B6               	addwf	returnToPage@n,f
 12218  34FA  2CD9               	goto	l7304
 12219  34FB                     __end_of_returnToPage:	
 12220                           
 12221                           	psect	text18
 12222  078D                     __ptext18:	
 12223 ;; *************** function _paging *****************
 12224 ;; Defined at:
 12225 ;;		line 164 in file "menuhelper.c"
 12226 ;; Parameters:    Size  Location     Type
 12227 ;;  currentPage     1    wreg     unsigned char 
 12228 ;;  lastPage        1    7[BANK0 ] const unsigned char 
 12229 ;; Auto vars:     Size  Location     Type
 12230 ;;  currentPage     1   10[BANK0 ] unsigned char 
 12231 ;;  n               1   12[BANK0 ] unsigned char 
 12232 ;;  dir             1   11[BANK0 ] enum E7864
 12233 ;; Return value:  Size  Location     Type
 12234 ;;                  1    wreg      unsigned char 
 12235 ;; Registers used:
 12236 ;;		wreg, status,2, status,0, pclath, cstack
 12237 ;; Tracked objects:
 12238 ;;		On entry : 0/0
 12239 ;;		On exit  : 0/0
 12240 ;;		Unchanged: 0/0
 12241 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12242 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12243 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12244 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12245 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12246 ;;Total ram usage:        6 bytes
 12247 ;; Hardware stack levels used:    1
 12248 ;; Hardware stack levels required when called:    6
 12249 ;; This function calls:
 12250 ;;		_OLED_command
 12251 ;;		_getRotDir
 12252 ;; This function is called by:
 12253 ;;		_statusView
 12254 ;;		_channelView
 12255 ;;		_channelSetup
 12256 ;;		_setup
 12257 ;; This function uses a non-reentrant model
 12258 ;;
 12259                           
 12260                           
 12261                           ;psect for function _paging
 12262  078D                     _paging:	
 12263                           
 12264                           ;incstack = 0
 12265                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 12266                           ;paging@currentPage stored from wreg
 12267  078D  0140               	movlb	0	; select bank0
 12268  078E  00AA               	movwf	paging@currentPage
 12269                           
 12270                           ;menuhelper.c: 164: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 165: {;menuhelper.c: 166:  uint8_t n;;menuhelper.c: 167:  enum e_direction dir;;me
      +                          nuhelper.c: 168:  static enum e_direction lastDir = ROT_STOP;;menuhelper.c: 171:  PIE0bi
      +                          ts.IOCIE = 0;
 12271  078F  014E               	movlb	14	; select bank14
 12272  0790  1216               	bcf	22,4	;volatile
 12273                           
 12274                           ;menuhelper.c: 173:  dir = getRotDir();
 12275  0791  31B3  2301  3187   	fcall	_getRotDir
 12276  0794  0140               	movlb	0	; select bank0
 12277  0795  00A8               	movwf	??_paging
 12278  0796  0828               	movf	??_paging,w
 12279  0797  00AB               	movwf	paging@dir
 12280                           
 12281                           ;menuhelper.c: 176:  if (dir == lastDir) {
 12282  0798  082B               	movf	paging@dir,w
 12283  0799  0142               	movlb	2	; select bank2
 12284  079A  0662               	xorwf	paging@lastDir^(0+256),w
 12285  079B  1D03               	skipz
 12286  079C  2FEF               	goto	l7424
 12287                           
 12288                           ;menuhelper.c: 178:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 12289  079D  0140               	movlb	0	; select bank0
 12290  079E  032B               	decf	paging@dir,w
 12291  079F  1D03               	btfss	3,2
 12292  07A0  2FCE               	goto	l7404
 12293  07A1  0827               	movf	paging@lastPage,w
 12294  07A2  3EFF               	addlw	255
 12295  07A3  00A8               	movwf	??_paging
 12296  07A4  30FF               	movlw	255
 12297  07A5  1803               	skipnc
 12298  07A6  3000               	movlw	0
 12299  07A7  00A9               	movwf	??_paging+1
 12300  07A8  0829               	movf	??_paging+1,w
 12301  07A9  3A80               	xorlw	128
 12302  07AA  3C80               	sublw	128
 12303  07AB  1D03               	skipz
 12304  07AC  2FAF               	goto	u9045
 12305  07AD  0828               	movf	??_paging,w
 12306  07AE  022A               	subwf	paging@currentPage,w
 12307  07AF                     u9045:	
 12308  07AF  1803               	skipnc
 12309  07B0  2FCE               	goto	l7404
 12310                           
 12311                           ;menuhelper.c: 179:    currentPage++;
 12312  07B1  3001               	movlw	1
 12313  07B2  0140               	movlb	0	; select bank0
 12314  07B3  00A8               	movwf	??_paging
 12315  07B4  0828               	movf	??_paging,w
 12316  07B5  07AA               	addwf	paging@currentPage,f
 12317                           
 12318                           ;menuhelper.c: 180:    for(n = 0; n < 12; n++) {
 12319  07B6  01AC               	clrf	paging@n
 12320  07B7                     l7396:	
 12321                           
 12322                           ;menuhelper.c: 181:     OLED_command(0x10 | 0x08 | 0x00);
 12323  07B7  3018               	movlw	24
 12324  07B8  31B2  22E2  3187   	fcall	_OLED_command
 12325                           
 12326                           ;menuhelper.c: 182:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 12327  07BB  301A               	movlw	26
 12328  07BC  0140               	movlb	0	; select bank0
 12329  07BD  00A8               	movwf	??_paging
 12330  07BE  30F8               	movlw	248
 12331  07BF                     u10547:	
 12332  07BF  0B89               	decfsz	9,f
 12333  07C0  2FBF               	goto	u10547
 12334  07C1  0BA8               	decfsz	??_paging,f
 12335  07C2  2FBF               	goto	u10547
 12336  07C3  0000               	nop
 12337                           
 12338                           ;menuhelper.c: 183:    }
 12339  07C4  3001               	movlw	1
 12340  07C5  0140               	movlb	0	; select bank0
 12341  07C6  00A8               	movwf	??_paging
 12342  07C7  0828               	movf	??_paging,w
 12343  07C8  07AC               	addwf	paging@n,f
 12344  07C9  300C               	movlw	12
 12345  07CA  022C               	subwf	paging@n,w
 12346  07CB  1803               	btfsc	3,0
 12347  07CC  2FEF               	goto	l7424
 12348  07CD  2FB7               	goto	l7396
 12349  07CE                     l7404:	
 12350  07CE  3002               	movlw	2
 12351  07CF  0140               	movlb	0	; select bank0
 12352  07D0  062B               	xorwf	paging@dir,w
 12353  07D1  1D03               	btfss	3,2
 12354  07D2  2FEF               	goto	l7424
 12355  07D3  082A               	movf	paging@currentPage,w
 12356  07D4  1903               	btfsc	3,2
 12357  07D5  2FEF               	goto	l7424
 12358                           
 12359                           ;menuhelper.c: 187:    currentPage--;
 12360  07D6  3001               	movlw	1
 12361  07D7  02AA               	subwf	paging@currentPage,f
 12362                           
 12363                           ;menuhelper.c: 188:    for(n = 0; n < 12; n++) {
 12364  07D8  01AC               	clrf	paging@n
 12365  07D9                     l7416:	
 12366                           
 12367                           ;menuhelper.c: 189:     OLED_command(0x10 | 0x08 | 0x04);;
 12368  07D9  301C               	movlw	28
 12369  07DA  31B2  22E2  3187   	fcall	_OLED_command
 12370                           
 12371                           ;menuhelper.c: 190:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 12372  07DD  301A               	movlw	26
 12373  07DE  0140               	movlb	0	; select bank0
 12374  07DF  00A8               	movwf	??_paging
 12375  07E0  30F8               	movlw	248
 12376  07E1                     u10557:	
 12377  07E1  0B89               	decfsz	9,f
 12378  07E2  2FE1               	goto	u10557
 12379  07E3  0BA8               	decfsz	??_paging,f
 12380  07E4  2FE1               	goto	u10557
 12381  07E5  0000               	nop
 12382                           
 12383                           ;menuhelper.c: 191:    }
 12384  07E6  3001               	movlw	1
 12385  07E7  0140               	movlb	0	; select bank0
 12386  07E8  00A8               	movwf	??_paging
 12387  07E9  0828               	movf	??_paging,w
 12388  07EA  07AC               	addwf	paging@n,f
 12389  07EB  300C               	movlw	12
 12390  07EC  022C               	subwf	paging@n,w
 12391  07ED  1C03               	skipc
 12392  07EE  2FD9               	goto	l7416
 12393  07EF                     l7424:	
 12394                           
 12395                           ;menuhelper.c: 195:  lastDir = dir;
 12396  07EF  0140               	movlb	0	; select bank0
 12397  07F0  082B               	movf	paging@dir,w
 12398  07F1  00A8               	movwf	??_paging
 12399  07F2  0828               	movf	??_paging,w
 12400  07F3  0142               	movlb	2	; select bank2
 12401  07F4  00E2               	movwf	paging@lastDir^(0+256)
 12402                           
 12403                           ;menuhelper.c: 196:  PIE0bits.IOCIE = 1;
 12404  07F5  014E               	movlb	14	; select bank14
 12405  07F6  1616               	bsf	22,4	;volatile
 12406                           
 12407                           ;menuhelper.c: 198:  return currentPage;
 12408  07F7  0140               	movlb	0	; select bank0
 12409  07F8  082A               	movf	paging@currentPage,w
 12410  07F9  0008               	return
 12411  07FA                     __end_of_paging:	
 12412                           
 12413                           	psect	text19
 12414  3301                     __ptext19:	
 12415 ;; *************** function _getRotDir *****************
 12416 ;; Defined at:
 12417 ;;		line 79 in file "inputs.c"
 12418 ;; Parameters:    Size  Location     Type
 12419 ;;		None
 12420 ;; Auto vars:     Size  Location     Type
 12421 ;;  ret             1    1[BANK0 ] enum E7864
 12422 ;; Return value:  Size  Location     Type
 12423 ;;                  1    wreg      enum E7864
 12424 ;; Registers used:
 12425 ;;		wreg, status,2
 12426 ;; Tracked objects:
 12427 ;;		On entry : 0/0
 12428 ;;		On exit  : 0/0
 12429 ;;		Unchanged: 0/0
 12430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12431 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12432 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12433 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12434 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12435 ;;Total ram usage:        2 bytes
 12436 ;; Hardware stack levels used:    1
 12437 ;; Hardware stack levels required when called:    3
 12438 ;; This function calls:
 12439 ;;		Nothing
 12440 ;; This function is called by:
 12441 ;;		_spinInput
 12442 ;;		_paging
 12443 ;; This function uses a non-reentrant model
 12444 ;;
 12445                           
 12446                           
 12447                           ;psect for function _getRotDir
 12448  3301                     _getRotDir:	
 12449                           
 12450                           ;inputs.c: 81:  enum e_direction ret = rotDir;
 12451                           
 12452                           ;incstack = 0
 12453                           ; Regs used in _getRotDir: [wreg+status,2]
 12454  3301  0142               	movlb	2	; select bank2
 12455  3302  086C               	movf	_rotDir^(0+256),w	;volatile
 12456  3303  0140               	movlb	0	; select bank0
 12457  3304  00A0               	movwf	??_getRotDir
 12458  3305  0820               	movf	??_getRotDir,w
 12459  3306  00A1               	movwf	getRotDir@ret
 12460                           
 12461                           ;inputs.c: 82:  rotDir = ROT_STOP;
 12462  3307  0142               	movlb	2	; select bank2
 12463  3308  01EC               	clrf	_rotDir^(0+256)	;volatile
 12464                           
 12465                           ;inputs.c: 83:  return ret;
 12466  3309  0140               	movlb	0	; select bank0
 12467  330A  0821               	movf	getRotDir@ret,w
 12468  330B  0008               	return
 12469  330C                     __end_of_getRotDir:	
 12470                           
 12471                           	psect	text20
 12472  298F                     __ptext20:	
 12473 ;; *************** function _itoa *****************
 12474 ;; Defined at:
 12475 ;;		line 47 in file "common.c"
 12476 ;; Parameters:    Size  Location     Type
 12477 ;;  str             2   19[BANK1 ] PTR unsigned char 
 12478 ;;		 -> systemCheck@str(3), str(10), 
 12479 ;;  value           1   21[BANK1 ] unsigned char 
 12480 ;;  width           1   22[BANK1 ] unsigned char 
 12481 ;; Auto vars:     Size  Location     Type
 12482 ;;		None
 12483 ;; Return value:  Size  Location     Type
 12484 ;;                  1    wreg      void 
 12485 ;; Registers used:
 12486 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12487 ;; Tracked objects:
 12488 ;;		On entry : 0/0
 12489 ;;		On exit  : 0/0
 12490 ;;		Unchanged: 0/0
 12491 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12492 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12493 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12494 ;;      Temps:          0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12495 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12496 ;;Total ram usage:       11 bytes
 12497 ;; Hardware stack levels used:    1
 12498 ;; Hardware stack levels required when called:    4
 12499 ;; This function calls:
 12500 ;;		___awdiv
 12501 ;;		___awmod
 12502 ;; This function is called by:
 12503 ;;		_statusView
 12504 ;;		_channelView
 12505 ;;		_channelSetup
 12506 ;;		_setOutputPower
 12507 ;;		_systemCheck
 12508 ;; This function uses a non-reentrant model
 12509 ;;
 12510                           
 12511                           
 12512                           ;psect for function _itoa
 12513  298F                     _itoa:	
 12514                           
 12515                           ;common.c: 47: void itoa(char *str, uint8_t value, uint8_t width);common.c: 48: {;common
      +                          .c: 49:  str[width] = '\0';
 12516                           
 12517                           ;incstack = 0
 12518                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12519  298F  0141               	movlb	1	; select bank1
 12520  2990  0836               	movf	itoa@width^(0+128),w
 12521  2991  00B7               	movwf	??_itoa^(0+128)
 12522  2992  01B8               	clrf	(??_itoa^(0+128)+1)
 12523  2993  0837               	movf	??_itoa^(0+128),w
 12524  2994  0733               	addwf	itoa@str^(0+128),w
 12525  2995  0086               	movwf	6
 12526  2996  0838               	movf	(??_itoa+1)^(0+128),w
 12527  2997  3D34               	addwfc	(itoa@str+1)^(0+128),w
 12528  2998  0087               	movwf	7
 12529  2999  0181               	clrf	1
 12530  299A                     l7370:	
 12531                           ;common.c: 50:  while (value && width > 0) {
 12532                           
 12533                           
 12534                           ;common.c: 50:  while (value && width > 0) {
 12535  299A  0835               	movf	itoa@value^(0+128),w
 12536  299B  1903               	btfsc	3,2
 12537  299C  29F4               	goto	l7376
 12538  299D  0836               	movf	itoa@width^(0+128),w
 12539  299E  1903               	btfsc	3,2
 12540  299F  29F4               	goto	l7376
 12541                           
 12542                           ;common.c: 51:   str[--width] = (value % 10) + '0';
 12543  29A0  300A               	movlw	10
 12544  29A1  0140               	movlb	0	; select bank0
 12545  29A2  00A0               	movwf	___awmod@divisor
 12546  29A3  3000               	movlw	0
 12547  29A4  00A1               	movwf	___awmod@divisor+1
 12548  29A5  0141               	movlb	1	; select bank1
 12549  29A6  0835               	movf	itoa@value^(0+128),w
 12550  29A7  00B7               	movwf	??_itoa^(0+128)
 12551  29A8  01B8               	clrf	(??_itoa^(0+128)+1)
 12552  29A9  0837               	movf	??_itoa^(0+128),w
 12553  29AA  0140               	movlb	0	; select bank0
 12554  29AB  00A2               	movwf	___awmod@dividend
 12555  29AC  0141               	movlb	1	; select bank1
 12556  29AD  0838               	movf	(??_itoa+1)^(0+128),w
 12557  29AE  0140               	movlb	0	; select bank0
 12558  29AF  00A3               	movwf	___awmod@dividend+1
 12559  29B0  31B6  2651  31A9   	fcall	___awmod
 12560  29B3  0140               	movlb	0	; select bank0
 12561  29B4  0820               	movf	?___awmod,w
 12562  29B5  3E30               	addlw	48
 12563  29B6  0141               	movlb	1	; select bank1
 12564  29B7  00B9               	movwf	(??_itoa+2)^(0+128)
 12565  29B8  3001               	movlw	1
 12566  29B9  02B6               	subwf	itoa@width^(0+128),f
 12567  29BA  0836               	movf	itoa@width^(0+128),w
 12568  29BB  00BA               	movwf	(??_itoa+3)^(0+128)
 12569  29BC  01BB               	clrf	((??_itoa+3)^(0+128)+1)
 12570  29BD  083A               	movf	(??_itoa+3)^(0+128),w
 12571  29BE  0733               	addwf	itoa@str^(0+128),w
 12572  29BF  00BC               	movwf	(??_itoa+5)^(0+128)
 12573  29C0  083B               	movf	(??_itoa+4)^(0+128),w
 12574  29C1  3D34               	addwfc	(itoa@str+1)^(0+128),w
 12575  29C2  00BD               	movwf	(??_itoa+6)^(0+128)
 12576  29C3  083C               	movf	(??_itoa+5)^(0+128),w
 12577  29C4  0086               	movwf	6
 12578  29C5  083D               	movf	(??_itoa+6)^(0+128),w
 12579  29C6  0087               	movwf	7
 12580  29C7  0839               	movf	(??_itoa+2)^(0+128),w
 12581  29C8  0081               	movwf	1
 12582                           
 12583                           ;common.c: 52:   value = value / 10;
 12584  29C9  300A               	movlw	10
 12585  29CA  0140               	movlb	0	; select bank0
 12586  29CB  00A0               	movwf	___awdiv@divisor
 12587  29CC  3000               	movlw	0
 12588  29CD  00A1               	movwf	___awdiv@divisor+1
 12589  29CE  0141               	movlb	1	; select bank1
 12590  29CF  0835               	movf	itoa@value^(0+128),w
 12591  29D0  00B7               	movwf	??_itoa^(0+128)
 12592  29D1  01B8               	clrf	(??_itoa^(0+128)+1)
 12593  29D2  0837               	movf	??_itoa^(0+128),w
 12594  29D3  0140               	movlb	0	; select bank0
 12595  29D4  00A2               	movwf	___awdiv@dividend
 12596  29D5  0141               	movlb	1	; select bank1
 12597  29D6  0838               	movf	(??_itoa+1)^(0+128),w
 12598  29D7  0140               	movlb	0	; select bank0
 12599  29D8  00A3               	movwf	___awdiv@dividend+1
 12600  29D9  31A8  206E  31A9   	fcall	___awdiv
 12601  29DC  0140               	movlb	0	; select bank0
 12602  29DD  0820               	movf	?___awdiv,w
 12603  29DE  0141               	movlb	1	; select bank1
 12604  29DF  00B9               	movwf	(??_itoa+2)^(0+128)
 12605  29E0  0839               	movf	(??_itoa+2)^(0+128),w
 12606  29E1  00B5               	movwf	itoa@value^(0+128)
 12607  29E2  299A               	goto	l7370
 12608  29E3                     l7374:	
 12609                           
 12610                           ;common.c: 55:   str[--width] = ' ';
 12611  29E3  3001               	movlw	1
 12612  29E4  02B6               	subwf	itoa@width^(0+128),f
 12613  29E5  0836               	movf	itoa@width^(0+128),w
 12614  29E6  00B7               	movwf	??_itoa^(0+128)
 12615  29E7  01B8               	clrf	(??_itoa^(0+128)+1)
 12616  29E8  0837               	movf	??_itoa^(0+128),w
 12617  29E9  0733               	addwf	itoa@str^(0+128),w
 12618  29EA  00B9               	movwf	(??_itoa+2)^(0+128)
 12619  29EB  0838               	movf	(??_itoa+1)^(0+128),w
 12620  29EC  3D34               	addwfc	(itoa@str+1)^(0+128),w
 12621  29ED  00BA               	movwf	(??_itoa+3)^(0+128)
 12622  29EE  0839               	movf	(??_itoa+2)^(0+128),w
 12623  29EF  0086               	movwf	6
 12624  29F0  083A               	movf	(??_itoa+3)^(0+128),w
 12625  29F1  0087               	movwf	7
 12626  29F2  3020               	movlw	32
 12627  29F3  0081               	movwf	1
 12628  29F4                     l7376:	
 12629                           
 12630                           ;common.c: 54:  while(width)
 12631  29F4  0836               	movf	itoa@width^(0+128),w
 12632  29F5  1903               	btfsc	3,2
 12633  29F6  0008               	return
 12634  29F7  29E3               	goto	l7374
 12635  29F8                     __end_of_itoa:	
 12636                           
 12637                           	psect	text21
 12638  2208                     __ptext21:	
 12639 ;; *************** function _ftoa *****************
 12640 ;; Defined at:
 12641 ;;		line 8 in file "common.c"
 12642 ;; Parameters:    Size  Location     Type
 12643 ;;  str             1    wreg     PTR unsigned char 
 12644 ;;		 -> str(10), 
 12645 ;;  fValue          4   25[BANK1 ] float 
 12646 ;;  width           1   29[BANK1 ] unsigned char 
 12647 ;;  prec            1   30[BANK1 ] unsigned char 
 12648 ;; Auto vars:     Size  Location     Type
 12649 ;;  str             1   38[BANK1 ] PTR unsigned char 
 12650 ;;		 -> str(10), 
 12651 ;;  pos             1   37[BANK1 ] unsigned char 
 12652 ;;  w               1   36[BANK1 ] unsigned char 
 12653 ;;  intValue        1   35[BANK1 ] unsigned char 
 12654 ;;  sign            1   34[BANK1 ] unsigned char 
 12655 ;;  len             1   33[BANK1 ] unsigned char 
 12656 ;; Return value:  Size  Location     Type
 12657 ;;                  1    wreg      void 
 12658 ;; Registers used:
 12659 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12660 ;; Tracked objects:
 12661 ;;		On entry : 0/0
 12662 ;;		On exit  : 0/0
 12663 ;;		Unchanged: 0/0
 12664 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12665 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12666 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12667 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12668 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12669 ;;Total ram usage:       14 bytes
 12670 ;; Hardware stack levels used:    1
 12671 ;; Hardware stack levels required when called:    5
 12672 ;; This function calls:
 12673 ;;		___fldiv
 12674 ;;		___flge
 12675 ;;		___flmul
 12676 ;;		___flsub
 12677 ;;		___fltol
 12678 ;;		___wmul
 12679 ;;		___xxtofl
 12680 ;; This function is called by:
 12681 ;;		_statusView
 12682 ;;		_channelView
 12683 ;;		_channelSetup
 12684 ;;		_setOutputPower
 12685 ;;		_setLensDia
 12686 ;;		_setup
 12687 ;;		_setDPOffset
 12688 ;;		_setSkyTemp
 12689 ;;		_setFudgeFactor
 12690 ;; This function uses a non-reentrant model
 12691 ;;
 12692                           
 12693                           
 12694                           ;psect for function _ftoa
 12695  2208                     _ftoa:	
 12696                           
 12697                           ;incstack = 0
 12698                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12699                           ;ftoa@str stored from wreg
 12700  2208  0141               	movlb	1	; select bank1
 12701  2209  00C6               	movwf	ftoa@str^(0+128)
 12702                           
 12703                           ;common.c: 8: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          9: {;common.c: 10:  uint8_t len = 1;
 12704  220A  01C1               	clrf	ftoa@len^(0+128)
 12705  220B  0AC1               	incf	ftoa@len^(0+128),f
 12706                           
 12707                           ;common.c: 12:  uint8_t pos = 0;
 12708  220C  01C5               	clrf	ftoa@pos^(0+128)
 12709                           
 12710                           ;common.c: 14:  uint8_t sign = 0;
 12711  220D  01C2               	clrf	ftoa@sign^(0+128)
 12712                           
 12713                           ;common.c: 16:  if (fValue < 0) {
 12714  220E  083C               	movf	(ftoa@fValue+3)^(0+128),w
 12715  220F  00B0               	movwf	(___flge@ff1+3)^(0+128)
 12716  2210  083B               	movf	(ftoa@fValue+2)^(0+128),w
 12717  2211  00AF               	movwf	(___flge@ff1+2)^(0+128)
 12718  2212  083A               	movf	(ftoa@fValue+1)^(0+128),w
 12719  2213  00AE               	movwf	(___flge@ff1+1)^(0+128)
 12720  2214  0839               	movf	ftoa@fValue^(0+128),w
 12721  2215  00AD               	movwf	___flge@ff1^(0+128)
 12722  2216  3000               	movlw	0
 12723  2217  00B4               	movwf	(___flge@ff2+3)^(0+128)
 12724  2218  3000               	movlw	0
 12725  2219  00B3               	movwf	(___flge@ff2+2)^(0+128)
 12726  221A  3000               	movlw	0
 12727  221B  00B2               	movwf	(___flge@ff2+1)^(0+128)
 12728  221C  3000               	movlw	0
 12729  221D  00B1               	movwf	___flge@ff2^(0+128)
 12730  221E  31AB  2339  31A2   	fcall	___flge
 12731  2221  1803               	btfsc	3,0
 12732  2222  2A53               	goto	l7328
 12733                           
 12734                           ;common.c: 17:   fValue *= -1;
 12735  2223  30BF               	movlw	191
 12736  2224  0140               	movlb	0	; select bank0
 12737  2225  00C4               	movwf	___flmul@b+3
 12738  2226  3080               	movlw	128
 12739  2227  00C3               	movwf	___flmul@b+2
 12740  2228  3000               	movlw	0
 12741  2229  00C2               	movwf	___flmul@b+1
 12742  222A  3000               	movlw	0
 12743  222B  00C1               	movwf	___flmul@b
 12744  222C  0141               	movlb	1	; select bank1
 12745  222D  083C               	movf	(ftoa@fValue+3)^(0+128),w
 12746  222E  0140               	movlb	0	; select bank0
 12747  222F  00C8               	movwf	___flmul@a+3
 12748  2230  0141               	movlb	1	; select bank1
 12749  2231  083B               	movf	(ftoa@fValue+2)^(0+128),w
 12750  2232  0140               	movlb	0	; select bank0
 12751  2233  00C7               	movwf	___flmul@a+2
 12752  2234  0141               	movlb	1	; select bank1
 12753  2235  083A               	movf	(ftoa@fValue+1)^(0+128),w
 12754  2236  0140               	movlb	0	; select bank0
 12755  2237  00C6               	movwf	___flmul@a+1
 12756  2238  0141               	movlb	1	; select bank1
 12757  2239  0839               	movf	ftoa@fValue^(0+128),w
 12758  223A  0140               	movlb	0	; select bank0
 12759  223B  00C5               	movwf	___flmul@a
 12760  223C  3185  2561  31A2   	fcall	___flmul
 12761  223F  0140               	movlb	0	; select bank0
 12762  2240  0844               	movf	?___flmul+3,w
 12763  2241  0141               	movlb	1	; select bank1
 12764  2242  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12765  2243  0140               	movlb	0	; select bank0
 12766  2244  0843               	movf	?___flmul+2,w
 12767  2245  0141               	movlb	1	; select bank1
 12768  2246  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12769  2247  0140               	movlb	0	; select bank0
 12770  2248  0842               	movf	?___flmul+1,w
 12771  2249  0141               	movlb	1	; select bank1
 12772  224A  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12773  224B  0140               	movlb	0	; select bank0
 12774  224C  0841               	movf	?___flmul,w
 12775  224D  0141               	movlb	1	; select bank1
 12776  224E  00B9               	movwf	ftoa@fValue^(0+128)
 12777                           
 12778                           ;common.c: 18:   sign = 1;
 12779  224F  01C2               	clrf	ftoa@sign^(0+128)
 12780  2250  0AC2               	incf	ftoa@sign^(0+128),f
 12781                           
 12782                           ;common.c: 19:   width--;
 12783  2251  3001               	movlw	1
 12784  2252  02BD               	subwf	ftoa@width^(0+128),f
 12785  2253                     l7328:	
 12786                           
 12787                           ;common.c: 21:  while(fValue >= 10.0) {
 12788  2253  0141               	movlb	1	; select bank1
 12789  2254  083C               	movf	(ftoa@fValue+3)^(0+128),w
 12790  2255  00B0               	movwf	(___flge@ff1+3)^(0+128)
 12791  2256  083B               	movf	(ftoa@fValue+2)^(0+128),w
 12792  2257  00AF               	movwf	(___flge@ff1+2)^(0+128)
 12793  2258  083A               	movf	(ftoa@fValue+1)^(0+128),w
 12794  2259  00AE               	movwf	(___flge@ff1+1)^(0+128)
 12795  225A  0839               	movf	ftoa@fValue^(0+128),w
 12796  225B  00AD               	movwf	___flge@ff1^(0+128)
 12797  225C  3041               	movlw	65
 12798  225D  00B4               	movwf	(___flge@ff2+3)^(0+128)
 12799  225E  3020               	movlw	32
 12800  225F  00B3               	movwf	(___flge@ff2+2)^(0+128)
 12801  2260  3000               	movlw	0
 12802  2261  00B2               	movwf	(___flge@ff2+1)^(0+128)
 12803  2262  3000               	movlw	0
 12804  2263  00B1               	movwf	___flge@ff2^(0+128)
 12805  2264  31AB  2339  31A2   	fcall	___flge
 12806  2267  1C03               	btfss	3,0
 12807  2268  2A9A               	goto	l7330
 12808                           
 12809                           ;common.c: 22:   fValue /= 10;
 12810  2269  3041               	movlw	65
 12811  226A  0140               	movlb	0	; select bank0
 12812  226B  00DE               	movwf	___fldiv@a+3
 12813  226C  3020               	movlw	32
 12814  226D  00DD               	movwf	___fldiv@a+2
 12815  226E  3000               	movlw	0
 12816  226F  00DC               	movwf	___fldiv@a+1
 12817  2270  3000               	movlw	0
 12818  2271  00DB               	movwf	___fldiv@a
 12819  2272  0141               	movlb	1	; select bank1
 12820  2273  083C               	movf	(ftoa@fValue+3)^(0+128),w
 12821  2274  0140               	movlb	0	; select bank0
 12822  2275  00E2               	movwf	___fldiv@b+3
 12823  2276  0141               	movlb	1	; select bank1
 12824  2277  083B               	movf	(ftoa@fValue+2)^(0+128),w
 12825  2278  0140               	movlb	0	; select bank0
 12826  2279  00E1               	movwf	___fldiv@b+2
 12827  227A  0141               	movlb	1	; select bank1
 12828  227B  083A               	movf	(ftoa@fValue+1)^(0+128),w
 12829  227C  0140               	movlb	0	; select bank0
 12830  227D  00E0               	movwf	___fldiv@b+1
 12831  227E  0141               	movlb	1	; select bank1
 12832  227F  0839               	movf	ftoa@fValue^(0+128),w
 12833  2280  0140               	movlb	0	; select bank0
 12834  2281  00DF               	movwf	___fldiv@b
 12835  2282  319E  2628  31A2   	fcall	___fldiv
 12836  2285  0140               	movlb	0	; select bank0
 12837  2286  085E               	movf	?___fldiv+3,w
 12838  2287  0141               	movlb	1	; select bank1
 12839  2288  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12840  2289  0140               	movlb	0	; select bank0
 12841  228A  085D               	movf	?___fldiv+2,w
 12842  228B  0141               	movlb	1	; select bank1
 12843  228C  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12844  228D  0140               	movlb	0	; select bank0
 12845  228E  085C               	movf	?___fldiv+1,w
 12846  228F  0141               	movlb	1	; select bank1
 12847  2290  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12848  2291  0140               	movlb	0	; select bank0
 12849  2292  085B               	movf	?___fldiv,w
 12850  2293  0141               	movlb	1	; select bank1
 12851  2294  00B9               	movwf	ftoa@fValue^(0+128)
 12852                           
 12853                           ;common.c: 23:   len++;
 12854  2295  3001               	movlw	1
 12855  2296  00BF               	movwf	??_ftoa^(0+128)
 12856  2297  083F               	movf	??_ftoa^(0+128),w
 12857  2298  07C1               	addwf	ftoa@len^(0+128),f
 12858  2299  2A53               	goto	l7328
 12859  229A                     l7330:	
 12860                           
 12861                           ;common.c: 25:  w = len + prec;
 12862  229A  0141               	movlb	1	; select bank1
 12863  229B  0841               	movf	ftoa@len^(0+128),w
 12864  229C  073E               	addwf	ftoa@prec^(0+128),w
 12865  229D  00BF               	movwf	??_ftoa^(0+128)
 12866  229E  083F               	movf	??_ftoa^(0+128),w
 12867  229F  00C4               	movwf	ftoa@w^(0+128)
 12868                           
 12869                           ;common.c: 26:  if (prec == 0)
 12870  22A0  083E               	movf	ftoa@prec^(0+128),w
 12871  22A1  1D03               	btfss	3,2
 12872  22A2  2AA7               	goto	l7338
 12873                           
 12874                           ;common.c: 27:   width++;
 12875  22A3  3001               	movlw	1
 12876  22A4  00BF               	movwf	??_ftoa^(0+128)
 12877  22A5  083F               	movf	??_ftoa^(0+128),w
 12878  22A6  07BD               	addwf	ftoa@width^(0+128),f
 12879  22A7                     l7338:	
 12880                           
 12881                           ;common.c: 28:  while(--width > w)
 12882  22A7  3001               	movlw	1
 12883  22A8  02BD               	subwf	ftoa@width^(0+128),f
 12884  22A9  083D               	movf	ftoa@width^(0+128),w
 12885  22AA  0244               	subwf	ftoa@w^(0+128),w
 12886  22AB  1803               	btfsc	3,0
 12887  22AC  2ABD               	goto	l7340
 12888                           
 12889                           ;common.c: 29:   str[pos++] = ' ';
 12890  22AD  3020               	movlw	32
 12891  22AE  00BF               	movwf	??_ftoa^(0+128)
 12892  22AF  0845               	movf	ftoa@pos^(0+128),w
 12893  22B0  0746               	addwf	ftoa@str^(0+128),w
 12894  22B1  00C0               	movwf	(??_ftoa+1)^(0+128)
 12895  22B2  0840               	movf	(??_ftoa+1)^(0+128),w
 12896  22B3  0086               	movwf	6
 12897  22B4  3001               	movlw	1	; select bank2/3
 12898  22B5  0087               	movwf	7
 12899  22B6  083F               	movf	??_ftoa^(0+128),w
 12900  22B7  0081               	movwf	1
 12901  22B8  3001               	movlw	1
 12902  22B9  00BF               	movwf	??_ftoa^(0+128)
 12903  22BA  083F               	movf	??_ftoa^(0+128),w
 12904  22BB  07C5               	addwf	ftoa@pos^(0+128),f
 12905  22BC  2AA7               	goto	l7338
 12906  22BD                     l7340:	
 12907                           
 12908                           ;common.c: 30:  if (sign)
 12909  22BD  0842               	movf	ftoa@sign^(0+128),w
 12910  22BE  1903               	btfsc	3,2
 12911  22BF  2ACF               	goto	l7360
 12912                           
 12913                           ;common.c: 31:   str[pos++] = '-';
 12914  22C0  302D               	movlw	45
 12915  22C1                     L6:	
 12916  22C1  00BF               	movwf	??_ftoa^(0+128)
 12917  22C2  0845               	movf	ftoa@pos^(0+128),w
 12918  22C3  0746               	addwf	ftoa@str^(0+128),w
 12919  22C4  00C0               	movwf	(??_ftoa+1)^(0+128)
 12920  22C5  0840               	movf	(??_ftoa+1)^(0+128),w
 12921  22C6  0086               	movwf	6
 12922  22C7  3001               	movlw	1	; select bank2/3
 12923  22C8  0087               	movwf	7
 12924  22C9  083F               	movf	??_ftoa^(0+128),w
 12925  22CA  0081               	movwf	1
 12926  22CB  3001               	movlw	1
 12927  22CC  00BF               	movwf	??_ftoa^(0+128)
 12928  22CD  083F               	movf	??_ftoa^(0+128),w
 12929  22CE  07C5               	addwf	ftoa@pos^(0+128),f
 12930  22CF                     l7360:	
 12931                           
 12932                           ;common.c: 32:  while(w--) {
 12933  22CF  3001               	movlw	1
 12934  22D0  02C4               	subwf	ftoa@w^(0+128),f
 12935  22D1  0A44               	incf	ftoa@w^(0+128),w
 12936  22D2  1903               	btfsc	3,2
 12937  22D3  2B66               	goto	l7362
 12938                           
 12939                           ;common.c: 33:   intValue = fValue;
 12940  22D4  083C               	movf	(ftoa@fValue+3)^(0+128),w
 12941  22D5  00AB               	movwf	(___fltol@f1+3)^(0+128)
 12942  22D6  083B               	movf	(ftoa@fValue+2)^(0+128),w
 12943  22D7  00AA               	movwf	(___fltol@f1+2)^(0+128)
 12944  22D8  083A               	movf	(ftoa@fValue+1)^(0+128),w
 12945  22D9  00A9               	movwf	(___fltol@f1+1)^(0+128)
 12946  22DA  0839               	movf	ftoa@fValue^(0+128),w
 12947  22DB  00A8               	movwf	___fltol@f1^(0+128)
 12948  22DC  31A8  20C0  31A2   	fcall	___fltol
 12949  22DF  0141               	movlb	1	; select bank1
 12950  22E0  0828               	movf	?___fltol^(0+128),w
 12951  22E1  00BF               	movwf	??_ftoa^(0+128)
 12952  22E2  083F               	movf	??_ftoa^(0+128),w
 12953  22E3  00C3               	movwf	ftoa@intValue^(0+128)
 12954                           
 12955                           ;common.c: 34:   fValue = fValue * 10 - (10 * intValue);
 12956  22E4  300A               	movlw	10
 12957  22E5  0140               	movlb	0	; select bank0
 12958  22E6  00AF               	movwf	___wmul@multiplicand
 12959  22E7  3000               	movlw	0
 12960  22E8  00B0               	movwf	___wmul@multiplicand+1
 12961  22E9  0141               	movlb	1	; select bank1
 12962  22EA  0843               	movf	ftoa@intValue^(0+128),w
 12963  22EB  00BF               	movwf	??_ftoa^(0+128)
 12964  22EC  01C0               	clrf	(??_ftoa^(0+128)+1)
 12965  22ED  083F               	movf	??_ftoa^(0+128),w
 12966  22EE  0140               	movlb	0	; select bank0
 12967  22EF  00AD               	movwf	___wmul@multiplier
 12968  22F0  0141               	movlb	1	; select bank1
 12969  22F1  0840               	movf	(??_ftoa+1)^(0+128),w
 12970  22F2  0140               	movlb	0	; select bank0
 12971  22F3  00AE               	movwf	___wmul@multiplier+1
 12972  22F4  31B3  2371  31A2   	fcall	___wmul
 12973  22F7  0140               	movlb	0	; select bank0
 12974  22F8  082D               	movf	?___wmul,w
 12975  22F9  00B3               	movwf	___xxtofl@val
 12976  22FA  082E               	movf	?___wmul+1,w
 12977  22FB  00B4               	movwf	___xxtofl@val+1
 12978  22FC  0D89               	rlf	9,f
 12979  22FD  3B89               	subwfb	9,f
 12980  22FE  0989               	comf	9,f
 12981  22FF  00B5               	movwf	___xxtofl@val+2
 12982  2300  00B6               	movwf	___xxtofl@val+3
 12983  2301  3001               	movlw	1
 12984  2302  31AC  24D1  31A2   	fcall	___xxtofl
 12985  2305  0140               	movlb	0	; select bank0
 12986  2306  0836               	movf	?___xxtofl+3,w
 12987  2307  0141               	movlb	1	; select bank1
 12988  2308  00A3               	movwf	(___flsub@a+3)^(0+128)
 12989  2309  0140               	movlb	0	; select bank0
 12990  230A  0835               	movf	?___xxtofl+2,w
 12991  230B  0141               	movlb	1	; select bank1
 12992  230C  00A2               	movwf	(___flsub@a+2)^(0+128)
 12993  230D  0140               	movlb	0	; select bank0
 12994  230E  0834               	movf	?___xxtofl+1,w
 12995  230F  0141               	movlb	1	; select bank1
 12996  2310  00A1               	movwf	(___flsub@a+1)^(0+128)
 12997  2311  0140               	movlb	0	; select bank0
 12998  2312  0833               	movf	?___xxtofl,w
 12999  2313  0141               	movlb	1	; select bank1
 13000  2314  00A0               	movwf	___flsub@a^(0+128)
 13001  2315  3041               	movlw	65
 13002  2316  0140               	movlb	0	; select bank0
 13003  2317  00C4               	movwf	___flmul@b+3
 13004  2318  3020               	movlw	32
 13005  2319  00C3               	movwf	___flmul@b+2
 13006  231A  3000               	movlw	0
 13007  231B  00C2               	movwf	___flmul@b+1
 13008  231C  3000               	movlw	0
 13009  231D  00C1               	movwf	___flmul@b
 13010  231E  0141               	movlb	1	; select bank1
 13011  231F  083C               	movf	(ftoa@fValue+3)^(0+128),w
 13012  2320  0140               	movlb	0	; select bank0
 13013  2321  00C8               	movwf	___flmul@a+3
 13014  2322  0141               	movlb	1	; select bank1
 13015  2323  083B               	movf	(ftoa@fValue+2)^(0+128),w
 13016  2324  0140               	movlb	0	; select bank0
 13017  2325  00C7               	movwf	___flmul@a+2
 13018  2326  0141               	movlb	1	; select bank1
 13019  2327  083A               	movf	(ftoa@fValue+1)^(0+128),w
 13020  2328  0140               	movlb	0	; select bank0
 13021  2329  00C6               	movwf	___flmul@a+1
 13022  232A  0141               	movlb	1	; select bank1
 13023  232B  0839               	movf	ftoa@fValue^(0+128),w
 13024  232C  0140               	movlb	0	; select bank0
 13025  232D  00C5               	movwf	___flmul@a
 13026  232E  3185  2561  31A2   	fcall	___flmul
 13027  2331  0140               	movlb	0	; select bank0
 13028  2332  0844               	movf	?___flmul+3,w
 13029  2333  0141               	movlb	1	; select bank1
 13030  2334  00A7               	movwf	(___flsub@b+3)^(0+128)
 13031  2335  0140               	movlb	0	; select bank0
 13032  2336  0843               	movf	?___flmul+2,w
 13033  2337  0141               	movlb	1	; select bank1
 13034  2338  00A6               	movwf	(___flsub@b+2)^(0+128)
 13035  2339  0140               	movlb	0	; select bank0
 13036  233A  0842               	movf	?___flmul+1,w
 13037  233B  0141               	movlb	1	; select bank1
 13038  233C  00A5               	movwf	(___flsub@b+1)^(0+128)
 13039  233D  0140               	movlb	0	; select bank0
 13040  233E  0841               	movf	?___flmul,w
 13041  233F  0141               	movlb	1	; select bank1
 13042  2340  00A4               	movwf	___flsub@b^(0+128)
 13043  2341  31B4  24FB  31A2   	fcall	___flsub
 13044  2344  0141               	movlb	1	; select bank1
 13045  2345  0823               	movf	(?___flsub+3)^(0+128),w
 13046  2346  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 13047  2347  0822               	movf	(?___flsub+2)^(0+128),w
 13048  2348  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 13049  2349  0821               	movf	(?___flsub+1)^(0+128),w
 13050  234A  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 13051  234B  0820               	movf	?___flsub^(0+128),w
 13052  234C  00B9               	movwf	ftoa@fValue^(0+128)
 13053                           
 13054                           ;common.c: 35:   str[pos++] = intValue + '0';
 13055  234D  0843               	movf	ftoa@intValue^(0+128),w
 13056  234E  3E30               	addlw	48
 13057  234F  00BF               	movwf	??_ftoa^(0+128)
 13058  2350  0845               	movf	ftoa@pos^(0+128),w
 13059  2351  0746               	addwf	ftoa@str^(0+128),w
 13060  2352  00C0               	movwf	(??_ftoa+1)^(0+128)
 13061  2353  0840               	movf	(??_ftoa+1)^(0+128),w
 13062  2354  0086               	movwf	6
 13063  2355  3001               	movlw	1	; select bank2/3
 13064  2356  0087               	movwf	7
 13065  2357  083F               	movf	??_ftoa^(0+128),w
 13066  2358  0081               	movwf	1
 13067  2359  3001               	movlw	1
 13068  235A  00BF               	movwf	??_ftoa^(0+128)
 13069  235B  083F               	movf	??_ftoa^(0+128),w
 13070  235C  07C5               	addwf	ftoa@pos^(0+128),f
 13071                           
 13072                           ;common.c: 36:   if (w && (w == prec))
 13073  235D  0844               	movf	ftoa@w^(0+128),w
 13074  235E  1903               	btfsc	3,2
 13075  235F  2ACF               	goto	l7360
 13076  2360  0844               	movf	ftoa@w^(0+128),w
 13077  2361  063E               	xorwf	ftoa@prec^(0+128),w
 13078  2362  1D03               	skipz
 13079  2363  2ACF               	goto	l7360
 13080                           
 13081                           ;common.c: 37:    str[pos++] = '.';
 13082  2364  302E               	movlw	46
 13083  2365  2AC1               	goto	L6
 13084  2366                     l7362:	
 13085                           
 13086                           ;common.c: 40:  str[pos] = '\0';
 13087  2366  0845               	movf	ftoa@pos^(0+128),w
 13088  2367  0746               	addwf	ftoa@str^(0+128),w
 13089  2368  00BF               	movwf	??_ftoa^(0+128)
 13090  2369  083F               	movf	??_ftoa^(0+128),w
 13091  236A  0086               	movwf	6
 13092  236B  3001               	movlw	1	; select bank2/3
 13093  236C  0087               	movwf	7
 13094  236D  0181               	clrf	1
 13095  236E  0008               	return
 13096  236F                     __end_of_ftoa:	
 13097                           
 13098                           	psect	text22
 13099  3497                     __ptext22:	
 13100 ;; *************** function _OLED_print_xy *****************
 13101 ;; Defined at:
 13102 ;;		line 144 in file "oled.c"
 13103 ;; Parameters:    Size  Location     Type
 13104 ;;  col             1    wreg     unsigned char 
 13105 ;;  row             1   13[BANK0 ] unsigned char 
 13106 ;;  s               2   14[BANK0 ] PTR unsigned char 
 13107 ;;		 -> STR_87(4), systemCheck@str(3), STR_86(12), STR_85(13), 
 13108 ;;		 -> STR_84(13), STR_83(13), STR_82(13), STR_81(13), 
 13109 ;;		 -> STR_80(13), STR_79(13), STR_78(13), STR_77(13), 
 13110 ;;		 -> STR_76(13), STR_75(13), STR_74(13), STR_73(13), 
 13111 ;;		 -> STR_72(13), STR_71(13), STR_70(13), STR_69(13), 
 13112 ;;		 -> STR_68(13), STR_67(13), STR_66(13), STR_65(13), 
 13113 ;;		 -> STR_64(13), STR_63(13), STR_62(13), STR_61(9), 
 13114 ;;		 -> STR_60(2), STR_59(13), STR_58(9), STR_57(2), 
 13115 ;;		 -> STR_56(13), STR_55(3), STR_54(7), STR_53(13), 
 13116 ;;		 -> STR_52(10), STR_51(10), STR_50(3), STR_49(7), 
 13117 ;;		 -> STR_48(37), STR_47(8), STR_46(2), STR_45(13), 
 13118 ;;		 -> STR_44(13), STR_43(13), STR_42(8), STR_41(2), 
 13119 ;;		 -> STR_40(7), STR_39(6), STR_38(7), STR_37(6), 
 13120 ;;		 -> STR_36(13), STR_35(8), STR_34(13), STR_33(13), 
 13121 ;;		 -> STR_32(13), STR_31(13), STR_30(13), STR_29(13), 
 13122 ;;		 -> STR_28(13), STR_27(9), STR_26(8), STR_25(5), 
 13123 ;;		 -> STR_24(8), STR_23(5), STR_22(13), STR_21(13), 
 13124 ;;		 -> STR_20(13), STR_19(13), STR_18(13), STR_17(9), 
 13125 ;;		 -> STR_16(3), STR_15(3), STR_14(13), STR_13(13), 
 13126 ;;		 -> STR_12(3), STR_11(3), STR_10(4), STR_9(2), 
 13127 ;;		 -> STR_8(4), STR_7(8), STR_6(7), STR_5(8), 
 13128 ;;		 -> STR_4(2), STR_3(4), str(10), STR_2(8), 
 13129 ;;		 -> STR_1(57), 
 13130 ;; Auto vars:     Size  Location     Type
 13131 ;;  col             1   21[BANK0 ] unsigned char 
 13132 ;;  row_offsets     4   17[BANK0 ] unsigned char [4]
 13133 ;; Return value:  Size  Location     Type
 13134 ;;                  1    wreg      void 
 13135 ;; Registers used:
 13136 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13137 ;; Tracked objects:
 13138 ;;		On entry : 0/0
 13139 ;;		On exit  : 0/0
 13140 ;;		Unchanged: 0/0
 13141 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13142 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13143 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13144 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13145 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13146 ;;Total ram usage:        9 bytes
 13147 ;; Hardware stack levels used:    1
 13148 ;; Hardware stack levels required when called:    6
 13149 ;; This function calls:
 13150 ;;		_OLED_command
 13151 ;;		_OLED_write
 13152 ;; This function is called by:
 13153 ;;		_statusView
 13154 ;;		_channelView
 13155 ;;		_channelSetup
 13156 ;;		_setOutputPower
 13157 ;;		_setLensDia
 13158 ;;		_setup
 13159 ;;		_setDPOffset
 13160 ;;		_setSkyTemp
 13161 ;;		_setFudgeFactor
 13162 ;;		_viewErrorMessage
 13163 ;;		_systemCheck
 13164 ;; This function uses a non-reentrant model
 13165 ;;
 13166                           
 13167                           
 13168                           ;psect for function _OLED_print_xy
 13169  3497                     _OLED_print_xy:	
 13170                           
 13171                           ;incstack = 0
 13172                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13173                           ;OLED_print_xy@col stored from wreg
 13174  3497  0140               	movlb	0	; select bank0
 13175  3498  00B5               	movwf	OLED_print_xy@col
 13176                           
 13177                           ;oled.c: 144: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 145: {;oled.
      +                          c: 146:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 13178  3499  0144               	movlb	4	; select bank4
 13179  349A  086B               	movf	(OLED_print_xy@F7967+3)^(0+512),w
 13180  349B  0140               	movlb	0	; select bank0
 13181  349C  00B4               	movwf	OLED_print_xy@row_offsets+3
 13182  349D  0144               	movlb	4	; select bank4
 13183  349E  086A               	movf	(OLED_print_xy@F7967+2)^(0+512),w
 13184  349F  0140               	movlb	0	; select bank0
 13185  34A0  00B3               	movwf	OLED_print_xy@row_offsets+2
 13186  34A1  0144               	movlb	4	; select bank4
 13187  34A2  0869               	movf	(OLED_print_xy@F7967+1)^(0+512),w
 13188  34A3  0140               	movlb	0	; select bank0
 13189  34A4  00B2               	movwf	OLED_print_xy@row_offsets+1
 13190  34A5  0144               	movlb	4	; select bank4
 13191  34A6  0868               	movf	OLED_print_xy@F7967^(0+512),w
 13192  34A7  0140               	movlb	0	; select bank0
 13193  34A8  00B1               	movwf	OLED_print_xy@row_offsets
 13194                           
 13195                           ;oled.c: 148:  OLED_command(0x80 | (col + row_offsets[row]));
 13196  34A9  082D               	movf	OLED_print_xy@row,w
 13197  34AA  3E31               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 13198  34AB  0086               	movwf	6
 13199  34AC  0187               	clrf	7
 13200  34AD  0801               	movf	1,w
 13201  34AE  0735               	addwf	OLED_print_xy@col,w
 13202  34AF  3880               	iorlw	128
 13203  34B0  31B2  22E2  31B4   	fcall	_OLED_command
 13204  34B3                     l7266:	
 13205                           ;oled.c: 149:  while (*s != (char) ((void*)0)) {
 13206                           
 13207                           
 13208                           ;oled.c: 149:  while (*s != (char) ((void*)0)) {
 13209  34B3  0140               	movlb	0	; select bank0
 13210  34B4  082E               	movf	OLED_print_xy@s,w
 13211  34B5  0084               	movwf	4
 13212  34B6  082F               	movf	OLED_print_xy@s+1,w
 13213  34B7  0085               	movwf	5
 13214  34B8  0012               	moviw fsr0++
 13215  34B9  1903               	btfsc	3,2
 13216  34BA  0008               	return
 13217                           
 13218                           ;oled.c: 150:   OLED_write(*s++);
 13219  34BB  082E               	movf	OLED_print_xy@s,w
 13220  34BC  0084               	movwf	4
 13221  34BD  082F               	movf	OLED_print_xy@s+1,w
 13222  34BE  0085               	movwf	5
 13223  34BF  0800               	movf	0,w	;code access
 13224  34C0  31B2  22F6  31B4   	fcall	_OLED_write
 13225  34C3  3001               	movlw	1
 13226  34C4  0140               	movlb	0	; select bank0
 13227  34C5  07AE               	addwf	OLED_print_xy@s,f
 13228  34C6  3000               	movlw	0
 13229  34C7  3DAF               	addwfc	OLED_print_xy@s+1,f
 13230  34C8  2CB3               	goto	l7266
 13231  34C9                     __end_of_OLED_print_xy:	
 13232                           
 13233                           	psect	text23
 13234  3725                     __ptext23:	
 13235 ;; *************** function _initialize *****************
 13236 ;; Defined at:
 13237 ;;		line 122 in file "main.c"
 13238 ;; Parameters:    Size  Location     Type
 13239 ;;		None
 13240 ;; Auto vars:     Size  Location     Type
 13241 ;;		None
 13242 ;; Return value:  Size  Location     Type
 13243 ;;                  1    wreg      void 
 13244 ;; Registers used:
 13245 ;;		wreg, status,2, status,0
 13246 ;; Tracked objects:
 13247 ;;		On entry : 0/0
 13248 ;;		On exit  : 0/0
 13249 ;;		Unchanged: 0/0
 13250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13252 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13254 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13255 ;;Total ram usage:        0 bytes
 13256 ;; Hardware stack levels used:    1
 13257 ;; Hardware stack levels required when called:    3
 13258 ;; This function calls:
 13259 ;;		Nothing
 13260 ;; This function is called by:
 13261 ;;		_main
 13262 ;; This function uses a non-reentrant model
 13263 ;;
 13264                           
 13265                           
 13266                           ;psect for function _initialize
 13267  3725                     _initialize:	
 13268                           
 13269                           ;main.c: 124:  OSCFRQ = 0b00000010;
 13270                           
 13271                           ;incstack = 0
 13272                           ; Regs used in _initialize: [wreg+status,2+status,0]
 13273  3725  3002               	movlw	2
 13274  3726  0151               	movlb	17	; select bank17
 13275  3727  0093               	movwf	19	;volatile
 13276                           
 13277                           ;main.c: 125:  OSCCON1 = 0b01100000;
 13278  3728  3060               	movlw	96
 13279  3729  008D               	movwf	13	;volatile
 13280  372A                     l139:	
 13281                           ;main.c: 126:  while (!OSCCON3bits.ORDY);
 13282                           
 13283  372A  1E0F               	btfss	15,4	;volatile
 13284  372B  2F2A               	goto	l139
 13285                           
 13286                           ;main.c: 129:  RX1DTPPSbits.RX1DTPPS = 0x17;
 13287  372C  017D               	movlb	61	; select bank61
 13288  372D  084B               	movf	75,w	;volatile
 13289  372E  39C0               	andlw	-64
 13290  372F  3817               	iorlw	23
 13291  3730  00CB               	movwf	75	;volatile
 13292                           
 13293                           ;main.c: 130:  RC6PPS = 0x0F;
 13294  3731  300F               	movlw	15
 13295  3732  017E               	movlb	62	; select bank62
 13296  3733  00A6               	movwf	38	;volatile
 13297                           
 13298                           ;main.c: 133:  ANSELA = 0b01000000;
 13299  3734  3040               	movlw	64
 13300  3735  00B8               	movwf	56	;volatile
 13301                           
 13302                           ;main.c: 134:  ANSELB = 0b00000000;
 13303  3736  01C3               	clrf	67	;volatile
 13304                           
 13305                           ;main.c: 135:  ANSELC = 0b00000011;
 13306  3737  3003               	movlw	3
 13307  3738  00CE               	movwf	78	;volatile
 13308                           
 13309                           ;main.c: 138:  TRISA = 0b11110000;
 13310  3739  30F0               	movlw	240
 13311  373A  0140               	movlb	0	; select bank0
 13312  373B  0092               	movwf	18	;volatile
 13313                           
 13314                           ;main.c: 139:  TRISB = 0b00000000;
 13315  373C  0193               	clrf	19	;volatile
 13316                           
 13317                           ;main.c: 140:  TRISC = 0b10000111;
 13318  373D  3087               	movlw	135
 13319  373E  0094               	movwf	20	;volatile
 13320                           
 13321                           ;main.c: 143:  ADCON0bits.ADON = 1;
 13322  373F  0141               	movlb	1	; select bank1
 13323  3740  141D               	bsf	29,0	;volatile
 13324                           
 13325                           ;main.c: 144:  ADCON1 = 0b11100000;
 13326  3741  30E0               	movlw	224
 13327  3742  009E               	movwf	30	;volatile
 13328                           
 13329                           ;main.c: 147:  T0CON0 = 0b10000000;
 13330  3743  3080               	movlw	128
 13331  3744  014B               	movlb	11	; select bank11
 13332  3745  009E               	movwf	30	;volatile
 13333                           
 13334                           ;main.c: 148:  T0CON1 = 0b01000111;
 13335  3746  3047               	movlw	71
 13336  3747  009F               	movwf	31	;volatile
 13337                           
 13338                           ;main.c: 149:  TMR0 = 178;
 13339  3748  30B2               	movlw	178
 13340  3749  009C               	movwf	28	;volatile
 13341                           
 13342                           ;main.c: 152:  T1CON = 0b00110011;
 13343  374A  3033               	movlw	51
 13344  374B  0144               	movlb	4	; select bank4
 13345  374C  008E               	movwf	14	;volatile
 13346                           
 13347                           ;main.c: 153:  T1CLK = 0b00000001;
 13348  374D  3001               	movlw	1
 13349  374E  0091               	movwf	17	;volatile
 13350                           
 13351                           ;main.c: 154:  TMR1 = 53035;
 13352  374F  30CF               	movlw	207
 13353  3750  008D               	movwf	13	;volatile
 13354  3751  302B               	movlw	43
 13355  3752  008C               	movwf	12	;volatile
 13356                           
 13357                           ;main.c: 157:  PIE0 = 0b00110000;
 13358  3753  3030               	movlw	48
 13359  3754  014E               	movlb	14	; select bank14
 13360  3755  0096               	movwf	22	;volatile
 13361                           
 13362                           ;main.c: 158:  PIE3 = 0b00100000;
 13363  3756  3020               	movlw	32
 13364  3757  0099               	movwf	25	;volatile
 13365                           
 13366                           ;main.c: 159:  PIE4 = 0b00000001;
 13367  3758  3001               	movlw	1
 13368  3759  009A               	movwf	26	;volatile
 13369                           
 13370                           ;main.c: 160:  INTCON = 0b11000000;
 13371  375A  30C0               	movlw	192
 13372  375B  008B               	movwf	11	;volatile
 13373                           
 13374                           ;main.c: 163:  IOCAP = 0b10110000;
 13375  375C  30B0               	movlw	176
 13376  375D  017E               	movlb	62	; select bank62
 13377  375E  00BD               	movwf	61	;volatile
 13378                           
 13379                           ;main.c: 164:  IOCAN = 0b10110000;
 13380  375F  30B0               	movlw	176
 13381  3760  00BE               	movwf	62	;volatile
 13382                           
 13383                           ;main.c: 165:  IOCCN = 0b00000100;
 13384  3761  3004               	movlw	4
 13385  3762  00D4               	movwf	84	;volatile
 13386                           
 13387                           ;main.c: 169:  BAUD1CON = 0b00001000;
 13388  3763  3008               	movlw	8
 13389  3764  0142               	movlb	2	; select bank2
 13390  3765  009F               	movwf	31	;volatile
 13391                           
 13392                           ;main.c: 170:  SPBRGL = 25;
 13393  3766  3019               	movlw	25
 13394  3767  009B               	movwf	27	;volatile
 13395                           
 13396                           ;main.c: 171:  RC1STA = 0b10010000;
 13397  3768  3090               	movlw	144
 13398  3769  009D               	movwf	29	;volatile
 13399                           
 13400                           ;main.c: 172:  TX1STA = 0b00100000;
 13401  376A  3020               	movlw	32
 13402  376B  009E               	movwf	30	;volatile
 13403  376C  0008               	return
 13404  376D                     __end_of_initialize:	
 13405                           
 13406                           	psect	text24
 13407  080B                     __ptext24:	
 13408 ;; *************** function _initGlobalData *****************
 13409 ;; Defined at:
 13410 ;;		line 88 in file "main.c"
 13411 ;; Parameters:    Size  Location     Type
 13412 ;;		None
 13413 ;; Auto vars:     Size  Location     Type
 13414 ;;  chData          2   24[BANK0 ] PTR struct .
 13415 ;;		 -> data.heater(124), data(166), 
 13416 ;;  n               1   23[BANK0 ] unsigned char 
 13417 ;; Return value:  Size  Location     Type
 13418 ;;                  1    wreg      void 
 13419 ;; Registers used:
 13420 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13421 ;; Tracked objects:
 13422 ;;		On entry : 0/0
 13423 ;;		On exit  : 0/0
 13424 ;;		Unchanged: 0/0
 13425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13427 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13428 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13429 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13430 ;;Total ram usage:        7 bytes
 13431 ;; Hardware stack levels used:    1
 13432 ;; Hardware stack levels required when called:    4
 13433 ;; This function calls:
 13434 ;;		___wmul
 13435 ;; This function is called by:
 13436 ;;		_main
 13437 ;; This function uses a non-reentrant model
 13438 ;;
 13439                           
 13440                           
 13441                           ;psect for function _initGlobalData
 13442  080B                     _initGlobalData:	
 13443                           
 13444                           ;main.c: 90:  uint8_t n;;main.c: 91:  t_heater *chData;;main.c: 93:  data.tempC = 0;
 13445                           
 13446                           ;incstack = 0
 13447                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13448  080B  304A               	movlw	74
 13449  080C  0086               	movwf	6
 13450  080D  3027               	movlw	39
 13451  080E  0087               	movwf	7
 13452  080F  3000               	movlw	0
 13453  0810  3FC0               	movwi [0]fsr1
 13454  0811  3000               	movlw	0
 13455  0812  3FC1               	movwi [1]fsr1
 13456  0813  3000               	movlw	0
 13457  0814  3FC2               	movwi [2]fsr1
 13458  0815  3000               	movlw	0
 13459  0816  3FC3               	movwi [3]fsr1
 13460                           
 13461                           ;main.c: 94:  data.relHum = 0;
 13462  0817  304A               	movlw	74
 13463  0818  0086               	movwf	6
 13464  0819  3027               	movlw	39
 13465  081A  0087               	movwf	7
 13466  081B  3144               	addfsr 1,4
 13467  081C  3000               	movlw	0
 13468  081D  3FC0               	movwi [0]fsr1
 13469  081E  3000               	movlw	0
 13470  081F  3FC1               	movwi [1]fsr1
 13471  0820  3000               	movlw	0
 13472  0821  3FC2               	movwi [2]fsr1
 13473  0822  3000               	movlw	0
 13474  0823  3FC3               	movwi [3]fsr1
 13475                           
 13476                           ;main.c: 95:  data.dewPointC = 0;
 13477  0824  304A               	movlw	74
 13478  0825  0086               	movwf	6
 13479  0826  3027               	movlw	39
 13480  0827  0087               	movwf	7
 13481  0828  3148               	addfsr 1,8
 13482  0829  3000               	movlw	0
 13483  082A  3FC0               	movwi [0]fsr1
 13484  082B  3000               	movlw	0
 13485  082C  3FC1               	movwi [1]fsr1
 13486  082D  3000               	movlw	0
 13487  082E  3FC2               	movwi [2]fsr1
 13488  082F  3000               	movlw	0
 13489  0830  3FC3               	movwi [3]fsr1
 13490                           
 13491                           ;main.c: 96:  data.sensorVersion = 0;
 13492  0831  304A               	movlw	74
 13493  0832  0086               	movwf	6
 13494  0833  3027               	movlw	39
 13495  0834  0087               	movwf	7
 13496  0835  314C               	addfsr 1,12
 13497  0836  0181               	clrf	1
 13498                           
 13499                           ;main.c: 97:  data.tempAux = 0;
 13500  0837  304A               	movlw	74
 13501  0838  0086               	movwf	6
 13502  0839  3027               	movlw	39
 13503  083A  0087               	movwf	7
 13504  083B  314D               	addfsr 1,13
 13505  083C  3000               	movlw	0
 13506  083D  3FC0               	movwi [0]fsr1
 13507  083E  3000               	movlw	0
 13508  083F  3FC1               	movwi [1]fsr1
 13509  0840  3000               	movlw	0
 13510  0841  3FC2               	movwi [2]fsr1
 13511  0842  3000               	movlw	0
 13512  0843  3FC3               	movwi [3]fsr1
 13513                           
 13514                           ;main.c: 98:  data.voltage = 0;
 13515  0844  304A               	movlw	74
 13516  0845  0086               	movwf	6
 13517  0846  3027               	movlw	39
 13518  0847  0087               	movwf	7
 13519  0848  3151               	addfsr 1,17
 13520  0849  3000               	movlw	0
 13521  084A  3FC0               	movwi [0]fsr1
 13522  084B  3000               	movlw	0
 13523  084C  3FC1               	movwi [1]fsr1
 13524  084D  3000               	movlw	0
 13525  084E  3FC2               	movwi [2]fsr1
 13526  084F  3000               	movlw	0
 13527  0850  3FC3               	movwi [3]fsr1
 13528                           
 13529                           ;main.c: 99:  data.current = 0;
 13530  0851  304A               	movlw	74
 13531  0852  0086               	movwf	6
 13532  0853  3027               	movlw	39
 13533  0854  0087               	movwf	7
 13534  0855  3155               	addfsr 1,21
 13535  0856  3000               	movlw	0
 13536  0857  3FC0               	movwi [0]fsr1
 13537  0858  3000               	movlw	0
 13538  0859  3FC1               	movwi [1]fsr1
 13539  085A  3000               	movlw	0
 13540  085B  3FC2               	movwi [2]fsr1
 13541  085C  3000               	movlw	0
 13542  085D  3FC3               	movwi [3]fsr1
 13543                           
 13544                           ;main.c: 100:  data.power = 0;
 13545  085E  304A               	movlw	74
 13546  085F  0086               	movwf	6
 13547  0860  3027               	movlw	39
 13548  0861  0087               	movwf	7
 13549  0862  3159               	addfsr 1,25
 13550  0863  3000               	movlw	0
 13551  0864  3FC0               	movwi [0]fsr1
 13552  0865  3000               	movlw	0
 13553  0866  3FC1               	movwi [1]fsr1
 13554  0867  3000               	movlw	0
 13555  0868  3FC2               	movwi [2]fsr1
 13556  0869  3000               	movlw	0
 13557  086A  3FC3               	movwi [3]fsr1
 13558                           
 13559                           ;main.c: 101:  data.dpOffset = 3.0;
 13560  086B  304A               	movlw	74
 13561  086C  0086               	movwf	6
 13562  086D  3027               	movlw	39
 13563  086E  0087               	movwf	7
 13564  086F  315D               	addfsr 1,29
 13565  0870  3000               	movlw	0
 13566  0871  3FC0               	movwi [0]fsr1
 13567  0872  3000               	movlw	0
 13568  0873  3FC1               	movwi [1]fsr1
 13569  0874  3040               	movlw	64
 13570  0875  3FC2               	movwi [2]fsr1
 13571  0876  3040               	movlw	64
 13572  0877  3FC3               	movwi [3]fsr1
 13573                           
 13574                           ;main.c: 102:  data.skyTemp = -40;
 13575  0878  306B               	movlw	107
 13576  0879  0086               	movwf	6
 13577  087A  3027               	movlw	39
 13578  087B  0087               	movwf	7
 13579  087C  3000               	movlw	0
 13580  087D  3FC0               	movwi [0]fsr1
 13581  087E  3000               	movlw	0
 13582  087F  3FC1               	movwi [1]fsr1
 13583  0880  3020               	movlw	32
 13584  0881  3FC2               	movwi [2]fsr1
 13585  0882  30C2               	movlw	194
 13586  0883  3FC3               	movwi [3]fsr1
 13587                           
 13588                           ;main.c: 103:  data.fudgeFactor = 1.0;
 13589  0884  306F               	movlw	111
 13590  0885  0086               	movwf	6
 13591  0886  3027               	movlw	39
 13592  0887  0087               	movwf	7
 13593  0888  3000               	movlw	0
 13594  0889  3FC0               	movwi [0]fsr1
 13595  088A  3000               	movlw	0
 13596  088B  3FC1               	movwi [1]fsr1
 13597  088C  3080               	movlw	128
 13598  088D  3FC2               	movwi [2]fsr1
 13599  088E  303F               	movlw	63
 13600  088F  3FC3               	movwi [3]fsr1
 13601                           
 13602                           ;main.c: 105:  for (n = 0; n < 4; n++) {
 13603  0890  0140               	movlb	0	; select bank0
 13604  0891  01B7               	clrf	initGlobalData@n
 13605  0892                     l8166:	
 13606                           
 13607                           ;main.c: 106:   chData = &data.heater[n];
 13608  0892  0837               	movf	initGlobalData@n,w
 13609  0893  00B3               	movwf	??_initGlobalData
 13610  0894  01B4               	clrf	??_initGlobalData+1
 13611  0895  0833               	movf	??_initGlobalData,w
 13612  0896  00AD               	movwf	___wmul@multiplier
 13613  0897  0834               	movf	??_initGlobalData+1,w
 13614  0898  00AE               	movwf	___wmul@multiplier+1
 13615  0899  301F               	movlw	31
 13616  089A  00AF               	movwf	___wmul@multiplicand
 13617  089B  3000               	movlw	0
 13618  089C  00B0               	movwf	___wmul@multiplicand+1
 13619  089D  31B3  2371  3188   	fcall	___wmul
 13620  08A0  3074               	movlw	116
 13621  08A1  0140               	movlb	0	; select bank0
 13622  08A2  00B5               	movwf	??_initGlobalData+2
 13623  08A3  3027               	movlw	39
 13624  08A4  00B6               	movwf	??_initGlobalData+3
 13625  08A5  082D               	movf	?___wmul,w
 13626  08A6  0735               	addwf	??_initGlobalData+2,w
 13627  08A7  00B8               	movwf	initGlobalData@chData
 13628  08A8  082E               	movf	?___wmul+1,w
 13629  08A9  3D36               	addwfc	??_initGlobalData+3,w
 13630  08AA  00B9               	movwf	initGlobalData@chData+1
 13631                           
 13632                           ;main.c: 107:   chData->lensDia = 4;
 13633  08AB  0838               	movf	initGlobalData@chData,w
 13634  08AC  0086               	movwf	6
 13635  08AD  0839               	movf	initGlobalData@chData+1,w
 13636  08AE  0087               	movwf	7
 13637  08AF  3155               	addfsr 1,21
 13638  08B0  3000               	movlw	0
 13639  08B1  3FC0               	movwi [0]fsr1
 13640  08B2  3000               	movlw	0
 13641  08B3  3FC1               	movwi [1]fsr1
 13642  08B4  3080               	movlw	128
 13643  08B5  3FC2               	movwi [2]fsr1
 13644  08B6  3040               	movlw	64
 13645  08B7  3FC3               	movwi [3]fsr1
 13646                           
 13647                           ;main.c: 108:   chData->status = CH_UNCHECKED;
 13648  08B8  0838               	movf	initGlobalData@chData,w
 13649  08B9  3E1E               	addlw	30
 13650  08BA  00B3               	movwf	??_initGlobalData
 13651  08BB  3000               	movlw	0
 13652  08BC  3D39               	addwfc	initGlobalData@chData+1,w
 13653  08BD  00B4               	movwf	??_initGlobalData+1
 13654  08BE  0833               	movf	??_initGlobalData,w
 13655  08BF  0086               	movwf	6
 13656  08C0  0834               	movf	??_initGlobalData+1,w
 13657  08C1  0087               	movwf	7
 13658  08C2  3005               	movlw	5
 13659  08C3  0081               	movwf	1
 13660                           
 13661                           ;main.c: 109:   chData->mode = MODE_AUTO;
 13662  08C4  0838               	movf	initGlobalData@chData,w
 13663  08C5  3E1D               	addlw	29
 13664  08C6  00B3               	movwf	??_initGlobalData
 13665  08C7  3000               	movlw	0
 13666  08C8  3D39               	addwfc	initGlobalData@chData+1,w
 13667  08C9  00B4               	movwf	??_initGlobalData+1
 13668  08CA  0833               	movf	??_initGlobalData,w
 13669  08CB  0086               	movwf	6
 13670  08CC  0834               	movf	??_initGlobalData+1,w
 13671  08CD  0087               	movwf	7
 13672  08CE  3001               	movlw	1
 13673  08CF  0081               	movwf	1
 13674                           
 13675                           ;main.c: 110:   chData->Pmax = 0;
 13676  08D0  0838               	movf	initGlobalData@chData,w
 13677  08D1  0086               	movwf	6
 13678  08D2  0839               	movf	initGlobalData@chData+1,w
 13679  08D3  0087               	movwf	7
 13680  08D4  3144               	addfsr 1,4
 13681  08D5  3000               	movlw	0
 13682  08D6  3FC0               	movwi [0]fsr1
 13683  08D7  3000               	movlw	0
 13684  08D8  3FC1               	movwi [1]fsr1
 13685  08D9  3000               	movlw	0
 13686  08DA  3FC2               	movwi [2]fsr1
 13687  08DB  3000               	movlw	0
 13688  08DC  3FC3               	movwi [3]fsr1
 13689                           
 13690                           ;main.c: 111:   chData->Pset = -1;
 13691  08DD  0838               	movf	initGlobalData@chData,w
 13692  08DE  0086               	movwf	6
 13693  08DF  0839               	movf	initGlobalData@chData+1,w
 13694  08E0  0087               	movwf	7
 13695  08E1  3150               	addfsr 1,16
 13696  08E2  3000               	movlw	0
 13697  08E3  3FC0               	movwi [0]fsr1
 13698  08E4  3000               	movlw	0
 13699  08E5  3FC1               	movwi [1]fsr1
 13700  08E6  3080               	movlw	128
 13701  08E7  3FC2               	movwi [2]fsr1
 13702  08E8  30BF               	movlw	191
 13703  08E9  3FC3               	movwi [3]fsr1
 13704                           
 13705                           ;main.c: 112:   chData->Preq = 0;
 13706  08EA  0838               	movf	initGlobalData@chData,w
 13707  08EB  0086               	movwf	6
 13708  08EC  0839               	movf	initGlobalData@chData+1,w
 13709  08ED  0087               	movwf	7
 13710  08EE  3148               	addfsr 1,8
 13711  08EF  3000               	movlw	0
 13712  08F0  3FC0               	movwi [0]fsr1
 13713  08F1  3000               	movlw	0
 13714  08F2  3FC1               	movwi [1]fsr1
 13715  08F3  3000               	movlw	0
 13716  08F4  3FC2               	movwi [2]fsr1
 13717  08F5  3000               	movlw	0
 13718  08F6  3FC3               	movwi [3]fsr1
 13719                           
 13720                           ;main.c: 113:   chData->Patt = 0;
 13721  08F7  0838               	movf	initGlobalData@chData,w
 13722  08F8  0086               	movwf	6
 13723  08F9  0839               	movf	initGlobalData@chData+1,w
 13724  08FA  0087               	movwf	7
 13725  08FB  314C               	addfsr 1,12
 13726  08FC  3000               	movlw	0
 13727  08FD  3FC0               	movwi [0]fsr1
 13728  08FE  3000               	movlw	0
 13729  08FF  3FC1               	movwi [1]fsr1
 13730  0900  3000               	movlw	0
 13731  0901  3FC2               	movwi [2]fsr1
 13732  0902  3000               	movlw	0
 13733  0903  3FC3               	movwi [3]fsr1
 13734                           
 13735                           ;main.c: 114:   chData->current = 0;
 13736  0904  0838               	movf	initGlobalData@chData,w
 13737  0905  0086               	movwf	6
 13738  0906  0839               	movf	initGlobalData@chData+1,w
 13739  0907  0087               	movwf	7
 13740  0908  3000               	movlw	0
 13741  0909  3FC0               	movwi [0]fsr1
 13742  090A  3000               	movlw	0
 13743  090B  3FC1               	movwi [1]fsr1
 13744  090C  3000               	movlw	0
 13745  090D  3FC2               	movwi [2]fsr1
 13746  090E  3000               	movlw	0
 13747  090F  3FC3               	movwi [3]fsr1
 13748                           
 13749                           ;main.c: 115:  }
 13750  0910  3001               	movlw	1
 13751  0911  00B3               	movwf	??_initGlobalData
 13752  0912  0833               	movf	??_initGlobalData,w
 13753  0913  07B7               	addwf	initGlobalData@n,f
 13754  0914  3004               	movlw	4
 13755  0915  0237               	subwf	initGlobalData@n,w
 13756  0916  1803               	btfsc	3,0
 13757  0917  0008               	return
 13758  0918  2892               	goto	l8166
 13759  0919                     __end_of_initGlobalData:	
 13760                           
 13761                           	psect	text25
 13762  3359                     __ptext25:	
 13763 ;; *************** function _getLastError *****************
 13764 ;; Defined at:
 13765 ;;		line 24 in file "error.c"
 13766 ;; Parameters:    Size  Location     Type
 13767 ;;		None
 13768 ;; Auto vars:     Size  Location     Type
 13769 ;;		None
 13770 ;; Return value:  Size  Location     Type
 13771 ;;                  1    wreg      enum E8249
 13772 ;; Registers used:
 13773 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13774 ;; Tracked objects:
 13775 ;;		On entry : 0/0
 13776 ;;		On exit  : 0/0
 13777 ;;		Unchanged: 0/0
 13778 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13779 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13780 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13781 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13782 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13783 ;;Total ram usage:        4 bytes
 13784 ;; Hardware stack levels used:    1
 13785 ;; Hardware stack levels required when called:    3
 13786 ;; This function calls:
 13787 ;;		Nothing
 13788 ;; This function is called by:
 13789 ;;		_main
 13790 ;; This function uses a non-reentrant model
 13791 ;;
 13792                           
 13793                           
 13794                           ;psect for function _getLastError
 13795  3359                     _getLastError:	
 13796                           
 13797                           ;error.c: 26:  return (head == tail) ? NO_ERROR : errorMessageQueue[tail];
 13798                           
 13799                           ;incstack = 0
 13800                           ; Regs used in _getLastError: [wreg+fsr1l+fsr1h+status,2+status,0]
 13801  3359  0142               	movlb	2	; select bank2
 13802  335A  0865               	movf	_head^(0+256),w
 13803  335B  067C               	xorwf	_tail,w
 13804  335C  1903               	skipnz
 13805  335D  2B6C               	goto	l8590
 13806  335E  087C               	movf	_tail,w
 13807  335F  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 13808  3360  0086               	movwf	6
 13809  3361  3002               	movlw	2	; select bank4/5
 13810  3362  0087               	movwf	7
 13811  3363  0801               	movf	1,w
 13812  3364  0140               	movlb	0	; select bank0
 13813  3365  00A0               	movwf	??_getLastError
 13814  3366  01A1               	clrf	??_getLastError+1
 13815  3367  0820               	movf	??_getLastError,w
 13816  3368  00A2               	movwf	_getLastError$1358
 13817  3369  0821               	movf	??_getLastError+1,w
 13818  336A  00A3               	movwf	_getLastError$1358+1
 13819  336B  2B6F               	goto	l8592
 13820  336C                     l8590:	
 13821  336C  0140               	movlb	0	; select bank0
 13822  336D  01A2               	clrf	_getLastError$1358
 13823  336E  01A3               	clrf	_getLastError$1358+1
 13824  336F                     l8592:	
 13825  336F  0822               	movf	_getLastError$1358,w
 13826  3370  0008               	return
 13827  3371                     __end_of_getLastError:	
 13828                           
 13829                           	psect	text26
 13830  18FB                     __ptext26:	
 13831 ;; *************** function _getAnalogValues *****************
 13832 ;; Defined at:
 13833 ;;		line 315 in file "system.c"
 13834 ;; Parameters:    Size  Location     Type
 13835 ;;		None
 13836 ;; Auto vars:     Size  Location     Type
 13837 ;;  adc             2   17[BANK1 ] unsigned short 
 13838 ;; Return value:  Size  Location     Type
 13839 ;;                  1    wreg      void 
 13840 ;; Registers used:
 13841 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13842 ;; Tracked objects:
 13843 ;;		On entry : 0/0
 13844 ;;		On exit  : 0/0
 13845 ;;		Unchanged: 0/0
 13846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13848 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13850 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13851 ;;Total ram usage:        6 bytes
 13852 ;; Hardware stack levels used:    1
 13853 ;; Hardware stack levels required when called:    5
 13854 ;; This function calls:
 13855 ;;		___fladd
 13856 ;;		___fldiv
 13857 ;;		___flmul
 13858 ;;		___xxtofl
 13859 ;;		_ema
 13860 ;;		_getAnalogValue
 13861 ;; This function is called by:
 13862 ;;		_main
 13863 ;; This function uses a non-reentrant model
 13864 ;;
 13865                           
 13866                           
 13867                           ;psect for function _getAnalogValues
 13868  18FB                     _getAnalogValues:	
 13869                           
 13870                           ;system.c: 317:  static uint16_t avgT, avgV, avgI;;system.c: 318:  uint16_t adc;;system.
      +                          c: 320:  adc = getAnalogValue(0b000110);
 13871                           
 13872                           ;incstack = 0
 13873                           ; Regs used in _getAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13874  18FB  3006               	movlw	6
 13875  18FC  3198  2001  3198   	fcall	_getAnalogValue
 13876  18FF  0140               	movlb	0	; select bank0
 13877  1900  0821               	movf	?_getAnalogValue+1,w
 13878  1901  0141               	movlb	1	; select bank1
 13879  1902  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 13880  1903  0140               	movlb	0	; select bank0
 13881  1904  0820               	movf	?_getAnalogValue,w
 13882  1905  0141               	movlb	1	; select bank1
 13883  1906  00B1               	movwf	getAnalogValues@adc^(0+128)
 13884                           
 13885                           ;system.c: 321:  avgT = ema(adc, avgT, ( (uint32_t)(0.5 * 65535) ));
 13886  1907  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 13887  1908  0140               	movlb	0	; select bank0
 13888  1909  00AD               	movwf	ema@in+1
 13889  190A  0141               	movlb	1	; select bank1
 13890  190B  0831               	movf	getAnalogValues@adc^(0+128),w
 13891  190C  0140               	movlb	0	; select bank0
 13892  190D  00AC               	movwf	ema@in
 13893  190E  0143               	movlb	3	; select bank3
 13894  190F  0863               	movf	(getAnalogValues@avgT+1)^(0+384),w
 13895  1910  0140               	movlb	0	; select bank0
 13896  1911  00AF               	movwf	ema@average+1
 13897  1912  0143               	movlb	3	; select bank3
 13898  1913  0862               	movf	getAnalogValues@avgT^(0+384),w
 13899  1914  0140               	movlb	0	; select bank0
 13900  1915  00AE               	movwf	ema@average
 13901  1916  3000               	movlw	0
 13902  1917  00B3               	movwf	ema@alpha+3
 13903  1918  3000               	movlw	0
 13904  1919  00B2               	movwf	ema@alpha+2
 13905  191A  307F               	movlw	127
 13906  191B  00B1               	movwf	ema@alpha+1
 13907  191C  30FF               	movlw	255
 13908  191D  00B0               	movwf	ema@alpha
 13909  191E  31A9  2126  3198   	fcall	_ema
 13910  1921  0140               	movlb	0	; select bank0
 13911  1922  082D               	movf	?_ema+1,w
 13912  1923  0143               	movlb	3	; select bank3
 13913  1924  00E3               	movwf	(getAnalogValues@avgT+1)^(0+384)
 13914  1925  0140               	movlb	0	; select bank0
 13915  1926  082C               	movf	?_ema,w
 13916  1927  0143               	movlb	3	; select bank3
 13917  1928  00E2               	movwf	getAnalogValues@avgT^(0+384)
 13918                           
 13919                           ;system.c: 322:  adc = getAnalogValue(0b010000);
 13920  1929  3010               	movlw	16
 13921  192A  3198  2001  3198   	fcall	_getAnalogValue
 13922  192D  0140               	movlb	0	; select bank0
 13923  192E  0821               	movf	?_getAnalogValue+1,w
 13924  192F  0141               	movlb	1	; select bank1
 13925  1930  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 13926  1931  0140               	movlb	0	; select bank0
 13927  1932  0820               	movf	?_getAnalogValue,w
 13928  1933  0141               	movlb	1	; select bank1
 13929  1934  00B1               	movwf	getAnalogValues@adc^(0+128)
 13930                           
 13931                           ;system.c: 323:  avgV = ema(adc, avgV, ( (uint32_t)(0.8 * 65535) ));
 13932  1935  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 13933  1936  0140               	movlb	0	; select bank0
 13934  1937  00AD               	movwf	ema@in+1
 13935  1938  0141               	movlb	1	; select bank1
 13936  1939  0831               	movf	getAnalogValues@adc^(0+128),w
 13937  193A  0140               	movlb	0	; select bank0
 13938  193B  00AC               	movwf	ema@in
 13939  193C  0143               	movlb	3	; select bank3
 13940  193D  0861               	movf	(getAnalogValues@avgV+1)^(0+384),w
 13941  193E  0140               	movlb	0	; select bank0
 13942  193F  00AF               	movwf	ema@average+1
 13943  1940  0143               	movlb	3	; select bank3
 13944  1941  0860               	movf	getAnalogValues@avgV^(0+384),w
 13945  1942  0140               	movlb	0	; select bank0
 13946  1943  00AE               	movwf	ema@average
 13947  1944  3000               	movlw	0
 13948  1945  00B3               	movwf	ema@alpha+3
 13949  1946  3000               	movlw	0
 13950  1947  00B2               	movwf	ema@alpha+2
 13951  1948  30CC               	movlw	204
 13952  1949  00B1               	movwf	ema@alpha+1
 13953  194A  30CC               	movlw	204
 13954  194B  00B0               	movwf	ema@alpha
 13955  194C  31A9  2126  3198   	fcall	_ema
 13956  194F  0140               	movlb	0	; select bank0
 13957  1950  082D               	movf	?_ema+1,w
 13958  1951  0143               	movlb	3	; select bank3
 13959  1952  00E1               	movwf	(getAnalogValues@avgV+1)^(0+384)
 13960  1953  0140               	movlb	0	; select bank0
 13961  1954  082C               	movf	?_ema,w
 13962  1955  0143               	movlb	3	; select bank3
 13963  1956  00E0               	movwf	getAnalogValues@avgV^(0+384)
 13964                           
 13965                           ;system.c: 324:  adc = getAnalogValue(0b010001);
 13966  1957  3011               	movlw	17
 13967  1958  3198  2001  3198   	fcall	_getAnalogValue
 13968  195B  0140               	movlb	0	; select bank0
 13969  195C  0821               	movf	?_getAnalogValue+1,w
 13970  195D  0141               	movlb	1	; select bank1
 13971  195E  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 13972  195F  0140               	movlb	0	; select bank0
 13973  1960  0820               	movf	?_getAnalogValue,w
 13974  1961  0141               	movlb	1	; select bank1
 13975  1962  00B1               	movwf	getAnalogValues@adc^(0+128)
 13976                           
 13977                           ;system.c: 325:  avgI = ema(adc, avgI, ( (uint32_t)(0.3 * 65535) ));
 13978  1963  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 13979  1964  0140               	movlb	0	; select bank0
 13980  1965  00AD               	movwf	ema@in+1
 13981  1966  0141               	movlb	1	; select bank1
 13982  1967  0831               	movf	getAnalogValues@adc^(0+128),w
 13983  1968  0140               	movlb	0	; select bank0
 13984  1969  00AC               	movwf	ema@in
 13985  196A  0144               	movlb	4	; select bank4
 13986  196B  0837               	movf	(getAnalogValues@avgI+1)^(0+512),w
 13987  196C  0140               	movlb	0	; select bank0
 13988  196D  00AF               	movwf	ema@average+1
 13989  196E  0144               	movlb	4	; select bank4
 13990  196F  0836               	movf	getAnalogValues@avgI^(0+512),w
 13991  1970  0140               	movlb	0	; select bank0
 13992  1971  00AE               	movwf	ema@average
 13993  1972  3000               	movlw	0
 13994  1973  00B3               	movwf	ema@alpha+3
 13995  1974  3000               	movlw	0
 13996  1975  00B2               	movwf	ema@alpha+2
 13997  1976  304C               	movlw	76
 13998  1977  00B1               	movwf	ema@alpha+1
 13999  1978  30CC               	movlw	204
 14000  1979  00B0               	movwf	ema@alpha
 14001  197A  31A9  2126  3198   	fcall	_ema
 14002  197D  0140               	movlb	0	; select bank0
 14003  197E  082D               	movf	?_ema+1,w
 14004  197F  0144               	movlb	4	; select bank4
 14005  1980  00B7               	movwf	(getAnalogValues@avgI+1)^(0+512)
 14006  1981  0140               	movlb	0	; select bank0
 14007  1982  082C               	movf	?_ema,w
 14008  1983  0144               	movlb	4	; select bank4
 14009  1984  00B6               	movwf	getAnalogValues@avgI^(0+512)
 14010                           
 14011                           ;system.c: 326:  data.tempAux = ( (avgT * 0.1191) - 34.512 );
 14012  1985  30C2               	movlw	194
 14013  1986  0140               	movlb	0	; select bank0
 14014  1987  00DE               	movwf	___fladd@b+3
 14015  1988  300A               	movlw	10
 14016  1989  00DD               	movwf	___fladd@b+2
 14017  198A  300C               	movlw	12
 14018  198B  00DC               	movwf	___fladd@b+1
 14019  198C  304A               	movlw	74
 14020  198D  00DB               	movwf	___fladd@b
 14021  198E  303D               	movlw	61
 14022  198F  00C4               	movwf	___flmul@b+3
 14023  1990  30F3               	movlw	243
 14024  1991  00C3               	movwf	___flmul@b+2
 14025  1992  30EA               	movlw	234
 14026  1993  00C2               	movwf	___flmul@b+1
 14027  1994  30B3               	movlw	179
 14028  1995  00C1               	movwf	___flmul@b
 14029  1996  0143               	movlb	3	; select bank3
 14030  1997  0862               	movf	getAnalogValues@avgT^(0+384),w
 14031  1998  0140               	movlb	0	; select bank0
 14032  1999  00B3               	movwf	___xxtofl@val
 14033  199A  0143               	movlb	3	; select bank3
 14034  199B  0863               	movf	(getAnalogValues@avgT+1)^(0+384),w
 14035  199C  0140               	movlb	0	; select bank0
 14036  199D  00B4               	movwf	___xxtofl@val+1
 14037  199E  01B5               	clrf	___xxtofl@val+2
 14038  199F  01B6               	clrf	___xxtofl@val+3
 14039  19A0  3000               	movlw	0
 14040  19A1  31AC  24D1  3198   	fcall	___xxtofl
 14041  19A4  0140               	movlb	0	; select bank0
 14042  19A5  0836               	movf	?___xxtofl+3,w
 14043  19A6  00C8               	movwf	___flmul@a+3
 14044  19A7  0835               	movf	?___xxtofl+2,w
 14045  19A8  00C7               	movwf	___flmul@a+2
 14046  19A9  0834               	movf	?___xxtofl+1,w
 14047  19AA  00C6               	movwf	___flmul@a+1
 14048  19AB  0833               	movf	?___xxtofl,w
 14049  19AC  00C5               	movwf	___flmul@a
 14050  19AD  3185  2561  3198   	fcall	___flmul
 14051  19B0  0140               	movlb	0	; select bank0
 14052  19B1  0844               	movf	?___flmul+3,w
 14053  19B2  00E2               	movwf	___fladd@a+3
 14054  19B3  0843               	movf	?___flmul+2,w
 14055  19B4  00E1               	movwf	___fladd@a+2
 14056  19B5  0842               	movf	?___flmul+1,w
 14057  19B6  00E0               	movwf	___fladd@a+1
 14058  19B7  0841               	movf	?___flmul,w
 14059  19B8  00DF               	movwf	___fladd@a
 14060  19B9  3192  2232  3198   	fcall	___fladd
 14061  19BC  304A               	movlw	74
 14062  19BD  0086               	movwf	6
 14063  19BE  3027               	movlw	39
 14064  19BF  0087               	movwf	7
 14065  19C0  314D               	addfsr 1,13
 14066  19C1  0140               	movlb	0	; select bank0
 14067  19C2  085B               	movf	?___fladd,w
 14068  19C3  3FC0               	movwi [0]fsr1
 14069  19C4  085C               	movf	?___fladd+1,w
 14070  19C5  3FC1               	movwi [1]fsr1
 14071  19C6  085D               	movf	?___fladd+2,w
 14072  19C7  3FC2               	movwi [2]fsr1
 14073  19C8  085E               	movf	?___fladd+3,w
 14074  19C9  3FC3               	movwi [3]fsr1
 14075                           
 14076                           ;system.c: 327:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 14077  19CA  3040               	movlw	64
 14078  19CB  00C4               	movwf	___flmul@b+3
 14079  19CC  30A0               	movlw	160
 14080  19CD  00C3               	movwf	___flmul@b+2
 14081  19CE  3000               	movlw	0
 14082  19CF  00C2               	movwf	___flmul@b+1
 14083  19D0  3000               	movlw	0
 14084  19D1  00C1               	movwf	___flmul@b
 14085  19D2  0143               	movlb	3	; select bank3
 14086  19D3  0860               	movf	getAnalogValues@avgV^(0+384),w
 14087  19D4  0140               	movlb	0	; select bank0
 14088  19D5  00B3               	movwf	___xxtofl@val
 14089  19D6  0143               	movlb	3	; select bank3
 14090  19D7  0861               	movf	(getAnalogValues@avgV+1)^(0+384),w
 14091  19D8  0140               	movlb	0	; select bank0
 14092  19D9  00B4               	movwf	___xxtofl@val+1
 14093  19DA  01B5               	clrf	___xxtofl@val+2
 14094  19DB  01B6               	clrf	___xxtofl@val+3
 14095  19DC  3000               	movlw	0
 14096  19DD  31AC  24D1  3198   	fcall	___xxtofl
 14097  19E0  0140               	movlb	0	; select bank0
 14098  19E1  0836               	movf	?___xxtofl+3,w
 14099  19E2  00C8               	movwf	___flmul@a+3
 14100  19E3  0835               	movf	?___xxtofl+2,w
 14101  19E4  00C7               	movwf	___flmul@a+2
 14102  19E5  0834               	movf	?___xxtofl+1,w
 14103  19E6  00C6               	movwf	___flmul@a+1
 14104  19E7  0833               	movf	?___xxtofl,w
 14105  19E8  00C5               	movwf	___flmul@a
 14106  19E9  3185  2561  3198   	fcall	___flmul
 14107  19EC  0140               	movlb	0	; select bank0
 14108  19ED  0844               	movf	?___flmul+3,w
 14109  19EE  0141               	movlb	1	; select bank1
 14110  19EF  00B0               	movwf	(_getAnalogValues$2557+3)^(0+128)
 14111  19F0  0140               	movlb	0	; select bank0
 14112  19F1  0843               	movf	?___flmul+2,w
 14113  19F2  0141               	movlb	1	; select bank1
 14114  19F3  00AF               	movwf	(_getAnalogValues$2557+2)^(0+128)
 14115  19F4  0140               	movlb	0	; select bank0
 14116  19F5  0842               	movf	?___flmul+1,w
 14117  19F6  0141               	movlb	1	; select bank1
 14118  19F7  00AE               	movwf	(_getAnalogValues$2557+1)^(0+128)
 14119  19F8  0140               	movlb	0	; select bank0
 14120  19F9  0841               	movf	?___flmul,w
 14121  19FA  0141               	movlb	1	; select bank1
 14122  19FB  00AD               	movwf	_getAnalogValues$2557^(0+128)
 14123                           
 14124                           ;system.c: 327:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 14125  19FC  3047               	movlw	71
 14126  19FD  0140               	movlb	0	; select bank0
 14127  19FE  00DE               	movwf	___fldiv@a+3
 14128  19FF  303B               	movlw	59
 14129  1A00  00DD               	movwf	___fldiv@a+2
 14130  1A01  30D1               	movlw	209
 14131  1A02  00DC               	movwf	___fldiv@a+1
 14132  1A03  3000               	movlw	0
 14133  1A04  00DB               	movwf	___fldiv@a
 14134  1A05  3043               	movlw	67
 14135  1A06  00C4               	movwf	___flmul@b+3
 14136  1A07  3045               	movlw	69
 14137  1A08  00C3               	movwf	___flmul@b+2
 14138  1A09  3000               	movlw	0
 14139  1A0A  00C2               	movwf	___flmul@b+1
 14140  1A0B  3000               	movlw	0
 14141  1A0C  00C1               	movwf	___flmul@b
 14142  1A0D  0141               	movlb	1	; select bank1
 14143  1A0E  0830               	movf	(_getAnalogValues$2557+3)^(0+128),w
 14144  1A0F  0140               	movlb	0	; select bank0
 14145  1A10  00C8               	movwf	___flmul@a+3
 14146  1A11  0141               	movlb	1	; select bank1
 14147  1A12  082F               	movf	(_getAnalogValues$2557+2)^(0+128),w
 14148  1A13  0140               	movlb	0	; select bank0
 14149  1A14  00C7               	movwf	___flmul@a+2
 14150  1A15  0141               	movlb	1	; select bank1
 14151  1A16  082E               	movf	(_getAnalogValues$2557+1)^(0+128),w
 14152  1A17  0140               	movlb	0	; select bank0
 14153  1A18  00C6               	movwf	___flmul@a+1
 14154  1A19  0141               	movlb	1	; select bank1
 14155  1A1A  082D               	movf	_getAnalogValues$2557^(0+128),w
 14156  1A1B  0140               	movlb	0	; select bank0
 14157  1A1C  00C5               	movwf	___flmul@a
 14158  1A1D  3185  2561  3198   	fcall	___flmul
 14159  1A20  0140               	movlb	0	; select bank0
 14160  1A21  0844               	movf	?___flmul+3,w
 14161  1A22  00E2               	movwf	___fldiv@b+3
 14162  1A23  0843               	movf	?___flmul+2,w
 14163  1A24  00E1               	movwf	___fldiv@b+2
 14164  1A25  0842               	movf	?___flmul+1,w
 14165  1A26  00E0               	movwf	___fldiv@b+1
 14166  1A27  0841               	movf	?___flmul,w
 14167  1A28  00DF               	movwf	___fldiv@b
 14168  1A29  319E  2628  3198   	fcall	___fldiv
 14169  1A2C  304A               	movlw	74
 14170  1A2D  0086               	movwf	6
 14171  1A2E  3027               	movlw	39
 14172  1A2F  0087               	movwf	7
 14173  1A30  3151               	addfsr 1,17
 14174  1A31  0140               	movlb	0	; select bank0
 14175  1A32  085B               	movf	?___fldiv,w
 14176  1A33  3FC0               	movwi [0]fsr1
 14177  1A34  085C               	movf	?___fldiv+1,w
 14178  1A35  3FC1               	movwi [1]fsr1
 14179  1A36  085D               	movf	?___fldiv+2,w
 14180  1A37  3FC2               	movwi [2]fsr1
 14181  1A38  085E               	movf	?___fldiv+3,w
 14182  1A39  3FC3               	movwi [3]fsr1
 14183                           
 14184                           ;system.c: 328:  data.current = ( (avgI * 5.0) / (1023.0 * 0.05 * 50.0) );
 14185  1A3A  3045               	movlw	69
 14186  1A3B  00DE               	movwf	___fldiv@a+3
 14187  1A3C  301F               	movlw	31
 14188  1A3D  00DD               	movwf	___fldiv@a+2
 14189  1A3E  30D8               	movlw	216
 14190  1A3F  00DC               	movwf	___fldiv@a+1
 14191  1A40  3000               	movlw	0
 14192  1A41  00DB               	movwf	___fldiv@a
 14193  1A42  3040               	movlw	64
 14194  1A43  00C4               	movwf	___flmul@b+3
 14195  1A44  30A0               	movlw	160
 14196  1A45  00C3               	movwf	___flmul@b+2
 14197  1A46  3000               	movlw	0
 14198  1A47  00C2               	movwf	___flmul@b+1
 14199  1A48  3000               	movlw	0
 14200  1A49  00C1               	movwf	___flmul@b
 14201  1A4A  0144               	movlb	4	; select bank4
 14202  1A4B  0836               	movf	getAnalogValues@avgI^(0+512),w
 14203  1A4C  0140               	movlb	0	; select bank0
 14204  1A4D  00B3               	movwf	___xxtofl@val
 14205  1A4E  0144               	movlb	4	; select bank4
 14206  1A4F  0837               	movf	(getAnalogValues@avgI+1)^(0+512),w
 14207  1A50  0140               	movlb	0	; select bank0
 14208  1A51  00B4               	movwf	___xxtofl@val+1
 14209  1A52  01B5               	clrf	___xxtofl@val+2
 14210  1A53  01B6               	clrf	___xxtofl@val+3
 14211  1A54  3000               	movlw	0
 14212  1A55  31AC  24D1  3198   	fcall	___xxtofl
 14213  1A58  0140               	movlb	0	; select bank0
 14214  1A59  0836               	movf	?___xxtofl+3,w
 14215  1A5A  00C8               	movwf	___flmul@a+3
 14216  1A5B  0835               	movf	?___xxtofl+2,w
 14217  1A5C  00C7               	movwf	___flmul@a+2
 14218  1A5D  0834               	movf	?___xxtofl+1,w
 14219  1A5E  00C6               	movwf	___flmul@a+1
 14220  1A5F  0833               	movf	?___xxtofl,w
 14221  1A60  00C5               	movwf	___flmul@a
 14222  1A61  3185  2561  3198   	fcall	___flmul
 14223  1A64  0140               	movlb	0	; select bank0
 14224  1A65  0844               	movf	?___flmul+3,w
 14225  1A66  00E2               	movwf	___fldiv@b+3
 14226  1A67  0843               	movf	?___flmul+2,w
 14227  1A68  00E1               	movwf	___fldiv@b+2
 14228  1A69  0842               	movf	?___flmul+1,w
 14229  1A6A  00E0               	movwf	___fldiv@b+1
 14230  1A6B  0841               	movf	?___flmul,w
 14231  1A6C  00DF               	movwf	___fldiv@b
 14232  1A6D  319E  2628  3198   	fcall	___fldiv
 14233  1A70  304A               	movlw	74
 14234  1A71  0086               	movwf	6
 14235  1A72  3027               	movlw	39
 14236  1A73  0087               	movwf	7
 14237  1A74  3155               	addfsr 1,21
 14238  1A75  0140               	movlb	0	; select bank0
 14239  1A76  085B               	movf	?___fldiv,w
 14240  1A77  3FC0               	movwi [0]fsr1
 14241  1A78  085C               	movf	?___fldiv+1,w
 14242  1A79  3FC1               	movwi [1]fsr1
 14243  1A7A  085D               	movf	?___fldiv+2,w
 14244  1A7B  3FC2               	movwi [2]fsr1
 14245  1A7C  085E               	movf	?___fldiv+3,w
 14246  1A7D  3FC3               	movwi [3]fsr1
 14247                           
 14248                           ;system.c: 329:  data.power = data.voltage * data.current;
 14249  1A7E  304A               	movlw	74
 14250  1A7F  0086               	movwf	6
 14251  1A80  3027               	movlw	39
 14252  1A81  0087               	movwf	7
 14253  1A82  3155               	addfsr 1,21
 14254  1A83  3F40               	moviw [0]fsr1
 14255  1A84  00C1               	movwf	___flmul@b
 14256  1A85  3F41               	moviw [1]fsr1
 14257  1A86  00C2               	movwf	___flmul@b+1
 14258  1A87  3F42               	moviw [2]fsr1
 14259  1A88  00C3               	movwf	___flmul@b+2
 14260  1A89  3F43               	moviw [3]fsr1
 14261  1A8A  00C4               	movwf	___flmul@b+3
 14262  1A8B  304A               	movlw	74
 14263  1A8C  0086               	movwf	6
 14264  1A8D  3027               	movlw	39
 14265  1A8E  0087               	movwf	7
 14266  1A8F  3151               	addfsr 1,17
 14267  1A90  3F40               	moviw [0]fsr1
 14268  1A91  00C5               	movwf	___flmul@a
 14269  1A92  3F41               	moviw [1]fsr1
 14270  1A93  00C6               	movwf	___flmul@a+1
 14271  1A94  3F42               	moviw [2]fsr1
 14272  1A95  00C7               	movwf	___flmul@a+2
 14273  1A96  3F43               	moviw [3]fsr1
 14274  1A97  00C8               	movwf	___flmul@a+3
 14275  1A98  3185  2561         	fcall	___flmul
 14276  1A9A  304A               	movlw	74
 14277  1A9B  0086               	movwf	6
 14278  1A9C  3027               	movlw	39
 14279  1A9D  0087               	movwf	7
 14280  1A9E  3159               	addfsr 1,25
 14281  1A9F  0140               	movlb	0	; select bank0
 14282  1AA0  0841               	movf	?___flmul,w
 14283  1AA1  3FC0               	movwi [0]fsr1
 14284  1AA2  0842               	movf	?___flmul+1,w
 14285  1AA3  3FC1               	movwi [1]fsr1
 14286  1AA4  0843               	movf	?___flmul+2,w
 14287  1AA5  3FC2               	movwi [2]fsr1
 14288  1AA6  0844               	movf	?___flmul+3,w
 14289  1AA7  3FC3               	movwi [3]fsr1
 14290  1AA8  0008               	return
 14291  1AA9                     __end_of_getAnalogValues:	
 14292                           
 14293                           	psect	text27
 14294  2DFD                     __ptext27:	
 14295 ;; *************** function _controller *****************
 14296 ;; Defined at:
 14297 ;;		line 438 in file "system.c"
 14298 ;; Parameters:    Size  Location     Type
 14299 ;;		None
 14300 ;; Auto vars:     Size  Location     Type
 14301 ;;  tick            4   22[BANK0 ] unsigned long 
 14302 ;;  n               1   26[BANK0 ] unsigned char 
 14303 ;; Return value:  Size  Location     Type
 14304 ;;                  1    wreg      unsigned char 
 14305 ;; Registers used:
 14306 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14307 ;; Tracked objects:
 14308 ;;		On entry : 0/0
 14309 ;;		On exit  : 0/0
 14310 ;;		Unchanged: 0/0
 14311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14312 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14313 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14314 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14315 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14316 ;;Total ram usage:       10 bytes
 14317 ;; Hardware stack levels used:    1
 14318 ;; Hardware stack levels required when called:    4
 14319 ;; This function calls:
 14320 ;;		___bmul
 14321 ;;		_setChannelSwitch
 14322 ;;		_timeSince
 14323 ;; This function is called by:
 14324 ;;		_main
 14325 ;; This function uses a non-reentrant model
 14326 ;;
 14327                           
 14328                           
 14329                           ;psect for function _controller
 14330  2DFD                     _controller:	
 14331                           
 14332                           ;system.c: 440:  static uint32_t dutyCycleTimer;;system.c: 441:  uint32_t tick;;system.c
      +                          : 442:  static uint8_t idle;;system.c: 443:  uint8_t n;;system.c: 445:  if (idle) {
 14333                           
 14334                           ;incstack = 0
 14335                           ; Regs used in _controller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14336  2DFD  0142               	movlb	2	; select bank2
 14337  2DFE  0860               	movf	controller@idle^(0+256),w
 14338  2DFF  1903               	btfsc	3,2
 14339  2E00  2E0C               	goto	l8560
 14340                           
 14341                           ;system.c: 446:   dutyCycleTimer = tick100ms;
 14342  2E01  0144               	movlb	4	; select bank4
 14343  2E02  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 14344  2E03  00AD               	movwf	(controller@dutyCycleTimer+3)^(0+512)
 14345  2E04  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 14346  2E05  00AC               	movwf	(controller@dutyCycleTimer+2)^(0+512)
 14347  2E06  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 14348  2E07  00AB               	movwf	(controller@dutyCycleTimer+1)^(0+512)
 14349  2E08  0832               	movf	_tick100ms^(0+512),w	;volatile
 14350  2E09  00AA               	movwf	controller@dutyCycleTimer^(0+512)
 14351                           
 14352                           ;system.c: 447:   idle = 0;
 14353  2E0A  0142               	movlb	2	; select bank2
 14354  2E0B  01E0               	clrf	controller@idle^(0+256)
 14355  2E0C                     l8560:	
 14356                           
 14357                           ;system.c: 450:  tick = timeSince(dutyCycleTimer);
 14358  2E0C  0144               	movlb	4	; select bank4
 14359  2E0D  082D               	movf	(controller@dutyCycleTimer+3)^(0+512),w
 14360  2E0E  0140               	movlb	0	; select bank0
 14361  2E0F  00A3               	movwf	timeSince@since+3
 14362  2E10  0144               	movlb	4	; select bank4
 14363  2E11  082C               	movf	(controller@dutyCycleTimer+2)^(0+512),w
 14364  2E12  0140               	movlb	0	; select bank0
 14365  2E13  00A2               	movwf	timeSince@since+2
 14366  2E14  0144               	movlb	4	; select bank4
 14367  2E15  082B               	movf	(controller@dutyCycleTimer+1)^(0+512),w
 14368  2E16  0140               	movlb	0	; select bank0
 14369  2E17  00A1               	movwf	timeSince@since+1
 14370  2E18  0144               	movlb	4	; select bank4
 14371  2E19  082A               	movf	controller@dutyCycleTimer^(0+512),w
 14372  2E1A  0140               	movlb	0	; select bank0
 14373  2E1B  00A0               	movwf	timeSince@since
 14374  2E1C  3190  2000  31AD   	fcall	_timeSince
 14375  2E1F  0140               	movlb	0	; select bank0
 14376  2E20  0823               	movf	?_timeSince+3,w
 14377  2E21  00B9               	movwf	controller@tick+3
 14378  2E22  0822               	movf	?_timeSince+2,w
 14379  2E23  00B8               	movwf	controller@tick+2
 14380  2E24  0821               	movf	?_timeSince+1,w
 14381  2E25  00B7               	movwf	controller@tick+1
 14382  2E26  0820               	movf	?_timeSince,w
 14383  2E27  00B6               	movwf	controller@tick
 14384                           
 14385                           ;system.c: 451:  if (tick <= 100) {
 14386  2E28  0839               	movf	controller@tick+3,w
 14387  2E29  1D03               	btfss	3,2
 14388  2E2A  2E99               	goto	l908
 14389  2E2B  0838               	movf	controller@tick+2,w
 14390  2E2C  1D03               	btfss	3,2
 14391  2E2D  2E99               	goto	l908
 14392  2E2E  0837               	movf	controller@tick+1,w
 14393  2E2F  1D03               	btfss	3,2
 14394  2E30  2E99               	goto	l908
 14395  2E31  3065               	movlw	101
 14396  2E32  0236               	subwf	controller@tick,w
 14397  2E33  1803               	btfsc	3,0
 14398  2E34  2E99               	goto	l908
 14399                           
 14400                           ;system.c: 452:   for(n = 0; n < 4; n++) {
 14401  2E35  01BA               	clrf	controller@n
 14402  2E36                     l8570:	
 14403                           
 14404                           ;system.c: 453:    if ((tick >= virtChannels[n].start) && (tick < virtChannels[n].stop))
 14405  2E36  3009               	movlw	9
 14406  2E37  00B1               	movwf	??_controller
 14407  2E38  0831               	movf	??_controller,w
 14408  2E39  00A9               	movwf	___bmul@multiplicand
 14409  2E3A  083A               	movf	controller@n,w
 14410  2E3B  31B3  2330  31AD   	fcall	___bmul
 14411  2E3E  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 14412  2E3F  0086               	movwf	6
 14413  2E40  3002               	movlw	2	; select bank5/6
 14414  2E41  0087               	movwf	7
 14415  2E42  0801               	movf	1,w
 14416  2E43  0140               	movlb	0	; select bank0
 14417  2E44  00B2               	movwf	??_controller+1
 14418  2E45  01B3               	clrf	??_controller+2
 14419  2E46  01B4               	clrf	??_controller+3
 14420  2E47  01B5               	clrf	??_controller+4
 14421  2E48  0835               	movf	??_controller+4,w
 14422  2E49  0239               	subwf	controller@tick+3,w
 14423  2E4A  1D03               	skipz
 14424  2E4B  2E56               	goto	u10305
 14425  2E4C  0834               	movf	??_controller+3,w
 14426  2E4D  0238               	subwf	controller@tick+2,w
 14427  2E4E  1D03               	skipz
 14428  2E4F  2E56               	goto	u10305
 14429  2E50  0833               	movf	??_controller+2,w
 14430  2E51  0237               	subwf	controller@tick+1,w
 14431  2E52  1D03               	skipz
 14432  2E53  2E56               	goto	u10305
 14433  2E54  0832               	movf	??_controller+1,w
 14434  2E55  0236               	subwf	controller@tick,w
 14435  2E56                     u10305:	
 14436  2E56  1C03               	skipc
 14437  2E57  2E7D               	goto	l8576
 14438  2E58  3009               	movlw	9
 14439  2E59  00B1               	movwf	??_controller
 14440  2E5A  0831               	movf	??_controller,w
 14441  2E5B  00A9               	movwf	___bmul@multiplicand
 14442  2E5C  083A               	movf	controller@n,w
 14443  2E5D  31B3  2330  31AD   	fcall	___bmul
 14444  2E60  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 14445  2E61  0086               	movwf	6
 14446  2E62  3002               	movlw	2	; select bank5/6
 14447  2E63  0087               	movwf	7
 14448  2E64  0801               	movf	1,w
 14449  2E65  0140               	movlb	0	; select bank0
 14450  2E66  00B2               	movwf	??_controller+1
 14451  2E67  01B3               	clrf	??_controller+2
 14452  2E68  01B4               	clrf	??_controller+3
 14453  2E69  01B5               	clrf	??_controller+4
 14454  2E6A  0835               	movf	??_controller+4,w
 14455  2E6B  0239               	subwf	controller@tick+3,w
 14456  2E6C  1D03               	skipz
 14457  2E6D  2E78               	goto	u10315
 14458  2E6E  0834               	movf	??_controller+3,w
 14459  2E6F  0238               	subwf	controller@tick+2,w
 14460  2E70  1D03               	skipz
 14461  2E71  2E78               	goto	u10315
 14462  2E72  0833               	movf	??_controller+2,w
 14463  2E73  0237               	subwf	controller@tick+1,w
 14464  2E74  1D03               	skipz
 14465  2E75  2E78               	goto	u10315
 14466  2E76  0832               	movf	??_controller+1,w
 14467  2E77  0236               	subwf	controller@tick,w
 14468  2E78                     u10315:	
 14469  2E78  1803               	skipnc
 14470  2E79  2E7D               	goto	l8576
 14471                           
 14472                           ;system.c: 454:     setChannelSwitch(virtChannels[n].phyChanNum, 1);
 14473  2E7A  01AD               	clrf	setChannelSwitch@state
 14474  2E7B  0AAD               	incf	setChannelSwitch@state,f
 14475  2E7C  2E7E               	goto	L7
 14476  2E7D                     l8576:	
 14477                           
 14478                           ;system.c: 456:     setChannelSwitch(virtChannels[n].phyChanNum, 0);
 14479  2E7D  01AD               	clrf	setChannelSwitch@state
 14480  2E7E                     L7:	
 14481  2E7E  3009               	movlw	9
 14482  2E7F  00B1               	movwf	??_controller
 14483  2E80  0831               	movf	??_controller,w
 14484  2E81  00A9               	movwf	___bmul@multiplicand
 14485  2E82  083A               	movf	controller@n,w
 14486  2E83  31B3  2330  31AD   	fcall	___bmul
 14487  2E86  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 14488  2E87  0086               	movwf	6
 14489  2E88  3002               	movlw	2	; select bank5/6
 14490  2E89  0087               	movwf	7
 14491  2E8A  0801               	movf	1,w
 14492  2E8B  31B6  26DE  31AD   	fcall	_setChannelSwitch
 14493                           
 14494                           ;system.c: 457:   }
 14495  2E8E  3001               	movlw	1
 14496  2E8F  0140               	movlb	0	; select bank0
 14497  2E90  00B1               	movwf	??_controller
 14498  2E91  0831               	movf	??_controller,w
 14499  2E92  07BA               	addwf	controller@n,f
 14500  2E93  3004               	movlw	4
 14501  2E94  023A               	subwf	controller@n,w
 14502  2E95  1C03               	skipc
 14503  2E96  2E36               	goto	l8570
 14504                           
 14505                           ;system.c: 458:   __nop();
 14506  2E97  0000               	nop
 14507                           
 14508                           ;system.c: 459:  } else {
 14509  2E98  2E9C               	goto	l8582
 14510  2E99                     l908:	
 14511                           
 14512                           ;system.c: 460:   idle = 1;
 14513  2E99  0142               	movlb	2	; select bank2
 14514  2E9A  01E0               	clrf	controller@idle^(0+256)
 14515  2E9B  0AE0               	incf	controller@idle^(0+256),f
 14516  2E9C                     l8582:	
 14517                           
 14518                           ;system.c: 463:  return idle;
 14519  2E9C  0142               	movlb	2	; select bank2
 14520  2E9D  0860               	movf	controller@idle^(0+256),w
 14521  2E9E  0008               	return
 14522  2E9F                     __end_of_controller:	
 14523                           
 14524                           	psect	text28
 14525  20E8                     __ptext28:	
 14526 ;; *************** function _checkSensor *****************
 14527 ;; Defined at:
 14528 ;;		line 205 in file "system.c"
 14529 ;; Parameters:    Size  Location     Type
 14530 ;;		None
 14531 ;; Auto vars:     Size  Location     Type
 14532 ;;  dp              2    0        PTR struct .
 14533 ;; Return value:  Size  Location     Type
 14534 ;;                  1    wreg      unsigned char 
 14535 ;; Registers used:
 14536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14537 ;; Tracked objects:
 14538 ;;		On entry : 0/0
 14539 ;;		On exit  : 0/0
 14540 ;;		Unchanged: 0/0
 14541 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14544 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14545 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14546 ;;Total ram usage:        2 bytes
 14547 ;; Hardware stack levels used:    1
 14548 ;; Hardware stack levels required when called:    5
 14549 ;; This function calls:
 14550 ;;		___flge
 14551 ;;		_error
 14552 ;;		_timeSince
 14553 ;;		_uartReset
 14554 ;;		_uartSendByte
 14555 ;; This function is called by:
 14556 ;;		_main
 14557 ;; This function uses a non-reentrant model
 14558 ;;
 14559                           
 14560                           
 14561                           ;psect for function _checkSensor
 14562  20E8                     _checkSensor:	
 14563                           
 14564                           ;system.c: 207:  t_dataPacket *dp;;system.c: 208:  static uint32_t sensorUpdateInterval 
      +                          = 100;;system.c: 209:  static uint32_t sensorTimeout = 0;;system.c: 210:  static uint8_t
      +                           state = 0;;system.c: 213:  if ((data.tempAux < -30) || (data.tempAux > 60)) {
 14565                           
 14566                           ;incstack = 0
 14567                           ; Regs used in _checkSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14568  20E8  304A               	movlw	74
 14569  20E9  0086               	movwf	6
 14570  20EA  3027               	movlw	39
 14571  20EB  0087               	movwf	7
 14572  20EC  314D               	addfsr 1,13
 14573  20ED  3F40               	moviw [0]fsr1
 14574  20EE  0141               	movlb	1	; select bank1
 14575  20EF  00AD               	movwf	___flge@ff1^(0+128)
 14576  20F0  3F41               	moviw [1]fsr1
 14577  20F1  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14578  20F2  3F42               	moviw [2]fsr1
 14579  20F3  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14580  20F4  3F43               	moviw [3]fsr1
 14581  20F5  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14582  20F6  30C1               	movlw	193
 14583  20F7  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14584  20F8  30F0               	movlw	240
 14585  20F9  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14586  20FA  3000               	movlw	0
 14587  20FB  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14588  20FC  3000               	movlw	0
 14589  20FD  00B1               	movwf	___flge@ff2^(0+128)
 14590  20FE  31AB  2339  31A0   	fcall	___flge
 14591  2101  1C03               	btfss	3,0
 14592  2102  291E               	goto	l8274
 14593  2103  3042               	movlw	66
 14594  2104  0141               	movlb	1	; select bank1
 14595  2105  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14596  2106  3070               	movlw	112
 14597  2107  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14598  2108  3000               	movlw	0
 14599  2109  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14600  210A  3000               	movlw	0
 14601  210B  00AD               	movwf	___flge@ff1^(0+128)
 14602  210C  304A               	movlw	74
 14603  210D  0086               	movwf	6
 14604  210E  3027               	movlw	39
 14605  210F  0087               	movwf	7
 14606  2110  314D               	addfsr 1,13
 14607  2111  3F40               	moviw [0]fsr1
 14608  2112  00B1               	movwf	___flge@ff2^(0+128)
 14609  2113  3F41               	moviw [1]fsr1
 14610  2114  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14611  2115  3F42               	moviw [2]fsr1
 14612  2116  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14613  2117  3F43               	moviw [3]fsr1
 14614  2118  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14615  2119  31AB  2339  31A0   	fcall	___flge
 14616  211C  1803               	btfsc	3,0
 14617  211D  2924               	goto	l8276
 14618  211E                     l8274:	
 14619                           
 14620                           ;system.c: 214:   data.status.AUX_SENSOR_OK = 0;
 14621  211E  3073               	movlw	115
 14622  211F  0086               	movwf	6
 14623  2120  3027               	movlw	39
 14624  2121  0087               	movwf	7
 14625  2122  1201               	bcf	1,4
 14626                           
 14627                           ;system.c: 215:  } else
 14628  2123  29F4               	goto	l8332
 14629  2124                     l8276:	
 14630                           
 14631                           ;system.c: 216:   data.status.AUX_SENSOR_OK = 1;
 14632  2124  3073               	movlw	115
 14633  2125  0086               	movwf	6
 14634  2126  3027               	movlw	39
 14635  2127  0087               	movwf	7
 14636  2128  1601               	bsf	1,4
 14637  2129  29F4               	goto	l8332
 14638  212A                     l8278:	
 14639                           
 14640                           ;system.c: 221:   if (timeSince(sensorUpdateInterval) >= 100) {
 14641  212A  0144               	movlb	4	; select bank4
 14642  212B  0867               	movf	(checkSensor@sensorUpdateInterval+3)^(0+512),w
 14643  212C  0140               	movlb	0	; select bank0
 14644  212D  00A3               	movwf	timeSince@since+3
 14645  212E  0144               	movlb	4	; select bank4
 14646  212F  0866               	movf	(checkSensor@sensorUpdateInterval+2)^(0+512),w
 14647  2130  0140               	movlb	0	; select bank0
 14648  2131  00A2               	movwf	timeSince@since+2
 14649  2132  0144               	movlb	4	; select bank4
 14650  2133  0865               	movf	(checkSensor@sensorUpdateInterval+1)^(0+512),w
 14651  2134  0140               	movlb	0	; select bank0
 14652  2135  00A1               	movwf	timeSince@since+1
 14653  2136  0144               	movlb	4	; select bank4
 14654  2137  0864               	movf	checkSensor@sensorUpdateInterval^(0+512),w
 14655  2138  0140               	movlb	0	; select bank0
 14656  2139  00A0               	movwf	timeSince@since
 14657  213A  3190  2000  31A0   	fcall	_timeSince
 14658  213D  0140               	movlb	0	; select bank0
 14659  213E  0823               	movf	?_timeSince+3,w
 14660  213F  1D03               	btfss	3,2
 14661  2140  294B               	goto	l8280
 14662  2141  0822               	movf	?_timeSince+2,w
 14663  2142  1D03               	btfss	3,2
 14664  2143  294B               	goto	l8280
 14665  2144  0821               	movf	?_timeSince+1,w
 14666  2145  1D03               	btfss	3,2
 14667  2146  294B               	goto	l8280
 14668  2147  3064               	movlw	100
 14669  2148  0220               	subwf	?_timeSince,w
 14670  2149  1C03               	btfss	3,0
 14671  214A  2A06               	goto	l8334
 14672  214B                     l8280:	
 14673                           
 14674                           ;system.c: 222:    sensorUpdateInterval = sensorTimeout = tick100ms;
 14675  214B  0144               	movlb	4	; select bank4
 14676  214C  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 14677  214D  00B1               	movwf	(checkSensor@sensorTimeout+3)^(0+512)
 14678  214E  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 14679  214F  00B0               	movwf	(checkSensor@sensorTimeout+2)^(0+512)
 14680  2150  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 14681  2151  00AF               	movwf	(checkSensor@sensorTimeout+1)^(0+512)
 14682  2152  0832               	movf	_tick100ms^(0+512),w	;volatile
 14683  2153  00AE               	movwf	checkSensor@sensorTimeout^(0+512)
 14684  2154  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 14685  2155  00E7               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+512)
 14686  2156  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 14687  2157  00E6               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+512)
 14688  2158  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 14689  2159  00E5               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+512)
 14690  215A  082E               	movf	checkSensor@sensorTimeout^(0+512),w
 14691  215B  00E4               	movwf	checkSensor@sensorUpdateInterval^(0+512)
 14692                           
 14693                           ;system.c: 223:    uartSendByte('?');
 14694  215C  303F               	movlw	63
 14695  215D  31B2  22EC  31A0   	fcall	_uartSendByte
 14696                           
 14697                           ;system.c: 224:    state = 1;
 14698  2160  0142               	movlb	2	; select bank2
 14699  2161  01E1               	clrf	checkSensor@state^(0+256)
 14700  2162  0AE1               	incf	checkSensor@state^(0+256),f
 14701  2163  2A06               	goto	l8334
 14702  2164                     l8286:	
 14703                           
 14704                           ;system.c: 229:   if (timeSince(sensorTimeout) > 20) {
 14705  2164  0144               	movlb	4	; select bank4
 14706  2165  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 14707  2166  0140               	movlb	0	; select bank0
 14708  2167  00A3               	movwf	timeSince@since+3
 14709  2168  0144               	movlb	4	; select bank4
 14710  2169  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 14711  216A  0140               	movlb	0	; select bank0
 14712  216B  00A2               	movwf	timeSince@since+2
 14713  216C  0144               	movlb	4	; select bank4
 14714  216D  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 14715  216E  0140               	movlb	0	; select bank0
 14716  216F  00A1               	movwf	timeSince@since+1
 14717  2170  0144               	movlb	4	; select bank4
 14718  2171  082E               	movf	checkSensor@sensorTimeout^(0+512),w
 14719  2172  0140               	movlb	0	; select bank0
 14720  2173  00A0               	movwf	timeSince@since
 14721  2174  3190  2000  31A0   	fcall	_timeSince
 14722  2177  0140               	movlb	0	; select bank0
 14723  2178  0823               	movf	?_timeSince+3,w
 14724  2179  1D03               	btfss	3,2
 14725  217A  2985               	goto	l8288
 14726  217B  0822               	movf	?_timeSince+2,w
 14727  217C  1D03               	btfss	3,2
 14728  217D  2985               	goto	l8288
 14729  217E  0821               	movf	?_timeSince+1,w
 14730  217F  1D03               	btfss	3,2
 14731  2180  2985               	goto	l8288
 14732  2181  3015               	movlw	21
 14733  2182  0220               	subwf	?_timeSince,w
 14734  2183  1C03               	btfss	3,0
 14735  2184  299A               	goto	l8298
 14736  2185                     l8288:	
 14737                           
 14738                           ;system.c: 230:    if (data.status.SENSOR_OK) {
 14739  2185  3073               	movlw	115
 14740  2186  0086               	movwf	6
 14741  2187  3027               	movlw	39
 14742  2188  0087               	movwf	7
 14743  2189  1D81               	btfss	1,3
 14744  218A  2996               	goto	l8296
 14745                           
 14746                           ;system.c: 231:     data.status.SENSOR_OK = 0;
 14747  218B  3073               	movlw	115
 14748  218C  0086               	movwf	6
 14749  218D  3027               	movlw	39
 14750  218E  0087               	movwf	7
 14751  218F  1181               	bcf	1,3
 14752                           
 14753                           ;system.c: 232:     state = 0;
 14754  2190  0142               	movlb	2	; select bank2
 14755  2191  01E1               	clrf	checkSensor@state^(0+256)
 14756                           
 14757                           ;system.c: 233:     error(WARN_SENSOR_TIMEOUT);
 14758  2192  3007               	movlw	7
 14759  2193  31B5  25D1  31A0   	fcall	_error
 14760  2196                     l8296:	
 14761                           
 14762                           ;system.c: 235:    uartReset();
 14763  2196  31B2  22D2  31A0   	fcall	_uartReset
 14764                           
 14765                           ;system.c: 236:   } else if (uartDataReadyFlag) {
 14766  2199  2A06               	goto	l8334
 14767  219A                     l8298:	
 14768  219A  0142               	movlb	2	; select bank2
 14769  219B  086D               	movf	_uartDataReadyFlag^(0+256),w	;volatile
 14770  219C  1903               	btfsc	3,2
 14771  219D  2A06               	goto	l8334
 14772                           
 14773                           ;system.c: 237:    uartDataReadyFlag = 0;
 14774  219E  01ED               	clrf	_uartDataReadyFlag^(0+256)	;volatile
 14775                           
 14776                           ;system.c: 239:    if ((dataPacket.header == 0xAA) && (dataPacket.status == 1)) {
 14777  219F  30AA               	movlw	170
 14778  21A0  0144               	movlb	4	; select bank4
 14779  21A1  0638               	xorwf	_dataPacket^(0+512),w	;volatile
 14780  21A2  1D03               	btfss	3,2
 14781  21A3  29DF               	goto	l8320
 14782  21A4  033A               	decf	(_dataPacket^(0+512)+2),w	;volatile
 14783  21A5  1D03               	btfss	3,2
 14784  21A6  29DF               	goto	l8320
 14785                           
 14786                           ;system.c: 240:     data.tempC = dataPacket.tempC;
 14787  21A7  304A               	movlw	74
 14788  21A8  0086               	movwf	6
 14789  21A9  3027               	movlw	39
 14790  21AA  0087               	movwf	7
 14791  21AB  083B               	movf	(_dataPacket^(0+512)+3),w	;volatile
 14792  21AC  3FC0               	movwi [0]fsr1
 14793  21AD  083C               	movf	((_dataPacket+1)^(0+512)+3),w	;volatile
 14794  21AE  3FC1               	movwi [1]fsr1
 14795  21AF  083D               	movf	((_dataPacket+2)^(0+512)+3),w	;volatile
 14796  21B0  3FC2               	movwi [2]fsr1
 14797  21B1  083E               	movf	((_dataPacket+3)^(0+512)+3),w	;volatile
 14798  21B2  3FC3               	movwi [3]fsr1
 14799                           
 14800                           ;system.c: 241:     data.relHum = dataPacket.relHum;
 14801  21B3  304A               	movlw	74
 14802  21B4  0086               	movwf	6
 14803  21B5  3027               	movlw	39
 14804  21B6  0087               	movwf	7
 14805  21B7  3144               	addfsr 1,4
 14806  21B8  083F               	movf	(_dataPacket^(0+512)+7),w	;volatile
 14807  21B9  3FC0               	movwi [0]fsr1
 14808  21BA  0840               	movf	((_dataPacket+1)^(0+512)+7),w	;volatile
 14809  21BB  3FC1               	movwi [1]fsr1
 14810  21BC  0841               	movf	((_dataPacket+2)^(0+512)+7),w	;volatile
 14811  21BD  3FC2               	movwi [2]fsr1
 14812  21BE  0842               	movf	((_dataPacket+3)^(0+512)+7),w	;volatile
 14813  21BF  3FC3               	movwi [3]fsr1
 14814                           
 14815                           ;system.c: 242:     data.dewPointC = dataPacket.dewPointC;
 14816  21C0  304A               	movlw	74
 14817  21C1  0086               	movwf	6
 14818  21C2  3027               	movlw	39
 14819  21C3  0087               	movwf	7
 14820  21C4  3148               	addfsr 1,8
 14821  21C5  0843               	movf	(_dataPacket^(0+512)+11),w	;volatile
 14822  21C6  3FC0               	movwi [0]fsr1
 14823  21C7  0844               	movf	((_dataPacket+1)^(0+512)+11),w	;volatile
 14824  21C8  3FC1               	movwi [1]fsr1
 14825  21C9  0845               	movf	((_dataPacket+2)^(0+512)+11),w	;volatile
 14826  21CA  3FC2               	movwi [2]fsr1
 14827  21CB  0846               	movf	((_dataPacket+3)^(0+512)+11),w	;volatile
 14828  21CC  3FC3               	movwi [3]fsr1
 14829                           
 14830                           ;system.c: 243:     data.sensorVersion = dataPacket.version;
 14831  21CD  0839               	movf	(_dataPacket^(0+512)+1),w	;volatile
 14832  21CE  0141               	movlb	1	; select bank1
 14833  21CF  00B9               	movwf	??_checkSensor^(0+128)
 14834  21D0  3056               	movlw	86
 14835  21D1  0086               	movwf	6
 14836  21D2  3027               	movlw	39
 14837  21D3  0087               	movwf	7
 14838  21D4  0839               	movf	??_checkSensor^(0+128),w
 14839  21D5  0081               	movwf	1
 14840                           
 14841                           ;system.c: 244:     data.status.SENSOR_OK = 1;
 14842  21D6  3073               	movlw	115
 14843  21D7  0086               	movwf	6
 14844  21D8  3027               	movlw	39
 14845  21D9  0087               	movwf	7
 14846  21DA  1581               	bsf	1,3
 14847                           
 14848                           ;system.c: 245:     state = 0;
 14849  21DB  0142               	movlb	2	; select bank2
 14850  21DC  01E1               	clrf	checkSensor@state^(0+256)
 14851                           
 14852                           ;system.c: 247:     return 1;
 14853  21DD  3001               	movlw	1
 14854  21DE  0008               	return
 14855  21DF                     l8320:	
 14856                           
 14857                           ;system.c: 250:     if (data.status.SENSOR_OK) {
 14858  21DF  3073               	movlw	115
 14859  21E0  0086               	movwf	6
 14860  21E1  3027               	movlw	39
 14861  21E2  0087               	movwf	7
 14862  21E3  1D81               	btfss	1,3
 14863  21E4  29EE               	goto	l8326
 14864                           
 14865                           ;system.c: 251:      data.status.SENSOR_OK = 0;
 14866  21E5  3073               	movlw	115
 14867  21E6  0086               	movwf	6
 14868  21E7  3027               	movlw	39
 14869  21E8  0087               	movwf	7
 14870  21E9  1181               	bcf	1,3
 14871                           
 14872                           ;system.c: 252:      error(WARN_SENSOR_CHECKSUM);
 14873  21EA  3008               	movlw	8
 14874  21EB  31B5  25D1  31A0   	fcall	_error
 14875  21EE                     l8326:	
 14876                           
 14877                           ;system.c: 254:     uartReset();
 14878  21EE  31B2  22D2  31A0   	fcall	_uartReset
 14879  21F1                     l8328:	
 14880                           
 14881                           ;system.c: 256:    state = 0;
 14882  21F1  0142               	movlb	2	; select bank2
 14883  21F2  01E1               	clrf	checkSensor@state^(0+256)
 14884  21F3  2A06               	goto	l8334
 14885  21F4                     l8332:	
 14886  21F4  0142               	movlb	2	; select bank2
 14887  21F5  0861               	movf	checkSensor@state^(0+256),w
 14888  21F6  0141               	movlb	1	; select bank1
 14889  21F7  00B9               	movwf	??_checkSensor^(0+128)
 14890  21F8  01BA               	clrf	(??_checkSensor^(0+128)+1)
 14891                           
 14892                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 14893                           ; Switch size 1, requested type "simple"
 14894                           ; Number of cases is 1, Range of values is 0 to 0
 14895                           ; switch strategies available:
 14896                           ; Name         Instructions Cycles
 14897                           ; simple_byte            4     3 (average)
 14898                           ; direct_byte            8     6 (fixed)
 14899                           ; jumptable            260     6 (fixed)
 14900                           ;	Chosen strategy is simple_byte
 14901  21F9  083A               	movf	(??_checkSensor+1)^(0+128),w
 14902  21FA  3A00               	xorlw	0	; case 0
 14903  21FB  1903               	skipnz
 14904  21FC  29FE               	goto	l8864
 14905  21FD  29F1               	goto	l8328
 14906  21FE                     l8864:	
 14907                           
 14908                           ; Switch size 1, requested type "simple"
 14909                           ; Number of cases is 2, Range of values is 0 to 1
 14910                           ; switch strategies available:
 14911                           ; Name         Instructions Cycles
 14912                           ; simple_byte            7     4 (average)
 14913                           ; direct_byte           10     6 (fixed)
 14914                           ; jumptable            260     6 (fixed)
 14915                           ;	Chosen strategy is simple_byte
 14916  21FE  0839               	movf	??_checkSensor^(0+128),w
 14917  21FF  3A00               	xorlw	0	; case 0
 14918  2200  1903               	skipnz
 14919  2201  292A               	goto	l8278
 14920  2202  3A01               	xorlw	1	; case 1
 14921  2203  1903               	skipnz
 14922  2204  2964               	goto	l8286
 14923  2205  29F1               	goto	l8328
 14924  2206                     l8334:	
 14925                           
 14926                           ;system.c: 263:  return 0;
 14927  2206  3000               	movlw	0
 14928  2207  0008               	return
 14929  2208                     __end_of_checkSensor:	
 14930                           
 14931                           	psect	text29
 14932  32EC                     __ptext29:	
 14933 ;; *************** function _uartSendByte *****************
 14934 ;; Defined at:
 14935 ;;		line 11 in file "uart.c"
 14936 ;; Parameters:    Size  Location     Type
 14937 ;;  s               1    wreg     unsigned char 
 14938 ;; Auto vars:     Size  Location     Type
 14939 ;;  s               1    0[BANK0 ] unsigned char 
 14940 ;; Return value:  Size  Location     Type
 14941 ;;                  1    wreg      void 
 14942 ;; Registers used:
 14943 ;;		wreg
 14944 ;; Tracked objects:
 14945 ;;		On entry : 0/0
 14946 ;;		On exit  : 0/0
 14947 ;;		Unchanged: 0/0
 14948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14949 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14950 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14951 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14952 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14953 ;;Total ram usage:        1 bytes
 14954 ;; Hardware stack levels used:    1
 14955 ;; Hardware stack levels required when called:    3
 14956 ;; This function calls:
 14957 ;;		Nothing
 14958 ;; This function is called by:
 14959 ;;		_checkSensor
 14960 ;; This function uses a non-reentrant model
 14961 ;;
 14962                           
 14963                           
 14964                           ;psect for function _uartSendByte
 14965  32EC                     _uartSendByte:	
 14966                           
 14967                           ;incstack = 0
 14968                           ; Regs used in _uartSendByte: [wreg]
 14969                           ;uartSendByte@s stored from wreg
 14970  32EC  0140               	movlb	0	; select bank0
 14971  32ED  00A0               	movwf	uartSendByte@s
 14972                           
 14973                           ;uart.c: 11: void uartSendByte(char s);uart.c: 12: {;uart.c: 13:  TX1REG = s;
 14974  32EE  0820               	movf	uartSendByte@s,w
 14975  32EF  0142               	movlb	2	; select bank2
 14976  32F0  009A               	movwf	26	;volatile
 14977                           
 14978                           ;uart.c: 14:  __nop();
 14979  32F1  0000               	nop
 14980  32F2                     l365:	
 14981                           ;uart.c: 15:  while (!PIR3bits.TX1IF);
 14982                           
 14983  32F2  014E               	movlb	14	; select bank14
 14984  32F3  1A0F               	btfsc	15,4	;volatile
 14985  32F4  0008               	return
 14986  32F5  2AF2               	goto	l365
 14987  32F6                     __end_of_uartSendByte:	
 14988                           
 14989                           	psect	text30
 14990  32D2                     __ptext30:	
 14991 ;; *************** function _uartReset *****************
 14992 ;; Defined at:
 14993 ;;		line 60 in file "uart.c"
 14994 ;; Parameters:    Size  Location     Type
 14995 ;;		None
 14996 ;; Auto vars:     Size  Location     Type
 14997 ;;  dump            1    0        unsigned char 
 14998 ;; Return value:  Size  Location     Type
 14999 ;;                  1    wreg      void 
 15000 ;; Registers used:
 15001 ;;		wreg, status,2
 15002 ;; Tracked objects:
 15003 ;;		On entry : 0/0
 15004 ;;		On exit  : 0/0
 15005 ;;		Unchanged: 0/0
 15006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15008 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15010 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15011 ;;Total ram usage:        1 bytes
 15012 ;; Hardware stack levels used:    1
 15013 ;; Hardware stack levels required when called:    3
 15014 ;; This function calls:
 15015 ;;		Nothing
 15016 ;; This function is called by:
 15017 ;;		_checkSensor
 15018 ;; This function uses a non-reentrant model
 15019 ;;
 15020                           
 15021                           
 15022                           ;psect for function _uartReset
 15023  32D2                     _uartReset:	
 15024                           
 15025                           ;incstack = 0
 15026                           ; Regs used in _uartReset: [wreg+status,2]
 15027  32D2  0142               	movlb	2	; select bank2
 15028  32D3  0819               	movf	25,w	;volatile
 15029                           
 15030                           ;uart.c: 64:  RC1STAbits.CREN = 0;
 15031  32D4  121D               	bcf	29,4	;volatile
 15032                           
 15033                           ;uart.c: 65:  RC1STAbits.CREN = 1;
 15034  32D5  161D               	bsf	29,4	;volatile
 15035                           
 15036                           ;uart.c: 66:  RC1STAbits.SPEN = 0;
 15037  32D6  139D               	bcf	29,7	;volatile
 15038                           
 15039                           ;uart.c: 67:  RC1STAbits.SPEN = 1;
 15040  32D7  179D               	bsf	29,7	;volatile
 15041                           
 15042                           ;uart.c: 68:  rxCount = 0;
 15043  32D8  01EB               	clrf	_rxCount^(0+256)	;volatile
 15044  32D9  0008               	return
 15045  32DA                     __end_of_uartReset:	
 15046                           
 15047                           	psect	text31
 15048  1000                     __ptext31:	
 15049 ;; *************** function _timeSince *****************
 15050 ;; Defined at:
 15051 ;;		line 10 in file "interrupt.c"
 15052 ;; Parameters:    Size  Location     Type
 15053 ;;  since           4    0[BANK0 ] unsigned long 
 15054 ;; Auto vars:     Size  Location     Type
 15055 ;;  now             4   12[BANK0 ] unsigned long 
 15056 ;; Return value:  Size  Location     Type
 15057 ;;                  4    0[BANK0 ] unsigned long 
 15058 ;; Registers used:
 15059 ;;		wreg
 15060 ;; Tracked objects:
 15061 ;;		On entry : 0/0
 15062 ;;		On exit  : 0/0
 15063 ;;		Unchanged: 0/0
 15064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15065 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15066 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15067 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15068 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15069 ;;Total ram usage:       16 bytes
 15070 ;; Hardware stack levels used:    1
 15071 ;; Hardware stack levels required when called:    3
 15072 ;; This function calls:
 15073 ;;		Nothing
 15074 ;; This function is called by:
 15075 ;;		_main
 15076 ;;		_menu
 15077 ;;		_checkSensor
 15078 ;;		_controller
 15079 ;; This function uses a non-reentrant model
 15080 ;;
 15081                           
 15082                           
 15083                           ;psect for function _timeSince
 15084  1000                     _timeSince:	
 15085                           
 15086                           ;interrupt.c: 10: uint32_t timeSince(uint32_t since);interrupt.c: 11: {;interrupt.c: 12:
      +                            uint32_t now = tick100ms;
 15087                           
 15088                           ;incstack = 0
 15089                           ; Regs used in _timeSince: [wreg]
 15090  1000  0144               	movlb	4	; select bank4
 15091  1001  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 15092  1002  0140               	movlb	0	; select bank0
 15093  1003  00AF               	movwf	timeSince@now+3
 15094  1004  0144               	movlb	4	; select bank4
 15095  1005  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 15096  1006  0140               	movlb	0	; select bank0
 15097  1007  00AE               	movwf	timeSince@now+2
 15098  1008  0144               	movlb	4	; select bank4
 15099  1009  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 15100  100A  0140               	movlb	0	; select bank0
 15101  100B  00AD               	movwf	timeSince@now+1
 15102  100C  0144               	movlb	4	; select bank4
 15103  100D  0832               	movf	_tick100ms^(0+512),w	;volatile
 15104  100E  0140               	movlb	0	; select bank0
 15105  100F  00AC               	movwf	timeSince@now
 15106                           
 15107                           ;interrupt.c: 13:  if (now >= since)
 15108  1010  0823               	movf	timeSince@since+3,w
 15109  1011  022F               	subwf	timeSince@now+3,w
 15110  1012  1D03               	skipz
 15111  1013  281E               	goto	u9185
 15112  1014  0822               	movf	timeSince@since+2,w
 15113  1015  022E               	subwf	timeSince@now+2,w
 15114  1016  1D03               	skipz
 15115  1017  281E               	goto	u9185
 15116  1018  0821               	movf	timeSince@since+1,w
 15117  1019  022D               	subwf	timeSince@now+1,w
 15118  101A  1D03               	skipz
 15119  101B  281E               	goto	u9185
 15120  101C  0820               	movf	timeSince@since,w
 15121  101D  022C               	subwf	timeSince@now,w
 15122  101E                     u9185:	
 15123  101E  1C03               	skipc
 15124  101F  2835               	goto	l7496
 15125                           
 15126                           ;interrupt.c: 14:   return (now - since);
 15127  1020  0820               	movf	timeSince@since,w
 15128  1021  022C               	subwf	timeSince@now,w
 15129  1022  00A4               	movwf	??_timeSince
 15130  1023  0821               	movf	timeSince@since+1,w
 15131  1024  3B2D               	subwfb	timeSince@now+1,w
 15132  1025  00A5               	movwf	??_timeSince+1
 15133  1026  0822               	movf	timeSince@since+2,w
 15134  1027  3B2E               	subwfb	timeSince@now+2,w
 15135  1028  00A6               	movwf	??_timeSince+2
 15136  1029  0823               	movf	timeSince@since+3,w
 15137  102A  3B2F               	subwfb	timeSince@now+3,w
 15138  102B  00A7               	movwf	??_timeSince+3
 15139  102C  0827               	movf	??_timeSince+3,w
 15140  102D  00A3               	movwf	?_timeSince+3
 15141  102E  0826               	movf	??_timeSince+2,w
 15142  102F  00A2               	movwf	?_timeSince+2
 15143  1030  0825               	movf	??_timeSince+1,w
 15144  1031  00A1               	movwf	?_timeSince+1
 15145  1032  0824               	movf	??_timeSince,w
 15146  1033  00A0               	movwf	?_timeSince
 15147  1034  0008               	return
 15148  1035                     l7496:	
 15149                           
 15150                           ;interrupt.c: 16:  return (now + (1 + 1000000000UL - since));
 15151  1035  3001               	movlw	1
 15152  1036  00A4               	movwf	??_timeSince
 15153  1037  30CA               	movlw	202
 15154  1038  00A5               	movwf	??_timeSince+1
 15155  1039  309A               	movlw	154
 15156  103A  00A6               	movwf	??_timeSince+2
 15157  103B  303B               	movlw	59
 15158  103C  00A7               	movwf	??_timeSince+3
 15159  103D  0820               	movf	timeSince@since,w
 15160  103E  022C               	subwf	timeSince@now,w
 15161  103F  00A8               	movwf	??_timeSince+4
 15162  1040  0821               	movf	timeSince@since+1,w
 15163  1041  3B2D               	subwfb	timeSince@now+1,w
 15164  1042  00A9               	movwf	??_timeSince+5
 15165  1043  0822               	movf	timeSince@since+2,w
 15166  1044  3B2E               	subwfb	timeSince@now+2,w
 15167  1045  00AA               	movwf	??_timeSince+6
 15168  1046  0823               	movf	timeSince@since+3,w
 15169  1047  3B2F               	subwfb	timeSince@now+3,w
 15170  1048  00AB               	movwf	??_timeSince+7
 15171  1049  0828               	movf	??_timeSince+4,w
 15172  104A  07A4               	addwf	??_timeSince,f
 15173  104B  0829               	movf	??_timeSince+5,w
 15174  104C  3DA5               	addwfc	??_timeSince+1,f
 15175  104D  082A               	movf	??_timeSince+6,w
 15176  104E  3DA6               	addwfc	??_timeSince+2,f
 15177  104F  082B               	movf	??_timeSince+7,w
 15178  1050  3DA7               	addwfc	??_timeSince+3,f
 15179  1051  0827               	movf	??_timeSince+3,w
 15180  1052  00A3               	movwf	?_timeSince+3
 15181  1053  0826               	movf	??_timeSince+2,w
 15182  1054  00A2               	movwf	?_timeSince+2
 15183  1055  0825               	movf	??_timeSince+1,w
 15184  1056  00A1               	movwf	?_timeSince+1
 15185  1057  0824               	movf	??_timeSince,w
 15186  1058  00A0               	movwf	?_timeSince
 15187  1059  0008               	return
 15188  105A                     __end_of_timeSince:	
 15189                           
 15190                           	psect	text32
 15191  1414                     __ptext32:	
 15192 ;; *************** function _checkChannelStatus *****************
 15193 ;; Defined at:
 15194 ;;		line 54 in file "system.c"
 15195 ;; Parameters:    Size  Location     Type
 15196 ;;		None
 15197 ;; Auto vars:     Size  Location     Type
 15198 ;;  current         4   42[BANK1 ] float 
 15199 ;;  chData          2   47[BANK1 ] PTR struct .
 15200 ;;		 -> data.heater(124), data(166), 
 15201 ;;  avg             2   40[BANK1 ] unsigned short 
 15202 ;;  adc             2   29[BANK1 ] unsigned short 
 15203 ;;  channel         1   46[BANK1 ] unsigned char 
 15204 ;;  samples         1   39[BANK1 ] unsigned char 
 15205 ;; Return value:  Size  Location     Type
 15206 ;;                  1    wreg      void 
 15207 ;; Registers used:
 15208 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15209 ;; Tracked objects:
 15210 ;;		On entry : 0/0
 15211 ;;		On exit  : 0/0
 15212 ;;		Unchanged: 0/0
 15213 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15214 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15215 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15216 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15217 ;;      Totals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15218 ;;Total ram usage:       24 bytes
 15219 ;; Hardware stack levels used:    1
 15220 ;; Hardware stack levels required when called:    5
 15221 ;; This function calls:
 15222 ;;		___fldiv
 15223 ;;		___fleq
 15224 ;;		___flge
 15225 ;;		___flmul
 15226 ;;		___fltol
 15227 ;;		___wmul
 15228 ;;		___xxtofl
 15229 ;;		_ema
 15230 ;;		_error
 15231 ;;		_getAnalogValue
 15232 ;;		_setChannelSwitch
 15233 ;; This function is called by:
 15234 ;;		_main
 15235 ;; This function uses a non-reentrant model
 15236 ;;
 15237                           
 15238                           
 15239                           ;psect for function _checkChannelStatus
 15240  1414                     _checkChannelStatus:	
 15241                           
 15242                           ;system.c: 56:  uint16_t adc, avg;;system.c: 57:  uint8_t channel, samples;;system.c: 58
      +                          :  float current;;system.c: 59:  t_heater *chData;;system.c: 61:  for (channel = 0; chan
      +                          nel < 4; channel++) {
 15243                           
 15244                           ;incstack = 0
 15245                           ; Regs used in _checkChannelStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15246  1414  0141               	movlb	1	; select bank1
 15247  1415  01CE               	clrf	checkChannelStatus@channel^(0+128)
 15248  1416                     l8380:	
 15249                           
 15250                           ;system.c: 63:   chData = &data.heater[channel];
 15251  1416  084E               	movf	checkChannelStatus@channel^(0+128),w
 15252  1417  00B9               	movwf	??_checkChannelStatus^(0+128)
 15253  1418  01BA               	clrf	(??_checkChannelStatus^(0+128)+1)
 15254  1419  0839               	movf	??_checkChannelStatus^(0+128),w
 15255  141A  0140               	movlb	0	; select bank0
 15256  141B  00AD               	movwf	___wmul@multiplier
 15257  141C  0141               	movlb	1	; select bank1
 15258  141D  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 15259  141E  0140               	movlb	0	; select bank0
 15260  141F  00AE               	movwf	___wmul@multiplier+1
 15261  1420  301F               	movlw	31
 15262  1421  00AF               	movwf	___wmul@multiplicand
 15263  1422  3000               	movlw	0
 15264  1423  00B0               	movwf	___wmul@multiplicand+1
 15265  1424  31B3  2371  3194   	fcall	___wmul
 15266  1427  3074               	movlw	116
 15267  1428  0141               	movlb	1	; select bank1
 15268  1429  00BB               	movwf	(??_checkChannelStatus+2)^(0+128)
 15269  142A  3027               	movlw	39
 15270  142B  00BC               	movwf	((??_checkChannelStatus+2)^(0+128)+1)
 15271  142C  0140               	movlb	0	; select bank0
 15272  142D  082D               	movf	?___wmul,w
 15273  142E  0141               	movlb	1	; select bank1
 15274  142F  073B               	addwf	(??_checkChannelStatus+2)^(0+128),w
 15275  1430  00CF               	movwf	checkChannelStatus@chData^(0+128)
 15276  1431  0140               	movlb	0	; select bank0
 15277  1432  082E               	movf	?___wmul+1,w
 15278  1433  0141               	movlb	1	; select bank1
 15279  1434  3D3C               	addwfc	(??_checkChannelStatus+3)^(0+128),w
 15280  1435  00D0               	movwf	(checkChannelStatus@chData+1)^(0+128)
 15281                           
 15282                           ;system.c: 65:   if (chData->status == CH_OVERCURRENT)
 15283  1436  084F               	movf	checkChannelStatus@chData^(0+128),w
 15284  1437  0086               	movwf	6
 15285  1438  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15286  1439  0087               	movwf	7
 15287  143A  315E               	addfsr 1,30
 15288  143B  3004               	movlw	4
 15289  143C  0601               	xorwf	1,w
 15290  143D  1903               	btfsc	3,2
 15291  143E  2FF6               	goto	l8466
 15292                           
 15293                           ;system.c: 68:   avg = data.heater[channel].current;
 15294  143F  301F               	movlw	31
 15295  1440  0140               	movlb	0	; select bank0
 15296  1441  00AF               	movwf	___wmul@multiplicand
 15297  1442  3000               	movlw	0
 15298  1443  00B0               	movwf	___wmul@multiplicand+1
 15299  1444  0141               	movlb	1	; select bank1
 15300  1445  084E               	movf	checkChannelStatus@channel^(0+128),w
 15301  1446  00B9               	movwf	??_checkChannelStatus^(0+128)
 15302  1447  01BA               	clrf	(??_checkChannelStatus^(0+128)+1)
 15303  1448  0839               	movf	??_checkChannelStatus^(0+128),w
 15304  1449  0140               	movlb	0	; select bank0
 15305  144A  00AD               	movwf	___wmul@multiplier
 15306  144B  0141               	movlb	1	; select bank1
 15307  144C  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 15308  144D  0140               	movlb	0	; select bank0
 15309  144E  00AE               	movwf	___wmul@multiplier+1
 15310  144F  31B3  2371  3194   	fcall	___wmul
 15311  1452  3074               	movlw	116
 15312  1453  0141               	movlb	1	; select bank1
 15313  1454  00BB               	movwf	(??_checkChannelStatus+2)^(0+128)
 15314  1455  3027               	movlw	39
 15315  1456  00BC               	movwf	((??_checkChannelStatus+2)^(0+128)+1)
 15316  1457  0140               	movlb	0	; select bank0
 15317  1458  082D               	movf	?___wmul,w
 15318  1459  0141               	movlb	1	; select bank1
 15319  145A  073B               	addwf	(??_checkChannelStatus+2)^(0+128),w
 15320  145B  0086               	movwf	6
 15321  145C  0140               	movlb	0	; select bank0
 15322  145D  082E               	movf	?___wmul+1,w
 15323  145E  0141               	movlb	1	; select bank1
 15324  145F  3D3C               	addwfc	(??_checkChannelStatus+3)^(0+128),w
 15325  1460  0087               	movwf	7
 15326  1461  3F40               	moviw [0]fsr1
 15327  1462  00A8               	movwf	___fltol@f1^(0+128)
 15328  1463  3F41               	moviw [1]fsr1
 15329  1464  00A9               	movwf	(___fltol@f1+1)^(0+128)
 15330  1465  3F42               	moviw [2]fsr1
 15331  1466  00AA               	movwf	(___fltol@f1+2)^(0+128)
 15332  1467  3F43               	moviw [3]fsr1
 15333  1468  00AB               	movwf	(___fltol@f1+3)^(0+128)
 15334  1469  31A8  20C0  3194   	fcall	___fltol
 15335  146C  0141               	movlb	1	; select bank1
 15336  146D  0829               	movf	(?___fltol+1)^(0+128),w
 15337  146E  00C9               	movwf	(checkChannelStatus@avg+1)^(0+128)
 15338  146F  0828               	movf	?___fltol^(0+128),w
 15339  1470  00C8               	movwf	checkChannelStatus@avg^(0+128)
 15340                           
 15341                           ;system.c: 70:   setChannelSwitch(channel, 1);
 15342  1471  0140               	movlb	0	; select bank0
 15343  1472  01AD               	clrf	setChannelSwitch@state
 15344  1473  0AAD               	incf	setChannelSwitch@state,f
 15345  1474  0141               	movlb	1	; select bank1
 15346  1475  084E               	movf	checkChannelStatus@channel^(0+128),w
 15347  1476  31B6  26DE  3194   	fcall	_setChannelSwitch
 15348                           
 15349                           ;system.c: 71:   samples = 0;
 15350  1479  0141               	movlb	1	; select bank1
 15351  147A  01C7               	clrf	checkChannelStatus@samples^(0+128)
 15352  147B                     l8392:	
 15353                           
 15354                           ;system.c: 73:    adc = getAnalogValue(0b010001);
 15355  147B  3011               	movlw	17
 15356  147C  3198  2001  3194   	fcall	_getAnalogValue
 15357  147F  0140               	movlb	0	; select bank0
 15358  1480  0821               	movf	?_getAnalogValue+1,w
 15359  1481  0141               	movlb	1	; select bank1
 15360  1482  00BE               	movwf	(checkChannelStatus@adc+1)^(0+128)
 15361  1483  0140               	movlb	0	; select bank0
 15362  1484  0820               	movf	?_getAnalogValue,w
 15363  1485  0141               	movlb	1	; select bank1
 15364  1486  00BD               	movwf	checkChannelStatus@adc^(0+128)
 15365                           
 15366                           ;system.c: 75:    avg = ema(adc, avg, ( (uint32_t)(0.7 * 65535) ));
 15367  1487  083E               	movf	(checkChannelStatus@adc+1)^(0+128),w
 15368  1488  0140               	movlb	0	; select bank0
 15369  1489  00AD               	movwf	ema@in+1
 15370  148A  0141               	movlb	1	; select bank1
 15371  148B  083D               	movf	checkChannelStatus@adc^(0+128),w
 15372  148C  0140               	movlb	0	; select bank0
 15373  148D  00AC               	movwf	ema@in
 15374  148E  0141               	movlb	1	; select bank1
 15375  148F  0849               	movf	(checkChannelStatus@avg+1)^(0+128),w
 15376  1490  0140               	movlb	0	; select bank0
 15377  1491  00AF               	movwf	ema@average+1
 15378  1492  0141               	movlb	1	; select bank1
 15379  1493  0848               	movf	checkChannelStatus@avg^(0+128),w
 15380  1494  0140               	movlb	0	; select bank0
 15381  1495  00AE               	movwf	ema@average
 15382  1496  3000               	movlw	0
 15383  1497  00B3               	movwf	ema@alpha+3
 15384  1498  3000               	movlw	0
 15385  1499  00B2               	movwf	ema@alpha+2
 15386  149A  30B3               	movlw	179
 15387  149B  00B1               	movwf	ema@alpha+1
 15388  149C  3032               	movlw	50
 15389  149D  00B0               	movwf	ema@alpha
 15390  149E  31A9  2126  3194   	fcall	_ema
 15391  14A1  0140               	movlb	0	; select bank0
 15392  14A2  082D               	movf	?_ema+1,w
 15393  14A3  0141               	movlb	1	; select bank1
 15394  14A4  00C9               	movwf	(checkChannelStatus@avg+1)^(0+128)
 15395  14A5  0140               	movlb	0	; select bank0
 15396  14A6  082C               	movf	?_ema,w
 15397  14A7  0141               	movlb	1	; select bank1
 15398  14A8  00C8               	movwf	checkChannelStatus@avg^(0+128)
 15399                           
 15400                           ;system.c: 76:   } while (samples++ < 50);
 15401  14A9  0847               	movf	checkChannelStatus@samples^(0+128),w
 15402  14AA  0AC7               	incf	checkChannelStatus@samples^(0+128),f
 15403  14AB  00B9               	movwf	??_checkChannelStatus^(0+128)
 15404  14AC  3032               	movlw	50
 15405  14AD  0239               	subwf	??_checkChannelStatus^(0+128),w
 15406  14AE  1C03               	skipc
 15407  14AF  2C7B               	goto	l8392
 15408                           
 15409                           ;system.c: 77:   setChannelSwitch(channel, 0);
 15410  14B0  0140               	movlb	0	; select bank0
 15411  14B1  01AD               	clrf	setChannelSwitch@state
 15412  14B2  0141               	movlb	1	; select bank1
 15413  14B3  084E               	movf	checkChannelStatus@channel^(0+128),w
 15414  14B4  31B6  26DE  3194   	fcall	_setChannelSwitch
 15415                           
 15416                           ;system.c: 80:   current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 15417  14B7  3045               	movlw	69
 15418  14B8  0140               	movlb	0	; select bank0
 15419  14B9  00DE               	movwf	___fldiv@a+3
 15420  14BA  301F               	movlw	31
 15421  14BB  00DD               	movwf	___fldiv@a+2
 15422  14BC  30D8               	movlw	216
 15423  14BD  00DC               	movwf	___fldiv@a+1
 15424  14BE  3000               	movlw	0
 15425  14BF  00DB               	movwf	___fldiv@a
 15426  14C0  3040               	movlw	64
 15427  14C1  00C4               	movwf	___flmul@b+3
 15428  14C2  30A0               	movlw	160
 15429  14C3  00C3               	movwf	___flmul@b+2
 15430  14C4  3000               	movlw	0
 15431  14C5  00C2               	movwf	___flmul@b+1
 15432  14C6  3000               	movlw	0
 15433  14C7  00C1               	movwf	___flmul@b
 15434  14C8  0141               	movlb	1	; select bank1
 15435  14C9  0848               	movf	checkChannelStatus@avg^(0+128),w
 15436  14CA  0140               	movlb	0	; select bank0
 15437  14CB  00B3               	movwf	___xxtofl@val
 15438  14CC  0141               	movlb	1	; select bank1
 15439  14CD  0849               	movf	(checkChannelStatus@avg+1)^(0+128),w
 15440  14CE  0140               	movlb	0	; select bank0
 15441  14CF  00B4               	movwf	___xxtofl@val+1
 15442  14D0  01B5               	clrf	___xxtofl@val+2
 15443  14D1  01B6               	clrf	___xxtofl@val+3
 15444  14D2  3000               	movlw	0
 15445  14D3  31AC  24D1  3194   	fcall	___xxtofl
 15446  14D6  0140               	movlb	0	; select bank0
 15447  14D7  0836               	movf	?___xxtofl+3,w
 15448  14D8  00C8               	movwf	___flmul@a+3
 15449  14D9  0835               	movf	?___xxtofl+2,w
 15450  14DA  00C7               	movwf	___flmul@a+2
 15451  14DB  0834               	movf	?___xxtofl+1,w
 15452  14DC  00C6               	movwf	___flmul@a+1
 15453  14DD  0833               	movf	?___xxtofl,w
 15454  14DE  00C5               	movwf	___flmul@a
 15455  14DF  3185  2561  3194   	fcall	___flmul
 15456  14E2  0140               	movlb	0	; select bank0
 15457  14E3  0844               	movf	?___flmul+3,w
 15458  14E4  00E2               	movwf	___fldiv@b+3
 15459  14E5  0843               	movf	?___flmul+2,w
 15460  14E6  00E1               	movwf	___fldiv@b+2
 15461  14E7  0842               	movf	?___flmul+1,w
 15462  14E8  00E0               	movwf	___fldiv@b+1
 15463  14E9  0841               	movf	?___flmul,w
 15464  14EA  00DF               	movwf	___fldiv@b
 15465  14EB  319E  2628  3194   	fcall	___fldiv
 15466  14EE  0140               	movlb	0	; select bank0
 15467  14EF  085E               	movf	?___fldiv+3,w
 15468  14F0  0141               	movlb	1	; select bank1
 15469  14F1  00CD               	movwf	(checkChannelStatus@current+3)^(0+128)
 15470  14F2  0140               	movlb	0	; select bank0
 15471  14F3  085D               	movf	?___fldiv+2,w
 15472  14F4  0141               	movlb	1	; select bank1
 15473  14F5  00CC               	movwf	(checkChannelStatus@current+2)^(0+128)
 15474  14F6  0140               	movlb	0	; select bank0
 15475  14F7  085C               	movf	?___fldiv+1,w
 15476  14F8  0141               	movlb	1	; select bank1
 15477  14F9  00CB               	movwf	(checkChannelStatus@current+1)^(0+128)
 15478  14FA  0140               	movlb	0	; select bank0
 15479  14FB  085B               	movf	?___fldiv,w
 15480  14FC  0141               	movlb	1	; select bank1
 15481  14FD  00CA               	movwf	checkChannelStatus@current^(0+128)
 15482                           
 15483                           ;system.c: 83:   if (current < 0.05) {
 15484  14FE  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 15485  14FF  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15486  1500  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 15487  1501  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15488  1502  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 15489  1503  00AE               	movwf	(___flge@ff1+1)^(0+128)
 15490  1504  084A               	movf	checkChannelStatus@current^(0+128),w
 15491  1505  00AD               	movwf	___flge@ff1^(0+128)
 15492  1506  303D               	movlw	61
 15493  1507  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15494  1508  304C               	movlw	76
 15495  1509  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15496  150A  30CC               	movlw	204
 15497  150B  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15498  150C  30CD               	movlw	205
 15499  150D  00B1               	movwf	___flge@ff2^(0+128)
 15500  150E  31AB  2339  3194   	fcall	___flge
 15501  1511  1803               	btfsc	3,0
 15502  1512  2D2D               	goto	l8410
 15503                           
 15504                           ;system.c: 85:    if (chData->status == CH_ENABLED)
 15505  1513  0141               	movlb	1	; select bank1
 15506  1514  084F               	movf	checkChannelStatus@chData^(0+128),w
 15507  1515  0086               	movwf	6
 15508  1516  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15509  1517  0087               	movwf	7
 15510  1518  315E               	addfsr 1,30
 15511  1519  0301               	decf	1,w
 15512  151A  1D03               	btfss	3,2
 15513  151B  2D20               	goto	l8408
 15514                           
 15515                           ;system.c: 86:     error(WARN_REMOVED);
 15516  151C  3001               	movlw	1
 15517  151D  31B5  25D1  3194   	fcall	_error
 15518  1520                     l8408:	
 15519                           
 15520                           ;system.c: 87:    chData->status = CH_OPEN;
 15521  1520  0141               	movlb	1	; select bank1
 15522  1521  084F               	movf	checkChannelStatus@chData^(0+128),w
 15523  1522  3E1E               	addlw	30
 15524  1523  00B9               	movwf	??_checkChannelStatus^(0+128)
 15525  1524  3000               	movlw	0
 15526  1525  3D50               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 15527  1526  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 15528  1527  0839               	movf	??_checkChannelStatus^(0+128),w
 15529  1528  0086               	movwf	6
 15530  1529  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 15531  152A  0087               	movwf	7
 15532  152B  3002               	movlw	2
 15533  152C  2FF5               	goto	L8
 15534  152D                     l8410:	
 15535                           ;system.c: 88:   } else if ((current > 2.0) || !PORTCbits.RC2) {
 15536                           
 15537  152D  3040               	movlw	64
 15538  152E  0141               	movlb	1	; select bank1
 15539  152F  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15540  1530  3000               	movlw	0
 15541  1531  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15542  1532  3000               	movlw	0
 15543  1533  00AE               	movwf	(___flge@ff1+1)^(0+128)
 15544  1534  3000               	movlw	0
 15545  1535  00AD               	movwf	___flge@ff1^(0+128)
 15546  1536  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 15547  1537  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15548  1538  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 15549  1539  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15550  153A  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 15551  153B  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15552  153C  084A               	movf	checkChannelStatus@current^(0+128),w
 15553  153D  00B1               	movwf	___flge@ff2^(0+128)
 15554  153E  31AB  2339  3194   	fcall	___flge
 15555  1541  1C03               	btfss	3,0
 15556  1542  2D46               	goto	l8414
 15557  1543  0140               	movlb	0	; select bank0
 15558  1544  190E               	btfsc	14,2	;volatile
 15559  1545  2D74               	goto	l8428
 15560  1546                     l8414:	
 15561                           
 15562                           ;system.c: 91:    error(WARN_HEATER_OVERCURRENT);
 15563  1546  3004               	movlw	4
 15564  1547  31B5  25D1  3194   	fcall	_error
 15565                           
 15566                           ;system.c: 92:    chData->status = CH_OVERCURRENT;
 15567  154A  0141               	movlb	1	; select bank1
 15568  154B  084F               	movf	checkChannelStatus@chData^(0+128),w
 15569  154C  3E1E               	addlw	30
 15570  154D  00B9               	movwf	??_checkChannelStatus^(0+128)
 15571  154E  3000               	movlw	0
 15572  154F  3D50               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 15573  1550  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 15574  1551  0839               	movf	??_checkChannelStatus^(0+128),w
 15575  1552  0086               	movwf	6
 15576  1553  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 15577  1554  0087               	movwf	7
 15578  1555  3004               	movlw	4
 15579  1556  0081               	movwf	1
 15580                           
 15581                           ;system.c: 94:    if (!PORTCbits.RC2) {
 15582  1557  0140               	movlb	0	; select bank0
 15583  1558  190E               	btfsc	14,2	;volatile
 15584  1559  2FF6               	goto	l8466
 15585                           
 15586                           ;system.c: 95:     chData->status = CH_SHORTED;
 15587  155A  0141               	movlb	1	; select bank1
 15588  155B  084F               	movf	checkChannelStatus@chData^(0+128),w
 15589  155C  3E1E               	addlw	30
 15590  155D  00B9               	movwf	??_checkChannelStatus^(0+128)
 15591  155E  3000               	movlw	0
 15592  155F  3D50               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 15593  1560  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 15594  1561  0839               	movf	??_checkChannelStatus^(0+128),w
 15595  1562  0086               	movwf	6
 15596  1563  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 15597  1564  0087               	movwf	7
 15598  1565  3003               	movlw	3
 15599  1566  0081               	movwf	1
 15600                           
 15601                           ;system.c: 96:     LATCbits.LATC3 = 0;
 15602  1567  0140               	movlb	0	; select bank0
 15603  1568  119A               	bcf	26,3	;volatile
 15604                           
 15605                           ;system.c: 97:     _delay((unsigned long)((5)*(4000000UL/4000.0)));
 15606  1569  3007               	movlw	7
 15607  156A  0141               	movlb	1	; select bank1
 15608  156B  00B9               	movwf	??_checkChannelStatus^(0+128)
 15609  156C  307D               	movlw	125
 15610  156D                     u10567:	
 15611  156D  0B89               	decfsz	9,f
 15612  156E  2D6D               	goto	u10567
 15613  156F  0BB9               	decfsz	??_checkChannelStatus^(0+128),f
 15614  1570  2D6D               	goto	u10567
 15615                           
 15616                           ;system.c: 98:     LATCbits.LATC3 = 1;
 15617  1571  0140               	movlb	0	; select bank0
 15618  1572  159A               	bsf	26,3	;volatile
 15619  1573  2FF6               	goto	l8466
 15620  1574                     l8428:	
 15621                           
 15622                           ;system.c: 101:    chData->current = current;
 15623  1574  0141               	movlb	1	; select bank1
 15624  1575  084F               	movf	checkChannelStatus@chData^(0+128),w
 15625  1576  0086               	movwf	6
 15626  1577  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15627  1578  0087               	movwf	7
 15628  1579  084A               	movf	checkChannelStatus@current^(0+128),w
 15629  157A  3FC0               	movwi [0]fsr1
 15630  157B  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 15631  157C  3FC1               	movwi [1]fsr1
 15632  157D  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 15633  157E  3FC2               	movwi [2]fsr1
 15634  157F  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 15635  1580  3FC3               	movwi [3]fsr1
 15636                           
 15637                           ;system.c: 102:    chData->Pmax = data.voltage * current;
 15638  1581  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 15639  1582  0140               	movlb	0	; select bank0
 15640  1583  00C4               	movwf	___flmul@b+3
 15641  1584  0141               	movlb	1	; select bank1
 15642  1585  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 15643  1586  0140               	movlb	0	; select bank0
 15644  1587  00C3               	movwf	___flmul@b+2
 15645  1588  0141               	movlb	1	; select bank1
 15646  1589  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 15647  158A  0140               	movlb	0	; select bank0
 15648  158B  00C2               	movwf	___flmul@b+1
 15649  158C  0141               	movlb	1	; select bank1
 15650  158D  084A               	movf	checkChannelStatus@current^(0+128),w
 15651  158E  0140               	movlb	0	; select bank0
 15652  158F  00C1               	movwf	___flmul@b
 15653  1590  304A               	movlw	74
 15654  1591  0086               	movwf	6
 15655  1592  3027               	movlw	39
 15656  1593  0087               	movwf	7
 15657  1594  3151               	addfsr 1,17
 15658  1595  3F40               	moviw [0]fsr1
 15659  1596  00C5               	movwf	___flmul@a
 15660  1597  3F41               	moviw [1]fsr1
 15661  1598  00C6               	movwf	___flmul@a+1
 15662  1599  3F42               	moviw [2]fsr1
 15663  159A  00C7               	movwf	___flmul@a+2
 15664  159B  3F43               	moviw [3]fsr1
 15665  159C  00C8               	movwf	___flmul@a+3
 15666  159D  3185  2561  3194   	fcall	___flmul
 15667  15A0  0141               	movlb	1	; select bank1
 15668  15A1  084F               	movf	checkChannelStatus@chData^(0+128),w
 15669  15A2  0086               	movwf	6
 15670  15A3  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15671  15A4  0087               	movwf	7
 15672  15A5  3144               	addfsr 1,4
 15673  15A6  0140               	movlb	0	; select bank0
 15674  15A7  0841               	movf	?___flmul,w
 15675  15A8  3FC0               	movwi [0]fsr1
 15676  15A9  0842               	movf	?___flmul+1,w
 15677  15AA  3FC1               	movwi [1]fsr1
 15678  15AB  0843               	movf	?___flmul+2,w
 15679  15AC  3FC2               	movwi [2]fsr1
 15680  15AD  0844               	movf	?___flmul+3,w
 15681  15AE  3FC3               	movwi [3]fsr1
 15682                           
 15683                           ;system.c: 105:    if (chData->Pset > chData->Pmax)
 15684  15AF  0141               	movlb	1	; select bank1
 15685  15B0  084F               	movf	checkChannelStatus@chData^(0+128),w
 15686  15B1  0086               	movwf	6
 15687  15B2  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15688  15B3  0087               	movwf	7
 15689  15B4  3144               	addfsr 1,4
 15690  15B5  3F40               	moviw [0]fsr1
 15691  15B6  00AD               	movwf	___flge@ff1^(0+128)
 15692  15B7  3F41               	moviw [1]fsr1
 15693  15B8  00AE               	movwf	(___flge@ff1+1)^(0+128)
 15694  15B9  3F42               	moviw [2]fsr1
 15695  15BA  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15696  15BB  3F43               	moviw [3]fsr1
 15697  15BC  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15698  15BD  084F               	movf	checkChannelStatus@chData^(0+128),w
 15699  15BE  0086               	movwf	6
 15700  15BF  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15701  15C0  0087               	movwf	7
 15702  15C1  3150               	addfsr 1,16
 15703  15C2  3F40               	moviw [0]fsr1
 15704  15C3  00B1               	movwf	___flge@ff2^(0+128)
 15705  15C4  3F41               	moviw [1]fsr1
 15706  15C5  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15707  15C6  3F42               	moviw [2]fsr1
 15708  15C7  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15709  15C8  3F43               	moviw [3]fsr1
 15710  15C9  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15711  15CA  31AB  2339  3194   	fcall	___flge
 15712  15CD  1803               	btfsc	3,0
 15713  15CE  2DEA               	goto	l791
 15714                           
 15715                           ;system.c: 106:     chData->Pset = chData->Pmax;
 15716  15CF  0141               	movlb	1	; select bank1
 15717  15D0  084F               	movf	checkChannelStatus@chData^(0+128),w
 15718  15D1  0086               	movwf	6
 15719  15D2  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15720  15D3  0087               	movwf	7
 15721  15D4  3144               	addfsr 1,4
 15722  15D5  3F40               	moviw [0]fsr1
 15723  15D6  00B9               	movwf	??_checkChannelStatus^(0+128)
 15724  15D7  3F41               	moviw [1]fsr1
 15725  15D8  00BA               	movwf	(??_checkChannelStatus^(0+128)+1)
 15726  15D9  3F42               	moviw [2]fsr1
 15727  15DA  00BB               	movwf	(??_checkChannelStatus^(0+128)+2)
 15728  15DB  3F43               	moviw [3]fsr1
 15729  15DC  00BC               	movwf	(??_checkChannelStatus^(0+128)+3)
 15730  15DD  084F               	movf	checkChannelStatus@chData^(0+128),w
 15731  15DE  0086               	movwf	6
 15732  15DF  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15733  15E0  0087               	movwf	7
 15734  15E1  3150               	addfsr 1,16
 15735  15E2  0839               	movf	??_checkChannelStatus^(0+128),w
 15736  15E3  3FC0               	movwi [0]fsr1
 15737  15E4  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 15738  15E5  3FC1               	movwi [1]fsr1
 15739  15E6  083B               	movf	(??_checkChannelStatus+2)^(0+128),w
 15740  15E7  3FC2               	movwi [2]fsr1
 15741  15E8  083C               	movf	(??_checkChannelStatus+3)^(0+128),w
 15742  15E9  3FC3               	movwi [3]fsr1
 15743  15EA                     l791:	
 15744                           
 15745                           ;system.c: 108:    if (data.status.SENSOR_OK) {
 15746  15EA  3073               	movlw	115
 15747  15EB  0086               	movwf	6
 15748  15EC  3027               	movlw	39
 15749  15ED  0087               	movwf	7
 15750  15EE  1D81               	btfss	1,3
 15751  15EF  2E36               	goto	l8444
 15752                           
 15753                           ;system.c: 109:     if (chData->Pset < 0)
 15754  15F0  0141               	movlb	1	; select bank1
 15755  15F1  084F               	movf	checkChannelStatus@chData^(0+128),w
 15756  15F2  0086               	movwf	6
 15757  15F3  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15758  15F4  0087               	movwf	7
 15759  15F5  3150               	addfsr 1,16
 15760  15F6  3F40               	moviw [0]fsr1
 15761  15F7  00AD               	movwf	___flge@ff1^(0+128)
 15762  15F8  3F41               	moviw [1]fsr1
 15763  15F9  00AE               	movwf	(___flge@ff1+1)^(0+128)
 15764  15FA  3F42               	moviw [2]fsr1
 15765  15FB  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15766  15FC  3F43               	moviw [3]fsr1
 15767  15FD  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15768  15FE  3000               	movlw	0
 15769  15FF  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15770  1600  3000               	movlw	0
 15771  1601  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15772  1602  3000               	movlw	0
 15773  1603  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15774  1604  3000               	movlw	0
 15775  1605  00B1               	movwf	___flge@ff2^(0+128)
 15776  1606  31AB  2339  3194   	fcall	___flge
 15777  1609  1803               	btfsc	3,0
 15778  160A  2E19               	goto	l8440
 15779                           
 15780                           ;system.c: 110:      chData->mode = MODE_AUTO;
 15781  160B  0141               	movlb	1	; select bank1
 15782  160C  084F               	movf	checkChannelStatus@chData^(0+128),w
 15783  160D  3E1D               	addlw	29
 15784  160E  00B9               	movwf	??_checkChannelStatus^(0+128)
 15785  160F  3000               	movlw	0
 15786  1610  3D50               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 15787  1611  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 15788  1612  0839               	movf	??_checkChannelStatus^(0+128),w
 15789  1613  0086               	movwf	6
 15790  1614  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 15791  1615  0087               	movwf	7
 15792  1616  3001               	movlw	1
 15793  1617  0081               	movwf	1
 15794  1618  2E57               	goto	l8448
 15795  1619                     l8440:	
 15796  1619  3000               	movlw	0
 15797  161A  0141               	movlb	1	; select bank1
 15798  161B  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15799  161C  3000               	movlw	0
 15800  161D  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15801  161E  3000               	movlw	0
 15802  161F  00AE               	movwf	(___flge@ff1+1)^(0+128)
 15803  1620  3000               	movlw	0
 15804  1621  00AD               	movwf	___flge@ff1^(0+128)
 15805  1622  084F               	movf	checkChannelStatus@chData^(0+128),w
 15806  1623  0086               	movwf	6
 15807  1624  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15808  1625  0087               	movwf	7
 15809  1626  3150               	addfsr 1,16
 15810  1627  3F40               	moviw [0]fsr1
 15811  1628  00B1               	movwf	___flge@ff2^(0+128)
 15812  1629  3F41               	moviw [1]fsr1
 15813  162A  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15814  162B  3F42               	moviw [2]fsr1
 15815  162C  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15816  162D  3F43               	moviw [3]fsr1
 15817  162E  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15818  162F  31AB  2339  3194   	fcall	___flge
 15819  1632  1803               	btfsc	3,0
 15820  1633  2E57               	goto	l8448
 15821                           
 15822                           ;system.c: 112:      chData->mode = MODE_MANUAL;
 15823  1634  0141               	movlb	1	; select bank1
 15824  1635  2E51               	goto	l8446
 15825  1636                     l8444:	
 15826                           
 15827                           ;system.c: 114:     chData->Pset = chData->Pmax;
 15828  1636  0141               	movlb	1	; select bank1
 15829  1637  084F               	movf	checkChannelStatus@chData^(0+128),w
 15830  1638  0086               	movwf	6
 15831  1639  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15832  163A  0087               	movwf	7
 15833  163B  3144               	addfsr 1,4
 15834  163C  3F40               	moviw [0]fsr1
 15835  163D  00B9               	movwf	??_checkChannelStatus^(0+128)
 15836  163E  3F41               	moviw [1]fsr1
 15837  163F  00BA               	movwf	(??_checkChannelStatus^(0+128)+1)
 15838  1640  3F42               	moviw [2]fsr1
 15839  1641  00BB               	movwf	(??_checkChannelStatus^(0+128)+2)
 15840  1642  3F43               	moviw [3]fsr1
 15841  1643  00BC               	movwf	(??_checkChannelStatus^(0+128)+3)
 15842  1644  084F               	movf	checkChannelStatus@chData^(0+128),w
 15843  1645  0086               	movwf	6
 15844  1646  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15845  1647  0087               	movwf	7
 15846  1648  3150               	addfsr 1,16
 15847  1649  0839               	movf	??_checkChannelStatus^(0+128),w
 15848  164A  3FC0               	movwi [0]fsr1
 15849  164B  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 15850  164C  3FC1               	movwi [1]fsr1
 15851  164D  083B               	movf	(??_checkChannelStatus+2)^(0+128),w
 15852  164E  3FC2               	movwi [2]fsr1
 15853  164F  083C               	movf	(??_checkChannelStatus+3)^(0+128),w
 15854  1650  3FC3               	movwi [3]fsr1
 15855  1651                     l8446:	
 15856                           
 15857                           ;system.c: 115:     chData->mode = MODE_MANUAL;
 15858  1651  084F               	movf	checkChannelStatus@chData^(0+128),w
 15859  1652  0086               	movwf	6
 15860  1653  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15861  1654  0087               	movwf	7
 15862  1655  315D               	addfsr 1,29
 15863  1656  0181               	clrf	1
 15864  1657                     l8448:	
 15865                           
 15866                           ;system.c: 118:    if (chData->Pset == 0)
 15867  1657  0141               	movlb	1	; select bank1
 15868  1658  084F               	movf	checkChannelStatus@chData^(0+128),w
 15869  1659  0086               	movwf	6
 15870  165A  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15871  165B  0087               	movwf	7
 15872  165C  3150               	addfsr 1,16
 15873  165D  3F40               	moviw [0]fsr1
 15874  165E  0140               	movlb	0	; select bank0
 15875  165F  00A0               	movwf	___fleq@ff1
 15876  1660  3F41               	moviw [1]fsr1
 15877  1661  00A1               	movwf	___fleq@ff1+1
 15878  1662  3F42               	moviw [2]fsr1
 15879  1663  00A2               	movwf	___fleq@ff1+2
 15880  1664  3F43               	moviw [3]fsr1
 15881  1665  00A3               	movwf	___fleq@ff1+3
 15882  1666  3000               	movlw	0
 15883  1667  00A7               	movwf	___fleq@ff2+3
 15884  1668  3000               	movlw	0
 15885  1669  00A6               	movwf	___fleq@ff2+2
 15886  166A  3000               	movlw	0
 15887  166B  00A5               	movwf	___fleq@ff2+1
 15888  166C  3000               	movlw	0
 15889  166D  00A4               	movwf	___fleq@ff2
 15890  166E  31B7  276D  3194   	fcall	___fleq
 15891  1671  1C03               	btfss	3,0
 15892  1672  2E7B               	goto	l8452
 15893                           
 15894                           ;system.c: 119:     chData->status = CH_DISABLED;
 15895  1673  0141               	movlb	1	; select bank1
 15896  1674  084F               	movf	checkChannelStatus@chData^(0+128),w
 15897  1675  0086               	movwf	6
 15898  1676  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15899  1677  0087               	movwf	7
 15900  1678  315E               	addfsr 1,30
 15901  1679  0181               	clrf	1
 15902  167A  2E88               	goto	l798
 15903  167B                     l8452:	
 15904                           
 15905                           ;system.c: 121:     chData->status = CH_ENABLED;
 15906  167B  0141               	movlb	1	; select bank1
 15907  167C  084F               	movf	checkChannelStatus@chData^(0+128),w
 15908  167D  3E1E               	addlw	30
 15909  167E  00B9               	movwf	??_checkChannelStatus^(0+128)
 15910  167F  3000               	movlw	0
 15911  1680  3D50               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 15912  1681  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 15913  1682  0839               	movf	??_checkChannelStatus^(0+128),w
 15914  1683  0086               	movwf	6
 15915  1684  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 15916  1685  0087               	movwf	7
 15917  1686  3001               	movlw	1
 15918  1687  0081               	movwf	1
 15919  1688                     l798:	
 15920                           
 15921                           ;system.c: 124:    if (chData->mode == MODE_AUTO)
 15922  1688  084F               	movf	checkChannelStatus@chData^(0+128),w
 15923  1689  0086               	movwf	6
 15924  168A  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15925  168B  0087               	movwf	7
 15926  168C  315D               	addfsr 1,29
 15927  168D  0301               	decf	1,w
 15928  168E  1D03               	btfss	3,2
 15929  168F  2F3A               	goto	l8460
 15930                           
 15931                           ;system.c: 125:     chData->DCreq = (((chData->Preq / chData->Pmax) * 100) < (100) ? ((c
      +                          hData->Preq / chData->Pmax) * 100) : (100));
 15932  1690  3042               	movlw	66
 15933  1691  0140               	movlb	0	; select bank0
 15934  1692  00C4               	movwf	___flmul@b+3
 15935  1693  30C8               	movlw	200
 15936  1694  00C3               	movwf	___flmul@b+2
 15937  1695  3000               	movlw	0
 15938  1696  00C2               	movwf	___flmul@b+1
 15939  1697  3000               	movlw	0
 15940  1698  00C1               	movwf	___flmul@b
 15941  1699  0141               	movlb	1	; select bank1
 15942  169A  084F               	movf	checkChannelStatus@chData^(0+128),w
 15943  169B  0086               	movwf	6
 15944  169C  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15945  169D  0087               	movwf	7
 15946  169E  3144               	addfsr 1,4
 15947  169F  3F40               	moviw [0]fsr1
 15948  16A0  0140               	movlb	0	; select bank0
 15949  16A1  00DB               	movwf	___fldiv@a
 15950  16A2  3F41               	moviw [1]fsr1
 15951  16A3  00DC               	movwf	___fldiv@a+1
 15952  16A4  3F42               	moviw [2]fsr1
 15953  16A5  00DD               	movwf	___fldiv@a+2
 15954  16A6  3F43               	moviw [3]fsr1
 15955  16A7  00DE               	movwf	___fldiv@a+3
 15956  16A8  0141               	movlb	1	; select bank1
 15957  16A9  084F               	movf	checkChannelStatus@chData^(0+128),w
 15958  16AA  0086               	movwf	6
 15959  16AB  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 15960  16AC  0087               	movwf	7
 15961  16AD  3148               	addfsr 1,8
 15962  16AE  3F40               	moviw [0]fsr1
 15963  16AF  0140               	movlb	0	; select bank0
 15964  16B0  00DF               	movwf	___fldiv@b
 15965  16B1  3F41               	moviw [1]fsr1
 15966  16B2  00E0               	movwf	___fldiv@b+1
 15967  16B3  3F42               	moviw [2]fsr1
 15968  16B4  00E1               	movwf	___fldiv@b+2
 15969  16B5  3F43               	moviw [3]fsr1
 15970  16B6  00E2               	movwf	___fldiv@b+3
 15971  16B7  319E  2628  3194   	fcall	___fldiv
 15972  16BA  0140               	movlb	0	; select bank0
 15973  16BB  085E               	movf	?___fldiv+3,w
 15974  16BC  00C8               	movwf	___flmul@a+3
 15975  16BD  085D               	movf	?___fldiv+2,w
 15976  16BE  00C7               	movwf	___flmul@a+2
 15977  16BF  085C               	movf	?___fldiv+1,w
 15978  16C0  00C6               	movwf	___flmul@a+1
 15979  16C1  085B               	movf	?___fldiv,w
 15980  16C2  00C5               	movwf	___flmul@a
 15981  16C3  3185  2561  3194   	fcall	___flmul
 15982  16C6  0140               	movlb	0	; select bank0
 15983  16C7  0844               	movf	?___flmul+3,w
 15984  16C8  0141               	movlb	1	; select bank1
 15985  16C9  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15986  16CA  0140               	movlb	0	; select bank0
 15987  16CB  0843               	movf	?___flmul+2,w
 15988  16CC  0141               	movlb	1	; select bank1
 15989  16CD  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15990  16CE  0140               	movlb	0	; select bank0
 15991  16CF  0842               	movf	?___flmul+1,w
 15992  16D0  0141               	movlb	1	; select bank1
 15993  16D1  00AE               	movwf	(___flge@ff1+1)^(0+128)
 15994  16D2  0140               	movlb	0	; select bank0
 15995  16D3  0841               	movf	?___flmul,w
 15996  16D4  0141               	movlb	1	; select bank1
 15997  16D5  00AD               	movwf	___flge@ff1^(0+128)
 15998  16D6  3042               	movlw	66
 15999  16D7  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16000  16D8  30C8               	movlw	200
 16001  16D9  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16002  16DA  3000               	movlw	0
 16003  16DB  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16004  16DC  3000               	movlw	0
 16005  16DD  00B1               	movwf	___flge@ff2^(0+128)
 16006  16DE  31AB  2339  3194   	fcall	___flge
 16007  16E1  1C03               	btfss	3,0
 16008  16E2  2EEC               	goto	l8458
 16009  16E3  3042               	movlw	66
 16010  16E4  0141               	movlb	1	; select bank1
 16011  16E5  00C2               	movwf	(_checkChannelStatus$1841+3)^(0+128)
 16012  16E6  30C8               	movlw	200
 16013  16E7  00C1               	movwf	(_checkChannelStatus$1841+2)^(0+128)
 16014  16E8  3000               	movlw	0
 16015  16E9  00C0               	movwf	(_checkChannelStatus$1841+1)^(0+128)
 16016  16EA  3000               	movlw	0
 16017  16EB  2F31               	goto	L9
 16018  16EC                     l8458:	
 16019  16EC  3042               	movlw	66
 16020  16ED  0140               	movlb	0	; select bank0
 16021  16EE  00C4               	movwf	___flmul@b+3
 16022  16EF  30C8               	movlw	200
 16023  16F0  00C3               	movwf	___flmul@b+2
 16024  16F1  3000               	movlw	0
 16025  16F2  00C2               	movwf	___flmul@b+1
 16026  16F3  3000               	movlw	0
 16027  16F4  00C1               	movwf	___flmul@b
 16028  16F5  0141               	movlb	1	; select bank1
 16029  16F6  084F               	movf	checkChannelStatus@chData^(0+128),w
 16030  16F7  0086               	movwf	6
 16031  16F8  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16032  16F9  0087               	movwf	7
 16033  16FA  3144               	addfsr 1,4
 16034  16FB  3F40               	moviw [0]fsr1
 16035  16FC  0140               	movlb	0	; select bank0
 16036  16FD  00DB               	movwf	___fldiv@a
 16037  16FE  3F41               	moviw [1]fsr1
 16038  16FF  00DC               	movwf	___fldiv@a+1
 16039  1700  3F42               	moviw [2]fsr1
 16040  1701  00DD               	movwf	___fldiv@a+2
 16041  1702  3F43               	moviw [3]fsr1
 16042  1703  00DE               	movwf	___fldiv@a+3
 16043  1704  0141               	movlb	1	; select bank1
 16044  1705  084F               	movf	checkChannelStatus@chData^(0+128),w
 16045  1706  0086               	movwf	6
 16046  1707  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16047  1708  0087               	movwf	7
 16048  1709  3148               	addfsr 1,8
 16049  170A  3F40               	moviw [0]fsr1
 16050  170B  0140               	movlb	0	; select bank0
 16051  170C  00DF               	movwf	___fldiv@b
 16052  170D  3F41               	moviw [1]fsr1
 16053  170E  00E0               	movwf	___fldiv@b+1
 16054  170F  3F42               	moviw [2]fsr1
 16055  1710  00E1               	movwf	___fldiv@b+2
 16056  1711  3F43               	moviw [3]fsr1
 16057  1712  00E2               	movwf	___fldiv@b+3
 16058  1713  319E  2628  3194   	fcall	___fldiv
 16059  1716  0140               	movlb	0	; select bank0
 16060  1717  085E               	movf	?___fldiv+3,w
 16061  1718  00C8               	movwf	___flmul@a+3
 16062  1719  085D               	movf	?___fldiv+2,w
 16063  171A  00C7               	movwf	___flmul@a+2
 16064  171B  085C               	movf	?___fldiv+1,w
 16065  171C  00C6               	movwf	___flmul@a+1
 16066  171D  085B               	movf	?___fldiv,w
 16067  171E  00C5               	movwf	___flmul@a
 16068  171F  3185  2561  3194   	fcall	___flmul
 16069  1722  0140               	movlb	0	; select bank0
 16070  1723  0844               	movf	?___flmul+3,w
 16071  1724  0141               	movlb	1	; select bank1
 16072  1725  00C2               	movwf	(_checkChannelStatus$1841+3)^(0+128)
 16073  1726  0140               	movlb	0	; select bank0
 16074  1727  0843               	movf	?___flmul+2,w
 16075  1728  0141               	movlb	1	; select bank1
 16076  1729  00C1               	movwf	(_checkChannelStatus$1841+2)^(0+128)
 16077  172A  0140               	movlb	0	; select bank0
 16078  172B  0842               	movf	?___flmul+1,w
 16079  172C  0141               	movlb	1	; select bank1
 16080  172D  00C0               	movwf	(_checkChannelStatus$1841+1)^(0+128)
 16081  172E  0140               	movlb	0	; select bank0
 16082  172F  0841               	movf	?___flmul,w
 16083  1730  0141               	movlb	1	; select bank1
 16084  1731                     L9:	
 16085  1731  00BF               	movwf	_checkChannelStatus$1841^(0+128)
 16086  1732  0842               	movf	(_checkChannelStatus$1841+3)^(0+128),w
 16087  1733  00AB               	movwf	(___fltol@f1+3)^(0+128)
 16088  1734  0841               	movf	(_checkChannelStatus$1841+2)^(0+128),w
 16089  1735  00AA               	movwf	(___fltol@f1+2)^(0+128)
 16090  1736  0840               	movf	(_checkChannelStatus$1841+1)^(0+128),w
 16091  1737  00A9               	movwf	(___fltol@f1+1)^(0+128)
 16092  1738  083F               	movf	_checkChannelStatus$1841^(0+128),w
 16093  1739  2FE3               	goto	L11
 16094  173A                     l8460:	
 16095                           
 16096                           ;system.c: 127:     chData->DCreq = (((chData->Pset / chData->Pmax) * 100) < (100) ? ((c
      +                          hData->Pset / chData->Pmax) * 100) : (100));
 16097  173A  3042               	movlw	66
 16098  173B  0140               	movlb	0	; select bank0
 16099  173C  00C4               	movwf	___flmul@b+3
 16100  173D  30C8               	movlw	200
 16101  173E  00C3               	movwf	___flmul@b+2
 16102  173F  3000               	movlw	0
 16103  1740  00C2               	movwf	___flmul@b+1
 16104  1741  3000               	movlw	0
 16105  1742  00C1               	movwf	___flmul@b
 16106  1743  0141               	movlb	1	; select bank1
 16107  1744  084F               	movf	checkChannelStatus@chData^(0+128),w
 16108  1745  0086               	movwf	6
 16109  1746  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16110  1747  0087               	movwf	7
 16111  1748  3144               	addfsr 1,4
 16112  1749  3F40               	moviw [0]fsr1
 16113  174A  0140               	movlb	0	; select bank0
 16114  174B  00DB               	movwf	___fldiv@a
 16115  174C  3F41               	moviw [1]fsr1
 16116  174D  00DC               	movwf	___fldiv@a+1
 16117  174E  3F42               	moviw [2]fsr1
 16118  174F  00DD               	movwf	___fldiv@a+2
 16119  1750  3F43               	moviw [3]fsr1
 16120  1751  00DE               	movwf	___fldiv@a+3
 16121  1752  0141               	movlb	1	; select bank1
 16122  1753  084F               	movf	checkChannelStatus@chData^(0+128),w
 16123  1754  0086               	movwf	6
 16124  1755  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16125  1756  0087               	movwf	7
 16126  1757  3150               	addfsr 1,16
 16127  1758  3F40               	moviw [0]fsr1
 16128  1759  0140               	movlb	0	; select bank0
 16129  175A  00DF               	movwf	___fldiv@b
 16130  175B  3F41               	moviw [1]fsr1
 16131  175C  00E0               	movwf	___fldiv@b+1
 16132  175D  3F42               	moviw [2]fsr1
 16133  175E  00E1               	movwf	___fldiv@b+2
 16134  175F  3F43               	moviw [3]fsr1
 16135  1760  00E2               	movwf	___fldiv@b+3
 16136  1761  319E  2628  3194   	fcall	___fldiv
 16137  1764  0140               	movlb	0	; select bank0
 16138  1765  085E               	movf	?___fldiv+3,w
 16139  1766  00C8               	movwf	___flmul@a+3
 16140  1767  085D               	movf	?___fldiv+2,w
 16141  1768  00C7               	movwf	___flmul@a+2
 16142  1769  085C               	movf	?___fldiv+1,w
 16143  176A  00C6               	movwf	___flmul@a+1
 16144  176B  085B               	movf	?___fldiv,w
 16145  176C  00C5               	movwf	___flmul@a
 16146  176D  3185  2561  3194   	fcall	___flmul
 16147  1770  0140               	movlb	0	; select bank0
 16148  1771  0844               	movf	?___flmul+3,w
 16149  1772  0141               	movlb	1	; select bank1
 16150  1773  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16151  1774  0140               	movlb	0	; select bank0
 16152  1775  0843               	movf	?___flmul+2,w
 16153  1776  0141               	movlb	1	; select bank1
 16154  1777  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16155  1778  0140               	movlb	0	; select bank0
 16156  1779  0842               	movf	?___flmul+1,w
 16157  177A  0141               	movlb	1	; select bank1
 16158  177B  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16159  177C  0140               	movlb	0	; select bank0
 16160  177D  0841               	movf	?___flmul,w
 16161  177E  0141               	movlb	1	; select bank1
 16162  177F  00AD               	movwf	___flge@ff1^(0+128)
 16163  1780  3042               	movlw	66
 16164  1781  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16165  1782  30C8               	movlw	200
 16166  1783  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16167  1784  3000               	movlw	0
 16168  1785  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16169  1786  3000               	movlw	0
 16170  1787  00B1               	movwf	___flge@ff2^(0+128)
 16171  1788  31AB  2339  3194   	fcall	___flge
 16172  178B  1C03               	btfss	3,0
 16173  178C  2F96               	goto	l8464
 16174  178D  3042               	movlw	66
 16175  178E  0141               	movlb	1	; select bank1
 16176  178F  00C6               	movwf	(_checkChannelStatus$1842+3)^(0+128)
 16177  1790  30C8               	movlw	200
 16178  1791  00C5               	movwf	(_checkChannelStatus$1842+2)^(0+128)
 16179  1792  3000               	movlw	0
 16180  1793  00C4               	movwf	(_checkChannelStatus$1842+1)^(0+128)
 16181  1794  3000               	movlw	0
 16182  1795  2FDB               	goto	L10
 16183  1796                     l8464:	
 16184  1796  3042               	movlw	66
 16185  1797  0140               	movlb	0	; select bank0
 16186  1798  00C4               	movwf	___flmul@b+3
 16187  1799  30C8               	movlw	200
 16188  179A  00C3               	movwf	___flmul@b+2
 16189  179B  3000               	movlw	0
 16190  179C  00C2               	movwf	___flmul@b+1
 16191  179D  3000               	movlw	0
 16192  179E  00C1               	movwf	___flmul@b
 16193  179F  0141               	movlb	1	; select bank1
 16194  17A0  084F               	movf	checkChannelStatus@chData^(0+128),w
 16195  17A1  0086               	movwf	6
 16196  17A2  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16197  17A3  0087               	movwf	7
 16198  17A4  3144               	addfsr 1,4
 16199  17A5  3F40               	moviw [0]fsr1
 16200  17A6  0140               	movlb	0	; select bank0
 16201  17A7  00DB               	movwf	___fldiv@a
 16202  17A8  3F41               	moviw [1]fsr1
 16203  17A9  00DC               	movwf	___fldiv@a+1
 16204  17AA  3F42               	moviw [2]fsr1
 16205  17AB  00DD               	movwf	___fldiv@a+2
 16206  17AC  3F43               	moviw [3]fsr1
 16207  17AD  00DE               	movwf	___fldiv@a+3
 16208  17AE  0141               	movlb	1	; select bank1
 16209  17AF  084F               	movf	checkChannelStatus@chData^(0+128),w
 16210  17B0  0086               	movwf	6
 16211  17B1  0850               	movf	(checkChannelStatus@chData+1)^(0+128),w
 16212  17B2  0087               	movwf	7
 16213  17B3  3150               	addfsr 1,16
 16214  17B4  3F40               	moviw [0]fsr1
 16215  17B5  0140               	movlb	0	; select bank0
 16216  17B6  00DF               	movwf	___fldiv@b
 16217  17B7  3F41               	moviw [1]fsr1
 16218  17B8  00E0               	movwf	___fldiv@b+1
 16219  17B9  3F42               	moviw [2]fsr1
 16220  17BA  00E1               	movwf	___fldiv@b+2
 16221  17BB  3F43               	moviw [3]fsr1
 16222  17BC  00E2               	movwf	___fldiv@b+3
 16223  17BD  319E  2628  3194   	fcall	___fldiv
 16224  17C0  0140               	movlb	0	; select bank0
 16225  17C1  085E               	movf	?___fldiv+3,w
 16226  17C2  00C8               	movwf	___flmul@a+3
 16227  17C3  085D               	movf	?___fldiv+2,w
 16228  17C4  00C7               	movwf	___flmul@a+2
 16229  17C5  085C               	movf	?___fldiv+1,w
 16230  17C6  00C6               	movwf	___flmul@a+1
 16231  17C7  085B               	movf	?___fldiv,w
 16232  17C8  00C5               	movwf	___flmul@a
 16233  17C9  3185  2561  3194   	fcall	___flmul
 16234  17CC  0140               	movlb	0	; select bank0
 16235  17CD  0844               	movf	?___flmul+3,w
 16236  17CE  0141               	movlb	1	; select bank1
 16237  17CF  00C6               	movwf	(_checkChannelStatus$1842+3)^(0+128)
 16238  17D0  0140               	movlb	0	; select bank0
 16239  17D1  0843               	movf	?___flmul+2,w
 16240  17D2  0141               	movlb	1	; select bank1
 16241  17D3  00C5               	movwf	(_checkChannelStatus$1842+2)^(0+128)
 16242  17D4  0140               	movlb	0	; select bank0
 16243  17D5  0842               	movf	?___flmul+1,w
 16244  17D6  0141               	movlb	1	; select bank1
 16245  17D7  00C4               	movwf	(_checkChannelStatus$1842+1)^(0+128)
 16246  17D8  0140               	movlb	0	; select bank0
 16247  17D9  0841               	movf	?___flmul,w
 16248  17DA  0141               	movlb	1	; select bank1
 16249  17DB                     L10:	
 16250  17DB  00C3               	movwf	_checkChannelStatus$1842^(0+128)
 16251  17DC  0846               	movf	(_checkChannelStatus$1842+3)^(0+128),w
 16252  17DD  00AB               	movwf	(___fltol@f1+3)^(0+128)
 16253  17DE  0845               	movf	(_checkChannelStatus$1842+2)^(0+128),w
 16254  17DF  00AA               	movwf	(___fltol@f1+2)^(0+128)
 16255  17E0  0844               	movf	(_checkChannelStatus$1842+1)^(0+128),w
 16256  17E1  00A9               	movwf	(___fltol@f1+1)^(0+128)
 16257  17E2  0843               	movf	_checkChannelStatus$1842^(0+128),w
 16258  17E3                     L11:	
 16259  17E3  00A8               	movwf	___fltol@f1^(0+128)
 16260  17E4  31A8  20C0  3194   	fcall	___fltol
 16261  17E7  0141               	movlb	1	; select bank1
 16262  17E8  0828               	movf	?___fltol^(0+128),w
 16263  17E9  00B9               	movwf	??_checkChannelStatus^(0+128)
 16264  17EA  084F               	movf	checkChannelStatus@chData^(0+128),w
 16265  17EB  3E14               	addlw	20
 16266  17EC  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 16267  17ED  3000               	movlw	0
 16268  17EE  3D50               	addwfc	(checkChannelStatus@chData+1)^(0+128),w
 16269  17EF  00BB               	movwf	(??_checkChannelStatus+2)^(0+128)
 16270  17F0  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16271  17F1  0086               	movwf	6
 16272  17F2  083B               	movf	(??_checkChannelStatus+2)^(0+128),w
 16273  17F3  0087               	movwf	7
 16274  17F4  0839               	movf	??_checkChannelStatus^(0+128),w
 16275  17F5                     L8:	
 16276  17F5  0081               	movwf	1
 16277  17F6                     l8466:	
 16278  17F6  3001               	movlw	1
 16279  17F7  0141               	movlb	1	; select bank1
 16280  17F8  00B9               	movwf	??_checkChannelStatus^(0+128)
 16281  17F9  0839               	movf	??_checkChannelStatus^(0+128),w
 16282  17FA  07CE               	addwf	checkChannelStatus@channel^(0+128),f
 16283  17FB  3004               	movlw	4
 16284  17FC  024E               	subwf	checkChannelStatus@channel^(0+128),w
 16285  17FD  1803               	btfsc	3,0
 16286  17FE  0008               	return
 16287  17FF  2C16               	goto	l8380
 16288  1800                     __end_of_checkChannelStatus:	
 16289                           
 16290                           	psect	text33
 16291  36DE                     __ptext33:	
 16292 ;; *************** function _setChannelSwitch *****************
 16293 ;; Defined at:
 16294 ;;		line 6 in file "io.c"
 16295 ;; Parameters:    Size  Location     Type
 16296 ;;  channel         1    wreg     unsigned char 
 16297 ;;  state           1   13[BANK0 ] unsigned char 
 16298 ;; Auto vars:     Size  Location     Type
 16299 ;;  channel         1   16[BANK0 ] unsigned char 
 16300 ;; Return value:  Size  Location     Type
 16301 ;;                  1    wreg      void 
 16302 ;; Registers used:
 16303 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 16304 ;; Tracked objects:
 16305 ;;		On entry : 0/0
 16306 ;;		On exit  : 0/0
 16307 ;;		Unchanged: 0/0
 16308 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16309 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16310 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16311 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16312 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16313 ;;Total ram usage:        4 bytes
 16314 ;; Hardware stack levels used:    1
 16315 ;; Hardware stack levels required when called:    3
 16316 ;; This function calls:
 16317 ;;		Nothing
 16318 ;; This function is called by:
 16319 ;;		_checkChannelStatus
 16320 ;;		_systemCheck
 16321 ;;		_controller
 16322 ;; This function uses a non-reentrant model
 16323 ;;
 16324                           
 16325                           
 16326                           ;psect for function _setChannelSwitch
 16327  36DE                     _setChannelSwitch:	
 16328                           
 16329                           ;incstack = 0
 16330                           ; Regs used in _setChannelSwitch: [wreg-fsr0h+status,2+status,0]
 16331                           ;setChannelSwitch@channel stored from wreg
 16332  36DE  0140               	movlb	0	; select bank0
 16333  36DF  00B0               	movwf	setChannelSwitch@channel
 16334                           
 16335                           ;io.c: 6: void setChannelSwitch(uint8_t channel, uint8_t state);io.c: 7: {;io.c: 8:  swi
      +                          tch(channel) {
 16336  36E0  2F0E               	goto	l7944
 16337  36E1                     l7932:	
 16338                           
 16339                           ;io.c: 10:   LATAbits.LATA0 = state;
 16340  36E1  0C2D               	rrf	setChannelSwitch@state,w
 16341  36E2  1C03               	skipc
 16342  36E3  1018               	bcf	24,0	;volatile
 16343  36E4  1803               	skipnc
 16344  36E5  1418               	bsf	24,0	;volatile
 16345                           
 16346                           ;io.c: 11:   break;
 16347  36E6  0008               	return
 16348  36E7                     l7934:	
 16349                           
 16350                           ;io.c: 13:   LATAbits.LATA1 = state;
 16351  36E7  0C2D               	rrf	setChannelSwitch@state,w
 16352  36E8  1C03               	skipc
 16353  36E9  1098               	bcf	24,1	;volatile
 16354  36EA  1803               	skipnc
 16355  36EB  1498               	bsf	24,1	;volatile
 16356                           
 16357                           ;io.c: 14:   break;
 16358  36EC  0008               	return
 16359  36ED                     l7936:	
 16360                           
 16361                           ;io.c: 16:   LATAbits.LATA2 = state;
 16362  36ED  0C2D               	rrf	setChannelSwitch@state,w
 16363  36EE  1C03               	skipc
 16364  36EF  1118               	bcf	24,2	;volatile
 16365  36F0  1803               	skipnc
 16366  36F1  1518               	bsf	24,2	;volatile
 16367                           
 16368                           ;io.c: 17:   break;
 16369  36F2  0008               	return
 16370  36F3                     l7938:	
 16371                           
 16372                           ;io.c: 19:   LATAbits.LATA3 = state;
 16373  36F3  0C2D               	rrf	setChannelSwitch@state,w
 16374  36F4  1C03               	skipc
 16375  36F5  1198               	bcf	24,3	;volatile
 16376  36F6  1803               	skipnc
 16377  36F7  1598               	bsf	24,3	;volatile
 16378                           
 16379                           ;io.c: 20:   break;
 16380  36F8  0008               	return
 16381  36F9                     l7940:	
 16382                           
 16383                           ;io.c: 22:   LATAbits.LATA0 = state;
 16384  36F9  0C2D               	rrf	setChannelSwitch@state,w
 16385  36FA  1C03               	skipc
 16386  36FB  1018               	bcf	24,0	;volatile
 16387  36FC  1803               	skipnc
 16388  36FD  1418               	bsf	24,0	;volatile
 16389                           
 16390                           ;io.c: 23:   LATAbits.LATA1 = state;
 16391  36FE  0C2D               	rrf	setChannelSwitch@state,w
 16392  36FF  1C03               	skipc
 16393  3700  1098               	bcf	24,1	;volatile
 16394  3701  1803               	skipnc
 16395  3702  1498               	bsf	24,1	;volatile
 16396                           
 16397                           ;io.c: 24:   LATAbits.LATA2 = state;
 16398  3703  0C2D               	rrf	setChannelSwitch@state,w
 16399  3704  1C03               	skipc
 16400  3705  1118               	bcf	24,2	;volatile
 16401  3706  1803               	skipnc
 16402  3707  1518               	bsf	24,2	;volatile
 16403                           
 16404                           ;io.c: 25:   LATAbits.LATA3 = state;
 16405  3708  0C2D               	rrf	setChannelSwitch@state,w
 16406  3709  1C03               	skipc
 16407  370A  1198               	bcf	24,3	;volatile
 16408  370B  1803               	skipnc
 16409  370C  1598               	bsf	24,3	;volatile
 16410                           
 16411                           ;io.c: 26:   break;
 16412  370D  0008               	return
 16413  370E                     l7944:	
 16414  370E  0830               	movf	setChannelSwitch@channel,w
 16415  370F  00AE               	movwf	??_setChannelSwitch
 16416  3710  01AF               	clrf	??_setChannelSwitch+1
 16417                           
 16418                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16419                           ; Switch size 1, requested type "simple"
 16420                           ; Number of cases is 1, Range of values is 0 to 0
 16421                           ; switch strategies available:
 16422                           ; Name         Instructions Cycles
 16423                           ; simple_byte            4     3 (average)
 16424                           ; direct_byte            8     6 (fixed)
 16425                           ; jumptable            260     6 (fixed)
 16426                           ;	Chosen strategy is simple_byte
 16427  3711  082F               	movf	??_setChannelSwitch+1,w
 16428  3712  3A00               	xorlw	0	; case 0
 16429  3713  1903               	skipnz
 16430  3714  2F16               	goto	l8866
 16431  3715  2EF9               	goto	l7940
 16432  3716                     l8866:	
 16433                           
 16434                           ; Switch size 1, requested type "simple"
 16435                           ; Number of cases is 4, Range of values is 0 to 3
 16436                           ; switch strategies available:
 16437                           ; Name         Instructions Cycles
 16438                           ; simple_byte           13     7 (average)
 16439                           ; direct_byte           14     6 (fixed)
 16440                           ; jumptable            260     6 (fixed)
 16441                           ;	Chosen strategy is simple_byte
 16442  3716  082E               	movf	??_setChannelSwitch,w
 16443  3717  3A00               	xorlw	0	; case 0
 16444  3718  1903               	skipnz
 16445  3719  2EE1               	goto	l7932
 16446  371A  3A01               	xorlw	1	; case 1
 16447  371B  1903               	skipnz
 16448  371C  2EE7               	goto	l7934
 16449  371D  3A03               	xorlw	3	; case 2
 16450  371E  1903               	skipnz
 16451  371F  2EED               	goto	l7936
 16452  3720  3A01               	xorlw	1	; case 3
 16453  3721  1903               	skipnz
 16454  3722  2EF3               	goto	l7938
 16455  3723  2EF9               	goto	l7940
 16456  3724  0008               	return
 16457  3725                     __end_of_setChannelSwitch:	
 16458                           
 16459                           	psect	text34
 16460  1801                     __ptext34:	
 16461 ;; *************** function _getAnalogValue *****************
 16462 ;; Defined at:
 16463 ;;		line 33 in file "io.c"
 16464 ;; Parameters:    Size  Location     Type
 16465 ;;  channel         1    wreg     unsigned char 
 16466 ;; Auto vars:     Size  Location     Type
 16467 ;;  channel         1    3[BANK0 ] unsigned char 
 16468 ;; Return value:  Size  Location     Type
 16469 ;;                  2    0[BANK0 ] unsigned short 
 16470 ;; Registers used:
 16471 ;;		wreg, status,2, status,0
 16472 ;; Tracked objects:
 16473 ;;		On entry : 0/0
 16474 ;;		On exit  : 0/0
 16475 ;;		Unchanged: 0/0
 16476 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16477 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16478 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16479 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16480 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16481 ;;Total ram usage:        4 bytes
 16482 ;; Hardware stack levels used:    1
 16483 ;; Hardware stack levels required when called:    3
 16484 ;; This function calls:
 16485 ;;		Nothing
 16486 ;; This function is called by:
 16487 ;;		_checkChannelStatus
 16488 ;;		_systemCheck
 16489 ;;		_getAnalogValues
 16490 ;; This function uses a non-reentrant model
 16491 ;;
 16492                           
 16493                           
 16494                           ;psect for function _getAnalogValue
 16495  1801                     _getAnalogValue:	
 16496                           
 16497                           ;incstack = 0
 16498                           ; Regs used in _getAnalogValue: [wreg+status,2+status,0]
 16499                           ;getAnalogValue@channel stored from wreg
 16500  1801  0140               	movlb	0	; select bank0
 16501  1802  00A3               	movwf	getAnalogValue@channel
 16502                           
 16503                           ;io.c: 33: uint16_t getAnalogValue(uint8_t channel);io.c: 34: {;io.c: 35:  ADCON0bits.CH
      +                          S = channel;
 16504  1803  0823               	movf	getAnalogValue@channel,w
 16505  1804  00A2               	movwf	??_getAnalogValue
 16506  1805  0DA2               	rlf	??_getAnalogValue,f
 16507  1806  0DA2               	rlf	??_getAnalogValue,f
 16508  1807  0141               	movlb	1	; select bank1
 16509  1808  081D               	movf	29,w	;volatile
 16510  1809  0140               	movlb	0	; select bank0
 16511  180A  0622               	xorwf	??_getAnalogValue,w
 16512  180B  3903               	andlw	-253
 16513  180C  0622               	xorwf	??_getAnalogValue,w
 16514  180D  0141               	movlb	1	; select bank1
 16515  180E  009D               	movwf	29	;volatile
 16516                           
 16517                           ;io.c: 36:  _delay((unsigned long)((5)*(4000000UL/4000000.0)));
 16518  180F  3200               	nop2	;2 cycle nop
 16519  1810  3200               	nop2	;2 cycle nop
 16520  1811  0000               	nop
 16521                           
 16522                           ;io.c: 37:  ADCON0bits.GO = 1;
 16523  1812  0141               	movlb	1	; select bank1
 16524  1813  149D               	bsf	29,1	;volatile
 16525  1814                     l719:	
 16526                           ;io.c: 38:  while (ADCON0bits.GO);
 16527                           
 16528  1814  189D               	btfsc	29,1	;volatile
 16529  1815  2814               	goto	l719
 16530                           
 16531                           ;io.c: 39:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 16532  1816  081C               	movf	28,w	;volatile
 16533  1817  0140               	movlb	0	; select bank0
 16534  1818  00A1               	movwf	?_getAnalogValue+1
 16535  1819  0141               	movlb	1	; select bank1
 16536  181A  081B               	movf	27,w	;volatile
 16537  181B  0140               	movlb	0	; select bank0
 16538  181C  00A0               	movwf	?_getAnalogValue
 16539  181D  0008               	return
 16540  181E                     __end_of_getAnalogValue:	
 16541                           
 16542                           	psect	text35
 16543  35D1                     __ptext35:	
 16544 ;; *************** function _error *****************
 16545 ;; Defined at:
 16546 ;;		line 13 in file "error.c"
 16547 ;; Parameters:    Size  Location     Type
 16548 ;;  error           1    wreg     enum E7825
 16549 ;; Auto vars:     Size  Location     Type
 16550 ;;  error           1    8[BANK0 ] enum E7825
 16551 ;; Return value:  Size  Location     Type
 16552 ;;                  1    wreg      void 
 16553 ;; Registers used:
 16554 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16555 ;; Tracked objects:
 16556 ;;		On entry : 0/0
 16557 ;;		On exit  : 0/0
 16558 ;;		Unchanged: 0/0
 16559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16560 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16561 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16562 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16563 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16564 ;;Total ram usage:        2 bytes
 16565 ;; Hardware stack levels used:    1
 16566 ;; Hardware stack levels required when called:    4
 16567 ;; This function calls:
 16568 ;;		___awmod
 16569 ;; This function is called by:
 16570 ;;		_menu
 16571 ;;		_checkChannelStatus
 16572 ;;		_systemCheck
 16573 ;;		_checkSensor
 16574 ;; This function uses a non-reentrant model
 16575 ;;
 16576                           
 16577                           
 16578                           ;psect for function _error
 16579  35D1                     _error:	
 16580                           
 16581                           ;incstack = 0
 16582                           ; Regs used in _error: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16583                           ;error@error stored from wreg
 16584  35D1  0140               	movlb	0	; select bank0
 16585  35D2  00A8               	movwf	error@error
 16586                           
 16587                           ;error.c: 13: void error(enum e_errorcode error);error.c: 14: {;error.c: 15:  errorMessa
      +                          geQueue[head] = error;
 16588  35D3  0828               	movf	error@error,w
 16589  35D4  00A7               	movwf	??_error
 16590  35D5  0142               	movlb	2	; select bank2
 16591  35D6  0865               	movf	_head^(0+256),w
 16592  35D7  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 16593  35D8  0086               	movwf	6
 16594  35D9  3002               	movlw	2	; select bank4/5
 16595  35DA  0087               	movwf	7
 16596  35DB  0140               	movlb	0	; select bank0
 16597  35DC  0827               	movf	??_error,w
 16598  35DD  0081               	movwf	1
 16599                           
 16600                           ;error.c: 16:  head = (head + 1) % 10;
 16601  35DE  300A               	movlw	10
 16602  35DF  00A0               	movwf	___awmod@divisor
 16603  35E0  3000               	movlw	0
 16604  35E1  00A1               	movwf	___awmod@divisor+1
 16605  35E2  0142               	movlb	2	; select bank2
 16606  35E3  0865               	movf	_head^(0+256),w
 16607  35E4  3E01               	addlw	1
 16608  35E5  0140               	movlb	0	; select bank0
 16609  35E6  00A2               	movwf	___awmod@dividend
 16610  35E7  3000               	movlw	0
 16611  35E8  1803               	skipnc
 16612  35E9  3001               	movlw	1
 16613  35EA  00A3               	movwf	___awmod@dividend+1
 16614  35EB  31B6  2651  31B5   	fcall	___awmod
 16615  35EE  0140               	movlb	0	; select bank0
 16616  35EF  0820               	movf	?___awmod,w
 16617  35F0  00A7               	movwf	??_error
 16618  35F1  0827               	movf	??_error,w
 16619  35F2  0142               	movlb	2	; select bank2
 16620  35F3  00E5               	movwf	_head^(0+256)
 16621                           
 16622                           ;error.c: 17:  if (head == tail)
 16623  35F4  0865               	movf	_head^(0+256),w
 16624  35F5  067C               	xorwf	_tail,w
 16625  35F6  1D03               	skipz
 16626  35F7  0008               	return
 16627                           
 16628                           ;error.c: 18:   tail = (tail + 1) % 10;
 16629  35F8  300A               	movlw	10
 16630  35F9  0140               	movlb	0	; select bank0
 16631  35FA  00A0               	movwf	___awmod@divisor
 16632  35FB  3000               	movlw	0
 16633  35FC  00A1               	movwf	___awmod@divisor+1
 16634  35FD  087C               	movf	_tail,w
 16635  35FE  3E01               	addlw	1
 16636  35FF  00A2               	movwf	___awmod@dividend
 16637  3600  3000               	movlw	0
 16638  3601  1803               	skipnc
 16639  3602  3001               	movlw	1
 16640  3603  00A3               	movwf	___awmod@dividend+1
 16641  3604  31B6  2651         	fcall	___awmod
 16642  3606  0140               	movlb	0	; select bank0
 16643  3607  0820               	movf	?___awmod,w
 16644  3608  00A7               	movwf	??_error
 16645  3609  0827               	movf	??_error,w
 16646  360A  00FC               	movwf	_tail
 16647  360B  0008               	return
 16648  360C                     __end_of_error:	
 16649                           
 16650                           	psect	text36
 16651  3651                     __ptext36:	
 16652 ;; *************** function ___awmod *****************
 16653 ;; Defined at:
 16654 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 16655 ;; Parameters:    Size  Location     Type
 16656 ;;  divisor         2    0[BANK0 ] int 
 16657 ;;  dividend        2    2[BANK0 ] int 
 16658 ;; Auto vars:     Size  Location     Type
 16659 ;;  sign            1    6[BANK0 ] unsigned char 
 16660 ;;  counter         1    5[BANK0 ] unsigned char 
 16661 ;; Return value:  Size  Location     Type
 16662 ;;                  2    0[BANK0 ] int 
 16663 ;; Registers used:
 16664 ;;		wreg, status,2, status,0
 16665 ;; Tracked objects:
 16666 ;;		On entry : 0/0
 16667 ;;		On exit  : 0/0
 16668 ;;		Unchanged: 0/0
 16669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16670 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16671 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16672 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16673 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16674 ;;Total ram usage:        7 bytes
 16675 ;; Hardware stack levels used:    1
 16676 ;; Hardware stack levels required when called:    3
 16677 ;; This function calls:
 16678 ;;		Nothing
 16679 ;; This function is called by:
 16680 ;;		_error
 16681 ;;		_viewErrorMessage
 16682 ;;		_itoa
 16683 ;; This function uses a non-reentrant model
 16684 ;;
 16685                           
 16686                           
 16687                           ;psect for function ___awmod
 16688  3651                     ___awmod:	
 16689                           
 16690                           ;incstack = 0
 16691                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 16692  3651  0140               	movlb	0	; select bank0
 16693  3652  01A6               	clrf	___awmod@sign
 16694  3653  1FA3               	btfss	___awmod@dividend+1,7
 16695  3654  2E5C               	goto	l6842
 16696  3655  09A2               	comf	___awmod@dividend,f
 16697  3656  09A3               	comf	___awmod@dividend+1,f
 16698  3657  0AA2               	incf	___awmod@dividend,f
 16699  3658  1903               	skipnz
 16700  3659  0AA3               	incf	___awmod@dividend+1,f
 16701  365A  01A6               	clrf	___awmod@sign
 16702  365B  0AA6               	incf	___awmod@sign,f
 16703  365C                     l6842:	
 16704  365C  1FA1               	btfss	___awmod@divisor+1,7
 16705  365D  2E63               	goto	l6846
 16706  365E  09A0               	comf	___awmod@divisor,f
 16707  365F  09A1               	comf	___awmod@divisor+1,f
 16708  3660  0AA0               	incf	___awmod@divisor,f
 16709  3661  1903               	skipnz
 16710  3662  0AA1               	incf	___awmod@divisor+1,f
 16711  3663                     l6846:	
 16712  3663  0820               	movf	___awmod@divisor,w
 16713  3664  0421               	iorwf	___awmod@divisor+1,w
 16714  3665  1903               	btfsc	3,2
 16715  3666  2E8A               	goto	l6864
 16716  3667  01A5               	clrf	___awmod@counter
 16717  3668  0AA5               	incf	___awmod@counter,f
 16718  3669                     l6854:	
 16719  3669  1BA1               	btfsc	___awmod@divisor+1,7
 16720  366A  2E75               	goto	l6856
 16721  366B  3001               	movlw	1
 16722  366C                     u7935:	
 16723  366C  35A0               	lslf	___awmod@divisor,f
 16724  366D  0DA1               	rlf	___awmod@divisor+1,f
 16725  366E  0B89               	decfsz	9,f
 16726  366F  2E6C               	goto	u7935
 16727  3670  3001               	movlw	1
 16728  3671  00A4               	movwf	??___awmod
 16729  3672  0824               	movf	??___awmod,w
 16730  3673  07A5               	addwf	___awmod@counter,f
 16731  3674  2E69               	goto	l6854
 16732  3675                     l6856:	
 16733  3675  0821               	movf	___awmod@divisor+1,w
 16734  3676  0223               	subwf	___awmod@dividend+1,w
 16735  3677  1D03               	skipz
 16736  3678  2E7B               	goto	u7955
 16737  3679  0820               	movf	___awmod@divisor,w
 16738  367A  0222               	subwf	___awmod@dividend,w
 16739  367B                     u7955:	
 16740  367B  1C03               	skipc
 16741  367C  2E81               	goto	l6860
 16742  367D  0820               	movf	___awmod@divisor,w
 16743  367E  02A2               	subwf	___awmod@dividend,f
 16744  367F  0821               	movf	___awmod@divisor+1,w
 16745  3680  3BA3               	subwfb	___awmod@dividend+1,f
 16746  3681                     l6860:	
 16747  3681  3001               	movlw	1
 16748  3682                     u7965:	
 16749  3682  36A1               	lsrf	___awmod@divisor+1,f
 16750  3683  0CA0               	rrf	___awmod@divisor,f
 16751  3684  0B89               	decfsz	9,f
 16752  3685  2E82               	goto	u7965
 16753  3686  3001               	movlw	1
 16754  3687  02A5               	subwf	___awmod@counter,f
 16755  3688  1D03               	btfss	3,2
 16756  3689  2E75               	goto	l6856
 16757  368A                     l6864:	
 16758  368A  0826               	movf	___awmod@sign,w
 16759  368B  1903               	btfsc	3,2
 16760  368C  2E92               	goto	l6868
 16761  368D  09A2               	comf	___awmod@dividend,f
 16762  368E  09A3               	comf	___awmod@dividend+1,f
 16763  368F  0AA2               	incf	___awmod@dividend,f
 16764  3690  1903               	skipnz
 16765  3691  0AA3               	incf	___awmod@dividend+1,f
 16766  3692                     l6868:	
 16767  3692  0823               	movf	___awmod@dividend+1,w
 16768  3693  00A1               	movwf	?___awmod+1
 16769  3694  0822               	movf	___awmod@dividend,w
 16770  3695  00A0               	movwf	?___awmod
 16771  3696  0008               	return
 16772  3697                     __end_of___awmod:	
 16773                           
 16774                           	psect	text37
 16775  2926                     __ptext37:	
 16776 ;; *************** function _ema *****************
 16777 ;; Defined at:
 16778 ;;		line 64 in file "common.c"
 16779 ;; Parameters:    Size  Location     Type
 16780 ;;  in              2   12[BANK0 ] unsigned short 
 16781 ;;  average         2   14[BANK0 ] unsigned short 
 16782 ;;  alpha           4   16[BANK0 ] unsigned long 
 16783 ;; Auto vars:     Size  Location     Type
 16784 ;;  tmp0            4   28[BANK0 ] unsigned long 
 16785 ;; Return value:  Size  Location     Type
 16786 ;;                  2   12[BANK0 ] unsigned short 
 16787 ;; Registers used:
 16788 ;;		wreg, status,2, status,0, pclath, cstack
 16789 ;; Tracked objects:
 16790 ;;		On entry : 0/0
 16791 ;;		On exit  : 0/0
 16792 ;;		Unchanged: 0/0
 16793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16794 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16795 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16796 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16797 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16798 ;;Total ram usage:       20 bytes
 16799 ;; Hardware stack levels used:    1
 16800 ;; Hardware stack levels required when called:    4
 16801 ;; This function calls:
 16802 ;;		___lmul
 16803 ;; This function is called by:
 16804 ;;		_checkChannelStatus
 16805 ;;		_getAnalogValues
 16806 ;; This function uses a non-reentrant model
 16807 ;;
 16808                           
 16809                           
 16810                           ;psect for function _ema
 16811  2926                     _ema:	
 16812                           
 16813                           ;common.c: 64: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 65:
      +                           {;common.c: 66:  uint32_t tmp0;;common.c: 67:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 16814                           
 16815                           ;incstack = 0
 16816                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 16817  2926  0140               	movlb	0	; select bank0
 16818  2927  082E               	movf	ema@average,w
 16819  2928  00A0               	movwf	___lmul@multiplier
 16820  2929  082F               	movf	ema@average+1,w
 16821  292A  00A1               	movwf	___lmul@multiplier+1
 16822  292B  01A2               	clrf	___lmul@multiplier+2
 16823  292C  01A3               	clrf	___lmul@multiplier+3
 16824  292D  3000               	movlw	0
 16825  292E  00B4               	movwf	??_ema
 16826  292F  3000               	movlw	0
 16827  2930  00B5               	movwf	??_ema+1
 16828  2931  3001               	movlw	1
 16829  2932  00B6               	movwf	??_ema+2
 16830  2933  3000               	movlw	0
 16831  2934  00B7               	movwf	??_ema+3
 16832  2935  0830               	movf	ema@alpha,w
 16833  2936  02B4               	subwf	??_ema,f
 16834  2937  0831               	movf	ema@alpha+1,w
 16835  2938  3BB5               	subwfb	??_ema+1,f
 16836  2939  0832               	movf	ema@alpha+2,w
 16837  293A  3BB6               	subwfb	??_ema+2,f
 16838  293B  0833               	movf	ema@alpha+3,w
 16839  293C  3BB7               	subwfb	??_ema+3,f
 16840  293D  0837               	movf	??_ema+3,w
 16841  293E  00A7               	movwf	___lmul@multiplicand+3
 16842  293F  0836               	movf	??_ema+2,w
 16843  2940  00A6               	movwf	___lmul@multiplicand+2
 16844  2941  0835               	movf	??_ema+1,w
 16845  2942  00A5               	movwf	___lmul@multiplicand+1
 16846  2943  0834               	movf	??_ema,w
 16847  2944  00A4               	movwf	___lmul@multiplicand
 16848  2945  31B4  2436  31A9   	fcall	___lmul
 16849  2948  0140               	movlb	0	; select bank0
 16850  2949  0820               	movf	?___lmul,w
 16851  294A  00B8               	movwf	??_ema+4
 16852  294B  0821               	movf	?___lmul+1,w
 16853  294C  00B9               	movwf	??_ema+5
 16854  294D  0822               	movf	?___lmul+2,w
 16855  294E  00BA               	movwf	??_ema+6
 16856  294F  0823               	movf	?___lmul+3,w
 16857  2950  00BB               	movwf	??_ema+7
 16858  2951  082C               	movf	ema@in,w
 16859  2952  00A0               	movwf	___lmul@multiplier
 16860  2953  082D               	movf	ema@in+1,w
 16861  2954  00A1               	movwf	___lmul@multiplier+1
 16862  2955  01A2               	clrf	___lmul@multiplier+2
 16863  2956  01A3               	clrf	___lmul@multiplier+3
 16864  2957  0833               	movf	ema@alpha+3,w
 16865  2958  00A7               	movwf	___lmul@multiplicand+3
 16866  2959  0832               	movf	ema@alpha+2,w
 16867  295A  00A6               	movwf	___lmul@multiplicand+2
 16868  295B  0831               	movf	ema@alpha+1,w
 16869  295C  00A5               	movwf	___lmul@multiplicand+1
 16870  295D  0830               	movf	ema@alpha,w
 16871  295E  00A4               	movwf	___lmul@multiplicand
 16872  295F  31B4  2436  31A9   	fcall	___lmul
 16873  2962  0140               	movlb	0	; select bank0
 16874  2963  0820               	movf	?___lmul,w
 16875  2964  07B8               	addwf	??_ema+4,f
 16876  2965  0821               	movf	?___lmul+1,w
 16877  2966  3DB9               	addwfc	??_ema+5,f
 16878  2967  0822               	movf	?___lmul+2,w
 16879  2968  3DBA               	addwfc	??_ema+6,f
 16880  2969  0823               	movf	?___lmul+3,w
 16881  296A  3DBB               	addwfc	??_ema+7,f
 16882  296B  083B               	movf	??_ema+7,w
 16883  296C  00BF               	movwf	ema@tmp0+3
 16884  296D  083A               	movf	??_ema+6,w
 16885  296E  00BE               	movwf	ema@tmp0+2
 16886  296F  0839               	movf	??_ema+5,w
 16887  2970  00BD               	movwf	ema@tmp0+1
 16888  2971  0838               	movf	??_ema+4,w
 16889  2972  00BC               	movwf	ema@tmp0
 16890                           
 16891                           ;common.c: 68:  return(tmp0 + 32768) / 65536;
 16892  2973  3000               	movlw	0
 16893  2974  00B4               	movwf	??_ema
 16894  2975  3080               	movlw	128
 16895  2976  00B5               	movwf	??_ema+1
 16896  2977  3000               	movlw	0
 16897  2978  00B6               	movwf	??_ema+2
 16898  2979  3000               	movlw	0
 16899  297A  00B7               	movwf	??_ema+3
 16900  297B  083C               	movf	ema@tmp0,w
 16901  297C  07B4               	addwf	??_ema,f
 16902  297D  083D               	movf	ema@tmp0+1,w
 16903  297E  3DB5               	addwfc	??_ema+1,f
 16904  297F  083E               	movf	ema@tmp0+2,w
 16905  2980  3DB6               	addwfc	??_ema+2,f
 16906  2981  083F               	movf	ema@tmp0+3,w
 16907  2982  3DB7               	addwfc	??_ema+3,f
 16908  2983  3010               	movlw	16
 16909  2984                     u9605:	
 16910  2984  36B7               	lsrf	??_ema+3,f
 16911  2985  0CB6               	rrf	??_ema+2,f
 16912  2986  0CB5               	rrf	??_ema+1,f
 16913  2987  0CB4               	rrf	??_ema,f
 16914  2988  0B89               	decfsz	9,f
 16915  2989  2984               	goto	u9605
 16916  298A  0835               	movf	??_ema+1,w
 16917  298B  00AD               	movwf	?_ema+1
 16918  298C  0834               	movf	??_ema,w
 16919  298D  00AC               	movwf	?_ema
 16920  298E  0008               	return
 16921  298F                     __end_of_ema:	
 16922                           
 16923                           	psect	text38
 16924  3436                     __ptext38:	
 16925 ;; *************** function ___lmul *****************
 16926 ;; Defined at:
 16927 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 16928 ;; Parameters:    Size  Location     Type
 16929 ;;  multiplier      4    0[BANK0 ] unsigned long 
 16930 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 16931 ;; Auto vars:     Size  Location     Type
 16932 ;;  product         4    8[BANK0 ] unsigned long 
 16933 ;; Return value:  Size  Location     Type
 16934 ;;                  4    0[BANK0 ] unsigned long 
 16935 ;; Registers used:
 16936 ;;		wreg, status,2, status,0
 16937 ;; Tracked objects:
 16938 ;;		On entry : 0/0
 16939 ;;		On exit  : 0/0
 16940 ;;		Unchanged: 0/0
 16941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16942 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16943 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16945 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16946 ;;Total ram usage:       12 bytes
 16947 ;; Hardware stack levels used:    1
 16948 ;; Hardware stack levels required when called:    3
 16949 ;; This function calls:
 16950 ;;		Nothing
 16951 ;; This function is called by:
 16952 ;;		_ema
 16953 ;; This function uses a non-reentrant model
 16954 ;;
 16955                           
 16956                           
 16957                           ;psect for function ___lmul
 16958  3436                     ___lmul:	
 16959                           
 16960                           ;incstack = 0
 16961                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 16962  3436  3000               	movlw	0
 16963  3437  0140               	movlb	0	; select bank0
 16964  3438  00AB               	movwf	___lmul@product+3
 16965  3439  3000               	movlw	0
 16966  343A  00AA               	movwf	___lmul@product+2
 16967  343B  3000               	movlw	0
 16968  343C  00A9               	movwf	___lmul@product+1
 16969  343D  3000               	movlw	0
 16970  343E  00A8               	movwf	___lmul@product
 16971  343F                     l7450:	
 16972  343F  1C20               	btfss	___lmul@multiplier,0
 16973  3440  2C49               	goto	l7454
 16974  3441  0824               	movf	___lmul@multiplicand,w
 16975  3442  07A8               	addwf	___lmul@product,f
 16976  3443  0825               	movf	___lmul@multiplicand+1,w
 16977  3444  3DA9               	addwfc	___lmul@product+1,f
 16978  3445  0826               	movf	___lmul@multiplicand+2,w
 16979  3446  3DAA               	addwfc	___lmul@product+2,f
 16980  3447  0827               	movf	___lmul@multiplicand+3,w
 16981  3448  3DAB               	addwfc	___lmul@product+3,f
 16982  3449                     l7454:	
 16983  3449  3001               	movlw	1
 16984  344A                     u9105:	
 16985  344A  35A4               	lslf	___lmul@multiplicand,f
 16986  344B  0DA5               	rlf	___lmul@multiplicand+1,f
 16987  344C  0DA6               	rlf	___lmul@multiplicand+2,f
 16988  344D  0DA7               	rlf	___lmul@multiplicand+3,f
 16989  344E  0B89               	decfsz	9,f
 16990  344F  2C4A               	goto	u9105
 16991  3450  3001               	movlw	1
 16992  3451                     u9115:	
 16993  3451  36A3               	lsrf	___lmul@multiplier+3,f
 16994  3452  0CA2               	rrf	___lmul@multiplier+2,f
 16995  3453  0CA1               	rrf	___lmul@multiplier+1,f
 16996  3454  0CA0               	rrf	___lmul@multiplier,f
 16997  3455  0B89               	decfsz	9,f
 16998  3456  2C51               	goto	u9115
 16999  3457  0823               	movf	___lmul@multiplier+3,w
 17000  3458  0422               	iorwf	___lmul@multiplier+2,w
 17001  3459  0421               	iorwf	___lmul@multiplier+1,w
 17002  345A  0420               	iorwf	___lmul@multiplier,w
 17003  345B  1D03               	skipz
 17004  345C  2C3F               	goto	l7450
 17005  345D  082B               	movf	___lmul@product+3,w
 17006  345E  00A3               	movwf	?___lmul+3
 17007  345F  082A               	movf	___lmul@product+2,w
 17008  3460  00A2               	movwf	?___lmul+2
 17009  3461  0829               	movf	___lmul@product+1,w
 17010  3462  00A1               	movwf	?___lmul+1
 17011  3463  0828               	movf	___lmul@product,w
 17012  3464  00A0               	movwf	?___lmul
 17013  3465  0008               	return
 17014  3466                     __end_of___lmul:	
 17015                           
 17016                           	psect	text39
 17017  376D                     __ptext39:	
 17018 ;; *************** function ___fleq *****************
 17019 ;; Defined at:
 17020 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 17021 ;; Parameters:    Size  Location     Type
 17022 ;;  ff1             4    0[BANK0 ] unsigned long 
 17023 ;;  ff2             4    4[BANK0 ] unsigned long 
 17024 ;; Auto vars:     Size  Location     Type
 17025 ;;		None
 17026 ;; Return value:  Size  Location     Type
 17027 ;;		None               void
 17028 ;; Registers used:
 17029 ;;		wreg, status,2, status,0
 17030 ;; Tracked objects:
 17031 ;;		On entry : 0/0
 17032 ;;		On exit  : 0/0
 17033 ;;		Unchanged: 0/0
 17034 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17035 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17036 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17037 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17038 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17039 ;;Total ram usage:       12 bytes
 17040 ;; Hardware stack levels used:    1
 17041 ;; Hardware stack levels required when called:    3
 17042 ;; This function calls:
 17043 ;;		Nothing
 17044 ;; This function is called by:
 17045 ;;		_channelSetup
 17046 ;;		_setOutputPower
 17047 ;;		_checkChannelStatus
 17048 ;; This function uses a non-reentrant model
 17049 ;;
 17050                           
 17051                           
 17052                           ;psect for function ___fleq
 17053  376D                     ___fleq:	
 17054                           
 17055                           ;incstack = 0
 17056                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 17057  376D  3000               	movlw	0
 17058  376E  0140               	movlb	0	; select bank0
 17059  376F  0520               	andwf	___fleq@ff1,w
 17060  3770  00A8               	movwf	??___fleq
 17061  3771  3000               	movlw	0
 17062  3772  0521               	andwf	___fleq@ff1+1,w
 17063  3773  00A9               	movwf	??___fleq+1
 17064  3774  3080               	movlw	128
 17065  3775  0522               	andwf	___fleq@ff1+2,w
 17066  3776  00AA               	movwf	??___fleq+2
 17067  3777  307F               	movlw	127
 17068  3778  0523               	andwf	___fleq@ff1+3,w
 17069  3779  00AB               	movwf	??___fleq+3
 17070  377A  082B               	movf	??___fleq+3,w
 17071  377B  042A               	iorwf	??___fleq+2,w
 17072  377C  0429               	iorwf	??___fleq+1,w
 17073  377D  0428               	iorwf	??___fleq,w
 17074  377E  1D03               	skipz
 17075  377F  2F88               	goto	l1195
 17076  3780  3000               	movlw	0
 17077  3781  00A3               	movwf	___fleq@ff1+3
 17078  3782  3000               	movlw	0
 17079  3783  00A2               	movwf	___fleq@ff1+2
 17080  3784  3000               	movlw	0
 17081  3785  00A1               	movwf	___fleq@ff1+1
 17082  3786  3000               	movlw	0
 17083  3787  00A0               	movwf	___fleq@ff1
 17084  3788                     l1195:	
 17085  3788  3000               	movlw	0
 17086  3789  0524               	andwf	___fleq@ff2,w
 17087  378A  00A8               	movwf	??___fleq
 17088  378B  3000               	movlw	0
 17089  378C  0525               	andwf	___fleq@ff2+1,w
 17090  378D  00A9               	movwf	??___fleq+1
 17091  378E  3080               	movlw	128
 17092  378F  0526               	andwf	___fleq@ff2+2,w
 17093  3790  00AA               	movwf	??___fleq+2
 17094  3791  307F               	movlw	127
 17095  3792  0527               	andwf	___fleq@ff2+3,w
 17096  3793  00AB               	movwf	??___fleq+3
 17097  3794  082B               	movf	??___fleq+3,w
 17098  3795  042A               	iorwf	??___fleq+2,w
 17099  3796  0429               	iorwf	??___fleq+1,w
 17100  3797  0428               	iorwf	??___fleq,w
 17101  3798  1D03               	skipz
 17102  3799  2FA2               	goto	l1196
 17103  379A  3000               	movlw	0
 17104  379B  00A7               	movwf	___fleq@ff2+3
 17105  379C  3000               	movlw	0
 17106  379D  00A6               	movwf	___fleq@ff2+2
 17107  379E  3000               	movlw	0
 17108  379F  00A5               	movwf	___fleq@ff2+1
 17109  37A0  3000               	movlw	0
 17110  37A1  00A4               	movwf	___fleq@ff2
 17111  37A2                     l1196:	
 17112  37A2  0827               	movf	___fleq@ff2+3,w
 17113  37A3  0623               	xorwf	___fleq@ff1+3,w
 17114  37A4  1D03               	skipz
 17115  37A5  2FB0               	goto	u9155
 17116  37A6  0826               	movf	___fleq@ff2+2,w
 17117  37A7  0622               	xorwf	___fleq@ff1+2,w
 17118  37A8  1D03               	skipz
 17119  37A9  2FB0               	goto	u9155
 17120  37AA  0825               	movf	___fleq@ff2+1,w
 17121  37AB  0621               	xorwf	___fleq@ff1+1,w
 17122  37AC  1D03               	skipz
 17123  37AD  2FB0               	goto	u9155
 17124  37AE  0824               	movf	___fleq@ff2,w
 17125  37AF  0620               	xorwf	___fleq@ff1,w
 17126  37B0                     u9155:	
 17127  37B0  1903               	skipnz
 17128  37B1  2FB4               	goto	l7470
 17129  37B2  1003               	clrc
 17130  37B3  0008               	return
 17131  37B4                     l7470:	
 17132  37B4  1403               	setc
 17133  37B5  0008               	return
 17134  37B6                     __end_of___fleq:	
 17135                           
 17136                           	psect	text40
 17137  0BCC                     __ptext40:	
 17138 ;; *************** function _channelThing *****************
 17139 ;; Defined at:
 17140 ;;		line 370 in file "system.c"
 17141 ;; Parameters:    Size  Location     Type
 17142 ;;		None
 17143 ;; Auto vars:     Size  Location     Type
 17144 ;;  grpB            4   18[BANK4 ] char [4]
 17145 ;;  grpA            4   12[BANK4 ] char [4]
 17146 ;;  totalGrpB       4    8[BANK4 ] float 
 17147 ;;  totalGrpA       4    4[BANK4 ] float 
 17148 ;;  total           4    0[BANK4 ] float 
 17149 ;;  n               1   22[BANK4 ] unsigned char 
 17150 ;;  numGrpB         1   17[BANK4 ] unsigned char 
 17151 ;;  numGrpA         1   16[BANK4 ] unsigned char 
 17152 ;; Return value:  Size  Location     Type
 17153 ;;                  1    wreg      void 
 17154 ;; Registers used:
 17155 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17156 ;; Tracked objects:
 17157 ;;		On entry : 0/0
 17158 ;;		On exit  : 0/0
 17159 ;;		Unchanged: 0/0
 17160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17162 ;;      Locals:         0       0       0       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17163 ;;      Temps:          0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17164 ;;      Totals:         0       0      11       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17165 ;;Total ram usage:       34 bytes
 17166 ;; Hardware stack levels used:    1
 17167 ;; Hardware stack levels required when called:    7
 17168 ;; This function calls:
 17169 ;;		___bmul
 17170 ;;		___fladd
 17171 ;;		___fldiv
 17172 ;;		___flge
 17173 ;;		___flmul
 17174 ;;		___wmul
 17175 ;;		___xxtofl
 17176 ;;		_qsort
 17177 ;; This function is called by:
 17178 ;;		_main
 17179 ;; This function uses a non-reentrant model
 17180 ;;
 17181                           
 17182                           
 17183                           ;psect for function _channelThing
 17184  0BCC                     _channelThing:	
 17185                           
 17186                           ;system.c: 372:  uint8_t n;;system.c: 373:  float total, totalGrpA, totalGrpB;;system.c:
      +                           374:  uint8_t numGrpA, numGrpB;;system.c: 375:  int8_t grpA[4], grpB[4];;system.c: 378:
      +                            for(n = 0; n < 4; n++) {
 17187                           
 17188                           ;incstack = 0
 17189                           ; Regs used in _channelThing: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 17190  0BCC  0144               	movlb	4	; select bank4
 17191  0BCD  01DD               	clrf	channelThing@n^(0+512)
 17192  0BCE                     l8476:	
 17193                           
 17194                           ;system.c: 379:   grpA[n] = -1;
 17195  0BCE  085D               	movf	channelThing@n^(0+512),w
 17196  0BCF  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 17197  0BD0  0086               	movwf	6
 17198  0BD1  3002               	movlw	2	; select bank4/5
 17199  0BD2  0087               	movwf	7
 17200  0BD3  0181               	clrf	1
 17201  0BD4  0381               	decf	1,f
 17202                           
 17203                           ;system.c: 380:   grpB[n] = -1;
 17204  0BD5  085D               	movf	channelThing@n^(0+512),w
 17205  0BD6  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 17206  0BD7  0086               	movwf	6
 17207  0BD8  3002               	movlw	2	; select bank4/5
 17208  0BD9  0087               	movwf	7
 17209  0BDA  0181               	clrf	1
 17210  0BDB  0381               	decf	1,f
 17211                           
 17212                           ;system.c: 382:   virtChannels[n].phyChanNum = n;
 17213  0BDC  085D               	movf	channelThing@n^(0+512),w
 17214  0BDD  0141               	movlb	1	; select bank1
 17215  0BDE  00D3               	movwf	??_channelThing^(0+128)
 17216  0BDF  01D4               	clrf	(??_channelThing^(0+128)+1)
 17217  0BE0  3009               	movlw	9
 17218  0BE1  00D5               	movwf	(??_channelThing+2)^(0+128)
 17219  0BE2  0855               	movf	(??_channelThing+2)^(0+128),w
 17220  0BE3  0140               	movlb	0	; select bank0
 17221  0BE4  00A9               	movwf	___bmul@multiplicand
 17222  0BE5  0144               	movlb	4	; select bank4
 17223  0BE6  085D               	movf	channelThing@n^(0+512),w
 17224  0BE7  31B3  2330  318B   	fcall	___bmul
 17225  0BEA  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 17226  0BEB  0086               	movwf	6
 17227  0BEC  3002               	movlw	2	; select bank5/6
 17228  0BED  0087               	movwf	7
 17229  0BEE  0141               	movlb	1	; select bank1
 17230  0BEF  0853               	movf	??_channelThing^(0+128),w
 17231  0BF0  3FC0               	movwi [0]fsr1
 17232  0BF1  0854               	movf	(??_channelThing+1)^(0+128),w
 17233  0BF2  3FC1               	movwi [1]fsr1
 17234                           
 17235                           ;system.c: 383:   virtChannels[n].current = data.heater[n].current;
 17236  0BF3  0144               	movlb	4	; select bank4
 17237  0BF4  085D               	movf	channelThing@n^(0+512),w
 17238  0BF5  0141               	movlb	1	; select bank1
 17239  0BF6  00D3               	movwf	??_channelThing^(0+128)
 17240  0BF7  01D4               	clrf	(??_channelThing^(0+128)+1)
 17241  0BF8  0853               	movf	??_channelThing^(0+128),w
 17242  0BF9  0140               	movlb	0	; select bank0
 17243  0BFA  00AD               	movwf	___wmul@multiplier
 17244  0BFB  0141               	movlb	1	; select bank1
 17245  0BFC  0854               	movf	(??_channelThing+1)^(0+128),w
 17246  0BFD  0140               	movlb	0	; select bank0
 17247  0BFE  00AE               	movwf	___wmul@multiplier+1
 17248  0BFF  301F               	movlw	31
 17249  0C00  00AF               	movwf	___wmul@multiplicand
 17250  0C01  3000               	movlw	0
 17251  0C02  00B0               	movwf	___wmul@multiplicand+1
 17252  0C03  31B3  2371  318B   	fcall	___wmul
 17253  0C06  3074               	movlw	116
 17254  0C07  0141               	movlb	1	; select bank1
 17255  0C08  00D5               	movwf	(??_channelThing+2)^(0+128)
 17256  0C09  3027               	movlw	39
 17257  0C0A  00D6               	movwf	((??_channelThing+2)^(0+128)+1)
 17258  0C0B  0140               	movlb	0	; select bank0
 17259  0C0C  082D               	movf	?___wmul,w
 17260  0C0D  0141               	movlb	1	; select bank1
 17261  0C0E  0755               	addwf	(??_channelThing+2)^(0+128),w
 17262  0C0F  0086               	movwf	6
 17263  0C10  0140               	movlb	0	; select bank0
 17264  0C11  082E               	movf	?___wmul+1,w
 17265  0C12  0141               	movlb	1	; select bank1
 17266  0C13  3D56               	addwfc	(??_channelThing+3)^(0+128),w
 17267  0C14  0087               	movwf	7
 17268  0C15  3F40               	moviw [0]fsr1
 17269  0C16  00D7               	movwf	(??_channelThing+4)^(0+128)
 17270  0C17  3F41               	moviw [1]fsr1
 17271  0C18  00D8               	movwf	((??_channelThing+4)^(0+128)+1)
 17272  0C19  3F42               	moviw [2]fsr1
 17273  0C1A  00D9               	movwf	((??_channelThing+4)^(0+128)+2)
 17274  0C1B  3F43               	moviw [3]fsr1
 17275  0C1C  00DA               	movwf	((??_channelThing+4)^(0+128)+3)
 17276  0C1D  3009               	movlw	9
 17277  0C1E  00DB               	movwf	(??_channelThing+8)^(0+128)
 17278  0C1F  085B               	movf	(??_channelThing+8)^(0+128),w
 17279  0C20  0140               	movlb	0	; select bank0
 17280  0C21  00A9               	movwf	___bmul@multiplicand
 17281  0C22  0144               	movlb	4	; select bank4
 17282  0C23  085D               	movf	channelThing@n^(0+512),w
 17283  0C24  31B3  2330  318B   	fcall	___bmul
 17284  0C27  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 17285  0C28  0086               	movwf	6
 17286  0C29  3002               	movlw	2	; select bank5/6
 17287  0C2A  0087               	movwf	7
 17288  0C2B  0141               	movlb	1	; select bank1
 17289  0C2C  0857               	movf	(??_channelThing+4)^(0+128),w
 17290  0C2D  3FC0               	movwi [0]fsr1
 17291  0C2E  0858               	movf	(??_channelThing+5)^(0+128),w
 17292  0C2F  3FC1               	movwi [1]fsr1
 17293  0C30  0859               	movf	(??_channelThing+6)^(0+128),w
 17294  0C31  3FC2               	movwi [2]fsr1
 17295  0C32  085A               	movf	(??_channelThing+7)^(0+128),w
 17296  0C33  3FC3               	movwi [3]fsr1
 17297                           
 17298                           ;system.c: 384:   virtChannels[n].DC = data.heater[n].DCreq;
 17299  0C34  0144               	movlb	4	; select bank4
 17300  0C35  085D               	movf	channelThing@n^(0+512),w
 17301  0C36  0141               	movlb	1	; select bank1
 17302  0C37  00D3               	movwf	??_channelThing^(0+128)
 17303  0C38  01D4               	clrf	(??_channelThing^(0+128)+1)
 17304  0C39  0853               	movf	??_channelThing^(0+128),w
 17305  0C3A  0140               	movlb	0	; select bank0
 17306  0C3B  00AD               	movwf	___wmul@multiplier
 17307  0C3C  0141               	movlb	1	; select bank1
 17308  0C3D  0854               	movf	(??_channelThing+1)^(0+128),w
 17309  0C3E  0140               	movlb	0	; select bank0
 17310  0C3F  00AE               	movwf	___wmul@multiplier+1
 17311  0C40  301F               	movlw	31
 17312  0C41  00AF               	movwf	___wmul@multiplicand
 17313  0C42  3000               	movlw	0
 17314  0C43  00B0               	movwf	___wmul@multiplicand+1
 17315  0C44  31B3  2371  318B   	fcall	___wmul
 17316  0C47  3088               	movlw	136
 17317  0C48  0141               	movlb	1	; select bank1
 17318  0C49  00D5               	movwf	(??_channelThing+2)^(0+128)
 17319  0C4A  3027               	movlw	39
 17320  0C4B  00D6               	movwf	((??_channelThing+2)^(0+128)+1)
 17321  0C4C  0140               	movlb	0	; select bank0
 17322  0C4D  082D               	movf	?___wmul,w
 17323  0C4E  0141               	movlb	1	; select bank1
 17324  0C4F  0755               	addwf	(??_channelThing+2)^(0+128),w
 17325  0C50  0086               	movwf	6
 17326  0C51  0140               	movlb	0	; select bank0
 17327  0C52  082E               	movf	?___wmul+1,w
 17328  0C53  0141               	movlb	1	; select bank1
 17329  0C54  3D56               	addwfc	(??_channelThing+3)^(0+128),w
 17330  0C55  0087               	movwf	7
 17331  0C56  0801               	movf	1,w
 17332  0C57  00D7               	movwf	(??_channelThing+4)^(0+128)
 17333  0C58  3009               	movlw	9
 17334  0C59  00D8               	movwf	(??_channelThing+5)^(0+128)
 17335  0C5A  0858               	movf	(??_channelThing+5)^(0+128),w
 17336  0C5B  0140               	movlb	0	; select bank0
 17337  0C5C  00A9               	movwf	___bmul@multiplicand
 17338  0C5D  0144               	movlb	4	; select bank4
 17339  0C5E  085D               	movf	channelThing@n^(0+512),w
 17340  0C5F  31B3  2330  318B   	fcall	___bmul
 17341  0C62  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 17342  0C63  0086               	movwf	6
 17343  0C64  3002               	movlw	2	; select bank5/6
 17344  0C65  0087               	movwf	7
 17345  0C66  0141               	movlb	1	; select bank1
 17346  0C67  0857               	movf	(??_channelThing+4)^(0+128),w
 17347  0C68  0081               	movwf	1
 17348                           
 17349                           ;system.c: 385:  }
 17350  0C69  3001               	movlw	1
 17351  0C6A  00D3               	movwf	??_channelThing^(0+128)
 17352  0C6B  0853               	movf	??_channelThing^(0+128),w
 17353  0C6C  0144               	movlb	4	; select bank4
 17354  0C6D  07DD               	addwf	channelThing@n^(0+512),f
 17355  0C6E  3004               	movlw	4
 17356  0C6F  025D               	subwf	channelThing@n^(0+512),w
 17357  0C70  1C03               	skipc
 17358  0C71  2BCE               	goto	l8476
 17359                           
 17360                           ;system.c: 388:  qsort(virtChannels, 4, sizeof(virtChannels[0]), sortCur);
 17361  0C72  3004               	movlw	4
 17362  0C73  0141               	movlb	1	; select bank1
 17363  0C74  00BB               	movwf	qsort@nel^(0+128)
 17364  0C75  3000               	movlw	0
 17365  0C76  00BC               	movwf	(qsort@nel^(0+128)+1)
 17366  0C77  3009               	movlw	9
 17367  0C78  00BD               	movwf	qsort@width^(0+128)
 17368  0C79  3000               	movlw	0
 17369  0C7A  00BE               	movwf	(qsort@width^(0+128)+1)
 17370  0C7B  309A               	movlw	low _sortCur
 17371  0C7C  00BF               	movwf	qsort@compar^(0+128)
 17372  0C7D  3035               	movlw	high _sortCur
 17373  0C7E  00C0               	movwf	(qsort@compar^(0+128)+1)
 17374  0C7F  30A0               	movlw	(low (_virtChannels| (0+512)))& (0+255)
 17375  0C80  319A  22A9  318B   	fcall	_qsort
 17376                           
 17377                           ;system.c: 390:  total = totalGrpA = totalGrpB = 0;
 17378  0C83  3000               	movlw	0
 17379  0C84  0144               	movlb	4	; select bank4
 17380  0C85  00D2               	movwf	(channelThing@totalGrpB+3)^(0+512)
 17381  0C86  3000               	movlw	0
 17382  0C87  00D1               	movwf	(channelThing@totalGrpB+2)^(0+512)
 17383  0C88  3000               	movlw	0
 17384  0C89  00D0               	movwf	(channelThing@totalGrpB+1)^(0+512)
 17385  0C8A  3000               	movlw	0
 17386  0C8B  00CF               	movwf	channelThing@totalGrpB^(0+512)
 17387  0C8C  0852               	movf	(channelThing@totalGrpB+3)^(0+512),w
 17388  0C8D  00CE               	movwf	(channelThing@totalGrpA+3)^(0+512)
 17389  0C8E  0851               	movf	(channelThing@totalGrpB+2)^(0+512),w
 17390  0C8F  00CD               	movwf	(channelThing@totalGrpA+2)^(0+512)
 17391  0C90  0850               	movf	(channelThing@totalGrpB+1)^(0+512),w
 17392  0C91  00CC               	movwf	(channelThing@totalGrpA+1)^(0+512)
 17393  0C92  084F               	movf	channelThing@totalGrpB^(0+512),w
 17394  0C93  00CB               	movwf	channelThing@totalGrpA^(0+512)
 17395  0C94  084E               	movf	(channelThing@totalGrpA+3)^(0+512),w
 17396  0C95  00CA               	movwf	(channelThing@total+3)^(0+512)
 17397  0C96  084D               	movf	(channelThing@totalGrpA+2)^(0+512),w
 17398  0C97  00C9               	movwf	(channelThing@total+2)^(0+512)
 17399  0C98  084C               	movf	(channelThing@totalGrpA+1)^(0+512),w
 17400  0C99  00C8               	movwf	(channelThing@total+1)^(0+512)
 17401  0C9A  084B               	movf	channelThing@totalGrpA^(0+512),w
 17402  0C9B  00C7               	movwf	channelThing@total^(0+512)
 17403                           
 17404                           ;system.c: 391:  numGrpA = numGrpB = 0;
 17405  0C9C  01D8               	clrf	channelThing@numGrpB^(0+512)
 17406  0C9D  01D7               	clrf	channelThing@numGrpA^(0+512)
 17407                           
 17408                           ;system.c: 395:  for(n = 0; n < 4; n++) {
 17409  0C9E  01DD               	clrf	channelThing@n^(0+512)
 17410  0C9F                     l8500:	
 17411                           
 17412                           ;system.c: 396:   total += virtChannels[n].current;
 17413  0C9F  3009               	movlw	9
 17414  0CA0  0141               	movlb	1	; select bank1
 17415  0CA1  00D3               	movwf	??_channelThing^(0+128)
 17416  0CA2  0853               	movf	??_channelThing^(0+128),w
 17417  0CA3  0140               	movlb	0	; select bank0
 17418  0CA4  00A9               	movwf	___bmul@multiplicand
 17419  0CA5  0144               	movlb	4	; select bank4
 17420  0CA6  085D               	movf	channelThing@n^(0+512),w
 17421  0CA7  31B3  2330  318B   	fcall	___bmul
 17422  0CAA  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 17423  0CAB  0086               	movwf	6
 17424  0CAC  3002               	movlw	2	; select bank5/6
 17425  0CAD  0087               	movwf	7
 17426  0CAE  3F40               	moviw [0]fsr1
 17427  0CAF  0140               	movlb	0	; select bank0
 17428  0CB0  00DB               	movwf	___fladd@b
 17429  0CB1  3F41               	moviw [1]fsr1
 17430  0CB2  00DC               	movwf	___fladd@b+1
 17431  0CB3  3F42               	moviw [2]fsr1
 17432  0CB4  00DD               	movwf	___fladd@b+2
 17433  0CB5  3F43               	moviw [3]fsr1
 17434  0CB6  00DE               	movwf	___fladd@b+3
 17435  0CB7  0144               	movlb	4	; select bank4
 17436  0CB8  084A               	movf	(channelThing@total+3)^(0+512),w
 17437  0CB9  0140               	movlb	0	; select bank0
 17438  0CBA  00E2               	movwf	___fladd@a+3
 17439  0CBB  0144               	movlb	4	; select bank4
 17440  0CBC  0849               	movf	(channelThing@total+2)^(0+512),w
 17441  0CBD  0140               	movlb	0	; select bank0
 17442  0CBE  00E1               	movwf	___fladd@a+2
 17443  0CBF  0144               	movlb	4	; select bank4
 17444  0CC0  0848               	movf	(channelThing@total+1)^(0+512),w
 17445  0CC1  0140               	movlb	0	; select bank0
 17446  0CC2  00E0               	movwf	___fladd@a+1
 17447  0CC3  0144               	movlb	4	; select bank4
 17448  0CC4  0847               	movf	channelThing@total^(0+512),w
 17449  0CC5  0140               	movlb	0	; select bank0
 17450  0CC6  00DF               	movwf	___fladd@a
 17451  0CC7  3192  2232  318B   	fcall	___fladd
 17452  0CCA  0140               	movlb	0	; select bank0
 17453  0CCB  085E               	movf	?___fladd+3,w
 17454  0CCC  0144               	movlb	4	; select bank4
 17455  0CCD  00CA               	movwf	(channelThing@total+3)^(0+512)
 17456  0CCE  0140               	movlb	0	; select bank0
 17457  0CCF  085D               	movf	?___fladd+2,w
 17458  0CD0  0144               	movlb	4	; select bank4
 17459  0CD1  00C9               	movwf	(channelThing@total+2)^(0+512)
 17460  0CD2  0140               	movlb	0	; select bank0
 17461  0CD3  085C               	movf	?___fladd+1,w
 17462  0CD4  0144               	movlb	4	; select bank4
 17463  0CD5  00C8               	movwf	(channelThing@total+1)^(0+512)
 17464  0CD6  0140               	movlb	0	; select bank0
 17465  0CD7  085B               	movf	?___fladd,w
 17466  0CD8  0144               	movlb	4	; select bank4
 17467  0CD9  00C7               	movwf	channelThing@total^(0+512)
 17468                           
 17469                           ;system.c: 397:   if (totalGrpA + virtChannels[n].current <= 3.5) {
 17470  0CDA  3040               	movlw	64
 17471  0CDB  0141               	movlb	1	; select bank1
 17472  0CDC  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17473  0CDD  3060               	movlw	96
 17474  0CDE  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17475  0CDF  3000               	movlw	0
 17476  0CE0  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17477  0CE1  3000               	movlw	0
 17478  0CE2  00AD               	movwf	___flge@ff1^(0+128)
 17479  0CE3  0144               	movlb	4	; select bank4
 17480  0CE4  084E               	movf	(channelThing@totalGrpA+3)^(0+512),w
 17481  0CE5  0140               	movlb	0	; select bank0
 17482  0CE6  00DE               	movwf	___fladd@b+3
 17483  0CE7  0144               	movlb	4	; select bank4
 17484  0CE8  084D               	movf	(channelThing@totalGrpA+2)^(0+512),w
 17485  0CE9  0140               	movlb	0	; select bank0
 17486  0CEA  00DD               	movwf	___fladd@b+2
 17487  0CEB  0144               	movlb	4	; select bank4
 17488  0CEC  084C               	movf	(channelThing@totalGrpA+1)^(0+512),w
 17489  0CED  0140               	movlb	0	; select bank0
 17490  0CEE  00DC               	movwf	___fladd@b+1
 17491  0CEF  0144               	movlb	4	; select bank4
 17492  0CF0  084B               	movf	channelThing@totalGrpA^(0+512),w
 17493  0CF1  0140               	movlb	0	; select bank0
 17494  0CF2  00DB               	movwf	___fladd@b
 17495  0CF3  3009               	movlw	9
 17496  0CF4  0141               	movlb	1	; select bank1
 17497  0CF5  00D3               	movwf	??_channelThing^(0+128)
 17498  0CF6  0853               	movf	??_channelThing^(0+128),w
 17499  0CF7  0140               	movlb	0	; select bank0
 17500  0CF8  00A9               	movwf	___bmul@multiplicand
 17501  0CF9  0144               	movlb	4	; select bank4
 17502  0CFA  085D               	movf	channelThing@n^(0+512),w
 17503  0CFB  31B3  2330  318B   	fcall	___bmul
 17504  0CFE  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 17505  0CFF  0086               	movwf	6
 17506  0D00  3002               	movlw	2	; select bank5/6
 17507  0D01  0087               	movwf	7
 17508  0D02  3F40               	moviw [0]fsr1
 17509  0D03  0140               	movlb	0	; select bank0
 17510  0D04  00DF               	movwf	___fladd@a
 17511  0D05  3F41               	moviw [1]fsr1
 17512  0D06  00E0               	movwf	___fladd@a+1
 17513  0D07  3F42               	moviw [2]fsr1
 17514  0D08  00E1               	movwf	___fladd@a+2
 17515  0D09  3F43               	moviw [3]fsr1
 17516  0D0A  00E2               	movwf	___fladd@a+3
 17517  0D0B  3192  2232  318B   	fcall	___fladd
 17518  0D0E  0140               	movlb	0	; select bank0
 17519  0D0F  085E               	movf	?___fladd+3,w
 17520  0D10  0141               	movlb	1	; select bank1
 17521  0D11  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17522  0D12  0140               	movlb	0	; select bank0
 17523  0D13  085D               	movf	?___fladd+2,w
 17524  0D14  0141               	movlb	1	; select bank1
 17525  0D15  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17526  0D16  0140               	movlb	0	; select bank0
 17527  0D17  085C               	movf	?___fladd+1,w
 17528  0D18  0141               	movlb	1	; select bank1
 17529  0D19  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17530  0D1A  0140               	movlb	0	; select bank0
 17531  0D1B  085B               	movf	?___fladd,w
 17532  0D1C  0141               	movlb	1	; select bank1
 17533  0D1D  00B1               	movwf	___flge@ff2^(0+128)
 17534  0D1E  31AB  2339  318B   	fcall	___flge
 17535  0D21  1C03               	btfss	3,0
 17536  0D22  2D70               	goto	l8508
 17537                           
 17538                           ;system.c: 398:    totalGrpA += virtChannels[n].current;
 17539  0D23  3009               	movlw	9
 17540  0D24  0141               	movlb	1	; select bank1
 17541  0D25  00D3               	movwf	??_channelThing^(0+128)
 17542  0D26  0853               	movf	??_channelThing^(0+128),w
 17543  0D27  0140               	movlb	0	; select bank0
 17544  0D28  00A9               	movwf	___bmul@multiplicand
 17545  0D29  0144               	movlb	4	; select bank4
 17546  0D2A  085D               	movf	channelThing@n^(0+512),w
 17547  0D2B  31B3  2330  318B   	fcall	___bmul
 17548  0D2E  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 17549  0D2F  0086               	movwf	6
 17550  0D30  3002               	movlw	2	; select bank5/6
 17551  0D31  0087               	movwf	7
 17552  0D32  3F40               	moviw [0]fsr1
 17553  0D33  0140               	movlb	0	; select bank0
 17554  0D34  00DB               	movwf	___fladd@b
 17555  0D35  3F41               	moviw [1]fsr1
 17556  0D36  00DC               	movwf	___fladd@b+1
 17557  0D37  3F42               	moviw [2]fsr1
 17558  0D38  00DD               	movwf	___fladd@b+2
 17559  0D39  3F43               	moviw [3]fsr1
 17560  0D3A  00DE               	movwf	___fladd@b+3
 17561  0D3B  0144               	movlb	4	; select bank4
 17562  0D3C  084E               	movf	(channelThing@totalGrpA+3)^(0+512),w
 17563  0D3D  0140               	movlb	0	; select bank0
 17564  0D3E  00E2               	movwf	___fladd@a+3
 17565  0D3F  0144               	movlb	4	; select bank4
 17566  0D40  084D               	movf	(channelThing@totalGrpA+2)^(0+512),w
 17567  0D41  0140               	movlb	0	; select bank0
 17568  0D42  00E1               	movwf	___fladd@a+2
 17569  0D43  0144               	movlb	4	; select bank4
 17570  0D44  084C               	movf	(channelThing@totalGrpA+1)^(0+512),w
 17571  0D45  0140               	movlb	0	; select bank0
 17572  0D46  00E0               	movwf	___fladd@a+1
 17573  0D47  0144               	movlb	4	; select bank4
 17574  0D48  084B               	movf	channelThing@totalGrpA^(0+512),w
 17575  0D49  0140               	movlb	0	; select bank0
 17576  0D4A  00DF               	movwf	___fladd@a
 17577  0D4B  3192  2232  318B   	fcall	___fladd
 17578  0D4E  0140               	movlb	0	; select bank0
 17579  0D4F  085E               	movf	?___fladd+3,w
 17580  0D50  0144               	movlb	4	; select bank4
 17581  0D51  00CE               	movwf	(channelThing@totalGrpA+3)^(0+512)
 17582  0D52  0140               	movlb	0	; select bank0
 17583  0D53  085D               	movf	?___fladd+2,w
 17584  0D54  0144               	movlb	4	; select bank4
 17585  0D55  00CD               	movwf	(channelThing@totalGrpA+2)^(0+512)
 17586  0D56  0140               	movlb	0	; select bank0
 17587  0D57  085C               	movf	?___fladd+1,w
 17588  0D58  0144               	movlb	4	; select bank4
 17589  0D59  00CC               	movwf	(channelThing@totalGrpA+1)^(0+512)
 17590  0D5A  0140               	movlb	0	; select bank0
 17591  0D5B  085B               	movf	?___fladd,w
 17592  0D5C  0144               	movlb	4	; select bank4
 17593  0D5D  00CB               	movwf	channelThing@totalGrpA^(0+512)
 17594                           
 17595                           ;system.c: 399:    grpA[numGrpA++] = n;
 17596  0D5E  085D               	movf	channelThing@n^(0+512),w
 17597  0D5F  0141               	movlb	1	; select bank1
 17598  0D60  00D3               	movwf	??_channelThing^(0+128)
 17599  0D61  0144               	movlb	4	; select bank4
 17600  0D62  0857               	movf	channelThing@numGrpA^(0+512),w
 17601  0D63  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 17602  0D64  0086               	movwf	6
 17603  0D65  3002               	movlw	2	; select bank4/5
 17604  0D66  0087               	movwf	7
 17605  0D67  0141               	movlb	1	; select bank1
 17606  0D68  0853               	movf	??_channelThing^(0+128),w
 17607  0D69  0081               	movwf	1
 17608  0D6A  3001               	movlw	1
 17609  0D6B  00D3               	movwf	??_channelThing^(0+128)
 17610  0D6C  0853               	movf	??_channelThing^(0+128),w
 17611  0D6D  0144               	movlb	4	; select bank4
 17612  0D6E  07D7               	addwf	channelThing@numGrpA^(0+512),f
 17613                           
 17614                           ;system.c: 400:   } else if (totalGrpB + virtChannels[n].current <= 3.5) {
 17615  0D6F  2E05               	goto	l8516
 17616  0D70                     l8508:	
 17617  0D70  3040               	movlw	64
 17618  0D71  0141               	movlb	1	; select bank1
 17619  0D72  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17620  0D73  3060               	movlw	96
 17621  0D74  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17622  0D75  3000               	movlw	0
 17623  0D76  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17624  0D77  3000               	movlw	0
 17625  0D78  00AD               	movwf	___flge@ff1^(0+128)
 17626  0D79  0144               	movlb	4	; select bank4
 17627  0D7A  0852               	movf	(channelThing@totalGrpB+3)^(0+512),w
 17628  0D7B  0140               	movlb	0	; select bank0
 17629  0D7C  00DE               	movwf	___fladd@b+3
 17630  0D7D  0144               	movlb	4	; select bank4
 17631  0D7E  0851               	movf	(channelThing@totalGrpB+2)^(0+512),w
 17632  0D7F  0140               	movlb	0	; select bank0
 17633  0D80  00DD               	movwf	___fladd@b+2
 17634  0D81  0144               	movlb	4	; select bank4
 17635  0D82  0850               	movf	(channelThing@totalGrpB+1)^(0+512),w
 17636  0D83  0140               	movlb	0	; select bank0
 17637  0D84  00DC               	movwf	___fladd@b+1
 17638  0D85  0144               	movlb	4	; select bank4
 17639  0D86  084F               	movf	channelThing@totalGrpB^(0+512),w
 17640  0D87  0140               	movlb	0	; select bank0
 17641  0D88  00DB               	movwf	___fladd@b
 17642  0D89  3009               	movlw	9
 17643  0D8A  0141               	movlb	1	; select bank1
 17644  0D8B  00D3               	movwf	??_channelThing^(0+128)
 17645  0D8C  0853               	movf	??_channelThing^(0+128),w
 17646  0D8D  0140               	movlb	0	; select bank0
 17647  0D8E  00A9               	movwf	___bmul@multiplicand
 17648  0D8F  0144               	movlb	4	; select bank4
 17649  0D90  085D               	movf	channelThing@n^(0+512),w
 17650  0D91  31B3  2330  318B   	fcall	___bmul
 17651  0D94  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 17652  0D95  0086               	movwf	6
 17653  0D96  3002               	movlw	2	; select bank5/6
 17654  0D97  0087               	movwf	7
 17655  0D98  3F40               	moviw [0]fsr1
 17656  0D99  0140               	movlb	0	; select bank0
 17657  0D9A  00DF               	movwf	___fladd@a
 17658  0D9B  3F41               	moviw [1]fsr1
 17659  0D9C  00E0               	movwf	___fladd@a+1
 17660  0D9D  3F42               	moviw [2]fsr1
 17661  0D9E  00E1               	movwf	___fladd@a+2
 17662  0D9F  3F43               	moviw [3]fsr1
 17663  0DA0  00E2               	movwf	___fladd@a+3
 17664  0DA1  3192  2232  318B   	fcall	___fladd
 17665  0DA4  0140               	movlb	0	; select bank0
 17666  0DA5  085E               	movf	?___fladd+3,w
 17667  0DA6  0141               	movlb	1	; select bank1
 17668  0DA7  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17669  0DA8  0140               	movlb	0	; select bank0
 17670  0DA9  085D               	movf	?___fladd+2,w
 17671  0DAA  0141               	movlb	1	; select bank1
 17672  0DAB  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17673  0DAC  0140               	movlb	0	; select bank0
 17674  0DAD  085C               	movf	?___fladd+1,w
 17675  0DAE  0141               	movlb	1	; select bank1
 17676  0DAF  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17677  0DB0  0140               	movlb	0	; select bank0
 17678  0DB1  085B               	movf	?___fladd,w
 17679  0DB2  0141               	movlb	1	; select bank1
 17680  0DB3  00B1               	movwf	___flge@ff2^(0+128)
 17681  0DB4  31AB  2339  318B   	fcall	___flge
 17682  0DB7  1C03               	btfss	3,0
 17683  0DB8  2E05               	goto	l8516
 17684                           
 17685                           ;system.c: 401:    totalGrpB += virtChannels[n].current;
 17686  0DB9  3009               	movlw	9
 17687  0DBA  0141               	movlb	1	; select bank1
 17688  0DBB  00D3               	movwf	??_channelThing^(0+128)
 17689  0DBC  0853               	movf	??_channelThing^(0+128),w
 17690  0DBD  0140               	movlb	0	; select bank0
 17691  0DBE  00A9               	movwf	___bmul@multiplicand
 17692  0DBF  0144               	movlb	4	; select bank4
 17693  0DC0  085D               	movf	channelThing@n^(0+512),w
 17694  0DC1  31B3  2330  318B   	fcall	___bmul
 17695  0DC4  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 17696  0DC5  0086               	movwf	6
 17697  0DC6  3002               	movlw	2	; select bank5/6
 17698  0DC7  0087               	movwf	7
 17699  0DC8  3F40               	moviw [0]fsr1
 17700  0DC9  0140               	movlb	0	; select bank0
 17701  0DCA  00DB               	movwf	___fladd@b
 17702  0DCB  3F41               	moviw [1]fsr1
 17703  0DCC  00DC               	movwf	___fladd@b+1
 17704  0DCD  3F42               	moviw [2]fsr1
 17705  0DCE  00DD               	movwf	___fladd@b+2
 17706  0DCF  3F43               	moviw [3]fsr1
 17707  0DD0  00DE               	movwf	___fladd@b+3
 17708  0DD1  0144               	movlb	4	; select bank4
 17709  0DD2  0852               	movf	(channelThing@totalGrpB+3)^(0+512),w
 17710  0DD3  0140               	movlb	0	; select bank0
 17711  0DD4  00E2               	movwf	___fladd@a+3
 17712  0DD5  0144               	movlb	4	; select bank4
 17713  0DD6  0851               	movf	(channelThing@totalGrpB+2)^(0+512),w
 17714  0DD7  0140               	movlb	0	; select bank0
 17715  0DD8  00E1               	movwf	___fladd@a+2
 17716  0DD9  0144               	movlb	4	; select bank4
 17717  0DDA  0850               	movf	(channelThing@totalGrpB+1)^(0+512),w
 17718  0DDB  0140               	movlb	0	; select bank0
 17719  0DDC  00E0               	movwf	___fladd@a+1
 17720  0DDD  0144               	movlb	4	; select bank4
 17721  0DDE  084F               	movf	channelThing@totalGrpB^(0+512),w
 17722  0DDF  0140               	movlb	0	; select bank0
 17723  0DE0  00DF               	movwf	___fladd@a
 17724  0DE1  3192  2232  318B   	fcall	___fladd
 17725  0DE4  0140               	movlb	0	; select bank0
 17726  0DE5  085E               	movf	?___fladd+3,w
 17727  0DE6  0144               	movlb	4	; select bank4
 17728  0DE7  00D2               	movwf	(channelThing@totalGrpB+3)^(0+512)
 17729  0DE8  0140               	movlb	0	; select bank0
 17730  0DE9  085D               	movf	?___fladd+2,w
 17731  0DEA  0144               	movlb	4	; select bank4
 17732  0DEB  00D1               	movwf	(channelThing@totalGrpB+2)^(0+512)
 17733  0DEC  0140               	movlb	0	; select bank0
 17734  0DED  085C               	movf	?___fladd+1,w
 17735  0DEE  0144               	movlb	4	; select bank4
 17736  0DEF  00D0               	movwf	(channelThing@totalGrpB+1)^(0+512)
 17737  0DF0  0140               	movlb	0	; select bank0
 17738  0DF1  085B               	movf	?___fladd,w
 17739  0DF2  0144               	movlb	4	; select bank4
 17740  0DF3  00CF               	movwf	channelThing@totalGrpB^(0+512)
 17741                           
 17742                           ;system.c: 402:    grpB[numGrpB++] = n;
 17743  0DF4  085D               	movf	channelThing@n^(0+512),w
 17744  0DF5  0141               	movlb	1	; select bank1
 17745  0DF6  00D3               	movwf	??_channelThing^(0+128)
 17746  0DF7  0144               	movlb	4	; select bank4
 17747  0DF8  0858               	movf	channelThing@numGrpB^(0+512),w
 17748  0DF9  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 17749  0DFA  0086               	movwf	6
 17750  0DFB  3002               	movlw	2	; select bank4/5
 17751  0DFC  0087               	movwf	7
 17752  0DFD  0141               	movlb	1	; select bank1
 17753  0DFE  0853               	movf	??_channelThing^(0+128),w
 17754  0DFF  0081               	movwf	1
 17755  0E00  3001               	movlw	1
 17756  0E01  00D3               	movwf	??_channelThing^(0+128)
 17757  0E02  0853               	movf	??_channelThing^(0+128),w
 17758  0E03  0144               	movlb	4	; select bank4
 17759  0E04  07D8               	addwf	channelThing@numGrpB^(0+512),f
 17760  0E05                     l8516:	
 17761                           
 17762                           ;system.c: 404:  }
 17763  0E05  3001               	movlw	1
 17764  0E06  0141               	movlb	1	; select bank1
 17765  0E07  00D3               	movwf	??_channelThing^(0+128)
 17766  0E08  0853               	movf	??_channelThing^(0+128),w
 17767  0E09  0144               	movlb	4	; select bank4
 17768  0E0A  07DD               	addwf	channelThing@n^(0+512),f
 17769  0E0B  3004               	movlw	4
 17770  0E0C  025D               	subwf	channelThing@n^(0+512),w
 17771  0E0D  1C03               	skipc
 17772  0E0E  2C9F               	goto	l8500
 17773                           
 17774                           ;system.c: 407:  qsort(grpA, numGrpA, sizeof(grpA[0]), sortDC);
 17775  0E0F  0857               	movf	channelThing@numGrpA^(0+512),w
 17776  0E10  0141               	movlb	1	; select bank1
 17777  0E11  00D3               	movwf	??_channelThing^(0+128)
 17778  0E12  01D4               	clrf	(??_channelThing^(0+128)+1)
 17779  0E13  0853               	movf	??_channelThing^(0+128),w
 17780  0E14  00BB               	movwf	qsort@nel^(0+128)
 17781  0E15  0854               	movf	(??_channelThing+1)^(0+128),w
 17782  0E16  00BC               	movwf	(qsort@nel+1)^(0+128)
 17783  0E17  3001               	movlw	1
 17784  0E18  00BD               	movwf	qsort@width^(0+128)
 17785  0E19  3000               	movlw	0
 17786  0E1A  00BE               	movwf	(qsort@width^(0+128)+1)
 17787  0E1B  3065               	movlw	low _sortDC
 17788  0E1C  00BF               	movwf	qsort@compar^(0+128)
 17789  0E1D  3035               	movlw	high _sortDC
 17790  0E1E  00C0               	movwf	(qsort@compar^(0+128)+1)
 17791  0E1F  3053               	movlw	(low (channelThing@grpA| (0+512)))& (0+255)
 17792  0E20  319A  22A9  318B   	fcall	_qsort
 17793                           
 17794                           ;system.c: 408:  qsort(grpB, numGrpB, sizeof(grpB[0]), sortDCRev);
 17795  0E23  0144               	movlb	4	; select bank4
 17796  0E24  0858               	movf	channelThing@numGrpB^(0+512),w
 17797  0E25  0141               	movlb	1	; select bank1
 17798  0E26  00D3               	movwf	??_channelThing^(0+128)
 17799  0E27  01D4               	clrf	(??_channelThing^(0+128)+1)
 17800  0E28  0853               	movf	??_channelThing^(0+128),w
 17801  0E29  00BB               	movwf	qsort@nel^(0+128)
 17802  0E2A  0854               	movf	(??_channelThing+1)^(0+128),w
 17803  0E2B  00BC               	movwf	(qsort@nel+1)^(0+128)
 17804  0E2C  3001               	movlw	1
 17805  0E2D  00BD               	movwf	qsort@width^(0+128)
 17806  0E2E  3000               	movlw	0
 17807  0E2F  00BE               	movwf	(qsort@width^(0+128)+1)
 17808  0E30  3030               	movlw	low _sortDCRev
 17809  0E31  00BF               	movwf	qsort@compar^(0+128)
 17810  0E32  3035               	movlw	high _sortDCRev
 17811  0E33  00C0               	movwf	(qsort@compar^(0+128)+1)
 17812  0E34  3059               	movlw	(low (channelThing@grpB| (0+512)))& (0+255)
 17813  0E35  319A  22A9  318B   	fcall	_qsort
 17814                           
 17815                           ;system.c: 411:  for(n = 0; n < numGrpA; n++) {
 17816  0E38  0144               	movlb	4	; select bank4
 17817  0E39  01DD               	clrf	channelThing@n^(0+512)
 17818  0E3A                     l8532:	
 17819  0E3A  0857               	movf	channelThing@numGrpA^(0+512),w
 17820  0E3B  025D               	subwf	channelThing@n^(0+512),w
 17821  0E3C  1803               	btfsc	3,0
 17822  0E3D  2EF4               	goto	l8534
 17823                           
 17824                           ;system.c: 412:   if (grpB[n] > -1) {
 17825  0E3E  085D               	movf	channelThing@n^(0+512),w
 17826  0E3F  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 17827  0E40  0086               	movwf	6
 17828  0E41  3002               	movlw	2	; select bank4/5
 17829  0E42  0087               	movwf	7
 17830  0E43  1B81               	btfsc	1,7
 17831  0E44  2EAC               	goto	l892
 17832                           
 17833                           ;system.c: 413:    if (virtChannels[grpA[n]].DC + virtChannels[grpB[n]].DC > 100)
 17834  0E45  3009               	movlw	9
 17835  0E46  0141               	movlb	1	; select bank1
 17836  0E47  00D3               	movwf	??_channelThing^(0+128)
 17837  0E48  0853               	movf	??_channelThing^(0+128),w
 17838  0E49  0140               	movlb	0	; select bank0
 17839  0E4A  00A9               	movwf	___bmul@multiplicand
 17840  0E4B  0144               	movlb	4	; select bank4
 17841  0E4C  085D               	movf	channelThing@n^(0+512),w
 17842  0E4D  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 17843  0E4E  0086               	movwf	6
 17844  0E4F  3002               	movlw	2	; select bank4/5
 17845  0E50  0087               	movwf	7
 17846  0E51  0801               	movf	1,w
 17847  0E52  31B3  2330  318B   	fcall	___bmul
 17848  0E55  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 17849  0E56  0086               	movwf	6
 17850  0E57  3002               	movlw	2	; select bank5/6
 17851  0E58  0087               	movwf	7
 17852  0E59  3009               	movlw	9
 17853  0E5A  0141               	movlb	1	; select bank1
 17854  0E5B  00D4               	movwf	(??_channelThing+1)^(0+128)
 17855  0E5C  0854               	movf	(??_channelThing+1)^(0+128),w
 17856  0E5D  0140               	movlb	0	; select bank0
 17857  0E5E  00A9               	movwf	___bmul@multiplicand
 17858  0E5F  0144               	movlb	4	; select bank4
 17859  0E60  085D               	movf	channelThing@n^(0+512),w
 17860  0E61  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 17861  0E62  0084               	movwf	4
 17862  0E63  3002               	movlw	2	; select bank4/5
 17863  0E64  0085               	movwf	5
 17864  0E65  0800               	movf	0,w
 17865  0E66  31B3  2330  318B   	fcall	___bmul
 17866  0E69  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 17867  0E6A  0084               	movwf	4
 17868  0E6B  3002               	movlw	2	; select bank5/6
 17869  0E6C  0085               	movwf	5
 17870  0E6D  0800               	movf	0,w
 17871  0E6E  0701               	addwf	1,w
 17872  0E6F  0141               	movlb	1	; select bank1
 17873  0E70  00D5               	movwf	(??_channelThing+2)^(0+128)
 17874  0E71  01D6               	clrf	((??_channelThing+2)^(0+128)+1)
 17875  0E72  0DD6               	rlf	(??_channelThing+3)^(0+128),f
 17876  0E73  0856               	movf	(??_channelThing+3)^(0+128),w
 17877  0E74  3A80               	xorlw	128
 17878  0E75  00D7               	movwf	(??_channelThing+4)^(0+128)
 17879  0E76  3080               	movlw	128
 17880  0E77  0257               	subwf	(??_channelThing+4)^(0+128),w
 17881  0E78  1D03               	skipz
 17882  0E79  2E7C               	goto	u10245
 17883  0E7A  3065               	movlw	101
 17884  0E7B  0255               	subwf	(??_channelThing+2)^(0+128),w
 17885  0E7C                     u10245:	
 17886  0E7C  1C03               	skipc
 17887  0E7D  2EAC               	goto	l892
 17888                           
 17889                           ;system.c: 414:     virtChannels[grpB[n]].DC = 100 - virtChannels[grpA[n]].DC;
 17890  0E7E  3009               	movlw	9
 17891  0E7F  0141               	movlb	1	; select bank1
 17892  0E80  00D3               	movwf	??_channelThing^(0+128)
 17893  0E81  0853               	movf	??_channelThing^(0+128),w
 17894  0E82  0140               	movlb	0	; select bank0
 17895  0E83  00A9               	movwf	___bmul@multiplicand
 17896  0E84  0144               	movlb	4	; select bank4
 17897  0E85  085D               	movf	channelThing@n^(0+512),w
 17898  0E86  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 17899  0E87  0086               	movwf	6
 17900  0E88  3002               	movlw	2	; select bank4/5
 17901  0E89  0087               	movwf	7
 17902  0E8A  0801               	movf	1,w
 17903  0E8B  31B3  2330  318B   	fcall	___bmul
 17904  0E8E  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 17905  0E8F  0086               	movwf	6
 17906  0E90  3002               	movlw	2	; select bank5/6
 17907  0E91  0087               	movwf	7
 17908  0E92  0801               	movf	1,w
 17909  0E93  3C64               	sublw	100
 17910  0E94  0141               	movlb	1	; select bank1
 17911  0E95  00D4               	movwf	(??_channelThing+1)^(0+128)
 17912  0E96  3009               	movlw	9
 17913  0E97  00D5               	movwf	(??_channelThing+2)^(0+128)
 17914  0E98  0855               	movf	(??_channelThing+2)^(0+128),w
 17915  0E99  0140               	movlb	0	; select bank0
 17916  0E9A  00A9               	movwf	___bmul@multiplicand
 17917  0E9B  0144               	movlb	4	; select bank4
 17918  0E9C  085D               	movf	channelThing@n^(0+512),w
 17919  0E9D  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 17920  0E9E  0086               	movwf	6
 17921  0E9F  3002               	movlw	2	; select bank4/5
 17922  0EA0  0087               	movwf	7
 17923  0EA1  0801               	movf	1,w
 17924  0EA2  31B3  2330  318B   	fcall	___bmul
 17925  0EA5  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 17926  0EA6  0086               	movwf	6
 17927  0EA7  3002               	movlw	2	; select bank5/6
 17928  0EA8  0087               	movwf	7
 17929  0EA9  0141               	movlb	1	; select bank1
 17930  0EAA  0854               	movf	(??_channelThing+1)^(0+128),w
 17931  0EAB  0081               	movwf	1
 17932  0EAC                     l892:	
 17933                           ;system.c: 415:   }
 17934                           
 17935                           
 17936                           ;system.c: 418:   virtChannels[grpA[n]].start = 0;
 17937  0EAC  3009               	movlw	9
 17938  0EAD  0141               	movlb	1	; select bank1
 17939  0EAE  00D3               	movwf	??_channelThing^(0+128)
 17940  0EAF  0853               	movf	??_channelThing^(0+128),w
 17941  0EB0  0140               	movlb	0	; select bank0
 17942  0EB1  00A9               	movwf	___bmul@multiplicand
 17943  0EB2  0144               	movlb	4	; select bank4
 17944  0EB3  085D               	movf	channelThing@n^(0+512),w
 17945  0EB4  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 17946  0EB5  0086               	movwf	6
 17947  0EB6  3002               	movlw	2	; select bank4/5
 17948  0EB7  0087               	movwf	7
 17949  0EB8  0801               	movf	1,w
 17950  0EB9  31B3  2330  318B   	fcall	___bmul
 17951  0EBC  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 17952  0EBD  0086               	movwf	6
 17953  0EBE  3002               	movlw	2	; select bank5/6
 17954  0EBF  0087               	movwf	7
 17955  0EC0  0181               	clrf	1
 17956                           
 17957                           ;system.c: 419:   virtChannels[grpA[n]].stop = virtChannels[grpA[n]].DC;
 17958  0EC1  3009               	movlw	9
 17959  0EC2  0141               	movlb	1	; select bank1
 17960  0EC3  00D3               	movwf	??_channelThing^(0+128)
 17961  0EC4  0853               	movf	??_channelThing^(0+128),w
 17962  0EC5  0140               	movlb	0	; select bank0
 17963  0EC6  00A9               	movwf	___bmul@multiplicand
 17964  0EC7  0144               	movlb	4	; select bank4
 17965  0EC8  085D               	movf	channelThing@n^(0+512),w
 17966  0EC9  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 17967  0ECA  0086               	movwf	6
 17968  0ECB  3002               	movlw	2	; select bank4/5
 17969  0ECC  0087               	movwf	7
 17970  0ECD  0801               	movf	1,w
 17971  0ECE  31B3  2330  318B   	fcall	___bmul
 17972  0ED1  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 17973  0ED2  0086               	movwf	6
 17974  0ED3  3002               	movlw	2	; select bank5/6
 17975  0ED4  0087               	movwf	7
 17976  0ED5  0801               	movf	1,w
 17977  0ED6  0141               	movlb	1	; select bank1
 17978  0ED7  00D4               	movwf	(??_channelThing+1)^(0+128)
 17979  0ED8  3009               	movlw	9
 17980  0ED9  00D5               	movwf	(??_channelThing+2)^(0+128)
 17981  0EDA  0855               	movf	(??_channelThing+2)^(0+128),w
 17982  0EDB  0140               	movlb	0	; select bank0
 17983  0EDC  00A9               	movwf	___bmul@multiplicand
 17984  0EDD  0144               	movlb	4	; select bank4
 17985  0EDE  085D               	movf	channelThing@n^(0+512),w
 17986  0EDF  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 17987  0EE0  0086               	movwf	6
 17988  0EE1  3002               	movlw	2	; select bank4/5
 17989  0EE2  0087               	movwf	7
 17990  0EE3  0801               	movf	1,w
 17991  0EE4  31B3  2330  318B   	fcall	___bmul
 17992  0EE7  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 17993  0EE8  0086               	movwf	6
 17994  0EE9  3002               	movlw	2	; select bank5/6
 17995  0EEA  0087               	movwf	7
 17996  0EEB  0141               	movlb	1	; select bank1
 17997  0EEC  0854               	movf	(??_channelThing+1)^(0+128),w
 17998  0EED  0081               	movwf	1
 17999                           
 18000                           ;system.c: 420:  }
 18001  0EEE  3001               	movlw	1
 18002  0EEF  00D3               	movwf	??_channelThing^(0+128)
 18003  0EF0  0853               	movf	??_channelThing^(0+128),w
 18004  0EF1  0144               	movlb	4	; select bank4
 18005  0EF2  07DD               	addwf	channelThing@n^(0+512),f
 18006  0EF3  2E3A               	goto	l8532
 18007  0EF4                     l8534:	
 18008                           
 18009                           ;system.c: 422:  for(n = 0; n < numGrpB; n++) {
 18010  0EF4  01DD               	clrf	channelThing@n^(0+512)
 18011  0EF5                     l8540:	
 18012  0EF5  0858               	movf	channelThing@numGrpB^(0+512),w
 18013  0EF6  025D               	subwf	channelThing@n^(0+512),w
 18014  0EF7  1803               	btfsc	3,0
 18015  0EF8  2F45               	goto	l8542
 18016                           
 18017                           ;system.c: 423:   virtChannels[grpB[n]].start = 100 - virtChannels[grpB[n]].DC ;
 18018  0EF9  3009               	movlw	9
 18019  0EFA  0141               	movlb	1	; select bank1
 18020  0EFB  00D3               	movwf	??_channelThing^(0+128)
 18021  0EFC  0853               	movf	??_channelThing^(0+128),w
 18022  0EFD  0140               	movlb	0	; select bank0
 18023  0EFE  00A9               	movwf	___bmul@multiplicand
 18024  0EFF  0144               	movlb	4	; select bank4
 18025  0F00  085D               	movf	channelThing@n^(0+512),w
 18026  0F01  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18027  0F02  0086               	movwf	6
 18028  0F03  3002               	movlw	2	; select bank4/5
 18029  0F04  0087               	movwf	7
 18030  0F05  0801               	movf	1,w
 18031  0F06  31B3  2330  318B   	fcall	___bmul
 18032  0F09  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18033  0F0A  0086               	movwf	6
 18034  0F0B  3002               	movlw	2	; select bank5/6
 18035  0F0C  0087               	movwf	7
 18036  0F0D  0801               	movf	1,w
 18037  0F0E  3C64               	sublw	100
 18038  0F0F  0141               	movlb	1	; select bank1
 18039  0F10  00D4               	movwf	(??_channelThing+1)^(0+128)
 18040  0F11  3009               	movlw	9
 18041  0F12  00D5               	movwf	(??_channelThing+2)^(0+128)
 18042  0F13  0855               	movf	(??_channelThing+2)^(0+128),w
 18043  0F14  0140               	movlb	0	; select bank0
 18044  0F15  00A9               	movwf	___bmul@multiplicand
 18045  0F16  0144               	movlb	4	; select bank4
 18046  0F17  085D               	movf	channelThing@n^(0+512),w
 18047  0F18  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18048  0F19  0086               	movwf	6
 18049  0F1A  3002               	movlw	2	; select bank4/5
 18050  0F1B  0087               	movwf	7
 18051  0F1C  0801               	movf	1,w
 18052  0F1D  31B3  2330  318B   	fcall	___bmul
 18053  0F20  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 18054  0F21  0086               	movwf	6
 18055  0F22  3002               	movlw	2	; select bank5/6
 18056  0F23  0087               	movwf	7
 18057  0F24  0141               	movlb	1	; select bank1
 18058  0F25  0854               	movf	(??_channelThing+1)^(0+128),w
 18059  0F26  0081               	movwf	1
 18060                           
 18061                           ;system.c: 424:   virtChannels[grpB[n]].stop = 100;
 18062  0F27  3064               	movlw	100
 18063  0F28  00D3               	movwf	??_channelThing^(0+128)
 18064  0F29  3009               	movlw	9
 18065  0F2A  00D4               	movwf	(??_channelThing+1)^(0+128)
 18066  0F2B  0854               	movf	(??_channelThing+1)^(0+128),w
 18067  0F2C  0140               	movlb	0	; select bank0
 18068  0F2D  00A9               	movwf	___bmul@multiplicand
 18069  0F2E  0144               	movlb	4	; select bank4
 18070  0F2F  085D               	movf	channelThing@n^(0+512),w
 18071  0F30  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18072  0F31  0086               	movwf	6
 18073  0F32  3002               	movlw	2	; select bank4/5
 18074  0F33  0087               	movwf	7
 18075  0F34  0801               	movf	1,w
 18076  0F35  31B3  2330  318B   	fcall	___bmul
 18077  0F38  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 18078  0F39  0086               	movwf	6
 18079  0F3A  3002               	movlw	2	; select bank5/6
 18080  0F3B  0087               	movwf	7
 18081  0F3C  0141               	movlb	1	; select bank1
 18082  0F3D  0853               	movf	??_channelThing^(0+128),w
 18083  0F3E  0081               	movwf	1
 18084                           
 18085                           ;system.c: 425:  }
 18086  0F3F  3001               	movlw	1
 18087  0F40  00D3               	movwf	??_channelThing^(0+128)
 18088  0F41  0853               	movf	??_channelThing^(0+128),w
 18089  0F42  0144               	movlb	4	; select bank4
 18090  0F43  07DD               	addwf	channelThing@n^(0+512),f
 18091  0F44  2EF5               	goto	l8540
 18092  0F45                     l8542:	
 18093                           
 18094                           ;system.c: 428:  for(n = 0; n < 4; n++) {
 18095  0F45  01DD               	clrf	channelThing@n^(0+512)
 18096  0F46                     l8548:	
 18097                           
 18098                           ;system.c: 429:   data.heater[virtChannels[n].phyChanNum].Patt =
 18099  0F46  3009               	movlw	9
 18100  0F47  0141               	movlb	1	; select bank1
 18101  0F48  00D3               	movwf	??_channelThing^(0+128)
 18102  0F49  0853               	movf	??_channelThing^(0+128),w
 18103  0F4A  0140               	movlb	0	; select bank0
 18104  0F4B  00A9               	movwf	___bmul@multiplicand
 18105  0F4C  0144               	movlb	4	; select bank4
 18106  0F4D  085D               	movf	channelThing@n^(0+512),w
 18107  0F4E  31B3  2330  318B   	fcall	___bmul
 18108  0F51  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 18109  0F52  0086               	movwf	6
 18110  0F53  3002               	movlw	2	; select bank5/6
 18111  0F54  0087               	movwf	7
 18112  0F55  3F40               	moviw [0]fsr1
 18113  0F56  0140               	movlb	0	; select bank0
 18114  0F57  00AD               	movwf	___wmul@multiplier
 18115  0F58  3F41               	moviw [1]fsr1
 18116  0F59  00AE               	movwf	___wmul@multiplier+1
 18117  0F5A  301F               	movlw	31
 18118  0F5B  00AF               	movwf	___wmul@multiplicand
 18119  0F5C  3000               	movlw	0
 18120  0F5D  00B0               	movwf	___wmul@multiplicand+1
 18121  0F5E  31B3  2371  318B   	fcall	___wmul
 18122  0F61  3080               	movlw	128
 18123  0F62  0141               	movlb	1	; select bank1
 18124  0F63  00D4               	movwf	(??_channelThing+1)^(0+128)
 18125  0F64  3027               	movlw	39
 18126  0F65  00D5               	movwf	((??_channelThing+1)^(0+128)+1)
 18127  0F66  0140               	movlb	0	; select bank0
 18128  0F67  082D               	movf	?___wmul,w
 18129  0F68  0141               	movlb	1	; select bank1
 18130  0F69  0754               	addwf	(??_channelThing+1)^(0+128),w
 18131  0F6A  0086               	movwf	6
 18132  0F6B  0140               	movlb	0	; select bank0
 18133  0F6C  082E               	movf	?___wmul+1,w
 18134  0F6D  0141               	movlb	1	; select bank1
 18135  0F6E  3D55               	addwfc	(??_channelThing+2)^(0+128),w
 18136  0F6F  0087               	movwf	7
 18137  0F70  3042               	movlw	66
 18138  0F71  0140               	movlb	0	; select bank0
 18139  0F72  00DE               	movwf	___fldiv@a+3
 18140  0F73  30C8               	movlw	200
 18141  0F74  00DD               	movwf	___fldiv@a+2
 18142  0F75  3000               	movlw	0
 18143  0F76  00DC               	movwf	___fldiv@a+1
 18144  0F77  3000               	movlw	0
 18145  0F78  00DB               	movwf	___fldiv@a
 18146  0F79  301F               	movlw	31
 18147  0F7A  00AF               	movwf	___wmul@multiplicand
 18148  0F7B  3000               	movlw	0
 18149  0F7C  00B0               	movwf	___wmul@multiplicand+1
 18150  0F7D  3009               	movlw	9
 18151  0F7E  0141               	movlb	1	; select bank1
 18152  0F7F  00D6               	movwf	(??_channelThing+3)^(0+128)
 18153  0F80  0856               	movf	(??_channelThing+3)^(0+128),w
 18154  0F81  0140               	movlb	0	; select bank0
 18155  0F82  00A9               	movwf	___bmul@multiplicand
 18156  0F83  0144               	movlb	4	; select bank4
 18157  0F84  085D               	movf	channelThing@n^(0+512),w
 18158  0F85  31B3  2330  318B   	fcall	___bmul
 18159  0F88  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 18160  0F89  0084               	movwf	4
 18161  0F8A  3002               	movlw	2	; select bank5/6
 18162  0F8B  0085               	movwf	5
 18163  0F8C  3F00               	moviw [0]fsr0
 18164  0F8D  0140               	movlb	0	; select bank0
 18165  0F8E  00AD               	movwf	___wmul@multiplier
 18166  0F8F  3F01               	moviw [1]fsr0
 18167  0F90  00AE               	movwf	___wmul@multiplier+1
 18168  0F91  31B3  2371  318B   	fcall	___wmul
 18169  0F94  3078               	movlw	120
 18170  0F95  0141               	movlb	1	; select bank1
 18171  0F96  00D7               	movwf	(??_channelThing+4)^(0+128)
 18172  0F97  3027               	movlw	39
 18173  0F98  00D8               	movwf	((??_channelThing+4)^(0+128)+1)
 18174  0F99  0140               	movlb	0	; select bank0
 18175  0F9A  082D               	movf	?___wmul,w
 18176  0F9B  0141               	movlb	1	; select bank1
 18177  0F9C  0757               	addwf	(??_channelThing+4)^(0+128),w
 18178  0F9D  0084               	movwf	4
 18179  0F9E  0140               	movlb	0	; select bank0
 18180  0F9F  082E               	movf	?___wmul+1,w
 18181  0FA0  0141               	movlb	1	; select bank1
 18182  0FA1  3D58               	addwfc	(??_channelThing+5)^(0+128),w
 18183  0FA2  0085               	movwf	5
 18184  0FA3  3F00               	moviw [0]fsr0
 18185  0FA4  0140               	movlb	0	; select bank0
 18186  0FA5  00C1               	movwf	___flmul@b
 18187  0FA6  3F01               	moviw [1]fsr0
 18188  0FA7  00C2               	movwf	___flmul@b+1
 18189  0FA8  3F02               	moviw [2]fsr0
 18190  0FA9  00C3               	movwf	___flmul@b+2
 18191  0FAA  3F03               	moviw [3]fsr0
 18192  0FAB  00C4               	movwf	___flmul@b+3
 18193  0FAC  3009               	movlw	9
 18194  0FAD  0141               	movlb	1	; select bank1
 18195  0FAE  00D9               	movwf	(??_channelThing+6)^(0+128)
 18196  0FAF  0859               	movf	(??_channelThing+6)^(0+128),w
 18197  0FB0  0140               	movlb	0	; select bank0
 18198  0FB1  00A9               	movwf	___bmul@multiplicand
 18199  0FB2  0144               	movlb	4	; select bank4
 18200  0FB3  085D               	movf	channelThing@n^(0+512),w
 18201  0FB4  31B3  2330  318B   	fcall	___bmul
 18202  0FB7  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18203  0FB8  0084               	movwf	4
 18204  0FB9  3002               	movlw	2	; select bank5/6
 18205  0FBA  0085               	movwf	5
 18206  0FBB  0800               	movf	0,w
 18207  0FBC  0141               	movlb	1	; select bank1
 18208  0FBD  00DA               	movwf	(??_channelThing+7)^(0+128)
 18209  0FBE  01DB               	clrf	((??_channelThing+7)^(0+128)+1)
 18210  0FBF  01DC               	clrf	((??_channelThing+7)^(0+128)+2)
 18211  0FC0  01DD               	clrf	((??_channelThing+7)^(0+128)+3)
 18212  0FC1  085D               	movf	(??_channelThing+10)^(0+128),w
 18213  0FC2  0140               	movlb	0	; select bank0
 18214  0FC3  00B6               	movwf	___xxtofl@val+3
 18215  0FC4  0141               	movlb	1	; select bank1
 18216  0FC5  085C               	movf	(??_channelThing+9)^(0+128),w
 18217  0FC6  0140               	movlb	0	; select bank0
 18218  0FC7  00B5               	movwf	___xxtofl@val+2
 18219  0FC8  0141               	movlb	1	; select bank1
 18220  0FC9  085B               	movf	(??_channelThing+8)^(0+128),w
 18221  0FCA  0140               	movlb	0	; select bank0
 18222  0FCB  00B4               	movwf	___xxtofl@val+1
 18223  0FCC  0141               	movlb	1	; select bank1
 18224  0FCD  085A               	movf	(??_channelThing+7)^(0+128),w
 18225  0FCE  0140               	movlb	0	; select bank0
 18226  0FCF  00B3               	movwf	___xxtofl@val
 18227  0FD0  3001               	movlw	1
 18228  0FD1  31AC  24D1  318B   	fcall	___xxtofl
 18229  0FD4  0140               	movlb	0	; select bank0
 18230  0FD5  0836               	movf	?___xxtofl+3,w
 18231  0FD6  00C8               	movwf	___flmul@a+3
 18232  0FD7  0835               	movf	?___xxtofl+2,w
 18233  0FD8  00C7               	movwf	___flmul@a+2
 18234  0FD9  0834               	movf	?___xxtofl+1,w
 18235  0FDA  00C6               	movwf	___flmul@a+1
 18236  0FDB  0833               	movf	?___xxtofl,w
 18237  0FDC  00C5               	movwf	___flmul@a
 18238  0FDD  3185  2561  318B   	fcall	___flmul
 18239  0FE0  0140               	movlb	0	; select bank0
 18240  0FE1  0844               	movf	?___flmul+3,w
 18241  0FE2  00E2               	movwf	___fldiv@b+3
 18242  0FE3  0843               	movf	?___flmul+2,w
 18243  0FE4  00E1               	movwf	___fldiv@b+2
 18244  0FE5  0842               	movf	?___flmul+1,w
 18245  0FE6  00E0               	movwf	___fldiv@b+1
 18246  0FE7  0841               	movf	?___flmul,w
 18247  0FE8  00DF               	movwf	___fldiv@b
 18248  0FE9  319E  2628  318B   	fcall	___fldiv
 18249  0FEC  0140               	movlb	0	; select bank0
 18250  0FED  085B               	movf	?___fldiv,w
 18251  0FEE  3FC0               	movwi [0]fsr1
 18252  0FEF  085C               	movf	?___fldiv+1,w
 18253  0FF0  3FC1               	movwi [1]fsr1
 18254  0FF1  085D               	movf	?___fldiv+2,w
 18255  0FF2  3FC2               	movwi [2]fsr1
 18256  0FF3  085E               	movf	?___fldiv+3,w
 18257  0FF4  3FC3               	movwi [3]fsr1
 18258                           
 18259                           ;system.c: 431:  }
 18260  0FF5  3001               	movlw	1
 18261  0FF6  0141               	movlb	1	; select bank1
 18262  0FF7  00D3               	movwf	??_channelThing^(0+128)
 18263  0FF8  0853               	movf	??_channelThing^(0+128),w
 18264  0FF9  0144               	movlb	4	; select bank4
 18265  0FFA  07DD               	addwf	channelThing@n^(0+512),f
 18266  0FFB  3004               	movlw	4
 18267  0FFC  025D               	subwf	channelThing@n^(0+512),w
 18268  0FFD  1803               	btfsc	3,0
 18269  0FFE  0008               	return
 18270  0FFF  2F46               	goto	l8548
 18271  1000                     __end_of_channelThing:	
 18272                           
 18273                           	psect	text41
 18274  1AA9                     __ptext41:	
 18275 ;; *************** function _qsort *****************
 18276 ;; Defined at:
 18277 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 18278 ;; Parameters:    Size  Location     Type
 18279 ;;  vbase           1    wreg     PTR void 
 18280 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18281 ;;  nel             2   27[BANK1 ] unsigned int 
 18282 ;;  width           2   29[BANK1 ] unsigned int 
 18283 ;;  compar          2   31[BANK1 ] PTR FTN(PTR const void ,
 18284 ;;		 -> sortCur(2), sortDCRev(2), sortDC(2), 
 18285 ;; Auto vars:     Size  Location     Type
 18286 ;;  vbase           1   38[BANK1 ] PTR void 
 18287 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18288 ;;  stack          64    0[BANK3 ] struct .[16]
 18289 ;;  xbuf           60    0[BANK2 ] unsigned char [60]
 18290 ;;  j               2   49[BANK1 ] int 
 18291 ;;  i               2   47[BANK1 ] int 
 18292 ;;  s               2   45[BANK1 ] int 
 18293 ;;  r               2   43[BANK1 ] int 
 18294 ;;  l               2   41[BANK1 ] int 
 18295 ;;  base            1   40[BANK1 ] PTR unsigned char 
 18296 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18297 ;;  x               1   39[BANK1 ] PTR unsigned char 
 18298 ;;		 -> qsort@xbuf(60), 
 18299 ;; Return value:  Size  Location     Type
 18300 ;;                  1    wreg      void 
 18301 ;; Registers used:
 18302 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18303 ;; Tracked objects:
 18304 ;;		On entry : 0/0
 18305 ;;		On exit  : 0/0
 18306 ;;		Unchanged: 0/0
 18307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18308 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18309 ;;      Locals:         0       1      13      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18310 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18311 ;;      Totals:         0       1      24      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18312 ;;Total ram usage:      149 bytes
 18313 ;; Hardware stack levels used:    1
 18314 ;; Hardware stack levels required when called:    6
 18315 ;; This function calls:
 18316 ;;		___awdiv
 18317 ;;		___bmul
 18318 ;;		_memcpy
 18319 ;;		_sortCur
 18320 ;;		_sortDC
 18321 ;;		_sortDCRev
 18322 ;;		_swap
 18323 ;; This function is called by:
 18324 ;;		_channelThing
 18325 ;; This function uses a non-reentrant model
 18326 ;;
 18327                           
 18328                           
 18329                           ;psect for function _qsort
 18330  1AA9                     _qsort:	
 18331                           
 18332                           ;incstack = 0
 18333                           ; Regs used in _qsort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18334                           ;qsort@vbase stored from wreg
 18335  1AA9  0141               	movlb	1	; select bank1
 18336  1AAA  00C6               	movwf	qsort@vbase^(0+128)
 18337  1AAB  0846               	movf	qsort@vbase^(0+128),w
 18338  1AAC  00C1               	movwf	??_qsort^(0+128)
 18339  1AAD  0841               	movf	??_qsort^(0+128),w
 18340  1AAE  00C8               	movwf	qsort@base^(0+128)
 18341  1AAF  3000               	movlw	0
 18342  1AB0  023E               	subwf	(qsort@width+1)^(0+128),w
 18343  1AB1  303C               	movlw	60
 18344  1AB2  1903               	skipnz
 18345  1AB3  023D               	subwf	qsort@width^(0+128),w
 18346  1AB4  1803               	skipnc
 18347  1AB5  0008               	return
 18348  1AB6  3020               	movlw	(low (qsort@xbuf| (0+256)))& (0+255)
 18349  1AB7  00C1               	movwf	??_qsort^(0+128)
 18350  1AB8  0841               	movf	??_qsort^(0+128),w
 18351  1AB9  00C7               	movwf	qsort@x^(0+128)
 18352  1ABA  083D               	movf	qsort@width^(0+128),w
 18353  1ABB  0747               	addwf	qsort@x^(0+128),w
 18354  1ABC  00C1               	movwf	??_qsort^(0+128)
 18355  1ABD  0841               	movf	??_qsort^(0+128),w
 18356  1ABE  0086               	movwf	6
 18357  1ABF  3001               	movlw	1	; select bank2/3
 18358  1AC0  0087               	movwf	7
 18359  1AC1  0181               	clrf	1
 18360  1AC2  01CD               	clrf	qsort@s^(0+128)
 18361  1AC3  01CE               	clrf	(qsort@s+1)^(0+128)
 18362  1AC4  0143               	movlb	3	; select bank3
 18363  1AC5  01A0               	clrf	qsort@stack^(0+384)
 18364  1AC6  01A1               	clrf	(qsort@stack+1)^(0+384)
 18365  1AC7  0141               	movlb	1	; select bank1
 18366  1AC8  083B               	movf	qsort@nel^(0+128),w
 18367  1AC9  3EFF               	addlw	255
 18368  1ACA  0143               	movlb	3	; select bank3
 18369  1ACB  00A2               	movwf	(qsort@stack^(0+384)+2)
 18370  1ACC  30FF               	movlw	255
 18371  1ACD  0141               	movlb	1	; select bank1
 18372  1ACE  3D3C               	addwfc	(qsort@nel+1)^(0+128),w
 18373  1ACF  0143               	movlb	3	; select bank3
 18374  1AD0  00A3               	movwf	((qsort@stack+1)^(0+384)+2)
 18375  1AD1                     l7980:	
 18376  1AD1  0141               	movlb	1	; select bank1
 18377  1AD2  084D               	movf	qsort@s^(0+128),w
 18378  1AD3  00C1               	movwf	??_qsort^(0+128)
 18379  1AD4  3001               	movlw	1
 18380  1AD5                     u9625:	
 18381  1AD5  35C1               	lslf	??_qsort^(0+128),f
 18382  1AD6  3EFF               	addlw	-1
 18383  1AD7  1D03               	skipz
 18384  1AD8  2AD5               	goto	u9625
 18385  1AD9  3541               	lslf	??_qsort^(0+128),w
 18386  1ADA  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 18387  1ADB  0086               	movwf	6
 18388  1ADC  3001               	movlw	1	; select bank3/4
 18389  1ADD  0087               	movwf	7
 18390  1ADE  3F40               	moviw [0]fsr1
 18391  1ADF  00C9               	movwf	qsort@l^(0+128)
 18392  1AE0  3F41               	moviw [1]fsr1
 18393  1AE1  00CA               	movwf	(qsort@l+1)^(0+128)
 18394  1AE2  084D               	movf	qsort@s^(0+128),w
 18395  1AE3  00C1               	movwf	??_qsort^(0+128)
 18396  1AE4  3001               	movlw	1
 18397  1AE5                     u9635:	
 18398  1AE5  35C1               	lslf	??_qsort^(0+128),f
 18399  1AE6  3EFF               	addlw	-1
 18400  1AE7  1D03               	skipz
 18401  1AE8  2AE5               	goto	u9635
 18402  1AE9  3541               	lslf	??_qsort^(0+128),w
 18403  1AEA  3E02               	addlw	2
 18404  1AEB  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 18405  1AEC  0086               	movwf	6
 18406  1AED  3001               	movlw	1	; select bank3/4
 18407  1AEE  0087               	movwf	7
 18408  1AEF  3F40               	moviw [0]fsr1
 18409  1AF0  00CB               	movwf	qsort@r^(0+128)
 18410  1AF1  3F41               	moviw [1]fsr1
 18411  1AF2  00CC               	movwf	(qsort@r+1)^(0+128)
 18412  1AF3  30FF               	movlw	255
 18413  1AF4  07CD               	addwf	qsort@s^(0+128),f
 18414  1AF5  30FF               	movlw	255
 18415  1AF6  3DCE               	addwfc	(qsort@s+1)^(0+128),f
 18416  1AF7                     l7986:	
 18417  1AF7  0141               	movlb	1	; select bank1
 18418  1AF8  084A               	movf	(qsort@l+1)^(0+128),w
 18419  1AF9  00D0               	movwf	(qsort@i+1)^(0+128)
 18420  1AFA  0849               	movf	qsort@l^(0+128),w
 18421  1AFB  00CF               	movwf	qsort@i^(0+128)
 18422  1AFC  084C               	movf	(qsort@r+1)^(0+128),w
 18423  1AFD  00D2               	movwf	(qsort@j+1)^(0+128)
 18424  1AFE  084B               	movf	qsort@r^(0+128),w
 18425  1AFF  00D1               	movwf	qsort@j^(0+128)
 18426  1B00  083D               	movf	qsort@width^(0+128),w
 18427  1B01  00C1               	movwf	??_qsort^(0+128)
 18428  1B02  0841               	movf	??_qsort^(0+128),w
 18429  1B03  0140               	movlb	0	; select bank0
 18430  1B04  00A9               	movwf	___bmul@multiplicand
 18431  1B05  0141               	movlb	1	; select bank1
 18432  1B06  0851               	movf	qsort@j^(0+128),w
 18433  1B07  074F               	addwf	qsort@i^(0+128),w
 18434  1B08  0140               	movlb	0	; select bank0
 18435  1B09  00A2               	movwf	___awdiv@dividend
 18436  1B0A  0141               	movlb	1	; select bank1
 18437  1B0B  0852               	movf	(qsort@j+1)^(0+128),w
 18438  1B0C  3D50               	addwfc	(qsort@i+1)^(0+128),w
 18439  1B0D  0140               	movlb	0	; select bank0
 18440  1B0E  00A3               	movwf	___awdiv@dividend+1
 18441  1B0F  3002               	movlw	2
 18442  1B10  00A0               	movwf	___awdiv@divisor
 18443  1B11  3000               	movlw	0
 18444  1B12  00A1               	movwf	___awdiv@divisor+1
 18445  1B13  31A8  206E  319A   	fcall	___awdiv
 18446  1B16  0140               	movlb	0	; select bank0
 18447  1B17  0820               	movf	?___awdiv,w
 18448  1B18  31B3  2330  319A   	fcall	___bmul
 18449  1B1B  0141               	movlb	1	; select bank1
 18450  1B1C  0748               	addwf	qsort@base^(0+128),w
 18451  1B1D  00C2               	movwf	(??_qsort+1)^(0+128)
 18452  1B1E  0842               	movf	(??_qsort+1)^(0+128),w
 18453  1B1F  0140               	movlb	0	; select bank0
 18454  1B20  00AD               	movwf	memcpy@s1
 18455  1B21  0141               	movlb	1	; select bank1
 18456  1B22  083E               	movf	(qsort@width+1)^(0+128),w
 18457  1B23  0140               	movlb	0	; select bank0
 18458  1B24  00AF               	movwf	memcpy@n+1
 18459  1B25  0141               	movlb	1	; select bank1
 18460  1B26  083D               	movf	qsort@width^(0+128),w
 18461  1B27  0140               	movlb	0	; select bank0
 18462  1B28  00AE               	movwf	memcpy@n
 18463  1B29  0141               	movlb	1	; select bank1
 18464  1B2A  0847               	movf	qsort@x^(0+128),w
 18465  1B2B  31B3  23DB  319A   	fcall	_memcpy
 18466  1B2E                     l7994:	
 18467  1B2E  0141               	movlb	1	; select bank1
 18468  1B2F  083D               	movf	qsort@width^(0+128),w
 18469  1B30  00C1               	movwf	??_qsort^(0+128)
 18470  1B31  0841               	movf	??_qsort^(0+128),w
 18471  1B32  0140               	movlb	0	; select bank0
 18472  1B33  00A9               	movwf	___bmul@multiplicand
 18473  1B34  0141               	movlb	1	; select bank1
 18474  1B35  084F               	movf	qsort@i^(0+128),w
 18475  1B36  31B3  2330  319A   	fcall	___bmul
 18476  1B39  0141               	movlb	1	; select bank1
 18477  1B3A  0748               	addwf	qsort@base^(0+128),w
 18478  1B3B  00C2               	movwf	(??_qsort+1)^(0+128)
 18479  1B3C  0842               	movf	(??_qsort+1)^(0+128),w
 18480  1B3D  0140               	movlb	0	; select bank0
 18481  1B3E  00EF               	movwf	_qsort$2585
 18482  1B3F  086F               	movf	_qsort$2585,w
 18483  1B40  0141               	movlb	1	; select bank1
 18484  1B41  00B3               	movwf	sortCur@cmp1^(0+128)
 18485  1B42  3002               	movlw	2
 18486  1B43  00B4               	movwf	(sortCur@cmp1+1)^(0+128)
 18487  1B44  0847               	movf	qsort@x^(0+128),w
 18488  1B45  00B5               	movwf	sortCur@cmp2^(0+128)
 18489  1B46  3001               	movlw	1
 18490  1B47  00B6               	movwf	(sortCur@cmp2+1)^(0+128)
 18491  1B48  0840               	movf	(qsort@compar+1)^(0+128),w
 18492  1B49  008A               	movwf	10
 18493  1B4A  083F               	movf	qsort@compar^(0+128),w
 18494  1B4B  000A               	callw
 18495  1B4C  319A               	pagesel	$
 18496  1B4D  0141               	movlb	1	; select bank1
 18497  1B4E  1FB4               	btfss	(?_sortCur+1)^(0+128),7
 18498  1B4F  2B59               	goto	l8000
 18499  1B50  3001               	movlw	1
 18500  1B51  07CF               	addwf	qsort@i^(0+128),f
 18501  1B52  3000               	movlw	0
 18502  1B53  3DD0               	addwfc	(qsort@i+1)^(0+128),f
 18503  1B54  2B2E               	goto	l7994
 18504  1B55                     l7998:	
 18505  1B55  30FF               	movlw	255
 18506  1B56  07D1               	addwf	qsort@j^(0+128),f
 18507  1B57  30FF               	movlw	255
 18508  1B58  3DD2               	addwfc	(qsort@j+1)^(0+128),f
 18509  1B59                     l8000:	
 18510  1B59  083D               	movf	qsort@width^(0+128),w
 18511  1B5A  00C1               	movwf	??_qsort^(0+128)
 18512  1B5B  0841               	movf	??_qsort^(0+128),w
 18513  1B5C  0140               	movlb	0	; select bank0
 18514  1B5D  00A9               	movwf	___bmul@multiplicand
 18515  1B5E  0141               	movlb	1	; select bank1
 18516  1B5F  0851               	movf	qsort@j^(0+128),w
 18517  1B60  31B3  2330  319A   	fcall	___bmul
 18518  1B63  0141               	movlb	1	; select bank1
 18519  1B64  0748               	addwf	qsort@base^(0+128),w
 18520  1B65  00C2               	movwf	(??_qsort+1)^(0+128)
 18521  1B66  0842               	movf	(??_qsort+1)^(0+128),w
 18522  1B67  0140               	movlb	0	; select bank0
 18523  1B68  00EF               	movwf	_qsort$2585
 18524  1B69  0141               	movlb	1	; select bank1
 18525  1B6A  0847               	movf	qsort@x^(0+128),w
 18526  1B6B  00B3               	movwf	sortCur@cmp1^(0+128)
 18527  1B6C  3001               	movlw	1
 18528  1B6D  00B4               	movwf	(sortCur@cmp1+1)^(0+128)
 18529  1B6E  0140               	movlb	0	; select bank0
 18530  1B6F  086F               	movf	_qsort$2585,w
 18531  1B70  0141               	movlb	1	; select bank1
 18532  1B71  00B5               	movwf	sortCur@cmp2^(0+128)
 18533  1B72  3002               	movlw	2
 18534  1B73  00B6               	movwf	(sortCur@cmp2+1)^(0+128)
 18535  1B74  0840               	movf	(qsort@compar+1)^(0+128),w
 18536  1B75  008A               	movwf	10
 18537  1B76  083F               	movf	qsort@compar^(0+128),w
 18538  1B77  000A               	callw
 18539  1B78  319A               	pagesel	$
 18540  1B79  0141               	movlb	1	; select bank1
 18541  1B7A  1BB4               	btfsc	(?_sortCur+1)^(0+128),7
 18542  1B7B  2B55               	goto	l7998
 18543  1B7C  0852               	movf	(qsort@j+1)^(0+128),w
 18544  1B7D  3A80               	xorlw	128
 18545  1B7E  00C1               	movwf	??_qsort^(0+128)
 18546  1B7F  0850               	movf	(qsort@i+1)^(0+128),w
 18547  1B80  3A80               	xorlw	128
 18548  1B81  0241               	subwf	??_qsort^(0+128),w
 18549  1B82  1D03               	skipz
 18550  1B83  2B86               	goto	u9665
 18551  1B84  084F               	movf	qsort@i^(0+128),w
 18552  1B85  0251               	subwf	qsort@j^(0+128),w
 18553  1B86                     u9665:	
 18554  1B86  1C03               	skipc
 18555  1B87  2BBE               	goto	l8012
 18556  1B88  0141               	movlb	1	; select bank1
 18557  1B89  083E               	movf	(qsort@width+1)^(0+128),w
 18558  1B8A  0140               	movlb	0	; select bank0
 18559  1B8B  00AE               	movwf	swap@len+1
 18560  1B8C  0141               	movlb	1	; select bank1
 18561  1B8D  083D               	movf	qsort@width^(0+128),w
 18562  1B8E  0140               	movlb	0	; select bank0
 18563  1B8F  00AD               	movwf	swap@len
 18564  1B90  0141               	movlb	1	; select bank1
 18565  1B91  083D               	movf	qsort@width^(0+128),w
 18566  1B92  00C1               	movwf	??_qsort^(0+128)
 18567  1B93  0841               	movf	??_qsort^(0+128),w
 18568  1B94  0140               	movlb	0	; select bank0
 18569  1B95  00A9               	movwf	___bmul@multiplicand
 18570  1B96  0141               	movlb	1	; select bank1
 18571  1B97  084F               	movf	qsort@i^(0+128),w
 18572  1B98  31B3  2330  319A   	fcall	___bmul
 18573  1B9B  0141               	movlb	1	; select bank1
 18574  1B9C  0748               	addwf	qsort@base^(0+128),w
 18575  1B9D  00C2               	movwf	(??_qsort+1)^(0+128)
 18576  1B9E  0842               	movf	(??_qsort+1)^(0+128),w
 18577  1B9F  0140               	movlb	0	; select bank0
 18578  1BA0  00AF               	movwf	swap@s1
 18579  1BA1  0141               	movlb	1	; select bank1
 18580  1BA2  083D               	movf	qsort@width^(0+128),w
 18581  1BA3  00C3               	movwf	(??_qsort+2)^(0+128)
 18582  1BA4  0843               	movf	(??_qsort+2)^(0+128),w
 18583  1BA5  0140               	movlb	0	; select bank0
 18584  1BA6  00A9               	movwf	___bmul@multiplicand
 18585  1BA7  0141               	movlb	1	; select bank1
 18586  1BA8  0851               	movf	qsort@j^(0+128),w
 18587  1BA9  31B3  2330  319A   	fcall	___bmul
 18588  1BAC  0141               	movlb	1	; select bank1
 18589  1BAD  0748               	addwf	qsort@base^(0+128),w
 18590  1BAE  00C4               	movwf	(??_qsort+3)^(0+128)
 18591  1BAF  0844               	movf	(??_qsort+3)^(0+128),w
 18592  1BB0  0140               	movlb	0	; select bank0
 18593  1BB1  00B0               	movwf	swap@s2
 18594  1BB2  31B4  2407  319A   	fcall	_swap
 18595  1BB5  3001               	movlw	1
 18596  1BB6  0141               	movlb	1	; select bank1
 18597  1BB7  07CF               	addwf	qsort@i^(0+128),f
 18598  1BB8  3000               	movlw	0
 18599  1BB9  3DD0               	addwfc	(qsort@i+1)^(0+128),f
 18600  1BBA  30FF               	movlw	255
 18601  1BBB  07D1               	addwf	qsort@j^(0+128),f
 18602  1BBC  30FF               	movlw	255
 18603  1BBD  3DD2               	addwfc	(qsort@j+1)^(0+128),f
 18604  1BBE                     l8012:	
 18605  1BBE  0141               	movlb	1	; select bank1
 18606  1BBF  0852               	movf	(qsort@j+1)^(0+128),w
 18607  1BC0  3A80               	xorlw	128
 18608  1BC1  00C1               	movwf	??_qsort^(0+128)
 18609  1BC2  0850               	movf	(qsort@i+1)^(0+128),w
 18610  1BC3  3A80               	xorlw	128
 18611  1BC4  0241               	subwf	??_qsort^(0+128),w
 18612  1BC5  1D03               	skipz
 18613  1BC6  2BC9               	goto	u9675
 18614  1BC7  084F               	movf	qsort@i^(0+128),w
 18615  1BC8  0251               	subwf	qsort@j^(0+128),w
 18616  1BC9                     u9675:	
 18617  1BC9  1803               	skipnc
 18618  1BCA  2B2E               	goto	l7994
 18619  1BCB  0141               	movlb	1	; select bank1
 18620  1BCC  084F               	movf	qsort@i^(0+128),w
 18621  1BCD  024B               	subwf	qsort@r^(0+128),w
 18622  1BCE  00C1               	movwf	??_qsort^(0+128)
 18623  1BCF  0850               	movf	(qsort@i+1)^(0+128),w
 18624  1BD0  3B4C               	subwfb	(qsort@r+1)^(0+128),w
 18625  1BD1  00C2               	movwf	(??_qsort+1)^(0+128)
 18626  1BD2  0849               	movf	qsort@l^(0+128),w
 18627  1BD3  0251               	subwf	qsort@j^(0+128),w
 18628  1BD4  00C3               	movwf	(??_qsort+2)^(0+128)
 18629  1BD5  084A               	movf	(qsort@l+1)^(0+128),w
 18630  1BD6  3B52               	subwfb	(qsort@j+1)^(0+128),w
 18631  1BD7  00C4               	movwf	(??_qsort+3)^(0+128)
 18632  1BD8  0844               	movf	(??_qsort+3)^(0+128),w
 18633  1BD9  3A80               	xorlw	128
 18634  1BDA  00C5               	movwf	(??_qsort+4)^(0+128)
 18635  1BDB  0842               	movf	(??_qsort+1)^(0+128),w
 18636  1BDC  3A80               	xorlw	128
 18637  1BDD  0245               	subwf	(??_qsort+4)^(0+128),w
 18638  1BDE  1D03               	skipz
 18639  1BDF  2BE2               	goto	u9685
 18640  1BE0  0841               	movf	??_qsort^(0+128),w
 18641  1BE1  0243               	subwf	(??_qsort+2)^(0+128),w
 18642  1BE2                     u9685:	
 18643  1BE2  1803               	skipnc
 18644  1BE3  2C1D               	goto	l8022
 18645  1BE4  0141               	movlb	1	; select bank1
 18646  1BE5  0850               	movf	(qsort@i+1)^(0+128),w
 18647  1BE6  3A80               	xorlw	128
 18648  1BE7  00C1               	movwf	??_qsort^(0+128)
 18649  1BE8  084C               	movf	(qsort@r+1)^(0+128),w
 18650  1BE9  3A80               	xorlw	128
 18651  1BEA  0241               	subwf	??_qsort^(0+128),w
 18652  1BEB  1D03               	skipz
 18653  1BEC  2BEF               	goto	u9695
 18654  1BED  084B               	movf	qsort@r^(0+128),w
 18655  1BEE  024F               	subwf	qsort@i^(0+128),w
 18656  1BEF                     u9695:	
 18657  1BEF  1803               	skipnc
 18658  1BF0  2C17               	goto	l8020
 18659  1BF1  3001               	movlw	1
 18660  1BF2  0141               	movlb	1	; select bank1
 18661  1BF3  07CD               	addwf	qsort@s^(0+128),f
 18662  1BF4  3000               	movlw	0
 18663  1BF5  3DCE               	addwfc	(qsort@s+1)^(0+128),f
 18664  1BF6  084D               	movf	qsort@s^(0+128),w
 18665  1BF7  00C1               	movwf	??_qsort^(0+128)
 18666  1BF8  3001               	movlw	1
 18667  1BF9                     u9705:	
 18668  1BF9  35C1               	lslf	??_qsort^(0+128),f
 18669  1BFA  3EFF               	addlw	-1
 18670  1BFB  1D03               	skipz
 18671  1BFC  2BF9               	goto	u9705
 18672  1BFD  3541               	lslf	??_qsort^(0+128),w
 18673  1BFE  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 18674  1BFF  0086               	movwf	6
 18675  1C00  3001               	movlw	1	; select bank3/4
 18676  1C01  0087               	movwf	7
 18677  1C02  084F               	movf	qsort@i^(0+128),w
 18678  1C03  3FC0               	movwi [0]fsr1
 18679  1C04  0850               	movf	(qsort@i+1)^(0+128),w
 18680  1C05  3FC1               	movwi [1]fsr1
 18681  1C06  084D               	movf	qsort@s^(0+128),w
 18682  1C07  00C1               	movwf	??_qsort^(0+128)
 18683  1C08  3001               	movlw	1
 18684  1C09                     u9715:	
 18685  1C09  35C1               	lslf	??_qsort^(0+128),f
 18686  1C0A  3EFF               	addlw	-1
 18687  1C0B  1D03               	skipz
 18688  1C0C  2C09               	goto	u9715
 18689  1C0D  3541               	lslf	??_qsort^(0+128),w
 18690  1C0E  3E02               	addlw	2
 18691  1C0F  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 18692  1C10  0086               	movwf	6
 18693  1C11  3001               	movlw	1	; select bank3/4
 18694  1C12  0087               	movwf	7
 18695  1C13  084B               	movf	qsort@r^(0+128),w
 18696  1C14  3FC0               	movwi [0]fsr1
 18697  1C15  084C               	movf	(qsort@r+1)^(0+128),w
 18698  1C16  3FC1               	movwi [1]fsr1
 18699  1C17                     l8020:	
 18700  1C17  0141               	movlb	1	; select bank1
 18701  1C18  0852               	movf	(qsort@j+1)^(0+128),w
 18702  1C19  00CC               	movwf	(qsort@r+1)^(0+128)
 18703  1C1A  0851               	movf	qsort@j^(0+128),w
 18704  1C1B  00CB               	movwf	qsort@r^(0+128)
 18705  1C1C  2C55               	goto	l8028
 18706  1C1D                     l8022:	
 18707  1C1D  0141               	movlb	1	; select bank1
 18708  1C1E  084A               	movf	(qsort@l+1)^(0+128),w
 18709  1C1F  3A80               	xorlw	128
 18710  1C20  00C1               	movwf	??_qsort^(0+128)
 18711  1C21  0852               	movf	(qsort@j+1)^(0+128),w
 18712  1C22  3A80               	xorlw	128
 18713  1C23  0241               	subwf	??_qsort^(0+128),w
 18714  1C24  1D03               	skipz
 18715  1C25  2C28               	goto	u9725
 18716  1C26  0851               	movf	qsort@j^(0+128),w
 18717  1C27  0249               	subwf	qsort@l^(0+128),w
 18718  1C28                     u9725:	
 18719  1C28  1803               	skipnc
 18720  1C29  2C50               	goto	l8026
 18721  1C2A  3001               	movlw	1
 18722  1C2B  0141               	movlb	1	; select bank1
 18723  1C2C  07CD               	addwf	qsort@s^(0+128),f
 18724  1C2D  3000               	movlw	0
 18725  1C2E  3DCE               	addwfc	(qsort@s+1)^(0+128),f
 18726  1C2F  084D               	movf	qsort@s^(0+128),w
 18727  1C30  00C1               	movwf	??_qsort^(0+128)
 18728  1C31  3001               	movlw	1
 18729  1C32                     u9735:	
 18730  1C32  35C1               	lslf	??_qsort^(0+128),f
 18731  1C33  3EFF               	addlw	-1
 18732  1C34  1D03               	skipz
 18733  1C35  2C32               	goto	u9735
 18734  1C36  3541               	lslf	??_qsort^(0+128),w
 18735  1C37  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 18736  1C38  0086               	movwf	6
 18737  1C39  3001               	movlw	1	; select bank3/4
 18738  1C3A  0087               	movwf	7
 18739  1C3B  0849               	movf	qsort@l^(0+128),w
 18740  1C3C  3FC0               	movwi [0]fsr1
 18741  1C3D  084A               	movf	(qsort@l+1)^(0+128),w
 18742  1C3E  3FC1               	movwi [1]fsr1
 18743  1C3F  084D               	movf	qsort@s^(0+128),w
 18744  1C40  00C1               	movwf	??_qsort^(0+128)
 18745  1C41  3001               	movlw	1
 18746  1C42                     u9745:	
 18747  1C42  35C1               	lslf	??_qsort^(0+128),f
 18748  1C43  3EFF               	addlw	-1
 18749  1C44  1D03               	skipz
 18750  1C45  2C42               	goto	u9745
 18751  1C46  3541               	lslf	??_qsort^(0+128),w
 18752  1C47  3E02               	addlw	2
 18753  1C48  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 18754  1C49  0086               	movwf	6
 18755  1C4A  3001               	movlw	1	; select bank3/4
 18756  1C4B  0087               	movwf	7
 18757  1C4C  0851               	movf	qsort@j^(0+128),w
 18758  1C4D  3FC0               	movwi [0]fsr1
 18759  1C4E  0852               	movf	(qsort@j+1)^(0+128),w
 18760  1C4F  3FC1               	movwi [1]fsr1
 18761  1C50                     l8026:	
 18762  1C50  0141               	movlb	1	; select bank1
 18763  1C51  0850               	movf	(qsort@i+1)^(0+128),w
 18764  1C52  00CA               	movwf	(qsort@l+1)^(0+128)
 18765  1C53  084F               	movf	qsort@i^(0+128),w
 18766  1C54  00C9               	movwf	qsort@l^(0+128)
 18767  1C55                     l8028:	
 18768  1C55  084A               	movf	(qsort@l+1)^(0+128),w
 18769  1C56  3A80               	xorlw	128
 18770  1C57  00C1               	movwf	??_qsort^(0+128)
 18771  1C58  084C               	movf	(qsort@r+1)^(0+128),w
 18772  1C59  3A80               	xorlw	128
 18773  1C5A  0241               	subwf	??_qsort^(0+128),w
 18774  1C5B  1D03               	skipz
 18775  1C5C  2C5F               	goto	u9755
 18776  1C5D  084B               	movf	qsort@r^(0+128),w
 18777  1C5E  0249               	subwf	qsort@l^(0+128),w
 18778  1C5F                     u9755:	
 18779  1C5F  1C03               	skipc
 18780  1C60  2AF7               	goto	l7986
 18781  1C61  0141               	movlb	1	; select bank1
 18782  1C62  1BCE               	btfsc	(qsort@s+1)^(0+128),7
 18783  1C63  0008               	return
 18784  1C64  2AD1               	goto	l7980
 18785  1C65                     __end_of_qsort:	
 18786                           
 18787                           	psect	text42
 18788  3407                     __ptext42:	
 18789 ;; *************** function _swap *****************
 18790 ;; Defined at:
 18791 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 18792 ;; Parameters:    Size  Location     Type
 18793 ;;  len             2   13[BANK0 ] unsigned int 
 18794 ;;  s1              1   15[BANK0 ] PTR unsigned char 
 18795 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18796 ;;  s2              1   16[BANK0 ] PTR unsigned char 
 18797 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18798 ;; Auto vars:     Size  Location     Type
 18799 ;;  c               1   18[BANK0 ] unsigned char 
 18800 ;; Return value:  Size  Location     Type
 18801 ;;                  1    wreg      void 
 18802 ;; Registers used:
 18803 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 18804 ;; Tracked objects:
 18805 ;;		On entry : 0/0
 18806 ;;		On exit  : 0/0
 18807 ;;		Unchanged: 0/0
 18808 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18809 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18810 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18811 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18812 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18813 ;;Total ram usage:        6 bytes
 18814 ;; Hardware stack levels used:    1
 18815 ;; Hardware stack levels required when called:    3
 18816 ;; This function calls:
 18817 ;;		Nothing
 18818 ;; This function is called by:
 18819 ;;		_qsort
 18820 ;; This function uses a non-reentrant model
 18821 ;;
 18822                           
 18823                           
 18824                           ;psect for function _swap
 18825  3407                     _swap:	
 18826  3407                     l1481:	
 18827                           ;incstack = 0
 18828                           ; Regs used in _swap: [wreg+fsr1l+fsr1h+status,2+status,0]
 18829                           
 18830  3407  3001               	movlw	1
 18831  3408  0140               	movlb	0	; select bank0
 18832  3409  02AD               	subwf	swap@len,f
 18833  340A  3000               	movlw	0
 18834  340B  3BAE               	subwfb	swap@len+1,f
 18835  340C  0A2D               	incf	swap@len,w
 18836  340D  1903               	btfsc	3,2
 18837  340E  0A2E               	incf	swap@len+1,w
 18838  340F  1903               	btfsc	3,2
 18839  3410  0008               	return
 18840  3411  082F               	movf	swap@s1,w
 18841  3412  0086               	movwf	6
 18842  3413  3002               	movlw	2	; select bank4/5
 18843  3414  0087               	movwf	7
 18844  3415  0801               	movf	1,w
 18845  3416  00B1               	movwf	??_swap
 18846  3417  0831               	movf	??_swap,w
 18847  3418  00B2               	movwf	swap@c
 18848  3419  0830               	movf	swap@s2,w
 18849  341A  0086               	movwf	6
 18850  341B  3002               	movlw	2	; select bank4/5
 18851  341C  0087               	movwf	7
 18852  341D  0801               	movf	1,w
 18853  341E  00B1               	movwf	??_swap
 18854  341F  082F               	movf	swap@s1,w
 18855  3420  0086               	movwf	6
 18856  3421  3002               	movlw	2	; select bank4/5
 18857  3422  0087               	movwf	7
 18858  3423  0831               	movf	??_swap,w
 18859  3424  0081               	movwf	1
 18860  3425  3001               	movlw	1
 18861  3426  00B1               	movwf	??_swap
 18862  3427  0831               	movf	??_swap,w
 18863  3428  07AF               	addwf	swap@s1,f
 18864  3429  0832               	movf	swap@c,w
 18865  342A  00B1               	movwf	??_swap
 18866  342B  0830               	movf	swap@s2,w
 18867  342C  0086               	movwf	6
 18868  342D  3002               	movlw	2	; select bank4/5
 18869  342E  0087               	movwf	7
 18870  342F  0831               	movf	??_swap,w
 18871  3430  0081               	movwf	1
 18872  3431  3001               	movlw	1
 18873  3432  00B1               	movwf	??_swap
 18874  3433  0831               	movf	??_swap,w
 18875  3434  07B0               	addwf	swap@s2,f
 18876  3435  2C07               	goto	l1481
 18877  3436                     __end_of_swap:	
 18878                           
 18879                           	psect	text43
 18880  359A                     __ptext43:	
 18881 ;; *************** function _sortCur *****************
 18882 ;; Defined at:
 18883 ;;		line 357 in file "system.c"
 18884 ;; Parameters:    Size  Location     Type
 18885 ;;  cmp1            2   19[BANK1 ] PTR const void 
 18886 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18887 ;;  cmp2            2   21[BANK1 ] PTR const void 
 18888 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18889 ;; Auto vars:     Size  Location     Type
 18890 ;;  b               2   25[BANK1 ] PTR struct .
 18891 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18892 ;;  a               2   23[BANK1 ] PTR struct .
 18893 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18894 ;; Return value:  Size  Location     Type
 18895 ;;                  2   19[BANK1 ] int 
 18896 ;; Registers used:
 18897 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18898 ;; Tracked objects:
 18899 ;;		On entry : 0/0
 18900 ;;		On exit  : 0/0
 18901 ;;		Unchanged: 0/0
 18902 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18903 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18904 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18906 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18907 ;;Total ram usage:        8 bytes
 18908 ;; Hardware stack levels used:    1
 18909 ;; Hardware stack levels required when called:    5
 18910 ;; This function calls:
 18911 ;;		___flsub
 18912 ;;		___fltol
 18913 ;; This function is called by:
 18914 ;;		_channelThing
 18915 ;;		_qsort
 18916 ;; This function uses a non-reentrant model
 18917 ;;
 18918                           
 18919                           
 18920                           ;psect for function _sortCur
 18921  359A                     _sortCur:	
 18922                           
 18923                           ;system.c: 357: int sortCur(const void *cmp1, const void *cmp2);system.c: 358: {;system.
      +                          c: 359:  t_virtChannel *a = (t_virtChannel *)cmp1;
 18924                           
 18925                           ;incstack = 0
 18926                           ; Regs used in _sortCur: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 18927  359A  0141               	movlb	1	; select bank1
 18928  359B  0834               	movf	(sortCur@cmp1+1)^(0+128),w
 18929  359C  00B8               	movwf	(sortCur@a+1)^(0+128)
 18930  359D  0833               	movf	sortCur@cmp1^(0+128),w
 18931  359E  00B7               	movwf	sortCur@a^(0+128)
 18932                           
 18933                           ;system.c: 360:  t_virtChannel *b = (t_virtChannel *)cmp2;
 18934  359F  0836               	movf	(sortCur@cmp2+1)^(0+128),w
 18935  35A0  00BA               	movwf	(sortCur@b+1)^(0+128)
 18936  35A1  0835               	movf	sortCur@cmp2^(0+128),w
 18937  35A2  00B9               	movwf	sortCur@b^(0+128)
 18938                           
 18939                           ;system.c: 362:  return (b->current - a->current);
 18940  35A3  0839               	movf	sortCur@b^(0+128),w
 18941  35A4  0086               	movwf	6
 18942  35A5  083A               	movf	(sortCur@b+1)^(0+128),w
 18943  35A6  0087               	movwf	7
 18944  35A7  3142               	addfsr 1,2
 18945  35A8  3F40               	moviw [0]fsr1
 18946  35A9  00A4               	movwf	___flsub@b^(0+128)
 18947  35AA  3F41               	moviw [1]fsr1
 18948  35AB  00A5               	movwf	(___flsub@b+1)^(0+128)
 18949  35AC  3F42               	moviw [2]fsr1
 18950  35AD  00A6               	movwf	(___flsub@b+2)^(0+128)
 18951  35AE  3F43               	moviw [3]fsr1
 18952  35AF  00A7               	movwf	(___flsub@b+3)^(0+128)
 18953  35B0  0837               	movf	sortCur@a^(0+128),w
 18954  35B1  0086               	movwf	6
 18955  35B2  0838               	movf	(sortCur@a+1)^(0+128),w
 18956  35B3  0087               	movwf	7
 18957  35B4  3142               	addfsr 1,2
 18958  35B5  3F40               	moviw [0]fsr1
 18959  35B6  00A0               	movwf	___flsub@a^(0+128)
 18960  35B7  3F41               	moviw [1]fsr1
 18961  35B8  00A1               	movwf	(___flsub@a+1)^(0+128)
 18962  35B9  3F42               	moviw [2]fsr1
 18963  35BA  00A2               	movwf	(___flsub@a+2)^(0+128)
 18964  35BB  3F43               	moviw [3]fsr1
 18965  35BC  00A3               	movwf	(___flsub@a+3)^(0+128)
 18966  35BD  31B4  24FB  31B5   	fcall	___flsub
 18967  35C0  0141               	movlb	1	; select bank1
 18968  35C1  0823               	movf	(?___flsub+3)^(0+128),w
 18969  35C2  00AB               	movwf	(___fltol@f1+3)^(0+128)
 18970  35C3  0822               	movf	(?___flsub+2)^(0+128),w
 18971  35C4  00AA               	movwf	(___fltol@f1+2)^(0+128)
 18972  35C5  0821               	movf	(?___flsub+1)^(0+128),w
 18973  35C6  00A9               	movwf	(___fltol@f1+1)^(0+128)
 18974  35C7  0820               	movf	?___flsub^(0+128),w
 18975  35C8  00A8               	movwf	___fltol@f1^(0+128)
 18976  35C9  31A8  20C0         	fcall	___fltol
 18977  35CB  0141               	movlb	1	; select bank1
 18978  35CC  0829               	movf	(?___fltol+1)^(0+128),w
 18979  35CD  00B4               	movwf	(?_sortCur+1)^(0+128)
 18980  35CE  0828               	movf	?___fltol^(0+128),w
 18981  35CF  00B3               	movwf	?_sortCur^(0+128)
 18982  35D0  0008               	return
 18983  35D1                     __end_of_sortCur:	
 18984                           
 18985                           	psect	text44
 18986  3565                     __ptext44:	
 18987 ;; *************** function _sortDC *****************
 18988 ;; Defined at:
 18989 ;;		line 335 in file "system.c"
 18990 ;; Parameters:    Size  Location     Type
 18991 ;;  cmp1            2   19[BANK1 ] PTR const void 
 18992 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18993 ;;  cmp2            2   21[BANK1 ] PTR const void 
 18994 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 18995 ;; Auto vars:     Size  Location     Type
 18996 ;;  b               1   26[BANK1 ] unsigned char 
 18997 ;;  a               1   25[BANK1 ] unsigned char 
 18998 ;; Return value:  Size  Location     Type
 18999 ;;                  2   19[BANK1 ] int 
 19000 ;; Registers used:
 19001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19002 ;; Tracked objects:
 19003 ;;		On entry : 0/0
 19004 ;;		On exit  : 0/0
 19005 ;;		Unchanged: 0/0
 19006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19007 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19008 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19009 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19010 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19011 ;;Total ram usage:        8 bytes
 19012 ;; Hardware stack levels used:    1
 19013 ;; Hardware stack levels required when called:    4
 19014 ;; This function calls:
 19015 ;;		___bmul
 19016 ;; This function is called by:
 19017 ;;		_channelThing
 19018 ;;		_qsort
 19019 ;; This function uses a non-reentrant model
 19020 ;;
 19021                           
 19022                           
 19023                           ;psect for function _sortDC
 19024  3565                     _sortDC:	
 19025                           
 19026                           ;system.c: 335: int sortDC(const void *cmp1, const void *cmp2);system.c: 336: {;system.c
      +                          : 337:  uint8_t a = *(uint8_t *)cmp1;
 19027                           
 19028                           ;incstack = 0
 19029                           ; Regs used in _sortDC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19030  3565  0141               	movlb	1	; select bank1
 19031  3566  0833               	movf	sortDC@cmp1^(0+128),w
 19032  3567  0086               	movwf	6
 19033  3568  0834               	movf	(sortDC@cmp1+1)^(0+128),w
 19034  3569  0087               	movwf	7
 19035  356A  0801               	movf	1,w
 19036  356B  00B7               	movwf	??_sortDC^(0+128)
 19037  356C  0837               	movf	??_sortDC^(0+128),w
 19038  356D  00B9               	movwf	sortDC@a^(0+128)
 19039                           
 19040                           ;system.c: 338:  uint8_t b = *(uint8_t *)cmp2;
 19041  356E  0835               	movf	sortDC@cmp2^(0+128),w
 19042  356F  0086               	movwf	6
 19043  3570  0836               	movf	(sortDC@cmp2+1)^(0+128),w
 19044  3571  0087               	movwf	7
 19045  3572  0801               	movf	1,w
 19046  3573  00B7               	movwf	??_sortDC^(0+128)
 19047  3574  0837               	movf	??_sortDC^(0+128),w
 19048  3575  00BA               	movwf	sortDC@b^(0+128)
 19049                           
 19050                           ;system.c: 340:  return (virtChannels[b].DC - virtChannels[a].DC);
 19051  3576  3009               	movlw	9
 19052  3577  00B7               	movwf	??_sortDC^(0+128)
 19053  3578  0837               	movf	??_sortDC^(0+128),w
 19054  3579  0140               	movlb	0	; select bank0
 19055  357A  00A9               	movwf	___bmul@multiplicand
 19056  357B  0141               	movlb	1	; select bank1
 19057  357C  083A               	movf	sortDC@b^(0+128),w
 19058  357D  31B3  2330  31B5   	fcall	___bmul
 19059  3580  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19060  3581  0086               	movwf	6
 19061  3582  3002               	movlw	2	; select bank5/6
 19062  3583  0087               	movwf	7
 19063  3584  3009               	movlw	9
 19064  3585  0141               	movlb	1	; select bank1
 19065  3586  00B8               	movwf	(??_sortDC+1)^(0+128)
 19066  3587  0838               	movf	(??_sortDC+1)^(0+128),w
 19067  3588  0140               	movlb	0	; select bank0
 19068  3589  00A9               	movwf	___bmul@multiplicand
 19069  358A  0141               	movlb	1	; select bank1
 19070  358B  0839               	movf	sortDC@a^(0+128),w
 19071  358C  31B3  2330         	fcall	___bmul
 19072  358E  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19073  358F  0084               	movwf	4
 19074  3590  3002               	movlw	2	; select bank5/6
 19075  3591  0085               	movwf	5
 19076  3592  0800               	movf	0,w
 19077  3593  0201               	subwf	1,w
 19078  3594  0141               	movlb	1	; select bank1
 19079  3595  00B3               	movwf	?_sortDC^(0+128)
 19080  3596  01B4               	clrf	(?_sortDC^(0+128)+1)
 19081  3597  1C03               	skipc
 19082  3598  03B4               	decf	(?_sortDC+1)^(0+128),f
 19083  3599  0008               	return
 19084  359A                     __end_of_sortDC:	
 19085                           
 19086                           	psect	text45
 19087  3530                     __ptext45:	
 19088 ;; *************** function _sortDCRev *****************
 19089 ;; Defined at:
 19090 ;;		line 346 in file "system.c"
 19091 ;; Parameters:    Size  Location     Type
 19092 ;;  cmp1            2   19[BANK1 ] PTR const void 
 19093 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19094 ;;  cmp2            2   21[BANK1 ] PTR const void 
 19095 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19096 ;; Auto vars:     Size  Location     Type
 19097 ;;  b               1   26[BANK1 ] unsigned char 
 19098 ;;  a               1   25[BANK1 ] unsigned char 
 19099 ;; Return value:  Size  Location     Type
 19100 ;;                  2   19[BANK1 ] int 
 19101 ;; Registers used:
 19102 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19103 ;; Tracked objects:
 19104 ;;		On entry : 0/0
 19105 ;;		On exit  : 0/0
 19106 ;;		Unchanged: 0/0
 19107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19108 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19109 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19110 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19111 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19112 ;;Total ram usage:        8 bytes
 19113 ;; Hardware stack levels used:    1
 19114 ;; Hardware stack levels required when called:    4
 19115 ;; This function calls:
 19116 ;;		___bmul
 19117 ;; This function is called by:
 19118 ;;		_channelThing
 19119 ;;		_qsort
 19120 ;; This function uses a non-reentrant model
 19121 ;;
 19122                           
 19123                           
 19124                           ;psect for function _sortDCRev
 19125  3530                     _sortDCRev:	
 19126                           
 19127                           ;system.c: 346: int sortDCRev(const void *cmp1, const void *cmp2);system.c: 347: {;syste
      +                          m.c: 348:  uint8_t a = *(uint8_t *)cmp1;
 19128                           
 19129                           ;incstack = 0
 19130                           ; Regs used in _sortDCRev: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19131  3530  0141               	movlb	1	; select bank1
 19132  3531  0833               	movf	sortDCRev@cmp1^(0+128),w
 19133  3532  0086               	movwf	6
 19134  3533  0834               	movf	(sortDCRev@cmp1+1)^(0+128),w
 19135  3534  0087               	movwf	7
 19136  3535  0801               	movf	1,w
 19137  3536  00B7               	movwf	??_sortDCRev^(0+128)
 19138  3537  0837               	movf	??_sortDCRev^(0+128),w
 19139  3538  00B9               	movwf	sortDCRev@a^(0+128)
 19140                           
 19141                           ;system.c: 349:  uint8_t b = *(uint8_t *)cmp2;
 19142  3539  0835               	movf	sortDCRev@cmp2^(0+128),w
 19143  353A  0086               	movwf	6
 19144  353B  0836               	movf	(sortDCRev@cmp2+1)^(0+128),w
 19145  353C  0087               	movwf	7
 19146  353D  0801               	movf	1,w
 19147  353E  00B7               	movwf	??_sortDCRev^(0+128)
 19148  353F  0837               	movf	??_sortDCRev^(0+128),w
 19149  3540  00BA               	movwf	sortDCRev@b^(0+128)
 19150                           
 19151                           ;system.c: 351:  return (virtChannels[a].DC - virtChannels[b].DC);
 19152  3541  3009               	movlw	9
 19153  3542  00B7               	movwf	??_sortDCRev^(0+128)
 19154  3543  0837               	movf	??_sortDCRev^(0+128),w
 19155  3544  0140               	movlb	0	; select bank0
 19156  3545  00A9               	movwf	___bmul@multiplicand
 19157  3546  0141               	movlb	1	; select bank1
 19158  3547  0839               	movf	sortDCRev@a^(0+128),w
 19159  3548  31B3  2330  31B5   	fcall	___bmul
 19160  354B  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19161  354C  0086               	movwf	6
 19162  354D  3002               	movlw	2	; select bank5/6
 19163  354E  0087               	movwf	7
 19164  354F  3009               	movlw	9
 19165  3550  0141               	movlb	1	; select bank1
 19166  3551  00B8               	movwf	(??_sortDCRev+1)^(0+128)
 19167  3552  0838               	movf	(??_sortDCRev+1)^(0+128),w
 19168  3553  0140               	movlb	0	; select bank0
 19169  3554  00A9               	movwf	___bmul@multiplicand
 19170  3555  0141               	movlb	1	; select bank1
 19171  3556  083A               	movf	sortDCRev@b^(0+128),w
 19172  3557  31B3  2330         	fcall	___bmul
 19173  3559  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19174  355A  0084               	movwf	4
 19175  355B  3002               	movlw	2	; select bank5/6
 19176  355C  0085               	movwf	5
 19177  355D  0800               	movf	0,w
 19178  355E  0201               	subwf	1,w
 19179  355F  0141               	movlb	1	; select bank1
 19180  3560  00B3               	movwf	?_sortDCRev^(0+128)
 19181  3561  01B4               	clrf	(?_sortDCRev^(0+128)+1)
 19182  3562  1C03               	skipc
 19183  3563  03B4               	decf	(?_sortDCRev+1)^(0+128),f
 19184  3564  0008               	return
 19185  3565                     __end_of_sortDCRev:	
 19186                           
 19187                           	psect	text46
 19188  3330                     __ptext46:	
 19189 ;; *************** function ___bmul *****************
 19190 ;; Defined at:
 19191 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 19192 ;; Parameters:    Size  Location     Type
 19193 ;;  multiplier      1    wreg     unsigned char 
 19194 ;;  multiplicand    1    9[BANK0 ] unsigned char 
 19195 ;; Auto vars:     Size  Location     Type
 19196 ;;  multiplier      1   12[BANK0 ] unsigned char 
 19197 ;;  product         1   11[BANK0 ] unsigned char 
 19198 ;; Return value:  Size  Location     Type
 19199 ;;                  1    wreg      unsigned char 
 19200 ;; Registers used:
 19201 ;;		wreg, status,2, status,0
 19202 ;; Tracked objects:
 19203 ;;		On entry : 0/0
 19204 ;;		On exit  : 0/0
 19205 ;;		Unchanged: 0/0
 19206 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19207 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19208 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19209 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19210 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19211 ;;Total ram usage:        4 bytes
 19212 ;; Hardware stack levels used:    1
 19213 ;; Hardware stack levels required when called:    3
 19214 ;; This function calls:
 19215 ;;		Nothing
 19216 ;; This function is called by:
 19217 ;;		_channelView
 19218 ;;		_sortDC
 19219 ;;		_sortDCRev
 19220 ;;		_channelThing
 19221 ;;		_controller
 19222 ;;		_qsort
 19223 ;; This function uses a non-reentrant model
 19224 ;;
 19225                           
 19226                           
 19227                           ;psect for function ___bmul
 19228  3330                     ___bmul:	
 19229                           
 19230                           ;incstack = 0
 19231                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 19232                           ;___bmul@multiplier stored from wreg
 19233  3330  0140               	movlb	0	; select bank0
 19234  3331  00AC               	movwf	___bmul@multiplier
 19235  3332  01AB               	clrf	___bmul@product
 19236  3333                     l6778:	
 19237  3333  1C2C               	btfss	___bmul@multiplier,0
 19238  3334  2B39               	goto	l6782
 19239  3335  0829               	movf	___bmul@multiplicand,w
 19240  3336  00AA               	movwf	??___bmul
 19241  3337  082A               	movf	??___bmul,w
 19242  3338  07AB               	addwf	___bmul@product,f
 19243  3339                     l6782:	
 19244  3339  1003               	clrc
 19245  333A  0DA9               	rlf	___bmul@multiplicand,f
 19246  333B  1003               	clrc
 19247  333C  0CAC               	rrf	___bmul@multiplier,f
 19248  333D  082C               	movf	___bmul@multiplier,w
 19249  333E  1D03               	btfss	3,2
 19250  333F  2B33               	goto	l6778
 19251  3340  082B               	movf	___bmul@product,w
 19252  3341  0008               	return
 19253  3342                     __end_of___bmul:	
 19254                           
 19255                           	psect	text47
 19256  28C0                     __ptext47:	
 19257 ;; *************** function ___fltol *****************
 19258 ;; Defined at:
 19259 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 19260 ;; Parameters:    Size  Location     Type
 19261 ;;  f1              4    8[BANK1 ] unsigned char 
 19262 ;; Auto vars:     Size  Location     Type
 19263 ;;  exp1            1   18[BANK1 ] unsigned char 
 19264 ;;  sign1           1   17[BANK1 ] unsigned char 
 19265 ;; Return value:  Size  Location     Type
 19266 ;;                  4    8[BANK1 ] long 
 19267 ;; Registers used:
 19268 ;;		wreg, status,2, status,0
 19269 ;; Tracked objects:
 19270 ;;		On entry : 0/0
 19271 ;;		On exit  : 0/0
 19272 ;;		Unchanged: 0/0
 19273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19274 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19275 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19276 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19277 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19278 ;;Total ram usage:       11 bytes
 19279 ;; Hardware stack levels used:    1
 19280 ;; Hardware stack levels required when called:    3
 19281 ;; This function calls:
 19282 ;;		Nothing
 19283 ;; This function is called by:
 19284 ;;		_channelView
 19285 ;;		_checkChannelStatus
 19286 ;;		_sortCur
 19287 ;;		_ftoa
 19288 ;; This function uses a non-reentrant model
 19289 ;;
 19290                           
 19291                           
 19292                           ;psect for function ___fltol
 19293  28C0                     ___fltol:	
 19294                           
 19295                           ;incstack = 0
 19296                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 19297  28C0  1003               	clrc
 19298  28C1  0141               	movlb	1	; select bank1
 19299  28C2  0D2A               	rlf	(___fltol@f1+2)^(0+128),w
 19300  28C3  0D2B               	rlf	(___fltol@f1+3)^(0+128),w
 19301  28C4  00AC               	movwf	??___fltol^(0+128)
 19302  28C5  082C               	movf	??___fltol^(0+128),w
 19303  28C6  00B2               	movwf	___fltol@exp1^(0+128)
 19304  28C7  0832               	movf	___fltol@exp1^(0+128),w
 19305  28C8  1D03               	btfss	3,2
 19306  28C9  28D3               	goto	l6898
 19307  28CA                     l6894:	
 19308  28CA  3000               	movlw	0
 19309  28CB  00AB               	movwf	(?___fltol+3)^(0+128)
 19310  28CC  3000               	movlw	0
 19311  28CD  00AA               	movwf	(?___fltol+2)^(0+128)
 19312  28CE  3000               	movlw	0
 19313  28CF  00A9               	movwf	(?___fltol+1)^(0+128)
 19314  28D0  3000               	movlw	0
 19315  28D1  00A8               	movwf	?___fltol^(0+128)
 19316  28D2  0008               	return
 19317  28D3                     l6898:	
 19318  28D3  0828               	movf	___fltol@f1^(0+128),w
 19319  28D4  00AC               	movwf	??___fltol^(0+128)
 19320  28D5  0829               	movf	(___fltol@f1+1)^(0+128),w
 19321  28D6  00AD               	movwf	(??___fltol^(0+128)+1)
 19322  28D7  082A               	movf	(___fltol@f1+2)^(0+128),w
 19323  28D8  00AE               	movwf	(??___fltol^(0+128)+2)
 19324  28D9  082B               	movf	(___fltol@f1+3)^(0+128),w
 19325  28DA  00AF               	movwf	(??___fltol^(0+128)+3)
 19326  28DB  301F               	movlw	31
 19327  28DC                     u8055:	
 19328  28DC  36AF               	lsrf	(??___fltol^(0+128)+3),f
 19329  28DD  0CAE               	rrf	(??___fltol^(0+128)+2),f
 19330  28DE  0CAD               	rrf	(??___fltol^(0+128)+1),f
 19331  28DF  0CAC               	rrf	??___fltol^(0+128),f
 19332  28E0  0B89               	decfsz	9,f
 19333  28E1  28DC               	goto	u8055
 19334  28E2  082C               	movf	??___fltol^(0+128),w
 19335  28E3  00B0               	movwf	(??___fltol+4)^(0+128)
 19336  28E4  0830               	movf	(??___fltol+4)^(0+128),w
 19337  28E5  00B1               	movwf	___fltol@sign1^(0+128)
 19338  28E6  17AA               	bsf	(___fltol@f1^(0+128)+2),7
 19339  28E7  30FF               	movlw	255
 19340  28E8  05A8               	andwf	___fltol@f1^(0+128),f
 19341  28E9  30FF               	movlw	255
 19342  28EA  05A9               	andwf	(___fltol@f1+1)^(0+128),f
 19343  28EB  30FF               	movlw	255
 19344  28EC  05AA               	andwf	(___fltol@f1+2)^(0+128),f
 19345  28ED  3000               	movlw	0
 19346  28EE  05AB               	andwf	(___fltol@f1+3)^(0+128),f
 19347  28EF  3096               	movlw	150
 19348  28F0  02B2               	subwf	___fltol@exp1^(0+128),f
 19349  28F1  1FB2               	btfss	___fltol@exp1^(0+128),7
 19350  28F2  2906               	goto	l6916
 19351  28F3  0832               	movf	___fltol@exp1^(0+128),w
 19352  28F4  3A80               	xorlw	128
 19353  28F5  3E97               	addlw	151
 19354  28F6  1C03               	btfss	3,0
 19355  28F7  28CA               	goto	l6894
 19356  28F8                     l6914:	
 19357  28F8  3001               	movlw	1
 19358  28F9                     u8085:	
 19359  28F9  36AB               	lsrf	(___fltol@f1+3)^(0+128),f
 19360  28FA  0CAA               	rrf	(___fltol@f1+2)^(0+128),f
 19361  28FB  0CA9               	rrf	(___fltol@f1+1)^(0+128),f
 19362  28FC  0CA8               	rrf	___fltol@f1^(0+128),f
 19363  28FD  0B89               	decfsz	9,f
 19364  28FE  28F9               	goto	u8085
 19365  28FF  3001               	movlw	1
 19366  2900  00AC               	movwf	??___fltol^(0+128)
 19367  2901  082C               	movf	??___fltol^(0+128),w
 19368  2902  07B2               	addwf	___fltol@exp1^(0+128),f
 19369  2903  1903               	btfsc	3,2
 19370  2904  2917               	goto	l6924
 19371  2905  28F8               	goto	l6914
 19372  2906                     l6916:	
 19373  2906  3020               	movlw	32
 19374  2907  0232               	subwf	___fltol@exp1^(0+128),w
 19375  2908  1803               	btfsc	3,0
 19376  2909  28CA               	goto	l6894
 19377  290A                     l1227:	
 19378  290A  0832               	movf	___fltol@exp1^(0+128),w
 19379  290B  1903               	btfsc	3,2
 19380  290C  2917               	goto	l6924
 19381  290D  3001               	movlw	1
 19382  290E                     u8115:	
 19383  290E  35A8               	lslf	___fltol@f1^(0+128),f
 19384  290F  0DA9               	rlf	(___fltol@f1+1)^(0+128),f
 19385  2910  0DAA               	rlf	(___fltol@f1+2)^(0+128),f
 19386  2911  0DAB               	rlf	(___fltol@f1+3)^(0+128),f
 19387  2912  0B89               	decfsz	9,f
 19388  2913  290E               	goto	u8115
 19389  2914  3001               	movlw	1
 19390  2915  02B2               	subwf	___fltol@exp1^(0+128),f
 19391  2916  290A               	goto	l1227
 19392  2917                     l6924:	
 19393  2917  0831               	movf	___fltol@sign1^(0+128),w
 19394  2918  1903               	btfsc	3,2
 19395  2919  0008               	return
 19396  291A  09A8               	comf	___fltol@f1^(0+128),f
 19397  291B  09A9               	comf	(___fltol@f1+1)^(0+128),f
 19398  291C  09AA               	comf	(___fltol@f1+2)^(0+128),f
 19399  291D  09AB               	comf	(___fltol@f1+3)^(0+128),f
 19400  291E  0AA8               	incf	___fltol@f1^(0+128),f
 19401  291F  1903               	skipnz
 19402  2920  0AA9               	incf	(___fltol@f1+1)^(0+128),f
 19403  2921  1903               	skipnz
 19404  2922  0AAA               	incf	(___fltol@f1+2)^(0+128),f
 19405  2923  1903               	skipnz
 19406  2924  0AAB               	incf	(___fltol@f1+3)^(0+128),f
 19407  2925  0008               	return
 19408  2926                     __end_of___fltol:	
 19409                           
 19410                           	psect	text48
 19411  33DB                     __ptext48:	
 19412 ;; *************** function _memcpy *****************
 19413 ;; Defined at:
 19414 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 19415 ;; Parameters:    Size  Location     Type
 19416 ;;  d1              1    wreg     PTR void 
 19417 ;;		 -> qsort@xbuf(60), 
 19418 ;;  s1              1   13[BANK0 ] PTR const void 
 19419 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19420 ;;  n               2   14[BANK0 ] unsigned int 
 19421 ;; Auto vars:     Size  Location     Type
 19422 ;;  d1              1   18[BANK0 ] PTR void 
 19423 ;;		 -> qsort@xbuf(60), 
 19424 ;;  s               1   20[BANK0 ] PTR const unsigned char 
 19425 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19426 ;;  d               1   19[BANK0 ] PTR unsigned char 
 19427 ;;		 -> qsort@xbuf(60), 
 19428 ;;  tmp             1   17[BANK0 ] unsigned char 
 19429 ;; Return value:  Size  Location     Type
 19430 ;;                  1    wreg      PTR void 
 19431 ;; Registers used:
 19432 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 19433 ;; Tracked objects:
 19434 ;;		On entry : 0/0
 19435 ;;		On exit  : 0/0
 19436 ;;		Unchanged: 0/0
 19437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19438 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19439 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19440 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19441 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19442 ;;Total ram usage:        8 bytes
 19443 ;; Hardware stack levels used:    1
 19444 ;; Hardware stack levels required when called:    3
 19445 ;; This function calls:
 19446 ;;		Nothing
 19447 ;; This function is called by:
 19448 ;;		_qsort
 19449 ;; This function uses a non-reentrant model
 19450 ;;
 19451                           
 19452                           
 19453                           ;psect for function _memcpy
 19454  33DB                     _memcpy:	
 19455                           
 19456                           ;incstack = 0
 19457                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 19458                           ;memcpy@d1 stored from wreg
 19459  33DB  0140               	movlb	0	; select bank0
 19460  33DC  00B2               	movwf	memcpy@d1
 19461  33DD  082D               	movf	memcpy@s1,w
 19462  33DE  00B0               	movwf	??_memcpy
 19463  33DF  0830               	movf	??_memcpy,w
 19464  33E0  00B4               	movwf	memcpy@s
 19465  33E1  0832               	movf	memcpy@d1,w
 19466  33E2  00B0               	movwf	??_memcpy
 19467  33E3  0830               	movf	??_memcpy,w
 19468  33E4  00B3               	movwf	memcpy@d
 19469  33E5                     l1525:	
 19470  33E5  3001               	movlw	1
 19471  33E6  02AE               	subwf	memcpy@n,f
 19472  33E7  3000               	movlw	0
 19473  33E8  3BAF               	subwfb	memcpy@n+1,f
 19474  33E9  0A2E               	incf	memcpy@n,w
 19475  33EA  1903               	btfsc	3,2
 19476  33EB  0A2F               	incf	memcpy@n+1,w
 19477  33EC  1903               	btfsc	3,2
 19478  33ED  0008               	return
 19479  33EE  0834               	movf	memcpy@s,w
 19480  33EF  0086               	movwf	6
 19481  33F0  3002               	movlw	2	; select bank4/5
 19482  33F1  0087               	movwf	7
 19483  33F2  0801               	movf	1,w
 19484  33F3  00B0               	movwf	??_memcpy
 19485  33F4  0830               	movf	??_memcpy,w
 19486  33F5  00B1               	movwf	memcpy@tmp
 19487  33F6  3001               	movlw	1
 19488  33F7  00B0               	movwf	??_memcpy
 19489  33F8  0830               	movf	??_memcpy,w
 19490  33F9  07B4               	addwf	memcpy@s,f
 19491  33FA  0831               	movf	memcpy@tmp,w
 19492  33FB  00B0               	movwf	??_memcpy
 19493  33FC  0833               	movf	memcpy@d,w
 19494  33FD  0086               	movwf	6
 19495  33FE  3001               	movlw	1	; select bank2/3
 19496  33FF  0087               	movwf	7
 19497  3400  0830               	movf	??_memcpy,w
 19498  3401  0081               	movwf	1
 19499  3402  3001               	movlw	1
 19500  3403  00B0               	movwf	??_memcpy
 19501  3404  0830               	movf	??_memcpy,w
 19502  3405  07B3               	addwf	memcpy@d,f
 19503  3406  2BE5               	goto	l1525
 19504  3407                     __end_of_memcpy:	
 19505                           
 19506                           	psect	text49
 19507  286E                     __ptext49:	
 19508 ;; *************** function ___awdiv *****************
 19509 ;; Defined at:
 19510 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 19511 ;; Parameters:    Size  Location     Type
 19512 ;;  divisor         2    0[BANK0 ] int 
 19513 ;;  dividend        2    2[BANK0 ] int 
 19514 ;; Auto vars:     Size  Location     Type
 19515 ;;  quotient        2    7[BANK0 ] int 
 19516 ;;  sign            1    6[BANK0 ] unsigned char 
 19517 ;;  counter         1    5[BANK0 ] unsigned char 
 19518 ;; Return value:  Size  Location     Type
 19519 ;;                  2    0[BANK0 ] int 
 19520 ;; Registers used:
 19521 ;;		wreg, status,2, status,0
 19522 ;; Tracked objects:
 19523 ;;		On entry : 0/0
 19524 ;;		On exit  : 0/0
 19525 ;;		Unchanged: 0/0
 19526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19527 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19528 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19530 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19531 ;;Total ram usage:        9 bytes
 19532 ;; Hardware stack levels used:    1
 19533 ;; Hardware stack levels required when called:    3
 19534 ;; This function calls:
 19535 ;;		Nothing
 19536 ;; This function is called by:
 19537 ;;		_itoa
 19538 ;;		_qsort
 19539 ;; This function uses a non-reentrant model
 19540 ;;
 19541                           
 19542                           
 19543                           ;psect for function ___awdiv
 19544  286E                     ___awdiv:	
 19545                           
 19546                           ;incstack = 0
 19547                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 19548  286E  0140               	movlb	0	; select bank0
 19549  286F  01A6               	clrf	___awdiv@sign
 19550  2870  1FA1               	btfss	___awdiv@divisor+1,7
 19551  2871  2879               	goto	l6798
 19552  2872  09A0               	comf	___awdiv@divisor,f
 19553  2873  09A1               	comf	___awdiv@divisor+1,f
 19554  2874  0AA0               	incf	___awdiv@divisor,f
 19555  2875  1903               	skipnz
 19556  2876  0AA1               	incf	___awdiv@divisor+1,f
 19557  2877  01A6               	clrf	___awdiv@sign
 19558  2878  0AA6               	incf	___awdiv@sign,f
 19559  2879                     l6798:	
 19560  2879  1FA3               	btfss	___awdiv@dividend+1,7
 19561  287A  2884               	goto	l6804
 19562  287B  09A2               	comf	___awdiv@dividend,f
 19563  287C  09A3               	comf	___awdiv@dividend+1,f
 19564  287D  0AA2               	incf	___awdiv@dividend,f
 19565  287E  1903               	skipnz
 19566  287F  0AA3               	incf	___awdiv@dividend+1,f
 19567  2880  3001               	movlw	1
 19568  2881  00A4               	movwf	??___awdiv
 19569  2882  0824               	movf	??___awdiv,w
 19570  2883  06A6               	xorwf	___awdiv@sign,f
 19571  2884                     l6804:	
 19572  2884  01A7               	clrf	___awdiv@quotient
 19573  2885  01A8               	clrf	___awdiv@quotient+1
 19574  2886  0820               	movf	___awdiv@divisor,w
 19575  2887  0421               	iorwf	___awdiv@divisor+1,w
 19576  2888  1903               	btfsc	3,2
 19577  2889  28B3               	goto	l6826
 19578  288A  01A5               	clrf	___awdiv@counter
 19579  288B  0AA5               	incf	___awdiv@counter,f
 19580  288C                     l6814:	
 19581  288C  1BA1               	btfsc	___awdiv@divisor+1,7
 19582  288D  2898               	goto	l6816
 19583  288E  3001               	movlw	1
 19584  288F                     u7835:	
 19585  288F  35A0               	lslf	___awdiv@divisor,f
 19586  2890  0DA1               	rlf	___awdiv@divisor+1,f
 19587  2891  0B89               	decfsz	9,f
 19588  2892  288F               	goto	u7835
 19589  2893  3001               	movlw	1
 19590  2894  00A4               	movwf	??___awdiv
 19591  2895  0824               	movf	??___awdiv,w
 19592  2896  07A5               	addwf	___awdiv@counter,f
 19593  2897  288C               	goto	l6814
 19594  2898                     l6816:	
 19595  2898  3001               	movlw	1
 19596  2899                     u7855:	
 19597  2899  35A7               	lslf	___awdiv@quotient,f
 19598  289A  0DA8               	rlf	___awdiv@quotient+1,f
 19599  289B  0B89               	decfsz	9,f
 19600  289C  2899               	goto	u7855
 19601  289D  0821               	movf	___awdiv@divisor+1,w
 19602  289E  0223               	subwf	___awdiv@dividend+1,w
 19603  289F  1D03               	skipz
 19604  28A0  28A3               	goto	u7865
 19605  28A1  0820               	movf	___awdiv@divisor,w
 19606  28A2  0222               	subwf	___awdiv@dividend,w
 19607  28A3                     u7865:	
 19608  28A3  1C03               	skipc
 19609  28A4  28AA               	goto	l6822
 19610  28A5  0820               	movf	___awdiv@divisor,w
 19611  28A6  02A2               	subwf	___awdiv@dividend,f
 19612  28A7  0821               	movf	___awdiv@divisor+1,w
 19613  28A8  3BA3               	subwfb	___awdiv@dividend+1,f
 19614  28A9  1427               	bsf	___awdiv@quotient,0
 19615  28AA                     l6822:	
 19616  28AA  3001               	movlw	1
 19617  28AB                     u7875:	
 19618  28AB  36A1               	lsrf	___awdiv@divisor+1,f
 19619  28AC  0CA0               	rrf	___awdiv@divisor,f
 19620  28AD  0B89               	decfsz	9,f
 19621  28AE  28AB               	goto	u7875
 19622  28AF  3001               	movlw	1
 19623  28B0  02A5               	subwf	___awdiv@counter,f
 19624  28B1  1D03               	btfss	3,2
 19625  28B2  2898               	goto	l6816
 19626  28B3                     l6826:	
 19627  28B3  0826               	movf	___awdiv@sign,w
 19628  28B4  1903               	btfsc	3,2
 19629  28B5  28BB               	goto	l6830
 19630  28B6  09A7               	comf	___awdiv@quotient,f
 19631  28B7  09A8               	comf	___awdiv@quotient+1,f
 19632  28B8  0AA7               	incf	___awdiv@quotient,f
 19633  28B9  1903               	skipnz
 19634  28BA  0AA8               	incf	___awdiv@quotient+1,f
 19635  28BB                     l6830:	
 19636  28BB  0828               	movf	___awdiv@quotient+1,w
 19637  28BC  00A1               	movwf	?___awdiv+1
 19638  28BD  0827               	movf	___awdiv@quotient,w
 19639  28BE  00A0               	movwf	?___awdiv
 19640  28BF  0008               	return
 19641  28C0                     __end_of___awdiv:	
 19642                           
 19643                           	psect	text50
 19644  2CD1                     __ptext50:	
 19645 ;; *************** function ___xxtofl *****************
 19646 ;; Defined at:
 19647 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 19648 ;; Parameters:    Size  Location     Type
 19649 ;;  sign            1    wreg     unsigned char 
 19650 ;;  val             4   19[BANK0 ] long 
 19651 ;; Auto vars:     Size  Location     Type
 19652 ;;  sign            1   27[BANK0 ] unsigned char 
 19653 ;;  arg             4   29[BANK0 ] unsigned long 
 19654 ;;  exp             1   28[BANK0 ] unsigned char 
 19655 ;; Return value:  Size  Location     Type
 19656 ;;                  4   19[BANK0 ] unsigned char 
 19657 ;; Registers used:
 19658 ;;		wreg, status,2, status,0
 19659 ;; Tracked objects:
 19660 ;;		On entry : 0/0
 19661 ;;		On exit  : 0/0
 19662 ;;		Unchanged: 0/0
 19663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19664 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19665 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19666 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19667 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19668 ;;Total ram usage:       14 bytes
 19669 ;; Hardware stack levels used:    1
 19670 ;; Hardware stack levels required when called:    3
 19671 ;; This function calls:
 19672 ;;		Nothing
 19673 ;; This function is called by:
 19674 ;;		_checkChannelStatus
 19675 ;;		_systemCheck
 19676 ;;		_getAnalogValues
 19677 ;;		_channelThing
 19678 ;;		_ftoa
 19679 ;; This function uses a non-reentrant model
 19680 ;;
 19681                           
 19682                           
 19683                           ;psect for function ___xxtofl
 19684  2CD1                     ___xxtofl:	
 19685                           
 19686                           ;incstack = 0
 19687                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 19688                           ;___xxtofl@sign stored from wreg
 19689  2CD1  0140               	movlb	0	; select bank0
 19690  2CD2  00BB               	movwf	___xxtofl@sign
 19691  2CD3  083B               	movf	___xxtofl@sign,w
 19692  2CD4  1D03               	btfss	3,2
 19693  2CD5  1FB6               	btfss	___xxtofl@val+3,7
 19694  2CD6  2CE7               	goto	l7220
 19695  2CD7  0933               	comf	___xxtofl@val,w
 19696  2CD8  00BD               	movwf	___xxtofl@arg
 19697  2CD9  0934               	comf	___xxtofl@val+1,w
 19698  2CDA  00BE               	movwf	___xxtofl@arg+1
 19699  2CDB  0935               	comf	___xxtofl@val+2,w
 19700  2CDC  00BF               	movwf	___xxtofl@arg+2
 19701  2CDD  0936               	comf	___xxtofl@val+3,w
 19702  2CDE  00C0               	movwf	___xxtofl@arg+3
 19703  2CDF  0ABD               	incf	___xxtofl@arg,f
 19704  2CE0  1903               	skipnz
 19705  2CE1  0ABE               	incf	___xxtofl@arg+1,f
 19706  2CE2  1903               	skipnz
 19707  2CE3  0ABF               	incf	___xxtofl@arg+2,f
 19708  2CE4  1903               	skipnz
 19709  2CE5  0AC0               	incf	___xxtofl@arg+3,f
 19710  2CE6  2CEF               	goto	l1461
 19711  2CE7                     l7220:	
 19712  2CE7  0836               	movf	___xxtofl@val+3,w
 19713  2CE8  00C0               	movwf	___xxtofl@arg+3
 19714  2CE9  0835               	movf	___xxtofl@val+2,w
 19715  2CEA  00BF               	movwf	___xxtofl@arg+2
 19716  2CEB  0834               	movf	___xxtofl@val+1,w
 19717  2CEC  00BE               	movwf	___xxtofl@arg+1
 19718  2CED  0833               	movf	___xxtofl@val,w
 19719  2CEE  00BD               	movwf	___xxtofl@arg
 19720  2CEF                     l1461:	
 19721  2CEF  0836               	movf	___xxtofl@val+3,w
 19722  2CF0  0435               	iorwf	___xxtofl@val+2,w
 19723  2CF1  0434               	iorwf	___xxtofl@val+1,w
 19724  2CF2  0433               	iorwf	___xxtofl@val,w
 19725  2CF3  1D03               	skipz
 19726  2CF4  2CFE               	goto	l7226
 19727  2CF5  3000               	movlw	0
 19728  2CF6  00B6               	movwf	?___xxtofl+3
 19729  2CF7  3000               	movlw	0
 19730  2CF8  00B5               	movwf	?___xxtofl+2
 19731  2CF9  3000               	movlw	0
 19732  2CFA  00B4               	movwf	?___xxtofl+1
 19733  2CFB  3000               	movlw	0
 19734  2CFC  00B3               	movwf	?___xxtofl
 19735  2CFD  0008               	return
 19736  2CFE                     l7226:	
 19737  2CFE  3096               	movlw	150
 19738  2CFF  00B7               	movwf	??___xxtofl
 19739  2D00  0837               	movf	??___xxtofl,w
 19740  2D01  00BC               	movwf	___xxtofl@exp
 19741  2D02                     l7230:	
 19742  2D02  30FE               	movlw	254
 19743  2D03  0540               	andwf	___xxtofl@arg+3,w
 19744  2D04  1903               	btfsc	3,2
 19745  2D05  2D25               	goto	l1467
 19746  2D06  3001               	movlw	1
 19747  2D07  00B7               	movwf	??___xxtofl
 19748  2D08  0837               	movf	??___xxtofl,w
 19749  2D09  07BC               	addwf	___xxtofl@exp,f
 19750  2D0A  3001               	movlw	1
 19751  2D0B                     u8725:	
 19752  2D0B  36C0               	lsrf	___xxtofl@arg+3,f
 19753  2D0C  0CBF               	rrf	___xxtofl@arg+2,f
 19754  2D0D  0CBE               	rrf	___xxtofl@arg+1,f
 19755  2D0E  0CBD               	rrf	___xxtofl@arg,f
 19756  2D0F  0B89               	decfsz	9,f
 19757  2D10  2D0B               	goto	u8725
 19758  2D11  2D02               	goto	l7230
 19759  2D12                     l7232:	
 19760  2D12  3001               	movlw	1
 19761  2D13  00B7               	movwf	??___xxtofl
 19762  2D14  0837               	movf	??___xxtofl,w
 19763  2D15  07BC               	addwf	___xxtofl@exp,f
 19764  2D16  3001               	movlw	1
 19765  2D17  07BD               	addwf	___xxtofl@arg,f
 19766  2D18  3000               	movlw	0
 19767  2D19  3DBE               	addwfc	___xxtofl@arg+1,f
 19768  2D1A  3000               	movlw	0
 19769  2D1B  3DBF               	addwfc	___xxtofl@arg+2,f
 19770  2D1C  3000               	movlw	0
 19771  2D1D  3DC0               	addwfc	___xxtofl@arg+3,f
 19772  2D1E  3001               	movlw	1
 19773  2D1F                     u8745:	
 19774  2D1F  36C0               	lsrf	___xxtofl@arg+3,f
 19775  2D20  0CBF               	rrf	___xxtofl@arg+2,f
 19776  2D21  0CBE               	rrf	___xxtofl@arg+1,f
 19777  2D22  0CBD               	rrf	___xxtofl@arg,f
 19778  2D23  0B89               	decfsz	9,f
 19779  2D24  2D1F               	goto	u8745
 19780  2D25                     l1467:	
 19781  2D25  30FF               	movlw	255
 19782  2D26  0540               	andwf	___xxtofl@arg+3,w
 19783  2D27  1903               	btfsc	3,2
 19784  2D28  2D37               	goto	l7240
 19785  2D29  2D12               	goto	l7232
 19786  2D2A                     l7242:	
 19787  2D2A  3002               	movlw	2
 19788  2D2B  023C               	subwf	___xxtofl@exp,w
 19789  2D2C  1C03               	btfss	3,0
 19790  2D2D  2D39               	goto	l1474
 19791  2D2E  3001               	movlw	1
 19792  2D2F  02BC               	subwf	___xxtofl@exp,f
 19793  2D30  3001               	movlw	1
 19794  2D31                     u8765:	
 19795  2D31  35BD               	lslf	___xxtofl@arg,f
 19796  2D32  0DBE               	rlf	___xxtofl@arg+1,f
 19797  2D33  0DBF               	rlf	___xxtofl@arg+2,f
 19798  2D34  0DC0               	rlf	___xxtofl@arg+3,f
 19799  2D35  0B89               	decfsz	9,f
 19800  2D36  2D31               	goto	u8765
 19801  2D37                     l7240:	
 19802  2D37  1FBF               	btfss	___xxtofl@arg+2,7
 19803  2D38  2D2A               	goto	l7242
 19804  2D39                     l1474:	
 19805  2D39  183C               	btfsc	___xxtofl@exp,0
 19806  2D3A  2D43               	goto	l1475
 19807  2D3B  30FF               	movlw	255
 19808  2D3C  05BD               	andwf	___xxtofl@arg,f
 19809  2D3D  30FF               	movlw	255
 19810  2D3E  05BE               	andwf	___xxtofl@arg+1,f
 19811  2D3F  307F               	movlw	127
 19812  2D40  05BF               	andwf	___xxtofl@arg+2,f
 19813  2D41  30FF               	movlw	255
 19814  2D42  05C0               	andwf	___xxtofl@arg+3,f
 19815  2D43                     l1475:	
 19816  2D43  1003               	clrc
 19817  2D44  0CBC               	rrf	___xxtofl@exp,f
 19818  2D45  083C               	movf	___xxtofl@exp,w
 19819  2D46  00B7               	movwf	??___xxtofl
 19820  2D47  01B8               	clrf	??___xxtofl+1
 19821  2D48  01B9               	clrf	??___xxtofl+2
 19822  2D49  01BA               	clrf	??___xxtofl+3
 19823  2D4A  3018               	movlw	24
 19824  2D4B                     u8805:	
 19825  2D4B  35B7               	lslf	??___xxtofl,f
 19826  2D4C  0DB8               	rlf	??___xxtofl+1,f
 19827  2D4D  0DB9               	rlf	??___xxtofl+2,f
 19828  2D4E  0DBA               	rlf	??___xxtofl+3,f
 19829  2D4F  0B89               	decfsz	9,f
 19830  2D50  2D4B               	goto	u8805
 19831  2D51  0837               	movf	??___xxtofl,w
 19832  2D52  04BD               	iorwf	___xxtofl@arg,f
 19833  2D53  0838               	movf	??___xxtofl+1,w
 19834  2D54  04BE               	iorwf	___xxtofl@arg+1,f
 19835  2D55  0839               	movf	??___xxtofl+2,w
 19836  2D56  04BF               	iorwf	___xxtofl@arg+2,f
 19837  2D57  083A               	movf	??___xxtofl+3,w
 19838  2D58  04C0               	iorwf	___xxtofl@arg+3,f
 19839  2D59  083B               	movf	___xxtofl@sign,w
 19840  2D5A  1D03               	btfss	3,2
 19841  2D5B  1FB6               	btfss	___xxtofl@val+3,7
 19842  2D5C  2D5E               	goto	l7254
 19843  2D5D  17C0               	bsf	___xxtofl@arg+3,7
 19844  2D5E                     l7254:	
 19845  2D5E  0840               	movf	___xxtofl@arg+3,w
 19846  2D5F  00B6               	movwf	?___xxtofl+3
 19847  2D60  083F               	movf	___xxtofl@arg+2,w
 19848  2D61  00B5               	movwf	?___xxtofl+2
 19849  2D62  083E               	movf	___xxtofl@arg+1,w
 19850  2D63  00B4               	movwf	?___xxtofl+1
 19851  2D64  083D               	movf	___xxtofl@arg,w
 19852  2D65  00B3               	movwf	?___xxtofl
 19853  2D66  0008               	return
 19854  2D67                     __end_of___xxtofl:	
 19855                           
 19856                           	psect	text51
 19857  2B39                     __ptext51:	
 19858 ;; *************** function ___flge *****************
 19859 ;; Defined at:
 19860 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 19861 ;; Parameters:    Size  Location     Type
 19862 ;;  ff1             4   13[BANK1 ] unsigned char 
 19863 ;;  ff2             4   17[BANK1 ] unsigned char 
 19864 ;; Auto vars:     Size  Location     Type
 19865 ;;		None
 19866 ;; Return value:  Size  Location     Type
 19867 ;;		None               void
 19868 ;; Registers used:
 19869 ;;		wreg, status,2, status,0
 19870 ;; Tracked objects:
 19871 ;;		On entry : 0/0
 19872 ;;		On exit  : 0/0
 19873 ;;		Unchanged: 0/0
 19874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19875 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19876 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19877 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19878 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19879 ;;Total ram usage:       12 bytes
 19880 ;; Hardware stack levels used:    1
 19881 ;; Hardware stack levels required when called:    3
 19882 ;; This function calls:
 19883 ;;		Nothing
 19884 ;; This function is called by:
 19885 ;;		_spinInput
 19886 ;;		_channelSetup
 19887 ;;		_setOutputPower
 19888 ;;		_checkChannelStatus
 19889 ;;		_systemCheck
 19890 ;;		_checkSensor
 19891 ;;		_channelThing
 19892 ;;		_ftoa
 19893 ;; This function uses a non-reentrant model
 19894 ;;
 19895                           
 19896                           
 19897                           ;psect for function ___flge
 19898  2B39                     ___flge:	
 19899                           
 19900                           ;incstack = 0
 19901                           ; Regs used in ___flge: [wreg+status,2+status,0]
 19902  2B39  3000               	movlw	0
 19903  2B3A  0141               	movlb	1	; select bank1
 19904  2B3B  052D               	andwf	___flge@ff1^(0+128),w
 19905  2B3C  00B5               	movwf	??___flge^(0+128)
 19906  2B3D  3000               	movlw	0
 19907  2B3E  052E               	andwf	(___flge@ff1+1)^(0+128),w
 19908  2B3F  00B6               	movwf	(??___flge^(0+128)+1)
 19909  2B40  3080               	movlw	128
 19910  2B41  052F               	andwf	(___flge@ff1+2)^(0+128),w
 19911  2B42  00B7               	movwf	(??___flge^(0+128)+2)
 19912  2B43  307F               	movlw	127
 19913  2B44  0530               	andwf	(___flge@ff1+3)^(0+128),w
 19914  2B45  00B8               	movwf	(??___flge^(0+128)+3)
 19915  2B46  0838               	movf	(??___flge+3)^(0+128),w
 19916  2B47  0437               	iorwf	(??___flge+2)^(0+128),w
 19917  2B48  0436               	iorwf	(??___flge+1)^(0+128),w
 19918  2B49  0435               	iorwf	??___flge^(0+128),w
 19919  2B4A  1D03               	skipz
 19920  2B4B  2B54               	goto	l1204
 19921  2B4C  3000               	movlw	0
 19922  2B4D  00B0               	movwf	(___flge@ff1+3)^(0+128)
 19923  2B4E  3000               	movlw	0
 19924  2B4F  00AF               	movwf	(___flge@ff1+2)^(0+128)
 19925  2B50  3000               	movlw	0
 19926  2B51  00AE               	movwf	(___flge@ff1+1)^(0+128)
 19927  2B52  3000               	movlw	0
 19928  2B53  00AD               	movwf	___flge@ff1^(0+128)
 19929  2B54                     l1204:	
 19930  2B54  3000               	movlw	0
 19931  2B55  0531               	andwf	___flge@ff2^(0+128),w
 19932  2B56  00B5               	movwf	??___flge^(0+128)
 19933  2B57  3000               	movlw	0
 19934  2B58  0532               	andwf	(___flge@ff2+1)^(0+128),w
 19935  2B59  00B6               	movwf	(??___flge^(0+128)+1)
 19936  2B5A  3080               	movlw	128
 19937  2B5B  0533               	andwf	(___flge@ff2+2)^(0+128),w
 19938  2B5C  00B7               	movwf	(??___flge^(0+128)+2)
 19939  2B5D  307F               	movlw	127
 19940  2B5E  0534               	andwf	(___flge@ff2+3)^(0+128),w
 19941  2B5F  00B8               	movwf	(??___flge^(0+128)+3)
 19942  2B60  0838               	movf	(??___flge+3)^(0+128),w
 19943  2B61  0437               	iorwf	(??___flge+2)^(0+128),w
 19944  2B62  0436               	iorwf	(??___flge+1)^(0+128),w
 19945  2B63  0435               	iorwf	??___flge^(0+128),w
 19946  2B64  1D03               	skipz
 19947  2B65  2B6E               	goto	l6878
 19948  2B66  3000               	movlw	0
 19949  2B67  00B4               	movwf	(___flge@ff2+3)^(0+128)
 19950  2B68  3000               	movlw	0
 19951  2B69  00B3               	movwf	(___flge@ff2+2)^(0+128)
 19952  2B6A  3000               	movlw	0
 19953  2B6B  00B2               	movwf	(___flge@ff2+1)^(0+128)
 19954  2B6C  3000               	movlw	0
 19955  2B6D  00B1               	movwf	___flge@ff2^(0+128)
 19956  2B6E                     l6878:	
 19957  2B6E  1FB0               	btfss	(___flge@ff1+3)^(0+128),7
 19958  2B6F  2B88               	goto	l6882
 19959  2B70  3000               	movlw	0
 19960  2B71  00B5               	movwf	??___flge^(0+128)
 19961  2B72  3000               	movlw	0
 19962  2B73  00B6               	movwf	(??___flge^(0+128)+1)
 19963  2B74  3000               	movlw	0
 19964  2B75  00B7               	movwf	(??___flge^(0+128)+2)
 19965  2B76  3080               	movlw	128
 19966  2B77  00B8               	movwf	(??___flge^(0+128)+3)
 19967  2B78  082D               	movf	___flge@ff1^(0+128),w
 19968  2B79  02B5               	subwf	??___flge^(0+128),f
 19969  2B7A  082E               	movf	(___flge@ff1+1)^(0+128),w
 19970  2B7B  3BB6               	subwfb	(??___flge^(0+128)+1),f
 19971  2B7C  082F               	movf	(___flge@ff1+2)^(0+128),w
 19972  2B7D  3BB7               	subwfb	(??___flge^(0+128)+2),f
 19973  2B7E  0830               	movf	(___flge@ff1+3)^(0+128),w
 19974  2B7F  3BB8               	subwfb	(??___flge^(0+128)+3),f
 19975  2B80  0838               	movf	(??___flge+3)^(0+128),w
 19976  2B81  00B0               	movwf	(___flge@ff1+3)^(0+128)
 19977  2B82  0837               	movf	(??___flge+2)^(0+128),w
 19978  2B83  00AF               	movwf	(___flge@ff1+2)^(0+128)
 19979  2B84  0836               	movf	(??___flge+1)^(0+128),w
 19980  2B85  00AE               	movwf	(___flge@ff1+1)^(0+128)
 19981  2B86  0835               	movf	??___flge^(0+128),w
 19982  2B87  00AD               	movwf	___flge@ff1^(0+128)
 19983  2B88                     l6882:	
 19984  2B88  1FB4               	btfss	(___flge@ff2+3)^(0+128),7
 19985  2B89  2BA2               	goto	l1207
 19986  2B8A  3000               	movlw	0
 19987  2B8B  00B5               	movwf	??___flge^(0+128)
 19988  2B8C  3000               	movlw	0
 19989  2B8D  00B6               	movwf	(??___flge^(0+128)+1)
 19990  2B8E  3000               	movlw	0
 19991  2B8F  00B7               	movwf	(??___flge^(0+128)+2)
 19992  2B90  3080               	movlw	128
 19993  2B91  00B8               	movwf	(??___flge^(0+128)+3)
 19994  2B92  0831               	movf	___flge@ff2^(0+128),w
 19995  2B93  02B5               	subwf	??___flge^(0+128),f
 19996  2B94  0832               	movf	(___flge@ff2+1)^(0+128),w
 19997  2B95  3BB6               	subwfb	(??___flge^(0+128)+1),f
 19998  2B96  0833               	movf	(___flge@ff2+2)^(0+128),w
 19999  2B97  3BB7               	subwfb	(??___flge^(0+128)+2),f
 20000  2B98  0834               	movf	(___flge@ff2+3)^(0+128),w
 20001  2B99  3BB8               	subwfb	(??___flge^(0+128)+3),f
 20002  2B9A  0838               	movf	(??___flge+3)^(0+128),w
 20003  2B9B  00B4               	movwf	(___flge@ff2+3)^(0+128)
 20004  2B9C  0837               	movf	(??___flge+2)^(0+128),w
 20005  2B9D  00B3               	movwf	(___flge@ff2+2)^(0+128)
 20006  2B9E  0836               	movf	(??___flge+1)^(0+128),w
 20007  2B9F  00B2               	movwf	(___flge@ff2+1)^(0+128)
 20008  2BA0  0835               	movf	??___flge^(0+128),w
 20009  2BA1  00B1               	movwf	___flge@ff2^(0+128)
 20010  2BA2                     l1207:	
 20011  2BA2  3080               	movlw	128
 20012  2BA3  06B0               	xorwf	(___flge@ff1+3)^(0+128),f
 20013  2BA4  3080               	movlw	128
 20014  2BA5  06B4               	xorwf	(___flge@ff2+3)^(0+128),f
 20015  2BA6  0834               	movf	(___flge@ff2+3)^(0+128),w
 20016  2BA7  0230               	subwf	(___flge@ff1+3)^(0+128),w
 20017  2BA8  1D03               	skipz
 20018  2BA9  0008               	return
 20019  2BAA  0833               	movf	(___flge@ff2+2)^(0+128),w
 20020  2BAB  022F               	subwf	(___flge@ff1+2)^(0+128),w
 20021  2BAC  1D03               	skipz
 20022  2BAD  0008               	return
 20023  2BAE  0832               	movf	(___flge@ff2+1)^(0+128),w
 20024  2BAF  022E               	subwf	(___flge@ff1+1)^(0+128),w
 20025  2BB0  1D03               	skipz
 20026  2BB1  0008               	return
 20027  2BB2  0831               	movf	___flge@ff2^(0+128),w
 20028  2BB3  022D               	subwf	___flge@ff1^(0+128),w
 20029  2BB4  0008               	return
 20030  2BB5                     __end_of___flge:	
 20031                           
 20032                           	psect	text52
 20033  00D5                     __ptext52:	
 20034 ;; *************** function _calcRequiredPower *****************
 20035 ;; Defined at:
 20036 ;;		line 275 in file "system.c"
 20037 ;; Parameters:    Size  Location     Type
 20038 ;;		None
 20039 ;; Auto vars:     Size  Location     Type
 20040 ;;  T2              4   69[BANK1 ] float 
 20041 ;;  T1              4   65[BANK1 ] float 
 20042 ;;  A               4   57[BANK1 ] float 
 20043 ;;  phi             4   53[BANK1 ] float 
 20044 ;;  d               4   49[BANK1 ] float 
 20045 ;;  Rth             4   21[BANK1 ] float 
 20046 ;;  p               4   17[BANK1 ] float 
 20047 ;;  n               1   73[BANK1 ] unsigned char 
 20048 ;; Return value:  Size  Location     Type
 20049 ;;                  1    wreg      void 
 20050 ;; Registers used:
 20051 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20052 ;; Tracked objects:
 20053 ;;		On entry : 0/0
 20054 ;;		On exit  : 0/0
 20055 ;;		Unchanged: 0/0
 20056 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20057 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20058 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20059 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20060 ;;      Totals:         0       0      61       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20061 ;;Total ram usage:       61 bytes
 20062 ;; Hardware stack levels used:    1
 20063 ;; Hardware stack levels required when called:    5
 20064 ;; This function calls:
 20065 ;;		___fladd
 20066 ;;		___fldiv
 20067 ;;		___flmul
 20068 ;;		___flsub
 20069 ;;		___wmul
 20070 ;; This function is called by:
 20071 ;;		_main
 20072 ;; This function uses a non-reentrant model
 20073 ;;
 20074                           
 20075                           
 20076                           ;psect for function _calcRequiredPower
 20077  00D5                     _calcRequiredPower:	
 20078                           
 20079                           ;system.c: 277:  uint8_t n;;system.c: 278:  float d, A, T1, T2, phi;;system.c: 279:  flo
      +                          at p, Rth;;system.c: 281:  for (n = 0; n < 4; n++) {
 20080                           
 20081                           ;incstack = 0
 20082                           ; Regs used in _calcRequiredPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20083  00D5  0141               	movlb	1	; select bank1
 20084  00D6  01E9               	clrf	calcRequiredPower@n^(0+128)
 20085  00D7                     l8348:	
 20086                           
 20087                           ;system.c: 291:   d = 0.0254 * data.heater[n].lensDia;
 20088  00D7  303C               	movlw	60
 20089  00D8  0140               	movlb	0	; select bank0
 20090  00D9  00C4               	movwf	___flmul@b+3
 20091  00DA  30D0               	movlw	208
 20092  00DB  00C3               	movwf	___flmul@b+2
 20093  00DC  3013               	movlw	19
 20094  00DD  00C2               	movwf	___flmul@b+1
 20095  00DE  30A9               	movlw	169
 20096  00DF  00C1               	movwf	___flmul@b
 20097  00E0  0141               	movlb	1	; select bank1
 20098  00E1  0869               	movf	calcRequiredPower@n^(0+128),w
 20099  00E2  00AD               	movwf	??_calcRequiredPower^(0+128)
 20100  00E3  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 20101  00E4  082D               	movf	??_calcRequiredPower^(0+128),w
 20102  00E5  0140               	movlb	0	; select bank0
 20103  00E6  00AD               	movwf	___wmul@multiplier
 20104  00E7  0141               	movlb	1	; select bank1
 20105  00E8  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 20106  00E9  0140               	movlb	0	; select bank0
 20107  00EA  00AE               	movwf	___wmul@multiplier+1
 20108  00EB  301F               	movlw	31
 20109  00EC  00AF               	movwf	___wmul@multiplicand
 20110  00ED  3000               	movlw	0
 20111  00EE  00B0               	movwf	___wmul@multiplicand+1
 20112  00EF  31B3  2371  3180   	fcall	___wmul
 20113  00F2  3089               	movlw	137
 20114  00F3  0141               	movlb	1	; select bank1
 20115  00F4  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 20116  00F5  3027               	movlw	39
 20117  00F6  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 20118  00F7  0140               	movlb	0	; select bank0
 20119  00F8  082D               	movf	?___wmul,w
 20120  00F9  0141               	movlb	1	; select bank1
 20121  00FA  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 20122  00FB  0086               	movwf	6
 20123  00FC  0140               	movlb	0	; select bank0
 20124  00FD  082E               	movf	?___wmul+1,w
 20125  00FE  0141               	movlb	1	; select bank1
 20126  00FF  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 20127  0100  0087               	movwf	7
 20128  0101  3F40               	moviw [0]fsr1
 20129  0102  0140               	movlb	0	; select bank0
 20130  0103  00C5               	movwf	___flmul@a
 20131  0104  3F41               	moviw [1]fsr1
 20132  0105  00C6               	movwf	___flmul@a+1
 20133  0106  3F42               	moviw [2]fsr1
 20134  0107  00C7               	movwf	___flmul@a+2
 20135  0108  3F43               	moviw [3]fsr1
 20136  0109  00C8               	movwf	___flmul@a+3
 20137  010A  3185  2561  3180   	fcall	___flmul
 20138  010D  0140               	movlb	0	; select bank0
 20139  010E  0844               	movf	?___flmul+3,w
 20140  010F  0141               	movlb	1	; select bank1
 20141  0110  00D4               	movwf	(calcRequiredPower@d+3)^(0+128)
 20142  0111  0140               	movlb	0	; select bank0
 20143  0112  0843               	movf	?___flmul+2,w
 20144  0113  0141               	movlb	1	; select bank1
 20145  0114  00D3               	movwf	(calcRequiredPower@d+2)^(0+128)
 20146  0115  0140               	movlb	0	; select bank0
 20147  0116  0842               	movf	?___flmul+1,w
 20148  0117  0141               	movlb	1	; select bank1
 20149  0118  00D2               	movwf	(calcRequiredPower@d+1)^(0+128)
 20150  0119  0140               	movlb	0	; select bank0
 20151  011A  0841               	movf	?___flmul,w
 20152  011B  0141               	movlb	1	; select bank1
 20153  011C  00D1               	movwf	calcRequiredPower@d^(0+128)
 20154                           
 20155                           ;system.c: 292:   A = (3.14 * d * d) / 4;
 20156  011D  3040               	movlw	64
 20157  011E  0140               	movlb	0	; select bank0
 20158  011F  00C4               	movwf	___flmul@b+3
 20159  0120  3048               	movlw	72
 20160  0121  00C3               	movwf	___flmul@b+2
 20161  0122  30F5               	movlw	245
 20162  0123  00C2               	movwf	___flmul@b+1
 20163  0124  30C3               	movlw	195
 20164  0125  00C1               	movwf	___flmul@b
 20165  0126  0141               	movlb	1	; select bank1
 20166  0127  0854               	movf	(calcRequiredPower@d+3)^(0+128),w
 20167  0128  0140               	movlb	0	; select bank0
 20168  0129  00C8               	movwf	___flmul@a+3
 20169  012A  0141               	movlb	1	; select bank1
 20170  012B  0853               	movf	(calcRequiredPower@d+2)^(0+128),w
 20171  012C  0140               	movlb	0	; select bank0
 20172  012D  00C7               	movwf	___flmul@a+2
 20173  012E  0141               	movlb	1	; select bank1
 20174  012F  0852               	movf	(calcRequiredPower@d+1)^(0+128),w
 20175  0130  0140               	movlb	0	; select bank0
 20176  0131  00C6               	movwf	___flmul@a+1
 20177  0132  0141               	movlb	1	; select bank1
 20178  0133  0851               	movf	calcRequiredPower@d^(0+128),w
 20179  0134  0140               	movlb	0	; select bank0
 20180  0135  00C5               	movwf	___flmul@a
 20181  0136  3185  2561  3180   	fcall	___flmul
 20182  0139  0140               	movlb	0	; select bank0
 20183  013A  0844               	movf	?___flmul+3,w
 20184  013B  0141               	movlb	1	; select bank1
 20185  013C  00E0               	movwf	(_calcRequiredPower$2550+3)^(0+128)
 20186  013D  0140               	movlb	0	; select bank0
 20187  013E  0843               	movf	?___flmul+2,w
 20188  013F  0141               	movlb	1	; select bank1
 20189  0140  00DF               	movwf	(_calcRequiredPower$2550+2)^(0+128)
 20190  0141  0140               	movlb	0	; select bank0
 20191  0142  0842               	movf	?___flmul+1,w
 20192  0143  0141               	movlb	1	; select bank1
 20193  0144  00DE               	movwf	(_calcRequiredPower$2550+1)^(0+128)
 20194  0145  0140               	movlb	0	; select bank0
 20195  0146  0841               	movf	?___flmul,w
 20196  0147  0141               	movlb	1	; select bank1
 20197  0148  00DD               	movwf	_calcRequiredPower$2550^(0+128)
 20198                           
 20199                           ;system.c: 292:   A = (3.14 * d * d) / 4;
 20200  0149  3040               	movlw	64
 20201  014A  0140               	movlb	0	; select bank0
 20202  014B  00DE               	movwf	___fldiv@a+3
 20203  014C  3080               	movlw	128
 20204  014D  00DD               	movwf	___fldiv@a+2
 20205  014E  3000               	movlw	0
 20206  014F  00DC               	movwf	___fldiv@a+1
 20207  0150  3000               	movlw	0
 20208  0151  00DB               	movwf	___fldiv@a
 20209  0152  0141               	movlb	1	; select bank1
 20210  0153  0854               	movf	(calcRequiredPower@d+3)^(0+128),w
 20211  0154  0140               	movlb	0	; select bank0
 20212  0155  00C4               	movwf	___flmul@b+3
 20213  0156  0141               	movlb	1	; select bank1
 20214  0157  0853               	movf	(calcRequiredPower@d+2)^(0+128),w
 20215  0158  0140               	movlb	0	; select bank0
 20216  0159  00C3               	movwf	___flmul@b+2
 20217  015A  0141               	movlb	1	; select bank1
 20218  015B  0852               	movf	(calcRequiredPower@d+1)^(0+128),w
 20219  015C  0140               	movlb	0	; select bank0
 20220  015D  00C2               	movwf	___flmul@b+1
 20221  015E  0141               	movlb	1	; select bank1
 20222  015F  0851               	movf	calcRequiredPower@d^(0+128),w
 20223  0160  0140               	movlb	0	; select bank0
 20224  0161  00C1               	movwf	___flmul@b
 20225  0162  0141               	movlb	1	; select bank1
 20226  0163  0860               	movf	(_calcRequiredPower$2550+3)^(0+128),w
 20227  0164  0140               	movlb	0	; select bank0
 20228  0165  00C8               	movwf	___flmul@a+3
 20229  0166  0141               	movlb	1	; select bank1
 20230  0167  085F               	movf	(_calcRequiredPower$2550+2)^(0+128),w
 20231  0168  0140               	movlb	0	; select bank0
 20232  0169  00C7               	movwf	___flmul@a+2
 20233  016A  0141               	movlb	1	; select bank1
 20234  016B  085E               	movf	(_calcRequiredPower$2550+1)^(0+128),w
 20235  016C  0140               	movlb	0	; select bank0
 20236  016D  00C6               	movwf	___flmul@a+1
 20237  016E  0141               	movlb	1	; select bank1
 20238  016F  085D               	movf	_calcRequiredPower$2550^(0+128),w
 20239  0170  0140               	movlb	0	; select bank0
 20240  0171  00C5               	movwf	___flmul@a
 20241  0172  3185  2561  3180   	fcall	___flmul
 20242  0175  0140               	movlb	0	; select bank0
 20243  0176  0844               	movf	?___flmul+3,w
 20244  0177  00E2               	movwf	___fldiv@b+3
 20245  0178  0843               	movf	?___flmul+2,w
 20246  0179  00E1               	movwf	___fldiv@b+2
 20247  017A  0842               	movf	?___flmul+1,w
 20248  017B  00E0               	movwf	___fldiv@b+1
 20249  017C  0841               	movf	?___flmul,w
 20250  017D  00DF               	movwf	___fldiv@b
 20251  017E  319E  2628  3180   	fcall	___fldiv
 20252  0181  0140               	movlb	0	; select bank0
 20253  0182  085E               	movf	?___fldiv+3,w
 20254  0183  0141               	movlb	1	; select bank1
 20255  0184  00DC               	movwf	(calcRequiredPower@A+3)^(0+128)
 20256  0185  0140               	movlb	0	; select bank0
 20257  0186  085D               	movf	?___fldiv+2,w
 20258  0187  0141               	movlb	1	; select bank1
 20259  0188  00DB               	movwf	(calcRequiredPower@A+2)^(0+128)
 20260  0189  0140               	movlb	0	; select bank0
 20261  018A  085C               	movf	?___fldiv+1,w
 20262  018B  0141               	movlb	1	; select bank1
 20263  018C  00DA               	movwf	(calcRequiredPower@A+1)^(0+128)
 20264  018D  0140               	movlb	0	; select bank0
 20265  018E  085B               	movf	?___fldiv,w
 20266  018F  0141               	movlb	1	; select bank1
 20267  0190  00D9               	movwf	calcRequiredPower@A^(0+128)
 20268                           
 20269                           ;system.c: 294:   T1 = data.dewPointC + data.dpOffset + 273.15;
 20270  0191  304A               	movlw	74
 20271  0192  0086               	movwf	6
 20272  0193  3027               	movlw	39
 20273  0194  0087               	movwf	7
 20274  0195  315D               	addfsr 1,29
 20275  0196  3F40               	moviw [0]fsr1
 20276  0197  0140               	movlb	0	; select bank0
 20277  0198  00DB               	movwf	___fladd@b
 20278  0199  3F41               	moviw [1]fsr1
 20279  019A  00DC               	movwf	___fladd@b+1
 20280  019B  3F42               	moviw [2]fsr1
 20281  019C  00DD               	movwf	___fladd@b+2
 20282  019D  3F43               	moviw [3]fsr1
 20283  019E  00DE               	movwf	___fladd@b+3
 20284  019F  304A               	movlw	74
 20285  01A0  0086               	movwf	6
 20286  01A1  3027               	movlw	39
 20287  01A2  0087               	movwf	7
 20288  01A3  3148               	addfsr 1,8
 20289  01A4  3F40               	moviw [0]fsr1
 20290  01A5  00DF               	movwf	___fladd@a
 20291  01A6  3F41               	moviw [1]fsr1
 20292  01A7  00E0               	movwf	___fladd@a+1
 20293  01A8  3F42               	moviw [2]fsr1
 20294  01A9  00E1               	movwf	___fladd@a+2
 20295  01AA  3F43               	moviw [3]fsr1
 20296  01AB  00E2               	movwf	___fladd@a+3
 20297  01AC  3192  2232  3180   	fcall	___fladd
 20298  01AF  0140               	movlb	0	; select bank0
 20299  01B0  085E               	movf	?___fladd+3,w
 20300  01B1  0141               	movlb	1	; select bank1
 20301  01B2  00BC               	movwf	(_calcRequiredPower$2551+3)^(0+128)
 20302  01B3  0140               	movlb	0	; select bank0
 20303  01B4  085D               	movf	?___fladd+2,w
 20304  01B5  0141               	movlb	1	; select bank1
 20305  01B6  00BB               	movwf	(_calcRequiredPower$2551+2)^(0+128)
 20306  01B7  0140               	movlb	0	; select bank0
 20307  01B8  085C               	movf	?___fladd+1,w
 20308  01B9  0141               	movlb	1	; select bank1
 20309  01BA  00BA               	movwf	(_calcRequiredPower$2551+1)^(0+128)
 20310  01BB  0140               	movlb	0	; select bank0
 20311  01BC  085B               	movf	?___fladd,w
 20312  01BD  0141               	movlb	1	; select bank1
 20313  01BE  00B9               	movwf	_calcRequiredPower$2551^(0+128)
 20314                           
 20315                           ;system.c: 294:   T1 = data.dewPointC + data.dpOffset + 273.15;
 20316  01BF  3043               	movlw	67
 20317  01C0  0140               	movlb	0	; select bank0
 20318  01C1  00DE               	movwf	___fladd@b+3
 20319  01C2  3088               	movlw	136
 20320  01C3  00DD               	movwf	___fladd@b+2
 20321  01C4  3093               	movlw	147
 20322  01C5  00DC               	movwf	___fladd@b+1
 20323  01C6  3033               	movlw	51
 20324  01C7  00DB               	movwf	___fladd@b
 20325  01C8  0141               	movlb	1	; select bank1
 20326  01C9  083C               	movf	(_calcRequiredPower$2551+3)^(0+128),w
 20327  01CA  0140               	movlb	0	; select bank0
 20328  01CB  00E2               	movwf	___fladd@a+3
 20329  01CC  0141               	movlb	1	; select bank1
 20330  01CD  083B               	movf	(_calcRequiredPower$2551+2)^(0+128),w
 20331  01CE  0140               	movlb	0	; select bank0
 20332  01CF  00E1               	movwf	___fladd@a+2
 20333  01D0  0141               	movlb	1	; select bank1
 20334  01D1  083A               	movf	(_calcRequiredPower$2551+1)^(0+128),w
 20335  01D2  0140               	movlb	0	; select bank0
 20336  01D3  00E0               	movwf	___fladd@a+1
 20337  01D4  0141               	movlb	1	; select bank1
 20338  01D5  0839               	movf	_calcRequiredPower$2551^(0+128),w
 20339  01D6  0140               	movlb	0	; select bank0
 20340  01D7  00DF               	movwf	___fladd@a
 20341  01D8  3192  2232  3180   	fcall	___fladd
 20342  01DB  0140               	movlb	0	; select bank0
 20343  01DC  085E               	movf	?___fladd+3,w
 20344  01DD  0141               	movlb	1	; select bank1
 20345  01DE  00E4               	movwf	(calcRequiredPower@T1+3)^(0+128)
 20346  01DF  0140               	movlb	0	; select bank0
 20347  01E0  085D               	movf	?___fladd+2,w
 20348  01E1  0141               	movlb	1	; select bank1
 20349  01E2  00E3               	movwf	(calcRequiredPower@T1+2)^(0+128)
 20350  01E3  0140               	movlb	0	; select bank0
 20351  01E4  085C               	movf	?___fladd+1,w
 20352  01E5  0141               	movlb	1	; select bank1
 20353  01E6  00E2               	movwf	(calcRequiredPower@T1+1)^(0+128)
 20354  01E7  0140               	movlb	0	; select bank0
 20355  01E8  085B               	movf	?___fladd,w
 20356  01E9  0141               	movlb	1	; select bank1
 20357  01EA  00E1               	movwf	calcRequiredPower@T1^(0+128)
 20358                           
 20359                           ;system.c: 295:   T2 = data.skyTemp + 273.15;
 20360  01EB  3043               	movlw	67
 20361  01EC  0140               	movlb	0	; select bank0
 20362  01ED  00DE               	movwf	___fladd@b+3
 20363  01EE  3088               	movlw	136
 20364  01EF  00DD               	movwf	___fladd@b+2
 20365  01F0  3093               	movlw	147
 20366  01F1  00DC               	movwf	___fladd@b+1
 20367  01F2  3033               	movlw	51
 20368  01F3  00DB               	movwf	___fladd@b
 20369  01F4  306B               	movlw	107
 20370  01F5  0086               	movwf	6
 20371  01F6  3027               	movlw	39
 20372  01F7  0087               	movwf	7
 20373  01F8  3F40               	moviw [0]fsr1
 20374  01F9  00DF               	movwf	___fladd@a
 20375  01FA  3F41               	moviw [1]fsr1
 20376  01FB  00E0               	movwf	___fladd@a+1
 20377  01FC  3F42               	moviw [2]fsr1
 20378  01FD  00E1               	movwf	___fladd@a+2
 20379  01FE  3F43               	moviw [3]fsr1
 20380  01FF  00E2               	movwf	___fladd@a+3
 20381  0200  3192  2232  3180   	fcall	___fladd
 20382  0203  0140               	movlb	0	; select bank0
 20383  0204  085E               	movf	?___fladd+3,w
 20384  0205  0141               	movlb	1	; select bank1
 20385  0206  00E8               	movwf	(calcRequiredPower@T2+3)^(0+128)
 20386  0207  0140               	movlb	0	; select bank0
 20387  0208  085D               	movf	?___fladd+2,w
 20388  0209  0141               	movlb	1	; select bank1
 20389  020A  00E7               	movwf	(calcRequiredPower@T2+2)^(0+128)
 20390  020B  0140               	movlb	0	; select bank0
 20391  020C  085C               	movf	?___fladd+1,w
 20392  020D  0141               	movlb	1	; select bank1
 20393  020E  00E6               	movwf	(calcRequiredPower@T2+1)^(0+128)
 20394  020F  0140               	movlb	0	; select bank0
 20395  0210  085B               	movf	?___fladd,w
 20396  0211  0141               	movlb	1	; select bank1
 20397  0212  00E5               	movwf	calcRequiredPower@T2^(0+128)
 20398                           
 20399                           ;system.c: 297:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 20400  0213  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 20401  0214  0140               	movlb	0	; select bank0
 20402  0215  00C4               	movwf	___flmul@b+3
 20403  0216  0141               	movlb	1	; select bank1
 20404  0217  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 20405  0218  0140               	movlb	0	; select bank0
 20406  0219  00C3               	movwf	___flmul@b+2
 20407  021A  0141               	movlb	1	; select bank1
 20408  021B  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 20409  021C  0140               	movlb	0	; select bank0
 20410  021D  00C2               	movwf	___flmul@b+1
 20411  021E  0141               	movlb	1	; select bank1
 20412  021F  0865               	movf	calcRequiredPower@T2^(0+128),w
 20413  0220  0140               	movlb	0	; select bank0
 20414  0221  00C1               	movwf	___flmul@b
 20415  0222  0141               	movlb	1	; select bank1
 20416  0223  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 20417  0224  0140               	movlb	0	; select bank0
 20418  0225  00C8               	movwf	___flmul@a+3
 20419  0226  0141               	movlb	1	; select bank1
 20420  0227  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 20421  0228  0140               	movlb	0	; select bank0
 20422  0229  00C7               	movwf	___flmul@a+2
 20423  022A  0141               	movlb	1	; select bank1
 20424  022B  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 20425  022C  0140               	movlb	0	; select bank0
 20426  022D  00C6               	movwf	___flmul@a+1
 20427  022E  0141               	movlb	1	; select bank1
 20428  022F  0865               	movf	calcRequiredPower@T2^(0+128),w
 20429  0230  0140               	movlb	0	; select bank0
 20430  0231  00C5               	movwf	___flmul@a
 20431  0232  3185  2561  3180   	fcall	___flmul
 20432  0235  0140               	movlb	0	; select bank0
 20433  0236  0844               	movf	?___flmul+3,w
 20434  0237  0141               	movlb	1	; select bank1
 20435  0238  00E0               	movwf	(_calcRequiredPower$2550+3)^(0+128)
 20436  0239  0140               	movlb	0	; select bank0
 20437  023A  0843               	movf	?___flmul+2,w
 20438  023B  0141               	movlb	1	; select bank1
 20439  023C  00DF               	movwf	(_calcRequiredPower$2550+2)^(0+128)
 20440  023D  0140               	movlb	0	; select bank0
 20441  023E  0842               	movf	?___flmul+1,w
 20442  023F  0141               	movlb	1	; select bank1
 20443  0240  00DE               	movwf	(_calcRequiredPower$2550+1)^(0+128)
 20444  0241  0140               	movlb	0	; select bank0
 20445  0242  0841               	movf	?___flmul,w
 20446  0243  0141               	movlb	1	; select bank1
 20447  0244  00DD               	movwf	_calcRequiredPower$2550^(0+128)
 20448                           
 20449                           ;system.c: 297:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 20450  0245  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 20451  0246  0140               	movlb	0	; select bank0
 20452  0247  00C4               	movwf	___flmul@b+3
 20453  0248  0141               	movlb	1	; select bank1
 20454  0249  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 20455  024A  0140               	movlb	0	; select bank0
 20456  024B  00C3               	movwf	___flmul@b+2
 20457  024C  0141               	movlb	1	; select bank1
 20458  024D  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 20459  024E  0140               	movlb	0	; select bank0
 20460  024F  00C2               	movwf	___flmul@b+1
 20461  0250  0141               	movlb	1	; select bank1
 20462  0251  0865               	movf	calcRequiredPower@T2^(0+128),w
 20463  0252  0140               	movlb	0	; select bank0
 20464  0253  00C1               	movwf	___flmul@b
 20465  0254  0141               	movlb	1	; select bank1
 20466  0255  0860               	movf	(_calcRequiredPower$2550+3)^(0+128),w
 20467  0256  0140               	movlb	0	; select bank0
 20468  0257  00C8               	movwf	___flmul@a+3
 20469  0258  0141               	movlb	1	; select bank1
 20470  0259  085F               	movf	(_calcRequiredPower$2550+2)^(0+128),w
 20471  025A  0140               	movlb	0	; select bank0
 20472  025B  00C7               	movwf	___flmul@a+2
 20473  025C  0141               	movlb	1	; select bank1
 20474  025D  085E               	movf	(_calcRequiredPower$2550+1)^(0+128),w
 20475  025E  0140               	movlb	0	; select bank0
 20476  025F  00C6               	movwf	___flmul@a+1
 20477  0260  0141               	movlb	1	; select bank1
 20478  0261  085D               	movf	_calcRequiredPower$2550^(0+128),w
 20479  0262  0140               	movlb	0	; select bank0
 20480  0263  00C5               	movwf	___flmul@a
 20481  0264  3185  2561  3180   	fcall	___flmul
 20482  0267  0140               	movlb	0	; select bank0
 20483  0268  0844               	movf	?___flmul+3,w
 20484  0269  0141               	movlb	1	; select bank1
 20485  026A  00C0               	movwf	(_calcRequiredPower$2552+3)^(0+128)
 20486  026B  0140               	movlb	0	; select bank0
 20487  026C  0843               	movf	?___flmul+2,w
 20488  026D  0141               	movlb	1	; select bank1
 20489  026E  00BF               	movwf	(_calcRequiredPower$2552+2)^(0+128)
 20490  026F  0140               	movlb	0	; select bank0
 20491  0270  0842               	movf	?___flmul+1,w
 20492  0271  0141               	movlb	1	; select bank1
 20493  0272  00BE               	movwf	(_calcRequiredPower$2552+1)^(0+128)
 20494  0273  0140               	movlb	0	; select bank0
 20495  0274  0841               	movf	?___flmul,w
 20496  0275  0141               	movlb	1	; select bank1
 20497  0276  00BD               	movwf	_calcRequiredPower$2552^(0+128)
 20498                           
 20499                           ;system.c: 297:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 20500  0277  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 20501  0278  0140               	movlb	0	; select bank0
 20502  0279  00C4               	movwf	___flmul@b+3
 20503  027A  0141               	movlb	1	; select bank1
 20504  027B  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 20505  027C  0140               	movlb	0	; select bank0
 20506  027D  00C3               	movwf	___flmul@b+2
 20507  027E  0141               	movlb	1	; select bank1
 20508  027F  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 20509  0280  0140               	movlb	0	; select bank0
 20510  0281  00C2               	movwf	___flmul@b+1
 20511  0282  0141               	movlb	1	; select bank1
 20512  0283  0861               	movf	calcRequiredPower@T1^(0+128),w
 20513  0284  0140               	movlb	0	; select bank0
 20514  0285  00C1               	movwf	___flmul@b
 20515  0286  0141               	movlb	1	; select bank1
 20516  0287  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 20517  0288  0140               	movlb	0	; select bank0
 20518  0289  00C8               	movwf	___flmul@a+3
 20519  028A  0141               	movlb	1	; select bank1
 20520  028B  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 20521  028C  0140               	movlb	0	; select bank0
 20522  028D  00C7               	movwf	___flmul@a+2
 20523  028E  0141               	movlb	1	; select bank1
 20524  028F  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 20525  0290  0140               	movlb	0	; select bank0
 20526  0291  00C6               	movwf	___flmul@a+1
 20527  0292  0141               	movlb	1	; select bank1
 20528  0293  0861               	movf	calcRequiredPower@T1^(0+128),w
 20529  0294  0140               	movlb	0	; select bank0
 20530  0295  00C5               	movwf	___flmul@a
 20531  0296  3185  2561  3180   	fcall	___flmul
 20532  0299  0140               	movlb	0	; select bank0
 20533  029A  0844               	movf	?___flmul+3,w
 20534  029B  0141               	movlb	1	; select bank1
 20535  029C  00C4               	movwf	(_calcRequiredPower$2553+3)^(0+128)
 20536  029D  0140               	movlb	0	; select bank0
 20537  029E  0843               	movf	?___flmul+2,w
 20538  029F  0141               	movlb	1	; select bank1
 20539  02A0  00C3               	movwf	(_calcRequiredPower$2553+2)^(0+128)
 20540  02A1  0140               	movlb	0	; select bank0
 20541  02A2  0842               	movf	?___flmul+1,w
 20542  02A3  0141               	movlb	1	; select bank1
 20543  02A4  00C2               	movwf	(_calcRequiredPower$2553+1)^(0+128)
 20544  02A5  0140               	movlb	0	; select bank0
 20545  02A6  0841               	movf	?___flmul,w
 20546  02A7  0141               	movlb	1	; select bank1
 20547  02A8  00C1               	movwf	_calcRequiredPower$2553^(0+128)
 20548                           
 20549                           ;system.c: 297:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 20550  02A9  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 20551  02AA  0140               	movlb	0	; select bank0
 20552  02AB  00C4               	movwf	___flmul@b+3
 20553  02AC  0141               	movlb	1	; select bank1
 20554  02AD  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 20555  02AE  0140               	movlb	0	; select bank0
 20556  02AF  00C3               	movwf	___flmul@b+2
 20557  02B0  0141               	movlb	1	; select bank1
 20558  02B1  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 20559  02B2  0140               	movlb	0	; select bank0
 20560  02B3  00C2               	movwf	___flmul@b+1
 20561  02B4  0141               	movlb	1	; select bank1
 20562  02B5  0861               	movf	calcRequiredPower@T1^(0+128),w
 20563  02B6  0140               	movlb	0	; select bank0
 20564  02B7  00C1               	movwf	___flmul@b
 20565  02B8  0141               	movlb	1	; select bank1
 20566  02B9  0844               	movf	(_calcRequiredPower$2553+3)^(0+128),w
 20567  02BA  0140               	movlb	0	; select bank0
 20568  02BB  00C8               	movwf	___flmul@a+3
 20569  02BC  0141               	movlb	1	; select bank1
 20570  02BD  0843               	movf	(_calcRequiredPower$2553+2)^(0+128),w
 20571  02BE  0140               	movlb	0	; select bank0
 20572  02BF  00C7               	movwf	___flmul@a+2
 20573  02C0  0141               	movlb	1	; select bank1
 20574  02C1  0842               	movf	(_calcRequiredPower$2553+1)^(0+128),w
 20575  02C2  0140               	movlb	0	; select bank0
 20576  02C3  00C6               	movwf	___flmul@a+1
 20577  02C4  0141               	movlb	1	; select bank1
 20578  02C5  0841               	movf	_calcRequiredPower$2553^(0+128),w
 20579  02C6  0140               	movlb	0	; select bank0
 20580  02C7  00C5               	movwf	___flmul@a
 20581  02C8  3185  2561  3180   	fcall	___flmul
 20582  02CB  0140               	movlb	0	; select bank0
 20583  02CC  0844               	movf	?___flmul+3,w
 20584  02CD  0141               	movlb	1	; select bank1
 20585  02CE  00C8               	movwf	(_calcRequiredPower$2554+3)^(0+128)
 20586  02CF  0140               	movlb	0	; select bank0
 20587  02D0  0843               	movf	?___flmul+2,w
 20588  02D1  0141               	movlb	1	; select bank1
 20589  02D2  00C7               	movwf	(_calcRequiredPower$2554+2)^(0+128)
 20590  02D3  0140               	movlb	0	; select bank0
 20591  02D4  0842               	movf	?___flmul+1,w
 20592  02D5  0141               	movlb	1	; select bank1
 20593  02D6  00C6               	movwf	(_calcRequiredPower$2554+1)^(0+128)
 20594  02D7  0140               	movlb	0	; select bank0
 20595  02D8  0841               	movf	?___flmul,w
 20596  02D9  0141               	movlb	1	; select bank1
 20597  02DA  00C5               	movwf	_calcRequiredPower$2554^(0+128)
 20598                           
 20599                           ;system.c: 297:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 20600  02DB  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 20601  02DC  0140               	movlb	0	; select bank0
 20602  02DD  00C4               	movwf	___flmul@b+3
 20603  02DE  0141               	movlb	1	; select bank1
 20604  02DF  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 20605  02E0  0140               	movlb	0	; select bank0
 20606  02E1  00C3               	movwf	___flmul@b+2
 20607  02E2  0141               	movlb	1	; select bank1
 20608  02E3  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 20609  02E4  0140               	movlb	0	; select bank0
 20610  02E5  00C2               	movwf	___flmul@b+1
 20611  02E6  0141               	movlb	1	; select bank1
 20612  02E7  0865               	movf	calcRequiredPower@T2^(0+128),w
 20613  02E8  0140               	movlb	0	; select bank0
 20614  02E9  00C1               	movwf	___flmul@b
 20615  02EA  0141               	movlb	1	; select bank1
 20616  02EB  0840               	movf	(_calcRequiredPower$2552+3)^(0+128),w
 20617  02EC  0140               	movlb	0	; select bank0
 20618  02ED  00C8               	movwf	___flmul@a+3
 20619  02EE  0141               	movlb	1	; select bank1
 20620  02EF  083F               	movf	(_calcRequiredPower$2552+2)^(0+128),w
 20621  02F0  0140               	movlb	0	; select bank0
 20622  02F1  00C7               	movwf	___flmul@a+2
 20623  02F2  0141               	movlb	1	; select bank1
 20624  02F3  083E               	movf	(_calcRequiredPower$2552+1)^(0+128),w
 20625  02F4  0140               	movlb	0	; select bank0
 20626  02F5  00C6               	movwf	___flmul@a+1
 20627  02F6  0141               	movlb	1	; select bank1
 20628  02F7  083D               	movf	_calcRequiredPower$2552^(0+128),w
 20629  02F8  0140               	movlb	0	; select bank0
 20630  02F9  00C5               	movwf	___flmul@a
 20631  02FA  3185  2561  3180   	fcall	___flmul
 20632  02FD  0140               	movlb	0	; select bank0
 20633  02FE  0844               	movf	?___flmul+3,w
 20634  02FF  0141               	movlb	1	; select bank1
 20635  0300  00A3               	movwf	(___flsub@a+3)^(0+128)
 20636  0301  0140               	movlb	0	; select bank0
 20637  0302  0843               	movf	?___flmul+2,w
 20638  0303  0141               	movlb	1	; select bank1
 20639  0304  00A2               	movwf	(___flsub@a+2)^(0+128)
 20640  0305  0140               	movlb	0	; select bank0
 20641  0306  0842               	movf	?___flmul+1,w
 20642  0307  0141               	movlb	1	; select bank1
 20643  0308  00A1               	movwf	(___flsub@a+1)^(0+128)
 20644  0309  0140               	movlb	0	; select bank0
 20645  030A  0841               	movf	?___flmul,w
 20646  030B  0141               	movlb	1	; select bank1
 20647  030C  00A0               	movwf	___flsub@a^(0+128)
 20648  030D  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 20649  030E  0140               	movlb	0	; select bank0
 20650  030F  00C4               	movwf	___flmul@b+3
 20651  0310  0141               	movlb	1	; select bank1
 20652  0311  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 20653  0312  0140               	movlb	0	; select bank0
 20654  0313  00C3               	movwf	___flmul@b+2
 20655  0314  0141               	movlb	1	; select bank1
 20656  0315  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 20657  0316  0140               	movlb	0	; select bank0
 20658  0317  00C2               	movwf	___flmul@b+1
 20659  0318  0141               	movlb	1	; select bank1
 20660  0319  0861               	movf	calcRequiredPower@T1^(0+128),w
 20661  031A  0140               	movlb	0	; select bank0
 20662  031B  00C1               	movwf	___flmul@b
 20663  031C  0141               	movlb	1	; select bank1
 20664  031D  0848               	movf	(_calcRequiredPower$2554+3)^(0+128),w
 20665  031E  0140               	movlb	0	; select bank0
 20666  031F  00C8               	movwf	___flmul@a+3
 20667  0320  0141               	movlb	1	; select bank1
 20668  0321  0847               	movf	(_calcRequiredPower$2554+2)^(0+128),w
 20669  0322  0140               	movlb	0	; select bank0
 20670  0323  00C7               	movwf	___flmul@a+2
 20671  0324  0141               	movlb	1	; select bank1
 20672  0325  0846               	movf	(_calcRequiredPower$2554+1)^(0+128),w
 20673  0326  0140               	movlb	0	; select bank0
 20674  0327  00C6               	movwf	___flmul@a+1
 20675  0328  0141               	movlb	1	; select bank1
 20676  0329  0845               	movf	_calcRequiredPower$2554^(0+128),w
 20677  032A  0140               	movlb	0	; select bank0
 20678  032B  00C5               	movwf	___flmul@a
 20679  032C  3185  2561  3180   	fcall	___flmul
 20680  032F  0140               	movlb	0	; select bank0
 20681  0330  0844               	movf	?___flmul+3,w
 20682  0331  0141               	movlb	1	; select bank1
 20683  0332  00A7               	movwf	(___flsub@b+3)^(0+128)
 20684  0333  0140               	movlb	0	; select bank0
 20685  0334  0843               	movf	?___flmul+2,w
 20686  0335  0141               	movlb	1	; select bank1
 20687  0336  00A6               	movwf	(___flsub@b+2)^(0+128)
 20688  0337  0140               	movlb	0	; select bank0
 20689  0338  0842               	movf	?___flmul+1,w
 20690  0339  0141               	movlb	1	; select bank1
 20691  033A  00A5               	movwf	(___flsub@b+1)^(0+128)
 20692  033B  0140               	movlb	0	; select bank0
 20693  033C  0841               	movf	?___flmul,w
 20694  033D  0141               	movlb	1	; select bank1
 20695  033E  00A4               	movwf	___flsub@b^(0+128)
 20696  033F  31B4  24FB  3180   	fcall	___flsub
 20697  0342  0141               	movlb	1	; select bank1
 20698  0343  0823               	movf	(?___flsub+3)^(0+128),w
 20699  0344  00CC               	movwf	(_calcRequiredPower$2555+3)^(0+128)
 20700  0345  0822               	movf	(?___flsub+2)^(0+128),w
 20701  0346  00CB               	movwf	(_calcRequiredPower$2555+2)^(0+128)
 20702  0347  0821               	movf	(?___flsub+1)^(0+128),w
 20703  0348  00CA               	movwf	(_calcRequiredPower$2555+1)^(0+128)
 20704  0349  0820               	movf	?___flsub^(0+128),w
 20705  034A  00C9               	movwf	_calcRequiredPower$2555^(0+128)
 20706                           
 20707                           ;system.c: 297:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 20708  034B  3033               	movlw	51
 20709  034C  0140               	movlb	0	; select bank0
 20710  034D  00C4               	movwf	___flmul@b+3
 20711  034E  3067               	movlw	103
 20712  034F  00C3               	movwf	___flmul@b+2
 20713  0350  3059               	movlw	89
 20714  0351  00C2               	movwf	___flmul@b+1
 20715  0352  3032               	movlw	50
 20716  0353  00C1               	movwf	___flmul@b
 20717  0354  0141               	movlb	1	; select bank1
 20718  0355  085C               	movf	(calcRequiredPower@A+3)^(0+128),w
 20719  0356  0140               	movlb	0	; select bank0
 20720  0357  00C8               	movwf	___flmul@a+3
 20721  0358  0141               	movlb	1	; select bank1
 20722  0359  085B               	movf	(calcRequiredPower@A+2)^(0+128),w
 20723  035A  0140               	movlb	0	; select bank0
 20724  035B  00C7               	movwf	___flmul@a+2
 20725  035C  0141               	movlb	1	; select bank1
 20726  035D  085A               	movf	(calcRequiredPower@A+1)^(0+128),w
 20727  035E  0140               	movlb	0	; select bank0
 20728  035F  00C6               	movwf	___flmul@a+1
 20729  0360  0141               	movlb	1	; select bank1
 20730  0361  0859               	movf	calcRequiredPower@A^(0+128),w
 20731  0362  0140               	movlb	0	; select bank0
 20732  0363  00C5               	movwf	___flmul@a
 20733  0364  3185  2561  3180   	fcall	___flmul
 20734  0367  0140               	movlb	0	; select bank0
 20735  0368  0844               	movf	?___flmul+3,w
 20736  0369  0141               	movlb	1	; select bank1
 20737  036A  00D0               	movwf	(_calcRequiredPower$2556+3)^(0+128)
 20738  036B  0140               	movlb	0	; select bank0
 20739  036C  0843               	movf	?___flmul+2,w
 20740  036D  0141               	movlb	1	; select bank1
 20741  036E  00CF               	movwf	(_calcRequiredPower$2556+2)^(0+128)
 20742  036F  0140               	movlb	0	; select bank0
 20743  0370  0842               	movf	?___flmul+1,w
 20744  0371  0141               	movlb	1	; select bank1
 20745  0372  00CE               	movwf	(_calcRequiredPower$2556+1)^(0+128)
 20746  0373  0140               	movlb	0	; select bank0
 20747  0374  0841               	movf	?___flmul,w
 20748  0375  0141               	movlb	1	; select bank1
 20749  0376  00CD               	movwf	_calcRequiredPower$2556^(0+128)
 20750                           
 20751                           ;system.c: 297:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 20752  0377  084C               	movf	(_calcRequiredPower$2555+3)^(0+128),w
 20753  0378  0140               	movlb	0	; select bank0
 20754  0379  00C4               	movwf	___flmul@b+3
 20755  037A  0141               	movlb	1	; select bank1
 20756  037B  084B               	movf	(_calcRequiredPower$2555+2)^(0+128),w
 20757  037C  0140               	movlb	0	; select bank0
 20758  037D  00C3               	movwf	___flmul@b+2
 20759  037E  0141               	movlb	1	; select bank1
 20760  037F  084A               	movf	(_calcRequiredPower$2555+1)^(0+128),w
 20761  0380  0140               	movlb	0	; select bank0
 20762  0381  00C2               	movwf	___flmul@b+1
 20763  0382  0141               	movlb	1	; select bank1
 20764  0383  0849               	movf	_calcRequiredPower$2555^(0+128),w
 20765  0384  0140               	movlb	0	; select bank0
 20766  0385  00C1               	movwf	___flmul@b
 20767  0386  0141               	movlb	1	; select bank1
 20768  0387  0850               	movf	(_calcRequiredPower$2556+3)^(0+128),w
 20769  0388  0140               	movlb	0	; select bank0
 20770  0389  00C8               	movwf	___flmul@a+3
 20771  038A  0141               	movlb	1	; select bank1
 20772  038B  084F               	movf	(_calcRequiredPower$2556+2)^(0+128),w
 20773  038C  0140               	movlb	0	; select bank0
 20774  038D  00C7               	movwf	___flmul@a+2
 20775  038E  0141               	movlb	1	; select bank1
 20776  038F  084E               	movf	(_calcRequiredPower$2556+1)^(0+128),w
 20777  0390  0140               	movlb	0	; select bank0
 20778  0391  00C6               	movwf	___flmul@a+1
 20779  0392  0141               	movlb	1	; select bank1
 20780  0393  084D               	movf	_calcRequiredPower$2556^(0+128),w
 20781  0394  0140               	movlb	0	; select bank0
 20782  0395  00C5               	movwf	___flmul@a
 20783  0396  3185  2561  3180   	fcall	___flmul
 20784  0399  0140               	movlb	0	; select bank0
 20785  039A  0844               	movf	?___flmul+3,w
 20786  039B  0141               	movlb	1	; select bank1
 20787  039C  00D8               	movwf	(calcRequiredPower@phi+3)^(0+128)
 20788  039D  0140               	movlb	0	; select bank0
 20789  039E  0843               	movf	?___flmul+2,w
 20790  039F  0141               	movlb	1	; select bank1
 20791  03A0  00D7               	movwf	(calcRequiredPower@phi+2)^(0+128)
 20792  03A1  0140               	movlb	0	; select bank0
 20793  03A2  0842               	movf	?___flmul+1,w
 20794  03A3  0141               	movlb	1	; select bank1
 20795  03A4  00D6               	movwf	(calcRequiredPower@phi+1)^(0+128)
 20796  03A5  0140               	movlb	0	; select bank0
 20797  03A6  0841               	movf	?___flmul,w
 20798  03A7  0141               	movlb	1	; select bank1
 20799  03A8  00D5               	movwf	calcRequiredPower@phi^(0+128)
 20800                           
 20801                           ;system.c: 299:   data.heater[n].Preq = phi * data.fudgeFactor;
 20802  03A9  0869               	movf	calcRequiredPower@n^(0+128),w
 20803  03AA  00AD               	movwf	??_calcRequiredPower^(0+128)
 20804  03AB  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 20805  03AC  082D               	movf	??_calcRequiredPower^(0+128),w
 20806  03AD  0140               	movlb	0	; select bank0
 20807  03AE  00AD               	movwf	___wmul@multiplier
 20808  03AF  0141               	movlb	1	; select bank1
 20809  03B0  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 20810  03B1  0140               	movlb	0	; select bank0
 20811  03B2  00AE               	movwf	___wmul@multiplier+1
 20812  03B3  301F               	movlw	31
 20813  03B4  00AF               	movwf	___wmul@multiplicand
 20814  03B5  3000               	movlw	0
 20815  03B6  00B0               	movwf	___wmul@multiplicand+1
 20816  03B7  31B3  2371  3180   	fcall	___wmul
 20817  03BA  307C               	movlw	124
 20818  03BB  0141               	movlb	1	; select bank1
 20819  03BC  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 20820  03BD  3027               	movlw	39
 20821  03BE  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 20822  03BF  0140               	movlb	0	; select bank0
 20823  03C0  082D               	movf	?___wmul,w
 20824  03C1  0141               	movlb	1	; select bank1
 20825  03C2  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 20826  03C3  0086               	movwf	6
 20827  03C4  0140               	movlb	0	; select bank0
 20828  03C5  082E               	movf	?___wmul+1,w
 20829  03C6  0141               	movlb	1	; select bank1
 20830  03C7  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 20831  03C8  0087               	movwf	7
 20832  03C9  0858               	movf	(calcRequiredPower@phi+3)^(0+128),w
 20833  03CA  0140               	movlb	0	; select bank0
 20834  03CB  00C4               	movwf	___flmul@b+3
 20835  03CC  0141               	movlb	1	; select bank1
 20836  03CD  0857               	movf	(calcRequiredPower@phi+2)^(0+128),w
 20837  03CE  0140               	movlb	0	; select bank0
 20838  03CF  00C3               	movwf	___flmul@b+2
 20839  03D0  0141               	movlb	1	; select bank1
 20840  03D1  0856               	movf	(calcRequiredPower@phi+1)^(0+128),w
 20841  03D2  0140               	movlb	0	; select bank0
 20842  03D3  00C2               	movwf	___flmul@b+1
 20843  03D4  0141               	movlb	1	; select bank1
 20844  03D5  0855               	movf	calcRequiredPower@phi^(0+128),w
 20845  03D6  0140               	movlb	0	; select bank0
 20846  03D7  00C1               	movwf	___flmul@b
 20847  03D8  306F               	movlw	111
 20848  03D9  0084               	movwf	4
 20849  03DA  3027               	movlw	39
 20850  03DB  0085               	movwf	5
 20851  03DC  3F00               	moviw [0]fsr0
 20852  03DD  00C5               	movwf	___flmul@a
 20853  03DE  3F01               	moviw [1]fsr0
 20854  03DF  00C6               	movwf	___flmul@a+1
 20855  03E0  3F02               	moviw [2]fsr0
 20856  03E1  00C7               	movwf	___flmul@a+2
 20857  03E2  3F03               	moviw [3]fsr0
 20858  03E3  00C8               	movwf	___flmul@a+3
 20859  03E4  3185  2561  3180   	fcall	___flmul
 20860  03E7  0140               	movlb	0	; select bank0
 20861  03E8  0841               	movf	?___flmul,w
 20862  03E9  3FC0               	movwi [0]fsr1
 20863  03EA  0842               	movf	?___flmul+1,w
 20864  03EB  3FC1               	movwi [1]fsr1
 20865  03EC  0843               	movf	?___flmul+2,w
 20866  03ED  3FC2               	movwi [2]fsr1
 20867  03EE  0844               	movf	?___flmul+3,w
 20868  03EF  3FC3               	movwi [3]fsr1
 20869                           
 20870                           ;system.c: 302:   p = 2 * 3.14 * 0.0254 * data.heater[n].lensDia;
 20871  03F0  303E               	movlw	62
 20872  03F1  00C4               	movwf	___flmul@b+3
 20873  03F2  3023               	movlw	35
 20874  03F3  00C3               	movwf	___flmul@b+2
 20875  03F4  3057               	movlw	87
 20876  03F5  00C2               	movwf	___flmul@b+1
 20877  03F6  301D               	movlw	29
 20878  03F7  00C1               	movwf	___flmul@b
 20879  03F8  0141               	movlb	1	; select bank1
 20880  03F9  0869               	movf	calcRequiredPower@n^(0+128),w
 20881  03FA  00AD               	movwf	??_calcRequiredPower^(0+128)
 20882  03FB  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 20883  03FC  082D               	movf	??_calcRequiredPower^(0+128),w
 20884  03FD  0140               	movlb	0	; select bank0
 20885  03FE  00AD               	movwf	___wmul@multiplier
 20886  03FF  0141               	movlb	1	; select bank1
 20887  0400  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 20888  0401  0140               	movlb	0	; select bank0
 20889  0402  00AE               	movwf	___wmul@multiplier+1
 20890  0403  301F               	movlw	31
 20891  0404  00AF               	movwf	___wmul@multiplicand
 20892  0405  3000               	movlw	0
 20893  0406  00B0               	movwf	___wmul@multiplicand+1
 20894  0407  31B3  2371  3180   	fcall	___wmul
 20895  040A  3089               	movlw	137
 20896  040B  0141               	movlb	1	; select bank1
 20897  040C  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 20898  040D  3027               	movlw	39
 20899  040E  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 20900  040F  0140               	movlb	0	; select bank0
 20901  0410  082D               	movf	?___wmul,w
 20902  0411  0141               	movlb	1	; select bank1
 20903  0412  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 20904  0413  0086               	movwf	6
 20905  0414  0140               	movlb	0	; select bank0
 20906  0415  082E               	movf	?___wmul+1,w
 20907  0416  0141               	movlb	1	; select bank1
 20908  0417  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 20909  0418  0087               	movwf	7
 20910  0419  3F40               	moviw [0]fsr1
 20911  041A  0140               	movlb	0	; select bank0
 20912  041B  00C5               	movwf	___flmul@a
 20913  041C  3F41               	moviw [1]fsr1
 20914  041D  00C6               	movwf	___flmul@a+1
 20915  041E  3F42               	moviw [2]fsr1
 20916  041F  00C7               	movwf	___flmul@a+2
 20917  0420  3F43               	moviw [3]fsr1
 20918  0421  00C8               	movwf	___flmul@a+3
 20919  0422  3185  2561  3180   	fcall	___flmul
 20920  0425  0140               	movlb	0	; select bank0
 20921  0426  0844               	movf	?___flmul+3,w
 20922  0427  0141               	movlb	1	; select bank1
 20923  0428  00B4               	movwf	(calcRequiredPower@p+3)^(0+128)
 20924  0429  0140               	movlb	0	; select bank0
 20925  042A  0843               	movf	?___flmul+2,w
 20926  042B  0141               	movlb	1	; select bank1
 20927  042C  00B3               	movwf	(calcRequiredPower@p+2)^(0+128)
 20928  042D  0140               	movlb	0	; select bank0
 20929  042E  0842               	movf	?___flmul+1,w
 20930  042F  0141               	movlb	1	; select bank1
 20931  0430  00B2               	movwf	(calcRequiredPower@p+1)^(0+128)
 20932  0431  0140               	movlb	0	; select bank0
 20933  0432  0841               	movf	?___flmul,w
 20934  0433  0141               	movlb	1	; select bank1
 20935  0434  00B1               	movwf	calcRequiredPower@p^(0+128)
 20936                           
 20937                           ;system.c: 303:   A = p * 0.03;
 20938  0435  303C               	movlw	60
 20939  0436  0140               	movlb	0	; select bank0
 20940  0437  00C4               	movwf	___flmul@b+3
 20941  0438  30F5               	movlw	245
 20942  0439  00C3               	movwf	___flmul@b+2
 20943  043A  30C2               	movlw	194
 20944  043B  00C2               	movwf	___flmul@b+1
 20945  043C  308F               	movlw	143
 20946  043D  00C1               	movwf	___flmul@b
 20947  043E  0141               	movlb	1	; select bank1
 20948  043F  0834               	movf	(calcRequiredPower@p+3)^(0+128),w
 20949  0440  0140               	movlb	0	; select bank0
 20950  0441  00C8               	movwf	___flmul@a+3
 20951  0442  0141               	movlb	1	; select bank1
 20952  0443  0833               	movf	(calcRequiredPower@p+2)^(0+128),w
 20953  0444  0140               	movlb	0	; select bank0
 20954  0445  00C7               	movwf	___flmul@a+2
 20955  0446  0141               	movlb	1	; select bank1
 20956  0447  0832               	movf	(calcRequiredPower@p+1)^(0+128),w
 20957  0448  0140               	movlb	0	; select bank0
 20958  0449  00C6               	movwf	___flmul@a+1
 20959  044A  0141               	movlb	1	; select bank1
 20960  044B  0831               	movf	calcRequiredPower@p^(0+128),w
 20961  044C  0140               	movlb	0	; select bank0
 20962  044D  00C5               	movwf	___flmul@a
 20963  044E  3185  2561  3180   	fcall	___flmul
 20964  0451  0140               	movlb	0	; select bank0
 20965  0452  0844               	movf	?___flmul+3,w
 20966  0453  0141               	movlb	1	; select bank1
 20967  0454  00DC               	movwf	(calcRequiredPower@A+3)^(0+128)
 20968  0455  0140               	movlb	0	; select bank0
 20969  0456  0843               	movf	?___flmul+2,w
 20970  0457  0141               	movlb	1	; select bank1
 20971  0458  00DB               	movwf	(calcRequiredPower@A+2)^(0+128)
 20972  0459  0140               	movlb	0	; select bank0
 20973  045A  0842               	movf	?___flmul+1,w
 20974  045B  0141               	movlb	1	; select bank1
 20975  045C  00DA               	movwf	(calcRequiredPower@A+1)^(0+128)
 20976  045D  0140               	movlb	0	; select bank0
 20977  045E  0841               	movf	?___flmul,w
 20978  045F  0141               	movlb	1	; select bank1
 20979  0460  00D9               	movwf	calcRequiredPower@A^(0+128)
 20980                           
 20981                           ;system.c: 305:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 20982  0461  303F               	movlw	63
 20983  0462  0140               	movlb	0	; select bank0
 20984  0463  00C4               	movwf	___flmul@b+3
 20985  0464  3059               	movlw	89
 20986  0465  00C3               	movwf	___flmul@b+2
 20987  0466  3099               	movlw	153
 20988  0467  00C2               	movwf	___flmul@b+1
 20989  0468  309A               	movlw	154
 20990  0469  00C1               	movwf	___flmul@b
 20991  046A  3040               	movlw	64
 20992  046B  00DE               	movwf	___fldiv@a+3
 20993  046C  3000               	movlw	0
 20994  046D  00DD               	movwf	___fldiv@a+2
 20995  046E  3000               	movlw	0
 20996  046F  00DC               	movwf	___fldiv@a+1
 20997  0470  3000               	movlw	0
 20998  0471  00DB               	movwf	___fldiv@a
 20999  0472  0141               	movlb	1	; select bank1
 21000  0473  0869               	movf	calcRequiredPower@n^(0+128),w
 21001  0474  00AD               	movwf	??_calcRequiredPower^(0+128)
 21002  0475  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 21003  0476  082D               	movf	??_calcRequiredPower^(0+128),w
 21004  0477  0140               	movlb	0	; select bank0
 21005  0478  00AD               	movwf	___wmul@multiplier
 21006  0479  0141               	movlb	1	; select bank1
 21007  047A  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 21008  047B  0140               	movlb	0	; select bank0
 21009  047C  00AE               	movwf	___wmul@multiplier+1
 21010  047D  301F               	movlw	31
 21011  047E  00AF               	movwf	___wmul@multiplicand
 21012  047F  3000               	movlw	0
 21013  0480  00B0               	movwf	___wmul@multiplicand+1
 21014  0481  31B3  2371  3180   	fcall	___wmul
 21015  0484  3089               	movlw	137
 21016  0485  0141               	movlb	1	; select bank1
 21017  0486  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 21018  0487  3027               	movlw	39
 21019  0488  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 21020  0489  0140               	movlb	0	; select bank0
 21021  048A  082D               	movf	?___wmul,w
 21022  048B  0141               	movlb	1	; select bank1
 21023  048C  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 21024  048D  0086               	movwf	6
 21025  048E  0140               	movlb	0	; select bank0
 21026  048F  082E               	movf	?___wmul+1,w
 21027  0490  0141               	movlb	1	; select bank1
 21028  0491  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21029  0492  0087               	movwf	7
 21030  0493  3F40               	moviw [0]fsr1
 21031  0494  0140               	movlb	0	; select bank0
 21032  0495  00DF               	movwf	___fldiv@b
 21033  0496  3F41               	moviw [1]fsr1
 21034  0497  00E0               	movwf	___fldiv@b+1
 21035  0498  3F42               	moviw [2]fsr1
 21036  0499  00E1               	movwf	___fldiv@b+2
 21037  049A  3F43               	moviw [3]fsr1
 21038  049B  00E2               	movwf	___fldiv@b+3
 21039  049C  319E  2628  3180   	fcall	___fldiv
 21040  049F  0140               	movlb	0	; select bank0
 21041  04A0  085E               	movf	?___fldiv+3,w
 21042  04A1  00C8               	movwf	___flmul@a+3
 21043  04A2  085D               	movf	?___fldiv+2,w
 21044  04A3  00C7               	movwf	___flmul@a+2
 21045  04A4  085C               	movf	?___fldiv+1,w
 21046  04A5  00C6               	movwf	___flmul@a+1
 21047  04A6  085B               	movf	?___fldiv,w
 21048  04A7  00C5               	movwf	___flmul@a
 21049  04A8  3185  2561  3180   	fcall	___flmul
 21050  04AB  0140               	movlb	0	; select bank0
 21051  04AC  0844               	movf	?___flmul+3,w
 21052  04AD  0141               	movlb	1	; select bank1
 21053  04AE  00E0               	movwf	(_calcRequiredPower$2550+3)^(0+128)
 21054  04AF  0140               	movlb	0	; select bank0
 21055  04B0  0843               	movf	?___flmul+2,w
 21056  04B1  0141               	movlb	1	; select bank1
 21057  04B2  00DF               	movwf	(_calcRequiredPower$2550+2)^(0+128)
 21058  04B3  0140               	movlb	0	; select bank0
 21059  04B4  0842               	movf	?___flmul+1,w
 21060  04B5  0141               	movlb	1	; select bank1
 21061  04B6  00DE               	movwf	(_calcRequiredPower$2550+1)^(0+128)
 21062  04B7  0140               	movlb	0	; select bank0
 21063  04B8  0841               	movf	?___flmul,w
 21064  04B9  0141               	movlb	1	; select bank1
 21065  04BA  00DD               	movwf	_calcRequiredPower$2550^(0+128)
 21066                           
 21067                           ;system.c: 305:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 21068  04BB  085C               	movf	(calcRequiredPower@A+3)^(0+128),w
 21069  04BC  0140               	movlb	0	; select bank0
 21070  04BD  00C4               	movwf	___flmul@b+3
 21071  04BE  0141               	movlb	1	; select bank1
 21072  04BF  085B               	movf	(calcRequiredPower@A+2)^(0+128),w
 21073  04C0  0140               	movlb	0	; select bank0
 21074  04C1  00C3               	movwf	___flmul@b+2
 21075  04C2  0141               	movlb	1	; select bank1
 21076  04C3  085A               	movf	(calcRequiredPower@A+1)^(0+128),w
 21077  04C4  0140               	movlb	0	; select bank0
 21078  04C5  00C2               	movwf	___flmul@b+1
 21079  04C6  0141               	movlb	1	; select bank1
 21080  04C7  0859               	movf	calcRequiredPower@A^(0+128),w
 21081  04C8  0140               	movlb	0	; select bank0
 21082  04C9  00C1               	movwf	___flmul@b
 21083  04CA  0141               	movlb	1	; select bank1
 21084  04CB  0860               	movf	(_calcRequiredPower$2550+3)^(0+128),w
 21085  04CC  0140               	movlb	0	; select bank0
 21086  04CD  00C8               	movwf	___flmul@a+3
 21087  04CE  0141               	movlb	1	; select bank1
 21088  04CF  085F               	movf	(_calcRequiredPower$2550+2)^(0+128),w
 21089  04D0  0140               	movlb	0	; select bank0
 21090  04D1  00C7               	movwf	___flmul@a+2
 21091  04D2  0141               	movlb	1	; select bank1
 21092  04D3  085E               	movf	(_calcRequiredPower$2550+1)^(0+128),w
 21093  04D4  0140               	movlb	0	; select bank0
 21094  04D5  00C6               	movwf	___flmul@a+1
 21095  04D6  0141               	movlb	1	; select bank1
 21096  04D7  085D               	movf	_calcRequiredPower$2550^(0+128),w
 21097  04D8  0140               	movlb	0	; select bank0
 21098  04D9  00C5               	movwf	___flmul@a
 21099  04DA  3185  2561  3180   	fcall	___flmul
 21100  04DD  0140               	movlb	0	; select bank0
 21101  04DE  0844               	movf	?___flmul+3,w
 21102  04DF  0141               	movlb	1	; select bank1
 21103  04E0  00B8               	movwf	(calcRequiredPower@Rth+3)^(0+128)
 21104  04E1  0140               	movlb	0	; select bank0
 21105  04E2  0843               	movf	?___flmul+2,w
 21106  04E3  0141               	movlb	1	; select bank1
 21107  04E4  00B7               	movwf	(calcRequiredPower@Rth+2)^(0+128)
 21108  04E5  0140               	movlb	0	; select bank0
 21109  04E6  0842               	movf	?___flmul+1,w
 21110  04E7  0141               	movlb	1	; select bank1
 21111  04E8  00B6               	movwf	(calcRequiredPower@Rth+1)^(0+128)
 21112  04E9  0140               	movlb	0	; select bank0
 21113  04EA  0841               	movf	?___flmul,w
 21114  04EB  0141               	movlb	1	; select bank1
 21115  04EC  00B5               	movwf	calcRequiredPower@Rth^(0+128)
 21116                           
 21117                           ;system.c: 307:   data.heater[n].dt = phi * Rth - data.dewPointC;
 21118  04ED  0869               	movf	calcRequiredPower@n^(0+128),w
 21119  04EE  00AD               	movwf	??_calcRequiredPower^(0+128)
 21120  04EF  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 21121  04F0  082D               	movf	??_calcRequiredPower^(0+128),w
 21122  04F1  0140               	movlb	0	; select bank0
 21123  04F2  00AD               	movwf	___wmul@multiplier
 21124  04F3  0141               	movlb	1	; select bank1
 21125  04F4  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 21126  04F5  0140               	movlb	0	; select bank0
 21127  04F6  00AE               	movwf	___wmul@multiplier+1
 21128  04F7  301F               	movlw	31
 21129  04F8  00AF               	movwf	___wmul@multiplicand
 21130  04F9  3000               	movlw	0
 21131  04FA  00B0               	movwf	___wmul@multiplicand+1
 21132  04FB  31B3  2371  3180   	fcall	___wmul
 21133  04FE  308D               	movlw	141
 21134  04FF  0141               	movlb	1	; select bank1
 21135  0500  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 21136  0501  3027               	movlw	39
 21137  0502  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 21138  0503  0140               	movlb	0	; select bank0
 21139  0504  082D               	movf	?___wmul,w
 21140  0505  0141               	movlb	1	; select bank1
 21141  0506  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 21142  0507  0086               	movwf	6
 21143  0508  0140               	movlb	0	; select bank0
 21144  0509  082E               	movf	?___wmul+1,w
 21145  050A  0141               	movlb	1	; select bank1
 21146  050B  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21147  050C  0087               	movwf	7
 21148  050D  304A               	movlw	74
 21149  050E  0084               	movwf	4
 21150  050F  3027               	movlw	39
 21151  0510  0085               	movwf	5
 21152  0511  3108               	addfsr 0,8
 21153  0512  3F00               	moviw [0]fsr0
 21154  0513  00A0               	movwf	___flsub@a^(0+128)
 21155  0514  3F01               	moviw [1]fsr0
 21156  0515  00A1               	movwf	(___flsub@a+1)^(0+128)
 21157  0516  3F02               	moviw [2]fsr0
 21158  0517  00A2               	movwf	(___flsub@a+2)^(0+128)
 21159  0518  3F03               	moviw [3]fsr0
 21160  0519  00A3               	movwf	(___flsub@a+3)^(0+128)
 21161  051A  0838               	movf	(calcRequiredPower@Rth+3)^(0+128),w
 21162  051B  0140               	movlb	0	; select bank0
 21163  051C  00C4               	movwf	___flmul@b+3
 21164  051D  0141               	movlb	1	; select bank1
 21165  051E  0837               	movf	(calcRequiredPower@Rth+2)^(0+128),w
 21166  051F  0140               	movlb	0	; select bank0
 21167  0520  00C3               	movwf	___flmul@b+2
 21168  0521  0141               	movlb	1	; select bank1
 21169  0522  0836               	movf	(calcRequiredPower@Rth+1)^(0+128),w
 21170  0523  0140               	movlb	0	; select bank0
 21171  0524  00C2               	movwf	___flmul@b+1
 21172  0525  0141               	movlb	1	; select bank1
 21173  0526  0835               	movf	calcRequiredPower@Rth^(0+128),w
 21174  0527  0140               	movlb	0	; select bank0
 21175  0528  00C1               	movwf	___flmul@b
 21176  0529  0141               	movlb	1	; select bank1
 21177  052A  0858               	movf	(calcRequiredPower@phi+3)^(0+128),w
 21178  052B  0140               	movlb	0	; select bank0
 21179  052C  00C8               	movwf	___flmul@a+3
 21180  052D  0141               	movlb	1	; select bank1
 21181  052E  0857               	movf	(calcRequiredPower@phi+2)^(0+128),w
 21182  052F  0140               	movlb	0	; select bank0
 21183  0530  00C7               	movwf	___flmul@a+2
 21184  0531  0141               	movlb	1	; select bank1
 21185  0532  0856               	movf	(calcRequiredPower@phi+1)^(0+128),w
 21186  0533  0140               	movlb	0	; select bank0
 21187  0534  00C6               	movwf	___flmul@a+1
 21188  0535  0141               	movlb	1	; select bank1
 21189  0536  0855               	movf	calcRequiredPower@phi^(0+128),w
 21190  0537  0140               	movlb	0	; select bank0
 21191  0538  00C5               	movwf	___flmul@a
 21192  0539  3185  2561  3180   	fcall	___flmul
 21193  053C  0140               	movlb	0	; select bank0
 21194  053D  0844               	movf	?___flmul+3,w
 21195  053E  0141               	movlb	1	; select bank1
 21196  053F  00A7               	movwf	(___flsub@b+3)^(0+128)
 21197  0540  0140               	movlb	0	; select bank0
 21198  0541  0843               	movf	?___flmul+2,w
 21199  0542  0141               	movlb	1	; select bank1
 21200  0543  00A6               	movwf	(___flsub@b+2)^(0+128)
 21201  0544  0140               	movlb	0	; select bank0
 21202  0545  0842               	movf	?___flmul+1,w
 21203  0546  0141               	movlb	1	; select bank1
 21204  0547  00A5               	movwf	(___flsub@b+1)^(0+128)
 21205  0548  0140               	movlb	0	; select bank0
 21206  0549  0841               	movf	?___flmul,w
 21207  054A  0141               	movlb	1	; select bank1
 21208  054B  00A4               	movwf	___flsub@b^(0+128)
 21209  054C  31B4  24FB  3180   	fcall	___flsub
 21210  054F  0141               	movlb	1	; select bank1
 21211  0550  0820               	movf	?___flsub^(0+128),w
 21212  0551  3FC0               	movwi [0]fsr1
 21213  0552  0821               	movf	(?___flsub+1)^(0+128),w
 21214  0553  3FC1               	movwi [1]fsr1
 21215  0554  0822               	movf	(?___flsub+2)^(0+128),w
 21216  0555  3FC2               	movwi [2]fsr1
 21217  0556  0823               	movf	(?___flsub+3)^(0+128),w
 21218  0557  3FC3               	movwi [3]fsr1
 21219                           
 21220                           ;system.c: 308:  }
 21221  0558  3001               	movlw	1
 21222  0559  00AD               	movwf	??_calcRequiredPower^(0+128)
 21223  055A  082D               	movf	??_calcRequiredPower^(0+128),w
 21224  055B  07E9               	addwf	calcRequiredPower@n^(0+128),f
 21225  055C  3004               	movlw	4
 21226  055D  0269               	subwf	calcRequiredPower@n^(0+128),w
 21227  055E  1803               	btfsc	3,0
 21228  055F  0008               	return
 21229  0560  28D7               	goto	l8348
 21230  0561                     __end_of_calcRequiredPower:	
 21231                           
 21232                           	psect	text53
 21233  3371                     __ptext53:	
 21234 ;; *************** function ___wmul *****************
 21235 ;; Defined at:
 21236 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 21237 ;; Parameters:    Size  Location     Type
 21238 ;;  multiplier      2   13[BANK0 ] unsigned int 
 21239 ;;  multiplicand    2   15[BANK0 ] unsigned int 
 21240 ;; Auto vars:     Size  Location     Type
 21241 ;;  product         2   17[BANK0 ] unsigned int 
 21242 ;; Return value:  Size  Location     Type
 21243 ;;                  2   13[BANK0 ] unsigned int 
 21244 ;; Registers used:
 21245 ;;		wreg, status,2, status,0
 21246 ;; Tracked objects:
 21247 ;;		On entry : 0/0
 21248 ;;		On exit  : 0/0
 21249 ;;		Unchanged: 0/0
 21250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21251 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21252 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21254 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21255 ;;Total ram usage:        6 bytes
 21256 ;; Hardware stack levels used:    1
 21257 ;; Hardware stack levels required when called:    3
 21258 ;; This function calls:
 21259 ;;		Nothing
 21260 ;; This function is called by:
 21261 ;;		_initGlobalData
 21262 ;;		_channelView
 21263 ;;		_channelSetup
 21264 ;;		_setOutputPower
 21265 ;;		_setLensDia
 21266 ;;		_getNextState
 21267 ;;		_returnToPage
 21268 ;;		_checkChannelStatus
 21269 ;;		_calcRequiredPower
 21270 ;;		_channelThing
 21271 ;;		_ftoa
 21272 ;;		_qsort
 21273 ;; This function uses a non-reentrant model
 21274 ;;
 21275                           
 21276                           
 21277                           ;psect for function ___wmul
 21278  3371                     ___wmul:	
 21279                           
 21280                           ;incstack = 0
 21281                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 21282  3371  0140               	movlb	0	; select bank0
 21283  3372  01B1               	clrf	___wmul@product
 21284  3373  01B2               	clrf	___wmul@product+1
 21285  3374                     l6764:	
 21286  3374  1C2D               	btfss	___wmul@multiplier,0
 21287  3375  2B7A               	goto	l1026
 21288  3376  082F               	movf	___wmul@multiplicand,w
 21289  3377  07B1               	addwf	___wmul@product,f
 21290  3378  0830               	movf	___wmul@multiplicand+1,w
 21291  3379  3DB2               	addwfc	___wmul@product+1,f
 21292  337A                     l1026:	
 21293  337A  3001               	movlw	1
 21294  337B                     u7755:	
 21295  337B  35AF               	lslf	___wmul@multiplicand,f
 21296  337C  0DB0               	rlf	___wmul@multiplicand+1,f
 21297  337D  0B89               	decfsz	9,f
 21298  337E  2B7B               	goto	u7755
 21299  337F  3001               	movlw	1
 21300  3380                     u7765:	
 21301  3380  36AE               	lsrf	___wmul@multiplier+1,f
 21302  3381  0CAD               	rrf	___wmul@multiplier,f
 21303  3382  0B89               	decfsz	9,f
 21304  3383  2B80               	goto	u7765
 21305  3384  082D               	movf	___wmul@multiplier,w
 21306  3385  042E               	iorwf	___wmul@multiplier+1,w
 21307  3386  1D03               	btfss	3,2
 21308  3387  2B74               	goto	l6764
 21309  3388  0832               	movf	___wmul@product+1,w
 21310  3389  00AE               	movwf	?___wmul+1
 21311  338A  0831               	movf	___wmul@product,w
 21312  338B  00AD               	movwf	?___wmul
 21313  338C  0008               	return
 21314  338D                     __end_of___wmul:	
 21315                           
 21316                           	psect	text54
 21317  34FB                     __ptext54:	
 21318 ;; *************** function ___flsub *****************
 21319 ;; Defined at:
 21320 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 21321 ;; Parameters:    Size  Location     Type
 21322 ;;  a               4    0[BANK1 ] unsigned int 
 21323 ;;  b               4    4[BANK1 ] unsigned int 
 21324 ;; Auto vars:     Size  Location     Type
 21325 ;;		None
 21326 ;; Return value:  Size  Location     Type
 21327 ;;                  4    0[BANK1 ] unsigned int 
 21328 ;; Registers used:
 21329 ;;		wreg, status,2, status,0, pclath, cstack
 21330 ;; Tracked objects:
 21331 ;;		On entry : 0/0
 21332 ;;		On exit  : 0/0
 21333 ;;		Unchanged: 0/0
 21334 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21335 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21338 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21339 ;;Total ram usage:        8 bytes
 21340 ;; Hardware stack levels used:    1
 21341 ;; Hardware stack levels required when called:    4
 21342 ;; This function calls:
 21343 ;;		___fladd
 21344 ;; This function is called by:
 21345 ;;		_spinInput
 21346 ;;		_calcRequiredPower
 21347 ;;		_sortCur
 21348 ;;		_ftoa
 21349 ;; This function uses a non-reentrant model
 21350 ;;
 21351                           
 21352                           
 21353                           ;psect for function ___flsub
 21354  34FB                     ___flsub:	
 21355                           
 21356                           ;incstack = 0
 21357                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 21358  34FB  3080               	movlw	128
 21359  34FC  0141               	movlb	1	; select bank1
 21360  34FD  06A3               	xorwf	(___flsub@a+3)^(0+128),f
 21361  34FE  0827               	movf	(___flsub@b+3)^(0+128),w
 21362  34FF  0140               	movlb	0	; select bank0
 21363  3500  00DE               	movwf	___fladd@b+3
 21364  3501  0141               	movlb	1	; select bank1
 21365  3502  0826               	movf	(___flsub@b+2)^(0+128),w
 21366  3503  0140               	movlb	0	; select bank0
 21367  3504  00DD               	movwf	___fladd@b+2
 21368  3505  0141               	movlb	1	; select bank1
 21369  3506  0825               	movf	(___flsub@b+1)^(0+128),w
 21370  3507  0140               	movlb	0	; select bank0
 21371  3508  00DC               	movwf	___fladd@b+1
 21372  3509  0141               	movlb	1	; select bank1
 21373  350A  0824               	movf	___flsub@b^(0+128),w
 21374  350B  0140               	movlb	0	; select bank0
 21375  350C  00DB               	movwf	___fladd@b
 21376  350D  0141               	movlb	1	; select bank1
 21377  350E  0823               	movf	(___flsub@a+3)^(0+128),w
 21378  350F  0140               	movlb	0	; select bank0
 21379  3510  00E2               	movwf	___fladd@a+3
 21380  3511  0141               	movlb	1	; select bank1
 21381  3512  0822               	movf	(___flsub@a+2)^(0+128),w
 21382  3513  0140               	movlb	0	; select bank0
 21383  3514  00E1               	movwf	___fladd@a+2
 21384  3515  0141               	movlb	1	; select bank1
 21385  3516  0821               	movf	(___flsub@a+1)^(0+128),w
 21386  3517  0140               	movlb	0	; select bank0
 21387  3518  00E0               	movwf	___fladd@a+1
 21388  3519  0141               	movlb	1	; select bank1
 21389  351A  0820               	movf	___flsub@a^(0+128),w
 21390  351B  0140               	movlb	0	; select bank0
 21391  351C  00DF               	movwf	___fladd@a
 21392  351D  3192  2232         	fcall	___fladd
 21393  351F  0140               	movlb	0	; select bank0
 21394  3520  085E               	movf	?___fladd+3,w
 21395  3521  0141               	movlb	1	; select bank1
 21396  3522  00A3               	movwf	(?___flsub+3)^(0+128)
 21397  3523  0140               	movlb	0	; select bank0
 21398  3524  085D               	movf	?___fladd+2,w
 21399  3525  0141               	movlb	1	; select bank1
 21400  3526  00A2               	movwf	(?___flsub+2)^(0+128)
 21401  3527  0140               	movlb	0	; select bank0
 21402  3528  085C               	movf	?___fladd+1,w
 21403  3529  0141               	movlb	1	; select bank1
 21404  352A  00A1               	movwf	(?___flsub+1)^(0+128)
 21405  352B  0140               	movlb	0	; select bank0
 21406  352C  085B               	movf	?___fladd,w
 21407  352D  0141               	movlb	1	; select bank1
 21408  352E  00A0               	movwf	?___flsub^(0+128)
 21409  352F  0008               	return
 21410  3530                     __end_of___flsub:	
 21411                           
 21412                           	psect	text55
 21413  1232                     __ptext55:	
 21414 ;; *************** function ___fladd *****************
 21415 ;; Defined at:
 21416 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 21417 ;; Parameters:    Size  Location     Type
 21418 ;;  b               4   59[BANK0 ] unsigned int 
 21419 ;;  a               4   63[BANK0 ] unsigned int 
 21420 ;; Auto vars:     Size  Location     Type
 21421 ;;  grs             1   78[BANK0 ] unsigned char 
 21422 ;;  bexp            1   77[BANK0 ] unsigned char 
 21423 ;;  aexp            1   76[BANK0 ] unsigned char 
 21424 ;;  signs           1   75[BANK0 ] unsigned char 
 21425 ;; Return value:  Size  Location     Type
 21426 ;;                  4   59[BANK0 ] unsigned char 
 21427 ;; Registers used:
 21428 ;;		wreg, status,2, status,0
 21429 ;; Tracked objects:
 21430 ;;		On entry : 0/0
 21431 ;;		On exit  : 0/0
 21432 ;;		Unchanged: 0/0
 21433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21434 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21435 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21436 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21437 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21438 ;;Total ram usage:       20 bytes
 21439 ;; Hardware stack levels used:    1
 21440 ;; Hardware stack levels required when called:    3
 21441 ;; This function calls:
 21442 ;;		Nothing
 21443 ;; This function is called by:
 21444 ;;		_spinInput
 21445 ;;		_calcRequiredPower
 21446 ;;		_getAnalogValues
 21447 ;;		_channelThing
 21448 ;;		___flsub
 21449 ;; This function uses a non-reentrant model
 21450 ;;
 21451                           
 21452                           
 21453                           ;psect for function ___fladd
 21454  1232                     ___fladd:	
 21455                           
 21456                           ;incstack = 0
 21457                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 21458  1232  0140               	movlb	0	; select bank0
 21459  1233  085E               	movf	___fladd@b+3,w
 21460  1234  3980               	andlw	128
 21461  1235  00E3               	movwf	??___fladd
 21462  1236  0863               	movf	??___fladd,w
 21463  1237  00EB               	movwf	___fladd@signs
 21464  1238  355E               	lslf	___fladd@b+3,w
 21465  1239  00E3               	movwf	??___fladd
 21466  123A  0863               	movf	??___fladd,w
 21467  123B  00ED               	movwf	___fladd@bexp
 21468  123C  1BDD               	btfsc	___fladd@b+2,7
 21469  123D  146D               	bsf	___fladd@bexp,0
 21470  123E  086D               	movf	___fladd@bexp,w
 21471  123F  1903               	btfsc	3,2
 21472  1240  2A4F               	goto	l6560
 21473  1241  0A6D               	incf	___fladd@bexp,w
 21474  1242  1D03               	btfss	3,2
 21475  1243  2A4C               	goto	l6556
 21476  1244  3000               	movlw	0
 21477  1245  00DE               	movwf	___fladd@b+3
 21478  1246  3000               	movlw	0
 21479  1247  00DD               	movwf	___fladd@b+2
 21480  1248  3000               	movlw	0
 21481  1249  00DC               	movwf	___fladd@b+1
 21482  124A  3000               	movlw	0
 21483  124B  00DB               	movwf	___fladd@b
 21484  124C                     l6556:	
 21485  124C  17DD               	bsf	___fladd@b+2,7
 21486  124D  01DE               	clrf	___fladd@b+3
 21487  124E  2A57               	goto	l6562
 21488  124F                     l6560:	
 21489  124F  3000               	movlw	0
 21490  1250  00DE               	movwf	___fladd@b+3
 21491  1251  3000               	movlw	0
 21492  1252  00DD               	movwf	___fladd@b+2
 21493  1253  3000               	movlw	0
 21494  1254  00DC               	movwf	___fladd@b+1
 21495  1255  3000               	movlw	0
 21496  1256  00DB               	movwf	___fladd@b
 21497  1257                     l6562:	
 21498  1257  0862               	movf	___fladd@a+3,w
 21499  1258  3980               	andlw	128
 21500  1259  00E3               	movwf	??___fladd
 21501  125A  0863               	movf	??___fladd,w
 21502  125B  00EC               	movwf	___fladd@aexp
 21503  125C  086C               	movf	___fladd@aexp,w
 21504  125D  066B               	xorwf	___fladd@signs,w
 21505  125E  1D03               	btfss	3,2
 21506  125F  176B               	bsf	___fladd@signs,6
 21507  1260  3562               	lslf	___fladd@a+3,w
 21508  1261  00E3               	movwf	??___fladd
 21509  1262  0863               	movf	??___fladd,w
 21510  1263  00EC               	movwf	___fladd@aexp
 21511  1264  1BE1               	btfsc	___fladd@a+2,7
 21512  1265  146C               	bsf	___fladd@aexp,0
 21513  1266  086C               	movf	___fladd@aexp,w
 21514  1267  1903               	btfsc	3,2
 21515  1268  2A77               	goto	l6584
 21516  1269  0A6C               	incf	___fladd@aexp,w
 21517  126A  1D03               	btfss	3,2
 21518  126B  2A74               	goto	l6580
 21519  126C  3000               	movlw	0
 21520  126D  00E2               	movwf	___fladd@a+3
 21521  126E  3000               	movlw	0
 21522  126F  00E1               	movwf	___fladd@a+2
 21523  1270  3000               	movlw	0
 21524  1271  00E0               	movwf	___fladd@a+1
 21525  1272  3000               	movlw	0
 21526  1273  00DF               	movwf	___fladd@a
 21527  1274                     l6580:	
 21528  1274  17E1               	bsf	___fladd@a+2,7
 21529  1275  01E2               	clrf	___fladd@a+3
 21530  1276  2A7F               	goto	l1327
 21531  1277                     l6584:	
 21532  1277  3000               	movlw	0
 21533  1278  00E2               	movwf	___fladd@a+3
 21534  1279  3000               	movlw	0
 21535  127A  00E1               	movwf	___fladd@a+2
 21536  127B  3000               	movlw	0
 21537  127C  00E0               	movwf	___fladd@a+1
 21538  127D  3000               	movlw	0
 21539  127E  00DF               	movwf	___fladd@a
 21540  127F                     l1327:	
 21541  127F  086D               	movf	___fladd@bexp,w
 21542  1280  026C               	subwf	___fladd@aexp,w
 21543  1281  1803               	skipnc
 21544  1282  2AC5               	goto	l6620
 21545  1283  1F6B               	btfss	___fladd@signs,6
 21546  1284  2A89               	goto	l6590
 21547  1285  3080               	movlw	128
 21548  1286  00E3               	movwf	??___fladd
 21549  1287  0863               	movf	??___fladd,w
 21550  1288  06EB               	xorwf	___fladd@signs,f
 21551  1289                     l6590:	
 21552  1289  086D               	movf	___fladd@bexp,w
 21553  128A  00E3               	movwf	??___fladd
 21554  128B  0863               	movf	??___fladd,w
 21555  128C  00EE               	movwf	___fladd@grs
 21556  128D  086C               	movf	___fladd@aexp,w
 21557  128E  00E3               	movwf	??___fladd
 21558  128F  0863               	movf	??___fladd,w
 21559  1290  00ED               	movwf	___fladd@bexp
 21560  1291  086E               	movf	___fladd@grs,w
 21561  1292  00E3               	movwf	??___fladd
 21562  1293  0863               	movf	??___fladd,w
 21563  1294  00EC               	movwf	___fladd@aexp
 21564  1295  085B               	movf	___fladd@b,w
 21565  1296  00E3               	movwf	??___fladd
 21566  1297  0863               	movf	??___fladd,w
 21567  1298  00EE               	movwf	___fladd@grs
 21568  1299  085F               	movf	___fladd@a,w
 21569  129A  00E3               	movwf	??___fladd
 21570  129B  0863               	movf	??___fladd,w
 21571  129C  00DB               	movwf	___fladd@b
 21572  129D  086E               	movf	___fladd@grs,w
 21573  129E  00E3               	movwf	??___fladd
 21574  129F  0863               	movf	??___fladd,w
 21575  12A0  00DF               	movwf	___fladd@a
 21576  12A1  085C               	movf	___fladd@b+1,w
 21577  12A2  00E3               	movwf	??___fladd
 21578  12A3  0863               	movf	??___fladd,w
 21579  12A4  00EE               	movwf	___fladd@grs
 21580  12A5  0860               	movf	___fladd@a+1,w
 21581  12A6  00E3               	movwf	??___fladd
 21582  12A7  0863               	movf	??___fladd,w
 21583  12A8  00DC               	movwf	___fladd@b+1
 21584  12A9  086E               	movf	___fladd@grs,w
 21585  12AA  00E3               	movwf	??___fladd
 21586  12AB  0863               	movf	??___fladd,w
 21587  12AC  00E0               	movwf	___fladd@a+1
 21588  12AD  085D               	movf	___fladd@b+2,w
 21589  12AE  00E3               	movwf	??___fladd
 21590  12AF  0863               	movf	??___fladd,w
 21591  12B0  00EE               	movwf	___fladd@grs
 21592  12B1  0861               	movf	___fladd@a+2,w
 21593  12B2  00E3               	movwf	??___fladd
 21594  12B3  0863               	movf	??___fladd,w
 21595  12B4  00DD               	movwf	___fladd@b+2
 21596  12B5  086E               	movf	___fladd@grs,w
 21597  12B6  00E3               	movwf	??___fladd
 21598  12B7  0863               	movf	??___fladd,w
 21599  12B8  00E1               	movwf	___fladd@a+2
 21600  12B9  085E               	movf	___fladd@b+3,w
 21601  12BA  00E3               	movwf	??___fladd
 21602  12BB  0863               	movf	??___fladd,w
 21603  12BC  00EE               	movwf	___fladd@grs
 21604  12BD  0862               	movf	___fladd@a+3,w
 21605  12BE  00E3               	movwf	??___fladd
 21606  12BF  0863               	movf	??___fladd,w
 21607  12C0  00DE               	movwf	___fladd@b+3
 21608  12C1  086E               	movf	___fladd@grs,w
 21609  12C2  00E3               	movwf	??___fladd
 21610  12C3  0863               	movf	??___fladd,w
 21611  12C4  00E2               	movwf	___fladd@a+3
 21612  12C5                     l6620:	
 21613  12C5  01EE               	clrf	___fladd@grs
 21614  12C6  086C               	movf	___fladd@aexp,w
 21615  12C7  00E3               	movwf	??___fladd
 21616  12C8  01E4               	clrf	??___fladd+1
 21617  12C9  0864               	movf	??___fladd+1,w
 21618  12CA  00E6               	movwf	??___fladd+3
 21619  12CB  086D               	movf	___fladd@bexp,w
 21620  12CC  0263               	subwf	??___fladd,w
 21621  12CD  00E5               	movwf	??___fladd+2
 21622  12CE  1C03               	skipc
 21623  12CF  03E6               	decf	??___fladd+3,f
 21624  12D0  0866               	movf	??___fladd+3,w
 21625  12D1  3A80               	xorlw	128
 21626  12D2  00E7               	movwf	??___fladd+4
 21627  12D3  3080               	movlw	128
 21628  12D4  0267               	subwf	??___fladd+4,w
 21629  12D5  1D03               	skipz
 21630  12D6  2AD9               	goto	u7375
 21631  12D7  301A               	movlw	26
 21632  12D8  0265               	subwf	??___fladd+2,w
 21633  12D9                     u7375:	
 21634  12D9  1C03               	skipc
 21635  12DA  2B0D               	goto	l6638
 21636  12DB  0140               	movlb	0	; select bank0
 21637  12DC  085E               	movf	___fladd@b+3,w
 21638  12DD  045D               	iorwf	___fladd@b+2,w
 21639  12DE  045C               	iorwf	___fladd@b+1,w
 21640  12DF  045B               	iorwf	___fladd@b,w
 21641  12E0  1903               	btfsc	3,2
 21642  12E1  2AE4               	goto	u7380
 21643  12E2  3001               	movlw	1
 21644  12E3  2AE5               	goto	u7390
 21645  12E4                     u7380:	
 21646  12E4  3000               	movlw	0
 21647  12E5                     u7390:	
 21648  12E5  00E3               	movwf	??___fladd
 21649  12E6  0863               	movf	??___fladd,w
 21650  12E7  00EE               	movwf	___fladd@grs
 21651  12E8  3000               	movlw	0
 21652  12E9  00DE               	movwf	___fladd@b+3
 21653  12EA  3000               	movlw	0
 21654  12EB  00DD               	movwf	___fladd@b+2
 21655  12EC  3000               	movlw	0
 21656  12ED  00DC               	movwf	___fladd@b+1
 21657  12EE  3000               	movlw	0
 21658  12EF  00DB               	movwf	___fladd@b
 21659  12F0  086C               	movf	___fladd@aexp,w
 21660  12F1  00E3               	movwf	??___fladd
 21661  12F2  0863               	movf	??___fladd,w
 21662  12F3  00ED               	movwf	___fladd@bexp
 21663  12F4  2B12               	goto	l1331
 21664  12F5                     l1333:	
 21665  12F5  1C6E               	btfss	___fladd@grs,0
 21666  12F6  2AFD               	goto	l6628
 21667  12F7  366E               	lsrf	___fladd@grs,w
 21668  12F8  3801               	iorlw	1
 21669  12F9  00E3               	movwf	??___fladd
 21670  12FA  0863               	movf	??___fladd,w
 21671  12FB  00EE               	movwf	___fladd@grs
 21672  12FC  2AFF               	goto	l6630
 21673  12FD                     l6628:	
 21674  12FD  1003               	clrc
 21675  12FE  0CEE               	rrf	___fladd@grs,f
 21676  12FF                     l6630:	
 21677  12FF  185B               	btfsc	___fladd@b,0
 21678  1300  17EE               	bsf	___fladd@grs,7
 21679  1301  3001               	movlw	1
 21680  1302  00E3               	movwf	??___fladd
 21681  1303                     u7425:	
 21682  1303  37DE               	asrf	___fladd@b+3,f
 21683  1304  0CDD               	rrf	___fladd@b+2,f
 21684  1305  0CDC               	rrf	___fladd@b+1,f
 21685  1306  0CDB               	rrf	___fladd@b,f
 21686  1307  0BE3               	decfsz	??___fladd& (0+127),f
 21687  1308  2B03               	goto	u7425
 21688  1309  3001               	movlw	1
 21689  130A  00E3               	movwf	??___fladd
 21690  130B  0863               	movf	??___fladd,w
 21691  130C  07ED               	addwf	___fladd@bexp,f
 21692  130D                     l6638:	
 21693  130D  0140               	movlb	0	; select bank0
 21694  130E  086C               	movf	___fladd@aexp,w
 21695  130F  026D               	subwf	___fladd@bexp,w
 21696  1310  1C03               	skipc
 21697  1311  2AF5               	goto	l1333
 21698  1312                     l1331:	
 21699  1312  1B6B               	btfsc	___fladd@signs,6
 21700  1313  2B43               	goto	l6664
 21701  1314  086D               	movf	___fladd@bexp,w
 21702  1315  1D03               	btfss	3,2
 21703  1316  2B20               	goto	l6646
 21704  1317  3000               	movlw	0
 21705  1318  00DE               	movwf	?___fladd+3
 21706  1319  3000               	movlw	0
 21707  131A  00DD               	movwf	?___fladd+2
 21708  131B  3000               	movlw	0
 21709  131C  00DC               	movwf	?___fladd+1
 21710  131D  3000               	movlw	0
 21711  131E  00DB               	movwf	?___fladd
 21712  131F  0008               	return
 21713  1320                     l6646:	
 21714  1320  085F               	movf	___fladd@a,w
 21715  1321  07DB               	addwf	___fladd@b,f
 21716  1322  0860               	movf	___fladd@a+1,w
 21717  1323  3DDC               	addwfc	___fladd@b+1,f
 21718  1324  0861               	movf	___fladd@a+2,w
 21719  1325  3DDD               	addwfc	___fladd@b+2,f
 21720  1326  0862               	movf	___fladd@a+3,w
 21721  1327  3DDE               	addwfc	___fladd@b+3,f
 21722  1328  1C5E               	btfss	___fladd@b+3,0
 21723  1329  2BBD               	goto	l6698
 21724  132A  1C6E               	btfss	___fladd@grs,0
 21725  132B  2B32               	goto	l6654
 21726  132C  366E               	lsrf	___fladd@grs,w
 21727  132D  3801               	iorlw	1
 21728  132E  00E3               	movwf	??___fladd
 21729  132F  0863               	movf	??___fladd,w
 21730  1330  00EE               	movwf	___fladd@grs
 21731  1331  2B34               	goto	l6656
 21732  1332                     l6654:	
 21733  1332  1003               	clrc
 21734  1333  0CEE               	rrf	___fladd@grs,f
 21735  1334                     l6656:	
 21736  1334  185B               	btfsc	___fladd@b,0
 21737  1335  17EE               	bsf	___fladd@grs,7
 21738  1336  3001               	movlw	1
 21739  1337  00E3               	movwf	??___fladd
 21740  1338                     u7495:	
 21741  1338  37DE               	asrf	___fladd@b+3,f
 21742  1339  0CDD               	rrf	___fladd@b+2,f
 21743  133A  0CDC               	rrf	___fladd@b+1,f
 21744  133B  0CDB               	rrf	___fladd@b,f
 21745  133C  0BE3               	decfsz	??___fladd& (0+127),f
 21746  133D  2B38               	goto	u7495
 21747  133E  3001               	movlw	1
 21748  133F  00E3               	movwf	??___fladd
 21749  1340  0863               	movf	??___fladd,w
 21750  1341  07ED               	addwf	___fladd@bexp,f
 21751  1342  2BBD               	goto	l6698
 21752  1343                     l6664:	
 21753  1343  085E               	movf	___fladd@b+3,w
 21754  1344  3A80               	xorlw	128
 21755  1345  00E3               	movwf	??___fladd
 21756  1346  0862               	movf	___fladd@a+3,w
 21757  1347  3A80               	xorlw	128
 21758  1348  0263               	subwf	??___fladd,w
 21759  1349  1D03               	skipz
 21760  134A  2B55               	goto	u7503
 21761  134B  0861               	movf	___fladd@a+2,w
 21762  134C  025D               	subwf	___fladd@b+2,w
 21763  134D  1D03               	skipz
 21764  134E  2B55               	goto	u7503
 21765  134F  0860               	movf	___fladd@a+1,w
 21766  1350  025C               	subwf	___fladd@b+1,w
 21767  1351  1D03               	skipz
 21768  1352  2B55               	goto	u7503
 21769  1353  085F               	movf	___fladd@a,w
 21770  1354  025B               	subwf	___fladd@b,w
 21771  1355                     u7503:	
 21772  1355  1803               	skipnc
 21773  1356  2B8D               	goto	l6674
 21774  1357  30FF               	movlw	255
 21775  1358  00E3               	movwf	??___fladd
 21776  1359  30FF               	movlw	255
 21777  135A  00E4               	movwf	??___fladd+1
 21778  135B  30FF               	movlw	255
 21779  135C  00E5               	movwf	??___fladd+2
 21780  135D  30FF               	movlw	255
 21781  135E  00E6               	movwf	??___fladd+3
 21782  135F  085B               	movf	___fladd@b,w
 21783  1360  025F               	subwf	___fladd@a,w
 21784  1361  00E7               	movwf	??___fladd+4
 21785  1362  085C               	movf	___fladd@b+1,w
 21786  1363  3B60               	subwfb	___fladd@a+1,w
 21787  1364  00E8               	movwf	??___fladd+5
 21788  1365  085D               	movf	___fladd@b+2,w
 21789  1366  3B61               	subwfb	___fladd@a+2,w
 21790  1367  00E9               	movwf	??___fladd+6
 21791  1368  085E               	movf	___fladd@b+3,w
 21792  1369  3B62               	subwfb	___fladd@a+3,w
 21793  136A  00EA               	movwf	??___fladd+7
 21794  136B  0867               	movf	??___fladd+4,w
 21795  136C  07E3               	addwf	??___fladd,f
 21796  136D  0868               	movf	??___fladd+5,w
 21797  136E  3DE4               	addwfc	??___fladd+1,f
 21798  136F  0869               	movf	??___fladd+6,w
 21799  1370  3DE5               	addwfc	??___fladd+2,f
 21800  1371  086A               	movf	??___fladd+7,w
 21801  1372  3DE6               	addwfc	??___fladd+3,f
 21802  1373  0866               	movf	??___fladd+3,w
 21803  1374  00DE               	movwf	___fladd@b+3
 21804  1375  0865               	movf	??___fladd+2,w
 21805  1376  00DD               	movwf	___fladd@b+2
 21806  1377  0864               	movf	??___fladd+1,w
 21807  1378  00DC               	movwf	___fladd@b+1
 21808  1379  0863               	movf	??___fladd,w
 21809  137A  00DB               	movwf	___fladd@b
 21810  137B  3080               	movlw	128
 21811  137C  00E3               	movwf	??___fladd
 21812  137D  0863               	movf	??___fladd,w
 21813  137E  06EB               	xorwf	___fladd@signs,f
 21814  137F  09EE               	comf	___fladd@grs,f
 21815  1380  0AEE               	incf	___fladd@grs,f
 21816  1381  086E               	movf	___fladd@grs,w
 21817  1382  1D03               	btfss	3,2
 21818  1383  2B95               	goto	l1348
 21819  1384  3001               	movlw	1
 21820  1385  07DB               	addwf	___fladd@b,f
 21821  1386  3000               	movlw	0
 21822  1387  3DDC               	addwfc	___fladd@b+1,f
 21823  1388  3000               	movlw	0
 21824  1389  3DDD               	addwfc	___fladd@b+2,f
 21825  138A  3000               	movlw	0
 21826  138B  3DDE               	addwfc	___fladd@b+3,f
 21827  138C  2B95               	goto	l1348
 21828  138D                     l6674:	
 21829  138D  085F               	movf	___fladd@a,w
 21830  138E  02DB               	subwf	___fladd@b,f
 21831  138F  0860               	movf	___fladd@a+1,w
 21832  1390  3BDC               	subwfb	___fladd@b+1,f
 21833  1391  0861               	movf	___fladd@a+2,w
 21834  1392  3BDD               	subwfb	___fladd@b+2,f
 21835  1393  0862               	movf	___fladd@a+3,w
 21836  1394  3BDE               	subwfb	___fladd@b+3,f
 21837  1395                     l1348:	
 21838  1395  085E               	movf	___fladd@b+3,w
 21839  1396  045D               	iorwf	___fladd@b+2,w
 21840  1397  045C               	iorwf	___fladd@b+1,w
 21841  1398  045B               	iorwf	___fladd@b,w
 21842  1399  1D03               	skipz
 21843  139A  2BBB               	goto	l6696
 21844  139B  086E               	movf	___fladd@grs,w
 21845  139C  1D03               	btfss	3,2
 21846  139D  2BBB               	goto	l6696
 21847  139E  3000               	movlw	0
 21848  139F  00DE               	movwf	?___fladd+3
 21849  13A0  3000               	movlw	0
 21850  13A1  00DD               	movwf	?___fladd+2
 21851  13A2  3000               	movlw	0
 21852  13A3  00DC               	movwf	?___fladd+1
 21853  13A4  3000               	movlw	0
 21854  13A5  00DB               	movwf	?___fladd
 21855  13A6  0008               	return
 21856  13A7                     l6682:	
 21857  13A7  3001               	movlw	1
 21858  13A8                     u7545:	
 21859  13A8  35DB               	lslf	___fladd@b,f
 21860  13A9  0DDC               	rlf	___fladd@b+1,f
 21861  13AA  0DDD               	rlf	___fladd@b+2,f
 21862  13AB  0DDE               	rlf	___fladd@b+3,f
 21863  13AC  0B89               	decfsz	9,f
 21864  13AD  2BA8               	goto	u7545
 21865  13AE  1BEE               	btfsc	___fladd@grs,7
 21866  13AF  145B               	bsf	___fladd@b,0
 21867  13B0  1C6E               	btfss	___fladd@grs,0
 21868  13B1  2BB4               	goto	l6690
 21869  13B2  1403               	setc
 21870  13B3  2BB5               	goto	L13
 21871  13B4                     l6690:	
 21872  13B4  1003               	clrc
 21873  13B5                     L13:	
 21874  13B5  0DEE               	rlf	___fladd@grs,f
 21875  13B6  086D               	movf	___fladd@bexp,w
 21876  13B7  1903               	btfsc	3,2
 21877  13B8  2BBB               	goto	l6696
 21878  13B9  3001               	movlw	1
 21879  13BA  02ED               	subwf	___fladd@bexp,f
 21880  13BB                     l6696:	
 21881  13BB  1FDD               	btfss	___fladd@b+2,7
 21882  13BC  2BA7               	goto	l6682
 21883  13BD                     l6698:	
 21884  13BD  01EC               	clrf	___fladd@aexp
 21885  13BE  1FEE               	btfss	___fladd@grs,7
 21886  13BF  2BC8               	goto	l6708
 21887  13C0  086E               	movf	___fladd@grs,w
 21888  13C1  397F               	andlw	127
 21889  13C2  1903               	btfsc	3,2
 21890  13C3  185B               	btfsc	___fladd@b,0
 21891  13C4  2BC6               	goto	l6704
 21892  13C5  2BC8               	goto	l6708
 21893  13C6                     l6704:	
 21894  13C6  01EC               	clrf	___fladd@aexp
 21895  13C7  0AEC               	incf	___fladd@aexp,f
 21896  13C8                     l6708:	
 21897  13C8  086C               	movf	___fladd@aexp,w
 21898  13C9  1903               	btfsc	3,2
 21899  13CA  2BF4               	goto	l1361
 21900  13CB  3001               	movlw	1
 21901  13CC  07DB               	addwf	___fladd@b,f
 21902  13CD  3000               	movlw	0
 21903  13CE  3DDC               	addwfc	___fladd@b+1,f
 21904  13CF  3000               	movlw	0
 21905  13D0  3DDD               	addwfc	___fladd@b+2,f
 21906  13D1  3000               	movlw	0
 21907  13D2  3DDE               	addwfc	___fladd@b+3,f
 21908  13D3  1C5E               	btfss	___fladd@b+3,0
 21909  13D4  2BF4               	goto	l1361
 21910  13D5  085B               	movf	___fladd@b,w
 21911  13D6  00E3               	movwf	??___fladd
 21912  13D7  085C               	movf	___fladd@b+1,w
 21913  13D8  00E4               	movwf	??___fladd+1
 21914  13D9  085D               	movf	___fladd@b+2,w
 21915  13DA  00E5               	movwf	??___fladd+2
 21916  13DB  085E               	movf	___fladd@b+3,w
 21917  13DC  00E6               	movwf	??___fladd+3
 21918  13DD  3001               	movlw	1
 21919  13DE  00E7               	movwf	??___fladd+4
 21920  13DF                     u7645:	
 21921  13DF  37E6               	asrf	??___fladd+3,f
 21922  13E0  0CE5               	rrf	??___fladd+2,f
 21923  13E1  0CE4               	rrf	??___fladd+1,f
 21924  13E2  0CE3               	rrf	??___fladd,f
 21925  13E3  0BE7               	decfsz	??___fladd+4,f
 21926  13E4  2BDF               	goto	u7645
 21927  13E5  0866               	movf	??___fladd+3,w
 21928  13E6  00DE               	movwf	___fladd@b+3
 21929  13E7  0865               	movf	??___fladd+2,w
 21930  13E8  00DD               	movwf	___fladd@b+2
 21931  13E9  0864               	movf	??___fladd+1,w
 21932  13EA  00DC               	movwf	___fladd@b+1
 21933  13EB  0863               	movf	??___fladd,w
 21934  13EC  00DB               	movwf	___fladd@b
 21935  13ED  0A6D               	incf	___fladd@bexp,w
 21936  13EE  1903               	btfsc	3,2
 21937  13EF  2BF4               	goto	l1361
 21938  13F0  3001               	movlw	1
 21939  13F1  00E3               	movwf	??___fladd
 21940  13F2  0863               	movf	??___fladd,w
 21941  13F3  07ED               	addwf	___fladd@bexp,f
 21942  13F4                     l1361:	
 21943  13F4  0A6D               	incf	___fladd@bexp,w
 21944  13F5  1D03               	btfss	3,2
 21945  13F6  086D               	movf	___fladd@bexp,w
 21946  13F7  1D03               	btfss	3,2
 21947  13F8  2C04               	goto	l6726
 21948  13F9  3000               	movlw	0
 21949  13FA  00DE               	movwf	___fladd@b+3
 21950  13FB  3000               	movlw	0
 21951  13FC  00DD               	movwf	___fladd@b+2
 21952  13FD  3000               	movlw	0
 21953  13FE  00DC               	movwf	___fladd@b+1
 21954  13FF  3000               	movlw	0
 21955  1400  00DB               	movwf	___fladd@b
 21956  1401  086D               	movf	___fladd@bexp,w
 21957  1402  1903               	btfsc	3,2
 21958  1403  01EB               	clrf	___fladd@signs
 21959  1404                     l6726:	
 21960  1404  1C6D               	btfss	___fladd@bexp,0
 21961  1405  2C08               	goto	l6730
 21962  1406  17DD               	bsf	___fladd@b+2,7
 21963  1407  2C0C               	goto	l1369
 21964  1408                     l6730:	
 21965  1408  307F               	movlw	127
 21966  1409  00E3               	movwf	??___fladd
 21967  140A  0863               	movf	??___fladd,w
 21968  140B  05DD               	andwf	___fladd@b+2,f
 21969  140C                     l1369:	
 21970  140C  366D               	lsrf	___fladd@bexp,w
 21971  140D  00E3               	movwf	??___fladd
 21972  140E  0863               	movf	??___fladd,w
 21973  140F  00DE               	movwf	___fladd@b+3
 21974  1410  1FEB               	btfss	___fladd@signs,7
 21975  1411  0008               	return
 21976  1412  17DE               	bsf	___fladd@b+3,7
 21977  1413  0008               	return
 21978  1414                     __end_of___fladd:	
 21979                           
 21980                           	psect	text56
 21981  0561                     __ptext56:	
 21982 ;; *************** function ___flmul *****************
 21983 ;; Defined at:
 21984 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 21985 ;; Parameters:    Size  Location     Type
 21986 ;;  b               4   33[BANK0 ] unsigned char 
 21987 ;;  a               4   37[BANK0 ] unsigned char 
 21988 ;; Auto vars:     Size  Location     Type
 21989 ;;  prod            4   53[BANK0 ] struct .
 21990 ;;  grs             4   48[BANK0 ] unsigned long 
 21991 ;;  temp            2   57[BANK0 ] struct .
 21992 ;;  bexp            1   52[BANK0 ] unsigned char 
 21993 ;;  aexp            1   47[BANK0 ] unsigned char 
 21994 ;;  sign            1   46[BANK0 ] unsigned char 
 21995 ;; Return value:  Size  Location     Type
 21996 ;;                  4   33[BANK0 ] unsigned char 
 21997 ;; Registers used:
 21998 ;;		wreg, status,2, status,0, pclath, cstack
 21999 ;; Tracked objects:
 22000 ;;		On entry : 0/0
 22001 ;;		On exit  : 0/0
 22002 ;;		Unchanged: 0/0
 22003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22004 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22005 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22006 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22007 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22008 ;;Total ram usage:       26 bytes
 22009 ;; Hardware stack levels used:    1
 22010 ;; Hardware stack levels required when called:    4
 22011 ;; This function calls:
 22012 ;;		__Umul8_16
 22013 ;; This function is called by:
 22014 ;;		_checkChannelStatus
 22015 ;;		_systemCheck
 22016 ;;		_calcRequiredPower
 22017 ;;		_getAnalogValues
 22018 ;;		_channelThing
 22019 ;;		_ftoa
 22020 ;; This function uses a non-reentrant model
 22021 ;;
 22022                           
 22023                           
 22024                           ;psect for function ___flmul
 22025  0561                     ___flmul:	
 22026                           
 22027                           ;incstack = 0
 22028                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 22029  0561  0140               	movlb	0	; select bank0
 22030  0562  0844               	movf	___flmul@b+3,w
 22031  0563  3980               	andlw	128
 22032  0564  00C9               	movwf	??___flmul
 22033  0565  0849               	movf	??___flmul,w
 22034  0566  00CE               	movwf	___flmul@sign
 22035  0567  3544               	lslf	___flmul@b+3,w
 22036  0568  00C9               	movwf	??___flmul
 22037  0569  0849               	movf	??___flmul,w
 22038  056A  00D4               	movwf	___flmul@bexp
 22039  056B  1BC3               	btfsc	___flmul@b+2,7
 22040  056C  1454               	bsf	___flmul@bexp,0
 22041  056D  0854               	movf	___flmul@bexp,w
 22042  056E  1903               	btfsc	3,2
 22043  056F  2D7D               	goto	l7090
 22044  0570  0A54               	incf	___flmul@bexp,w
 22045  0571  1D03               	btfss	3,2
 22046  0572  2D7B               	goto	l7088
 22047  0573  3000               	movlw	0
 22048  0574  00C4               	movwf	___flmul@b+3
 22049  0575  3000               	movlw	0
 22050  0576  00C3               	movwf	___flmul@b+2
 22051  0577  3000               	movlw	0
 22052  0578  00C2               	movwf	___flmul@b+1
 22053  0579  3000               	movlw	0
 22054  057A  00C1               	movwf	___flmul@b
 22055  057B                     l7088:	
 22056  057B  17C3               	bsf	___flmul@b+2,7
 22057  057C  2D85               	goto	l7092
 22058  057D                     l7090:	
 22059  057D  3000               	movlw	0
 22060  057E  00C4               	movwf	___flmul@b+3
 22061  057F  3000               	movlw	0
 22062  0580  00C3               	movwf	___flmul@b+2
 22063  0581  3000               	movlw	0
 22064  0582  00C2               	movwf	___flmul@b+1
 22065  0583  3000               	movlw	0
 22066  0584  00C1               	movwf	___flmul@b
 22067  0585                     l7092:	
 22068  0585  0848               	movf	___flmul@a+3,w
 22069  0586  3980               	andlw	128
 22070  0587  00C9               	movwf	??___flmul
 22071  0588  0849               	movf	??___flmul,w
 22072  0589  06CE               	xorwf	___flmul@sign,f
 22073  058A  3548               	lslf	___flmul@a+3,w
 22074  058B  00C9               	movwf	??___flmul
 22075  058C  0849               	movf	??___flmul,w
 22076  058D  00CF               	movwf	___flmul@aexp
 22077  058E  1BC7               	btfsc	___flmul@a+2,7
 22078  058F  144F               	bsf	___flmul@aexp,0
 22079  0590  084F               	movf	___flmul@aexp,w
 22080  0591  1903               	btfsc	3,2
 22081  0592  2DA0               	goto	l7108
 22082  0593  0A4F               	incf	___flmul@aexp,w
 22083  0594  1D03               	btfss	3,2
 22084  0595  2D9E               	goto	l7106
 22085  0596  3000               	movlw	0
 22086  0597  00C8               	movwf	___flmul@a+3
 22087  0598  3000               	movlw	0
 22088  0599  00C7               	movwf	___flmul@a+2
 22089  059A  3000               	movlw	0
 22090  059B  00C6               	movwf	___flmul@a+1
 22091  059C  3000               	movlw	0
 22092  059D  00C5               	movwf	___flmul@a
 22093  059E                     l7106:	
 22094  059E  17C7               	bsf	___flmul@a+2,7
 22095  059F  2DA8               	goto	l7110
 22096  05A0                     l7108:	
 22097  05A0  3000               	movlw	0
 22098  05A1  00C8               	movwf	___flmul@a+3
 22099  05A2  3000               	movlw	0
 22100  05A3  00C7               	movwf	___flmul@a+2
 22101  05A4  3000               	movlw	0
 22102  05A5  00C6               	movwf	___flmul@a+1
 22103  05A6  3000               	movlw	0
 22104  05A7  00C5               	movwf	___flmul@a
 22105  05A8                     l7110:	
 22106  05A8  084F               	movf	___flmul@aexp,w
 22107  05A9  1D03               	btfss	3,2
 22108  05AA  0854               	movf	___flmul@bexp,w
 22109  05AB  1D03               	btfss	3,2
 22110  05AC  2DB6               	goto	l7118
 22111  05AD  3000               	movlw	0
 22112  05AE  00C4               	movwf	?___flmul+3
 22113  05AF  3000               	movlw	0
 22114  05B0  00C3               	movwf	?___flmul+2
 22115  05B1  3000               	movlw	0
 22116  05B2  00C2               	movwf	?___flmul+1
 22117  05B3  3000               	movlw	0
 22118  05B4  00C1               	movwf	?___flmul
 22119  05B5  0008               	return
 22120  05B6                     l7118:	
 22121  05B6  0841               	movf	___flmul@b,w
 22122  05B7  00C9               	movwf	??___flmul
 22123  05B8  0849               	movf	??___flmul,w
 22124  05B9  00A0               	movwf	__Umul8_16@multiplicand
 22125  05BA  0847               	movf	___flmul@a+2,w
 22126  05BB  31A8  2003  3185   	fcall	__Umul8_16
 22127  05BE  0140               	movlb	0	; select bank0
 22128  05BF  0821               	movf	?__Umul8_16+1,w
 22129  05C0  00DA               	movwf	___flmul@temp+1
 22130  05C1  0820               	movf	?__Umul8_16,w
 22131  05C2  00D9               	movwf	___flmul@temp
 22132  05C3  0859               	movf	___flmul@temp,w
 22133  05C4  00C9               	movwf	??___flmul
 22134  05C5  01CA               	clrf	??___flmul+1
 22135  05C6  01CB               	clrf	??___flmul+2
 22136  05C7  01CC               	clrf	??___flmul+3
 22137  05C8  084C               	movf	??___flmul+3,w
 22138  05C9  00D3               	movwf	___flmul@grs+3
 22139  05CA  084B               	movf	??___flmul+2,w
 22140  05CB  00D2               	movwf	___flmul@grs+2
 22141  05CC  084A               	movf	??___flmul+1,w
 22142  05CD  00D1               	movwf	___flmul@grs+1
 22143  05CE  0849               	movf	??___flmul,w
 22144  05CF  00D0               	movwf	___flmul@grs
 22145  05D0  085A               	movf	___flmul@temp+1,w
 22146  05D1  00C9               	movwf	??___flmul
 22147  05D2  01CA               	clrf	??___flmul+1
 22148  05D3  01CB               	clrf	??___flmul+2
 22149  05D4  01CC               	clrf	??___flmul+3
 22150  05D5  084C               	movf	??___flmul+3,w
 22151  05D6  00D8               	movwf	___flmul@prod+3
 22152  05D7  084B               	movf	??___flmul+2,w
 22153  05D8  00D7               	movwf	___flmul@prod+2
 22154  05D9  084A               	movf	??___flmul+1,w
 22155  05DA  00D6               	movwf	___flmul@prod+1
 22156  05DB  0849               	movf	??___flmul,w
 22157  05DC  00D5               	movwf	___flmul@prod
 22158  05DD  0842               	movf	___flmul@b+1,w
 22159  05DE  00C9               	movwf	??___flmul
 22160  05DF  0849               	movf	??___flmul,w
 22161  05E0  00A0               	movwf	__Umul8_16@multiplicand
 22162  05E1  0846               	movf	___flmul@a+1,w
 22163  05E2  31A8  2003  3185   	fcall	__Umul8_16
 22164  05E5  0140               	movlb	0	; select bank0
 22165  05E6  0821               	movf	?__Umul8_16+1,w
 22166  05E7  00DA               	movwf	___flmul@temp+1
 22167  05E8  0820               	movf	?__Umul8_16,w
 22168  05E9  00D9               	movwf	___flmul@temp
 22169  05EA  0859               	movf	___flmul@temp,w
 22170  05EB  00C9               	movwf	??___flmul
 22171  05EC  01CA               	clrf	??___flmul+1
 22172  05ED  01CB               	clrf	??___flmul+2
 22173  05EE  01CC               	clrf	??___flmul+3
 22174  05EF  0849               	movf	??___flmul,w
 22175  05F0  07D0               	addwf	___flmul@grs,f
 22176  05F1  084A               	movf	??___flmul+1,w
 22177  05F2  3DD1               	addwfc	___flmul@grs+1,f
 22178  05F3  084B               	movf	??___flmul+2,w
 22179  05F4  3DD2               	addwfc	___flmul@grs+2,f
 22180  05F5  084C               	movf	??___flmul+3,w
 22181  05F6  3DD3               	addwfc	___flmul@grs+3,f
 22182  05F7  085A               	movf	___flmul@temp+1,w
 22183  05F8  00C9               	movwf	??___flmul
 22184  05F9  01CA               	clrf	??___flmul+1
 22185  05FA  01CB               	clrf	??___flmul+2
 22186  05FB  01CC               	clrf	??___flmul+3
 22187  05FC  0849               	movf	??___flmul,w
 22188  05FD  07D5               	addwf	___flmul@prod,f
 22189  05FE  084A               	movf	??___flmul+1,w
 22190  05FF  3DD6               	addwfc	___flmul@prod+1,f
 22191  0600  084B               	movf	??___flmul+2,w
 22192  0601  3DD7               	addwfc	___flmul@prod+2,f
 22193  0602  084C               	movf	??___flmul+3,w
 22194  0603  3DD8               	addwfc	___flmul@prod+3,f
 22195  0604  0843               	movf	___flmul@b+2,w
 22196  0605  00C9               	movwf	??___flmul
 22197  0606  0849               	movf	??___flmul,w
 22198  0607  00A0               	movwf	__Umul8_16@multiplicand
 22199  0608  0845               	movf	___flmul@a,w
 22200  0609  31A8  2003  3185   	fcall	__Umul8_16
 22201  060C  0140               	movlb	0	; select bank0
 22202  060D  0821               	movf	?__Umul8_16+1,w
 22203  060E  00DA               	movwf	___flmul@temp+1
 22204  060F  0820               	movf	?__Umul8_16,w
 22205  0610  00D9               	movwf	___flmul@temp
 22206  0611  0859               	movf	___flmul@temp,w
 22207  0612  00C9               	movwf	??___flmul
 22208  0613  01CA               	clrf	??___flmul+1
 22209  0614  01CB               	clrf	??___flmul+2
 22210  0615  01CC               	clrf	??___flmul+3
 22211  0616  0849               	movf	??___flmul,w
 22212  0617  07D0               	addwf	___flmul@grs,f
 22213  0618  084A               	movf	??___flmul+1,w
 22214  0619  3DD1               	addwfc	___flmul@grs+1,f
 22215  061A  084B               	movf	??___flmul+2,w
 22216  061B  3DD2               	addwfc	___flmul@grs+2,f
 22217  061C  084C               	movf	??___flmul+3,w
 22218  061D  3DD3               	addwfc	___flmul@grs+3,f
 22219  061E  085A               	movf	___flmul@temp+1,w
 22220  061F  00C9               	movwf	??___flmul
 22221  0620  01CA               	clrf	??___flmul+1
 22222  0621  01CB               	clrf	??___flmul+2
 22223  0622  01CC               	clrf	??___flmul+3
 22224  0623  0849               	movf	??___flmul,w
 22225  0624  07D5               	addwf	___flmul@prod,f
 22226  0625  084A               	movf	??___flmul+1,w
 22227  0626  3DD6               	addwfc	___flmul@prod+1,f
 22228  0627  084B               	movf	??___flmul+2,w
 22229  0628  3DD7               	addwfc	___flmul@prod+2,f
 22230  0629  084C               	movf	??___flmul+3,w
 22231  062A  3DD8               	addwfc	___flmul@prod+3,f
 22232  062B  3008               	movlw	8
 22233  062C                     u8515:	
 22234  062C  35D0               	lslf	___flmul@grs,f
 22235  062D  0DD1               	rlf	___flmul@grs+1,f
 22236  062E  0DD2               	rlf	___flmul@grs+2,f
 22237  062F  0DD3               	rlf	___flmul@grs+3,f
 22238  0630  0B89               	decfsz	9,f
 22239  0631  2E2C               	goto	u8515
 22240  0632  0842               	movf	___flmul@b+1,w
 22241  0633  00C9               	movwf	??___flmul
 22242  0634  0849               	movf	??___flmul,w
 22243  0635  00A0               	movwf	__Umul8_16@multiplicand
 22244  0636  0845               	movf	___flmul@a,w
 22245  0637  31A8  2003  3185   	fcall	__Umul8_16
 22246  063A  0140               	movlb	0	; select bank0
 22247  063B  0821               	movf	?__Umul8_16+1,w
 22248  063C  00DA               	movwf	___flmul@temp+1
 22249  063D  0820               	movf	?__Umul8_16,w
 22250  063E  00D9               	movwf	___flmul@temp
 22251  063F  0859               	movf	___flmul@temp,w
 22252  0640  07D0               	addwf	___flmul@grs,f
 22253  0641  085A               	movf	___flmul@temp+1,w
 22254  0642  3DD1               	addwfc	___flmul@grs+1,f
 22255  0643  3000               	movlw	0
 22256  0644  3DD2               	addwfc	___flmul@grs+2,f
 22257  0645  3DD3               	addwfc	___flmul@grs+3,f
 22258  0646  0841               	movf	___flmul@b,w
 22259  0647  00C9               	movwf	??___flmul
 22260  0648  0849               	movf	??___flmul,w
 22261  0649  00A0               	movwf	__Umul8_16@multiplicand
 22262  064A  0846               	movf	___flmul@a+1,w
 22263  064B  31A8  2003  3185   	fcall	__Umul8_16
 22264  064E  0140               	movlb	0	; select bank0
 22265  064F  0821               	movf	?__Umul8_16+1,w
 22266  0650  00DA               	movwf	___flmul@temp+1
 22267  0651  0820               	movf	?__Umul8_16,w
 22268  0652  00D9               	movwf	___flmul@temp
 22269  0653  0859               	movf	___flmul@temp,w
 22270  0654  07D0               	addwf	___flmul@grs,f
 22271  0655  085A               	movf	___flmul@temp+1,w
 22272  0656  3DD1               	addwfc	___flmul@grs+1,f
 22273  0657  3000               	movlw	0
 22274  0658  3DD2               	addwfc	___flmul@grs+2,f
 22275  0659  3DD3               	addwfc	___flmul@grs+3,f
 22276  065A  3008               	movlw	8
 22277  065B                     u8525:	
 22278  065B  35D0               	lslf	___flmul@grs,f
 22279  065C  0DD1               	rlf	___flmul@grs+1,f
 22280  065D  0DD2               	rlf	___flmul@grs+2,f
 22281  065E  0DD3               	rlf	___flmul@grs+3,f
 22282  065F  0B89               	decfsz	9,f
 22283  0660  2E5B               	goto	u8525
 22284  0661  0841               	movf	___flmul@b,w
 22285  0662  00C9               	movwf	??___flmul
 22286  0663  0849               	movf	??___flmul,w
 22287  0664  00A0               	movwf	__Umul8_16@multiplicand
 22288  0665  0845               	movf	___flmul@a,w
 22289  0666  31A8  2003  3185   	fcall	__Umul8_16
 22290  0669  0140               	movlb	0	; select bank0
 22291  066A  0821               	movf	?__Umul8_16+1,w
 22292  066B  00DA               	movwf	___flmul@temp+1
 22293  066C  0820               	movf	?__Umul8_16,w
 22294  066D  00D9               	movwf	___flmul@temp
 22295  066E  0859               	movf	___flmul@temp,w
 22296  066F  07D0               	addwf	___flmul@grs,f
 22297  0670  085A               	movf	___flmul@temp+1,w
 22298  0671  3DD1               	addwfc	___flmul@grs+1,f
 22299  0672  3000               	movlw	0
 22300  0673  3DD2               	addwfc	___flmul@grs+2,f
 22301  0674  3DD3               	addwfc	___flmul@grs+3,f
 22302  0675  0842               	movf	___flmul@b+1,w
 22303  0676  00C9               	movwf	??___flmul
 22304  0677  0849               	movf	??___flmul,w
 22305  0678  00A0               	movwf	__Umul8_16@multiplicand
 22306  0679  0847               	movf	___flmul@a+2,w
 22307  067A  31A8  2003  3185   	fcall	__Umul8_16
 22308  067D  0140               	movlb	0	; select bank0
 22309  067E  0821               	movf	?__Umul8_16+1,w
 22310  067F  00DA               	movwf	___flmul@temp+1
 22311  0680  0820               	movf	?__Umul8_16,w
 22312  0681  00D9               	movwf	___flmul@temp
 22313  0682  0859               	movf	___flmul@temp,w
 22314  0683  07D5               	addwf	___flmul@prod,f
 22315  0684  085A               	movf	___flmul@temp+1,w
 22316  0685  3DD6               	addwfc	___flmul@prod+1,f
 22317  0686  3000               	movlw	0
 22318  0687  3DD7               	addwfc	___flmul@prod+2,f
 22319  0688  3DD8               	addwfc	___flmul@prod+3,f
 22320  0689  0843               	movf	___flmul@b+2,w
 22321  068A  00C9               	movwf	??___flmul
 22322  068B  0849               	movf	??___flmul,w
 22323  068C  00A0               	movwf	__Umul8_16@multiplicand
 22324  068D  0846               	movf	___flmul@a+1,w
 22325  068E  31A8  2003  3185   	fcall	__Umul8_16
 22326  0691  0140               	movlb	0	; select bank0
 22327  0692  0821               	movf	?__Umul8_16+1,w
 22328  0693  00DA               	movwf	___flmul@temp+1
 22329  0694  0820               	movf	?__Umul8_16,w
 22330  0695  00D9               	movwf	___flmul@temp
 22331  0696  0859               	movf	___flmul@temp,w
 22332  0697  07D5               	addwf	___flmul@prod,f
 22333  0698  085A               	movf	___flmul@temp+1,w
 22334  0699  3DD6               	addwfc	___flmul@prod+1,f
 22335  069A  3000               	movlw	0
 22336  069B  3DD7               	addwfc	___flmul@prod+2,f
 22337  069C  3DD8               	addwfc	___flmul@prod+3,f
 22338  069D  0843               	movf	___flmul@b+2,w
 22339  069E  00C9               	movwf	??___flmul
 22340  069F  0849               	movf	??___flmul,w
 22341  06A0  00A0               	movwf	__Umul8_16@multiplicand
 22342  06A1  0847               	movf	___flmul@a+2,w
 22343  06A2  31A8  2003  3185   	fcall	__Umul8_16
 22344  06A5  0140               	movlb	0	; select bank0
 22345  06A6  0821               	movf	?__Umul8_16+1,w
 22346  06A7  00DA               	movwf	___flmul@temp+1
 22347  06A8  0820               	movf	?__Umul8_16,w
 22348  06A9  00D9               	movwf	___flmul@temp
 22349  06AA  0859               	movf	___flmul@temp,w
 22350  06AB  00C9               	movwf	??___flmul
 22351  06AC  085A               	movf	___flmul@temp+1,w
 22352  06AD  00CA               	movwf	??___flmul+1
 22353  06AE  01CB               	clrf	??___flmul+2
 22354  06AF  01CC               	clrf	??___flmul+3
 22355  06B0  3008               	movlw	8
 22356  06B1                     u8535:	
 22357  06B1  35C9               	lslf	??___flmul,f
 22358  06B2  0DCA               	rlf	??___flmul+1,f
 22359  06B3  0DCB               	rlf	??___flmul+2,f
 22360  06B4  0DCC               	rlf	??___flmul+3,f
 22361  06B5  0B89               	decfsz	9,f
 22362  06B6  2EB1               	goto	u8535
 22363  06B7  0849               	movf	??___flmul,w
 22364  06B8  07D5               	addwf	___flmul@prod,f
 22365  06B9  084A               	movf	??___flmul+1,w
 22366  06BA  3DD6               	addwfc	___flmul@prod+1,f
 22367  06BB  084B               	movf	??___flmul+2,w
 22368  06BC  3DD7               	addwfc	___flmul@prod+2,f
 22369  06BD  084C               	movf	??___flmul+3,w
 22370  06BE  3DD8               	addwfc	___flmul@prod+3,f
 22371  06BF  0850               	movf	___flmul@grs,w
 22372  06C0  00C9               	movwf	??___flmul
 22373  06C1  0851               	movf	___flmul@grs+1,w
 22374  06C2  00CA               	movwf	??___flmul+1
 22375  06C3  0852               	movf	___flmul@grs+2,w
 22376  06C4  00CB               	movwf	??___flmul+2
 22377  06C5  0853               	movf	___flmul@grs+3,w
 22378  06C6  00CC               	movwf	??___flmul+3
 22379  06C7  3018               	movlw	24
 22380  06C8                     u8545:	
 22381  06C8  36CC               	lsrf	??___flmul+3,f
 22382  06C9  0CCB               	rrf	??___flmul+2,f
 22383  06CA  0CCA               	rrf	??___flmul+1,f
 22384  06CB  0CC9               	rrf	??___flmul,f
 22385  06CC  0B89               	decfsz	9,f
 22386  06CD  2EC8               	goto	u8545
 22387  06CE  0849               	movf	??___flmul,w
 22388  06CF  07D5               	addwf	___flmul@prod,f
 22389  06D0  084A               	movf	??___flmul+1,w
 22390  06D1  3DD6               	addwfc	___flmul@prod+1,f
 22391  06D2  084B               	movf	??___flmul+2,w
 22392  06D3  3DD7               	addwfc	___flmul@prod+2,f
 22393  06D4  084C               	movf	??___flmul+3,w
 22394  06D5  3DD8               	addwfc	___flmul@prod+3,f
 22395  06D6  3008               	movlw	8
 22396  06D7                     u8555:	
 22397  06D7  35D0               	lslf	___flmul@grs,f
 22398  06D8  0DD1               	rlf	___flmul@grs+1,f
 22399  06D9  0DD2               	rlf	___flmul@grs+2,f
 22400  06DA  0DD3               	rlf	___flmul@grs+3,f
 22401  06DB  0B89               	decfsz	9,f
 22402  06DC  2ED7               	goto	u8555
 22403  06DD  0854               	movf	___flmul@bexp,w
 22404  06DE  074F               	addwf	___flmul@aexp,w
 22405  06DF  00C9               	movwf	??___flmul
 22406  06E0  01CA               	clrf	??___flmul+1
 22407  06E1  0DCA               	rlf	??___flmul+1,f
 22408  06E2  0849               	movf	??___flmul,w
 22409  06E3  3E82               	addlw	130
 22410  06E4  00D9               	movwf	___flmul@temp
 22411  06E5  30FF               	movlw	255
 22412  06E6  3D4A               	addwfc	??___flmul+1,w
 22413  06E7  00DA               	movwf	___flmul@temp+1
 22414  06E8                     l7170:	
 22415  06E8  1BD7               	btfsc	___flmul@prod+2,7
 22416  06E9  2EFF               	goto	l7172
 22417  06EA  3001               	movlw	1
 22418  06EB                     u8565:	
 22419  06EB  35D5               	lslf	___flmul@prod,f
 22420  06EC  0DD6               	rlf	___flmul@prod+1,f
 22421  06ED  0DD7               	rlf	___flmul@prod+2,f
 22422  06EE  0DD8               	rlf	___flmul@prod+3,f
 22423  06EF  0B89               	decfsz	9,f
 22424  06F0  2EEB               	goto	u8565
 22425  06F1  1BD3               	btfsc	___flmul@grs+3,7
 22426  06F2  1455               	bsf	___flmul@prod,0
 22427  06F3  3001               	movlw	1
 22428  06F4                     u8585:	
 22429  06F4  35D0               	lslf	___flmul@grs,f
 22430  06F5  0DD1               	rlf	___flmul@grs+1,f
 22431  06F6  0DD2               	rlf	___flmul@grs+2,f
 22432  06F7  0DD3               	rlf	___flmul@grs+3,f
 22433  06F8  0B89               	decfsz	9,f
 22434  06F9  2EF4               	goto	u8585
 22435  06FA  30FF               	movlw	255
 22436  06FB  07D9               	addwf	___flmul@temp,f
 22437  06FC  30FF               	movlw	255
 22438  06FD  3DDA               	addwfc	___flmul@temp+1,f
 22439  06FE  2EE8               	goto	l7170
 22440  06FF                     l7172:	
 22441  06FF  01CF               	clrf	___flmul@aexp
 22442  0700  1FD3               	btfss	___flmul@grs+3,7
 22443  0701  2F18               	goto	l7182
 22444  0702  30FF               	movlw	255
 22445  0703  0550               	andwf	___flmul@grs,w
 22446  0704  00C9               	movwf	??___flmul
 22447  0705  30FF               	movlw	255
 22448  0706  0551               	andwf	___flmul@grs+1,w
 22449  0707  00CA               	movwf	??___flmul+1
 22450  0708  30FF               	movlw	255
 22451  0709  0552               	andwf	___flmul@grs+2,w
 22452  070A  00CB               	movwf	??___flmul+2
 22453  070B  307F               	movlw	127
 22454  070C  0553               	andwf	___flmul@grs+3,w
 22455  070D  00CC               	movwf	??___flmul+3
 22456  070E  084C               	movf	??___flmul+3,w
 22457  070F  044B               	iorwf	??___flmul+2,w
 22458  0710  044A               	iorwf	??___flmul+1,w
 22459  0711  0449               	iorwf	??___flmul,w
 22460  0712  1903               	skipnz
 22461  0713  1855               	btfsc	___flmul@prod,0
 22462  0714  2F16               	goto	l7178
 22463  0715  2F18               	goto	l7182
 22464  0716                     l7178:	
 22465  0716  01CF               	clrf	___flmul@aexp
 22466  0717  0ACF               	incf	___flmul@aexp,f
 22467  0718                     l7182:	
 22468  0718  084F               	movf	___flmul@aexp,w
 22469  0719  1903               	btfsc	3,2
 22470  071A  2F41               	goto	l7192
 22471  071B  3001               	movlw	1
 22472  071C  07D5               	addwf	___flmul@prod,f
 22473  071D  3000               	movlw	0
 22474  071E  3DD6               	addwfc	___flmul@prod+1,f
 22475  071F  3000               	movlw	0
 22476  0720  3DD7               	addwfc	___flmul@prod+2,f
 22477  0721  3000               	movlw	0
 22478  0722  3DD8               	addwfc	___flmul@prod+3,f
 22479  0723  1C58               	btfss	___flmul@prod+3,0
 22480  0724  2F41               	goto	l7192
 22481  0725  0855               	movf	___flmul@prod,w
 22482  0726  00C9               	movwf	??___flmul
 22483  0727  0856               	movf	___flmul@prod+1,w
 22484  0728  00CA               	movwf	??___flmul+1
 22485  0729  0857               	movf	___flmul@prod+2,w
 22486  072A  00CB               	movwf	??___flmul+2
 22487  072B  0858               	movf	___flmul@prod+3,w
 22488  072C  00CC               	movwf	??___flmul+3
 22489  072D  3001               	movlw	1
 22490  072E  00CD               	movwf	??___flmul+4
 22491  072F                     u8655:	
 22492  072F  37CC               	asrf	??___flmul+3,f
 22493  0730  0CCB               	rrf	??___flmul+2,f
 22494  0731  0CCA               	rrf	??___flmul+1,f
 22495  0732  0CC9               	rrf	??___flmul,f
 22496  0733  0BCD               	decfsz	??___flmul+4,f
 22497  0734  2F2F               	goto	u8655
 22498  0735  084C               	movf	??___flmul+3,w
 22499  0736  00D8               	movwf	___flmul@prod+3
 22500  0737  084B               	movf	??___flmul+2,w
 22501  0738  00D7               	movwf	___flmul@prod+2
 22502  0739  084A               	movf	??___flmul+1,w
 22503  073A  00D6               	movwf	___flmul@prod+1
 22504  073B  0849               	movf	??___flmul,w
 22505  073C  00D5               	movwf	___flmul@prod
 22506  073D  3001               	movlw	1
 22507  073E  07D9               	addwf	___flmul@temp,f
 22508  073F  3000               	movlw	0
 22509  0740  3DDA               	addwfc	___flmul@temp+1,f
 22510  0741                     l7192:	
 22511  0741  085A               	movf	___flmul@temp+1,w
 22512  0742  3A80               	xorlw	128
 22513  0743  00C9               	movwf	??___flmul
 22514  0744  3080               	movlw	128
 22515  0745  0249               	subwf	??___flmul,w
 22516  0746  1D03               	skipz
 22517  0747  2F4A               	goto	u8665
 22518  0748  30FF               	movlw	255
 22519  0749  0259               	subwf	___flmul@temp,w
 22520  074A                     u8665:	
 22521  074A  1C03               	skipc
 22522  074B  2F56               	goto	l7196
 22523  074C  307F               	movlw	127
 22524  074D  0140               	movlb	0	; select bank0
 22525  074E  00D8               	movwf	___flmul@prod+3
 22526  074F  3080               	movlw	128
 22527  0750  00D7               	movwf	___flmul@prod+2
 22528  0751  3000               	movlw	0
 22529  0752  00D6               	movwf	___flmul@prod+1
 22530  0753  3000               	movlw	0
 22531  0754  00D5               	movwf	___flmul@prod
 22532  0755  2F80               	goto	l1435
 22533  0756                     l7196:	
 22534  0756  0140               	movlb	0	; select bank0
 22535  0757  085A               	movf	___flmul@temp+1,w
 22536  0758  3A80               	xorlw	128
 22537  0759  00C9               	movwf	??___flmul
 22538  075A  3080               	movlw	128
 22539  075B  0249               	subwf	??___flmul,w
 22540  075C  1D03               	skipz
 22541  075D  2F60               	goto	u8675
 22542  075E  3001               	movlw	1
 22543  075F  0259               	subwf	___flmul@temp,w
 22544  0760                     u8675:	
 22545  0760  1803               	skipnc
 22546  0761  2F6D               	goto	l7202
 22547  0762  3000               	movlw	0
 22548  0763  0140               	movlb	0	; select bank0
 22549  0764  00D8               	movwf	___flmul@prod+3
 22550  0765  3000               	movlw	0
 22551  0766  00D7               	movwf	___flmul@prod+2
 22552  0767  3000               	movlw	0
 22553  0768  00D6               	movwf	___flmul@prod+1
 22554  0769  3000               	movlw	0
 22555  076A  00D5               	movwf	___flmul@prod
 22556  076B  01CE               	clrf	___flmul@sign
 22557  076C  2F80               	goto	l1435
 22558  076D                     l7202:	
 22559  076D  0140               	movlb	0	; select bank0
 22560  076E  0859               	movf	___flmul@temp,w
 22561  076F  00C9               	movwf	??___flmul
 22562  0770  0849               	movf	??___flmul,w
 22563  0771  00D4               	movwf	___flmul@bexp
 22564  0772  30FF               	movlw	255
 22565  0773  05D5               	andwf	___flmul@prod,f
 22566  0774  30FF               	movlw	255
 22567  0775  05D6               	andwf	___flmul@prod+1,f
 22568  0776  307F               	movlw	127
 22569  0777  05D7               	andwf	___flmul@prod+2,f
 22570  0778  3000               	movlw	0
 22571  0779  05D8               	andwf	___flmul@prod+3,f
 22572  077A  1854               	btfsc	___flmul@bexp,0
 22573  077B  17D7               	bsf	___flmul@prod+2,7
 22574  077C  3654               	lsrf	___flmul@bexp,w
 22575  077D  00C9               	movwf	??___flmul
 22576  077E  0849               	movf	??___flmul,w
 22577  077F  00D8               	movwf	___flmul@prod+3
 22578  0780                     l1435:	
 22579  0780  084E               	movf	___flmul@sign,w
 22580  0781  00C9               	movwf	??___flmul
 22581  0782  0849               	movf	??___flmul,w
 22582  0783  04D8               	iorwf	___flmul@prod+3,f
 22583  0784  0858               	movf	___flmul@prod+3,w
 22584  0785  00C4               	movwf	?___flmul+3
 22585  0786  0857               	movf	___flmul@prod+2,w
 22586  0787  00C3               	movwf	?___flmul+2
 22587  0788  0856               	movf	___flmul@prod+1,w
 22588  0789  00C2               	movwf	?___flmul+1
 22589  078A  0855               	movf	___flmul@prod,w
 22590  078B  00C1               	movwf	?___flmul
 22591  078C  0008               	return
 22592  078D                     __end_of___flmul:	
 22593                           
 22594                           	psect	text57
 22595  2803                     __ptext57:	
 22596 ;; *************** function __Umul8_16 *****************
 22597 ;; Defined at:
 22598 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 22599 ;; Parameters:    Size  Location     Type
 22600 ;;  multiplier      1    wreg     unsigned char 
 22601 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 22602 ;; Auto vars:     Size  Location     Type
 22603 ;;  multiplier      1    8[BANK0 ] unsigned char 
 22604 ;;  word_mpld       2    6[BANK0 ] unsigned int 
 22605 ;;  product         2    4[BANK0 ] unsigned int 
 22606 ;; Return value:  Size  Location     Type
 22607 ;;                  2    0[BANK0 ] unsigned int 
 22608 ;; Registers used:
 22609 ;;		wreg, status,2, status,0
 22610 ;; Tracked objects:
 22611 ;;		On entry : 0/0
 22612 ;;		On exit  : 0/0
 22613 ;;		Unchanged: 0/0
 22614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22615 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22616 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22617 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22618 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22619 ;;Total ram usage:        9 bytes
 22620 ;; Hardware stack levels used:    1
 22621 ;; Hardware stack levels required when called:    3
 22622 ;; This function calls:
 22623 ;;		Nothing
 22624 ;; This function is called by:
 22625 ;;		___flmul
 22626 ;; This function uses a non-reentrant model
 22627 ;;
 22628                           
 22629                           
 22630                           ;psect for function __Umul8_16
 22631  2803                     __Umul8_16:	
 22632                           
 22633                           ;incstack = 0
 22634                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 22635                           ;__Umul8_16@multiplier stored from wreg
 22636  2803  0140               	movlb	0	; select bank0
 22637  2804  00A8               	movwf	__Umul8_16@multiplier
 22638  2805  01A4               	clrf	__Umul8_16@product
 22639  2806  01A5               	clrf	__Umul8_16@product+1
 22640  2807  0820               	movf	__Umul8_16@multiplicand,w
 22641  2808  00A2               	movwf	??__Umul8_16
 22642  2809  01A3               	clrf	??__Umul8_16+1
 22643  280A  0822               	movf	??__Umul8_16,w
 22644  280B  00A6               	movwf	__Umul8_16@word_mpld
 22645  280C  0823               	movf	??__Umul8_16+1,w
 22646  280D  00A7               	movwf	__Umul8_16@word_mpld+1
 22647  280E                     l6740:	
 22648  280E  1C28               	btfss	__Umul8_16@multiplier,0
 22649  280F  2814               	goto	l1520
 22650  2810  0826               	movf	__Umul8_16@word_mpld,w
 22651  2811  07A4               	addwf	__Umul8_16@product,f
 22652  2812  0827               	movf	__Umul8_16@word_mpld+1,w
 22653  2813  3DA5               	addwfc	__Umul8_16@product+1,f
 22654  2814                     l1520:	
 22655  2814  3001               	movlw	1
 22656  2815                     u7725:	
 22657  2815  35A6               	lslf	__Umul8_16@word_mpld,f
 22658  2816  0DA7               	rlf	__Umul8_16@word_mpld+1,f
 22659  2817  0B89               	decfsz	9,f
 22660  2818  2815               	goto	u7725
 22661  2819  1003               	clrc
 22662  281A  0CA8               	rrf	__Umul8_16@multiplier,f
 22663  281B  0828               	movf	__Umul8_16@multiplier,w
 22664  281C  1D03               	btfss	3,2
 22665  281D  280E               	goto	l6740
 22666  281E  0825               	movf	__Umul8_16@product+1,w
 22667  281F  00A1               	movwf	?__Umul8_16+1
 22668  2820  0824               	movf	__Umul8_16@product,w
 22669  2821  00A0               	movwf	?__Umul8_16
 22670  2822  0008               	return
 22671  2823                     __end_of__Umul8_16:	
 22672                           
 22673                           	psect	text58
 22674  1E28                     __ptext58:	
 22675 ;; *************** function ___fldiv *****************
 22676 ;; Defined at:
 22677 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 22678 ;; Parameters:    Size  Location     Type
 22679 ;;  a               4   59[BANK0 ] unsigned int 
 22680 ;;  b               4   63[BANK0 ] unsigned int 
 22681 ;; Auto vars:     Size  Location     Type
 22682 ;;  grs             4    7[BANK1 ] unsigned long 
 22683 ;;  rem             4    0[BANK1 ] unsigned long 
 22684 ;;  new_exp         2    5[BANK1 ] int 
 22685 ;;  aexp            1   12[BANK1 ] unsigned char 
 22686 ;;  bexp            1   11[BANK1 ] unsigned char 
 22687 ;;  sign            1    4[BANK1 ] unsigned char 
 22688 ;; Return value:  Size  Location     Type
 22689 ;;                  4   59[BANK0 ] unsigned char 
 22690 ;; Registers used:
 22691 ;;		wreg, status,2, status,0
 22692 ;; Tracked objects:
 22693 ;;		On entry : 0/0
 22694 ;;		On exit  : 0/0
 22695 ;;		Unchanged: 0/0
 22696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22697 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22698 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22699 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22700 ;;      Totals:         0      13      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22701 ;;Total ram usage:       26 bytes
 22702 ;; Hardware stack levels used:    1
 22703 ;; Hardware stack levels required when called:    3
 22704 ;; This function calls:
 22705 ;;		Nothing
 22706 ;; This function is called by:
 22707 ;;		_checkChannelStatus
 22708 ;;		_systemCheck
 22709 ;;		_calcRequiredPower
 22710 ;;		_getAnalogValues
 22711 ;;		_channelThing
 22712 ;;		_ftoa
 22713 ;; This function uses a non-reentrant model
 22714 ;;
 22715                           
 22716                           
 22717                           ;psect for function ___fldiv
 22718  1E28                     ___fldiv:	
 22719                           
 22720                           ;incstack = 0
 22721                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 22722  1E28  0140               	movlb	0	; select bank0
 22723  1E29  0862               	movf	___fldiv@b+3,w
 22724  1E2A  3980               	andlw	128
 22725  1E2B  00E3               	movwf	??___fldiv
 22726  1E2C  0863               	movf	??___fldiv,w
 22727  1E2D  0141               	movlb	1	; select bank1
 22728  1E2E  00A4               	movwf	___fldiv@sign^(0+128)
 22729  1E2F  0140               	movlb	0	; select bank0
 22730  1E30  3562               	lslf	___fldiv@b+3,w
 22731  1E31  00E3               	movwf	??___fldiv
 22732  1E32  0863               	movf	??___fldiv,w
 22733  1E33  0141               	movlb	1	; select bank1
 22734  1E34  00AB               	movwf	___fldiv@bexp^(0+128)
 22735  1E35  0140               	movlb	0	; select bank0
 22736  1E36  1FE1               	btfss	___fldiv@b+2,7
 22737  1E37  2E3A               	goto	l6942
 22738  1E38  0141               	movlb	1	; select bank1
 22739  1E39  142B               	bsf	___fldiv@bexp^(0+128),0
 22740  1E3A                     l6942:	
 22741  1E3A  0141               	movlb	1	; select bank1
 22742  1E3B  082B               	movf	___fldiv@bexp^(0+128),w
 22743  1E3C  1903               	btfsc	3,2
 22744  1E3D  2E4E               	goto	l6952
 22745  1E3E  0A2B               	incf	___fldiv@bexp^(0+128),w
 22746  1E3F  1D03               	btfss	3,2
 22747  1E40  2E4A               	goto	l6948
 22748  1E41  3000               	movlw	0
 22749  1E42  0140               	movlb	0	; select bank0
 22750  1E43  00E2               	movwf	___fldiv@b+3
 22751  1E44  3000               	movlw	0
 22752  1E45  00E1               	movwf	___fldiv@b+2
 22753  1E46  3000               	movlw	0
 22754  1E47  00E0               	movwf	___fldiv@b+1
 22755  1E48  3000               	movlw	0
 22756  1E49  00DF               	movwf	___fldiv@b
 22757  1E4A                     l6948:	
 22758  1E4A  0140               	movlb	0	; select bank0
 22759  1E4B  17E1               	bsf	___fldiv@b+2,7
 22760  1E4C  01E2               	clrf	___fldiv@b+3
 22761  1E4D  2E57               	goto	l6954
 22762  1E4E                     l6952:	
 22763  1E4E  3000               	movlw	0
 22764  1E4F  0140               	movlb	0	; select bank0
 22765  1E50  00E2               	movwf	___fldiv@b+3
 22766  1E51  3000               	movlw	0
 22767  1E52  00E1               	movwf	___fldiv@b+2
 22768  1E53  3000               	movlw	0
 22769  1E54  00E0               	movwf	___fldiv@b+1
 22770  1E55  3000               	movlw	0
 22771  1E56  00DF               	movwf	___fldiv@b
 22772  1E57                     l6954:	
 22773  1E57  085E               	movf	___fldiv@a+3,w
 22774  1E58  3980               	andlw	128
 22775  1E59  00E3               	movwf	??___fldiv
 22776  1E5A  0863               	movf	??___fldiv,w
 22777  1E5B  0141               	movlb	1	; select bank1
 22778  1E5C  06A4               	xorwf	___fldiv@sign^(0+128),f
 22779  1E5D  0140               	movlb	0	; select bank0
 22780  1E5E  355E               	lslf	___fldiv@a+3,w
 22781  1E5F  00E3               	movwf	??___fldiv
 22782  1E60  0863               	movf	??___fldiv,w
 22783  1E61  0141               	movlb	1	; select bank1
 22784  1E62  00AC               	movwf	___fldiv@aexp^(0+128)
 22785  1E63  0140               	movlb	0	; select bank0
 22786  1E64  1FDD               	btfss	___fldiv@a+2,7
 22787  1E65  2E68               	goto	l6962
 22788  1E66  0141               	movlb	1	; select bank1
 22789  1E67  142C               	bsf	___fldiv@aexp^(0+128),0
 22790  1E68                     l6962:	
 22791  1E68  0141               	movlb	1	; select bank1
 22792  1E69  082C               	movf	___fldiv@aexp^(0+128),w
 22793  1E6A  1903               	btfsc	3,2
 22794  1E6B  2E7C               	goto	l6972
 22795  1E6C  0A2C               	incf	___fldiv@aexp^(0+128),w
 22796  1E6D  1D03               	btfss	3,2
 22797  1E6E  2E78               	goto	l6968
 22798  1E6F  3000               	movlw	0
 22799  1E70  0140               	movlb	0	; select bank0
 22800  1E71  00DE               	movwf	___fldiv@a+3
 22801  1E72  3000               	movlw	0
 22802  1E73  00DD               	movwf	___fldiv@a+2
 22803  1E74  3000               	movlw	0
 22804  1E75  00DC               	movwf	___fldiv@a+1
 22805  1E76  3000               	movlw	0
 22806  1E77  00DB               	movwf	___fldiv@a
 22807  1E78                     l6968:	
 22808  1E78  0140               	movlb	0	; select bank0
 22809  1E79  17DD               	bsf	___fldiv@a+2,7
 22810  1E7A  01DE               	clrf	___fldiv@a+3
 22811  1E7B  2E85               	goto	l1383
 22812  1E7C                     l6972:	
 22813  1E7C  3000               	movlw	0
 22814  1E7D  0140               	movlb	0	; select bank0
 22815  1E7E  00DE               	movwf	___fldiv@a+3
 22816  1E7F  3000               	movlw	0
 22817  1E80  00DD               	movwf	___fldiv@a+2
 22818  1E81  3000               	movlw	0
 22819  1E82  00DC               	movwf	___fldiv@a+1
 22820  1E83  3000               	movlw	0
 22821  1E84  00DB               	movwf	___fldiv@a
 22822  1E85                     l1383:	
 22823  1E85  085E               	movf	___fldiv@a+3,w
 22824  1E86  045D               	iorwf	___fldiv@a+2,w
 22825  1E87  045C               	iorwf	___fldiv@a+1,w
 22826  1E88  045B               	iorwf	___fldiv@a,w
 22827  1E89  1D03               	skipz
 22828  1E8A  2EA6               	goto	l6982
 22829  1E8B  3000               	movlw	0
 22830  1E8C  00E2               	movwf	___fldiv@b+3
 22831  1E8D  3000               	movlw	0
 22832  1E8E  00E1               	movwf	___fldiv@b+2
 22833  1E8F  3000               	movlw	0
 22834  1E90  00E0               	movwf	___fldiv@b+1
 22835  1E91  3000               	movlw	0
 22836  1E92  00DF               	movwf	___fldiv@b
 22837  1E93  3080               	movlw	128
 22838  1E94  04E1               	iorwf	___fldiv@b+2,f
 22839  1E95  307F               	movlw	127
 22840  1E96  04E2               	iorwf	___fldiv@b+3,f
 22841  1E97                     L14:	
 22842  1E97  0141               	movlb	1	; select bank1
 22843  1E98  0824               	movf	___fldiv@sign^(0+128),w
 22844  1E99  0140               	movlb	0	; select bank0
 22845  1E9A  00E3               	movwf	??___fldiv
 22846  1E9B  0863               	movf	??___fldiv,w
 22847  1E9C  04E2               	iorwf	___fldiv@b+3,f
 22848  1E9D  0862               	movf	___fldiv@b+3,w
 22849  1E9E  00DE               	movwf	?___fldiv+3
 22850  1E9F  0861               	movf	___fldiv@b+2,w
 22851  1EA0  00DD               	movwf	?___fldiv+2
 22852  1EA1  0860               	movf	___fldiv@b+1,w
 22853  1EA2  00DC               	movwf	?___fldiv+1
 22854  1EA3  085F               	movf	___fldiv@b,w
 22855  1EA4  00DB               	movwf	?___fldiv
 22856  1EA5  0008               	return
 22857  1EA6                     l6982:	
 22858  1EA6  0141               	movlb	1	; select bank1
 22859  1EA7  082B               	movf	___fldiv@bexp^(0+128),w
 22860  1EA8  1D03               	btfss	3,2
 22861  1EA9  2EB4               	goto	l6988
 22862  1EAA  3000               	movlw	0
 22863  1EAB  0140               	movlb	0	; select bank0
 22864  1EAC  00DE               	movwf	?___fldiv+3
 22865  1EAD  3000               	movlw	0
 22866  1EAE  00DD               	movwf	?___fldiv+2
 22867  1EAF  3000               	movlw	0
 22868  1EB0  00DC               	movwf	?___fldiv+1
 22869  1EB1  3000               	movlw	0
 22870  1EB2  00DB               	movwf	?___fldiv
 22871  1EB3  0008               	return
 22872  1EB4                     l6988:	
 22873  1EB4  082B               	movf	___fldiv@bexp^(0+128),w
 22874  1EB5  0140               	movlb	0	; select bank0
 22875  1EB6  00E3               	movwf	??___fldiv
 22876  1EB7  01E4               	clrf	??___fldiv+1
 22877  1EB8  0864               	movf	??___fldiv+1,w
 22878  1EB9  00E6               	movwf	??___fldiv+3
 22879  1EBA  0141               	movlb	1	; select bank1
 22880  1EBB  082C               	movf	___fldiv@aexp^(0+128),w
 22881  1EBC  0140               	movlb	0	; select bank0
 22882  1EBD  0263               	subwf	??___fldiv,w
 22883  1EBE  00E5               	movwf	??___fldiv+2
 22884  1EBF  1C03               	skipc
 22885  1EC0  03E6               	decf	??___fldiv+3,f
 22886  1EC1  0865               	movf	??___fldiv+2,w
 22887  1EC2  3E7F               	addlw	127
 22888  1EC3  0141               	movlb	1	; select bank1
 22889  1EC4  00A5               	movwf	___fldiv@new_exp^(0+128)
 22890  1EC5  3000               	movlw	0
 22891  1EC6  0140               	movlb	0	; select bank0
 22892  1EC7  3D66               	addwfc	??___fldiv+3,w
 22893  1EC8  0141               	movlb	1	; select bank1
 22894  1EC9  00A6               	movwf	(___fldiv@new_exp+1)^(0+128)
 22895  1ECA  0140               	movlb	0	; select bank0
 22896  1ECB  0862               	movf	___fldiv@b+3,w
 22897  1ECC  0141               	movlb	1	; select bank1
 22898  1ECD  00A3               	movwf	(___fldiv@rem+3)^(0+128)
 22899  1ECE  0140               	movlb	0	; select bank0
 22900  1ECF  0861               	movf	___fldiv@b+2,w
 22901  1ED0  0141               	movlb	1	; select bank1
 22902  1ED1  00A2               	movwf	(___fldiv@rem+2)^(0+128)
 22903  1ED2  0140               	movlb	0	; select bank0
 22904  1ED3  0860               	movf	___fldiv@b+1,w
 22905  1ED4  0141               	movlb	1	; select bank1
 22906  1ED5  00A1               	movwf	(___fldiv@rem+1)^(0+128)
 22907  1ED6  0140               	movlb	0	; select bank0
 22908  1ED7  085F               	movf	___fldiv@b,w
 22909  1ED8  0141               	movlb	1	; select bank1
 22910  1ED9  00A0               	movwf	___fldiv@rem^(0+128)
 22911  1EDA  3000               	movlw	0
 22912  1EDB  0140               	movlb	0	; select bank0
 22913  1EDC  00E2               	movwf	___fldiv@b+3
 22914  1EDD  3000               	movlw	0
 22915  1EDE  00E1               	movwf	___fldiv@b+2
 22916  1EDF  3000               	movlw	0
 22917  1EE0  00E0               	movwf	___fldiv@b+1
 22918  1EE1  3000               	movlw	0
 22919  1EE2  00DF               	movwf	___fldiv@b
 22920  1EE3  3000               	movlw	0
 22921  1EE4  0141               	movlb	1	; select bank1
 22922  1EE5  00AA               	movwf	(___fldiv@grs+3)^(0+128)
 22923  1EE6  3000               	movlw	0
 22924  1EE7  00A9               	movwf	(___fldiv@grs+2)^(0+128)
 22925  1EE8  3000               	movlw	0
 22926  1EE9  00A8               	movwf	(___fldiv@grs+1)^(0+128)
 22927  1EEA  3000               	movlw	0
 22928  1EEB  00A7               	movwf	___fldiv@grs^(0+128)
 22929  1EEC  01AC               	clrf	___fldiv@aexp^(0+128)
 22930  1EED                     l7016:	
 22931  1EED  301A               	movlw	26
 22932  1EEE  022C               	subwf	___fldiv@aexp^(0+128),w
 22933  1EEF  1803               	btfsc	3,0
 22934  1EF0  2F40               	goto	l7018
 22935  1EF1  082C               	movf	___fldiv@aexp^(0+128),w
 22936  1EF2  1903               	btfsc	3,2
 22937  1EF3  2F10               	goto	l7008
 22938  1EF4  3001               	movlw	1
 22939  1EF5                     u8235:	
 22940  1EF5  35A0               	lslf	___fldiv@rem^(0+128),f
 22941  1EF6  0DA1               	rlf	(___fldiv@rem+1)^(0+128),f
 22942  1EF7  0DA2               	rlf	(___fldiv@rem+2)^(0+128),f
 22943  1EF8  0DA3               	rlf	(___fldiv@rem+3)^(0+128),f
 22944  1EF9  0B89               	decfsz	9,f
 22945  1EFA  2EF5               	goto	u8235
 22946  1EFB  3001               	movlw	1
 22947  1EFC                     u8245:	
 22948  1EFC  0140               	movlb	0	; select bank0
 22949  1EFD  35DF               	lslf	___fldiv@b,f
 22950  1EFE  0DE0               	rlf	___fldiv@b+1,f
 22951  1EFF  0DE1               	rlf	___fldiv@b+2,f
 22952  1F00  0DE2               	rlf	___fldiv@b+3,f
 22953  1F01  0B89               	decfsz	9,f
 22954  1F02  2EFC               	goto	u8245
 22955  1F03  0141               	movlb	1	; select bank1
 22956  1F04  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 22957  1F05  2F08               	goto	l7006
 22958  1F06  0140               	movlb	0	; select bank0
 22959  1F07  145F               	bsf	___fldiv@b,0
 22960  1F08                     l7006:	
 22961  1F08  3001               	movlw	1
 22962  1F09                     u8265:	
 22963  1F09  0141               	movlb	1	; select bank1
 22964  1F0A  35A7               	lslf	___fldiv@grs^(0+128),f
 22965  1F0B  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 22966  1F0C  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 22967  1F0D  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 22968  1F0E  0B89               	decfsz	9,f
 22969  1F0F  2F09               	goto	u8265
 22970  1F10                     l7008:	
 22971  1F10  0140               	movlb	0	; select bank0
 22972  1F11  085E               	movf	___fldiv@a+3,w
 22973  1F12  0141               	movlb	1	; select bank1
 22974  1F13  0223               	subwf	(___fldiv@rem+3)^(0+128),w
 22975  1F14  1D03               	skipz
 22976  1F15  2F26               	goto	u8275
 22977  1F16  0140               	movlb	0	; select bank0
 22978  1F17  085D               	movf	___fldiv@a+2,w
 22979  1F18  0141               	movlb	1	; select bank1
 22980  1F19  0222               	subwf	(___fldiv@rem+2)^(0+128),w
 22981  1F1A  1D03               	skipz
 22982  1F1B  2F26               	goto	u8275
 22983  1F1C  0140               	movlb	0	; select bank0
 22984  1F1D  085C               	movf	___fldiv@a+1,w
 22985  1F1E  0141               	movlb	1	; select bank1
 22986  1F1F  0221               	subwf	(___fldiv@rem+1)^(0+128),w
 22987  1F20  1D03               	skipz
 22988  1F21  2F26               	goto	u8275
 22989  1F22  0140               	movlb	0	; select bank0
 22990  1F23  085B               	movf	___fldiv@a,w
 22991  1F24  0141               	movlb	1	; select bank1
 22992  1F25  0220               	subwf	___fldiv@rem^(0+128),w
 22993  1F26                     u8275:	
 22994  1F26  1C03               	skipc
 22995  1F27  2F39               	goto	l7014
 22996  1F28  172A               	bsf	(___fldiv@grs^(0+128)+3),6
 22997  1F29  0140               	movlb	0	; select bank0
 22998  1F2A  085B               	movf	___fldiv@a,w
 22999  1F2B  0141               	movlb	1	; select bank1
 23000  1F2C  02A0               	subwf	___fldiv@rem^(0+128),f
 23001  1F2D  0140               	movlb	0	; select bank0
 23002  1F2E  085C               	movf	___fldiv@a+1,w
 23003  1F2F  0141               	movlb	1	; select bank1
 23004  1F30  3BA1               	subwfb	(___fldiv@rem+1)^(0+128),f
 23005  1F31  0140               	movlb	0	; select bank0
 23006  1F32  085D               	movf	___fldiv@a+2,w
 23007  1F33  0141               	movlb	1	; select bank1
 23008  1F34  3BA2               	subwfb	(___fldiv@rem+2)^(0+128),f
 23009  1F35  0140               	movlb	0	; select bank0
 23010  1F36  085E               	movf	___fldiv@a+3,w
 23011  1F37  0141               	movlb	1	; select bank1
 23012  1F38  3BA3               	subwfb	(___fldiv@rem+3)^(0+128),f
 23013  1F39                     l7014:	
 23014  1F39  3001               	movlw	1
 23015  1F3A  0140               	movlb	0	; select bank0
 23016  1F3B  00E3               	movwf	??___fldiv
 23017  1F3C  0863               	movf	??___fldiv,w
 23018  1F3D  0141               	movlb	1	; select bank1
 23019  1F3E  07AC               	addwf	___fldiv@aexp^(0+128),f
 23020  1F3F  2EED               	goto	l7016
 23021  1F40                     l7018:	
 23022  1F40  0823               	movf	(___fldiv@rem+3)^(0+128),w
 23023  1F41  0422               	iorwf	(___fldiv@rem+2)^(0+128),w
 23024  1F42  0421               	iorwf	(___fldiv@rem+1)^(0+128),w
 23025  1F43  0420               	iorwf	___fldiv@rem^(0+128),w
 23026  1F44  1D03               	btfss	3,2
 23027  1F45  1427               	bsf	___fldiv@grs^(0+128),0
 23028  1F46                     l7032:	
 23029  1F46  0140               	movlb	0	; select bank0
 23030  1F47  1BE1               	btfsc	___fldiv@b+2,7
 23031  1F48  2F62               	goto	l7034
 23032  1F49  3001               	movlw	1
 23033  1F4A                     u8305:	
 23034  1F4A  35DF               	lslf	___fldiv@b,f
 23035  1F4B  0DE0               	rlf	___fldiv@b+1,f
 23036  1F4C  0DE1               	rlf	___fldiv@b+2,f
 23037  1F4D  0DE2               	rlf	___fldiv@b+3,f
 23038  1F4E  0B89               	decfsz	9,f
 23039  1F4F  2F4A               	goto	u8305
 23040  1F50  0141               	movlb	1	; select bank1
 23041  1F51  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 23042  1F52  2F55               	goto	l7028
 23043  1F53  0140               	movlb	0	; select bank0
 23044  1F54  145F               	bsf	___fldiv@b,0
 23045  1F55                     l7028:	
 23046  1F55  3001               	movlw	1
 23047  1F56                     u8325:	
 23048  1F56  0141               	movlb	1	; select bank1
 23049  1F57  35A7               	lslf	___fldiv@grs^(0+128),f
 23050  1F58  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 23051  1F59  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 23052  1F5A  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 23053  1F5B  0B89               	decfsz	9,f
 23054  1F5C  2F56               	goto	u8325
 23055  1F5D  30FF               	movlw	255
 23056  1F5E  07A5               	addwf	___fldiv@new_exp^(0+128),f
 23057  1F5F  30FF               	movlw	255
 23058  1F60  3DA6               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 23059  1F61  2F46               	goto	l7032
 23060  1F62                     l7034:	
 23061  1F62  0141               	movlb	1	; select bank1
 23062  1F63  01AC               	clrf	___fldiv@aexp^(0+128)
 23063  1F64  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 23064  1F65  2F84               	goto	l7044
 23065  1F66  30FF               	movlw	255
 23066  1F67  0527               	andwf	___fldiv@grs^(0+128),w
 23067  1F68  0140               	movlb	0	; select bank0
 23068  1F69  00E3               	movwf	??___fldiv
 23069  1F6A  30FF               	movlw	255
 23070  1F6B  0141               	movlb	1	; select bank1
 23071  1F6C  0528               	andwf	(___fldiv@grs+1)^(0+128),w
 23072  1F6D  0140               	movlb	0	; select bank0
 23073  1F6E  00E4               	movwf	??___fldiv+1
 23074  1F6F  30FF               	movlw	255
 23075  1F70  0141               	movlb	1	; select bank1
 23076  1F71  0529               	andwf	(___fldiv@grs+2)^(0+128),w
 23077  1F72  0140               	movlb	0	; select bank0
 23078  1F73  00E5               	movwf	??___fldiv+2
 23079  1F74  307F               	movlw	127
 23080  1F75  0141               	movlb	1	; select bank1
 23081  1F76  052A               	andwf	(___fldiv@grs+3)^(0+128),w
 23082  1F77  0140               	movlb	0	; select bank0
 23083  1F78  00E6               	movwf	??___fldiv+3
 23084  1F79  0866               	movf	??___fldiv+3,w
 23085  1F7A  0465               	iorwf	??___fldiv+2,w
 23086  1F7B  0464               	iorwf	??___fldiv+1,w
 23087  1F7C  0463               	iorwf	??___fldiv,w
 23088  1F7D  1903               	skipnz
 23089  1F7E  185F               	btfsc	___fldiv@b,0
 23090  1F7F  2F81               	goto	l7040
 23091  1F80  2F84               	goto	l7044
 23092  1F81                     l7040:	
 23093  1F81  0141               	movlb	1	; select bank1
 23094  1F82  01AC               	clrf	___fldiv@aexp^(0+128)
 23095  1F83  0AAC               	incf	___fldiv@aexp^(0+128),f
 23096  1F84                     l7044:	
 23097  1F84  0141               	movlb	1	; select bank1
 23098  1F85  082C               	movf	___fldiv@aexp^(0+128),w
 23099  1F86  1903               	btfsc	3,2
 23100  1F87  2FB0               	goto	l7054
 23101  1F88  3001               	movlw	1
 23102  1F89  0140               	movlb	0	; select bank0
 23103  1F8A  07DF               	addwf	___fldiv@b,f
 23104  1F8B  3000               	movlw	0
 23105  1F8C  3DE0               	addwfc	___fldiv@b+1,f
 23106  1F8D  3000               	movlw	0
 23107  1F8E  3DE1               	addwfc	___fldiv@b+2,f
 23108  1F8F  3000               	movlw	0
 23109  1F90  3DE2               	addwfc	___fldiv@b+3,f
 23110  1F91  1C62               	btfss	___fldiv@b+3,0
 23111  1F92  2FB0               	goto	l7054
 23112  1F93  085F               	movf	___fldiv@b,w
 23113  1F94  00E3               	movwf	??___fldiv
 23114  1F95  0860               	movf	___fldiv@b+1,w
 23115  1F96  00E4               	movwf	??___fldiv+1
 23116  1F97  0861               	movf	___fldiv@b+2,w
 23117  1F98  00E5               	movwf	??___fldiv+2
 23118  1F99  0862               	movf	___fldiv@b+3,w
 23119  1F9A  00E6               	movwf	??___fldiv+3
 23120  1F9B  3001               	movlw	1
 23121  1F9C  00E7               	movwf	??___fldiv+4
 23122  1F9D                     u8395:	
 23123  1F9D  37E6               	asrf	??___fldiv+3,f
 23124  1F9E  0CE5               	rrf	??___fldiv+2,f
 23125  1F9F  0CE4               	rrf	??___fldiv+1,f
 23126  1FA0  0CE3               	rrf	??___fldiv,f
 23127  1FA1  0BE7               	decfsz	??___fldiv+4,f
 23128  1FA2  2F9D               	goto	u8395
 23129  1FA3  0866               	movf	??___fldiv+3,w
 23130  1FA4  00E2               	movwf	___fldiv@b+3
 23131  1FA5  0865               	movf	??___fldiv+2,w
 23132  1FA6  00E1               	movwf	___fldiv@b+2
 23133  1FA7  0864               	movf	??___fldiv+1,w
 23134  1FA8  00E0               	movwf	___fldiv@b+1
 23135  1FA9  0863               	movf	??___fldiv,w
 23136  1FAA  00DF               	movwf	___fldiv@b
 23137  1FAB  3001               	movlw	1
 23138  1FAC  0141               	movlb	1	; select bank1
 23139  1FAD  07A5               	addwf	___fldiv@new_exp^(0+128),f
 23140  1FAE  3000               	movlw	0
 23141  1FAF  3DA6               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 23142  1FB0                     l7054:	
 23143  1FB0  0141               	movlb	1	; select bank1
 23144  1FB1  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 23145  1FB2  3A80               	xorlw	128
 23146  1FB3  0140               	movlb	0	; select bank0
 23147  1FB4  00E3               	movwf	??___fldiv
 23148  1FB5  3080               	movlw	128
 23149  1FB6  0263               	subwf	??___fldiv,w
 23150  1FB7  1D03               	skipz
 23151  1FB8  2FBC               	goto	u8405
 23152  1FB9  30FF               	movlw	255
 23153  1FBA  0141               	movlb	1	; select bank1
 23154  1FBB  0225               	subwf	___fldiv@new_exp^(0+128),w
 23155  1FBC                     u8405:	
 23156  1FBC  1C03               	skipc
 23157  1FBD  2FCC               	goto	l1404
 23158  1FBE  30FF               	movlw	255
 23159  1FBF  0141               	movlb	1	; select bank1
 23160  1FC0  00A5               	movwf	___fldiv@new_exp^(0+128)
 23161  1FC1  3000               	movlw	0
 23162  1FC2  00A6               	movwf	(___fldiv@new_exp^(0+128)+1)
 23163  1FC3  3000               	movlw	0
 23164  1FC4  0140               	movlb	0	; select bank0
 23165  1FC5  00E2               	movwf	___fldiv@b+3
 23166  1FC6  3000               	movlw	0
 23167  1FC7  00E1               	movwf	___fldiv@b+2
 23168  1FC8  3000               	movlw	0
 23169  1FC9  00E0               	movwf	___fldiv@b+1
 23170  1FCA  3000               	movlw	0
 23171  1FCB  00DF               	movwf	___fldiv@b
 23172  1FCC                     l1404:	
 23173  1FCC  0141               	movlb	1	; select bank1
 23174  1FCD  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 23175  1FCE  3A80               	xorlw	128
 23176  1FCF  0140               	movlb	0	; select bank0
 23177  1FD0  00E3               	movwf	??___fldiv
 23178  1FD1  3080               	movlw	128
 23179  1FD2  0263               	subwf	??___fldiv,w
 23180  1FD3  1D03               	skipz
 23181  1FD4  2FD8               	goto	u8415
 23182  1FD5  3001               	movlw	1
 23183  1FD6  0141               	movlb	1	; select bank1
 23184  1FD7  0225               	subwf	___fldiv@new_exp^(0+128),w
 23185  1FD8                     u8415:	
 23186  1FD8  1803               	skipnc
 23187  1FD9  2FE8               	goto	l1405
 23188  1FDA  0141               	movlb	1	; select bank1
 23189  1FDB  01A5               	clrf	___fldiv@new_exp^(0+128)
 23190  1FDC  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
 23191  1FDD  3000               	movlw	0
 23192  1FDE  0140               	movlb	0	; select bank0
 23193  1FDF  00E2               	movwf	___fldiv@b+3
 23194  1FE0  3000               	movlw	0
 23195  1FE1  00E1               	movwf	___fldiv@b+2
 23196  1FE2  3000               	movlw	0
 23197  1FE3  00E0               	movwf	___fldiv@b+1
 23198  1FE4  3000               	movlw	0
 23199  1FE5  00DF               	movwf	___fldiv@b
 23200  1FE6  0141               	movlb	1	; select bank1
 23201  1FE7  01A4               	clrf	___fldiv@sign^(0+128)
 23202  1FE8                     l1405:	
 23203  1FE8  0141               	movlb	1	; select bank1
 23204  1FE9  0825               	movf	___fldiv@new_exp^(0+128),w
 23205  1FEA  0140               	movlb	0	; select bank0
 23206  1FEB  00E3               	movwf	??___fldiv
 23207  1FEC  0863               	movf	??___fldiv,w
 23208  1FED  0141               	movlb	1	; select bank1
 23209  1FEE  00AB               	movwf	___fldiv@bexp^(0+128)
 23210  1FEF  1C2B               	btfss	___fldiv@bexp^(0+128),0
 23211  1FF0  2FF4               	goto	l7068
 23212  1FF1  0140               	movlb	0	; select bank0
 23213  1FF2  17E1               	bsf	___fldiv@b+2,7
 23214  1FF3  2FF9               	goto	l1407
 23215  1FF4                     l7068:	
 23216  1FF4  307F               	movlw	127
 23217  1FF5  0140               	movlb	0	; select bank0
 23218  1FF6  00E3               	movwf	??___fldiv
 23219  1FF7  0863               	movf	??___fldiv,w
 23220  1FF8  05E1               	andwf	___fldiv@b+2,f
 23221  1FF9                     l1407:	
 23222  1FF9  0141               	movlb	1	; select bank1
 23223  1FFA  362B               	lsrf	___fldiv@bexp^(0+128),w
 23224  1FFB  0140               	movlb	0	; select bank0
 23225  1FFC  00E3               	movwf	??___fldiv
 23226  1FFD  0863               	movf	??___fldiv,w
 23227  1FFE  00E2               	movwf	___fldiv@b+3
 23228  1FFF  2E97               	goto	L14
 23229  2000                     __end_of___fldiv:	
 23230                           
 23231                           	psect	text59
 23232  33B4                     __ptext59:	
 23233 ;; *************** function _OLED_loadSpecialChars *****************
 23234 ;; Defined at:
 23235 ;;		line 155 in file "oled.c"
 23236 ;; Parameters:    Size  Location     Type
 23237 ;;		None
 23238 ;; Auto vars:     Size  Location     Type
 23239 ;;  special        32    8[BANK0 ] unsigned char [32]
 23240 ;;  n               1   40[BANK0 ] unsigned char 
 23241 ;; Return value:  Size  Location     Type
 23242 ;;                  1    wreg      void 
 23243 ;; Registers used:
 23244 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 23245 ;; Tracked objects:
 23246 ;;		On entry : 0/0
 23247 ;;		On exit  : 0/0
 23248 ;;		Unchanged: 0/0
 23249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23250 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23251 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23252 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23253 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23254 ;;Total ram usage:       34 bytes
 23255 ;; Hardware stack levels used:    1
 23256 ;; Hardware stack levels required when called:    6
 23257 ;; This function calls:
 23258 ;;		_OLED_command
 23259 ;;		_OLED_write
 23260 ;; This function is called by:
 23261 ;;		_main
 23262 ;; This function uses a non-reentrant model
 23263 ;;
 23264                           
 23265                           
 23266                           ;psect for function _OLED_loadSpecialChars
 23267  33B4                     _OLED_loadSpecialChars:	
 23268                           
 23269                           ;oled.c: 157:  uint8_t special[] = {0x18, 0x18, 0x03, 0x04, 0x04, 0x04, 0x03, 0x00,
 23270                           
 23271                           ;incstack = 0
 23272                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 23273  33B4  3020               	movlw	low OLED_loadSpecialChars@F7970
 23274  33B5  0086               	movwf	6
 23275  33B6  3003               	movlw	high OLED_loadSpecialChars@F7970
 23276  33B7  0087               	movwf	7
 23277  33B8  3028               	movlw	low OLED_loadSpecialChars@special
 23278  33B9  0084               	movwf	4
 23279  33BA  3000               	movlw	high OLED_loadSpecialChars@special
 23280  33BB  0085               	movwf	5
 23281  33BC  3020               	movlw	32
 23282  33BD  0140               	movlb	0	; select bank0
 23283  33BE  00A7               	movwf	??_OLED_loadSpecialChars
 23284  33BF                     u9780:	
 23285  33BF  0016               	moviw fsr1++
 23286  33C0  001A               	movwi fsr0++
 23287  33C1  0BA7               	decfsz	??_OLED_loadSpecialChars,f
 23288  33C2  2BBF               	goto	u9780
 23289                           
 23290                           ;oled.c: 162:  uint8_t n;;oled.c: 164:  OLED_command(0x40 + 8);
 23291  33C3  3048               	movlw	72
 23292  33C4  31B2  22E2  31B3   	fcall	_OLED_command
 23293                           
 23294                           ;oled.c: 165:  for(n = 0; n < sizeof(special); n++) {
 23295  33C7  0140               	movlb	0	; select bank0
 23296  33C8  01C8               	clrf	OLED_loadSpecialChars@n
 23297  33C9                     l8136:	
 23298                           
 23299                           ;oled.c: 166:   OLED_write(special[n]);
 23300  33C9  0848               	movf	OLED_loadSpecialChars@n,w
 23301  33CA  3E28               	addlw	(low (OLED_loadSpecialChars@special| 0))& (0+255)
 23302  33CB  0086               	movwf	6
 23303  33CC  0187               	clrf	7
 23304  33CD  0801               	movf	1,w
 23305  33CE  31B2  22F6  31B3   	fcall	_OLED_write
 23306                           
 23307                           ;oled.c: 167:  }
 23308  33D1  3001               	movlw	1
 23309  33D2  0140               	movlb	0	; select bank0
 23310  33D3  00A7               	movwf	??_OLED_loadSpecialChars
 23311  33D4  0827               	movf	??_OLED_loadSpecialChars,w
 23312  33D5  07C8               	addwf	OLED_loadSpecialChars@n,f
 23313  33D6  3020               	movlw	32
 23314  33D7  0248               	subwf	OLED_loadSpecialChars@n,w
 23315  33D8  1803               	btfsc	3,0
 23316  33D9  0008               	return
 23317  33DA  2BC9               	goto	l8136
 23318  33DB                     __end_of_OLED_loadSpecialChars:	
 23319                           
 23320                           	psect	text60
 23321  32F6                     __ptext60:	
 23322 ;; *************** function _OLED_write *****************
 23323 ;; Defined at:
 23324 ;;		line 76 in file "oled.c"
 23325 ;; Parameters:    Size  Location     Type
 23326 ;;  value           1    wreg     unsigned char 
 23327 ;; Auto vars:     Size  Location     Type
 23328 ;;  value           1    6[BANK0 ] unsigned char 
 23329 ;; Return value:  Size  Location     Type
 23330 ;;                  1    wreg      void 
 23331 ;; Registers used:
 23332 ;;		wreg, status,2, status,0, pclath, cstack
 23333 ;; Tracked objects:
 23334 ;;		On entry : 0/0
 23335 ;;		On exit  : 0/0
 23336 ;;		Unchanged: 0/0
 23337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23339 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23341 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23342 ;;Total ram usage:        1 bytes
 23343 ;; Hardware stack levels used:    1
 23344 ;; Hardware stack levels required when called:    5
 23345 ;; This function calls:
 23346 ;;		_OLED_send
 23347 ;;		_OLED_waitForReady
 23348 ;; This function is called by:
 23349 ;;		_OLED_print_xy
 23350 ;;		_OLED_loadSpecialChars
 23351 ;;		_OLED_print
 23352 ;; This function uses a non-reentrant model
 23353 ;;
 23354                           
 23355                           
 23356                           ;psect for function _OLED_write
 23357  32F6                     _OLED_write:	
 23358                           
 23359                           ;incstack = 0
 23360                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 23361                           ;OLED_write@value stored from wreg
 23362  32F6  0140               	movlb	0	; select bank0
 23363  32F7  00A6               	movwf	OLED_write@value
 23364                           
 23365                           ;oled.c: 76: void OLED_write(uint8_t value);oled.c: 77: {;oled.c: 78:  OLED_send(value, 
      +                          1);
 23366  32F8  01A3               	clrf	OLED_send@mode
 23367  32F9  0AA3               	incf	OLED_send@mode,f
 23368  32FA  0826               	movf	OLED_write@value,w
 23369  32FB  31B3  2342  31B2   	fcall	_OLED_send
 23370                           
 23371                           ;oled.c: 79:  OLED_waitForReady();
 23372  32FE  31B3  238D         	fcall	_OLED_waitForReady
 23373  3300  0008               	return
 23374  3301                     __end_of_OLED_write:	
 23375                           
 23376                           	psect	text61
 23377  2BB5                     __ptext61:	
 23378 ;; *************** function _OLED_init *****************
 23379 ;; Defined at:
 23380 ;;		line 82 in file "oled.c"
 23381 ;; Parameters:    Size  Location     Type
 23382 ;;		None
 23383 ;; Auto vars:     Size  Location     Type
 23384 ;;		None
 23385 ;; Return value:  Size  Location     Type
 23386 ;;                  1    wreg      void 
 23387 ;; Registers used:
 23388 ;;		wreg, status,2, status,0, pclath, cstack
 23389 ;; Tracked objects:
 23390 ;;		On entry : 0/0
 23391 ;;		On exit  : 0/0
 23392 ;;		Unchanged: 0/0
 23393 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23396 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23397 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23398 ;;Total ram usage:        1 bytes
 23399 ;; Hardware stack levels used:    1
 23400 ;; Hardware stack levels required when called:    6
 23401 ;; This function calls:
 23402 ;;		_OLED_command
 23403 ;;		_OLED_write4bits
 23404 ;; This function is called by:
 23405 ;;		_main
 23406 ;; This function uses a non-reentrant model
 23407 ;;
 23408                           
 23409                           
 23410                           ;psect for function _OLED_init
 23411  2BB5                     _OLED_init:	
 23412                           
 23413                           ;oled.c: 84:  LATBbits.LATB4 = 0;
 23414                           
 23415                           ;incstack = 0
 23416                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 23417  2BB5  0140               	movlb	0	; select bank0
 23418  2BB6  1219               	bcf	25,4	;volatile
 23419                           
 23420                           ;oled.c: 85:  LATBbits.LATB2 = 0;
 23421  2BB7  1119               	bcf	25,2	;volatile
 23422                           
 23423                           ;oled.c: 86:  LATBbits.LATB3 = 0;
 23424  2BB8  1199               	bcf	25,3	;volatile
 23425                           
 23426                           ;oled.c: 88:  _delay((unsigned long)((50)*(4000000UL/4000.0)));
 23427  2BB9  3041               	movlw	65
 23428  2BBA  0140               	movlb	0	; select bank0
 23429  2BBB  00A7               	movwf	??_OLED_init
 23430  2BBC  30EE               	movlw	238
 23431  2BBD                     u10577:	
 23432  2BBD  0B89               	decfsz	9,f
 23433  2BBE  2BBD               	goto	u10577
 23434  2BBF  0BA7               	decfsz	??_OLED_init,f
 23435  2BC0  2BBD               	goto	u10577
 23436  2BC1  0000               	nop
 23437                           
 23438                           ;oled.c: 92:  LATBbits.LATB1 = 0;
 23439  2BC2  0140               	movlb	0	; select bank0
 23440  2BC3  1099               	bcf	25,1	;volatile
 23441                           
 23442                           ;oled.c: 93:  LATBbits.LATB0 = 0;
 23443  2BC4  1019               	bcf	25,0	;volatile
 23444                           
 23445                           ;oled.c: 94:  LATCbits.LATC5 = 0;
 23446  2BC5  129A               	bcf	26,5	;volatile
 23447                           
 23448                           ;oled.c: 95:  LATCbits.LATC4 = 0;
 23449  2BC6  121A               	bcf	26,4	;volatile
 23450                           
 23451                           ;oled.c: 106:  OLED_write4bits(0x03);
 23452  2BC7  3003               	movlw	3
 23453  2BC8  31B6  260C  31AB   	fcall	_OLED_write4bits
 23454                           
 23455                           ;oled.c: 107:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23456  2BCB  3007               	movlw	7
 23457  2BCC  0140               	movlb	0	; select bank0
 23458  2BCD  00A7               	movwf	??_OLED_init
 23459  2BCE  307D               	movlw	125
 23460  2BCF                     u10587:	
 23461  2BCF  0B89               	decfsz	9,f
 23462  2BD0  2BCF               	goto	u10587
 23463  2BD1  0BA7               	decfsz	??_OLED_init,f
 23464  2BD2  2BCF               	goto	u10587
 23465                           
 23466                           ;oled.c: 108:  OLED_write4bits(0x08);
 23467  2BD3  3008               	movlw	8
 23468  2BD4  31B6  260C  31AB   	fcall	_OLED_write4bits
 23469                           
 23470                           ;oled.c: 109:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23471  2BD7  3007               	movlw	7
 23472  2BD8  0140               	movlb	0	; select bank0
 23473  2BD9  00A7               	movwf	??_OLED_init
 23474  2BDA  307D               	movlw	125
 23475  2BDB                     u10597:	
 23476  2BDB  0B89               	decfsz	9,f
 23477  2BDC  2BDB               	goto	u10597
 23478  2BDD  0BA7               	decfsz	??_OLED_init,f
 23479  2BDE  2BDB               	goto	u10597
 23480                           
 23481                           ;oled.c: 111:  OLED_write4bits(0x02);
 23482  2BDF  3002               	movlw	2
 23483  2BE0  31B6  260C  31AB   	fcall	_OLED_write4bits
 23484                           
 23485                           ;oled.c: 112:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23486  2BE3  3007               	movlw	7
 23487  2BE4  0140               	movlb	0	; select bank0
 23488  2BE5  00A7               	movwf	??_OLED_init
 23489  2BE6  307D               	movlw	125
 23490  2BE7                     u10607:	
 23491  2BE7  0B89               	decfsz	9,f
 23492  2BE8  2BE7               	goto	u10607
 23493  2BE9  0BA7               	decfsz	??_OLED_init,f
 23494  2BEA  2BE7               	goto	u10607
 23495                           
 23496                           ;oled.c: 113:  OLED_write4bits(0x02);
 23497  2BEB  3002               	movlw	2
 23498  2BEC  31B6  260C  31AB   	fcall	_OLED_write4bits
 23499                           
 23500                           ;oled.c: 114:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23501  2BEF  3007               	movlw	7
 23502  2BF0  0140               	movlb	0	; select bank0
 23503  2BF1  00A7               	movwf	??_OLED_init
 23504  2BF2  307D               	movlw	125
 23505  2BF3                     u10617:	
 23506  2BF3  0B89               	decfsz	9,f
 23507  2BF4  2BF3               	goto	u10617
 23508  2BF5  0BA7               	decfsz	??_OLED_init,f
 23509  2BF6  2BF3               	goto	u10617
 23510                           
 23511                           ;oled.c: 115:  OLED_write4bits(0x08);
 23512  2BF7  3008               	movlw	8
 23513  2BF8  31B6  260C  31AB   	fcall	_OLED_write4bits
 23514                           
 23515                           ;oled.c: 116:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23516  2BFB  3007               	movlw	7
 23517  2BFC  0140               	movlb	0	; select bank0
 23518  2BFD  00A7               	movwf	??_OLED_init
 23519  2BFE  307D               	movlw	125
 23520  2BFF                     u10627:	
 23521  2BFF  0B89               	decfsz	9,f
 23522  2C00  2BFF               	goto	u10627
 23523  2C01  0BA7               	decfsz	??_OLED_init,f
 23524  2C02  2BFF               	goto	u10627
 23525                           
 23526                           ;oled.c: 118:  OLED_command(0x08);
 23527  2C03  3008               	movlw	8
 23528  2C04  31B2  22E2  31AB   	fcall	_OLED_command
 23529                           
 23530                           ;oled.c: 119:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23531  2C07  3007               	movlw	7
 23532  2C08  0140               	movlb	0	; select bank0
 23533  2C09  00A7               	movwf	??_OLED_init
 23534  2C0A  307D               	movlw	125
 23535  2C0B                     u10637:	
 23536  2C0B  0B89               	decfsz	9,f
 23537  2C0C  2C0B               	goto	u10637
 23538  2C0D  0BA7               	decfsz	??_OLED_init,f
 23539  2C0E  2C0B               	goto	u10637
 23540                           
 23541                           ;oled.c: 120:  OLED_command(0x01);
 23542  2C0F  3001               	movlw	1
 23543  2C10  31B2  22E2  31AB   	fcall	_OLED_command
 23544                           
 23545                           ;oled.c: 121:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23546  2C13  3007               	movlw	7
 23547  2C14  0140               	movlb	0	; select bank0
 23548  2C15  00A7               	movwf	??_OLED_init
 23549  2C16  307D               	movlw	125
 23550  2C17                     u10647:	
 23551  2C17  0B89               	decfsz	9,f
 23552  2C18  2C17               	goto	u10647
 23553  2C19  0BA7               	decfsz	??_OLED_init,f
 23554  2C1A  2C17               	goto	u10647
 23555                           
 23556                           ;oled.c: 122:  OLED_command(0x06);
 23557  2C1B  3006               	movlw	6
 23558  2C1C  31B2  22E2  31AB   	fcall	_OLED_command
 23559                           
 23560                           ;oled.c: 123:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23561  2C1F  3007               	movlw	7
 23562  2C20  0140               	movlb	0	; select bank0
 23563  2C21  00A7               	movwf	??_OLED_init
 23564  2C22  307D               	movlw	125
 23565  2C23                     u10657:	
 23566  2C23  0B89               	decfsz	9,f
 23567  2C24  2C23               	goto	u10657
 23568  2C25  0BA7               	decfsz	??_OLED_init,f
 23569  2C26  2C23               	goto	u10657
 23570                           
 23571                           ;oled.c: 124:  OLED_command(0x02);
 23572  2C27  3002               	movlw	2
 23573  2C28  31B2  22E2  31AB   	fcall	_OLED_command
 23574                           
 23575                           ;oled.c: 125:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23576  2C2B  3007               	movlw	7
 23577  2C2C  0140               	movlb	0	; select bank0
 23578  2C2D  00A7               	movwf	??_OLED_init
 23579  2C2E  307D               	movlw	125
 23580  2C2F                     u10667:	
 23581  2C2F  0B89               	decfsz	9,f
 23582  2C30  2C2F               	goto	u10667
 23583  2C31  0BA7               	decfsz	??_OLED_init,f
 23584  2C32  2C2F               	goto	u10667
 23585                           
 23586                           ;oled.c: 126:  OLED_command(0x0C);
 23587  2C33  300C               	movlw	12
 23588  2C34  31B2  22E2  31AB   	fcall	_OLED_command
 23589                           
 23590                           ;oled.c: 127:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 23591  2C37  3007               	movlw	7
 23592  2C38  0140               	movlb	0	; select bank0
 23593  2C39  00A7               	movwf	??_OLED_init
 23594  2C3A  307D               	movlw	125
 23595  2C3B                     u10677:	
 23596  2C3B  0B89               	decfsz	9,f
 23597  2C3C  2C3B               	goto	u10677
 23598  2C3D  0BA7               	decfsz	??_OLED_init,f
 23599  2C3E  2C3B               	goto	u10677
 23600  2C3F  0008               	return
 23601  2C40                     __end_of_OLED_init:	
 23602                           
 23603                           	psect	text62
 23604  32E2                     __ptext62:	
 23605 ;; *************** function _OLED_command *****************
 23606 ;; Defined at:
 23607 ;;		line 70 in file "oled.c"
 23608 ;; Parameters:    Size  Location     Type
 23609 ;;  value           1    wreg     unsigned char 
 23610 ;; Auto vars:     Size  Location     Type
 23611 ;;  value           1    6[BANK0 ] unsigned char 
 23612 ;; Return value:  Size  Location     Type
 23613 ;;                  1    wreg      void 
 23614 ;; Registers used:
 23615 ;;		wreg, status,2, status,0, pclath, cstack
 23616 ;; Tracked objects:
 23617 ;;		On entry : 0/0
 23618 ;;		On exit  : 0/0
 23619 ;;		Unchanged: 0/0
 23620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23622 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23624 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23625 ;;Total ram usage:        1 bytes
 23626 ;; Hardware stack levels used:    1
 23627 ;; Hardware stack levels required when called:    5
 23628 ;; This function calls:
 23629 ;;		_OLED_send
 23630 ;;		_OLED_waitForReady
 23631 ;; This function is called by:
 23632 ;;		_main
 23633 ;;		_OLED_off
 23634 ;;		_OLED_init
 23635 ;;		_OLED_print_xy
 23636 ;;		_OLED_loadSpecialChars
 23637 ;;		_viewErrorMessage
 23638 ;;		_menu
 23639 ;;		_paging
 23640 ;;		_returnToPage
 23641 ;;		_systemCheck
 23642 ;;		_OLED_setCursor
 23643 ;; This function uses a non-reentrant model
 23644 ;;
 23645                           
 23646                           
 23647                           ;psect for function _OLED_command
 23648  32E2                     _OLED_command:	
 23649                           
 23650                           ;incstack = 0
 23651                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 23652                           ;OLED_command@value stored from wreg
 23653  32E2  0140               	movlb	0	; select bank0
 23654  32E3  00A6               	movwf	OLED_command@value
 23655                           
 23656                           ;oled.c: 70: void OLED_command(uint8_t value);oled.c: 71: {;oled.c: 72:  OLED_send(value
      +                          , 0);
 23657  32E4  01A3               	clrf	OLED_send@mode
 23658  32E5  0826               	movf	OLED_command@value,w
 23659  32E6  31B3  2342  31B2   	fcall	_OLED_send
 23660                           
 23661                           ;oled.c: 73:  OLED_waitForReady();
 23662  32E9  31B3  238D         	fcall	_OLED_waitForReady
 23663  32EB  0008               	return
 23664  32EC                     __end_of_OLED_command:	
 23665                           
 23666                           	psect	text63
 23667  338D                     __ptext63:	
 23668 ;; *************** function _OLED_waitForReady *****************
 23669 ;; Defined at:
 23670 ;;		line 42 in file "oled.c"
 23671 ;; Parameters:    Size  Location     Type
 23672 ;;		None
 23673 ;; Auto vars:     Size  Location     Type
 23674 ;;  busy            1    0[BANK0 ] unsigned char 
 23675 ;; Return value:  Size  Location     Type
 23676 ;;                  1    wreg      void 
 23677 ;; Registers used:
 23678 ;;		wreg, status,2, status,0
 23679 ;; Tracked objects:
 23680 ;;		On entry : 0/0
 23681 ;;		On exit  : 0/0
 23682 ;;		Unchanged: 0/0
 23683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23685 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23687 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23688 ;;Total ram usage:        1 bytes
 23689 ;; Hardware stack levels used:    1
 23690 ;; Hardware stack levels required when called:    3
 23691 ;; This function calls:
 23692 ;;		Nothing
 23693 ;; This function is called by:
 23694 ;;		_OLED_command
 23695 ;;		_OLED_write
 23696 ;; This function uses a non-reentrant model
 23697 ;;
 23698                           
 23699                           
 23700                           ;psect for function _OLED_waitForReady
 23701  338D                     _OLED_waitForReady:	
 23702                           
 23703                           ;oled.c: 46:  TRISCbits.TRISC4 = 1;
 23704                           
 23705                           ;incstack = 0
 23706                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0]
 23707  338D  0140               	movlb	0	; select bank0
 23708  338E  1614               	bsf	20,4	;volatile
 23709                           
 23710                           ;oled.c: 47:  LATBbits.LATB4 = 0;
 23711  338F  1219               	bcf	25,4	;volatile
 23712                           
 23713                           ;oled.c: 48:  LATBbits.LATB3 = 1;
 23714  3390  1599               	bsf	25,3	;volatile
 23715  3391                     l180:	
 23716                           ;oled.c: 50:  do {
 23717                           
 23718                           
 23719                           ;oled.c: 51:   LATBbits.LATB2 = 0;
 23720  3391  1119               	bcf	25,2	;volatile
 23721                           
 23722                           ;oled.c: 52:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 23723  3392  3003               	movlw	3
 23724  3393                     u10687:	
 23725  3393  0B89               	decfsz	9,f
 23726  3394  2B93               	goto	u10687
 23727  3395  0000               	nop
 23728                           
 23729                           ;oled.c: 53:   LATBbits.LATB2 = 1;
 23730  3396  0140               	movlb	0	; select bank0
 23731  3397  1519               	bsf	25,2	;volatile
 23732                           
 23733                           ;oled.c: 55:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 23734  3398  3003               	movlw	3
 23735  3399                     u10697:	
 23736  3399  0B89               	decfsz	9,f
 23737  339A  2B99               	goto	u10697
 23738  339B  0000               	nop
 23739                           
 23740                           ;oled.c: 56:   busy = PORTCbits.RC4;
 23741  339C  3000               	movlw	0
 23742  339D  0140               	movlb	0	; select bank0
 23743  339E  1A0E               	btfsc	14,4	;volatile
 23744  339F  3001               	movlw	1
 23745  33A0  00A0               	movwf	OLED_waitForReady@busy
 23746                           
 23747                           ;oled.c: 58:   LATBbits.LATB2 = 0;
 23748  33A1  1119               	bcf	25,2	;volatile
 23749                           
 23750                           ;oled.c: 59:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 23751  33A2  3003               	movlw	3
 23752  33A3                     u10707:	
 23753  33A3  0B89               	decfsz	9,f
 23754  33A4  2BA3               	goto	u10707
 23755  33A5  0000               	nop
 23756                           
 23757                           ;oled.c: 61:   LATBbits.LATB2 = 1;
 23758  33A6  0140               	movlb	0	; select bank0
 23759  33A7  1519               	bsf	25,2	;volatile
 23760                           
 23761                           ;oled.c: 62:   _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 23762  33A8  3010               	movlw	16
 23763  33A9                     u10717:	
 23764  33A9  0B89               	decfsz	9,f
 23765  33AA  2BA9               	goto	u10717
 23766  33AB  3200               	nop2
 23767                           
 23768                           ;oled.c: 63:   LATBbits.LATB2 = 0;
 23769  33AC  0140               	movlb	0	; select bank0
 23770  33AD  1119               	bcf	25,2	;volatile
 23771                           
 23772                           ;oled.c: 64:  } while (busy);
 23773  33AE  0820               	movf	OLED_waitForReady@busy,w
 23774  33AF  1D03               	btfss	3,2
 23775  33B0  2B91               	goto	l180
 23776                           
 23777                           ;oled.c: 66:  TRISCbits.TRISC4 = 0;
 23778  33B1  1214               	bcf	20,4	;volatile
 23779                           
 23780                           ;oled.c: 67:  LATBbits.LATB3 = 0;
 23781  33B2  1199               	bcf	25,3	;volatile
 23782  33B3  0008               	return
 23783  33B4                     __end_of_OLED_waitForReady:	
 23784                           
 23785                           	psect	text64
 23786  3342                     __ptext64:	
 23787 ;; *************** function _OLED_send *****************
 23788 ;; Defined at:
 23789 ;;		line 31 in file "oled.c"
 23790 ;; Parameters:    Size  Location     Type
 23791 ;;  value           1    wreg     unsigned char 
 23792 ;;  mode            1    3[BANK0 ] unsigned char 
 23793 ;; Auto vars:     Size  Location     Type
 23794 ;;  value           1    5[BANK0 ] unsigned char 
 23795 ;; Return value:  Size  Location     Type
 23796 ;;                  1    wreg      void 
 23797 ;; Registers used:
 23798 ;;		wreg, status,2, status,0, pclath, cstack
 23799 ;; Tracked objects:
 23800 ;;		On entry : 0/0
 23801 ;;		On exit  : 0/0
 23802 ;;		Unchanged: 0/0
 23803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23804 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23805 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23807 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23808 ;;Total ram usage:        3 bytes
 23809 ;; Hardware stack levels used:    1
 23810 ;; Hardware stack levels required when called:    4
 23811 ;; This function calls:
 23812 ;;		_OLED_write4bits
 23813 ;; This function is called by:
 23814 ;;		_OLED_command
 23815 ;;		_OLED_write
 23816 ;; This function uses a non-reentrant model
 23817 ;;
 23818                           
 23819                           
 23820                           ;psect for function _OLED_send
 23821  3342                     _OLED_send:	
 23822                           
 23823                           ;incstack = 0
 23824                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 23825                           ;OLED_send@value stored from wreg
 23826  3342  0140               	movlb	0	; select bank0
 23827  3343  00A5               	movwf	OLED_send@value
 23828                           
 23829                           ;oled.c: 31: void OLED_send(uint8_t value, uint8_t mode);oled.c: 32: {;oled.c: 33:  LATB
      +                          bits.LATB4 = mode;
 23830  3344  0C23               	rrf	OLED_send@mode,w
 23831  3345  1C03               	skipc
 23832  3346  1219               	bcf	25,4	;volatile
 23833  3347  1803               	skipnc
 23834  3348  1619               	bsf	25,4	;volatile
 23835                           
 23836                           ;oled.c: 34:  LATBbits.LATB3 = 0;
 23837  3349  1199               	bcf	25,3	;volatile
 23838                           
 23839                           ;oled.c: 36:  OLED_write4bits(value >> 4);
 23840  334A  0825               	movf	OLED_send@value,w
 23841  334B  00A4               	movwf	??_OLED_send
 23842  334C  3004               	movlw	4
 23843  334D                     u7265:	
 23844  334D  36A4               	lsrf	??_OLED_send,f
 23845  334E  0B89               	decfsz	9,f
 23846  334F  2B4D               	goto	u7265
 23847  3350  0824               	movf	??_OLED_send,w
 23848  3351  31B6  260C  31B3   	fcall	_OLED_write4bits
 23849                           
 23850                           ;oled.c: 37:  OLED_write4bits(value);
 23851  3354  0140               	movlb	0	; select bank0
 23852  3355  0825               	movf	OLED_send@value,w
 23853  3356  31B6  260C         	fcall	_OLED_write4bits
 23854  3358  0008               	return
 23855  3359                     __end_of_OLED_send:	
 23856                           
 23857                           	psect	text65
 23858  360C                     __ptext65:	
 23859 ;; *************** function _OLED_write4bits *****************
 23860 ;; Defined at:
 23861 ;;		line 18 in file "oled.c"
 23862 ;; Parameters:    Size  Location     Type
 23863 ;;  value           1    wreg     unsigned char 
 23864 ;; Auto vars:     Size  Location     Type
 23865 ;;  value           1    2[BANK0 ] unsigned char 
 23866 ;; Return value:  Size  Location     Type
 23867 ;;                  1    wreg      void 
 23868 ;; Registers used:
 23869 ;;		wreg, status,2, status,0
 23870 ;; Tracked objects:
 23871 ;;		On entry : 0/0
 23872 ;;		On exit  : 0/0
 23873 ;;		Unchanged: 0/0
 23874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23878 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23879 ;;Total ram usage:        3 bytes
 23880 ;; Hardware stack levels used:    1
 23881 ;; Hardware stack levels required when called:    3
 23882 ;; This function calls:
 23883 ;;		Nothing
 23884 ;; This function is called by:
 23885 ;;		_OLED_send
 23886 ;;		_OLED_init
 23887 ;; This function uses a non-reentrant model
 23888 ;;
 23889                           
 23890                           
 23891                           ;psect for function _OLED_write4bits
 23892  360C                     _OLED_write4bits:	
 23893                           
 23894                           ;incstack = 0
 23895                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0]
 23896                           ;OLED_write4bits@value stored from wreg
 23897  360C  0140               	movlb	0	; select bank0
 23898  360D  00A2               	movwf	OLED_write4bits@value
 23899                           
 23900                           ;oled.c: 18: void OLED_write4bits(uint8_t value);oled.c: 19: {;oled.c: 20:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 23901  360E  0822               	movf	OLED_write4bits@value,w
 23902  360F  3901               	andlw	1
 23903  3610  00A0               	movwf	??_OLED_write4bits
 23904  3611  0DA0               	rlf	??_OLED_write4bits,f
 23905  3612  0819               	movf	25,w	;volatile
 23906  3613  0620               	xorwf	??_OLED_write4bits,w
 23907  3614  39FD               	andlw	-3
 23908  3615  0620               	xorwf	??_OLED_write4bits,w
 23909  3616  0099               	movwf	25	;volatile
 23910                           
 23911                           ;oled.c: 21:  LATBbits.LATB0 = (value >> 1) & 0x01;
 23912  3617  0822               	movf	OLED_write4bits@value,w
 23913  3618  00A0               	movwf	??_OLED_write4bits
 23914  3619  3001               	movlw	1
 23915  361A                     u7235:	
 23916  361A  36A0               	lsrf	??_OLED_write4bits,f
 23917  361B  0B89               	decfsz	9,f
 23918  361C  2E1A               	goto	u7235
 23919  361D  3001               	movlw	1
 23920  361E  0520               	andwf	??_OLED_write4bits,w
 23921  361F  00A1               	movwf	??_OLED_write4bits+1
 23922  3620  0819               	movf	25,w	;volatile
 23923  3621  0621               	xorwf	??_OLED_write4bits+1,w
 23924  3622  39FE               	andlw	-2
 23925  3623  0621               	xorwf	??_OLED_write4bits+1,w
 23926  3624  0099               	movwf	25	;volatile
 23927                           
 23928                           ;oled.c: 22:  LATCbits.LATC5 = (value >> 2) & 0x01;
 23929  3625  0822               	movf	OLED_write4bits@value,w
 23930  3626  00A0               	movwf	??_OLED_write4bits
 23931  3627  3002               	movlw	2
 23932  3628                     u7245:	
 23933  3628  36A0               	lsrf	??_OLED_write4bits,f
 23934  3629  0B89               	decfsz	9,f
 23935  362A  2E28               	goto	u7245
 23936  362B  0820               	movf	??_OLED_write4bits,w
 23937  362C  3901               	andlw	1
 23938  362D  00A1               	movwf	??_OLED_write4bits+1
 23939  362E  0EA1               	swapf	??_OLED_write4bits+1,f
 23940  362F  0DA1               	rlf	??_OLED_write4bits+1,f
 23941  3630  081A               	movf	26,w	;volatile
 23942  3631  0621               	xorwf	??_OLED_write4bits+1,w
 23943  3632  39DF               	andlw	-33
 23944  3633  0621               	xorwf	??_OLED_write4bits+1,w
 23945  3634  009A               	movwf	26	;volatile
 23946                           
 23947                           ;oled.c: 23:  LATCbits.LATC4 = (value >> 3) & 0x01;
 23948  3635  0822               	movf	OLED_write4bits@value,w
 23949  3636  00A0               	movwf	??_OLED_write4bits
 23950  3637  3003               	movlw	3
 23951  3638                     u7255:	
 23952  3638  36A0               	lsrf	??_OLED_write4bits,f
 23953  3639  0B89               	decfsz	9,f
 23954  363A  2E38               	goto	u7255
 23955  363B  0820               	movf	??_OLED_write4bits,w
 23956  363C  3901               	andlw	1
 23957  363D  00A1               	movwf	??_OLED_write4bits+1
 23958  363E  0EA1               	swapf	??_OLED_write4bits+1,f
 23959  363F  081A               	movf	26,w	;volatile
 23960  3640  0621               	xorwf	??_OLED_write4bits+1,w
 23961  3641  39EF               	andlw	-17
 23962  3642  0621               	xorwf	??_OLED_write4bits+1,w
 23963  3643  009A               	movwf	26	;volatile
 23964                           
 23965                           ;oled.c: 25:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 23966  3644  3010               	movlw	16
 23967  3645                     u10727:	
 23968  3645  0B89               	decfsz	9,f
 23969  3646  2E45               	goto	u10727
 23970  3647  3200               	nop2
 23971                           
 23972                           ;oled.c: 26:  LATBbits.LATB2 = 1;
 23973  3648  0140               	movlb	0	; select bank0
 23974  3649  1519               	bsf	25,2	;volatile
 23975                           
 23976                           ;oled.c: 27:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 23977  364A  3010               	movlw	16
 23978  364B                     u10737:	
 23979  364B  0B89               	decfsz	9,f
 23980  364C  2E4B               	goto	u10737
 23981  364D  3200               	nop2
 23982                           
 23983                           ;oled.c: 28:  LATBbits.LATB2 = 0;
 23984  364E  0140               	movlb	0	; select bank0
 23985  364F  1119               	bcf	25,2	;volatile
 23986  3650  0008               	return
 23987  3651                     __end_of_OLED_write4bits:	
 23988                           
 23989                           	psect	intentry
 23990  0004                     __pintentry:	
 23991 ;; *************** function _ISR *****************
 23992 ;; Defined at:
 23993 ;;		line 22 in file "interrupt.c"
 23994 ;; Parameters:    Size  Location     Type
 23995 ;;		None
 23996 ;; Auto vars:     Size  Location     Type
 23997 ;;		None
 23998 ;; Return value:  Size  Location     Type
 23999 ;;                  1    wreg      void 
 24000 ;; Registers used:
 24001 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24002 ;; Tracked objects:
 24003 ;;		On entry : 0/0
 24004 ;;		On exit  : 0/0
 24005 ;;		Unchanged: 0/0
 24006 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24007 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24009 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24010 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24011 ;;Total ram usage:        4 bytes
 24012 ;; Hardware stack levels used:    1
 24013 ;; Hardware stack levels required when called:    2
 24014 ;; This function calls:
 24015 ;;		_pushButtonISR
 24016 ;;		_rotISR
 24017 ;;		_uartReceiveISR
 24018 ;; This function is called by:
 24019 ;;		Interrupt level 1
 24020 ;; This function uses a non-reentrant model
 24021 ;;
 24022                           
 24023  0004                     _ISR:	
 24024                           
 24025                           ;incstack = 0
 24026  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 24027                           
 24028                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24029  0005  3180               	pagesel	$
 24030                           
 24031                           ;interrupt.c: 24:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 24032  0006  014E               	movlb	14	; select bank14
 24033  0007  1A96               	btfsc	22,5	;volatile
 24034  0008  1E8C               	btfss	12,5	;volatile
 24035  0009  281C               	goto	i1l266
 24036                           
 24037                           ;interrupt.c: 27:   tick10ms++;
 24038  000A  3001               	movlw	1
 24039  000B  00F8               	movwf	??_ISR
 24040  000C  0878               	movf	??_ISR,w
 24041  000D  0142               	movlb	2	; select bank2
 24042  000E  07EE               	addwf	_tick10ms^(0+256),f	;volatile
 24043                           
 24044                           ;interrupt.c: 28:   if (pbState == PB_WAIT)
 24045  000F  3004               	movlw	4
 24046  0010  067D               	xorwf	_pbState,w	;volatile
 24047  0011  1D03               	btfss	3,2
 24048  0012  2816               	goto	i1l6360
 24049                           
 24050                           ;interrupt.c: 29:    pushButtonISR();
 24051  0013  31A8  2023  3180   	fcall	_pushButtonISR
 24052  0016                     i1l6360:	
 24053                           
 24054                           ;interrupt.c: 30:   TMR0 = 178;
 24055  0016  30B2               	movlw	178
 24056  0017  014B               	movlb	11	; select bank11
 24057  0018  009C               	movwf	28	;volatile
 24058                           
 24059                           ;interrupt.c: 31:   PIR0bits.TMR0IF = 0;
 24060  0019  014E               	movlb	14	; select bank14
 24061  001A  128C               	bcf	12,5	;volatile
 24062                           
 24063                           ;interrupt.c: 32:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 24064  001B  286C               	goto	i1l279
 24065  001C                     i1l266:	
 24066  001C  1A16               	btfsc	22,4	;volatile
 24067  001D  1E0C               	btfss	12,4	;volatile
 24068  001E  2838               	goto	i1l269
 24069                           
 24070                           ;interrupt.c: 34:   if (IOCAFbits.IOCAF7 == 1) {
 24071  001F  017E               	movlb	62	; select bank62
 24072  0020  1FBF               	btfss	63,7	;volatile
 24073  0021  2827               	goto	i1l6372
 24074                           
 24075                           ;interrupt.c: 35:    pushButtonISR();
 24076  0022  31A8  2023  3180   	fcall	_pushButtonISR
 24077                           
 24078                           ;interrupt.c: 36:    IOCAFbits.IOCAF7 = 0;
 24079  0025  017E               	movlb	62	; select bank62
 24080  0026  13BF               	bcf	63,7	;volatile
 24081  0027                     i1l6372:	
 24082                           
 24083                           ;interrupt.c: 38:   if (IOCAFbits.IOCAF4 == 1) {
 24084  0027  1E3F               	btfss	63,4	;volatile
 24085  0028  282E               	goto	i1l6378
 24086                           
 24087                           ;interrupt.c: 39:    rotISR();
 24088  0029  31B7  27B6  3180   	fcall	_rotISR
 24089                           
 24090                           ;interrupt.c: 40:    IOCAFbits.IOCAF4 = 0;
 24091  002C  017E               	movlb	62	; select bank62
 24092  002D  123F               	bcf	63,4	;volatile
 24093  002E                     i1l6378:	
 24094                           
 24095                           ;interrupt.c: 42:   if (IOCAFbits.IOCAF5 == 1) {
 24096  002E  1EBF               	btfss	63,5	;volatile
 24097  002F  2835               	goto	i1l6384
 24098                           
 24099                           ;interrupt.c: 43:    rotISR();
 24100  0030  31B7  27B6  3180   	fcall	_rotISR
 24101                           
 24102                           ;interrupt.c: 44:    IOCAFbits.IOCAF5 = 0;
 24103  0033  017E               	movlb	62	; select bank62
 24104  0034  12BF               	bcf	63,5	;volatile
 24105  0035                     i1l6384:	
 24106                           
 24107                           ;interrupt.c: 46:   PIR0bits.IOCIF = 0;
 24108  0035  014E               	movlb	14	; select bank14
 24109  0036  120C               	bcf	12,4	;volatile
 24110                           
 24111                           ;interrupt.c: 47:  } else if (INTCONbits.PEIE == 1) {
 24112  0037  286C               	goto	i1l279
 24113  0038                     i1l269:	
 24114  0038  1F0B               	btfss	11,6	;volatile
 24115  0039  286C               	goto	i1l279
 24116                           
 24117                           ;interrupt.c: 48:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 24118  003A  181A               	btfsc	26,0	;volatile
 24119  003B  1C10               	btfss	16,0	;volatile
 24120  003C  2865               	goto	i1l275
 24121                           
 24122                           ;interrupt.c: 51:    if (tick100ms++ >= 1000000000UL)
 24123  003D  0144               	movlb	4	; select bank4
 24124  003E  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 24125  003F  00FB               	movwf	??_ISR+3
 24126  0040  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 24127  0041  00FA               	movwf	??_ISR+2
 24128  0042  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 24129  0043  00F9               	movwf	??_ISR+1
 24130  0044  0832               	movf	_tick100ms^(0+512),w	;volatile
 24131  0045  00F8               	movwf	??_ISR
 24132  0046  3001               	movlw	1
 24133  0047  07B2               	addwf	_tick100ms^(0+512),f	;volatile
 24134  0048  3000               	movlw	0
 24135  0049  3DB3               	addwfc	(_tick100ms+1)^(0+512),f	;volatile
 24136  004A  3DB4               	addwfc	(_tick100ms+2)^(0+512),f	;volatile
 24137  004B  3DB5               	addwfc	(_tick100ms+3)^(0+512),f	;volatile
 24138  004C  3000               	movlw	0
 24139  004D  0278               	subwf	??_ISR,w
 24140  004E  30CA               	movlw	202
 24141  004F  3B79               	subwfb	??_ISR+1,w
 24142  0050  309A               	movlw	154
 24143  0051  3B7A               	subwfb	??_ISR+2,w
 24144  0052  303B               	movlw	59
 24145  0053  3B7B               	subwfb	??_ISR+3,w
 24146  0054  1C03               	btfss	3,0
 24147  0055  285E               	goto	i1l6394
 24148                           
 24149                           ;interrupt.c: 52:     tick100ms = 0;
 24150  0056  3000               	movlw	0
 24151  0057  00B5               	movwf	(_tick100ms+3)^(0+512)	;volatile
 24152  0058  3000               	movlw	0
 24153  0059  00B4               	movwf	(_tick100ms+2)^(0+512)	;volatile
 24154  005A  3000               	movlw	0
 24155  005B  00B3               	movwf	(_tick100ms+1)^(0+512)	;volatile
 24156  005C  3000               	movlw	0
 24157  005D  00B2               	movwf	_tick100ms^(0+512)	;volatile
 24158  005E                     i1l6394:	
 24159                           
 24160                           ;interrupt.c: 53:    TMR1 = 53035;
 24161  005E  30CF               	movlw	207
 24162  005F  008D               	movwf	13	;volatile
 24163  0060  302B               	movlw	43
 24164  0061  008C               	movwf	12	;volatile
 24165                           
 24166                           ;interrupt.c: 54:    PIR4bits.TMR1IF = 0;
 24167  0062  014E               	movlb	14	; select bank14
 24168  0063  1010               	bcf	16,0	;volatile
 24169                           
 24170                           ;interrupt.c: 55:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 24171  0064  286C               	goto	i1l279
 24172  0065                     i1l275:	
 24173  0065  1A99               	btfsc	25,5	;volatile
 24174  0066  1E8F               	btfss	15,5	;volatile
 24175  0067  286C               	goto	i1l279
 24176                           
 24177                           ;interrupt.c: 56:    uartReceiveISR();
 24178  0068  31B6  2697         	fcall	_uartReceiveISR
 24179                           
 24180                           ;interrupt.c: 57:    PIR3bits.RC1IF = 0;
 24181  006A  014E               	movlb	14	; select bank14
 24182  006B  128F               	bcf	15,5	;volatile
 24183  006C                     i1l279:	
 24184  006C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 24185  006D  0009               	retfie
 24186  006E                     __end_of_ISR:	
 24187                           
 24188                           	psect	text67
 24189  3697                     __ptext67:	
 24190 ;; *************** function _uartReceiveISR *****************
 24191 ;; Defined at:
 24192 ;;		line 21 in file "uart.c"
 24193 ;; Parameters:    Size  Location     Type
 24194 ;;		None
 24195 ;; Auto vars:     Size  Location     Type
 24196 ;;		None
 24197 ;; Return value:  Size  Location     Type
 24198 ;;                  1    wreg      void 
 24199 ;; Registers used:
 24200 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24201 ;; Tracked objects:
 24202 ;;		On entry : 0/0
 24203 ;;		On exit  : 0/0
 24204 ;;		Unchanged: 0/0
 24205 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24208 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24209 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24210 ;;Total ram usage:        1 bytes
 24211 ;; Hardware stack levels used:    1
 24212 ;; Hardware stack levels required when called:    1
 24213 ;; This function calls:
 24214 ;;		_strncpy
 24215 ;; This function is called by:
 24216 ;;		_ISR
 24217 ;; This function uses a non-reentrant model
 24218 ;;
 24219                           
 24220                           
 24221                           ;psect for function _uartReceiveISR
 24222  3697                     _uartReceiveISR:	
 24223                           
 24224                           ;uart.c: 23:  static char buffer[20];;uart.c: 25:  static uint8_t checksum = 0;;uart.c: 
      +                          27:  if (RC1STAbits.OERR)
 24225                           
 24226                           ;incstack = 0
 24227                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24228  3697  0142               	movlb	2	; select bank2
 24229  3698  1C9D               	btfss	29,1	;volatile
 24230  3699  2EA1               	goto	i1l6262
 24231                           
 24232                           ;uart.c: 28:  {;uart.c: 29:   RC1STAbits.CREN = 0;
 24233  369A  121D               	bcf	29,4	;volatile
 24234                           
 24235                           ;uart.c: 30:   RC1STAbits.CREN = 1;
 24236  369B  161D               	bsf	29,4	;volatile
 24237                           
 24238                           ;uart.c: 31:   rxOErrCount++;
 24239  369C  3001               	movlw	1
 24240  369D  00F6               	movwf	??_uartReceiveISR
 24241  369E  0876               	movf	??_uartReceiveISR,w
 24242  369F  0143               	movlb	3	; select bank3
 24243  36A0  07E4               	addwf	_rxOErrCount^(0+384),f	;volatile
 24244  36A1                     i1l6262:	
 24245                           
 24246                           ;uart.c: 33:  if (RC1STAbits.FERR)
 24247  36A1  0142               	movlb	2	; select bank2
 24248  36A2  1D1D               	btfss	29,2	;volatile
 24249  36A3  2EAB               	goto	i1l6268
 24250                           
 24251                           ;uart.c: 34:  {;uart.c: 35:   RC1STAbits.SPEN = 0;
 24252  36A4  139D               	bcf	29,7	;volatile
 24253                           
 24254                           ;uart.c: 36:   RC1STAbits.SPEN = 1;
 24255  36A5  179D               	bsf	29,7	;volatile
 24256                           
 24257                           ;uart.c: 37:   rxFErrCount++;
 24258  36A6  3001               	movlw	1
 24259  36A7  00F6               	movwf	??_uartReceiveISR
 24260  36A8  0876               	movf	??_uartReceiveISR,w
 24261  36A9  0143               	movlb	3	; select bank3
 24262  36AA  07E5               	addwf	_rxFErrCount^(0+384),f	;volatile
 24263  36AB                     i1l6268:	
 24264                           
 24265                           ;uart.c: 41:  if (rxCount < sizeof(dataPacket)) {
 24266  36AB  300F               	movlw	15
 24267  36AC  0142               	movlb	2	; select bank2
 24268  36AD  026B               	subwf	_rxCount^(0+256),w	;volatile
 24269  36AE  1803               	skipnc
 24270  36AF  2EC7               	goto	i1l6274
 24271                           
 24272                           ;uart.c: 42:   buffer[rxCount] = RC1REG;
 24273  36B0  0819               	movf	25,w	;volatile
 24274  36B1  00F6               	movwf	??_uartReceiveISR
 24275  36B2  086B               	movf	_rxCount^(0+256),w
 24276  36B3  3EC4               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 24277  36B4  0086               	movwf	6
 24278  36B5  3002               	movlw	2	; select bank5/6
 24279  36B6  0087               	movwf	7
 24280  36B7  0876               	movf	??_uartReceiveISR,w
 24281  36B8  0081               	movwf	1
 24282                           
 24283                           ;uart.c: 43:   checksum ^= buffer[rxCount];
 24284  36B9  086B               	movf	_rxCount^(0+256),w
 24285  36BA  3EC4               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 24286  36BB  0086               	movwf	6
 24287  36BC  3002               	movlw	2	; select bank5/6
 24288  36BD  0087               	movwf	7
 24289  36BE  0801               	movf	1,w
 24290  36BF  00F6               	movwf	??_uartReceiveISR
 24291  36C0  0876               	movf	??_uartReceiveISR,w
 24292  36C1  06EA               	xorwf	uartReceiveISR@checksum^(0+256),f
 24293                           
 24294                           ;uart.c: 44:   rxCount++;
 24295  36C2  3001               	movlw	1
 24296  36C3  00F6               	movwf	??_uartReceiveISR
 24297  36C4  0876               	movf	??_uartReceiveISR,w
 24298  36C5  07EB               	addwf	_rxCount^(0+256),f	;volatile
 24299                           
 24300                           ;uart.c: 45:  } else {
 24301  36C6  0008               	return
 24302  36C7                     i1l6274:	
 24303                           
 24304                           ;uart.c: 47:   if (RC1REG == checksum) {
 24305  36C7  0819               	movf	25,w	;volatile
 24306  36C8  066A               	xorwf	uartReceiveISR@checksum^(0+256),w
 24307  36C9  1D03               	skipz
 24308  36CA  2EDA               	goto	i1l6280
 24309                           
 24310                           ;uart.c: 49:    uartDataReadyFlag = 1;
 24311  36CB  3001               	movlw	1
 24312  36CC  00F6               	movwf	??_uartReceiveISR
 24313  36CD  0876               	movf	??_uartReceiveISR,w
 24314  36CE  00ED               	movwf	_uartDataReadyFlag^(0+256)	;volatile
 24315                           
 24316                           ;uart.c: 50:    strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 24317  36CF  30C4               	movlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 24318  36D0  00F6               	movwf	??_uartReceiveISR
 24319  36D1  0876               	movf	??_uartReceiveISR,w
 24320  36D2  00F0               	movwf	strncpy@s
 24321  36D3  300F               	movlw	15
 24322  36D4  00F1               	movwf	strncpy@n
 24323  36D5  3000               	movlw	0
 24324  36D6  00F2               	movwf	strncpy@n+1
 24325  36D7  3038               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 24326  36D8  31B4  2466         	fcall	_strncpy
 24327  36DA                     i1l6280:	
 24328                           
 24329                           ;uart.c: 52:   checksum = 0;
 24330  36DA  0142               	movlb	2	; select bank2
 24331  36DB  01EA               	clrf	uartReceiveISR@checksum^(0+256)
 24332                           
 24333                           ;uart.c: 53:   rxCount = 0;
 24334  36DC  01EB               	clrf	_rxCount^(0+256)	;volatile
 24335  36DD  0008               	return
 24336  36DE                     __end_of_uartReceiveISR:	
 24337                           
 24338                           	psect	text68
 24339  3466                     __ptext68:	
 24340 ;; *************** function _strncpy *****************
 24341 ;; Defined at:
 24342 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncpy.c"
 24343 ;; Parameters:    Size  Location     Type
 24344 ;;  d               1    wreg     PTR unsigned char 
 24345 ;;		 -> dataPacket(15), 
 24346 ;;  s               1    0[COMMON] PTR const unsigned char 
 24347 ;;		 -> uartReceiveISR@buffer(20), 
 24348 ;;  n               2    1[COMMON] unsigned int 
 24349 ;; Auto vars:     Size  Location     Type
 24350 ;;  d               1    4[COMMON] PTR unsigned char 
 24351 ;;		 -> dataPacket(15), 
 24352 ;;  cp              1    5[COMMON] PTR unsigned char 
 24353 ;;		 -> dataPacket(15), 
 24354 ;; Return value:  Size  Location     Type
 24355 ;;                  1    wreg      PTR unsigned char 
 24356 ;; Registers used:
 24357 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 24358 ;; Tracked objects:
 24359 ;;		On entry : 0/0
 24360 ;;		On exit  : 0/0
 24361 ;;		Unchanged: 0/0
 24362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24363 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24364 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24365 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24366 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24367 ;;Total ram usage:        6 bytes
 24368 ;; Hardware stack levels used:    1
 24369 ;; This function calls:
 24370 ;;		Nothing
 24371 ;; This function is called by:
 24372 ;;		_uartReceiveISR
 24373 ;; This function uses a non-reentrant model
 24374 ;;
 24375                           
 24376                           
 24377                           ;psect for function _strncpy
 24378  3466                     _strncpy:	
 24379                           
 24380                           ;incstack = 0
 24381                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 24382                           ;strncpy@d stored from wreg
 24383  3466  00F4               	movwf	strncpy@d
 24384  3467  0874               	movf	strncpy@d,w
 24385  3468  00F3               	movwf	??_strncpy
 24386  3469  0873               	movf	??_strncpy,w
 24387  346A  00F5               	movwf	strncpy@cp
 24388  346B                     i1l5022:	
 24389  346B  0871               	movf	strncpy@n,w
 24390  346C  0472               	iorwf	strncpy@n+1,w
 24391  346D  1903               	btfsc	3,2
 24392  346E  2C8C               	goto	i1l5028
 24393  346F  3001               	movlw	1
 24394  3470  02F1               	subwf	strncpy@n,f
 24395  3471  3000               	movlw	0
 24396  3472  3BF2               	subwfb	strncpy@n+1,f
 24397  3473  0875               	movf	strncpy@cp,w
 24398  3474  0086               	movwf	6
 24399  3475  3002               	movlw	2	; select bank4/5
 24400  3476  0087               	movwf	7
 24401  3477  0AF5               	incf	strncpy@cp,f
 24402  3478  0870               	movf	strncpy@s,w
 24403  3479  0084               	movwf	4
 24404  347A  3002               	movlw	2	; select bank4/5
 24405  347B  0085               	movwf	5
 24406  347C  0AF0               	incf	strncpy@s,f
 24407  347D  0800               	movf	0,w
 24408  347E  3FC0               	movwi [0]fsr1
 24409  347F  0889               	movf	9,f
 24410  3480  1903               	btfsc	3,2
 24411  3481  2C8C               	goto	i1l5028
 24412  3482  2C6B               	goto	i1l5022
 24413  3483                     i1l5024:	
 24414  3483  0875               	movf	strncpy@cp,w
 24415  3484  0086               	movwf	6
 24416  3485  3002               	movlw	2	; select bank4/5
 24417  3486  0087               	movwf	7
 24418  3487  0181               	clrf	1
 24419  3488  3001               	movlw	1
 24420  3489  00F3               	movwf	??_strncpy
 24421  348A  0873               	movf	??_strncpy,w
 24422  348B  07F5               	addwf	strncpy@cp,f
 24423  348C                     i1l5028:	
 24424  348C  3001               	movlw	1
 24425  348D  02F1               	subwf	strncpy@n,f
 24426  348E  3000               	movlw	0
 24427  348F  3BF2               	subwfb	strncpy@n+1,f
 24428  3490  0A71               	incf	strncpy@n,w
 24429  3491  1D03               	skipz
 24430  3492  2C83               	goto	i1l5024
 24431  3493  0A72               	incf	strncpy@n+1,w
 24432  3494  1903               	btfsc	3,2
 24433  3495  0008               	return
 24434  3496  2C83               	goto	i1l5024
 24435  3497                     __end_of_strncpy:	
 24436                           
 24437                           	psect	text69
 24438  37B6                     __ptext69:	
 24439 ;; *************** function _rotISR *****************
 24440 ;; Defined at:
 24441 ;;		line 34 in file "inputs.c"
 24442 ;; Parameters:    Size  Location     Type
 24443 ;;		None
 24444 ;; Auto vars:     Size  Location     Type
 24445 ;;  input           1    7[COMMON] unsigned char 
 24446 ;; Return value:  Size  Location     Type
 24447 ;;                  1    wreg      void 
 24448 ;; Registers used:
 24449 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 24450 ;; Tracked objects:
 24451 ;;		On entry : 0/0
 24452 ;;		On exit  : 0/0
 24453 ;;		Unchanged: 0/0
 24454 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24456 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24457 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24458 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24459 ;;Total ram usage:        8 bytes
 24460 ;; Hardware stack levels used:    1
 24461 ;; This function calls:
 24462 ;;		Nothing
 24463 ;; This function is called by:
 24464 ;;		_ISR
 24465 ;; This function uses a non-reentrant model
 24466 ;;
 24467                           
 24468                           
 24469                           ;psect for function _rotISR
 24470  37B6                     _rotISR:	
 24471                           
 24472                           ;inputs.c: 36:  uint8_t input;;inputs.c: 38:  input = (PORTAbits.RA5 << 1) | PORTAbits.R
      +                          A4;
 24473                           
 24474                           ;incstack = 0
 24475                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 24476  37B6  0140               	movlb	0	; select bank0
 24477  37B7  0E0C               	swapf	12,w	;volatile
 24478  37B8  3901               	andlw	1
 24479  37B9  00F0               	movwf	??_rotISR
 24480  37BA  0E0C               	swapf	12,w	;volatile
 24481  37BB  0C89               	rrf	9,f
 24482  37BC  3901               	andlw	1
 24483  37BD  0709               	addwf	9,w
 24484  37BE  0470               	iorwf	??_rotISR,w
 24485  37BF  00F1               	movwf	??_rotISR+1
 24486  37C0  0871               	movf	??_rotISR+1,w
 24487  37C1  00F7               	movwf	rotISR@input
 24488                           
 24489                           ;inputs.c: 41:  curRotState = transition_table[curRotState & 0b00000111][input];
 24490  37C2  0141               	movlb	1	; select bank1
 24491  37C3  086C               	movf	_curRotState^(0+128),w	;volatile
 24492  37C4  3907               	andlw	7
 24493  37C5  00F0               	movwf	??_rotISR
 24494  37C6  01F1               	clrf	??_rotISR+1
 24495  37C7  35F0               	lslf	??_rotISR,f
 24496  37C8  0DF1               	rlf	??_rotISR+1,f
 24497  37C9  35F0               	lslf	??_rotISR,f
 24498  37CA  0DF1               	rlf	??_rotISR+1,f
 24499  37CB  3025               	movlw	low (_transition_table| (0+32768))
 24500  37CC  00F2               	movwf	??_rotISR+2
 24501  37CD  30B8               	movlw	high (_transition_table| (0+32768))
 24502  37CE  00F3               	movwf	??_rotISR+3
 24503  37CF  0870               	movf	??_rotISR,w
 24504  37D0  0772               	addwf	??_rotISR+2,w
 24505  37D1  00F4               	movwf	??_rotISR+4
 24506  37D2  0871               	movf	??_rotISR+1,w
 24507  37D3  3D73               	addwfc	??_rotISR+3,w
 24508  37D4  00F5               	movwf	??_rotISR+5
 24509  37D5  0877               	movf	rotISR@input,w
 24510  37D6  0774               	addwf	??_rotISR+4,w
 24511  37D7  0084               	movwf	4
 24512  37D8  0875               	movf	??_rotISR+5,w
 24513  37D9  1803               	skipnc
 24514  37DA  0A75               	incf	??_rotISR+5,w
 24515  37DB  0085               	movwf	5
 24516  37DC  0800               	movf	0,w	;code access
 24517  37DD  00F6               	movwf	??_rotISR+6
 24518  37DE  0876               	movf	??_rotISR+6,w
 24519  37DF  00EC               	movwf	_curRotState^(0+128)	;volatile
 24520                           
 24521                           ;inputs.c: 44:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 24522  37E0  1FEC               	btfss	_curRotState^(0+128),7	;volatile
 24523  37E1  2FE7               	goto	i1l6252
 24524  37E2  3001               	movlw	1
 24525  37E3  00F0               	movwf	??_rotISR
 24526  37E4  0870               	movf	??_rotISR,w
 24527  37E5  0142               	movlb	2	; select bank2
 24528  37E6  00EC               	movwf	_rotDir^(0+256)	;volatile
 24529  37E7                     i1l6252:	
 24530                           
 24531                           ;inputs.c: 45:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 24532  37E7  0141               	movlb	1	; select bank1
 24533  37E8  1F6C               	btfss	_curRotState^(0+128),6	;volatile
 24534  37E9  2FEF               	goto	i1l305
 24535  37EA  3002               	movlw	2
 24536  37EB  00F0               	movwf	??_rotISR
 24537  37EC  0870               	movf	??_rotISR,w
 24538  37ED  0142               	movlb	2	; select bank2
 24539  37EE  00EC               	movwf	_rotDir^(0+256)	;volatile
 24540  37EF                     i1l305:	
 24541                           
 24542                           ;inputs.c: 47:  userActivity = tick100ms;
 24543  37EF  0144               	movlb	4	; select bank4
 24544  37F0  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 24545  37F1  0142               	movlb	2	; select bank2
 24546  37F2  00DF               	movwf	(_userActivity+3)^(0+256)	;volatile
 24547  37F3  0144               	movlb	4	; select bank4
 24548  37F4  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 24549  37F5  0142               	movlb	2	; select bank2
 24550  37F6  00DE               	movwf	(_userActivity+2)^(0+256)	;volatile
 24551  37F7  0144               	movlb	4	; select bank4
 24552  37F8  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 24553  37F9  0142               	movlb	2	; select bank2
 24554  37FA  00DD               	movwf	(_userActivity+1)^(0+256)	;volatile
 24555  37FB  0144               	movlb	4	; select bank4
 24556  37FC  0832               	movf	_tick100ms^(0+512),w	;volatile
 24557  37FD  0142               	movlb	2	; select bank2
 24558  37FE  00DC               	movwf	_userActivity^(0+256)	;volatile
 24559  37FF  0008               	return
 24560  3800                     __end_of_rotISR:	
 24561                           
 24562                           	psect	text70
 24563  2823                     __ptext70:	
 24564 ;; *************** function _pushButtonISR *****************
 24565 ;; Defined at:
 24566 ;;		line 54 in file "inputs.c"
 24567 ;; Parameters:    Size  Location     Type
 24568 ;;		None
 24569 ;; Auto vars:     Size  Location     Type
 24570 ;;  time            1    1[COMMON] unsigned char 
 24571 ;; Return value:  Size  Location     Type
 24572 ;;                  1    wreg      void 
 24573 ;; Registers used:
 24574 ;;		wreg, status,2, status,0
 24575 ;; Tracked objects:
 24576 ;;		On entry : 0/0
 24577 ;;		On exit  : 0/0
 24578 ;;		Unchanged: 0/0
 24579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24580 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24581 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24582 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24583 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24584 ;;Total ram usage:        2 bytes
 24585 ;; Hardware stack levels used:    1
 24586 ;; This function calls:
 24587 ;;		Nothing
 24588 ;; This function is called by:
 24589 ;;		_ISR
 24590 ;; This function uses a non-reentrant model
 24591 ;;
 24592                           
 24593                           
 24594                           ;psect for function _pushButtonISR
 24595  2823                     _pushButtonISR:	
 24596                           
 24597                           ;inputs.c: 56:  uint8_t time;;inputs.c: 58:  if ((!PORTAbits.RA7) && (pbState != PB_WAIT
      +                          )) {
 24598                           
 24599                           ;incstack = 0
 24600                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0]
 24601  2823  0140               	movlb	0	; select bank0
 24602  2824  1B8C               	btfsc	12,7	;volatile
 24603  2825  2841               	goto	i1l6226
 24604  2826  3004               	movlw	4
 24605  2827  067D               	xorwf	_pbState,w	;volatile
 24606  2828  1903               	btfsc	3,2
 24607  2829  2841               	goto	i1l6226
 24608                           
 24609                           ;inputs.c: 59:   tick10ms = 0;
 24610  282A  0142               	movlb	2	; select bank2
 24611  282B  01EE               	clrf	_tick10ms^(0+256)	;volatile
 24612                           
 24613                           ;inputs.c: 60:   pbState = PB_WAIT;
 24614  282C  3004               	movlw	4
 24615  282D  00F0               	movwf	??_pushButtonISR
 24616  282E  0870               	movf	??_pushButtonISR,w
 24617  282F  00FD               	movwf	_pbState	;volatile
 24618                           
 24619                           ;inputs.c: 61:   userActivity = tick100ms;
 24620  2830  0144               	movlb	4	; select bank4
 24621  2831  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 24622  2832  0142               	movlb	2	; select bank2
 24623  2833  00DF               	movwf	(_userActivity+3)^(0+256)	;volatile
 24624  2834  0144               	movlb	4	; select bank4
 24625  2835  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 24626  2836  0142               	movlb	2	; select bank2
 24627  2837  00DE               	movwf	(_userActivity+2)^(0+256)	;volatile
 24628  2838  0144               	movlb	4	; select bank4
 24629  2839  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 24630  283A  0142               	movlb	2	; select bank2
 24631  283B  00DD               	movwf	(_userActivity+1)^(0+256)	;volatile
 24632  283C  0144               	movlb	4	; select bank4
 24633  283D  0832               	movf	_tick100ms^(0+512),w	;volatile
 24634  283E  0142               	movlb	2	; select bank2
 24635  283F  00DC               	movwf	_userActivity^(0+256)	;volatile
 24636                           
 24637                           ;inputs.c: 62:  } else if (pbState == PB_WAIT) {
 24638  2840  0008               	return
 24639  2841                     i1l6226:	
 24640  2841  3004               	movlw	4
 24641  2842  067D               	xorwf	_pbState,w	;volatile
 24642  2843  1D03               	btfss	3,2
 24643  2844  0008               	return
 24644                           
 24645                           ;inputs.c: 63:   time = tick10ms;
 24646  2845  0142               	movlb	2	; select bank2
 24647  2846  086E               	movf	_tick10ms^(0+256),w	;volatile
 24648  2847  00F0               	movwf	??_pushButtonISR
 24649  2848  0870               	movf	??_pushButtonISR,w
 24650  2849  00F1               	movwf	pushButtonISR@time
 24651                           
 24652                           ;inputs.c: 64:   if ((time > 10) && (time <= 70) && (PORTAbits.RA7))
 24653  284A  300B               	movlw	11
 24654  284B  0271               	subwf	pushButtonISR@time,w
 24655  284C  1C03               	skipc
 24656  284D  285A               	goto	i1l6236
 24657  284E  3047               	movlw	71
 24658  284F  0271               	subwf	pushButtonISR@time,w
 24659  2850  1803               	skipnc
 24660  2851  285A               	goto	i1l6236
 24661  2852  0140               	movlb	0	; select bank0
 24662  2853  1F8C               	btfss	12,7	;volatile
 24663  2854  285A               	goto	i1l6236
 24664                           
 24665                           ;inputs.c: 66:    pbState = PB_SHORT;
 24666  2855  3001               	movlw	1
 24667  2856  00F0               	movwf	??_pushButtonISR
 24668  2857  0870               	movf	??_pushButtonISR,w
 24669  2858  00FD               	movwf	_pbState	;volatile
 24670  2859  0008               	return
 24671  285A                     i1l6236:	
 24672  285A  3047               	movlw	71
 24673  285B  0271               	subwf	pushButtonISR@time,w
 24674  285C  1C03               	skipc
 24675  285D  2866               	goto	i1l314
 24676  285E  0140               	movlb	0	; select bank0
 24677  285F  1B8C               	btfsc	12,7	;volatile
 24678  2860  2866               	goto	i1l314
 24679                           
 24680                           ;inputs.c: 69:    pbState = PB_LONG;
 24681  2861  3002               	movlw	2
 24682  2862  00F0               	movwf	??_pushButtonISR
 24683  2863  0870               	movf	??_pushButtonISR,w
 24684  2864  00FD               	movwf	_pbState	;volatile
 24685  2865  0008               	return
 24686  2866                     i1l314:	
 24687                           ;inputs.c: 70:   else if (PORTAbits.RA7)
 24688                           
 24689  2866  0140               	movlb	0	; select bank0
 24690  2867  1F8C               	btfss	12,7	;volatile
 24691  2868  0008               	return
 24692                           
 24693                           ;inputs.c: 72:    pbState = PB_ABORT;
 24694  2869  3003               	movlw	3
 24695  286A  00F0               	movwf	??_pushButtonISR
 24696  286B  0870               	movf	??_pushButtonISR,w
 24697  286C  00FD               	movwf	_pbState	;volatile
 24698  286D  0008               	return
 24699  286E                     __end_of_pushButtonISR:	
 24700                           ;inputs.c: 73:  }
 24701                           
 24702  007E                     btemp	set	126	;btemp
 24703  007E                     int$flags	set	126
 24704  007E                     wtemp0	set	126


Data Sizes:
    Strings     783
    Constant    130
    Data        46
    BSS         134
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     80      80
    BANK1            80     75      78
    BANK2            80     60      80
    BANK3            80     64      80
    BANK4            80     29      80
    BANK5            80      0      56
    BANK6            80      0      32
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           26      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    qsort$2585	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$0	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@d1	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@s1	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK5[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    qsort@compar	PTR FTN(PTR const void ,PTR const void ,)int  size(2) Largest target is 2
		 -> sortCur(), sortDCRev(), sortDC(), 

    sp__memcpy	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@x	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@vbase	PTR void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    qsort@base	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s2	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s1	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> systemCheck@str(BANK1[3]), str(BANK3[10]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK3[10]), 

    sortCur@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@b	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@a	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    checkChannelStatus@chData	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    menu@func	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    stateFuncTbl	const PTR FTN()unsigned char [9] size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setOutputPower@chData	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    channelSetup@chData	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    spinInput@input	PTR float  size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 57
		 -> STR_87(CODE[4]), systemCheck@str(BANK1[3]), STR_86(CODE[12]), STR_85(CODE[13]), 
		 -> STR_84(CODE[13]), STR_83(CODE[13]), STR_82(CODE[13]), STR_81(CODE[13]), 
		 -> STR_80(CODE[13]), STR_79(CODE[13]), STR_78(CODE[13]), STR_77(CODE[13]), 
		 -> STR_76(CODE[13]), STR_75(CODE[13]), STR_74(CODE[13]), STR_73(CODE[13]), 
		 -> STR_72(CODE[13]), STR_71(CODE[13]), STR_70(CODE[13]), STR_69(CODE[13]), 
		 -> STR_68(CODE[13]), STR_67(CODE[13]), STR_66(CODE[13]), STR_65(CODE[13]), 
		 -> STR_64(CODE[13]), STR_63(CODE[13]), STR_62(CODE[13]), STR_61(CODE[9]), 
		 -> STR_60(CODE[2]), STR_59(CODE[13]), STR_58(CODE[9]), STR_57(CODE[2]), 
		 -> STR_56(CODE[13]), STR_55(CODE[3]), STR_54(CODE[7]), STR_53(CODE[13]), 
		 -> STR_52(CODE[10]), STR_51(CODE[10]), STR_50(CODE[3]), STR_49(CODE[7]), 
		 -> STR_48(CODE[37]), STR_47(CODE[8]), STR_46(CODE[2]), STR_45(CODE[13]), 
		 -> STR_44(CODE[13]), STR_43(CODE[13]), STR_42(CODE[8]), STR_41(CODE[2]), 
		 -> STR_40(CODE[7]), STR_39(CODE[6]), STR_38(CODE[7]), STR_37(CODE[6]), 
		 -> STR_36(CODE[13]), STR_35(CODE[8]), STR_34(CODE[13]), STR_33(CODE[13]), 
		 -> STR_32(CODE[13]), STR_31(CODE[13]), STR_30(CODE[13]), STR_29(CODE[13]), 
		 -> STR_28(CODE[13]), STR_27(CODE[9]), STR_26(CODE[8]), STR_25(CODE[5]), 
		 -> STR_24(CODE[8]), STR_23(CODE[5]), STR_22(CODE[13]), STR_21(CODE[13]), 
		 -> STR_20(CODE[13]), STR_19(CODE[13]), STR_18(CODE[13]), STR_17(CODE[9]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[13]), STR_13(CODE[13]), 
		 -> STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[4]), STR_9(CODE[2]), 
		 -> STR_8(CODE[4]), STR_7(CODE[8]), STR_6(CODE[7]), STR_5(CODE[8]), 
		 -> STR_4(CODE[2]), STR_3(CODE[4]), str(BANK3[10]), STR_2(CODE[8]), 
		 -> STR_1(CODE[57]), 

    initGlobalData@chData	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->_strncpy

Critical Paths under _main in BANK0

    _viewErrorMessage->_OLED_print_xy
    _OLED_off->_OLED_command
    _setSkyTemp->_spinInput
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setFudgeFactor->_spinInput
    _setDPOffset->_spinInput
    _spinInput->___fladd
    _getNextState->___wmul
    _returnToPage->___wmul
    _paging->_OLED_command
    _OLED_print_xy->___bmul
    _initGlobalData->___wmul
    _getAnalogValues->___fladd
    _controller->_setChannelSwitch
    _setChannelSwitch->___bmul
    _error->___awmod
    _ema->___lmul
    _channelThing->_qsort
    _swap->___bmul
    ___bmul->___awdiv
    _memcpy->___bmul
    ___xxtofl->___wmul
    ___flge->___fladd
    _calcRequiredPower->___fladd
    ___wmul->___bmul
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_calcRequiredPower
    _systemCheck->_itoa
    _menu->_channelView
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_spinInput
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setFudgeFactor->_spinInput
    _setDPOffset->_spinInput
    _spinInput->___flge
    _channelView->_ftoa
    _channelSetup->_ftoa
    _itoa->___fltol
    _ftoa->___flge
    _getAnalogValues->___fldiv
    _checkSensor->___flge
    _checkChannelStatus->___flge
    _channelThing->_qsort
    _qsort->_sortCur
    _qsort->_sortDC
    _qsort->_sortDCRev
    _sortCur->___fltol
    ___fltol->___flsub
    ___flge->___fldiv
    _calcRequiredPower->___fldiv

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _channelThing->_qsort

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _channelThing->_qsort

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_channelThing

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0 1074813
                                             74 BANK1      1     1      0
                                             23 BANK4      6     6      0
                       _OLED_command
                          _OLED_init
              _OLED_loadSpecialChars
                  _calcRequiredPower
                       _channelThing
                 _checkChannelStatus
                        _checkSensor
                         _controller
                    _getAnalogValues
                       _getLastError
                     _initGlobalData
                         _initialize
                               _menu
                        _systemCheck
                          _timeSince
                   _viewErrorMessage
 ---------------------------------------------------------------------------------
 (1) _viewErrorMessage                                     5     5      0   23517
                                             22 BANK0      5     5      0
                       _OLED_command
                      _OLED_print_xy
                            ___awmod
                              _getPB
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                          8     8      0   47873
                                             30 BANK1      8     8      0
                       _OLED_command
                           _OLED_off
                      _OLED_print_xy
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _error
                     _getAnalogValue
                               _itoa
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _OLED_off                                             0     0      0     465
                       _OLED_command
 ---------------------------------------------------------------------------------
 (1) _menu                                                10    10      0  831436
                                             50 BANK1     10    10      0
                       _OLED_command
                       _channelSetup *
                        _channelView *
                              _error
                       _getNextState
                              _getPB
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
                          _timeSince
 ---------------------------------------------------------------------------------
 (2) _statusView                                           2     2      0   78312
                                             39 BANK1      2     2      0
                      _OLED_print_xy
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                2     2      0   74030
                                             39 BANK1      2     2      0
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           1     1      0   90562
                                             40 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       6     6      0  109763
                                             40 BANK1      6     6      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                              _getPB
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _getPB                                                2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           8     8      0   99732
                                             40 BANK1      8     8      0
                      _OLED_print_xy
                             ___wmul
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       1     1      0   90562
                                             40 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          1     1      0   90562
                                             40 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           16     2     14   17784
                                             79 BANK0      1     1      0
                                             25 BANK1     15     1     14
                            ___fladd
                             ___flge
                            ___flsub
                             ___wmul (ARG)
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         8     5      3    9846
                                             19 BANK0      8     5      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                         11    11      0   92102
                                             39 BANK1     11    11      0
                      _OLED_print_xy
                             ___bmul
                            ___fltol
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         6     6      0   93197
                                             39 BANK1      6     6      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         4     4      0    9669
                                             19 BANK0      4     4      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1252
                                              7 BANK0      6     5      1
                       _OLED_command
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _itoa                                                11     7      4    4282
                                             19 BANK1     11     7      4
                            ___awdiv
                            ___awmod
                            ___fltol (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                14     8      6   41315
                                             25 BANK1     14     8      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   21794
                                             13 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       7     7      0    9486
                                             19 BANK0      7     7      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _getLastError                                         4     4      0      37
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _getAnalogValues                                      6     6      0   20705
                                             13 BANK1      6     6      0
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                                _ema
                     _getAnalogValue
 ---------------------------------------------------------------------------------
 (1) _controller                                          10    10      0    4817
                                             17 BANK0     10    10      0
                             ___bmul
                   _setChannelSwitch
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          4     4      0    6803
                                             25 BANK1      2     2      0
                             ___flge
                              _error
                          _timeSince
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            1     1      0       3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     819
                                              0 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (1) _checkChannelStatus                                  24    24      0   34623
                                             25 BANK1     24    24      0
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _ema
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _setChannelSwitch                                     4     3      1     819
                                             13 BANK0      4     3      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _getAnalogValue                                       4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _error                                                2     2      0    1184
                                              7 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1153
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ema                                                 20    12      8    1734
                                             12 BANK0     20    12      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     496
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     670
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _channelThing                                        34    34      0   58693
                                             51 BANK1     11    11      0
                                              0 BANK4     23    23      0
                             ___bmul
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                             ___wmul
                           ___xxtofl
                              _qsort
 ---------------------------------------------------------------------------------
 (2) _qsort                                              149   143      6   20886
                                             79 BANK0      1     1      0
                                             27 BANK1     24    18      6
                                              0 BANK2     60    60      0
                                              0 BANK3     64    64      0
                            ___awdiv
                             ___bmul
                             _memcpy
                            _sortCur *
                             _sortDC *
                          _sortDCRev *
                               _swap
 ---------------------------------------------------------------------------------
 (3) _swap                                                 6     2      4     465
                                             13 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDCRev                                            8     4      4    3021
                                             19 BANK1      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _sortDC                                               8     4      4    3021
                                             19 BANK1      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    2891
                                              9 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortCur                                              8     4      4    7154
                                             19 BANK1      8     4      4
                             ___bmul (ARG)
                            ___flsub
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             11     7      4     877
                                              8 BANK1     11     7      4
                            ___flsub (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               8     5      3     424
                                             13 BANK0      8     5      3
                            ___awdiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     805
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1106
                                             19 BANK0     14    10      4
                             ___bmul (ARG)
                             ___wmul (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4766
                                             13 BANK1     12     4      8
                             ___bmul (ARG)
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   61    61      0   33770
                                             13 BANK1     61    61      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    9136
                                             13 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    5887
                                              0 BANK1      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    4922
                                             59 BANK0     20    12      8
                             ___bmul (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    8933
                                             33 BANK0     26    18      8
                          __Umul8_16
                             ___bmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     980
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             26    18      8    3843
                                             59 BANK0     13     5      8
                                              0 BANK1     13    13      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                               34    34      0    1066
                                              7 BANK0     34    34      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     465
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     589
                                              7 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     465
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            3     2      1     397
                                              3 BANK0      3     2      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0     124
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  4     4      0     416
                                              8 COMMON     4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (8) _uartReceiveISR                                       1     1      0     326
                                              6 COMMON     1     1      0
                            _strncpy
 ---------------------------------------------------------------------------------
 (9) _strncpy                                              6     3      3     326
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (8) _rotISR                                               8     8      0      23
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (8) _pushButtonISR                                        2     2      0      67
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_command
     _OLED_send
       _OLED_write4bits
     _OLED_waitForReady
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write4bits
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
   _calcRequiredPower
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flsub
       ___fladd
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _channelThing
     ___bmul
       ___awdiv (ARG)
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _qsort
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _memcpy
         ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _sortCur *
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
       _sortDC *
         ___bmul
           ___awdiv (ARG)
       _sortDCRev *
         ___bmul
           ___awdiv (ARG)
       _swap *
         ___bmul (ARG)
           ___awdiv (ARG)
   _checkChannelStatus
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fleq
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fltol
       ___flsub (ARG)
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _checkSensor
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _timeSince
     _uartReset
     _uartSendByte
   _controller
     ___bmul
       ___awdiv (ARG)
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
     _timeSince
   _getAnalogValues
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _getAnalogValue
   _getLastError
   _initGlobalData
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _initialize
   _menu
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___bmul
         ___awdiv (ARG)
       ___fltol
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _error *
       ___awmod
     _getNextState *
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
     _getPB *
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _timeSince *
   _systemCheck
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_off
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getAnalogValue
     _itoa
       ___awdiv
       ___awmod
       ___fltol (ARG)
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _timeSince
   _viewErrorMessage
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___awmod
     _getPB

 _ISR (ROOT)
   _pushButtonISR
   _rotISR
   _uartReceiveISR
     _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4B      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     1F4       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     3C      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     40      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     1D      50      14      100.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      38      16       70.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      20      18       40.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              1A      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     1F4      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Feb 01 13:46:01 2020

                  _pushButtonISR 2823                    returnToPage@n 0036         __end_of_transition_table 3841  
                   _stateFuncTbl 3054                     ___fldiv@aexp 00AC                     ___fldiv@bexp 00AB  
                   ___fldiv@sign 00A4                   ___bmul@product 002B                      __CFG_CP$OFF 0000  
            __end_of_systemCheck 1E28           _calcRequiredPower$2550 00DD           _calcRequiredPower$2551 00B9  
         _calcRequiredPower$2552 00BD           _calcRequiredPower$2553 00C1           _calcRequiredPower$2554 00C5  
         _calcRequiredPower$2555 00C9           _calcRequiredPower$2556 00CD                     ___awdiv@sign 0026  
            ___wmul@multiplicand 002F          ??_OLED_loadSpecialChars 0027              __Umul8_16@word_mpld 0026  
                    __CFG_LVP$ON 0000                     _virtChannels 02A0                              l121 2C64  
                            l139 372A                              l180 3391                              l365 32F2  
                            l464 27B7                              l821 1D92                              l719 1814  
                            l908 2E99                              l791 15EA                              l892 0EAC  
                            l798 1688                              _ISR 0004                              _ema 2926  
                            _str 01E6                     ___awmod@sign 0026                     __CFG_BORV$LO 0000  
                            wreg 0009                 returnToPage@page 0035                     ___flmul@aexp 004F  
                   ___flmul@bexp 0054                     ___flmul@sign 004E                     ___flmul@temp 0059  
                   ___flmul@prod 0055                    __CFG_BBEN$OFF 0000         __end_of_setChannelSwitch 3725  
                   _userActivity 015C                             ?_ISR 0070                 channelThing@grpA 0253  
               channelThing@grpB 0259                     __CFG_ZCD$OFF 0000                     ___fltol@exp1 00B2  
           __end_of_channelThing 1000                             l1026 337A                             l1204 2B54  
                           l1207 2BA2                             l1331 1312                             l1227 290A  
                           l1404 1FCC                             l1405 1FE8                             l1333 12F5  
                           l1407 1FF9                             l1327 127F                             l1520 2814  
                           l1361 13F4                             l1435 0780                             l1195 3788  
                           l1348 1395                             l1196 37A2                             l1461 2CEF  
                           l1525 33E5                             l1383 1E85                             ?_ema 002C  
                           l1369 140C                             l1481 3407                             l1474 2D39  
                           l1475 2D43                             l1467 2D25             __end_of_channelSetup 2800  
                           l7014 1F39                             l7006 1F08                             l7110 05A8  
                           l7040 1F81                             l7032 1F46                             l7008 1F10  
                           l7016 1EED                             l8000 1B59                             l7034 1F62  
                           l7018 1F40                             l7202 076D                             l7106 059E  
                           l7044 1F84                             l7028 1F55                             l7108 05A0  
                           l7220 2CE7                             l8020 1C17                             l8012 1BBE  
                           l7054 1FB0                             l7118 05B6                             l7230 2D02  
                           l8022 1C1D                             l7240 2D37                             l7232 2D12  
                           l7304 34D9                             l7170 06E8                             l7090 057D  
                           l7242 2D2A                             l7226 2CFE                             l8026 1C50  
                           l7330 229A                             l8210 1D01                             l7068 1FF4  
                           l7172 06FF                             l7092 0585                             l6620 12C5  
                           l8028 1C55                             l7340 22BD                             l7404 07CE  
                           l8204 1CF2                             l7182 0718                             l6630 12FF  
                           l7254 2D5E                             l8214 1D37                             l8136 33C9  
                           l7192 0741                             l7088 057B                             l6704 13C6  
                           l6560 124F                             l8320 21DF                             l7360 22CF  
                           l7328 2253                             l7416 07D9                             l7424 07EF  
                           l8232 1D57                             l7178 0716                             l6730 1408  
                           l6562 1257                             l7450 343F                             l8410 152D  
                           l7266 34B3                             l7362 2366                             l7338 22A7  
                           l7370 299A                             l6740 280E                             l7196 0756  
                           l6708 13C8                             l6628 12FD                             l6580 1274  
                           l6556 124C                             l6804 2884                             l8500 0C9F  
                           l8332 21F4                             l7524 1078                             l7612 09E8  
                           l6726 1404                             l6654 1332                             l6646 1320  
                           l6638 130D                             l6590 1289                             l6830 28BB  
                           l6822 28AA                             l6814 288C                             l7470 37B4  
                           l7454 3449                             l8414 1546                             l8326 21EE  
                           l8334 2206                             l8166 0892                             l7374 29E3  
                           l7286 2DB1                             l7534 109F                             l7526 107E  
                           l7630 0B1C                             l7614 09FE                             l7606 09E2  
                           l7702 2790                             l6656 1334                             l6664 1343  
                           l6584 1277                             l6816 2898                             l8440 1619  
                           l8408 1520                             l8328 21F1                             l8280 214B  
                           l7376 29F4                             l7528 1081                             l7632 0B32  
                           l7616 0A14                             l7640 0B74                             l7608 09E3  
                           l8248 1D93                             l8600 2382                             l6690 13B4  
                           l6682 13A7                             l6674 138D                             l6826 28B3  
                           l6914 28F8                             l6842 365C                             l8274 211E  
                           l7546 10FD                             l7634 0B48                             l7642 0BB0  
                           l7706 27A2                             l7730 2523                             l8258 1DD8  
                           l8610 23B8                             l8602 2385                             l6764 3374  
                           l8348 00D7                             l6924 2917                             l6916 2906  
                           l8540 0EF5                             l8532 0E3A                             l8516 0E05  
                           l8508 0D70                             l6860 3681                             l8460 173A  
                           l8452 167B                             l8444 1636                             l8428 1574  
                           l8380 1416                             l8276 2124                             l7396 07B7  
                           l7636 0B5E                             l7628 0B05                             l8268 1E1D  
                           l8620 2421                             l8612 23CD                             l6942 1E3A  
                           l6782 3339                             l8542 0F45                             l8534 0EF4  
                           l6854 3669                             l6846 3663                             l8446 1651  
                           l8286 2164                             l8278 212A                             l7910 20AA  
                           l7902 208F                             l7646 0BB6                             l7742 2597  
                           l7726 2516                             l8630 2468                             l8622 2436  
                           l8614 23E2                             l8606 238E                             l6952 1E4E  
                           l6696 13BB                             l6856 3675                             l6864 368A  
                           l8464 1796                             l8448 1657                             l8392 147B  
                           l7496 1035                             l8296 2196                             l8288 2185  
                           l8560 2E0C                             l7752 25E3                             l7760 261D  
                           l7840 2ADF                             l8632 247D                             l8624 244B  
                           l8616 23F7                             l8608 23A3                             l6962 1E68  
                           l6954 1E57                             l6698 13BD                             l6882 2B88  
                           l6778 3333                             l8458 16EC                             l8466 17F6  
                           l8298 219A                             l8570 2E36                             l7922 20DE  
                           l7578 122F                             l7666 2695                             l8642 24DC  
                           l8618 240C                             l8634 2492                             l8722 2C95  
                           l6972 1E7C                             l6948 1E4A                             l8548 0F46  
                           l8476 0BCE                             l6868 3692                             l7940 36F9  
                           l7932 36E1                             l7588 0923                             l7764 262F  
                           l7772 265A                             l7828 2FEF                             l8660 1867  
                           l8636 24BE                             l6982 1EA6                             l6878 2B6E  
                           l6798 2879                             l6894 28CA                             l7934 36E7  
                           l8582 2E9C                             l8590 336C                             l7918 20C6  
                           l7678 26E7                             l7694 275C                             l7854 2A0A  
                           l8742 2CC3                             l8718 2C89                             l6968 1E78  
                           l7936 36ED                             l7944 370E                             l8576 2E7D  
                           l8592 336F                             l7688 2730                             l7768 2647  
                           l7792 2EB1                             l8672 188D                             l8744 2CC6  
                           l8736 2CB1                             l8728 2CA1                             l6898 28D3  
                           l7938 36F3                             l7890 2023                             l7698 2776  
                           l7778 265C                             l8690 18F7                             l8674 1891  
                           l8666 186E                             l8658 1848                             l8738 2CB9  
                           l6988 1EB4                             l7980 1AD1                             l7868 2A74  
                           l8860 249B                             l8862 0B9C                             l8864 21FE  
                           l7896 2074                             l7994 1B2E                             l7986 1AF7  
                           l8866 3716                             l7998 1B55                             STR_1 3066  
                           STR_2 3A9D                             STR_3 3AD2                             STR_4 3AF0  
                           STR_5 3A7D                             STR_6 3ABA                             STR_7 3A7D  
                           STR_8 3AD6                             STR_9 3936                             _PIE0 0716  
                           _PIE3 0719                             _PIE4 071A                             u7235 361A  
                           u8115 290E                             u7245 3628                             u7255 3638  
                           u7503 1355                             u8055 28DC                             u7265 334D  
                           u8305 1F4A                             u7425 1303                             u9105 344A  
                           u8235 1EF5                             u9115 3451                             u7380 12E4  
                           u8405 1FBC                             u8325 1F56                             u8245 1EFC  
                           u8085 28F9                             u9045 07AF                             u7390 12E5  
                           u8415 1FD8                             u7375 12D9                             u8265 1F09  
                           u7545 13A8                             u8275 1F26                             u8515 062C  
                           u9155 37B0                             u7725 2815                             u8525 065B  
                           u7645 13DF                             u8535 06B1                             u7495 1338  
                           u8545 06C8                             u9185 101E                             u8395 1F9D  
                           u8555 06D7                             u7755 337B                             u7835 288F  
                           u8565 06EB                             u7765 3380                             u8805 2D4B  
                           u8725 2D0B                             u9605 2984                             u8655 072F  
                           u7855 2899                             u7935 366C                             u8665 074A  
                           u8585 06F4                             u8745 2D1F                             u7865 28A3  
                           u9705 1BF9                             u9625 1AD5                             u8905 34EF  
                           u8675 0760                             u7875 28AB                             u9715 1C09  
                           u9635 1AE5                             u7955 367B                             u8765 2D31  
                           u9725 1C28                             u7965 3682                             u9735 1C32  
                           u9745 1C42                             u9665 1B86                             u9755 1C5F  
                           u9675 1BC9                             u9780 33BF                             u9685 1BE2  
                           u9695 1BEF                             _TMR0 059C                             _TMR1 020C  
                  __CFG_FCMEN$ON 0000                    OLED_send@mode 0023                             _data 274A  
                           _head 0165                             _main 2C40                             _ftoa 2208  
                           _menu 181E                             _itoa 298F                             _tail 007C  
                           fsr0h 0005                             fsr1h 0007                             indf0 0000  
                           fsr0l 0004                             indf1 0001                             fsr1l 0006  
                           _swap 3407                 channelSetup@page 0167                             btemp 007E  
                  __CFG_BOREN$ON 0000                             start 006E                      ?_OLED_write 0070  
                   spinInput@dir 00C7                  ___fldiv@new_exp 00A5                     spinInput@max 00BF  
                   spinInput@min 00BB                _calcRequiredPower 00D5                   ?_pushButtonISR 0070  
                  __CFG_CSWEN$ON 0000                ___bmul@multiplier 002C                    __CFG_MCLRE$ON 0000  
             ?_calcRequiredPower 0070                            ??_ISR 0078                            ??_ema 0034  
             __size_of_OLED_init 008B               __size_of_OLED_send 0017                   _setFudgeFactor 2A62  
              channelThing@total 0247                    ___fltol@sign1 00B1                  __end_of___fladd 1414  
                          ?_main 0070                            ?_ftoa 00B9                            ?_menu 0070  
                __end_of___fldiv 2000                            ?_itoa 00B3                  __end_of___awdiv 28C0  
                          STR_10 3ADA                            STR_11 3AE7                            STR_12 3AE4  
                          STR_20 39FB                            STR_21 3A22                            STR_13 39EE  
                          STR_22 3A2F                            STR_14 3993                            STR_30 396C  
                          STR_23 3AC9                            STR_15 3AEA                            STR_31 39A0  
                          STR_16 3AED                            STR_40 3AAC                            STR_24 3A85  
                          STR_32 395F                            STR_41 3AB8                            STR_25 3AC9  
                          STR_17 3A64                            STR_33 3979                    __CFG_WDTE$OFF 0000  
                          STR_50 3AE1                            STR_26 3A95                            STR_42 3A75  
                          STR_18 3A08                            STR_34 39D4                            STR_27 3A64  
                          STR_35 3A8D                            STR_51 3A48                            STR_43 39E1  
                          STR_19 3986                            STR_60 3AB8                            STR_52 3955  
                          STR_36 3A2F                            STR_44 3A15                            STR_28 3952  
                __end_of___awmod 3697                            STR_45 39D4                            STR_37 3AC8  
                          STR_61 3A5B                            STR_53 39C7                            STR_29 39BA  
                          STR_46 3AB8                            STR_54 3AB3                            STR_38 3AA5  
                          STR_70 391E                            STR_62 3841                            STR_39 3AC8  
                          STR_55 3ADE                            STR_47 3A6D                            STR_71 38D0  
                          STR_63 3875                            STR_80 3904                            STR_72 391E  
                          STR_56 39AD                            STR_64 385B                            STR_48 3800  
                          STR_57 3AB8                            STR_49 3AC1                            STR_81 3945  
                          STR_73 38A9                            STR_65 389C                            STR_58 3A52  
                          STR_66 3904                            STR_82 38F7                            STR_74 384E  
                          STR_59 3818                            STR_67 38C3                            STR_75 388F  
                          STR_83 3868                            STR_68 3841                            STR_76 3938  
                          STR_84 3882                            STR_69 3911                            STR_85 38DD  
                          STR_77 38B6                            STR_86 3A3C                            STR_78 38EA  
                          STR_87 3ACE                            STR_79 392B                  __end_of___flmul 078D  
            ??_calcRequiredPower 00AD  checkSensor@sensorUpdateInterval 0264                  __end_of___flsub 3530  
                __end_of___fltol 2926                            ?_swap 002D                            u10305 2E56  
                          u10315 2E78                            u10420 18BC                            u10245 0E7C  
                          u10421 18BA                            u10430 18BD                            _T1CLK 0211  
                ___awdiv@divisor 0020                            u10607 2BE7                            u10455 18ED  
                          u10527 2CCA                            _T1CON 020E                            u10617 2BF3  
                          u10537 1D80                            u10707 33A3                            u10627 2BFF  
                          u10547 07BF                            u10717 33A9                            u10637 2C0B  
                          u10557 07E1                            u10727 3645                            u10647 2C17  
                          u10567 156D                            u10737 364B                            u10657 2C23  
                          u10577 2BBD                            u10667 2C2F                            u10587 2BCF  
                          u10677 2C3B                            u10597 2BDB                            u10687 3393  
                          u10697 3399                            _IOCAN 1F3E                            _IOCAP 1F3D  
                          _IOCCN 1F54                            i1l305 37EF                            i1l314 2866  
                          i1l266 001C                            i1l275 0065                            i1l269 0038  
                          i1l279 006C                 __end_of_OLED_off 32E2                  ___awdiv@counter 0025  
                   main@initDone 0262                            _TRISA 0012                            _TRISB 0013  
                          _TRISC 0014           uartReceiveISR@checksum 016A              ___lmul@multiplicand 0024  
           __size_of_checkSensor 0120                     ?_setDPOffset 0070                    __CFG_WRTB$OFF 0000  
                  __CFG_WRTC$OFF 0000       __end_of_checkChannelStatus 1800                   OLED_send@value 0025  
                          _getPB 0800              getNextState@timeout 0035                   statusView@page 0169  
       statusView@prevSensorStat 016F                            ema@in 002C                            _error 35D1  
                          _setup 2F4A                            _qsort 1AA9                            ftoa@w 00C4  
                          pclath 000A             __size_of_channelView 02B3                            swap@c 0032  
                __end_of_sortCur 35D1                            status 0003                            wtemp0 007E  
      __end_of_calcRequiredPower 0561                  __end_of_strncpy 3497                      controller@n 003A  
                  spinInput@step 00C3                      _systemCheck 1C65             __end_of_getLastError 3371  
                __initialization 0070                     __end_of_main 2CD1                     __end_of_ftoa 236F  
                   __end_of_menu 18FB                     __end_of_itoa 29F8          __size_of_getAnalogValue 001D  
                   __end_of_swap 3436           __end_of_setFudgeFactor 2ACD                   __CFG_SAFEN$OFF 0000  
               _viewErrorMessage 236F         controller@dutyCycleTimer 022A                           ??_main 00EA  
                         ??_ftoa 00BF                           ??_menu 00D2                           ??_itoa 00B7  
                         ??_swap 0031                   OLED_print_xy@s 002E                    sortDCRev@cmp1 00B3  
                  sortDCRev@cmp2 00B5             __end_of_getNextState 20E8          __size_of_setOutputPower 017E  
            __size_of_OLED_write 000B                _uartDataReadyFlag 016D            getAnalogValue@channel 0023  
                _setLensDia$2549 00CC                           ?_getPB 0070                           _ADCON1 009E  
                         ?_error 0070                           _ADRESH 009C                           _ADRESL 009B  
               ___awdiv@dividend 0022                           ?_setup 0070                           _ANSELA 1F38  
                         _ANSELB 1F43                           _ANSELC 1F4E               __CFG_RSTOSC$HFINT1 0000  
                         ?_qsort 00BB                           _T0CON0 059E                           _T0CON1 059F  
                         _RC1REG 0119                           _RC1STA 011D                           _RC6PPS 1F26  
                         i1l5022 346B                           i1l5024 3483                           i1l5028 348C  
                 __CFG_WDTCCS$SC 0000                           i1l6226 2841                           i1l6236 285A  
                         i1l6252 37E7                           i1l6262 36A1                           i1l6280 36DA  
                         i1l6360 0016                           i1l6274 36C7                           i1l6268 36AB  
                         i1l6372 0027                           i1l6384 0035                           i1l6394 005E  
                         i1l6378 002E                           _INTCON 000B                __end_of_OLED_init 2C40  
              __end_of_OLED_send 3359                           _OSCFRQ 0893                           _SPBRGL 011B  
                         _TX1REG 011A                           _TX1STA 011E             getNextState@intState 0033  
               __end_of___xxtofl 2D67                  ??_pushButtonISR 0070                   __CFG_PWRTE$OFF 0000  
                    menu@timeout 00D8                           ___flge 2B39                           ___bmul 3330  
                         ___fleq 376D                           ___lmul 3436       OLED_loadSpecialChars@F7970 0320  
                      ??___fladd 0063                           ___wmul 3371                        ??___fldiv 0063  
                      ??___awdiv 0024                   __CFG_STVREN$ON 0000                        ??___awmod 0024  
                      ??___flmul 0049                        ??___flsub 006F                        ??___fltol 00AC  
                ?_setFudgeFactor 0070               channelSetup@chData 00CB                           _paging 078D  
                         _memcpy 33DB                 ___awdiv@quotient 0027                  ___awmod@divisor 0020  
                         _rotISR 37B6                           _rotDir 016C          __size_of_initGlobalData 010E  
                  ?_OLED_command 0070                  ___awmod@counter 0025                           _sortDC 3565  
                         menu@pb 00D7               __size_of__Umul8_16 0020            __size_of_channelThing 0434  
          __size_of_channelSetup 01A2            OLED_waitForReady@busy 0020                           swap@s1 002F  
                         swap@s2 0030                OLED_command@value 0026                           qsort@i 00CF  
                         qsort@j 00D1                           qsort@l 00C9                           qsort@r 00CB  
                         qsort@s 00CD                           qsort@x 00C7                        ??_sortCur 006F  
                      ??_strncpy 0073                       ___flge@ff1 00AD                       ___flge@ff2 00B1  
                   ___xxtofl@arg 003D                     ___xxtofl@exp 003C                     ___xxtofl@val 0033  
                     ___fleq@ff1 0020                       ___fleq@ff2 0024                   spinInput@input 00B9  
        __end_of__initialization 00D1                     ftoa@intValue 00C3       __size_of_calcRequiredPower 048C  
                     ___fltol@f1 00A8              ___bmul@multiplicand 0029                        ?_OLED_off 0070  
       __size_of_OLED_write4bits 0045                   __pcstackCOMMON 0070                     __pidataBANK1 07FA  
                   __pidataBANK2 07FB                     __pidataBANK4 3324                     __pidataBANK6 2000  
                  __end_of_getPB 080B             uartReceiveISR@buffer 02C4                    __end_of_error 360C  
                   _channelThing 0BCC         __size_of_getAnalogValues 01AE                     _channelSetup 265E  
                  __end_of_setup 3000                    __end_of_qsort 1C65                   ??_OLED_command 0026  
 __size_of_OLED_loadSpecialChars 0027    __end_of_OLED_loadSpecialChars 33DB               __size_of_getRotDir 000B  
                        ??_getPB 0020           __size_of_OLED_print_xy 0032                          ??_error 0027  
                     _dataPacket 0238                ?_setChannelSwitch 002D                          ??_setup 00C7  
           __size_of_setDPOffset 006C                          ??_qsort 00C1                       __pbssBANK1 00EB  
                     __pbssBANK2 015C                       __pbssBANK3 01E0                       __pbssBANK4 0220  
                     __pbssBANK5 02A0          __size_of_uartReceiveISR 0047               ??_setChannelSwitch 002E  
          __size_of_getLastError 0018                     ??_OLED_write 0026                __end_of__Umul8_16 2823  
                     ??_OLED_off 0027              channelThing@numGrpA 0257              channelThing@numGrpB 0258  
                     __pmaintext 2C40                   _getAnalogValue 1801                          ?___flge 00AD  
                        ?___bmul 0029                          ?___fleq 0020                          ?___lmul 0020  
                        ?___wmul 002D                  __CFG_PPS1WAY$ON 0000                       __pintentry 0004  
          __size_of_getNextState 00C8                          ?_paging 0027                          ?_memcpy 002D  
              _OLED_waitForReady 338D                   ___lmul@product 0028                          ?_rotISR 0070  
                        ?_sortDC 00B3               __size_of_timeSince 005A               ?_OLED_waitForReady 0070  
             __size_of_uartReset 0008            channelThing@totalGrpA 024B            channelThing@totalGrpB 024F  
                 _setOutputPower 24E0                        ?___xxtofl 0033               __size_of_spinInput 0096  
                        _OSCCON1 088D               __size_of_sortDCRev 0035               __end_of_OLED_write 3301  
                   _getLastError 3359              ??_OLED_waitForReady 0020                pushButtonISR@time 0071  
                  channelThing@n 025D         __end_of_viewErrorMessage 24E0                      rotISR@input 0077  
                     _controller 2DFD                     _getNextState 2020                     ?_systemCheck 0070  
             _checkChannelStatus 1414           __end_of_getAnalogValue 181E                __end_of_getRotDir 330C  
                     ema@average 002E                    _OLED_print_xy 3497               getAnalogValues@adc 00B1  
      __end_of_OLED_waitForReady 33B4                  __size_of___flge 007C                  __size_of___bmul 0012  
                __size_of___fleq 0049                          ___fladd 1232                          ___fldiv 1E28  
                        ___awdiv 286E                  __size_of___lmul 0030                          ___awmod 3651  
                        ___flmul 0561                          ___flsub 34FB                          ___fltol 28C0  
                __size_of___wmul 001C                  OLED_write@value 0026              ?_checkChannelStatus 0070  
                  ?_uartSendByte 0070                   _initGlobalData 080B                  __size_of_paging 006D  
              ??_OLED_write4bits 0020                  __size_of_memcpy 002C                       _initialize 3725  
                __size_of_rotISR 004A           __end_of_setOutputPower 265E                          __ptext1 236F  
                        __ptext2 1C65                          __ptext3 32DA                          __ptext4 181E  
                        __ptext5 2A62                          __ptext6 29F8                          __ptext7 2ACD  
                        __ptext8 2F4A                          __ptext9 2E9F                    ??_checkSensor 00B9  
                __size_of_sortDC 0035                          _pbState 007D                  __CFG_WRTAPP$OFF 0000  
                   __size_of_ISR 006A                 _channelView$2548 00CD                          ema@tmp0 003C  
                   __size_of_ema 0069                       ??___xxtofl 0037                 ___awmod@dividend 0022  
              ??_getAnalogValues 006F                        _IOCAFbits 1F3F                  __CFG_WRTSAF$OFF 0000  
                        _rxCount 016B                    ??_channelView 00C7                          _sortCur 359A  
                        clrloop0 330D             ??_checkChannelStatus 00B9          setChannelSwitch@channel 0030  
                        _strncpy 3466             end_of_initialization 00D1                       _setLensDia 2E9F  
                        ftoa@len 00C1                          ftoa@pos 00C5                          ftoa@str 00C6  
                        paging@n 002C                          memcpy@d 0033                          memcpy@n 002E  
                        memcpy@s 0034                   paging@lastPage 0027            checkChannelStatus@adc 00BD  
           __end_of_OLED_command 32EC            checkChannelStatus@avg 00C8                          init_ram 3318  
                        itoa@str 00B3                          initloop 3319                       _setSkyTemp 29F8  
              __end_of_timeSince 105A                __end_of_uartReset 32DA                 ??_setFudgeFactor 00C8  
                      _OLED_init 2BB5                        _OLED_send 3342                  ?_getAnalogValue 0020  
            OLED_setCursor@F7959 026C                    ?_returnToPage 0070                __end_of_spinInput 2DFD  
                 ?_OLED_print_xy 002D                __end_of_sortDCRev 3565               OLED_print_xy@F7967 0268  
                        sortDC@a 00B9                          sortDC@b 00BA                          swap@len 002D  
         __end_of_initGlobalData 0919                   ??_uartSendByte 0020            __CFG_WDTCPS$WDTCPS_31 0000  
                      _PORTAbits 000C                        _PORTCbits 000E                  ?_setOutputPower 0070  
                     _qsort$2585 006F                  _selectedChannel 00EB                      ___fladd@grs 006E  
                  ___xxtofl@sign 003B                        _TRISCbits 0014                      ___fldiv@grs 00A7  
                    ___fldiv@rem 00A0             _getAnalogValues$2557 00AD              __end_of_checkSensor 2208  
               __CFG_FEXTOSC$OFF 0000     OLED_loadSpecialChars@special 0028                   _uartReceiveISR 3697  
                    ___flmul@grs 0050                       _statusView 105A              __end_of_channelView 0BCC  
                    ?_controller 0070                getNextState@state 0039                  channelView@page 0168  
                     ?_OLED_init 0070                   ??_returnToPage 0033                       ?_OLED_send 0023  
          __end_of_pushButtonISR 286E       __size_of_OLED_waitForReady 0027                __size_of_OLED_off 0008  
                ?_initGlobalData 0070                   __end_of___flge 2BB5             __end_of_nextStateTbl 3054  
                 __end_of___bmul 3342                   __end_of___fleq 37B6                   __end_of___lmul 3466  
                 __end_of___wmul 338D                      ?_initialize 0070                   __end_of_paging 07FA  
                 __end_of_memcpy 3407                       ftoa@fValue 00B9                   __end_of_rotISR 3800  
                 __end_of_sortDC 359A              start_initialization 0070                      __end_of_ISR 006E  
                    __end_of_ema 298F         OLED_print_xy@row_offsets 0031           __end_of_uartReceiveISR 36DE  
                    ?_setLensDia 0070             calcRequiredPower@Rth 00B5             initGlobalData@chData 0038  
           calcRequiredPower@phi 00D5                      ?_setSkyTemp 0070                  ??_OLED_print_xy 0030  
                 systemCheck@str 00C2                      sortCur@cmp1 00B3                      sortCur@cmp2 00B5  
               __CFG_LPBOREN$OFF 0000          _checkChannelStatus$1841 00BF          _checkChannelStatus$1842 00C3  
       checkChannelStatus@chData 00CF                       error@error 0028                         ??___flge 00B5  
                       ??___bmul 002A                         ??___fleq 0028             __size_of_systemCheck 01C3  
                 timeSince@since 0020                         ??___lmul 0028        __size_of_setChannelSwitch 0047  
                       ??___wmul 0031                        __Umul8_16 2803                      __pdataBANK1 00ED  
                    __pdataBANK2 016F                      __pdataBANK4 0264                      __pdataBANK6 0320  
                       ??_paging 0028                         ??_memcpy 0030                         ??_rotISR 0070  
          setChannelSwitch@state 002D                      qsort@compar 00BF                         ??_sortDC 00B7  
               OLED_print_xy@col 0035                      _checkSensor 20E8                        ___fladd@a 005F  
                      ___fladd@b 005B                 OLED_print_xy@row 002D                        ___fldiv@a 005B  
                      ___fldiv@b 005F                      __pbssBIGRAM 274A              __size_of_controller 00A2  
                      ___flmul@a 0045                        ___flmul@b 0041                      __pbssCOMMON 007C  
                      ___flsub@a 00A0                        ___flsub@b 00A4                        ___latbits 0003  
                  ??_setDPOffset 00C8                    __pcstackBANK0 0020                    __pcstackBANK1 00A0  
                  __pcstackBANK2 0120                    __pcstackBANK3 01A0                    __pcstackBANK4 0247  
          _OLED_loadSpecialChars 33B4            __size_of_OLED_command 000A                __size_of___xxtofl 0096  
              paging@currentPage 002A                      _channelView 0919                  ?_uartReceiveISR 0070  
           __end_of_uartSendByte 32F6                     systemCheck@n 00C5                      ?_statusView 0070  
              ?_viewErrorMessage 0070              __size_of_initialize 0048             setOutputPower@chData 00CC  
             ??_viewErrorMessage 0036                  _OLED_write4bits 360C                      ??_OLED_init 0027  
                    ??_OLED_send 0024            _viewErrorMessage$1361 0039                         ?___fladd 005B  
                _getAnalogValues 18FB                         ?___fldiv 005B                         ?___awdiv 0020  
                       ?___awmod 0020                         ?___flmul 0041                         ?___flsub 00A0  
                       ?___fltol 00A8                        _getRotDir 3301                       ?__Umul8_16 0020  
            __size_of_setLensDia 00AB                     _OLED_command 32E2                         _BAUD1CON 011F  
                 getNextState@pb 0034                     channelView@n 00D1              __size_of_setSkyTemp 006A  
           __end_of_returnToPage 34FB                   __size_of_getPB 000B                         ?_sortCur 00B3  
                 __size_of_error 003B                        _tick100ms 0232                         ?_strncpy 0070  
                 __size_of_setup 00B6                   __size_of_qsort 01BC                 ??_getAnalogValue 0022  
            __end_of_setDPOffset 2B39                   ___wmul@product 0031                         _LATAbits 0018  
                       _LATBbits 0019                         _LATCbits 001A                        clear_ram0 330C  
                  paging@lastDir 0162                         _PIE0bits 0716                         _PIE3bits 0719  
                       _PIE4bits 071A                         _OLED_off 32DA                         _PIR0bits 070C  
                       _PIR3bits 070F                         _PIR4bits 0710                        _timeSince 1000  
                      _uartReset 32D2                  initGlobalData@n 0037                __CFG_BBSIZE$BB512 0000  
               ??_setOutputPower 00C8                       ?_getRotDir 0070                        _spinInput 2D67  
                      _sortDCRev 3530                       _ADCON0bits 009D                ___wmul@multiplier 002D  
                   _RX1DTPPSbits 1ECB              __size_of_statusView 01D8           ?_OLED_loadSpecialChars 0070  
                  menu@nextState 00DB                       sortDC@cmp1 00B3                       sortDC@cmp2 00B5  
           OLED_write4bits@value 0022                      _curRotState 00EC                       sortDCRev@a 00B9  
                     sortDCRev@b 00BA                 _transition_table 3825             __end_of_stateFuncTbl 3066  
              ___lmul@multiplier 0020          __end_of_OLED_write4bits 3651      __size_of_checkChannelStatus 03EC  
                   _nextStateTbl 3000                _getLastError$1358 0022                        ftoa@width 00BD  
                   ??_controller 0031          __end_of_getAnalogValues 1AA9              calcRequiredPower@T1 00E1  
            calcRequiredPower@T2 00E5                 ??_initGlobalData 0033                        paging@dir 002B  
                  uartSendByte@s 0020                        menu@sleep 0164                        menu@state 0163  
                      memcpy@tmp 0031                       ?_timeSince 0020                       ?_uartReset 0070  
      checkChannelStatus@channel 00CE                 _setChannelSwitch 36DE                      ??__Umul8_16 0022  
                  ?_channelThing 0070                        itoa@value 00B5              getAnalogValues@avgI 0236  
                  ?_channelSetup 0070              getAnalogValues@avgT 01E2              getAnalogValues@avgV 01E0  
                      itoa@width 00B6                 __size_of___fladd 01E2                       qsort@vbase 00C6  
               __size_of___fldiv 01D8                 __size_of___awdiv 0052                 __size_of___awmod 0046  
                     ?_spinInput 00B9                 __size_of___flmul 022C                 __size_of___flsub 0035  
               __size_of___fltol 0066                       qsort@stack 01A0                       qsort@width 00BD  
                     ?_sortDCRev 00B3           OLED_loadSpecialChars@n 0048                     ??_initialize 0020  
      checkChannelStatus@current 00CA        checkChannelStatus@samples 00C7                         ___xxtofl 2CD1  
             __end_of_controller 2E9F                      _rxFErrCount 01E5                _errorMessageQueue 0220  
          __size_of_uartSendByte 000A                      _setDPOffset 2ACD         checkSensor@sensorTimeout 022E  
                       __ptext10 24E0                         __ptext11 265E                         __ptext20 298F  
                       __ptext12 0919                         __ptext21 2208                         __ptext13 105A  
                       __ptext30 32D2                         __ptext22 3497                         __ptext14 0800  
                       __ptext31 1000                         __ptext23 3725                         __ptext15 2D67  
                       __ptext40 0BCC                         __ptext32 1414                         __ptext24 080B  
                       __ptext16 2020                         __ptext41 1AA9                         __ptext33 36DE  
                       __ptext25 3359                         __ptext17 34C9                         __ptext50 2CD1  
                       __ptext42 3407                         __ptext34 1801                         __ptext26 18FB  
                       __ptext18 078D                         __ptext51 2B39                         __ptext43 359A  
                       __ptext35 35D1                         __ptext27 2DFD                         __ptext19 3301  
                       __ptext60 32F6                         __ptext52 00D5                         __ptext44 3565  
                       __ptext36 3651                         __ptext28 20E8                         __ptext61 2BB5  
                       __ptext53 3371                         __ptext45 3530                         __ptext37 2926  
                       __ptext29 32EC                         __ptext70 2823                         __ptext62 32E2  
                       __ptext54 34FB                         __ptext46 3330                         __ptext38 3436  
                       __ptext63 338D                         __ptext55 1232                         __ptext47 28C0  
                       __ptext39 376D                         __ptext64 3342                         __ptext56 0561  
                       __ptext48 33DB                         __ptext65 360C                         __ptext57 2803  
                       __ptext49 286E                         __ptext58 1E28                         __ptext67 3697  
                       __ptext59 33B4                         __ptext68 3466                         __ptext69 37B6  
                   ??_setLensDia 00C8                 __size_of_sortCur 0037                    getNextState@n 003A  
                    _OSCCON3bits 088F                 __size_of_strncpy 0031                         ema@alpha 0030  
                  __size_of_main 0091                    __size_of_ftoa 0167             main@sysCheckInterval 025E  
                  __size_of_menu 00DD                    __size_of_itoa 0069                     ??_setSkyTemp 00C8  
                       getPB@ret 0021                    __size_of_swap 002F                         _tick10ms 016E  
             __end_of_initialize 376D             __CFG_WDTCWS$WDTCWS_7 0000                       _RC1STAbits 011D  
                    _rxOErrCount 01E4                   ??_channelThing 00D3                   ??_channelSetup 00C7  
                       int$flags 007E                        setup@page 0166                      ??_getRotDir 0020  
                       main@idle 0263                     _uartSendByte 32EC            __size_of_returnToPage 0032  
             __end_of_setLensDia 2F4A          __size_of_setFudgeFactor 006B                     ?_checkSensor 0070  
               ??_uartReceiveISR 0076                         ftoa@prec 00BE                         ftoa@sign 00C2  
                     _INTCONbits 000B               calcRequiredPower@A 00D9               calcRequiredPower@d 00D1  
             calcRequiredPower@n 00E9               calcRequiredPower@p 00B1               __end_of_setSkyTemp 2A62  
                       menu@page 00D6                         memcpy@d1 0032                         menu@func 00D9  
                       memcpy@s1 002D                    ?_getLastError 0070                     timeSince@now 002C  
                 __pstringtext10 3882                   __pstringtext11 388F                   __pstringtext20 3904  
                 __pstringtext12 389C                   __pstringtext21 3911                   __pstringtext13 38A9  
                 __pstringtext30 3986                   __pstringtext22 391E                   __pstringtext14 38B6  
                 __pstringtext31 3993                   __pstringtext23 392B                   __pstringtext15 38C3  
                 __pstringtext40 3A08                   __pstringtext32 39A0                   __pstringtext24 3938  
                 __pstringtext16 38D0                   __pstringtext41 3A15                   __pstringtext33 39AD  
                 __pstringtext25 3945                   __pstringtext17 38DD                   __pstringtext50 3A75  
                 __pstringtext42 3A22                   __pstringtext34 39BA                   __pstringtext26 3952  
                 __pstringtext18 38EA                   __pstringtext51 3A7D                   __pstringtext43 3A2F  
                 __pstringtext35 39C7                   __pstringtext27 395F                   __pstringtext19 38F7  
                 __pstringtext60 3AC1                   __pstringtext52 3A85                   __pstringtext44 3A3C  
                 __pstringtext36 39D4                   __pstringtext28 396C                   __pstringtext61 3AC8  
                 __pstringtext53 3A8D                   __pstringtext45 3A48                   __pstringtext37 39E1  
                 __pstringtext29 3979                   __pstringtext70 3AEA                   __pstringtext62 3ACE  
                 __pstringtext54 3A95                   __pstringtext46 3A52                   __pstringtext38 39EE  
                 __pstringtext71 3AED                   __pstringtext63 3AD2                   __pstringtext55 3A9D  
                 __pstringtext47 3A5B                   __pstringtext39 39FB                   __pstringtext72 3AF0  
                 __pstringtext64 3AD6                   __pstringtext56 3AA5                   __pstringtext48 3A64  
                 __pstringtext73 0000                   __pstringtext65 3ADA                   __pstringtext57 3AAC  
                 __pstringtext49 3A6D                   __pstringtext66 3ADE                   __pstringtext58 3AB3  
                 __pstringtext67 3AE1                   __pstringtext59 3ABA                   __pstringtext68 3AE4  
                 __pstringtext69 3AE7           __size_of_pushButtonISR 004B                        qsort@base 00C8  
                   ?_channelView 0070                        qsort@xbuf 0120        viewErrorMessage@errorCode 0038  
               ?_OLED_write4bits 0070                         intlevel1 0000                     ??_statusView 00C7  
              __CFG_CLKOUTEN$OFF 0000                 ?_getAnalogValues 0070                    ?_getNextState 0033  
                  ??_systemCheck 00BE                       _OLED_write 32F6                        strncpy@cp 0075  
          __end_of_OLED_print_xy 34C9                     _returnToPage 34C9                      ??_timeSince 0024  
                    ??_uartReset 0020                      ??_spinInput 006F                      ??_sortDCRev 00B7  
                   getRotDir@ret 0021        __size_of_viewErrorMessage 0171                         sortCur@a 00B7  
                       sortCur@b 00B9                    __pstringtext1 3000                    __pstringtext2 3825  
                  __pstringtext3 3054                    __pstringtext4 3800                    __pstringtext5 3841  
                  __pstringtext6 384E                    __pstringtext7 385B                    __pstringtext8 3868  
                  __pstringtext9 3875                         qsort@nel 00BB           __Umul8_16@multiplicand 0020  
             __end_of_statusView 1232                   ??_getLastError 0020                         strncpy@d 0074  
                       strncpy@n 0071                         strncpy@s 0070                    ___fladd@signs 006B  
               checkSensor@state 0161                     ___fladd@aexp 006C                     ___fladd@bexp 006D  
                 controller@idle 0160                   controller@tick 0036                   ??_getNextState 0036  
           __Umul8_16@multiplier 0028                __Umul8_16@product 0024                  _g_screenRefresh 00ED  
