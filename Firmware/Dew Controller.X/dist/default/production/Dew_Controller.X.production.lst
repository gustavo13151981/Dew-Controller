

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Sat Feb 01 19:33:40 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	idataBANK4,global,class=CODE,delta=2
     7                           	psect	idataBANK6,global,class=CODE,delta=2
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	stringtext4,global,class=STRCODE,delta=2
    12                           	psect	stringtext5,global,class=STRCODE,delta=2
    13                           	psect	stringtext6,global,class=STRCODE,delta=2
    14                           	psect	stringtext7,global,class=STRCODE,delta=2
    15                           	psect	stringtext8,global,class=STRCODE,delta=2
    16                           	psect	stringtext9,global,class=STRCODE,delta=2
    17                           	psect	stringtext10,global,class=STRCODE,delta=2
    18                           	psect	stringtext11,global,class=STRCODE,delta=2
    19                           	psect	stringtext12,global,class=STRCODE,delta=2
    20                           	psect	stringtext13,global,class=STRCODE,delta=2
    21                           	psect	stringtext14,global,class=STRCODE,delta=2
    22                           	psect	stringtext15,global,class=STRCODE,delta=2
    23                           	psect	stringtext16,global,class=STRCODE,delta=2
    24                           	psect	stringtext17,global,class=STRCODE,delta=2
    25                           	psect	stringtext18,global,class=STRCODE,delta=2
    26                           	psect	stringtext19,global,class=STRCODE,delta=2
    27                           	psect	stringtext20,global,class=STRCODE,delta=2
    28                           	psect	stringtext21,global,class=STRCODE,delta=2
    29                           	psect	stringtext22,global,class=STRCODE,delta=2
    30                           	psect	stringtext23,global,class=STRCODE,delta=2
    31                           	psect	stringtext24,global,class=STRCODE,delta=2
    32                           	psect	stringtext25,global,class=STRCODE,delta=2
    33                           	psect	stringtext26,global,class=STRCODE,delta=2
    34                           	psect	stringtext27,global,class=STRCODE,delta=2
    35                           	psect	stringtext28,global,class=STRCODE,delta=2
    36                           	psect	stringtext29,global,class=STRCODE,delta=2
    37                           	psect	stringtext30,global,class=STRCODE,delta=2
    38                           	psect	stringtext31,global,class=STRCODE,delta=2
    39                           	psect	stringtext32,global,class=STRCODE,delta=2
    40                           	psect	stringtext33,global,class=STRCODE,delta=2
    41                           	psect	stringtext34,global,class=STRCODE,delta=2
    42                           	psect	stringtext35,global,class=STRCODE,delta=2
    43                           	psect	stringtext36,global,class=STRCODE,delta=2
    44                           	psect	stringtext37,global,class=STRCODE,delta=2
    45                           	psect	stringtext38,global,class=STRCODE,delta=2
    46                           	psect	stringtext39,global,class=STRCODE,delta=2
    47                           	psect	stringtext40,global,class=STRCODE,delta=2
    48                           	psect	stringtext41,global,class=STRCODE,delta=2
    49                           	psect	stringtext42,global,class=STRCODE,delta=2
    50                           	psect	stringtext43,global,class=STRCODE,delta=2
    51                           	psect	stringtext44,global,class=STRCODE,delta=2
    52                           	psect	stringtext45,global,class=STRCODE,delta=2
    53                           	psect	stringtext46,global,class=STRCODE,delta=2
    54                           	psect	stringtext47,global,class=STRCODE,delta=2
    55                           	psect	stringtext48,global,class=STRCODE,delta=2
    56                           	psect	stringtext49,global,class=STRCODE,delta=2
    57                           	psect	stringtext50,global,class=STRCODE,delta=2
    58                           	psect	stringtext51,global,class=STRCODE,delta=2
    59                           	psect	stringtext52,global,class=STRCODE,delta=2
    60                           	psect	stringtext53,global,class=STRCODE,delta=2
    61                           	psect	stringtext54,global,class=STRCODE,delta=2
    62                           	psect	stringtext55,global,class=STRCODE,delta=2
    63                           	psect	stringtext56,global,class=STRCODE,delta=2
    64                           	psect	stringtext57,global,class=STRCODE,delta=2
    65                           	psect	stringtext58,global,class=STRCODE,delta=2
    66                           	psect	stringtext59,global,class=STRCODE,delta=2
    67                           	psect	stringtext60,global,class=STRCODE,delta=2
    68                           	psect	stringtext61,global,class=STRCODE,delta=2
    69                           	psect	stringtext62,global,class=STRCODE,delta=2
    70                           	psect	stringtext63,global,class=STRCODE,delta=2
    71                           	psect	stringtext64,global,class=STRCODE,delta=2
    72                           	psect	stringtext65,global,class=STRCODE,delta=2
    73                           	psect	stringtext66,global,class=STRCODE,delta=2
    74                           	psect	stringtext67,global,class=STRCODE,delta=2
    75                           	psect	stringtext68,global,class=STRCODE,delta=2
    76                           	psect	stringtext69,global,class=STRCODE,delta=2
    77                           	psect	stringtext70,global,class=STRCODE,delta=2
    78                           	psect	stringtext71,global,class=STRCODE,delta=2
    79                           	psect	stringtext72,global,class=STRCODE,delta=2
    80                           	psect	stringtext73,global,class=STRCODE,delta=2
    81                           	psect	cinit,global,class=CODE,merge=1,delta=2
    82                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    83                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    84                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    85                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    86                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    87                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    88                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    89                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    90                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    91                           	psect	dataBANK6,global,class=BANK6,space=1,delta=1
    92                           	psect	inittext,global,class=CODE,delta=2
    93                           	psect	clrtext,global,class=CODE,delta=2
    94                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    95                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    96                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    97                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    98                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    99                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
   100                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
   101                           	psect	text1,local,class=CODE,merge=1,delta=2
   102                           	psect	text2,local,class=CODE,merge=1,delta=2
   103                           	psect	text3,local,class=CODE,merge=1,delta=2
   104                           	psect	text4,local,class=CODE,merge=1,delta=2
   105                           	psect	text5,local,class=CODE,merge=1,delta=2
   106                           	psect	text6,local,class=CODE,merge=1,delta=2
   107                           	psect	text7,local,class=CODE,merge=1,delta=2
   108                           	psect	text8,local,class=CODE,merge=1,delta=2
   109                           	psect	text9,local,class=CODE,merge=1,delta=2
   110                           	psect	text10,local,class=CODE,merge=1,delta=2
   111                           	psect	text11,local,class=CODE,merge=1,delta=2
   112                           	psect	text12,local,class=CODE,merge=1,delta=2
   113                           	psect	text13,local,class=CODE,merge=1,delta=2
   114                           	psect	text14,local,class=CODE,merge=1,delta=2
   115                           	psect	text15,local,class=CODE,merge=1,delta=2
   116                           	psect	text16,local,class=CODE,merge=1,delta=2
   117                           	psect	text17,local,class=CODE,merge=1,delta=2
   118                           	psect	text18,local,class=CODE,merge=1,delta=2
   119                           	psect	text19,local,class=CODE,merge=1,delta=2
   120                           	psect	text20,local,class=CODE,merge=1,delta=2
   121                           	psect	text21,local,class=CODE,merge=1,delta=2
   122                           	psect	text22,local,class=CODE,merge=1,delta=2
   123                           	psect	text23,local,class=CODE,merge=1,delta=2
   124                           	psect	text24,local,class=CODE,merge=1,delta=2
   125                           	psect	text25,local,class=CODE,merge=1,delta=2
   126                           	psect	text26,local,class=CODE,merge=1,delta=2
   127                           	psect	text27,local,class=CODE,merge=1,delta=2
   128                           	psect	text28,local,class=CODE,merge=1,delta=2
   129                           	psect	text29,local,class=CODE,merge=1,delta=2
   130                           	psect	text30,local,class=CODE,merge=1,delta=2
   131                           	psect	text31,local,class=CODE,merge=1,delta=2
   132                           	psect	text32,local,class=CODE,merge=1,delta=2
   133                           	psect	text33,local,class=CODE,merge=1,delta=2
   134                           	psect	text34,local,class=CODE,merge=1,delta=2
   135                           	psect	text35,local,class=CODE,merge=1,delta=2
   136                           	psect	text36,local,class=CODE,merge=1,delta=2
   137                           	psect	text37,local,class=CODE,merge=1,delta=2
   138                           	psect	text38,local,class=CODE,merge=1,delta=2
   139                           	psect	text39,local,class=CODE,merge=1,delta=2
   140                           	psect	text40,local,class=CODE,merge=1,delta=2
   141                           	psect	text41,local,class=CODE,merge=1,delta=2,group=1
   142                           	psect	text42,local,class=CODE,merge=1,delta=2
   143                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
   144                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
   145                           	psect	text45,local,class=CODE,merge=1,delta=2
   146                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
   147                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
   148                           	psect	text48,local,class=CODE,merge=1,delta=2
   149                           	psect	text49,local,class=CODE,merge=1,delta=2
   150                           	psect	text50,local,class=CODE,merge=1,delta=2
   151                           	psect	text51,local,class=CODE,merge=1,delta=2,group=1
   152                           	psect	text52,local,class=CODE,merge=1,delta=2,group=1
   153                           	psect	text53,local,class=CODE,merge=1,delta=2,group=2
   154                           	psect	text54,local,class=CODE,merge=1,delta=2,group=1
   155                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
   156                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
   157                           	psect	text57,local,class=CODE,merge=1,delta=2
   158                           	psect	text58,local,class=CODE,merge=1,delta=2,group=1
   159                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
   160                           	psect	text60,local,class=CODE,merge=1,delta=2,group=1
   161                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
   162                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
   163                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
   164                           	psect	text64,local,class=CODE,merge=1,delta=2
   165                           	psect	text65,local,class=CODE,merge=1,delta=2
   166                           	psect	text66,local,class=CODE,merge=1,delta=2
   167                           	psect	text67,local,class=CODE,merge=1,delta=2
   168                           	psect	text68,local,class=CODE,merge=1,delta=2
   169                           	psect	text69,local,class=CODE,merge=1,delta=2
   170                           	psect	text70,local,class=CODE,merge=1,delta=2
   171                           	psect	intentry,global,class=CODE,delta=2
   172                           	psect	text72,local,class=CODE,merge=1,delta=2
   173                           	psect	text73,local,class=CODE,merge=1,delta=2,group=2
   174                           	psect	text74,local,class=CODE,merge=1,delta=2
   175                           	psect	text75,local,class=CODE,merge=1,delta=2
   176                           	dabs	1,0xCA0,32
   177                           	dabs	1,0xC20,80
   178                           	dabs	1,0xBBA,54
   179                           	dabs	1,0x274A,0,_data
   180                           	dabs	1,0x7E,2
   181  0000                     
   182                           ; Version 2.10
   183                           ; Generated 31/07/2019 GMT
   184                           ; 
   185                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   186                           ; All rights reserved.
   187                           ; 
   188                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   189                           ; 
   190                           ; Redistribution and use in source and binary forms, with or without modification, are
   191                           ; permitted provided that the following conditions are met:
   192                           ; 
   193                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   194                           ;        conditions and the following disclaimer.
   195                           ; 
   196                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   197                           ;        of conditions and the following disclaimer in the documentation and/or other
   198                           ;        materials provided with the distribution.
   199                           ; 
   200                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   201                           ;        software without specific prior written permission.
   202                           ; 
   203                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   204                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   205                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   206                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   207                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   208                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   209                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   210                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   211                           ; 
   212                           ; 
   213                           ; Code-generator required, PIC16F15356 Definitions
   214                           ; 
   215                           ; SFR Addresses
   216  0000                     	;# 
   217  0001                     	;# 
   218  0002                     	;# 
   219  0003                     	;# 
   220  0004                     	;# 
   221  0005                     	;# 
   222  0006                     	;# 
   223  0007                     	;# 
   224  0008                     	;# 
   225  0009                     	;# 
   226  000A                     	;# 
   227  000B                     	;# 
   228  000C                     	;# 
   229  000D                     	;# 
   230  000E                     	;# 
   231  0010                     	;# 
   232  0012                     	;# 
   233  0013                     	;# 
   234  0014                     	;# 
   235  0016                     	;# 
   236  0018                     	;# 
   237  0019                     	;# 
   238  001A                     	;# 
   239  009B                     	;# 
   240  009B                     	;# 
   241  009C                     	;# 
   242  009D                     	;# 
   243  009E                     	;# 
   244  009F                     	;# 
   245  0119                     	;# 
   246  0119                     	;# 
   247  0119                     	;# 
   248  011A                     	;# 
   249  011A                     	;# 
   250  011A                     	;# 
   251  011B                     	;# 
   252  011B                     	;# 
   253  011B                     	;# 
   254  011B                     	;# 
   255  011B                     	;# 
   256  011C                     	;# 
   257  011C                     	;# 
   258  011C                     	;# 
   259  011D                     	;# 
   260  011D                     	;# 
   261  011D                     	;# 
   262  011E                     	;# 
   263  011E                     	;# 
   264  011E                     	;# 
   265  011F                     	;# 
   266  011F                     	;# 
   267  011F                     	;# 
   268  011F                     	;# 
   269  011F                     	;# 
   270  018C                     	;# 
   271  018D                     	;# 
   272  018E                     	;# 
   273  018F                     	;# 
   274  0190                     	;# 
   275  0191                     	;# 
   276  0192                     	;# 
   277  0196                     	;# 
   278  0197                     	;# 
   279  0198                     	;# 
   280  0199                     	;# 
   281  019A                     	;# 
   282  019B                     	;# 
   283  019C                     	;# 
   284  020C                     	;# 
   285  020C                     	;# 
   286  020D                     	;# 
   287  020E                     	;# 
   288  020F                     	;# 
   289  020F                     	;# 
   290  0210                     	;# 
   291  0210                     	;# 
   292  0211                     	;# 
   293  0211                     	;# 
   294  028C                     	;# 
   295  028C                     	;# 
   296  028D                     	;# 
   297  028D                     	;# 
   298  028E                     	;# 
   299  028F                     	;# 
   300  0290                     	;# 
   301  0291                     	;# 
   302  030C                     	;# 
   303  030C                     	;# 
   304  030D                     	;# 
   305  030E                     	;# 
   306  030F                     	;# 
   307  0310                     	;# 
   308  0310                     	;# 
   309  0311                     	;# 
   310  0312                     	;# 
   311  0313                     	;# 
   312  0314                     	;# 
   313  0314                     	;# 
   314  0315                     	;# 
   315  0316                     	;# 
   316  0318                     	;# 
   317  0318                     	;# 
   318  0319                     	;# 
   319  031A                     	;# 
   320  031C                     	;# 
   321  031C                     	;# 
   322  031D                     	;# 
   323  031E                     	;# 
   324  038C                     	;# 
   325  038C                     	;# 
   326  038D                     	;# 
   327  038E                     	;# 
   328  058C                     	;# 
   329  058C                     	;# 
   330  058D                     	;# 
   331  058E                     	;# 
   332  058F                     	;# 
   333  058F                     	;# 
   334  0590                     	;# 
   335  0591                     	;# 
   336  0592                     	;# 
   337  0593                     	;# 
   338  059C                     	;# 
   339  059C                     	;# 
   340  059D                     	;# 
   341  059D                     	;# 
   342  059E                     	;# 
   343  059F                     	;# 
   344  060C                     	;# 
   345  060D                     	;# 
   346  060E                     	;# 
   347  060F                     	;# 
   348  0610                     	;# 
   349  0611                     	;# 
   350  0612                     	;# 
   351  0613                     	;# 
   352  0614                     	;# 
   353  070C                     	;# 
   354  070D                     	;# 
   355  070E                     	;# 
   356  070F                     	;# 
   357  0710                     	;# 
   358  0711                     	;# 
   359  0712                     	;# 
   360  0713                     	;# 
   361  0716                     	;# 
   362  0717                     	;# 
   363  0718                     	;# 
   364  0719                     	;# 
   365  071A                     	;# 
   366  071B                     	;# 
   367  071C                     	;# 
   368  071D                     	;# 
   369  0796                     	;# 
   370  0797                     	;# 
   371  0798                     	;# 
   372  0799                     	;# 
   373  079A                     	;# 
   374  079B                     	;# 
   375  080C                     	;# 
   376  080D                     	;# 
   377  080E                     	;# 
   378  080F                     	;# 
   379  0810                     	;# 
   380  0811                     	;# 
   381  0812                     	;# 
   382  0813                     	;# 
   383  0814                     	;# 
   384  081A                     	;# 
   385  081A                     	;# 
   386  081B                     	;# 
   387  081C                     	;# 
   388  081C                     	;# 
   389  081D                     	;# 
   390  081E                     	;# 
   391  081F                     	;# 
   392  088C                     	;# 
   393  088D                     	;# 
   394  088E                     	;# 
   395  088F                     	;# 
   396  0890                     	;# 
   397  0891                     	;# 
   398  0892                     	;# 
   399  0893                     	;# 
   400  0895                     	;# 
   401  0896                     	;# 
   402  090C                     	;# 
   403  090E                     	;# 
   404  090F                     	;# 
   405  091F                     	;# 
   406  098F                     	;# 
   407  098F                     	;# 
   408  0990                     	;# 
   409  0991                     	;# 
   410  0992                     	;# 
   411  0993                     	;# 
   412  0994                     	;# 
   413  0995                     	;# 
   414  0996                     	;# 
   415  0997                     	;# 
   416  0A19                     	;# 
   417  0A19                     	;# 
   418  0A1A                     	;# 
   419  0A1A                     	;# 
   420  0A1B                     	;# 
   421  0A1B                     	;# 
   422  0A1B                     	;# 
   423  0A1C                     	;# 
   424  0A1C                     	;# 
   425  0A1D                     	;# 
   426  0A1D                     	;# 
   427  0A1E                     	;# 
   428  0A1E                     	;# 
   429  0A1F                     	;# 
   430  0A1F                     	;# 
   431  0A1F                     	;# 
   432  1E0F                     	;# 
   433  1E10                     	;# 
   434  1E11                     	;# 
   435  1E12                     	;# 
   436  1E13                     	;# 
   437  1E14                     	;# 
   438  1E15                     	;# 
   439  1E16                     	;# 
   440  1E17                     	;# 
   441  1E18                     	;# 
   442  1E19                     	;# 
   443  1E1A                     	;# 
   444  1E1B                     	;# 
   445  1E1C                     	;# 
   446  1E1D                     	;# 
   447  1E1E                     	;# 
   448  1E1F                     	;# 
   449  1E20                     	;# 
   450  1E21                     	;# 
   451  1E22                     	;# 
   452  1E23                     	;# 
   453  1E24                     	;# 
   454  1E25                     	;# 
   455  1E26                     	;# 
   456  1E27                     	;# 
   457  1E28                     	;# 
   458  1E29                     	;# 
   459  1E2A                     	;# 
   460  1E2B                     	;# 
   461  1E2C                     	;# 
   462  1E2D                     	;# 
   463  1E2E                     	;# 
   464  1E2F                     	;# 
   465  1E30                     	;# 
   466  1E31                     	;# 
   467  1E32                     	;# 
   468  1E33                     	;# 
   469  1E34                     	;# 
   470  1E35                     	;# 
   471  1E36                     	;# 
   472  1E37                     	;# 
   473  1E8F                     	;# 
   474  1E90                     	;# 
   475  1E91                     	;# 
   476  1E92                     	;# 
   477  1E93                     	;# 
   478  1E9C                     	;# 
   479  1EA1                     	;# 
   480  1EA2                     	;# 
   481  1EB1                     	;# 
   482  1EBB                     	;# 
   483  1EBC                     	;# 
   484  1EBD                     	;# 
   485  1EBE                     	;# 
   486  1EC3                     	;# 
   487  1EC5                     	;# 
   488  1EC6                     	;# 
   489  1EC7                     	;# 
   490  1EC8                     	;# 
   491  1EC9                     	;# 
   492  1ECA                     	;# 
   493  1ECB                     	;# 
   494  1ECC                     	;# 
   495  1ECD                     	;# 
   496  1ECE                     	;# 
   497  1F10                     	;# 
   498  1F11                     	;# 
   499  1F12                     	;# 
   500  1F13                     	;# 
   501  1F14                     	;# 
   502  1F15                     	;# 
   503  1F16                     	;# 
   504  1F17                     	;# 
   505  1F18                     	;# 
   506  1F19                     	;# 
   507  1F1A                     	;# 
   508  1F1B                     	;# 
   509  1F1C                     	;# 
   510  1F1D                     	;# 
   511  1F1E                     	;# 
   512  1F1F                     	;# 
   513  1F20                     	;# 
   514  1F21                     	;# 
   515  1F22                     	;# 
   516  1F23                     	;# 
   517  1F24                     	;# 
   518  1F25                     	;# 
   519  1F26                     	;# 
   520  1F27                     	;# 
   521  1F38                     	;# 
   522  1F39                     	;# 
   523  1F3A                     	;# 
   524  1F3B                     	;# 
   525  1F3C                     	;# 
   526  1F3D                     	;# 
   527  1F3E                     	;# 
   528  1F3F                     	;# 
   529  1F43                     	;# 
   530  1F44                     	;# 
   531  1F45                     	;# 
   532  1F46                     	;# 
   533  1F47                     	;# 
   534  1F48                     	;# 
   535  1F49                     	;# 
   536  1F4A                     	;# 
   537  1F4E                     	;# 
   538  1F4F                     	;# 
   539  1F50                     	;# 
   540  1F51                     	;# 
   541  1F52                     	;# 
   542  1F53                     	;# 
   543  1F54                     	;# 
   544  1F55                     	;# 
   545  1F65                     	;# 
   546  1F68                     	;# 
   547  1F69                     	;# 
   548  1F6A                     	;# 
   549  1F6B                     	;# 
   550  1FE4                     	;# 
   551  1FE5                     	;# 
   552  1FE6                     	;# 
   553  1FE7                     	;# 
   554  1FE8                     	;# 
   555  1FE8                     	;# 
   556  1FE9                     	;# 
   557  1FEA                     	;# 
   558  1FEB                     	;# 
   559  1FED                     	;# 
   560  1FEE                     	;# 
   561  1FEF                     	;# 
   562  0000                     	;# 
   563  0001                     	;# 
   564  0002                     	;# 
   565  0003                     	;# 
   566  0004                     	;# 
   567  0005                     	;# 
   568  0006                     	;# 
   569  0007                     	;# 
   570  0008                     	;# 
   571  0009                     	;# 
   572  000A                     	;# 
   573  000B                     	;# 
   574  000C                     	;# 
   575  000D                     	;# 
   576  000E                     	;# 
   577  0010                     	;# 
   578  0012                     	;# 
   579  0013                     	;# 
   580  0014                     	;# 
   581  0016                     	;# 
   582  0018                     	;# 
   583  0019                     	;# 
   584  001A                     	;# 
   585  009B                     	;# 
   586  009B                     	;# 
   587  009C                     	;# 
   588  009D                     	;# 
   589  009E                     	;# 
   590  009F                     	;# 
   591  0119                     	;# 
   592  0119                     	;# 
   593  0119                     	;# 
   594  011A                     	;# 
   595  011A                     	;# 
   596  011A                     	;# 
   597  011B                     	;# 
   598  011B                     	;# 
   599  011B                     	;# 
   600  011B                     	;# 
   601  011B                     	;# 
   602  011C                     	;# 
   603  011C                     	;# 
   604  011C                     	;# 
   605  011D                     	;# 
   606  011D                     	;# 
   607  011D                     	;# 
   608  011E                     	;# 
   609  011E                     	;# 
   610  011E                     	;# 
   611  011F                     	;# 
   612  011F                     	;# 
   613  011F                     	;# 
   614  011F                     	;# 
   615  011F                     	;# 
   616  018C                     	;# 
   617  018D                     	;# 
   618  018E                     	;# 
   619  018F                     	;# 
   620  0190                     	;# 
   621  0191                     	;# 
   622  0192                     	;# 
   623  0196                     	;# 
   624  0197                     	;# 
   625  0198                     	;# 
   626  0199                     	;# 
   627  019A                     	;# 
   628  019B                     	;# 
   629  019C                     	;# 
   630  020C                     	;# 
   631  020C                     	;# 
   632  020D                     	;# 
   633  020E                     	;# 
   634  020F                     	;# 
   635  020F                     	;# 
   636  0210                     	;# 
   637  0210                     	;# 
   638  0211                     	;# 
   639  0211                     	;# 
   640  028C                     	;# 
   641  028C                     	;# 
   642  028D                     	;# 
   643  028D                     	;# 
   644  028E                     	;# 
   645  028F                     	;# 
   646  0290                     	;# 
   647  0291                     	;# 
   648  030C                     	;# 
   649  030C                     	;# 
   650  030D                     	;# 
   651  030E                     	;# 
   652  030F                     	;# 
   653  0310                     	;# 
   654  0310                     	;# 
   655  0311                     	;# 
   656  0312                     	;# 
   657  0313                     	;# 
   658  0314                     	;# 
   659  0314                     	;# 
   660  0315                     	;# 
   661  0316                     	;# 
   662  0318                     	;# 
   663  0318                     	;# 
   664  0319                     	;# 
   665  031A                     	;# 
   666  031C                     	;# 
   667  031C                     	;# 
   668  031D                     	;# 
   669  031E                     	;# 
   670  038C                     	;# 
   671  038C                     	;# 
   672  038D                     	;# 
   673  038E                     	;# 
   674  058C                     	;# 
   675  058C                     	;# 
   676  058D                     	;# 
   677  058E                     	;# 
   678  058F                     	;# 
   679  058F                     	;# 
   680  0590                     	;# 
   681  0591                     	;# 
   682  0592                     	;# 
   683  0593                     	;# 
   684  059C                     	;# 
   685  059C                     	;# 
   686  059D                     	;# 
   687  059D                     	;# 
   688  059E                     	;# 
   689  059F                     	;# 
   690  060C                     	;# 
   691  060D                     	;# 
   692  060E                     	;# 
   693  060F                     	;# 
   694  0610                     	;# 
   695  0611                     	;# 
   696  0612                     	;# 
   697  0613                     	;# 
   698  0614                     	;# 
   699  070C                     	;# 
   700  070D                     	;# 
   701  070E                     	;# 
   702  070F                     	;# 
   703  0710                     	;# 
   704  0711                     	;# 
   705  0712                     	;# 
   706  0713                     	;# 
   707  0716                     	;# 
   708  0717                     	;# 
   709  0718                     	;# 
   710  0719                     	;# 
   711  071A                     	;# 
   712  071B                     	;# 
   713  071C                     	;# 
   714  071D                     	;# 
   715  0796                     	;# 
   716  0797                     	;# 
   717  0798                     	;# 
   718  0799                     	;# 
   719  079A                     	;# 
   720  079B                     	;# 
   721  080C                     	;# 
   722  080D                     	;# 
   723  080E                     	;# 
   724  080F                     	;# 
   725  0810                     	;# 
   726  0811                     	;# 
   727  0812                     	;# 
   728  0813                     	;# 
   729  0814                     	;# 
   730  081A                     	;# 
   731  081A                     	;# 
   732  081B                     	;# 
   733  081C                     	;# 
   734  081C                     	;# 
   735  081D                     	;# 
   736  081E                     	;# 
   737  081F                     	;# 
   738  088C                     	;# 
   739  088D                     	;# 
   740  088E                     	;# 
   741  088F                     	;# 
   742  0890                     	;# 
   743  0891                     	;# 
   744  0892                     	;# 
   745  0893                     	;# 
   746  0895                     	;# 
   747  0896                     	;# 
   748  090C                     	;# 
   749  090E                     	;# 
   750  090F                     	;# 
   751  091F                     	;# 
   752  098F                     	;# 
   753  098F                     	;# 
   754  0990                     	;# 
   755  0991                     	;# 
   756  0992                     	;# 
   757  0993                     	;# 
   758  0994                     	;# 
   759  0995                     	;# 
   760  0996                     	;# 
   761  0997                     	;# 
   762  0A19                     	;# 
   763  0A19                     	;# 
   764  0A1A                     	;# 
   765  0A1A                     	;# 
   766  0A1B                     	;# 
   767  0A1B                     	;# 
   768  0A1B                     	;# 
   769  0A1C                     	;# 
   770  0A1C                     	;# 
   771  0A1D                     	;# 
   772  0A1D                     	;# 
   773  0A1E                     	;# 
   774  0A1E                     	;# 
   775  0A1F                     	;# 
   776  0A1F                     	;# 
   777  0A1F                     	;# 
   778  1E0F                     	;# 
   779  1E10                     	;# 
   780  1E11                     	;# 
   781  1E12                     	;# 
   782  1E13                     	;# 
   783  1E14                     	;# 
   784  1E15                     	;# 
   785  1E16                     	;# 
   786  1E17                     	;# 
   787  1E18                     	;# 
   788  1E19                     	;# 
   789  1E1A                     	;# 
   790  1E1B                     	;# 
   791  1E1C                     	;# 
   792  1E1D                     	;# 
   793  1E1E                     	;# 
   794  1E1F                     	;# 
   795  1E20                     	;# 
   796  1E21                     	;# 
   797  1E22                     	;# 
   798  1E23                     	;# 
   799  1E24                     	;# 
   800  1E25                     	;# 
   801  1E26                     	;# 
   802  1E27                     	;# 
   803  1E28                     	;# 
   804  1E29                     	;# 
   805  1E2A                     	;# 
   806  1E2B                     	;# 
   807  1E2C                     	;# 
   808  1E2D                     	;# 
   809  1E2E                     	;# 
   810  1E2F                     	;# 
   811  1E30                     	;# 
   812  1E31                     	;# 
   813  1E32                     	;# 
   814  1E33                     	;# 
   815  1E34                     	;# 
   816  1E35                     	;# 
   817  1E36                     	;# 
   818  1E37                     	;# 
   819  1E8F                     	;# 
   820  1E90                     	;# 
   821  1E91                     	;# 
   822  1E92                     	;# 
   823  1E93                     	;# 
   824  1E9C                     	;# 
   825  1EA1                     	;# 
   826  1EA2                     	;# 
   827  1EB1                     	;# 
   828  1EBB                     	;# 
   829  1EBC                     	;# 
   830  1EBD                     	;# 
   831  1EBE                     	;# 
   832  1EC3                     	;# 
   833  1EC5                     	;# 
   834  1EC6                     	;# 
   835  1EC7                     	;# 
   836  1EC8                     	;# 
   837  1EC9                     	;# 
   838  1ECA                     	;# 
   839  1ECB                     	;# 
   840  1ECC                     	;# 
   841  1ECD                     	;# 
   842  1ECE                     	;# 
   843  1F10                     	;# 
   844  1F11                     	;# 
   845  1F12                     	;# 
   846  1F13                     	;# 
   847  1F14                     	;# 
   848  1F15                     	;# 
   849  1F16                     	;# 
   850  1F17                     	;# 
   851  1F18                     	;# 
   852  1F19                     	;# 
   853  1F1A                     	;# 
   854  1F1B                     	;# 
   855  1F1C                     	;# 
   856  1F1D                     	;# 
   857  1F1E                     	;# 
   858  1F1F                     	;# 
   859  1F20                     	;# 
   860  1F21                     	;# 
   861  1F22                     	;# 
   862  1F23                     	;# 
   863  1F24                     	;# 
   864  1F25                     	;# 
   865  1F26                     	;# 
   866  1F27                     	;# 
   867  1F38                     	;# 
   868  1F39                     	;# 
   869  1F3A                     	;# 
   870  1F3B                     	;# 
   871  1F3C                     	;# 
   872  1F3D                     	;# 
   873  1F3E                     	;# 
   874  1F3F                     	;# 
   875  1F43                     	;# 
   876  1F44                     	;# 
   877  1F45                     	;# 
   878  1F46                     	;# 
   879  1F47                     	;# 
   880  1F48                     	;# 
   881  1F49                     	;# 
   882  1F4A                     	;# 
   883  1F4E                     	;# 
   884  1F4F                     	;# 
   885  1F50                     	;# 
   886  1F51                     	;# 
   887  1F52                     	;# 
   888  1F53                     	;# 
   889  1F54                     	;# 
   890  1F55                     	;# 
   891  1F65                     	;# 
   892  1F68                     	;# 
   893  1F69                     	;# 
   894  1F6A                     	;# 
   895  1F6B                     	;# 
   896  1FE4                     	;# 
   897  1FE5                     	;# 
   898  1FE6                     	;# 
   899  1FE7                     	;# 
   900  1FE8                     	;# 
   901  1FE8                     	;# 
   902  1FE9                     	;# 
   903  1FEA                     	;# 
   904  1FEB                     	;# 
   905  1FED                     	;# 
   906  1FEE                     	;# 
   907  1FEF                     	;# 
   908  0000                     	;# 
   909  0001                     	;# 
   910  0002                     	;# 
   911  0003                     	;# 
   912  0004                     	;# 
   913  0005                     	;# 
   914  0006                     	;# 
   915  0007                     	;# 
   916  0008                     	;# 
   917  0009                     	;# 
   918  000A                     	;# 
   919  000B                     	;# 
   920  000C                     	;# 
   921  000D                     	;# 
   922  000E                     	;# 
   923  0010                     	;# 
   924  0012                     	;# 
   925  0013                     	;# 
   926  0014                     	;# 
   927  0016                     	;# 
   928  0018                     	;# 
   929  0019                     	;# 
   930  001A                     	;# 
   931  009B                     	;# 
   932  009B                     	;# 
   933  009C                     	;# 
   934  009D                     	;# 
   935  009E                     	;# 
   936  009F                     	;# 
   937  0119                     	;# 
   938  0119                     	;# 
   939  0119                     	;# 
   940  011A                     	;# 
   941  011A                     	;# 
   942  011A                     	;# 
   943  011B                     	;# 
   944  011B                     	;# 
   945  011B                     	;# 
   946  011B                     	;# 
   947  011B                     	;# 
   948  011C                     	;# 
   949  011C                     	;# 
   950  011C                     	;# 
   951  011D                     	;# 
   952  011D                     	;# 
   953  011D                     	;# 
   954  011E                     	;# 
   955  011E                     	;# 
   956  011E                     	;# 
   957  011F                     	;# 
   958  011F                     	;# 
   959  011F                     	;# 
   960  011F                     	;# 
   961  011F                     	;# 
   962  018C                     	;# 
   963  018D                     	;# 
   964  018E                     	;# 
   965  018F                     	;# 
   966  0190                     	;# 
   967  0191                     	;# 
   968  0192                     	;# 
   969  0196                     	;# 
   970  0197                     	;# 
   971  0198                     	;# 
   972  0199                     	;# 
   973  019A                     	;# 
   974  019B                     	;# 
   975  019C                     	;# 
   976  020C                     	;# 
   977  020C                     	;# 
   978  020D                     	;# 
   979  020E                     	;# 
   980  020F                     	;# 
   981  020F                     	;# 
   982  0210                     	;# 
   983  0210                     	;# 
   984  0211                     	;# 
   985  0211                     	;# 
   986  028C                     	;# 
   987  028C                     	;# 
   988  028D                     	;# 
   989  028D                     	;# 
   990  028E                     	;# 
   991  028F                     	;# 
   992  0290                     	;# 
   993  0291                     	;# 
   994  030C                     	;# 
   995  030C                     	;# 
   996  030D                     	;# 
   997  030E                     	;# 
   998  030F                     	;# 
   999  0310                     	;# 
  1000  0310                     	;# 
  1001  0311                     	;# 
  1002  0312                     	;# 
  1003  0313                     	;# 
  1004  0314                     	;# 
  1005  0314                     	;# 
  1006  0315                     	;# 
  1007  0316                     	;# 
  1008  0318                     	;# 
  1009  0318                     	;# 
  1010  0319                     	;# 
  1011  031A                     	;# 
  1012  031C                     	;# 
  1013  031C                     	;# 
  1014  031D                     	;# 
  1015  031E                     	;# 
  1016  038C                     	;# 
  1017  038C                     	;# 
  1018  038D                     	;# 
  1019  038E                     	;# 
  1020  058C                     	;# 
  1021  058C                     	;# 
  1022  058D                     	;# 
  1023  058E                     	;# 
  1024  058F                     	;# 
  1025  058F                     	;# 
  1026  0590                     	;# 
  1027  0591                     	;# 
  1028  0592                     	;# 
  1029  0593                     	;# 
  1030  059C                     	;# 
  1031  059C                     	;# 
  1032  059D                     	;# 
  1033  059D                     	;# 
  1034  059E                     	;# 
  1035  059F                     	;# 
  1036  060C                     	;# 
  1037  060D                     	;# 
  1038  060E                     	;# 
  1039  060F                     	;# 
  1040  0610                     	;# 
  1041  0611                     	;# 
  1042  0612                     	;# 
  1043  0613                     	;# 
  1044  0614                     	;# 
  1045  070C                     	;# 
  1046  070D                     	;# 
  1047  070E                     	;# 
  1048  070F                     	;# 
  1049  0710                     	;# 
  1050  0711                     	;# 
  1051  0712                     	;# 
  1052  0713                     	;# 
  1053  0716                     	;# 
  1054  0717                     	;# 
  1055  0718                     	;# 
  1056  0719                     	;# 
  1057  071A                     	;# 
  1058  071B                     	;# 
  1059  071C                     	;# 
  1060  071D                     	;# 
  1061  0796                     	;# 
  1062  0797                     	;# 
  1063  0798                     	;# 
  1064  0799                     	;# 
  1065  079A                     	;# 
  1066  079B                     	;# 
  1067  080C                     	;# 
  1068  080D                     	;# 
  1069  080E                     	;# 
  1070  080F                     	;# 
  1071  0810                     	;# 
  1072  0811                     	;# 
  1073  0812                     	;# 
  1074  0813                     	;# 
  1075  0814                     	;# 
  1076  081A                     	;# 
  1077  081A                     	;# 
  1078  081B                     	;# 
  1079  081C                     	;# 
  1080  081C                     	;# 
  1081  081D                     	;# 
  1082  081E                     	;# 
  1083  081F                     	;# 
  1084  088C                     	;# 
  1085  088D                     	;# 
  1086  088E                     	;# 
  1087  088F                     	;# 
  1088  0890                     	;# 
  1089  0891                     	;# 
  1090  0892                     	;# 
  1091  0893                     	;# 
  1092  0895                     	;# 
  1093  0896                     	;# 
  1094  090C                     	;# 
  1095  090E                     	;# 
  1096  090F                     	;# 
  1097  091F                     	;# 
  1098  098F                     	;# 
  1099  098F                     	;# 
  1100  0990                     	;# 
  1101  0991                     	;# 
  1102  0992                     	;# 
  1103  0993                     	;# 
  1104  0994                     	;# 
  1105  0995                     	;# 
  1106  0996                     	;# 
  1107  0997                     	;# 
  1108  0A19                     	;# 
  1109  0A19                     	;# 
  1110  0A1A                     	;# 
  1111  0A1A                     	;# 
  1112  0A1B                     	;# 
  1113  0A1B                     	;# 
  1114  0A1B                     	;# 
  1115  0A1C                     	;# 
  1116  0A1C                     	;# 
  1117  0A1D                     	;# 
  1118  0A1D                     	;# 
  1119  0A1E                     	;# 
  1120  0A1E                     	;# 
  1121  0A1F                     	;# 
  1122  0A1F                     	;# 
  1123  0A1F                     	;# 
  1124  1E0F                     	;# 
  1125  1E10                     	;# 
  1126  1E11                     	;# 
  1127  1E12                     	;# 
  1128  1E13                     	;# 
  1129  1E14                     	;# 
  1130  1E15                     	;# 
  1131  1E16                     	;# 
  1132  1E17                     	;# 
  1133  1E18                     	;# 
  1134  1E19                     	;# 
  1135  1E1A                     	;# 
  1136  1E1B                     	;# 
  1137  1E1C                     	;# 
  1138  1E1D                     	;# 
  1139  1E1E                     	;# 
  1140  1E1F                     	;# 
  1141  1E20                     	;# 
  1142  1E21                     	;# 
  1143  1E22                     	;# 
  1144  1E23                     	;# 
  1145  1E24                     	;# 
  1146  1E25                     	;# 
  1147  1E26                     	;# 
  1148  1E27                     	;# 
  1149  1E28                     	;# 
  1150  1E29                     	;# 
  1151  1E2A                     	;# 
  1152  1E2B                     	;# 
  1153  1E2C                     	;# 
  1154  1E2D                     	;# 
  1155  1E2E                     	;# 
  1156  1E2F                     	;# 
  1157  1E30                     	;# 
  1158  1E31                     	;# 
  1159  1E32                     	;# 
  1160  1E33                     	;# 
  1161  1E34                     	;# 
  1162  1E35                     	;# 
  1163  1E36                     	;# 
  1164  1E37                     	;# 
  1165  1E8F                     	;# 
  1166  1E90                     	;# 
  1167  1E91                     	;# 
  1168  1E92                     	;# 
  1169  1E93                     	;# 
  1170  1E9C                     	;# 
  1171  1EA1                     	;# 
  1172  1EA2                     	;# 
  1173  1EB1                     	;# 
  1174  1EBB                     	;# 
  1175  1EBC                     	;# 
  1176  1EBD                     	;# 
  1177  1EBE                     	;# 
  1178  1EC3                     	;# 
  1179  1EC5                     	;# 
  1180  1EC6                     	;# 
  1181  1EC7                     	;# 
  1182  1EC8                     	;# 
  1183  1EC9                     	;# 
  1184  1ECA                     	;# 
  1185  1ECB                     	;# 
  1186  1ECC                     	;# 
  1187  1ECD                     	;# 
  1188  1ECE                     	;# 
  1189  1F10                     	;# 
  1190  1F11                     	;# 
  1191  1F12                     	;# 
  1192  1F13                     	;# 
  1193  1F14                     	;# 
  1194  1F15                     	;# 
  1195  1F16                     	;# 
  1196  1F17                     	;# 
  1197  1F18                     	;# 
  1198  1F19                     	;# 
  1199  1F1A                     	;# 
  1200  1F1B                     	;# 
  1201  1F1C                     	;# 
  1202  1F1D                     	;# 
  1203  1F1E                     	;# 
  1204  1F1F                     	;# 
  1205  1F20                     	;# 
  1206  1F21                     	;# 
  1207  1F22                     	;# 
  1208  1F23                     	;# 
  1209  1F24                     	;# 
  1210  1F25                     	;# 
  1211  1F26                     	;# 
  1212  1F27                     	;# 
  1213  1F38                     	;# 
  1214  1F39                     	;# 
  1215  1F3A                     	;# 
  1216  1F3B                     	;# 
  1217  1F3C                     	;# 
  1218  1F3D                     	;# 
  1219  1F3E                     	;# 
  1220  1F3F                     	;# 
  1221  1F43                     	;# 
  1222  1F44                     	;# 
  1223  1F45                     	;# 
  1224  1F46                     	;# 
  1225  1F47                     	;# 
  1226  1F48                     	;# 
  1227  1F49                     	;# 
  1228  1F4A                     	;# 
  1229  1F4E                     	;# 
  1230  1F4F                     	;# 
  1231  1F50                     	;# 
  1232  1F51                     	;# 
  1233  1F52                     	;# 
  1234  1F53                     	;# 
  1235  1F54                     	;# 
  1236  1F55                     	;# 
  1237  1F65                     	;# 
  1238  1F68                     	;# 
  1239  1F69                     	;# 
  1240  1F6A                     	;# 
  1241  1F6B                     	;# 
  1242  1FE4                     	;# 
  1243  1FE5                     	;# 
  1244  1FE6                     	;# 
  1245  1FE7                     	;# 
  1246  1FE8                     	;# 
  1247  1FE8                     	;# 
  1248  1FE9                     	;# 
  1249  1FEA                     	;# 
  1250  1FEB                     	;# 
  1251  1FED                     	;# 
  1252  1FEE                     	;# 
  1253  1FEF                     	;# 
  1254  0000                     	;# 
  1255  0001                     	;# 
  1256  0002                     	;# 
  1257  0003                     	;# 
  1258  0004                     	;# 
  1259  0005                     	;# 
  1260  0006                     	;# 
  1261  0007                     	;# 
  1262  0008                     	;# 
  1263  0009                     	;# 
  1264  000A                     	;# 
  1265  000B                     	;# 
  1266  000C                     	;# 
  1267  000D                     	;# 
  1268  000E                     	;# 
  1269  0010                     	;# 
  1270  0012                     	;# 
  1271  0013                     	;# 
  1272  0014                     	;# 
  1273  0016                     	;# 
  1274  0018                     	;# 
  1275  0019                     	;# 
  1276  001A                     	;# 
  1277  009B                     	;# 
  1278  009B                     	;# 
  1279  009C                     	;# 
  1280  009D                     	;# 
  1281  009E                     	;# 
  1282  009F                     	;# 
  1283  0119                     	;# 
  1284  0119                     	;# 
  1285  0119                     	;# 
  1286  011A                     	;# 
  1287  011A                     	;# 
  1288  011A                     	;# 
  1289  011B                     	;# 
  1290  011B                     	;# 
  1291  011B                     	;# 
  1292  011B                     	;# 
  1293  011B                     	;# 
  1294  011C                     	;# 
  1295  011C                     	;# 
  1296  011C                     	;# 
  1297  011D                     	;# 
  1298  011D                     	;# 
  1299  011D                     	;# 
  1300  011E                     	;# 
  1301  011E                     	;# 
  1302  011E                     	;# 
  1303  011F                     	;# 
  1304  011F                     	;# 
  1305  011F                     	;# 
  1306  011F                     	;# 
  1307  011F                     	;# 
  1308  018C                     	;# 
  1309  018D                     	;# 
  1310  018E                     	;# 
  1311  018F                     	;# 
  1312  0190                     	;# 
  1313  0191                     	;# 
  1314  0192                     	;# 
  1315  0196                     	;# 
  1316  0197                     	;# 
  1317  0198                     	;# 
  1318  0199                     	;# 
  1319  019A                     	;# 
  1320  019B                     	;# 
  1321  019C                     	;# 
  1322  020C                     	;# 
  1323  020C                     	;# 
  1324  020D                     	;# 
  1325  020E                     	;# 
  1326  020F                     	;# 
  1327  020F                     	;# 
  1328  0210                     	;# 
  1329  0210                     	;# 
  1330  0211                     	;# 
  1331  0211                     	;# 
  1332  028C                     	;# 
  1333  028C                     	;# 
  1334  028D                     	;# 
  1335  028D                     	;# 
  1336  028E                     	;# 
  1337  028F                     	;# 
  1338  0290                     	;# 
  1339  0291                     	;# 
  1340  030C                     	;# 
  1341  030C                     	;# 
  1342  030D                     	;# 
  1343  030E                     	;# 
  1344  030F                     	;# 
  1345  0310                     	;# 
  1346  0310                     	;# 
  1347  0311                     	;# 
  1348  0312                     	;# 
  1349  0313                     	;# 
  1350  0314                     	;# 
  1351  0314                     	;# 
  1352  0315                     	;# 
  1353  0316                     	;# 
  1354  0318                     	;# 
  1355  0318                     	;# 
  1356  0319                     	;# 
  1357  031A                     	;# 
  1358  031C                     	;# 
  1359  031C                     	;# 
  1360  031D                     	;# 
  1361  031E                     	;# 
  1362  038C                     	;# 
  1363  038C                     	;# 
  1364  038D                     	;# 
  1365  038E                     	;# 
  1366  058C                     	;# 
  1367  058C                     	;# 
  1368  058D                     	;# 
  1369  058E                     	;# 
  1370  058F                     	;# 
  1371  058F                     	;# 
  1372  0590                     	;# 
  1373  0591                     	;# 
  1374  0592                     	;# 
  1375  0593                     	;# 
  1376  059C                     	;# 
  1377  059C                     	;# 
  1378  059D                     	;# 
  1379  059D                     	;# 
  1380  059E                     	;# 
  1381  059F                     	;# 
  1382  060C                     	;# 
  1383  060D                     	;# 
  1384  060E                     	;# 
  1385  060F                     	;# 
  1386  0610                     	;# 
  1387  0611                     	;# 
  1388  0612                     	;# 
  1389  0613                     	;# 
  1390  0614                     	;# 
  1391  070C                     	;# 
  1392  070D                     	;# 
  1393  070E                     	;# 
  1394  070F                     	;# 
  1395  0710                     	;# 
  1396  0711                     	;# 
  1397  0712                     	;# 
  1398  0713                     	;# 
  1399  0716                     	;# 
  1400  0717                     	;# 
  1401  0718                     	;# 
  1402  0719                     	;# 
  1403  071A                     	;# 
  1404  071B                     	;# 
  1405  071C                     	;# 
  1406  071D                     	;# 
  1407  0796                     	;# 
  1408  0797                     	;# 
  1409  0798                     	;# 
  1410  0799                     	;# 
  1411  079A                     	;# 
  1412  079B                     	;# 
  1413  080C                     	;# 
  1414  080D                     	;# 
  1415  080E                     	;# 
  1416  080F                     	;# 
  1417  0810                     	;# 
  1418  0811                     	;# 
  1419  0812                     	;# 
  1420  0813                     	;# 
  1421  0814                     	;# 
  1422  081A                     	;# 
  1423  081A                     	;# 
  1424  081B                     	;# 
  1425  081C                     	;# 
  1426  081C                     	;# 
  1427  081D                     	;# 
  1428  081E                     	;# 
  1429  081F                     	;# 
  1430  088C                     	;# 
  1431  088D                     	;# 
  1432  088E                     	;# 
  1433  088F                     	;# 
  1434  0890                     	;# 
  1435  0891                     	;# 
  1436  0892                     	;# 
  1437  0893                     	;# 
  1438  0895                     	;# 
  1439  0896                     	;# 
  1440  090C                     	;# 
  1441  090E                     	;# 
  1442  090F                     	;# 
  1443  091F                     	;# 
  1444  098F                     	;# 
  1445  098F                     	;# 
  1446  0990                     	;# 
  1447  0991                     	;# 
  1448  0992                     	;# 
  1449  0993                     	;# 
  1450  0994                     	;# 
  1451  0995                     	;# 
  1452  0996                     	;# 
  1453  0997                     	;# 
  1454  0A19                     	;# 
  1455  0A19                     	;# 
  1456  0A1A                     	;# 
  1457  0A1A                     	;# 
  1458  0A1B                     	;# 
  1459  0A1B                     	;# 
  1460  0A1B                     	;# 
  1461  0A1C                     	;# 
  1462  0A1C                     	;# 
  1463  0A1D                     	;# 
  1464  0A1D                     	;# 
  1465  0A1E                     	;# 
  1466  0A1E                     	;# 
  1467  0A1F                     	;# 
  1468  0A1F                     	;# 
  1469  0A1F                     	;# 
  1470  1E0F                     	;# 
  1471  1E10                     	;# 
  1472  1E11                     	;# 
  1473  1E12                     	;# 
  1474  1E13                     	;# 
  1475  1E14                     	;# 
  1476  1E15                     	;# 
  1477  1E16                     	;# 
  1478  1E17                     	;# 
  1479  1E18                     	;# 
  1480  1E19                     	;# 
  1481  1E1A                     	;# 
  1482  1E1B                     	;# 
  1483  1E1C                     	;# 
  1484  1E1D                     	;# 
  1485  1E1E                     	;# 
  1486  1E1F                     	;# 
  1487  1E20                     	;# 
  1488  1E21                     	;# 
  1489  1E22                     	;# 
  1490  1E23                     	;# 
  1491  1E24                     	;# 
  1492  1E25                     	;# 
  1493  1E26                     	;# 
  1494  1E27                     	;# 
  1495  1E28                     	;# 
  1496  1E29                     	;# 
  1497  1E2A                     	;# 
  1498  1E2B                     	;# 
  1499  1E2C                     	;# 
  1500  1E2D                     	;# 
  1501  1E2E                     	;# 
  1502  1E2F                     	;# 
  1503  1E30                     	;# 
  1504  1E31                     	;# 
  1505  1E32                     	;# 
  1506  1E33                     	;# 
  1507  1E34                     	;# 
  1508  1E35                     	;# 
  1509  1E36                     	;# 
  1510  1E37                     	;# 
  1511  1E8F                     	;# 
  1512  1E90                     	;# 
  1513  1E91                     	;# 
  1514  1E92                     	;# 
  1515  1E93                     	;# 
  1516  1E9C                     	;# 
  1517  1EA1                     	;# 
  1518  1EA2                     	;# 
  1519  1EB1                     	;# 
  1520  1EBB                     	;# 
  1521  1EBC                     	;# 
  1522  1EBD                     	;# 
  1523  1EBE                     	;# 
  1524  1EC3                     	;# 
  1525  1EC5                     	;# 
  1526  1EC6                     	;# 
  1527  1EC7                     	;# 
  1528  1EC8                     	;# 
  1529  1EC9                     	;# 
  1530  1ECA                     	;# 
  1531  1ECB                     	;# 
  1532  1ECC                     	;# 
  1533  1ECD                     	;# 
  1534  1ECE                     	;# 
  1535  1F10                     	;# 
  1536  1F11                     	;# 
  1537  1F12                     	;# 
  1538  1F13                     	;# 
  1539  1F14                     	;# 
  1540  1F15                     	;# 
  1541  1F16                     	;# 
  1542  1F17                     	;# 
  1543  1F18                     	;# 
  1544  1F19                     	;# 
  1545  1F1A                     	;# 
  1546  1F1B                     	;# 
  1547  1F1C                     	;# 
  1548  1F1D                     	;# 
  1549  1F1E                     	;# 
  1550  1F1F                     	;# 
  1551  1F20                     	;# 
  1552  1F21                     	;# 
  1553  1F22                     	;# 
  1554  1F23                     	;# 
  1555  1F24                     	;# 
  1556  1F25                     	;# 
  1557  1F26                     	;# 
  1558  1F27                     	;# 
  1559  1F38                     	;# 
  1560  1F39                     	;# 
  1561  1F3A                     	;# 
  1562  1F3B                     	;# 
  1563  1F3C                     	;# 
  1564  1F3D                     	;# 
  1565  1F3E                     	;# 
  1566  1F3F                     	;# 
  1567  1F43                     	;# 
  1568  1F44                     	;# 
  1569  1F45                     	;# 
  1570  1F46                     	;# 
  1571  1F47                     	;# 
  1572  1F48                     	;# 
  1573  1F49                     	;# 
  1574  1F4A                     	;# 
  1575  1F4E                     	;# 
  1576  1F4F                     	;# 
  1577  1F50                     	;# 
  1578  1F51                     	;# 
  1579  1F52                     	;# 
  1580  1F53                     	;# 
  1581  1F54                     	;# 
  1582  1F55                     	;# 
  1583  1F65                     	;# 
  1584  1F68                     	;# 
  1585  1F69                     	;# 
  1586  1F6A                     	;# 
  1587  1F6B                     	;# 
  1588  1FE4                     	;# 
  1589  1FE5                     	;# 
  1590  1FE6                     	;# 
  1591  1FE7                     	;# 
  1592  1FE8                     	;# 
  1593  1FE8                     	;# 
  1594  1FE9                     	;# 
  1595  1FEA                     	;# 
  1596  1FEB                     	;# 
  1597  1FED                     	;# 
  1598  1FEE                     	;# 
  1599  1FEF                     	;# 
  1600  0000                     	;# 
  1601  0001                     	;# 
  1602  0002                     	;# 
  1603  0003                     	;# 
  1604  0004                     	;# 
  1605  0005                     	;# 
  1606  0006                     	;# 
  1607  0007                     	;# 
  1608  0008                     	;# 
  1609  0009                     	;# 
  1610  000A                     	;# 
  1611  000B                     	;# 
  1612  000C                     	;# 
  1613  000D                     	;# 
  1614  000E                     	;# 
  1615  0010                     	;# 
  1616  0012                     	;# 
  1617  0013                     	;# 
  1618  0014                     	;# 
  1619  0016                     	;# 
  1620  0018                     	;# 
  1621  0019                     	;# 
  1622  001A                     	;# 
  1623  009B                     	;# 
  1624  009B                     	;# 
  1625  009C                     	;# 
  1626  009D                     	;# 
  1627  009E                     	;# 
  1628  009F                     	;# 
  1629  0119                     	;# 
  1630  0119                     	;# 
  1631  0119                     	;# 
  1632  011A                     	;# 
  1633  011A                     	;# 
  1634  011A                     	;# 
  1635  011B                     	;# 
  1636  011B                     	;# 
  1637  011B                     	;# 
  1638  011B                     	;# 
  1639  011B                     	;# 
  1640  011C                     	;# 
  1641  011C                     	;# 
  1642  011C                     	;# 
  1643  011D                     	;# 
  1644  011D                     	;# 
  1645  011D                     	;# 
  1646  011E                     	;# 
  1647  011E                     	;# 
  1648  011E                     	;# 
  1649  011F                     	;# 
  1650  011F                     	;# 
  1651  011F                     	;# 
  1652  011F                     	;# 
  1653  011F                     	;# 
  1654  018C                     	;# 
  1655  018D                     	;# 
  1656  018E                     	;# 
  1657  018F                     	;# 
  1658  0190                     	;# 
  1659  0191                     	;# 
  1660  0192                     	;# 
  1661  0196                     	;# 
  1662  0197                     	;# 
  1663  0198                     	;# 
  1664  0199                     	;# 
  1665  019A                     	;# 
  1666  019B                     	;# 
  1667  019C                     	;# 
  1668  020C                     	;# 
  1669  020C                     	;# 
  1670  020D                     	;# 
  1671  020E                     	;# 
  1672  020F                     	;# 
  1673  020F                     	;# 
  1674  0210                     	;# 
  1675  0210                     	;# 
  1676  0211                     	;# 
  1677  0211                     	;# 
  1678  028C                     	;# 
  1679  028C                     	;# 
  1680  028D                     	;# 
  1681  028D                     	;# 
  1682  028E                     	;# 
  1683  028F                     	;# 
  1684  0290                     	;# 
  1685  0291                     	;# 
  1686  030C                     	;# 
  1687  030C                     	;# 
  1688  030D                     	;# 
  1689  030E                     	;# 
  1690  030F                     	;# 
  1691  0310                     	;# 
  1692  0310                     	;# 
  1693  0311                     	;# 
  1694  0312                     	;# 
  1695  0313                     	;# 
  1696  0314                     	;# 
  1697  0314                     	;# 
  1698  0315                     	;# 
  1699  0316                     	;# 
  1700  0318                     	;# 
  1701  0318                     	;# 
  1702  0319                     	;# 
  1703  031A                     	;# 
  1704  031C                     	;# 
  1705  031C                     	;# 
  1706  031D                     	;# 
  1707  031E                     	;# 
  1708  038C                     	;# 
  1709  038C                     	;# 
  1710  038D                     	;# 
  1711  038E                     	;# 
  1712  058C                     	;# 
  1713  058C                     	;# 
  1714  058D                     	;# 
  1715  058E                     	;# 
  1716  058F                     	;# 
  1717  058F                     	;# 
  1718  0590                     	;# 
  1719  0591                     	;# 
  1720  0592                     	;# 
  1721  0593                     	;# 
  1722  059C                     	;# 
  1723  059C                     	;# 
  1724  059D                     	;# 
  1725  059D                     	;# 
  1726  059E                     	;# 
  1727  059F                     	;# 
  1728  060C                     	;# 
  1729  060D                     	;# 
  1730  060E                     	;# 
  1731  060F                     	;# 
  1732  0610                     	;# 
  1733  0611                     	;# 
  1734  0612                     	;# 
  1735  0613                     	;# 
  1736  0614                     	;# 
  1737  070C                     	;# 
  1738  070D                     	;# 
  1739  070E                     	;# 
  1740  070F                     	;# 
  1741  0710                     	;# 
  1742  0711                     	;# 
  1743  0712                     	;# 
  1744  0713                     	;# 
  1745  0716                     	;# 
  1746  0717                     	;# 
  1747  0718                     	;# 
  1748  0719                     	;# 
  1749  071A                     	;# 
  1750  071B                     	;# 
  1751  071C                     	;# 
  1752  071D                     	;# 
  1753  0796                     	;# 
  1754  0797                     	;# 
  1755  0798                     	;# 
  1756  0799                     	;# 
  1757  079A                     	;# 
  1758  079B                     	;# 
  1759  080C                     	;# 
  1760  080D                     	;# 
  1761  080E                     	;# 
  1762  080F                     	;# 
  1763  0810                     	;# 
  1764  0811                     	;# 
  1765  0812                     	;# 
  1766  0813                     	;# 
  1767  0814                     	;# 
  1768  081A                     	;# 
  1769  081A                     	;# 
  1770  081B                     	;# 
  1771  081C                     	;# 
  1772  081C                     	;# 
  1773  081D                     	;# 
  1774  081E                     	;# 
  1775  081F                     	;# 
  1776  088C                     	;# 
  1777  088D                     	;# 
  1778  088E                     	;# 
  1779  088F                     	;# 
  1780  0890                     	;# 
  1781  0891                     	;# 
  1782  0892                     	;# 
  1783  0893                     	;# 
  1784  0895                     	;# 
  1785  0896                     	;# 
  1786  090C                     	;# 
  1787  090E                     	;# 
  1788  090F                     	;# 
  1789  091F                     	;# 
  1790  098F                     	;# 
  1791  098F                     	;# 
  1792  0990                     	;# 
  1793  0991                     	;# 
  1794  0992                     	;# 
  1795  0993                     	;# 
  1796  0994                     	;# 
  1797  0995                     	;# 
  1798  0996                     	;# 
  1799  0997                     	;# 
  1800  0A19                     	;# 
  1801  0A19                     	;# 
  1802  0A1A                     	;# 
  1803  0A1A                     	;# 
  1804  0A1B                     	;# 
  1805  0A1B                     	;# 
  1806  0A1B                     	;# 
  1807  0A1C                     	;# 
  1808  0A1C                     	;# 
  1809  0A1D                     	;# 
  1810  0A1D                     	;# 
  1811  0A1E                     	;# 
  1812  0A1E                     	;# 
  1813  0A1F                     	;# 
  1814  0A1F                     	;# 
  1815  0A1F                     	;# 
  1816  1E0F                     	;# 
  1817  1E10                     	;# 
  1818  1E11                     	;# 
  1819  1E12                     	;# 
  1820  1E13                     	;# 
  1821  1E14                     	;# 
  1822  1E15                     	;# 
  1823  1E16                     	;# 
  1824  1E17                     	;# 
  1825  1E18                     	;# 
  1826  1E19                     	;# 
  1827  1E1A                     	;# 
  1828  1E1B                     	;# 
  1829  1E1C                     	;# 
  1830  1E1D                     	;# 
  1831  1E1E                     	;# 
  1832  1E1F                     	;# 
  1833  1E20                     	;# 
  1834  1E21                     	;# 
  1835  1E22                     	;# 
  1836  1E23                     	;# 
  1837  1E24                     	;# 
  1838  1E25                     	;# 
  1839  1E26                     	;# 
  1840  1E27                     	;# 
  1841  1E28                     	;# 
  1842  1E29                     	;# 
  1843  1E2A                     	;# 
  1844  1E2B                     	;# 
  1845  1E2C                     	;# 
  1846  1E2D                     	;# 
  1847  1E2E                     	;# 
  1848  1E2F                     	;# 
  1849  1E30                     	;# 
  1850  1E31                     	;# 
  1851  1E32                     	;# 
  1852  1E33                     	;# 
  1853  1E34                     	;# 
  1854  1E35                     	;# 
  1855  1E36                     	;# 
  1856  1E37                     	;# 
  1857  1E8F                     	;# 
  1858  1E90                     	;# 
  1859  1E91                     	;# 
  1860  1E92                     	;# 
  1861  1E93                     	;# 
  1862  1E9C                     	;# 
  1863  1EA1                     	;# 
  1864  1EA2                     	;# 
  1865  1EB1                     	;# 
  1866  1EBB                     	;# 
  1867  1EBC                     	;# 
  1868  1EBD                     	;# 
  1869  1EBE                     	;# 
  1870  1EC3                     	;# 
  1871  1EC5                     	;# 
  1872  1EC6                     	;# 
  1873  1EC7                     	;# 
  1874  1EC8                     	;# 
  1875  1EC9                     	;# 
  1876  1ECA                     	;# 
  1877  1ECB                     	;# 
  1878  1ECC                     	;# 
  1879  1ECD                     	;# 
  1880  1ECE                     	;# 
  1881  1F10                     	;# 
  1882  1F11                     	;# 
  1883  1F12                     	;# 
  1884  1F13                     	;# 
  1885  1F14                     	;# 
  1886  1F15                     	;# 
  1887  1F16                     	;# 
  1888  1F17                     	;# 
  1889  1F18                     	;# 
  1890  1F19                     	;# 
  1891  1F1A                     	;# 
  1892  1F1B                     	;# 
  1893  1F1C                     	;# 
  1894  1F1D                     	;# 
  1895  1F1E                     	;# 
  1896  1F1F                     	;# 
  1897  1F20                     	;# 
  1898  1F21                     	;# 
  1899  1F22                     	;# 
  1900  1F23                     	;# 
  1901  1F24                     	;# 
  1902  1F25                     	;# 
  1903  1F26                     	;# 
  1904  1F27                     	;# 
  1905  1F38                     	;# 
  1906  1F39                     	;# 
  1907  1F3A                     	;# 
  1908  1F3B                     	;# 
  1909  1F3C                     	;# 
  1910  1F3D                     	;# 
  1911  1F3E                     	;# 
  1912  1F3F                     	;# 
  1913  1F43                     	;# 
  1914  1F44                     	;# 
  1915  1F45                     	;# 
  1916  1F46                     	;# 
  1917  1F47                     	;# 
  1918  1F48                     	;# 
  1919  1F49                     	;# 
  1920  1F4A                     	;# 
  1921  1F4E                     	;# 
  1922  1F4F                     	;# 
  1923  1F50                     	;# 
  1924  1F51                     	;# 
  1925  1F52                     	;# 
  1926  1F53                     	;# 
  1927  1F54                     	;# 
  1928  1F55                     	;# 
  1929  1F65                     	;# 
  1930  1F68                     	;# 
  1931  1F69                     	;# 
  1932  1F6A                     	;# 
  1933  1F6B                     	;# 
  1934  1FE4                     	;# 
  1935  1FE5                     	;# 
  1936  1FE6                     	;# 
  1937  1FE7                     	;# 
  1938  1FE8                     	;# 
  1939  1FE8                     	;# 
  1940  1FE9                     	;# 
  1941  1FEA                     	;# 
  1942  1FEB                     	;# 
  1943  1FED                     	;# 
  1944  1FEE                     	;# 
  1945  1FEF                     	;# 
  1946  0000                     	;# 
  1947  0001                     	;# 
  1948  0002                     	;# 
  1949  0003                     	;# 
  1950  0004                     	;# 
  1951  0005                     	;# 
  1952  0006                     	;# 
  1953  0007                     	;# 
  1954  0008                     	;# 
  1955  0009                     	;# 
  1956  000A                     	;# 
  1957  000B                     	;# 
  1958  000C                     	;# 
  1959  000D                     	;# 
  1960  000E                     	;# 
  1961  0010                     	;# 
  1962  0012                     	;# 
  1963  0013                     	;# 
  1964  0014                     	;# 
  1965  0016                     	;# 
  1966  0018                     	;# 
  1967  0019                     	;# 
  1968  001A                     	;# 
  1969  009B                     	;# 
  1970  009B                     	;# 
  1971  009C                     	;# 
  1972  009D                     	;# 
  1973  009E                     	;# 
  1974  009F                     	;# 
  1975  0119                     	;# 
  1976  0119                     	;# 
  1977  0119                     	;# 
  1978  011A                     	;# 
  1979  011A                     	;# 
  1980  011A                     	;# 
  1981  011B                     	;# 
  1982  011B                     	;# 
  1983  011B                     	;# 
  1984  011B                     	;# 
  1985  011B                     	;# 
  1986  011C                     	;# 
  1987  011C                     	;# 
  1988  011C                     	;# 
  1989  011D                     	;# 
  1990  011D                     	;# 
  1991  011D                     	;# 
  1992  011E                     	;# 
  1993  011E                     	;# 
  1994  011E                     	;# 
  1995  011F                     	;# 
  1996  011F                     	;# 
  1997  011F                     	;# 
  1998  011F                     	;# 
  1999  011F                     	;# 
  2000  018C                     	;# 
  2001  018D                     	;# 
  2002  018E                     	;# 
  2003  018F                     	;# 
  2004  0190                     	;# 
  2005  0191                     	;# 
  2006  0192                     	;# 
  2007  0196                     	;# 
  2008  0197                     	;# 
  2009  0198                     	;# 
  2010  0199                     	;# 
  2011  019A                     	;# 
  2012  019B                     	;# 
  2013  019C                     	;# 
  2014  020C                     	;# 
  2015  020C                     	;# 
  2016  020D                     	;# 
  2017  020E                     	;# 
  2018  020F                     	;# 
  2019  020F                     	;# 
  2020  0210                     	;# 
  2021  0210                     	;# 
  2022  0211                     	;# 
  2023  0211                     	;# 
  2024  028C                     	;# 
  2025  028C                     	;# 
  2026  028D                     	;# 
  2027  028D                     	;# 
  2028  028E                     	;# 
  2029  028F                     	;# 
  2030  0290                     	;# 
  2031  0291                     	;# 
  2032  030C                     	;# 
  2033  030C                     	;# 
  2034  030D                     	;# 
  2035  030E                     	;# 
  2036  030F                     	;# 
  2037  0310                     	;# 
  2038  0310                     	;# 
  2039  0311                     	;# 
  2040  0312                     	;# 
  2041  0313                     	;# 
  2042  0314                     	;# 
  2043  0314                     	;# 
  2044  0315                     	;# 
  2045  0316                     	;# 
  2046  0318                     	;# 
  2047  0318                     	;# 
  2048  0319                     	;# 
  2049  031A                     	;# 
  2050  031C                     	;# 
  2051  031C                     	;# 
  2052  031D                     	;# 
  2053  031E                     	;# 
  2054  038C                     	;# 
  2055  038C                     	;# 
  2056  038D                     	;# 
  2057  038E                     	;# 
  2058  058C                     	;# 
  2059  058C                     	;# 
  2060  058D                     	;# 
  2061  058E                     	;# 
  2062  058F                     	;# 
  2063  058F                     	;# 
  2064  0590                     	;# 
  2065  0591                     	;# 
  2066  0592                     	;# 
  2067  0593                     	;# 
  2068  059C                     	;# 
  2069  059C                     	;# 
  2070  059D                     	;# 
  2071  059D                     	;# 
  2072  059E                     	;# 
  2073  059F                     	;# 
  2074  060C                     	;# 
  2075  060D                     	;# 
  2076  060E                     	;# 
  2077  060F                     	;# 
  2078  0610                     	;# 
  2079  0611                     	;# 
  2080  0612                     	;# 
  2081  0613                     	;# 
  2082  0614                     	;# 
  2083  070C                     	;# 
  2084  070D                     	;# 
  2085  070E                     	;# 
  2086  070F                     	;# 
  2087  0710                     	;# 
  2088  0711                     	;# 
  2089  0712                     	;# 
  2090  0713                     	;# 
  2091  0716                     	;# 
  2092  0717                     	;# 
  2093  0718                     	;# 
  2094  0719                     	;# 
  2095  071A                     	;# 
  2096  071B                     	;# 
  2097  071C                     	;# 
  2098  071D                     	;# 
  2099  0796                     	;# 
  2100  0797                     	;# 
  2101  0798                     	;# 
  2102  0799                     	;# 
  2103  079A                     	;# 
  2104  079B                     	;# 
  2105  080C                     	;# 
  2106  080D                     	;# 
  2107  080E                     	;# 
  2108  080F                     	;# 
  2109  0810                     	;# 
  2110  0811                     	;# 
  2111  0812                     	;# 
  2112  0813                     	;# 
  2113  0814                     	;# 
  2114  081A                     	;# 
  2115  081A                     	;# 
  2116  081B                     	;# 
  2117  081C                     	;# 
  2118  081C                     	;# 
  2119  081D                     	;# 
  2120  081E                     	;# 
  2121  081F                     	;# 
  2122  088C                     	;# 
  2123  088D                     	;# 
  2124  088E                     	;# 
  2125  088F                     	;# 
  2126  0890                     	;# 
  2127  0891                     	;# 
  2128  0892                     	;# 
  2129  0893                     	;# 
  2130  0895                     	;# 
  2131  0896                     	;# 
  2132  090C                     	;# 
  2133  090E                     	;# 
  2134  090F                     	;# 
  2135  091F                     	;# 
  2136  098F                     	;# 
  2137  098F                     	;# 
  2138  0990                     	;# 
  2139  0991                     	;# 
  2140  0992                     	;# 
  2141  0993                     	;# 
  2142  0994                     	;# 
  2143  0995                     	;# 
  2144  0996                     	;# 
  2145  0997                     	;# 
  2146  0A19                     	;# 
  2147  0A19                     	;# 
  2148  0A1A                     	;# 
  2149  0A1A                     	;# 
  2150  0A1B                     	;# 
  2151  0A1B                     	;# 
  2152  0A1B                     	;# 
  2153  0A1C                     	;# 
  2154  0A1C                     	;# 
  2155  0A1D                     	;# 
  2156  0A1D                     	;# 
  2157  0A1E                     	;# 
  2158  0A1E                     	;# 
  2159  0A1F                     	;# 
  2160  0A1F                     	;# 
  2161  0A1F                     	;# 
  2162  1E0F                     	;# 
  2163  1E10                     	;# 
  2164  1E11                     	;# 
  2165  1E12                     	;# 
  2166  1E13                     	;# 
  2167  1E14                     	;# 
  2168  1E15                     	;# 
  2169  1E16                     	;# 
  2170  1E17                     	;# 
  2171  1E18                     	;# 
  2172  1E19                     	;# 
  2173  1E1A                     	;# 
  2174  1E1B                     	;# 
  2175  1E1C                     	;# 
  2176  1E1D                     	;# 
  2177  1E1E                     	;# 
  2178  1E1F                     	;# 
  2179  1E20                     	;# 
  2180  1E21                     	;# 
  2181  1E22                     	;# 
  2182  1E23                     	;# 
  2183  1E24                     	;# 
  2184  1E25                     	;# 
  2185  1E26                     	;# 
  2186  1E27                     	;# 
  2187  1E28                     	;# 
  2188  1E29                     	;# 
  2189  1E2A                     	;# 
  2190  1E2B                     	;# 
  2191  1E2C                     	;# 
  2192  1E2D                     	;# 
  2193  1E2E                     	;# 
  2194  1E2F                     	;# 
  2195  1E30                     	;# 
  2196  1E31                     	;# 
  2197  1E32                     	;# 
  2198  1E33                     	;# 
  2199  1E34                     	;# 
  2200  1E35                     	;# 
  2201  1E36                     	;# 
  2202  1E37                     	;# 
  2203  1E8F                     	;# 
  2204  1E90                     	;# 
  2205  1E91                     	;# 
  2206  1E92                     	;# 
  2207  1E93                     	;# 
  2208  1E9C                     	;# 
  2209  1EA1                     	;# 
  2210  1EA2                     	;# 
  2211  1EB1                     	;# 
  2212  1EBB                     	;# 
  2213  1EBC                     	;# 
  2214  1EBD                     	;# 
  2215  1EBE                     	;# 
  2216  1EC3                     	;# 
  2217  1EC5                     	;# 
  2218  1EC6                     	;# 
  2219  1EC7                     	;# 
  2220  1EC8                     	;# 
  2221  1EC9                     	;# 
  2222  1ECA                     	;# 
  2223  1ECB                     	;# 
  2224  1ECC                     	;# 
  2225  1ECD                     	;# 
  2226  1ECE                     	;# 
  2227  1F10                     	;# 
  2228  1F11                     	;# 
  2229  1F12                     	;# 
  2230  1F13                     	;# 
  2231  1F14                     	;# 
  2232  1F15                     	;# 
  2233  1F16                     	;# 
  2234  1F17                     	;# 
  2235  1F18                     	;# 
  2236  1F19                     	;# 
  2237  1F1A                     	;# 
  2238  1F1B                     	;# 
  2239  1F1C                     	;# 
  2240  1F1D                     	;# 
  2241  1F1E                     	;# 
  2242  1F1F                     	;# 
  2243  1F20                     	;# 
  2244  1F21                     	;# 
  2245  1F22                     	;# 
  2246  1F23                     	;# 
  2247  1F24                     	;# 
  2248  1F25                     	;# 
  2249  1F26                     	;# 
  2250  1F27                     	;# 
  2251  1F38                     	;# 
  2252  1F39                     	;# 
  2253  1F3A                     	;# 
  2254  1F3B                     	;# 
  2255  1F3C                     	;# 
  2256  1F3D                     	;# 
  2257  1F3E                     	;# 
  2258  1F3F                     	;# 
  2259  1F43                     	;# 
  2260  1F44                     	;# 
  2261  1F45                     	;# 
  2262  1F46                     	;# 
  2263  1F47                     	;# 
  2264  1F48                     	;# 
  2265  1F49                     	;# 
  2266  1F4A                     	;# 
  2267  1F4E                     	;# 
  2268  1F4F                     	;# 
  2269  1F50                     	;# 
  2270  1F51                     	;# 
  2271  1F52                     	;# 
  2272  1F53                     	;# 
  2273  1F54                     	;# 
  2274  1F55                     	;# 
  2275  1F65                     	;# 
  2276  1F68                     	;# 
  2277  1F69                     	;# 
  2278  1F6A                     	;# 
  2279  1F6B                     	;# 
  2280  1FE4                     	;# 
  2281  1FE5                     	;# 
  2282  1FE6                     	;# 
  2283  1FE7                     	;# 
  2284  1FE8                     	;# 
  2285  1FE8                     	;# 
  2286  1FE9                     	;# 
  2287  1FEA                     	;# 
  2288  1FEB                     	;# 
  2289  1FED                     	;# 
  2290  1FEE                     	;# 
  2291  1FEF                     	;# 
  2292  0000                     	;# 
  2293  0001                     	;# 
  2294  0002                     	;# 
  2295  0003                     	;# 
  2296  0004                     	;# 
  2297  0005                     	;# 
  2298  0006                     	;# 
  2299  0007                     	;# 
  2300  0008                     	;# 
  2301  0009                     	;# 
  2302  000A                     	;# 
  2303  000B                     	;# 
  2304  000C                     	;# 
  2305  000D                     	;# 
  2306  000E                     	;# 
  2307  0010                     	;# 
  2308  0012                     	;# 
  2309  0013                     	;# 
  2310  0014                     	;# 
  2311  0016                     	;# 
  2312  0018                     	;# 
  2313  0019                     	;# 
  2314  001A                     	;# 
  2315  009B                     	;# 
  2316  009B                     	;# 
  2317  009C                     	;# 
  2318  009D                     	;# 
  2319  009E                     	;# 
  2320  009F                     	;# 
  2321  0119                     	;# 
  2322  0119                     	;# 
  2323  0119                     	;# 
  2324  011A                     	;# 
  2325  011A                     	;# 
  2326  011A                     	;# 
  2327  011B                     	;# 
  2328  011B                     	;# 
  2329  011B                     	;# 
  2330  011B                     	;# 
  2331  011B                     	;# 
  2332  011C                     	;# 
  2333  011C                     	;# 
  2334  011C                     	;# 
  2335  011D                     	;# 
  2336  011D                     	;# 
  2337  011D                     	;# 
  2338  011E                     	;# 
  2339  011E                     	;# 
  2340  011E                     	;# 
  2341  011F                     	;# 
  2342  011F                     	;# 
  2343  011F                     	;# 
  2344  011F                     	;# 
  2345  011F                     	;# 
  2346  018C                     	;# 
  2347  018D                     	;# 
  2348  018E                     	;# 
  2349  018F                     	;# 
  2350  0190                     	;# 
  2351  0191                     	;# 
  2352  0192                     	;# 
  2353  0196                     	;# 
  2354  0197                     	;# 
  2355  0198                     	;# 
  2356  0199                     	;# 
  2357  019A                     	;# 
  2358  019B                     	;# 
  2359  019C                     	;# 
  2360  020C                     	;# 
  2361  020C                     	;# 
  2362  020D                     	;# 
  2363  020E                     	;# 
  2364  020F                     	;# 
  2365  020F                     	;# 
  2366  0210                     	;# 
  2367  0210                     	;# 
  2368  0211                     	;# 
  2369  0211                     	;# 
  2370  028C                     	;# 
  2371  028C                     	;# 
  2372  028D                     	;# 
  2373  028D                     	;# 
  2374  028E                     	;# 
  2375  028F                     	;# 
  2376  0290                     	;# 
  2377  0291                     	;# 
  2378  030C                     	;# 
  2379  030C                     	;# 
  2380  030D                     	;# 
  2381  030E                     	;# 
  2382  030F                     	;# 
  2383  0310                     	;# 
  2384  0310                     	;# 
  2385  0311                     	;# 
  2386  0312                     	;# 
  2387  0313                     	;# 
  2388  0314                     	;# 
  2389  0314                     	;# 
  2390  0315                     	;# 
  2391  0316                     	;# 
  2392  0318                     	;# 
  2393  0318                     	;# 
  2394  0319                     	;# 
  2395  031A                     	;# 
  2396  031C                     	;# 
  2397  031C                     	;# 
  2398  031D                     	;# 
  2399  031E                     	;# 
  2400  038C                     	;# 
  2401  038C                     	;# 
  2402  038D                     	;# 
  2403  038E                     	;# 
  2404  058C                     	;# 
  2405  058C                     	;# 
  2406  058D                     	;# 
  2407  058E                     	;# 
  2408  058F                     	;# 
  2409  058F                     	;# 
  2410  0590                     	;# 
  2411  0591                     	;# 
  2412  0592                     	;# 
  2413  0593                     	;# 
  2414  059C                     	;# 
  2415  059C                     	;# 
  2416  059D                     	;# 
  2417  059D                     	;# 
  2418  059E                     	;# 
  2419  059F                     	;# 
  2420  060C                     	;# 
  2421  060D                     	;# 
  2422  060E                     	;# 
  2423  060F                     	;# 
  2424  0610                     	;# 
  2425  0611                     	;# 
  2426  0612                     	;# 
  2427  0613                     	;# 
  2428  0614                     	;# 
  2429  070C                     	;# 
  2430  070D                     	;# 
  2431  070E                     	;# 
  2432  070F                     	;# 
  2433  0710                     	;# 
  2434  0711                     	;# 
  2435  0712                     	;# 
  2436  0713                     	;# 
  2437  0716                     	;# 
  2438  0717                     	;# 
  2439  0718                     	;# 
  2440  0719                     	;# 
  2441  071A                     	;# 
  2442  071B                     	;# 
  2443  071C                     	;# 
  2444  071D                     	;# 
  2445  0796                     	;# 
  2446  0797                     	;# 
  2447  0798                     	;# 
  2448  0799                     	;# 
  2449  079A                     	;# 
  2450  079B                     	;# 
  2451  080C                     	;# 
  2452  080D                     	;# 
  2453  080E                     	;# 
  2454  080F                     	;# 
  2455  0810                     	;# 
  2456  0811                     	;# 
  2457  0812                     	;# 
  2458  0813                     	;# 
  2459  0814                     	;# 
  2460  081A                     	;# 
  2461  081A                     	;# 
  2462  081B                     	;# 
  2463  081C                     	;# 
  2464  081C                     	;# 
  2465  081D                     	;# 
  2466  081E                     	;# 
  2467  081F                     	;# 
  2468  088C                     	;# 
  2469  088D                     	;# 
  2470  088E                     	;# 
  2471  088F                     	;# 
  2472  0890                     	;# 
  2473  0891                     	;# 
  2474  0892                     	;# 
  2475  0893                     	;# 
  2476  0895                     	;# 
  2477  0896                     	;# 
  2478  090C                     	;# 
  2479  090E                     	;# 
  2480  090F                     	;# 
  2481  091F                     	;# 
  2482  098F                     	;# 
  2483  098F                     	;# 
  2484  0990                     	;# 
  2485  0991                     	;# 
  2486  0992                     	;# 
  2487  0993                     	;# 
  2488  0994                     	;# 
  2489  0995                     	;# 
  2490  0996                     	;# 
  2491  0997                     	;# 
  2492  0A19                     	;# 
  2493  0A19                     	;# 
  2494  0A1A                     	;# 
  2495  0A1A                     	;# 
  2496  0A1B                     	;# 
  2497  0A1B                     	;# 
  2498  0A1B                     	;# 
  2499  0A1C                     	;# 
  2500  0A1C                     	;# 
  2501  0A1D                     	;# 
  2502  0A1D                     	;# 
  2503  0A1E                     	;# 
  2504  0A1E                     	;# 
  2505  0A1F                     	;# 
  2506  0A1F                     	;# 
  2507  0A1F                     	;# 
  2508  1E0F                     	;# 
  2509  1E10                     	;# 
  2510  1E11                     	;# 
  2511  1E12                     	;# 
  2512  1E13                     	;# 
  2513  1E14                     	;# 
  2514  1E15                     	;# 
  2515  1E16                     	;# 
  2516  1E17                     	;# 
  2517  1E18                     	;# 
  2518  1E19                     	;# 
  2519  1E1A                     	;# 
  2520  1E1B                     	;# 
  2521  1E1C                     	;# 
  2522  1E1D                     	;# 
  2523  1E1E                     	;# 
  2524  1E1F                     	;# 
  2525  1E20                     	;# 
  2526  1E21                     	;# 
  2527  1E22                     	;# 
  2528  1E23                     	;# 
  2529  1E24                     	;# 
  2530  1E25                     	;# 
  2531  1E26                     	;# 
  2532  1E27                     	;# 
  2533  1E28                     	;# 
  2534  1E29                     	;# 
  2535  1E2A                     	;# 
  2536  1E2B                     	;# 
  2537  1E2C                     	;# 
  2538  1E2D                     	;# 
  2539  1E2E                     	;# 
  2540  1E2F                     	;# 
  2541  1E30                     	;# 
  2542  1E31                     	;# 
  2543  1E32                     	;# 
  2544  1E33                     	;# 
  2545  1E34                     	;# 
  2546  1E35                     	;# 
  2547  1E36                     	;# 
  2548  1E37                     	;# 
  2549  1E8F                     	;# 
  2550  1E90                     	;# 
  2551  1E91                     	;# 
  2552  1E92                     	;# 
  2553  1E93                     	;# 
  2554  1E9C                     	;# 
  2555  1EA1                     	;# 
  2556  1EA2                     	;# 
  2557  1EB1                     	;# 
  2558  1EBB                     	;# 
  2559  1EBC                     	;# 
  2560  1EBD                     	;# 
  2561  1EBE                     	;# 
  2562  1EC3                     	;# 
  2563  1EC5                     	;# 
  2564  1EC6                     	;# 
  2565  1EC7                     	;# 
  2566  1EC8                     	;# 
  2567  1EC9                     	;# 
  2568  1ECA                     	;# 
  2569  1ECB                     	;# 
  2570  1ECC                     	;# 
  2571  1ECD                     	;# 
  2572  1ECE                     	;# 
  2573  1F10                     	;# 
  2574  1F11                     	;# 
  2575  1F12                     	;# 
  2576  1F13                     	;# 
  2577  1F14                     	;# 
  2578  1F15                     	;# 
  2579  1F16                     	;# 
  2580  1F17                     	;# 
  2581  1F18                     	;# 
  2582  1F19                     	;# 
  2583  1F1A                     	;# 
  2584  1F1B                     	;# 
  2585  1F1C                     	;# 
  2586  1F1D                     	;# 
  2587  1F1E                     	;# 
  2588  1F1F                     	;# 
  2589  1F20                     	;# 
  2590  1F21                     	;# 
  2591  1F22                     	;# 
  2592  1F23                     	;# 
  2593  1F24                     	;# 
  2594  1F25                     	;# 
  2595  1F26                     	;# 
  2596  1F27                     	;# 
  2597  1F38                     	;# 
  2598  1F39                     	;# 
  2599  1F3A                     	;# 
  2600  1F3B                     	;# 
  2601  1F3C                     	;# 
  2602  1F3D                     	;# 
  2603  1F3E                     	;# 
  2604  1F3F                     	;# 
  2605  1F43                     	;# 
  2606  1F44                     	;# 
  2607  1F45                     	;# 
  2608  1F46                     	;# 
  2609  1F47                     	;# 
  2610  1F48                     	;# 
  2611  1F49                     	;# 
  2612  1F4A                     	;# 
  2613  1F4E                     	;# 
  2614  1F4F                     	;# 
  2615  1F50                     	;# 
  2616  1F51                     	;# 
  2617  1F52                     	;# 
  2618  1F53                     	;# 
  2619  1F54                     	;# 
  2620  1F55                     	;# 
  2621  1F65                     	;# 
  2622  1F68                     	;# 
  2623  1F69                     	;# 
  2624  1F6A                     	;# 
  2625  1F6B                     	;# 
  2626  1FE4                     	;# 
  2627  1FE5                     	;# 
  2628  1FE6                     	;# 
  2629  1FE7                     	;# 
  2630  1FE8                     	;# 
  2631  1FE8                     	;# 
  2632  1FE9                     	;# 
  2633  1FEA                     	;# 
  2634  1FEB                     	;# 
  2635  1FED                     	;# 
  2636  1FEE                     	;# 
  2637  1FEF                     	;# 
  2638  0000                     	;# 
  2639  0001                     	;# 
  2640  0002                     	;# 
  2641  0003                     	;# 
  2642  0004                     	;# 
  2643  0005                     	;# 
  2644  0006                     	;# 
  2645  0007                     	;# 
  2646  0008                     	;# 
  2647  0009                     	;# 
  2648  000A                     	;# 
  2649  000B                     	;# 
  2650  000C                     	;# 
  2651  000D                     	;# 
  2652  000E                     	;# 
  2653  0010                     	;# 
  2654  0012                     	;# 
  2655  0013                     	;# 
  2656  0014                     	;# 
  2657  0016                     	;# 
  2658  0018                     	;# 
  2659  0019                     	;# 
  2660  001A                     	;# 
  2661  009B                     	;# 
  2662  009B                     	;# 
  2663  009C                     	;# 
  2664  009D                     	;# 
  2665  009E                     	;# 
  2666  009F                     	;# 
  2667  0119                     	;# 
  2668  0119                     	;# 
  2669  0119                     	;# 
  2670  011A                     	;# 
  2671  011A                     	;# 
  2672  011A                     	;# 
  2673  011B                     	;# 
  2674  011B                     	;# 
  2675  011B                     	;# 
  2676  011B                     	;# 
  2677  011B                     	;# 
  2678  011C                     	;# 
  2679  011C                     	;# 
  2680  011C                     	;# 
  2681  011D                     	;# 
  2682  011D                     	;# 
  2683  011D                     	;# 
  2684  011E                     	;# 
  2685  011E                     	;# 
  2686  011E                     	;# 
  2687  011F                     	;# 
  2688  011F                     	;# 
  2689  011F                     	;# 
  2690  011F                     	;# 
  2691  011F                     	;# 
  2692  018C                     	;# 
  2693  018D                     	;# 
  2694  018E                     	;# 
  2695  018F                     	;# 
  2696  0190                     	;# 
  2697  0191                     	;# 
  2698  0192                     	;# 
  2699  0196                     	;# 
  2700  0197                     	;# 
  2701  0198                     	;# 
  2702  0199                     	;# 
  2703  019A                     	;# 
  2704  019B                     	;# 
  2705  019C                     	;# 
  2706  020C                     	;# 
  2707  020C                     	;# 
  2708  020D                     	;# 
  2709  020E                     	;# 
  2710  020F                     	;# 
  2711  020F                     	;# 
  2712  0210                     	;# 
  2713  0210                     	;# 
  2714  0211                     	;# 
  2715  0211                     	;# 
  2716  028C                     	;# 
  2717  028C                     	;# 
  2718  028D                     	;# 
  2719  028D                     	;# 
  2720  028E                     	;# 
  2721  028F                     	;# 
  2722  0290                     	;# 
  2723  0291                     	;# 
  2724  030C                     	;# 
  2725  030C                     	;# 
  2726  030D                     	;# 
  2727  030E                     	;# 
  2728  030F                     	;# 
  2729  0310                     	;# 
  2730  0310                     	;# 
  2731  0311                     	;# 
  2732  0312                     	;# 
  2733  0313                     	;# 
  2734  0314                     	;# 
  2735  0314                     	;# 
  2736  0315                     	;# 
  2737  0316                     	;# 
  2738  0318                     	;# 
  2739  0318                     	;# 
  2740  0319                     	;# 
  2741  031A                     	;# 
  2742  031C                     	;# 
  2743  031C                     	;# 
  2744  031D                     	;# 
  2745  031E                     	;# 
  2746  038C                     	;# 
  2747  038C                     	;# 
  2748  038D                     	;# 
  2749  038E                     	;# 
  2750  058C                     	;# 
  2751  058C                     	;# 
  2752  058D                     	;# 
  2753  058E                     	;# 
  2754  058F                     	;# 
  2755  058F                     	;# 
  2756  0590                     	;# 
  2757  0591                     	;# 
  2758  0592                     	;# 
  2759  0593                     	;# 
  2760  059C                     	;# 
  2761  059C                     	;# 
  2762  059D                     	;# 
  2763  059D                     	;# 
  2764  059E                     	;# 
  2765  059F                     	;# 
  2766  060C                     	;# 
  2767  060D                     	;# 
  2768  060E                     	;# 
  2769  060F                     	;# 
  2770  0610                     	;# 
  2771  0611                     	;# 
  2772  0612                     	;# 
  2773  0613                     	;# 
  2774  0614                     	;# 
  2775  070C                     	;# 
  2776  070D                     	;# 
  2777  070E                     	;# 
  2778  070F                     	;# 
  2779  0710                     	;# 
  2780  0711                     	;# 
  2781  0712                     	;# 
  2782  0713                     	;# 
  2783  0716                     	;# 
  2784  0717                     	;# 
  2785  0718                     	;# 
  2786  0719                     	;# 
  2787  071A                     	;# 
  2788  071B                     	;# 
  2789  071C                     	;# 
  2790  071D                     	;# 
  2791  0796                     	;# 
  2792  0797                     	;# 
  2793  0798                     	;# 
  2794  0799                     	;# 
  2795  079A                     	;# 
  2796  079B                     	;# 
  2797  080C                     	;# 
  2798  080D                     	;# 
  2799  080E                     	;# 
  2800  080F                     	;# 
  2801  0810                     	;# 
  2802  0811                     	;# 
  2803  0812                     	;# 
  2804  0813                     	;# 
  2805  0814                     	;# 
  2806  081A                     	;# 
  2807  081A                     	;# 
  2808  081B                     	;# 
  2809  081C                     	;# 
  2810  081C                     	;# 
  2811  081D                     	;# 
  2812  081E                     	;# 
  2813  081F                     	;# 
  2814  088C                     	;# 
  2815  088D                     	;# 
  2816  088E                     	;# 
  2817  088F                     	;# 
  2818  0890                     	;# 
  2819  0891                     	;# 
  2820  0892                     	;# 
  2821  0893                     	;# 
  2822  0895                     	;# 
  2823  0896                     	;# 
  2824  090C                     	;# 
  2825  090E                     	;# 
  2826  090F                     	;# 
  2827  091F                     	;# 
  2828  098F                     	;# 
  2829  098F                     	;# 
  2830  0990                     	;# 
  2831  0991                     	;# 
  2832  0992                     	;# 
  2833  0993                     	;# 
  2834  0994                     	;# 
  2835  0995                     	;# 
  2836  0996                     	;# 
  2837  0997                     	;# 
  2838  0A19                     	;# 
  2839  0A19                     	;# 
  2840  0A1A                     	;# 
  2841  0A1A                     	;# 
  2842  0A1B                     	;# 
  2843  0A1B                     	;# 
  2844  0A1B                     	;# 
  2845  0A1C                     	;# 
  2846  0A1C                     	;# 
  2847  0A1D                     	;# 
  2848  0A1D                     	;# 
  2849  0A1E                     	;# 
  2850  0A1E                     	;# 
  2851  0A1F                     	;# 
  2852  0A1F                     	;# 
  2853  0A1F                     	;# 
  2854  1E0F                     	;# 
  2855  1E10                     	;# 
  2856  1E11                     	;# 
  2857  1E12                     	;# 
  2858  1E13                     	;# 
  2859  1E14                     	;# 
  2860  1E15                     	;# 
  2861  1E16                     	;# 
  2862  1E17                     	;# 
  2863  1E18                     	;# 
  2864  1E19                     	;# 
  2865  1E1A                     	;# 
  2866  1E1B                     	;# 
  2867  1E1C                     	;# 
  2868  1E1D                     	;# 
  2869  1E1E                     	;# 
  2870  1E1F                     	;# 
  2871  1E20                     	;# 
  2872  1E21                     	;# 
  2873  1E22                     	;# 
  2874  1E23                     	;# 
  2875  1E24                     	;# 
  2876  1E25                     	;# 
  2877  1E26                     	;# 
  2878  1E27                     	;# 
  2879  1E28                     	;# 
  2880  1E29                     	;# 
  2881  1E2A                     	;# 
  2882  1E2B                     	;# 
  2883  1E2C                     	;# 
  2884  1E2D                     	;# 
  2885  1E2E                     	;# 
  2886  1E2F                     	;# 
  2887  1E30                     	;# 
  2888  1E31                     	;# 
  2889  1E32                     	;# 
  2890  1E33                     	;# 
  2891  1E34                     	;# 
  2892  1E35                     	;# 
  2893  1E36                     	;# 
  2894  1E37                     	;# 
  2895  1E8F                     	;# 
  2896  1E90                     	;# 
  2897  1E91                     	;# 
  2898  1E92                     	;# 
  2899  1E93                     	;# 
  2900  1E9C                     	;# 
  2901  1EA1                     	;# 
  2902  1EA2                     	;# 
  2903  1EB1                     	;# 
  2904  1EBB                     	;# 
  2905  1EBC                     	;# 
  2906  1EBD                     	;# 
  2907  1EBE                     	;# 
  2908  1EC3                     	;# 
  2909  1EC5                     	;# 
  2910  1EC6                     	;# 
  2911  1EC7                     	;# 
  2912  1EC8                     	;# 
  2913  1EC9                     	;# 
  2914  1ECA                     	;# 
  2915  1ECB                     	;# 
  2916  1ECC                     	;# 
  2917  1ECD                     	;# 
  2918  1ECE                     	;# 
  2919  1F10                     	;# 
  2920  1F11                     	;# 
  2921  1F12                     	;# 
  2922  1F13                     	;# 
  2923  1F14                     	;# 
  2924  1F15                     	;# 
  2925  1F16                     	;# 
  2926  1F17                     	;# 
  2927  1F18                     	;# 
  2928  1F19                     	;# 
  2929  1F1A                     	;# 
  2930  1F1B                     	;# 
  2931  1F1C                     	;# 
  2932  1F1D                     	;# 
  2933  1F1E                     	;# 
  2934  1F1F                     	;# 
  2935  1F20                     	;# 
  2936  1F21                     	;# 
  2937  1F22                     	;# 
  2938  1F23                     	;# 
  2939  1F24                     	;# 
  2940  1F25                     	;# 
  2941  1F26                     	;# 
  2942  1F27                     	;# 
  2943  1F38                     	;# 
  2944  1F39                     	;# 
  2945  1F3A                     	;# 
  2946  1F3B                     	;# 
  2947  1F3C                     	;# 
  2948  1F3D                     	;# 
  2949  1F3E                     	;# 
  2950  1F3F                     	;# 
  2951  1F43                     	;# 
  2952  1F44                     	;# 
  2953  1F45                     	;# 
  2954  1F46                     	;# 
  2955  1F47                     	;# 
  2956  1F48                     	;# 
  2957  1F49                     	;# 
  2958  1F4A                     	;# 
  2959  1F4E                     	;# 
  2960  1F4F                     	;# 
  2961  1F50                     	;# 
  2962  1F51                     	;# 
  2963  1F52                     	;# 
  2964  1F53                     	;# 
  2965  1F54                     	;# 
  2966  1F55                     	;# 
  2967  1F65                     	;# 
  2968  1F68                     	;# 
  2969  1F69                     	;# 
  2970  1F6A                     	;# 
  2971  1F6B                     	;# 
  2972  1FE4                     	;# 
  2973  1FE5                     	;# 
  2974  1FE6                     	;# 
  2975  1FE7                     	;# 
  2976  1FE8                     	;# 
  2977  1FE8                     	;# 
  2978  1FE9                     	;# 
  2979  1FEA                     	;# 
  2980  1FEB                     	;# 
  2981  1FED                     	;# 
  2982  1FEE                     	;# 
  2983  1FEF                     	;# 
  2984  0000                     	;# 
  2985  0001                     	;# 
  2986  0002                     	;# 
  2987  0003                     	;# 
  2988  0004                     	;# 
  2989  0005                     	;# 
  2990  0006                     	;# 
  2991  0007                     	;# 
  2992  0008                     	;# 
  2993  0009                     	;# 
  2994  000A                     	;# 
  2995  000B                     	;# 
  2996  000C                     	;# 
  2997  000D                     	;# 
  2998  000E                     	;# 
  2999  0010                     	;# 
  3000  0012                     	;# 
  3001  0013                     	;# 
  3002  0014                     	;# 
  3003  0016                     	;# 
  3004  0018                     	;# 
  3005  0019                     	;# 
  3006  001A                     	;# 
  3007  009B                     	;# 
  3008  009B                     	;# 
  3009  009C                     	;# 
  3010  009D                     	;# 
  3011  009E                     	;# 
  3012  009F                     	;# 
  3013  0119                     	;# 
  3014  0119                     	;# 
  3015  0119                     	;# 
  3016  011A                     	;# 
  3017  011A                     	;# 
  3018  011A                     	;# 
  3019  011B                     	;# 
  3020  011B                     	;# 
  3021  011B                     	;# 
  3022  011B                     	;# 
  3023  011B                     	;# 
  3024  011C                     	;# 
  3025  011C                     	;# 
  3026  011C                     	;# 
  3027  011D                     	;# 
  3028  011D                     	;# 
  3029  011D                     	;# 
  3030  011E                     	;# 
  3031  011E                     	;# 
  3032  011E                     	;# 
  3033  011F                     	;# 
  3034  011F                     	;# 
  3035  011F                     	;# 
  3036  011F                     	;# 
  3037  011F                     	;# 
  3038  018C                     	;# 
  3039  018D                     	;# 
  3040  018E                     	;# 
  3041  018F                     	;# 
  3042  0190                     	;# 
  3043  0191                     	;# 
  3044  0192                     	;# 
  3045  0196                     	;# 
  3046  0197                     	;# 
  3047  0198                     	;# 
  3048  0199                     	;# 
  3049  019A                     	;# 
  3050  019B                     	;# 
  3051  019C                     	;# 
  3052  020C                     	;# 
  3053  020C                     	;# 
  3054  020D                     	;# 
  3055  020E                     	;# 
  3056  020F                     	;# 
  3057  020F                     	;# 
  3058  0210                     	;# 
  3059  0210                     	;# 
  3060  0211                     	;# 
  3061  0211                     	;# 
  3062  028C                     	;# 
  3063  028C                     	;# 
  3064  028D                     	;# 
  3065  028D                     	;# 
  3066  028E                     	;# 
  3067  028F                     	;# 
  3068  0290                     	;# 
  3069  0291                     	;# 
  3070  030C                     	;# 
  3071  030C                     	;# 
  3072  030D                     	;# 
  3073  030E                     	;# 
  3074  030F                     	;# 
  3075  0310                     	;# 
  3076  0310                     	;# 
  3077  0311                     	;# 
  3078  0312                     	;# 
  3079  0313                     	;# 
  3080  0314                     	;# 
  3081  0314                     	;# 
  3082  0315                     	;# 
  3083  0316                     	;# 
  3084  0318                     	;# 
  3085  0318                     	;# 
  3086  0319                     	;# 
  3087  031A                     	;# 
  3088  031C                     	;# 
  3089  031C                     	;# 
  3090  031D                     	;# 
  3091  031E                     	;# 
  3092  038C                     	;# 
  3093  038C                     	;# 
  3094  038D                     	;# 
  3095  038E                     	;# 
  3096  058C                     	;# 
  3097  058C                     	;# 
  3098  058D                     	;# 
  3099  058E                     	;# 
  3100  058F                     	;# 
  3101  058F                     	;# 
  3102  0590                     	;# 
  3103  0591                     	;# 
  3104  0592                     	;# 
  3105  0593                     	;# 
  3106  059C                     	;# 
  3107  059C                     	;# 
  3108  059D                     	;# 
  3109  059D                     	;# 
  3110  059E                     	;# 
  3111  059F                     	;# 
  3112  060C                     	;# 
  3113  060D                     	;# 
  3114  060E                     	;# 
  3115  060F                     	;# 
  3116  0610                     	;# 
  3117  0611                     	;# 
  3118  0612                     	;# 
  3119  0613                     	;# 
  3120  0614                     	;# 
  3121  070C                     	;# 
  3122  070D                     	;# 
  3123  070E                     	;# 
  3124  070F                     	;# 
  3125  0710                     	;# 
  3126  0711                     	;# 
  3127  0712                     	;# 
  3128  0713                     	;# 
  3129  0716                     	;# 
  3130  0717                     	;# 
  3131  0718                     	;# 
  3132  0719                     	;# 
  3133  071A                     	;# 
  3134  071B                     	;# 
  3135  071C                     	;# 
  3136  071D                     	;# 
  3137  0796                     	;# 
  3138  0797                     	;# 
  3139  0798                     	;# 
  3140  0799                     	;# 
  3141  079A                     	;# 
  3142  079B                     	;# 
  3143  080C                     	;# 
  3144  080D                     	;# 
  3145  080E                     	;# 
  3146  080F                     	;# 
  3147  0810                     	;# 
  3148  0811                     	;# 
  3149  0812                     	;# 
  3150  0813                     	;# 
  3151  0814                     	;# 
  3152  081A                     	;# 
  3153  081A                     	;# 
  3154  081B                     	;# 
  3155  081C                     	;# 
  3156  081C                     	;# 
  3157  081D                     	;# 
  3158  081E                     	;# 
  3159  081F                     	;# 
  3160  088C                     	;# 
  3161  088D                     	;# 
  3162  088E                     	;# 
  3163  088F                     	;# 
  3164  0890                     	;# 
  3165  0891                     	;# 
  3166  0892                     	;# 
  3167  0893                     	;# 
  3168  0895                     	;# 
  3169  0896                     	;# 
  3170  090C                     	;# 
  3171  090E                     	;# 
  3172  090F                     	;# 
  3173  091F                     	;# 
  3174  098F                     	;# 
  3175  098F                     	;# 
  3176  0990                     	;# 
  3177  0991                     	;# 
  3178  0992                     	;# 
  3179  0993                     	;# 
  3180  0994                     	;# 
  3181  0995                     	;# 
  3182  0996                     	;# 
  3183  0997                     	;# 
  3184  0A19                     	;# 
  3185  0A19                     	;# 
  3186  0A1A                     	;# 
  3187  0A1A                     	;# 
  3188  0A1B                     	;# 
  3189  0A1B                     	;# 
  3190  0A1B                     	;# 
  3191  0A1C                     	;# 
  3192  0A1C                     	;# 
  3193  0A1D                     	;# 
  3194  0A1D                     	;# 
  3195  0A1E                     	;# 
  3196  0A1E                     	;# 
  3197  0A1F                     	;# 
  3198  0A1F                     	;# 
  3199  0A1F                     	;# 
  3200  1E0F                     	;# 
  3201  1E10                     	;# 
  3202  1E11                     	;# 
  3203  1E12                     	;# 
  3204  1E13                     	;# 
  3205  1E14                     	;# 
  3206  1E15                     	;# 
  3207  1E16                     	;# 
  3208  1E17                     	;# 
  3209  1E18                     	;# 
  3210  1E19                     	;# 
  3211  1E1A                     	;# 
  3212  1E1B                     	;# 
  3213  1E1C                     	;# 
  3214  1E1D                     	;# 
  3215  1E1E                     	;# 
  3216  1E1F                     	;# 
  3217  1E20                     	;# 
  3218  1E21                     	;# 
  3219  1E22                     	;# 
  3220  1E23                     	;# 
  3221  1E24                     	;# 
  3222  1E25                     	;# 
  3223  1E26                     	;# 
  3224  1E27                     	;# 
  3225  1E28                     	;# 
  3226  1E29                     	;# 
  3227  1E2A                     	;# 
  3228  1E2B                     	;# 
  3229  1E2C                     	;# 
  3230  1E2D                     	;# 
  3231  1E2E                     	;# 
  3232  1E2F                     	;# 
  3233  1E30                     	;# 
  3234  1E31                     	;# 
  3235  1E32                     	;# 
  3236  1E33                     	;# 
  3237  1E34                     	;# 
  3238  1E35                     	;# 
  3239  1E36                     	;# 
  3240  1E37                     	;# 
  3241  1E8F                     	;# 
  3242  1E90                     	;# 
  3243  1E91                     	;# 
  3244  1E92                     	;# 
  3245  1E93                     	;# 
  3246  1E9C                     	;# 
  3247  1EA1                     	;# 
  3248  1EA2                     	;# 
  3249  1EB1                     	;# 
  3250  1EBB                     	;# 
  3251  1EBC                     	;# 
  3252  1EBD                     	;# 
  3253  1EBE                     	;# 
  3254  1EC3                     	;# 
  3255  1EC5                     	;# 
  3256  1EC6                     	;# 
  3257  1EC7                     	;# 
  3258  1EC8                     	;# 
  3259  1EC9                     	;# 
  3260  1ECA                     	;# 
  3261  1ECB                     	;# 
  3262  1ECC                     	;# 
  3263  1ECD                     	;# 
  3264  1ECE                     	;# 
  3265  1F10                     	;# 
  3266  1F11                     	;# 
  3267  1F12                     	;# 
  3268  1F13                     	;# 
  3269  1F14                     	;# 
  3270  1F15                     	;# 
  3271  1F16                     	;# 
  3272  1F17                     	;# 
  3273  1F18                     	;# 
  3274  1F19                     	;# 
  3275  1F1A                     	;# 
  3276  1F1B                     	;# 
  3277  1F1C                     	;# 
  3278  1F1D                     	;# 
  3279  1F1E                     	;# 
  3280  1F1F                     	;# 
  3281  1F20                     	;# 
  3282  1F21                     	;# 
  3283  1F22                     	;# 
  3284  1F23                     	;# 
  3285  1F24                     	;# 
  3286  1F25                     	;# 
  3287  1F26                     	;# 
  3288  1F27                     	;# 
  3289  1F38                     	;# 
  3290  1F39                     	;# 
  3291  1F3A                     	;# 
  3292  1F3B                     	;# 
  3293  1F3C                     	;# 
  3294  1F3D                     	;# 
  3295  1F3E                     	;# 
  3296  1F3F                     	;# 
  3297  1F43                     	;# 
  3298  1F44                     	;# 
  3299  1F45                     	;# 
  3300  1F46                     	;# 
  3301  1F47                     	;# 
  3302  1F48                     	;# 
  3303  1F49                     	;# 
  3304  1F4A                     	;# 
  3305  1F4E                     	;# 
  3306  1F4F                     	;# 
  3307  1F50                     	;# 
  3308  1F51                     	;# 
  3309  1F52                     	;# 
  3310  1F53                     	;# 
  3311  1F54                     	;# 
  3312  1F55                     	;# 
  3313  1F65                     	;# 
  3314  1F68                     	;# 
  3315  1F69                     	;# 
  3316  1F6A                     	;# 
  3317  1F6B                     	;# 
  3318  1FE4                     	;# 
  3319  1FE5                     	;# 
  3320  1FE6                     	;# 
  3321  1FE7                     	;# 
  3322  1FE8                     	;# 
  3323  1FE8                     	;# 
  3324  1FE9                     	;# 
  3325  1FEA                     	;# 
  3326  1FEB                     	;# 
  3327  1FED                     	;# 
  3328  1FEE                     	;# 
  3329  1FEF                     	;# 
  3330  0000                     	;# 
  3331  0001                     	;# 
  3332  0002                     	;# 
  3333  0003                     	;# 
  3334  0004                     	;# 
  3335  0005                     	;# 
  3336  0006                     	;# 
  3337  0007                     	;# 
  3338  0008                     	;# 
  3339  0009                     	;# 
  3340  000A                     	;# 
  3341  000B                     	;# 
  3342  000C                     	;# 
  3343  000D                     	;# 
  3344  000E                     	;# 
  3345  0010                     	;# 
  3346  0012                     	;# 
  3347  0013                     	;# 
  3348  0014                     	;# 
  3349  0016                     	;# 
  3350  0018                     	;# 
  3351  0019                     	;# 
  3352  001A                     	;# 
  3353  009B                     	;# 
  3354  009B                     	;# 
  3355  009C                     	;# 
  3356  009D                     	;# 
  3357  009E                     	;# 
  3358  009F                     	;# 
  3359  0119                     	;# 
  3360  0119                     	;# 
  3361  0119                     	;# 
  3362  011A                     	;# 
  3363  011A                     	;# 
  3364  011A                     	;# 
  3365  011B                     	;# 
  3366  011B                     	;# 
  3367  011B                     	;# 
  3368  011B                     	;# 
  3369  011B                     	;# 
  3370  011C                     	;# 
  3371  011C                     	;# 
  3372  011C                     	;# 
  3373  011D                     	;# 
  3374  011D                     	;# 
  3375  011D                     	;# 
  3376  011E                     	;# 
  3377  011E                     	;# 
  3378  011E                     	;# 
  3379  011F                     	;# 
  3380  011F                     	;# 
  3381  011F                     	;# 
  3382  011F                     	;# 
  3383  011F                     	;# 
  3384  018C                     	;# 
  3385  018D                     	;# 
  3386  018E                     	;# 
  3387  018F                     	;# 
  3388  0190                     	;# 
  3389  0191                     	;# 
  3390  0192                     	;# 
  3391  0196                     	;# 
  3392  0197                     	;# 
  3393  0198                     	;# 
  3394  0199                     	;# 
  3395  019A                     	;# 
  3396  019B                     	;# 
  3397  019C                     	;# 
  3398  020C                     	;# 
  3399  020C                     	;# 
  3400  020D                     	;# 
  3401  020E                     	;# 
  3402  020F                     	;# 
  3403  020F                     	;# 
  3404  0210                     	;# 
  3405  0210                     	;# 
  3406  0211                     	;# 
  3407  0211                     	;# 
  3408  028C                     	;# 
  3409  028C                     	;# 
  3410  028D                     	;# 
  3411  028D                     	;# 
  3412  028E                     	;# 
  3413  028F                     	;# 
  3414  0290                     	;# 
  3415  0291                     	;# 
  3416  030C                     	;# 
  3417  030C                     	;# 
  3418  030D                     	;# 
  3419  030E                     	;# 
  3420  030F                     	;# 
  3421  0310                     	;# 
  3422  0310                     	;# 
  3423  0311                     	;# 
  3424  0312                     	;# 
  3425  0313                     	;# 
  3426  0314                     	;# 
  3427  0314                     	;# 
  3428  0315                     	;# 
  3429  0316                     	;# 
  3430  0318                     	;# 
  3431  0318                     	;# 
  3432  0319                     	;# 
  3433  031A                     	;# 
  3434  031C                     	;# 
  3435  031C                     	;# 
  3436  031D                     	;# 
  3437  031E                     	;# 
  3438  038C                     	;# 
  3439  038C                     	;# 
  3440  038D                     	;# 
  3441  038E                     	;# 
  3442  058C                     	;# 
  3443  058C                     	;# 
  3444  058D                     	;# 
  3445  058E                     	;# 
  3446  058F                     	;# 
  3447  058F                     	;# 
  3448  0590                     	;# 
  3449  0591                     	;# 
  3450  0592                     	;# 
  3451  0593                     	;# 
  3452  059C                     	;# 
  3453  059C                     	;# 
  3454  059D                     	;# 
  3455  059D                     	;# 
  3456  059E                     	;# 
  3457  059F                     	;# 
  3458  060C                     	;# 
  3459  060D                     	;# 
  3460  060E                     	;# 
  3461  060F                     	;# 
  3462  0610                     	;# 
  3463  0611                     	;# 
  3464  0612                     	;# 
  3465  0613                     	;# 
  3466  0614                     	;# 
  3467  070C                     	;# 
  3468  070D                     	;# 
  3469  070E                     	;# 
  3470  070F                     	;# 
  3471  0710                     	;# 
  3472  0711                     	;# 
  3473  0712                     	;# 
  3474  0713                     	;# 
  3475  0716                     	;# 
  3476  0717                     	;# 
  3477  0718                     	;# 
  3478  0719                     	;# 
  3479  071A                     	;# 
  3480  071B                     	;# 
  3481  071C                     	;# 
  3482  071D                     	;# 
  3483  0796                     	;# 
  3484  0797                     	;# 
  3485  0798                     	;# 
  3486  0799                     	;# 
  3487  079A                     	;# 
  3488  079B                     	;# 
  3489  080C                     	;# 
  3490  080D                     	;# 
  3491  080E                     	;# 
  3492  080F                     	;# 
  3493  0810                     	;# 
  3494  0811                     	;# 
  3495  0812                     	;# 
  3496  0813                     	;# 
  3497  0814                     	;# 
  3498  081A                     	;# 
  3499  081A                     	;# 
  3500  081B                     	;# 
  3501  081C                     	;# 
  3502  081C                     	;# 
  3503  081D                     	;# 
  3504  081E                     	;# 
  3505  081F                     	;# 
  3506  088C                     	;# 
  3507  088D                     	;# 
  3508  088E                     	;# 
  3509  088F                     	;# 
  3510  0890                     	;# 
  3511  0891                     	;# 
  3512  0892                     	;# 
  3513  0893                     	;# 
  3514  0895                     	;# 
  3515  0896                     	;# 
  3516  090C                     	;# 
  3517  090E                     	;# 
  3518  090F                     	;# 
  3519  091F                     	;# 
  3520  098F                     	;# 
  3521  098F                     	;# 
  3522  0990                     	;# 
  3523  0991                     	;# 
  3524  0992                     	;# 
  3525  0993                     	;# 
  3526  0994                     	;# 
  3527  0995                     	;# 
  3528  0996                     	;# 
  3529  0997                     	;# 
  3530  0A19                     	;# 
  3531  0A19                     	;# 
  3532  0A1A                     	;# 
  3533  0A1A                     	;# 
  3534  0A1B                     	;# 
  3535  0A1B                     	;# 
  3536  0A1B                     	;# 
  3537  0A1C                     	;# 
  3538  0A1C                     	;# 
  3539  0A1D                     	;# 
  3540  0A1D                     	;# 
  3541  0A1E                     	;# 
  3542  0A1E                     	;# 
  3543  0A1F                     	;# 
  3544  0A1F                     	;# 
  3545  0A1F                     	;# 
  3546  1E0F                     	;# 
  3547  1E10                     	;# 
  3548  1E11                     	;# 
  3549  1E12                     	;# 
  3550  1E13                     	;# 
  3551  1E14                     	;# 
  3552  1E15                     	;# 
  3553  1E16                     	;# 
  3554  1E17                     	;# 
  3555  1E18                     	;# 
  3556  1E19                     	;# 
  3557  1E1A                     	;# 
  3558  1E1B                     	;# 
  3559  1E1C                     	;# 
  3560  1E1D                     	;# 
  3561  1E1E                     	;# 
  3562  1E1F                     	;# 
  3563  1E20                     	;# 
  3564  1E21                     	;# 
  3565  1E22                     	;# 
  3566  1E23                     	;# 
  3567  1E24                     	;# 
  3568  1E25                     	;# 
  3569  1E26                     	;# 
  3570  1E27                     	;# 
  3571  1E28                     	;# 
  3572  1E29                     	;# 
  3573  1E2A                     	;# 
  3574  1E2B                     	;# 
  3575  1E2C                     	;# 
  3576  1E2D                     	;# 
  3577  1E2E                     	;# 
  3578  1E2F                     	;# 
  3579  1E30                     	;# 
  3580  1E31                     	;# 
  3581  1E32                     	;# 
  3582  1E33                     	;# 
  3583  1E34                     	;# 
  3584  1E35                     	;# 
  3585  1E36                     	;# 
  3586  1E37                     	;# 
  3587  1E8F                     	;# 
  3588  1E90                     	;# 
  3589  1E91                     	;# 
  3590  1E92                     	;# 
  3591  1E93                     	;# 
  3592  1E9C                     	;# 
  3593  1EA1                     	;# 
  3594  1EA2                     	;# 
  3595  1EB1                     	;# 
  3596  1EBB                     	;# 
  3597  1EBC                     	;# 
  3598  1EBD                     	;# 
  3599  1EBE                     	;# 
  3600  1EC3                     	;# 
  3601  1EC5                     	;# 
  3602  1EC6                     	;# 
  3603  1EC7                     	;# 
  3604  1EC8                     	;# 
  3605  1EC9                     	;# 
  3606  1ECA                     	;# 
  3607  1ECB                     	;# 
  3608  1ECC                     	;# 
  3609  1ECD                     	;# 
  3610  1ECE                     	;# 
  3611  1F10                     	;# 
  3612  1F11                     	;# 
  3613  1F12                     	;# 
  3614  1F13                     	;# 
  3615  1F14                     	;# 
  3616  1F15                     	;# 
  3617  1F16                     	;# 
  3618  1F17                     	;# 
  3619  1F18                     	;# 
  3620  1F19                     	;# 
  3621  1F1A                     	;# 
  3622  1F1B                     	;# 
  3623  1F1C                     	;# 
  3624  1F1D                     	;# 
  3625  1F1E                     	;# 
  3626  1F1F                     	;# 
  3627  1F20                     	;# 
  3628  1F21                     	;# 
  3629  1F22                     	;# 
  3630  1F23                     	;# 
  3631  1F24                     	;# 
  3632  1F25                     	;# 
  3633  1F26                     	;# 
  3634  1F27                     	;# 
  3635  1F38                     	;# 
  3636  1F39                     	;# 
  3637  1F3A                     	;# 
  3638  1F3B                     	;# 
  3639  1F3C                     	;# 
  3640  1F3D                     	;# 
  3641  1F3E                     	;# 
  3642  1F3F                     	;# 
  3643  1F43                     	;# 
  3644  1F44                     	;# 
  3645  1F45                     	;# 
  3646  1F46                     	;# 
  3647  1F47                     	;# 
  3648  1F48                     	;# 
  3649  1F49                     	;# 
  3650  1F4A                     	;# 
  3651  1F4E                     	;# 
  3652  1F4F                     	;# 
  3653  1F50                     	;# 
  3654  1F51                     	;# 
  3655  1F52                     	;# 
  3656  1F53                     	;# 
  3657  1F54                     	;# 
  3658  1F55                     	;# 
  3659  1F65                     	;# 
  3660  1F68                     	;# 
  3661  1F69                     	;# 
  3662  1F6A                     	;# 
  3663  1F6B                     	;# 
  3664  1FE4                     	;# 
  3665  1FE5                     	;# 
  3666  1FE6                     	;# 
  3667  1FE7                     	;# 
  3668  1FE8                     	;# 
  3669  1FE8                     	;# 
  3670  1FE9                     	;# 
  3671  1FEA                     	;# 
  3672  1FEB                     	;# 
  3673  1FED                     	;# 
  3674  1FEE                     	;# 
  3675  1FEF                     	;# 
  3676  0000                     	;# 
  3677  0001                     	;# 
  3678  0002                     	;# 
  3679  0003                     	;# 
  3680  0004                     	;# 
  3681  0005                     	;# 
  3682  0006                     	;# 
  3683  0007                     	;# 
  3684  0008                     	;# 
  3685  0009                     	;# 
  3686  000A                     	;# 
  3687  000B                     	;# 
  3688  000C                     	;# 
  3689  000D                     	;# 
  3690  000E                     	;# 
  3691  0010                     	;# 
  3692  0012                     	;# 
  3693  0013                     	;# 
  3694  0014                     	;# 
  3695  0016                     	;# 
  3696  0018                     	;# 
  3697  0019                     	;# 
  3698  001A                     	;# 
  3699  009B                     	;# 
  3700  009B                     	;# 
  3701  009C                     	;# 
  3702  009D                     	;# 
  3703  009E                     	;# 
  3704  009F                     	;# 
  3705  0119                     	;# 
  3706  0119                     	;# 
  3707  0119                     	;# 
  3708  011A                     	;# 
  3709  011A                     	;# 
  3710  011A                     	;# 
  3711  011B                     	;# 
  3712  011B                     	;# 
  3713  011B                     	;# 
  3714  011B                     	;# 
  3715  011B                     	;# 
  3716  011C                     	;# 
  3717  011C                     	;# 
  3718  011C                     	;# 
  3719  011D                     	;# 
  3720  011D                     	;# 
  3721  011D                     	;# 
  3722  011E                     	;# 
  3723  011E                     	;# 
  3724  011E                     	;# 
  3725  011F                     	;# 
  3726  011F                     	;# 
  3727  011F                     	;# 
  3728  011F                     	;# 
  3729  011F                     	;# 
  3730  018C                     	;# 
  3731  018D                     	;# 
  3732  018E                     	;# 
  3733  018F                     	;# 
  3734  0190                     	;# 
  3735  0191                     	;# 
  3736  0192                     	;# 
  3737  0196                     	;# 
  3738  0197                     	;# 
  3739  0198                     	;# 
  3740  0199                     	;# 
  3741  019A                     	;# 
  3742  019B                     	;# 
  3743  019C                     	;# 
  3744  020C                     	;# 
  3745  020C                     	;# 
  3746  020D                     	;# 
  3747  020E                     	;# 
  3748  020F                     	;# 
  3749  020F                     	;# 
  3750  0210                     	;# 
  3751  0210                     	;# 
  3752  0211                     	;# 
  3753  0211                     	;# 
  3754  028C                     	;# 
  3755  028C                     	;# 
  3756  028D                     	;# 
  3757  028D                     	;# 
  3758  028E                     	;# 
  3759  028F                     	;# 
  3760  0290                     	;# 
  3761  0291                     	;# 
  3762  030C                     	;# 
  3763  030C                     	;# 
  3764  030D                     	;# 
  3765  030E                     	;# 
  3766  030F                     	;# 
  3767  0310                     	;# 
  3768  0310                     	;# 
  3769  0311                     	;# 
  3770  0312                     	;# 
  3771  0313                     	;# 
  3772  0314                     	;# 
  3773  0314                     	;# 
  3774  0315                     	;# 
  3775  0316                     	;# 
  3776  0318                     	;# 
  3777  0318                     	;# 
  3778  0319                     	;# 
  3779  031A                     	;# 
  3780  031C                     	;# 
  3781  031C                     	;# 
  3782  031D                     	;# 
  3783  031E                     	;# 
  3784  038C                     	;# 
  3785  038C                     	;# 
  3786  038D                     	;# 
  3787  038E                     	;# 
  3788  058C                     	;# 
  3789  058C                     	;# 
  3790  058D                     	;# 
  3791  058E                     	;# 
  3792  058F                     	;# 
  3793  058F                     	;# 
  3794  0590                     	;# 
  3795  0591                     	;# 
  3796  0592                     	;# 
  3797  0593                     	;# 
  3798  059C                     	;# 
  3799  059C                     	;# 
  3800  059D                     	;# 
  3801  059D                     	;# 
  3802  059E                     	;# 
  3803  059F                     	;# 
  3804  060C                     	;# 
  3805  060D                     	;# 
  3806  060E                     	;# 
  3807  060F                     	;# 
  3808  0610                     	;# 
  3809  0611                     	;# 
  3810  0612                     	;# 
  3811  0613                     	;# 
  3812  0614                     	;# 
  3813  070C                     	;# 
  3814  070D                     	;# 
  3815  070E                     	;# 
  3816  070F                     	;# 
  3817  0710                     	;# 
  3818  0711                     	;# 
  3819  0712                     	;# 
  3820  0713                     	;# 
  3821  0716                     	;# 
  3822  0717                     	;# 
  3823  0718                     	;# 
  3824  0719                     	;# 
  3825  071A                     	;# 
  3826  071B                     	;# 
  3827  071C                     	;# 
  3828  071D                     	;# 
  3829  0796                     	;# 
  3830  0797                     	;# 
  3831  0798                     	;# 
  3832  0799                     	;# 
  3833  079A                     	;# 
  3834  079B                     	;# 
  3835  080C                     	;# 
  3836  080D                     	;# 
  3837  080E                     	;# 
  3838  080F                     	;# 
  3839  0810                     	;# 
  3840  0811                     	;# 
  3841  0812                     	;# 
  3842  0813                     	;# 
  3843  0814                     	;# 
  3844  081A                     	;# 
  3845  081A                     	;# 
  3846  081B                     	;# 
  3847  081C                     	;# 
  3848  081C                     	;# 
  3849  081D                     	;# 
  3850  081E                     	;# 
  3851  081F                     	;# 
  3852  088C                     	;# 
  3853  088D                     	;# 
  3854  088E                     	;# 
  3855  088F                     	;# 
  3856  0890                     	;# 
  3857  0891                     	;# 
  3858  0892                     	;# 
  3859  0893                     	;# 
  3860  0895                     	;# 
  3861  0896                     	;# 
  3862  090C                     	;# 
  3863  090E                     	;# 
  3864  090F                     	;# 
  3865  091F                     	;# 
  3866  098F                     	;# 
  3867  098F                     	;# 
  3868  0990                     	;# 
  3869  0991                     	;# 
  3870  0992                     	;# 
  3871  0993                     	;# 
  3872  0994                     	;# 
  3873  0995                     	;# 
  3874  0996                     	;# 
  3875  0997                     	;# 
  3876  0A19                     	;# 
  3877  0A19                     	;# 
  3878  0A1A                     	;# 
  3879  0A1A                     	;# 
  3880  0A1B                     	;# 
  3881  0A1B                     	;# 
  3882  0A1B                     	;# 
  3883  0A1C                     	;# 
  3884  0A1C                     	;# 
  3885  0A1D                     	;# 
  3886  0A1D                     	;# 
  3887  0A1E                     	;# 
  3888  0A1E                     	;# 
  3889  0A1F                     	;# 
  3890  0A1F                     	;# 
  3891  0A1F                     	;# 
  3892  1E0F                     	;# 
  3893  1E10                     	;# 
  3894  1E11                     	;# 
  3895  1E12                     	;# 
  3896  1E13                     	;# 
  3897  1E14                     	;# 
  3898  1E15                     	;# 
  3899  1E16                     	;# 
  3900  1E17                     	;# 
  3901  1E18                     	;# 
  3902  1E19                     	;# 
  3903  1E1A                     	;# 
  3904  1E1B                     	;# 
  3905  1E1C                     	;# 
  3906  1E1D                     	;# 
  3907  1E1E                     	;# 
  3908  1E1F                     	;# 
  3909  1E20                     	;# 
  3910  1E21                     	;# 
  3911  1E22                     	;# 
  3912  1E23                     	;# 
  3913  1E24                     	;# 
  3914  1E25                     	;# 
  3915  1E26                     	;# 
  3916  1E27                     	;# 
  3917  1E28                     	;# 
  3918  1E29                     	;# 
  3919  1E2A                     	;# 
  3920  1E2B                     	;# 
  3921  1E2C                     	;# 
  3922  1E2D                     	;# 
  3923  1E2E                     	;# 
  3924  1E2F                     	;# 
  3925  1E30                     	;# 
  3926  1E31                     	;# 
  3927  1E32                     	;# 
  3928  1E33                     	;# 
  3929  1E34                     	;# 
  3930  1E35                     	;# 
  3931  1E36                     	;# 
  3932  1E37                     	;# 
  3933  1E8F                     	;# 
  3934  1E90                     	;# 
  3935  1E91                     	;# 
  3936  1E92                     	;# 
  3937  1E93                     	;# 
  3938  1E9C                     	;# 
  3939  1EA1                     	;# 
  3940  1EA2                     	;# 
  3941  1EB1                     	;# 
  3942  1EBB                     	;# 
  3943  1EBC                     	;# 
  3944  1EBD                     	;# 
  3945  1EBE                     	;# 
  3946  1EC3                     	;# 
  3947  1EC5                     	;# 
  3948  1EC6                     	;# 
  3949  1EC7                     	;# 
  3950  1EC8                     	;# 
  3951  1EC9                     	;# 
  3952  1ECA                     	;# 
  3953  1ECB                     	;# 
  3954  1ECC                     	;# 
  3955  1ECD                     	;# 
  3956  1ECE                     	;# 
  3957  1F10                     	;# 
  3958  1F11                     	;# 
  3959  1F12                     	;# 
  3960  1F13                     	;# 
  3961  1F14                     	;# 
  3962  1F15                     	;# 
  3963  1F16                     	;# 
  3964  1F17                     	;# 
  3965  1F18                     	;# 
  3966  1F19                     	;# 
  3967  1F1A                     	;# 
  3968  1F1B                     	;# 
  3969  1F1C                     	;# 
  3970  1F1D                     	;# 
  3971  1F1E                     	;# 
  3972  1F1F                     	;# 
  3973  1F20                     	;# 
  3974  1F21                     	;# 
  3975  1F22                     	;# 
  3976  1F23                     	;# 
  3977  1F24                     	;# 
  3978  1F25                     	;# 
  3979  1F26                     	;# 
  3980  1F27                     	;# 
  3981  1F38                     	;# 
  3982  1F39                     	;# 
  3983  1F3A                     	;# 
  3984  1F3B                     	;# 
  3985  1F3C                     	;# 
  3986  1F3D                     	;# 
  3987  1F3E                     	;# 
  3988  1F3F                     	;# 
  3989  1F43                     	;# 
  3990  1F44                     	;# 
  3991  1F45                     	;# 
  3992  1F46                     	;# 
  3993  1F47                     	;# 
  3994  1F48                     	;# 
  3995  1F49                     	;# 
  3996  1F4A                     	;# 
  3997  1F4E                     	;# 
  3998  1F4F                     	;# 
  3999  1F50                     	;# 
  4000  1F51                     	;# 
  4001  1F52                     	;# 
  4002  1F53                     	;# 
  4003  1F54                     	;# 
  4004  1F55                     	;# 
  4005  1F65                     	;# 
  4006  1F68                     	;# 
  4007  1F69                     	;# 
  4008  1F6A                     	;# 
  4009  1F6B                     	;# 
  4010  1FE4                     	;# 
  4011  1FE5                     	;# 
  4012  1FE6                     	;# 
  4013  1FE7                     	;# 
  4014  1FE8                     	;# 
  4015  1FE8                     	;# 
  4016  1FE9                     	;# 
  4017  1FEA                     	;# 
  4018  1FEB                     	;# 
  4019  1FED                     	;# 
  4020  1FEE                     	;# 
  4021  1FEF                     	;# 
  4022  0000                     	;# 
  4023  0001                     	;# 
  4024  0002                     	;# 
  4025  0003                     	;# 
  4026  0004                     	;# 
  4027  0005                     	;# 
  4028  0006                     	;# 
  4029  0007                     	;# 
  4030  0008                     	;# 
  4031  0009                     	;# 
  4032  000A                     	;# 
  4033  000B                     	;# 
  4034  000C                     	;# 
  4035  000D                     	;# 
  4036  000E                     	;# 
  4037  0010                     	;# 
  4038  0012                     	;# 
  4039  0013                     	;# 
  4040  0014                     	;# 
  4041  0016                     	;# 
  4042  0018                     	;# 
  4043  0019                     	;# 
  4044  001A                     	;# 
  4045  009B                     	;# 
  4046  009B                     	;# 
  4047  009C                     	;# 
  4048  009D                     	;# 
  4049  009E                     	;# 
  4050  009F                     	;# 
  4051  0119                     	;# 
  4052  0119                     	;# 
  4053  0119                     	;# 
  4054  011A                     	;# 
  4055  011A                     	;# 
  4056  011A                     	;# 
  4057  011B                     	;# 
  4058  011B                     	;# 
  4059  011B                     	;# 
  4060  011B                     	;# 
  4061  011B                     	;# 
  4062  011C                     	;# 
  4063  011C                     	;# 
  4064  011C                     	;# 
  4065  011D                     	;# 
  4066  011D                     	;# 
  4067  011D                     	;# 
  4068  011E                     	;# 
  4069  011E                     	;# 
  4070  011E                     	;# 
  4071  011F                     	;# 
  4072  011F                     	;# 
  4073  011F                     	;# 
  4074  011F                     	;# 
  4075  011F                     	;# 
  4076  018C                     	;# 
  4077  018D                     	;# 
  4078  018E                     	;# 
  4079  018F                     	;# 
  4080  0190                     	;# 
  4081  0191                     	;# 
  4082  0192                     	;# 
  4083  0196                     	;# 
  4084  0197                     	;# 
  4085  0198                     	;# 
  4086  0199                     	;# 
  4087  019A                     	;# 
  4088  019B                     	;# 
  4089  019C                     	;# 
  4090  020C                     	;# 
  4091  020C                     	;# 
  4092  020D                     	;# 
  4093  020E                     	;# 
  4094  020F                     	;# 
  4095  020F                     	;# 
  4096  0210                     	;# 
  4097  0210                     	;# 
  4098  0211                     	;# 
  4099  0211                     	;# 
  4100  028C                     	;# 
  4101  028C                     	;# 
  4102  028D                     	;# 
  4103  028D                     	;# 
  4104  028E                     	;# 
  4105  028F                     	;# 
  4106  0290                     	;# 
  4107  0291                     	;# 
  4108  030C                     	;# 
  4109  030C                     	;# 
  4110  030D                     	;# 
  4111  030E                     	;# 
  4112  030F                     	;# 
  4113  0310                     	;# 
  4114  0310                     	;# 
  4115  0311                     	;# 
  4116  0312                     	;# 
  4117  0313                     	;# 
  4118  0314                     	;# 
  4119  0314                     	;# 
  4120  0315                     	;# 
  4121  0316                     	;# 
  4122  0318                     	;# 
  4123  0318                     	;# 
  4124  0319                     	;# 
  4125  031A                     	;# 
  4126  031C                     	;# 
  4127  031C                     	;# 
  4128  031D                     	;# 
  4129  031E                     	;# 
  4130  038C                     	;# 
  4131  038C                     	;# 
  4132  038D                     	;# 
  4133  038E                     	;# 
  4134  058C                     	;# 
  4135  058C                     	;# 
  4136  058D                     	;# 
  4137  058E                     	;# 
  4138  058F                     	;# 
  4139  058F                     	;# 
  4140  0590                     	;# 
  4141  0591                     	;# 
  4142  0592                     	;# 
  4143  0593                     	;# 
  4144  059C                     	;# 
  4145  059C                     	;# 
  4146  059D                     	;# 
  4147  059D                     	;# 
  4148  059E                     	;# 
  4149  059F                     	;# 
  4150  060C                     	;# 
  4151  060D                     	;# 
  4152  060E                     	;# 
  4153  060F                     	;# 
  4154  0610                     	;# 
  4155  0611                     	;# 
  4156  0612                     	;# 
  4157  0613                     	;# 
  4158  0614                     	;# 
  4159  070C                     	;# 
  4160  070D                     	;# 
  4161  070E                     	;# 
  4162  070F                     	;# 
  4163  0710                     	;# 
  4164  0711                     	;# 
  4165  0712                     	;# 
  4166  0713                     	;# 
  4167  0716                     	;# 
  4168  0717                     	;# 
  4169  0718                     	;# 
  4170  0719                     	;# 
  4171  071A                     	;# 
  4172  071B                     	;# 
  4173  071C                     	;# 
  4174  071D                     	;# 
  4175  0796                     	;# 
  4176  0797                     	;# 
  4177  0798                     	;# 
  4178  0799                     	;# 
  4179  079A                     	;# 
  4180  079B                     	;# 
  4181  080C                     	;# 
  4182  080D                     	;# 
  4183  080E                     	;# 
  4184  080F                     	;# 
  4185  0810                     	;# 
  4186  0811                     	;# 
  4187  0812                     	;# 
  4188  0813                     	;# 
  4189  0814                     	;# 
  4190  081A                     	;# 
  4191  081A                     	;# 
  4192  081B                     	;# 
  4193  081C                     	;# 
  4194  081C                     	;# 
  4195  081D                     	;# 
  4196  081E                     	;# 
  4197  081F                     	;# 
  4198  088C                     	;# 
  4199  088D                     	;# 
  4200  088E                     	;# 
  4201  088F                     	;# 
  4202  0890                     	;# 
  4203  0891                     	;# 
  4204  0892                     	;# 
  4205  0893                     	;# 
  4206  0895                     	;# 
  4207  0896                     	;# 
  4208  090C                     	;# 
  4209  090E                     	;# 
  4210  090F                     	;# 
  4211  091F                     	;# 
  4212  098F                     	;# 
  4213  098F                     	;# 
  4214  0990                     	;# 
  4215  0991                     	;# 
  4216  0992                     	;# 
  4217  0993                     	;# 
  4218  0994                     	;# 
  4219  0995                     	;# 
  4220  0996                     	;# 
  4221  0997                     	;# 
  4222  0A19                     	;# 
  4223  0A19                     	;# 
  4224  0A1A                     	;# 
  4225  0A1A                     	;# 
  4226  0A1B                     	;# 
  4227  0A1B                     	;# 
  4228  0A1B                     	;# 
  4229  0A1C                     	;# 
  4230  0A1C                     	;# 
  4231  0A1D                     	;# 
  4232  0A1D                     	;# 
  4233  0A1E                     	;# 
  4234  0A1E                     	;# 
  4235  0A1F                     	;# 
  4236  0A1F                     	;# 
  4237  0A1F                     	;# 
  4238  1E0F                     	;# 
  4239  1E10                     	;# 
  4240  1E11                     	;# 
  4241  1E12                     	;# 
  4242  1E13                     	;# 
  4243  1E14                     	;# 
  4244  1E15                     	;# 
  4245  1E16                     	;# 
  4246  1E17                     	;# 
  4247  1E18                     	;# 
  4248  1E19                     	;# 
  4249  1E1A                     	;# 
  4250  1E1B                     	;# 
  4251  1E1C                     	;# 
  4252  1E1D                     	;# 
  4253  1E1E                     	;# 
  4254  1E1F                     	;# 
  4255  1E20                     	;# 
  4256  1E21                     	;# 
  4257  1E22                     	;# 
  4258  1E23                     	;# 
  4259  1E24                     	;# 
  4260  1E25                     	;# 
  4261  1E26                     	;# 
  4262  1E27                     	;# 
  4263  1E28                     	;# 
  4264  1E29                     	;# 
  4265  1E2A                     	;# 
  4266  1E2B                     	;# 
  4267  1E2C                     	;# 
  4268  1E2D                     	;# 
  4269  1E2E                     	;# 
  4270  1E2F                     	;# 
  4271  1E30                     	;# 
  4272  1E31                     	;# 
  4273  1E32                     	;# 
  4274  1E33                     	;# 
  4275  1E34                     	;# 
  4276  1E35                     	;# 
  4277  1E36                     	;# 
  4278  1E37                     	;# 
  4279  1E8F                     	;# 
  4280  1E90                     	;# 
  4281  1E91                     	;# 
  4282  1E92                     	;# 
  4283  1E93                     	;# 
  4284  1E9C                     	;# 
  4285  1EA1                     	;# 
  4286  1EA2                     	;# 
  4287  1EB1                     	;# 
  4288  1EBB                     	;# 
  4289  1EBC                     	;# 
  4290  1EBD                     	;# 
  4291  1EBE                     	;# 
  4292  1EC3                     	;# 
  4293  1EC5                     	;# 
  4294  1EC6                     	;# 
  4295  1EC7                     	;# 
  4296  1EC8                     	;# 
  4297  1EC9                     	;# 
  4298  1ECA                     	;# 
  4299  1ECB                     	;# 
  4300  1ECC                     	;# 
  4301  1ECD                     	;# 
  4302  1ECE                     	;# 
  4303  1F10                     	;# 
  4304  1F11                     	;# 
  4305  1F12                     	;# 
  4306  1F13                     	;# 
  4307  1F14                     	;# 
  4308  1F15                     	;# 
  4309  1F16                     	;# 
  4310  1F17                     	;# 
  4311  1F18                     	;# 
  4312  1F19                     	;# 
  4313  1F1A                     	;# 
  4314  1F1B                     	;# 
  4315  1F1C                     	;# 
  4316  1F1D                     	;# 
  4317  1F1E                     	;# 
  4318  1F1F                     	;# 
  4319  1F20                     	;# 
  4320  1F21                     	;# 
  4321  1F22                     	;# 
  4322  1F23                     	;# 
  4323  1F24                     	;# 
  4324  1F25                     	;# 
  4325  1F26                     	;# 
  4326  1F27                     	;# 
  4327  1F38                     	;# 
  4328  1F39                     	;# 
  4329  1F3A                     	;# 
  4330  1F3B                     	;# 
  4331  1F3C                     	;# 
  4332  1F3D                     	;# 
  4333  1F3E                     	;# 
  4334  1F3F                     	;# 
  4335  1F43                     	;# 
  4336  1F44                     	;# 
  4337  1F45                     	;# 
  4338  1F46                     	;# 
  4339  1F47                     	;# 
  4340  1F48                     	;# 
  4341  1F49                     	;# 
  4342  1F4A                     	;# 
  4343  1F4E                     	;# 
  4344  1F4F                     	;# 
  4345  1F50                     	;# 
  4346  1F51                     	;# 
  4347  1F52                     	;# 
  4348  1F53                     	;# 
  4349  1F54                     	;# 
  4350  1F55                     	;# 
  4351  1F65                     	;# 
  4352  1F68                     	;# 
  4353  1F69                     	;# 
  4354  1F6A                     	;# 
  4355  1F6B                     	;# 
  4356  1FE4                     	;# 
  4357  1FE5                     	;# 
  4358  1FE6                     	;# 
  4359  1FE7                     	;# 
  4360  1FE8                     	;# 
  4361  1FE8                     	;# 
  4362  1FE9                     	;# 
  4363  1FEA                     	;# 
  4364  1FEB                     	;# 
  4365  1FED                     	;# 
  4366  1FEE                     	;# 
  4367  1FEF                     	;_data
  4368                           
  4369                           	psect	idataBANK1
  4370  07FA                     __pidataBANK1:	
  4371                           
  4372                           ;initializer for _g_screenRefresh
  4373  07FA  3401               	retlw	1
  4374                           
  4375                           	psect	idataBANK2
  4376  07FB                     __pidataBANK2:	
  4377                           
  4378                           ;initializer for statusView@prevSensorStat
  4379  07FB  3401               	retlw	1
  4380                           
  4381                           	psect	idataBANK4
  4382  0800                     __pidataBANK4:	
  4383                           
  4384                           ;initializer for checkSensor@sensorUpdateInterval
  4385  0800  3464               	retlw	100
  4386  0801  3400               	retlw	0
  4387  0802  3400               	retlw	0
  4388  0803  3400               	retlw	0
  4389                           
  4390                           ;initializer for OLED_print_xy@F7967
  4391  0804  3400               	retlw	0
  4392  0805  3440               	retlw	64
  4393  0806  3414               	retlw	20
  4394  0807  3454               	retlw	84
  4395                           
  4396                           ;initializer for OLED_setCursor@F7959
  4397  0808  3400               	retlw	0
  4398  0809  3440               	retlw	64
  4399  080A  3414               	retlw	20
  4400  080B  3454               	retlw	84
  4401                           
  4402                           	psect	idataBANK6
  4403  31FA                     __pidataBANK6:	
  4404                           
  4405                           ;initializer for OLED_loadSpecialChars@F7970
  4406  31FA  3418               	retlw	24
  4407  31FB  3418               	retlw	24
  4408  31FC  3403               	retlw	3
  4409  31FD  3404               	retlw	4
  4410  31FE  3404               	retlw	4
  4411  31FF  3404               	retlw	4
  4412  3200  3403               	retlw	3
  4413  3201  3400               	retlw	0
  4414  3202  3400               	retlw	0
  4415  3203  3400               	retlw	0
  4416  3204  3400               	retlw	0
  4417  3205  3404               	retlw	4
  4418  3206  3400               	retlw	0
  4419  3207  3400               	retlw	0
  4420  3208  3400               	retlw	0
  4421  3209  3400               	retlw	0
  4422  320A  3401               	retlw	1
  4423  320B  3401               	retlw	1
  4424  320C  3405               	retlw	5
  4425  320D  3409               	retlw	9
  4426  320E  341F               	retlw	31
  4427  320F  3408               	retlw	8
  4428  3210  3404               	retlw	4
  4429  3211  3400               	retlw	0
  4430  3212  3400               	retlw	0
  4431  3213  3410               	retlw	16
  4432  3214  3418               	retlw	24
  4433  3215  341C               	retlw	28
  4434  3216  3418               	retlw	24
  4435  3217  3410               	retlw	16
  4436  3218  3400               	retlw	0
  4437  3219  3400               	retlw	0
  4438                           
  4439                           	psect	stringtext1
  4440  3000                     __pstringtext1:	
  4441  3000                     _nextStateTbl:	
  4442  3000  3400               	retlw	0
  4443  3001  34FF               	retlw	255
  4444  3002  3401               	retlw	1
  4445  3003  3405               	retlw	5
  4446  3004  3400               	retlw	0
  4447  3005  3400               	retlw	0
  4448  3006  3401               	retlw	1
  4449  3007  34FF               	retlw	255
  4450  3008  3400               	retlw	0
  4451  3009  3402               	retlw	2
  4452  300A  3401               	retlw	1
  4453  300B  3401               	retlw	1
  4454  300C  3402               	retlw	2
  4455  300D  3400               	retlw	0
  4456  300E  3403               	retlw	3
  4457  300F  3401               	retlw	1
  4458  3010  3401               	retlw	1
  4459  3011  3402               	retlw	2
  4460  3012  3402               	retlw	2
  4461  3013  3401               	retlw	1
  4462  3014  3404               	retlw	4
  4463  3015  3401               	retlw	1
  4464  3016  3401               	retlw	1
  4465  3017  3402               	retlw	2
  4466  3018  3402               	retlw	2
  4467  3019  3402               	retlw	2
  4468  301A  3402               	retlw	2
  4469  301B  3401               	retlw	1
  4470  301C  3401               	retlw	1
  4471  301D  3402               	retlw	2
  4472  301E  3403               	retlw	3
  4473  301F  3400               	retlw	0
  4474  3020  3402               	retlw	2
  4475  3021  3402               	retlw	2
  4476  3022  3402               	retlw	2
  4477  3023  3403               	retlw	3
  4478  3024  3403               	retlw	3
  4479  3025  3401               	retlw	1
  4480  3026  3402               	retlw	2
  4481  3027  3402               	retlw	2
  4482  3028  3402               	retlw	2
  4483  3029  3402               	retlw	2
  4484  302A  3404               	retlw	4
  4485  302B  3400               	retlw	0
  4486  302C  3402               	retlw	2
  4487  302D  3402               	retlw	2
  4488  302E  3402               	retlw	2
  4489  302F  3402               	retlw	2
  4490  3030  3404               	retlw	4
  4491  3031  3401               	retlw	1
  4492  3032  3402               	retlw	2
  4493  3033  3402               	retlw	2
  4494  3034  3402               	retlw	2
  4495  3035  3404               	retlw	4
  4496  3036  3405               	retlw	5
  4497  3037  3400               	retlw	0
  4498  3038  3406               	retlw	6
  4499  3039  3400               	retlw	0
  4500  303A  3400               	retlw	0
  4501  303B  3405               	retlw	5
  4502  303C  3405               	retlw	5
  4503  303D  3401               	retlw	1
  4504  303E  3407               	retlw	7
  4505  303F  3400               	retlw	0
  4506  3040  3400               	retlw	0
  4507  3041  3405               	retlw	5
  4508  3042  3405               	retlw	5
  4509  3043  3402               	retlw	2
  4510  3044  3408               	retlw	8
  4511  3045  3400               	retlw	0
  4512  3046  3400               	retlw	0
  4513  3047  3405               	retlw	5
  4514  3048  3406               	retlw	6
  4515  3049  3400               	retlw	0
  4516  304A  3406               	retlw	6
  4517  304B  3405               	retlw	5
  4518  304C  3405               	retlw	5
  4519  304D  3405               	retlw	5
  4520  304E  3406               	retlw	6
  4521  304F  3401               	retlw	1
  4522  3050  3405               	retlw	5
  4523  3051  3405               	retlw	5
  4524  3052  3405               	retlw	5
  4525  3053  3406               	retlw	6
  4526  3054  3407               	retlw	7
  4527  3055  3400               	retlw	0
  4528  3056  3407               	retlw	7
  4529  3057  3405               	retlw	5
  4530  3058  3405               	retlw	5
  4531  3059  3405               	retlw	5
  4532  305A  3407               	retlw	7
  4533  305B  3401               	retlw	1
  4534  305C  3405               	retlw	5
  4535  305D  3405               	retlw	5
  4536  305E  3405               	retlw	5
  4537  305F  3407               	retlw	7
  4538  3060  3408               	retlw	8
  4539  3061  3400               	retlw	0
  4540  3062  3408               	retlw	8
  4541  3063  3405               	retlw	5
  4542  3064  3405               	retlw	5
  4543  3065  3405               	retlw	5
  4544  3066  3408               	retlw	8
  4545  3067  3401               	retlw	1
  4546  3068  3405               	retlw	5
  4547  3069  3405               	retlw	5
  4548  306A  3405               	retlw	5
  4549  306B  3408               	retlw	8
  4550  306C                     __end_of_nextStateTbl:	
  4551                           
  4552                           	psect	stringtext2
  4553  3870                     __pstringtext2:	
  4554  3870                     _transition_table:	
  4555  3870  3400               	retlw	0
  4556  3871  3404               	retlw	4
  4557  3872  3401               	retlw	1
  4558  3873  3400               	retlw	0
  4559  3874  3482               	retlw	130
  4560  3875  3400               	retlw	0
  4561  3876  3401               	retlw	1
  4562  3877  3400               	retlw	0
  4563  3878  3402               	retlw	2
  4564  3879  3403               	retlw	3
  4565  387A  3401               	retlw	1
  4566  387B  3400               	retlw	0
  4567  387C  3402               	retlw	2
  4568  387D  3403               	retlw	3
  4569  387E  3400               	retlw	0
  4570  387F  3480               	retlw	128
  4571  3880  3445               	retlw	69
  4572  3881  3404               	retlw	4
  4573  3882  3400               	retlw	0
  4574  3883  3400               	retlw	0
  4575  3884  3405               	retlw	5
  4576  3885  3404               	retlw	4
  4577  3886  3406               	retlw	6
  4578  3887  3400               	retlw	0
  4579  3888  3405               	retlw	5
  4580  3889  3400               	retlw	0
  4581  388A  3406               	retlw	6
  4582  388B  3440               	retlw	64
  4583  388C                     __end_of_transition_table:	
  4584                           
  4585                           	psect	stringtext3
  4586  3800                     __pstringtext3:	
  4587  3800                     _stateFuncTbl:	
  4588  3800  3454               	retlw	low _statusView
  4589  3801  3410               	retlw	high _statusView
  4590  3802  341A               	retlw	low _channelView
  4591  3803  3409               	retlw	high _channelView
  4592  3804  345A               	retlw	low _channelSetup
  4593  3805  3426               	retlw	high _channelSetup
  4594  3806  34D8               	retlw	low _setOutputPower
  4595  3807  3424               	retlw	high _setOutputPower
  4596  3808  3494               	retlw	low _setLensDia
  4597  3809  342E               	retlw	high _setLensDia
  4598  380A  344A               	retlw	low _setup
  4599  380B  342F               	retlw	high _setup
  4600  380C  34B0               	retlw	low _setDPOffset
  4601  380D  3429               	retlw	high _setDPOffset
  4602  380E  34C5               	retlw	low _setSkyTemp
  4603  380F  3428               	retlw	high _setSkyTemp
  4604  3810  343A               	retlw	low _setFudgeFactor
  4605  3811  3429               	retlw	high _setFudgeFactor
  4606  3812                     __end_of_stateFuncTbl:	
  4607  0018                     _LATAbits	set	24
  4608  000B                     _INTCONbits	set	11
  4609  000E                     _PORTCbits	set	14
  4610  0014                     _TRISCbits	set	20
  4611  000B                     _INTCON	set	11
  4612  0014                     _TRISC	set	20
  4613  0013                     _TRISB	set	19
  4614  0012                     _TRISA	set	18
  4615  000C                     _PORTAbits	set	12
  4616  001A                     _LATCbits	set	26
  4617  0019                     _LATBbits	set	25
  4618  009B                     _ADRESL	set	155
  4619  009C                     _ADRESH	set	156
  4620  009E                     _ADCON1	set	158
  4621  009D                     _ADCON0bits	set	157
  4622  0119                     _RC1REG	set	281
  4623  011D                     _RC1STAbits	set	285
  4624  011A                     _TX1REG	set	282
  4625  011E                     _TX1STA	set	286
  4626  011D                     _RC1STA	set	285
  4627  011B                     _SPBRGL	set	283
  4628  011F                     _BAUD1CON	set	287
  4629  020C                     _TMR1	set	524
  4630  0211                     _T1CLK	set	529
  4631  020E                     _T1CON	set	526
  4632  059C                     _TMR0	set	1436
  4633  059F                     _T0CON1	set	1439
  4634  059E                     _T0CON0	set	1438
  4635  070F                     _PIR3bits	set	1807
  4636  0719                     _PIE3bits	set	1817
  4637  0710                     _PIR4bits	set	1808
  4638  071A                     _PIE4bits	set	1818
  4639  070C                     _PIR0bits	set	1804
  4640  0716                     _PIE0bits	set	1814
  4641  071A                     _PIE4	set	1818
  4642  0719                     _PIE3	set	1817
  4643  0716                     _PIE0	set	1814
  4644  081F                     _NVMCON2	set	2079
  4645  081C                     _NVMDATL	set	2076
  4646  081D                     _NVMDATH	set	2077
  4647  081E                     _NVMCON1bits	set	2078
  4648  081B                     _NVMADRH	set	2075
  4649  081A                     _NVMADRL	set	2074
  4650  088F                     _OSCCON3bits	set	2191
  4651  088D                     _OSCCON1	set	2189
  4652  0893                     _OSCFRQ	set	2195
  4653  1ECB                     _RX1DTPPSbits	set	7883
  4654  1F3F                     _IOCAFbits	set	7999
  4655  1F54                     _IOCCN	set	8020
  4656  1F3E                     _IOCAN	set	7998
  4657  1F3D                     _IOCAP	set	7997
  4658  1F4E                     _ANSELC	set	8014
  4659  1F43                     _ANSELB	set	8003
  4660  1F38                     _ANSELA	set	7992
  4661  1F26                     _RC6PPS	set	7974
  4662  3812                     STR_1:	
  4663  3812  3454               	retlw	84	;'T'
  4664  3813  3465               	retlw	101	;'e'
  4665  3814  346D               	retlw	109	;'m'
  4666  3815  3470               	retlw	112	;'p'
  4667  3816  3465               	retlw	101	;'e'
  4668  3817  3472               	retlw	114	;'r'
  4669  3818  3461               	retlw	97	;'a'
  4670  3819  3474               	retlw	116	;'t'
  4671  381A  3475               	retlw	117	;'u'
  4672  381B  3472               	retlw	114	;'r'
  4673  381C  3465               	retlw	101	;'e'
  4674  381D  3420               	retlw	32	;' '
  4675  381E  3452               	retlw	82	;'R'
  4676  381F  3465               	retlw	101	;'e'
  4677  3820  346C               	retlw	108	;'l'
  4678  3821  342E               	retlw	46	;'.'
  4679  3822  3468               	retlw	104	;'h'
  4680  3823  3475               	retlw	117	;'u'
  4681  3824  346D               	retlw	109	;'m'
  4682  3825  3469               	retlw	105	;'i'
  4683  3826  3464               	retlw	100	;'d'
  4684  3827  3469               	retlw	105	;'i'
  4685  3828  3474               	retlw	116	;'t'
  4686  3829  3479               	retlw	121	;'y'
  4687  382A  3444               	retlw	68	;'D'
  4688  382B  3465               	retlw	101	;'e'
  4689  382C  3477               	retlw	119	;'w'
  4690  382D  3470               	retlw	112	;'p'
  4691  382E  346F               	retlw	111	;'o'
  4692  382F  3469               	retlw	105	;'i'
  4693  3830  346E               	retlw	110	;'n'
  4694  3831  3474               	retlw	116	;'t'
  4695  3832  3420               	retlw	32	;' '
  4696  3833  3420               	retlw	32	;' '
  4697  3834  3420               	retlw	32	;' '
  4698  3835  3420               	retlw	32	;' '
  4699  3836  3442               	retlw	66	;'B'
  4700  3837  3461               	retlw	97	;'a'
  4701  3838  3474               	retlw	116	;'t'
  4702  3839  342E               	retlw	46	;'.'
  4703  383A  3420               	retlw	32	;' '
  4704  383B  3420               	retlw	32	;' '
  4705  383C  3420               	retlw	32	;' '
  4706  383D  3450               	retlw	80	;'P'
  4707  383E  346F               	retlw	111	;'o'
  4708  383F  3477               	retlw	119	;'w'
  4709  3840  3465               	retlw	101	;'e'
  4710  3841  3472               	retlw	114	;'r'
  4711  3842  3456               	retlw	86	;'V'
  4712  3843  3465               	retlw	101	;'e'
  4713  3844  3472               	retlw	114	;'r'
  4714  3845  3473               	retlw	115	;'s'
  4715  3846  3469               	retlw	105	;'i'
  4716  3847  346F               	retlw	111	;'o'
  4717  3848  346E               	retlw	110	;'n'
  4718  3849  343A               	retlw	58	;':'
  4719  384A  3400               	retlw	0
  4720                           
  4721                           	psect	stringtext4
  4722  384B                     __pstringtext4:	
  4723  384B                     STR_48:	
  4724  384B  3444               	retlw	68	;'D'
  4725  384C  3450               	retlw	80	;'P'
  4726  384D  3420               	retlw	32	;' '
  4727  384E  346F               	retlw	111	;'o'
  4728  384F  3466               	retlw	102	;'f'
  4729  3850  3466               	retlw	102	;'f'
  4730  3851  3473               	retlw	115	;'s'
  4731  3852  3465               	retlw	101	;'e'
  4732  3853  3474               	retlw	116	;'t'
  4733  3854  3420               	retlw	32	;' '
  4734  3855  3420               	retlw	32	;' '
  4735  3856  3420               	retlw	32	;' '
  4736  3857  3453               	retlw	83	;'S'
  4737  3858  346B               	retlw	107	;'k'
  4738  3859  3479               	retlw	121	;'y'
  4739  385A  3420               	retlw	32	;' '
  4740  385B  3474               	retlw	116	;'t'
  4741  385C  3465               	retlw	101	;'e'
  4742  385D  346D               	retlw	109	;'m'
  4743  385E  3470               	retlw	112	;'p'
  4744  385F  342E               	retlw	46	;'.'
  4745  3860  3420               	retlw	32	;' '
  4746  3861  3420               	retlw	32	;' '
  4747  3862  3420               	retlw	32	;' '
  4748  3863  3446               	retlw	70	;'F'
  4749  3864  3475               	retlw	117	;'u'
  4750  3865  3464               	retlw	100	;'d'
  4751  3866  3467               	retlw	103	;'g'
  4752  3867  3465               	retlw	101	;'e'
  4753  3868  3420               	retlw	32	;' '
  4754  3869  3466               	retlw	102	;'f'
  4755  386A  3461               	retlw	97	;'a'
  4756  386B  3463               	retlw	99	;'c'
  4757  386C  3474               	retlw	116	;'t'
  4758  386D  346F               	retlw	111	;'o'
  4759  386E  3472               	retlw	114	;'r'
  4760  386F  3400               	retlw	0
  4761                           
  4762                           	psect	stringtext5
  4763  388C                     __pstringtext5:	
  4764  388C                     STR_62:	
  4765  388C  3448               	retlw	72	;'H'
  4766  388D  3465               	retlw	101	;'e'
  4767  388E  3461               	retlw	97	;'a'
  4768  388F  3474               	retlw	116	;'t'
  4769  3890  3465               	retlw	101	;'e'
  4770  3891  3472               	retlw	114	;'r'
  4771  3892  3420               	retlw	32	;' '
  4772  3893  3420               	retlw	32	;' '
  4773  3894  3420               	retlw	32	;' '
  4774  3895  3420               	retlw	32	;' '
  4775  3896  3420               	retlw	32	;' '
  4776  3897  3420               	retlw	32	;' '
  4777  3898  3400               	retlw	0
  4778                           
  4779                           	psect	stringtext6
  4780  3899                     __pstringtext6:	
  4781  3899                     STR_74:	
  4782  3899  3453               	retlw	83	;'S'
  4783  389A  3465               	retlw	101	;'e'
  4784  389B  346E               	retlw	110	;'n'
  4785  389C  3473               	retlw	115	;'s'
  4786  389D  346F               	retlw	111	;'o'
  4787  389E  3472               	retlw	114	;'r'
  4788  389F  3420               	retlw	32	;' '
  4789  38A0  3420               	retlw	32	;' '
  4790  38A1  3420               	retlw	32	;' '
  4791  38A2  3420               	retlw	32	;' '
  4792  38A3  3420               	retlw	32	;' '
  4793  38A4  3420               	retlw	32	;' '
  4794  38A5  3400               	retlw	0
  4795                           
  4796                           	psect	stringtext7
  4797  38A6                     __pstringtext7:	
  4798  38A6                     STR_64:	
  4799  38A6  344F               	retlw	79	;'O'
  4800  38A7  3475               	retlw	117	;'u'
  4801  38A8  3474               	retlw	116	;'t'
  4802  38A9  3470               	retlw	112	;'p'
  4803  38AA  3475               	retlw	117	;'u'
  4804  38AB  3474               	retlw	116	;'t'
  4805  38AC  3420               	retlw	32	;' '
  4806  38AD  3420               	retlw	32	;' '
  4807  38AE  3420               	retlw	32	;' '
  4808  38AF  3420               	retlw	32	;' '
  4809  38B0  3420               	retlw	32	;' '
  4810  38B1  3420               	retlw	32	;' '
  4811  38B2  3400               	retlw	0
  4812                           
  4813                           	psect	stringtext8
  4814  38B3                     __pstringtext8:	
  4815  38B3                     STR_83:	
  4816  38B3  3420               	retlw	32	;' '
  4817  38B4  3420               	retlw	32	;' '
  4818  38B5  3420               	retlw	32	;' '
  4819  38B6  3420               	retlw	32	;' '
  4820  38B7  343A               	retlw	58	;':'
  4821  38B8  342D               	retlw	45	;'-'
  4822  38B9  3429               	retlw	41	;')'
  4823  38BA  3420               	retlw	32	;' '
  4824  38BB  3420               	retlw	32	;' '
  4825  38BC  3420               	retlw	32	;' '
  4826  38BD  3420               	retlw	32	;' '
  4827  38BE  3420               	retlw	32	;' '
  4828  38BF  3400               	retlw	0
  4829                           
  4830                           	psect	stringtext9
  4831  38C0                     __pstringtext9:	
  4832  38C0                     STR_63:	
  4833  38C0  3472               	retlw	114	;'r'
  4834  38C1  3465               	retlw	101	;'e'
  4835  38C2  346D               	retlw	109	;'m'
  4836  38C3  346F               	retlw	111	;'o'
  4837  38C4  3476               	retlw	118	;'v'
  4838  38C5  3465               	retlw	101	;'e'
  4839  38C6  3464               	retlw	100	;'d'
  4840  38C7  3420               	retlw	32	;' '
  4841  38C8  3420               	retlw	32	;' '
  4842  38C9  3420               	retlw	32	;' '
  4843  38CA  3420               	retlw	32	;' '
  4844  38CB  3420               	retlw	32	;' '
  4845  38CC  3400               	retlw	0
  4846                           
  4847                           	psect	stringtext10
  4848  38CD                     __pstringtext10:	
  4849  38CD                     STR_84:	
  4850  38CD  3455               	retlw	85	;'U'
  4851  38CE  346E               	retlw	110	;'n'
  4852  38CF  346B               	retlw	107	;'k'
  4853  38D0  346E               	retlw	110	;'n'
  4854  38D1  346F               	retlw	111	;'o'
  4855  38D2  3477               	retlw	119	;'w'
  4856  38D3  346E               	retlw	110	;'n'
  4857  38D4  3420               	retlw	32	;' '
  4858  38D5  3420               	retlw	32	;' '
  4859  38D6  3420               	retlw	32	;' '
  4860  38D7  3420               	retlw	32	;' '
  4861  38D8  3420               	retlw	32	;' '
  4862  38D9  3400               	retlw	0
  4863                           
  4864                           	psect	stringtext11
  4865  38DA                     __pstringtext11:	
  4866  38DA                     STR_75:	
  4867  38DA  3474               	retlw	116	;'t'
  4868  38DB  3469               	retlw	105	;'i'
  4869  38DC  346D               	retlw	109	;'m'
  4870  38DD  3465               	retlw	101	;'e'
  4871  38DE  346F               	retlw	111	;'o'
  4872  38DF  3475               	retlw	117	;'u'
  4873  38E0  3474               	retlw	116	;'t'
  4874  38E1  3420               	retlw	32	;' '
  4875  38E2  3420               	retlw	32	;' '
  4876  38E3  3420               	retlw	32	;' '
  4877  38E4  3420               	retlw	32	;' '
  4878  38E5  3420               	retlw	32	;' '
  4879  38E6  3400               	retlw	0
  4880                           
  4881                           	psect	stringtext12
  4882  38E7                     __pstringtext12:	
  4883  38E7                     STR_65:	
  4884  38E7  3473               	retlw	115	;'s'
  4885  38E8  3468               	retlw	104	;'h'
  4886  38E9  346F               	retlw	111	;'o'
  4887  38EA  3472               	retlw	114	;'r'
  4888  38EB  3474               	retlw	116	;'t'
  4889  38EC  3465               	retlw	101	;'e'
  4890  38ED  3464               	retlw	100	;'d'
  4891  38EE  3421               	retlw	33	;'!'
  4892  38EF  3420               	retlw	32	;' '
  4893  38F0  3420               	retlw	32	;' '
  4894  38F1  3420               	retlw	32	;' '
  4895  38F2  3420               	retlw	32	;' '
  4896  38F3  3400               	retlw	0
  4897                           
  4898                           	psect	stringtext13
  4899  38F4                     __pstringtext13:	
  4900  38F4                     STR_73:	
  4901  38F4  3474               	retlw	116	;'t'
  4902  38F5  346F               	retlw	111	;'o'
  4903  38F6  346F               	retlw	111	;'o'
  4904  38F7  3420               	retlw	32	;' '
  4905  38F8  346C               	retlw	108	;'l'
  4906  38F9  346F               	retlw	111	;'o'
  4907  38FA  3477               	retlw	119	;'w'
  4908  38FB  3421               	retlw	33	;'!'
  4909  38FC  3420               	retlw	32	;' '
  4910  38FD  3420               	retlw	32	;' '
  4911  38FE  3420               	retlw	32	;' '
  4912  38FF  3420               	retlw	32	;' '
  4913  3900  3400               	retlw	0
  4914                           
  4915                           	psect	stringtext14
  4916  3901                     __pstringtext14:	
  4917  3901                     STR_77:	
  4918  3901  3463               	retlw	99	;'c'
  4919  3902  3468               	retlw	104	;'h'
  4920  3903  3465               	retlw	101	;'e'
  4921  3904  3463               	retlw	99	;'c'
  4922  3905  346B               	retlw	107	;'k'
  4923  3906  3473               	retlw	115	;'s'
  4924  3907  3475               	retlw	117	;'u'
  4925  3908  346D               	retlw	109	;'m'
  4926  3909  3420               	retlw	32	;' '
  4927  390A  3420               	retlw	32	;' '
  4928  390B  3420               	retlw	32	;' '
  4929  390C  3420               	retlw	32	;' '
  4930  390D  3400               	retlw	0
  4931                           
  4932                           	psect	stringtext15
  4933  390E                     __pstringtext15:	
  4934  390E                     STR_67:	
  4935  390E  3464               	retlw	100	;'d'
  4936  390F  3465               	retlw	101	;'e'
  4937  3910  3474               	retlw	116	;'t'
  4938  3911  3465               	retlw	101	;'e'
  4939  3912  3463               	retlw	99	;'c'
  4940  3913  3474               	retlw	116	;'t'
  4941  3914  3465               	retlw	101	;'e'
  4942  3915  3464               	retlw	100	;'d'
  4943  3916  3421               	retlw	33	;'!'
  4944  3917  3420               	retlw	32	;' '
  4945  3918  3420               	retlw	32	;' '
  4946  3919  3420               	retlw	32	;' '
  4947  391A  3400               	retlw	0
  4948                           
  4949                           	psect	stringtext16
  4950  391B                     __pstringtext16:	
  4951  391B                     STR_71:	
  4952  391B  3474               	retlw	116	;'t'
  4953  391C  346F               	retlw	111	;'o'
  4954  391D  346F               	retlw	111	;'o'
  4955  391E  3420               	retlw	32	;' '
  4956  391F  3468               	retlw	104	;'h'
  4957  3920  3469               	retlw	105	;'i'
  4958  3921  3467               	retlw	103	;'g'
  4959  3922  3468               	retlw	104	;'h'
  4960  3923  3421               	retlw	33	;'!'
  4961  3924  3420               	retlw	32	;' '
  4962  3925  3420               	retlw	32	;' '
  4963  3926  3420               	retlw	32	;' '
  4964  3927  3400               	retlw	0
  4965                           
  4966                           	psect	stringtext17
  4967  3928                     __pstringtext17:	
  4968  3928                     STR_85:	
  4969  3928  3465               	retlw	101	;'e'
  4970  3929  3472               	retlw	114	;'r'
  4971  392A  3472               	retlw	114	;'r'
  4972  392B  346F               	retlw	111	;'o'
  4973  392C  3472               	retlw	114	;'r'
  4974  392D  3420               	retlw	32	;' '
  4975  392E  3463               	retlw	99	;'c'
  4976  392F  346F               	retlw	111	;'o'
  4977  3930  3464               	retlw	100	;'d'
  4978  3931  3465               	retlw	101	;'e'
  4979  3932  3420               	retlw	32	;' '
  4980  3933  3420               	retlw	32	;' '
  4981  3934  3400               	retlw	0
  4982                           
  4983                           	psect	stringtext18
  4984  3935                     __pstringtext18:	
  4985  3935                     STR_78:	
  4986  3935  344F               	retlw	79	;'O'
  4987  3936  3456               	retlw	86	;'V'
  4988  3937  3445               	retlw	69	;'E'
  4989  3938  3452               	retlw	82	;'R'
  4990  3939  3443               	retlw	67	;'C'
  4991  393A  3455               	retlw	85	;'U'
  4992  393B  3452               	retlw	82	;'R'
  4993  393C  3452               	retlw	82	;'R'
  4994  393D  3445               	retlw	69	;'E'
  4995  393E  344E               	retlw	78	;'N'
  4996  393F  3454               	retlw	84	;'T'
  4997  3940  3420               	retlw	32	;' '
  4998  3941  3400               	retlw	0
  4999                           
  5000                           	psect	stringtext19
  5001  3942                     __pstringtext19:	
  5002  3942                     STR_82:	
  5003  3942  344D               	retlw	77	;'M'
  5004  3943  3465               	retlw	101	;'e'
  5005  3944  346E               	retlw	110	;'n'
  5006  3945  3475               	retlw	117	;'u'
  5007  3946  3420               	retlw	32	;' '
  5008  3947  3462               	retlw	98	;'b'
  5009  3948  3472               	retlw	114	;'r'
  5010  3949  346F               	retlw	111	;'o'
  5011  394A  346B               	retlw	107	;'k'
  5012  394B  3465               	retlw	101	;'e'
  5013  394C  346E               	retlw	110	;'n'
  5014  394D  3420               	retlw	32	;' '
  5015  394E  3400               	retlw	0
  5016                           
  5017                           	psect	stringtext20
  5018  394F                     __pstringtext20:	
  5019  394F                     STR_66:	
  5020  394F  344F               	retlw	79	;'O'
  5021  3950  3476               	retlw	118	;'v'
  5022  3951  3465               	retlw	101	;'e'
  5023  3952  3472               	retlw	114	;'r'
  5024  3953  3463               	retlw	99	;'c'
  5025  3954  3475               	retlw	117	;'u'
  5026  3955  3472               	retlw	114	;'r'
  5027  3956  3472               	retlw	114	;'r'
  5028  3957  3465               	retlw	101	;'e'
  5029  3958  346E               	retlw	110	;'n'
  5030  3959  3474               	retlw	116	;'t'
  5031  395A  3420               	retlw	32	;' '
  5032  395B  3400               	retlw	0
  5033                           
  5034                           	psect	stringtext21
  5035  395C                     __pstringtext21:	
  5036  395C                     STR_69:	
  5037  395C  346F               	retlw	111	;'o'
  5038  395D  3476               	retlw	118	;'v'
  5039  395E  3465               	retlw	101	;'e'
  5040  395F  3472               	retlw	114	;'r'
  5041  3960  3463               	retlw	99	;'c'
  5042  3961  3475               	retlw	117	;'u'
  5043  3962  3472               	retlw	114	;'r'
  5044  3963  3472               	retlw	114	;'r'
  5045  3964  3465               	retlw	101	;'e'
  5046  3965  346E               	retlw	110	;'n'
  5047  3966  3474               	retlw	116	;'t'
  5048  3967  3420               	retlw	32	;' '
  5049  3968  3400               	retlw	0
  5050                           
  5051                           	psect	stringtext22
  5052  3969                     __pstringtext22:	
  5053  3969                     STR_70:	
  5054  3969  3453               	retlw	83	;'S'
  5055  396A  3475               	retlw	117	;'u'
  5056  396B  3470               	retlw	112	;'p'
  5057  396C  3470               	retlw	112	;'p'
  5058  396D  346C               	retlw	108	;'l'
  5059  396E  3479               	retlw	121	;'y'
  5060  396F  3420               	retlw	32	;' '
  5061  3970  3476               	retlw	118	;'v'
  5062  3971  346F               	retlw	111	;'o'
  5063  3972  346C               	retlw	108	;'l'
  5064  3973  3474               	retlw	116	;'t'
  5065  3974  342E               	retlw	46	;'.'
  5066  3975  3400               	retlw	0
  5067                           
  5068                           	psect	stringtext23
  5069  3976                     __pstringtext23:	
  5070  3976                     STR_79:	
  5071  3976  3454               	retlw	84	;'T'
  5072  3977  3455               	retlw	85	;'U'
  5073  3978  3452               	retlw	82	;'R'
  5074  3979  344E               	retlw	78	;'N'
  5075  397A  3420               	retlw	32	;' '
  5076  397B  344F               	retlw	79	;'O'
  5077  397C  3446               	retlw	70	;'F'
  5078  397D  3446               	retlw	70	;'F'
  5079  397E  3420               	retlw	32	;' '
  5080  397F  344E               	retlw	78	;'N'
  5081  3980  344F               	retlw	79	;'O'
  5082  3981  3457               	retlw	87	;'W'
  5083  3982  3400               	retlw	0
  5084                           
  5085                           	psect	stringtext24
  5086  3983                     __pstringtext24:	
  5087  3983                     STR_76:	
  5088  3983  3453               	retlw	83	;'S'
  5089  3984  3465               	retlw	101	;'e'
  5090  3985  346E               	retlw	110	;'n'
  5091  3986  3473               	retlw	115	;'s'
  5092  3987  346F               	retlw	111	;'o'
  5093  3988  3472               	retlw	114	;'r'
  5094  3989  3420               	retlw	32	;' '
  5095  398A  3477               	retlw	119	;'w'
  5096  398B  3472               	retlw	114	;'r'
  5097  398C  346F               	retlw	111	;'o'
  5098  398D  346E               	retlw	110	;'n'
  5099  398E  3467               	retlw	103	;'g'
  5100  398F  3400               	retlw	0
  5101                           
  5102                           	psect	stringtext25
  5103  3990                     __pstringtext25:	
  5104  3990                     STR_81:	
  5105  3990  3450               	retlw	80	;'P'
  5106  3991  346C               	retlw	108	;'l'
  5107  3992  3465               	retlw	101	;'e'
  5108  3993  3461               	retlw	97	;'a'
  5109  3994  3473               	retlw	115	;'s'
  5110  3995  3465               	retlw	101	;'e'
  5111  3996  3420               	retlw	32	;' '
  5112  3997  3463               	retlw	99	;'c'
  5113  3998  3468               	retlw	104	;'h'
  5114  3999  3465               	retlw	101	;'e'
  5115  399A  3463               	retlw	99	;'c'
  5116  399B  346B               	retlw	107	;'k'
  5117  399C  3400               	retlw	0
  5118                           
  5119                           	psect	stringtext26
  5120  399D                     __pstringtext26:	
  5121  399D                     STR_28:	
  5122  399D  344E               	retlw	78	;'N'
  5123  399E  346F               	retlw	111	;'o'
  5124  399F  3474               	retlw	116	;'t'
  5125  39A0  3420               	retlw	32	;' '
  5126  39A1  3420               	retlw	32	;' '
  5127  39A2  3420               	retlw	32	;' '
  5128  39A3  3420               	retlw	32	;' '
  5129  39A4  3420               	retlw	32	;' '
  5130  39A5  3420               	retlw	32	;' '
  5131  39A6  3420               	retlw	32	;' '
  5132  39A7  3420               	retlw	32	;' '
  5133  39A8  3420               	retlw	32	;' '
  5134  39A9  3400               	retlw	0
  5135                           
  5136                           	psect	stringtext27
  5137  39AA                     __pstringtext27:	
  5138  39AA                     STR_32:	
  5139  39AA  3452               	retlw	82	;'R'
  5140  39AB  3465               	retlw	101	;'e'
  5141  39AC  3473               	retlw	115	;'s'
  5142  39AD  3465               	retlw	101	;'e'
  5143  39AE  3474               	retlw	116	;'t'
  5144  39AF  3420               	retlw	32	;' '
  5145  39B0  3420               	retlw	32	;' '
  5146  39B1  3420               	retlw	32	;' '
  5147  39B2  3420               	retlw	32	;' '
  5148  39B3  3420               	retlw	32	;' '
  5149  39B4  3420               	retlw	32	;' '
  5150  39B5  3420               	retlw	32	;' '
  5151  39B6  3400               	retlw	0
  5152                           
  5153                           	psect	stringtext28
  5154  39B7                     __pstringtext28:	
  5155  39B7                     STR_30:	
  5156  39B7  3454               	retlw	84	;'T'
  5157  39B8  3465               	retlw	101	;'e'
  5158  39B9  3473               	retlw	115	;'s'
  5159  39BA  3474               	retlw	116	;'t'
  5160  39BB  3469               	retlw	105	;'i'
  5161  39BC  346E               	retlw	110	;'n'
  5162  39BD  3467               	retlw	103	;'g'
  5163  39BE  3420               	retlw	32	;' '
  5164  39BF  3420               	retlw	32	;' '
  5165  39C0  3420               	retlw	32	;' '
  5166  39C1  3420               	retlw	32	;' '
  5167  39C2  3420               	retlw	32	;' '
  5168  39C3  3400               	retlw	0
  5169                           
  5170                           	psect	stringtext29
  5171  39C4                     __pstringtext29:	
  5172  39C4                     STR_33:	
  5173  39C4  3463               	retlw	99	;'c'
  5174  39C5  3468               	retlw	104	;'h'
  5175  39C6  3461               	retlw	97	;'a'
  5176  39C7  346E               	retlw	110	;'n'
  5177  39C8  346E               	retlw	110	;'n'
  5178  39C9  3465               	retlw	101	;'e'
  5179  39CA  346C               	retlw	108	;'l'
  5180  39CB  3420               	retlw	32	;' '
  5181  39CC  3420               	retlw	32	;' '
  5182  39CD  3420               	retlw	32	;' '
  5183  39CE  3420               	retlw	32	;' '
  5184  39CF  3420               	retlw	32	;' '
  5185  39D0  3400               	retlw	0
  5186                           
  5187                           	psect	stringtext30
  5188  39D1                     __pstringtext30:	
  5189  39D1                     STR_19:	
  5190  39D1  3453               	retlw	83	;'S'
  5191  39D2  3468               	retlw	104	;'h'
  5192  39D3  346F               	retlw	111	;'o'
  5193  39D4  3472               	retlw	114	;'r'
  5194  39D5  3474               	retlw	116	;'t'
  5195  39D6  3465               	retlw	101	;'e'
  5196  39D7  3464               	retlw	100	;'d'
  5197  39D8  3421               	retlw	33	;'!'
  5198  39D9  3420               	retlw	32	;' '
  5199  39DA  3420               	retlw	32	;' '
  5200  39DB  3420               	retlw	32	;' '
  5201  39DC  3420               	retlw	32	;' '
  5202  39DD  3400               	retlw	0
  5203                           
  5204                           	psect	stringtext31
  5205  39DE                     __pstringtext31:	
  5206  39DE                     STR_14:	
  5207  39DE  3444               	retlw	68	;'D'
  5208  39DF  3469               	retlw	105	;'i'
  5209  39E0  3473               	retlw	115	;'s'
  5210  39E1  3461               	retlw	97	;'a'
  5211  39E2  3462               	retlw	98	;'b'
  5212  39E3  346C               	retlw	108	;'l'
  5213  39E4  3465               	retlw	101	;'e'
  5214  39E5  3464               	retlw	100	;'d'
  5215  39E6  3420               	retlw	32	;' '
  5216  39E7  3420               	retlw	32	;' '
  5217  39E8  3420               	retlw	32	;' '
  5218  39E9  3420               	retlw	32	;' '
  5219  39EA  3400               	retlw	0
  5220                           
  5221                           	psect	stringtext32
  5222  39EB                     __pstringtext32:	
  5223  39EB                     STR_31:	
  5224  39EB  3468               	retlw	104	;'h'
  5225  39EC  3465               	retlw	101	;'e'
  5226  39ED  3461               	retlw	97	;'a'
  5227  39EE  3474               	retlw	116	;'t'
  5228  39EF  3465               	retlw	101	;'e'
  5229  39F0  3472               	retlw	114	;'r'
  5230  39F1  342E               	retlw	46	;'.'
  5231  39F2  342E               	retlw	46	;'.'
  5232  39F3  342E               	retlw	46	;'.'
  5233  39F4  3420               	retlw	32	;' '
  5234  39F5  3420               	retlw	32	;' '
  5235  39F6  3420               	retlw	32	;' '
  5236  39F7  3400               	retlw	0
  5237                           
  5238                           	psect	stringtext33
  5239  39F8                     __pstringtext33:	
  5240  39F8                     STR_56:	
  5241  39F8  3453               	retlw	83	;'S'
  5242  39F9  346B               	retlw	107	;'k'
  5243  39FA  3479               	retlw	121	;'y'
  5244  39FB  3420               	retlw	32	;' '
  5245  39FC  3474               	retlw	116	;'t'
  5246  39FD  3465               	retlw	101	;'e'
  5247  39FE  346D               	retlw	109	;'m'
  5248  39FF  3470               	retlw	112	;'p'
  5249  3A00  342E               	retlw	46	;'.'
  5250  3A01  3420               	retlw	32	;' '
  5251  3A02  3420               	retlw	32	;' '
  5252  3A03  3420               	retlw	32	;' '
  5253  3A04  3400               	retlw	0
  5254                           
  5255                           	psect	stringtext34
  5256  3A05                     __pstringtext34:	
  5257  3A05                     STR_29:	
  5258  3A05  3463               	retlw	99	;'c'
  5259  3A06  346F               	retlw	111	;'o'
  5260  3A07  346E               	retlw	110	;'n'
  5261  3A08  346E               	retlw	110	;'n'
  5262  3A09  3465               	retlw	101	;'e'
  5263  3A0A  3463               	retlw	99	;'c'
  5264  3A0B  3474               	retlw	116	;'t'
  5265  3A0C  3465               	retlw	101	;'e'
  5266  3A0D  3464               	retlw	100	;'d'
  5267  3A0E  3420               	retlw	32	;' '
  5268  3A0F  3420               	retlw	32	;' '
  5269  3A10  3420               	retlw	32	;' '
  5270  3A11  3400               	retlw	0
  5271                           
  5272                           	psect	stringtext35
  5273  3A12                     __pstringtext35:	
  5274  3A12                     STR_53:	
  5275  3A12  3444               	retlw	68	;'D'
  5276  3A13  3450               	retlw	80	;'P'
  5277  3A14  3420               	retlw	32	;' '
  5278  3A15  346F               	retlw	111	;'o'
  5279  3A16  3466               	retlw	102	;'f'
  5280  3A17  3466               	retlw	102	;'f'
  5281  3A18  3473               	retlw	115	;'s'
  5282  3A19  3465               	retlw	101	;'e'
  5283  3A1A  3474               	retlw	116	;'t'
  5284  3A1B  3420               	retlw	32	;' '
  5285  3A1C  3420               	retlw	32	;' '
  5286  3A1D  3420               	retlw	32	;' '
  5287  3A1E  3400               	retlw	0
  5288                           
  5289                           	psect	stringtext36
  5290  3A1F                     __pstringtext36:	
  5291  3A1F                     STR_34:	
  5292  3A1F  344C               	retlw	76	;'L'
  5293  3A20  3465               	retlw	101	;'e'
  5294  3A21  346E               	retlw	110	;'n'
  5295  3A22  3473               	retlw	115	;'s'
  5296  3A23  3420               	retlw	32	;' '
  5297  3A24  3464               	retlw	100	;'d'
  5298  3A25  3469               	retlw	105	;'i'
  5299  3A26  3461               	retlw	97	;'a'
  5300  3A27  346D               	retlw	109	;'m'
  5301  3A28  342E               	retlw	46	;'.'
  5302  3A29  3420               	retlw	32	;' '
  5303  3A2A  3420               	retlw	32	;' '
  5304  3A2B  3400               	retlw	0
  5305                           
  5306                           	psect	stringtext37
  5307  3A2C                     __pstringtext37:	
  5308  3A2C                     STR_43:	
  5309  3A2C  3448               	retlw	72	;'H'
  5310  3A2D  346F               	retlw	111	;'o'
  5311  3A2E  346C               	retlw	108	;'l'
  5312  3A2F  3464               	retlw	100	;'d'
  5313  3A30  3420               	retlw	32	;' '
  5314  3A31  3462               	retlw	98	;'b'
  5315  3A32  3475               	retlw	117	;'u'
  5316  3A33  3474               	retlw	116	;'t'
  5317  3A34  3474               	retlw	116	;'t'
  5318  3A35  346F               	retlw	111	;'o'
  5319  3A36  346E               	retlw	110	;'n'
  5320  3A37  3420               	retlw	32	;' '
  5321  3A38  3400               	retlw	0
  5322                           
  5323                           	psect	stringtext38
  5324  3A39                     __pstringtext38:	
  5325  3A39                     STR_13:	
  5326  3A39  3450               	retlw	80	;'P'
  5327  3A3A  346C               	retlw	108	;'l'
  5328  3A3B  3465               	retlw	101	;'e'
  5329  3A3C  3461               	retlw	97	;'a'
  5330  3A3D  3473               	retlw	115	;'s'
  5331  3A3E  3465               	retlw	101	;'e'
  5332  3A3F  3420               	retlw	32	;' '
  5333  3A40  3477               	retlw	119	;'w'
  5334  3A41  3461               	retlw	97	;'a'
  5335  3A42  3469               	retlw	105	;'i'
  5336  3A43  3474               	retlw	116	;'t'
  5337  3A44  3421               	retlw	33	;'!'
  5338  3A45  3400               	retlw	0
  5339                           
  5340                           	psect	stringtext39
  5341  3A46                     __pstringtext39:	
  5342  3A46                     STR_20:	
  5343  3A46  344F               	retlw	79	;'O'
  5344  3A47  3476               	retlw	118	;'v'
  5345  3A48  3465               	retlw	101	;'e'
  5346  3A49  3472               	retlw	114	;'r'
  5347  3A4A  3463               	retlw	99	;'c'
  5348  3A4B  3475               	retlw	117	;'u'
  5349  3A4C  3472               	retlw	114	;'r'
  5350  3A4D  3472               	retlw	114	;'r'
  5351  3A4E  3465               	retlw	101	;'e'
  5352  3A4F  346E               	retlw	110	;'n'
  5353  3A50  3474               	retlw	116	;'t'
  5354  3A51  3421               	retlw	33	;'!'
  5355  3A52  3400               	retlw	0
  5356                           
  5357                           	psect	stringtext40
  5358  3A53                     __pstringtext40:	
  5359  3A53                     STR_18:	
  5360  3A53  3444               	retlw	68	;'D'
  5361  3A54  3469               	retlw	105	;'i'
  5362  3A55  3473               	retlw	115	;'s'
  5363  3A56  3463               	retlw	99	;'c'
  5364  3A57  346F               	retlw	111	;'o'
  5365  3A58  346E               	retlw	110	;'n'
  5366  3A59  346E               	retlw	110	;'n'
  5367  3A5A  3465               	retlw	101	;'e'
  5368  3A5B  3463               	retlw	99	;'c'
  5369  3A5C  3474               	retlw	116	;'t'
  5370  3A5D  3465               	retlw	101	;'e'
  5371  3A5E  3464               	retlw	100	;'d'
  5372  3A5F  3400               	retlw	0
  5373                           
  5374                           	psect	stringtext41
  5375  3A60                     __pstringtext41:	
  5376  3A60                     STR_44:	
  5377  3A60  3474               	retlw	116	;'t'
  5378  3A61  346F               	retlw	111	;'o'
  5379  3A62  3420               	retlw	32	;' '
  5380  3A63  3472               	retlw	114	;'r'
  5381  3A64  3465               	retlw	101	;'e'
  5382  3A65  342D               	retlw	45	;'-'
  5383  3A66  3465               	retlw	101	;'e'
  5384  3A67  346E               	retlw	110	;'n'
  5385  3A68  3461               	retlw	97	;'a'
  5386  3A69  3462               	retlw	98	;'b'
  5387  3A6A  346C               	retlw	108	;'l'
  5388  3A6B  3465               	retlw	101	;'e'
  5389  3A6C  3400               	retlw	0
  5390                           
  5391                           	psect	stringtext42
  5392  3A6D                     __pstringtext42:	
  5393  3A6D                     STR_21:	
  5394  3A6D  344F               	retlw	79	;'O'
  5395  3A6E  346E               	retlw	110	;'n'
  5396  3A6F  3464               	retlw	100	;'d'
  5397  3A70  3472               	retlw	114	;'r'
  5398  3A71  3465               	retlw	101	;'e'
  5399  3A72  3453               	retlw	83	;'S'
  5400  3A73  3470               	retlw	112	;'p'
  5401  3A74  3465               	retlw	101	;'e'
  5402  3A75  3463               	retlw	99	;'c'
  5403  3A76  3469               	retlw	105	;'i'
  5404  3A77  3461               	retlw	97	;'a'
  5405  3A78  346C               	retlw	108	;'l'
  5406  3A79  3400               	retlw	0
  5407                           
  5408                           	psect	stringtext43
  5409  3A7A                     __pstringtext43:	
  5410  3A7A                     STR_22:	
  5411  3A7A  344F               	retlw	79	;'O'
  5412  3A7B  3475               	retlw	117	;'u'
  5413  3A7C  3474               	retlw	116	;'t'
  5414  3A7D  3470               	retlw	112	;'p'
  5415  3A7E  3475               	retlw	117	;'u'
  5416  3A7F  3474               	retlw	116	;'t'
  5417  3A80  3420               	retlw	32	;' '
  5418  3A81  3470               	retlw	112	;'p'
  5419  3A82  346F               	retlw	111	;'o'
  5420  3A83  3477               	retlw	119	;'w'
  5421  3A84  3465               	retlw	101	;'e'
  5422  3A85  3472               	retlw	114	;'r'
  5423  3A86  3400               	retlw	0
  5424                           
  5425                           	psect	stringtext44
  5426  3A87                     __pstringtext44:	
  5427  3A87                     STR_86:	
  5428  3A87  3454               	retlw	84	;'T'
  5429  3A88  3455               	retlw	85	;'U'
  5430  3A89  3452               	retlw	82	;'R'
  5431  3A8A  344E               	retlw	78	;'N'
  5432  3A8B  3449               	retlw	73	;'I'
  5433  3A8C  344E               	retlw	78	;'N'
  5434  3A8D  3447               	retlw	71	;'G'
  5435  3A8E  3420               	retlw	32	;' '
  5436  3A8F  344F               	retlw	79	;'O'
  5437  3A90  3446               	retlw	70	;'F'
  5438  3A91  3446               	retlw	70	;'F'
  5439  3A92  3400               	retlw	0
  5440                           
  5441                           	psect	stringtext45
  5442  3A93                     __pstringtext45:	
  5443  3A93                     STR_51:	
  5444  3A93  3401               	retlw	1
  5445  3A94  3420               	retlw	32	;' '
  5446  3A95  3420               	retlw	32	;' '
  5447  3A96  3420               	retlw	32	;' '
  5448  3A97  3420               	retlw	32	;' '
  5449  3A98  3420               	retlw	32	;' '
  5450  3A99  3420               	retlw	32	;' '
  5451  3A9A  3420               	retlw	32	;' '
  5452  3A9B  3420               	retlw	32	;' '
  5453  3A9C  3400               	retlw	0
  5454                           
  5455                           	psect	stringtext46
  5456  3A9D                     __pstringtext46:	
  5457  3A9D                     STR_58:	
  5458  3A9D  3401               	retlw	1
  5459  3A9E  3420               	retlw	32	;' '
  5460  3A9F  3403               	retlw	3
  5461  3AA0  3420               	retlw	32	;' '
  5462  3AA1  3420               	retlw	32	;' '
  5463  3AA2  3420               	retlw	32	;' '
  5464  3AA3  3420               	retlw	32	;' '
  5465  3AA4  3420               	retlw	32	;' '
  5466  3AA5  3400               	retlw	0
  5467                           
  5468                           	psect	stringtext47
  5469  3AA6                     __pstringtext47:	
  5470  3AA6                     STR_61:	
  5471  3AA6  3420               	retlw	32	;' '
  5472  3AA7  3403               	retlw	3
  5473  3AA8  3420               	retlw	32	;' '
  5474  3AA9  3420               	retlw	32	;' '
  5475  3AAA  3420               	retlw	32	;' '
  5476  3AAB  3420               	retlw	32	;' '
  5477  3AAC  3420               	retlw	32	;' '
  5478  3AAD  3420               	retlw	32	;' '
  5479  3AAE  3400               	retlw	0
  5480                           
  5481                           	psect	stringtext48
  5482  3AAF                     __pstringtext48:	
  5483  3AAF                     STR_17:	
  5484  3AAF  3457               	retlw	87	;'W'
  5485  3AB0  3420               	retlw	32	;' '
  5486  3AB1  346D               	retlw	109	;'m'
  5487  3AB2  3461               	retlw	97	;'a'
  5488  3AB3  346E               	retlw	110	;'n'
  5489  3AB4  3475               	retlw	117	;'u'
  5490  3AB5  3461               	retlw	97	;'a'
  5491  3AB6  346C               	retlw	108	;'l'
  5492  3AB7  3400               	retlw	0
  5493                           
  5494                           	psect	stringtext49
  5495  3AB8                     __pstringtext49:	
  5496  3AB8                     STR_47:	
  5497  3AB8  3420               	retlw	32	;' '
  5498  3AB9  3469               	retlw	105	;'i'
  5499  3ABA  346E               	retlw	110	;'n'
  5500  3ABB  3463               	retlw	99	;'c'
  5501  3ABC  3468               	retlw	104	;'h'
  5502  3ABD  3420               	retlw	32	;' '
  5503  3ABE  3403               	retlw	3
  5504  3ABF  3400               	retlw	0
  5505                           
  5506                           	psect	stringtext50
  5507  3AC0                     __pstringtext50:	
  5508  3AC0                     STR_42:	
  5509  3AC0  3457               	retlw	87	;'W'
  5510  3AC1  3420               	retlw	32	;' '
  5511  3AC2  346D               	retlw	109	;'m'
  5512  3AC3  3461               	retlw	97	;'a'
  5513  3AC4  346E               	retlw	110	;'n'
  5514  3AC5  342E               	retlw	46	;'.'
  5515  3AC6  3403               	retlw	3
  5516  3AC7  3400               	retlw	0
  5517                           
  5518                           	psect	stringtext51
  5519  3AC8                     __pstringtext51:	
  5520  3AC8                     STR_5:	
  5521  3AC8  3401               	retlw	1
  5522  3AC9  3420               	retlw	32	;' '
  5523  3ACA  3420               	retlw	32	;' '
  5524  3ACB  3420               	retlw	32	;' '
  5525  3ACC  3420               	retlw	32	;' '
  5526  3ACD  3420               	retlw	32	;' '
  5527  3ACE  3420               	retlw	32	;' '
  5528  3ACF  3400               	retlw	0
  5529                           
  5530                           	psect	stringtext52
  5531  3AD0                     __pstringtext52:	
  5532  3AD0                     STR_24:	
  5533  3AD0  3420               	retlw	32	;' '
  5534  3AD1  346F               	retlw	111	;'o'
  5535  3AD2  3466               	retlw	102	;'f'
  5536  3AD3  3466               	retlw	102	;'f'
  5537  3AD4  3420               	retlw	32	;' '
  5538  3AD5  3420               	retlw	32	;' '
  5539  3AD6  3420               	retlw	32	;' '
  5540  3AD7  3400               	retlw	0
  5541                           
  5542                           	psect	stringtext53
  5543  3AD8                     __pstringtext53:	
  5544  3AD8                     STR_35:	
  5545  3AD8  3420               	retlw	32	;' '
  5546  3AD9  3469               	retlw	105	;'i'
  5547  3ADA  346E               	retlw	110	;'n'
  5548  3ADB  3463               	retlw	99	;'c'
  5549  3ADC  3468               	retlw	104	;'h'
  5550  3ADD  3420               	retlw	32	;' '
  5551  3ADE  3420               	retlw	32	;' '
  5552  3ADF  3400               	retlw	0
  5553                           
  5554                           	psect	stringtext54
  5555  3AE0                     __pstringtext54:	
  5556  3AE0                     STR_26:	
  5557  3AE0  3420               	retlw	32	;' '
  5558  3AE1  3461               	retlw	97	;'a'
  5559  3AE2  3475               	retlw	117	;'u'
  5560  3AE3  3474               	retlw	116	;'t'
  5561  3AE4  346F               	retlw	111	;'o'
  5562  3AE5  3420               	retlw	32	;' '
  5563  3AE6  3420               	retlw	32	;' '
  5564  3AE7  3400               	retlw	0
  5565                           
  5566                           	psect	stringtext55
  5567  3AE8                     __pstringtext55:	
  5568  3AE8                     STR_2:	
  5569  3AE8  3453               	retlw	83	;'S'
  5570  3AE9  3465               	retlw	101	;'e'
  5571  3AEA  346E               	retlw	110	;'n'
  5572  3AEB  3473               	retlw	115	;'s'
  5573  3AEC  346F               	retlw	111	;'o'
  5574  3AED  3472               	retlw	114	;'r'
  5575  3AEE  343A               	retlw	58	;':'
  5576  3AEF  3400               	retlw	0
  5577                           
  5578                           	psect	stringtext56
  5579  3AF0                     __pstringtext56:	
  5580  3AF0                     STR_38:	
  5581  3AF0  3420               	retlw	32	;' '
  5582  3AF1  346F               	retlw	111	;'o'
  5583  3AF2  3466               	retlw	102	;'f'
  5584  3AF3  3466               	retlw	102	;'f'
  5585  3AF4  3420               	retlw	32	;' '
  5586  3AF5  3403               	retlw	3
  5587  3AF6  3400               	retlw	0
  5588                           
  5589                           	psect	stringtext57
  5590  3AF7                     __pstringtext57:	
  5591  3AF7                     STR_40:	
  5592  3AF7  3420               	retlw	32	;' '
  5593  3AF8  3461               	retlw	97	;'a'
  5594  3AF9  3475               	retlw	117	;'u'
  5595  3AFA  3474               	retlw	116	;'t'
  5596  3AFB  346F               	retlw	111	;'o'
  5597  3AFC  3403               	retlw	3
  5598  3AFD  3400               	retlw	0
  5599                           
  5600                           	psect	stringtext58
  5601  3AFE                     __pstringtext58:	
  5602  3AFE                     STR_54:	
  5603  3AFE  3474               	retlw	116	;'t'
  5604  3AFF  3465               	retlw	101	;'e'
  5605  3B00  346D               	retlw	109	;'m'
  5606  3B01  3470               	retlw	112	;'p'
  5607  3B02  342E               	retlw	46	;'.'
  5608  3B03  3404               	retlw	4
  5609  3B04  3400               	retlw	0
  5610                           
  5611                           	psect	stringtext59
  5612  3B05                     __pstringtext59:	
  5613  3B05                     STR_6:	
  5614  3B05  3425               	retlw	37	;'%'
  5615  3B06  3420               	retlw	32	;' '
  5616  3B07  3420               	retlw	32	;' '
  5617  3B08  3420               	retlw	32	;' '
  5618  3B09  3420               	retlw	32	;' '
  5619  3B0A  3420               	retlw	32	;' '
  5620  3B0B  3400               	retlw	0
  5621                           
  5622                           	psect	stringtext60
  5623  3B0C                     __pstringtext60:	
  5624  3B0C                     STR_49:	
  5625  3B0C  3474               	retlw	116	;'t'
  5626  3B0D  3465               	retlw	101	;'e'
  5627  3B0E  346D               	retlw	109	;'m'
  5628  3B0F  3470               	retlw	112	;'p'
  5629  3B10  342E               	retlw	46	;'.'
  5630  3B11  3420               	retlw	32	;' '
  5631  3B12  3400               	retlw	0
  5632                           
  5633                           	psect	stringtext61
  5634  3B13                     __pstringtext61:	
  5635  3B13                     STR_37:	
  5636  3B13  3404               	retlw	4
  5637  3B14  3443               	retlw	67	;'C'
  5638  3B15  3468               	retlw	104	;'h'
  5639  3B16  342E               	retlw	46	;'.'
  5640  3B17  3420               	retlw	32	;' '
  5641  3B18  3400               	retlw	0
  5642                           
  5643                           	psect	stringtext62
  5644  3B19                     __pstringtext62:	
  5645  3B19                     STR_87:	
  5646  3B19  3449               	retlw	73	;'I'
  5647  3B1A  344E               	retlw	78	;'N'
  5648  3B1B  3420               	retlw	32	;' '
  5649  3B1C  3400               	retlw	0
  5650                           
  5651                           	psect	stringtext63
  5652  3B1D                     __pstringtext63:	
  5653  3B1D                     STR_3:	
  5654  3B1D  3401               	retlw	1
  5655  3B1E  3420               	retlw	32	;' '
  5656  3B1F  3402               	retlw	2
  5657  3B20  3400               	retlw	0
  5658                           
  5659                           	psect	stringtext64
  5660  3B21                     __pstringtext64:	
  5661  3B21                     STR_8:	
  5662  3B21  3456               	retlw	86	;'V'
  5663  3B22  3420               	retlw	32	;' '
  5664  3B23  3420               	retlw	32	;' '
  5665  3B24  3400               	retlw	0
  5666                           
  5667                           	psect	stringtext65
  5668  3B25                     __pstringtext65:	
  5669  3B25                     STR_10:	
  5670  3B25  3443               	retlw	67	;'C'
  5671  3B26  3468               	retlw	104	;'h'
  5672  3B27  3420               	retlw	32	;' '
  5673  3B28  3400               	retlw	0
  5674                           
  5675                           	psect	stringtext66
  5676  3B29                     __pstringtext66:	
  5677  3B29                     STR_55:	
  5678  3B29  3401               	retlw	1
  5679  3B2A  3403               	retlw	3
  5680  3B2B  3400               	retlw	0
  5681                           
  5682                           	psect	stringtext67
  5683  3B2C                     __pstringtext67:	
  5684  3B2C                     STR_50:	
  5685  3B2C  3401               	retlw	1
  5686  3B2D  3420               	retlw	32	;' '
  5687  3B2E  3400               	retlw	0
  5688                           
  5689                           	psect	stringtext68
  5690  3B2F                     __pstringtext68:	
  5691  3B2F                     STR_12:	
  5692  3B2F  3422               	retlw	34	;'"'
  5693  3B30  3420               	retlw	32	;' '
  5694  3B31  3400               	retlw	0
  5695                           
  5696                           	psect	stringtext69
  5697  3B32                     __pstringtext69:	
  5698  3B32                     STR_11:	
  5699  3B32  343A               	retlw	58	;':'
  5700  3B33  3420               	retlw	32	;' '
  5701  3B34  3400               	retlw	0
  5702                           
  5703                           	psect	stringtext70
  5704  3B35                     __pstringtext70:	
  5705  3B35                     STR_15:	
  5706  3B35  3420               	retlw	32	;' '
  5707  3B36  3428               	retlw	40	;'('
  5708  3B37  3400               	retlw	0
  5709                           
  5710                           	psect	stringtext71
  5711  3B38                     __pstringtext71:	
  5712  3B38                     STR_16:	
  5713  3B38  3457               	retlw	87	;'W'
  5714  3B39  3429               	retlw	41	;')'
  5715  3B3A  3400               	retlw	0
  5716                           
  5717                           	psect	stringtext72
  5718  3B3B                     __pstringtext72:	
  5719  3B3B                     STR_4:	
  5720  3B3B  3401               	retlw	1
  5721  3B3C  3400               	retlw	0
  5722                           
  5723                           	psect	stringtext73
  5724  0000                     __pstringtext73:	
  5725  3B03                     
  5726                           ; #config settings
  5727  0000                     
  5728                           	psect	cinit
  5729  0070                     start_initialization:	
  5730  0070                     __initialization:		;BIGRAM
  5731                           
  5732                           ; Initialize objects allocated to BANK1
  5733  0070  0141               	movlb	1	; select bank1
  5734  0071  3187  27FA  3180   	fcall	__pidataBANK1	;fetch initializer
  5735  0074  00ED               	movwf	__pdataBANK1& (0+127)
  5736                           
  5737                           ; Initialize objects allocated to BANK2
  5738  0075  0142               	movlb	2	; select bank2
  5739  0076  3187  27FB  3180   	fcall	__pidataBANK2	;fetch initializer
  5740  0079  00EF               	movwf	__pdataBANK2& (0+127)
  5741                           
  5742                           ; Initialize objects allocated to BANK4
  5743  007A  3000               	movlw	low __pidataBANK4
  5744  007B  0084               	movwf	4
  5745  007C  3088               	movlw	(high __pidataBANK4)| (0+128)
  5746  007D  0085               	movwf	5
  5747  007E  3064               	movlw	low __pdataBANK4
  5748  007F  0086               	movwf	6
  5749  0080  3002               	movlw	high __pdataBANK4
  5750  0081  0087               	movwf	7
  5751  0082  3000               	movlw	0
  5752  0083  00FF               	movwf	btemp+1
  5753  0084  300C               	movlw	12
  5754  0085  31B1  2143  3180   	fcall	init_ram
  5755                           
  5756                           ; Initialize objects allocated to BANK6
  5757  0088  30FA               	movlw	low __pidataBANK6
  5758  0089  0084               	movwf	4
  5759  008A  30B1               	movlw	(high __pidataBANK6)| (0+128)
  5760  008B  0085               	movwf	5
  5761  008C  3020               	movlw	low __pdataBANK6
  5762  008D  0086               	movwf	6
  5763  008E  3003               	movlw	high __pdataBANK6
  5764  008F  0087               	movwf	7
  5765  0090  3000               	movlw	0
  5766  0091  00FF               	movwf	btemp+1
  5767  0092  3020               	movlw	32
  5768  0093  31B1  2143  3180   	fcall	init_ram
  5769                           
  5770                           ; Clear objects allocated to BIGRAM
  5771  0096  304A               	movlw	low (0+10058)
  5772  0097  0084               	movwf	4
  5773  0098  3027               	movlw	high (0+10058)
  5774  0099  0085               	movwf	5
  5775  009A  30A6               	movlw	166
  5776  009B  00FE               	movwf	btemp
  5777  009C  3000               	movlw	0
  5778  009D  00FF               	movwf	btemp+1
  5779  009E  31B1  2137  3180   	fcall	clear_ram0
  5780                           
  5781                           ; Clear objects allocated to COMMON
  5782  00A1  01FC               	clrf	__pbssCOMMON& (0+127)
  5783  00A2  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  5784                           
  5785                           ; Clear objects allocated to BANK1
  5786  00A3  0141               	movlb	1	; select bank1
  5787  00A4  01EB               	clrf	__pbssBANK1& (0+127)
  5788  00A5  01EC               	clrf	(__pbssBANK1+1)& (0+127)
  5789                           
  5790                           ; Clear objects allocated to BANK2
  5791  00A6  305C               	movlw	low __pbssBANK2
  5792  00A7  0084               	movwf	4
  5793  00A8  3001               	movlw	high __pbssBANK2
  5794  00A9  0085               	movwf	5
  5795  00AA  3013               	movlw	19
  5796  00AB  00FE               	movwf	btemp
  5797  00AC  3000               	movlw	0
  5798  00AD  00FF               	movwf	btemp+1
  5799  00AE  31B1  2137  3180   	fcall	clear_ram0
  5800                           
  5801                           ; Clear objects allocated to BANK3
  5802  00B1  30E0               	movlw	low __pbssBANK3
  5803  00B2  0084               	movwf	4
  5804  00B3  3001               	movlw	high __pbssBANK3
  5805  00B4  0085               	movwf	5
  5806  00B5  3010               	movlw	16
  5807  00B6  00FE               	movwf	btemp
  5808  00B7  3000               	movlw	0
  5809  00B8  00FF               	movwf	btemp+1
  5810  00B9  31B1  2137  3180   	fcall	clear_ram0
  5811                           
  5812                           ; Clear objects allocated to BANK4
  5813  00BC  3020               	movlw	low __pbssBANK4
  5814  00BD  0084               	movwf	4
  5815  00BE  3002               	movlw	high __pbssBANK4
  5816  00BF  0085               	movwf	5
  5817  00C0  3027               	movlw	39
  5818  00C1  00FE               	movwf	btemp
  5819  00C2  3000               	movlw	0
  5820  00C3  00FF               	movwf	btemp+1
  5821  00C4  31B1  2137  3180   	fcall	clear_ram0
  5822                           
  5823                           ; Clear objects allocated to BANK5
  5824  00C7  30A0               	movlw	low __pbssBANK5
  5825  00C8  0084               	movwf	4
  5826  00C9  3002               	movlw	high __pbssBANK5
  5827  00CA  0085               	movwf	5
  5828  00CB  3038               	movlw	56
  5829  00CC  00FE               	movwf	btemp
  5830  00CD  3000               	movlw	0
  5831  00CE  00FF               	movwf	btemp+1
  5832  00CF  31B1  2137         	fcall	clear_ram0
  5833  00D1                     end_of_initialization:	
  5834                           ;End of C runtime variable initialization code
  5835                           
  5836  00D1                     __end_of__initialization:	
  5837  00D1  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5838  00D2  0140               	movlb	0
  5839  00D3  31AD  2D5C         	ljmp	_main	;jump to C main() function
  5840                           
  5841                           	psect	bssCOMMON
  5842  007C                     __pbssCOMMON:	
  5843  007C                     _tail:	
  5844  007C                     	ds	1
  5845  007D                     _pbState:	
  5846  007D                     	ds	1
  5847                           
  5848                           	psect	bssBANK1
  5849  00EB                     __pbssBANK1:	
  5850  00EB                     _selectedChannel:	
  5851  00EB                     	ds	1
  5852  00EC                     _curRotState:	
  5853  00EC                     	ds	1
  5854                           
  5855                           	psect	dataBANK1
  5856  00ED                     __pdataBANK1:	
  5857  00ED                     _g_screenRefresh:	
  5858  00ED                     	ds	1
  5859                           
  5860                           	psect	bssBANK2
  5861  015C                     __pbssBANK2:	
  5862  015C                     _userActivity:	
  5863  015C                     	ds	4
  5864  0160                     controller@idle:	
  5865  0160                     	ds	1
  5866  0161                     checkSensor@state:	
  5867  0161                     	ds	1
  5868  0162                     paging@lastDir:	
  5869  0162                     	ds	1
  5870  0163                     menu@state:	
  5871  0163                     	ds	1
  5872  0164                     menu@sleep:	
  5873  0164                     	ds	1
  5874  0165                     _head:	
  5875  0165                     	ds	1
  5876  0166                     setup@page:	
  5877  0166                     	ds	1
  5878  0167                     channelSetup@page:	
  5879  0167                     	ds	1
  5880  0168                     channelView@page:	
  5881  0168                     	ds	1
  5882  0169                     statusView@page:	
  5883  0169                     	ds	1
  5884  016A                     uartReceiveISR@checksum:	
  5885  016A                     	ds	1
  5886  016B                     _rxCount:	
  5887  016B                     	ds	1
  5888  016C                     _rotDir:	
  5889  016C                     	ds	1
  5890  016D                     _uartDataReadyFlag:	
  5891  016D                     	ds	1
  5892  016E                     _tick10ms:	
  5893  016E                     	ds	1
  5894                           
  5895                           	psect	dataBANK2
  5896  016F                     __pdataBANK2:	
  5897  016F                     statusView@prevSensorStat:	
  5898  016F                     	ds	1
  5899                           
  5900                           	psect	bssBANK3
  5901  01E0                     __pbssBANK3:	
  5902  01E0                     getAnalogValues@avgV:	
  5903  01E0                     	ds	2
  5904  01E2                     getAnalogValues@avgT:	
  5905  01E2                     	ds	2
  5906  01E4                     _rxOErrCount:	
  5907  01E4                     	ds	1
  5908  01E5                     _rxFErrCount:	
  5909  01E5                     	ds	1
  5910  01E6                     _str:	
  5911  01E6                     	ds	10
  5912                           
  5913                           	psect	bssBANK4
  5914  0220                     __pbssBANK4:	
  5915  0220                     _errorMessageQueue:	
  5916  0220                     	ds	10
  5917  022A                     controller@dutyCycleTimer:	
  5918  022A                     	ds	4
  5919  022E                     checkSensor@sensorTimeout:	
  5920  022E                     	ds	4
  5921  0232                     _tick100ms:	
  5922  0232                     	ds	4
  5923  0236                     getAnalogValues@avgI:	
  5924  0236                     	ds	2
  5925  0238                     _dataPacket:	
  5926  0238                     	ds	15
  5927                           
  5928                           	psect	dataBANK4
  5929  0264                     __pdataBANK4:	
  5930  0264                     checkSensor@sensorUpdateInterval:	
  5931  0264                     	ds	4
  5932  0268                     OLED_print_xy@F7967:	
  5933  0268                     	ds	4
  5934  026C                     OLED_setCursor@F7959:	
  5935  026C                     	ds	4
  5936                           
  5937                           	psect	bssBANK5
  5938  02A0                     __pbssBANK5:	
  5939  02A0                     _virtChannels:	
  5940  02A0                     	ds	36
  5941  02C4                     uartReceiveISR@buffer:	
  5942  02C4                     	ds	20
  5943                           
  5944                           	psect	dataBANK6
  5945  0320                     __pdataBANK6:	
  5946  0320                     OLED_loadSpecialChars@F7970:	
  5947  0320                     	ds	32
  5948                           
  5949                           	psect	inittext
  5950  3143                     init_ram:	
  5951  3143  00FE               	movwf	126
  5952  3144                     initloop:	
  5953  3144  0012               	moviw fsr0++
  5954  3145  001E               	movwi fsr1++
  5955  3146  3001               	movlw	1
  5956  3147  02FE               	subwf	126,f
  5957  3148  3000               	movlw	0
  5958  3149  3BFF               	subwfb	127,f
  5959  314A  087F               	movf	127,w
  5960  314B  047E               	iorwf	126,w
  5961  314C  1903               	btfsc	3,2
  5962  314D  3400               	retlw	0
  5963  314E  2944               	goto	initloop
  5964                           
  5965                           	psect	clrtext
  5966  3137                     clear_ram0:	
  5967                           ;	Called with FSR0 containing the base address, and
  5968                           ;	btemp/btemp+1 has the size to clear
  5969                           
  5970  3137  0064               	clrwdt	;clear the watchdog before getting into this loop
  5971  3138                     clrloop0:	
  5972  3138  0180               	clrf	0	;clear RAM location pointed to by FSR
  5973  3139  3101               	addfsr 0,1
  5974  313A  3001               	movlw	1
  5975  313B  02FE               	subwf	126,f
  5976  313C  3000               	movlw	0
  5977  313D  3BFF               	subwfb	127,f
  5978  313E  087F               	movf	127,w
  5979  313F  047E               	iorwf	126,w
  5980  3140  1903               	btfsc	3,2
  5981  3141  3400               	retlw	0	;all done for this memory range, return
  5982  3142  2938               	goto	clrloop0	;have we reached the end yet?
  5983                           
  5984                           	psect	cstackBANK4
  5985  0247                     __pcstackBANK4:	
  5986  0247                     channelThing@total:	
  5987                           
  5988                           ; 4 bytes @ 0x0
  5989  0247                     	ds	4
  5990  024B                     channelThing@totalGrpA:	
  5991                           
  5992                           ; 4 bytes @ 0x4
  5993  024B                     	ds	4
  5994  024F                     channelThing@totalGrpB:	
  5995                           
  5996                           ; 4 bytes @ 0x8
  5997  024F                     	ds	4
  5998  0253                     channelThing@grpA:	
  5999                           
  6000                           ; 4 bytes @ 0xC
  6001  0253                     	ds	4
  6002  0257                     channelThing@numGrpA:	
  6003                           
  6004                           ; 1 bytes @ 0x10
  6005  0257                     	ds	1
  6006  0258                     channelThing@numGrpB:	
  6007                           
  6008                           ; 1 bytes @ 0x11
  6009  0258                     	ds	1
  6010  0259                     channelThing@grpB:	
  6011                           
  6012                           ; 4 bytes @ 0x12
  6013  0259                     	ds	4
  6014  025D                     channelThing@n:	
  6015                           
  6016                           ; 1 bytes @ 0x16
  6017  025D                     	ds	1
  6018  025E                     main@sysCheckInterval:	
  6019                           
  6020                           ; 4 bytes @ 0x17
  6021  025E                     	ds	4
  6022  0262                     main@initDone:	
  6023                           
  6024                           ; 1 bytes @ 0x1B
  6025  0262                     	ds	1
  6026  0263                     main@idle:	
  6027                           
  6028                           ; 1 bytes @ 0x1C
  6029  0263                     	ds	1
  6030                           
  6031                           	psect	cstackBANK3
  6032  01A0                     __pcstackBANK3:	
  6033  01A0                     qsort@stack:	
  6034                           
  6035                           ; 64 bytes @ 0x0
  6036  01A0                     	ds	64
  6037                           
  6038                           	psect	cstackBANK2
  6039  0120                     __pcstackBANK2:	
  6040  0120                     qsort@xbuf:	
  6041                           
  6042                           ; 60 bytes @ 0x0
  6043  0120                     	ds	60
  6044                           
  6045                           	psect	cstackBANK1
  6046  00A0                     __pcstackBANK1:	
  6047  00A0                     ?___flsub:	
  6048  00A0                     ___flsub@a:	
  6049                           ; 4 bytes @ 0x0
  6050                           
  6051  00A0                     ___fldiv@rem:	
  6052                           ; 4 bytes @ 0x0
  6053                           
  6054  00A0                     storeNVM@nvm:	
  6055                           ; 4 bytes @ 0x0
  6056                           
  6057  00A0                     readNVM@nvm:	
  6058                           ; 32 bytes @ 0x0
  6059                           
  6060                           
  6061                           ; 32 bytes @ 0x0
  6062  00A0                     	ds	4
  6063  00A4                     ___fldiv@sign:	
  6064  00A4                     ___flsub@b:	
  6065                           ; 1 bytes @ 0x4
  6066                           
  6067                           
  6068                           ; 4 bytes @ 0x4
  6069  00A4                     	ds	1
  6070  00A5                     ___fldiv@new_exp:	
  6071                           
  6072                           ; 2 bytes @ 0x5
  6073  00A5                     	ds	2
  6074  00A7                     ___fldiv@grs:	
  6075                           
  6076                           ; 4 bytes @ 0x7
  6077  00A7                     	ds	1
  6078  00A8                     ?___fltol:	
  6079  00A8                     ___fltol@f1:	
  6080                           ; 4 bytes @ 0x8
  6081                           
  6082                           
  6083                           ; 4 bytes @ 0x8
  6084  00A8                     	ds	3
  6085  00AB                     ___fldiv@bexp:	
  6086                           
  6087                           ; 1 bytes @ 0xB
  6088  00AB                     	ds	1
  6089  00AC                     ??___fltol:	
  6090  00AC                     ___fldiv@aexp:	
  6091                           ; 1 bytes @ 0xC
  6092                           
  6093                           
  6094                           ; 1 bytes @ 0xC
  6095  00AC                     	ds	1
  6096  00AD                     ?___flge:	
  6097  00AD                     ??_calcRequiredPower:	
  6098                           ; 1 bit 
  6099                           
  6100  00AD                     ___flge@ff1:	
  6101                           ; 1 bytes @ 0xD
  6102                           
  6103  00AD                     _getAnalogValues$2780:	
  6104                           ; 4 bytes @ 0xD
  6105                           
  6106                           
  6107                           ; 4 bytes @ 0xD
  6108  00AD                     	ds	4
  6109  00B1                     ___fltol@sign1:	
  6110  00B1                     getAnalogValues@adc:	
  6111                           ; 1 bytes @ 0x11
  6112                           
  6113  00B1                     calcRequiredPower@p:	
  6114                           ; 2 bytes @ 0x11
  6115                           
  6116  00B1                     ___flge@ff2:	
  6117                           ; 4 bytes @ 0x11
  6118                           
  6119                           
  6120                           ; 4 bytes @ 0x11
  6121  00B1                     	ds	1
  6122  00B2                     ___fltol@exp1:	
  6123                           
  6124                           ; 1 bytes @ 0x12
  6125  00B2                     	ds	1
  6126  00B3                     ?_sortDC:	
  6127  00B3                     ?_sortDCRev:	
  6128                           ; 2 bytes @ 0x13
  6129                           
  6130  00B3                     ?_sortCur:	
  6131                           ; 2 bytes @ 0x13
  6132                           
  6133  00B3                     sortDC@cmp1:	
  6134                           ; 2 bytes @ 0x13
  6135                           
  6136  00B3                     sortDCRev@cmp1:	
  6137                           ; 2 bytes @ 0x13
  6138                           
  6139  00B3                     sortCur@cmp1:	
  6140                           ; 2 bytes @ 0x13
  6141                           
  6142                           
  6143                           ; 2 bytes @ 0x13
  6144  00B3                     	ds	2
  6145  00B5                     ??___flge:	
  6146  00B5                     sortDC@cmp2:	
  6147                           ; 1 bytes @ 0x15
  6148                           
  6149  00B5                     sortDCRev@cmp2:	
  6150                           ; 2 bytes @ 0x15
  6151                           
  6152  00B5                     sortCur@cmp2:	
  6153                           ; 2 bytes @ 0x15
  6154                           
  6155  00B5                     calcRequiredPower@Rth:	
  6156                           ; 2 bytes @ 0x15
  6157                           
  6158                           
  6159                           ; 4 bytes @ 0x15
  6160  00B5                     	ds	2
  6161  00B7                     ??_sortDC:	
  6162  00B7                     ??_sortDCRev:	
  6163                           ; 1 bytes @ 0x17
  6164                           
  6165  00B7                     sortCur@a:	
  6166                           ; 1 bytes @ 0x17
  6167                           
  6168                           
  6169                           ; 2 bytes @ 0x17
  6170  00B7                     	ds	2
  6171  00B9                     ??_systemCheck:	
  6172  00B9                     ??_checkSensor:	
  6173                           ; 1 bytes @ 0x19
  6174                           
  6175  00B9                     ??_checkChannelStatus:	
  6176                           ; 1 bytes @ 0x19
  6177                           
  6178  00B9                     ?_ftoa:	
  6179                           ; 1 bytes @ 0x19
  6180                           
  6181  00B9                     ?_spinInput:	
  6182                           ; 1 bytes @ 0x19
  6183                           
  6184  00B9                     sortDC@a:	
  6185                           ; 1 bytes @ 0x19
  6186                           
  6187  00B9                     sortDCRev@a:	
  6188                           ; 1 bytes @ 0x19
  6189                           
  6190  00B9                     spinInput@input:	
  6191                           ; 1 bytes @ 0x19
  6192                           
  6193  00B9                     sortCur@b:	
  6194                           ; 2 bytes @ 0x19
  6195                           
  6196  00B9                     ftoa@fValue:	
  6197                           ; 2 bytes @ 0x19
  6198                           
  6199  00B9                     _calcRequiredPower$2774:	
  6200                           ; 4 bytes @ 0x19
  6201                           
  6202                           
  6203                           ; 4 bytes @ 0x19
  6204  00B9                     	ds	1
  6205  00BA                     sortDC@b:	
  6206  00BA                     sortDCRev@b:	
  6207                           ; 1 bytes @ 0x1A
  6208                           
  6209                           
  6210                           ; 1 bytes @ 0x1A
  6211  00BA                     	ds	1
  6212  00BB                     ?_qsort:	
  6213  00BB                     qsort@nel:	
  6214                           ; 1 bytes @ 0x1B
  6215                           
  6216  00BB                     spinInput@min:	
  6217                           ; 2 bytes @ 0x1B
  6218                           
  6219                           
  6220                           ; 4 bytes @ 0x1B
  6221  00BB                     	ds	2
  6222  00BD                     ftoa@width:	
  6223  00BD                     checkChannelStatus@adc:	
  6224                           ; 1 bytes @ 0x1D
  6225                           
  6226  00BD                     qsort@width:	
  6227                           ; 2 bytes @ 0x1D
  6228                           
  6229  00BD                     systemCheck@str:	
  6230                           ; 2 bytes @ 0x1D
  6231                           
  6232  00BD                     _calcRequiredPower$2775:	
  6233                           ; 3 bytes @ 0x1D
  6234                           
  6235                           
  6236                           ; 4 bytes @ 0x1D
  6237  00BD                     	ds	1
  6238  00BE                     ftoa@prec:	
  6239                           
  6240                           ; 1 bytes @ 0x1E
  6241  00BE                     	ds	1
  6242  00BF                     ??_ftoa:	
  6243  00BF                     qsort@compar:	
  6244                           ; 1 bytes @ 0x1F
  6245                           
  6246  00BF                     spinInput@max:	
  6247                           ; 2 bytes @ 0x1F
  6248                           
  6249  00BF                     _checkChannelStatus$1887:	
  6250                           ; 4 bytes @ 0x1F
  6251                           
  6252                           
  6253                           ; 4 bytes @ 0x1F
  6254  00BF                     	ds	1
  6255  00C0                     systemCheck@n:	
  6256                           
  6257                           ; 1 bytes @ 0x20
  6258  00C0                     	ds	1
  6259  00C1                     ??_qsort:	
  6260  00C1                     ftoa@len:	
  6261                           ; 1 bytes @ 0x21
  6262                           
  6263  00C1                     _calcRequiredPower$2776:	
  6264                           ; 1 bytes @ 0x21
  6265                           
  6266                           
  6267                           ; 4 bytes @ 0x21
  6268  00C1                     	ds	1
  6269  00C2                     ftoa@sign:	
  6270                           
  6271                           ; 1 bytes @ 0x22
  6272  00C2                     	ds	1
  6273  00C3                     ftoa@intValue:	
  6274  00C3                     spinInput@step:	
  6275                           ; 1 bytes @ 0x23
  6276                           
  6277  00C3                     _checkChannelStatus$1888:	
  6278                           ; 4 bytes @ 0x23
  6279                           
  6280                           
  6281                           ; 4 bytes @ 0x23
  6282  00C3                     	ds	1
  6283  00C4                     ftoa@w:	
  6284                           
  6285                           ; 1 bytes @ 0x24
  6286  00C4                     	ds	1
  6287  00C5                     ftoa@pos:	
  6288  00C5                     _calcRequiredPower$2777:	
  6289                           ; 1 bytes @ 0x25
  6290                           
  6291                           
  6292                           ; 4 bytes @ 0x25
  6293  00C5                     	ds	1
  6294  00C6                     ftoa@str:	
  6295  00C6                     qsort@vbase:	
  6296                           ; 1 bytes @ 0x26
  6297                           
  6298                           
  6299                           ; 1 bytes @ 0x26
  6300  00C6                     	ds	1
  6301  00C7                     ??_statusView:	
  6302  00C7                     ??_channelView:	
  6303                           ; 1 bytes @ 0x27
  6304                           
  6305  00C7                     ??_channelSetup:	
  6306                           ; 1 bytes @ 0x27
  6307                           
  6308  00C7                     ??_setup:	
  6309                           ; 1 bytes @ 0x27
  6310                           
  6311  00C7                     spinInput@dir:	
  6312                           ; 1 bytes @ 0x27
  6313                           
  6314  00C7                     checkChannelStatus@samples:	
  6315                           ; 1 bytes @ 0x27
  6316                           
  6317  00C7                     qsort@x:	
  6318                           ; 1 bytes @ 0x27
  6319                           
  6320                           
  6321                           ; 1 bytes @ 0x27
  6322  00C7                     	ds	1
  6323  00C8                     ??_setOutputPower:	
  6324  00C8                     ??_setLensDia:	
  6325                           ; 1 bytes @ 0x28
  6326                           
  6327  00C8                     ??_setDPOffset:	
  6328                           ; 1 bytes @ 0x28
  6329                           
  6330  00C8                     ??_setSkyTemp:	
  6331                           ; 1 bytes @ 0x28
  6332                           
  6333  00C8                     ??_setFudgeFactor:	
  6334                           ; 1 bytes @ 0x28
  6335                           
  6336  00C8                     qsort@base:	
  6337                           ; 1 bytes @ 0x28
  6338                           
  6339  00C8                     checkChannelStatus@avg:	
  6340                           ; 1 bytes @ 0x28
  6341                           
  6342                           
  6343                           ; 2 bytes @ 0x28
  6344  00C8                     	ds	1
  6345  00C9                     qsort@l:	
  6346  00C9                     _calcRequiredPower$2778:	
  6347                           ; 2 bytes @ 0x29
  6348                           
  6349                           
  6350                           ; 4 bytes @ 0x29
  6351  00C9                     	ds	1
  6352  00CA                     checkChannelStatus@current:	
  6353                           
  6354                           ; 4 bytes @ 0x2A
  6355  00CA                     	ds	1
  6356  00CB                     channelSetup@chData:	
  6357  00CB                     qsort@r:	
  6358                           ; 2 bytes @ 0x2B
  6359                           
  6360                           
  6361                           ; 2 bytes @ 0x2B
  6362  00CB                     	ds	1
  6363  00CC                     setOutputPower@chData:	
  6364  00CC                     _setLensDia$2772:	
  6365                           ; 2 bytes @ 0x2C
  6366                           
  6367                           
  6368                           ; 4 bytes @ 0x2C
  6369  00CC                     	ds	1
  6370  00CD                     qsort@s:	
  6371  00CD                     _channelView$2771:	
  6372                           ; 2 bytes @ 0x2D
  6373                           
  6374  00CD                     _calcRequiredPower$2779:	
  6375                           ; 4 bytes @ 0x2D
  6376                           
  6377                           
  6378                           ; 4 bytes @ 0x2D
  6379  00CD                     	ds	1
  6380  00CE                     checkChannelStatus@channel:	
  6381                           
  6382                           ; 1 bytes @ 0x2E
  6383  00CE                     	ds	1
  6384  00CF                     checkChannelStatus@heater:	
  6385  00CF                     qsort@i:	
  6386                           ; 2 bytes @ 0x2F
  6387                           
  6388                           
  6389                           ; 2 bytes @ 0x2F
  6390  00CF                     	ds	2
  6391  00D1                     channelView@n:	
  6392  00D1                     qsort@j:	
  6393                           ; 1 bytes @ 0x31
  6394                           
  6395  00D1                     calcRequiredPower@d:	
  6396                           ; 2 bytes @ 0x31
  6397                           
  6398                           
  6399                           ; 4 bytes @ 0x31
  6400  00D1                     	ds	1
  6401  00D2                     ??_menu:	
  6402                           
  6403                           ; 1 bytes @ 0x32
  6404  00D2                     	ds	1
  6405  00D3                     ??_channelThing:	
  6406                           
  6407                           ; 1 bytes @ 0x33
  6408  00D3                     	ds	2
  6409  00D5                     calcRequiredPower@phi:	
  6410                           
  6411                           ; 4 bytes @ 0x35
  6412  00D5                     	ds	1
  6413  00D6                     menu@page:	
  6414                           
  6415                           ; 1 bytes @ 0x36
  6416  00D6                     	ds	1
  6417  00D7                     menu@pb:	
  6418                           
  6419                           ; 1 bytes @ 0x37
  6420  00D7                     	ds	1
  6421  00D8                     menu@timeout:	
  6422                           
  6423                           ; 1 bytes @ 0x38
  6424  00D8                     	ds	1
  6425  00D9                     menu@func:	
  6426  00D9                     calcRequiredPower@A:	
  6427                           ; 2 bytes @ 0x39
  6428                           
  6429                           
  6430                           ; 4 bytes @ 0x39
  6431  00D9                     	ds	2
  6432  00DB                     menu@nextState:	
  6433                           
  6434                           ; 1 bytes @ 0x3B
  6435  00DB                     	ds	2
  6436  00DD                     _calcRequiredPower$2773:	
  6437                           
  6438                           ; 4 bytes @ 0x3D
  6439  00DD                     	ds	4
  6440  00E1                     calcRequiredPower@T1:	
  6441                           
  6442                           ; 4 bytes @ 0x41
  6443  00E1                     	ds	4
  6444  00E5                     calcRequiredPower@T2:	
  6445                           
  6446                           ; 4 bytes @ 0x45
  6447  00E5                     	ds	4
  6448  00E9                     calcRequiredPower@n:	
  6449                           
  6450                           ; 1 bytes @ 0x49
  6451  00E9                     	ds	1
  6452  00EA                     ??_main:	
  6453                           
  6454                           ; 1 bytes @ 0x4A
  6455  00EA                     	ds	1
  6456                           
  6457                           	psect	cstackCOMMON
  6458  0070                     __pcstackCOMMON:	
  6459  0070                     ?_initialize:	
  6460  0070                     ?_OLED_init:	
  6461                           ; 1 bytes @ 0x0
  6462                           
  6463  0070                     ?_OLED_loadSpecialChars:	
  6464                           ; 1 bytes @ 0x0
  6465                           
  6466  0070                     ?_OLED_command:	
  6467                           ; 1 bytes @ 0x0
  6468                           
  6469  0070                     ?_initGlobalData:	
  6470                           ; 1 bytes @ 0x0
  6471                           
  6472  0070                     ?_readNVM:	
  6473                           ; 1 bytes @ 0x0
  6474                           
  6475  0070                     ?_getAnalogValues:	
  6476                           ; 1 bytes @ 0x0
  6477                           
  6478  0070                     ?_systemCheck:	
  6479                           ; 1 bytes @ 0x0
  6480                           
  6481  0070                     ?_checkSensor:	
  6482                           ; 1 bytes @ 0x0
  6483                           
  6484  0070                     ?_calcRequiredPower:	
  6485                           ; 1 bytes @ 0x0
  6486                           
  6487  0070                     ?_checkChannelStatus:	
  6488                           ; 1 bytes @ 0x0
  6489                           
  6490  0070                     ?_channelThing:	
  6491                           ; 1 bytes @ 0x0
  6492                           
  6493  0070                     ?_controller:	
  6494                           ; 1 bytes @ 0x0
  6495                           
  6496  0070                     ?_getLastError:	
  6497                           ; 1 bytes @ 0x0
  6498                           
  6499  0070                     ?_viewErrorMessage:	
  6500                           ; 1 bytes @ 0x0
  6501                           
  6502  0070                     ?_menu:	
  6503                           ; 1 bytes @ 0x0
  6504                           
  6505  0070                     ?_pushButtonISR:	
  6506                           ; 1 bytes @ 0x0
  6507                           
  6508  0070                     ??_pushButtonISR:	
  6509                           ; 1 bytes @ 0x0
  6510                           
  6511  0070                     ?_rotISR:	
  6512                           ; 1 bytes @ 0x0
  6513                           
  6514  0070                     ??_rotISR:	
  6515                           ; 1 bytes @ 0x0
  6516                           
  6517  0070                     ?_uartReceiveISR:	
  6518                           ; 1 bytes @ 0x0
  6519                           
  6520  0070                     ?_strncpy:	
  6521                           ; 1 bytes @ 0x0
  6522                           
  6523  0070                     ?_returnToPage:	
  6524                           ; 1 bytes @ 0x0
  6525                           
  6526  0070                     ?_storeNVM:	
  6527                           ; 1 bytes @ 0x0
  6528                           
  6529  0070                     ?_main:	
  6530                           ; 1 bytes @ 0x0
  6531                           
  6532  0070                     ?_OLED_off:	
  6533                           ; 1 bytes @ 0x0
  6534                           
  6535  0070                     ?_OLED_write4bits:	
  6536                           ; 1 bytes @ 0x0
  6537                           
  6538  0070                     ?_OLED_waitForReady:	
  6539                           ; 1 bytes @ 0x0
  6540                           
  6541  0070                     ?_OLED_write:	
  6542                           ; 1 bytes @ 0x0
  6543                           
  6544  0070                     ?_ISR:	
  6545                           ; 1 bytes @ 0x0
  6546                           
  6547  0070                     ?_getRotDir:	
  6548                           ; 1 bytes @ 0x0
  6549                           
  6550  0070                     ?_getPB:	
  6551                           ; 1 bytes @ 0x0
  6552                           
  6553  0070                     ?_uartSendByte:	
  6554                           ; 1 bytes @ 0x0
  6555                           
  6556  0070                     ?_uartReset:	
  6557                           ; 1 bytes @ 0x0
  6558                           
  6559  0070                     ?_statusView:	
  6560                           ; 1 bytes @ 0x0
  6561                           
  6562  0070                     ?_channelView:	
  6563                           ; 1 bytes @ 0x0
  6564                           
  6565  0070                     ?_channelSetup:	
  6566                           ; 1 bytes @ 0x0
  6567                           
  6568  0070                     ?_setOutputPower:	
  6569                           ; 1 bytes @ 0x0
  6570                           
  6571  0070                     ?_setLensDia:	
  6572                           ; 1 bytes @ 0x0
  6573                           
  6574  0070                     ?_setup:	
  6575                           ; 1 bytes @ 0x0
  6576                           
  6577  0070                     ?_setDPOffset:	
  6578                           ; 1 bytes @ 0x0
  6579                           
  6580  0070                     ?_setSkyTemp:	
  6581                           ; 1 bytes @ 0x0
  6582                           
  6583  0070                     ?_setFudgeFactor:	
  6584                           ; 1 bytes @ 0x0
  6585                           
  6586  0070                     ?_error:	
  6587                           ; 1 bytes @ 0x0
  6588                           
  6589  0070                     strncpy@s:	
  6590                           ; 1 bytes @ 0x0
  6591                           
  6592                           
  6593                           ; 1 bytes @ 0x0
  6594  0070                     	ds	1
  6595  0071                     pushButtonISR@time:	
  6596  0071                     strncpy@n:	
  6597                           ; 1 bytes @ 0x1
  6598                           
  6599                           
  6600                           ; 2 bytes @ 0x1
  6601  0071                     	ds	2
  6602  0073                     ??_strncpy:	
  6603                           
  6604                           ; 1 bytes @ 0x3
  6605  0073                     	ds	1
  6606  0074                     strncpy@d:	
  6607                           
  6608                           ; 1 bytes @ 0x4
  6609  0074                     	ds	1
  6610  0075                     strncpy@cp:	
  6611                           
  6612                           ; 1 bytes @ 0x5
  6613  0075                     	ds	1
  6614  0076                     ??_uartReceiveISR:	
  6615                           
  6616                           ; 1 bytes @ 0x6
  6617  0076                     	ds	1
  6618  0077                     rotISR@input:	
  6619                           
  6620                           ; 1 bytes @ 0x7
  6621  0077                     	ds	1
  6622  0078                     ??_ISR:	
  6623                           
  6624                           ; 1 bytes @ 0x8
  6625  0078                     	ds	4
  6626                           
  6627                           	psect	cstackBANK0
  6628  0020                     __pcstackBANK0:	
  6629  0020                     ?___fleq:	
  6630  0020                     ??_initialize:	
  6631                           ; 1 bit 
  6632                           
  6633  0020                     ??_getLastError:	
  6634                           ; 1 bytes @ 0x0
  6635                           
  6636  0020                     ?_FLASH_EraseBlock:	
  6637                           ; 1 bytes @ 0x0
  6638                           
  6639  0020                     ??_OLED_write4bits:	
  6640                           ; 1 bytes @ 0x0
  6641                           
  6642  0020                     ??_OLED_waitForReady:	
  6643                           ; 1 bytes @ 0x0
  6644                           
  6645  0020                     ??_getRotDir:	
  6646                           ; 1 bytes @ 0x0
  6647                           
  6648  0020                     ??_getPB:	
  6649                           ; 1 bytes @ 0x0
  6650                           
  6651  0020                     ??_uartSendByte:	
  6652                           ; 1 bytes @ 0x0
  6653                           
  6654  0020                     ??_uartReset:	
  6655                           ; 1 bytes @ 0x0
  6656                           
  6657  0020                     ?_FLASH_ReadWord:	
  6658                           ; 1 bytes @ 0x0
  6659                           
  6660  0020                     ?__Umul8_16:	
  6661                           ; 2 bytes @ 0x0
  6662                           
  6663  0020                     ?_getAnalogValue:	
  6664                           ; 2 bytes @ 0x0
  6665                           
  6666  0020                     ?___awdiv:	
  6667                           ; 2 bytes @ 0x0
  6668                           
  6669  0020                     ?___awmod:	
  6670                           ; 2 bytes @ 0x0
  6671                           
  6672  0020                     ?_timeSince:	
  6673                           ; 2 bytes @ 0x0
  6674                           
  6675  0020                     ?___lmul:	
  6676                           ; 4 bytes @ 0x0
  6677                           
  6678  0020                     OLED_waitForReady@busy:	
  6679                           ; 4 bytes @ 0x0
  6680                           
  6681  0020                     uartSendByte@s:	
  6682                           ; 1 bytes @ 0x0
  6683                           
  6684  0020                     __Umul8_16@multiplicand:	
  6685                           ; 1 bytes @ 0x0
  6686                           
  6687  0020                     FLASH_ReadWord@flashAddr:	
  6688                           ; 1 bytes @ 0x0
  6689                           
  6690  0020                     FLASH_EraseBlock@startAddr:	
  6691                           ; 2 bytes @ 0x0
  6692                           
  6693  0020                     ___awdiv@divisor:	
  6694                           ; 2 bytes @ 0x0
  6695                           
  6696  0020                     ___awmod@divisor:	
  6697                           ; 2 bytes @ 0x0
  6698                           
  6699  0020                     timeSince@since:	
  6700                           ; 2 bytes @ 0x0
  6701                           
  6702  0020                     ___lmul@multiplier:	
  6703                           ; 4 bytes @ 0x0
  6704                           
  6705  0020                     ___fleq@ff1:	
  6706                           ; 4 bytes @ 0x0
  6707                           
  6708                           
  6709                           ; 4 bytes @ 0x0
  6710  0020                     	ds	1
  6711  0021                     getRotDir@ret:	
  6712  0021                     getPB@ret:	
  6713                           ; 1 bytes @ 0x1
  6714                           
  6715                           
  6716                           ; 1 bytes @ 0x1
  6717  0021                     	ds	1
  6718  0022                     ??_FLASH_EraseBlock:	
  6719  0022                     ??_FLASH_ReadWord:	
  6720                           ; 1 bytes @ 0x2
  6721                           
  6722  0022                     ??__Umul8_16:	
  6723                           ; 1 bytes @ 0x2
  6724                           
  6725  0022                     ??_getAnalogValue:	
  6726                           ; 1 bytes @ 0x2
  6727                           
  6728  0022                     OLED_write4bits@value:	
  6729                           ; 1 bytes @ 0x2
  6730                           
  6731  0022                     FLASH_ReadWord@GIEBitValue:	
  6732                           ; 1 bytes @ 0x2
  6733                           
  6734  0022                     FLASH_EraseBlock@GIEBitValue:	
  6735                           ; 1 bytes @ 0x2
  6736                           
  6737  0022                     _getLastError$1378:	
  6738                           ; 1 bytes @ 0x2
  6739                           
  6740  0022                     ___awdiv@dividend:	
  6741                           ; 2 bytes @ 0x2
  6742                           
  6743  0022                     ___awmod@dividend:	
  6744                           ; 2 bytes @ 0x2
  6745                           
  6746                           
  6747                           ; 2 bytes @ 0x2
  6748  0022                     	ds	1
  6749  0023                     ??_readNVM:	
  6750  0023                     ?_FLASH_WriteBlock:	
  6751                           ; 1 bytes @ 0x3
  6752                           
  6753  0023                     ?_OLED_send:	
  6754                           ; 1 bytes @ 0x3
  6755                           
  6756  0023                     OLED_send@mode:	
  6757                           ; 1 bytes @ 0x3
  6758                           
  6759  0023                     getAnalogValue@channel:	
  6760                           ; 1 bytes @ 0x3
  6761                           
  6762  0023                     FLASH_WriteBlock@writeAddr:	
  6763                           ; 1 bytes @ 0x3
  6764                           
  6765                           
  6766                           ; 2 bytes @ 0x3
  6767  0023                     	ds	1
  6768  0024                     ??_timeSince:	
  6769  0024                     ??_OLED_send:	
  6770                           ; 1 bytes @ 0x4
  6771                           
  6772  0024                     ??___awdiv:	
  6773                           ; 1 bytes @ 0x4
  6774                           
  6775  0024                     ??___awmod:	
  6776                           ; 1 bytes @ 0x4
  6777                           
  6778  0024                     __Umul8_16@product:	
  6779                           ; 1 bytes @ 0x4
  6780                           
  6781  0024                     ___lmul@multiplicand:	
  6782                           ; 2 bytes @ 0x4
  6783                           
  6784  0024                     ___fleq@ff2:	
  6785                           ; 4 bytes @ 0x4
  6786                           
  6787  0024                     readNVM@buf:	
  6788                           ; 4 bytes @ 0x4
  6789                           
  6790                           
  6791                           ; 64 bytes @ 0x4
  6792  0024                     	ds	1
  6793  0025                     OLED_send@value:	
  6794  0025                     FLASH_WriteBlock@flashWordArray:	
  6795                           ; 1 bytes @ 0x5
  6796                           
  6797  0025                     ___awdiv@counter:	
  6798                           ; 1 bytes @ 0x5
  6799                           
  6800  0025                     ___awmod@counter:	
  6801                           ; 1 bytes @ 0x5
  6802                           
  6803                           
  6804                           ; 1 bytes @ 0x5
  6805  0025                     	ds	1
  6806  0026                     ??_OLED_command:	
  6807  0026                     ??_FLASH_WriteBlock:	
  6808                           ; 1 bytes @ 0x6
  6809                           
  6810  0026                     ??_OLED_write:	
  6811                           ; 1 bytes @ 0x6
  6812                           
  6813  0026                     OLED_command@value:	
  6814                           ; 1 bytes @ 0x6
  6815                           
  6816  0026                     OLED_write@value:	
  6817                           ; 1 bytes @ 0x6
  6818                           
  6819  0026                     ___awdiv@sign:	
  6820                           ; 1 bytes @ 0x6
  6821                           
  6822  0026                     ___awmod@sign:	
  6823                           ; 1 bytes @ 0x6
  6824                           
  6825  0026                     __Umul8_16@word_mpld:	
  6826                           ; 1 bytes @ 0x6
  6827                           
  6828                           
  6829                           ; 2 bytes @ 0x6
  6830  0026                     	ds	1
  6831  0027                     ??_OLED_init:	
  6832  0027                     ??_OLED_loadSpecialChars:	
  6833                           ; 1 bytes @ 0x7
  6834                           
  6835  0027                     ?_paging:	
  6836                           ; 1 bytes @ 0x7
  6837                           
  6838  0027                     ??_OLED_off:	
  6839                           ; 1 bytes @ 0x7
  6840                           
  6841  0027                     ??_error:	
  6842                           ; 1 bytes @ 0x7
  6843                           
  6844  0027                     paging@lastPage:	
  6845                           ; 1 bytes @ 0x7
  6846                           
  6847  0027                     ___awdiv@quotient:	
  6848                           ; 1 bytes @ 0x7
  6849                           
  6850                           
  6851                           ; 2 bytes @ 0x7
  6852  0027                     	ds	1
  6853  0028                     ??_paging:	
  6854  0028                     ??___lmul:	
  6855                           ; 1 bytes @ 0x8
  6856                           
  6857  0028                     ??___fleq:	
  6858                           ; 1 bytes @ 0x8
  6859                           
  6860  0028                     error@error:	
  6861                           ; 1 bytes @ 0x8
  6862                           
  6863  0028                     __Umul8_16@multiplier:	
  6864                           ; 1 bytes @ 0x8
  6865                           
  6866  0028                     ___lmul@product:	
  6867                           ; 1 bytes @ 0x8
  6868                           
  6869  0028                     OLED_loadSpecialChars@special:	
  6870                           ; 4 bytes @ 0x8
  6871                           
  6872                           
  6873                           ; 32 bytes @ 0x8
  6874  0028                     	ds	1
  6875  0029                     ?_itoa:	
  6876  0029                     ?___bmul:	
  6877                           ; 1 bytes @ 0x9
  6878                           
  6879  0029                     ___bmul@multiplicand:	
  6880                           ; 1 bytes @ 0x9
  6881                           
  6882  0029                     itoa@str:	
  6883                           ; 1 bytes @ 0x9
  6884                           
  6885  0029                     FLASH_WriteBlock@blockStartAddr:	
  6886                           ; 2 bytes @ 0x9
  6887                           
  6888                           
  6889                           ; 2 bytes @ 0x9
  6890  0029                     	ds	1
  6891  002A                     ??___bmul:	
  6892  002A                     paging@currentPage:	
  6893                           ; 1 bytes @ 0xA
  6894                           
  6895                           
  6896                           ; 1 bytes @ 0xA
  6897  002A                     	ds	1
  6898  002B                     paging@dir:	
  6899  002B                     itoa@value:	
  6900                           ; 1 bytes @ 0xB
  6901                           
  6902  002B                     FLASH_WriteBlock@GIEBitValue:	
  6903                           ; 1 bytes @ 0xB
  6904                           
  6905  002B                     ___bmul@product:	
  6906                           ; 1 bytes @ 0xB
  6907                           
  6908                           
  6909                           ; 1 bytes @ 0xB
  6910  002B                     	ds	1
  6911  002C                     ?_ema:	
  6912  002C                     paging@n:	
  6913                           ; 2 bytes @ 0xC
  6914                           
  6915  002C                     itoa@width:	
  6916                           ; 1 bytes @ 0xC
  6917                           
  6918  002C                     FLASH_WriteBlock@i:	
  6919                           ; 1 bytes @ 0xC
  6920                           
  6921  002C                     ___bmul@multiplier:	
  6922                           ; 1 bytes @ 0xC
  6923                           
  6924  002C                     ema@in:	
  6925                           ; 1 bytes @ 0xC
  6926                           
  6927  002C                     timeSince@now:	
  6928                           ; 2 bytes @ 0xC
  6929                           
  6930                           
  6931                           ; 4 bytes @ 0xC
  6932  002C                     	ds	1
  6933  002D                     ??_itoa:	
  6934  002D                     ??_storeNVM:	
  6935                           ; 1 bytes @ 0xD
  6936                           
  6937  002D                     ?_memcpy:	
  6938                           ; 1 bytes @ 0xD
  6939                           
  6940  002D                     ?_OLED_print_xy:	
  6941                           ; 1 bytes @ 0xD
  6942                           
  6943  002D                     ?_setChannelSwitch:	
  6944                           ; 1 bytes @ 0xD
  6945                           
  6946  002D                     ?_swap:	
  6947                           ; 1 bytes @ 0xD
  6948                           
  6949  002D                     ?___wmul:	
  6950                           ; 1 bytes @ 0xD
  6951                           
  6952  002D                     OLED_print_xy@row:	
  6953                           ; 2 bytes @ 0xD
  6954                           
  6955  002D                     setChannelSwitch@state:	
  6956                           ; 1 bytes @ 0xD
  6957                           
  6958  002D                     memcpy@s1:	
  6959                           ; 1 bytes @ 0xD
  6960                           
  6961  002D                     ___wmul@multiplier:	
  6962                           ; 1 bytes @ 0xD
  6963                           
  6964  002D                     swap@len:	
  6965                           ; 2 bytes @ 0xD
  6966                           
  6967                           
  6968                           ; 2 bytes @ 0xD
  6969  002D                     	ds	1
  6970  002E                     ??_setChannelSwitch:	
  6971  002E                     OLED_print_xy@s:	
  6972                           ; 1 bytes @ 0xE
  6973                           
  6974  002E                     ema@average:	
  6975                           ; 2 bytes @ 0xE
  6976                           
  6977  002E                     memcpy@n:	
  6978                           ; 2 bytes @ 0xE
  6979                           
  6980                           
  6981                           ; 2 bytes @ 0xE
  6982  002E                     	ds	1
  6983  002F                     swap@s1:	
  6984  002F                     ___wmul@multiplicand:	
  6985                           ; 1 bytes @ 0xF
  6986                           
  6987  002F                     storeNVM@buf:	
  6988                           ; 2 bytes @ 0xF
  6989                           
  6990                           
  6991                           ; 64 bytes @ 0xF
  6992  002F                     	ds	1
  6993  0030                     ??_memcpy:	
  6994  0030                     ??_OLED_print_xy:	
  6995                           ; 1 bytes @ 0x10
  6996                           
  6997  0030                     setChannelSwitch@channel:	
  6998                           ; 1 bytes @ 0x10
  6999                           
  7000  0030                     swap@s2:	
  7001                           ; 1 bytes @ 0x10
  7002                           
  7003  0030                     ema@alpha:	
  7004                           ; 1 bytes @ 0x10
  7005                           
  7006                           
  7007                           ; 4 bytes @ 0x10
  7008  0030                     	ds	1
  7009  0031                     ??_controller:	
  7010  0031                     ??___wmul:	
  7011                           ; 1 bytes @ 0x11
  7012                           
  7013  0031                     ??_swap:	
  7014                           ; 1 bytes @ 0x11
  7015                           
  7016  0031                     memcpy@tmp:	
  7017                           ; 1 bytes @ 0x11
  7018                           
  7019  0031                     ___wmul@product:	
  7020                           ; 1 bytes @ 0x11
  7021                           
  7022  0031                     OLED_print_xy@row_offsets:	
  7023                           ; 2 bytes @ 0x11
  7024                           
  7025                           
  7026                           ; 4 bytes @ 0x11
  7027  0031                     	ds	1
  7028  0032                     swap@c:	
  7029  0032                     memcpy@d1:	
  7030                           ; 1 bytes @ 0x12
  7031                           
  7032                           
  7033                           ; 1 bytes @ 0x12
  7034  0032                     	ds	1
  7035  0033                     ??_initGlobalData:	
  7036  0033                     ??_returnToPage:	
  7037                           ; 1 bytes @ 0x13
  7038                           
  7039  0033                     ?_getNextState:	
  7040                           ; 1 bytes @ 0x13
  7041                           
  7042  0033                     ?___xxtofl:	
  7043                           ; 1 bytes @ 0x13
  7044                           
  7045  0033                     getNextState@intState:	
  7046                           ; 4 bytes @ 0x13
  7047                           
  7048  0033                     memcpy@d:	
  7049                           ; 1 bytes @ 0x13
  7050                           
  7051  0033                     ___xxtofl@val:	
  7052                           ; 1 bytes @ 0x13
  7053                           
  7054                           
  7055                           ; 4 bytes @ 0x13
  7056  0033                     	ds	1
  7057  0034                     ??_ema:	
  7058  0034                     getNextState@pb:	
  7059                           ; 1 bytes @ 0x14
  7060                           
  7061  0034                     memcpy@s:	
  7062                           ; 1 bytes @ 0x14
  7063                           
  7064                           
  7065                           ; 1 bytes @ 0x14
  7066  0034                     	ds	1
  7067  0035                     OLED_print_xy@col:	
  7068  0035                     getNextState@timeout:	
  7069                           ; 1 bytes @ 0x15
  7070                           
  7071  0035                     returnToPage@page:	
  7072                           ; 1 bytes @ 0x15
  7073                           
  7074                           
  7075                           ; 1 bytes @ 0x15
  7076  0035                     	ds	1
  7077  0036                     ??_viewErrorMessage:	
  7078  0036                     ??_getNextState:	
  7079                           ; 1 bytes @ 0x16
  7080                           
  7081  0036                     returnToPage@n:	
  7082                           ; 1 bytes @ 0x16
  7083                           
  7084  0036                     controller@tick:	
  7085                           ; 1 bytes @ 0x16
  7086                           
  7087                           
  7088                           ; 4 bytes @ 0x16
  7089  0036                     	ds	1
  7090  0037                     ??___xxtofl:	
  7091  0037                     initGlobalData@n:	
  7092                           ; 1 bytes @ 0x17
  7093                           
  7094                           
  7095                           ; 1 bytes @ 0x17
  7096  0037                     	ds	1
  7097  0038                     viewErrorMessage@errorCode:	
  7098  0038                     initGlobalData@heater:	
  7099                           ; 1 bytes @ 0x18
  7100                           
  7101                           
  7102                           ; 2 bytes @ 0x18
  7103  0038                     	ds	1
  7104  0039                     getNextState@state:	
  7105  0039                     _viewErrorMessage$1381:	
  7106                           ; 1 bytes @ 0x19
  7107                           
  7108                           
  7109                           ; 2 bytes @ 0x19
  7110  0039                     	ds	1
  7111  003A                     getNextState@n:	
  7112  003A                     controller@n:	
  7113                           ; 1 bytes @ 0x1A
  7114                           
  7115                           
  7116                           ; 1 bytes @ 0x1A
  7117  003A                     	ds	1
  7118  003B                     ___xxtofl@sign:	
  7119                           
  7120                           ; 1 bytes @ 0x1B
  7121  003B                     	ds	1
  7122  003C                     ___xxtofl@exp:	
  7123  003C                     ema@tmp0:	
  7124                           ; 1 bytes @ 0x1C
  7125                           
  7126                           
  7127                           ; 4 bytes @ 0x1C
  7128  003C                     	ds	1
  7129  003D                     ___xxtofl@arg:	
  7130                           
  7131                           ; 4 bytes @ 0x1D
  7132  003D                     	ds	4
  7133  0041                     ?___flmul:	
  7134  0041                     ___flmul@b:	
  7135                           ; 4 bytes @ 0x21
  7136                           
  7137                           
  7138                           ; 4 bytes @ 0x21
  7139  0041                     	ds	4
  7140  0045                     ___flmul@a:	
  7141                           
  7142                           ; 4 bytes @ 0x25
  7143  0045                     	ds	3
  7144  0048                     OLED_loadSpecialChars@n:	
  7145                           
  7146                           ; 1 bytes @ 0x28
  7147  0048                     	ds	1
  7148  0049                     ??___flmul:	
  7149                           
  7150                           ; 1 bytes @ 0x29
  7151  0049                     	ds	5
  7152  004E                     ___flmul@sign:	
  7153                           
  7154                           ; 1 bytes @ 0x2E
  7155  004E                     	ds	1
  7156  004F                     ___flmul@aexp:	
  7157                           
  7158                           ; 1 bytes @ 0x2F
  7159  004F                     	ds	1
  7160  0050                     ___flmul@grs:	
  7161                           
  7162                           ; 4 bytes @ 0x30
  7163  0050                     	ds	4
  7164  0054                     ___flmul@bexp:	
  7165                           
  7166                           ; 1 bytes @ 0x34
  7167  0054                     	ds	1
  7168  0055                     ___flmul@prod:	
  7169                           
  7170                           ; 4 bytes @ 0x35
  7171  0055                     	ds	4
  7172  0059                     ___flmul@temp:	
  7173                           
  7174                           ; 2 bytes @ 0x39
  7175  0059                     	ds	2
  7176  005B                     ?___fladd:	
  7177  005B                     ?___fldiv:	
  7178                           ; 4 bytes @ 0x3B
  7179                           
  7180  005B                     ___fladd@b:	
  7181                           ; 4 bytes @ 0x3B
  7182                           
  7183  005B                     ___fldiv@a:	
  7184                           ; 4 bytes @ 0x3B
  7185                           
  7186                           
  7187                           ; 4 bytes @ 0x3B
  7188  005B                     	ds	4
  7189  005F                     ___fladd@a:	
  7190  005F                     ___fldiv@b:	
  7191                           ; 4 bytes @ 0x3F
  7192                           
  7193                           
  7194                           ; 4 bytes @ 0x3F
  7195  005F                     	ds	4
  7196  0063                     ??___fladd:	
  7197  0063                     ??___fldiv:	
  7198                           ; 1 bytes @ 0x43
  7199                           
  7200                           
  7201                           ; 1 bytes @ 0x43
  7202  0063                     	ds	1
  7203  0064                     readNVM@n:	
  7204                           
  7205                           ; 1 bytes @ 0x44
  7206  0064                     	ds	7
  7207  006B                     ___fladd@signs:	
  7208                           
  7209                           ; 1 bytes @ 0x4B
  7210  006B                     	ds	1
  7211  006C                     ___fladd@aexp:	
  7212                           
  7213                           ; 1 bytes @ 0x4C
  7214  006C                     	ds	1
  7215  006D                     ___fladd@bexp:	
  7216                           
  7217                           ; 1 bytes @ 0x4D
  7218  006D                     	ds	1
  7219  006E                     ___fladd@grs:	
  7220                           
  7221                           ; 1 bytes @ 0x4E
  7222  006E                     	ds	1
  7223  006F                     ??_getAnalogValues:	
  7224  006F                     ??_spinInput:	
  7225                           ; 1 bytes @ 0x4F
  7226                           
  7227  006F                     ??_sortCur:	
  7228                           ; 1 bytes @ 0x4F
  7229                           
  7230  006F                     ??___flsub:	
  7231                           ; 1 bytes @ 0x4F
  7232                           
  7233  006F                     storeNVM@n:	
  7234                           ; 1 bytes @ 0x4F
  7235                           
  7236  006F                     _qsort$2808:	
  7237                           ; 1 bytes @ 0x4F
  7238                           
  7239                           
  7240                           ; 1 bytes @ 0x4F
  7241  006F                     	ds	1
  7242                           
  7243                           	psect	maintext
  7244  2D5C                     __pmaintext:	
  7245 ;;
  7246 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  7247 ;;
  7248 ;; *************** function _main *****************
  7249 ;; Defined at:
  7250 ;;		line 24 in file "main.c"
  7251 ;; Parameters:    Size  Location     Type
  7252 ;;		None
  7253 ;; Auto vars:     Size  Location     Type
  7254 ;;  sysCheckInte    4   23[BANK4 ] unsigned long 
  7255 ;;  idle            1   28[BANK4 ] unsigned char 
  7256 ;;  initDone        1   27[BANK4 ] unsigned char 
  7257 ;; Return value:  Size  Location     Type
  7258 ;;                  1    wreg      void 
  7259 ;; Registers used:
  7260 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7261 ;; Tracked objects:
  7262 ;;		On entry : B3F/0
  7263 ;;		On exit  : 0/0
  7264 ;;		Unchanged: 0/0
  7265 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7266 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7267 ;;      Locals:         0       0       0       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7268 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7269 ;;      Totals:         0       0       1       0       0       6       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7270 ;;Total ram usage:        7 bytes
  7271 ;; Hardware stack levels required when called:    9
  7272 ;; This function calls:
  7273 ;;		_OLED_command
  7274 ;;		_OLED_init
  7275 ;;		_OLED_loadSpecialChars
  7276 ;;		_calcRequiredPower
  7277 ;;		_channelThing
  7278 ;;		_checkChannelStatus
  7279 ;;		_checkSensor
  7280 ;;		_controller
  7281 ;;		_getAnalogValues
  7282 ;;		_getLastError
  7283 ;;		_initGlobalData
  7284 ;;		_initialize
  7285 ;;		_menu
  7286 ;;		_readNVM
  7287 ;;		_systemCheck
  7288 ;;		_timeSince
  7289 ;;		_viewErrorMessage
  7290 ;; This function is called by:
  7291 ;;		Startup code after reset
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           
  7296                           ;psect for function _main
  7297  2D5C                     _main:	
  7298                           
  7299                           ;main.c: 26:  uint32_t sysCheckInterval = 0;
  7300                           
  7301                           ;incstack = 0
  7302                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7303  2D5C  3000               	movlw	0
  7304  2D5D  0144               	movlb	4	; select bank4
  7305  2D5E  00E1               	movwf	(main@sysCheckInterval+3)^(0+512)
  7306  2D5F  3000               	movlw	0
  7307  2D60  00E0               	movwf	(main@sysCheckInterval+2)^(0+512)
  7308  2D61  3000               	movlw	0
  7309  2D62  00DF               	movwf	(main@sysCheckInterval+1)^(0+512)
  7310  2D63  3000               	movlw	0
  7311  2D64  00DE               	movwf	main@sysCheckInterval^(0+512)
  7312                           
  7313                           ;main.c: 27:  uint8_t idle = 1;
  7314  2D65  01E3               	clrf	main@idle^(0+512)
  7315  2D66  0AE3               	incf	main@idle^(0+512),f
  7316                           
  7317                           ;main.c: 28:  uint8_t initDone = 0;
  7318  2D67  01E2               	clrf	main@initDone^(0+512)
  7319                           
  7320                           ;main.c: 30:  initialize();
  7321  2D68  31B5  25B2  31AD   	fcall	_initialize
  7322                           
  7323                           ;main.c: 31:  LATBbits.LATB5 = 1;
  7324  2D6B  0140               	movlb	0	; select bank0
  7325  2D6C  1699               	bsf	25,5	;volatile
  7326                           
  7327                           ;main.c: 32:  OLED_init();
  7328  2D6D  31AB  23A5  31AD   	fcall	_OLED_init
  7329                           
  7330                           ;main.c: 33:  OLED_loadSpecialChars();
  7331  2D70  31B2  2241  31AD   	fcall	_OLED_loadSpecialChars
  7332                           
  7333                           ;main.c: 34:  OLED_command(0x02);
  7334  2D73  3002               	movlw	2
  7335  2D74  31B1  2102  31AD   	fcall	_OLED_command
  7336                           
  7337                           ;main.c: 35:  OLED_command(0x01);
  7338  2D77  3001               	movlw	1
  7339  2D78  31B1  2102  31AD   	fcall	_OLED_command
  7340                           
  7341                           ;main.c: 36:  initGlobalData();
  7342  2D7B  3188  200C  31AD   	fcall	_initGlobalData
  7343                           
  7344                           ;main.c: 37:  LATCbits.LATC3 = 1;
  7345  2D7E  0140               	movlb	0	; select bank0
  7346  2D7F  159A               	bsf	26,3	;volatile
  7347                           
  7348                           ;main.c: 40:  if (PORTAbits.RA7)
  7349  2D80  1F8C               	btfss	12,7	;volatile
  7350  2D81  2D85               	goto	l126
  7351                           
  7352                           ;main.c: 41:   readNVM();
  7353  2D82  31AA  22A3  31AD   	fcall	_readNVM
  7354  2D85                     l126:	
  7355                           ;main.c: 43:  while (1) {
  7356                           
  7357  2D85  0064               	clrwdt	;# 
  7358                           
  7359                           ;main.c: 48:   getAnalogValues();
  7360  2D86  3198  20F8  31AD   	fcall	_getAnalogValues
  7361                           
  7362                           ;main.c: 50:   if (timeSince(sysCheckInterval) > 5) {
  7363  2D89  0144               	movlb	4	; select bank4
  7364  2D8A  0861               	movf	(main@sysCheckInterval+3)^(0+512),w
  7365  2D8B  0140               	movlb	0	; select bank0
  7366  2D8C  00A3               	movwf	timeSince@since+3
  7367  2D8D  0144               	movlb	4	; select bank4
  7368  2D8E  0860               	movf	(main@sysCheckInterval+2)^(0+512),w
  7369  2D8F  0140               	movlb	0	; select bank0
  7370  2D90  00A2               	movwf	timeSince@since+2
  7371  2D91  0144               	movlb	4	; select bank4
  7372  2D92  085F               	movf	(main@sysCheckInterval+1)^(0+512),w
  7373  2D93  0140               	movlb	0	; select bank0
  7374  2D94  00A1               	movwf	timeSince@since+1
  7375  2D95  0144               	movlb	4	; select bank4
  7376  2D96  085E               	movf	main@sysCheckInterval^(0+512),w
  7377  2D97  0140               	movlb	0	; select bank0
  7378  2D98  00A0               	movwf	timeSince@since
  7379  2D99  31A8  2002  31AD   	fcall	_timeSince
  7380  2D9C  0140               	movlb	0	; select bank0
  7381  2D9D  0823               	movf	?_timeSince+3,w
  7382  2D9E  1D03               	btfss	3,2
  7383  2D9F  2DAA               	goto	l9416
  7384  2DA0  0822               	movf	?_timeSince+2,w
  7385  2DA1  1D03               	btfss	3,2
  7386  2DA2  2DAA               	goto	l9416
  7387  2DA3  0821               	movf	?_timeSince+1,w
  7388  2DA4  1D03               	btfss	3,2
  7389  2DA5  2DAA               	goto	l9416
  7390  2DA6  3006               	movlw	6
  7391  2DA7  0220               	subwf	?_timeSince,w
  7392  2DA8  1C03               	btfss	3,0
  7393  2DA9  2DB6               	goto	l9420
  7394  2DAA                     l9416:	
  7395                           
  7396                           ;main.c: 51:    sysCheckInterval = tick100ms;
  7397  2DAA  0144               	movlb	4	; select bank4
  7398  2DAB  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
  7399  2DAC  00E1               	movwf	(main@sysCheckInterval+3)^(0+512)
  7400  2DAD  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
  7401  2DAE  00E0               	movwf	(main@sysCheckInterval+2)^(0+512)
  7402  2DAF  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
  7403  2DB0  00DF               	movwf	(main@sysCheckInterval+1)^(0+512)
  7404  2DB1  0832               	movf	_tick100ms^(0+512),w	;volatile
  7405  2DB2  00DE               	movwf	main@sysCheckInterval^(0+512)
  7406                           
  7407                           ;main.c: 52:    systemCheck();
  7408  2DB3  319C  2462  31AD   	fcall	_systemCheck
  7409  2DB6                     l9420:	
  7410                           
  7411                           ;main.c: 56:   if (checkSensor()) {
  7412  2DB6  31A0  20E0  31AD   	fcall	_checkSensor
  7413  2DB9  3A00               	xorlw	0
  7414  2DBA  1903               	skipnz
  7415  2DBB  2DC2               	goto	l9426
  7416                           
  7417                           ;main.c: 58:    calcRequiredPower();
  7418  2DBC  3180  20D5  31AD   	fcall	_calcRequiredPower
  7419                           
  7420                           ;main.c: 59:    initDone = 1;
  7421  2DBF  0144               	movlb	4	; select bank4
  7422  2DC0  01E2               	clrf	main@initDone^(0+512)
  7423  2DC1  0AE2               	incf	main@initDone^(0+512),f
  7424  2DC2                     l9426:	
  7425                           
  7426                           ;main.c: 63:   if (idle) {
  7427  2DC2  0144               	movlb	4	; select bank4
  7428  2DC3  0863               	movf	main@idle^(0+512),w
  7429  2DC4  1903               	btfsc	3,2
  7430  2DC5  2DD2               	goto	l9434
  7431                           
  7432                           ;main.c: 64:    if (initDone) {
  7433  2DC6  0862               	movf	main@initDone^(0+512),w
  7434  2DC7  1903               	btfsc	3,2
  7435  2DC8  2DDA               	goto	l9436
  7436                           
  7437                           ;main.c: 67:     checkChannelStatus();
  7438  2DC9  3194  2414  31AD   	fcall	_checkChannelStatus
  7439                           
  7440                           ;main.c: 68:     channelThing();
  7441  2DCC  318B  23CC  31AD   	fcall	_channelThing
  7442                           
  7443                           ;main.c: 69:     idle = 0;
  7444  2DCF  0144               	movlb	4	; select bank4
  7445  2DD0  01E3               	clrf	main@idle^(0+512)
  7446  2DD1  2DDA               	goto	l9436
  7447  2DD2                     l9434:	
  7448                           
  7449                           ;main.c: 73:    idle = controller();
  7450  2DD2  31AD  25F2  31AD   	fcall	_controller
  7451  2DD5  0141               	movlb	1	; select bank1
  7452  2DD6  00EA               	movwf	??_main^(0+128)
  7453  2DD7  086A               	movf	??_main^(0+128),w
  7454  2DD8  0144               	movlb	4	; select bank4
  7455  2DD9  00E3               	movwf	main@idle^(0+512)
  7456  2DDA                     l9436:	
  7457                           
  7458                           ;main.c: 76:   if (getLastError() != NO_ERROR)
  7459  2DDA  3198  2003  31AD   	fcall	_getLastError
  7460  2DDD  3A00               	xorlw	0
  7461  2DDE  1903               	skipnz
  7462  2DDF  2DE4               	goto	l9440
  7463                           
  7464                           ;main.c: 77:    viewErrorMessage();
  7465  2DE0  31A3  2367  31AD   	fcall	_viewErrorMessage
  7466  2DE3  2DE7               	goto	l9442
  7467  2DE4                     l9440:	
  7468                           
  7469                           ;main.c: 79:    menu();
  7470  2DE4  3198  201B  31AD   	fcall	_menu
  7471  2DE7                     l9442:	
  7472                           
  7473                           ;main.c: 82:   _delay((unsigned long)((20)*(4000000UL/4000.0)));
  7474  2DE7  301A               	movlw	26
  7475  2DE8  0141               	movlb	1	; select bank1
  7476  2DE9  00EA               	movwf	??_main^(0+128)
  7477  2DEA  30F8               	movlw	248
  7478  2DEB                     u10867:	
  7479  2DEB  0B89               	decfsz	9,f
  7480  2DEC  2DEB               	goto	u10867
  7481  2DED  0BEA               	decfsz	??_main^(0+128),f
  7482  2DEE  2DEB               	goto	u10867
  7483  2DEF  0000               	nop
  7484                           
  7485                           ;main.c: 83:   __nop();
  7486  2DF0  0000               	nop
  7487  2DF1  2D85               	goto	l126
  7488  2DF2                     __end_of_main:	
  7489                           
  7490                           	psect	text1
  7491  2367                     __ptext1:	
  7492 ;; *************** function _viewErrorMessage *****************
  7493 ;; Defined at:
  7494 ;;		line 32 in file "error.c"
  7495 ;; Parameters:    Size  Location     Type
  7496 ;;		None
  7497 ;; Auto vars:     Size  Location     Type
  7498 ;;  errorCode       1   24[BANK0 ] enum E7825
  7499 ;; Return value:  Size  Location     Type
  7500 ;;                  1    wreg      void 
  7501 ;; Registers used:
  7502 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7503 ;; Tracked objects:
  7504 ;;		On entry : 0/0
  7505 ;;		On exit  : 0/0
  7506 ;;		Unchanged: 0/0
  7507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7508 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7509 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7510 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7511 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7512 ;;Total ram usage:        5 bytes
  7513 ;; Hardware stack levels used:    1
  7514 ;; Hardware stack levels required when called:    7
  7515 ;; This function calls:
  7516 ;;		_OLED_command
  7517 ;;		_OLED_print_xy
  7518 ;;		___awmod
  7519 ;;		_getPB
  7520 ;; This function is called by:
  7521 ;;		_main
  7522 ;; This function uses a non-reentrant model
  7523 ;;
  7524                           
  7525                           
  7526                           ;psect for function _viewErrorMessage
  7527  2367                     _viewErrorMessage:	
  7528                           
  7529                           ;error.c: 34:  enum e_errorcode errorCode;;error.c: 36:  errorCode = (head == tail) ? NO
      +                          _ERROR : errorMessageQueue[tail];
  7530                           
  7531                           ;incstack = 0
  7532                           ; Regs used in _viewErrorMessage: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7533  2367  0142               	movlb	2	; select bank2
  7534  2368  0865               	movf	_head^(0+256),w
  7535  2369  067C               	xorwf	_tail,w
  7536  236A  1903               	skipnz
  7537  236B  2B7A               	goto	l9296
  7538  236C  087C               	movf	_tail,w
  7539  236D  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
  7540  236E  0086               	movwf	6
  7541  236F  3002               	movlw	2	; select bank4/5
  7542  2370  0087               	movwf	7
  7543  2371  0801               	movf	1,w
  7544  2372  0140               	movlb	0	; select bank0
  7545  2373  00B6               	movwf	??_viewErrorMessage
  7546  2374  01B7               	clrf	??_viewErrorMessage+1
  7547  2375  0836               	movf	??_viewErrorMessage,w
  7548  2376  00B9               	movwf	_viewErrorMessage$1381
  7549  2377  0837               	movf	??_viewErrorMessage+1,w
  7550  2378  00BA               	movwf	_viewErrorMessage$1381+1
  7551  2379  2B7D               	goto	l9298
  7552  237A                     l9296:	
  7553  237A  0140               	movlb	0	; select bank0
  7554  237B  01B9               	clrf	_viewErrorMessage$1381
  7555  237C  01BA               	clrf	_viewErrorMessage$1381+1
  7556  237D                     l9298:	
  7557  237D  0839               	movf	_viewErrorMessage$1381,w
  7558  237E  00B6               	movwf	??_viewErrorMessage
  7559  237F  0836               	movf	??_viewErrorMessage,w
  7560  2380  00B8               	movwf	viewErrorMessage@errorCode
  7561                           
  7562                           ;error.c: 38:  OLED_command(0x02);
  7563  2381  3002               	movlw	2
  7564  2382  31B1  2102  31A3   	fcall	_OLED_command
  7565                           
  7566                           ;error.c: 39:  switch(errorCode) {
  7567  2385  2C8A               	goto	l9330
  7568  2386                     l9302:	
  7569                           
  7570                           ;error.c: 41:   OLED_print_xy(0, 0, "Heater      ");
  7571  2386  01AD               	clrf	OLED_print_xy@row
  7572  2387  308C               	movlw	low (STR_62| (0+32768))
  7573  2388  00AE               	movwf	OLED_print_xy@s
  7574  2389  30B8               	movlw	high (STR_62| (0+32768))
  7575  238A  00AF               	movwf	OLED_print_xy@s+1
  7576  238B  3000               	movlw	0
  7577  238C  31B3  2324  31A3   	fcall	_OLED_print_xy
  7578                           
  7579                           ;error.c: 42:   OLED_print_xy(0, 1, "removed     ");
  7580  238F  0140               	movlb	0	; select bank0
  7581  2390  01AD               	clrf	OLED_print_xy@row
  7582  2391  0AAD               	incf	OLED_print_xy@row,f
  7583  2392  30C0               	movlw	low (STR_63| (0+32768))
  7584  2393  00AE               	movwf	OLED_print_xy@s
  7585  2394  30B8               	movlw	high (STR_63| (0+32768))
  7586  2395  00AF               	movwf	OLED_print_xy@s+1
  7587  2396  3000               	movlw	0
  7588  2397  31B3  2324  31A3   	fcall	_OLED_print_xy
  7589                           
  7590                           ;error.c: 43:   break;
  7591  239A  2CB6               	goto	l9332
  7592  239B                     l9304:	
  7593                           
  7594                           ;error.c: 45:   OLED_print_xy(0, 0, "Output      ");
  7595  239B  01AD               	clrf	OLED_print_xy@row
  7596  239C  30A6               	movlw	low (STR_64| (0+32768))
  7597  239D  00AE               	movwf	OLED_print_xy@s
  7598  239E  30B8               	movlw	high (STR_64| (0+32768))
  7599  239F  00AF               	movwf	OLED_print_xy@s+1
  7600  23A0  3000               	movlw	0
  7601  23A1  31B3  2324  31A3   	fcall	_OLED_print_xy
  7602                           
  7603                           ;error.c: 46:   OLED_print_xy(0, 1, "shorted!    ");
  7604  23A4  0140               	movlb	0	; select bank0
  7605  23A5  01AD               	clrf	OLED_print_xy@row
  7606  23A6  0AAD               	incf	OLED_print_xy@row,f
  7607  23A7  30E7               	movlw	low (STR_65| (0+32768))
  7608  23A8  00AE               	movwf	OLED_print_xy@s
  7609  23A9  30B8               	movlw	high (STR_65| (0+32768))
  7610  23AA  00AF               	movwf	OLED_print_xy@s+1
  7611  23AB  3000               	movlw	0
  7612  23AC  31B3  2324  31A3   	fcall	_OLED_print_xy
  7613                           
  7614                           ;error.c: 47:   break;
  7615  23AF  2CB6               	goto	l9332
  7616  23B0                     l9306:	
  7617                           
  7618                           ;error.c: 49:   OLED_print_xy(0, 0, "Overcurrent ");
  7619  23B0  01AD               	clrf	OLED_print_xy@row
  7620  23B1  304F               	movlw	low (STR_66| (0+32768))
  7621  23B2  00AE               	movwf	OLED_print_xy@s
  7622  23B3  30B9               	movlw	high (STR_66| (0+32768))
  7623  23B4  00AF               	movwf	OLED_print_xy@s+1
  7624  23B5  3000               	movlw	0
  7625  23B6  31B3  2324  31A3   	fcall	_OLED_print_xy
  7626                           
  7627                           ;error.c: 50:   OLED_print_xy(0, 1, "detected!   ");
  7628  23B9  0140               	movlb	0	; select bank0
  7629  23BA  01AD               	clrf	OLED_print_xy@row
  7630  23BB  0AAD               	incf	OLED_print_xy@row,f
  7631  23BC  300E               	movlw	low (STR_67| (0+32768))
  7632  23BD  00AE               	movwf	OLED_print_xy@s
  7633  23BE  30B9               	movlw	high (STR_67| (0+32768))
  7634  23BF  00AF               	movwf	OLED_print_xy@s+1
  7635  23C0  3000               	movlw	0
  7636  23C1  31B3  2324  31A3   	fcall	_OLED_print_xy
  7637                           
  7638                           ;error.c: 51:   break;
  7639  23C4  2CB6               	goto	l9332
  7640  23C5                     l9308:	
  7641                           
  7642                           ;error.c: 53:   OLED_print_xy(0, 0, "Heater      ");
  7643  23C5  01AD               	clrf	OLED_print_xy@row
  7644  23C6  308C               	movlw	low (STR_62| (0+32768))
  7645  23C7  00AE               	movwf	OLED_print_xy@s
  7646  23C8  30B8               	movlw	high (STR_62| (0+32768))
  7647  23C9  00AF               	movwf	OLED_print_xy@s+1
  7648  23CA  3000               	movlw	0
  7649  23CB  31B3  2324  31A3   	fcall	_OLED_print_xy
  7650                           
  7651                           ;error.c: 54:   OLED_print_xy(0, 1, "overcurrent ");
  7652  23CE  0140               	movlb	0	; select bank0
  7653  23CF  01AD               	clrf	OLED_print_xy@row
  7654  23D0  0AAD               	incf	OLED_print_xy@row,f
  7655  23D1  305C               	movlw	low (STR_69| (0+32768))
  7656  23D2  00AE               	movwf	OLED_print_xy@s
  7657  23D3  30B9               	movlw	high (STR_69| (0+32768))
  7658  23D4  00AF               	movwf	OLED_print_xy@s+1
  7659  23D5  3000               	movlw	0
  7660  23D6  31B3  2324  31A3   	fcall	_OLED_print_xy
  7661                           
  7662                           ;error.c: 55:   break;
  7663  23D9  2CB6               	goto	l9332
  7664  23DA                     l9310:	
  7665                           
  7666                           ;error.c: 57:   OLED_print_xy(0, 0, "Supply volt.");
  7667  23DA  01AD               	clrf	OLED_print_xy@row
  7668  23DB  3069               	movlw	low (STR_70| (0+32768))
  7669  23DC  00AE               	movwf	OLED_print_xy@s
  7670  23DD  30B9               	movlw	high (STR_70| (0+32768))
  7671  23DE  00AF               	movwf	OLED_print_xy@s+1
  7672  23DF  3000               	movlw	0
  7673  23E0  31B3  2324  31A3   	fcall	_OLED_print_xy
  7674                           
  7675                           ;error.c: 58:   OLED_print_xy(0, 1, "too high!   ");
  7676  23E3  0140               	movlb	0	; select bank0
  7677  23E4  01AD               	clrf	OLED_print_xy@row
  7678  23E5  0AAD               	incf	OLED_print_xy@row,f
  7679  23E6  301B               	movlw	low (STR_71| (0+32768))
  7680  23E7  00AE               	movwf	OLED_print_xy@s
  7681  23E8  30B9               	movlw	high (STR_71| (0+32768))
  7682  23E9  00AF               	movwf	OLED_print_xy@s+1
  7683  23EA  3000               	movlw	0
  7684  23EB  31B3  2324  31A3   	fcall	_OLED_print_xy
  7685                           
  7686                           ;error.c: 59:   break;
  7687  23EE  2CB6               	goto	l9332
  7688  23EF                     l9312:	
  7689                           
  7690                           ;error.c: 61:   OLED_print_xy(0, 0, "Supply volt.");
  7691  23EF  01AD               	clrf	OLED_print_xy@row
  7692  23F0  3069               	movlw	low (STR_70| (0+32768))
  7693  23F1  00AE               	movwf	OLED_print_xy@s
  7694  23F2  30B9               	movlw	high (STR_70| (0+32768))
  7695  23F3  00AF               	movwf	OLED_print_xy@s+1
  7696  23F4  3000               	movlw	0
  7697  23F5  31B3  2324  31A3   	fcall	_OLED_print_xy
  7698                           
  7699                           ;error.c: 62:   OLED_print_xy(0, 1, "too low!    ");
  7700  23F8  0140               	movlb	0	; select bank0
  7701  23F9  01AD               	clrf	OLED_print_xy@row
  7702  23FA  0AAD               	incf	OLED_print_xy@row,f
  7703  23FB  30F4               	movlw	low (STR_73| (0+32768))
  7704  23FC  00AE               	movwf	OLED_print_xy@s
  7705  23FD  30B8               	movlw	high (STR_73| (0+32768))
  7706  23FE  00AF               	movwf	OLED_print_xy@s+1
  7707  23FF  3000               	movlw	0
  7708  2400  31B3  2324  31A3   	fcall	_OLED_print_xy
  7709                           
  7710                           ;error.c: 63:   break;
  7711  2403  2CB6               	goto	l9332
  7712  2404                     l9314:	
  7713                           
  7714                           ;error.c: 65:   OLED_print_xy(0, 0, "Sensor      ");
  7715  2404  01AD               	clrf	OLED_print_xy@row
  7716  2405  3099               	movlw	low (STR_74| (0+32768))
  7717  2406  00AE               	movwf	OLED_print_xy@s
  7718  2407  30B8               	movlw	high (STR_74| (0+32768))
  7719  2408  00AF               	movwf	OLED_print_xy@s+1
  7720  2409  3000               	movlw	0
  7721  240A  31B3  2324  31A3   	fcall	_OLED_print_xy
  7722                           
  7723                           ;error.c: 66:   OLED_print_xy(0, 1, "timeout     ");
  7724  240D  0140               	movlb	0	; select bank0
  7725  240E  01AD               	clrf	OLED_print_xy@row
  7726  240F  0AAD               	incf	OLED_print_xy@row,f
  7727  2410  30DA               	movlw	low (STR_75| (0+32768))
  7728  2411  00AE               	movwf	OLED_print_xy@s
  7729  2412  30B8               	movlw	high (STR_75| (0+32768))
  7730  2413  00AF               	movwf	OLED_print_xy@s+1
  7731  2414  3000               	movlw	0
  7732  2415  31B3  2324  31A3   	fcall	_OLED_print_xy
  7733                           
  7734                           ;error.c: 67:   break;
  7735  2418  2CB6               	goto	l9332
  7736  2419                     l9316:	
  7737                           
  7738                           ;error.c: 69:   OLED_print_xy(0, 0, "Sensor wrong");
  7739  2419  01AD               	clrf	OLED_print_xy@row
  7740  241A  3083               	movlw	low (STR_76| (0+32768))
  7741  241B  00AE               	movwf	OLED_print_xy@s
  7742  241C  30B9               	movlw	high (STR_76| (0+32768))
  7743  241D  00AF               	movwf	OLED_print_xy@s+1
  7744  241E  3000               	movlw	0
  7745  241F  31B3  2324  31A3   	fcall	_OLED_print_xy
  7746                           
  7747                           ;error.c: 70:   OLED_print_xy(0, 1, "checksum    ");
  7748  2422  0140               	movlb	0	; select bank0
  7749  2423  01AD               	clrf	OLED_print_xy@row
  7750  2424  0AAD               	incf	OLED_print_xy@row,f
  7751  2425  3001               	movlw	low (STR_77| (0+32768))
  7752  2426  00AE               	movwf	OLED_print_xy@s
  7753  2427  30B9               	movlw	high (STR_77| (0+32768))
  7754  2428  00AF               	movwf	OLED_print_xy@s+1
  7755  2429  3000               	movlw	0
  7756  242A  31B3  2324  31A3   	fcall	_OLED_print_xy
  7757                           
  7758                           ;error.c: 71:   break;
  7759  242D  2CB6               	goto	l9332
  7760  242E                     l9318:	
  7761                           
  7762                           ;error.c: 73:   OLED_print_xy(0, 0, "OVERCURRENT ");
  7763  242E  01AD               	clrf	OLED_print_xy@row
  7764  242F  3035               	movlw	low (STR_78| (0+32768))
  7765  2430  00AE               	movwf	OLED_print_xy@s
  7766  2431  30B9               	movlw	high (STR_78| (0+32768))
  7767  2432  00AF               	movwf	OLED_print_xy@s+1
  7768  2433  3000               	movlw	0
  7769  2434  31B3  2324  31A3   	fcall	_OLED_print_xy
  7770                           
  7771                           ;error.c: 74:   OLED_print_xy(0, 1, "TURN OFF NOW");
  7772  2437  0140               	movlb	0	; select bank0
  7773  2438  01AD               	clrf	OLED_print_xy@row
  7774  2439  0AAD               	incf	OLED_print_xy@row,f
  7775  243A  3076               	movlw	low (STR_79| (0+32768))
  7776  243B  00AE               	movwf	OLED_print_xy@s
  7777  243C  30B9               	movlw	high (STR_79| (0+32768))
  7778  243D  00AF               	movwf	OLED_print_xy@s+1
  7779  243E  3000               	movlw	0
  7780  243F  31B3  2324  31A3   	fcall	_OLED_print_xy
  7781                           
  7782                           ;error.c: 75:   break;
  7783  2442  2CB6               	goto	l9332
  7784  2443                     l9320:	
  7785                           
  7786                           ;error.c: 77:   OLED_print_xy(0, 0, "Overcurrent ");
  7787  2443  01AD               	clrf	OLED_print_xy@row
  7788  2444  304F               	movlw	low (STR_66| (0+32768))
  7789  2445  00AE               	movwf	OLED_print_xy@s
  7790  2446  30B9               	movlw	high (STR_66| (0+32768))
  7791  2447  00AF               	movwf	OLED_print_xy@s+1
  7792  2448  3000               	movlw	0
  7793  2449  31B3  2324  31A3   	fcall	_OLED_print_xy
  7794                           
  7795                           ;error.c: 78:   OLED_print_xy(0, 1, "Please check");
  7796  244C  0140               	movlb	0	; select bank0
  7797  244D  01AD               	clrf	OLED_print_xy@row
  7798  244E  0AAD               	incf	OLED_print_xy@row,f
  7799  244F  3090               	movlw	low (STR_81| (0+32768))
  7800  2450  00AE               	movwf	OLED_print_xy@s
  7801  2451  30B9               	movlw	high (STR_81| (0+32768))
  7802  2452  00AF               	movwf	OLED_print_xy@s+1
  7803  2453  3000               	movlw	0
  7804  2454  31B3  2324  31A3   	fcall	_OLED_print_xy
  7805                           
  7806                           ;error.c: 79:   if (getPB() == PB_SHORT)
  7807  2457  31B1  212C  31A3   	fcall	_getPB
  7808  245A  3A01               	xorlw	1
  7809  245B  1D03               	skipz
  7810  245C  2CB6               	goto	l9332
  7811                           
  7812                           ;error.c: 80:    LATCbits.LATC3 = 1;
  7813  245D  0140               	movlb	0	; select bank0
  7814  245E  159A               	bsf	26,3	;volatile
  7815  245F  2CB6               	goto	l9332
  7816  2460                     l9326:	
  7817                           
  7818                           ;error.c: 83:   OLED_print_xy(0, 0, "Menu broken ");
  7819  2460  01AD               	clrf	OLED_print_xy@row
  7820  2461  3042               	movlw	low (STR_82| (0+32768))
  7821  2462  00AE               	movwf	OLED_print_xy@s
  7822  2463  30B9               	movlw	high (STR_82| (0+32768))
  7823  2464  00AF               	movwf	OLED_print_xy@s+1
  7824  2465  3000               	movlw	0
  7825  2466  31B3  2324  31A3   	fcall	_OLED_print_xy
  7826                           
  7827                           ;error.c: 84:   OLED_print_xy(0, 1, "    :-)     ");
  7828  2469  0140               	movlb	0	; select bank0
  7829  246A  01AD               	clrf	OLED_print_xy@row
  7830  246B  0AAD               	incf	OLED_print_xy@row,f
  7831  246C  30B3               	movlw	low (STR_83| (0+32768))
  7832  246D  00AE               	movwf	OLED_print_xy@s
  7833  246E  30B8               	movlw	high (STR_83| (0+32768))
  7834  246F  00AF               	movwf	OLED_print_xy@s+1
  7835  2470  3000               	movlw	0
  7836  2471  31B3  2324  31A3   	fcall	_OLED_print_xy
  7837                           
  7838                           ;error.c: 85:   break;
  7839  2474  2CB6               	goto	l9332
  7840  2475                     l9328:	
  7841                           
  7842                           ;error.c: 87:   OLED_print_xy(0, 0, "Unknown     ");
  7843  2475  01AD               	clrf	OLED_print_xy@row
  7844  2476  30CD               	movlw	low (STR_84| (0+32768))
  7845  2477  00AE               	movwf	OLED_print_xy@s
  7846  2478  30B8               	movlw	high (STR_84| (0+32768))
  7847  2479  00AF               	movwf	OLED_print_xy@s+1
  7848  247A  3000               	movlw	0
  7849  247B  31B3  2324  31A3   	fcall	_OLED_print_xy
  7850                           
  7851                           ;error.c: 88:   OLED_print_xy(0, 1, "error code  ");
  7852  247E  0140               	movlb	0	; select bank0
  7853  247F  01AD               	clrf	OLED_print_xy@row
  7854  2480  0AAD               	incf	OLED_print_xy@row,f
  7855  2481  3028               	movlw	low (STR_85| (0+32768))
  7856  2482  00AE               	movwf	OLED_print_xy@s
  7857  2483  30B9               	movlw	high (STR_85| (0+32768))
  7858  2484  00AF               	movwf	OLED_print_xy@s+1
  7859  2485  3000               	movlw	0
  7860  2486  31B3  2324  31A3   	fcall	_OLED_print_xy
  7861                           
  7862                           ;error.c: 89:  }
  7863  2489  2CB6               	goto	l9332
  7864  248A                     l9330:	
  7865  248A  0140               	movlb	0	; select bank0
  7866  248B  0838               	movf	viewErrorMessage@errorCode,w
  7867  248C  00B6               	movwf	??_viewErrorMessage
  7868  248D  01B7               	clrf	??_viewErrorMessage+1
  7869                           
  7870                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7871                           ; Switch size 1, requested type "simple"
  7872                           ; Number of cases is 1, Range of values is 0 to 0
  7873                           ; switch strategies available:
  7874                           ; Name         Instructions Cycles
  7875                           ; simple_byte            4     3 (average)
  7876                           ; direct_byte            8     6 (fixed)
  7877                           ; jumptable            260     6 (fixed)
  7878                           ;	Chosen strategy is simple_byte
  7879  248E  0837               	movf	??_viewErrorMessage+1,w
  7880  248F  3A00               	xorlw	0	; case 0
  7881  2490  1903               	skipnz
  7882  2491  2C93               	goto	l9574
  7883  2492  2C75               	goto	l9328
  7884  2493                     l9574:	
  7885                           
  7886                           ; Switch size 1, requested type "simple"
  7887                           ; Number of cases is 11, Range of values is 1 to 11
  7888                           ; switch strategies available:
  7889                           ; Name         Instructions Cycles
  7890                           ; direct_byte           31     9 (fixed)
  7891                           ; simple_byte           34    18 (average)
  7892                           ; jumptable            263     9 (fixed)
  7893                           ;	Chosen strategy is simple_byte
  7894  2493  0836               	movf	??_viewErrorMessage,w
  7895  2494  3A01               	xorlw	1	; case 1
  7896  2495  1903               	skipnz
  7897  2496  2B86               	goto	l9302
  7898  2497  3A03               	xorlw	3	; case 2
  7899  2498  1903               	skipnz
  7900  2499  2B9B               	goto	l9304
  7901  249A  3A01               	xorlw	1	; case 3
  7902  249B  1903               	skipnz
  7903  249C  2BB0               	goto	l9306
  7904  249D  3A07               	xorlw	7	; case 4
  7905  249E  1903               	skipnz
  7906  249F  2BC5               	goto	l9308
  7907  24A0  3A01               	xorlw	1	; case 5
  7908  24A1  1903               	skipnz
  7909  24A2  2BDA               	goto	l9310
  7910  24A3  3A03               	xorlw	3	; case 6
  7911  24A4  1903               	skipnz
  7912  24A5  2BEF               	goto	l9312
  7913  24A6  3A01               	xorlw	1	; case 7
  7914  24A7  1903               	skipnz
  7915  24A8  2C04               	goto	l9314
  7916  24A9  3A0F               	xorlw	15	; case 8
  7917  24AA  1903               	skipnz
  7918  24AB  2C19               	goto	l9316
  7919  24AC  3A01               	xorlw	1	; case 9
  7920  24AD  1903               	skipnz
  7921  24AE  2C2E               	goto	l9318
  7922  24AF  3A03               	xorlw	3	; case 10
  7923  24B0  1903               	skipnz
  7924  24B1  2C43               	goto	l9320
  7925  24B2  3A01               	xorlw	1	; case 11
  7926  24B3  1903               	skipnz
  7927  24B4  2C60               	goto	l9326
  7928  24B5  2C75               	goto	l9328
  7929  24B6                     l9332:	
  7930                           
  7931                           ;error.c: 91:  if (getPB() == PB_SHORT) {
  7932  24B6  31B1  212C  31A3   	fcall	_getPB
  7933  24B9  3A01               	xorlw	1
  7934  24BA  1D03               	skipz
  7935  24BB  2CD4               	goto	l9338
  7936                           
  7937                           ;error.c: 92:   if (head != tail)
  7938  24BC  0142               	movlb	2	; select bank2
  7939  24BD  0865               	movf	_head^(0+256),w
  7940  24BE  067C               	xorwf	_tail,w
  7941  24BF  1903               	skipnz
  7942  24C0  2CD4               	goto	l9338
  7943                           
  7944                           ;error.c: 93:    tail = (tail + 1) % 10;
  7945  24C1  300A               	movlw	10
  7946  24C2  0140               	movlb	0	; select bank0
  7947  24C3  00A0               	movwf	___awmod@divisor
  7948  24C4  3000               	movlw	0
  7949  24C5  00A1               	movwf	___awmod@divisor+1
  7950  24C6  087C               	movf	_tail,w
  7951  24C7  3E01               	addlw	1
  7952  24C8  00A2               	movwf	___awmod@dividend
  7953  24C9  3000               	movlw	0
  7954  24CA  1803               	skipnc
  7955  24CB  3001               	movlw	1
  7956  24CC  00A3               	movwf	___awmod@dividend+1
  7957  24CD  31B4  24DE         	fcall	___awmod
  7958  24CF  0140               	movlb	0	; select bank0
  7959  24D0  0820               	movf	?___awmod,w
  7960  24D1  00B6               	movwf	??_viewErrorMessage
  7961  24D2  0836               	movf	??_viewErrorMessage,w
  7962  24D3  00FC               	movwf	_tail
  7963  24D4                     l9338:	
  7964                           
  7965                           ;error.c: 96:  g_screenRefresh = 1;
  7966  24D4  0141               	movlb	1	; select bank1
  7967  24D5  01ED               	clrf	_g_screenRefresh^(0+128)
  7968  24D6  0AED               	incf	_g_screenRefresh^(0+128),f
  7969  24D7  0008               	return
  7970  24D8                     __end_of_viewErrorMessage:	
  7971                           
  7972                           	psect	text2
  7973  1C62                     __ptext2:	
  7974 ;; *************** function _systemCheck *****************
  7975 ;; Defined at:
  7976 ;;		line 137 in file "system.c"
  7977 ;; Parameters:    Size  Location     Type
  7978 ;;		None
  7979 ;; Auto vars:     Size  Location     Type
  7980 ;;  str             3   29[BANK1 ] unsigned char [3]
  7981 ;;  n               1   32[BANK1 ] unsigned char 
  7982 ;; Return value:  Size  Location     Type
  7983 ;;                  1    wreg      void 
  7984 ;; Registers used:
  7985 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7986 ;; Tracked objects:
  7987 ;;		On entry : 0/0
  7988 ;;		On exit  : 0/0
  7989 ;;		Unchanged: 0/0
  7990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7992 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7993 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7994 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7995 ;;Total ram usage:        8 bytes
  7996 ;; Hardware stack levels used:    1
  7997 ;; Hardware stack levels required when called:    7
  7998 ;; This function calls:
  7999 ;;		_OLED_command
  8000 ;;		_OLED_off
  8001 ;;		_OLED_print_xy
  8002 ;;		___fldiv
  8003 ;;		___flge
  8004 ;;		___flmul
  8005 ;;		___xxtofl
  8006 ;;		_error
  8007 ;;		_getAnalogValue
  8008 ;;		_itoa
  8009 ;;		_setChannelSwitch
  8010 ;; This function is called by:
  8011 ;;		_main
  8012 ;; This function uses a non-reentrant model
  8013 ;;
  8014                           
  8015                           
  8016                           ;psect for function _systemCheck
  8017  1C62                     _systemCheck:	
  8018                           
  8019                           ;system.c: 139:  uint8_t n;;system.c: 140:  char str[3];;system.c: 144:  if (data.curren
      +                          t > 3.5) {
  8020                           
  8021                           ;incstack = 0
  8022                           ; Regs used in _systemCheck: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8023  1C62  3040               	movlw	64
  8024  1C63  0141               	movlb	1	; select bank1
  8025  1C64  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8026  1C65  3060               	movlw	96
  8027  1C66  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8028  1C67  3000               	movlw	0
  8029  1C68  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8030  1C69  3000               	movlw	0
  8031  1C6A  00AD               	movwf	___flge@ff1^(0+128)
  8032  1C6B  304A               	movlw	74
  8033  1C6C  0086               	movwf	6
  8034  1C6D  3027               	movlw	39
  8035  1C6E  0087               	movwf	7
  8036  1C6F  3155               	addfsr 1,21
  8037  1C70  3F40               	moviw [0]fsr1
  8038  1C71  00B1               	movwf	___flge@ff2^(0+128)
  8039  1C72  3F41               	moviw [1]fsr1
  8040  1C73  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8041  1C74  3F42               	moviw [2]fsr1
  8042  1C75  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8043  1C76  3F43               	moviw [3]fsr1
  8044  1C77  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8045  1C78  31AA  2227  319C   	fcall	___flge
  8046  1C7B  1803               	btfsc	3,0
  8047  1C7C  2CFE               	goto	l8906
  8048                           
  8049                           ;system.c: 146:   setChannelSwitch(255, 0);
  8050  1C7D  0140               	movlb	0	; select bank0
  8051  1C7E  01AD               	clrf	setChannelSwitch@state
  8052  1C7F  30FF               	movlw	255
  8053  1C80  31B5  256B  319C   	fcall	_setChannelSwitch
  8054                           
  8055                           ;system.c: 147:   LATCbits.LATC3 = 0;
  8056  1C83  0140               	movlb	0	; select bank0
  8057  1C84  119A               	bcf	26,3	;volatile
  8058                           
  8059                           ;system.c: 149:   if (( (getAnalogValue(0b010001) * 5.0) / (1023.0 * 0.05 * 50.0) ) > 3.
      +                          5) {
  8060  1C85  3040               	movlw	64
  8061  1C86  0141               	movlb	1	; select bank1
  8062  1C87  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8063  1C88  3060               	movlw	96
  8064  1C89  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8065  1C8A  3000               	movlw	0
  8066  1C8B  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8067  1C8C  3000               	movlw	0
  8068  1C8D  00AD               	movwf	___flge@ff1^(0+128)
  8069  1C8E  3045               	movlw	69
  8070  1C8F  0140               	movlb	0	; select bank0
  8071  1C90  00DE               	movwf	___fldiv@a+3
  8072  1C91  301F               	movlw	31
  8073  1C92  00DD               	movwf	___fldiv@a+2
  8074  1C93  30D8               	movlw	216
  8075  1C94  00DC               	movwf	___fldiv@a+1
  8076  1C95  3000               	movlw	0
  8077  1C96  00DB               	movwf	___fldiv@a
  8078  1C97  3040               	movlw	64
  8079  1C98  00C4               	movwf	___flmul@b+3
  8080  1C99  30A0               	movlw	160
  8081  1C9A  00C3               	movwf	___flmul@b+2
  8082  1C9B  3000               	movlw	0
  8083  1C9C  00C2               	movwf	___flmul@b+1
  8084  1C9D  3000               	movlw	0
  8085  1C9E  00C1               	movwf	___flmul@b
  8086  1C9F  3011               	movlw	17
  8087  1CA0  31B1  217D  319C   	fcall	_getAnalogValue
  8088  1CA3  0140               	movlb	0	; select bank0
  8089  1CA4  0820               	movf	?_getAnalogValue,w
  8090  1CA5  0141               	movlb	1	; select bank1
  8091  1CA6  00B9               	movwf	??_systemCheck^(0+128)
  8092  1CA7  0140               	movlb	0	; select bank0
  8093  1CA8  0821               	movf	?_getAnalogValue+1,w
  8094  1CA9  0141               	movlb	1	; select bank1
  8095  1CAA  00BA               	movwf	(??_systemCheck^(0+128)+1)
  8096  1CAB  01BB               	clrf	(??_systemCheck^(0+128)+2)
  8097  1CAC  01BC               	clrf	(??_systemCheck^(0+128)+3)
  8098  1CAD  083C               	movf	(??_systemCheck+3)^(0+128),w
  8099  1CAE  0140               	movlb	0	; select bank0
  8100  1CAF  00B6               	movwf	___xxtofl@val+3
  8101  1CB0  0141               	movlb	1	; select bank1
  8102  1CB1  083B               	movf	(??_systemCheck+2)^(0+128),w
  8103  1CB2  0140               	movlb	0	; select bank0
  8104  1CB3  00B5               	movwf	___xxtofl@val+2
  8105  1CB4  0141               	movlb	1	; select bank1
  8106  1CB5  083A               	movf	(??_systemCheck+1)^(0+128),w
  8107  1CB6  0140               	movlb	0	; select bank0
  8108  1CB7  00B4               	movwf	___xxtofl@val+1
  8109  1CB8  0141               	movlb	1	; select bank1
  8110  1CB9  0839               	movf	??_systemCheck^(0+128),w
  8111  1CBA  0140               	movlb	0	; select bank0
  8112  1CBB  00B3               	movwf	___xxtofl@val
  8113  1CBC  3000               	movlw	0
  8114  1CBD  31AC  2430  319C   	fcall	___xxtofl
  8115  1CC0  0140               	movlb	0	; select bank0
  8116  1CC1  0836               	movf	?___xxtofl+3,w
  8117  1CC2  00C8               	movwf	___flmul@a+3
  8118  1CC3  0835               	movf	?___xxtofl+2,w
  8119  1CC4  00C7               	movwf	___flmul@a+2
  8120  1CC5  0834               	movf	?___xxtofl+1,w
  8121  1CC6  00C6               	movwf	___flmul@a+1
  8122  1CC7  0833               	movf	?___xxtofl,w
  8123  1CC8  00C5               	movwf	___flmul@a
  8124  1CC9  3185  2561  319C   	fcall	___flmul
  8125  1CCC  0140               	movlb	0	; select bank0
  8126  1CCD  0844               	movf	?___flmul+3,w
  8127  1CCE  00E2               	movwf	___fldiv@b+3
  8128  1CCF  0843               	movf	?___flmul+2,w
  8129  1CD0  00E1               	movwf	___fldiv@b+2
  8130  1CD1  0842               	movf	?___flmul+1,w
  8131  1CD2  00E0               	movwf	___fldiv@b+1
  8132  1CD3  0841               	movf	?___flmul,w
  8133  1CD4  00DF               	movwf	___fldiv@b
  8134  1CD5  319E  2628  319C   	fcall	___fldiv
  8135  1CD8  0140               	movlb	0	; select bank0
  8136  1CD9  085E               	movf	?___fldiv+3,w
  8137  1CDA  0141               	movlb	1	; select bank1
  8138  1CDB  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8139  1CDC  0140               	movlb	0	; select bank0
  8140  1CDD  085D               	movf	?___fldiv+2,w
  8141  1CDE  0141               	movlb	1	; select bank1
  8142  1CDF  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8143  1CE0  0140               	movlb	0	; select bank0
  8144  1CE1  085C               	movf	?___fldiv+1,w
  8145  1CE2  0141               	movlb	1	; select bank1
  8146  1CE3  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8147  1CE4  0140               	movlb	0	; select bank0
  8148  1CE5  085B               	movf	?___fldiv,w
  8149  1CE6  0141               	movlb	1	; select bank1
  8150  1CE7  00B1               	movwf	___flge@ff2^(0+128)
  8151  1CE8  31AA  2227  319C   	fcall	___flge
  8152  1CEB  1803               	btfsc	3,0
  8153  1CEC  2CEF               	goto	l8900
  8154                           
  8155                           ;system.c: 152:    error(ERR_NUKED);
  8156  1CED  3009               	movlw	9
  8157  1CEE  2CFB               	goto	L1
  8158  1CEF                     l8900:	
  8159                           ;system.c: 153:   } else {
  8160                           
  8161                           
  8162                           ;system.c: 155:    if (! data.status.OVERCURRENT) {
  8163  1CEF  3073               	movlw	115
  8164  1CF0  0086               	movwf	6
  8165  1CF1  3027               	movlw	39
  8166  1CF2  0087               	movwf	7
  8167  1CF3  1901               	btfsc	1,2
  8168  1CF4  2CFE               	goto	l8906
  8169                           
  8170                           ;system.c: 156:     data.status.OVERCURRENT = 1;
  8171  1CF5  3073               	movlw	115
  8172  1CF6  0086               	movwf	6
  8173  1CF7  3027               	movlw	39
  8174  1CF8  0087               	movwf	7
  8175  1CF9  1501               	bsf	1,2
  8176                           
  8177                           ;system.c: 157:     error(ERR_OVERCURRENT);
  8178  1CFA  300A               	movlw	10
  8179  1CFB                     L1:	
  8180  1CFB  31B4  245E  319C   	fcall	_error
  8181  1CFE                     l8906:	
  8182                           
  8183                           ;system.c: 167:  if ((data.voltage > 13.8) || (data.voltage <= 11.0)) {
  8184  1CFE  3041               	movlw	65
  8185  1CFF  0141               	movlb	1	; select bank1
  8186  1D00  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8187  1D01  305C               	movlw	92
  8188  1D02  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8189  1D03  30CC               	movlw	204
  8190  1D04  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8191  1D05  30CD               	movlw	205
  8192  1D06  00AD               	movwf	___flge@ff1^(0+128)
  8193  1D07  304A               	movlw	74
  8194  1D08  0086               	movwf	6
  8195  1D09  3027               	movlw	39
  8196  1D0A  0087               	movwf	7
  8197  1D0B  3151               	addfsr 1,17
  8198  1D0C  3F40               	moviw [0]fsr1
  8199  1D0D  00B1               	movwf	___flge@ff2^(0+128)
  8200  1D0E  3F41               	moviw [1]fsr1
  8201  1D0F  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8202  1D10  3F42               	moviw [2]fsr1
  8203  1D11  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8204  1D12  3F43               	moviw [3]fsr1
  8205  1D13  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8206  1D14  31AA  2227  319C   	fcall	___flge
  8207  1D17  1C03               	btfss	3,0
  8208  1D18  2D34               	goto	l8910
  8209  1D19  3041               	movlw	65
  8210  1D1A  0141               	movlb	1	; select bank1
  8211  1D1B  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8212  1D1C  3030               	movlw	48
  8213  1D1D  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8214  1D1E  3000               	movlw	0
  8215  1D1F  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8216  1D20  3000               	movlw	0
  8217  1D21  00AD               	movwf	___flge@ff1^(0+128)
  8218  1D22  304A               	movlw	74
  8219  1D23  0086               	movwf	6
  8220  1D24  3027               	movlw	39
  8221  1D25  0087               	movwf	7
  8222  1D26  3151               	addfsr 1,17
  8223  1D27  3F40               	moviw [0]fsr1
  8224  1D28  00B1               	movwf	___flge@ff2^(0+128)
  8225  1D29  3F41               	moviw [1]fsr1
  8226  1D2A  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8227  1D2B  3F42               	moviw [2]fsr1
  8228  1D2C  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8229  1D2D  3F43               	moviw [3]fsr1
  8230  1D2E  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8231  1D2F  31AA  2227  319C   	fcall	___flge
  8232  1D32  1C03               	btfss	3,0
  8233  1D33  2D93               	goto	l8944
  8234  1D34                     l8910:	
  8235                           
  8236                           ;system.c: 168:   INTCON = 0;
  8237  1D34  018B               	clrf	11	;volatile
  8238                           
  8239                           ;system.c: 169:   OLED_command(0x01);
  8240  1D35  3001               	movlw	1
  8241  1D36  31B1  2102  319C   	fcall	_OLED_command
  8242                           
  8243                           ;system.c: 170:   OLED_command(0x02);
  8244  1D39  3002               	movlw	2
  8245  1D3A  31B1  2102  319C   	fcall	_OLED_command
  8246                           
  8247                           ;system.c: 171:   OLED_print_xy(0, 0, "TURNING OFF");
  8248  1D3D  0140               	movlb	0	; select bank0
  8249  1D3E  01AD               	clrf	OLED_print_xy@row
  8250  1D3F  3087               	movlw	low (STR_86| (0+32768))
  8251  1D40  00AE               	movwf	OLED_print_xy@s
  8252  1D41  30BA               	movlw	high (STR_86| (0+32768))
  8253  1D42  00AF               	movwf	OLED_print_xy@s+1
  8254  1D43  3000               	movlw	0
  8255  1D44  31B3  2324  319C   	fcall	_OLED_print_xy
  8256                           
  8257                           ;system.c: 172:   setChannelSwitch(255, 0);
  8258  1D47  0140               	movlb	0	; select bank0
  8259  1D48  01AD               	clrf	setChannelSwitch@state
  8260  1D49  30FF               	movlw	255
  8261  1D4A  31B5  256B  319C   	fcall	_setChannelSwitch
  8262                           
  8263                           ;system.c: 173:   LATCbits.LATC3 = 0;
  8264  1D4D  0140               	movlb	0	; select bank0
  8265  1D4E  119A               	bcf	26,3	;volatile
  8266                           
  8267                           ;system.c: 174:   for(n = 5; n > 0; n--) {
  8268  1D4F  3005               	movlw	5
  8269  1D50  0141               	movlb	1	; select bank1
  8270  1D51  00B9               	movwf	??_systemCheck^(0+128)
  8271  1D52  0839               	movf	??_systemCheck^(0+128),w
  8272  1D53  00C0               	movwf	systemCheck@n^(0+128)
  8273  1D54                     l8928:	
  8274                           
  8275                           ;system.c: 175:    itoa(str, n, 1);
  8276  1D54  30BD               	movlw	low systemCheck@str
  8277  1D55  0140               	movlb	0	; select bank0
  8278  1D56  00A9               	movwf	itoa@str
  8279  1D57  3000               	movlw	high systemCheck@str
  8280  1D58  00AA               	movwf	itoa@str+1
  8281  1D59  0141               	movlb	1	; select bank1
  8282  1D5A  0840               	movf	systemCheck@n^(0+128),w
  8283  1D5B  00B9               	movwf	??_systemCheck^(0+128)
  8284  1D5C  0839               	movf	??_systemCheck^(0+128),w
  8285  1D5D  0140               	movlb	0	; select bank0
  8286  1D5E  00AB               	movwf	itoa@value
  8287  1D5F  01AC               	clrf	itoa@width
  8288  1D60  0AAC               	incf	itoa@width,f
  8289  1D61  31B6  26D8  319C   	fcall	_itoa
  8290                           
  8291                           ;system.c: 176:    OLED_print_xy(0, 1, "IN ");
  8292  1D64  0140               	movlb	0	; select bank0
  8293  1D65  01AD               	clrf	OLED_print_xy@row
  8294  1D66  0AAD               	incf	OLED_print_xy@row,f
  8295  1D67  3019               	movlw	low (STR_87| (0+32768))
  8296  1D68  00AE               	movwf	OLED_print_xy@s
  8297  1D69  30BB               	movlw	high (STR_87| (0+32768))
  8298  1D6A  00AF               	movwf	OLED_print_xy@s+1
  8299  1D6B  3000               	movlw	0
  8300  1D6C  31B3  2324  319C   	fcall	_OLED_print_xy
  8301                           
  8302                           ;system.c: 177:    OLED_print_xy(3, 1, str);
  8303  1D6F  0140               	movlb	0	; select bank0
  8304  1D70  01AD               	clrf	OLED_print_xy@row
  8305  1D71  0AAD               	incf	OLED_print_xy@row,f
  8306  1D72  30BD               	movlw	low systemCheck@str
  8307  1D73  00AE               	movwf	OLED_print_xy@s
  8308  1D74  3000               	movlw	high systemCheck@str
  8309  1D75  00AF               	movwf	OLED_print_xy@s+1
  8310  1D76  3003               	movlw	3
  8311  1D77  31B3  2324  319C   	fcall	_OLED_print_xy
  8312                           
  8313                           ;system.c: 178:    _delay((unsigned long)((1000)*(4000000UL/4000.0)));
  8314  1D7A  3006               	movlw	6
  8315  1D7B  0141               	movlb	1	; select bank1
  8316  1D7C  00BA               	movwf	(??_systemCheck^(0+128)+1)
  8317  1D7D  3013               	movlw	19
  8318  1D7E  00B9               	movwf	??_systemCheck^(0+128)
  8319  1D7F  30AD               	movlw	173
  8320  1D80                     u10877:	
  8321  1D80  0B89               	decfsz	9,f
  8322  1D81  2D80               	goto	u10877
  8323  1D82  0BB9               	decfsz	??_systemCheck^(0+128),f
  8324  1D83  2D80               	goto	u10877
  8325  1D84  0BBA               	decfsz	(??_systemCheck^(0+128)+1),f
  8326  1D85  2D80               	goto	u10877
  8327  1D86  3200               	nop2
  8328                           
  8329                           ;system.c: 179:   }
  8330  1D87  3001               	movlw	1
  8331  1D88  0141               	movlb	1	; select bank1
  8332  1D89  02C0               	subwf	systemCheck@n^(0+128),f
  8333  1D8A  0840               	movf	systemCheck@n^(0+128),w
  8334  1D8B  1D03               	btfss	3,2
  8335  1D8C  2D54               	goto	l8928
  8336                           
  8337                           ;system.c: 180:   OLED_off();
  8338  1D8D  31B0  20FA  319C   	fcall	_OLED_off
  8339                           
  8340                           ;system.c: 181:   LATBbits.LATB5 = 0;
  8341  1D90  0140               	movlb	0	; select bank0
  8342  1D91  1299               	bcf	25,5	;volatile
  8343  1D92                     l838:	
  8344                           ;system.c: 183:   while(1);
  8345                           
  8346  1D92  2D92               	goto	l838
  8347  1D93                     l8944:	
  8348  1D93  3041               	movlw	65
  8349  1D94  0141               	movlb	1	; select bank1
  8350  1D95  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8351  1D96  3050               	movlw	80
  8352  1D97  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8353  1D98  3000               	movlw	0
  8354  1D99  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8355  1D9A  3000               	movlw	0
  8356  1D9B  00AD               	movwf	___flge@ff1^(0+128)
  8357  1D9C  304A               	movlw	74
  8358  1D9D  0086               	movwf	6
  8359  1D9E  3027               	movlw	39
  8360  1D9F  0087               	movwf	7
  8361  1DA0  3151               	addfsr 1,17
  8362  1DA1  3F40               	moviw [0]fsr1
  8363  1DA2  00B1               	movwf	___flge@ff2^(0+128)
  8364  1DA3  3F41               	moviw [1]fsr1
  8365  1DA4  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8366  1DA5  3F42               	moviw [2]fsr1
  8367  1DA6  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8368  1DA7  3F43               	moviw [3]fsr1
  8369  1DA8  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8370  1DA9  31AA  2227  319C   	fcall	___flge
  8371  1DAC  1803               	btfsc	3,0
  8372  1DAD  2DD8               	goto	l8954
  8373  1DAE  3041               	movlw	65
  8374  1DAF  0141               	movlb	1	; select bank1
  8375  1DB0  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8376  1DB1  305C               	movlw	92
  8377  1DB2  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8378  1DB3  30CC               	movlw	204
  8379  1DB4  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8380  1DB5  30CD               	movlw	205
  8381  1DB6  00AD               	movwf	___flge@ff1^(0+128)
  8382  1DB7  304A               	movlw	74
  8383  1DB8  0086               	movwf	6
  8384  1DB9  3027               	movlw	39
  8385  1DBA  0087               	movwf	7
  8386  1DBB  3151               	addfsr 1,17
  8387  1DBC  3F40               	moviw [0]fsr1
  8388  1DBD  00B1               	movwf	___flge@ff2^(0+128)
  8389  1DBE  3F41               	moviw [1]fsr1
  8390  1DBF  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8391  1DC0  3F42               	moviw [2]fsr1
  8392  1DC1  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8393  1DC2  3F43               	moviw [3]fsr1
  8394  1DC3  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8395  1DC4  31AA  2227  319C   	fcall	___flge
  8396  1DC7  1C03               	btfss	3,0
  8397  1DC8  2DD8               	goto	l8954
  8398                           
  8399                           ;system.c: 186:   if (! data.status.BAT_HIGH) {
  8400  1DC9  3073               	movlw	115
  8401  1DCA  0086               	movwf	6
  8402  1DCB  3027               	movlw	39
  8403  1DCC  0087               	movwf	7
  8404  1DCD  1881               	btfsc	1,1
  8405  1DCE  0008               	return
  8406                           
  8407                           ;system.c: 187:    data.status.BAT_HIGH = 1;
  8408  1DCF  3073               	movlw	115
  8409  1DD0  0086               	movwf	6
  8410  1DD1  3027               	movlw	39
  8411  1DD2  0087               	movwf	7
  8412  1DD3  1481               	bsf	1,1
  8413                           
  8414                           ;system.c: 188:    error(WARN_VOLT_HIGH);
  8415  1DD4  3005               	movlw	5
  8416  1DD5  31B4  245E         	fcall	_error
  8417  1DD7  0008               	return
  8418  1DD8                     l8954:	
  8419  1DD8  3041               	movlw	65
  8420  1DD9  0141               	movlb	1	; select bank1
  8421  1DDA  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8422  1DDB  3030               	movlw	48
  8423  1DDC  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8424  1DDD  3000               	movlw	0
  8425  1DDE  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8426  1DDF  3000               	movlw	0
  8427  1DE0  00AD               	movwf	___flge@ff1^(0+128)
  8428  1DE1  304A               	movlw	74
  8429  1DE2  0086               	movwf	6
  8430  1DE3  3027               	movlw	39
  8431  1DE4  0087               	movwf	7
  8432  1DE5  3151               	addfsr 1,17
  8433  1DE6  3F40               	moviw [0]fsr1
  8434  1DE7  00B1               	movwf	___flge@ff2^(0+128)
  8435  1DE8  3F41               	moviw [1]fsr1
  8436  1DE9  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8437  1DEA  3F42               	moviw [2]fsr1
  8438  1DEB  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8439  1DEC  3F43               	moviw [3]fsr1
  8440  1DED  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8441  1DEE  31AA  2227  319C   	fcall	___flge
  8442  1DF1  1803               	btfsc	3,0
  8443  1DF2  2E1D               	goto	l8964
  8444  1DF3  3041               	movlw	65
  8445  1DF4  0141               	movlb	1	; select bank1
  8446  1DF5  00B0               	movwf	(___flge@ff1+3)^(0+128)
  8447  1DF6  3036               	movlw	54
  8448  1DF7  00AF               	movwf	(___flge@ff1+2)^(0+128)
  8449  1DF8  3066               	movlw	102
  8450  1DF9  00AE               	movwf	(___flge@ff1+1)^(0+128)
  8451  1DFA  3066               	movlw	102
  8452  1DFB  00AD               	movwf	___flge@ff1^(0+128)
  8453  1DFC  304A               	movlw	74
  8454  1DFD  0086               	movwf	6
  8455  1DFE  3027               	movlw	39
  8456  1DFF  0087               	movwf	7
  8457  1E00  3151               	addfsr 1,17
  8458  1E01  3F40               	moviw [0]fsr1
  8459  1E02  00B1               	movwf	___flge@ff2^(0+128)
  8460  1E03  3F41               	moviw [1]fsr1
  8461  1E04  00B2               	movwf	(___flge@ff2+1)^(0+128)
  8462  1E05  3F42               	moviw [2]fsr1
  8463  1E06  00B3               	movwf	(___flge@ff2+2)^(0+128)
  8464  1E07  3F43               	moviw [3]fsr1
  8465  1E08  00B4               	movwf	(___flge@ff2+3)^(0+128)
  8466  1E09  31AA  2227  319C   	fcall	___flge
  8467  1E0C  1C03               	btfss	3,0
  8468  1E0D  2E1D               	goto	l8964
  8469                           
  8470                           ;system.c: 191:   if (! data.status.BAT_LOW) {
  8471  1E0E  3073               	movlw	115
  8472  1E0F  0086               	movwf	6
  8473  1E10  3027               	movlw	39
  8474  1E11  0087               	movwf	7
  8475  1E12  1801               	btfsc	1,0
  8476  1E13  0008               	return
  8477                           
  8478                           ;system.c: 192:    data.status.BAT_LOW = 1;
  8479  1E14  3073               	movlw	115
  8480  1E15  0086               	movwf	6
  8481  1E16  3027               	movlw	39
  8482  1E17  0087               	movwf	7
  8483  1E18  1401               	bsf	1,0
  8484                           
  8485                           ;system.c: 193:    error(WARN_VOLT_LOW);
  8486  1E19  3006               	movlw	6
  8487  1E1A  31B4  245E         	fcall	_error
  8488  1E1C  0008               	return
  8489  1E1D                     l8964:	
  8490                           
  8491                           ;system.c: 196:   data.status.BAT_HIGH = 0;
  8492  1E1D  3073               	movlw	115
  8493  1E1E  0086               	movwf	6
  8494  1E1F  3027               	movlw	39
  8495  1E20  0087               	movwf	7
  8496  1E21  1081               	bcf	1,1
  8497                           
  8498                           ;system.c: 197:   data.status.BAT_LOW = 0;
  8499  1E22  3073               	movlw	115
  8500  1E23  0086               	movwf	6
  8501  1E24  3027               	movlw	39
  8502  1E25  0087               	movwf	7
  8503  1E26  1001               	bcf	1,0
  8504  1E27  0008               	return
  8505  1E28                     __end_of_systemCheck:	
  8506                           
  8507                           	psect	text3
  8508  30FA                     __ptext3:	
  8509 ;; *************** function _OLED_off *****************
  8510 ;; Defined at:
  8511 ;;		line 12 in file "oled.c"
  8512 ;; Parameters:    Size  Location     Type
  8513 ;;		None
  8514 ;; Auto vars:     Size  Location     Type
  8515 ;;		None
  8516 ;; Return value:  Size  Location     Type
  8517 ;;                  1    wreg      void 
  8518 ;; Registers used:
  8519 ;;		wreg, status,2, status,0, pclath, cstack
  8520 ;; Tracked objects:
  8521 ;;		On entry : 0/0
  8522 ;;		On exit  : 0/0
  8523 ;;		Unchanged: 0/0
  8524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8528 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8529 ;;Total ram usage:        0 bytes
  8530 ;; Hardware stack levels used:    1
  8531 ;; Hardware stack levels required when called:    6
  8532 ;; This function calls:
  8533 ;;		_OLED_command
  8534 ;; This function is called by:
  8535 ;;		_systemCheck
  8536 ;; This function uses a non-reentrant model
  8537 ;;
  8538                           
  8539                           
  8540                           ;psect for function _OLED_off
  8541  30FA                     _OLED_off:	
  8542                           
  8543                           ;oled.c: 14:  OLED_command(0x08);
  8544                           
  8545                           ;incstack = 0
  8546                           ; Regs used in _OLED_off: [wreg+status,2+status,0+pclath+cstack]
  8547  30FA  3008               	movlw	8
  8548  30FB  31B1  2102  31B0   	fcall	_OLED_command
  8549                           
  8550                           ;oled.c: 15:  OLED_command(0x13);
  8551  30FE  3013               	movlw	19
  8552  30FF  31B1  2102         	fcall	_OLED_command
  8553  3101  0008               	return
  8554  3102                     __end_of_OLED_off:	
  8555                           
  8556                           	psect	text4
  8557  2AA3                     __ptext4:	
  8558 ;; *************** function _readNVM *****************
  8559 ;; Defined at:
  8560 ;;		line 493 in file "system.c"
  8561 ;; Parameters:    Size  Location     Type
  8562 ;;		None
  8563 ;; Auto vars:     Size  Location     Type
  8564 ;;  buf            64    4[BANK0 ] unsigned short [32]
  8565 ;;  nvm            32    0[BANK1 ] struct .
  8566 ;;  n               1   68[BANK0 ] unsigned char 
  8567 ;; Return value:  Size  Location     Type
  8568 ;;                  1    wreg      void 
  8569 ;; Registers used:
  8570 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8571 ;; Tracked objects:
  8572 ;;		On entry : 0/0
  8573 ;;		On exit  : 0/0
  8574 ;;		Unchanged: 0/0
  8575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8577 ;;      Locals:         0      65      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8578 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8579 ;;      Totals:         0      66      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8580 ;;Total ram usage:       98 bytes
  8581 ;; Hardware stack levels used:    1
  8582 ;; Hardware stack levels required when called:    4
  8583 ;; This function calls:
  8584 ;;		_FLASH_ReadWord
  8585 ;; This function is called by:
  8586 ;;		_main
  8587 ;; This function uses a non-reentrant model
  8588 ;;
  8589                           
  8590                           
  8591                           ;psect for function _readNVM
  8592  2AA3                     _readNVM:	
  8593                           
  8594                           ;system.c: 495:  uint8_t n;;system.c: 496:  t_nvmData nvm;;system.c: 497:  uint16_t buf[
      +                          32];;system.c: 499:  for(n = 0; n < 32; n++) {
  8595                           
  8596                           ;incstack = 0
  8597                           ; Regs used in _readNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8598  2AA3  0140               	movlb	0	; select bank0
  8599  2AA4  01E4               	clrf	readNVM@n
  8600  2AA5                     l8874:	
  8601                           
  8602                           ;system.c: 500:   buf[n] = FLASH_ReadWord(0x3F80 + n);
  8603  2AA5  0864               	movf	readNVM@n,w
  8604  2AA6  3E80               	addlw	128
  8605  2AA7  00A0               	movwf	FLASH_ReadWord@flashAddr
  8606  2AA8  303F               	movlw	63
  8607  2AA9  1803               	skipnc
  8608  2AAA  3040               	movlw	64
  8609  2AAB  00A1               	movwf	FLASH_ReadWord@flashAddr+1
  8610  2AAC  31B1  21DA  31AA   	fcall	_FLASH_ReadWord
  8611  2AAF  0140               	movlb	0	; select bank0
  8612  2AB0  3564               	lslf	readNVM@n,w
  8613  2AB1  3E24               	addlw	(low (readNVM@buf| 0))& (0+255)
  8614  2AB2  0086               	movwf	6
  8615  2AB3  0187               	clrf	7
  8616  2AB4  0820               	movf	?_FLASH_ReadWord,w
  8617  2AB5  3FC0               	movwi [0]fsr1
  8618  2AB6  0821               	movf	?_FLASH_ReadWord+1,w
  8619  2AB7  3FC1               	movwi [1]fsr1
  8620                           
  8621                           ;system.c: 501:   nvm.raw[n] = (uint8_t)(buf[n] & 0x00ff);
  8622  2AB8  3564               	lslf	readNVM@n,w
  8623  2AB9  3E24               	addlw	(low (readNVM@buf| 0))& (0+255)
  8624  2ABA  0086               	movwf	6
  8625  2ABB  0187               	clrf	7
  8626  2ABC  0801               	movf	1,w
  8627  2ABD  00A3               	movwf	??_readNVM
  8628  2ABE  0864               	movf	readNVM@n,w
  8629  2ABF  3EA0               	addlw	(low (readNVM@nvm| 0))& (0+255)
  8630  2AC0  0086               	movwf	6
  8631  2AC1  0187               	clrf	7
  8632  2AC2  0823               	movf	??_readNVM,w
  8633  2AC3  0081               	movwf	1
  8634                           
  8635                           ;system.c: 502:  }
  8636  2AC4  3001               	movlw	1
  8637  2AC5  00A3               	movwf	??_readNVM
  8638  2AC6  0823               	movf	??_readNVM,w
  8639  2AC7  07E4               	addwf	readNVM@n,f
  8640  2AC8  3020               	movlw	32
  8641  2AC9  0264               	subwf	readNVM@n,w
  8642  2ACA  1C03               	skipc
  8643  2ACB  2AA5               	goto	l8874
  8644                           
  8645                           ;system.c: 504:  data.heater[0].lensDia = nvm.lensDia[0];
  8646  2ACC  3089               	movlw	137
  8647  2ACD  0086               	movwf	6
  8648  2ACE  3027               	movlw	39
  8649  2ACF  0087               	movwf	7
  8650  2AD0  0141               	movlb	1	; select bank1
  8651  2AD1  0820               	movf	readNVM@nvm^(0+128),w
  8652  2AD2  3FC0               	movwi [0]fsr1
  8653  2AD3  0821               	movf	(readNVM@nvm+1)^(0+128),w
  8654  2AD4  3FC1               	movwi [1]fsr1
  8655  2AD5  0822               	movf	(readNVM@nvm+2)^(0+128),w
  8656  2AD6  3FC2               	movwi [2]fsr1
  8657  2AD7  0823               	movf	(readNVM@nvm+3)^(0+128),w
  8658  2AD8  3FC3               	movwi [3]fsr1
  8659                           
  8660                           ;system.c: 505:  data.heater[1].lensDia = nvm.lensDia[1];
  8661  2AD9  30A8               	movlw	168
  8662  2ADA  0086               	movwf	6
  8663  2ADB  3027               	movlw	39
  8664  2ADC  0087               	movwf	7
  8665  2ADD  0824               	movf	(readNVM@nvm^(0+128)+4),w
  8666  2ADE  3FC0               	movwi [0]fsr1
  8667  2ADF  0825               	movf	((readNVM@nvm+1)^(0+128)+4),w
  8668  2AE0  3FC1               	movwi [1]fsr1
  8669  2AE1  0826               	movf	((readNVM@nvm+2)^(0+128)+4),w
  8670  2AE2  3FC2               	movwi [2]fsr1
  8671  2AE3  0827               	movf	((readNVM@nvm+3)^(0+128)+4),w
  8672  2AE4  3FC3               	movwi [3]fsr1
  8673                           
  8674                           ;system.c: 506:  data.heater[2].lensDia = nvm.lensDia[2];
  8675  2AE5  30C7               	movlw	199
  8676  2AE6  0086               	movwf	6
  8677  2AE7  3027               	movlw	39
  8678  2AE8  0087               	movwf	7
  8679  2AE9  0828               	movf	(readNVM@nvm^(0+128)+8),w
  8680  2AEA  3FC0               	movwi [0]fsr1
  8681  2AEB  0829               	movf	((readNVM@nvm+1)^(0+128)+8),w
  8682  2AEC  3FC1               	movwi [1]fsr1
  8683  2AED  082A               	movf	((readNVM@nvm+2)^(0+128)+8),w
  8684  2AEE  3FC2               	movwi [2]fsr1
  8685  2AEF  082B               	movf	((readNVM@nvm+3)^(0+128)+8),w
  8686  2AF0  3FC3               	movwi [3]fsr1
  8687                           
  8688                           ;system.c: 507:  data.heater[3].lensDia = nvm.lensDia[3];
  8689  2AF1  30E6               	movlw	230
  8690  2AF2  0086               	movwf	6
  8691  2AF3  3027               	movlw	39
  8692  2AF4  0087               	movwf	7
  8693  2AF5  082C               	movf	(readNVM@nvm^(0+128)+12),w
  8694  2AF6  3FC0               	movwi [0]fsr1
  8695  2AF7  082D               	movf	((readNVM@nvm+1)^(0+128)+12),w
  8696  2AF8  3FC1               	movwi [1]fsr1
  8697  2AF9  082E               	movf	((readNVM@nvm+2)^(0+128)+12),w
  8698  2AFA  3FC2               	movwi [2]fsr1
  8699  2AFB  082F               	movf	((readNVM@nvm+3)^(0+128)+12),w
  8700  2AFC  3FC3               	movwi [3]fsr1
  8701                           
  8702                           ;system.c: 508:  data.dpOffset = nvm.dpOffset;
  8703  2AFD  304A               	movlw	74
  8704  2AFE  0086               	movwf	6
  8705  2AFF  3027               	movlw	39
  8706  2B00  0087               	movwf	7
  8707  2B01  315D               	addfsr 1,29
  8708  2B02  0830               	movf	(readNVM@nvm^(0+128)+16),w
  8709  2B03  3FC0               	movwi [0]fsr1
  8710  2B04  0831               	movf	((readNVM@nvm+1)^(0+128)+16),w
  8711  2B05  3FC1               	movwi [1]fsr1
  8712  2B06  0832               	movf	((readNVM@nvm+2)^(0+128)+16),w
  8713  2B07  3FC2               	movwi [2]fsr1
  8714  2B08  0833               	movf	((readNVM@nvm+3)^(0+128)+16),w
  8715  2B09  3FC3               	movwi [3]fsr1
  8716                           
  8717                           ;system.c: 509:  data.skyTemp = nvm.skyTemp;
  8718  2B0A  306B               	movlw	107
  8719  2B0B  0086               	movwf	6
  8720  2B0C  3027               	movlw	39
  8721  2B0D  0087               	movwf	7
  8722  2B0E  0834               	movf	(readNVM@nvm^(0+128)+20),w
  8723  2B0F  3FC0               	movwi [0]fsr1
  8724  2B10  0835               	movf	((readNVM@nvm+1)^(0+128)+20),w
  8725  2B11  3FC1               	movwi [1]fsr1
  8726  2B12  0836               	movf	((readNVM@nvm+2)^(0+128)+20),w
  8727  2B13  3FC2               	movwi [2]fsr1
  8728  2B14  0837               	movf	((readNVM@nvm+3)^(0+128)+20),w
  8729  2B15  3FC3               	movwi [3]fsr1
  8730                           
  8731                           ;system.c: 510:  data.fudgeFactor = nvm.fudgeFactor;
  8732  2B16  306F               	movlw	111
  8733  2B17  0086               	movwf	6
  8734  2B18  3027               	movlw	39
  8735  2B19  0087               	movwf	7
  8736  2B1A  0838               	movf	(readNVM@nvm^(0+128)+24),w
  8737  2B1B  3FC0               	movwi [0]fsr1
  8738  2B1C  0839               	movf	((readNVM@nvm+1)^(0+128)+24),w
  8739  2B1D  3FC1               	movwi [1]fsr1
  8740  2B1E  083A               	movf	((readNVM@nvm+2)^(0+128)+24),w
  8741  2B1F  3FC2               	movwi [2]fsr1
  8742  2B20  083B               	movf	((readNVM@nvm+3)^(0+128)+24),w
  8743  2B21  3FC3               	movwi [3]fsr1
  8744  2B22  0008               	return
  8745  2B23                     __end_of_readNVM:	
  8746                           
  8747                           	psect	text5
  8748  31DA                     __ptext5:	
  8749 ;; *************** function _FLASH_ReadWord *****************
  8750 ;; Defined at:
  8751 ;;		line 8 in file "memory.c"
  8752 ;; Parameters:    Size  Location     Type
  8753 ;;  flashAddr       2    0[BANK0 ] unsigned short 
  8754 ;; Auto vars:     Size  Location     Type
  8755 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
  8756 ;; Return value:  Size  Location     Type
  8757 ;;                  2    0[BANK0 ] unsigned short 
  8758 ;; Registers used:
  8759 ;;		wreg, status,2, status,0
  8760 ;; Tracked objects:
  8761 ;;		On entry : 0/0
  8762 ;;		On exit  : 0/0
  8763 ;;		Unchanged: 0/0
  8764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8765 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8766 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8768 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8769 ;;Total ram usage:        3 bytes
  8770 ;; Hardware stack levels used:    1
  8771 ;; Hardware stack levels required when called:    3
  8772 ;; This function calls:
  8773 ;;		Nothing
  8774 ;; This function is called by:
  8775 ;;		_readNVM
  8776 ;;		_FLASH_WriteWord
  8777 ;; This function uses a non-reentrant model
  8778 ;;
  8779                           
  8780                           
  8781                           ;psect for function _FLASH_ReadWord
  8782  31DA                     _FLASH_ReadWord:	
  8783                           
  8784                           ;memory.c: 8: uint16_t FLASH_ReadWord(uint16_t flashAddr);memory.c: 9: {;memory.c: 10:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
  8785                           
  8786                           ;incstack = 0
  8787                           ; Regs used in _FLASH_ReadWord: [wreg+status,2+status,0]
  8788  31DA  3000               	movlw	0
  8789  31DB  1B8B               	btfsc	11,7	;volatile
  8790  31DC  3001               	movlw	1
  8791  31DD  0140               	movlb	0	; select bank0
  8792  31DE  00A2               	movwf	FLASH_ReadWord@GIEBitValue
  8793                           
  8794                           ;memory.c: 12:  INTCONbits.GIE = 0;
  8795  31DF  138B               	bcf	11,7	;volatile
  8796                           
  8797                           ;memory.c: 13:  NVMADRL = (flashAddr & 0x00FF);
  8798  31E0  0820               	movf	FLASH_ReadWord@flashAddr,w
  8799  31E1  0150               	movlb	16	; select bank16
  8800  31E2  009A               	movwf	26	;volatile
  8801                           
  8802                           ;memory.c: 14:  NVMADRH = ((flashAddr & 0xFF00) >> 8);
  8803  31E3  0140               	movlb	0	; select bank0
  8804  31E4  0821               	movf	FLASH_ReadWord@flashAddr+1,w
  8805  31E5  0150               	movlb	16	; select bank16
  8806  31E6  009B               	movwf	27	;volatile
  8807                           
  8808                           ;memory.c: 16:  NVMCON1bits.NVMREGS = 0;
  8809  31E7  131E               	bcf	30,6	;volsfr
  8810                           
  8811                           ;memory.c: 17:  NVMCON1bits.RD = 1;
  8812  31E8  141E               	bsf	30,0	;volsfr
  8813                           
  8814                           ;memory.c: 18:  __nop();
  8815  31E9  0000               	nop
  8816                           
  8817                           ;memory.c: 19:  __nop();
  8818  31EA  0000               	nop
  8819                           
  8820                           ;memory.c: 20:  INTCONbits.GIE = GIEBitValue;
  8821  31EB  0140               	movlb	0	; select bank0
  8822  31EC  0C22               	rrf	FLASH_ReadWord@GIEBitValue,w
  8823  31ED  1C03               	skipc
  8824  31EE  138B               	bcf	11,7	;volatile
  8825  31EF  1803               	skipnc
  8826  31F0  178B               	bsf	11,7	;volatile
  8827                           
  8828                           ;memory.c: 22:  return((uint16_t) ((NVMDATH << 8) | NVMDATL));
  8829  31F1  0150               	movlb	16	; select bank16
  8830  31F2  081D               	movf	29,w	;volatile
  8831  31F3  0140               	movlb	0	; select bank0
  8832  31F4  00A1               	movwf	?_FLASH_ReadWord+1
  8833  31F5  0150               	movlb	16	; select bank16
  8834  31F6  081C               	movf	28,w	;volatile
  8835  31F7  0140               	movlb	0	; select bank0
  8836  31F8  00A0               	movwf	?_FLASH_ReadWord
  8837  31F9  0008               	return
  8838  31FA                     __end_of_FLASH_ReadWord:	
  8839                           
  8840                           	psect	text6
  8841  181B                     __ptext6:	
  8842 ;; *************** function _menu *****************
  8843 ;; Defined at:
  8844 ;;		line 94 in file "menuhelper.c"
  8845 ;; Parameters:    Size  Location     Type
  8846 ;;		None
  8847 ;; Auto vars:     Size  Location     Type
  8848 ;;  func            2   57[BANK1 ] PTR FTN()unsigned char 
  8849 ;;		 -> setFudgeFactor(1), setSkyTemp(1), setDPOffset(1), setup(1), 
  8850 ;;		 -> setLensDia(1), setOutputPower(1), channelSetup(1), channelView(1), 
  8851 ;;		 -> statusView(1), 
  8852 ;;  nextState       1   59[BANK1 ] char 
  8853 ;;  timeout         1   56[BANK1 ] unsigned char 
  8854 ;;  pb              1   55[BANK1 ] enum E7868
  8855 ;;  page            1   54[BANK1 ] char 
  8856 ;; Return value:  Size  Location     Type
  8857 ;;                  1    wreg      void 
  8858 ;; Registers used:
  8859 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8860 ;; Tracked objects:
  8861 ;;		On entry : 0/0
  8862 ;;		On exit  : 0/0
  8863 ;;		Unchanged: 0/0
  8864 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8865 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8866 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8867 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8868 ;;      Totals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8869 ;;Total ram usage:       10 bytes
  8870 ;; Hardware stack levels used:    1
  8871 ;; Hardware stack levels required when called:    8
  8872 ;; This function calls:
  8873 ;;		_OLED_command
  8874 ;;		_channelSetup
  8875 ;;		_channelView
  8876 ;;		_error
  8877 ;;		_getNextState
  8878 ;;		_getPB
  8879 ;;		_setDPOffset
  8880 ;;		_setFudgeFactor
  8881 ;;		_setLensDia
  8882 ;;		_setOutputPower
  8883 ;;		_setSkyTemp
  8884 ;;		_setup
  8885 ;;		_statusView
  8886 ;;		_timeSince
  8887 ;; This function is called by:
  8888 ;;		_main
  8889 ;; This function uses a non-reentrant model
  8890 ;;
  8891                           
  8892                           
  8893                           ;psect for function _menu
  8894  181B                     _menu:	
  8895                           
  8896                           ;menuhelper.c: 100:  enum e_buttonPress pb;;menuhelper.c: 101:  t_stateFuncPtr func;;men
      +                          uhelper.c: 104:  if (sleep) {
  8897                           
  8898                           ;incstack = 0
  8899                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8900  181B  0142               	movlb	2	; select bank2
  8901  181C  0864               	movf	menu@sleep^(0+256),w
  8902  181D  1903               	btfsc	3,2
  8903  181E  2845               	goto	l9354
  8904                           
  8905                           ;menuhelper.c: 105:   if (timeSince(userActivity) < 1200) {
  8906  181F  085F               	movf	(_userActivity+3)^(0+256),w	;volatile
  8907  1820  0140               	movlb	0	; select bank0
  8908  1821  00A3               	movwf	timeSince@since+3
  8909  1822  0142               	movlb	2	; select bank2
  8910  1823  085E               	movf	(_userActivity+2)^(0+256),w	;volatile
  8911  1824  0140               	movlb	0	; select bank0
  8912  1825  00A2               	movwf	timeSince@since+2
  8913  1826  0142               	movlb	2	; select bank2
  8914  1827  085D               	movf	(_userActivity+1)^(0+256),w	;volatile
  8915  1828  0140               	movlb	0	; select bank0
  8916  1829  00A1               	movwf	timeSince@since+1
  8917  182A  0142               	movlb	2	; select bank2
  8918  182B  085C               	movf	_userActivity^(0+256),w	;volatile
  8919  182C  0140               	movlb	0	; select bank0
  8920  182D  00A0               	movwf	timeSince@since
  8921  182E  31A8  2002  3198   	fcall	_timeSince
  8922  1831  0140               	movlb	0	; select bank0
  8923  1832  0823               	movf	?_timeSince+3,w
  8924  1833  1D03               	btfss	3,2
  8925  1834  0008               	return
  8926  1835  0822               	movf	?_timeSince+2,w
  8927  1836  1D03               	btfss	3,2
  8928  1837  0008               	return
  8929  1838  30B0               	movlw	176
  8930  1839  0220               	subwf	?_timeSince,w
  8931  183A  3004               	movlw	4
  8932  183B  3B21               	subwfb	?_timeSince+1,w
  8933  183C  1803               	btfsc	3,0
  8934  183D  0008               	return
  8935                           
  8936                           ;menuhelper.c: 107:    sleep = 0;
  8937  183E  0142               	movlb	2	; select bank2
  8938  183F  01E4               	clrf	menu@sleep^(0+256)
  8939                           
  8940                           ;menuhelper.c: 108:    OLED_command(0x08 | 0x04);
  8941  1840  300C               	movlw	12
  8942  1841  31B1  2102  3198   	fcall	_OLED_command
  8943                           
  8944                           ;menuhelper.c: 109:   } else {
  8945  1844  286B               	goto	l9362
  8946  1845                     l9354:	
  8947                           
  8948                           ;menuhelper.c: 113:   if (timeSince(userActivity) > 1200) {
  8949  1845  085F               	movf	(_userActivity+3)^(0+256),w	;volatile
  8950  1846  0140               	movlb	0	; select bank0
  8951  1847  00A3               	movwf	timeSince@since+3
  8952  1848  0142               	movlb	2	; select bank2
  8953  1849  085E               	movf	(_userActivity+2)^(0+256),w	;volatile
  8954  184A  0140               	movlb	0	; select bank0
  8955  184B  00A2               	movwf	timeSince@since+2
  8956  184C  0142               	movlb	2	; select bank2
  8957  184D  085D               	movf	(_userActivity+1)^(0+256),w	;volatile
  8958  184E  0140               	movlb	0	; select bank0
  8959  184F  00A1               	movwf	timeSince@since+1
  8960  1850  0142               	movlb	2	; select bank2
  8961  1851  085C               	movf	_userActivity^(0+256),w	;volatile
  8962  1852  0140               	movlb	0	; select bank0
  8963  1853  00A0               	movwf	timeSince@since
  8964  1854  31A8  2002  3198   	fcall	_timeSince
  8965  1857  0140               	movlb	0	; select bank0
  8966  1858  0823               	movf	?_timeSince+3,w
  8967  1859  1D03               	btfss	3,2
  8968  185A  2864               	goto	l9356
  8969  185B  0822               	movf	?_timeSince+2,w
  8970  185C  1D03               	btfss	3,2
  8971  185D  2864               	goto	l9356
  8972  185E  30B1               	movlw	177
  8973  185F  0220               	subwf	?_timeSince,w
  8974  1860  3004               	movlw	4
  8975  1861  3B21               	subwfb	?_timeSince+1,w
  8976  1862  1C03               	btfss	3,0
  8977  1863  286B               	goto	l9362
  8978  1864                     l9356:	
  8979                           
  8980                           ;menuhelper.c: 114:    sleep = 1;
  8981  1864  0142               	movlb	2	; select bank2
  8982  1865  01E4               	clrf	menu@sleep^(0+256)
  8983  1866  0AE4               	incf	menu@sleep^(0+256),f
  8984                           
  8985                           ;menuhelper.c: 115:    OLED_command(0x08 | 0x00);
  8986  1867  3008               	movlw	8
  8987  1868  31B1  2102         	fcall	_OLED_command
  8988  186A  0008               	return
  8989  186B                     l9362:	
  8990                           
  8991                           ;menuhelper.c: 121:  func = stateFuncTbl[state];
  8992  186B  0142               	movlb	2	; select bank2
  8993  186C  0863               	movf	menu@state^(0+256),w
  8994  186D  0141               	movlb	1	; select bank1
  8995  186E  00D2               	movwf	??_menu^(0+128)
  8996  186F  01D3               	clrf	(??_menu^(0+128)+1)
  8997  1870  35D2               	lslf	??_menu^(0+128),f
  8998  1871  0DD3               	rlf	(??_menu^(0+128)+1),f
  8999  1872  3000               	movlw	low (_stateFuncTbl| (0+32768))
  9000  1873  0752               	addwf	??_menu^(0+128),w
  9001  1874  0084               	movwf	4
  9002  1875  30B8               	movlw	high (_stateFuncTbl| (0+32768))
  9003  1876  3D53               	addwfc	(??_menu+1)^(0+128),w
  9004  1877  0085               	movwf	5
  9005  1878  3F00               	moviw [0]fsr0
  9006  1879  00D9               	movwf	menu@func^(0+128)
  9007  187A  3F01               	moviw [1]fsr0
  9008  187B  00DA               	movwf	(menu@func+1)^(0+128)
  9009                           
  9010                           ;menuhelper.c: 122:  if (func)
  9011  187C  0859               	movf	menu@func^(0+128),w
  9012  187D  045A               	iorwf	(menu@func+1)^(0+128),w
  9013  187E  1903               	btfsc	3,2
  9014  187F  288A               	goto	l9368
  9015                           
  9016                           ;menuhelper.c: 123:   page = (*func)();
  9017  1880  085A               	movf	(menu@func+1)^(0+128),w
  9018  1881  008A               	movwf	10
  9019  1882  0859               	movf	menu@func^(0+128),w
  9020  1883  000A               	callw
  9021  1884  3198               	pagesel	$
  9022  1885  0141               	movlb	1	; select bank1
  9023  1886  00D2               	movwf	??_menu^(0+128)
  9024  1887  0852               	movf	??_menu^(0+128),w
  9025  1888  00D6               	movwf	menu@page^(0+128)
  9026  1889  288E               	goto	l9370
  9027  188A                     l9368:	
  9028                           
  9029                           ;menuhelper.c: 125:   error(ERR_MENU);
  9030  188A  300B               	movlw	11
  9031  188B  31B4  245E  3198   	fcall	_error
  9032  188E                     l9370:	
  9033                           
  9034                           ;menuhelper.c: 127:  g_screenRefresh = 0;
  9035  188E  0141               	movlb	1	; select bank1
  9036  188F  01ED               	clrf	_g_screenRefresh^(0+128)
  9037                           
  9038                           ;menuhelper.c: 128:  pb = getPB();
  9039  1890  31B1  212C  3198   	fcall	_getPB
  9040  1893  0141               	movlb	1	; select bank1
  9041  1894  00D2               	movwf	??_menu^(0+128)
  9042  1895  0852               	movf	??_menu^(0+128),w
  9043  1896  00D7               	movwf	menu@pb^(0+128)
  9044                           
  9045                           ;menuhelper.c: 129:  timeout = (timeSince(userActivity) > 300);
  9046  1897  0142               	movlb	2	; select bank2
  9047  1898  085F               	movf	(_userActivity+3)^(0+256),w	;volatile
  9048  1899  0140               	movlb	0	; select bank0
  9049  189A  00A3               	movwf	timeSince@since+3
  9050  189B  0142               	movlb	2	; select bank2
  9051  189C  085E               	movf	(_userActivity+2)^(0+256),w	;volatile
  9052  189D  0140               	movlb	0	; select bank0
  9053  189E  00A2               	movwf	timeSince@since+2
  9054  189F  0142               	movlb	2	; select bank2
  9055  18A0  085D               	movf	(_userActivity+1)^(0+256),w	;volatile
  9056  18A1  0140               	movlb	0	; select bank0
  9057  18A2  00A1               	movwf	timeSince@since+1
  9058  18A3  0142               	movlb	2	; select bank2
  9059  18A4  085C               	movf	_userActivity^(0+256),w	;volatile
  9060  18A5  0140               	movlb	0	; select bank0
  9061  18A6  00A0               	movwf	timeSince@since
  9062  18A7  31A8  2002  3198   	fcall	_timeSince
  9063  18AA  0140               	movlb	0	; select bank0
  9064  18AB  0823               	movf	?_timeSince+3,w
  9065  18AC  1D03               	btfss	3,2
  9066  18AD  28B7               	goto	u10741
  9067  18AE  0822               	movf	?_timeSince+2,w
  9068  18AF  1D03               	btfss	3,2
  9069  18B0  28B7               	goto	u10741
  9070  18B1  302D               	movlw	45
  9071  18B2  0220               	subwf	?_timeSince,w
  9072  18B3  3001               	movlw	1
  9073  18B4  3B21               	subwfb	?_timeSince+1,w
  9074  18B5  1C03               	btfss	3,0
  9075  18B6  28B9               	goto	u10740
  9076  18B7                     u10741:	
  9077  18B7  3001               	movlw	1
  9078  18B8  28BA               	goto	u10750
  9079  18B9                     u10740:	
  9080  18B9  3000               	movlw	0
  9081  18BA                     u10750:	
  9082  18BA  0141               	movlb	1	; select bank1
  9083  18BB  00D2               	movwf	??_menu^(0+128)
  9084  18BC  0852               	movf	??_menu^(0+128),w
  9085  18BD  00D8               	movwf	menu@timeout^(0+128)
  9086                           
  9087                           ;menuhelper.c: 131:  nextState = getNextState(state, page, pb, timeout);
  9088  18BE  0856               	movf	menu@page^(0+128),w
  9089  18BF  00D2               	movwf	??_menu^(0+128)
  9090  18C0  0852               	movf	??_menu^(0+128),w
  9091  18C1  0140               	movlb	0	; select bank0
  9092  18C2  00B3               	movwf	getNextState@intState
  9093  18C3  0141               	movlb	1	; select bank1
  9094  18C4  0857               	movf	menu@pb^(0+128),w
  9095  18C5  00D3               	movwf	(??_menu+1)^(0+128)
  9096  18C6  0853               	movf	(??_menu+1)^(0+128),w
  9097  18C7  0140               	movlb	0	; select bank0
  9098  18C8  00B4               	movwf	getNextState@pb
  9099  18C9  0141               	movlb	1	; select bank1
  9100  18CA  0858               	movf	menu@timeout^(0+128),w
  9101  18CB  00D4               	movwf	(??_menu+2)^(0+128)
  9102  18CC  0854               	movf	(??_menu+2)^(0+128),w
  9103  18CD  0140               	movlb	0	; select bank0
  9104  18CE  00B5               	movwf	getNextState@timeout
  9105  18CF  0142               	movlb	2	; select bank2
  9106  18D0  0863               	movf	menu@state^(0+256),w
  9107  18D1  31A0  2018  3198   	fcall	_getNextState
  9108  18D4  0141               	movlb	1	; select bank1
  9109  18D5  00D5               	movwf	(??_menu+3)^(0+128)
  9110  18D6  0855               	movf	(??_menu+3)^(0+128),w
  9111  18D7  00DB               	movwf	menu@nextState^(0+128)
  9112                           
  9113                           ;menuhelper.c: 133:  if (nextState > -1) {
  9114  18D8  1BDB               	btfsc	menu@nextState^(0+128),7
  9115  18D9  28F4               	goto	l9386
  9116                           
  9117                           ;menuhelper.c: 135:   if (state != nextState) {
  9118  18DA  085B               	movf	menu@nextState^(0+128),w
  9119  18DB  00D2               	movwf	??_menu^(0+128)
  9120  18DC  01D3               	clrf	(??_menu^(0+128)+1)
  9121  18DD  1BD2               	btfsc	??_menu^(0+128),7
  9122  18DE  03D3               	decf	(??_menu^(0+128)+1),f
  9123  18DF  0142               	movlb	2	; select bank2
  9124  18E0  0863               	movf	menu@state^(0+256),w
  9125  18E1  0141               	movlb	1	; select bank1
  9126  18E2  00D4               	movwf	(??_menu+2)^(0+128)
  9127  18E3  01D5               	clrf	((??_menu+2)^(0+128)+1)
  9128  18E4  0853               	movf	(??_menu+1)^(0+128),w
  9129  18E5  0655               	xorwf	(??_menu+3)^(0+128),w
  9130  18E6  1D03               	skipz
  9131  18E7  28EA               	goto	u10775
  9132  18E8  0852               	movf	??_menu^(0+128),w
  9133  18E9  0654               	xorwf	(??_menu+2)^(0+128),w
  9134  18EA                     u10775:	
  9135  18EA  1903               	skipnz
  9136  18EB  0008               	return
  9137                           
  9138                           ;menuhelper.c: 136:    g_screenRefresh = 1;
  9139  18EC  01ED               	clrf	_g_screenRefresh^(0+128)
  9140  18ED  0AED               	incf	_g_screenRefresh^(0+128),f
  9141                           
  9142                           ;menuhelper.c: 137:    state = nextState;
  9143  18EE  085B               	movf	menu@nextState^(0+128),w
  9144  18EF  00D2               	movwf	??_menu^(0+128)
  9145  18F0  0852               	movf	??_menu^(0+128),w
  9146  18F1  0142               	movlb	2	; select bank2
  9147  18F2  00E3               	movwf	menu@state^(0+256)
  9148  18F3  0008               	return
  9149  18F4                     l9386:	
  9150                           
  9151                           ;menuhelper.c: 140:   error(ERR_MENU);
  9152  18F4  300B               	movlw	11
  9153  18F5  31B4  245E         	fcall	_error
  9154  18F7  0008               	return
  9155  18F8                     __end_of_menu:	
  9156                           
  9157                           	psect	text7
  9158  293A                     __ptext7:	
  9159 ;; *************** function _setFudgeFactor *****************
  9160 ;; Defined at:
  9161 ;;		line 331 in file "menu.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;		None
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;		None
  9166 ;; Return value:  Size  Location     Type
  9167 ;;                  1    wreg      unsigned char 
  9168 ;; Registers used:
  9169 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9170 ;; Tracked objects:
  9171 ;;		On entry : 0/0
  9172 ;;		On exit  : 0/0
  9173 ;;		Unchanged: 0/0
  9174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9175 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9176 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9177 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9178 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9179 ;;Total ram usage:        1 bytes
  9180 ;; Hardware stack levels used:    1
  9181 ;; Hardware stack levels required when called:    7
  9182 ;; This function calls:
  9183 ;;		_OLED_print_xy
  9184 ;;		_ftoa
  9185 ;;		_getPB
  9186 ;;		_returnToPage
  9187 ;;		_spinInput
  9188 ;;		_storeNVM
  9189 ;; This function is called by:
  9190 ;;		_menu
  9191 ;; This function uses a non-reentrant model
  9192 ;;
  9193                           
  9194                           
  9195                           ;psect for function _setFudgeFactor
  9196  293A                     _setFudgeFactor:	
  9197                           
  9198                           ;menu.c: 333:  returnToPage(0);
  9199                           
  9200                           ;incstack = 0
  9201                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9202  293A  3000               	movlw	0
  9203  293B  31B3  2356  31A9   	fcall	_returnToPage
  9204                           
  9205                           ;menu.c: 334:  if (g_screenRefresh)
  9206  293E  0141               	movlb	1	; select bank1
  9207  293F  086D               	movf	_g_screenRefresh^(0+128),w
  9208  2940  1903               	btfsc	3,2
  9209  2941  294C               	goto	l8518
  9210                           
  9211                           ;menu.c: 335:   OLED_print_xy(0, 0, "Fudge factor");
  9212  2942  0140               	movlb	0	; select bank0
  9213  2943  01AD               	clrf	OLED_print_xy@row
  9214  2944  3063               	movlw	low ((STR_48+24)| (0+32768))
  9215  2945  00AE               	movwf	OLED_print_xy@s
  9216  2946  30B8               	movlw	high ((STR_48+24)| (0+32768))
  9217  2947  00AF               	movwf	OLED_print_xy@s+1
  9218  2948  3000               	movlw	0
  9219  2949  31B3  2324  31A9   	fcall	_OLED_print_xy
  9220  294C                     l8518:	
  9221                           
  9222                           ;menu.c: 336:  spinInput(&data.fudgeFactor, 0.1, 5.0, 0.1);
  9223  294C  306F               	movlw	111
  9224  294D  0141               	movlb	1	; select bank1
  9225  294E  00B9               	movwf	spinInput@input^(0+128)
  9226  294F  3027               	movlw	39
  9227  2950  00BA               	movwf	(spinInput@input^(0+128)+1)
  9228  2951  303D               	movlw	61
  9229  2952  00BE               	movwf	(spinInput@min+3)^(0+128)
  9230  2953  30CC               	movlw	204
  9231  2954  00BD               	movwf	(spinInput@min+2)^(0+128)
  9232  2955  30CC               	movlw	204
  9233  2956  00BC               	movwf	(spinInput@min+1)^(0+128)
  9234  2957  30CD               	movlw	205
  9235  2958  00BB               	movwf	spinInput@min^(0+128)
  9236  2959  3040               	movlw	64
  9237  295A  00C2               	movwf	(spinInput@max+3)^(0+128)
  9238  295B  30A0               	movlw	160
  9239  295C  00C1               	movwf	(spinInput@max+2)^(0+128)
  9240  295D  3000               	movlw	0
  9241  295E  00C0               	movwf	(spinInput@max+1)^(0+128)
  9242  295F  3000               	movlw	0
  9243  2960  00BF               	movwf	spinInput@max^(0+128)
  9244  2961  303D               	movlw	61
  9245  2962  00C6               	movwf	(spinInput@step+3)^(0+128)
  9246  2963  30CC               	movlw	204
  9247  2964  00C5               	movwf	(spinInput@step+2)^(0+128)
  9248  2965  30CC               	movlw	204
  9249  2966  00C4               	movwf	(spinInput@step+1)^(0+128)
  9250  2967  30CD               	movlw	205
  9251  2968  00C3               	movwf	spinInput@step^(0+128)
  9252  2969  31AC  24C6  31A9   	fcall	_spinInput
  9253                           
  9254                           ;menu.c: 337:  ftoa(str, data.fudgeFactor, 3, 1);
  9255  296C  306F               	movlw	111
  9256  296D  0086               	movwf	6
  9257  296E  3027               	movlw	39
  9258  296F  0087               	movwf	7
  9259  2970  3F40               	moviw [0]fsr1
  9260  2971  0141               	movlb	1	; select bank1
  9261  2972  00B9               	movwf	ftoa@fValue^(0+128)
  9262  2973  3F41               	moviw [1]fsr1
  9263  2974  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9264  2975  3F42               	moviw [2]fsr1
  9265  2976  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9266  2977  3F43               	moviw [3]fsr1
  9267  2978  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9268  2979  3003               	movlw	3
  9269  297A  00C8               	movwf	??_setFudgeFactor^(0+128)
  9270  297B  0848               	movf	??_setFudgeFactor^(0+128),w
  9271  297C  00BD               	movwf	ftoa@width^(0+128)
  9272  297D  01BE               	clrf	ftoa@prec^(0+128)
  9273  297E  0ABE               	incf	ftoa@prec^(0+128),f
  9274  297F  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9275  2980  31A2  2200  31A9   	fcall	_ftoa
  9276                           
  9277                           ;menu.c: 338:  OLED_print_xy(0, 1, "\004");
  9278  2983  0140               	movlb	0	; select bank0
  9279  2984  01AD               	clrf	OLED_print_xy@row
  9280  2985  0AAD               	incf	OLED_print_xy@row,f
  9281  2986  3003               	movlw	low ((STR_54+5)| (0+32768))
  9282  2987  00AE               	movwf	OLED_print_xy@s
  9283  2988  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9284  2989  00AF               	movwf	OLED_print_xy@s+1
  9285  298A  3000               	movlw	0
  9286  298B  31B3  2324  31A9   	fcall	_OLED_print_xy
  9287                           
  9288                           ;menu.c: 339:  OLED_print_xy(1, 1, str);
  9289  298E  0140               	movlb	0	; select bank0
  9290  298F  01AD               	clrf	OLED_print_xy@row
  9291  2990  0AAD               	incf	OLED_print_xy@row,f
  9292  2991  30E6               	movlw	low _str
  9293  2992  00AE               	movwf	OLED_print_xy@s
  9294  2993  3001               	movlw	high _str
  9295  2994  00AF               	movwf	OLED_print_xy@s+1
  9296  2995  3001               	movlw	1
  9297  2996  31B3  2324  31A9   	fcall	_OLED_print_xy
  9298                           
  9299                           ;menu.c: 340:  OLED_print_xy(4, 1, " \003      ");
  9300  2999  0140               	movlb	0	; select bank0
  9301  299A  01AD               	clrf	OLED_print_xy@row
  9302  299B  0AAD               	incf	OLED_print_xy@row,f
  9303  299C  30A6               	movlw	low (STR_61| (0+32768))
  9304  299D  00AE               	movwf	OLED_print_xy@s
  9305  299E  30BA               	movlw	high (STR_61| (0+32768))
  9306  299F  00AF               	movwf	OLED_print_xy@s+1
  9307  29A0  3004               	movlw	4
  9308  29A1  31B3  2324  31A9   	fcall	_OLED_print_xy
  9309                           
  9310                           ;menu.c: 341:  if (getPB() == PB_SHORT) {
  9311  29A4  31B1  212C  31A9   	fcall	_getPB
  9312  29A7  3A01               	xorlw	1
  9313  29A8  1D03               	skipz
  9314  29A9  29AE               	goto	l8530
  9315                           
  9316                           ;menu.c: 342:   storeNVM();
  9317  29AA  31AB  2323         	fcall	_storeNVM
  9318                           
  9319                           ;menu.c: 343:   return 0;
  9320  29AC  3000               	movlw	0
  9321  29AD  0008               	return
  9322  29AE                     l8530:	
  9323                           
  9324                           ;menu.c: 345:  return 1;
  9325  29AE  3001               	movlw	1
  9326  29AF  0008               	return
  9327  29B0                     __end_of_setFudgeFactor:	
  9328                           
  9329                           	psect	text8
  9330  28C5                     __ptext8:	
  9331 ;; *************** function _setSkyTemp *****************
  9332 ;; Defined at:
  9333 ;;		line 310 in file "menu.c"
  9334 ;; Parameters:    Size  Location     Type
  9335 ;;		None
  9336 ;; Auto vars:     Size  Location     Type
  9337 ;;		None
  9338 ;; Return value:  Size  Location     Type
  9339 ;;                  1    wreg      unsigned char 
  9340 ;; Registers used:
  9341 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9342 ;; Tracked objects:
  9343 ;;		On entry : 0/0
  9344 ;;		On exit  : 0/0
  9345 ;;		Unchanged: 0/0
  9346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9349 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9350 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9351 ;;Total ram usage:        1 bytes
  9352 ;; Hardware stack levels used:    1
  9353 ;; Hardware stack levels required when called:    7
  9354 ;; This function calls:
  9355 ;;		_OLED_print_xy
  9356 ;;		_ftoa
  9357 ;;		_getPB
  9358 ;;		_returnToPage
  9359 ;;		_spinInput
  9360 ;;		_storeNVM
  9361 ;; This function is called by:
  9362 ;;		_menu
  9363 ;; This function uses a non-reentrant model
  9364 ;;
  9365                           
  9366                           
  9367                           ;psect for function _setSkyTemp
  9368  28C5                     _setSkyTemp:	
  9369                           
  9370                           ;menu.c: 312:  returnToPage(0);
  9371                           
  9372                           ;incstack = 0
  9373                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9374  28C5  3000               	movlw	0
  9375  28C6  31B3  2356  31A8   	fcall	_returnToPage
  9376                           
  9377                           ;menu.c: 313:  if (g_screenRefresh)
  9378  28C9  0141               	movlb	1	; select bank1
  9379  28CA  086D               	movf	_g_screenRefresh^(0+128),w
  9380  28CB  1903               	btfsc	3,2
  9381  28CC  28D7               	goto	l8496
  9382                           
  9383                           ;menu.c: 314:   OLED_print_xy(0, 0, "Sky temp.   ");
  9384  28CD  0140               	movlb	0	; select bank0
  9385  28CE  01AD               	clrf	OLED_print_xy@row
  9386  28CF  30F8               	movlw	low (STR_56| (0+32768))
  9387  28D0  00AE               	movwf	OLED_print_xy@s
  9388  28D1  30B9               	movlw	high (STR_56| (0+32768))
  9389  28D2  00AF               	movwf	OLED_print_xy@s+1
  9390  28D3  3000               	movlw	0
  9391  28D4  31B3  2324  31A8   	fcall	_OLED_print_xy
  9392  28D7                     l8496:	
  9393                           
  9394                           ;menu.c: 315:  spinInput(&data.skyTemp, -50, -20, 1);
  9395  28D7  306B               	movlw	107
  9396  28D8  0141               	movlb	1	; select bank1
  9397  28D9  00B9               	movwf	spinInput@input^(0+128)
  9398  28DA  3027               	movlw	39
  9399  28DB  00BA               	movwf	(spinInput@input^(0+128)+1)
  9400  28DC  30C2               	movlw	194
  9401  28DD  00BE               	movwf	(spinInput@min+3)^(0+128)
  9402  28DE  3048               	movlw	72
  9403  28DF  00BD               	movwf	(spinInput@min+2)^(0+128)
  9404  28E0  3000               	movlw	0
  9405  28E1  00BC               	movwf	(spinInput@min+1)^(0+128)
  9406  28E2  3000               	movlw	0
  9407  28E3  00BB               	movwf	spinInput@min^(0+128)
  9408  28E4  30C1               	movlw	193
  9409  28E5  00C2               	movwf	(spinInput@max+3)^(0+128)
  9410  28E6  30A0               	movlw	160
  9411  28E7  00C1               	movwf	(spinInput@max+2)^(0+128)
  9412  28E8  3000               	movlw	0
  9413  28E9  00C0               	movwf	(spinInput@max+1)^(0+128)
  9414  28EA  3000               	movlw	0
  9415  28EB  00BF               	movwf	spinInput@max^(0+128)
  9416  28EC  303F               	movlw	63
  9417  28ED  00C6               	movwf	(spinInput@step+3)^(0+128)
  9418  28EE  3080               	movlw	128
  9419  28EF  00C5               	movwf	(spinInput@step+2)^(0+128)
  9420  28F0  3000               	movlw	0
  9421  28F1  00C4               	movwf	(spinInput@step+1)^(0+128)
  9422  28F2  3000               	movlw	0
  9423  28F3  00C3               	movwf	spinInput@step^(0+128)
  9424  28F4  31AC  24C6  31A8   	fcall	_spinInput
  9425                           
  9426                           ;menu.c: 316:  ftoa(str, data.skyTemp, 3, 0);
  9427  28F7  306B               	movlw	107
  9428  28F8  0086               	movwf	6
  9429  28F9  3027               	movlw	39
  9430  28FA  0087               	movwf	7
  9431  28FB  3F40               	moviw [0]fsr1
  9432  28FC  0141               	movlb	1	; select bank1
  9433  28FD  00B9               	movwf	ftoa@fValue^(0+128)
  9434  28FE  3F41               	moviw [1]fsr1
  9435  28FF  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9436  2900  3F42               	moviw [2]fsr1
  9437  2901  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9438  2902  3F43               	moviw [3]fsr1
  9439  2903  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9440  2904  3003               	movlw	3
  9441  2905  00C8               	movwf	??_setSkyTemp^(0+128)
  9442  2906  0848               	movf	??_setSkyTemp^(0+128),w
  9443  2907  00BD               	movwf	ftoa@width^(0+128)
  9444  2908  01BE               	clrf	ftoa@prec^(0+128)
  9445  2909  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9446  290A  31A2  2200  31A8   	fcall	_ftoa
  9447                           
  9448                           ;menu.c: 317:  OLED_print_xy(0, 1, "\004");
  9449  290D  0140               	movlb	0	; select bank0
  9450  290E  01AD               	clrf	OLED_print_xy@row
  9451  290F  0AAD               	incf	OLED_print_xy@row,f
  9452  2910  3003               	movlw	low ((STR_54+5)| (0+32768))
  9453  2911  00AE               	movwf	OLED_print_xy@s
  9454  2912  30BB               	movlw	high ((STR_54+5)| (0+32768))
  9455  2913  00AF               	movwf	OLED_print_xy@s+1
  9456  2914  3000               	movlw	0
  9457  2915  31B3  2324  31A8   	fcall	_OLED_print_xy
  9458                           
  9459                           ;menu.c: 318:  OLED_print_xy(1, 1, str);
  9460  2918  0140               	movlb	0	; select bank0
  9461  2919  01AD               	clrf	OLED_print_xy@row
  9462  291A  0AAD               	incf	OLED_print_xy@row,f
  9463  291B  30E6               	movlw	low _str
  9464  291C  00AE               	movwf	OLED_print_xy@s
  9465  291D  3001               	movlw	high _str
  9466  291E  00AF               	movwf	OLED_print_xy@s+1
  9467  291F  3001               	movlw	1
  9468  2920  31B3  2324  31A8   	fcall	_OLED_print_xy
  9469                           
  9470                           ;menu.c: 319:  OLED_print_xy(4, 1, "\001 \003     ");
  9471  2923  0140               	movlb	0	; select bank0
  9472  2924  01AD               	clrf	OLED_print_xy@row
  9473  2925  0AAD               	incf	OLED_print_xy@row,f
  9474  2926  309D               	movlw	low (STR_58| (0+32768))
  9475  2927  00AE               	movwf	OLED_print_xy@s
  9476  2928  30BA               	movlw	high (STR_58| (0+32768))
  9477  2929  00AF               	movwf	OLED_print_xy@s+1
  9478  292A  3004               	movlw	4
  9479  292B  31B3  2324  31A8   	fcall	_OLED_print_xy
  9480                           
  9481                           ;menu.c: 320:  if (getPB() == PB_SHORT) {
  9482  292E  31B1  212C  31A8   	fcall	_getPB
  9483  2931  3A01               	xorlw	1
  9484  2932  1D03               	skipz
  9485  2933  2938               	goto	l8508
  9486                           
  9487                           ;menu.c: 321:   storeNVM();
  9488  2934  31AB  2323         	fcall	_storeNVM
  9489                           
  9490                           ;menu.c: 322:   return 0;
  9491  2936  3000               	movlw	0
  9492  2937  0008               	return
  9493  2938                     l8508:	
  9494                           
  9495                           ;menu.c: 324:  return 1;
  9496  2938  3001               	movlw	1
  9497  2939  0008               	return
  9498  293A                     __end_of_setSkyTemp:	
  9499                           
  9500                           	psect	text9
  9501  29B0                     __ptext9:	
  9502 ;; *************** function _setDPOffset *****************
  9503 ;; Defined at:
  9504 ;;		line 289 in file "menu.c"
  9505 ;; Parameters:    Size  Location     Type
  9506 ;;		None
  9507 ;; Auto vars:     Size  Location     Type
  9508 ;;		None
  9509 ;; Return value:  Size  Location     Type
  9510 ;;                  1    wreg      unsigned char 
  9511 ;; Registers used:
  9512 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9513 ;; Tracked objects:
  9514 ;;		On entry : 0/0
  9515 ;;		On exit  : 0/0
  9516 ;;		Unchanged: 0/0
  9517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9518 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9519 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9520 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9521 ;;      Totals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9522 ;;Total ram usage:        1 bytes
  9523 ;; Hardware stack levels used:    1
  9524 ;; Hardware stack levels required when called:    7
  9525 ;; This function calls:
  9526 ;;		_OLED_print_xy
  9527 ;;		_ftoa
  9528 ;;		_getPB
  9529 ;;		_returnToPage
  9530 ;;		_spinInput
  9531 ;;		_storeNVM
  9532 ;; This function is called by:
  9533 ;;		_menu
  9534 ;; This function uses a non-reentrant model
  9535 ;;
  9536                           
  9537                           
  9538                           ;psect for function _setDPOffset
  9539  29B0                     _setDPOffset:	
  9540                           
  9541                           ;menu.c: 291:  returnToPage(0);
  9542                           
  9543                           ;incstack = 0
  9544                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9545  29B0  3000               	movlw	0
  9546  29B1  31B3  2356  31A9   	fcall	_returnToPage
  9547                           
  9548                           ;menu.c: 292:  if (g_screenRefresh)
  9549  29B4  0141               	movlb	1	; select bank1
  9550  29B5  086D               	movf	_g_screenRefresh^(0+128),w
  9551  29B6  1903               	btfsc	3,2
  9552  29B7  29C2               	goto	l8474
  9553                           
  9554                           ;menu.c: 293:   OLED_print_xy(0, 0, "DP offset   ");
  9555  29B8  0140               	movlb	0	; select bank0
  9556  29B9  01AD               	clrf	OLED_print_xy@row
  9557  29BA  3012               	movlw	low (STR_53| (0+32768))
  9558  29BB  00AE               	movwf	OLED_print_xy@s
  9559  29BC  30BA               	movlw	high (STR_53| (0+32768))
  9560  29BD  00AF               	movwf	OLED_print_xy@s+1
  9561  29BE  3000               	movlw	0
  9562  29BF  31B3  2324  31A9   	fcall	_OLED_print_xy
  9563  29C2                     l8474:	
  9564                           
  9565                           ;menu.c: 294:  spinInput(&data.dpOffset, 0, 10, 0.5);
  9566  29C2  3067               	movlw	103
  9567  29C3  0141               	movlb	1	; select bank1
  9568  29C4  00B9               	movwf	spinInput@input^(0+128)
  9569  29C5  3027               	movlw	39
  9570  29C6  00BA               	movwf	(spinInput@input^(0+128)+1)
  9571  29C7  3000               	movlw	0
  9572  29C8  00BE               	movwf	(spinInput@min+3)^(0+128)
  9573  29C9  3000               	movlw	0
  9574  29CA  00BD               	movwf	(spinInput@min+2)^(0+128)
  9575  29CB  3000               	movlw	0
  9576  29CC  00BC               	movwf	(spinInput@min+1)^(0+128)
  9577  29CD  3000               	movlw	0
  9578  29CE  00BB               	movwf	spinInput@min^(0+128)
  9579  29CF  3041               	movlw	65
  9580  29D0  00C2               	movwf	(spinInput@max+3)^(0+128)
  9581  29D1  3020               	movlw	32
  9582  29D2  00C1               	movwf	(spinInput@max+2)^(0+128)
  9583  29D3  3000               	movlw	0
  9584  29D4  00C0               	movwf	(spinInput@max+1)^(0+128)
  9585  29D5  3000               	movlw	0
  9586  29D6  00BF               	movwf	spinInput@max^(0+128)
  9587  29D7  303F               	movlw	63
  9588  29D8  00C6               	movwf	(spinInput@step+3)^(0+128)
  9589  29D9  3000               	movlw	0
  9590  29DA  00C5               	movwf	(spinInput@step+2)^(0+128)
  9591  29DB  3000               	movlw	0
  9592  29DC  00C4               	movwf	(spinInput@step+1)^(0+128)
  9593  29DD  3000               	movlw	0
  9594  29DE  00C3               	movwf	spinInput@step^(0+128)
  9595  29DF  31AC  24C6  31A9   	fcall	_spinInput
  9596                           
  9597                           ;menu.c: 295:  ftoa(str, data.dpOffset, 4, 1);
  9598  29E2  304A               	movlw	74
  9599  29E3  0086               	movwf	6
  9600  29E4  3027               	movlw	39
  9601  29E5  0087               	movwf	7
  9602  29E6  315D               	addfsr 1,29
  9603  29E7  3F40               	moviw [0]fsr1
  9604  29E8  0141               	movlb	1	; select bank1
  9605  29E9  00B9               	movwf	ftoa@fValue^(0+128)
  9606  29EA  3F41               	moviw [1]fsr1
  9607  29EB  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9608  29EC  3F42               	moviw [2]fsr1
  9609  29ED  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9610  29EE  3F43               	moviw [3]fsr1
  9611  29EF  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9612  29F0  3004               	movlw	4
  9613  29F1  00C8               	movwf	??_setDPOffset^(0+128)
  9614  29F2  0848               	movf	??_setDPOffset^(0+128),w
  9615  29F3  00BD               	movwf	ftoa@width^(0+128)
  9616  29F4  01BE               	clrf	ftoa@prec^(0+128)
  9617  29F5  0ABE               	incf	ftoa@prec^(0+128),f
  9618  29F6  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9619  29F7  31A2  2200  31A9   	fcall	_ftoa
  9620                           
  9621                           ;menu.c: 296:  OLED_print_xy(0, 1, "temp.\004");
  9622  29FA  0140               	movlb	0	; select bank0
  9623  29FB  01AD               	clrf	OLED_print_xy@row
  9624  29FC  0AAD               	incf	OLED_print_xy@row,f
  9625  29FD  30FE               	movlw	low (STR_54| (0+32768))
  9626  29FE  00AE               	movwf	OLED_print_xy@s
  9627  29FF  30BA               	movlw	high (STR_54| (0+32768))
  9628  2A00  00AF               	movwf	OLED_print_xy@s+1
  9629  2A01  3000               	movlw	0
  9630  2A02  31B3  2324  31A9   	fcall	_OLED_print_xy
  9631                           
  9632                           ;menu.c: 297:  OLED_print_xy(6, 1, str);
  9633  2A05  0140               	movlb	0	; select bank0
  9634  2A06  01AD               	clrf	OLED_print_xy@row
  9635  2A07  0AAD               	incf	OLED_print_xy@row,f
  9636  2A08  30E6               	movlw	low _str
  9637  2A09  00AE               	movwf	OLED_print_xy@s
  9638  2A0A  3001               	movlw	high _str
  9639  2A0B  00AF               	movwf	OLED_print_xy@s+1
  9640  2A0C  3006               	movlw	6
  9641  2A0D  31B3  2324  31A9   	fcall	_OLED_print_xy
  9642                           
  9643                           ;menu.c: 298:  OLED_print_xy(10, 1, "\001\003");
  9644  2A10  0140               	movlb	0	; select bank0
  9645  2A11  01AD               	clrf	OLED_print_xy@row
  9646  2A12  0AAD               	incf	OLED_print_xy@row,f
  9647  2A13  3029               	movlw	low (STR_55| (0+32768))
  9648  2A14  00AE               	movwf	OLED_print_xy@s
  9649  2A15  30BB               	movlw	high (STR_55| (0+32768))
  9650  2A16  00AF               	movwf	OLED_print_xy@s+1
  9651  2A17  300A               	movlw	10
  9652  2A18  31B3  2324  31A9   	fcall	_OLED_print_xy
  9653                           
  9654                           ;menu.c: 299:  if (getPB() == PB_SHORT) {
  9655  2A1B  31B1  212C  31A9   	fcall	_getPB
  9656  2A1E  3A01               	xorlw	1
  9657  2A1F  1D03               	skipz
  9658  2A20  2A25               	goto	l8486
  9659                           
  9660                           ;menu.c: 300:   storeNVM();
  9661  2A21  31AB  2323         	fcall	_storeNVM
  9662                           
  9663                           ;menu.c: 301:   return 0;
  9664  2A23  3000               	movlw	0
  9665  2A24  0008               	return
  9666  2A25                     l8486:	
  9667                           
  9668                           ;menu.c: 303:  return 1;
  9669  2A25  3001               	movlw	1
  9670  2A26  0008               	return
  9671  2A27                     __end_of_setDPOffset:	
  9672                           
  9673                           	psect	text10
  9674  2F4A                     __ptext10:	
  9675 ;; *************** function _setup *****************
  9676 ;; Defined at:
  9677 ;;		line 265 in file "menu.c"
  9678 ;; Parameters:    Size  Location     Type
  9679 ;;		None
  9680 ;; Auto vars:     Size  Location     Type
  9681 ;;		None
  9682 ;; Return value:  Size  Location     Type
  9683 ;;                  1    wreg      unsigned char 
  9684 ;; Registers used:
  9685 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9686 ;; Tracked objects:
  9687 ;;		On entry : 0/0
  9688 ;;		On exit  : 0/0
  9689 ;;		Unchanged: 0/0
  9690 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9691 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9693 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9694 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9695 ;;Total ram usage:        2 bytes
  9696 ;; Hardware stack levels used:    1
  9697 ;; Hardware stack levels required when called:    7
  9698 ;; This function calls:
  9699 ;;		_OLED_print_xy
  9700 ;;		_ftoa
  9701 ;;		_paging
  9702 ;;		_returnToPage
  9703 ;; This function is called by:
  9704 ;;		_menu
  9705 ;; This function uses a non-reentrant model
  9706 ;;
  9707                           
  9708                           
  9709                           ;psect for function _setup
  9710  2F4A                     _setup:	
  9711                           
  9712                           ;menu.c: 267:  static uint8_t page = 0;;menu.c: 269:  returnToPage(page);
  9713                           
  9714                           ;incstack = 0
  9715                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9716  2F4A  0142               	movlb	2	; select bank2
  9717  2F4B  0866               	movf	setup@page^(0+256),w
  9718  2F4C  31B3  2356  31AF   	fcall	_returnToPage
  9719                           
  9720                           ;menu.c: 270:  if (g_screenRefresh) {
  9721  2F4F  0141               	movlb	1	; select bank1
  9722  2F50  086D               	movf	_g_screenRefresh^(0+128),w
  9723  2F51  1903               	btfsc	3,2
  9724  2F52  2FEF               	goto	l8462
  9725                           
  9726                           ;menu.c: 271:   OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factor");
  9727  2F53  0140               	movlb	0	; select bank0
  9728  2F54  01AD               	clrf	OLED_print_xy@row
  9729  2F55  304B               	movlw	low (STR_48| (0+32768))
  9730  2F56  00AE               	movwf	OLED_print_xy@s
  9731  2F57  30B8               	movlw	high (STR_48| (0+32768))
  9732  2F58  00AF               	movwf	OLED_print_xy@s+1
  9733  2F59  3000               	movlw	0
  9734  2F5A  31B3  2324  31AF   	fcall	_OLED_print_xy
  9735                           
  9736                           ;menu.c: 272:   OLED_print_xy(0, 1, "temp. ");
  9737  2F5D  0140               	movlb	0	; select bank0
  9738  2F5E  01AD               	clrf	OLED_print_xy@row
  9739  2F5F  0AAD               	incf	OLED_print_xy@row,f
  9740  2F60  300C               	movlw	low (STR_49| (0+32768))
  9741  2F61  00AE               	movwf	OLED_print_xy@s
  9742  2F62  30BB               	movlw	high (STR_49| (0+32768))
  9743  2F63  00AF               	movwf	OLED_print_xy@s+1
  9744  2F64  3000               	movlw	0
  9745  2F65  31B3  2324  31AF   	fcall	_OLED_print_xy
  9746                           
  9747                           ;menu.c: 273:   ftoa(str, data.dpOffset, 4, 1);
  9748  2F68  304A               	movlw	74
  9749  2F69  0086               	movwf	6
  9750  2F6A  3027               	movlw	39
  9751  2F6B  0087               	movwf	7
  9752  2F6C  315D               	addfsr 1,29
  9753  2F6D  3F40               	moviw [0]fsr1
  9754  2F6E  0141               	movlb	1	; select bank1
  9755  2F6F  00B9               	movwf	ftoa@fValue^(0+128)
  9756  2F70  3F41               	moviw [1]fsr1
  9757  2F71  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9758  2F72  3F42               	moviw [2]fsr1
  9759  2F73  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9760  2F74  3F43               	moviw [3]fsr1
  9761  2F75  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9762  2F76  3004               	movlw	4
  9763  2F77  00C7               	movwf	??_setup^(0+128)
  9764  2F78  0847               	movf	??_setup^(0+128),w
  9765  2F79  00BD               	movwf	ftoa@width^(0+128)
  9766  2F7A  01BE               	clrf	ftoa@prec^(0+128)
  9767  2F7B  0ABE               	incf	ftoa@prec^(0+128),f
  9768  2F7C  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9769  2F7D  31A2  2200  31AF   	fcall	_ftoa
  9770                           
  9771                           ;menu.c: 274:   OLED_print_xy(6, 1, str);
  9772  2F80  0140               	movlb	0	; select bank0
  9773  2F81  01AD               	clrf	OLED_print_xy@row
  9774  2F82  0AAD               	incf	OLED_print_xy@row,f
  9775  2F83  30E6               	movlw	low _str
  9776  2F84  00AE               	movwf	OLED_print_xy@s
  9777  2F85  3001               	movlw	high _str
  9778  2F86  00AF               	movwf	OLED_print_xy@s+1
  9779  2F87  3006               	movlw	6
  9780  2F88  31B3  2324  31AF   	fcall	_OLED_print_xy
  9781                           
  9782                           ;menu.c: 275:   OLED_print_xy(10, 1, "\001 ");
  9783  2F8B  0140               	movlb	0	; select bank0
  9784  2F8C  01AD               	clrf	OLED_print_xy@row
  9785  2F8D  0AAD               	incf	OLED_print_xy@row,f
  9786  2F8E  302C               	movlw	low (STR_50| (0+32768))
  9787  2F8F  00AE               	movwf	OLED_print_xy@s
  9788  2F90  30BB               	movlw	high (STR_50| (0+32768))
  9789  2F91  00AF               	movwf	OLED_print_xy@s+1
  9790  2F92  300A               	movlw	10
  9791  2F93  31B3  2324  31AF   	fcall	_OLED_print_xy
  9792                           
  9793                           ;menu.c: 276:   ftoa(str, data.skyTemp, 3, 0);
  9794  2F96  306B               	movlw	107
  9795  2F97  0086               	movwf	6
  9796  2F98  3027               	movlw	39
  9797  2F99  0087               	movwf	7
  9798  2F9A  3F40               	moviw [0]fsr1
  9799  2F9B  0141               	movlb	1	; select bank1
  9800  2F9C  00B9               	movwf	ftoa@fValue^(0+128)
  9801  2F9D  3F41               	moviw [1]fsr1
  9802  2F9E  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9803  2F9F  3F42               	moviw [2]fsr1
  9804  2FA0  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9805  2FA1  3F43               	moviw [3]fsr1
  9806  2FA2  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9807  2FA3  3003               	movlw	3
  9808  2FA4  00C7               	movwf	??_setup^(0+128)
  9809  2FA5  0847               	movf	??_setup^(0+128),w
  9810  2FA6  00BD               	movwf	ftoa@width^(0+128)
  9811  2FA7  01BE               	clrf	ftoa@prec^(0+128)
  9812  2FA8  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9813  2FA9  31A2  2200  31AF   	fcall	_ftoa
  9814                           
  9815                           ;menu.c: 277:   OLED_print_xy(12 + 0, 1, str);
  9816  2FAC  0140               	movlb	0	; select bank0
  9817  2FAD  01AD               	clrf	OLED_print_xy@row
  9818  2FAE  0AAD               	incf	OLED_print_xy@row,f
  9819  2FAF  30E6               	movlw	low _str
  9820  2FB0  00AE               	movwf	OLED_print_xy@s
  9821  2FB1  3001               	movlw	high _str
  9822  2FB2  00AF               	movwf	OLED_print_xy@s+1
  9823  2FB3  300C               	movlw	12
  9824  2FB4  31B3  2324  31AF   	fcall	_OLED_print_xy
  9825                           
  9826                           ;menu.c: 278:   OLED_print_xy(12 + 3, 1, "\001        ");
  9827  2FB7  0140               	movlb	0	; select bank0
  9828  2FB8  01AD               	clrf	OLED_print_xy@row
  9829  2FB9  0AAD               	incf	OLED_print_xy@row,f
  9830  2FBA  3093               	movlw	low (STR_51| (0+32768))
  9831  2FBB  00AE               	movwf	OLED_print_xy@s
  9832  2FBC  30BA               	movlw	high (STR_51| (0+32768))
  9833  2FBD  00AF               	movwf	OLED_print_xy@s+1
  9834  2FBE  300F               	movlw	15
  9835  2FBF  31B3  2324  31AF   	fcall	_OLED_print_xy
  9836                           
  9837                           ;menu.c: 279:   ftoa(str, data.fudgeFactor, 3, 1);
  9838  2FC2  306F               	movlw	111
  9839  2FC3  0086               	movwf	6
  9840  2FC4  3027               	movlw	39
  9841  2FC5  0087               	movwf	7
  9842  2FC6  3F40               	moviw [0]fsr1
  9843  2FC7  0141               	movlb	1	; select bank1
  9844  2FC8  00B9               	movwf	ftoa@fValue^(0+128)
  9845  2FC9  3F41               	moviw [1]fsr1
  9846  2FCA  00BA               	movwf	(ftoa@fValue+1)^(0+128)
  9847  2FCB  3F42               	moviw [2]fsr1
  9848  2FCC  00BB               	movwf	(ftoa@fValue+2)^(0+128)
  9849  2FCD  3F43               	moviw [3]fsr1
  9850  2FCE  00BC               	movwf	(ftoa@fValue+3)^(0+128)
  9851  2FCF  3003               	movlw	3
  9852  2FD0  00C7               	movwf	??_setup^(0+128)
  9853  2FD1  0847               	movf	??_setup^(0+128),w
  9854  2FD2  00BD               	movwf	ftoa@width^(0+128)
  9855  2FD3  01BE               	clrf	ftoa@prec^(0+128)
  9856  2FD4  0ABE               	incf	ftoa@prec^(0+128),f
  9857  2FD5  30E6               	movlw	(low (_str| (0+256)))& (0+255)
  9858  2FD6  31A2  2200  31AF   	fcall	_ftoa
  9859                           
  9860                           ;menu.c: 280:   OLED_print_xy(2 * 12 + 0, 1, str);
  9861  2FD9  0140               	movlb	0	; select bank0
  9862  2FDA  01AD               	clrf	OLED_print_xy@row
  9863  2FDB  0AAD               	incf	OLED_print_xy@row,f
  9864  2FDC  30E6               	movlw	low _str
  9865  2FDD  00AE               	movwf	OLED_print_xy@s
  9866  2FDE  3001               	movlw	high _str
  9867  2FDF  00AF               	movwf	OLED_print_xy@s+1
  9868  2FE0  3018               	movlw	24
  9869  2FE1  31B3  2324  31AF   	fcall	_OLED_print_xy
  9870                           
  9871                           ;menu.c: 281:   OLED_print_xy(2 * 12 + 4, 1, "         ");
  9872  2FE4  0140               	movlb	0	; select bank0
  9873  2FE5  01AD               	clrf	OLED_print_xy@row
  9874  2FE6  0AAD               	incf	OLED_print_xy@row,f
  9875  2FE7  30A0               	movlw	low ((STR_28+3)| (0+32768))
  9876  2FE8  00AE               	movwf	OLED_print_xy@s
  9877  2FE9  30B9               	movlw	high ((STR_28+3)| (0+32768))
  9878  2FEA  00AF               	movwf	OLED_print_xy@s+1
  9879  2FEB  301C               	movlw	28
  9880  2FEC  31B3  2324  31AF   	fcall	_OLED_print_xy
  9881  2FEF                     l8462:	
  9882                           
  9883                           ;menu.c: 283:  page = paging(page, 3);
  9884  2FEF  3003               	movlw	3
  9885  2FF0  0141               	movlb	1	; select bank1
  9886  2FF1  00C7               	movwf	??_setup^(0+128)
  9887  2FF2  0847               	movf	??_setup^(0+128),w
  9888  2FF3  0140               	movlb	0	; select bank0
  9889  2FF4  00A7               	movwf	paging@lastPage
  9890  2FF5  0142               	movlb	2	; select bank2
  9891  2FF6  0866               	movf	setup@page^(0+256),w
  9892  2FF7  3187  278D         	fcall	_paging
  9893  2FF9  0141               	movlb	1	; select bank1
  9894  2FFA  00C8               	movwf	(??_setup+1)^(0+128)
  9895  2FFB  0848               	movf	(??_setup+1)^(0+128),w
  9896  2FFC  0142               	movlb	2	; select bank2
  9897  2FFD  00E6               	movwf	setup@page^(0+256)
  9898                           
  9899                           ;menu.c: 284:  return page;
  9900  2FFE  0866               	movf	setup@page^(0+256),w
  9901  2FFF  0008               	return
  9902  3000                     __end_of_setup:	
  9903                           
  9904                           	psect	text11
  9905  2E94                     __ptext11:	
  9906 ;; *************** function _setLensDia *****************
  9907 ;; Defined at:
  9908 ;;		line 244 in file "menu.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;		None
  9911 ;; Auto vars:     Size  Location     Type
  9912 ;;		None
  9913 ;; Return value:  Size  Location     Type
  9914 ;;                  1    wreg      unsigned char 
  9915 ;; Registers used:
  9916 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9917 ;; Tracked objects:
  9918 ;;		On entry : 0/0
  9919 ;;		On exit  : 0/0
  9920 ;;		Unchanged: 0/0
  9921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9922 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9923 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9924 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9925 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9926 ;;Total ram usage:        8 bytes
  9927 ;; Hardware stack levels used:    1
  9928 ;; Hardware stack levels required when called:    7
  9929 ;; This function calls:
  9930 ;;		_OLED_print_xy
  9931 ;;		___wmul
  9932 ;;		_ftoa
  9933 ;;		_getPB
  9934 ;;		_returnToPage
  9935 ;;		_spinInput
  9936 ;;		_storeNVM
  9937 ;; This function is called by:
  9938 ;;		_menu
  9939 ;; This function uses a non-reentrant model
  9940 ;;
  9941                           
  9942                           
  9943                           ;psect for function _setLensDia
  9944  2E94                     _setLensDia:	
  9945                           
  9946                           ;menu.c: 246:  returnToPage(0);
  9947                           
  9948                           ;incstack = 0
  9949                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9950  2E94  3000               	movlw	0
  9951  2E95  31B3  2356  31AE   	fcall	_returnToPage
  9952                           
  9953                           ;menu.c: 247:  if (g_screenRefresh)
  9954  2E98  0141               	movlb	1	; select bank1
  9955  2E99  086D               	movf	_g_screenRefresh^(0+128),w
  9956  2E9A  1903               	btfsc	3,2
  9957  2E9B  2EA6               	goto	l8418
  9958                           
  9959                           ;menu.c: 248:   OLED_print_xy(0, 0, "Lens diam.  ");
  9960  2E9C  0140               	movlb	0	; select bank0
  9961  2E9D  01AD               	clrf	OLED_print_xy@row
  9962  2E9E  301F               	movlw	low (STR_34| (0+32768))
  9963  2E9F  00AE               	movwf	OLED_print_xy@s
  9964  2EA0  30BA               	movlw	high (STR_34| (0+32768))
  9965  2EA1  00AF               	movwf	OLED_print_xy@s+1
  9966  2EA2  3000               	movlw	0
  9967  2EA3  31B3  2324  31AE   	fcall	_OLED_print_xy
  9968  2EA6                     l8418:	
  9969                           
  9970                           ;menu.c: 249:  spinInput(&data.heater[selectedChannel].lensDia, 1, 16, 0.5);
  9971  2EA6  0141               	movlb	1	; select bank1
  9972  2EA7  086B               	movf	_selectedChannel^(0+128),w
  9973  2EA8  00C8               	movwf	??_setLensDia^(0+128)
  9974  2EA9  01C9               	clrf	(??_setLensDia^(0+128)+1)
  9975  2EAA  0848               	movf	??_setLensDia^(0+128),w
  9976  2EAB  0140               	movlb	0	; select bank0
  9977  2EAC  00AD               	movwf	___wmul@multiplier
  9978  2EAD  0141               	movlb	1	; select bank1
  9979  2EAE  0849               	movf	(??_setLensDia+1)^(0+128),w
  9980  2EAF  0140               	movlb	0	; select bank0
  9981  2EB0  00AE               	movwf	___wmul@multiplier+1
  9982  2EB1  301F               	movlw	31
  9983  2EB2  00AF               	movwf	___wmul@multiplicand
  9984  2EB3  3000               	movlw	0
  9985  2EB4  00B0               	movwf	___wmul@multiplicand+1
  9986  2EB5  31B1  2161  31AE   	fcall	___wmul
  9987  2EB8  3089               	movlw	137
  9988  2EB9  0141               	movlb	1	; select bank1
  9989  2EBA  00CA               	movwf	(??_setLensDia+2)^(0+128)
  9990  2EBB  3027               	movlw	39
  9991  2EBC  00CB               	movwf	((??_setLensDia+2)^(0+128)+1)
  9992  2EBD  0140               	movlb	0	; select bank0
  9993  2EBE  082D               	movf	?___wmul,w
  9994  2EBF  0141               	movlb	1	; select bank1
  9995  2EC0  074A               	addwf	(??_setLensDia+2)^(0+128),w
  9996  2EC1  00B9               	movwf	spinInput@input^(0+128)
  9997  2EC2  0140               	movlb	0	; select bank0
  9998  2EC3  082E               	movf	?___wmul+1,w
  9999  2EC4  0141               	movlb	1	; select bank1
 10000  2EC5  3D4B               	addwfc	(??_setLensDia+3)^(0+128),w
 10001  2EC6  00BA               	movwf	(spinInput@input+1)^(0+128)
 10002  2EC7  303F               	movlw	63
 10003  2EC8  00BE               	movwf	(spinInput@min+3)^(0+128)
 10004  2EC9  3080               	movlw	128
 10005  2ECA  00BD               	movwf	(spinInput@min+2)^(0+128)
 10006  2ECB  3000               	movlw	0
 10007  2ECC  00BC               	movwf	(spinInput@min+1)^(0+128)
 10008  2ECD  3000               	movlw	0
 10009  2ECE  00BB               	movwf	spinInput@min^(0+128)
 10010  2ECF  3041               	movlw	65
 10011  2ED0  00C2               	movwf	(spinInput@max+3)^(0+128)
 10012  2ED1  3080               	movlw	128
 10013  2ED2  00C1               	movwf	(spinInput@max+2)^(0+128)
 10014  2ED3  3000               	movlw	0
 10015  2ED4  00C0               	movwf	(spinInput@max+1)^(0+128)
 10016  2ED5  3000               	movlw	0
 10017  2ED6  00BF               	movwf	spinInput@max^(0+128)
 10018  2ED7  303F               	movlw	63
 10019  2ED8  00C6               	movwf	(spinInput@step+3)^(0+128)
 10020  2ED9  3000               	movlw	0
 10021  2EDA  00C5               	movwf	(spinInput@step+2)^(0+128)
 10022  2EDB  3000               	movlw	0
 10023  2EDC  00C4               	movwf	(spinInput@step+1)^(0+128)
 10024  2EDD  3000               	movlw	0
 10025  2EDE  00C3               	movwf	spinInput@step^(0+128)
 10026  2EDF  31AC  24C6  31AE   	fcall	_spinInput
 10027                           
 10028                           ;menu.c: 250:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
 10029  2EE2  0141               	movlb	1	; select bank1
 10030  2EE3  086B               	movf	_selectedChannel^(0+128),w
 10031  2EE4  00C8               	movwf	??_setLensDia^(0+128)
 10032  2EE5  01C9               	clrf	(??_setLensDia^(0+128)+1)
 10033  2EE6  0848               	movf	??_setLensDia^(0+128),w
 10034  2EE7  0140               	movlb	0	; select bank0
 10035  2EE8  00AD               	movwf	___wmul@multiplier
 10036  2EE9  0141               	movlb	1	; select bank1
 10037  2EEA  0849               	movf	(??_setLensDia+1)^(0+128),w
 10038  2EEB  0140               	movlb	0	; select bank0
 10039  2EEC  00AE               	movwf	___wmul@multiplier+1
 10040  2EED  301F               	movlw	31
 10041  2EEE  00AF               	movwf	___wmul@multiplicand
 10042  2EEF  3000               	movlw	0
 10043  2EF0  00B0               	movwf	___wmul@multiplicand+1
 10044  2EF1  31B1  2161  31AE   	fcall	___wmul
 10045  2EF4  3089               	movlw	137
 10046  2EF5  0141               	movlb	1	; select bank1
 10047  2EF6  00CA               	movwf	(??_setLensDia+2)^(0+128)
 10048  2EF7  3027               	movlw	39
 10049  2EF8  00CB               	movwf	((??_setLensDia+2)^(0+128)+1)
 10050  2EF9  0140               	movlb	0	; select bank0
 10051  2EFA  082D               	movf	?___wmul,w
 10052  2EFB  0141               	movlb	1	; select bank1
 10053  2EFC  074A               	addwf	(??_setLensDia+2)^(0+128),w
 10054  2EFD  0086               	movwf	6
 10055  2EFE  0140               	movlb	0	; select bank0
 10056  2EFF  082E               	movf	?___wmul+1,w
 10057  2F00  0141               	movlb	1	; select bank1
 10058  2F01  3D4B               	addwfc	(??_setLensDia+3)^(0+128),w
 10059  2F02  0087               	movwf	7
 10060  2F03  3F40               	moviw [0]fsr1
 10061  2F04  00CC               	movwf	_setLensDia$2772^(0+128)
 10062  2F05  3F41               	moviw [1]fsr1
 10063  2F06  00CD               	movwf	(_setLensDia$2772+1)^(0+128)
 10064  2F07  3F42               	moviw [2]fsr1
 10065  2F08  00CE               	movwf	(_setLensDia$2772+2)^(0+128)
 10066  2F09  3F43               	moviw [3]fsr1
 10067  2F0A  00CF               	movwf	(_setLensDia$2772+3)^(0+128)
 10068                           
 10069                           ;menu.c: 250:  ftoa(str, data.heater[selectedChannel].lensDia, 4, 1);
 10070  2F0B  084F               	movf	(_setLensDia$2772+3)^(0+128),w
 10071  2F0C  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10072  2F0D  084E               	movf	(_setLensDia$2772+2)^(0+128),w
 10073  2F0E  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10074  2F0F  084D               	movf	(_setLensDia$2772+1)^(0+128),w
 10075  2F10  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10076  2F11  084C               	movf	_setLensDia$2772^(0+128),w
 10077  2F12  00B9               	movwf	ftoa@fValue^(0+128)
 10078  2F13  3004               	movlw	4
 10079  2F14  00C8               	movwf	??_setLensDia^(0+128)
 10080  2F15  0848               	movf	??_setLensDia^(0+128),w
 10081  2F16  00BD               	movwf	ftoa@width^(0+128)
 10082  2F17  01BE               	clrf	ftoa@prec^(0+128)
 10083  2F18  0ABE               	incf	ftoa@prec^(0+128),f
 10084  2F19  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 10085  2F1A  31A2  2200  31AE   	fcall	_ftoa
 10086                           
 10087                           ;menu.c: 251:  OLED_print_xy(0, 1, "\004");
 10088  2F1D  0140               	movlb	0	; select bank0
 10089  2F1E  01AD               	clrf	OLED_print_xy@row
 10090  2F1F  0AAD               	incf	OLED_print_xy@row,f
 10091  2F20  3003               	movlw	low ((STR_54+5)| (0+32768))
 10092  2F21  00AE               	movwf	OLED_print_xy@s
 10093  2F22  30BB               	movlw	high ((STR_54+5)| (0+32768))
 10094  2F23  00AF               	movwf	OLED_print_xy@s+1
 10095  2F24  3000               	movlw	0
 10096  2F25  31B3  2324  31AE   	fcall	_OLED_print_xy
 10097                           
 10098                           ;menu.c: 252:  OLED_print_xy(1, 1, str);
 10099  2F28  0140               	movlb	0	; select bank0
 10100  2F29  01AD               	clrf	OLED_print_xy@row
 10101  2F2A  0AAD               	incf	OLED_print_xy@row,f
 10102  2F2B  30E6               	movlw	low _str
 10103  2F2C  00AE               	movwf	OLED_print_xy@s
 10104  2F2D  3001               	movlw	high _str
 10105  2F2E  00AF               	movwf	OLED_print_xy@s+1
 10106  2F2F  3001               	movlw	1
 10107  2F30  31B3  2324  31AE   	fcall	_OLED_print_xy
 10108                           
 10109                           ;menu.c: 253:  OLED_print_xy(5, 1, " inch \003");
 10110  2F33  0140               	movlb	0	; select bank0
 10111  2F34  01AD               	clrf	OLED_print_xy@row
 10112  2F35  0AAD               	incf	OLED_print_xy@row,f
 10113  2F36  30B8               	movlw	low (STR_47| (0+32768))
 10114  2F37  00AE               	movwf	OLED_print_xy@s
 10115  2F38  30BA               	movlw	high (STR_47| (0+32768))
 10116  2F39  00AF               	movwf	OLED_print_xy@s+1
 10117  2F3A  3005               	movlw	5
 10118  2F3B  31B3  2324  31AE   	fcall	_OLED_print_xy
 10119                           
 10120                           ;menu.c: 254:  if (getPB() == PB_SHORT) {
 10121  2F3E  31B1  212C  31AE   	fcall	_getPB
 10122  2F41  3A01               	xorlw	1
 10123  2F42  1D03               	skipz
 10124  2F43  2F48               	goto	l8438
 10125                           
 10126                           ;menu.c: 255:   storeNVM();
 10127  2F44  31AB  2323         	fcall	_storeNVM
 10128                           
 10129                           ;menu.c: 256:   return 0;
 10130  2F46  3000               	movlw	0
 10131  2F47  0008               	return
 10132  2F48                     l8438:	
 10133                           
 10134                           ;menu.c: 259:  return 1;
 10135  2F48  3001               	movlw	1
 10136  2F49  0008               	return
 10137  2F4A                     __end_of_setLensDia:	
 10138                           
 10139                           	psect	text12
 10140  24D8                     __ptext12:	
 10141 ;; *************** function _setOutputPower *****************
 10142 ;; Defined at:
 10143 ;;		line 196 in file "menu.c"
 10144 ;; Parameters:    Size  Location     Type
 10145 ;;		None
 10146 ;; Auto vars:     Size  Location     Type
 10147 ;;  chData          2   44[BANK1 ] PTR struct .
 10148 ;;		 -> data.heater(124), data(166), 
 10149 ;; Return value:  Size  Location     Type
 10150 ;;                  1    wreg      unsigned char 
 10151 ;; Registers used:
 10152 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10153 ;; Tracked objects:
 10154 ;;		On entry : 0/0
 10155 ;;		On exit  : 0/0
 10156 ;;		Unchanged: 0/0
 10157 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10159 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10160 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10161 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10162 ;;Total ram usage:        6 bytes
 10163 ;; Hardware stack levels used:    1
 10164 ;; Hardware stack levels required when called:    7
 10165 ;; This function calls:
 10166 ;;		_OLED_print_xy
 10167 ;;		___fleq
 10168 ;;		___flge
 10169 ;;		___wmul
 10170 ;;		_ftoa
 10171 ;;		_getPB
 10172 ;;		_itoa
 10173 ;;		_returnToPage
 10174 ;;		_spinInput
 10175 ;; This function is called by:
 10176 ;;		_menu
 10177 ;; This function uses a non-reentrant model
 10178 ;;
 10179                           
 10180                           
 10181                           ;psect for function _setOutputPower
 10182  24D8                     _setOutputPower:	
 10183                           
 10184                           ;menu.c: 198:  t_heater *chData = &data.heater[selectedChannel];
 10185                           
 10186                           ;incstack = 0
 10187                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10188  24D8  0141               	movlb	1	; select bank1
 10189  24D9  086B               	movf	_selectedChannel^(0+128),w
 10190  24DA  00C8               	movwf	??_setOutputPower^(0+128)
 10191  24DB  01C9               	clrf	(??_setOutputPower^(0+128)+1)
 10192  24DC  0848               	movf	??_setOutputPower^(0+128),w
 10193  24DD  0140               	movlb	0	; select bank0
 10194  24DE  00AD               	movwf	___wmul@multiplier
 10195  24DF  0141               	movlb	1	; select bank1
 10196  24E0  0849               	movf	(??_setOutputPower+1)^(0+128),w
 10197  24E1  0140               	movlb	0	; select bank0
 10198  24E2  00AE               	movwf	___wmul@multiplier+1
 10199  24E3  301F               	movlw	31
 10200  24E4  00AF               	movwf	___wmul@multiplicand
 10201  24E5  3000               	movlw	0
 10202  24E6  00B0               	movwf	___wmul@multiplicand+1
 10203  24E7  31B1  2161  31A4   	fcall	___wmul
 10204  24EA  3074               	movlw	116
 10205  24EB  0141               	movlb	1	; select bank1
 10206  24EC  00CA               	movwf	(??_setOutputPower+2)^(0+128)
 10207  24ED  3027               	movlw	39
 10208  24EE  00CB               	movwf	((??_setOutputPower+2)^(0+128)+1)
 10209  24EF  0140               	movlb	0	; select bank0
 10210  24F0  082D               	movf	?___wmul,w
 10211  24F1  0141               	movlb	1	; select bank1
 10212  24F2  074A               	addwf	(??_setOutputPower+2)^(0+128),w
 10213  24F3  00CC               	movwf	setOutputPower@chData^(0+128)
 10214  24F4  0140               	movlb	0	; select bank0
 10215  24F5  082E               	movf	?___wmul+1,w
 10216  24F6  0141               	movlb	1	; select bank1
 10217  24F7  3D4B               	addwfc	(??_setOutputPower+3)^(0+128),w
 10218  24F8  00CD               	movwf	(setOutputPower@chData+1)^(0+128)
 10219                           
 10220                           ;menu.c: 200:  returnToPage(0);
 10221  24F9  3000               	movlw	0
 10222  24FA  31B3  2356  31A4   	fcall	_returnToPage
 10223                           
 10224                           ;menu.c: 202:  if ((chData->status == CH_ENABLED) || (chData->status == CH_DISABLED)) {
 10225  24FD  0141               	movlb	1	; select bank1
 10226  24FE  084C               	movf	setOutputPower@chData^(0+128),w
 10227  24FF  0086               	movwf	6
 10228  2500  084D               	movf	(setOutputPower@chData+1)^(0+128),w
 10229  2501  0087               	movwf	7
 10230  2502  315E               	addfsr 1,30
 10231  2503  0301               	decf	1,w
 10232  2504  1903               	btfsc	3,2
 10233  2505  2D0E               	goto	l8352
 10234  2506  084C               	movf	setOutputPower@chData^(0+128),w
 10235  2507  0086               	movwf	6
 10236  2508  084D               	movf	(setOutputPower@chData+1)^(0+128),w
 10237  2509  0087               	movwf	7
 10238  250A  315E               	addfsr 1,30
 10239  250B  0801               	movf	1,w
 10240  250C  1D03               	btfss	3,2
 10241  250D  2E19               	goto	l8386
 10242  250E                     l8352:	
 10243                           
 10244                           ;menu.c: 204:   if (g_screenRefresh)
 10245  250E  086D               	movf	_g_screenRefresh^(0+128),w
 10246  250F  1903               	btfsc	3,2
 10247  2510  2D1B               	goto	l8356
 10248                           
 10249                           ;menu.c: 205:    OLED_print_xy(0, 0, "Output power");
 10250  2511  0140               	movlb	0	; select bank0
 10251  2512  01AD               	clrf	OLED_print_xy@row
 10252  2513  307A               	movlw	low (STR_22| (0+32768))
 10253  2514  00AE               	movwf	OLED_print_xy@s
 10254  2515  30BA               	movlw	high (STR_22| (0+32768))
 10255  2516  00AF               	movwf	OLED_print_xy@s+1
 10256  2517  3000               	movlw	0
 10257  2518  31B3  2324  31A4   	fcall	_OLED_print_xy
 10258  251B                     l8356:	
 10259                           
 10260                           ;menu.c: 206:   spinInput(&chData->Pset, -0.25, chData->Pmax, 0.25);
 10261  251B  0141               	movlb	1	; select bank1
 10262  251C  084C               	movf	setOutputPower@chData^(0+128),w
 10263  251D  3E10               	addlw	16
 10264  251E  00B9               	movwf	spinInput@input^(0+128)
 10265  251F  3000               	movlw	0
 10266  2520  3D4D               	addwfc	(setOutputPower@chData+1)^(0+128),w
 10267  2521  00BA               	movwf	(spinInput@input+1)^(0+128)
 10268  2522  30BE               	movlw	190
 10269  2523  00BE               	movwf	(spinInput@min+3)^(0+128)
 10270  2524  3080               	movlw	128
 10271  2525  00BD               	movwf	(spinInput@min+2)^(0+128)
 10272  2526  3000               	movlw	0
 10273  2527  00BC               	movwf	(spinInput@min+1)^(0+128)
 10274  2528  3000               	movlw	0
 10275  2529  00BB               	movwf	spinInput@min^(0+128)
 10276  252A  084C               	movf	setOutputPower@chData^(0+128),w
 10277  252B  0086               	movwf	6
 10278  252C  084D               	movf	(setOutputPower@chData+1)^(0+128),w
 10279  252D  0087               	movwf	7
 10280  252E  3144               	addfsr 1,4
 10281  252F  3F40               	moviw [0]fsr1
 10282  2530  00BF               	movwf	spinInput@max^(0+128)
 10283  2531  3F41               	moviw [1]fsr1
 10284  2532  00C0               	movwf	(spinInput@max+1)^(0+128)
 10285  2533  3F42               	moviw [2]fsr1
 10286  2534  00C1               	movwf	(spinInput@max+2)^(0+128)
 10287  2535  3F43               	moviw [3]fsr1
 10288  2536  00C2               	movwf	(spinInput@max+3)^(0+128)
 10289  2537  303E               	movlw	62
 10290  2538  00C6               	movwf	(spinInput@step+3)^(0+128)
 10291  2539  3080               	movlw	128
 10292  253A  00C5               	movwf	(spinInput@step+2)^(0+128)
 10293  253B  3000               	movlw	0
 10294  253C  00C4               	movwf	(spinInput@step+1)^(0+128)
 10295  253D  3000               	movlw	0
 10296  253E  00C3               	movwf	spinInput@step^(0+128)
 10297  253F  31AC  24C6  31A4   	fcall	_spinInput
 10298                           
 10299                           ;menu.c: 207:   if (chData->Pset == 0) {
 10300  2542  0141               	movlb	1	; select bank1
 10301  2543  084C               	movf	setOutputPower@chData^(0+128),w
 10302  2544  0086               	movwf	6
 10303  2545  084D               	movf	(setOutputPower@chData+1)^(0+128),w
 10304  2546  0087               	movwf	7
 10305  2547  3150               	addfsr 1,16
 10306  2548  3F40               	moviw [0]fsr1
 10307  2549  0140               	movlb	0	; select bank0
 10308  254A  00A0               	movwf	___fleq@ff1
 10309  254B  3F41               	moviw [1]fsr1
 10310  254C  00A1               	movwf	___fleq@ff1+1
 10311  254D  3F42               	moviw [2]fsr1
 10312  254E  00A2               	movwf	___fleq@ff1+2
 10313  254F  3F43               	moviw [3]fsr1
 10314  2550  00A3               	movwf	___fleq@ff1+3
 10315  2551  3000               	movlw	0
 10316  2552  00A7               	movwf	___fleq@ff2+3
 10317  2553  3000               	movlw	0
 10318  2554  00A6               	movwf	___fleq@ff2+2
 10319  2555  3000               	movlw	0
 10320  2556  00A5               	movwf	___fleq@ff2+1
 10321  2557  3000               	movlw	0
 10322  2558  00A4               	movwf	___fleq@ff2
 10323  2559  31B5  25FA  31A4   	fcall	___fleq
 10324  255C  1C03               	btfss	3,0
 10325  255D  2D91               	goto	l8368
 10326                           
 10327                           ;menu.c: 208:    itoa(str, selectedChannel + 1, 1);
 10328  255E  30E6               	movlw	low _str
 10329  255F  0140               	movlb	0	; select bank0
 10330  2560  00A9               	movwf	itoa@str
 10331  2561  3001               	movlw	high _str
 10332  2562  00AA               	movwf	itoa@str+1
 10333  2563  0141               	movlb	1	; select bank1
 10334  2564  086B               	movf	_selectedChannel^(0+128),w
 10335  2565  3E01               	addlw	1
 10336  2566  00C8               	movwf	??_setOutputPower^(0+128)
 10337  2567  0848               	movf	??_setOutputPower^(0+128),w
 10338  2568  0140               	movlb	0	; select bank0
 10339  2569  00AB               	movwf	itoa@value
 10340  256A  01AC               	clrf	itoa@width
 10341  256B  0AAC               	incf	itoa@width,f
 10342  256C  31B6  26D8  31A4   	fcall	_itoa
 10343                           
 10344                           ;menu.c: 209:    OLED_print_xy(0, 1, "\004Ch. ");
 10345  256F  0140               	movlb	0	; select bank0
 10346  2570  01AD               	clrf	OLED_print_xy@row
 10347  2571  0AAD               	incf	OLED_print_xy@row,f
 10348  2572  3013               	movlw	low (STR_37| (0+32768))
 10349  2573  00AE               	movwf	OLED_print_xy@s
 10350  2574  30BB               	movlw	high (STR_37| (0+32768))
 10351  2575  00AF               	movwf	OLED_print_xy@s+1
 10352  2576  3000               	movlw	0
 10353  2577  31B3  2324  31A4   	fcall	_OLED_print_xy
 10354                           
 10355                           ;menu.c: 210:    OLED_print_xy(5, 1, str);
 10356  257A  0140               	movlb	0	; select bank0
 10357  257B  01AD               	clrf	OLED_print_xy@row
 10358  257C  0AAD               	incf	OLED_print_xy@row,f
 10359  257D  30E6               	movlw	low _str
 10360  257E  00AE               	movwf	OLED_print_xy@s
 10361  257F  3001               	movlw	high _str
 10362  2580  00AF               	movwf	OLED_print_xy@s+1
 10363  2581  3005               	movlw	5
 10364  2582  31B3  2324  31A4   	fcall	_OLED_print_xy
 10365                           
 10366                           ;menu.c: 211:    OLED_print_xy(6, 1, " off \003");
 10367  2585  0140               	movlb	0	; select bank0
 10368  2586  01AD               	clrf	OLED_print_xy@row
 10369  2587  0AAD               	incf	OLED_print_xy@row,f
 10370  2588  30F0               	movlw	low (STR_38| (0+32768))
 10371  2589  00AE               	movwf	OLED_print_xy@s
 10372  258A  30BA               	movlw	high (STR_38| (0+32768))
 10373  258B  00AF               	movwf	OLED_print_xy@s+1
 10374  258C  3006               	movlw	6
 10375  258D  31B3  2324  31A4   	fcall	_OLED_print_xy
 10376                           
 10377                           ;menu.c: 212:   } else if (chData->Pset < 0) {
 10378  2590  2E56               	goto	l8398
 10379  2591                     l8368:	
 10380  2591  0141               	movlb	1	; select bank1
 10381  2592  084C               	movf	setOutputPower@chData^(0+128),w
 10382  2593  0086               	movwf	6
 10383  2594  084D               	movf	(setOutputPower@chData+1)^(0+128),w
 10384  2595  0087               	movwf	7
 10385  2596  3150               	addfsr 1,16
 10386  2597  3F40               	moviw [0]fsr1
 10387  2598  00AD               	movwf	___flge@ff1^(0+128)
 10388  2599  3F41               	moviw [1]fsr1
 10389  259A  00AE               	movwf	(___flge@ff1+1)^(0+128)
 10390  259B  3F42               	moviw [2]fsr1
 10391  259C  00AF               	movwf	(___flge@ff1+2)^(0+128)
 10392  259D  3F43               	moviw [3]fsr1
 10393  259E  00B0               	movwf	(___flge@ff1+3)^(0+128)
 10394  259F  3000               	movlw	0
 10395  25A0  00B4               	movwf	(___flge@ff2+3)^(0+128)
 10396  25A1  3000               	movlw	0
 10397  25A2  00B3               	movwf	(___flge@ff2+2)^(0+128)
 10398  25A3  3000               	movlw	0
 10399  25A4  00B2               	movwf	(___flge@ff2+1)^(0+128)
 10400  25A5  3000               	movlw	0
 10401  25A6  00B1               	movwf	___flge@ff2^(0+128)
 10402  25A7  31AA  2227  31A4   	fcall	___flge
 10403  25AA  1803               	btfsc	3,0
 10404  25AB  2DDF               	goto	l8378
 10405                           
 10406                           ;menu.c: 213:    itoa(str, selectedChannel + 1, 1);
 10407  25AC  30E6               	movlw	low _str
 10408  25AD  0140               	movlb	0	; select bank0
 10409  25AE  00A9               	movwf	itoa@str
 10410  25AF  3001               	movlw	high _str
 10411  25B0  00AA               	movwf	itoa@str+1
 10412  25B1  0141               	movlb	1	; select bank1
 10413  25B2  086B               	movf	_selectedChannel^(0+128),w
 10414  25B3  3E01               	addlw	1
 10415  25B4  00C8               	movwf	??_setOutputPower^(0+128)
 10416  25B5  0848               	movf	??_setOutputPower^(0+128),w
 10417  25B6  0140               	movlb	0	; select bank0
 10418  25B7  00AB               	movwf	itoa@value
 10419  25B8  01AC               	clrf	itoa@width
 10420  25B9  0AAC               	incf	itoa@width,f
 10421  25BA  31B6  26D8  31A4   	fcall	_itoa
 10422                           
 10423                           ;menu.c: 214:    OLED_print_xy(0, 1, "\004Ch. ");
 10424  25BD  0140               	movlb	0	; select bank0
 10425  25BE  01AD               	clrf	OLED_print_xy@row
 10426  25BF  0AAD               	incf	OLED_print_xy@row,f
 10427  25C0  3013               	movlw	low (STR_37| (0+32768))
 10428  25C1  00AE               	movwf	OLED_print_xy@s
 10429  25C2  30BB               	movlw	high (STR_37| (0+32768))
 10430  25C3  00AF               	movwf	OLED_print_xy@s+1
 10431  25C4  3000               	movlw	0
 10432  25C5  31B3  2324  31A4   	fcall	_OLED_print_xy
 10433                           
 10434                           ;menu.c: 215:    OLED_print_xy(5, 1, str);
 10435  25C8  0140               	movlb	0	; select bank0
 10436  25C9  01AD               	clrf	OLED_print_xy@row
 10437  25CA  0AAD               	incf	OLED_print_xy@row,f
 10438  25CB  30E6               	movlw	low _str
 10439  25CC  00AE               	movwf	OLED_print_xy@s
 10440  25CD  3001               	movlw	high _str
 10441  25CE  00AF               	movwf	OLED_print_xy@s+1
 10442  25CF  3005               	movlw	5
 10443  25D0  31B3  2324  31A4   	fcall	_OLED_print_xy
 10444                           
 10445                           ;menu.c: 216:    OLED_print_xy(6, 1, " auto\003");
 10446  25D3  0140               	movlb	0	; select bank0
 10447  25D4  01AD               	clrf	OLED_print_xy@row
 10448  25D5  0AAD               	incf	OLED_print_xy@row,f
 10449  25D6  30F7               	movlw	low (STR_40| (0+32768))
 10450  25D7  00AE               	movwf	OLED_print_xy@s
 10451  25D8  30BA               	movlw	high (STR_40| (0+32768))
 10452  25D9  00AF               	movwf	OLED_print_xy@s+1
 10453  25DA  3006               	movlw	6
 10454  25DB  31B3  2324  31A4   	fcall	_OLED_print_xy
 10455                           
 10456                           ;menu.c: 217:   } else {
 10457  25DE  2E56               	goto	l8398
 10458  25DF                     l8378:	
 10459                           
 10460                           ;menu.c: 218:    OLED_print_xy(0, 1, "\004");
 10461  25DF  0140               	movlb	0	; select bank0
 10462  25E0  01AD               	clrf	OLED_print_xy@row
 10463  25E1  0AAD               	incf	OLED_print_xy@row,f
 10464  25E2  3003               	movlw	low ((STR_54+5)| (0+32768))
 10465  25E3  00AE               	movwf	OLED_print_xy@s
 10466  25E4  30BB               	movlw	high ((STR_54+5)| (0+32768))
 10467  25E5  00AF               	movwf	OLED_print_xy@s+1
 10468  25E6  3000               	movlw	0
 10469  25E7  31B3  2324  31A4   	fcall	_OLED_print_xy
 10470                           
 10471                           ;menu.c: 219:    ftoa(str, chData->Pset, 4, 1);
 10472  25EA  0141               	movlb	1	; select bank1
 10473  25EB  084C               	movf	setOutputPower@chData^(0+128),w
 10474  25EC  0086               	movwf	6
 10475  25ED  084D               	movf	(setOutputPower@chData+1)^(0+128),w
 10476  25EE  0087               	movwf	7
 10477  25EF  3150               	addfsr 1,16
 10478  25F0  3F40               	moviw [0]fsr1
 10479  25F1  00B9               	movwf	ftoa@fValue^(0+128)
 10480  25F2  3F41               	moviw [1]fsr1
 10481  25F3  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10482  25F4  3F42               	moviw [2]fsr1
 10483  25F5  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10484  25F6  3F43               	moviw [3]fsr1
 10485  25F7  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10486  25F8  3004               	movlw	4
 10487  25F9  00C8               	movwf	??_setOutputPower^(0+128)
 10488  25FA  0848               	movf	??_setOutputPower^(0+128),w
 10489  25FB  00BD               	movwf	ftoa@width^(0+128)
 10490  25FC  01BE               	clrf	ftoa@prec^(0+128)
 10491  25FD  0ABE               	incf	ftoa@prec^(0+128),f
 10492  25FE  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 10493  25FF  31A2  2200  31A4   	fcall	_ftoa
 10494                           
 10495                           ;menu.c: 220:    OLED_print_xy(1, 1, str);
 10496  2602  0140               	movlb	0	; select bank0
 10497  2603  01AD               	clrf	OLED_print_xy@row
 10498  2604  0AAD               	incf	OLED_print_xy@row,f
 10499  2605  30E6               	movlw	low _str
 10500  2606  00AE               	movwf	OLED_print_xy@s
 10501  2607  3001               	movlw	high _str
 10502  2608  00AF               	movwf	OLED_print_xy@s+1
 10503  2609  3001               	movlw	1
 10504  260A  31B3  2324  31A4   	fcall	_OLED_print_xy
 10505                           
 10506                           ;menu.c: 221:    OLED_print_xy(5, 1, "W man.\003");
 10507  260D  0140               	movlb	0	; select bank0
 10508  260E  01AD               	clrf	OLED_print_xy@row
 10509  260F  0AAD               	incf	OLED_print_xy@row,f
 10510  2610  30C0               	movlw	low (STR_42| (0+32768))
 10511  2611  00AE               	movwf	OLED_print_xy@s
 10512  2612  30BA               	movlw	high (STR_42| (0+32768))
 10513  2613  00AF               	movwf	OLED_print_xy@s+1
 10514  2614  3005               	movlw	5
 10515  2615  31B3  2324  31A4   	fcall	_OLED_print_xy
 10516  2618  2E56               	goto	l8398
 10517  2619                     l8386:	
 10518  2619  084C               	movf	setOutputPower@chData^(0+128),w
 10519  261A  0086               	movwf	6
 10520  261B  084D               	movf	(setOutputPower@chData+1)^(0+128),w
 10521  261C  0087               	movwf	7
 10522  261D  315E               	addfsr 1,30
 10523  261E  3004               	movlw	4
 10524  261F  0601               	xorwf	1,w
 10525  2620  1903               	btfsc	3,2
 10526  2621  2E2B               	goto	l8390
 10527  2622  084C               	movf	setOutputPower@chData^(0+128),w
 10528  2623  0086               	movwf	6
 10529  2624  084D               	movf	(setOutputPower@chData+1)^(0+128),w
 10530  2625  0087               	movwf	7
 10531  2626  315E               	addfsr 1,30
 10532  2627  3003               	movlw	3
 10533  2628  0601               	xorwf	1,w
 10534  2629  1D03               	btfss	3,2
 10535  262A  2E58               	goto	l8404
 10536  262B                     l8390:	
 10537                           
 10538                           ;menu.c: 226:   if (g_screenRefresh) {
 10539  262B  086D               	movf	_g_screenRefresh^(0+128),w
 10540  262C  1903               	btfsc	3,2
 10541  262D  2E43               	goto	l8394
 10542                           
 10543                           ;menu.c: 227:    OLED_print_xy(0, 0, "Hold button ");
 10544  262E  0140               	movlb	0	; select bank0
 10545  262F  01AD               	clrf	OLED_print_xy@row
 10546  2630  302C               	movlw	low (STR_43| (0+32768))
 10547  2631  00AE               	movwf	OLED_print_xy@s
 10548  2632  30BA               	movlw	high (STR_43| (0+32768))
 10549  2633  00AF               	movwf	OLED_print_xy@s+1
 10550  2634  3000               	movlw	0
 10551  2635  31B3  2324  31A4   	fcall	_OLED_print_xy
 10552                           
 10553                           ;menu.c: 228:    OLED_print_xy(0, 1, "to re-enable");
 10554  2638  0140               	movlb	0	; select bank0
 10555  2639  01AD               	clrf	OLED_print_xy@row
 10556  263A  0AAD               	incf	OLED_print_xy@row,f
 10557  263B  3060               	movlw	low (STR_44| (0+32768))
 10558  263C  00AE               	movwf	OLED_print_xy@s
 10559  263D  30BA               	movlw	high (STR_44| (0+32768))
 10560  263E  00AF               	movwf	OLED_print_xy@s+1
 10561  263F  3000               	movlw	0
 10562  2640  31B3  2324  31A4   	fcall	_OLED_print_xy
 10563  2643                     l8394:	
 10564                           
 10565                           ;menu.c: 230:   if (getPB() == PB_LONG)
 10566  2643  31B1  212C  31A4   	fcall	_getPB
 10567  2646  3A02               	xorlw	2
 10568  2647  1D03               	skipz
 10569  2648  2E56               	goto	l8398
 10570                           
 10571                           ;menu.c: 231:    chData->status = CH_UNCHECKED;
 10572  2649  0141               	movlb	1	; select bank1
 10573  264A  084C               	movf	setOutputPower@chData^(0+128),w
 10574  264B  3E1E               	addlw	30
 10575  264C  00C8               	movwf	??_setOutputPower^(0+128)
 10576  264D  3000               	movlw	0
 10577  264E  3D4D               	addwfc	(setOutputPower@chData+1)^(0+128),w
 10578  264F  00C9               	movwf	(??_setOutputPower+1)^(0+128)
 10579  2650  0848               	movf	??_setOutputPower^(0+128),w
 10580  2651  0086               	movwf	6
 10581  2652  0849               	movf	(??_setOutputPower+1)^(0+128),w
 10582  2653  0087               	movwf	7
 10583  2654  3005               	movlw	5
 10584  2655  0081               	movwf	1
 10585  2656                     l8398:	
 10586                           
 10587                           ;menu.c: 232:   return 0;
 10588  2656  3000               	movlw	0
 10589  2657  0008               	return
 10590  2658                     l8404:	
 10591                           
 10592                           ;menu.c: 236:   return 1;
 10593  2658  3001               	movlw	1
 10594  2659  0008               	return
 10595  265A                     __end_of_setOutputPower:	
 10596                           
 10597                           	psect	text13
 10598  265A                     __ptext13:	
 10599 ;; *************** function _channelSetup *****************
 10600 ;; Defined at:
 10601 ;;		line 141 in file "menu.c"
 10602 ;; Parameters:    Size  Location     Type
 10603 ;;		None
 10604 ;; Auto vars:     Size  Location     Type
 10605 ;;  chData          2   43[BANK1 ] PTR struct .
 10606 ;;		 -> data.heater(124), data(166), 
 10607 ;; Return value:  Size  Location     Type
 10608 ;;                  1    wreg      unsigned char 
 10609 ;; Registers used:
 10610 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10611 ;; Tracked objects:
 10612 ;;		On entry : 0/0
 10613 ;;		On exit  : 0/0
 10614 ;;		Unchanged: 0/0
 10615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10617 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10618 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10619 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10620 ;;Total ram usage:        6 bytes
 10621 ;; Hardware stack levels used:    1
 10622 ;; Hardware stack levels required when called:    7
 10623 ;; This function calls:
 10624 ;;		_OLED_print_xy
 10625 ;;		___fleq
 10626 ;;		___flge
 10627 ;;		___wmul
 10628 ;;		_ftoa
 10629 ;;		_itoa
 10630 ;;		_paging
 10631 ;;		_returnToPage
 10632 ;; This function is called by:
 10633 ;;		_menu
 10634 ;; This function uses a non-reentrant model
 10635 ;;
 10636                           
 10637                           
 10638                           ;psect for function _channelSetup
 10639  265A                     _channelSetup:	
 10640                           
 10641                           ;menu.c: 143:  static uint8_t page = 0;;menu.c: 144:  t_heater *chData = &data.heater[se
      +                          lectedChannel];
 10642                           
 10643                           ;incstack = 0
 10644                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10645  265A  0141               	movlb	1	; select bank1
 10646  265B  086B               	movf	_selectedChannel^(0+128),w
 10647  265C  00C7               	movwf	??_channelSetup^(0+128)
 10648  265D  01C8               	clrf	(??_channelSetup^(0+128)+1)
 10649  265E  0847               	movf	??_channelSetup^(0+128),w
 10650  265F  0140               	movlb	0	; select bank0
 10651  2660  00AD               	movwf	___wmul@multiplier
 10652  2661  0141               	movlb	1	; select bank1
 10653  2662  0848               	movf	(??_channelSetup+1)^(0+128),w
 10654  2663  0140               	movlb	0	; select bank0
 10655  2664  00AE               	movwf	___wmul@multiplier+1
 10656  2665  301F               	movlw	31
 10657  2666  00AF               	movwf	___wmul@multiplicand
 10658  2667  3000               	movlw	0
 10659  2668  00B0               	movwf	___wmul@multiplicand+1
 10660  2669  31B1  2161  31A6   	fcall	___wmul
 10661  266C  3074               	movlw	116
 10662  266D  0141               	movlb	1	; select bank1
 10663  266E  00C9               	movwf	(??_channelSetup+2)^(0+128)
 10664  266F  3027               	movlw	39
 10665  2670  00CA               	movwf	((??_channelSetup+2)^(0+128)+1)
 10666  2671  0140               	movlb	0	; select bank0
 10667  2672  082D               	movf	?___wmul,w
 10668  2673  0141               	movlb	1	; select bank1
 10669  2674  0749               	addwf	(??_channelSetup+2)^(0+128),w
 10670  2675  00CB               	movwf	channelSetup@chData^(0+128)
 10671  2676  0140               	movlb	0	; select bank0
 10672  2677  082E               	movf	?___wmul+1,w
 10673  2678  0141               	movlb	1	; select bank1
 10674  2679  3D4A               	addwfc	(??_channelSetup+3)^(0+128),w
 10675  267A  00CC               	movwf	(channelSetup@chData+1)^(0+128)
 10676                           
 10677                           ;menu.c: 146:  returnToPage(page);
 10678  267B  0142               	movlb	2	; select bank2
 10679  267C  0867               	movf	channelSetup@page^(0+256),w
 10680  267D  31B3  2356  31A6   	fcall	_returnToPage
 10681                           
 10682                           ;menu.c: 148:  if ((chData->status == CH_ENABLED) || (chData->status == CH_DISABLED)) {
 10683  2680  0141               	movlb	1	; select bank1
 10684  2681  084B               	movf	channelSetup@chData^(0+128),w
 10685  2682  0086               	movwf	6
 10686  2683  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10687  2684  0087               	movwf	7
 10688  2685  315E               	addfsr 1,30
 10689  2686  0301               	decf	1,w
 10690  2687  1903               	btfsc	3,2
 10691  2688  2E91               	goto	l8292
 10692  2689  084B               	movf	channelSetup@chData^(0+128),w
 10693  268A  0086               	movwf	6
 10694  268B  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10695  268C  0087               	movwf	7
 10696  268D  315E               	addfsr 1,30
 10697  268E  0801               	movf	1,w
 10698  268F  1D03               	btfss	3,2
 10699  2690  2F5C               	goto	l8320
 10700  2691                     l8292:	
 10701                           
 10702                           ;menu.c: 149:   OLED_print_xy(0, 0, "Output power");
 10703  2691  0140               	movlb	0	; select bank0
 10704  2692  01AD               	clrf	OLED_print_xy@row
 10705  2693  307A               	movlw	low (STR_22| (0+32768))
 10706  2694  00AE               	movwf	OLED_print_xy@s
 10707  2695  30BA               	movlw	high (STR_22| (0+32768))
 10708  2696  00AF               	movwf	OLED_print_xy@s+1
 10709  2697  3000               	movlw	0
 10710  2698  31B3  2324  31A6   	fcall	_OLED_print_xy
 10711                           
 10712                           ;menu.c: 150:   if (chData->Pset == 0) {
 10713  269B  0141               	movlb	1	; select bank1
 10714  269C  084B               	movf	channelSetup@chData^(0+128),w
 10715  269D  0086               	movwf	6
 10716  269E  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10717  269F  0087               	movwf	7
 10718  26A0  3150               	addfsr 1,16
 10719  26A1  3F40               	moviw [0]fsr1
 10720  26A2  0140               	movlb	0	; select bank0
 10721  26A3  00A0               	movwf	___fleq@ff1
 10722  26A4  3F41               	moviw [1]fsr1
 10723  26A5  00A1               	movwf	___fleq@ff1+1
 10724  26A6  3F42               	moviw [2]fsr1
 10725  26A7  00A2               	movwf	___fleq@ff1+2
 10726  26A8  3F43               	moviw [3]fsr1
 10727  26A9  00A3               	movwf	___fleq@ff1+3
 10728  26AA  3000               	movlw	0
 10729  26AB  00A7               	movwf	___fleq@ff2+3
 10730  26AC  3000               	movlw	0
 10731  26AD  00A6               	movwf	___fleq@ff2+2
 10732  26AE  3000               	movlw	0
 10733  26AF  00A5               	movwf	___fleq@ff2+1
 10734  26B0  3000               	movlw	0
 10735  26B1  00A4               	movwf	___fleq@ff2
 10736  26B2  31B5  25FA  31A6   	fcall	___fleq
 10737  26B5  1C03               	btfss	3,0
 10738  26B6  2EE5               	goto	l8304
 10739                           
 10740                           ;menu.c: 151:    OLED_print_xy(0, 1, "Ch. ");
 10741  26B7  0140               	movlb	0	; select bank0
 10742  26B8  01AD               	clrf	OLED_print_xy@row
 10743  26B9  0AAD               	incf	OLED_print_xy@row,f
 10744  26BA  3014               	movlw	low ((STR_37+1)| (0+32768))
 10745  26BB  00AE               	movwf	OLED_print_xy@s
 10746  26BC  30BB               	movlw	high ((STR_37+1)| (0+32768))
 10747  26BD  00AF               	movwf	OLED_print_xy@s+1
 10748  26BE  3000               	movlw	0
 10749  26BF  31B3  2324  31A6   	fcall	_OLED_print_xy
 10750                           
 10751                           ;menu.c: 152:    itoa(str, selectedChannel + 1, 1);
 10752  26C2  30E6               	movlw	low _str
 10753  26C3  0140               	movlb	0	; select bank0
 10754  26C4  00A9               	movwf	itoa@str
 10755  26C5  3001               	movlw	high _str
 10756  26C6  00AA               	movwf	itoa@str+1
 10757  26C7  0141               	movlb	1	; select bank1
 10758  26C8  086B               	movf	_selectedChannel^(0+128),w
 10759  26C9  3E01               	addlw	1
 10760  26CA  00C7               	movwf	??_channelSetup^(0+128)
 10761  26CB  0847               	movf	??_channelSetup^(0+128),w
 10762  26CC  0140               	movlb	0	; select bank0
 10763  26CD  00AB               	movwf	itoa@value
 10764  26CE  01AC               	clrf	itoa@width
 10765  26CF  0AAC               	incf	itoa@width,f
 10766  26D0  31B6  26D8  31A6   	fcall	_itoa
 10767                           
 10768                           ;menu.c: 153:    OLED_print_xy(4, 1, str);
 10769  26D3  0140               	movlb	0	; select bank0
 10770  26D4  01AD               	clrf	OLED_print_xy@row
 10771  26D5  0AAD               	incf	OLED_print_xy@row,f
 10772  26D6  30E6               	movlw	low _str
 10773  26D7  00AE               	movwf	OLED_print_xy@s
 10774  26D8  3001               	movlw	high _str
 10775  26D9  00AF               	movwf	OLED_print_xy@s+1
 10776  26DA  3004               	movlw	4
 10777  26DB  31B3  2324  31A6   	fcall	_OLED_print_xy
 10778                           
 10779                           ;menu.c: 154:    OLED_print_xy(5, 1, " off   ");
 10780  26DE  0140               	movlb	0	; select bank0
 10781  26DF  01AD               	clrf	OLED_print_xy@row
 10782  26E0  0AAD               	incf	OLED_print_xy@row,f
 10783  26E1  30D0               	movlw	low (STR_24| (0+32768))
 10784  26E2  00AE               	movwf	OLED_print_xy@s
 10785  26E3  30BA               	movlw	high (STR_24| (0+32768))
 10786  26E4  2F2D               	goto	L3
 10787  26E5                     l8304:	
 10788                           ;menu.c: 155:   } else if (chData->Pset < 0) {
 10789                           
 10790  26E5  0141               	movlb	1	; select bank1
 10791  26E6  084B               	movf	channelSetup@chData^(0+128),w
 10792  26E7  0086               	movwf	6
 10793  26E8  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10794  26E9  0087               	movwf	7
 10795  26EA  3150               	addfsr 1,16
 10796  26EB  3F40               	moviw [0]fsr1
 10797  26EC  00AD               	movwf	___flge@ff1^(0+128)
 10798  26ED  3F41               	moviw [1]fsr1
 10799  26EE  00AE               	movwf	(___flge@ff1+1)^(0+128)
 10800  26EF  3F42               	moviw [2]fsr1
 10801  26F0  00AF               	movwf	(___flge@ff1+2)^(0+128)
 10802  26F1  3F43               	moviw [3]fsr1
 10803  26F2  00B0               	movwf	(___flge@ff1+3)^(0+128)
 10804  26F3  3000               	movlw	0
 10805  26F4  00B4               	movwf	(___flge@ff2+3)^(0+128)
 10806  26F5  3000               	movlw	0
 10807  26F6  00B3               	movwf	(___flge@ff2+2)^(0+128)
 10808  26F7  3000               	movlw	0
 10809  26F8  00B2               	movwf	(___flge@ff2+1)^(0+128)
 10810  26F9  3000               	movlw	0
 10811  26FA  00B1               	movwf	___flge@ff2^(0+128)
 10812  26FB  31AA  2227  31A6   	fcall	___flge
 10813  26FE  1803               	btfsc	3,0
 10814  26FF  2F30               	goto	l8314
 10815                           
 10816                           ;menu.c: 156:    OLED_print_xy(0, 1, "Ch. ");
 10817  2700  0140               	movlb	0	; select bank0
 10818  2701  01AD               	clrf	OLED_print_xy@row
 10819  2702  0AAD               	incf	OLED_print_xy@row,f
 10820  2703  3014               	movlw	low ((STR_37+1)| (0+32768))
 10821  2704  00AE               	movwf	OLED_print_xy@s
 10822  2705  30BB               	movlw	high ((STR_37+1)| (0+32768))
 10823  2706  00AF               	movwf	OLED_print_xy@s+1
 10824  2707  3000               	movlw	0
 10825  2708  31B3  2324  31A6   	fcall	_OLED_print_xy
 10826                           
 10827                           ;menu.c: 157:    itoa(str, selectedChannel + 1, 1);
 10828  270B  30E6               	movlw	low _str
 10829  270C  0140               	movlb	0	; select bank0
 10830  270D  00A9               	movwf	itoa@str
 10831  270E  3001               	movlw	high _str
 10832  270F  00AA               	movwf	itoa@str+1
 10833  2710  0141               	movlb	1	; select bank1
 10834  2711  086B               	movf	_selectedChannel^(0+128),w
 10835  2712  3E01               	addlw	1
 10836  2713  00C7               	movwf	??_channelSetup^(0+128)
 10837  2714  0847               	movf	??_channelSetup^(0+128),w
 10838  2715  0140               	movlb	0	; select bank0
 10839  2716  00AB               	movwf	itoa@value
 10840  2717  01AC               	clrf	itoa@width
 10841  2718  0AAC               	incf	itoa@width,f
 10842  2719  31B6  26D8  31A6   	fcall	_itoa
 10843                           
 10844                           ;menu.c: 158:    OLED_print_xy(4, 1, str);
 10845  271C  0140               	movlb	0	; select bank0
 10846  271D  01AD               	clrf	OLED_print_xy@row
 10847  271E  0AAD               	incf	OLED_print_xy@row,f
 10848  271F  30E6               	movlw	low _str
 10849  2720  00AE               	movwf	OLED_print_xy@s
 10850  2721  3001               	movlw	high _str
 10851  2722  00AF               	movwf	OLED_print_xy@s+1
 10852  2723  3004               	movlw	4
 10853  2724  31B3  2324  31A6   	fcall	_OLED_print_xy
 10854                           
 10855                           ;menu.c: 159:    OLED_print_xy(5, 1, " auto  ");
 10856  2727  0140               	movlb	0	; select bank0
 10857  2728  01AD               	clrf	OLED_print_xy@row
 10858  2729  0AAD               	incf	OLED_print_xy@row,f
 10859  272A  30E0               	movlw	low (STR_26| (0+32768))
 10860  272B  00AE               	movwf	OLED_print_xy@s
 10861  272C  30BA               	movlw	high (STR_26| (0+32768))
 10862  272D                     L3:	
 10863  272D  00AF               	movwf	OLED_print_xy@s+1
 10864  272E  3005               	movlw	5
 10865  272F  2FB4               	goto	L2
 10866  2730                     l8314:	
 10867                           ;menu.c: 160:   } else {
 10868                           
 10869                           
 10870                           ;menu.c: 161:    ftoa(str, chData->Pset, 4, 1);
 10871  2730  0141               	movlb	1	; select bank1
 10872  2731  084B               	movf	channelSetup@chData^(0+128),w
 10873  2732  0086               	movwf	6
 10874  2733  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10875  2734  0087               	movwf	7
 10876  2735  3150               	addfsr 1,16
 10877  2736  3F40               	moviw [0]fsr1
 10878  2737  00B9               	movwf	ftoa@fValue^(0+128)
 10879  2738  3F41               	moviw [1]fsr1
 10880  2739  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 10881  273A  3F42               	moviw [2]fsr1
 10882  273B  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 10883  273C  3F43               	moviw [3]fsr1
 10884  273D  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 10885  273E  3004               	movlw	4
 10886  273F  00C7               	movwf	??_channelSetup^(0+128)
 10887  2740  0847               	movf	??_channelSetup^(0+128),w
 10888  2741  00BD               	movwf	ftoa@width^(0+128)
 10889  2742  01BE               	clrf	ftoa@prec^(0+128)
 10890  2743  0ABE               	incf	ftoa@prec^(0+128),f
 10891  2744  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 10892  2745  31A2  2200  31A6   	fcall	_ftoa
 10893                           
 10894                           ;menu.c: 162:    OLED_print_xy(0, 1, str);
 10895  2748  0140               	movlb	0	; select bank0
 10896  2749  01AD               	clrf	OLED_print_xy@row
 10897  274A  0AAD               	incf	OLED_print_xy@row,f
 10898  274B  30E6               	movlw	low _str
 10899  274C  00AE               	movwf	OLED_print_xy@s
 10900  274D  3001               	movlw	high _str
 10901  274E  00AF               	movwf	OLED_print_xy@s+1
 10902  274F  3000               	movlw	0
 10903  2750  31B3  2324  31A6   	fcall	_OLED_print_xy
 10904                           
 10905                           ;menu.c: 163:    OLED_print_xy(4, 1, "W manual");
 10906  2753  0140               	movlb	0	; select bank0
 10907  2754  01AD               	clrf	OLED_print_xy@row
 10908  2755  0AAD               	incf	OLED_print_xy@row,f
 10909  2756  30AF               	movlw	low (STR_17| (0+32768))
 10910  2757  00AE               	movwf	OLED_print_xy@s
 10911  2758  30BA               	movlw	high (STR_17| (0+32768))
 10912  2759  00AF               	movwf	OLED_print_xy@s+1
 10913  275A  3004               	movlw	4
 10914  275B  2FB4               	goto	L2
 10915  275C                     l8320:	
 10916  275C  084B               	movf	channelSetup@chData^(0+128),w
 10917  275D  0086               	movwf	6
 10918  275E  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10919  275F  0087               	movwf	7
 10920  2760  315E               	addfsr 1,30
 10921  2761  3002               	movlw	2
 10922  2762  0601               	xorwf	1,w
 10923  2763  1D03               	btfss	3,2
 10924  2764  2F76               	goto	l8324
 10925                           
 10926                           ;menu.c: 168:   OLED_print_xy(0, 0, "Not         ");
 10927  2765  0140               	movlb	0	; select bank0
 10928  2766  01AD               	clrf	OLED_print_xy@row
 10929  2767  309D               	movlw	low (STR_28| (0+32768))
 10930  2768  00AE               	movwf	OLED_print_xy@s
 10931  2769  30B9               	movlw	high (STR_28| (0+32768))
 10932  276A  00AF               	movwf	OLED_print_xy@s+1
 10933  276B  3000               	movlw	0
 10934  276C  31B3  2324  31A6   	fcall	_OLED_print_xy
 10935                           
 10936                           ;menu.c: 169:   OLED_print_xy(0, 1, "connected   ");
 10937  276F  0140               	movlb	0	; select bank0
 10938  2770  01AD               	clrf	OLED_print_xy@row
 10939  2771  0AAD               	incf	OLED_print_xy@row,f
 10940  2772  3005               	movlw	low (STR_29| (0+32768))
 10941  2773  00AE               	movwf	OLED_print_xy@s
 10942  2774  30BA               	movlw	high (STR_29| (0+32768))
 10943  2775  2FB2               	goto	L4
 10944  2776                     l8324:	
 10945                           ;menu.c: 171:  } else if (chData->status == CH_UNCHECKED) {
 10946                           
 10947  2776  084B               	movf	channelSetup@chData^(0+128),w
 10948  2777  0086               	movwf	6
 10949  2778  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10950  2779  0087               	movwf	7
 10951  277A  315E               	addfsr 1,30
 10952  277B  3005               	movlw	5
 10953  277C  0601               	xorwf	1,w
 10954  277D  1D03               	btfss	3,2
 10955  277E  2F90               	goto	l8328
 10956                           
 10957                           ;menu.c: 173:   OLED_print_xy(0, 0, "Testing     ");
 10958  277F  0140               	movlb	0	; select bank0
 10959  2780  01AD               	clrf	OLED_print_xy@row
 10960  2781  30B7               	movlw	low (STR_30| (0+32768))
 10961  2782  00AE               	movwf	OLED_print_xy@s
 10962  2783  30B9               	movlw	high (STR_30| (0+32768))
 10963  2784  00AF               	movwf	OLED_print_xy@s+1
 10964  2785  3000               	movlw	0
 10965  2786  31B3  2324  31A6   	fcall	_OLED_print_xy
 10966                           
 10967                           ;menu.c: 174:   OLED_print_xy(0, 1, "heater...   ");
 10968  2789  0140               	movlb	0	; select bank0
 10969  278A  01AD               	clrf	OLED_print_xy@row
 10970  278B  0AAD               	incf	OLED_print_xy@row,f
 10971  278C  30EB               	movlw	low (STR_31| (0+32768))
 10972  278D  00AE               	movwf	OLED_print_xy@s
 10973  278E  30B9               	movlw	high (STR_31| (0+32768))
 10974  278F  2FB2               	goto	L4
 10975  2790                     l8328:	
 10976                           ;menu.c: 176:  } else if ((chData->status == CH_OVERCURRENT) || (chData->status == CH_SH
      +                          ORTED)) {
 10977                           
 10978  2790  084B               	movf	channelSetup@chData^(0+128),w
 10979  2791  0086               	movwf	6
 10980  2792  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10981  2793  0087               	movwf	7
 10982  2794  315E               	addfsr 1,30
 10983  2795  3004               	movlw	4
 10984  2796  0601               	xorwf	1,w
 10985  2797  1903               	btfsc	3,2
 10986  2798  2FA2               	goto	l8332
 10987  2799  084B               	movf	channelSetup@chData^(0+128),w
 10988  279A  0086               	movwf	6
 10989  279B  084C               	movf	(channelSetup@chData+1)^(0+128),w
 10990  279C  0087               	movwf	7
 10991  279D  315E               	addfsr 1,30
 10992  279E  3003               	movlw	3
 10993  279F  0601               	xorwf	1,w
 10994  27A0  1D03               	btfss	3,2
 10995  27A1  2FB7               	goto	l471
 10996  27A2                     l8332:	
 10997                           
 10998                           ;menu.c: 178:   OLED_print_xy(0, 0, "Reset       ");
 10999  27A2  0140               	movlb	0	; select bank0
 11000  27A3  01AD               	clrf	OLED_print_xy@row
 11001  27A4  30AA               	movlw	low (STR_32| (0+32768))
 11002  27A5  00AE               	movwf	OLED_print_xy@s
 11003  27A6  30B9               	movlw	high (STR_32| (0+32768))
 11004  27A7  00AF               	movwf	OLED_print_xy@s+1
 11005  27A8  3000               	movlw	0
 11006  27A9  31B3  2324  31A6   	fcall	_OLED_print_xy
 11007                           
 11008                           ;menu.c: 179:   OLED_print_xy(0, 1, "channel     ");
 11009  27AC  0140               	movlb	0	; select bank0
 11010  27AD  01AD               	clrf	OLED_print_xy@row
 11011  27AE  0AAD               	incf	OLED_print_xy@row,f
 11012  27AF  30C4               	movlw	low (STR_33| (0+32768))
 11013  27B0  00AE               	movwf	OLED_print_xy@s
 11014  27B1  30B9               	movlw	high (STR_33| (0+32768))
 11015  27B2                     L4:	
 11016  27B2  00AF               	movwf	OLED_print_xy@s+1
 11017  27B3  3000               	movlw	0
 11018  27B4                     L2:	
 11019  27B4  31B3  2324  31A6   	fcall	_OLED_print_xy
 11020  27B7                     l471:	
 11021                           
 11022                           ;menu.c: 183:  OLED_print_xy(12, 0, "Lens diam.  ");
 11023  27B7  0140               	movlb	0	; select bank0
 11024  27B8  01AD               	clrf	OLED_print_xy@row
 11025  27B9  301F               	movlw	low (STR_34| (0+32768))
 11026  27BA  00AE               	movwf	OLED_print_xy@s
 11027  27BB  30BA               	movlw	high (STR_34| (0+32768))
 11028  27BC  00AF               	movwf	OLED_print_xy@s+1
 11029  27BD  300C               	movlw	12
 11030  27BE  31B3  2324  31A6   	fcall	_OLED_print_xy
 11031                           
 11032                           ;menu.c: 184:  ftoa(str, chData->lensDia, 4, 1);
 11033  27C1  0141               	movlb	1	; select bank1
 11034  27C2  084B               	movf	channelSetup@chData^(0+128),w
 11035  27C3  0086               	movwf	6
 11036  27C4  084C               	movf	(channelSetup@chData+1)^(0+128),w
 11037  27C5  0087               	movwf	7
 11038  27C6  3155               	addfsr 1,21
 11039  27C7  3F40               	moviw [0]fsr1
 11040  27C8  00B9               	movwf	ftoa@fValue^(0+128)
 11041  27C9  3F41               	moviw [1]fsr1
 11042  27CA  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11043  27CB  3F42               	moviw [2]fsr1
 11044  27CC  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11045  27CD  3F43               	moviw [3]fsr1
 11046  27CE  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11047  27CF  3004               	movlw	4
 11048  27D0  00C7               	movwf	??_channelSetup^(0+128)
 11049  27D1  0847               	movf	??_channelSetup^(0+128),w
 11050  27D2  00BD               	movwf	ftoa@width^(0+128)
 11051  27D3  01BE               	clrf	ftoa@prec^(0+128)
 11052  27D4  0ABE               	incf	ftoa@prec^(0+128),f
 11053  27D5  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11054  27D6  31A2  2200  31A6   	fcall	_ftoa
 11055                           
 11056                           ;menu.c: 185:  OLED_print_xy(12 + 0, 1, str);
 11057  27D9  0140               	movlb	0	; select bank0
 11058  27DA  01AD               	clrf	OLED_print_xy@row
 11059  27DB  0AAD               	incf	OLED_print_xy@row,f
 11060  27DC  30E6               	movlw	low _str
 11061  27DD  00AE               	movwf	OLED_print_xy@s
 11062  27DE  3001               	movlw	high _str
 11063  27DF  00AF               	movwf	OLED_print_xy@s+1
 11064  27E0  300C               	movlw	12
 11065  27E1  31B3  2324  31A6   	fcall	_OLED_print_xy
 11066                           
 11067                           ;menu.c: 186:  OLED_print_xy(12 + 5, 1, " inch  ");
 11068  27E4  0140               	movlb	0	; select bank0
 11069  27E5  01AD               	clrf	OLED_print_xy@row
 11070  27E6  0AAD               	incf	OLED_print_xy@row,f
 11071  27E7  30D8               	movlw	low (STR_35| (0+32768))
 11072  27E8  00AE               	movwf	OLED_print_xy@s
 11073  27E9  30BA               	movlw	high (STR_35| (0+32768))
 11074  27EA  00AF               	movwf	OLED_print_xy@s+1
 11075  27EB  3011               	movlw	17
 11076  27EC  31B3  2324  31A6   	fcall	_OLED_print_xy
 11077                           
 11078                           ;menu.c: 188:  page = paging(page, 2);
 11079  27EF  3002               	movlw	2
 11080  27F0  0141               	movlb	1	; select bank1
 11081  27F1  00C7               	movwf	??_channelSetup^(0+128)
 11082  27F2  0847               	movf	??_channelSetup^(0+128),w
 11083  27F3  0140               	movlb	0	; select bank0
 11084  27F4  00A7               	movwf	paging@lastPage
 11085  27F5  0142               	movlb	2	; select bank2
 11086  27F6  0867               	movf	channelSetup@page^(0+256),w
 11087  27F7  3187  278D         	fcall	_paging
 11088  27F9  0141               	movlb	1	; select bank1
 11089  27FA  00C8               	movwf	(??_channelSetup+1)^(0+128)
 11090  27FB  0848               	movf	(??_channelSetup+1)^(0+128),w
 11091  27FC  0142               	movlb	2	; select bank2
 11092  27FD  00E7               	movwf	channelSetup@page^(0+256)
 11093                           
 11094                           ;menu.c: 190:  return page;
 11095  27FE  0867               	movf	channelSetup@page^(0+256),w
 11096  27FF  0008               	return
 11097  2800                     __end_of_channelSetup:	
 11098                           
 11099                           	psect	text14
 11100  091A                     __ptext14:	
 11101 ;; *************** function _channelView *****************
 11102 ;; Defined at:
 11103 ;;		line 76 in file "menu.c"
 11104 ;; Parameters:    Size  Location     Type
 11105 ;;		None
 11106 ;; Auto vars:     Size  Location     Type
 11107 ;;  n               1   49[BANK1 ] unsigned char 
 11108 ;; Return value:  Size  Location     Type
 11109 ;;                  1    wreg      unsigned char 
 11110 ;; Registers used:
 11111 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11112 ;; Tracked objects:
 11113 ;;		On entry : 0/0
 11114 ;;		On exit  : 0/0
 11115 ;;		Unchanged: 0/0
 11116 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11117 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11118 ;;      Locals:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11119 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11120 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11121 ;;Total ram usage:       11 bytes
 11122 ;; Hardware stack levels used:    1
 11123 ;; Hardware stack levels required when called:    7
 11124 ;; This function calls:
 11125 ;;		_OLED_print_xy
 11126 ;;		___bmul
 11127 ;;		___wmul
 11128 ;;		_ftoa
 11129 ;;		_itoa
 11130 ;;		_paging
 11131 ;;		_returnToPage
 11132 ;; This function is called by:
 11133 ;;		_menu
 11134 ;; This function uses a non-reentrant model
 11135 ;;
 11136                           
 11137                           
 11138                           ;psect for function _channelView
 11139  091A                     _channelView:	
 11140                           
 11141                           ;menu.c: 78:  static uint8_t page = 0;;menu.c: 79:  uint8_t n;;menu.c: 81:  returnToPage
      +                          (page);
 11142                           
 11143                           ;incstack = 0
 11144                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11145  091A  0142               	movlb	2	; select bank2
 11146  091B  0868               	movf	channelView@page^(0+256),w
 11147  091C  31B3  2356  3189   	fcall	_returnToPage
 11148                           
 11149                           ;menu.c: 82:  if (g_screenRefresh) {
 11150  091F  0141               	movlb	1	; select bank1
 11151  0920  086D               	movf	_g_screenRefresh^(0+128),w
 11152  0921  1903               	btfsc	3,2
 11153  0922  29E2               	goto	l8232
 11154                           
 11155                           ;menu.c: 83:   for (n = 0; n < 4; n++) {
 11156  0923  01D1               	clrf	channelView@n^(0+128)
 11157  0924                     l8208:	
 11158  0924  3004               	movlw	4
 11159  0925  0251               	subwf	channelView@n^(0+128),w
 11160  0926  1803               	btfsc	3,0
 11161  0927  29E2               	goto	l8232
 11162                           
 11163                           ;menu.c: 84:    OLED_print_xy(n * 12 + 0, 0, "Ch ");
 11164  0928  0140               	movlb	0	; select bank0
 11165  0929  01AD               	clrf	OLED_print_xy@row
 11166  092A  3025               	movlw	low (STR_10| (0+32768))
 11167  092B  00AE               	movwf	OLED_print_xy@s
 11168  092C  30BB               	movlw	high (STR_10| (0+32768))
 11169  092D  00AF               	movwf	OLED_print_xy@s+1
 11170  092E  300C               	movlw	12
 11171  092F  0141               	movlb	1	; select bank1
 11172  0930  00C7               	movwf	??_channelView^(0+128)
 11173  0931  0847               	movf	??_channelView^(0+128),w
 11174  0932  0140               	movlb	0	; select bank0
 11175  0933  00A9               	movwf	___bmul@multiplicand
 11176  0934  0141               	movlb	1	; select bank1
 11177  0935  0851               	movf	channelView@n^(0+128),w
 11178  0936  31B1  214F  3189   	fcall	___bmul
 11179  0939  31B3  2324  3189   	fcall	_OLED_print_xy
 11180                           
 11181                           ;menu.c: 85:    itoa(str, n + 1, 1);
 11182  093C  30E6               	movlw	low _str
 11183  093D  0140               	movlb	0	; select bank0
 11184  093E  00A9               	movwf	itoa@str
 11185  093F  3001               	movlw	high _str
 11186  0940  00AA               	movwf	itoa@str+1
 11187  0941  0141               	movlb	1	; select bank1
 11188  0942  0851               	movf	channelView@n^(0+128),w
 11189  0943  3E01               	addlw	1
 11190  0944  00C7               	movwf	??_channelView^(0+128)
 11191  0945  0847               	movf	??_channelView^(0+128),w
 11192  0946  0140               	movlb	0	; select bank0
 11193  0947  00AB               	movwf	itoa@value
 11194  0948  01AC               	clrf	itoa@width
 11195  0949  0AAC               	incf	itoa@width,f
 11196  094A  31B6  26D8  3189   	fcall	_itoa
 11197                           
 11198                           ;menu.c: 86:    OLED_print_xy(n * 12 + 3, 0, str);
 11199  094D  0140               	movlb	0	; select bank0
 11200  094E  01AD               	clrf	OLED_print_xy@row
 11201  094F  30E6               	movlw	low _str
 11202  0950  00AE               	movwf	OLED_print_xy@s
 11203  0951  3001               	movlw	high _str
 11204  0952  00AF               	movwf	OLED_print_xy@s+1
 11205  0953  300C               	movlw	12
 11206  0954  0141               	movlb	1	; select bank1
 11207  0955  00C7               	movwf	??_channelView^(0+128)
 11208  0956  0847               	movf	??_channelView^(0+128),w
 11209  0957  0140               	movlb	0	; select bank0
 11210  0958  00A9               	movwf	___bmul@multiplicand
 11211  0959  0141               	movlb	1	; select bank1
 11212  095A  0851               	movf	channelView@n^(0+128),w
 11213  095B  31B1  214F  3189   	fcall	___bmul
 11214  095E  3E03               	addlw	3
 11215  095F  31B3  2324  3189   	fcall	_OLED_print_xy
 11216                           
 11217                           ;menu.c: 87:    OLED_print_xy(n * 12 + 4, 0, ": ");
 11218  0962  0140               	movlb	0	; select bank0
 11219  0963  01AD               	clrf	OLED_print_xy@row
 11220  0964  3032               	movlw	low (STR_11| (0+32768))
 11221  0965  00AE               	movwf	OLED_print_xy@s
 11222  0966  30BB               	movlw	high (STR_11| (0+32768))
 11223  0967  00AF               	movwf	OLED_print_xy@s+1
 11224  0968  300C               	movlw	12
 11225  0969  0141               	movlb	1	; select bank1
 11226  096A  00C7               	movwf	??_channelView^(0+128)
 11227  096B  0847               	movf	??_channelView^(0+128),w
 11228  096C  0140               	movlb	0	; select bank0
 11229  096D  00A9               	movwf	___bmul@multiplicand
 11230  096E  0141               	movlb	1	; select bank1
 11231  096F  0851               	movf	channelView@n^(0+128),w
 11232  0970  31B1  214F  3189   	fcall	___bmul
 11233  0973  3E04               	addlw	4
 11234  0974  31B3  2324  3189   	fcall	_OLED_print_xy
 11235                           
 11236                           ;menu.c: 88:    ftoa(str, data.heater[n].lensDia, 4, 1);
 11237  0977  0141               	movlb	1	; select bank1
 11238  0978  0851               	movf	channelView@n^(0+128),w
 11239  0979  00C7               	movwf	??_channelView^(0+128)
 11240  097A  01C8               	clrf	(??_channelView^(0+128)+1)
 11241  097B  0847               	movf	??_channelView^(0+128),w
 11242  097C  0140               	movlb	0	; select bank0
 11243  097D  00AD               	movwf	___wmul@multiplier
 11244  097E  0141               	movlb	1	; select bank1
 11245  097F  0848               	movf	(??_channelView+1)^(0+128),w
 11246  0980  0140               	movlb	0	; select bank0
 11247  0981  00AE               	movwf	___wmul@multiplier+1
 11248  0982  301F               	movlw	31
 11249  0983  00AF               	movwf	___wmul@multiplicand
 11250  0984  3000               	movlw	0
 11251  0985  00B0               	movwf	___wmul@multiplicand+1
 11252  0986  31B1  2161  3189   	fcall	___wmul
 11253  0989  3089               	movlw	137
 11254  098A  0141               	movlb	1	; select bank1
 11255  098B  00C9               	movwf	(??_channelView+2)^(0+128)
 11256  098C  3027               	movlw	39
 11257  098D  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11258  098E  0140               	movlb	0	; select bank0
 11259  098F  082D               	movf	?___wmul,w
 11260  0990  0141               	movlb	1	; select bank1
 11261  0991  0749               	addwf	(??_channelView+2)^(0+128),w
 11262  0992  0086               	movwf	6
 11263  0993  0140               	movlb	0	; select bank0
 11264  0994  082E               	movf	?___wmul+1,w
 11265  0995  0141               	movlb	1	; select bank1
 11266  0996  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11267  0997  0087               	movwf	7
 11268  0998  3F40               	moviw [0]fsr1
 11269  0999  00CD               	movwf	_channelView$2771^(0+128)
 11270  099A  3F41               	moviw [1]fsr1
 11271  099B  00CE               	movwf	(_channelView$2771+1)^(0+128)
 11272  099C  3F42               	moviw [2]fsr1
 11273  099D  00CF               	movwf	(_channelView$2771+2)^(0+128)
 11274  099E  3F43               	moviw [3]fsr1
 11275  099F  00D0               	movwf	(_channelView$2771+3)^(0+128)
 11276                           
 11277                           ;menu.c: 88:    ftoa(str, data.heater[n].lensDia, 4, 1);
 11278  09A0  0850               	movf	(_channelView$2771+3)^(0+128),w
 11279  09A1  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11280  09A2  084F               	movf	(_channelView$2771+2)^(0+128),w
 11281  09A3  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11282  09A4  084E               	movf	(_channelView$2771+1)^(0+128),w
 11283  09A5  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11284  09A6  084D               	movf	_channelView$2771^(0+128),w
 11285  09A7  00B9               	movwf	ftoa@fValue^(0+128)
 11286  09A8  3004               	movlw	4
 11287  09A9  00C7               	movwf	??_channelView^(0+128)
 11288  09AA  0847               	movf	??_channelView^(0+128),w
 11289  09AB  00BD               	movwf	ftoa@width^(0+128)
 11290  09AC  01BE               	clrf	ftoa@prec^(0+128)
 11291  09AD  0ABE               	incf	ftoa@prec^(0+128),f
 11292  09AE  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11293  09AF  31A2  2200  3189   	fcall	_ftoa
 11294                           
 11295                           ;menu.c: 89:    OLED_print_xy(n * 12 + 6, 0, str);
 11296  09B2  0140               	movlb	0	; select bank0
 11297  09B3  01AD               	clrf	OLED_print_xy@row
 11298  09B4  30E6               	movlw	low _str
 11299  09B5  00AE               	movwf	OLED_print_xy@s
 11300  09B6  3001               	movlw	high _str
 11301  09B7  00AF               	movwf	OLED_print_xy@s+1
 11302  09B8  300C               	movlw	12
 11303  09B9  0141               	movlb	1	; select bank1
 11304  09BA  00C7               	movwf	??_channelView^(0+128)
 11305  09BB  0847               	movf	??_channelView^(0+128),w
 11306  09BC  0140               	movlb	0	; select bank0
 11307  09BD  00A9               	movwf	___bmul@multiplicand
 11308  09BE  0141               	movlb	1	; select bank1
 11309  09BF  0851               	movf	channelView@n^(0+128),w
 11310  09C0  31B1  214F  3189   	fcall	___bmul
 11311  09C3  3E06               	addlw	6
 11312  09C4  31B3  2324  3189   	fcall	_OLED_print_xy
 11313                           
 11314                           ;menu.c: 90:    OLED_print_xy(n * 12 + 10, 0, "\" ");
 11315  09C7  0140               	movlb	0	; select bank0
 11316  09C8  01AD               	clrf	OLED_print_xy@row
 11317  09C9  302F               	movlw	low (STR_12| (0+32768))
 11318  09CA  00AE               	movwf	OLED_print_xy@s
 11319  09CB  30BB               	movlw	high (STR_12| (0+32768))
 11320  09CC  00AF               	movwf	OLED_print_xy@s+1
 11321  09CD  300C               	movlw	12
 11322  09CE  0141               	movlb	1	; select bank1
 11323  09CF  00C7               	movwf	??_channelView^(0+128)
 11324  09D0  0847               	movf	??_channelView^(0+128),w
 11325  09D1  0140               	movlb	0	; select bank0
 11326  09D2  00A9               	movwf	___bmul@multiplicand
 11327  09D3  0141               	movlb	1	; select bank1
 11328  09D4  0851               	movf	channelView@n^(0+128),w
 11329  09D5  31B1  214F  3189   	fcall	___bmul
 11330  09D8  3E0A               	addlw	10
 11331  09D9  31B3  2324  3189   	fcall	_OLED_print_xy
 11332                           
 11333                           ;menu.c: 91:   }
 11334  09DC  3001               	movlw	1
 11335  09DD  0141               	movlb	1	; select bank1
 11336  09DE  00C7               	movwf	??_channelView^(0+128)
 11337  09DF  0847               	movf	??_channelView^(0+128),w
 11338  09E0  07D1               	addwf	channelView@n^(0+128),f
 11339  09E1  2924               	goto	l8208
 11340  09E2                     l8232:	
 11341                           
 11342                           ;menu.c: 94:  for (n = 0; n < 4; n++) {
 11343  09E2  01D1               	clrf	channelView@n^(0+128)
 11344  09E3                     l8234:	
 11345  09E3  3004               	movlw	4
 11346  09E4  0251               	subwf	channelView@n^(0+128),w
 11347  09E5  1803               	btfsc	3,0
 11348  09E6  2BB6               	goto	l8272
 11349  09E7  2B74               	goto	l8266
 11350  09E8                     l8238:	
 11351                           
 11352                           ;menu.c: 97:    OLED_print_xy(n * 12 + 0, 1, "Please wait!");
 11353  09E8  0140               	movlb	0	; select bank0
 11354  09E9  01AD               	clrf	OLED_print_xy@row
 11355  09EA  0AAD               	incf	OLED_print_xy@row,f
 11356  09EB  3039               	movlw	low (STR_13| (0+32768))
 11357  09EC  00AE               	movwf	OLED_print_xy@s
 11358  09ED  30BA               	movlw	high (STR_13| (0+32768))
 11359  09EE  00AF               	movwf	OLED_print_xy@s+1
 11360  09EF  300C               	movlw	12
 11361  09F0  0141               	movlb	1	; select bank1
 11362  09F1  00C7               	movwf	??_channelView^(0+128)
 11363  09F2  0847               	movf	??_channelView^(0+128),w
 11364  09F3  0140               	movlb	0	; select bank0
 11365  09F4  00A9               	movwf	___bmul@multiplicand
 11366  09F5  0141               	movlb	1	; select bank1
 11367  09F6  0851               	movf	channelView@n^(0+128),w
 11368  09F7  31B1  214F  3189   	fcall	___bmul
 11369  09FA  31B3  2324  3189   	fcall	_OLED_print_xy
 11370                           
 11371                           ;menu.c: 98:    break;
 11372  09FD  2BB0               	goto	l8268
 11373  09FE                     l8240:	
 11374                           
 11375                           ;menu.c: 100:    OLED_print_xy(n * 12 + 0, 1, "Disabled    ");
 11376  09FE  0140               	movlb	0	; select bank0
 11377  09FF  01AD               	clrf	OLED_print_xy@row
 11378  0A00  0AAD               	incf	OLED_print_xy@row,f
 11379  0A01  30DE               	movlw	low (STR_14| (0+32768))
 11380  0A02  00AE               	movwf	OLED_print_xy@s
 11381  0A03  30B9               	movlw	high (STR_14| (0+32768))
 11382  0A04  00AF               	movwf	OLED_print_xy@s+1
 11383  0A05  300C               	movlw	12
 11384  0A06  0141               	movlb	1	; select bank1
 11385  0A07  00C7               	movwf	??_channelView^(0+128)
 11386  0A08  0847               	movf	??_channelView^(0+128),w
 11387  0A09  0140               	movlb	0	; select bank0
 11388  0A0A  00A9               	movwf	___bmul@multiplicand
 11389  0A0B  0141               	movlb	1	; select bank1
 11390  0A0C  0851               	movf	channelView@n^(0+128),w
 11391  0A0D  31B1  214F  3189   	fcall	___bmul
 11392  0A10  31B3  2324  3189   	fcall	_OLED_print_xy
 11393                           
 11394                           ;menu.c: 101:    break;
 11395  0A13  2BB0               	goto	l8268
 11396  0A14                     l8242:	
 11397                           
 11398                           ;menu.c: 103:    ftoa(str, data.heater[n].Patt, 4, 1);
 11399  0A14  0851               	movf	channelView@n^(0+128),w
 11400  0A15  00C7               	movwf	??_channelView^(0+128)
 11401  0A16  01C8               	clrf	(??_channelView^(0+128)+1)
 11402  0A17  0847               	movf	??_channelView^(0+128),w
 11403  0A18  0140               	movlb	0	; select bank0
 11404  0A19  00AD               	movwf	___wmul@multiplier
 11405  0A1A  0141               	movlb	1	; select bank1
 11406  0A1B  0848               	movf	(??_channelView+1)^(0+128),w
 11407  0A1C  0140               	movlb	0	; select bank0
 11408  0A1D  00AE               	movwf	___wmul@multiplier+1
 11409  0A1E  301F               	movlw	31
 11410  0A1F  00AF               	movwf	___wmul@multiplicand
 11411  0A20  3000               	movlw	0
 11412  0A21  00B0               	movwf	___wmul@multiplicand+1
 11413  0A22  31B1  2161  3189   	fcall	___wmul
 11414  0A25  3080               	movlw	128
 11415  0A26  0141               	movlb	1	; select bank1
 11416  0A27  00C9               	movwf	(??_channelView+2)^(0+128)
 11417  0A28  3027               	movlw	39
 11418  0A29  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11419  0A2A  0140               	movlb	0	; select bank0
 11420  0A2B  082D               	movf	?___wmul,w
 11421  0A2C  0141               	movlb	1	; select bank1
 11422  0A2D  0749               	addwf	(??_channelView+2)^(0+128),w
 11423  0A2E  0086               	movwf	6
 11424  0A2F  0140               	movlb	0	; select bank0
 11425  0A30  082E               	movf	?___wmul+1,w
 11426  0A31  0141               	movlb	1	; select bank1
 11427  0A32  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11428  0A33  0087               	movwf	7
 11429  0A34  3F40               	moviw [0]fsr1
 11430  0A35  00CD               	movwf	_channelView$2771^(0+128)
 11431  0A36  3F41               	moviw [1]fsr1
 11432  0A37  00CE               	movwf	(_channelView$2771+1)^(0+128)
 11433  0A38  3F42               	moviw [2]fsr1
 11434  0A39  00CF               	movwf	(_channelView$2771+2)^(0+128)
 11435  0A3A  3F43               	moviw [3]fsr1
 11436  0A3B  00D0               	movwf	(_channelView$2771+3)^(0+128)
 11437                           
 11438                           ;menu.c: 103:    ftoa(str, data.heater[n].Patt, 4, 1);
 11439  0A3C  0850               	movf	(_channelView$2771+3)^(0+128),w
 11440  0A3D  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11441  0A3E  084F               	movf	(_channelView$2771+2)^(0+128),w
 11442  0A3F  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11443  0A40  084E               	movf	(_channelView$2771+1)^(0+128),w
 11444  0A41  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11445  0A42  084D               	movf	_channelView$2771^(0+128),w
 11446  0A43  00B9               	movwf	ftoa@fValue^(0+128)
 11447  0A44  3004               	movlw	4
 11448  0A45  00C7               	movwf	??_channelView^(0+128)
 11449  0A46  0847               	movf	??_channelView^(0+128),w
 11450  0A47  00BD               	movwf	ftoa@width^(0+128)
 11451  0A48  01BE               	clrf	ftoa@prec^(0+128)
 11452  0A49  0ABE               	incf	ftoa@prec^(0+128),f
 11453  0A4A  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11454  0A4B  31A2  2200  3189   	fcall	_ftoa
 11455                           
 11456                           ;menu.c: 105:    OLED_print_xy(n * 12 + 0, 1, str);
 11457  0A4E  0140               	movlb	0	; select bank0
 11458  0A4F  01AD               	clrf	OLED_print_xy@row
 11459  0A50  0AAD               	incf	OLED_print_xy@row,f
 11460  0A51  30E6               	movlw	low _str
 11461  0A52  00AE               	movwf	OLED_print_xy@s
 11462  0A53  3001               	movlw	high _str
 11463  0A54  00AF               	movwf	OLED_print_xy@s+1
 11464  0A55  300C               	movlw	12
 11465  0A56  0141               	movlb	1	; select bank1
 11466  0A57  00C7               	movwf	??_channelView^(0+128)
 11467  0A58  0847               	movf	??_channelView^(0+128),w
 11468  0A59  0140               	movlb	0	; select bank0
 11469  0A5A  00A9               	movwf	___bmul@multiplicand
 11470  0A5B  0141               	movlb	1	; select bank1
 11471  0A5C  0851               	movf	channelView@n^(0+128),w
 11472  0A5D  31B1  214F  3189   	fcall	___bmul
 11473  0A60  31B3  2324  3189   	fcall	_OLED_print_xy
 11474                           
 11475                           ;menu.c: 109:    if (data.heater[n].mode == MODE_AUTO) {
 11476  0A63  0141               	movlb	1	; select bank1
 11477  0A64  0851               	movf	channelView@n^(0+128),w
 11478  0A65  00C7               	movwf	??_channelView^(0+128)
 11479  0A66  01C8               	clrf	(??_channelView^(0+128)+1)
 11480  0A67  0847               	movf	??_channelView^(0+128),w
 11481  0A68  0140               	movlb	0	; select bank0
 11482  0A69  00AD               	movwf	___wmul@multiplier
 11483  0A6A  0141               	movlb	1	; select bank1
 11484  0A6B  0848               	movf	(??_channelView+1)^(0+128),w
 11485  0A6C  0140               	movlb	0	; select bank0
 11486  0A6D  00AE               	movwf	___wmul@multiplier+1
 11487  0A6E  301F               	movlw	31
 11488  0A6F  00AF               	movwf	___wmul@multiplicand
 11489  0A70  3000               	movlw	0
 11490  0A71  00B0               	movwf	___wmul@multiplicand+1
 11491  0A72  31B1  2161  3189   	fcall	___wmul
 11492  0A75  3091               	movlw	145
 11493  0A76  0141               	movlb	1	; select bank1
 11494  0A77  00C9               	movwf	(??_channelView+2)^(0+128)
 11495  0A78  3027               	movlw	39
 11496  0A79  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11497  0A7A  0140               	movlb	0	; select bank0
 11498  0A7B  082D               	movf	?___wmul,w
 11499  0A7C  0141               	movlb	1	; select bank1
 11500  0A7D  0749               	addwf	(??_channelView+2)^(0+128),w
 11501  0A7E  0086               	movwf	6
 11502  0A7F  0140               	movlb	0	; select bank0
 11503  0A80  082E               	movf	?___wmul+1,w
 11504  0A81  0141               	movlb	1	; select bank1
 11505  0A82  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11506  0A83  0087               	movwf	7
 11507  0A84  0301               	decf	1,w
 11508  0A85  1D03               	btfss	3,2
 11509  0A86  2B05               	goto	l8254
 11510                           
 11511                           ;menu.c: 110:     OLED_print_xy(n * 12 + 4, 1, " (");
 11512  0A87  0140               	movlb	0	; select bank0
 11513  0A88  01AD               	clrf	OLED_print_xy@row
 11514  0A89  0AAD               	incf	OLED_print_xy@row,f
 11515  0A8A  3035               	movlw	low (STR_15| (0+32768))
 11516  0A8B  00AE               	movwf	OLED_print_xy@s
 11517  0A8C  30BB               	movlw	high (STR_15| (0+32768))
 11518  0A8D  00AF               	movwf	OLED_print_xy@s+1
 11519  0A8E  300C               	movlw	12
 11520  0A8F  0141               	movlb	1	; select bank1
 11521  0A90  00C7               	movwf	??_channelView^(0+128)
 11522  0A91  0847               	movf	??_channelView^(0+128),w
 11523  0A92  0140               	movlb	0	; select bank0
 11524  0A93  00A9               	movwf	___bmul@multiplicand
 11525  0A94  0141               	movlb	1	; select bank1
 11526  0A95  0851               	movf	channelView@n^(0+128),w
 11527  0A96  31B1  214F  3189   	fcall	___bmul
 11528  0A99  3E04               	addlw	4
 11529  0A9A  31B3  2324  3189   	fcall	_OLED_print_xy
 11530                           
 11531                           ;menu.c: 111:     ftoa(str, data.heater[n].Preq, 4,1);
 11532  0A9D  0141               	movlb	1	; select bank1
 11533  0A9E  0851               	movf	channelView@n^(0+128),w
 11534  0A9F  00C7               	movwf	??_channelView^(0+128)
 11535  0AA0  01C8               	clrf	(??_channelView^(0+128)+1)
 11536  0AA1  0847               	movf	??_channelView^(0+128),w
 11537  0AA2  0140               	movlb	0	; select bank0
 11538  0AA3  00AD               	movwf	___wmul@multiplier
 11539  0AA4  0141               	movlb	1	; select bank1
 11540  0AA5  0848               	movf	(??_channelView+1)^(0+128),w
 11541  0AA6  0140               	movlb	0	; select bank0
 11542  0AA7  00AE               	movwf	___wmul@multiplier+1
 11543  0AA8  301F               	movlw	31
 11544  0AA9  00AF               	movwf	___wmul@multiplicand
 11545  0AAA  3000               	movlw	0
 11546  0AAB  00B0               	movwf	___wmul@multiplicand+1
 11547  0AAC  31B1  2161  3189   	fcall	___wmul
 11548  0AAF  307C               	movlw	124
 11549  0AB0  0141               	movlb	1	; select bank1
 11550  0AB1  00C9               	movwf	(??_channelView+2)^(0+128)
 11551  0AB2  3027               	movlw	39
 11552  0AB3  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11553  0AB4  0140               	movlb	0	; select bank0
 11554  0AB5  082D               	movf	?___wmul,w
 11555  0AB6  0141               	movlb	1	; select bank1
 11556  0AB7  0749               	addwf	(??_channelView+2)^(0+128),w
 11557  0AB8  0086               	movwf	6
 11558  0AB9  0140               	movlb	0	; select bank0
 11559  0ABA  082E               	movf	?___wmul+1,w
 11560  0ABB  0141               	movlb	1	; select bank1
 11561  0ABC  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11562  0ABD  0087               	movwf	7
 11563  0ABE  3F40               	moviw [0]fsr1
 11564  0ABF  00CD               	movwf	_channelView$2771^(0+128)
 11565  0AC0  3F41               	moviw [1]fsr1
 11566  0AC1  00CE               	movwf	(_channelView$2771+1)^(0+128)
 11567  0AC2  3F42               	moviw [2]fsr1
 11568  0AC3  00CF               	movwf	(_channelView$2771+2)^(0+128)
 11569  0AC4  3F43               	moviw [3]fsr1
 11570  0AC5  00D0               	movwf	(_channelView$2771+3)^(0+128)
 11571                           
 11572                           ;menu.c: 111:     ftoa(str, data.heater[n].Preq, 4,1);
 11573  0AC6  0850               	movf	(_channelView$2771+3)^(0+128),w
 11574  0AC7  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 11575  0AC8  084F               	movf	(_channelView$2771+2)^(0+128),w
 11576  0AC9  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 11577  0ACA  084E               	movf	(_channelView$2771+1)^(0+128),w
 11578  0ACB  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 11579  0ACC  084D               	movf	_channelView$2771^(0+128),w
 11580  0ACD  00B9               	movwf	ftoa@fValue^(0+128)
 11581  0ACE  3004               	movlw	4
 11582  0ACF  00C7               	movwf	??_channelView^(0+128)
 11583  0AD0  0847               	movf	??_channelView^(0+128),w
 11584  0AD1  00BD               	movwf	ftoa@width^(0+128)
 11585  0AD2  01BE               	clrf	ftoa@prec^(0+128)
 11586  0AD3  0ABE               	incf	ftoa@prec^(0+128),f
 11587  0AD4  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 11588  0AD5  31A2  2200  3189   	fcall	_ftoa
 11589                           
 11590                           ;menu.c: 112:     OLED_print_xy(n * 12 + 6, 1, str);
 11591  0AD8  0140               	movlb	0	; select bank0
 11592  0AD9  01AD               	clrf	OLED_print_xy@row
 11593  0ADA  0AAD               	incf	OLED_print_xy@row,f
 11594  0ADB  30E6               	movlw	low _str
 11595  0ADC  00AE               	movwf	OLED_print_xy@s
 11596  0ADD  3001               	movlw	high _str
 11597  0ADE  00AF               	movwf	OLED_print_xy@s+1
 11598  0ADF  300C               	movlw	12
 11599  0AE0  0141               	movlb	1	; select bank1
 11600  0AE1  00C7               	movwf	??_channelView^(0+128)
 11601  0AE2  0847               	movf	??_channelView^(0+128),w
 11602  0AE3  0140               	movlb	0	; select bank0
 11603  0AE4  00A9               	movwf	___bmul@multiplicand
 11604  0AE5  0141               	movlb	1	; select bank1
 11605  0AE6  0851               	movf	channelView@n^(0+128),w
 11606  0AE7  31B1  214F  3189   	fcall	___bmul
 11607  0AEA  3E06               	addlw	6
 11608  0AEB  31B3  2324  3189   	fcall	_OLED_print_xy
 11609                           
 11610                           ;menu.c: 113:     OLED_print_xy(n * 12 + 10, 1, "W)");
 11611  0AEE  0140               	movlb	0	; select bank0
 11612  0AEF  01AD               	clrf	OLED_print_xy@row
 11613  0AF0  0AAD               	incf	OLED_print_xy@row,f
 11614  0AF1  3038               	movlw	low (STR_16| (0+32768))
 11615  0AF2  00AE               	movwf	OLED_print_xy@s
 11616  0AF3  30BB               	movlw	high (STR_16| (0+32768))
 11617  0AF4  00AF               	movwf	OLED_print_xy@s+1
 11618  0AF5  300C               	movlw	12
 11619  0AF6  0141               	movlb	1	; select bank1
 11620  0AF7  00C7               	movwf	??_channelView^(0+128)
 11621  0AF8  0847               	movf	??_channelView^(0+128),w
 11622  0AF9  0140               	movlb	0	; select bank0
 11623  0AFA  00A9               	movwf	___bmul@multiplicand
 11624  0AFB  0141               	movlb	1	; select bank1
 11625  0AFC  0851               	movf	channelView@n^(0+128),w
 11626  0AFD  31B1  214F  3189   	fcall	___bmul
 11627  0B00  3E0A               	addlw	10
 11628  0B01  31B3  2324  3189   	fcall	_OLED_print_xy
 11629                           
 11630                           ;menu.c: 114:    } else {
 11631  0B04  2BB0               	goto	l8268
 11632  0B05                     l8254:	
 11633                           
 11634                           ;menu.c: 115:     OLED_print_xy(n * 12 + 4, 1, "W manual");
 11635  0B05  0140               	movlb	0	; select bank0
 11636  0B06  01AD               	clrf	OLED_print_xy@row
 11637  0B07  0AAD               	incf	OLED_print_xy@row,f
 11638  0B08  30AF               	movlw	low (STR_17| (0+32768))
 11639  0B09  00AE               	movwf	OLED_print_xy@s
 11640  0B0A  30BA               	movlw	high (STR_17| (0+32768))
 11641  0B0B  00AF               	movwf	OLED_print_xy@s+1
 11642  0B0C  300C               	movlw	12
 11643  0B0D  0141               	movlb	1	; select bank1
 11644  0B0E  00C7               	movwf	??_channelView^(0+128)
 11645  0B0F  0847               	movf	??_channelView^(0+128),w
 11646  0B10  0140               	movlb	0	; select bank0
 11647  0B11  00A9               	movwf	___bmul@multiplicand
 11648  0B12  0141               	movlb	1	; select bank1
 11649  0B13  0851               	movf	channelView@n^(0+128),w
 11650  0B14  31B1  214F  3189   	fcall	___bmul
 11651  0B17  3E04               	addlw	4
 11652  0B18  31B3  2324  3189   	fcall	_OLED_print_xy
 11653  0B1B  2BB0               	goto	l8268
 11654  0B1C                     l8256:	
 11655                           
 11656                           ;menu.c: 119:    OLED_print_xy(n * 12 + 0, 1, "Disconnected");
 11657  0B1C  0140               	movlb	0	; select bank0
 11658  0B1D  01AD               	clrf	OLED_print_xy@row
 11659  0B1E  0AAD               	incf	OLED_print_xy@row,f
 11660  0B1F  3053               	movlw	low (STR_18| (0+32768))
 11661  0B20  00AE               	movwf	OLED_print_xy@s
 11662  0B21  30BA               	movlw	high (STR_18| (0+32768))
 11663  0B22  00AF               	movwf	OLED_print_xy@s+1
 11664  0B23  300C               	movlw	12
 11665  0B24  0141               	movlb	1	; select bank1
 11666  0B25  00C7               	movwf	??_channelView^(0+128)
 11667  0B26  0847               	movf	??_channelView^(0+128),w
 11668  0B27  0140               	movlb	0	; select bank0
 11669  0B28  00A9               	movwf	___bmul@multiplicand
 11670  0B29  0141               	movlb	1	; select bank1
 11671  0B2A  0851               	movf	channelView@n^(0+128),w
 11672  0B2B  31B1  214F  3189   	fcall	___bmul
 11673  0B2E  31B3  2324  3189   	fcall	_OLED_print_xy
 11674                           
 11675                           ;menu.c: 120:    break;
 11676  0B31  2BB0               	goto	l8268
 11677  0B32                     l8258:	
 11678                           
 11679                           ;menu.c: 122:    OLED_print_xy(n * 12 + 0, 1, "Shorted!    ");
 11680  0B32  0140               	movlb	0	; select bank0
 11681  0B33  01AD               	clrf	OLED_print_xy@row
 11682  0B34  0AAD               	incf	OLED_print_xy@row,f
 11683  0B35  30D1               	movlw	low (STR_19| (0+32768))
 11684  0B36  00AE               	movwf	OLED_print_xy@s
 11685  0B37  30B9               	movlw	high (STR_19| (0+32768))
 11686  0B38  00AF               	movwf	OLED_print_xy@s+1
 11687  0B39  300C               	movlw	12
 11688  0B3A  0141               	movlb	1	; select bank1
 11689  0B3B  00C7               	movwf	??_channelView^(0+128)
 11690  0B3C  0847               	movf	??_channelView^(0+128),w
 11691  0B3D  0140               	movlb	0	; select bank0
 11692  0B3E  00A9               	movwf	___bmul@multiplicand
 11693  0B3F  0141               	movlb	1	; select bank1
 11694  0B40  0851               	movf	channelView@n^(0+128),w
 11695  0B41  31B1  214F  3189   	fcall	___bmul
 11696  0B44  31B3  2324  3189   	fcall	_OLED_print_xy
 11697                           
 11698                           ;menu.c: 123:    break;
 11699  0B47  2BB0               	goto	l8268
 11700  0B48                     l8260:	
 11701                           
 11702                           ;menu.c: 125:    OLED_print_xy(n * 12 + 0, 1, "Overcurrent!");
 11703  0B48  0140               	movlb	0	; select bank0
 11704  0B49  01AD               	clrf	OLED_print_xy@row
 11705  0B4A  0AAD               	incf	OLED_print_xy@row,f
 11706  0B4B  3046               	movlw	low (STR_20| (0+32768))
 11707  0B4C  00AE               	movwf	OLED_print_xy@s
 11708  0B4D  30BA               	movlw	high (STR_20| (0+32768))
 11709  0B4E  00AF               	movwf	OLED_print_xy@s+1
 11710  0B4F  300C               	movlw	12
 11711  0B50  0141               	movlb	1	; select bank1
 11712  0B51  00C7               	movwf	??_channelView^(0+128)
 11713  0B52  0847               	movf	??_channelView^(0+128),w
 11714  0B53  0140               	movlb	0	; select bank0
 11715  0B54  00A9               	movwf	___bmul@multiplicand
 11716  0B55  0141               	movlb	1	; select bank1
 11717  0B56  0851               	movf	channelView@n^(0+128),w
 11718  0B57  31B1  214F  3189   	fcall	___bmul
 11719  0B5A  31B3  2324  3189   	fcall	_OLED_print_xy
 11720                           
 11721                           ;menu.c: 126:    break;
 11722  0B5D  2BB0               	goto	l8268
 11723  0B5E                     l8262:	
 11724                           
 11725                           ;menu.c: 128:    OLED_print_xy(n * 12 + 0, 1, "OndreSpecial");
 11726  0B5E  0140               	movlb	0	; select bank0
 11727  0B5F  01AD               	clrf	OLED_print_xy@row
 11728  0B60  0AAD               	incf	OLED_print_xy@row,f
 11729  0B61  306D               	movlw	low (STR_21| (0+32768))
 11730  0B62  00AE               	movwf	OLED_print_xy@s
 11731  0B63  30BA               	movlw	high (STR_21| (0+32768))
 11732  0B64  00AF               	movwf	OLED_print_xy@s+1
 11733  0B65  300C               	movlw	12
 11734  0B66  0141               	movlb	1	; select bank1
 11735  0B67  00C7               	movwf	??_channelView^(0+128)
 11736  0B68  0847               	movf	??_channelView^(0+128),w
 11737  0B69  0140               	movlb	0	; select bank0
 11738  0B6A  00A9               	movwf	___bmul@multiplicand
 11739  0B6B  0141               	movlb	1	; select bank1
 11740  0B6C  0851               	movf	channelView@n^(0+128),w
 11741  0B6D  31B1  214F  3189   	fcall	___bmul
 11742  0B70  31B3  2324  3189   	fcall	_OLED_print_xy
 11743                           
 11744                           ;menu.c: 129:    break;
 11745  0B73  2BB0               	goto	l8268
 11746  0B74                     l8266:	
 11747  0B74  0851               	movf	channelView@n^(0+128),w
 11748  0B75  00C7               	movwf	??_channelView^(0+128)
 11749  0B76  01C8               	clrf	(??_channelView^(0+128)+1)
 11750  0B77  0847               	movf	??_channelView^(0+128),w
 11751  0B78  0140               	movlb	0	; select bank0
 11752  0B79  00AD               	movwf	___wmul@multiplier
 11753  0B7A  0141               	movlb	1	; select bank1
 11754  0B7B  0848               	movf	(??_channelView+1)^(0+128),w
 11755  0B7C  0140               	movlb	0	; select bank0
 11756  0B7D  00AE               	movwf	___wmul@multiplier+1
 11757  0B7E  301F               	movlw	31
 11758  0B7F  00AF               	movwf	___wmul@multiplicand
 11759  0B80  3000               	movlw	0
 11760  0B81  00B0               	movwf	___wmul@multiplicand+1
 11761  0B82  31B1  2161  3189   	fcall	___wmul
 11762  0B85  3092               	movlw	146
 11763  0B86  0141               	movlb	1	; select bank1
 11764  0B87  00C9               	movwf	(??_channelView+2)^(0+128)
 11765  0B88  3027               	movlw	39
 11766  0B89  00CA               	movwf	((??_channelView+2)^(0+128)+1)
 11767  0B8A  0140               	movlb	0	; select bank0
 11768  0B8B  082D               	movf	?___wmul,w
 11769  0B8C  0141               	movlb	1	; select bank1
 11770  0B8D  0749               	addwf	(??_channelView+2)^(0+128),w
 11771  0B8E  0086               	movwf	6
 11772  0B8F  0140               	movlb	0	; select bank0
 11773  0B90  082E               	movf	?___wmul+1,w
 11774  0B91  0141               	movlb	1	; select bank1
 11775  0B92  3D4A               	addwfc	(??_channelView+3)^(0+128),w
 11776  0B93  0087               	movwf	7
 11777  0B94  0801               	movf	1,w
 11778  0B95  00CB               	movwf	(??_channelView+4)^(0+128)
 11779  0B96  01CC               	clrf	((??_channelView+4)^(0+128)+1)
 11780                           
 11781                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11782                           ; Switch size 1, requested type "simple"
 11783                           ; Number of cases is 1, Range of values is 0 to 0
 11784                           ; switch strategies available:
 11785                           ; Name         Instructions Cycles
 11786                           ; simple_byte            4     3 (average)
 11787                           ; direct_byte            8     6 (fixed)
 11788                           ; jumptable            260     6 (fixed)
 11789                           ;	Chosen strategy is simple_byte
 11790  0B97  084C               	movf	(??_channelView+5)^(0+128),w
 11791  0B98  3A00               	xorlw	0	; case 0
 11792  0B99  1903               	skipnz
 11793  0B9A  2B9C               	goto	l9576
 11794  0B9B  2B5E               	goto	l8262
 11795  0B9C                     l9576:	
 11796                           
 11797                           ; Switch size 1, requested type "simple"
 11798                           ; Number of cases is 6, Range of values is 0 to 5
 11799                           ; switch strategies available:
 11800                           ; Name         Instructions Cycles
 11801                           ; direct_byte           18     6 (fixed)
 11802                           ; simple_byte           19    10 (average)
 11803                           ; jumptable            260     6 (fixed)
 11804                           ;	Chosen strategy is simple_byte
 11805  0B9C  084B               	movf	(??_channelView+4)^(0+128),w
 11806  0B9D  3A00               	xorlw	0	; case 0
 11807  0B9E  1903               	skipnz
 11808  0B9F  29FE               	goto	l8240
 11809  0BA0  3A01               	xorlw	1	; case 1
 11810  0BA1  1903               	skipnz
 11811  0BA2  2A14               	goto	l8242
 11812  0BA3  3A03               	xorlw	3	; case 2
 11813  0BA4  1903               	skipnz
 11814  0BA5  2B1C               	goto	l8256
 11815  0BA6  3A01               	xorlw	1	; case 3
 11816  0BA7  1903               	skipnz
 11817  0BA8  2B32               	goto	l8258
 11818  0BA9  3A07               	xorlw	7	; case 4
 11819  0BAA  1903               	skipnz
 11820  0BAB  2B48               	goto	l8260
 11821  0BAC  3A01               	xorlw	1	; case 5
 11822  0BAD  1903               	skipnz
 11823  0BAE  29E8               	goto	l8238
 11824  0BAF  2B5E               	goto	l8262
 11825  0BB0                     l8268:	
 11826                           
 11827                           ;menu.c: 131:  }
 11828  0BB0  3001               	movlw	1
 11829  0BB1  0141               	movlb	1	; select bank1
 11830  0BB2  00C7               	movwf	??_channelView^(0+128)
 11831  0BB3  0847               	movf	??_channelView^(0+128),w
 11832  0BB4  07D1               	addwf	channelView@n^(0+128),f
 11833  0BB5  29E3               	goto	l8234
 11834  0BB6                     l8272:	
 11835                           
 11836                           ;menu.c: 132:  page = paging(page, 4);
 11837  0BB6  3004               	movlw	4
 11838  0BB7  00C7               	movwf	??_channelView^(0+128)
 11839  0BB8  0847               	movf	??_channelView^(0+128),w
 11840  0BB9  0140               	movlb	0	; select bank0
 11841  0BBA  00A7               	movwf	paging@lastPage
 11842  0BBB  0142               	movlb	2	; select bank2
 11843  0BBC  0868               	movf	channelView@page^(0+256),w
 11844  0BBD  3187  278D         	fcall	_paging
 11845  0BBF  0141               	movlb	1	; select bank1
 11846  0BC0  00C8               	movwf	(??_channelView+1)^(0+128)
 11847  0BC1  0848               	movf	(??_channelView+1)^(0+128),w
 11848  0BC2  0142               	movlb	2	; select bank2
 11849  0BC3  00E8               	movwf	channelView@page^(0+256)
 11850                           
 11851                           ;menu.c: 133:  selectedChannel = page;
 11852  0BC4  0868               	movf	channelView@page^(0+256),w
 11853  0BC5  0141               	movlb	1	; select bank1
 11854  0BC6  00C7               	movwf	??_channelView^(0+128)
 11855  0BC7  0847               	movf	??_channelView^(0+128),w
 11856  0BC8  00EB               	movwf	_selectedChannel^(0+128)
 11857                           
 11858                           ;menu.c: 135:  return page;
 11859  0BC9  0142               	movlb	2	; select bank2
 11860  0BCA  0868               	movf	channelView@page^(0+256),w
 11861  0BCB  0008               	return
 11862  0BCC                     __end_of_channelView:	
 11863                           
 11864                           	psect	text15
 11865  1054                     __ptext15:	
 11866 ;; *************** function _statusView *****************
 11867 ;; Defined at:
 11868 ;;		line 17 in file "menu.c"
 11869 ;; Parameters:    Size  Location     Type
 11870 ;;		None
 11871 ;; Auto vars:     Size  Location     Type
 11872 ;;		None
 11873 ;; Return value:  Size  Location     Type
 11874 ;;                  1    wreg      unsigned char 
 11875 ;; Registers used:
 11876 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11877 ;; Tracked objects:
 11878 ;;		On entry : 0/0
 11879 ;;		On exit  : 0/0
 11880 ;;		Unchanged: 0/0
 11881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11882 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11883 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11884 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11885 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11886 ;;Total ram usage:        2 bytes
 11887 ;; Hardware stack levels used:    1
 11888 ;; Hardware stack levels required when called:    7
 11889 ;; This function calls:
 11890 ;;		_OLED_print_xy
 11891 ;;		_ftoa
 11892 ;;		_itoa
 11893 ;;		_paging
 11894 ;;		_returnToPage
 11895 ;; This function is called by:
 11896 ;;		_menu
 11897 ;; This function uses a non-reentrant model
 11898 ;;
 11899                           
 11900                           
 11901                           ;psect for function _statusView
 11902  1054                     _statusView:	
 11903                           
 11904                           ;menu.c: 19:  static uint8_t page = 0;;menu.c: 20:  static uint8_t prevSensorStat = 1;;m
      +                          enu.c: 23:  if (prevSensorStat != data.status.SENSOR_OK) {
 11905                           
 11906                           ;incstack = 0
 11907                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11908  1054  3073               	movlw	115
 11909  1055  0086               	movwf	6
 11910  1056  3027               	movlw	39
 11911  1057  0087               	movwf	7
 11912  1058  0C01               	rrf	1,w
 11913  1059  0141               	movlb	1	; select bank1
 11914  105A  00C7               	movwf	??_statusView^(0+128)
 11915  105B  0CC7               	rrf	??_statusView^(0+128),f
 11916  105C  0C47               	rrf	??_statusView^(0+128),w
 11917  105D  3901               	andlw	1
 11918  105E  0142               	movlb	2	; select bank2
 11919  105F  066F               	xorwf	statusView@prevSensorStat^(0+256),w
 11920  1060  1903               	skipnz
 11921  1061  287B               	goto	l8148
 11922                           
 11923                           ;menu.c: 24:   prevSensorStat = data.status.SENSOR_OK;
 11924  1062  3073               	movlw	115
 11925  1063  0086               	movwf	6
 11926  1064  3027               	movlw	39
 11927  1065  0087               	movwf	7
 11928  1066  3000               	movlw	0
 11929  1067  1981               	btfsc	1,3
 11930  1068  3001               	movlw	1
 11931  1069  00EF               	movwf	statusView@prevSensorStat^(0+256)
 11932                           
 11933                           ;menu.c: 26:   if (data.status.SENSOR_OK)
 11934  106A  3073               	movlw	115
 11935  106B  0086               	movwf	6
 11936  106C  3027               	movlw	39
 11937  106D  0087               	movwf	7
 11938  106E  1D81               	btfss	1,3
 11939  106F  2872               	goto	l8144
 11940                           
 11941                           ;menu.c: 27:    page = 0;
 11942  1070  01E9               	clrf	statusView@page^(0+256)
 11943  1071  2878               	goto	l8146
 11944  1072                     l8144:	
 11945                           
 11946                           ;menu.c: 29:    page = 3;
 11947  1072  3003               	movlw	3
 11948  1073  0141               	movlb	1	; select bank1
 11949  1074  00C7               	movwf	??_statusView^(0+128)
 11950  1075  0847               	movf	??_statusView^(0+128),w
 11951  1076  0142               	movlb	2	; select bank2
 11952  1077  00E9               	movwf	statusView@page^(0+256)
 11953  1078                     l8146:	
 11954                           
 11955                           ;menu.c: 30:   g_screenRefresh = 1;
 11956  1078  0141               	movlb	1	; select bank1
 11957  1079  01ED               	clrf	_g_screenRefresh^(0+128)
 11958  107A  0AED               	incf	_g_screenRefresh^(0+128),f
 11959  107B                     l8148:	
 11960                           
 11961                           ;menu.c: 33:  returnToPage(page);
 11962  107B  0142               	movlb	2	; select bank2
 11963  107C  0869               	movf	statusView@page^(0+256),w
 11964  107D  31B3  2356  3190   	fcall	_returnToPage
 11965                           
 11966                           ;menu.c: 34:  if (g_screenRefresh) {
 11967  1080  0141               	movlb	1	; select bank1
 11968  1081  086D               	movf	_g_screenRefresh^(0+128),w
 11969  1082  1903               	btfsc	3,2
 11970  1083  2899               	goto	l8154
 11971                           
 11972                           ;menu.c: 35:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   PowerVers
      +                          ion:");
 11973  1084  0140               	movlb	0	; select bank0
 11974  1085  01AD               	clrf	OLED_print_xy@row
 11975  1086  3012               	movlw	low (STR_1| (0+32768))
 11976  1087  00AE               	movwf	OLED_print_xy@s
 11977  1088  30B8               	movlw	high (STR_1| (0+32768))
 11978  1089  00AF               	movwf	OLED_print_xy@s+1
 11979  108A  3000               	movlw	0
 11980  108B  31B3  2324  3190   	fcall	_OLED_print_xy
 11981                           
 11982                           ;menu.c: 36:   OLED_print_xy(4 * 12, 1, "Sensor:");
 11983  108E  0140               	movlb	0	; select bank0
 11984  108F  01AD               	clrf	OLED_print_xy@row
 11985  1090  0AAD               	incf	OLED_print_xy@row,f
 11986  1091  30E8               	movlw	low (STR_2| (0+32768))
 11987  1092  00AE               	movwf	OLED_print_xy@s
 11988  1093  30BA               	movlw	high (STR_2| (0+32768))
 11989  1094  00AF               	movwf	OLED_print_xy@s+1
 11990  1095  3030               	movlw	48
 11991  1096  31B3  2324  3190   	fcall	_OLED_print_xy
 11992  1099                     l8154:	
 11993                           
 11994                           ;menu.c: 38:  if (data.status.AUX_SENSOR_OK) {
 11995  1099  3073               	movlw	115
 11996  109A  0086               	movwf	6
 11997  109B  3027               	movlw	39
 11998  109C  0087               	movwf	7
 11999  109D  1E01               	btfss	1,4
 12000  109E  28F7               	goto	l8166
 12001                           
 12002                           ;menu.c: 39:   ftoa(str, data.tempC, 5, 1);
 12003  109F  304A               	movlw	74
 12004  10A0  0086               	movwf	6
 12005  10A1  3027               	movlw	39
 12006  10A2  0087               	movwf	7
 12007  10A3  3F40               	moviw [0]fsr1
 12008  10A4  0141               	movlb	1	; select bank1
 12009  10A5  00B9               	movwf	ftoa@fValue^(0+128)
 12010  10A6  3F41               	moviw [1]fsr1
 12011  10A7  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12012  10A8  3F42               	moviw [2]fsr1
 12013  10A9  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12014  10AA  3F43               	moviw [3]fsr1
 12015  10AB  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12016  10AC  3005               	movlw	5
 12017  10AD  00C7               	movwf	??_statusView^(0+128)
 12018  10AE  0847               	movf	??_statusView^(0+128),w
 12019  10AF  00BD               	movwf	ftoa@width^(0+128)
 12020  10B0  01BE               	clrf	ftoa@prec^(0+128)
 12021  10B1  0ABE               	incf	ftoa@prec^(0+128),f
 12022  10B2  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 12023  10B3  31A2  2200  3190   	fcall	_ftoa
 12024                           
 12025                           ;menu.c: 40:   OLED_print_xy(0, 1, str);
 12026  10B6  0140               	movlb	0	; select bank0
 12027  10B7  01AD               	clrf	OLED_print_xy@row
 12028  10B8  0AAD               	incf	OLED_print_xy@row,f
 12029  10B9  30E6               	movlw	low _str
 12030  10BA  00AE               	movwf	OLED_print_xy@s
 12031  10BB  3001               	movlw	high _str
 12032  10BC  00AF               	movwf	OLED_print_xy@s+1
 12033  10BD  3000               	movlw	0
 12034  10BE  31B3  2324  3190   	fcall	_OLED_print_xy
 12035                           
 12036                           ;menu.c: 41:   OLED_print_xy(5, 1, "\001 \002");
 12037  10C1  0140               	movlb	0	; select bank0
 12038  10C2  01AD               	clrf	OLED_print_xy@row
 12039  10C3  0AAD               	incf	OLED_print_xy@row,f
 12040  10C4  301D               	movlw	low (STR_3| (0+32768))
 12041  10C5  00AE               	movwf	OLED_print_xy@s
 12042  10C6  30BB               	movlw	high (STR_3| (0+32768))
 12043  10C7  00AF               	movwf	OLED_print_xy@s+1
 12044  10C8  3005               	movlw	5
 12045  10C9  31B3  2324  3190   	fcall	_OLED_print_xy
 12046                           
 12047                           ;menu.c: 42:   ftoa(str, data.tempAux, 3, 0);
 12048  10CC  304A               	movlw	74
 12049  10CD  0086               	movwf	6
 12050  10CE  3027               	movlw	39
 12051  10CF  0087               	movwf	7
 12052  10D0  314D               	addfsr 1,13
 12053  10D1  3F40               	moviw [0]fsr1
 12054  10D2  0141               	movlb	1	; select bank1
 12055  10D3  00B9               	movwf	ftoa@fValue^(0+128)
 12056  10D4  3F41               	moviw [1]fsr1
 12057  10D5  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12058  10D6  3F42               	moviw [2]fsr1
 12059  10D7  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12060  10D8  3F43               	moviw [3]fsr1
 12061  10D9  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12062  10DA  3003               	movlw	3
 12063  10DB  00C7               	movwf	??_statusView^(0+128)
 12064  10DC  0847               	movf	??_statusView^(0+128),w
 12065  10DD  00BD               	movwf	ftoa@width^(0+128)
 12066  10DE  01BE               	clrf	ftoa@prec^(0+128)
 12067  10DF  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 12068  10E0  31A2  2200  3190   	fcall	_ftoa
 12069                           
 12070                           ;menu.c: 43:   OLED_print_xy(8, 1, str);
 12071  10E3  0140               	movlb	0	; select bank0
 12072  10E4  01AD               	clrf	OLED_print_xy@row
 12073  10E5  0AAD               	incf	OLED_print_xy@row,f
 12074  10E6  30E6               	movlw	low _str
 12075  10E7  00AE               	movwf	OLED_print_xy@s
 12076  10E8  3001               	movlw	high _str
 12077  10E9  00AF               	movwf	OLED_print_xy@s+1
 12078  10EA  3008               	movlw	8
 12079  10EB  31B3  2324  3190   	fcall	_OLED_print_xy
 12080                           
 12081                           ;menu.c: 44:   OLED_print_xy(11, 1, "\001");
 12082  10EE  0140               	movlb	0	; select bank0
 12083  10EF  01AD               	clrf	OLED_print_xy@row
 12084  10F0  0AAD               	incf	OLED_print_xy@row,f
 12085  10F1  303B               	movlw	low (STR_4| (0+32768))
 12086  10F2  00AE               	movwf	OLED_print_xy@s
 12087  10F3  30BB               	movlw	high (STR_4| (0+32768))
 12088  10F4  00AF               	movwf	OLED_print_xy@s+1
 12089  10F5  300B               	movlw	11
 12090  10F6  2921               	goto	L5
 12091  10F7                     l8166:	
 12092                           ;menu.c: 45:  } else {
 12093                           
 12094                           
 12095                           ;menu.c: 46:   ftoa(str, data.tempC, 5, 1);
 12096  10F7  304A               	movlw	74
 12097  10F8  0086               	movwf	6
 12098  10F9  3027               	movlw	39
 12099  10FA  0087               	movwf	7
 12100  10FB  3F40               	moviw [0]fsr1
 12101  10FC  0141               	movlb	1	; select bank1
 12102  10FD  00B9               	movwf	ftoa@fValue^(0+128)
 12103  10FE  3F41               	moviw [1]fsr1
 12104  10FF  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12105  1100  3F42               	moviw [2]fsr1
 12106  1101  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12107  1102  3F43               	moviw [3]fsr1
 12108  1103  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12109  1104  3005               	movlw	5
 12110  1105  00C7               	movwf	??_statusView^(0+128)
 12111  1106  0847               	movf	??_statusView^(0+128),w
 12112  1107  00BD               	movwf	ftoa@width^(0+128)
 12113  1108  01BE               	clrf	ftoa@prec^(0+128)
 12114  1109  0ABE               	incf	ftoa@prec^(0+128),f
 12115  110A  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 12116  110B  31A2  2200  3190   	fcall	_ftoa
 12117                           
 12118                           ;menu.c: 47:   OLED_print_xy(0, 1, str);
 12119  110E  0140               	movlb	0	; select bank0
 12120  110F  01AD               	clrf	OLED_print_xy@row
 12121  1110  0AAD               	incf	OLED_print_xy@row,f
 12122  1111  30E6               	movlw	low _str
 12123  1112  00AE               	movwf	OLED_print_xy@s
 12124  1113  3001               	movlw	high _str
 12125  1114  00AF               	movwf	OLED_print_xy@s+1
 12126  1115  3000               	movlw	0
 12127  1116  31B3  2324  3190   	fcall	_OLED_print_xy
 12128                           
 12129                           ;menu.c: 48:   OLED_print_xy(5, 1, "\001      ");
 12130  1119  0140               	movlb	0	; select bank0
 12131  111A  01AD               	clrf	OLED_print_xy@row
 12132  111B  0AAD               	incf	OLED_print_xy@row,f
 12133  111C  30C8               	movlw	low (STR_5| (0+32768))
 12134  111D  00AE               	movwf	OLED_print_xy@s
 12135  111E  30BA               	movlw	high (STR_5| (0+32768))
 12136  111F  00AF               	movwf	OLED_print_xy@s+1
 12137  1120  3005               	movlw	5
 12138  1121                     L5:	
 12139  1121  31B3  2324  3190   	fcall	_OLED_print_xy
 12140                           
 12141                           ;menu.c: 50:  ftoa(str, data.relHum, 5, 1);
 12142                           
 12143                           ;menu.c: 49:  }
 12144  1124  304A               	movlw	74
 12145  1125  0086               	movwf	6
 12146  1126  3027               	movlw	39
 12147  1127  0087               	movwf	7
 12148  1128  3144               	addfsr 1,4
 12149  1129  3F40               	moviw [0]fsr1
 12150  112A  0141               	movlb	1	; select bank1
 12151  112B  00B9               	movwf	ftoa@fValue^(0+128)
 12152  112C  3F41               	moviw [1]fsr1
 12153  112D  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12154  112E  3F42               	moviw [2]fsr1
 12155  112F  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12156  1130  3F43               	moviw [3]fsr1
 12157  1131  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12158  1132  3005               	movlw	5
 12159  1133  00C7               	movwf	??_statusView^(0+128)
 12160  1134  0847               	movf	??_statusView^(0+128),w
 12161  1135  00BD               	movwf	ftoa@width^(0+128)
 12162  1136  01BE               	clrf	ftoa@prec^(0+128)
 12163  1137  0ABE               	incf	ftoa@prec^(0+128),f
 12164  1138  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 12165  1139  31A2  2200  3190   	fcall	_ftoa
 12166                           
 12167                           ;menu.c: 51:  OLED_print_xy(12, 1, str);
 12168  113C  0140               	movlb	0	; select bank0
 12169  113D  01AD               	clrf	OLED_print_xy@row
 12170  113E  0AAD               	incf	OLED_print_xy@row,f
 12171  113F  30E6               	movlw	low _str
 12172  1140  00AE               	movwf	OLED_print_xy@s
 12173  1141  3001               	movlw	high _str
 12174  1142  00AF               	movwf	OLED_print_xy@s+1
 12175  1143  300C               	movlw	12
 12176  1144  31B3  2324  3190   	fcall	_OLED_print_xy
 12177                           
 12178                           ;menu.c: 52:  OLED_print_xy(12 + 5, 1, "%     ");
 12179  1147  0140               	movlb	0	; select bank0
 12180  1148  01AD               	clrf	OLED_print_xy@row
 12181  1149  0AAD               	incf	OLED_print_xy@row,f
 12182  114A  3005               	movlw	low (STR_6| (0+32768))
 12183  114B  00AE               	movwf	OLED_print_xy@s
 12184  114C  30BB               	movlw	high (STR_6| (0+32768))
 12185  114D  00AF               	movwf	OLED_print_xy@s+1
 12186  114E  3011               	movlw	17
 12187  114F  31B3  2324  3190   	fcall	_OLED_print_xy
 12188                           
 12189                           ;menu.c: 53:  ftoa(str, data.dewPointC, 5, 1);
 12190  1152  304A               	movlw	74
 12191  1153  0086               	movwf	6
 12192  1154  3027               	movlw	39
 12193  1155  0087               	movwf	7
 12194  1156  3148               	addfsr 1,8
 12195  1157  3F40               	moviw [0]fsr1
 12196  1158  0141               	movlb	1	; select bank1
 12197  1159  00B9               	movwf	ftoa@fValue^(0+128)
 12198  115A  3F41               	moviw [1]fsr1
 12199  115B  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12200  115C  3F42               	moviw [2]fsr1
 12201  115D  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12202  115E  3F43               	moviw [3]fsr1
 12203  115F  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12204  1160  3005               	movlw	5
 12205  1161  00C7               	movwf	??_statusView^(0+128)
 12206  1162  0847               	movf	??_statusView^(0+128),w
 12207  1163  00BD               	movwf	ftoa@width^(0+128)
 12208  1164  01BE               	clrf	ftoa@prec^(0+128)
 12209  1165  0ABE               	incf	ftoa@prec^(0+128),f
 12210  1166  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 12211  1167  31A2  2200  3190   	fcall	_ftoa
 12212                           
 12213                           ;menu.c: 54:  OLED_print_xy(2 * 12, 1, str);
 12214  116A  0140               	movlb	0	; select bank0
 12215  116B  01AD               	clrf	OLED_print_xy@row
 12216  116C  0AAD               	incf	OLED_print_xy@row,f
 12217  116D  30E6               	movlw	low _str
 12218  116E  00AE               	movwf	OLED_print_xy@s
 12219  116F  3001               	movlw	high _str
 12220  1170  00AF               	movwf	OLED_print_xy@s+1
 12221  1171  3018               	movlw	24
 12222  1172  31B3  2324  3190   	fcall	_OLED_print_xy
 12223                           
 12224                           ;menu.c: 55:  OLED_print_xy(2 * 12 + 5, 1, "\001      ");
 12225  1175  0140               	movlb	0	; select bank0
 12226  1176  01AD               	clrf	OLED_print_xy@row
 12227  1177  0AAD               	incf	OLED_print_xy@row,f
 12228  1178  30C8               	movlw	low (STR_5| (0+32768))
 12229  1179  00AE               	movwf	OLED_print_xy@s
 12230  117A  30BA               	movlw	high (STR_5| (0+32768))
 12231  117B  00AF               	movwf	OLED_print_xy@s+1
 12232  117C  301D               	movlw	29
 12233  117D  31B3  2324  3190   	fcall	_OLED_print_xy
 12234                           
 12235                           ;menu.c: 56:  ftoa(str, data.voltage, 4, 1);
 12236  1180  304A               	movlw	74
 12237  1181  0086               	movwf	6
 12238  1182  3027               	movlw	39
 12239  1183  0087               	movwf	7
 12240  1184  3151               	addfsr 1,17
 12241  1185  3F40               	moviw [0]fsr1
 12242  1186  0141               	movlb	1	; select bank1
 12243  1187  00B9               	movwf	ftoa@fValue^(0+128)
 12244  1188  3F41               	moviw [1]fsr1
 12245  1189  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12246  118A  3F42               	moviw [2]fsr1
 12247  118B  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12248  118C  3F43               	moviw [3]fsr1
 12249  118D  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12250  118E  3004               	movlw	4
 12251  118F  00C7               	movwf	??_statusView^(0+128)
 12252  1190  0847               	movf	??_statusView^(0+128),w
 12253  1191  00BD               	movwf	ftoa@width^(0+128)
 12254  1192  01BE               	clrf	ftoa@prec^(0+128)
 12255  1193  0ABE               	incf	ftoa@prec^(0+128),f
 12256  1194  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 12257  1195  31A2  2200  3190   	fcall	_ftoa
 12258                           
 12259                           ;menu.c: 57:  OLED_print_xy(3 * 12, 1, str);
 12260  1198  0140               	movlb	0	; select bank0
 12261  1199  01AD               	clrf	OLED_print_xy@row
 12262  119A  0AAD               	incf	OLED_print_xy@row,f
 12263  119B  30E6               	movlw	low _str
 12264  119C  00AE               	movwf	OLED_print_xy@s
 12265  119D  3001               	movlw	high _str
 12266  119E  00AF               	movwf	OLED_print_xy@s+1
 12267  119F  3024               	movlw	36
 12268  11A0  31B3  2324  3190   	fcall	_OLED_print_xy
 12269                           
 12270                           ;menu.c: 58:  OLED_print_xy(3 * 12 + 4, 1, "V  ");
 12271  11A3  0140               	movlb	0	; select bank0
 12272  11A4  01AD               	clrf	OLED_print_xy@row
 12273  11A5  0AAD               	incf	OLED_print_xy@row,f
 12274  11A6  3021               	movlw	low (STR_8| (0+32768))
 12275  11A7  00AE               	movwf	OLED_print_xy@s
 12276  11A8  30BB               	movlw	high (STR_8| (0+32768))
 12277  11A9  00AF               	movwf	OLED_print_xy@s+1
 12278  11AA  3028               	movlw	40
 12279  11AB  31B3  2324  3190   	fcall	_OLED_print_xy
 12280                           
 12281                           ;menu.c: 59:  ftoa(str, data.power, 4, 1);
 12282  11AE  304A               	movlw	74
 12283  11AF  0086               	movwf	6
 12284  11B0  3027               	movlw	39
 12285  11B1  0087               	movwf	7
 12286  11B2  3159               	addfsr 1,25
 12287  11B3  3F40               	moviw [0]fsr1
 12288  11B4  0141               	movlb	1	; select bank1
 12289  11B5  00B9               	movwf	ftoa@fValue^(0+128)
 12290  11B6  3F41               	moviw [1]fsr1
 12291  11B7  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 12292  11B8  3F42               	moviw [2]fsr1
 12293  11B9  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 12294  11BA  3F43               	moviw [3]fsr1
 12295  11BB  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 12296  11BC  3004               	movlw	4
 12297  11BD  00C7               	movwf	??_statusView^(0+128)
 12298  11BE  0847               	movf	??_statusView^(0+128),w
 12299  11BF  00BD               	movwf	ftoa@width^(0+128)
 12300  11C0  01BE               	clrf	ftoa@prec^(0+128)
 12301  11C1  0ABE               	incf	ftoa@prec^(0+128),f
 12302  11C2  30E6               	movlw	(low (_str| (0+256)))& (0+255)
 12303  11C3  31A2  2200  3190   	fcall	_ftoa
 12304                           
 12305                           ;menu.c: 60:  OLED_print_xy(3 * 12 + 7, 1, str);
 12306  11C6  0140               	movlb	0	; select bank0
 12307  11C7  01AD               	clrf	OLED_print_xy@row
 12308  11C8  0AAD               	incf	OLED_print_xy@row,f
 12309  11C9  30E6               	movlw	low _str
 12310  11CA  00AE               	movwf	OLED_print_xy@s
 12311  11CB  3001               	movlw	high _str
 12312  11CC  00AF               	movwf	OLED_print_xy@s+1
 12313  11CD  302B               	movlw	43
 12314  11CE  31B3  2324  3190   	fcall	_OLED_print_xy
 12315                           
 12316                           ;menu.c: 61:  OLED_print_xy(3 * 12 + 11, 1, "W");
 12317  11D1  0140               	movlb	0	; select bank0
 12318  11D2  01AD               	clrf	OLED_print_xy@row
 12319  11D3  0AAD               	incf	OLED_print_xy@row,f
 12320  11D4  3081               	movlw	low ((STR_79+11)| (0+32768))
 12321  11D5  00AE               	movwf	OLED_print_xy@s
 12322  11D6  30B9               	movlw	high ((STR_79+11)| (0+32768))
 12323  11D7  00AF               	movwf	OLED_print_xy@s+1
 12324  11D8  302F               	movlw	47
 12325  11D9  31B3  2324  3190   	fcall	_OLED_print_xy
 12326                           
 12327                           ;menu.c: 62:  itoa(str, 1, 3);
 12328  11DC  30E6               	movlw	low _str
 12329  11DD  0140               	movlb	0	; select bank0
 12330  11DE  00A9               	movwf	itoa@str
 12331  11DF  3001               	movlw	high _str
 12332  11E0  00AA               	movwf	itoa@str+1
 12333  11E1  01AB               	clrf	itoa@value
 12334  11E2  0AAB               	incf	itoa@value,f
 12335  11E3  3003               	movlw	3
 12336  11E4  0141               	movlb	1	; select bank1
 12337  11E5  00C7               	movwf	??_statusView^(0+128)
 12338  11E6  0847               	movf	??_statusView^(0+128),w
 12339  11E7  0140               	movlb	0	; select bank0
 12340  11E8  00AC               	movwf	itoa@width
 12341  11E9  31B6  26D8  3190   	fcall	_itoa
 12342                           
 12343                           ;menu.c: 63:  OLED_print_xy(4 * 12 + 8, 0, str);
 12344  11EC  0140               	movlb	0	; select bank0
 12345  11ED  01AD               	clrf	OLED_print_xy@row
 12346  11EE  30E6               	movlw	low _str
 12347  11EF  00AE               	movwf	OLED_print_xy@s
 12348  11F0  3001               	movlw	high _str
 12349  11F1  00AF               	movwf	OLED_print_xy@s+1
 12350  11F2  3038               	movlw	56
 12351  11F3  31B3  2324  3190   	fcall	_OLED_print_xy
 12352                           
 12353                           ;menu.c: 65:  if (data.status.SENSOR_OK) {
 12354  11F6  3073               	movlw	115
 12355  11F7  0086               	movwf	6
 12356  11F8  3027               	movlw	39
 12357  11F9  0087               	movwf	7
 12358  11FA  1D81               	btfss	1,3
 12359  11FB  2A2F               	goto	l8198
 12360                           
 12361                           ;menu.c: 66:   itoa(str, data.sensorVersion, 3);
 12362  11FC  30E6               	movlw	low _str
 12363  11FD  0140               	movlb	0	; select bank0
 12364  11FE  00A9               	movwf	itoa@str
 12365  11FF  3001               	movlw	high _str
 12366  1200  00AA               	movwf	itoa@str+1
 12367  1201  304A               	movlw	74
 12368  1202  0086               	movwf	6
 12369  1203  3027               	movlw	39
 12370  1204  0087               	movwf	7
 12371  1205  314C               	addfsr 1,12
 12372  1206  0801               	movf	1,w
 12373  1207  0141               	movlb	1	; select bank1
 12374  1208  00C7               	movwf	??_statusView^(0+128)
 12375  1209  0847               	movf	??_statusView^(0+128),w
 12376  120A  0140               	movlb	0	; select bank0
 12377  120B  00AB               	movwf	itoa@value
 12378  120C  3003               	movlw	3
 12379  120D  0141               	movlb	1	; select bank1
 12380  120E  00C8               	movwf	(??_statusView+1)^(0+128)
 12381  120F  0848               	movf	(??_statusView+1)^(0+128),w
 12382  1210  0140               	movlb	0	; select bank0
 12383  1211  00AC               	movwf	itoa@width
 12384  1212  31B6  26D8  3190   	fcall	_itoa
 12385                           
 12386                           ;menu.c: 67:   OLED_print_xy(4 * 12 + 8, 1, str);
 12387  1215  0140               	movlb	0	; select bank0
 12388  1216  01AD               	clrf	OLED_print_xy@row
 12389  1217  0AAD               	incf	OLED_print_xy@row,f
 12390  1218  30E6               	movlw	low _str
 12391  1219  00AE               	movwf	OLED_print_xy@s
 12392  121A  3001               	movlw	high _str
 12393  121B  00AF               	movwf	OLED_print_xy@s+1
 12394  121C  3038               	movlw	56
 12395  121D  31B3  2324  3190   	fcall	_OLED_print_xy
 12396                           
 12397                           ;menu.c: 68:   page = paging(page, 5);
 12398  1220  3005               	movlw	5
 12399  1221  0141               	movlb	1	; select bank1
 12400  1222  00C7               	movwf	??_statusView^(0+128)
 12401  1223  0847               	movf	??_statusView^(0+128),w
 12402  1224  0140               	movlb	0	; select bank0
 12403  1225  00A7               	movwf	paging@lastPage
 12404  1226  0142               	movlb	2	; select bank2
 12405  1227  0869               	movf	statusView@page^(0+256),w
 12406  1228  3187  278D         	fcall	_paging
 12407  122A  0141               	movlb	1	; select bank1
 12408  122B  00C8               	movwf	(??_statusView+1)^(0+128)
 12409  122C  0848               	movf	(??_statusView+1)^(0+128),w
 12410  122D  0142               	movlb	2	; select bank2
 12411  122E  00E9               	movwf	statusView@page^(0+256)
 12412  122F                     l8198:	
 12413                           
 12414                           ;menu.c: 70:  return page;
 12415  122F  0142               	movlb	2	; select bank2
 12416  1230  0869               	movf	statusView@page^(0+256),w
 12417  1231  0008               	return
 12418  1232                     __end_of_statusView:	
 12419                           
 12420                           	psect	text16
 12421  2B23                     __ptext16:	
 12422 ;; *************** function _storeNVM *****************
 12423 ;; Defined at:
 12424 ;;		line 468 in file "system.c"
 12425 ;; Parameters:    Size  Location     Type
 12426 ;;		None
 12427 ;; Auto vars:     Size  Location     Type
 12428 ;;  buf            64   15[BANK0 ] unsigned short [32]
 12429 ;;  nvm            32    0[BANK1 ] struct .
 12430 ;;  n               1   79[BANK0 ] unsigned char 
 12431 ;; Return value:  Size  Location     Type
 12432 ;;                  1    wreg      unsigned char 
 12433 ;; Registers used:
 12434 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12435 ;; Tracked objects:
 12436 ;;		On entry : 0/0
 12437 ;;		On exit  : 0/0
 12438 ;;		Unchanged: 0/0
 12439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12440 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12441 ;;      Locals:         0      65      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12442 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12443 ;;      Totals:         0      67      32       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12444 ;;Total ram usage:       99 bytes
 12445 ;; Hardware stack levels used:    1
 12446 ;; Hardware stack levels required when called:    5
 12447 ;; This function calls:
 12448 ;;		_FLASH_EraseBlock
 12449 ;;		_FLASH_WriteBlock
 12450 ;; This function is called by:
 12451 ;;		_setLensDia
 12452 ;;		_setDPOffset
 12453 ;;		_setSkyTemp
 12454 ;;		_setFudgeFactor
 12455 ;; This function uses a non-reentrant model
 12456 ;;
 12457                           
 12458                           
 12459                           ;psect for function _storeNVM
 12460  2B23                     _storeNVM:	
 12461                           
 12462                           ;system.c: 470:  uint8_t n;;system.c: 471:  t_nvmData nvm;;system.c: 472:  uint16_t buf[
      +                          32];;system.c: 474:  nvm.lensDia[0] = data.heater[0].lensDia;
 12463                           
 12464                           ;incstack = 0
 12465                           ; Regs used in _storeNVM: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12466  2B23  3089               	movlw	137
 12467  2B24  0086               	movwf	6
 12468  2B25  3027               	movlw	39
 12469  2B26  0087               	movwf	7
 12470  2B27  3F40               	moviw [0]fsr1
 12471  2B28  0141               	movlb	1	; select bank1
 12472  2B29  00A0               	movwf	storeNVM@nvm^(0+128)
 12473  2B2A  3F41               	moviw [1]fsr1
 12474  2B2B  00A1               	movwf	(storeNVM@nvm+1)^(0+128)
 12475  2B2C  3F42               	moviw [2]fsr1
 12476  2B2D  00A2               	movwf	(storeNVM@nvm+2)^(0+128)
 12477  2B2E  3F43               	moviw [3]fsr1
 12478  2B2F  00A3               	movwf	(storeNVM@nvm+3)^(0+128)
 12479                           
 12480                           ;system.c: 475:  nvm.lensDia[1] = data.heater[1].lensDia;
 12481  2B30  30A8               	movlw	168
 12482  2B31  0086               	movwf	6
 12483  2B32  3027               	movlw	39
 12484  2B33  0087               	movwf	7
 12485  2B34  3F40               	moviw [0]fsr1
 12486  2B35  00A4               	movwf	(storeNVM@nvm^(0+128)+4)
 12487  2B36  3F41               	moviw [1]fsr1
 12488  2B37  00A5               	movwf	((storeNVM@nvm+1)^(0+128)+4)
 12489  2B38  3F42               	moviw [2]fsr1
 12490  2B39  00A6               	movwf	((storeNVM@nvm+2)^(0+128)+4)
 12491  2B3A  3F43               	moviw [3]fsr1
 12492  2B3B  00A7               	movwf	((storeNVM@nvm+3)^(0+128)+4)
 12493                           
 12494                           ;system.c: 476:  nvm.lensDia[2] = data.heater[2].lensDia;
 12495  2B3C  30C7               	movlw	199
 12496  2B3D  0086               	movwf	6
 12497  2B3E  3027               	movlw	39
 12498  2B3F  0087               	movwf	7
 12499  2B40  3F40               	moviw [0]fsr1
 12500  2B41  00A8               	movwf	(storeNVM@nvm^(0+128)+8)
 12501  2B42  3F41               	moviw [1]fsr1
 12502  2B43  00A9               	movwf	((storeNVM@nvm+1)^(0+128)+8)
 12503  2B44  3F42               	moviw [2]fsr1
 12504  2B45  00AA               	movwf	((storeNVM@nvm+2)^(0+128)+8)
 12505  2B46  3F43               	moviw [3]fsr1
 12506  2B47  00AB               	movwf	((storeNVM@nvm+3)^(0+128)+8)
 12507                           
 12508                           ;system.c: 477:  nvm.lensDia[3] = data.heater[3].lensDia;
 12509  2B48  30E6               	movlw	230
 12510  2B49  0086               	movwf	6
 12511  2B4A  3027               	movlw	39
 12512  2B4B  0087               	movwf	7
 12513  2B4C  3F40               	moviw [0]fsr1
 12514  2B4D  00AC               	movwf	(storeNVM@nvm^(0+128)+12)
 12515  2B4E  3F41               	moviw [1]fsr1
 12516  2B4F  00AD               	movwf	((storeNVM@nvm+1)^(0+128)+12)
 12517  2B50  3F42               	moviw [2]fsr1
 12518  2B51  00AE               	movwf	((storeNVM@nvm+2)^(0+128)+12)
 12519  2B52  3F43               	moviw [3]fsr1
 12520  2B53  00AF               	movwf	((storeNVM@nvm+3)^(0+128)+12)
 12521                           
 12522                           ;system.c: 478:  nvm.dpOffset = data.dpOffset;
 12523  2B54  304A               	movlw	74
 12524  2B55  0086               	movwf	6
 12525  2B56  3027               	movlw	39
 12526  2B57  0087               	movwf	7
 12527  2B58  315D               	addfsr 1,29
 12528  2B59  3F40               	moviw [0]fsr1
 12529  2B5A  00B0               	movwf	(storeNVM@nvm^(0+128)+16)
 12530  2B5B  3F41               	moviw [1]fsr1
 12531  2B5C  00B1               	movwf	((storeNVM@nvm+1)^(0+128)+16)
 12532  2B5D  3F42               	moviw [2]fsr1
 12533  2B5E  00B2               	movwf	((storeNVM@nvm+2)^(0+128)+16)
 12534  2B5F  3F43               	moviw [3]fsr1
 12535  2B60  00B3               	movwf	((storeNVM@nvm+3)^(0+128)+16)
 12536                           
 12537                           ;system.c: 479:  nvm.skyTemp = data.skyTemp;
 12538  2B61  306B               	movlw	107
 12539  2B62  0086               	movwf	6
 12540  2B63  3027               	movlw	39
 12541  2B64  0087               	movwf	7
 12542  2B65  3F40               	moviw [0]fsr1
 12543  2B66  00B4               	movwf	(storeNVM@nvm^(0+128)+20)
 12544  2B67  3F41               	moviw [1]fsr1
 12545  2B68  00B5               	movwf	((storeNVM@nvm+1)^(0+128)+20)
 12546  2B69  3F42               	moviw [2]fsr1
 12547  2B6A  00B6               	movwf	((storeNVM@nvm+2)^(0+128)+20)
 12548  2B6B  3F43               	moviw [3]fsr1
 12549  2B6C  00B7               	movwf	((storeNVM@nvm+3)^(0+128)+20)
 12550                           
 12551                           ;system.c: 480:  nvm.fudgeFactor = data.fudgeFactor;
 12552  2B6D  306F               	movlw	111
 12553  2B6E  0086               	movwf	6
 12554  2B6F  3027               	movlw	39
 12555  2B70  0087               	movwf	7
 12556  2B71  3F40               	moviw [0]fsr1
 12557  2B72  00B8               	movwf	(storeNVM@nvm^(0+128)+24)
 12558  2B73  3F41               	moviw [1]fsr1
 12559  2B74  00B9               	movwf	((storeNVM@nvm+1)^(0+128)+24)
 12560  2B75  3F42               	moviw [2]fsr1
 12561  2B76  00BA               	movwf	((storeNVM@nvm+2)^(0+128)+24)
 12562  2B77  3F43               	moviw [3]fsr1
 12563  2B78  00BB               	movwf	((storeNVM@nvm+3)^(0+128)+24)
 12564                           
 12565                           ;system.c: 482:  for(n = 0; n < 32; n++) {
 12566  2B79  0140               	movlb	0	; select bank0
 12567  2B7A  01EF               	clrf	storeNVM@n
 12568  2B7B                     l8038:	
 12569                           
 12570                           ;system.c: 483:   buf[n] = (uint16_t)nvm.raw[n];
 12571  2B7B  086F               	movf	storeNVM@n,w
 12572  2B7C  3EA0               	addlw	(low (storeNVM@nvm| 0))& (0+255)
 12573  2B7D  0086               	movwf	6
 12574  2B7E  0187               	clrf	7
 12575  2B7F  0801               	movf	1,w
 12576  2B80  00AD               	movwf	??_storeNVM
 12577  2B81  01AE               	clrf	??_storeNVM+1
 12578  2B82  356F               	lslf	storeNVM@n,w
 12579  2B83  3E2F               	addlw	(low (storeNVM@buf| 0))& (0+255)
 12580  2B84  0086               	movwf	6
 12581  2B85  0187               	clrf	7
 12582  2B86  082D               	movf	??_storeNVM,w
 12583  2B87  3FC0               	movwi [0]fsr1
 12584  2B88  082E               	movf	??_storeNVM+1,w
 12585  2B89  3FC1               	movwi [1]fsr1
 12586                           
 12587                           ;system.c: 484:  }
 12588  2B8A  3001               	movlw	1
 12589  2B8B  00AD               	movwf	??_storeNVM
 12590  2B8C  082D               	movf	??_storeNVM,w
 12591  2B8D  07EF               	addwf	storeNVM@n,f
 12592  2B8E  3020               	movlw	32
 12593  2B8F  026F               	subwf	storeNVM@n,w
 12594  2B90  1C03               	skipc
 12595  2B91  2B7B               	goto	l8038
 12596                           
 12597                           ;system.c: 486:  FLASH_EraseBlock(0x3f80);
 12598  2B92  3080               	movlw	128
 12599  2B93  00A0               	movwf	FLASH_EraseBlock@startAddr
 12600  2B94  303F               	movlw	63
 12601  2B95  00A1               	movwf	FLASH_EraseBlock@startAddr+1
 12602  2B96  31B1  21BA  31AB   	fcall	_FLASH_EraseBlock
 12603                           
 12604                           ;system.c: 487:  FLASH_WriteBlock(0x3f80, buf);
 12605  2B99  3080               	movlw	128
 12606  2B9A  0140               	movlb	0	; select bank0
 12607  2B9B  00A3               	movwf	FLASH_WriteBlock@writeAddr
 12608  2B9C  303F               	movlw	63
 12609  2B9D  00A4               	movwf	FLASH_WriteBlock@writeAddr+1
 12610  2B9E  302F               	movlw	(low (storeNVM@buf| 0))& (0+255)
 12611  2B9F  00AD               	movwf	??_storeNVM
 12612  2BA0  082D               	movf	??_storeNVM,w
 12613  2BA1  00A5               	movwf	FLASH_WriteBlock@flashWordArray
 12614  2BA2  31B7  2735         	fcall	_FLASH_WriteBlock
 12615  2BA4  0008               	return
 12616  2BA5                     __end_of_storeNVM:	
 12617                           
 12618                           	psect	text17
 12619  3735                     __ptext17:	
 12620 ;; *************** function _FLASH_WriteBlock *****************
 12621 ;; Defined at:
 12622 ;;		line 43 in file "memory.c"
 12623 ;; Parameters:    Size  Location     Type
 12624 ;;  writeAddr       2    3[BANK0 ] unsigned short 
 12625 ;;  flashWordArr    1    5[BANK0 ] PTR unsigned short 
 12626 ;;		 -> storeNVM@buf(64), 
 12627 ;; Auto vars:     Size  Location     Type
 12628 ;;  blockStartAd    2    9[BANK0 ] unsigned short 
 12629 ;;  i               1   12[BANK0 ] unsigned char 
 12630 ;;  GIEBitValue     1   11[BANK0 ] unsigned char 
 12631 ;; Return value:  Size  Location     Type
 12632 ;;                  1    wreg      char 
 12633 ;; Registers used:
 12634 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12635 ;; Tracked objects:
 12636 ;;		On entry : 0/0
 12637 ;;		On exit  : 0/0
 12638 ;;		Unchanged: 0/0
 12639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12640 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12641 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12642 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12643 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12644 ;;Total ram usage:       10 bytes
 12645 ;; Hardware stack levels used:    1
 12646 ;; Hardware stack levels required when called:    4
 12647 ;; This function calls:
 12648 ;;		_FLASH_EraseBlock
 12649 ;; This function is called by:
 12650 ;;		_storeNVM
 12651 ;;		_FLASH_WriteWord
 12652 ;; This function uses a non-reentrant model
 12653 ;;
 12654                           
 12655                           
 12656                           ;psect for function _FLASH_WriteBlock
 12657  3735                     _FLASH_WriteBlock:	
 12658                           
 12659                           ;memory.c: 43: int8_t FLASH_WriteBlock(uint16_t writeAddr, uint16_t *flashWordArray);mem
      +                          ory.c: 44: {;memory.c: 45:  uint16_t blockStartAddr = (uint16_t) (writeAddr & ((0x4000 -
      +                           1) ^ (32 - 1)));
 12660                           
 12661                           ;incstack = 0
 12662                           ; Regs used in _FLASH_WriteBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12663  3735  30E0               	movlw	224
 12664  3736  0140               	movlb	0	; select bank0
 12665  3737  0523               	andwf	FLASH_WriteBlock@writeAddr,w
 12666  3738  00A9               	movwf	FLASH_WriteBlock@blockStartAddr
 12667  3739  303F               	movlw	63
 12668  373A  0524               	andwf	FLASH_WriteBlock@writeAddr+1,w
 12669  373B  00AA               	movwf	FLASH_WriteBlock@blockStartAddr+1
 12670                           
 12671                           ;memory.c: 46:  uint8_t GIEBitValue = INTCONbits.GIE;
 12672  373C  3000               	movlw	0
 12673  373D  1B8B               	btfsc	11,7	;volatile
 12674  373E  3001               	movlw	1
 12675  373F  00AB               	movwf	FLASH_WriteBlock@GIEBitValue
 12676                           
 12677                           ;memory.c: 47:  uint8_t i;;memory.c: 51:  if (writeAddr != blockStartAddr) {
 12678  3740  082A               	movf	FLASH_WriteBlock@blockStartAddr+1,w
 12679  3741  0624               	xorwf	FLASH_WriteBlock@writeAddr+1,w
 12680  3742  1D03               	skipz
 12681  3743  2F46               	goto	u7975
 12682  3744  0829               	movf	FLASH_WriteBlock@blockStartAddr,w
 12683  3745  0623               	xorwf	FLASH_WriteBlock@writeAddr,w
 12684  3746                     u7975:	
 12685  3746  1D03               	btfss	3,2
 12686  3747  0008               	return
 12687                           
 12688                           ;memory.c: 55:  INTCONbits.GIE = 0;
 12689                           
 12690                           ;memory.c: 53:  }
 12691  3748  138B               	bcf	11,7	;volatile
 12692                           
 12693                           ;memory.c: 58:  FLASH_EraseBlock(writeAddr);
 12694  3749  0824               	movf	FLASH_WriteBlock@writeAddr+1,w
 12695  374A  00A1               	movwf	FLASH_EraseBlock@startAddr+1
 12696  374B  0823               	movf	FLASH_WriteBlock@writeAddr,w
 12697  374C  00A0               	movwf	FLASH_EraseBlock@startAddr
 12698  374D  31B1  21BA  31B7   	fcall	_FLASH_EraseBlock
 12699                           
 12700                           ;memory.c: 61:  NVMCON1bits.NVMREGS = 0;
 12701  3750  0150               	movlb	16	; select bank16
 12702  3751  131E               	bcf	30,6	;volsfr
 12703                           
 12704                           ;memory.c: 62:  NVMCON1bits.WREN = 1;
 12705  3752  151E               	bsf	30,2	;volsfr
 12706                           
 12707                           ;memory.c: 63:  NVMCON1bits.LWLO = 1;
 12708  3753  169E               	bsf	30,5	;volsfr
 12709                           
 12710                           ;memory.c: 65:  for (i = 0; i < 32; i++) {
 12711  3754  0140               	movlb	0	; select bank0
 12712  3755  01AC               	clrf	FLASH_WriteBlock@i
 12713  3756                     l7328:	
 12714                           
 12715                           ;memory.c: 67:   NVMADRL = (writeAddr & 0xFF);
 12716  3756  0823               	movf	FLASH_WriteBlock@writeAddr,w
 12717  3757  0150               	movlb	16	; select bank16
 12718  3758  009A               	movwf	26	;volatile
 12719                           
 12720                           ;memory.c: 69:   NVMADRH = ((writeAddr & 0xFF00) >> 8);
 12721  3759  0140               	movlb	0	; select bank0
 12722  375A  0824               	movf	FLASH_WriteBlock@writeAddr+1,w
 12723  375B  0150               	movlb	16	; select bank16
 12724  375C  009B               	movwf	27	;volatile
 12725                           
 12726                           ;memory.c: 72:   NVMDATL = flashWordArray[i];
 12727  375D  0140               	movlb	0	; select bank0
 12728  375E  352C               	lslf	FLASH_WriteBlock@i,w
 12729  375F  0725               	addwf	FLASH_WriteBlock@flashWordArray,w
 12730  3760  00A6               	movwf	??_FLASH_WriteBlock
 12731  3761  0826               	movf	??_FLASH_WriteBlock,w
 12732  3762  0086               	movwf	6
 12733  3763  0187               	clrf	7
 12734  3764  0801               	movf	1,w
 12735  3765  0150               	movlb	16	; select bank16
 12736  3766  009C               	movwf	28	;volatile
 12737                           
 12738                           ;memory.c: 73:   NVMDATH = ((flashWordArray[i] & 0xFF00) >> 8);
 12739  3767  0140               	movlb	0	; select bank0
 12740  3768  352C               	lslf	FLASH_WriteBlock@i,w
 12741  3769  0725               	addwf	FLASH_WriteBlock@flashWordArray,w
 12742  376A  00A6               	movwf	??_FLASH_WriteBlock
 12743  376B  0826               	movf	??_FLASH_WriteBlock,w
 12744  376C  0086               	movwf	6
 12745  376D  0187               	clrf	7
 12746  376E  3F40               	moviw [0]fsr1
 12747  376F  00A7               	movwf	??_FLASH_WriteBlock+1
 12748  3770  3F41               	moviw [1]fsr1
 12749  3771  00A8               	movwf	??_FLASH_WriteBlock+2
 12750  3772  0828               	movf	??_FLASH_WriteBlock+2,w
 12751  3773  0150               	movlb	16	; select bank16
 12752  3774  009D               	movwf	29	;volatile
 12753                           
 12754                           ;memory.c: 75:   if (i == (32 - 1)) {
 12755  3775  301F               	movlw	31
 12756  3776  0140               	movlb	0	; select bank0
 12757  3777  062C               	xorwf	FLASH_WriteBlock@i,w
 12758  3778  1D03               	btfss	3,2
 12759  3779  2F7C               	goto	l7340
 12760                           
 12761                           ;memory.c: 77:    NVMCON1bits.LWLO = 0;
 12762  377A  0150               	movlb	16	; select bank16
 12763  377B  129E               	bcf	30,5	;volsfr
 12764  377C                     l7340:	
 12765                           
 12766                           ;memory.c: 80:   NVMCON2 = 0x55;
 12767  377C  3055               	movlw	85
 12768  377D  0150               	movlb	16	; select bank16
 12769  377E  009F               	movwf	31	;volsfr
 12770                           
 12771                           ;memory.c: 81:   NVMCON2 = 0xAA;
 12772  377F  30AA               	movlw	170
 12773  3780  009F               	movwf	31	;volsfr
 12774                           
 12775                           ;memory.c: 82:   NVMCON1bits.WR = 1;
 12776  3781  149E               	bsf	30,1	;volsfr
 12777                           
 12778                           ;memory.c: 83:   __nop();
 12779  3782  0000               	nop
 12780                           
 12781                           ;memory.c: 84:   __nop();
 12782  3783  0000               	nop
 12783                           
 12784                           ;memory.c: 86:   writeAddr++;
 12785  3784  3001               	movlw	1
 12786  3785  0140               	movlb	0	; select bank0
 12787  3786  07A3               	addwf	FLASH_WriteBlock@writeAddr,f
 12788  3787  3000               	movlw	0
 12789  3788  3DA4               	addwfc	FLASH_WriteBlock@writeAddr+1,f
 12790                           
 12791                           ;memory.c: 87:  }
 12792  3789  3001               	movlw	1
 12793  378A  00A6               	movwf	??_FLASH_WriteBlock
 12794  378B  0826               	movf	??_FLASH_WriteBlock,w
 12795  378C  07AC               	addwf	FLASH_WriteBlock@i,f
 12796  378D  3020               	movlw	32
 12797  378E  022C               	subwf	FLASH_WriteBlock@i,w
 12798  378F  1C03               	skipc
 12799  3790  2F56               	goto	l7328
 12800                           
 12801                           ;memory.c: 89:  NVMCON1bits.WREN = 0;
 12802  3791  0150               	movlb	16	; select bank16
 12803  3792  111E               	bcf	30,2	;volsfr
 12804                           
 12805                           ;memory.c: 90:  INTCONbits.GIE = GIEBitValue;
 12806  3793  0140               	movlb	0	; select bank0
 12807  3794  0C2B               	rrf	FLASH_WriteBlock@GIEBitValue,w
 12808  3795  1C03               	skipc
 12809  3796  138B               	bcf	11,7	;volatile
 12810  3797  1803               	skipnc
 12811  3798  178B               	bsf	11,7	;volatile
 12812  3799  0008               	return
 12813  379A                     __end_of_FLASH_WriteBlock:	
 12814                           
 12815                           	psect	text18
 12816  31BA                     __ptext18:	
 12817 ;; *************** function _FLASH_EraseBlock *****************
 12818 ;; Defined at:
 12819 ;;		line 95 in file "memory.c"
 12820 ;; Parameters:    Size  Location     Type
 12821 ;;  startAddr       2    0[BANK0 ] unsigned short 
 12822 ;; Auto vars:     Size  Location     Type
 12823 ;;  GIEBitValue     1    2[BANK0 ] unsigned char 
 12824 ;; Return value:  Size  Location     Type
 12825 ;;                  1    wreg      void 
 12826 ;; Registers used:
 12827 ;;		wreg, status,2, status,0
 12828 ;; Tracked objects:
 12829 ;;		On entry : 0/0
 12830 ;;		On exit  : 0/0
 12831 ;;		Unchanged: 0/0
 12832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12833 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12836 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12837 ;;Total ram usage:        3 bytes
 12838 ;; Hardware stack levels used:    1
 12839 ;; Hardware stack levels required when called:    3
 12840 ;; This function calls:
 12841 ;;		Nothing
 12842 ;; This function is called by:
 12843 ;;		_storeNVM
 12844 ;;		_FLASH_WriteBlock
 12845 ;; This function uses a non-reentrant model
 12846 ;;
 12847                           
 12848                           
 12849                           ;psect for function _FLASH_EraseBlock
 12850  31BA                     _FLASH_EraseBlock:	
 12851                           
 12852                           ;memory.c: 95: void FLASH_EraseBlock(uint16_t startAddr);memory.c: 96: {;memory.c: 97:  
      +                          uint8_t GIEBitValue = INTCONbits.GIE;
 12853                           
 12854                           ;incstack = 0
 12855                           ; Regs used in _FLASH_EraseBlock: [wreg+status,2+status,0]
 12856  31BA  3000               	movlw	0
 12857  31BB  1B8B               	btfsc	11,7	;volatile
 12858  31BC  3001               	movlw	1
 12859  31BD  0140               	movlb	0	; select bank0
 12860  31BE  00A2               	movwf	FLASH_EraseBlock@GIEBitValue
 12861                           
 12862                           ;memory.c: 100:  INTCONbits.GIE = 0;
 12863  31BF  138B               	bcf	11,7	;volatile
 12864                           
 12865                           ;memory.c: 102:  NVMADRL = (startAddr & 0xFF);
 12866  31C0  0820               	movf	FLASH_EraseBlock@startAddr,w
 12867  31C1  0150               	movlb	16	; select bank16
 12868  31C2  009A               	movwf	26	;volatile
 12869                           
 12870                           ;memory.c: 104:  NVMADRH = ((startAddr & 0xFF00) >> 8);
 12871  31C3  0140               	movlb	0	; select bank0
 12872  31C4  0821               	movf	FLASH_EraseBlock@startAddr+1,w
 12873  31C5  0150               	movlb	16	; select bank16
 12874  31C6  009B               	movwf	27	;volatile
 12875                           
 12876                           ;memory.c: 107:  NVMCON1bits.NVMREGS = 0;
 12877  31C7  131E               	bcf	30,6	;volsfr
 12878                           
 12879                           ;memory.c: 108:  NVMCON1bits.FREE = 1;
 12880  31C8  161E               	bsf	30,4	;volsfr
 12881                           
 12882                           ;memory.c: 109:  NVMCON1bits.WREN = 1;
 12883  31C9  151E               	bsf	30,2	;volsfr
 12884                           
 12885                           ;memory.c: 112:  NVMCON2 = 0x55;
 12886  31CA  3055               	movlw	85
 12887  31CB  009F               	movwf	31	;volsfr
 12888                           
 12889                           ;memory.c: 113:  NVMCON2 = 0xAA;
 12890  31CC  30AA               	movlw	170
 12891  31CD  009F               	movwf	31	;volsfr
 12892                           
 12893                           ;memory.c: 114:  NVMCON1bits.WR = 1;
 12894  31CE  149E               	bsf	30,1	;volsfr
 12895                           
 12896                           ;memory.c: 115:  __nop();
 12897  31CF  0000               	nop
 12898                           
 12899                           ;memory.c: 116:  __nop();
 12900  31D0  0000               	nop
 12901                           
 12902                           ;memory.c: 118:  NVMCON1bits.WREN = 0;
 12903  31D1  0150               	movlb	16	; select bank16
 12904  31D2  111E               	bcf	30,2	;volsfr
 12905                           
 12906                           ;memory.c: 119:  INTCONbits.GIE = GIEBitValue;
 12907  31D3  0140               	movlb	0	; select bank0
 12908  31D4  0C22               	rrf	FLASH_EraseBlock@GIEBitValue,w
 12909  31D5  1C03               	skipc
 12910  31D6  138B               	bcf	11,7	;volatile
 12911  31D7  1803               	skipnc
 12912  31D8  178B               	bsf	11,7	;volatile
 12913  31D9  0008               	return
 12914  31DA                     __end_of_FLASH_EraseBlock:	
 12915                           
 12916                           	psect	text19
 12917  2CC6                     __ptext19:	
 12918 ;; *************** function _spinInput *****************
 12919 ;; Defined at:
 12920 ;;		line 100 in file "inputs.c"
 12921 ;; Parameters:    Size  Location     Type
 12922 ;;  input           2   25[BANK1 ] PTR float 
 12923 ;;		 -> data.heater(124), data(166), 
 12924 ;;  min             4   27[BANK1 ] float 
 12925 ;;  max             4   31[BANK1 ] float 
 12926 ;;  step            4   35[BANK1 ] float 
 12927 ;; Auto vars:     Size  Location     Type
 12928 ;;  dir             1   39[BANK1 ] enum E7864
 12929 ;; Return value:  Size  Location     Type
 12930 ;;                  1    wreg      void 
 12931 ;; Registers used:
 12932 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12933 ;; Tracked objects:
 12934 ;;		On entry : 0/0
 12935 ;;		On exit  : 0/0
 12936 ;;		Unchanged: 0/0
 12937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12938 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12939 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12940 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12941 ;;      Totals:         0       1      15       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12942 ;;Total ram usage:       16 bytes
 12943 ;; Hardware stack levels used:    1
 12944 ;; Hardware stack levels required when called:    5
 12945 ;; This function calls:
 12946 ;;		___fladd
 12947 ;;		___flge
 12948 ;;		___flsub
 12949 ;;		_getRotDir
 12950 ;; This function is called by:
 12951 ;;		_setOutputPower
 12952 ;;		_setLensDia
 12953 ;;		_setDPOffset
 12954 ;;		_setSkyTemp
 12955 ;;		_setFudgeFactor
 12956 ;; This function uses a non-reentrant model
 12957 ;;
 12958                           
 12959                           
 12960                           ;psect for function _spinInput
 12961  2CC6                     _spinInput:	
 12962                           
 12963                           ;inputs.c: 100: void spinInput(float *input, float min, float max, float step);inputs.c:
      +                           101: {;inputs.c: 102:  enum e_direction dir = getRotDir();
 12964                           
 12965                           ;incstack = 0
 12966                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 12967  2CC6  31B1  2121  31AC   	fcall	_getRotDir
 12968  2CC9  0140               	movlb	0	; select bank0
 12969  2CCA  00EF               	movwf	??_spinInput
 12970  2CCB  086F               	movf	??_spinInput,w
 12971  2CCC  0141               	movlb	1	; select bank1
 12972  2CCD  00C7               	movwf	spinInput@dir^(0+128)
 12973                           
 12974                           ;inputs.c: 104:  if ((dir == ROT_CCW) && (*input > min))
 12975  2CCE  3002               	movlw	2
 12976  2CCF  0647               	xorwf	spinInput@dir^(0+128),w
 12977  2CD0  1D03               	btfss	3,2
 12978  2CD1  2D10               	goto	l7880
 12979  2CD2  083E               	movf	(spinInput@min+3)^(0+128),w
 12980  2CD3  00B0               	movwf	(___flge@ff1+3)^(0+128)
 12981  2CD4  083D               	movf	(spinInput@min+2)^(0+128),w
 12982  2CD5  00AF               	movwf	(___flge@ff1+2)^(0+128)
 12983  2CD6  083C               	movf	(spinInput@min+1)^(0+128),w
 12984  2CD7  00AE               	movwf	(___flge@ff1+1)^(0+128)
 12985  2CD8  083B               	movf	spinInput@min^(0+128),w
 12986  2CD9  00AD               	movwf	___flge@ff1^(0+128)
 12987  2CDA  0839               	movf	spinInput@input^(0+128),w
 12988  2CDB  0086               	movwf	6
 12989  2CDC  083A               	movf	(spinInput@input+1)^(0+128),w
 12990  2CDD  0087               	movwf	7
 12991  2CDE  3F40               	moviw [0]fsr1
 12992  2CDF  00B1               	movwf	___flge@ff2^(0+128)
 12993  2CE0  3F41               	moviw [1]fsr1
 12994  2CE1  00B2               	movwf	(___flge@ff2+1)^(0+128)
 12995  2CE2  3F42               	moviw [2]fsr1
 12996  2CE3  00B3               	movwf	(___flge@ff2+2)^(0+128)
 12997  2CE4  3F43               	moviw [3]fsr1
 12998  2CE5  00B4               	movwf	(___flge@ff2+3)^(0+128)
 12999  2CE6  31AA  2227  31AC   	fcall	___flge
 13000  2CE9  1803               	btfsc	3,0
 13001  2CEA  2D10               	goto	l7880
 13002                           
 13003                           ;inputs.c: 105:   *input -= step;
 13004  2CEB  0141               	movlb	1	; select bank1
 13005  2CEC  0846               	movf	(spinInput@step+3)^(0+128),w
 13006  2CED  00A3               	movwf	(___flsub@a+3)^(0+128)
 13007  2CEE  0845               	movf	(spinInput@step+2)^(0+128),w
 13008  2CEF  00A2               	movwf	(___flsub@a+2)^(0+128)
 13009  2CF0  0844               	movf	(spinInput@step+1)^(0+128),w
 13010  2CF1  00A1               	movwf	(___flsub@a+1)^(0+128)
 13011  2CF2  0843               	movf	spinInput@step^(0+128),w
 13012  2CF3  00A0               	movwf	___flsub@a^(0+128)
 13013  2CF4  0839               	movf	spinInput@input^(0+128),w
 13014  2CF5  0086               	movwf	6
 13015  2CF6  083A               	movf	(spinInput@input+1)^(0+128),w
 13016  2CF7  0087               	movwf	7
 13017  2CF8  3F40               	moviw [0]fsr1
 13018  2CF9  00A4               	movwf	___flsub@b^(0+128)
 13019  2CFA  3F41               	moviw [1]fsr1
 13020  2CFB  00A5               	movwf	(___flsub@b+1)^(0+128)
 13021  2CFC  3F42               	moviw [2]fsr1
 13022  2CFD  00A6               	movwf	(___flsub@b+2)^(0+128)
 13023  2CFE  3F43               	moviw [3]fsr1
 13024  2CFF  00A7               	movwf	(___flsub@b+3)^(0+128)
 13025  2D00  31B3  2388         	fcall	___flsub
 13026  2D02  0141               	movlb	1	; select bank1
 13027  2D03  0839               	movf	spinInput@input^(0+128),w
 13028  2D04  0086               	movwf	6
 13029  2D05  083A               	movf	(spinInput@input+1)^(0+128),w
 13030  2D06  0087               	movwf	7
 13031  2D07  0820               	movf	?___flsub^(0+128),w
 13032  2D08  3FC0               	movwi [0]fsr1
 13033  2D09  0821               	movf	(?___flsub+1)^(0+128),w
 13034  2D0A  3FC1               	movwi [1]fsr1
 13035  2D0B  0822               	movf	(?___flsub+2)^(0+128),w
 13036  2D0C  3FC2               	movwi [2]fsr1
 13037  2D0D  0823               	movf	(?___flsub+3)^(0+128),w
 13038  2D0E  3FC3               	movwi [3]fsr1
 13039  2D0F  0008               	return
 13040  2D10                     l7880:	
 13041  2D10  0141               	movlb	1	; select bank1
 13042  2D11  0347               	decf	spinInput@dir^(0+128),w
 13043  2D12  1D03               	btfss	3,2
 13044  2D13  0008               	return
 13045  2D14  0839               	movf	spinInput@input^(0+128),w
 13046  2D15  0086               	movwf	6
 13047  2D16  083A               	movf	(spinInput@input+1)^(0+128),w
 13048  2D17  0087               	movwf	7
 13049  2D18  3F40               	moviw [0]fsr1
 13050  2D19  00AD               	movwf	___flge@ff1^(0+128)
 13051  2D1A  3F41               	moviw [1]fsr1
 13052  2D1B  00AE               	movwf	(___flge@ff1+1)^(0+128)
 13053  2D1C  3F42               	moviw [2]fsr1
 13054  2D1D  00AF               	movwf	(___flge@ff1+2)^(0+128)
 13055  2D1E  3F43               	moviw [3]fsr1
 13056  2D1F  00B0               	movwf	(___flge@ff1+3)^(0+128)
 13057  2D20  0842               	movf	(spinInput@max+3)^(0+128),w
 13058  2D21  00B4               	movwf	(___flge@ff2+3)^(0+128)
 13059  2D22  0841               	movf	(spinInput@max+2)^(0+128),w
 13060  2D23  00B3               	movwf	(___flge@ff2+2)^(0+128)
 13061  2D24  0840               	movf	(spinInput@max+1)^(0+128),w
 13062  2D25  00B2               	movwf	(___flge@ff2+1)^(0+128)
 13063  2D26  083F               	movf	spinInput@max^(0+128),w
 13064  2D27  00B1               	movwf	___flge@ff2^(0+128)
 13065  2D28  31AA  2227  31AC   	fcall	___flge
 13066  2D2B  1803               	btfsc	3,0
 13067  2D2C  0008               	return
 13068                           
 13069                           ;inputs.c: 107:   *input += step;
 13070  2D2D  0141               	movlb	1	; select bank1
 13071  2D2E  0846               	movf	(spinInput@step+3)^(0+128),w
 13072  2D2F  0140               	movlb	0	; select bank0
 13073  2D30  00DE               	movwf	___fladd@b+3
 13074  2D31  0141               	movlb	1	; select bank1
 13075  2D32  0845               	movf	(spinInput@step+2)^(0+128),w
 13076  2D33  0140               	movlb	0	; select bank0
 13077  2D34  00DD               	movwf	___fladd@b+2
 13078  2D35  0141               	movlb	1	; select bank1
 13079  2D36  0844               	movf	(spinInput@step+1)^(0+128),w
 13080  2D37  0140               	movlb	0	; select bank0
 13081  2D38  00DC               	movwf	___fladd@b+1
 13082  2D39  0141               	movlb	1	; select bank1
 13083  2D3A  0843               	movf	spinInput@step^(0+128),w
 13084  2D3B  0140               	movlb	0	; select bank0
 13085  2D3C  00DB               	movwf	___fladd@b
 13086  2D3D  0141               	movlb	1	; select bank1
 13087  2D3E  0839               	movf	spinInput@input^(0+128),w
 13088  2D3F  0086               	movwf	6
 13089  2D40  083A               	movf	(spinInput@input+1)^(0+128),w
 13090  2D41  0087               	movwf	7
 13091  2D42  3F40               	moviw [0]fsr1
 13092  2D43  0140               	movlb	0	; select bank0
 13093  2D44  00DF               	movwf	___fladd@a
 13094  2D45  3F41               	moviw [1]fsr1
 13095  2D46  00E0               	movwf	___fladd@a+1
 13096  2D47  3F42               	moviw [2]fsr1
 13097  2D48  00E1               	movwf	___fladd@a+2
 13098  2D49  3F43               	moviw [3]fsr1
 13099  2D4A  00E2               	movwf	___fladd@a+3
 13100  2D4B  3192  2232         	fcall	___fladd
 13101  2D4D  0141               	movlb	1	; select bank1
 13102  2D4E  0839               	movf	spinInput@input^(0+128),w
 13103  2D4F  0086               	movwf	6
 13104  2D50  083A               	movf	(spinInput@input+1)^(0+128),w
 13105  2D51  0087               	movwf	7
 13106  2D52  0140               	movlb	0	; select bank0
 13107  2D53  085B               	movf	?___fladd,w
 13108  2D54  3FC0               	movwi [0]fsr1
 13109  2D55  085C               	movf	?___fladd+1,w
 13110  2D56  3FC1               	movwi [1]fsr1
 13111  2D57  085D               	movf	?___fladd+2,w
 13112  2D58  3FC2               	movwi [2]fsr1
 13113  2D59  085E               	movf	?___fladd+3,w
 13114  2D5A  3FC3               	movwi [3]fsr1
 13115  2D5B  0008               	return
 13116  2D5C                     __end_of_spinInput:	
 13117                           
 13118                           	psect	text20
 13119  312C                     __ptext20:	
 13120 ;; *************** function _getPB *****************
 13121 ;; Defined at:
 13122 ;;		line 89 in file "inputs.c"
 13123 ;; Parameters:    Size  Location     Type
 13124 ;;		None
 13125 ;; Auto vars:     Size  Location     Type
 13126 ;;  ret             1    1[BANK0 ] enum E7868
 13127 ;; Return value:  Size  Location     Type
 13128 ;;                  1    wreg      enum E7868
 13129 ;; Registers used:
 13130 ;;		wreg, status,2, status,0
 13131 ;; Tracked objects:
 13132 ;;		On entry : 0/0
 13133 ;;		On exit  : 0/0
 13134 ;;		Unchanged: 0/0
 13135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13137 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13138 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13139 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13140 ;;Total ram usage:        2 bytes
 13141 ;; Hardware stack levels used:    1
 13142 ;; Hardware stack levels required when called:    3
 13143 ;; This function calls:
 13144 ;;		Nothing
 13145 ;; This function is called by:
 13146 ;;		_setOutputPower
 13147 ;;		_setLensDia
 13148 ;;		_setDPOffset
 13149 ;;		_setSkyTemp
 13150 ;;		_setFudgeFactor
 13151 ;;		_viewErrorMessage
 13152 ;;		_menu
 13153 ;; This function uses a non-reentrant model
 13154 ;;
 13155                           
 13156                           
 13157                           ;psect for function _getPB
 13158  312C                     _getPB:	
 13159                           
 13160                           ;inputs.c: 91:  enum e_buttonPress ret = pbState;
 13161                           
 13162                           ;incstack = 0
 13163                           ; Regs used in _getPB: [wreg+status,2+status,0]
 13164  312C  087D               	movf	_pbState,w	;volatile
 13165  312D  0140               	movlb	0	; select bank0
 13166  312E  00A0               	movwf	??_getPB
 13167  312F  0820               	movf	??_getPB,w
 13168  3130  00A1               	movwf	getPB@ret
 13169                           
 13170                           ;inputs.c: 92:  if (pbState != PB_WAIT)
 13171  3131  3004               	movlw	4
 13172  3132  067D               	xorwf	_pbState,w	;volatile
 13173  3133  1D03               	btfss	3,2
 13174                           
 13175                           ;inputs.c: 93:   pbState = PB_NONE;
 13176  3134  01FD               	clrf	_pbState	;volatile
 13177                           
 13178                           ;inputs.c: 94:  return ret;
 13179  3135  0821               	movf	getPB@ret,w
 13180  3136  0008               	return
 13181  3137                     __end_of_getPB:	
 13182                           
 13183                           	psect	text21
 13184  2018                     __ptext21:	
 13185 ;; *************** function _getNextState *****************
 13186 ;; Defined at:
 13187 ;;		line 148 in file "menuhelper.c"
 13188 ;; Parameters:    Size  Location     Type
 13189 ;;  state           1    wreg     enum E7959
 13190 ;;  intState        1   19[BANK0 ] unsigned char 
 13191 ;;  pb              1   20[BANK0 ] enum E7868
 13192 ;;  timeout         1   21[BANK0 ] unsigned char 
 13193 ;; Auto vars:     Size  Location     Type
 13194 ;;  state           1   25[BANK0 ] enum E7959
 13195 ;;  n               1   26[BANK0 ] unsigned char 
 13196 ;; Return value:  Size  Location     Type
 13197 ;;                  1    wreg      char 
 13198 ;; Registers used:
 13199 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13200 ;; Tracked objects:
 13201 ;;		On entry : 0/0
 13202 ;;		On exit  : 0/0
 13203 ;;		Unchanged: 0/0
 13204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13205 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13206 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13207 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13208 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13209 ;;Total ram usage:        8 bytes
 13210 ;; Hardware stack levels used:    1
 13211 ;; Hardware stack levels required when called:    4
 13212 ;; This function calls:
 13213 ;;		___wmul
 13214 ;; This function is called by:
 13215 ;;		_menu
 13216 ;; This function uses a non-reentrant model
 13217 ;;
 13218                           
 13219                           
 13220                           ;psect for function _getNextState
 13221  2018                     _getNextState:	
 13222                           
 13223                           ;incstack = 0
 13224                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13225                           ;getNextState@state stored from wreg
 13226  2018  0140               	movlb	0	; select bank0
 13227  2019  00B9               	movwf	getNextState@state
 13228                           
 13229                           ;menuhelper.c: 148: int8_t getNextState(enum e_menuStates state, uint8_t intState,;menuh
      +                          elper.c: 149:    enum e_buttonPress pb, uint8_t timeout);menuhelper.c: 150: {;menuhelper
      +                          .c: 151:  uint8_t n;;menuhelper.c: 154:  for(n = 0; n < sizeof(nextStateTbl)/sizeof(next
      +                          StateTbl[0]); n++) {
 13230  201A  01BA               	clrf	getNextState@n
 13231  201B                     l8548:	
 13232                           
 13233                           ;menuhelper.c: 155:   if ((nextStateTbl[n].state == state)) {
 13234  201B  083A               	movf	getNextState@n,w
 13235  201C  00B6               	movwf	??_getNextState
 13236  201D  01B7               	clrf	??_getNextState+1
 13237  201E  0836               	movf	??_getNextState,w
 13238  201F  00AD               	movwf	___wmul@multiplier
 13239  2020  0837               	movf	??_getNextState+1,w
 13240  2021  00AE               	movwf	___wmul@multiplier+1
 13241  2022  3006               	movlw	6
 13242  2023  00AF               	movwf	___wmul@multiplicand
 13243  2024  3000               	movlw	0
 13244  2025  00B0               	movwf	___wmul@multiplicand+1
 13245  2026  31B1  2161  31A0   	fcall	___wmul
 13246  2029  0140               	movlb	0	; select bank0
 13247  202A  082E               	movf	?___wmul+1,w
 13248  202B  0085               	movwf	5
 13249  202C  082D               	movf	?___wmul,w
 13250  202D  0084               	movwf	4
 13251  202E  3000               	movlw	low (_nextStateTbl| (0+32768))
 13252  202F  0784               	addwf	4,f
 13253  2030  30B0               	movlw	high (_nextStateTbl| (0+32768))
 13254  2031  3D85               	addwfc	5,f
 13255  2032  0800               	movf	0,w	;code access
 13256  2033  0639               	xorwf	getNextState@state,w
 13257  2034  1D03               	skipz
 13258  2035  28D6               	goto	l8580
 13259                           
 13260                           ;menuhelper.c: 157:    if ((nextStateTbl[n].intState == intState) ||
 13261  2036  083A               	movf	getNextState@n,w
 13262  2037  00B6               	movwf	??_getNextState
 13263  2038  01B7               	clrf	??_getNextState+1
 13264  2039  0836               	movf	??_getNextState,w
 13265  203A  00AD               	movwf	___wmul@multiplier
 13266  203B  0837               	movf	??_getNextState+1,w
 13267  203C  00AE               	movwf	___wmul@multiplier+1
 13268  203D  3006               	movlw	6
 13269  203E  00AF               	movwf	___wmul@multiplicand
 13270  203F  3000               	movlw	0
 13271  2040  00B0               	movwf	___wmul@multiplicand+1
 13272  2041  31B1  2161  31A0   	fcall	___wmul
 13273  2044  0140               	movlb	0	; select bank0
 13274  2045  082E               	movf	?___wmul+1,w
 13275  2046  0085               	movwf	5
 13276  2047  082D               	movf	?___wmul,w
 13277  2048  0084               	movwf	4
 13278  2049  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 13279  204A  0784               	addwf	4,f
 13280  204B  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 13281  204C  3D85               	addwfc	5,f
 13282  204D  0800               	movf	0,w	;code access
 13283  204E  0633               	xorwf	getNextState@intState,w
 13284  204F  1903               	skipnz
 13285  2050  286C               	goto	l8554
 13286  2051  083A               	movf	getNextState@n,w
 13287  2052  00B6               	movwf	??_getNextState
 13288  2053  01B7               	clrf	??_getNextState+1
 13289  2054  0836               	movf	??_getNextState,w
 13290  2055  00AD               	movwf	___wmul@multiplier
 13291  2056  0837               	movf	??_getNextState+1,w
 13292  2057  00AE               	movwf	___wmul@multiplier+1
 13293  2058  3006               	movlw	6
 13294  2059  00AF               	movwf	___wmul@multiplicand
 13295  205A  3000               	movlw	0
 13296  205B  00B0               	movwf	___wmul@multiplicand+1
 13297  205C  31B1  2161  31A0   	fcall	___wmul
 13298  205F  0140               	movlb	0	; select bank0
 13299  2060  082E               	movf	?___wmul+1,w
 13300  2061  0085               	movwf	5
 13301  2062  082D               	movf	?___wmul,w
 13302  2063  0084               	movwf	4
 13303  2064  3001               	movlw	low ((_nextStateTbl+1)| (0+32768))
 13304  2065  0784               	addwf	4,f
 13305  2066  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
 13306  2067  3D85               	addwfc	5,f
 13307  2068  0012               	moviw fsr0++
 13308  2069  3AFF               	xorlw	255
 13309  206A  1D03               	btfss	3,2
 13310  206B  28D6               	goto	l8580
 13311  206C                     l8554:	
 13312                           
 13313                           ;menuhelper.c: 158:     (nextStateTbl[n].intState == 255)) {;menuhelper.c: 159:     if (
      +                          timeout)
 13314  206C  0835               	movf	getNextState@timeout,w
 13315  206D  1903               	btfsc	3,2
 13316  206E  2887               	goto	l8560
 13317                           
 13318                           ;menuhelper.c: 160:      return nextStateTbl[n].timeout;
 13319  206F  083A               	movf	getNextState@n,w
 13320  2070  00B6               	movwf	??_getNextState
 13321  2071  01B7               	clrf	??_getNextState+1
 13322  2072  0836               	movf	??_getNextState,w
 13323  2073  00AD               	movwf	___wmul@multiplier
 13324  2074  0837               	movf	??_getNextState+1,w
 13325  2075  00AE               	movwf	___wmul@multiplier+1
 13326  2076  3006               	movlw	6
 13327  2077  00AF               	movwf	___wmul@multiplicand
 13328  2078  3000               	movlw	0
 13329  2079  00B0               	movwf	___wmul@multiplicand+1
 13330  207A  31B1  2161         	fcall	___wmul
 13331  207C  0140               	movlb	0	; select bank0
 13332  207D  082E               	movf	?___wmul+1,w
 13333  207E  0085               	movwf	5
 13334  207F  082D               	movf	?___wmul,w
 13335  2080  0084               	movwf	4
 13336  2081  3004               	movlw	low ((_nextStateTbl+4)| (0+32768))
 13337  2082  0784               	addwf	4,f
 13338  2083  30B0               	movlw	high ((_nextStateTbl+4)| (0+32768))
 13339  2084  3D85               	addwfc	5,f
 13340  2085  0800               	movf	0,w	;code access
 13341  2086  0008               	return
 13342  2087                     l8560:	
 13343                           
 13344                           ;menuhelper.c: 162:     if (pb == PB_SHORT)
 13345  2087  0334               	decf	getNextState@pb,w
 13346  2088  1D03               	btfss	3,2
 13347  2089  28A2               	goto	l8568
 13348                           
 13349                           ;menuhelper.c: 163:      return nextStateTbl[n].pbShort;
 13350  208A  083A               	movf	getNextState@n,w
 13351  208B  00B6               	movwf	??_getNextState
 13352  208C  01B7               	clrf	??_getNextState+1
 13353  208D  0836               	movf	??_getNextState,w
 13354  208E  00AD               	movwf	___wmul@multiplier
 13355  208F  0837               	movf	??_getNextState+1,w
 13356  2090  00AE               	movwf	___wmul@multiplier+1
 13357  2091  3006               	movlw	6
 13358  2092  00AF               	movwf	___wmul@multiplicand
 13359  2093  3000               	movlw	0
 13360  2094  00B0               	movwf	___wmul@multiplicand+1
 13361  2095  31B1  2161         	fcall	___wmul
 13362  2097  0140               	movlb	0	; select bank0
 13363  2098  082E               	movf	?___wmul+1,w
 13364  2099  0085               	movwf	5
 13365  209A  082D               	movf	?___wmul,w
 13366  209B  0084               	movwf	4
 13367  209C  3002               	movlw	low ((_nextStateTbl+2)| (0+32768))
 13368  209D  0784               	addwf	4,f
 13369  209E  30B0               	movlw	high ((_nextStateTbl+2)| (0+32768))
 13370  209F  3D85               	addwfc	5,f
 13371  20A0  0800               	movf	0,w	;code access
 13372  20A1  0008               	return
 13373  20A2                     l8568:	
 13374  20A2  3002               	movlw	2
 13375  20A3  0634               	xorwf	getNextState@pb,w
 13376  20A4  1D03               	btfss	3,2
 13377  20A5  28BE               	goto	l8576
 13378                           
 13379                           ;menuhelper.c: 165:      return nextStateTbl[n].pbLong;
 13380  20A6  083A               	movf	getNextState@n,w
 13381  20A7  00B6               	movwf	??_getNextState
 13382  20A8  01B7               	clrf	??_getNextState+1
 13383  20A9  0836               	movf	??_getNextState,w
 13384  20AA  00AD               	movwf	___wmul@multiplier
 13385  20AB  0837               	movf	??_getNextState+1,w
 13386  20AC  00AE               	movwf	___wmul@multiplier+1
 13387  20AD  3006               	movlw	6
 13388  20AE  00AF               	movwf	___wmul@multiplicand
 13389  20AF  3000               	movlw	0
 13390  20B0  00B0               	movwf	___wmul@multiplicand+1
 13391  20B1  31B1  2161         	fcall	___wmul
 13392  20B3  0140               	movlb	0	; select bank0
 13393  20B4  082E               	movf	?___wmul+1,w
 13394  20B5  0085               	movwf	5
 13395  20B6  082D               	movf	?___wmul,w
 13396  20B7  0084               	movwf	4
 13397  20B8  3003               	movlw	low ((_nextStateTbl+3)| (0+32768))
 13398  20B9  0784               	addwf	4,f
 13399  20BA  30B0               	movlw	high ((_nextStateTbl+3)| (0+32768))
 13400  20BB  3D85               	addwfc	5,f
 13401  20BC  0800               	movf	0,w	;code access
 13402  20BD  0008               	return
 13403  20BE                     l8576:	
 13404                           
 13405                           ;menuhelper.c: 167:      return nextStateTbl[n].noAction;
 13406  20BE  083A               	movf	getNextState@n,w
 13407  20BF  00B6               	movwf	??_getNextState
 13408  20C0  01B7               	clrf	??_getNextState+1
 13409  20C1  0836               	movf	??_getNextState,w
 13410  20C2  00AD               	movwf	___wmul@multiplier
 13411  20C3  0837               	movf	??_getNextState+1,w
 13412  20C4  00AE               	movwf	___wmul@multiplier+1
 13413  20C5  3006               	movlw	6
 13414  20C6  00AF               	movwf	___wmul@multiplicand
 13415  20C7  3000               	movlw	0
 13416  20C8  00B0               	movwf	___wmul@multiplicand+1
 13417  20C9  31B1  2161         	fcall	___wmul
 13418  20CB  0140               	movlb	0	; select bank0
 13419  20CC  082E               	movf	?___wmul+1,w
 13420  20CD  0085               	movwf	5
 13421  20CE  082D               	movf	?___wmul,w
 13422  20CF  0084               	movwf	4
 13423  20D0  3005               	movlw	low ((_nextStateTbl+5)| (0+32768))
 13424  20D1  0784               	addwf	4,f
 13425  20D2  30B0               	movlw	high ((_nextStateTbl+5)| (0+32768))
 13426  20D3  3D85               	addwfc	5,f
 13427  20D4  0800               	movf	0,w	;code access
 13428  20D5  0008               	return
 13429  20D6                     l8580:	
 13430                           
 13431                           ;menuhelper.c: 170:  }
 13432  20D6  3001               	movlw	1
 13433  20D7  00B6               	movwf	??_getNextState
 13434  20D8  0836               	movf	??_getNextState,w
 13435  20D9  07BA               	addwf	getNextState@n,f
 13436  20DA  3012               	movlw	18
 13437  20DB  023A               	subwf	getNextState@n,w
 13438  20DC  1C03               	skipc
 13439  20DD  281B               	goto	l8548
 13440                           
 13441                           ;menuhelper.c: 171:  return -1;
 13442  20DE  30FF               	movlw	255
 13443  20DF  0008               	return
 13444  20E0                     __end_of_getNextState:	
 13445                           
 13446                           	psect	text22
 13447  3356                     __ptext22:	
 13448 ;; *************** function _returnToPage *****************
 13449 ;; Defined at:
 13450 ;;		line 219 in file "menuhelper.c"
 13451 ;; Parameters:    Size  Location     Type
 13452 ;;  page            1    wreg     unsigned char 
 13453 ;; Auto vars:     Size  Location     Type
 13454 ;;  page            1   21[BANK0 ] unsigned char 
 13455 ;;  n               1   22[BANK0 ] unsigned char 
 13456 ;; Return value:  Size  Location     Type
 13457 ;;                  1    wreg      void 
 13458 ;; Registers used:
 13459 ;;		wreg, status,2, status,0, pclath, cstack
 13460 ;; Tracked objects:
 13461 ;;		On entry : 0/0
 13462 ;;		On exit  : 0/0
 13463 ;;		Unchanged: 0/0
 13464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13466 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13467 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13468 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13469 ;;Total ram usage:        4 bytes
 13470 ;; Hardware stack levels used:    1
 13471 ;; Hardware stack levels required when called:    6
 13472 ;; This function calls:
 13473 ;;		_OLED_command
 13474 ;;		___wmul
 13475 ;; This function is called by:
 13476 ;;		_statusView
 13477 ;;		_channelView
 13478 ;;		_channelSetup
 13479 ;;		_setOutputPower
 13480 ;;		_setLensDia
 13481 ;;		_setup
 13482 ;;		_setDPOffset
 13483 ;;		_setSkyTemp
 13484 ;;		_setFudgeFactor
 13485 ;; This function uses a non-reentrant model
 13486 ;;
 13487                           
 13488                           
 13489                           ;psect for function _returnToPage
 13490  3356                     _returnToPage:	
 13491                           
 13492                           ;incstack = 0
 13493                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 13494                           ;returnToPage@page stored from wreg
 13495  3356  0140               	movlb	0	; select bank0
 13496  3357  00B5               	movwf	returnToPage@page
 13497                           
 13498                           ;menuhelper.c: 219: void returnToPage(uint8_t page);menuhelper.c: 220: {;menuhelper.c: 2
      +                          21:  uint8_t n;;menuhelper.c: 223:  if (! g_screenRefresh)
 13499  3358  0141               	movlb	1	; select bank1
 13500  3359  086D               	movf	_g_screenRefresh^(0+128),w
 13501  335A  1903               	btfsc	3,2
 13502  335B  0008               	return
 13503                           
 13504                           ;menuhelper.c: 225:  OLED_command(0x01);
 13505  335C  3001               	movlw	1
 13506  335D  31B1  2102  31B3   	fcall	_OLED_command
 13507                           
 13508                           ;menuhelper.c: 226:  OLED_command(0x02);
 13509  3360  3002               	movlw	2
 13510  3361  31B1  2102  31B3   	fcall	_OLED_command
 13511                           
 13512                           ;menuhelper.c: 227:  for(n = 0; n < 12 * page; n++) {
 13513  3364  0140               	movlb	0	; select bank0
 13514  3365  01B6               	clrf	returnToPage@n
 13515  3366                     l7898:	
 13516  3366  0835               	movf	returnToPage@page,w
 13517  3367  00B3               	movwf	??_returnToPage
 13518  3368  01B4               	clrf	??_returnToPage+1
 13519  3369  0833               	movf	??_returnToPage,w
 13520  336A  00AD               	movwf	___wmul@multiplier
 13521  336B  0834               	movf	??_returnToPage+1,w
 13522  336C  00AE               	movwf	___wmul@multiplier+1
 13523  336D  300C               	movlw	12
 13524  336E  00AF               	movwf	___wmul@multiplicand
 13525  336F  3000               	movlw	0
 13526  3370  00B0               	movwf	___wmul@multiplicand+1
 13527  3371  31B1  2161  31B3   	fcall	___wmul
 13528  3374  0140               	movlb	0	; select bank0
 13529  3375  082E               	movf	?___wmul+1,w
 13530  3376  3A80               	xorlw	128
 13531  3377  3C80               	sublw	128
 13532  3378  1D03               	skipz
 13533  3379  2B7C               	goto	u9165
 13534  337A  082D               	movf	?___wmul,w
 13535  337B  0236               	subwf	returnToPage@n,w
 13536  337C                     u9165:	
 13537  337C  1803               	btfsc	3,0
 13538  337D  0008               	return
 13539                           
 13540                           ;menuhelper.c: 228:   OLED_command(0x10 | 0x08 | 0x00);
 13541  337E  3018               	movlw	24
 13542  337F  31B1  2102  31B3   	fcall	_OLED_command
 13543                           
 13544                           ;menuhelper.c: 229:  }
 13545  3382  3001               	movlw	1
 13546  3383  0140               	movlb	0	; select bank0
 13547  3384  00B3               	movwf	??_returnToPage
 13548  3385  0833               	movf	??_returnToPage,w
 13549  3386  07B6               	addwf	returnToPage@n,f
 13550  3387  2B66               	goto	l7898
 13551  3388                     __end_of_returnToPage:	
 13552                           
 13553                           	psect	text23
 13554  078D                     __ptext23:	
 13555 ;; *************** function _paging *****************
 13556 ;; Defined at:
 13557 ;;		line 178 in file "menuhelper.c"
 13558 ;; Parameters:    Size  Location     Type
 13559 ;;  currentPage     1    wreg     unsigned char 
 13560 ;;  lastPage        1    7[BANK0 ] const unsigned char 
 13561 ;; Auto vars:     Size  Location     Type
 13562 ;;  currentPage     1   10[BANK0 ] unsigned char 
 13563 ;;  n               1   12[BANK0 ] unsigned char 
 13564 ;;  dir             1   11[BANK0 ] enum E7864
 13565 ;; Return value:  Size  Location     Type
 13566 ;;                  1    wreg      unsigned char 
 13567 ;; Registers used:
 13568 ;;		wreg, status,2, status,0, pclath, cstack
 13569 ;; Tracked objects:
 13570 ;;		On entry : 0/0
 13571 ;;		On exit  : 0/0
 13572 ;;		Unchanged: 0/0
 13573 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13574 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13575 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13577 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13578 ;;Total ram usage:        6 bytes
 13579 ;; Hardware stack levels used:    1
 13580 ;; Hardware stack levels required when called:    6
 13581 ;; This function calls:
 13582 ;;		_OLED_command
 13583 ;;		_getRotDir
 13584 ;; This function is called by:
 13585 ;;		_statusView
 13586 ;;		_channelView
 13587 ;;		_channelSetup
 13588 ;;		_setup
 13589 ;; This function uses a non-reentrant model
 13590 ;;
 13591                           
 13592                           
 13593                           ;psect for function _paging
 13594  078D                     _paging:	
 13595                           
 13596                           ;incstack = 0
 13597                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 13598                           ;paging@currentPage stored from wreg
 13599  078D  0140               	movlb	0	; select bank0
 13600  078E  00AA               	movwf	paging@currentPage
 13601                           
 13602                           ;menuhelper.c: 178: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 179: {;menuhelper.c: 180:  uint8_t n;;menuhelper.c: 181:  enum e_direction dir;;me
      +                          nuhelper.c: 182:  static enum e_direction lastDir = ROT_STOP;;menuhelper.c: 185:  PIE0bi
      +                          ts.IOCIE = 0;
 13603  078F  014E               	movlb	14	; select bank14
 13604  0790  1216               	bcf	22,4	;volatile
 13605                           
 13606                           ;menuhelper.c: 187:  dir = getRotDir();
 13607  0791  31B1  2121  3187   	fcall	_getRotDir
 13608  0794  0140               	movlb	0	; select bank0
 13609  0795  00A8               	movwf	??_paging
 13610  0796  0828               	movf	??_paging,w
 13611  0797  00AB               	movwf	paging@dir
 13612                           
 13613                           ;menuhelper.c: 190:  if (dir == lastDir) {
 13614  0798  082B               	movf	paging@dir,w
 13615  0799  0142               	movlb	2	; select bank2
 13616  079A  0662               	xorwf	paging@lastDir^(0+256),w
 13617  079B  1D03               	skipz
 13618  079C  2FEF               	goto	l8018
 13619                           
 13620                           ;menuhelper.c: 192:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 13621  079D  0140               	movlb	0	; select bank0
 13622  079E  032B               	decf	paging@dir,w
 13623  079F  1D03               	btfss	3,2
 13624  07A0  2FCE               	goto	l7998
 13625  07A1  0827               	movf	paging@lastPage,w
 13626  07A2  3EFF               	addlw	255
 13627  07A3  00A8               	movwf	??_paging
 13628  07A4  30FF               	movlw	255
 13629  07A5  1803               	skipnc
 13630  07A6  3000               	movlw	0
 13631  07A7  00A9               	movwf	??_paging+1
 13632  07A8  0829               	movf	??_paging+1,w
 13633  07A9  3A80               	xorlw	128
 13634  07AA  3C80               	sublw	128
 13635  07AB  1D03               	skipz
 13636  07AC  2FAF               	goto	u9305
 13637  07AD  0828               	movf	??_paging,w
 13638  07AE  022A               	subwf	paging@currentPage,w
 13639  07AF                     u9305:	
 13640  07AF  1803               	skipnc
 13641  07B0  2FCE               	goto	l7998
 13642                           
 13643                           ;menuhelper.c: 193:    currentPage++;
 13644  07B1  3001               	movlw	1
 13645  07B2  0140               	movlb	0	; select bank0
 13646  07B3  00A8               	movwf	??_paging
 13647  07B4  0828               	movf	??_paging,w
 13648  07B5  07AA               	addwf	paging@currentPage,f
 13649                           
 13650                           ;menuhelper.c: 194:    for(n = 0; n < 12; n++) {
 13651  07B6  01AC               	clrf	paging@n
 13652  07B7                     l7990:	
 13653                           
 13654                           ;menuhelper.c: 195:     OLED_command(0x10 | 0x08 | 0x00);
 13655  07B7  3018               	movlw	24
 13656  07B8  31B1  2102  3187   	fcall	_OLED_command
 13657                           
 13658                           ;menuhelper.c: 196:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 13659  07BB  301A               	movlw	26
 13660  07BC  0140               	movlb	0	; select bank0
 13661  07BD  00A8               	movwf	??_paging
 13662  07BE  30F8               	movlw	248
 13663  07BF                     u10887:	
 13664  07BF  0B89               	decfsz	9,f
 13665  07C0  2FBF               	goto	u10887
 13666  07C1  0BA8               	decfsz	??_paging,f
 13667  07C2  2FBF               	goto	u10887
 13668  07C3  0000               	nop
 13669                           
 13670                           ;menuhelper.c: 197:    }
 13671  07C4  3001               	movlw	1
 13672  07C5  0140               	movlb	0	; select bank0
 13673  07C6  00A8               	movwf	??_paging
 13674  07C7  0828               	movf	??_paging,w
 13675  07C8  07AC               	addwf	paging@n,f
 13676  07C9  300C               	movlw	12
 13677  07CA  022C               	subwf	paging@n,w
 13678  07CB  1803               	btfsc	3,0
 13679  07CC  2FEF               	goto	l8018
 13680  07CD  2FB7               	goto	l7990
 13681  07CE                     l7998:	
 13682  07CE  3002               	movlw	2
 13683  07CF  0140               	movlb	0	; select bank0
 13684  07D0  062B               	xorwf	paging@dir,w
 13685  07D1  1D03               	btfss	3,2
 13686  07D2  2FEF               	goto	l8018
 13687  07D3  082A               	movf	paging@currentPage,w
 13688  07D4  1903               	btfsc	3,2
 13689  07D5  2FEF               	goto	l8018
 13690                           
 13691                           ;menuhelper.c: 201:    currentPage--;
 13692  07D6  3001               	movlw	1
 13693  07D7  02AA               	subwf	paging@currentPage,f
 13694                           
 13695                           ;menuhelper.c: 202:    for(n = 0; n < 12; n++) {
 13696  07D8  01AC               	clrf	paging@n
 13697  07D9                     l8010:	
 13698                           
 13699                           ;menuhelper.c: 203:     OLED_command(0x10 | 0x08 | 0x04);;
 13700  07D9  301C               	movlw	28
 13701  07DA  31B1  2102  3187   	fcall	_OLED_command
 13702                           
 13703                           ;menuhelper.c: 204:     _delay((unsigned long)((20)*(4000000UL/4000.0)));
 13704  07DD  301A               	movlw	26
 13705  07DE  0140               	movlb	0	; select bank0
 13706  07DF  00A8               	movwf	??_paging
 13707  07E0  30F8               	movlw	248
 13708  07E1                     u10897:	
 13709  07E1  0B89               	decfsz	9,f
 13710  07E2  2FE1               	goto	u10897
 13711  07E3  0BA8               	decfsz	??_paging,f
 13712  07E4  2FE1               	goto	u10897
 13713  07E5  0000               	nop
 13714                           
 13715                           ;menuhelper.c: 205:    }
 13716  07E6  3001               	movlw	1
 13717  07E7  0140               	movlb	0	; select bank0
 13718  07E8  00A8               	movwf	??_paging
 13719  07E9  0828               	movf	??_paging,w
 13720  07EA  07AC               	addwf	paging@n,f
 13721  07EB  300C               	movlw	12
 13722  07EC  022C               	subwf	paging@n,w
 13723  07ED  1C03               	skipc
 13724  07EE  2FD9               	goto	l8010
 13725  07EF                     l8018:	
 13726                           
 13727                           ;menuhelper.c: 209:  lastDir = dir;
 13728  07EF  0140               	movlb	0	; select bank0
 13729  07F0  082B               	movf	paging@dir,w
 13730  07F1  00A8               	movwf	??_paging
 13731  07F2  0828               	movf	??_paging,w
 13732  07F3  0142               	movlb	2	; select bank2
 13733  07F4  00E2               	movwf	paging@lastDir^(0+256)
 13734                           
 13735                           ;menuhelper.c: 210:  PIE0bits.IOCIE = 1;
 13736  07F5  014E               	movlb	14	; select bank14
 13737  07F6  1616               	bsf	22,4	;volatile
 13738                           
 13739                           ;menuhelper.c: 212:  return currentPage;
 13740  07F7  0140               	movlb	0	; select bank0
 13741  07F8  082A               	movf	paging@currentPage,w
 13742  07F9  0008               	return
 13743  07FA                     __end_of_paging:	
 13744                           
 13745                           	psect	text24
 13746  3121                     __ptext24:	
 13747 ;; *************** function _getRotDir *****************
 13748 ;; Defined at:
 13749 ;;		line 79 in file "inputs.c"
 13750 ;; Parameters:    Size  Location     Type
 13751 ;;		None
 13752 ;; Auto vars:     Size  Location     Type
 13753 ;;  ret             1    1[BANK0 ] enum E7864
 13754 ;; Return value:  Size  Location     Type
 13755 ;;                  1    wreg      enum E7864
 13756 ;; Registers used:
 13757 ;;		wreg, status,2
 13758 ;; Tracked objects:
 13759 ;;		On entry : 0/0
 13760 ;;		On exit  : 0/0
 13761 ;;		Unchanged: 0/0
 13762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13767 ;;Total ram usage:        2 bytes
 13768 ;; Hardware stack levels used:    1
 13769 ;; Hardware stack levels required when called:    3
 13770 ;; This function calls:
 13771 ;;		Nothing
 13772 ;; This function is called by:
 13773 ;;		_spinInput
 13774 ;;		_paging
 13775 ;; This function uses a non-reentrant model
 13776 ;;
 13777                           
 13778                           
 13779                           ;psect for function _getRotDir
 13780  3121                     _getRotDir:	
 13781                           
 13782                           ;inputs.c: 81:  enum e_direction ret = rotDir;
 13783                           
 13784                           ;incstack = 0
 13785                           ; Regs used in _getRotDir: [wreg+status,2]
 13786  3121  0142               	movlb	2	; select bank2
 13787  3122  086C               	movf	_rotDir^(0+256),w	;volatile
 13788  3123  0140               	movlb	0	; select bank0
 13789  3124  00A0               	movwf	??_getRotDir
 13790  3125  0820               	movf	??_getRotDir,w
 13791  3126  00A1               	movwf	getRotDir@ret
 13792                           
 13793                           ;inputs.c: 82:  rotDir = ROT_STOP;
 13794  3127  0142               	movlb	2	; select bank2
 13795  3128  01EC               	clrf	_rotDir^(0+256)	;volatile
 13796                           
 13797                           ;inputs.c: 83:  return ret;
 13798  3129  0140               	movlb	0	; select bank0
 13799  312A  0821               	movf	getRotDir@ret,w
 13800  312B  0008               	return
 13801  312C                     __end_of_getRotDir:	
 13802                           
 13803                           	psect	text25
 13804  36D8                     __ptext25:	
 13805 ;; *************** function _itoa *****************
 13806 ;; Defined at:
 13807 ;;		line 47 in file "common.c"
 13808 ;; Parameters:    Size  Location     Type
 13809 ;;  str             2    9[BANK0 ] PTR unsigned char 
 13810 ;;		 -> systemCheck@str(3), str(10), 
 13811 ;;  value           1   11[BANK0 ] unsigned char 
 13812 ;;  width           1   12[BANK0 ] unsigned char 
 13813 ;; Auto vars:     Size  Location     Type
 13814 ;;		None
 13815 ;; Return value:  Size  Location     Type
 13816 ;;                  1    wreg      void 
 13817 ;; Registers used:
 13818 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13819 ;; Tracked objects:
 13820 ;;		On entry : 0/0
 13821 ;;		On exit  : 0/0
 13822 ;;		Unchanged: 0/0
 13823 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13824 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13825 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13826 ;;      Temps:          0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13827 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13828 ;;Total ram usage:       11 bytes
 13829 ;; Hardware stack levels used:    1
 13830 ;; Hardware stack levels required when called:    4
 13831 ;; This function calls:
 13832 ;;		___awdiv
 13833 ;;		___awmod
 13834 ;; This function is called by:
 13835 ;;		_statusView
 13836 ;;		_channelView
 13837 ;;		_channelSetup
 13838 ;;		_setOutputPower
 13839 ;;		_systemCheck
 13840 ;; This function uses a non-reentrant model
 13841 ;;
 13842                           
 13843                           
 13844                           ;psect for function _itoa
 13845  36D8                     _itoa:	
 13846                           
 13847                           ;common.c: 47: void itoa(char *str, uint8_t value, uint8_t width);common.c: 48: {;common
      +                          .c: 49:  str[width] = '\0';
 13848                           
 13849                           ;incstack = 0
 13850                           ; Regs used in _itoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 13851  36D8  0140               	movlb	0	; select bank0
 13852  36D9  082C               	movf	itoa@width,w
 13853  36DA  00AD               	movwf	??_itoa
 13854  36DB  01AE               	clrf	??_itoa+1
 13855  36DC  082D               	movf	??_itoa,w
 13856  36DD  0729               	addwf	itoa@str,w
 13857  36DE  0086               	movwf	6
 13858  36DF  082E               	movf	??_itoa+1,w
 13859  36E0  3D2A               	addwfc	itoa@str+1,w
 13860  36E1  0087               	movwf	7
 13861  36E2  0181               	clrf	1
 13862  36E3                     l7964:	
 13863                           ;common.c: 50:  while (value && width > 0) {
 13864                           
 13865                           
 13866                           ;common.c: 50:  while (value && width > 0) {
 13867  36E3  082B               	movf	itoa@value,w
 13868  36E4  1903               	btfsc	3,2
 13869  36E5  2F31               	goto	l7970
 13870  36E6  082C               	movf	itoa@width,w
 13871  36E7  1903               	btfsc	3,2
 13872  36E8  2F31               	goto	l7970
 13873                           
 13874                           ;common.c: 51:   str[--width] = (value % 10) + '0';
 13875  36E9  300A               	movlw	10
 13876  36EA  00A0               	movwf	___awmod@divisor
 13877  36EB  3000               	movlw	0
 13878  36EC  00A1               	movwf	___awmod@divisor+1
 13879  36ED  082B               	movf	itoa@value,w
 13880  36EE  00AD               	movwf	??_itoa
 13881  36EF  01AE               	clrf	??_itoa+1
 13882  36F0  082D               	movf	??_itoa,w
 13883  36F1  00A2               	movwf	___awmod@dividend
 13884  36F2  082E               	movf	??_itoa+1,w
 13885  36F3  00A3               	movwf	___awmod@dividend+1
 13886  36F4  31B4  24DE  31B6   	fcall	___awmod
 13887  36F7  0140               	movlb	0	; select bank0
 13888  36F8  0820               	movf	?___awmod,w
 13889  36F9  3E30               	addlw	48
 13890  36FA  00AF               	movwf	??_itoa+2
 13891  36FB  3001               	movlw	1
 13892  36FC  02AC               	subwf	itoa@width,f
 13893  36FD  082C               	movf	itoa@width,w
 13894  36FE  00B0               	movwf	??_itoa+3
 13895  36FF  01B1               	clrf	??_itoa+4
 13896  3700  0830               	movf	??_itoa+3,w
 13897  3701  0729               	addwf	itoa@str,w
 13898  3702  00B2               	movwf	??_itoa+5
 13899  3703  0831               	movf	??_itoa+4,w
 13900  3704  3D2A               	addwfc	itoa@str+1,w
 13901  3705  00B3               	movwf	??_itoa+6
 13902  3706  0832               	movf	??_itoa+5,w
 13903  3707  0086               	movwf	6
 13904  3708  0833               	movf	??_itoa+6,w
 13905  3709  0087               	movwf	7
 13906  370A  082F               	movf	??_itoa+2,w
 13907  370B  0081               	movwf	1
 13908                           
 13909                           ;common.c: 52:   value = value / 10;
 13910  370C  300A               	movlw	10
 13911  370D  00A0               	movwf	___awdiv@divisor
 13912  370E  3000               	movlw	0
 13913  370F  00A1               	movwf	___awdiv@divisor+1
 13914  3710  082B               	movf	itoa@value,w
 13915  3711  00AD               	movwf	??_itoa
 13916  3712  01AE               	clrf	??_itoa+1
 13917  3713  082D               	movf	??_itoa,w
 13918  3714  00A2               	movwf	___awdiv@dividend
 13919  3715  082E               	movf	??_itoa+1,w
 13920  3716  00A3               	movwf	___awdiv@dividend+1
 13921  3717  3190  2002  31B6   	fcall	___awdiv
 13922  371A  0140               	movlb	0	; select bank0
 13923  371B  0820               	movf	?___awdiv,w
 13924  371C  00AF               	movwf	??_itoa+2
 13925  371D  082F               	movf	??_itoa+2,w
 13926  371E  00AB               	movwf	itoa@value
 13927  371F  2EE3               	goto	l7964
 13928  3720                     l7968:	
 13929                           
 13930                           ;common.c: 55:   str[--width] = ' ';
 13931  3720  3001               	movlw	1
 13932  3721  02AC               	subwf	itoa@width,f
 13933  3722  082C               	movf	itoa@width,w
 13934  3723  00AD               	movwf	??_itoa
 13935  3724  01AE               	clrf	??_itoa+1
 13936  3725  082D               	movf	??_itoa,w
 13937  3726  0729               	addwf	itoa@str,w
 13938  3727  00AF               	movwf	??_itoa+2
 13939  3728  082E               	movf	??_itoa+1,w
 13940  3729  3D2A               	addwfc	itoa@str+1,w
 13941  372A  00B0               	movwf	??_itoa+3
 13942  372B  082F               	movf	??_itoa+2,w
 13943  372C  0086               	movwf	6
 13944  372D  0830               	movf	??_itoa+3,w
 13945  372E  0087               	movwf	7
 13946  372F  3020               	movlw	32
 13947  3730  0081               	movwf	1
 13948  3731                     l7970:	
 13949                           
 13950                           ;common.c: 54:  while(width)
 13951  3731  082C               	movf	itoa@width,w
 13952  3732  1903               	btfsc	3,2
 13953  3733  0008               	return
 13954  3734  2F20               	goto	l7968
 13955  3735                     __end_of_itoa:	
 13956                           
 13957                           	psect	text26
 13958  2200                     __ptext26:	
 13959 ;; *************** function _ftoa *****************
 13960 ;; Defined at:
 13961 ;;		line 8 in file "common.c"
 13962 ;; Parameters:    Size  Location     Type
 13963 ;;  str             1    wreg     PTR unsigned char 
 13964 ;;		 -> str(10), 
 13965 ;;  fValue          4   25[BANK1 ] float 
 13966 ;;  width           1   29[BANK1 ] unsigned char 
 13967 ;;  prec            1   30[BANK1 ] unsigned char 
 13968 ;; Auto vars:     Size  Location     Type
 13969 ;;  str             1   38[BANK1 ] PTR unsigned char 
 13970 ;;		 -> str(10), 
 13971 ;;  pos             1   37[BANK1 ] unsigned char 
 13972 ;;  w               1   36[BANK1 ] unsigned char 
 13973 ;;  intValue        1   35[BANK1 ] unsigned char 
 13974 ;;  sign            1   34[BANK1 ] unsigned char 
 13975 ;;  len             1   33[BANK1 ] unsigned char 
 13976 ;; Return value:  Size  Location     Type
 13977 ;;                  1    wreg      void 
 13978 ;; Registers used:
 13979 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13980 ;; Tracked objects:
 13981 ;;		On entry : 0/0
 13982 ;;		On exit  : 0/0
 13983 ;;		Unchanged: 0/0
 13984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13985 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13986 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13987 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13988 ;;      Totals:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13989 ;;Total ram usage:       14 bytes
 13990 ;; Hardware stack levels used:    1
 13991 ;; Hardware stack levels required when called:    5
 13992 ;; This function calls:
 13993 ;;		___fldiv
 13994 ;;		___flge
 13995 ;;		___flmul
 13996 ;;		___flsub
 13997 ;;		___fltol
 13998 ;;		___wmul
 13999 ;;		___xxtofl
 14000 ;; This function is called by:
 14001 ;;		_statusView
 14002 ;;		_channelView
 14003 ;;		_channelSetup
 14004 ;;		_setOutputPower
 14005 ;;		_setLensDia
 14006 ;;		_setup
 14007 ;;		_setDPOffset
 14008 ;;		_setSkyTemp
 14009 ;;		_setFudgeFactor
 14010 ;; This function uses a non-reentrant model
 14011 ;;
 14012                           
 14013                           
 14014                           ;psect for function _ftoa
 14015  2200                     _ftoa:	
 14016                           
 14017                           ;incstack = 0
 14018                           ; Regs used in _ftoa: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14019                           ;ftoa@str stored from wreg
 14020  2200  0141               	movlb	1	; select bank1
 14021  2201  00C6               	movwf	ftoa@str^(0+128)
 14022                           
 14023                           ;common.c: 8: void ftoa(char *str, float fValue, uint8_t width, uint8_t prec);common.c: 
      +                          9: {;common.c: 10:  uint8_t len = 1;
 14024  2202  01C1               	clrf	ftoa@len^(0+128)
 14025  2203  0AC1               	incf	ftoa@len^(0+128),f
 14026                           
 14027                           ;common.c: 12:  uint8_t pos = 0;
 14028  2204  01C5               	clrf	ftoa@pos^(0+128)
 14029                           
 14030                           ;common.c: 14:  uint8_t sign = 0;
 14031  2205  01C2               	clrf	ftoa@sign^(0+128)
 14032                           
 14033                           ;common.c: 16:  if (fValue < 0) {
 14034  2206  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14035  2207  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14036  2208  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14037  2209  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14038  220A  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14039  220B  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14040  220C  0839               	movf	ftoa@fValue^(0+128),w
 14041  220D  00AD               	movwf	___flge@ff1^(0+128)
 14042  220E  3000               	movlw	0
 14043  220F  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14044  2210  3000               	movlw	0
 14045  2211  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14046  2212  3000               	movlw	0
 14047  2213  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14048  2214  3000               	movlw	0
 14049  2215  00B1               	movwf	___flge@ff2^(0+128)
 14050  2216  31AA  2227  31A2   	fcall	___flge
 14051  2219  1803               	btfsc	3,0
 14052  221A  2A4B               	goto	l7922
 14053                           
 14054                           ;common.c: 17:   fValue *= -1;
 14055  221B  30BF               	movlw	191
 14056  221C  0140               	movlb	0	; select bank0
 14057  221D  00C4               	movwf	___flmul@b+3
 14058  221E  3080               	movlw	128
 14059  221F  00C3               	movwf	___flmul@b+2
 14060  2220  3000               	movlw	0
 14061  2221  00C2               	movwf	___flmul@b+1
 14062  2222  3000               	movlw	0
 14063  2223  00C1               	movwf	___flmul@b
 14064  2224  0141               	movlb	1	; select bank1
 14065  2225  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14066  2226  0140               	movlb	0	; select bank0
 14067  2227  00C8               	movwf	___flmul@a+3
 14068  2228  0141               	movlb	1	; select bank1
 14069  2229  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14070  222A  0140               	movlb	0	; select bank0
 14071  222B  00C7               	movwf	___flmul@a+2
 14072  222C  0141               	movlb	1	; select bank1
 14073  222D  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14074  222E  0140               	movlb	0	; select bank0
 14075  222F  00C6               	movwf	___flmul@a+1
 14076  2230  0141               	movlb	1	; select bank1
 14077  2231  0839               	movf	ftoa@fValue^(0+128),w
 14078  2232  0140               	movlb	0	; select bank0
 14079  2233  00C5               	movwf	___flmul@a
 14080  2234  3185  2561  31A2   	fcall	___flmul
 14081  2237  0140               	movlb	0	; select bank0
 14082  2238  0844               	movf	?___flmul+3,w
 14083  2239  0141               	movlb	1	; select bank1
 14084  223A  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 14085  223B  0140               	movlb	0	; select bank0
 14086  223C  0843               	movf	?___flmul+2,w
 14087  223D  0141               	movlb	1	; select bank1
 14088  223E  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 14089  223F  0140               	movlb	0	; select bank0
 14090  2240  0842               	movf	?___flmul+1,w
 14091  2241  0141               	movlb	1	; select bank1
 14092  2242  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 14093  2243  0140               	movlb	0	; select bank0
 14094  2244  0841               	movf	?___flmul,w
 14095  2245  0141               	movlb	1	; select bank1
 14096  2246  00B9               	movwf	ftoa@fValue^(0+128)
 14097                           
 14098                           ;common.c: 18:   sign = 1;
 14099  2247  01C2               	clrf	ftoa@sign^(0+128)
 14100  2248  0AC2               	incf	ftoa@sign^(0+128),f
 14101                           
 14102                           ;common.c: 19:   width--;
 14103  2249  3001               	movlw	1
 14104  224A  02BD               	subwf	ftoa@width^(0+128),f
 14105  224B                     l7922:	
 14106                           
 14107                           ;common.c: 21:  while(fValue >= 10.0) {
 14108  224B  0141               	movlb	1	; select bank1
 14109  224C  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14110  224D  00B0               	movwf	(___flge@ff1+3)^(0+128)
 14111  224E  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14112  224F  00AF               	movwf	(___flge@ff1+2)^(0+128)
 14113  2250  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14114  2251  00AE               	movwf	(___flge@ff1+1)^(0+128)
 14115  2252  0839               	movf	ftoa@fValue^(0+128),w
 14116  2253  00AD               	movwf	___flge@ff1^(0+128)
 14117  2254  3041               	movlw	65
 14118  2255  00B4               	movwf	(___flge@ff2+3)^(0+128)
 14119  2256  3020               	movlw	32
 14120  2257  00B3               	movwf	(___flge@ff2+2)^(0+128)
 14121  2258  3000               	movlw	0
 14122  2259  00B2               	movwf	(___flge@ff2+1)^(0+128)
 14123  225A  3000               	movlw	0
 14124  225B  00B1               	movwf	___flge@ff2^(0+128)
 14125  225C  31AA  2227  31A2   	fcall	___flge
 14126  225F  1C03               	btfss	3,0
 14127  2260  2A92               	goto	l7924
 14128                           
 14129                           ;common.c: 22:   fValue /= 10;
 14130  2261  3041               	movlw	65
 14131  2262  0140               	movlb	0	; select bank0
 14132  2263  00DE               	movwf	___fldiv@a+3
 14133  2264  3020               	movlw	32
 14134  2265  00DD               	movwf	___fldiv@a+2
 14135  2266  3000               	movlw	0
 14136  2267  00DC               	movwf	___fldiv@a+1
 14137  2268  3000               	movlw	0
 14138  2269  00DB               	movwf	___fldiv@a
 14139  226A  0141               	movlb	1	; select bank1
 14140  226B  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14141  226C  0140               	movlb	0	; select bank0
 14142  226D  00E2               	movwf	___fldiv@b+3
 14143  226E  0141               	movlb	1	; select bank1
 14144  226F  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14145  2270  0140               	movlb	0	; select bank0
 14146  2271  00E1               	movwf	___fldiv@b+2
 14147  2272  0141               	movlb	1	; select bank1
 14148  2273  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14149  2274  0140               	movlb	0	; select bank0
 14150  2275  00E0               	movwf	___fldiv@b+1
 14151  2276  0141               	movlb	1	; select bank1
 14152  2277  0839               	movf	ftoa@fValue^(0+128),w
 14153  2278  0140               	movlb	0	; select bank0
 14154  2279  00DF               	movwf	___fldiv@b
 14155  227A  319E  2628  31A2   	fcall	___fldiv
 14156  227D  0140               	movlb	0	; select bank0
 14157  227E  085E               	movf	?___fldiv+3,w
 14158  227F  0141               	movlb	1	; select bank1
 14159  2280  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 14160  2281  0140               	movlb	0	; select bank0
 14161  2282  085D               	movf	?___fldiv+2,w
 14162  2283  0141               	movlb	1	; select bank1
 14163  2284  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 14164  2285  0140               	movlb	0	; select bank0
 14165  2286  085C               	movf	?___fldiv+1,w
 14166  2287  0141               	movlb	1	; select bank1
 14167  2288  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 14168  2289  0140               	movlb	0	; select bank0
 14169  228A  085B               	movf	?___fldiv,w
 14170  228B  0141               	movlb	1	; select bank1
 14171  228C  00B9               	movwf	ftoa@fValue^(0+128)
 14172                           
 14173                           ;common.c: 23:   len++;
 14174  228D  3001               	movlw	1
 14175  228E  00BF               	movwf	??_ftoa^(0+128)
 14176  228F  083F               	movf	??_ftoa^(0+128),w
 14177  2290  07C1               	addwf	ftoa@len^(0+128),f
 14178  2291  2A4B               	goto	l7922
 14179  2292                     l7924:	
 14180                           
 14181                           ;common.c: 25:  w = len + prec;
 14182  2292  0141               	movlb	1	; select bank1
 14183  2293  0841               	movf	ftoa@len^(0+128),w
 14184  2294  073E               	addwf	ftoa@prec^(0+128),w
 14185  2295  00BF               	movwf	??_ftoa^(0+128)
 14186  2296  083F               	movf	??_ftoa^(0+128),w
 14187  2297  00C4               	movwf	ftoa@w^(0+128)
 14188                           
 14189                           ;common.c: 26:  if (prec == 0)
 14190  2298  083E               	movf	ftoa@prec^(0+128),w
 14191  2299  1D03               	btfss	3,2
 14192  229A  2A9F               	goto	l7932
 14193                           
 14194                           ;common.c: 27:   width++;
 14195  229B  3001               	movlw	1
 14196  229C  00BF               	movwf	??_ftoa^(0+128)
 14197  229D  083F               	movf	??_ftoa^(0+128),w
 14198  229E  07BD               	addwf	ftoa@width^(0+128),f
 14199  229F                     l7932:	
 14200                           
 14201                           ;common.c: 28:  while(--width > w)
 14202  229F  3001               	movlw	1
 14203  22A0  02BD               	subwf	ftoa@width^(0+128),f
 14204  22A1  083D               	movf	ftoa@width^(0+128),w
 14205  22A2  0244               	subwf	ftoa@w^(0+128),w
 14206  22A3  1803               	btfsc	3,0
 14207  22A4  2AB5               	goto	l7934
 14208                           
 14209                           ;common.c: 29:   str[pos++] = ' ';
 14210  22A5  3020               	movlw	32
 14211  22A6  00BF               	movwf	??_ftoa^(0+128)
 14212  22A7  0845               	movf	ftoa@pos^(0+128),w
 14213  22A8  0746               	addwf	ftoa@str^(0+128),w
 14214  22A9  00C0               	movwf	(??_ftoa+1)^(0+128)
 14215  22AA  0840               	movf	(??_ftoa+1)^(0+128),w
 14216  22AB  0086               	movwf	6
 14217  22AC  3001               	movlw	1	; select bank2/3
 14218  22AD  0087               	movwf	7
 14219  22AE  083F               	movf	??_ftoa^(0+128),w
 14220  22AF  0081               	movwf	1
 14221  22B0  3001               	movlw	1
 14222  22B1  00BF               	movwf	??_ftoa^(0+128)
 14223  22B2  083F               	movf	??_ftoa^(0+128),w
 14224  22B3  07C5               	addwf	ftoa@pos^(0+128),f
 14225  22B4  2A9F               	goto	l7932
 14226  22B5                     l7934:	
 14227                           
 14228                           ;common.c: 30:  if (sign)
 14229  22B5  0842               	movf	ftoa@sign^(0+128),w
 14230  22B6  1903               	btfsc	3,2
 14231  22B7  2AC7               	goto	l7954
 14232                           
 14233                           ;common.c: 31:   str[pos++] = '-';
 14234  22B8  302D               	movlw	45
 14235  22B9                     L6:	
 14236  22B9  00BF               	movwf	??_ftoa^(0+128)
 14237  22BA  0845               	movf	ftoa@pos^(0+128),w
 14238  22BB  0746               	addwf	ftoa@str^(0+128),w
 14239  22BC  00C0               	movwf	(??_ftoa+1)^(0+128)
 14240  22BD  0840               	movf	(??_ftoa+1)^(0+128),w
 14241  22BE  0086               	movwf	6
 14242  22BF  3001               	movlw	1	; select bank2/3
 14243  22C0  0087               	movwf	7
 14244  22C1  083F               	movf	??_ftoa^(0+128),w
 14245  22C2  0081               	movwf	1
 14246  22C3  3001               	movlw	1
 14247  22C4  00BF               	movwf	??_ftoa^(0+128)
 14248  22C5  083F               	movf	??_ftoa^(0+128),w
 14249  22C6  07C5               	addwf	ftoa@pos^(0+128),f
 14250  22C7                     l7954:	
 14251                           
 14252                           ;common.c: 32:  while(w--) {
 14253  22C7  3001               	movlw	1
 14254  22C8  02C4               	subwf	ftoa@w^(0+128),f
 14255  22C9  0A44               	incf	ftoa@w^(0+128),w
 14256  22CA  1903               	btfsc	3,2
 14257  22CB  2B5E               	goto	l7956
 14258                           
 14259                           ;common.c: 33:   intValue = fValue;
 14260  22CC  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14261  22CD  00AB               	movwf	(___fltol@f1+3)^(0+128)
 14262  22CE  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14263  22CF  00AA               	movwf	(___fltol@f1+2)^(0+128)
 14264  22D0  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14265  22D1  00A9               	movwf	(___fltol@f1+1)^(0+128)
 14266  22D2  0839               	movf	ftoa@fValue^(0+128),w
 14267  22D3  00A8               	movwf	___fltol@f1^(0+128)
 14268  22D4  31B7  279A  31A2   	fcall	___fltol
 14269  22D7  0141               	movlb	1	; select bank1
 14270  22D8  0828               	movf	?___fltol^(0+128),w
 14271  22D9  00BF               	movwf	??_ftoa^(0+128)
 14272  22DA  083F               	movf	??_ftoa^(0+128),w
 14273  22DB  00C3               	movwf	ftoa@intValue^(0+128)
 14274                           
 14275                           ;common.c: 34:   fValue = fValue * 10 - (10 * intValue);
 14276  22DC  300A               	movlw	10
 14277  22DD  0140               	movlb	0	; select bank0
 14278  22DE  00AF               	movwf	___wmul@multiplicand
 14279  22DF  3000               	movlw	0
 14280  22E0  00B0               	movwf	___wmul@multiplicand+1
 14281  22E1  0141               	movlb	1	; select bank1
 14282  22E2  0843               	movf	ftoa@intValue^(0+128),w
 14283  22E3  00BF               	movwf	??_ftoa^(0+128)
 14284  22E4  01C0               	clrf	(??_ftoa^(0+128)+1)
 14285  22E5  083F               	movf	??_ftoa^(0+128),w
 14286  22E6  0140               	movlb	0	; select bank0
 14287  22E7  00AD               	movwf	___wmul@multiplier
 14288  22E8  0141               	movlb	1	; select bank1
 14289  22E9  0840               	movf	(??_ftoa+1)^(0+128),w
 14290  22EA  0140               	movlb	0	; select bank0
 14291  22EB  00AE               	movwf	___wmul@multiplier+1
 14292  22EC  31B1  2161  31A2   	fcall	___wmul
 14293  22EF  0140               	movlb	0	; select bank0
 14294  22F0  082D               	movf	?___wmul,w
 14295  22F1  00B3               	movwf	___xxtofl@val
 14296  22F2  082E               	movf	?___wmul+1,w
 14297  22F3  00B4               	movwf	___xxtofl@val+1
 14298  22F4  0D89               	rlf	9,f
 14299  22F5  3B89               	subwfb	9,f
 14300  22F6  0989               	comf	9,f
 14301  22F7  00B5               	movwf	___xxtofl@val+2
 14302  22F8  00B6               	movwf	___xxtofl@val+3
 14303  22F9  3001               	movlw	1
 14304  22FA  31AC  2430  31A2   	fcall	___xxtofl
 14305  22FD  0140               	movlb	0	; select bank0
 14306  22FE  0836               	movf	?___xxtofl+3,w
 14307  22FF  0141               	movlb	1	; select bank1
 14308  2300  00A3               	movwf	(___flsub@a+3)^(0+128)
 14309  2301  0140               	movlb	0	; select bank0
 14310  2302  0835               	movf	?___xxtofl+2,w
 14311  2303  0141               	movlb	1	; select bank1
 14312  2304  00A2               	movwf	(___flsub@a+2)^(0+128)
 14313  2305  0140               	movlb	0	; select bank0
 14314  2306  0834               	movf	?___xxtofl+1,w
 14315  2307  0141               	movlb	1	; select bank1
 14316  2308  00A1               	movwf	(___flsub@a+1)^(0+128)
 14317  2309  0140               	movlb	0	; select bank0
 14318  230A  0833               	movf	?___xxtofl,w
 14319  230B  0141               	movlb	1	; select bank1
 14320  230C  00A0               	movwf	___flsub@a^(0+128)
 14321  230D  3041               	movlw	65
 14322  230E  0140               	movlb	0	; select bank0
 14323  230F  00C4               	movwf	___flmul@b+3
 14324  2310  3020               	movlw	32
 14325  2311  00C3               	movwf	___flmul@b+2
 14326  2312  3000               	movlw	0
 14327  2313  00C2               	movwf	___flmul@b+1
 14328  2314  3000               	movlw	0
 14329  2315  00C1               	movwf	___flmul@b
 14330  2316  0141               	movlb	1	; select bank1
 14331  2317  083C               	movf	(ftoa@fValue+3)^(0+128),w
 14332  2318  0140               	movlb	0	; select bank0
 14333  2319  00C8               	movwf	___flmul@a+3
 14334  231A  0141               	movlb	1	; select bank1
 14335  231B  083B               	movf	(ftoa@fValue+2)^(0+128),w
 14336  231C  0140               	movlb	0	; select bank0
 14337  231D  00C7               	movwf	___flmul@a+2
 14338  231E  0141               	movlb	1	; select bank1
 14339  231F  083A               	movf	(ftoa@fValue+1)^(0+128),w
 14340  2320  0140               	movlb	0	; select bank0
 14341  2321  00C6               	movwf	___flmul@a+1
 14342  2322  0141               	movlb	1	; select bank1
 14343  2323  0839               	movf	ftoa@fValue^(0+128),w
 14344  2324  0140               	movlb	0	; select bank0
 14345  2325  00C5               	movwf	___flmul@a
 14346  2326  3185  2561  31A2   	fcall	___flmul
 14347  2329  0140               	movlb	0	; select bank0
 14348  232A  0844               	movf	?___flmul+3,w
 14349  232B  0141               	movlb	1	; select bank1
 14350  232C  00A7               	movwf	(___flsub@b+3)^(0+128)
 14351  232D  0140               	movlb	0	; select bank0
 14352  232E  0843               	movf	?___flmul+2,w
 14353  232F  0141               	movlb	1	; select bank1
 14354  2330  00A6               	movwf	(___flsub@b+2)^(0+128)
 14355  2331  0140               	movlb	0	; select bank0
 14356  2332  0842               	movf	?___flmul+1,w
 14357  2333  0141               	movlb	1	; select bank1
 14358  2334  00A5               	movwf	(___flsub@b+1)^(0+128)
 14359  2335  0140               	movlb	0	; select bank0
 14360  2336  0841               	movf	?___flmul,w
 14361  2337  0141               	movlb	1	; select bank1
 14362  2338  00A4               	movwf	___flsub@b^(0+128)
 14363  2339  31B3  2388  31A2   	fcall	___flsub
 14364  233C  0141               	movlb	1	; select bank1
 14365  233D  0823               	movf	(?___flsub+3)^(0+128),w
 14366  233E  00BC               	movwf	(ftoa@fValue+3)^(0+128)
 14367  233F  0822               	movf	(?___flsub+2)^(0+128),w
 14368  2340  00BB               	movwf	(ftoa@fValue+2)^(0+128)
 14369  2341  0821               	movf	(?___flsub+1)^(0+128),w
 14370  2342  00BA               	movwf	(ftoa@fValue+1)^(0+128)
 14371  2343  0820               	movf	?___flsub^(0+128),w
 14372  2344  00B9               	movwf	ftoa@fValue^(0+128)
 14373                           
 14374                           ;common.c: 35:   str[pos++] = intValue + '0';
 14375  2345  0843               	movf	ftoa@intValue^(0+128),w
 14376  2346  3E30               	addlw	48
 14377  2347  00BF               	movwf	??_ftoa^(0+128)
 14378  2348  0845               	movf	ftoa@pos^(0+128),w
 14379  2349  0746               	addwf	ftoa@str^(0+128),w
 14380  234A  00C0               	movwf	(??_ftoa+1)^(0+128)
 14381  234B  0840               	movf	(??_ftoa+1)^(0+128),w
 14382  234C  0086               	movwf	6
 14383  234D  3001               	movlw	1	; select bank2/3
 14384  234E  0087               	movwf	7
 14385  234F  083F               	movf	??_ftoa^(0+128),w
 14386  2350  0081               	movwf	1
 14387  2351  3001               	movlw	1
 14388  2352  00BF               	movwf	??_ftoa^(0+128)
 14389  2353  083F               	movf	??_ftoa^(0+128),w
 14390  2354  07C5               	addwf	ftoa@pos^(0+128),f
 14391                           
 14392                           ;common.c: 36:   if (w && (w == prec))
 14393  2355  0844               	movf	ftoa@w^(0+128),w
 14394  2356  1903               	btfsc	3,2
 14395  2357  2AC7               	goto	l7954
 14396  2358  0844               	movf	ftoa@w^(0+128),w
 14397  2359  063E               	xorwf	ftoa@prec^(0+128),w
 14398  235A  1D03               	skipz
 14399  235B  2AC7               	goto	l7954
 14400                           
 14401                           ;common.c: 37:    str[pos++] = '.';
 14402  235C  302E               	movlw	46
 14403  235D  2AB9               	goto	L6
 14404  235E                     l7956:	
 14405                           
 14406                           ;common.c: 40:  str[pos] = '\0';
 14407  235E  0845               	movf	ftoa@pos^(0+128),w
 14408  235F  0746               	addwf	ftoa@str^(0+128),w
 14409  2360  00BF               	movwf	??_ftoa^(0+128)
 14410  2361  083F               	movf	??_ftoa^(0+128),w
 14411  2362  0086               	movwf	6
 14412  2363  3001               	movlw	1	; select bank2/3
 14413  2364  0087               	movwf	7
 14414  2365  0181               	clrf	1
 14415  2366  0008               	return
 14416  2367                     __end_of_ftoa:	
 14417                           
 14418                           	psect	text27
 14419  3324                     __ptext27:	
 14420 ;; *************** function _OLED_print_xy *****************
 14421 ;; Defined at:
 14422 ;;		line 144 in file "oled.c"
 14423 ;; Parameters:    Size  Location     Type
 14424 ;;  col             1    wreg     unsigned char 
 14425 ;;  row             1   13[BANK0 ] unsigned char 
 14426 ;;  s               2   14[BANK0 ] PTR unsigned char 
 14427 ;;		 -> STR_87(4), systemCheck@str(3), STR_86(12), STR_85(13), 
 14428 ;;		 -> STR_84(13), STR_83(13), STR_82(13), STR_81(13), 
 14429 ;;		 -> STR_80(13), STR_79(13), STR_78(13), STR_77(13), 
 14430 ;;		 -> STR_76(13), STR_75(13), STR_74(13), STR_73(13), 
 14431 ;;		 -> STR_72(13), STR_71(13), STR_70(13), STR_69(13), 
 14432 ;;		 -> STR_68(13), STR_67(13), STR_66(13), STR_65(13), 
 14433 ;;		 -> STR_64(13), STR_63(13), STR_62(13), STR_61(9), 
 14434 ;;		 -> STR_60(2), STR_59(13), STR_58(9), STR_57(2), 
 14435 ;;		 -> STR_56(13), STR_55(3), STR_54(7), STR_53(13), 
 14436 ;;		 -> STR_52(10), STR_51(10), STR_50(3), STR_49(7), 
 14437 ;;		 -> STR_48(37), STR_47(8), STR_46(2), STR_45(13), 
 14438 ;;		 -> STR_44(13), STR_43(13), STR_42(8), STR_41(2), 
 14439 ;;		 -> STR_40(7), STR_39(6), STR_38(7), STR_37(6), 
 14440 ;;		 -> STR_36(13), STR_35(8), STR_34(13), STR_33(13), 
 14441 ;;		 -> STR_32(13), STR_31(13), STR_30(13), STR_29(13), 
 14442 ;;		 -> STR_28(13), STR_27(9), STR_26(8), STR_25(5), 
 14443 ;;		 -> STR_24(8), STR_23(5), STR_22(13), STR_21(13), 
 14444 ;;		 -> STR_20(13), STR_19(13), STR_18(13), STR_17(9), 
 14445 ;;		 -> STR_16(3), STR_15(3), STR_14(13), STR_13(13), 
 14446 ;;		 -> STR_12(3), STR_11(3), STR_10(4), STR_9(2), 
 14447 ;;		 -> STR_8(4), STR_7(8), STR_6(7), STR_5(8), 
 14448 ;;		 -> STR_4(2), STR_3(4), str(10), STR_2(8), 
 14449 ;;		 -> STR_1(57), 
 14450 ;; Auto vars:     Size  Location     Type
 14451 ;;  col             1   21[BANK0 ] unsigned char 
 14452 ;;  row_offsets     4   17[BANK0 ] unsigned char [4]
 14453 ;; Return value:  Size  Location     Type
 14454 ;;                  1    wreg      void 
 14455 ;; Registers used:
 14456 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14457 ;; Tracked objects:
 14458 ;;		On entry : 0/0
 14459 ;;		On exit  : 0/0
 14460 ;;		Unchanged: 0/0
 14461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14462 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14463 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14464 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14465 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14466 ;;Total ram usage:        9 bytes
 14467 ;; Hardware stack levels used:    1
 14468 ;; Hardware stack levels required when called:    6
 14469 ;; This function calls:
 14470 ;;		_OLED_command
 14471 ;;		_OLED_write
 14472 ;; This function is called by:
 14473 ;;		_statusView
 14474 ;;		_channelView
 14475 ;;		_channelSetup
 14476 ;;		_setOutputPower
 14477 ;;		_setLensDia
 14478 ;;		_setup
 14479 ;;		_setDPOffset
 14480 ;;		_setSkyTemp
 14481 ;;		_setFudgeFactor
 14482 ;;		_viewErrorMessage
 14483 ;;		_systemCheck
 14484 ;; This function uses a non-reentrant model
 14485 ;;
 14486                           
 14487                           
 14488                           ;psect for function _OLED_print_xy
 14489  3324                     _OLED_print_xy:	
 14490                           
 14491                           ;incstack = 0
 14492                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14493                           ;OLED_print_xy@col stored from wreg
 14494  3324  0140               	movlb	0	; select bank0
 14495  3325  00B5               	movwf	OLED_print_xy@col
 14496                           
 14497                           ;oled.c: 144: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 145: {;oled.
      +                          c: 146:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 14498  3326  0144               	movlb	4	; select bank4
 14499  3327  086B               	movf	(OLED_print_xy@F7967+3)^(0+512),w
 14500  3328  0140               	movlb	0	; select bank0
 14501  3329  00B4               	movwf	OLED_print_xy@row_offsets+3
 14502  332A  0144               	movlb	4	; select bank4
 14503  332B  086A               	movf	(OLED_print_xy@F7967+2)^(0+512),w
 14504  332C  0140               	movlb	0	; select bank0
 14505  332D  00B3               	movwf	OLED_print_xy@row_offsets+2
 14506  332E  0144               	movlb	4	; select bank4
 14507  332F  0869               	movf	(OLED_print_xy@F7967+1)^(0+512),w
 14508  3330  0140               	movlb	0	; select bank0
 14509  3331  00B2               	movwf	OLED_print_xy@row_offsets+1
 14510  3332  0144               	movlb	4	; select bank4
 14511  3333  0868               	movf	OLED_print_xy@F7967^(0+512),w
 14512  3334  0140               	movlb	0	; select bank0
 14513  3335  00B1               	movwf	OLED_print_xy@row_offsets
 14514                           
 14515                           ;oled.c: 148:  OLED_command(0x80 | (col + row_offsets[row]));
 14516  3336  082D               	movf	OLED_print_xy@row,w
 14517  3337  3E31               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 14518  3338  0086               	movwf	6
 14519  3339  0187               	clrf	7
 14520  333A  0801               	movf	1,w
 14521  333B  0735               	addwf	OLED_print_xy@col,w
 14522  333C  3880               	iorlw	128
 14523  333D  31B1  2102  31B3   	fcall	_OLED_command
 14524  3340                     l7860:	
 14525                           ;oled.c: 149:  while (*s != (char) ((void*)0)) {
 14526                           
 14527                           
 14528                           ;oled.c: 149:  while (*s != (char) ((void*)0)) {
 14529  3340  0140               	movlb	0	; select bank0
 14530  3341  082E               	movf	OLED_print_xy@s,w
 14531  3342  0084               	movwf	4
 14532  3343  082F               	movf	OLED_print_xy@s+1,w
 14533  3344  0085               	movwf	5
 14534  3345  0012               	moviw fsr0++
 14535  3346  1903               	btfsc	3,2
 14536  3347  0008               	return
 14537                           
 14538                           ;oled.c: 150:   OLED_write(*s++);
 14539  3348  082E               	movf	OLED_print_xy@s,w
 14540  3349  0084               	movwf	4
 14541  334A  082F               	movf	OLED_print_xy@s+1,w
 14542  334B  0085               	movwf	5
 14543  334C  0800               	movf	0,w	;code access
 14544  334D  31B1  2116  31B3   	fcall	_OLED_write
 14545  3350  3001               	movlw	1
 14546  3351  0140               	movlb	0	; select bank0
 14547  3352  07AE               	addwf	OLED_print_xy@s,f
 14548  3353  3000               	movlw	0
 14549  3354  3DAF               	addwfc	OLED_print_xy@s+1,f
 14550  3355  2B40               	goto	l7860
 14551  3356                     __end_of_OLED_print_xy:	
 14552                           
 14553                           	psect	text28
 14554  35B2                     __ptext28:	
 14555 ;; *************** function _initialize *****************
 14556 ;; Defined at:
 14557 ;;		line 125 in file "main.c"
 14558 ;; Parameters:    Size  Location     Type
 14559 ;;		None
 14560 ;; Auto vars:     Size  Location     Type
 14561 ;;		None
 14562 ;; Return value:  Size  Location     Type
 14563 ;;                  1    wreg      void 
 14564 ;; Registers used:
 14565 ;;		wreg, status,2, status,0
 14566 ;; Tracked objects:
 14567 ;;		On entry : 0/0
 14568 ;;		On exit  : 0/0
 14569 ;;		Unchanged: 0/0
 14570 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14575 ;;Total ram usage:        0 bytes
 14576 ;; Hardware stack levels used:    1
 14577 ;; Hardware stack levels required when called:    3
 14578 ;; This function calls:
 14579 ;;		Nothing
 14580 ;; This function is called by:
 14581 ;;		_main
 14582 ;; This function uses a non-reentrant model
 14583 ;;
 14584                           
 14585                           
 14586                           ;psect for function _initialize
 14587  35B2                     _initialize:	
 14588                           
 14589                           ;main.c: 127:  OSCFRQ = 0b00000010;
 14590                           
 14591                           ;incstack = 0
 14592                           ; Regs used in _initialize: [wreg+status,2+status,0]
 14593  35B2  3002               	movlw	2
 14594  35B3  0151               	movlb	17	; select bank17
 14595  35B4  0093               	movwf	19	;volatile
 14596                           
 14597                           ;main.c: 128:  OSCCON1 = 0b01100000;
 14598  35B5  3060               	movlw	96
 14599  35B6  008D               	movwf	13	;volatile
 14600  35B7                     l144:	
 14601                           ;main.c: 129:  while (!OSCCON3bits.ORDY);
 14602                           
 14603  35B7  1E0F               	btfss	15,4	;volatile
 14604  35B8  2DB7               	goto	l144
 14605                           
 14606                           ;main.c: 132:  RX1DTPPSbits.RX1DTPPS = 0x17;
 14607  35B9  017D               	movlb	61	; select bank61
 14608  35BA  084B               	movf	75,w	;volatile
 14609  35BB  39C0               	andlw	-64
 14610  35BC  3817               	iorlw	23
 14611  35BD  00CB               	movwf	75	;volatile
 14612                           
 14613                           ;main.c: 133:  RC6PPS = 0x0F;
 14614  35BE  300F               	movlw	15
 14615  35BF  017E               	movlb	62	; select bank62
 14616  35C0  00A6               	movwf	38	;volatile
 14617                           
 14618                           ;main.c: 136:  ANSELA = 0b01000000;
 14619  35C1  3040               	movlw	64
 14620  35C2  00B8               	movwf	56	;volatile
 14621                           
 14622                           ;main.c: 137:  ANSELB = 0b00000000;
 14623  35C3  01C3               	clrf	67	;volatile
 14624                           
 14625                           ;main.c: 138:  ANSELC = 0b00000011;
 14626  35C4  3003               	movlw	3
 14627  35C5  00CE               	movwf	78	;volatile
 14628                           
 14629                           ;main.c: 141:  TRISA = 0b11110000;
 14630  35C6  30F0               	movlw	240
 14631  35C7  0140               	movlb	0	; select bank0
 14632  35C8  0092               	movwf	18	;volatile
 14633                           
 14634                           ;main.c: 142:  TRISB = 0b00000000;
 14635  35C9  0193               	clrf	19	;volatile
 14636                           
 14637                           ;main.c: 143:  TRISC = 0b10000111;
 14638  35CA  3087               	movlw	135
 14639  35CB  0094               	movwf	20	;volatile
 14640                           
 14641                           ;main.c: 146:  ADCON0bits.ADON = 1;
 14642  35CC  0141               	movlb	1	; select bank1
 14643  35CD  141D               	bsf	29,0	;volatile
 14644                           
 14645                           ;main.c: 147:  ADCON1 = 0b11100000;
 14646  35CE  30E0               	movlw	224
 14647  35CF  009E               	movwf	30	;volatile
 14648                           
 14649                           ;main.c: 150:  T0CON0 = 0b10000000;
 14650  35D0  3080               	movlw	128
 14651  35D1  014B               	movlb	11	; select bank11
 14652  35D2  009E               	movwf	30	;volatile
 14653                           
 14654                           ;main.c: 151:  T0CON1 = 0b01000111;
 14655  35D3  3047               	movlw	71
 14656  35D4  009F               	movwf	31	;volatile
 14657                           
 14658                           ;main.c: 152:  TMR0 = 178;
 14659  35D5  30B2               	movlw	178
 14660  35D6  009C               	movwf	28	;volatile
 14661                           
 14662                           ;main.c: 155:  T1CON = 0b00110011;
 14663  35D7  3033               	movlw	51
 14664  35D8  0144               	movlb	4	; select bank4
 14665  35D9  008E               	movwf	14	;volatile
 14666                           
 14667                           ;main.c: 156:  T1CLK = 0b00000001;
 14668  35DA  3001               	movlw	1
 14669  35DB  0091               	movwf	17	;volatile
 14670                           
 14671                           ;main.c: 157:  TMR1 = 53035;
 14672  35DC  30CF               	movlw	207
 14673  35DD  008D               	movwf	13	;volatile
 14674  35DE  302B               	movlw	43
 14675  35DF  008C               	movwf	12	;volatile
 14676                           
 14677                           ;main.c: 160:  PIE0 = 0b00110000;
 14678  35E0  3030               	movlw	48
 14679  35E1  014E               	movlb	14	; select bank14
 14680  35E2  0096               	movwf	22	;volatile
 14681                           
 14682                           ;main.c: 161:  PIE3 = 0b00100000;
 14683  35E3  3020               	movlw	32
 14684  35E4  0099               	movwf	25	;volatile
 14685                           
 14686                           ;main.c: 162:  PIE4 = 0b00000001;
 14687  35E5  3001               	movlw	1
 14688  35E6  009A               	movwf	26	;volatile
 14689                           
 14690                           ;main.c: 163:  INTCON = 0b11000000;
 14691  35E7  30C0               	movlw	192
 14692  35E8  008B               	movwf	11	;volatile
 14693                           
 14694                           ;main.c: 166:  IOCAP = 0b10110000;
 14695  35E9  30B0               	movlw	176
 14696  35EA  017E               	movlb	62	; select bank62
 14697  35EB  00BD               	movwf	61	;volatile
 14698                           
 14699                           ;main.c: 167:  IOCAN = 0b10110000;
 14700  35EC  30B0               	movlw	176
 14701  35ED  00BE               	movwf	62	;volatile
 14702                           
 14703                           ;main.c: 168:  IOCCN = 0b00000100;
 14704  35EE  3004               	movlw	4
 14705  35EF  00D4               	movwf	84	;volatile
 14706                           
 14707                           ;main.c: 172:  BAUD1CON = 0b00001000;
 14708  35F0  3008               	movlw	8
 14709  35F1  0142               	movlb	2	; select bank2
 14710  35F2  009F               	movwf	31	;volatile
 14711                           
 14712                           ;main.c: 173:  SPBRGL = 25;
 14713  35F3  3019               	movlw	25
 14714  35F4  009B               	movwf	27	;volatile
 14715                           
 14716                           ;main.c: 174:  RC1STA = 0b10010000;
 14717  35F5  3090               	movlw	144
 14718  35F6  009D               	movwf	29	;volatile
 14719                           
 14720                           ;main.c: 175:  TX1STA = 0b00100000;
 14721  35F7  3020               	movlw	32
 14722  35F8  009E               	movwf	30	;volatile
 14723  35F9  0008               	return
 14724  35FA                     __end_of_initialize:	
 14725                           
 14726                           	psect	text29
 14727  080C                     __ptext29:	
 14728 ;; *************** function _initGlobalData *****************
 14729 ;; Defined at:
 14730 ;;		line 91 in file "main.c"
 14731 ;; Parameters:    Size  Location     Type
 14732 ;;		None
 14733 ;; Auto vars:     Size  Location     Type
 14734 ;;  heater          2   24[BANK0 ] PTR struct .
 14735 ;;		 -> data.heater(124), data(166), 
 14736 ;;  n               1   23[BANK0 ] unsigned char 
 14737 ;; Return value:  Size  Location     Type
 14738 ;;                  1    wreg      void 
 14739 ;; Registers used:
 14740 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14741 ;; Tracked objects:
 14742 ;;		On entry : 0/0
 14743 ;;		On exit  : 0/0
 14744 ;;		Unchanged: 0/0
 14745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14747 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14748 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14749 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14750 ;;Total ram usage:        7 bytes
 14751 ;; Hardware stack levels used:    1
 14752 ;; Hardware stack levels required when called:    4
 14753 ;; This function calls:
 14754 ;;		___wmul
 14755 ;; This function is called by:
 14756 ;;		_main
 14757 ;; This function uses a non-reentrant model
 14758 ;;
 14759                           
 14760                           
 14761                           ;psect for function _initGlobalData
 14762  080C                     _initGlobalData:	
 14763                           
 14764                           ;main.c: 93:  uint8_t n;;main.c: 94:  t_heater *heater;;main.c: 96:  data.tempC = 0;
 14765                           
 14766                           ;incstack = 0
 14767                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 14768  080C  304A               	movlw	74
 14769  080D  0086               	movwf	6
 14770  080E  3027               	movlw	39
 14771  080F  0087               	movwf	7
 14772  0810  3000               	movlw	0
 14773  0811  3FC0               	movwi [0]fsr1
 14774  0812  3000               	movlw	0
 14775  0813  3FC1               	movwi [1]fsr1
 14776  0814  3000               	movlw	0
 14777  0815  3FC2               	movwi [2]fsr1
 14778  0816  3000               	movlw	0
 14779  0817  3FC3               	movwi [3]fsr1
 14780                           
 14781                           ;main.c: 97:  data.relHum = 0;
 14782  0818  304A               	movlw	74
 14783  0819  0086               	movwf	6
 14784  081A  3027               	movlw	39
 14785  081B  0087               	movwf	7
 14786  081C  3144               	addfsr 1,4
 14787  081D  3000               	movlw	0
 14788  081E  3FC0               	movwi [0]fsr1
 14789  081F  3000               	movlw	0
 14790  0820  3FC1               	movwi [1]fsr1
 14791  0821  3000               	movlw	0
 14792  0822  3FC2               	movwi [2]fsr1
 14793  0823  3000               	movlw	0
 14794  0824  3FC3               	movwi [3]fsr1
 14795                           
 14796                           ;main.c: 98:  data.dewPointC = 0;
 14797  0825  304A               	movlw	74
 14798  0826  0086               	movwf	6
 14799  0827  3027               	movlw	39
 14800  0828  0087               	movwf	7
 14801  0829  3148               	addfsr 1,8
 14802  082A  3000               	movlw	0
 14803  082B  3FC0               	movwi [0]fsr1
 14804  082C  3000               	movlw	0
 14805  082D  3FC1               	movwi [1]fsr1
 14806  082E  3000               	movlw	0
 14807  082F  3FC2               	movwi [2]fsr1
 14808  0830  3000               	movlw	0
 14809  0831  3FC3               	movwi [3]fsr1
 14810                           
 14811                           ;main.c: 99:  data.sensorVersion = 0;
 14812  0832  304A               	movlw	74
 14813  0833  0086               	movwf	6
 14814  0834  3027               	movlw	39
 14815  0835  0087               	movwf	7
 14816  0836  314C               	addfsr 1,12
 14817  0837  0181               	clrf	1
 14818                           
 14819                           ;main.c: 100:  data.tempAux = 0;
 14820  0838  304A               	movlw	74
 14821  0839  0086               	movwf	6
 14822  083A  3027               	movlw	39
 14823  083B  0087               	movwf	7
 14824  083C  314D               	addfsr 1,13
 14825  083D  3000               	movlw	0
 14826  083E  3FC0               	movwi [0]fsr1
 14827  083F  3000               	movlw	0
 14828  0840  3FC1               	movwi [1]fsr1
 14829  0841  3000               	movlw	0
 14830  0842  3FC2               	movwi [2]fsr1
 14831  0843  3000               	movlw	0
 14832  0844  3FC3               	movwi [3]fsr1
 14833                           
 14834                           ;main.c: 101:  data.voltage = 0;
 14835  0845  304A               	movlw	74
 14836  0846  0086               	movwf	6
 14837  0847  3027               	movlw	39
 14838  0848  0087               	movwf	7
 14839  0849  3151               	addfsr 1,17
 14840  084A  3000               	movlw	0
 14841  084B  3FC0               	movwi [0]fsr1
 14842  084C  3000               	movlw	0
 14843  084D  3FC1               	movwi [1]fsr1
 14844  084E  3000               	movlw	0
 14845  084F  3FC2               	movwi [2]fsr1
 14846  0850  3000               	movlw	0
 14847  0851  3FC3               	movwi [3]fsr1
 14848                           
 14849                           ;main.c: 102:  data.current = 0;
 14850  0852  304A               	movlw	74
 14851  0853  0086               	movwf	6
 14852  0854  3027               	movlw	39
 14853  0855  0087               	movwf	7
 14854  0856  3155               	addfsr 1,21
 14855  0857  3000               	movlw	0
 14856  0858  3FC0               	movwi [0]fsr1
 14857  0859  3000               	movlw	0
 14858  085A  3FC1               	movwi [1]fsr1
 14859  085B  3000               	movlw	0
 14860  085C  3FC2               	movwi [2]fsr1
 14861  085D  3000               	movlw	0
 14862  085E  3FC3               	movwi [3]fsr1
 14863                           
 14864                           ;main.c: 103:  data.power = 0;
 14865  085F  304A               	movlw	74
 14866  0860  0086               	movwf	6
 14867  0861  3027               	movlw	39
 14868  0862  0087               	movwf	7
 14869  0863  3159               	addfsr 1,25
 14870  0864  3000               	movlw	0
 14871  0865  3FC0               	movwi [0]fsr1
 14872  0866  3000               	movlw	0
 14873  0867  3FC1               	movwi [1]fsr1
 14874  0868  3000               	movlw	0
 14875  0869  3FC2               	movwi [2]fsr1
 14876  086A  3000               	movlw	0
 14877  086B  3FC3               	movwi [3]fsr1
 14878                           
 14879                           ;main.c: 104:  data.dpOffset = 3.0;
 14880  086C  304A               	movlw	74
 14881  086D  0086               	movwf	6
 14882  086E  3027               	movlw	39
 14883  086F  0087               	movwf	7
 14884  0870  315D               	addfsr 1,29
 14885  0871  3000               	movlw	0
 14886  0872  3FC0               	movwi [0]fsr1
 14887  0873  3000               	movlw	0
 14888  0874  3FC1               	movwi [1]fsr1
 14889  0875  3040               	movlw	64
 14890  0876  3FC2               	movwi [2]fsr1
 14891  0877  3040               	movlw	64
 14892  0878  3FC3               	movwi [3]fsr1
 14893                           
 14894                           ;main.c: 105:  data.skyTemp = -40;
 14895  0879  306B               	movlw	107
 14896  087A  0086               	movwf	6
 14897  087B  3027               	movlw	39
 14898  087C  0087               	movwf	7
 14899  087D  3000               	movlw	0
 14900  087E  3FC0               	movwi [0]fsr1
 14901  087F  3000               	movlw	0
 14902  0880  3FC1               	movwi [1]fsr1
 14903  0881  3020               	movlw	32
 14904  0882  3FC2               	movwi [2]fsr1
 14905  0883  30C2               	movlw	194
 14906  0884  3FC3               	movwi [3]fsr1
 14907                           
 14908                           ;main.c: 106:  data.fudgeFactor = 1.0;
 14909  0885  306F               	movlw	111
 14910  0886  0086               	movwf	6
 14911  0887  3027               	movlw	39
 14912  0888  0087               	movwf	7
 14913  0889  3000               	movlw	0
 14914  088A  3FC0               	movwi [0]fsr1
 14915  088B  3000               	movlw	0
 14916  088C  3FC1               	movwi [1]fsr1
 14917  088D  3080               	movlw	128
 14918  088E  3FC2               	movwi [2]fsr1
 14919  088F  303F               	movlw	63
 14920  0890  3FC3               	movwi [3]fsr1
 14921                           
 14922                           ;main.c: 108:  for (n = 0; n < 4; n++) {
 14923  0891  0140               	movlb	0	; select bank0
 14924  0892  01B7               	clrf	initGlobalData@n
 14925  0893                     l8846:	
 14926                           
 14927                           ;main.c: 109:   heater = &data.heater[n];
 14928  0893  0837               	movf	initGlobalData@n,w
 14929  0894  00B3               	movwf	??_initGlobalData
 14930  0895  01B4               	clrf	??_initGlobalData+1
 14931  0896  0833               	movf	??_initGlobalData,w
 14932  0897  00AD               	movwf	___wmul@multiplier
 14933  0898  0834               	movf	??_initGlobalData+1,w
 14934  0899  00AE               	movwf	___wmul@multiplier+1
 14935  089A  301F               	movlw	31
 14936  089B  00AF               	movwf	___wmul@multiplicand
 14937  089C  3000               	movlw	0
 14938  089D  00B0               	movwf	___wmul@multiplicand+1
 14939  089E  31B1  2161  3188   	fcall	___wmul
 14940  08A1  3074               	movlw	116
 14941  08A2  0140               	movlb	0	; select bank0
 14942  08A3  00B5               	movwf	??_initGlobalData+2
 14943  08A4  3027               	movlw	39
 14944  08A5  00B6               	movwf	??_initGlobalData+3
 14945  08A6  082D               	movf	?___wmul,w
 14946  08A7  0735               	addwf	??_initGlobalData+2,w
 14947  08A8  00B8               	movwf	initGlobalData@heater
 14948  08A9  082E               	movf	?___wmul+1,w
 14949  08AA  3D36               	addwfc	??_initGlobalData+3,w
 14950  08AB  00B9               	movwf	initGlobalData@heater+1
 14951                           
 14952                           ;main.c: 110:   heater->lensDia = 4;
 14953  08AC  0838               	movf	initGlobalData@heater,w
 14954  08AD  0086               	movwf	6
 14955  08AE  0839               	movf	initGlobalData@heater+1,w
 14956  08AF  0087               	movwf	7
 14957  08B0  3155               	addfsr 1,21
 14958  08B1  3000               	movlw	0
 14959  08B2  3FC0               	movwi [0]fsr1
 14960  08B3  3000               	movlw	0
 14961  08B4  3FC1               	movwi [1]fsr1
 14962  08B5  3080               	movlw	128
 14963  08B6  3FC2               	movwi [2]fsr1
 14964  08B7  3040               	movlw	64
 14965  08B8  3FC3               	movwi [3]fsr1
 14966                           
 14967                           ;main.c: 111:   heater->status = CH_UNCHECKED;
 14968  08B9  0838               	movf	initGlobalData@heater,w
 14969  08BA  3E1E               	addlw	30
 14970  08BB  00B3               	movwf	??_initGlobalData
 14971  08BC  3000               	movlw	0
 14972  08BD  3D39               	addwfc	initGlobalData@heater+1,w
 14973  08BE  00B4               	movwf	??_initGlobalData+1
 14974  08BF  0833               	movf	??_initGlobalData,w
 14975  08C0  0086               	movwf	6
 14976  08C1  0834               	movf	??_initGlobalData+1,w
 14977  08C2  0087               	movwf	7
 14978  08C3  3005               	movlw	5
 14979  08C4  0081               	movwf	1
 14980                           
 14981                           ;main.c: 112:   heater->mode = MODE_AUTO;
 14982  08C5  0838               	movf	initGlobalData@heater,w
 14983  08C6  3E1D               	addlw	29
 14984  08C7  00B3               	movwf	??_initGlobalData
 14985  08C8  3000               	movlw	0
 14986  08C9  3D39               	addwfc	initGlobalData@heater+1,w
 14987  08CA  00B4               	movwf	??_initGlobalData+1
 14988  08CB  0833               	movf	??_initGlobalData,w
 14989  08CC  0086               	movwf	6
 14990  08CD  0834               	movf	??_initGlobalData+1,w
 14991  08CE  0087               	movwf	7
 14992  08CF  3001               	movlw	1
 14993  08D0  0081               	movwf	1
 14994                           
 14995                           ;main.c: 113:   heater->Pmax = 0;
 14996  08D1  0838               	movf	initGlobalData@heater,w
 14997  08D2  0086               	movwf	6
 14998  08D3  0839               	movf	initGlobalData@heater+1,w
 14999  08D4  0087               	movwf	7
 15000  08D5  3144               	addfsr 1,4
 15001  08D6  3000               	movlw	0
 15002  08D7  3FC0               	movwi [0]fsr1
 15003  08D8  3000               	movlw	0
 15004  08D9  3FC1               	movwi [1]fsr1
 15005  08DA  3000               	movlw	0
 15006  08DB  3FC2               	movwi [2]fsr1
 15007  08DC  3000               	movlw	0
 15008  08DD  3FC3               	movwi [3]fsr1
 15009                           
 15010                           ;main.c: 114:   heater->Pset = -1;
 15011  08DE  0838               	movf	initGlobalData@heater,w
 15012  08DF  0086               	movwf	6
 15013  08E0  0839               	movf	initGlobalData@heater+1,w
 15014  08E1  0087               	movwf	7
 15015  08E2  3150               	addfsr 1,16
 15016  08E3  3000               	movlw	0
 15017  08E4  3FC0               	movwi [0]fsr1
 15018  08E5  3000               	movlw	0
 15019  08E6  3FC1               	movwi [1]fsr1
 15020  08E7  3080               	movlw	128
 15021  08E8  3FC2               	movwi [2]fsr1
 15022  08E9  30BF               	movlw	191
 15023  08EA  3FC3               	movwi [3]fsr1
 15024                           
 15025                           ;main.c: 115:   heater->Preq = 0;
 15026  08EB  0838               	movf	initGlobalData@heater,w
 15027  08EC  0086               	movwf	6
 15028  08ED  0839               	movf	initGlobalData@heater+1,w
 15029  08EE  0087               	movwf	7
 15030  08EF  3148               	addfsr 1,8
 15031  08F0  3000               	movlw	0
 15032  08F1  3FC0               	movwi [0]fsr1
 15033  08F2  3000               	movlw	0
 15034  08F3  3FC1               	movwi [1]fsr1
 15035  08F4  3000               	movlw	0
 15036  08F5  3FC2               	movwi [2]fsr1
 15037  08F6  3000               	movlw	0
 15038  08F7  3FC3               	movwi [3]fsr1
 15039                           
 15040                           ;main.c: 116:   heater->Patt = 0;
 15041  08F8  0838               	movf	initGlobalData@heater,w
 15042  08F9  0086               	movwf	6
 15043  08FA  0839               	movf	initGlobalData@heater+1,w
 15044  08FB  0087               	movwf	7
 15045  08FC  314C               	addfsr 1,12
 15046  08FD  3000               	movlw	0
 15047  08FE  3FC0               	movwi [0]fsr1
 15048  08FF  3000               	movlw	0
 15049  0900  3FC1               	movwi [1]fsr1
 15050  0901  3000               	movlw	0
 15051  0902  3FC2               	movwi [2]fsr1
 15052  0903  3000               	movlw	0
 15053  0904  3FC3               	movwi [3]fsr1
 15054                           
 15055                           ;main.c: 117:   heater->current = 0;
 15056  0905  0838               	movf	initGlobalData@heater,w
 15057  0906  0086               	movwf	6
 15058  0907  0839               	movf	initGlobalData@heater+1,w
 15059  0908  0087               	movwf	7
 15060  0909  3000               	movlw	0
 15061  090A  3FC0               	movwi [0]fsr1
 15062  090B  3000               	movlw	0
 15063  090C  3FC1               	movwi [1]fsr1
 15064  090D  3000               	movlw	0
 15065  090E  3FC2               	movwi [2]fsr1
 15066  090F  3000               	movlw	0
 15067  0910  3FC3               	movwi [3]fsr1
 15068                           
 15069                           ;main.c: 118:  }
 15070  0911  3001               	movlw	1
 15071  0912  00B3               	movwf	??_initGlobalData
 15072  0913  0833               	movf	??_initGlobalData,w
 15073  0914  07B7               	addwf	initGlobalData@n,f
 15074  0915  3004               	movlw	4
 15075  0916  0237               	subwf	initGlobalData@n,w
 15076  0917  1803               	btfsc	3,0
 15077  0918  0008               	return
 15078  0919  2893               	goto	l8846
 15079  091A                     __end_of_initGlobalData:	
 15080                           
 15081                           	psect	text30
 15082  1803                     __ptext30:	
 15083 ;; *************** function _getLastError *****************
 15084 ;; Defined at:
 15085 ;;		line 24 in file "error.c"
 15086 ;; Parameters:    Size  Location     Type
 15087 ;;		None
 15088 ;; Auto vars:     Size  Location     Type
 15089 ;;		None
 15090 ;; Return value:  Size  Location     Type
 15091 ;;                  1    wreg      enum E8249
 15092 ;; Registers used:
 15093 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15094 ;; Tracked objects:
 15095 ;;		On entry : 0/0
 15096 ;;		On exit  : 0/0
 15097 ;;		Unchanged: 0/0
 15098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15100 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15101 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15102 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15103 ;;Total ram usage:        4 bytes
 15104 ;; Hardware stack levels used:    1
 15105 ;; Hardware stack levels required when called:    3
 15106 ;; This function calls:
 15107 ;;		Nothing
 15108 ;; This function is called by:
 15109 ;;		_main
 15110 ;; This function uses a non-reentrant model
 15111 ;;
 15112                           
 15113                           
 15114                           ;psect for function _getLastError
 15115  1803                     _getLastError:	
 15116                           
 15117                           ;error.c: 26:  return (head == tail) ? NO_ERROR : errorMessageQueue[tail];
 15118                           
 15119                           ;incstack = 0
 15120                           ; Regs used in _getLastError: [wreg+fsr1l+fsr1h+status,2+status,0]
 15121  1803  0142               	movlb	2	; select bank2
 15122  1804  0865               	movf	_head^(0+256),w
 15123  1805  067C               	xorwf	_tail,w
 15124  1806  1903               	skipnz
 15125  1807  2816               	goto	l9286
 15126  1808  087C               	movf	_tail,w
 15127  1809  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 15128  180A  0086               	movwf	6
 15129  180B  3002               	movlw	2	; select bank4/5
 15130  180C  0087               	movwf	7
 15131  180D  0801               	movf	1,w
 15132  180E  0140               	movlb	0	; select bank0
 15133  180F  00A0               	movwf	??_getLastError
 15134  1810  01A1               	clrf	??_getLastError+1
 15135  1811  0820               	movf	??_getLastError,w
 15136  1812  00A2               	movwf	_getLastError$1378
 15137  1813  0821               	movf	??_getLastError+1,w
 15138  1814  00A3               	movwf	_getLastError$1378+1
 15139  1815  2819               	goto	l9288
 15140  1816                     l9286:	
 15141  1816  0140               	movlb	0	; select bank0
 15142  1817  01A2               	clrf	_getLastError$1378
 15143  1818  01A3               	clrf	_getLastError$1378+1
 15144  1819                     l9288:	
 15145  1819  0822               	movf	_getLastError$1378,w
 15146  181A  0008               	return
 15147  181B                     __end_of_getLastError:	
 15148                           
 15149                           	psect	text31
 15150  18F8                     __ptext31:	
 15151 ;; *************** function _getAnalogValues *****************
 15152 ;; Defined at:
 15153 ;;		line 316 in file "system.c"
 15154 ;; Parameters:    Size  Location     Type
 15155 ;;		None
 15156 ;; Auto vars:     Size  Location     Type
 15157 ;;  adc             2   17[BANK1 ] unsigned short 
 15158 ;; Return value:  Size  Location     Type
 15159 ;;                  1    wreg      void 
 15160 ;; Registers used:
 15161 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15162 ;; Tracked objects:
 15163 ;;		On entry : 0/0
 15164 ;;		On exit  : 0/0
 15165 ;;		Unchanged: 0/0
 15166 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15167 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15168 ;;      Locals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15170 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15171 ;;Total ram usage:        6 bytes
 15172 ;; Hardware stack levels used:    1
 15173 ;; Hardware stack levels required when called:    5
 15174 ;; This function calls:
 15175 ;;		___fladd
 15176 ;;		___fldiv
 15177 ;;		___flmul
 15178 ;;		___xxtofl
 15179 ;;		_ema
 15180 ;;		_getAnalogValue
 15181 ;; This function is called by:
 15182 ;;		_main
 15183 ;; This function uses a non-reentrant model
 15184 ;;
 15185                           
 15186                           
 15187                           ;psect for function _getAnalogValues
 15188  18F8                     _getAnalogValues:	
 15189                           
 15190                           ;system.c: 318:  static uint16_t avgT, avgV, avgI;;system.c: 319:  uint16_t adc;;system.
      +                          c: 321:  adc = getAnalogValue(0b000110);
 15191                           
 15192                           ;incstack = 0
 15193                           ; Regs used in _getAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 15194  18F8  3006               	movlw	6
 15195  18F9  31B1  217D  3198   	fcall	_getAnalogValue
 15196  18FC  0140               	movlb	0	; select bank0
 15197  18FD  0821               	movf	?_getAnalogValue+1,w
 15198  18FE  0141               	movlb	1	; select bank1
 15199  18FF  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 15200  1900  0140               	movlb	0	; select bank0
 15201  1901  0820               	movf	?_getAnalogValue,w
 15202  1902  0141               	movlb	1	; select bank1
 15203  1903  00B1               	movwf	getAnalogValues@adc^(0+128)
 15204                           
 15205                           ;system.c: 322:  avgT = ema(adc, avgT, ( (uint32_t)(0.5 * 65535) ));
 15206  1904  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 15207  1905  0140               	movlb	0	; select bank0
 15208  1906  00AD               	movwf	ema@in+1
 15209  1907  0141               	movlb	1	; select bank1
 15210  1908  0831               	movf	getAnalogValues@adc^(0+128),w
 15211  1909  0140               	movlb	0	; select bank0
 15212  190A  00AC               	movwf	ema@in
 15213  190B  0143               	movlb	3	; select bank3
 15214  190C  0863               	movf	(getAnalogValues@avgT+1)^(0+384),w
 15215  190D  0140               	movlb	0	; select bank0
 15216  190E  00AF               	movwf	ema@average+1
 15217  190F  0143               	movlb	3	; select bank3
 15218  1910  0862               	movf	getAnalogValues@avgT^(0+384),w
 15219  1911  0140               	movlb	0	; select bank0
 15220  1912  00AE               	movwf	ema@average
 15221  1913  3000               	movlw	0
 15222  1914  00B3               	movwf	ema@alpha+3
 15223  1915  3000               	movlw	0
 15224  1916  00B2               	movwf	ema@alpha+2
 15225  1917  307F               	movlw	127
 15226  1918  00B1               	movwf	ema@alpha+1
 15227  1919  30FF               	movlw	255
 15228  191A  00B0               	movwf	ema@alpha
 15229  191B  31A8  205C  3198   	fcall	_ema
 15230  191E  0140               	movlb	0	; select bank0
 15231  191F  082D               	movf	?_ema+1,w
 15232  1920  0143               	movlb	3	; select bank3
 15233  1921  00E3               	movwf	(getAnalogValues@avgT+1)^(0+384)
 15234  1922  0140               	movlb	0	; select bank0
 15235  1923  082C               	movf	?_ema,w
 15236  1924  0143               	movlb	3	; select bank3
 15237  1925  00E2               	movwf	getAnalogValues@avgT^(0+384)
 15238                           
 15239                           ;system.c: 323:  adc = getAnalogValue(0b010000);
 15240  1926  3010               	movlw	16
 15241  1927  31B1  217D  3198   	fcall	_getAnalogValue
 15242  192A  0140               	movlb	0	; select bank0
 15243  192B  0821               	movf	?_getAnalogValue+1,w
 15244  192C  0141               	movlb	1	; select bank1
 15245  192D  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 15246  192E  0140               	movlb	0	; select bank0
 15247  192F  0820               	movf	?_getAnalogValue,w
 15248  1930  0141               	movlb	1	; select bank1
 15249  1931  00B1               	movwf	getAnalogValues@adc^(0+128)
 15250                           
 15251                           ;system.c: 324:  avgV = ema(adc, avgV, ( (uint32_t)(0.8 * 65535) ));
 15252  1932  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 15253  1933  0140               	movlb	0	; select bank0
 15254  1934  00AD               	movwf	ema@in+1
 15255  1935  0141               	movlb	1	; select bank1
 15256  1936  0831               	movf	getAnalogValues@adc^(0+128),w
 15257  1937  0140               	movlb	0	; select bank0
 15258  1938  00AC               	movwf	ema@in
 15259  1939  0143               	movlb	3	; select bank3
 15260  193A  0861               	movf	(getAnalogValues@avgV+1)^(0+384),w
 15261  193B  0140               	movlb	0	; select bank0
 15262  193C  00AF               	movwf	ema@average+1
 15263  193D  0143               	movlb	3	; select bank3
 15264  193E  0860               	movf	getAnalogValues@avgV^(0+384),w
 15265  193F  0140               	movlb	0	; select bank0
 15266  1940  00AE               	movwf	ema@average
 15267  1941  3000               	movlw	0
 15268  1942  00B3               	movwf	ema@alpha+3
 15269  1943  3000               	movlw	0
 15270  1944  00B2               	movwf	ema@alpha+2
 15271  1945  30CC               	movlw	204
 15272  1946  00B1               	movwf	ema@alpha+1
 15273  1947  30CC               	movlw	204
 15274  1948  00B0               	movwf	ema@alpha
 15275  1949  31A8  205C  3198   	fcall	_ema
 15276  194C  0140               	movlb	0	; select bank0
 15277  194D  082D               	movf	?_ema+1,w
 15278  194E  0143               	movlb	3	; select bank3
 15279  194F  00E1               	movwf	(getAnalogValues@avgV+1)^(0+384)
 15280  1950  0140               	movlb	0	; select bank0
 15281  1951  082C               	movf	?_ema,w
 15282  1952  0143               	movlb	3	; select bank3
 15283  1953  00E0               	movwf	getAnalogValues@avgV^(0+384)
 15284                           
 15285                           ;system.c: 325:  adc = getAnalogValue(0b010001);
 15286  1954  3011               	movlw	17
 15287  1955  31B1  217D  3198   	fcall	_getAnalogValue
 15288  1958  0140               	movlb	0	; select bank0
 15289  1959  0821               	movf	?_getAnalogValue+1,w
 15290  195A  0141               	movlb	1	; select bank1
 15291  195B  00B2               	movwf	(getAnalogValues@adc+1)^(0+128)
 15292  195C  0140               	movlb	0	; select bank0
 15293  195D  0820               	movf	?_getAnalogValue,w
 15294  195E  0141               	movlb	1	; select bank1
 15295  195F  00B1               	movwf	getAnalogValues@adc^(0+128)
 15296                           
 15297                           ;system.c: 326:  avgI = ema(adc, avgI, ( (uint32_t)(0.3 * 65535) ));
 15298  1960  0832               	movf	(getAnalogValues@adc+1)^(0+128),w
 15299  1961  0140               	movlb	0	; select bank0
 15300  1962  00AD               	movwf	ema@in+1
 15301  1963  0141               	movlb	1	; select bank1
 15302  1964  0831               	movf	getAnalogValues@adc^(0+128),w
 15303  1965  0140               	movlb	0	; select bank0
 15304  1966  00AC               	movwf	ema@in
 15305  1967  0144               	movlb	4	; select bank4
 15306  1968  0837               	movf	(getAnalogValues@avgI+1)^(0+512),w
 15307  1969  0140               	movlb	0	; select bank0
 15308  196A  00AF               	movwf	ema@average+1
 15309  196B  0144               	movlb	4	; select bank4
 15310  196C  0836               	movf	getAnalogValues@avgI^(0+512),w
 15311  196D  0140               	movlb	0	; select bank0
 15312  196E  00AE               	movwf	ema@average
 15313  196F  3000               	movlw	0
 15314  1970  00B3               	movwf	ema@alpha+3
 15315  1971  3000               	movlw	0
 15316  1972  00B2               	movwf	ema@alpha+2
 15317  1973  304C               	movlw	76
 15318  1974  00B1               	movwf	ema@alpha+1
 15319  1975  30CC               	movlw	204
 15320  1976  00B0               	movwf	ema@alpha
 15321  1977  31A8  205C  3198   	fcall	_ema
 15322  197A  0140               	movlb	0	; select bank0
 15323  197B  082D               	movf	?_ema+1,w
 15324  197C  0144               	movlb	4	; select bank4
 15325  197D  00B7               	movwf	(getAnalogValues@avgI+1)^(0+512)
 15326  197E  0140               	movlb	0	; select bank0
 15327  197F  082C               	movf	?_ema,w
 15328  1980  0144               	movlb	4	; select bank4
 15329  1981  00B6               	movwf	getAnalogValues@avgI^(0+512)
 15330                           
 15331                           ;system.c: 327:  data.tempAux = ( (avgT * 0.1191) - 34.512 );
 15332  1982  30C2               	movlw	194
 15333  1983  0140               	movlb	0	; select bank0
 15334  1984  00DE               	movwf	___fladd@b+3
 15335  1985  300A               	movlw	10
 15336  1986  00DD               	movwf	___fladd@b+2
 15337  1987  300C               	movlw	12
 15338  1988  00DC               	movwf	___fladd@b+1
 15339  1989  304A               	movlw	74
 15340  198A  00DB               	movwf	___fladd@b
 15341  198B  303D               	movlw	61
 15342  198C  00C4               	movwf	___flmul@b+3
 15343  198D  30F3               	movlw	243
 15344  198E  00C3               	movwf	___flmul@b+2
 15345  198F  30EA               	movlw	234
 15346  1990  00C2               	movwf	___flmul@b+1
 15347  1991  30B3               	movlw	179
 15348  1992  00C1               	movwf	___flmul@b
 15349  1993  0143               	movlb	3	; select bank3
 15350  1994  0862               	movf	getAnalogValues@avgT^(0+384),w
 15351  1995  0140               	movlb	0	; select bank0
 15352  1996  00B3               	movwf	___xxtofl@val
 15353  1997  0143               	movlb	3	; select bank3
 15354  1998  0863               	movf	(getAnalogValues@avgT+1)^(0+384),w
 15355  1999  0140               	movlb	0	; select bank0
 15356  199A  00B4               	movwf	___xxtofl@val+1
 15357  199B  01B5               	clrf	___xxtofl@val+2
 15358  199C  01B6               	clrf	___xxtofl@val+3
 15359  199D  3000               	movlw	0
 15360  199E  31AC  2430  3198   	fcall	___xxtofl
 15361  19A1  0140               	movlb	0	; select bank0
 15362  19A2  0836               	movf	?___xxtofl+3,w
 15363  19A3  00C8               	movwf	___flmul@a+3
 15364  19A4  0835               	movf	?___xxtofl+2,w
 15365  19A5  00C7               	movwf	___flmul@a+2
 15366  19A6  0834               	movf	?___xxtofl+1,w
 15367  19A7  00C6               	movwf	___flmul@a+1
 15368  19A8  0833               	movf	?___xxtofl,w
 15369  19A9  00C5               	movwf	___flmul@a
 15370  19AA  3185  2561  3198   	fcall	___flmul
 15371  19AD  0140               	movlb	0	; select bank0
 15372  19AE  0844               	movf	?___flmul+3,w
 15373  19AF  00E2               	movwf	___fladd@a+3
 15374  19B0  0843               	movf	?___flmul+2,w
 15375  19B1  00E1               	movwf	___fladd@a+2
 15376  19B2  0842               	movf	?___flmul+1,w
 15377  19B3  00E0               	movwf	___fladd@a+1
 15378  19B4  0841               	movf	?___flmul,w
 15379  19B5  00DF               	movwf	___fladd@a
 15380  19B6  3192  2232  3198   	fcall	___fladd
 15381  19B9  304A               	movlw	74
 15382  19BA  0086               	movwf	6
 15383  19BB  3027               	movlw	39
 15384  19BC  0087               	movwf	7
 15385  19BD  314D               	addfsr 1,13
 15386  19BE  0140               	movlb	0	; select bank0
 15387  19BF  085B               	movf	?___fladd,w
 15388  19C0  3FC0               	movwi [0]fsr1
 15389  19C1  085C               	movf	?___fladd+1,w
 15390  19C2  3FC1               	movwi [1]fsr1
 15391  19C3  085D               	movf	?___fladd+2,w
 15392  19C4  3FC2               	movwi [2]fsr1
 15393  19C5  085E               	movf	?___fladd+3,w
 15394  19C6  3FC3               	movwi [3]fsr1
 15395                           
 15396                           ;system.c: 328:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 15397  19C7  3040               	movlw	64
 15398  19C8  00C4               	movwf	___flmul@b+3
 15399  19C9  30A0               	movlw	160
 15400  19CA  00C3               	movwf	___flmul@b+2
 15401  19CB  3000               	movlw	0
 15402  19CC  00C2               	movwf	___flmul@b+1
 15403  19CD  3000               	movlw	0
 15404  19CE  00C1               	movwf	___flmul@b
 15405  19CF  0143               	movlb	3	; select bank3
 15406  19D0  0860               	movf	getAnalogValues@avgV^(0+384),w
 15407  19D1  0140               	movlb	0	; select bank0
 15408  19D2  00B3               	movwf	___xxtofl@val
 15409  19D3  0143               	movlb	3	; select bank3
 15410  19D4  0861               	movf	(getAnalogValues@avgV+1)^(0+384),w
 15411  19D5  0140               	movlb	0	; select bank0
 15412  19D6  00B4               	movwf	___xxtofl@val+1
 15413  19D7  01B5               	clrf	___xxtofl@val+2
 15414  19D8  01B6               	clrf	___xxtofl@val+3
 15415  19D9  3000               	movlw	0
 15416  19DA  31AC  2430  3198   	fcall	___xxtofl
 15417  19DD  0140               	movlb	0	; select bank0
 15418  19DE  0836               	movf	?___xxtofl+3,w
 15419  19DF  00C8               	movwf	___flmul@a+3
 15420  19E0  0835               	movf	?___xxtofl+2,w
 15421  19E1  00C7               	movwf	___flmul@a+2
 15422  19E2  0834               	movf	?___xxtofl+1,w
 15423  19E3  00C6               	movwf	___flmul@a+1
 15424  19E4  0833               	movf	?___xxtofl,w
 15425  19E5  00C5               	movwf	___flmul@a
 15426  19E6  3185  2561  3198   	fcall	___flmul
 15427  19E9  0140               	movlb	0	; select bank0
 15428  19EA  0844               	movf	?___flmul+3,w
 15429  19EB  0141               	movlb	1	; select bank1
 15430  19EC  00B0               	movwf	(_getAnalogValues$2780+3)^(0+128)
 15431  19ED  0140               	movlb	0	; select bank0
 15432  19EE  0843               	movf	?___flmul+2,w
 15433  19EF  0141               	movlb	1	; select bank1
 15434  19F0  00AF               	movwf	(_getAnalogValues$2780+2)^(0+128)
 15435  19F1  0140               	movlb	0	; select bank0
 15436  19F2  0842               	movf	?___flmul+1,w
 15437  19F3  0141               	movlb	1	; select bank1
 15438  19F4  00AE               	movwf	(_getAnalogValues$2780+1)^(0+128)
 15439  19F5  0140               	movlb	0	; select bank0
 15440  19F6  0841               	movf	?___flmul,w
 15441  19F7  0141               	movlb	1	; select bank1
 15442  19F8  00AD               	movwf	_getAnalogValues$2780^(0+128)
 15443                           
 15444                           ;system.c: 328:  data.voltage = ( (avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0) );
 15445  19F9  3047               	movlw	71
 15446  19FA  0140               	movlb	0	; select bank0
 15447  19FB  00DE               	movwf	___fldiv@a+3
 15448  19FC  303B               	movlw	59
 15449  19FD  00DD               	movwf	___fldiv@a+2
 15450  19FE  30D1               	movlw	209
 15451  19FF  00DC               	movwf	___fldiv@a+1
 15452  1A00  3000               	movlw	0
 15453  1A01  00DB               	movwf	___fldiv@a
 15454  1A02  3043               	movlw	67
 15455  1A03  00C4               	movwf	___flmul@b+3
 15456  1A04  3045               	movlw	69
 15457  1A05  00C3               	movwf	___flmul@b+2
 15458  1A06  3000               	movlw	0
 15459  1A07  00C2               	movwf	___flmul@b+1
 15460  1A08  3000               	movlw	0
 15461  1A09  00C1               	movwf	___flmul@b
 15462  1A0A  0141               	movlb	1	; select bank1
 15463  1A0B  0830               	movf	(_getAnalogValues$2780+3)^(0+128),w
 15464  1A0C  0140               	movlb	0	; select bank0
 15465  1A0D  00C8               	movwf	___flmul@a+3
 15466  1A0E  0141               	movlb	1	; select bank1
 15467  1A0F  082F               	movf	(_getAnalogValues$2780+2)^(0+128),w
 15468  1A10  0140               	movlb	0	; select bank0
 15469  1A11  00C7               	movwf	___flmul@a+2
 15470  1A12  0141               	movlb	1	; select bank1
 15471  1A13  082E               	movf	(_getAnalogValues$2780+1)^(0+128),w
 15472  1A14  0140               	movlb	0	; select bank0
 15473  1A15  00C6               	movwf	___flmul@a+1
 15474  1A16  0141               	movlb	1	; select bank1
 15475  1A17  082D               	movf	_getAnalogValues$2780^(0+128),w
 15476  1A18  0140               	movlb	0	; select bank0
 15477  1A19  00C5               	movwf	___flmul@a
 15478  1A1A  3185  2561  3198   	fcall	___flmul
 15479  1A1D  0140               	movlb	0	; select bank0
 15480  1A1E  0844               	movf	?___flmul+3,w
 15481  1A1F  00E2               	movwf	___fldiv@b+3
 15482  1A20  0843               	movf	?___flmul+2,w
 15483  1A21  00E1               	movwf	___fldiv@b+2
 15484  1A22  0842               	movf	?___flmul+1,w
 15485  1A23  00E0               	movwf	___fldiv@b+1
 15486  1A24  0841               	movf	?___flmul,w
 15487  1A25  00DF               	movwf	___fldiv@b
 15488  1A26  319E  2628  3198   	fcall	___fldiv
 15489  1A29  304A               	movlw	74
 15490  1A2A  0086               	movwf	6
 15491  1A2B  3027               	movlw	39
 15492  1A2C  0087               	movwf	7
 15493  1A2D  3151               	addfsr 1,17
 15494  1A2E  0140               	movlb	0	; select bank0
 15495  1A2F  085B               	movf	?___fldiv,w
 15496  1A30  3FC0               	movwi [0]fsr1
 15497  1A31  085C               	movf	?___fldiv+1,w
 15498  1A32  3FC1               	movwi [1]fsr1
 15499  1A33  085D               	movf	?___fldiv+2,w
 15500  1A34  3FC2               	movwi [2]fsr1
 15501  1A35  085E               	movf	?___fldiv+3,w
 15502  1A36  3FC3               	movwi [3]fsr1
 15503                           
 15504                           ;system.c: 329:  data.current = ( (avgI * 5.0) / (1023.0 * 0.05 * 50.0) );
 15505  1A37  3045               	movlw	69
 15506  1A38  00DE               	movwf	___fldiv@a+3
 15507  1A39  301F               	movlw	31
 15508  1A3A  00DD               	movwf	___fldiv@a+2
 15509  1A3B  30D8               	movlw	216
 15510  1A3C  00DC               	movwf	___fldiv@a+1
 15511  1A3D  3000               	movlw	0
 15512  1A3E  00DB               	movwf	___fldiv@a
 15513  1A3F  3040               	movlw	64
 15514  1A40  00C4               	movwf	___flmul@b+3
 15515  1A41  30A0               	movlw	160
 15516  1A42  00C3               	movwf	___flmul@b+2
 15517  1A43  3000               	movlw	0
 15518  1A44  00C2               	movwf	___flmul@b+1
 15519  1A45  3000               	movlw	0
 15520  1A46  00C1               	movwf	___flmul@b
 15521  1A47  0144               	movlb	4	; select bank4
 15522  1A48  0836               	movf	getAnalogValues@avgI^(0+512),w
 15523  1A49  0140               	movlb	0	; select bank0
 15524  1A4A  00B3               	movwf	___xxtofl@val
 15525  1A4B  0144               	movlb	4	; select bank4
 15526  1A4C  0837               	movf	(getAnalogValues@avgI+1)^(0+512),w
 15527  1A4D  0140               	movlb	0	; select bank0
 15528  1A4E  00B4               	movwf	___xxtofl@val+1
 15529  1A4F  01B5               	clrf	___xxtofl@val+2
 15530  1A50  01B6               	clrf	___xxtofl@val+3
 15531  1A51  3000               	movlw	0
 15532  1A52  31AC  2430  3198   	fcall	___xxtofl
 15533  1A55  0140               	movlb	0	; select bank0
 15534  1A56  0836               	movf	?___xxtofl+3,w
 15535  1A57  00C8               	movwf	___flmul@a+3
 15536  1A58  0835               	movf	?___xxtofl+2,w
 15537  1A59  00C7               	movwf	___flmul@a+2
 15538  1A5A  0834               	movf	?___xxtofl+1,w
 15539  1A5B  00C6               	movwf	___flmul@a+1
 15540  1A5C  0833               	movf	?___xxtofl,w
 15541  1A5D  00C5               	movwf	___flmul@a
 15542  1A5E  3185  2561  3198   	fcall	___flmul
 15543  1A61  0140               	movlb	0	; select bank0
 15544  1A62  0844               	movf	?___flmul+3,w
 15545  1A63  00E2               	movwf	___fldiv@b+3
 15546  1A64  0843               	movf	?___flmul+2,w
 15547  1A65  00E1               	movwf	___fldiv@b+2
 15548  1A66  0842               	movf	?___flmul+1,w
 15549  1A67  00E0               	movwf	___fldiv@b+1
 15550  1A68  0841               	movf	?___flmul,w
 15551  1A69  00DF               	movwf	___fldiv@b
 15552  1A6A  319E  2628  3198   	fcall	___fldiv
 15553  1A6D  304A               	movlw	74
 15554  1A6E  0086               	movwf	6
 15555  1A6F  3027               	movlw	39
 15556  1A70  0087               	movwf	7
 15557  1A71  3155               	addfsr 1,21
 15558  1A72  0140               	movlb	0	; select bank0
 15559  1A73  085B               	movf	?___fldiv,w
 15560  1A74  3FC0               	movwi [0]fsr1
 15561  1A75  085C               	movf	?___fldiv+1,w
 15562  1A76  3FC1               	movwi [1]fsr1
 15563  1A77  085D               	movf	?___fldiv+2,w
 15564  1A78  3FC2               	movwi [2]fsr1
 15565  1A79  085E               	movf	?___fldiv+3,w
 15566  1A7A  3FC3               	movwi [3]fsr1
 15567                           
 15568                           ;system.c: 330:  data.power = data.voltage * data.current;
 15569  1A7B  304A               	movlw	74
 15570  1A7C  0086               	movwf	6
 15571  1A7D  3027               	movlw	39
 15572  1A7E  0087               	movwf	7
 15573  1A7F  3155               	addfsr 1,21
 15574  1A80  3F40               	moviw [0]fsr1
 15575  1A81  00C1               	movwf	___flmul@b
 15576  1A82  3F41               	moviw [1]fsr1
 15577  1A83  00C2               	movwf	___flmul@b+1
 15578  1A84  3F42               	moviw [2]fsr1
 15579  1A85  00C3               	movwf	___flmul@b+2
 15580  1A86  3F43               	moviw [3]fsr1
 15581  1A87  00C4               	movwf	___flmul@b+3
 15582  1A88  304A               	movlw	74
 15583  1A89  0086               	movwf	6
 15584  1A8A  3027               	movlw	39
 15585  1A8B  0087               	movwf	7
 15586  1A8C  3151               	addfsr 1,17
 15587  1A8D  3F40               	moviw [0]fsr1
 15588  1A8E  00C5               	movwf	___flmul@a
 15589  1A8F  3F41               	moviw [1]fsr1
 15590  1A90  00C6               	movwf	___flmul@a+1
 15591  1A91  3F42               	moviw [2]fsr1
 15592  1A92  00C7               	movwf	___flmul@a+2
 15593  1A93  3F43               	moviw [3]fsr1
 15594  1A94  00C8               	movwf	___flmul@a+3
 15595  1A95  3185  2561         	fcall	___flmul
 15596  1A97  304A               	movlw	74
 15597  1A98  0086               	movwf	6
 15598  1A99  3027               	movlw	39
 15599  1A9A  0087               	movwf	7
 15600  1A9B  3159               	addfsr 1,25
 15601  1A9C  0140               	movlb	0	; select bank0
 15602  1A9D  0841               	movf	?___flmul,w
 15603  1A9E  3FC0               	movwi [0]fsr1
 15604  1A9F  0842               	movf	?___flmul+1,w
 15605  1AA0  3FC1               	movwi [1]fsr1
 15606  1AA1  0843               	movf	?___flmul+2,w
 15607  1AA2  3FC2               	movwi [2]fsr1
 15608  1AA3  0844               	movf	?___flmul+3,w
 15609  1AA4  3FC3               	movwi [3]fsr1
 15610  1AA5  0008               	return
 15611  1AA6                     __end_of_getAnalogValues:	
 15612                           
 15613                           	psect	text32
 15614  2DF2                     __ptext32:	
 15615 ;; *************** function _controller *****************
 15616 ;; Defined at:
 15617 ;;		line 439 in file "system.c"
 15618 ;; Parameters:    Size  Location     Type
 15619 ;;		None
 15620 ;; Auto vars:     Size  Location     Type
 15621 ;;  tick            4   22[BANK0 ] unsigned long 
 15622 ;;  n               1   26[BANK0 ] unsigned char 
 15623 ;; Return value:  Size  Location     Type
 15624 ;;                  1    wreg      unsigned char 
 15625 ;; Registers used:
 15626 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15627 ;; Tracked objects:
 15628 ;;		On entry : 0/0
 15629 ;;		On exit  : 0/0
 15630 ;;		Unchanged: 0/0
 15631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15633 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15634 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15635 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15636 ;;Total ram usage:       10 bytes
 15637 ;; Hardware stack levels used:    1
 15638 ;; Hardware stack levels required when called:    4
 15639 ;; This function calls:
 15640 ;;		___bmul
 15641 ;;		_setChannelSwitch
 15642 ;;		_timeSince
 15643 ;; This function is called by:
 15644 ;;		_main
 15645 ;; This function uses a non-reentrant model
 15646 ;;
 15647                           
 15648                           
 15649                           ;psect for function _controller
 15650  2DF2                     _controller:	
 15651                           
 15652                           ;system.c: 441:  static uint32_t dutyCycleTimer;;system.c: 442:  uint32_t tick;;system.c
      +                          : 443:  static uint8_t idle;;system.c: 444:  uint8_t n;;system.c: 446:  if (idle) {
 15653                           
 15654                           ;incstack = 0
 15655                           ; Regs used in _controller: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15656  2DF2  0142               	movlb	2	; select bank2
 15657  2DF3  0860               	movf	controller@idle^(0+256),w
 15658  2DF4  1903               	btfsc	3,2
 15659  2DF5  2E01               	goto	l9256
 15660                           
 15661                           ;system.c: 447:   dutyCycleTimer = tick100ms;
 15662  2DF6  0144               	movlb	4	; select bank4
 15663  2DF7  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 15664  2DF8  00AD               	movwf	(controller@dutyCycleTimer+3)^(0+512)
 15665  2DF9  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 15666  2DFA  00AC               	movwf	(controller@dutyCycleTimer+2)^(0+512)
 15667  2DFB  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 15668  2DFC  00AB               	movwf	(controller@dutyCycleTimer+1)^(0+512)
 15669  2DFD  0832               	movf	_tick100ms^(0+512),w	;volatile
 15670  2DFE  00AA               	movwf	controller@dutyCycleTimer^(0+512)
 15671                           
 15672                           ;system.c: 448:   idle = 0;
 15673  2DFF  0142               	movlb	2	; select bank2
 15674  2E00  01E0               	clrf	controller@idle^(0+256)
 15675  2E01                     l9256:	
 15676                           
 15677                           ;system.c: 451:  tick = timeSince(dutyCycleTimer);
 15678  2E01  0144               	movlb	4	; select bank4
 15679  2E02  082D               	movf	(controller@dutyCycleTimer+3)^(0+512),w
 15680  2E03  0140               	movlb	0	; select bank0
 15681  2E04  00A3               	movwf	timeSince@since+3
 15682  2E05  0144               	movlb	4	; select bank4
 15683  2E06  082C               	movf	(controller@dutyCycleTimer+2)^(0+512),w
 15684  2E07  0140               	movlb	0	; select bank0
 15685  2E08  00A2               	movwf	timeSince@since+2
 15686  2E09  0144               	movlb	4	; select bank4
 15687  2E0A  082B               	movf	(controller@dutyCycleTimer+1)^(0+512),w
 15688  2E0B  0140               	movlb	0	; select bank0
 15689  2E0C  00A1               	movwf	timeSince@since+1
 15690  2E0D  0144               	movlb	4	; select bank4
 15691  2E0E  082A               	movf	controller@dutyCycleTimer^(0+512),w
 15692  2E0F  0140               	movlb	0	; select bank0
 15693  2E10  00A0               	movwf	timeSince@since
 15694  2E11  31A8  2002  31AD   	fcall	_timeSince
 15695  2E14  0140               	movlb	0	; select bank0
 15696  2E15  0823               	movf	?_timeSince+3,w
 15697  2E16  00B9               	movwf	controller@tick+3
 15698  2E17  0822               	movf	?_timeSince+2,w
 15699  2E18  00B8               	movwf	controller@tick+2
 15700  2E19  0821               	movf	?_timeSince+1,w
 15701  2E1A  00B7               	movwf	controller@tick+1
 15702  2E1B  0820               	movf	?_timeSince,w
 15703  2E1C  00B6               	movwf	controller@tick
 15704                           
 15705                           ;system.c: 452:  if (tick <= 100) {
 15706  2E1D  0839               	movf	controller@tick+3,w
 15707  2E1E  1D03               	btfss	3,2
 15708  2E1F  2E8E               	goto	l925
 15709  2E20  0838               	movf	controller@tick+2,w
 15710  2E21  1D03               	btfss	3,2
 15711  2E22  2E8E               	goto	l925
 15712  2E23  0837               	movf	controller@tick+1,w
 15713  2E24  1D03               	btfss	3,2
 15714  2E25  2E8E               	goto	l925
 15715  2E26  3065               	movlw	101
 15716  2E27  0236               	subwf	controller@tick,w
 15717  2E28  1803               	btfsc	3,0
 15718  2E29  2E8E               	goto	l925
 15719                           
 15720                           ;system.c: 453:   for(n = 0; n < 4; n++) {
 15721  2E2A  01BA               	clrf	controller@n
 15722  2E2B                     l9266:	
 15723                           
 15724                           ;system.c: 454:    if ((tick >= virtChannels[n].start) && (tick < virtChannels[n].stop))
 15725  2E2B  3009               	movlw	9
 15726  2E2C  00B1               	movwf	??_controller
 15727  2E2D  0831               	movf	??_controller,w
 15728  2E2E  00A9               	movwf	___bmul@multiplicand
 15729  2E2F  083A               	movf	controller@n,w
 15730  2E30  31B1  214F  31AD   	fcall	___bmul
 15731  2E33  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 15732  2E34  0086               	movwf	6
 15733  2E35  3002               	movlw	2	; select bank5/6
 15734  2E36  0087               	movwf	7
 15735  2E37  0801               	movf	1,w
 15736  2E38  0140               	movlb	0	; select bank0
 15737  2E39  00B2               	movwf	??_controller+1
 15738  2E3A  01B3               	clrf	??_controller+2
 15739  2E3B  01B4               	clrf	??_controller+3
 15740  2E3C  01B5               	clrf	??_controller+4
 15741  2E3D  0835               	movf	??_controller+4,w
 15742  2E3E  0239               	subwf	controller@tick+3,w
 15743  2E3F  1D03               	skipz
 15744  2E40  2E4B               	goto	u10625
 15745  2E41  0834               	movf	??_controller+3,w
 15746  2E42  0238               	subwf	controller@tick+2,w
 15747  2E43  1D03               	skipz
 15748  2E44  2E4B               	goto	u10625
 15749  2E45  0833               	movf	??_controller+2,w
 15750  2E46  0237               	subwf	controller@tick+1,w
 15751  2E47  1D03               	skipz
 15752  2E48  2E4B               	goto	u10625
 15753  2E49  0832               	movf	??_controller+1,w
 15754  2E4A  0236               	subwf	controller@tick,w
 15755  2E4B                     u10625:	
 15756  2E4B  1C03               	skipc
 15757  2E4C  2E72               	goto	l9272
 15758  2E4D  3009               	movlw	9
 15759  2E4E  00B1               	movwf	??_controller
 15760  2E4F  0831               	movf	??_controller,w
 15761  2E50  00A9               	movwf	___bmul@multiplicand
 15762  2E51  083A               	movf	controller@n,w
 15763  2E52  31B1  214F  31AD   	fcall	___bmul
 15764  2E55  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 15765  2E56  0086               	movwf	6
 15766  2E57  3002               	movlw	2	; select bank5/6
 15767  2E58  0087               	movwf	7
 15768  2E59  0801               	movf	1,w
 15769  2E5A  0140               	movlb	0	; select bank0
 15770  2E5B  00B2               	movwf	??_controller+1
 15771  2E5C  01B3               	clrf	??_controller+2
 15772  2E5D  01B4               	clrf	??_controller+3
 15773  2E5E  01B5               	clrf	??_controller+4
 15774  2E5F  0835               	movf	??_controller+4,w
 15775  2E60  0239               	subwf	controller@tick+3,w
 15776  2E61  1D03               	skipz
 15777  2E62  2E6D               	goto	u10635
 15778  2E63  0834               	movf	??_controller+3,w
 15779  2E64  0238               	subwf	controller@tick+2,w
 15780  2E65  1D03               	skipz
 15781  2E66  2E6D               	goto	u10635
 15782  2E67  0833               	movf	??_controller+2,w
 15783  2E68  0237               	subwf	controller@tick+1,w
 15784  2E69  1D03               	skipz
 15785  2E6A  2E6D               	goto	u10635
 15786  2E6B  0832               	movf	??_controller+1,w
 15787  2E6C  0236               	subwf	controller@tick,w
 15788  2E6D                     u10635:	
 15789  2E6D  1803               	skipnc
 15790  2E6E  2E72               	goto	l9272
 15791                           
 15792                           ;system.c: 455:     setChannelSwitch(virtChannels[n].phyChanNum, 1);
 15793  2E6F  01AD               	clrf	setChannelSwitch@state
 15794  2E70  0AAD               	incf	setChannelSwitch@state,f
 15795  2E71  2E73               	goto	L7
 15796  2E72                     l9272:	
 15797                           
 15798                           ;system.c: 457:     setChannelSwitch(virtChannels[n].phyChanNum, 0);
 15799  2E72  01AD               	clrf	setChannelSwitch@state
 15800  2E73                     L7:	
 15801  2E73  3009               	movlw	9
 15802  2E74  00B1               	movwf	??_controller
 15803  2E75  0831               	movf	??_controller,w
 15804  2E76  00A9               	movwf	___bmul@multiplicand
 15805  2E77  083A               	movf	controller@n,w
 15806  2E78  31B1  214F  31AD   	fcall	___bmul
 15807  2E7B  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 15808  2E7C  0086               	movwf	6
 15809  2E7D  3002               	movlw	2	; select bank5/6
 15810  2E7E  0087               	movwf	7
 15811  2E7F  0801               	movf	1,w
 15812  2E80  31B5  256B  31AD   	fcall	_setChannelSwitch
 15813                           
 15814                           ;system.c: 458:   }
 15815  2E83  3001               	movlw	1
 15816  2E84  0140               	movlb	0	; select bank0
 15817  2E85  00B1               	movwf	??_controller
 15818  2E86  0831               	movf	??_controller,w
 15819  2E87  07BA               	addwf	controller@n,f
 15820  2E88  3004               	movlw	4
 15821  2E89  023A               	subwf	controller@n,w
 15822  2E8A  1C03               	skipc
 15823  2E8B  2E2B               	goto	l9266
 15824                           
 15825                           ;system.c: 459:   __nop();
 15826  2E8C  0000               	nop
 15827                           
 15828                           ;system.c: 460:  } else {
 15829  2E8D  2E91               	goto	l9278
 15830  2E8E                     l925:	
 15831                           
 15832                           ;system.c: 461:   idle = 1;
 15833  2E8E  0142               	movlb	2	; select bank2
 15834  2E8F  01E0               	clrf	controller@idle^(0+256)
 15835  2E90  0AE0               	incf	controller@idle^(0+256),f
 15836  2E91                     l9278:	
 15837                           
 15838                           ;system.c: 464:  return idle;
 15839  2E91  0142               	movlb	2	; select bank2
 15840  2E92  0860               	movf	controller@idle^(0+256),w
 15841  2E93  0008               	return
 15842  2E94                     __end_of_controller:	
 15843                           
 15844                           	psect	text33
 15845  20E0                     __ptext33:	
 15846 ;; *************** function _checkSensor *****************
 15847 ;; Defined at:
 15848 ;;		line 206 in file "system.c"
 15849 ;; Parameters:    Size  Location     Type
 15850 ;;		None
 15851 ;; Auto vars:     Size  Location     Type
 15852 ;;  dp              2    0        PTR struct .
 15853 ;; Return value:  Size  Location     Type
 15854 ;;                  1    wreg      unsigned char 
 15855 ;; Registers used:
 15856 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15857 ;; Tracked objects:
 15858 ;;		On entry : 0/0
 15859 ;;		On exit  : 0/0
 15860 ;;		Unchanged: 0/0
 15861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15864 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15865 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15866 ;;Total ram usage:        2 bytes
 15867 ;; Hardware stack levels used:    1
 15868 ;; Hardware stack levels required when called:    5
 15869 ;; This function calls:
 15870 ;;		___flge
 15871 ;;		_error
 15872 ;;		_timeSince
 15873 ;;		_uartReset
 15874 ;;		_uartSendByte
 15875 ;; This function is called by:
 15876 ;;		_main
 15877 ;; This function uses a non-reentrant model
 15878 ;;
 15879                           
 15880                           
 15881                           ;psect for function _checkSensor
 15882  20E0                     _checkSensor:	
 15883                           
 15884                           ;system.c: 208:  t_dataPacket *dp;;system.c: 209:  static uint32_t sensorUpdateInterval 
      +                          = 100;;system.c: 210:  static uint32_t sensorTimeout = 0;;system.c: 211:  static uint8_t
      +                           state = 0;;system.c: 214:  if ((data.tempAux < -30) || (data.tempAux > 60)) {
 15885                           
 15886                           ;incstack = 0
 15887                           ; Regs used in _checkSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15888  20E0  304A               	movlw	74
 15889  20E1  0086               	movwf	6
 15890  20E2  3027               	movlw	39
 15891  20E3  0087               	movwf	7
 15892  20E4  314D               	addfsr 1,13
 15893  20E5  3F40               	moviw [0]fsr1
 15894  20E6  0141               	movlb	1	; select bank1
 15895  20E7  00AD               	movwf	___flge@ff1^(0+128)
 15896  20E8  3F41               	moviw [1]fsr1
 15897  20E9  00AE               	movwf	(___flge@ff1+1)^(0+128)
 15898  20EA  3F42               	moviw [2]fsr1
 15899  20EB  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15900  20EC  3F43               	moviw [3]fsr1
 15901  20ED  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15902  20EE  30C1               	movlw	193
 15903  20EF  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15904  20F0  30F0               	movlw	240
 15905  20F1  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15906  20F2  3000               	movlw	0
 15907  20F3  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15908  20F4  3000               	movlw	0
 15909  20F5  00B1               	movwf	___flge@ff2^(0+128)
 15910  20F6  31AA  2227  31A0   	fcall	___flge
 15911  20F9  1C03               	btfss	3,0
 15912  20FA  2916               	goto	l8970
 15913  20FB  3042               	movlw	66
 15914  20FC  0141               	movlb	1	; select bank1
 15915  20FD  00B0               	movwf	(___flge@ff1+3)^(0+128)
 15916  20FE  3070               	movlw	112
 15917  20FF  00AF               	movwf	(___flge@ff1+2)^(0+128)
 15918  2100  3000               	movlw	0
 15919  2101  00AE               	movwf	(___flge@ff1+1)^(0+128)
 15920  2102  3000               	movlw	0
 15921  2103  00AD               	movwf	___flge@ff1^(0+128)
 15922  2104  304A               	movlw	74
 15923  2105  0086               	movwf	6
 15924  2106  3027               	movlw	39
 15925  2107  0087               	movwf	7
 15926  2108  314D               	addfsr 1,13
 15927  2109  3F40               	moviw [0]fsr1
 15928  210A  00B1               	movwf	___flge@ff2^(0+128)
 15929  210B  3F41               	moviw [1]fsr1
 15930  210C  00B2               	movwf	(___flge@ff2+1)^(0+128)
 15931  210D  3F42               	moviw [2]fsr1
 15932  210E  00B3               	movwf	(___flge@ff2+2)^(0+128)
 15933  210F  3F43               	moviw [3]fsr1
 15934  2110  00B4               	movwf	(___flge@ff2+3)^(0+128)
 15935  2111  31AA  2227  31A0   	fcall	___flge
 15936  2114  1803               	btfsc	3,0
 15937  2115  291C               	goto	l8972
 15938  2116                     l8970:	
 15939                           
 15940                           ;system.c: 215:   data.status.AUX_SENSOR_OK = 0;
 15941  2116  3073               	movlw	115
 15942  2117  0086               	movwf	6
 15943  2118  3027               	movlw	39
 15944  2119  0087               	movwf	7
 15945  211A  1201               	bcf	1,4
 15946                           
 15947                           ;system.c: 216:  } else
 15948  211B  29EC               	goto	l9028
 15949  211C                     l8972:	
 15950                           
 15951                           ;system.c: 217:   data.status.AUX_SENSOR_OK = 1;
 15952  211C  3073               	movlw	115
 15953  211D  0086               	movwf	6
 15954  211E  3027               	movlw	39
 15955  211F  0087               	movwf	7
 15956  2120  1601               	bsf	1,4
 15957  2121  29EC               	goto	l9028
 15958  2122                     l8974:	
 15959                           
 15960                           ;system.c: 222:   if (timeSince(sensorUpdateInterval) >= 100) {
 15961  2122  0144               	movlb	4	; select bank4
 15962  2123  0867               	movf	(checkSensor@sensorUpdateInterval+3)^(0+512),w
 15963  2124  0140               	movlb	0	; select bank0
 15964  2125  00A3               	movwf	timeSince@since+3
 15965  2126  0144               	movlb	4	; select bank4
 15966  2127  0866               	movf	(checkSensor@sensorUpdateInterval+2)^(0+512),w
 15967  2128  0140               	movlb	0	; select bank0
 15968  2129  00A2               	movwf	timeSince@since+2
 15969  212A  0144               	movlb	4	; select bank4
 15970  212B  0865               	movf	(checkSensor@sensorUpdateInterval+1)^(0+512),w
 15971  212C  0140               	movlb	0	; select bank0
 15972  212D  00A1               	movwf	timeSince@since+1
 15973  212E  0144               	movlb	4	; select bank4
 15974  212F  0864               	movf	checkSensor@sensorUpdateInterval^(0+512),w
 15975  2130  0140               	movlb	0	; select bank0
 15976  2131  00A0               	movwf	timeSince@since
 15977  2132  31A8  2002  31A0   	fcall	_timeSince
 15978  2135  0140               	movlb	0	; select bank0
 15979  2136  0823               	movf	?_timeSince+3,w
 15980  2137  1D03               	btfss	3,2
 15981  2138  2943               	goto	l8976
 15982  2139  0822               	movf	?_timeSince+2,w
 15983  213A  1D03               	btfss	3,2
 15984  213B  2943               	goto	l8976
 15985  213C  0821               	movf	?_timeSince+1,w
 15986  213D  1D03               	btfss	3,2
 15987  213E  2943               	goto	l8976
 15988  213F  3064               	movlw	100
 15989  2140  0220               	subwf	?_timeSince,w
 15990  2141  1C03               	btfss	3,0
 15991  2142  29FE               	goto	l9030
 15992  2143                     l8976:	
 15993                           
 15994                           ;system.c: 223:    sensorUpdateInterval = sensorTimeout = tick100ms;
 15995  2143  0144               	movlb	4	; select bank4
 15996  2144  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 15997  2145  00B1               	movwf	(checkSensor@sensorTimeout+3)^(0+512)
 15998  2146  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 15999  2147  00B0               	movwf	(checkSensor@sensorTimeout+2)^(0+512)
 16000  2148  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 16001  2149  00AF               	movwf	(checkSensor@sensorTimeout+1)^(0+512)
 16002  214A  0832               	movf	_tick100ms^(0+512),w	;volatile
 16003  214B  00AE               	movwf	checkSensor@sensorTimeout^(0+512)
 16004  214C  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 16005  214D  00E7               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+512)
 16006  214E  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 16007  214F  00E6               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+512)
 16008  2150  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 16009  2151  00E5               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+512)
 16010  2152  082E               	movf	checkSensor@sensorTimeout^(0+512),w
 16011  2153  00E4               	movwf	checkSensor@sensorUpdateInterval^(0+512)
 16012                           
 16013                           ;system.c: 224:    uartSendByte('?');
 16014  2154  303F               	movlw	63
 16015  2155  31B1  210C  31A0   	fcall	_uartSendByte
 16016                           
 16017                           ;system.c: 225:    state = 1;
 16018  2158  0142               	movlb	2	; select bank2
 16019  2159  01E1               	clrf	checkSensor@state^(0+256)
 16020  215A  0AE1               	incf	checkSensor@state^(0+256),f
 16021  215B  29FE               	goto	l9030
 16022  215C                     l8982:	
 16023                           
 16024                           ;system.c: 230:   if (timeSince(sensorTimeout) > 20) {
 16025  215C  0144               	movlb	4	; select bank4
 16026  215D  0831               	movf	(checkSensor@sensorTimeout+3)^(0+512),w
 16027  215E  0140               	movlb	0	; select bank0
 16028  215F  00A3               	movwf	timeSince@since+3
 16029  2160  0144               	movlb	4	; select bank4
 16030  2161  0830               	movf	(checkSensor@sensorTimeout+2)^(0+512),w
 16031  2162  0140               	movlb	0	; select bank0
 16032  2163  00A2               	movwf	timeSince@since+2
 16033  2164  0144               	movlb	4	; select bank4
 16034  2165  082F               	movf	(checkSensor@sensorTimeout+1)^(0+512),w
 16035  2166  0140               	movlb	0	; select bank0
 16036  2167  00A1               	movwf	timeSince@since+1
 16037  2168  0144               	movlb	4	; select bank4
 16038  2169  082E               	movf	checkSensor@sensorTimeout^(0+512),w
 16039  216A  0140               	movlb	0	; select bank0
 16040  216B  00A0               	movwf	timeSince@since
 16041  216C  31A8  2002  31A0   	fcall	_timeSince
 16042  216F  0140               	movlb	0	; select bank0
 16043  2170  0823               	movf	?_timeSince+3,w
 16044  2171  1D03               	btfss	3,2
 16045  2172  297D               	goto	l8984
 16046  2173  0822               	movf	?_timeSince+2,w
 16047  2174  1D03               	btfss	3,2
 16048  2175  297D               	goto	l8984
 16049  2176  0821               	movf	?_timeSince+1,w
 16050  2177  1D03               	btfss	3,2
 16051  2178  297D               	goto	l8984
 16052  2179  3015               	movlw	21
 16053  217A  0220               	subwf	?_timeSince,w
 16054  217B  1C03               	btfss	3,0
 16055  217C  2992               	goto	l8994
 16056  217D                     l8984:	
 16057                           
 16058                           ;system.c: 231:    if (data.status.SENSOR_OK) {
 16059  217D  3073               	movlw	115
 16060  217E  0086               	movwf	6
 16061  217F  3027               	movlw	39
 16062  2180  0087               	movwf	7
 16063  2181  1D81               	btfss	1,3
 16064  2182  298E               	goto	l8992
 16065                           
 16066                           ;system.c: 232:     data.status.SENSOR_OK = 0;
 16067  2183  3073               	movlw	115
 16068  2184  0086               	movwf	6
 16069  2185  3027               	movlw	39
 16070  2186  0087               	movwf	7
 16071  2187  1181               	bcf	1,3
 16072                           
 16073                           ;system.c: 233:     state = 0;
 16074  2188  0142               	movlb	2	; select bank2
 16075  2189  01E1               	clrf	checkSensor@state^(0+256)
 16076                           
 16077                           ;system.c: 234:     error(WARN_SENSOR_TIMEOUT);
 16078  218A  3007               	movlw	7
 16079  218B  31B4  245E  31A0   	fcall	_error
 16080  218E                     l8992:	
 16081                           
 16082                           ;system.c: 236:    uartReset();
 16083  218E  31B0  20F2  31A0   	fcall	_uartReset
 16084                           
 16085                           ;system.c: 237:   } else if (uartDataReadyFlag) {
 16086  2191  29FE               	goto	l9030
 16087  2192                     l8994:	
 16088  2192  0142               	movlb	2	; select bank2
 16089  2193  086D               	movf	_uartDataReadyFlag^(0+256),w	;volatile
 16090  2194  1903               	btfsc	3,2
 16091  2195  29FE               	goto	l9030
 16092                           
 16093                           ;system.c: 238:    uartDataReadyFlag = 0;
 16094  2196  01ED               	clrf	_uartDataReadyFlag^(0+256)	;volatile
 16095                           
 16096                           ;system.c: 240:    if ((dataPacket.header == 0xAA) && (dataPacket.status == 1)) {
 16097  2197  30AA               	movlw	170
 16098  2198  0144               	movlb	4	; select bank4
 16099  2199  0638               	xorwf	_dataPacket^(0+512),w	;volatile
 16100  219A  1D03               	btfss	3,2
 16101  219B  29D7               	goto	l9016
 16102  219C  033A               	decf	(_dataPacket^(0+512)+2),w	;volatile
 16103  219D  1D03               	btfss	3,2
 16104  219E  29D7               	goto	l9016
 16105                           
 16106                           ;system.c: 241:     data.tempC = dataPacket.tempC;
 16107  219F  304A               	movlw	74
 16108  21A0  0086               	movwf	6
 16109  21A1  3027               	movlw	39
 16110  21A2  0087               	movwf	7
 16111  21A3  083B               	movf	(_dataPacket^(0+512)+3),w	;volatile
 16112  21A4  3FC0               	movwi [0]fsr1
 16113  21A5  083C               	movf	((_dataPacket+1)^(0+512)+3),w	;volatile
 16114  21A6  3FC1               	movwi [1]fsr1
 16115  21A7  083D               	movf	((_dataPacket+2)^(0+512)+3),w	;volatile
 16116  21A8  3FC2               	movwi [2]fsr1
 16117  21A9  083E               	movf	((_dataPacket+3)^(0+512)+3),w	;volatile
 16118  21AA  3FC3               	movwi [3]fsr1
 16119                           
 16120                           ;system.c: 242:     data.relHum = dataPacket.relHum;
 16121  21AB  304A               	movlw	74
 16122  21AC  0086               	movwf	6
 16123  21AD  3027               	movlw	39
 16124  21AE  0087               	movwf	7
 16125  21AF  3144               	addfsr 1,4
 16126  21B0  083F               	movf	(_dataPacket^(0+512)+7),w	;volatile
 16127  21B1  3FC0               	movwi [0]fsr1
 16128  21B2  0840               	movf	((_dataPacket+1)^(0+512)+7),w	;volatile
 16129  21B3  3FC1               	movwi [1]fsr1
 16130  21B4  0841               	movf	((_dataPacket+2)^(0+512)+7),w	;volatile
 16131  21B5  3FC2               	movwi [2]fsr1
 16132  21B6  0842               	movf	((_dataPacket+3)^(0+512)+7),w	;volatile
 16133  21B7  3FC3               	movwi [3]fsr1
 16134                           
 16135                           ;system.c: 243:     data.dewPointC = dataPacket.dewPointC;
 16136  21B8  304A               	movlw	74
 16137  21B9  0086               	movwf	6
 16138  21BA  3027               	movlw	39
 16139  21BB  0087               	movwf	7
 16140  21BC  3148               	addfsr 1,8
 16141  21BD  0843               	movf	(_dataPacket^(0+512)+11),w	;volatile
 16142  21BE  3FC0               	movwi [0]fsr1
 16143  21BF  0844               	movf	((_dataPacket+1)^(0+512)+11),w	;volatile
 16144  21C0  3FC1               	movwi [1]fsr1
 16145  21C1  0845               	movf	((_dataPacket+2)^(0+512)+11),w	;volatile
 16146  21C2  3FC2               	movwi [2]fsr1
 16147  21C3  0846               	movf	((_dataPacket+3)^(0+512)+11),w	;volatile
 16148  21C4  3FC3               	movwi [3]fsr1
 16149                           
 16150                           ;system.c: 244:     data.sensorVersion = dataPacket.version;
 16151  21C5  0839               	movf	(_dataPacket^(0+512)+1),w	;volatile
 16152  21C6  0141               	movlb	1	; select bank1
 16153  21C7  00B9               	movwf	??_checkSensor^(0+128)
 16154  21C8  3056               	movlw	86
 16155  21C9  0086               	movwf	6
 16156  21CA  3027               	movlw	39
 16157  21CB  0087               	movwf	7
 16158  21CC  0839               	movf	??_checkSensor^(0+128),w
 16159  21CD  0081               	movwf	1
 16160                           
 16161                           ;system.c: 245:     data.status.SENSOR_OK = 1;
 16162  21CE  3073               	movlw	115
 16163  21CF  0086               	movwf	6
 16164  21D0  3027               	movlw	39
 16165  21D1  0087               	movwf	7
 16166  21D2  1581               	bsf	1,3
 16167                           
 16168                           ;system.c: 246:     state = 0;
 16169  21D3  0142               	movlb	2	; select bank2
 16170  21D4  01E1               	clrf	checkSensor@state^(0+256)
 16171                           
 16172                           ;system.c: 248:     return 1;
 16173  21D5  3001               	movlw	1
 16174  21D6  0008               	return
 16175  21D7                     l9016:	
 16176                           
 16177                           ;system.c: 251:     if (data.status.SENSOR_OK) {
 16178  21D7  3073               	movlw	115
 16179  21D8  0086               	movwf	6
 16180  21D9  3027               	movlw	39
 16181  21DA  0087               	movwf	7
 16182  21DB  1D81               	btfss	1,3
 16183  21DC  29E6               	goto	l9022
 16184                           
 16185                           ;system.c: 252:      data.status.SENSOR_OK = 0;
 16186  21DD  3073               	movlw	115
 16187  21DE  0086               	movwf	6
 16188  21DF  3027               	movlw	39
 16189  21E0  0087               	movwf	7
 16190  21E1  1181               	bcf	1,3
 16191                           
 16192                           ;system.c: 253:      error(WARN_SENSOR_CHECKSUM);
 16193  21E2  3008               	movlw	8
 16194  21E3  31B4  245E  31A0   	fcall	_error
 16195  21E6                     l9022:	
 16196                           
 16197                           ;system.c: 255:     uartReset();
 16198  21E6  31B0  20F2  31A0   	fcall	_uartReset
 16199  21E9                     l9024:	
 16200                           
 16201                           ;system.c: 257:    state = 0;
 16202  21E9  0142               	movlb	2	; select bank2
 16203  21EA  01E1               	clrf	checkSensor@state^(0+256)
 16204  21EB  29FE               	goto	l9030
 16205  21EC                     l9028:	
 16206  21EC  0142               	movlb	2	; select bank2
 16207  21ED  0861               	movf	checkSensor@state^(0+256),w
 16208  21EE  0141               	movlb	1	; select bank1
 16209  21EF  00B9               	movwf	??_checkSensor^(0+128)
 16210  21F0  01BA               	clrf	(??_checkSensor^(0+128)+1)
 16211                           
 16212                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 16213                           ; Switch size 1, requested type "simple"
 16214                           ; Number of cases is 1, Range of values is 0 to 0
 16215                           ; switch strategies available:
 16216                           ; Name         Instructions Cycles
 16217                           ; simple_byte            4     3 (average)
 16218                           ; direct_byte            8     6 (fixed)
 16219                           ; jumptable            260     6 (fixed)
 16220                           ;	Chosen strategy is simple_byte
 16221  21F1  083A               	movf	(??_checkSensor+1)^(0+128),w
 16222  21F2  3A00               	xorlw	0	; case 0
 16223  21F3  1903               	skipnz
 16224  21F4  29F6               	goto	l9578
 16225  21F5  29E9               	goto	l9024
 16226  21F6                     l9578:	
 16227                           
 16228                           ; Switch size 1, requested type "simple"
 16229                           ; Number of cases is 2, Range of values is 0 to 1
 16230                           ; switch strategies available:
 16231                           ; Name         Instructions Cycles
 16232                           ; simple_byte            7     4 (average)
 16233                           ; direct_byte           10     6 (fixed)
 16234                           ; jumptable            260     6 (fixed)
 16235                           ;	Chosen strategy is simple_byte
 16236  21F6  0839               	movf	??_checkSensor^(0+128),w
 16237  21F7  3A00               	xorlw	0	; case 0
 16238  21F8  1903               	skipnz
 16239  21F9  2922               	goto	l8974
 16240  21FA  3A01               	xorlw	1	; case 1
 16241  21FB  1903               	skipnz
 16242  21FC  295C               	goto	l8982
 16243  21FD  29E9               	goto	l9024
 16244  21FE                     l9030:	
 16245                           
 16246                           ;system.c: 264:  return 0;
 16247  21FE  3000               	movlw	0
 16248  21FF  0008               	return
 16249  2200                     __end_of_checkSensor:	
 16250                           
 16251                           	psect	text34
 16252  310C                     __ptext34:	
 16253 ;; *************** function _uartSendByte *****************
 16254 ;; Defined at:
 16255 ;;		line 11 in file "uart.c"
 16256 ;; Parameters:    Size  Location     Type
 16257 ;;  s               1    wreg     unsigned char 
 16258 ;; Auto vars:     Size  Location     Type
 16259 ;;  s               1    0[BANK0 ] unsigned char 
 16260 ;; Return value:  Size  Location     Type
 16261 ;;                  1    wreg      void 
 16262 ;; Registers used:
 16263 ;;		wreg
 16264 ;; Tracked objects:
 16265 ;;		On entry : 0/0
 16266 ;;		On exit  : 0/0
 16267 ;;		Unchanged: 0/0
 16268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16269 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16270 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16272 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16273 ;;Total ram usage:        1 bytes
 16274 ;; Hardware stack levels used:    1
 16275 ;; Hardware stack levels required when called:    3
 16276 ;; This function calls:
 16277 ;;		Nothing
 16278 ;; This function is called by:
 16279 ;;		_checkSensor
 16280 ;; This function uses a non-reentrant model
 16281 ;;
 16282                           
 16283                           
 16284                           ;psect for function _uartSendByte
 16285  310C                     _uartSendByte:	
 16286                           
 16287                           ;incstack = 0
 16288                           ; Regs used in _uartSendByte: [wreg]
 16289                           ;uartSendByte@s stored from wreg
 16290  310C  0140               	movlb	0	; select bank0
 16291  310D  00A0               	movwf	uartSendByte@s
 16292                           
 16293                           ;uart.c: 11: void uartSendByte(char s);uart.c: 12: {;uart.c: 13:  TX1REG = s;
 16294  310E  0820               	movf	uartSendByte@s,w
 16295  310F  0142               	movlb	2	; select bank2
 16296  3110  009A               	movwf	26	;volatile
 16297                           
 16298                           ;uart.c: 14:  __nop();
 16299  3111  0000               	nop
 16300  3112                     l370:	
 16301                           ;uart.c: 15:  while (!PIR3bits.TX1IF);
 16302                           
 16303  3112  014E               	movlb	14	; select bank14
 16304  3113  1A0F               	btfsc	15,4	;volatile
 16305  3114  0008               	return
 16306  3115  2912               	goto	l370
 16307  3116                     __end_of_uartSendByte:	
 16308                           
 16309                           	psect	text35
 16310  30F2                     __ptext35:	
 16311 ;; *************** function _uartReset *****************
 16312 ;; Defined at:
 16313 ;;		line 60 in file "uart.c"
 16314 ;; Parameters:    Size  Location     Type
 16315 ;;		None
 16316 ;; Auto vars:     Size  Location     Type
 16317 ;;  dump            1    0        unsigned char 
 16318 ;; Return value:  Size  Location     Type
 16319 ;;                  1    wreg      void 
 16320 ;; Registers used:
 16321 ;;		wreg, status,2
 16322 ;; Tracked objects:
 16323 ;;		On entry : 0/0
 16324 ;;		On exit  : 0/0
 16325 ;;		Unchanged: 0/0
 16326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16328 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16330 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16331 ;;Total ram usage:        1 bytes
 16332 ;; Hardware stack levels used:    1
 16333 ;; Hardware stack levels required when called:    3
 16334 ;; This function calls:
 16335 ;;		Nothing
 16336 ;; This function is called by:
 16337 ;;		_checkSensor
 16338 ;; This function uses a non-reentrant model
 16339 ;;
 16340                           
 16341                           
 16342                           ;psect for function _uartReset
 16343  30F2                     _uartReset:	
 16344                           
 16345                           ;incstack = 0
 16346                           ; Regs used in _uartReset: [wreg+status,2]
 16347  30F2  0142               	movlb	2	; select bank2
 16348  30F3  0819               	movf	25,w	;volatile
 16349                           
 16350                           ;uart.c: 64:  RC1STAbits.CREN = 0;
 16351  30F4  121D               	bcf	29,4	;volatile
 16352                           
 16353                           ;uart.c: 65:  RC1STAbits.CREN = 1;
 16354  30F5  161D               	bsf	29,4	;volatile
 16355                           
 16356                           ;uart.c: 66:  RC1STAbits.SPEN = 0;
 16357  30F6  139D               	bcf	29,7	;volatile
 16358                           
 16359                           ;uart.c: 67:  RC1STAbits.SPEN = 1;
 16360  30F7  179D               	bsf	29,7	;volatile
 16361                           
 16362                           ;uart.c: 68:  rxCount = 0;
 16363  30F8  01EB               	clrf	_rxCount^(0+256)	;volatile
 16364  30F9  0008               	return
 16365  30FA                     __end_of_uartReset:	
 16366                           
 16367                           	psect	text36
 16368  2802                     __ptext36:	
 16369 ;; *************** function _timeSince *****************
 16370 ;; Defined at:
 16371 ;;		line 10 in file "interrupt.c"
 16372 ;; Parameters:    Size  Location     Type
 16373 ;;  since           4    0[BANK0 ] unsigned long 
 16374 ;; Auto vars:     Size  Location     Type
 16375 ;;  now             4   12[BANK0 ] unsigned long 
 16376 ;; Return value:  Size  Location     Type
 16377 ;;                  4    0[BANK0 ] unsigned long 
 16378 ;; Registers used:
 16379 ;;		wreg
 16380 ;; Tracked objects:
 16381 ;;		On entry : 0/0
 16382 ;;		On exit  : 0/0
 16383 ;;		Unchanged: 0/0
 16384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16385 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16386 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16387 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16388 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16389 ;;Total ram usage:       16 bytes
 16390 ;; Hardware stack levels used:    1
 16391 ;; Hardware stack levels required when called:    3
 16392 ;; This function calls:
 16393 ;;		Nothing
 16394 ;; This function is called by:
 16395 ;;		_main
 16396 ;;		_menu
 16397 ;;		_checkSensor
 16398 ;;		_controller
 16399 ;; This function uses a non-reentrant model
 16400 ;;
 16401                           
 16402                           
 16403                           ;psect for function _timeSince
 16404  2802                     _timeSince:	
 16405                           
 16406                           ;interrupt.c: 10: uint32_t timeSince(uint32_t since);interrupt.c: 11: {;interrupt.c: 12:
      +                            uint32_t now = tick100ms;
 16407                           
 16408                           ;incstack = 0
 16409                           ; Regs used in _timeSince: [wreg]
 16410  2802  0144               	movlb	4	; select bank4
 16411  2803  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 16412  2804  0140               	movlb	0	; select bank0
 16413  2805  00AF               	movwf	timeSince@now+3
 16414  2806  0144               	movlb	4	; select bank4
 16415  2807  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 16416  2808  0140               	movlb	0	; select bank0
 16417  2809  00AE               	movwf	timeSince@now+2
 16418  280A  0144               	movlb	4	; select bank4
 16419  280B  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 16420  280C  0140               	movlb	0	; select bank0
 16421  280D  00AD               	movwf	timeSince@now+1
 16422  280E  0144               	movlb	4	; select bank4
 16423  280F  0832               	movf	_tick100ms^(0+512),w	;volatile
 16424  2810  0140               	movlb	0	; select bank0
 16425  2811  00AC               	movwf	timeSince@now
 16426                           
 16427                           ;interrupt.c: 13:  if (now >= since)
 16428  2812  0823               	movf	timeSince@since+3,w
 16429  2813  022F               	subwf	timeSince@now+3,w
 16430  2814  1D03               	skipz
 16431  2815  2820               	goto	u9455
 16432  2816  0822               	movf	timeSince@since+2,w
 16433  2817  022E               	subwf	timeSince@now+2,w
 16434  2818  1D03               	skipz
 16435  2819  2820               	goto	u9455
 16436  281A  0821               	movf	timeSince@since+1,w
 16437  281B  022D               	subwf	timeSince@now+1,w
 16438  281C  1D03               	skipz
 16439  281D  2820               	goto	u9455
 16440  281E  0820               	movf	timeSince@since,w
 16441  281F  022C               	subwf	timeSince@now,w
 16442  2820                     u9455:	
 16443  2820  1C03               	skipc
 16444  2821  2837               	goto	l8116
 16445                           
 16446                           ;interrupt.c: 14:   return (now - since);
 16447  2822  0820               	movf	timeSince@since,w
 16448  2823  022C               	subwf	timeSince@now,w
 16449  2824  00A4               	movwf	??_timeSince
 16450  2825  0821               	movf	timeSince@since+1,w
 16451  2826  3B2D               	subwfb	timeSince@now+1,w
 16452  2827  00A5               	movwf	??_timeSince+1
 16453  2828  0822               	movf	timeSince@since+2,w
 16454  2829  3B2E               	subwfb	timeSince@now+2,w
 16455  282A  00A6               	movwf	??_timeSince+2
 16456  282B  0823               	movf	timeSince@since+3,w
 16457  282C  3B2F               	subwfb	timeSince@now+3,w
 16458  282D  00A7               	movwf	??_timeSince+3
 16459  282E  0827               	movf	??_timeSince+3,w
 16460  282F  00A3               	movwf	?_timeSince+3
 16461  2830  0826               	movf	??_timeSince+2,w
 16462  2831  00A2               	movwf	?_timeSince+2
 16463  2832  0825               	movf	??_timeSince+1,w
 16464  2833  00A1               	movwf	?_timeSince+1
 16465  2834  0824               	movf	??_timeSince,w
 16466  2835  00A0               	movwf	?_timeSince
 16467  2836  0008               	return
 16468  2837                     l8116:	
 16469                           
 16470                           ;interrupt.c: 16:  return (now + (1 + 1000000000UL - since));
 16471  2837  3001               	movlw	1
 16472  2838  00A4               	movwf	??_timeSince
 16473  2839  30CA               	movlw	202
 16474  283A  00A5               	movwf	??_timeSince+1
 16475  283B  309A               	movlw	154
 16476  283C  00A6               	movwf	??_timeSince+2
 16477  283D  303B               	movlw	59
 16478  283E  00A7               	movwf	??_timeSince+3
 16479  283F  0820               	movf	timeSince@since,w
 16480  2840  022C               	subwf	timeSince@now,w
 16481  2841  00A8               	movwf	??_timeSince+4
 16482  2842  0821               	movf	timeSince@since+1,w
 16483  2843  3B2D               	subwfb	timeSince@now+1,w
 16484  2844  00A9               	movwf	??_timeSince+5
 16485  2845  0822               	movf	timeSince@since+2,w
 16486  2846  3B2E               	subwfb	timeSince@now+2,w
 16487  2847  00AA               	movwf	??_timeSince+6
 16488  2848  0823               	movf	timeSince@since+3,w
 16489  2849  3B2F               	subwfb	timeSince@now+3,w
 16490  284A  00AB               	movwf	??_timeSince+7
 16491  284B  0828               	movf	??_timeSince+4,w
 16492  284C  07A4               	addwf	??_timeSince,f
 16493  284D  0829               	movf	??_timeSince+5,w
 16494  284E  3DA5               	addwfc	??_timeSince+1,f
 16495  284F  082A               	movf	??_timeSince+6,w
 16496  2850  3DA6               	addwfc	??_timeSince+2,f
 16497  2851  082B               	movf	??_timeSince+7,w
 16498  2852  3DA7               	addwfc	??_timeSince+3,f
 16499  2853  0827               	movf	??_timeSince+3,w
 16500  2854  00A3               	movwf	?_timeSince+3
 16501  2855  0826               	movf	??_timeSince+2,w
 16502  2856  00A2               	movwf	?_timeSince+2
 16503  2857  0825               	movf	??_timeSince+1,w
 16504  2858  00A1               	movwf	?_timeSince+1
 16505  2859  0824               	movf	??_timeSince,w
 16506  285A  00A0               	movwf	?_timeSince
 16507  285B  0008               	return
 16508  285C                     __end_of_timeSince:	
 16509                           
 16510                           	psect	text37
 16511  1414                     __ptext37:	
 16512 ;; *************** function _checkChannelStatus *****************
 16513 ;; Defined at:
 16514 ;;		line 55 in file "system.c"
 16515 ;; Parameters:    Size  Location     Type
 16516 ;;		None
 16517 ;; Auto vars:     Size  Location     Type
 16518 ;;  current         4   42[BANK1 ] float 
 16519 ;;  heater          2   47[BANK1 ] PTR struct .
 16520 ;;		 -> data.heater(124), data(166), 
 16521 ;;  avg             2   40[BANK1 ] unsigned short 
 16522 ;;  adc             2   29[BANK1 ] unsigned short 
 16523 ;;  channel         1   46[BANK1 ] unsigned char 
 16524 ;;  samples         1   39[BANK1 ] unsigned char 
 16525 ;; Return value:  Size  Location     Type
 16526 ;;                  1    wreg      void 
 16527 ;; Registers used:
 16528 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16529 ;; Tracked objects:
 16530 ;;		On entry : 0/0
 16531 ;;		On exit  : 0/0
 16532 ;;		Unchanged: 0/0
 16533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16535 ;;      Locals:         0       0      20       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16536 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16537 ;;      Totals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16538 ;;Total ram usage:       24 bytes
 16539 ;; Hardware stack levels used:    1
 16540 ;; Hardware stack levels required when called:    5
 16541 ;; This function calls:
 16542 ;;		___fldiv
 16543 ;;		___fleq
 16544 ;;		___flge
 16545 ;;		___flmul
 16546 ;;		___fltol
 16547 ;;		___wmul
 16548 ;;		___xxtofl
 16549 ;;		_ema
 16550 ;;		_error
 16551 ;;		_getAnalogValue
 16552 ;;		_setChannelSwitch
 16553 ;; This function is called by:
 16554 ;;		_main
 16555 ;; This function uses a non-reentrant model
 16556 ;;
 16557                           
 16558                           
 16559                           ;psect for function _checkChannelStatus
 16560  1414                     _checkChannelStatus:	
 16561                           
 16562                           ;system.c: 57:  uint16_t adc, avg;;system.c: 58:  uint8_t channel, samples;;system.c: 59
      +                          :  float current;;system.c: 60:  t_heater *heater;;system.c: 62:  for (channel = 0; chan
      +                          nel < 4; channel++) {
 16563                           
 16564                           ;incstack = 0
 16565                           ; Regs used in _checkChannelStatus: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16566  1414  0141               	movlb	1	; select bank1
 16567  1415  01CE               	clrf	checkChannelStatus@channel^(0+128)
 16568  1416                     l9076:	
 16569                           
 16570                           ;system.c: 64:   heater = &data.heater[channel];
 16571  1416  084E               	movf	checkChannelStatus@channel^(0+128),w
 16572  1417  00B9               	movwf	??_checkChannelStatus^(0+128)
 16573  1418  01BA               	clrf	(??_checkChannelStatus^(0+128)+1)
 16574  1419  0839               	movf	??_checkChannelStatus^(0+128),w
 16575  141A  0140               	movlb	0	; select bank0
 16576  141B  00AD               	movwf	___wmul@multiplier
 16577  141C  0141               	movlb	1	; select bank1
 16578  141D  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16579  141E  0140               	movlb	0	; select bank0
 16580  141F  00AE               	movwf	___wmul@multiplier+1
 16581  1420  301F               	movlw	31
 16582  1421  00AF               	movwf	___wmul@multiplicand
 16583  1422  3000               	movlw	0
 16584  1423  00B0               	movwf	___wmul@multiplicand+1
 16585  1424  31B1  2161  3194   	fcall	___wmul
 16586  1427  3074               	movlw	116
 16587  1428  0141               	movlb	1	; select bank1
 16588  1429  00BB               	movwf	(??_checkChannelStatus+2)^(0+128)
 16589  142A  3027               	movlw	39
 16590  142B  00BC               	movwf	((??_checkChannelStatus+2)^(0+128)+1)
 16591  142C  0140               	movlb	0	; select bank0
 16592  142D  082D               	movf	?___wmul,w
 16593  142E  0141               	movlb	1	; select bank1
 16594  142F  073B               	addwf	(??_checkChannelStatus+2)^(0+128),w
 16595  1430  00CF               	movwf	checkChannelStatus@heater^(0+128)
 16596  1431  0140               	movlb	0	; select bank0
 16597  1432  082E               	movf	?___wmul+1,w
 16598  1433  0141               	movlb	1	; select bank1
 16599  1434  3D3C               	addwfc	(??_checkChannelStatus+3)^(0+128),w
 16600  1435  00D0               	movwf	(checkChannelStatus@heater+1)^(0+128)
 16601                           
 16602                           ;system.c: 66:   if (heater->status == CH_OVERCURRENT)
 16603  1436  084F               	movf	checkChannelStatus@heater^(0+128),w
 16604  1437  0086               	movwf	6
 16605  1438  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16606  1439  0087               	movwf	7
 16607  143A  315E               	addfsr 1,30
 16608  143B  3004               	movlw	4
 16609  143C  0601               	xorwf	1,w
 16610  143D  1903               	btfsc	3,2
 16611  143E  2FF6               	goto	l9162
 16612                           
 16613                           ;system.c: 69:   avg = data.heater[channel].current;
 16614  143F  301F               	movlw	31
 16615  1440  0140               	movlb	0	; select bank0
 16616  1441  00AF               	movwf	___wmul@multiplicand
 16617  1442  3000               	movlw	0
 16618  1443  00B0               	movwf	___wmul@multiplicand+1
 16619  1444  0141               	movlb	1	; select bank1
 16620  1445  084E               	movf	checkChannelStatus@channel^(0+128),w
 16621  1446  00B9               	movwf	??_checkChannelStatus^(0+128)
 16622  1447  01BA               	clrf	(??_checkChannelStatus^(0+128)+1)
 16623  1448  0839               	movf	??_checkChannelStatus^(0+128),w
 16624  1449  0140               	movlb	0	; select bank0
 16625  144A  00AD               	movwf	___wmul@multiplier
 16626  144B  0141               	movlb	1	; select bank1
 16627  144C  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16628  144D  0140               	movlb	0	; select bank0
 16629  144E  00AE               	movwf	___wmul@multiplier+1
 16630  144F  31B1  2161  3194   	fcall	___wmul
 16631  1452  3074               	movlw	116
 16632  1453  0141               	movlb	1	; select bank1
 16633  1454  00BB               	movwf	(??_checkChannelStatus+2)^(0+128)
 16634  1455  3027               	movlw	39
 16635  1456  00BC               	movwf	((??_checkChannelStatus+2)^(0+128)+1)
 16636  1457  0140               	movlb	0	; select bank0
 16637  1458  082D               	movf	?___wmul,w
 16638  1459  0141               	movlb	1	; select bank1
 16639  145A  073B               	addwf	(??_checkChannelStatus+2)^(0+128),w
 16640  145B  0086               	movwf	6
 16641  145C  0140               	movlb	0	; select bank0
 16642  145D  082E               	movf	?___wmul+1,w
 16643  145E  0141               	movlb	1	; select bank1
 16644  145F  3D3C               	addwfc	(??_checkChannelStatus+3)^(0+128),w
 16645  1460  0087               	movwf	7
 16646  1461  3F40               	moviw [0]fsr1
 16647  1462  00A8               	movwf	___fltol@f1^(0+128)
 16648  1463  3F41               	moviw [1]fsr1
 16649  1464  00A9               	movwf	(___fltol@f1+1)^(0+128)
 16650  1465  3F42               	moviw [2]fsr1
 16651  1466  00AA               	movwf	(___fltol@f1+2)^(0+128)
 16652  1467  3F43               	moviw [3]fsr1
 16653  1468  00AB               	movwf	(___fltol@f1+3)^(0+128)
 16654  1469  31B7  279A  3194   	fcall	___fltol
 16655  146C  0141               	movlb	1	; select bank1
 16656  146D  0829               	movf	(?___fltol+1)^(0+128),w
 16657  146E  00C9               	movwf	(checkChannelStatus@avg+1)^(0+128)
 16658  146F  0828               	movf	?___fltol^(0+128),w
 16659  1470  00C8               	movwf	checkChannelStatus@avg^(0+128)
 16660                           
 16661                           ;system.c: 71:   setChannelSwitch(channel, 1);
 16662  1471  0140               	movlb	0	; select bank0
 16663  1472  01AD               	clrf	setChannelSwitch@state
 16664  1473  0AAD               	incf	setChannelSwitch@state,f
 16665  1474  0141               	movlb	1	; select bank1
 16666  1475  084E               	movf	checkChannelStatus@channel^(0+128),w
 16667  1476  31B5  256B  3194   	fcall	_setChannelSwitch
 16668                           
 16669                           ;system.c: 72:   samples = 0;
 16670  1479  0141               	movlb	1	; select bank1
 16671  147A  01C7               	clrf	checkChannelStatus@samples^(0+128)
 16672  147B                     l9088:	
 16673                           
 16674                           ;system.c: 74:    adc = getAnalogValue(0b010001);
 16675  147B  3011               	movlw	17
 16676  147C  31B1  217D  3194   	fcall	_getAnalogValue
 16677  147F  0140               	movlb	0	; select bank0
 16678  1480  0821               	movf	?_getAnalogValue+1,w
 16679  1481  0141               	movlb	1	; select bank1
 16680  1482  00BE               	movwf	(checkChannelStatus@adc+1)^(0+128)
 16681  1483  0140               	movlb	0	; select bank0
 16682  1484  0820               	movf	?_getAnalogValue,w
 16683  1485  0141               	movlb	1	; select bank1
 16684  1486  00BD               	movwf	checkChannelStatus@adc^(0+128)
 16685                           
 16686                           ;system.c: 76:    avg = ema(adc, avg, ( (uint32_t)(0.7 * 65535) ));
 16687  1487  083E               	movf	(checkChannelStatus@adc+1)^(0+128),w
 16688  1488  0140               	movlb	0	; select bank0
 16689  1489  00AD               	movwf	ema@in+1
 16690  148A  0141               	movlb	1	; select bank1
 16691  148B  083D               	movf	checkChannelStatus@adc^(0+128),w
 16692  148C  0140               	movlb	0	; select bank0
 16693  148D  00AC               	movwf	ema@in
 16694  148E  0141               	movlb	1	; select bank1
 16695  148F  0849               	movf	(checkChannelStatus@avg+1)^(0+128),w
 16696  1490  0140               	movlb	0	; select bank0
 16697  1491  00AF               	movwf	ema@average+1
 16698  1492  0141               	movlb	1	; select bank1
 16699  1493  0848               	movf	checkChannelStatus@avg^(0+128),w
 16700  1494  0140               	movlb	0	; select bank0
 16701  1495  00AE               	movwf	ema@average
 16702  1496  3000               	movlw	0
 16703  1497  00B3               	movwf	ema@alpha+3
 16704  1498  3000               	movlw	0
 16705  1499  00B2               	movwf	ema@alpha+2
 16706  149A  30B3               	movlw	179
 16707  149B  00B1               	movwf	ema@alpha+1
 16708  149C  3032               	movlw	50
 16709  149D  00B0               	movwf	ema@alpha
 16710  149E  31A8  205C  3194   	fcall	_ema
 16711  14A1  0140               	movlb	0	; select bank0
 16712  14A2  082D               	movf	?_ema+1,w
 16713  14A3  0141               	movlb	1	; select bank1
 16714  14A4  00C9               	movwf	(checkChannelStatus@avg+1)^(0+128)
 16715  14A5  0140               	movlb	0	; select bank0
 16716  14A6  082C               	movf	?_ema,w
 16717  14A7  0141               	movlb	1	; select bank1
 16718  14A8  00C8               	movwf	checkChannelStatus@avg^(0+128)
 16719                           
 16720                           ;system.c: 77:   } while (samples++ < 50);
 16721  14A9  0847               	movf	checkChannelStatus@samples^(0+128),w
 16722  14AA  0AC7               	incf	checkChannelStatus@samples^(0+128),f
 16723  14AB  00B9               	movwf	??_checkChannelStatus^(0+128)
 16724  14AC  3032               	movlw	50
 16725  14AD  0239               	subwf	??_checkChannelStatus^(0+128),w
 16726  14AE  1C03               	skipc
 16727  14AF  2C7B               	goto	l9088
 16728                           
 16729                           ;system.c: 78:   setChannelSwitch(channel, 0);
 16730  14B0  0140               	movlb	0	; select bank0
 16731  14B1  01AD               	clrf	setChannelSwitch@state
 16732  14B2  0141               	movlb	1	; select bank1
 16733  14B3  084E               	movf	checkChannelStatus@channel^(0+128),w
 16734  14B4  31B5  256B  3194   	fcall	_setChannelSwitch
 16735                           
 16736                           ;system.c: 81:   current = ( (avg * 5.0) / (1023.0 * 0.05 * 50.0) );
 16737  14B7  3045               	movlw	69
 16738  14B8  0140               	movlb	0	; select bank0
 16739  14B9  00DE               	movwf	___fldiv@a+3
 16740  14BA  301F               	movlw	31
 16741  14BB  00DD               	movwf	___fldiv@a+2
 16742  14BC  30D8               	movlw	216
 16743  14BD  00DC               	movwf	___fldiv@a+1
 16744  14BE  3000               	movlw	0
 16745  14BF  00DB               	movwf	___fldiv@a
 16746  14C0  3040               	movlw	64
 16747  14C1  00C4               	movwf	___flmul@b+3
 16748  14C2  30A0               	movlw	160
 16749  14C3  00C3               	movwf	___flmul@b+2
 16750  14C4  3000               	movlw	0
 16751  14C5  00C2               	movwf	___flmul@b+1
 16752  14C6  3000               	movlw	0
 16753  14C7  00C1               	movwf	___flmul@b
 16754  14C8  0141               	movlb	1	; select bank1
 16755  14C9  0848               	movf	checkChannelStatus@avg^(0+128),w
 16756  14CA  0140               	movlb	0	; select bank0
 16757  14CB  00B3               	movwf	___xxtofl@val
 16758  14CC  0141               	movlb	1	; select bank1
 16759  14CD  0849               	movf	(checkChannelStatus@avg+1)^(0+128),w
 16760  14CE  0140               	movlb	0	; select bank0
 16761  14CF  00B4               	movwf	___xxtofl@val+1
 16762  14D0  01B5               	clrf	___xxtofl@val+2
 16763  14D1  01B6               	clrf	___xxtofl@val+3
 16764  14D2  3000               	movlw	0
 16765  14D3  31AC  2430  3194   	fcall	___xxtofl
 16766  14D6  0140               	movlb	0	; select bank0
 16767  14D7  0836               	movf	?___xxtofl+3,w
 16768  14D8  00C8               	movwf	___flmul@a+3
 16769  14D9  0835               	movf	?___xxtofl+2,w
 16770  14DA  00C7               	movwf	___flmul@a+2
 16771  14DB  0834               	movf	?___xxtofl+1,w
 16772  14DC  00C6               	movwf	___flmul@a+1
 16773  14DD  0833               	movf	?___xxtofl,w
 16774  14DE  00C5               	movwf	___flmul@a
 16775  14DF  3185  2561  3194   	fcall	___flmul
 16776  14E2  0140               	movlb	0	; select bank0
 16777  14E3  0844               	movf	?___flmul+3,w
 16778  14E4  00E2               	movwf	___fldiv@b+3
 16779  14E5  0843               	movf	?___flmul+2,w
 16780  14E6  00E1               	movwf	___fldiv@b+2
 16781  14E7  0842               	movf	?___flmul+1,w
 16782  14E8  00E0               	movwf	___fldiv@b+1
 16783  14E9  0841               	movf	?___flmul,w
 16784  14EA  00DF               	movwf	___fldiv@b
 16785  14EB  319E  2628  3194   	fcall	___fldiv
 16786  14EE  0140               	movlb	0	; select bank0
 16787  14EF  085E               	movf	?___fldiv+3,w
 16788  14F0  0141               	movlb	1	; select bank1
 16789  14F1  00CD               	movwf	(checkChannelStatus@current+3)^(0+128)
 16790  14F2  0140               	movlb	0	; select bank0
 16791  14F3  085D               	movf	?___fldiv+2,w
 16792  14F4  0141               	movlb	1	; select bank1
 16793  14F5  00CC               	movwf	(checkChannelStatus@current+2)^(0+128)
 16794  14F6  0140               	movlb	0	; select bank0
 16795  14F7  085C               	movf	?___fldiv+1,w
 16796  14F8  0141               	movlb	1	; select bank1
 16797  14F9  00CB               	movwf	(checkChannelStatus@current+1)^(0+128)
 16798  14FA  0140               	movlb	0	; select bank0
 16799  14FB  085B               	movf	?___fldiv,w
 16800  14FC  0141               	movlb	1	; select bank1
 16801  14FD  00CA               	movwf	checkChannelStatus@current^(0+128)
 16802                           
 16803                           ;system.c: 84:   if (current < 0.05) {
 16804  14FE  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 16805  14FF  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16806  1500  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 16807  1501  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16808  1502  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 16809  1503  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16810  1504  084A               	movf	checkChannelStatus@current^(0+128),w
 16811  1505  00AD               	movwf	___flge@ff1^(0+128)
 16812  1506  303D               	movlw	61
 16813  1507  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16814  1508  304C               	movlw	76
 16815  1509  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16816  150A  30CC               	movlw	204
 16817  150B  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16818  150C  30CD               	movlw	205
 16819  150D  00B1               	movwf	___flge@ff2^(0+128)
 16820  150E  31AA  2227  3194   	fcall	___flge
 16821  1511  1803               	btfsc	3,0
 16822  1512  2D2D               	goto	l9106
 16823                           
 16824                           ;system.c: 86:    if (heater->status == CH_ENABLED)
 16825  1513  0141               	movlb	1	; select bank1
 16826  1514  084F               	movf	checkChannelStatus@heater^(0+128),w
 16827  1515  0086               	movwf	6
 16828  1516  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16829  1517  0087               	movwf	7
 16830  1518  315E               	addfsr 1,30
 16831  1519  0301               	decf	1,w
 16832  151A  1D03               	btfss	3,2
 16833  151B  2D20               	goto	l9104
 16834                           
 16835                           ;system.c: 87:     error(WARN_REMOVED);
 16836  151C  3001               	movlw	1
 16837  151D  31B4  245E  3194   	fcall	_error
 16838  1520                     l9104:	
 16839                           
 16840                           ;system.c: 88:    heater->status = CH_OPEN;
 16841  1520  0141               	movlb	1	; select bank1
 16842  1521  084F               	movf	checkChannelStatus@heater^(0+128),w
 16843  1522  3E1E               	addlw	30
 16844  1523  00B9               	movwf	??_checkChannelStatus^(0+128)
 16845  1524  3000               	movlw	0
 16846  1525  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16847  1526  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 16848  1527  0839               	movf	??_checkChannelStatus^(0+128),w
 16849  1528  0086               	movwf	6
 16850  1529  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16851  152A  0087               	movwf	7
 16852  152B  3002               	movlw	2
 16853  152C  2FF5               	goto	L8
 16854  152D                     l9106:	
 16855                           ;system.c: 89:   } else if ((current > 2.0) || !PORTCbits.RC2) {
 16856                           
 16857  152D  3040               	movlw	64
 16858  152E  0141               	movlb	1	; select bank1
 16859  152F  00B0               	movwf	(___flge@ff1+3)^(0+128)
 16860  1530  3000               	movlw	0
 16861  1531  00AF               	movwf	(___flge@ff1+2)^(0+128)
 16862  1532  3000               	movlw	0
 16863  1533  00AE               	movwf	(___flge@ff1+1)^(0+128)
 16864  1534  3000               	movlw	0
 16865  1535  00AD               	movwf	___flge@ff1^(0+128)
 16866  1536  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 16867  1537  00B4               	movwf	(___flge@ff2+3)^(0+128)
 16868  1538  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 16869  1539  00B3               	movwf	(___flge@ff2+2)^(0+128)
 16870  153A  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 16871  153B  00B2               	movwf	(___flge@ff2+1)^(0+128)
 16872  153C  084A               	movf	checkChannelStatus@current^(0+128),w
 16873  153D  00B1               	movwf	___flge@ff2^(0+128)
 16874  153E  31AA  2227  3194   	fcall	___flge
 16875  1541  1C03               	btfss	3,0
 16876  1542  2D46               	goto	l9110
 16877  1543  0140               	movlb	0	; select bank0
 16878  1544  190E               	btfsc	14,2	;volatile
 16879  1545  2D74               	goto	l9124
 16880  1546                     l9110:	
 16881                           
 16882                           ;system.c: 92:    error(WARN_HEATER_OVERCURRENT);
 16883  1546  3004               	movlw	4
 16884  1547  31B4  245E  3194   	fcall	_error
 16885                           
 16886                           ;system.c: 93:    heater->status = CH_OVERCURRENT;
 16887  154A  0141               	movlb	1	; select bank1
 16888  154B  084F               	movf	checkChannelStatus@heater^(0+128),w
 16889  154C  3E1E               	addlw	30
 16890  154D  00B9               	movwf	??_checkChannelStatus^(0+128)
 16891  154E  3000               	movlw	0
 16892  154F  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16893  1550  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 16894  1551  0839               	movf	??_checkChannelStatus^(0+128),w
 16895  1552  0086               	movwf	6
 16896  1553  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16897  1554  0087               	movwf	7
 16898  1555  3004               	movlw	4
 16899  1556  0081               	movwf	1
 16900                           
 16901                           ;system.c: 95:    if (!PORTCbits.RC2) {
 16902  1557  0140               	movlb	0	; select bank0
 16903  1558  190E               	btfsc	14,2	;volatile
 16904  1559  2FF6               	goto	l9162
 16905                           
 16906                           ;system.c: 96:     heater->status = CH_SHORTED;
 16907  155A  0141               	movlb	1	; select bank1
 16908  155B  084F               	movf	checkChannelStatus@heater^(0+128),w
 16909  155C  3E1E               	addlw	30
 16910  155D  00B9               	movwf	??_checkChannelStatus^(0+128)
 16911  155E  3000               	movlw	0
 16912  155F  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 16913  1560  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 16914  1561  0839               	movf	??_checkChannelStatus^(0+128),w
 16915  1562  0086               	movwf	6
 16916  1563  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 16917  1564  0087               	movwf	7
 16918  1565  3003               	movlw	3
 16919  1566  0081               	movwf	1
 16920                           
 16921                           ;system.c: 97:     LATCbits.LATC3 = 0;
 16922  1567  0140               	movlb	0	; select bank0
 16923  1568  119A               	bcf	26,3	;volatile
 16924                           
 16925                           ;system.c: 98:     _delay((unsigned long)((5)*(4000000UL/4000.0)));
 16926  1569  3007               	movlw	7
 16927  156A  0141               	movlb	1	; select bank1
 16928  156B  00B9               	movwf	??_checkChannelStatus^(0+128)
 16929  156C  307D               	movlw	125
 16930  156D                     u10907:	
 16931  156D  0B89               	decfsz	9,f
 16932  156E  2D6D               	goto	u10907
 16933  156F  0BB9               	decfsz	??_checkChannelStatus^(0+128),f
 16934  1570  2D6D               	goto	u10907
 16935                           
 16936                           ;system.c: 99:     LATCbits.LATC3 = 1;
 16937  1571  0140               	movlb	0	; select bank0
 16938  1572  159A               	bsf	26,3	;volatile
 16939  1573  2FF6               	goto	l9162
 16940  1574                     l9124:	
 16941                           
 16942                           ;system.c: 102:    heater->current = current;
 16943  1574  0141               	movlb	1	; select bank1
 16944  1575  084F               	movf	checkChannelStatus@heater^(0+128),w
 16945  1576  0086               	movwf	6
 16946  1577  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16947  1578  0087               	movwf	7
 16948  1579  084A               	movf	checkChannelStatus@current^(0+128),w
 16949  157A  3FC0               	movwi [0]fsr1
 16950  157B  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 16951  157C  3FC1               	movwi [1]fsr1
 16952  157D  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 16953  157E  3FC2               	movwi [2]fsr1
 16954  157F  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 16955  1580  3FC3               	movwi [3]fsr1
 16956                           
 16957                           ;system.c: 103:    heater->Pmax = data.voltage * current;
 16958  1581  084D               	movf	(checkChannelStatus@current+3)^(0+128),w
 16959  1582  0140               	movlb	0	; select bank0
 16960  1583  00C4               	movwf	___flmul@b+3
 16961  1584  0141               	movlb	1	; select bank1
 16962  1585  084C               	movf	(checkChannelStatus@current+2)^(0+128),w
 16963  1586  0140               	movlb	0	; select bank0
 16964  1587  00C3               	movwf	___flmul@b+2
 16965  1588  0141               	movlb	1	; select bank1
 16966  1589  084B               	movf	(checkChannelStatus@current+1)^(0+128),w
 16967  158A  0140               	movlb	0	; select bank0
 16968  158B  00C2               	movwf	___flmul@b+1
 16969  158C  0141               	movlb	1	; select bank1
 16970  158D  084A               	movf	checkChannelStatus@current^(0+128),w
 16971  158E  0140               	movlb	0	; select bank0
 16972  158F  00C1               	movwf	___flmul@b
 16973  1590  304A               	movlw	74
 16974  1591  0086               	movwf	6
 16975  1592  3027               	movlw	39
 16976  1593  0087               	movwf	7
 16977  1594  3151               	addfsr 1,17
 16978  1595  3F40               	moviw [0]fsr1
 16979  1596  00C5               	movwf	___flmul@a
 16980  1597  3F41               	moviw [1]fsr1
 16981  1598  00C6               	movwf	___flmul@a+1
 16982  1599  3F42               	moviw [2]fsr1
 16983  159A  00C7               	movwf	___flmul@a+2
 16984  159B  3F43               	moviw [3]fsr1
 16985  159C  00C8               	movwf	___flmul@a+3
 16986  159D  3185  2561  3194   	fcall	___flmul
 16987  15A0  0141               	movlb	1	; select bank1
 16988  15A1  084F               	movf	checkChannelStatus@heater^(0+128),w
 16989  15A2  0086               	movwf	6
 16990  15A3  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 16991  15A4  0087               	movwf	7
 16992  15A5  3144               	addfsr 1,4
 16993  15A6  0140               	movlb	0	; select bank0
 16994  15A7  0841               	movf	?___flmul,w
 16995  15A8  3FC0               	movwi [0]fsr1
 16996  15A9  0842               	movf	?___flmul+1,w
 16997  15AA  3FC1               	movwi [1]fsr1
 16998  15AB  0843               	movf	?___flmul+2,w
 16999  15AC  3FC2               	movwi [2]fsr1
 17000  15AD  0844               	movf	?___flmul+3,w
 17001  15AE  3FC3               	movwi [3]fsr1
 17002                           
 17003                           ;system.c: 106:    if (heater->Pset > heater->Pmax)
 17004  15AF  0141               	movlb	1	; select bank1
 17005  15B0  084F               	movf	checkChannelStatus@heater^(0+128),w
 17006  15B1  0086               	movwf	6
 17007  15B2  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17008  15B3  0087               	movwf	7
 17009  15B4  3144               	addfsr 1,4
 17010  15B5  3F40               	moviw [0]fsr1
 17011  15B6  00AD               	movwf	___flge@ff1^(0+128)
 17012  15B7  3F41               	moviw [1]fsr1
 17013  15B8  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17014  15B9  3F42               	moviw [2]fsr1
 17015  15BA  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17016  15BB  3F43               	moviw [3]fsr1
 17017  15BC  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17018  15BD  084F               	movf	checkChannelStatus@heater^(0+128),w
 17019  15BE  0086               	movwf	6
 17020  15BF  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17021  15C0  0087               	movwf	7
 17022  15C1  3150               	addfsr 1,16
 17023  15C2  3F40               	moviw [0]fsr1
 17024  15C3  00B1               	movwf	___flge@ff2^(0+128)
 17025  15C4  3F41               	moviw [1]fsr1
 17026  15C5  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17027  15C6  3F42               	moviw [2]fsr1
 17028  15C7  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17029  15C8  3F43               	moviw [3]fsr1
 17030  15C9  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17031  15CA  31AA  2227  3194   	fcall	___flge
 17032  15CD  1803               	btfsc	3,0
 17033  15CE  2DEA               	goto	l808
 17034                           
 17035                           ;system.c: 107:     heater->Pset = heater->Pmax;
 17036  15CF  0141               	movlb	1	; select bank1
 17037  15D0  084F               	movf	checkChannelStatus@heater^(0+128),w
 17038  15D1  0086               	movwf	6
 17039  15D2  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17040  15D3  0087               	movwf	7
 17041  15D4  3144               	addfsr 1,4
 17042  15D5  3F40               	moviw [0]fsr1
 17043  15D6  00B9               	movwf	??_checkChannelStatus^(0+128)
 17044  15D7  3F41               	moviw [1]fsr1
 17045  15D8  00BA               	movwf	(??_checkChannelStatus^(0+128)+1)
 17046  15D9  3F42               	moviw [2]fsr1
 17047  15DA  00BB               	movwf	(??_checkChannelStatus^(0+128)+2)
 17048  15DB  3F43               	moviw [3]fsr1
 17049  15DC  00BC               	movwf	(??_checkChannelStatus^(0+128)+3)
 17050  15DD  084F               	movf	checkChannelStatus@heater^(0+128),w
 17051  15DE  0086               	movwf	6
 17052  15DF  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17053  15E0  0087               	movwf	7
 17054  15E1  3150               	addfsr 1,16
 17055  15E2  0839               	movf	??_checkChannelStatus^(0+128),w
 17056  15E3  3FC0               	movwi [0]fsr1
 17057  15E4  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17058  15E5  3FC1               	movwi [1]fsr1
 17059  15E6  083B               	movf	(??_checkChannelStatus+2)^(0+128),w
 17060  15E7  3FC2               	movwi [2]fsr1
 17061  15E8  083C               	movf	(??_checkChannelStatus+3)^(0+128),w
 17062  15E9  3FC3               	movwi [3]fsr1
 17063  15EA                     l808:	
 17064                           
 17065                           ;system.c: 109:    if (data.status.SENSOR_OK) {
 17066  15EA  3073               	movlw	115
 17067  15EB  0086               	movwf	6
 17068  15EC  3027               	movlw	39
 17069  15ED  0087               	movwf	7
 17070  15EE  1D81               	btfss	1,3
 17071  15EF  2E36               	goto	l9140
 17072                           
 17073                           ;system.c: 110:     if (heater->Pset < 0)
 17074  15F0  0141               	movlb	1	; select bank1
 17075  15F1  084F               	movf	checkChannelStatus@heater^(0+128),w
 17076  15F2  0086               	movwf	6
 17077  15F3  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17078  15F4  0087               	movwf	7
 17079  15F5  3150               	addfsr 1,16
 17080  15F6  3F40               	moviw [0]fsr1
 17081  15F7  00AD               	movwf	___flge@ff1^(0+128)
 17082  15F8  3F41               	moviw [1]fsr1
 17083  15F9  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17084  15FA  3F42               	moviw [2]fsr1
 17085  15FB  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17086  15FC  3F43               	moviw [3]fsr1
 17087  15FD  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17088  15FE  3000               	movlw	0
 17089  15FF  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17090  1600  3000               	movlw	0
 17091  1601  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17092  1602  3000               	movlw	0
 17093  1603  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17094  1604  3000               	movlw	0
 17095  1605  00B1               	movwf	___flge@ff2^(0+128)
 17096  1606  31AA  2227  3194   	fcall	___flge
 17097  1609  1803               	btfsc	3,0
 17098  160A  2E19               	goto	l9136
 17099                           
 17100                           ;system.c: 111:      heater->mode = MODE_AUTO;
 17101  160B  0141               	movlb	1	; select bank1
 17102  160C  084F               	movf	checkChannelStatus@heater^(0+128),w
 17103  160D  3E1D               	addlw	29
 17104  160E  00B9               	movwf	??_checkChannelStatus^(0+128)
 17105  160F  3000               	movlw	0
 17106  1610  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 17107  1611  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17108  1612  0839               	movf	??_checkChannelStatus^(0+128),w
 17109  1613  0086               	movwf	6
 17110  1614  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17111  1615  0087               	movwf	7
 17112  1616  3001               	movlw	1
 17113  1617  0081               	movwf	1
 17114  1618  2E57               	goto	l9144
 17115  1619                     l9136:	
 17116  1619  3000               	movlw	0
 17117  161A  0141               	movlb	1	; select bank1
 17118  161B  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17119  161C  3000               	movlw	0
 17120  161D  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17121  161E  3000               	movlw	0
 17122  161F  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17123  1620  3000               	movlw	0
 17124  1621  00AD               	movwf	___flge@ff1^(0+128)
 17125  1622  084F               	movf	checkChannelStatus@heater^(0+128),w
 17126  1623  0086               	movwf	6
 17127  1624  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17128  1625  0087               	movwf	7
 17129  1626  3150               	addfsr 1,16
 17130  1627  3F40               	moviw [0]fsr1
 17131  1628  00B1               	movwf	___flge@ff2^(0+128)
 17132  1629  3F41               	moviw [1]fsr1
 17133  162A  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17134  162B  3F42               	moviw [2]fsr1
 17135  162C  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17136  162D  3F43               	moviw [3]fsr1
 17137  162E  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17138  162F  31AA  2227  3194   	fcall	___flge
 17139  1632  1803               	btfsc	3,0
 17140  1633  2E57               	goto	l9144
 17141                           
 17142                           ;system.c: 113:      heater->mode = MODE_MANUAL;
 17143  1634  0141               	movlb	1	; select bank1
 17144  1635  2E51               	goto	l9142
 17145  1636                     l9140:	
 17146                           
 17147                           ;system.c: 115:     heater->Pset = heater->Pmax;
 17148  1636  0141               	movlb	1	; select bank1
 17149  1637  084F               	movf	checkChannelStatus@heater^(0+128),w
 17150  1638  0086               	movwf	6
 17151  1639  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17152  163A  0087               	movwf	7
 17153  163B  3144               	addfsr 1,4
 17154  163C  3F40               	moviw [0]fsr1
 17155  163D  00B9               	movwf	??_checkChannelStatus^(0+128)
 17156  163E  3F41               	moviw [1]fsr1
 17157  163F  00BA               	movwf	(??_checkChannelStatus^(0+128)+1)
 17158  1640  3F42               	moviw [2]fsr1
 17159  1641  00BB               	movwf	(??_checkChannelStatus^(0+128)+2)
 17160  1642  3F43               	moviw [3]fsr1
 17161  1643  00BC               	movwf	(??_checkChannelStatus^(0+128)+3)
 17162  1644  084F               	movf	checkChannelStatus@heater^(0+128),w
 17163  1645  0086               	movwf	6
 17164  1646  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17165  1647  0087               	movwf	7
 17166  1648  3150               	addfsr 1,16
 17167  1649  0839               	movf	??_checkChannelStatus^(0+128),w
 17168  164A  3FC0               	movwi [0]fsr1
 17169  164B  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17170  164C  3FC1               	movwi [1]fsr1
 17171  164D  083B               	movf	(??_checkChannelStatus+2)^(0+128),w
 17172  164E  3FC2               	movwi [2]fsr1
 17173  164F  083C               	movf	(??_checkChannelStatus+3)^(0+128),w
 17174  1650  3FC3               	movwi [3]fsr1
 17175  1651                     l9142:	
 17176                           
 17177                           ;system.c: 116:     heater->mode = MODE_MANUAL;
 17178  1651  084F               	movf	checkChannelStatus@heater^(0+128),w
 17179  1652  0086               	movwf	6
 17180  1653  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17181  1654  0087               	movwf	7
 17182  1655  315D               	addfsr 1,29
 17183  1656  0181               	clrf	1
 17184  1657                     l9144:	
 17185                           
 17186                           ;system.c: 119:    if (heater->Pset == 0)
 17187  1657  0141               	movlb	1	; select bank1
 17188  1658  084F               	movf	checkChannelStatus@heater^(0+128),w
 17189  1659  0086               	movwf	6
 17190  165A  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17191  165B  0087               	movwf	7
 17192  165C  3150               	addfsr 1,16
 17193  165D  3F40               	moviw [0]fsr1
 17194  165E  0140               	movlb	0	; select bank0
 17195  165F  00A0               	movwf	___fleq@ff1
 17196  1660  3F41               	moviw [1]fsr1
 17197  1661  00A1               	movwf	___fleq@ff1+1
 17198  1662  3F42               	moviw [2]fsr1
 17199  1663  00A2               	movwf	___fleq@ff1+2
 17200  1664  3F43               	moviw [3]fsr1
 17201  1665  00A3               	movwf	___fleq@ff1+3
 17202  1666  3000               	movlw	0
 17203  1667  00A7               	movwf	___fleq@ff2+3
 17204  1668  3000               	movlw	0
 17205  1669  00A6               	movwf	___fleq@ff2+2
 17206  166A  3000               	movlw	0
 17207  166B  00A5               	movwf	___fleq@ff2+1
 17208  166C  3000               	movlw	0
 17209  166D  00A4               	movwf	___fleq@ff2
 17210  166E  31B5  25FA  3194   	fcall	___fleq
 17211  1671  1C03               	btfss	3,0
 17212  1672  2E7B               	goto	l9148
 17213                           
 17214                           ;system.c: 120:     heater->status = CH_DISABLED;
 17215  1673  0141               	movlb	1	; select bank1
 17216  1674  084F               	movf	checkChannelStatus@heater^(0+128),w
 17217  1675  0086               	movwf	6
 17218  1676  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17219  1677  0087               	movwf	7
 17220  1678  315E               	addfsr 1,30
 17221  1679  0181               	clrf	1
 17222  167A  2E88               	goto	l815
 17223  167B                     l9148:	
 17224                           
 17225                           ;system.c: 122:     heater->status = CH_ENABLED;
 17226  167B  0141               	movlb	1	; select bank1
 17227  167C  084F               	movf	checkChannelStatus@heater^(0+128),w
 17228  167D  3E1E               	addlw	30
 17229  167E  00B9               	movwf	??_checkChannelStatus^(0+128)
 17230  167F  3000               	movlw	0
 17231  1680  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 17232  1681  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17233  1682  0839               	movf	??_checkChannelStatus^(0+128),w
 17234  1683  0086               	movwf	6
 17235  1684  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17236  1685  0087               	movwf	7
 17237  1686  3001               	movlw	1
 17238  1687  0081               	movwf	1
 17239  1688                     l815:	
 17240                           
 17241                           ;system.c: 125:    if (heater->mode == MODE_AUTO)
 17242  1688  084F               	movf	checkChannelStatus@heater^(0+128),w
 17243  1689  0086               	movwf	6
 17244  168A  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17245  168B  0087               	movwf	7
 17246  168C  315D               	addfsr 1,29
 17247  168D  0301               	decf	1,w
 17248  168E  1D03               	btfss	3,2
 17249  168F  2F3A               	goto	l9156
 17250                           
 17251                           ;system.c: 126:     heater->DCreq = (((heater->Preq / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Preq / heater->Pmax) * 100) : (100));
 17252  1690  3042               	movlw	66
 17253  1691  0140               	movlb	0	; select bank0
 17254  1692  00C4               	movwf	___flmul@b+3
 17255  1693  30C8               	movlw	200
 17256  1694  00C3               	movwf	___flmul@b+2
 17257  1695  3000               	movlw	0
 17258  1696  00C2               	movwf	___flmul@b+1
 17259  1697  3000               	movlw	0
 17260  1698  00C1               	movwf	___flmul@b
 17261  1699  0141               	movlb	1	; select bank1
 17262  169A  084F               	movf	checkChannelStatus@heater^(0+128),w
 17263  169B  0086               	movwf	6
 17264  169C  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17265  169D  0087               	movwf	7
 17266  169E  3144               	addfsr 1,4
 17267  169F  3F40               	moviw [0]fsr1
 17268  16A0  0140               	movlb	0	; select bank0
 17269  16A1  00DB               	movwf	___fldiv@a
 17270  16A2  3F41               	moviw [1]fsr1
 17271  16A3  00DC               	movwf	___fldiv@a+1
 17272  16A4  3F42               	moviw [2]fsr1
 17273  16A5  00DD               	movwf	___fldiv@a+2
 17274  16A6  3F43               	moviw [3]fsr1
 17275  16A7  00DE               	movwf	___fldiv@a+3
 17276  16A8  0141               	movlb	1	; select bank1
 17277  16A9  084F               	movf	checkChannelStatus@heater^(0+128),w
 17278  16AA  0086               	movwf	6
 17279  16AB  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17280  16AC  0087               	movwf	7
 17281  16AD  3148               	addfsr 1,8
 17282  16AE  3F40               	moviw [0]fsr1
 17283  16AF  0140               	movlb	0	; select bank0
 17284  16B0  00DF               	movwf	___fldiv@b
 17285  16B1  3F41               	moviw [1]fsr1
 17286  16B2  00E0               	movwf	___fldiv@b+1
 17287  16B3  3F42               	moviw [2]fsr1
 17288  16B4  00E1               	movwf	___fldiv@b+2
 17289  16B5  3F43               	moviw [3]fsr1
 17290  16B6  00E2               	movwf	___fldiv@b+3
 17291  16B7  319E  2628  3194   	fcall	___fldiv
 17292  16BA  0140               	movlb	0	; select bank0
 17293  16BB  085E               	movf	?___fldiv+3,w
 17294  16BC  00C8               	movwf	___flmul@a+3
 17295  16BD  085D               	movf	?___fldiv+2,w
 17296  16BE  00C7               	movwf	___flmul@a+2
 17297  16BF  085C               	movf	?___fldiv+1,w
 17298  16C0  00C6               	movwf	___flmul@a+1
 17299  16C1  085B               	movf	?___fldiv,w
 17300  16C2  00C5               	movwf	___flmul@a
 17301  16C3  3185  2561  3194   	fcall	___flmul
 17302  16C6  0140               	movlb	0	; select bank0
 17303  16C7  0844               	movf	?___flmul+3,w
 17304  16C8  0141               	movlb	1	; select bank1
 17305  16C9  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17306  16CA  0140               	movlb	0	; select bank0
 17307  16CB  0843               	movf	?___flmul+2,w
 17308  16CC  0141               	movlb	1	; select bank1
 17309  16CD  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17310  16CE  0140               	movlb	0	; select bank0
 17311  16CF  0842               	movf	?___flmul+1,w
 17312  16D0  0141               	movlb	1	; select bank1
 17313  16D1  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17314  16D2  0140               	movlb	0	; select bank0
 17315  16D3  0841               	movf	?___flmul,w
 17316  16D4  0141               	movlb	1	; select bank1
 17317  16D5  00AD               	movwf	___flge@ff1^(0+128)
 17318  16D6  3042               	movlw	66
 17319  16D7  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17320  16D8  30C8               	movlw	200
 17321  16D9  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17322  16DA  3000               	movlw	0
 17323  16DB  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17324  16DC  3000               	movlw	0
 17325  16DD  00B1               	movwf	___flge@ff2^(0+128)
 17326  16DE  31AA  2227  3194   	fcall	___flge
 17327  16E1  1C03               	btfss	3,0
 17328  16E2  2EEC               	goto	l9154
 17329  16E3  3042               	movlw	66
 17330  16E4  0141               	movlb	1	; select bank1
 17331  16E5  00C2               	movwf	(_checkChannelStatus$1887+3)^(0+128)
 17332  16E6  30C8               	movlw	200
 17333  16E7  00C1               	movwf	(_checkChannelStatus$1887+2)^(0+128)
 17334  16E8  3000               	movlw	0
 17335  16E9  00C0               	movwf	(_checkChannelStatus$1887+1)^(0+128)
 17336  16EA  3000               	movlw	0
 17337  16EB  2F31               	goto	L9
 17338  16EC                     l9154:	
 17339  16EC  3042               	movlw	66
 17340  16ED  0140               	movlb	0	; select bank0
 17341  16EE  00C4               	movwf	___flmul@b+3
 17342  16EF  30C8               	movlw	200
 17343  16F0  00C3               	movwf	___flmul@b+2
 17344  16F1  3000               	movlw	0
 17345  16F2  00C2               	movwf	___flmul@b+1
 17346  16F3  3000               	movlw	0
 17347  16F4  00C1               	movwf	___flmul@b
 17348  16F5  0141               	movlb	1	; select bank1
 17349  16F6  084F               	movf	checkChannelStatus@heater^(0+128),w
 17350  16F7  0086               	movwf	6
 17351  16F8  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17352  16F9  0087               	movwf	7
 17353  16FA  3144               	addfsr 1,4
 17354  16FB  3F40               	moviw [0]fsr1
 17355  16FC  0140               	movlb	0	; select bank0
 17356  16FD  00DB               	movwf	___fldiv@a
 17357  16FE  3F41               	moviw [1]fsr1
 17358  16FF  00DC               	movwf	___fldiv@a+1
 17359  1700  3F42               	moviw [2]fsr1
 17360  1701  00DD               	movwf	___fldiv@a+2
 17361  1702  3F43               	moviw [3]fsr1
 17362  1703  00DE               	movwf	___fldiv@a+3
 17363  1704  0141               	movlb	1	; select bank1
 17364  1705  084F               	movf	checkChannelStatus@heater^(0+128),w
 17365  1706  0086               	movwf	6
 17366  1707  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17367  1708  0087               	movwf	7
 17368  1709  3148               	addfsr 1,8
 17369  170A  3F40               	moviw [0]fsr1
 17370  170B  0140               	movlb	0	; select bank0
 17371  170C  00DF               	movwf	___fldiv@b
 17372  170D  3F41               	moviw [1]fsr1
 17373  170E  00E0               	movwf	___fldiv@b+1
 17374  170F  3F42               	moviw [2]fsr1
 17375  1710  00E1               	movwf	___fldiv@b+2
 17376  1711  3F43               	moviw [3]fsr1
 17377  1712  00E2               	movwf	___fldiv@b+3
 17378  1713  319E  2628  3194   	fcall	___fldiv
 17379  1716  0140               	movlb	0	; select bank0
 17380  1717  085E               	movf	?___fldiv+3,w
 17381  1718  00C8               	movwf	___flmul@a+3
 17382  1719  085D               	movf	?___fldiv+2,w
 17383  171A  00C7               	movwf	___flmul@a+2
 17384  171B  085C               	movf	?___fldiv+1,w
 17385  171C  00C6               	movwf	___flmul@a+1
 17386  171D  085B               	movf	?___fldiv,w
 17387  171E  00C5               	movwf	___flmul@a
 17388  171F  3185  2561  3194   	fcall	___flmul
 17389  1722  0140               	movlb	0	; select bank0
 17390  1723  0844               	movf	?___flmul+3,w
 17391  1724  0141               	movlb	1	; select bank1
 17392  1725  00C2               	movwf	(_checkChannelStatus$1887+3)^(0+128)
 17393  1726  0140               	movlb	0	; select bank0
 17394  1727  0843               	movf	?___flmul+2,w
 17395  1728  0141               	movlb	1	; select bank1
 17396  1729  00C1               	movwf	(_checkChannelStatus$1887+2)^(0+128)
 17397  172A  0140               	movlb	0	; select bank0
 17398  172B  0842               	movf	?___flmul+1,w
 17399  172C  0141               	movlb	1	; select bank1
 17400  172D  00C0               	movwf	(_checkChannelStatus$1887+1)^(0+128)
 17401  172E  0140               	movlb	0	; select bank0
 17402  172F  0841               	movf	?___flmul,w
 17403  1730  0141               	movlb	1	; select bank1
 17404  1731                     L9:	
 17405  1731  00BF               	movwf	_checkChannelStatus$1887^(0+128)
 17406  1732  0842               	movf	(_checkChannelStatus$1887+3)^(0+128),w
 17407  1733  00AB               	movwf	(___fltol@f1+3)^(0+128)
 17408  1734  0841               	movf	(_checkChannelStatus$1887+2)^(0+128),w
 17409  1735  00AA               	movwf	(___fltol@f1+2)^(0+128)
 17410  1736  0840               	movf	(_checkChannelStatus$1887+1)^(0+128),w
 17411  1737  00A9               	movwf	(___fltol@f1+1)^(0+128)
 17412  1738  083F               	movf	_checkChannelStatus$1887^(0+128),w
 17413  1739  2FE3               	goto	L11
 17414  173A                     l9156:	
 17415                           
 17416                           ;system.c: 128:     heater->DCreq = (((heater->Pset / heater->Pmax) * 100) < (100) ? ((h
      +                          eater->Pset / heater->Pmax) * 100) : (100));
 17417  173A  3042               	movlw	66
 17418  173B  0140               	movlb	0	; select bank0
 17419  173C  00C4               	movwf	___flmul@b+3
 17420  173D  30C8               	movlw	200
 17421  173E  00C3               	movwf	___flmul@b+2
 17422  173F  3000               	movlw	0
 17423  1740  00C2               	movwf	___flmul@b+1
 17424  1741  3000               	movlw	0
 17425  1742  00C1               	movwf	___flmul@b
 17426  1743  0141               	movlb	1	; select bank1
 17427  1744  084F               	movf	checkChannelStatus@heater^(0+128),w
 17428  1745  0086               	movwf	6
 17429  1746  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17430  1747  0087               	movwf	7
 17431  1748  3144               	addfsr 1,4
 17432  1749  3F40               	moviw [0]fsr1
 17433  174A  0140               	movlb	0	; select bank0
 17434  174B  00DB               	movwf	___fldiv@a
 17435  174C  3F41               	moviw [1]fsr1
 17436  174D  00DC               	movwf	___fldiv@a+1
 17437  174E  3F42               	moviw [2]fsr1
 17438  174F  00DD               	movwf	___fldiv@a+2
 17439  1750  3F43               	moviw [3]fsr1
 17440  1751  00DE               	movwf	___fldiv@a+3
 17441  1752  0141               	movlb	1	; select bank1
 17442  1753  084F               	movf	checkChannelStatus@heater^(0+128),w
 17443  1754  0086               	movwf	6
 17444  1755  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17445  1756  0087               	movwf	7
 17446  1757  3150               	addfsr 1,16
 17447  1758  3F40               	moviw [0]fsr1
 17448  1759  0140               	movlb	0	; select bank0
 17449  175A  00DF               	movwf	___fldiv@b
 17450  175B  3F41               	moviw [1]fsr1
 17451  175C  00E0               	movwf	___fldiv@b+1
 17452  175D  3F42               	moviw [2]fsr1
 17453  175E  00E1               	movwf	___fldiv@b+2
 17454  175F  3F43               	moviw [3]fsr1
 17455  1760  00E2               	movwf	___fldiv@b+3
 17456  1761  319E  2628  3194   	fcall	___fldiv
 17457  1764  0140               	movlb	0	; select bank0
 17458  1765  085E               	movf	?___fldiv+3,w
 17459  1766  00C8               	movwf	___flmul@a+3
 17460  1767  085D               	movf	?___fldiv+2,w
 17461  1768  00C7               	movwf	___flmul@a+2
 17462  1769  085C               	movf	?___fldiv+1,w
 17463  176A  00C6               	movwf	___flmul@a+1
 17464  176B  085B               	movf	?___fldiv,w
 17465  176C  00C5               	movwf	___flmul@a
 17466  176D  3185  2561  3194   	fcall	___flmul
 17467  1770  0140               	movlb	0	; select bank0
 17468  1771  0844               	movf	?___flmul+3,w
 17469  1772  0141               	movlb	1	; select bank1
 17470  1773  00B0               	movwf	(___flge@ff1+3)^(0+128)
 17471  1774  0140               	movlb	0	; select bank0
 17472  1775  0843               	movf	?___flmul+2,w
 17473  1776  0141               	movlb	1	; select bank1
 17474  1777  00AF               	movwf	(___flge@ff1+2)^(0+128)
 17475  1778  0140               	movlb	0	; select bank0
 17476  1779  0842               	movf	?___flmul+1,w
 17477  177A  0141               	movlb	1	; select bank1
 17478  177B  00AE               	movwf	(___flge@ff1+1)^(0+128)
 17479  177C  0140               	movlb	0	; select bank0
 17480  177D  0841               	movf	?___flmul,w
 17481  177E  0141               	movlb	1	; select bank1
 17482  177F  00AD               	movwf	___flge@ff1^(0+128)
 17483  1780  3042               	movlw	66
 17484  1781  00B4               	movwf	(___flge@ff2+3)^(0+128)
 17485  1782  30C8               	movlw	200
 17486  1783  00B3               	movwf	(___flge@ff2+2)^(0+128)
 17487  1784  3000               	movlw	0
 17488  1785  00B2               	movwf	(___flge@ff2+1)^(0+128)
 17489  1786  3000               	movlw	0
 17490  1787  00B1               	movwf	___flge@ff2^(0+128)
 17491  1788  31AA  2227  3194   	fcall	___flge
 17492  178B  1C03               	btfss	3,0
 17493  178C  2F96               	goto	l9160
 17494  178D  3042               	movlw	66
 17495  178E  0141               	movlb	1	; select bank1
 17496  178F  00C6               	movwf	(_checkChannelStatus$1888+3)^(0+128)
 17497  1790  30C8               	movlw	200
 17498  1791  00C5               	movwf	(_checkChannelStatus$1888+2)^(0+128)
 17499  1792  3000               	movlw	0
 17500  1793  00C4               	movwf	(_checkChannelStatus$1888+1)^(0+128)
 17501  1794  3000               	movlw	0
 17502  1795  2FDB               	goto	L10
 17503  1796                     l9160:	
 17504  1796  3042               	movlw	66
 17505  1797  0140               	movlb	0	; select bank0
 17506  1798  00C4               	movwf	___flmul@b+3
 17507  1799  30C8               	movlw	200
 17508  179A  00C3               	movwf	___flmul@b+2
 17509  179B  3000               	movlw	0
 17510  179C  00C2               	movwf	___flmul@b+1
 17511  179D  3000               	movlw	0
 17512  179E  00C1               	movwf	___flmul@b
 17513  179F  0141               	movlb	1	; select bank1
 17514  17A0  084F               	movf	checkChannelStatus@heater^(0+128),w
 17515  17A1  0086               	movwf	6
 17516  17A2  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17517  17A3  0087               	movwf	7
 17518  17A4  3144               	addfsr 1,4
 17519  17A5  3F40               	moviw [0]fsr1
 17520  17A6  0140               	movlb	0	; select bank0
 17521  17A7  00DB               	movwf	___fldiv@a
 17522  17A8  3F41               	moviw [1]fsr1
 17523  17A9  00DC               	movwf	___fldiv@a+1
 17524  17AA  3F42               	moviw [2]fsr1
 17525  17AB  00DD               	movwf	___fldiv@a+2
 17526  17AC  3F43               	moviw [3]fsr1
 17527  17AD  00DE               	movwf	___fldiv@a+3
 17528  17AE  0141               	movlb	1	; select bank1
 17529  17AF  084F               	movf	checkChannelStatus@heater^(0+128),w
 17530  17B0  0086               	movwf	6
 17531  17B1  0850               	movf	(checkChannelStatus@heater+1)^(0+128),w
 17532  17B2  0087               	movwf	7
 17533  17B3  3150               	addfsr 1,16
 17534  17B4  3F40               	moviw [0]fsr1
 17535  17B5  0140               	movlb	0	; select bank0
 17536  17B6  00DF               	movwf	___fldiv@b
 17537  17B7  3F41               	moviw [1]fsr1
 17538  17B8  00E0               	movwf	___fldiv@b+1
 17539  17B9  3F42               	moviw [2]fsr1
 17540  17BA  00E1               	movwf	___fldiv@b+2
 17541  17BB  3F43               	moviw [3]fsr1
 17542  17BC  00E2               	movwf	___fldiv@b+3
 17543  17BD  319E  2628  3194   	fcall	___fldiv
 17544  17C0  0140               	movlb	0	; select bank0
 17545  17C1  085E               	movf	?___fldiv+3,w
 17546  17C2  00C8               	movwf	___flmul@a+3
 17547  17C3  085D               	movf	?___fldiv+2,w
 17548  17C4  00C7               	movwf	___flmul@a+2
 17549  17C5  085C               	movf	?___fldiv+1,w
 17550  17C6  00C6               	movwf	___flmul@a+1
 17551  17C7  085B               	movf	?___fldiv,w
 17552  17C8  00C5               	movwf	___flmul@a
 17553  17C9  3185  2561  3194   	fcall	___flmul
 17554  17CC  0140               	movlb	0	; select bank0
 17555  17CD  0844               	movf	?___flmul+3,w
 17556  17CE  0141               	movlb	1	; select bank1
 17557  17CF  00C6               	movwf	(_checkChannelStatus$1888+3)^(0+128)
 17558  17D0  0140               	movlb	0	; select bank0
 17559  17D1  0843               	movf	?___flmul+2,w
 17560  17D2  0141               	movlb	1	; select bank1
 17561  17D3  00C5               	movwf	(_checkChannelStatus$1888+2)^(0+128)
 17562  17D4  0140               	movlb	0	; select bank0
 17563  17D5  0842               	movf	?___flmul+1,w
 17564  17D6  0141               	movlb	1	; select bank1
 17565  17D7  00C4               	movwf	(_checkChannelStatus$1888+1)^(0+128)
 17566  17D8  0140               	movlb	0	; select bank0
 17567  17D9  0841               	movf	?___flmul,w
 17568  17DA  0141               	movlb	1	; select bank1
 17569  17DB                     L10:	
 17570  17DB  00C3               	movwf	_checkChannelStatus$1888^(0+128)
 17571  17DC  0846               	movf	(_checkChannelStatus$1888+3)^(0+128),w
 17572  17DD  00AB               	movwf	(___fltol@f1+3)^(0+128)
 17573  17DE  0845               	movf	(_checkChannelStatus$1888+2)^(0+128),w
 17574  17DF  00AA               	movwf	(___fltol@f1+2)^(0+128)
 17575  17E0  0844               	movf	(_checkChannelStatus$1888+1)^(0+128),w
 17576  17E1  00A9               	movwf	(___fltol@f1+1)^(0+128)
 17577  17E2  0843               	movf	_checkChannelStatus$1888^(0+128),w
 17578  17E3                     L11:	
 17579  17E3  00A8               	movwf	___fltol@f1^(0+128)
 17580  17E4  31B7  279A  3194   	fcall	___fltol
 17581  17E7  0141               	movlb	1	; select bank1
 17582  17E8  0828               	movf	?___fltol^(0+128),w
 17583  17E9  00B9               	movwf	??_checkChannelStatus^(0+128)
 17584  17EA  084F               	movf	checkChannelStatus@heater^(0+128),w
 17585  17EB  3E14               	addlw	20
 17586  17EC  00BA               	movwf	(??_checkChannelStatus+1)^(0+128)
 17587  17ED  3000               	movlw	0
 17588  17EE  3D50               	addwfc	(checkChannelStatus@heater+1)^(0+128),w
 17589  17EF  00BB               	movwf	(??_checkChannelStatus+2)^(0+128)
 17590  17F0  083A               	movf	(??_checkChannelStatus+1)^(0+128),w
 17591  17F1  0086               	movwf	6
 17592  17F2  083B               	movf	(??_checkChannelStatus+2)^(0+128),w
 17593  17F3  0087               	movwf	7
 17594  17F4  0839               	movf	??_checkChannelStatus^(0+128),w
 17595  17F5                     L8:	
 17596  17F5  0081               	movwf	1
 17597  17F6                     l9162:	
 17598  17F6  3001               	movlw	1
 17599  17F7  0141               	movlb	1	; select bank1
 17600  17F8  00B9               	movwf	??_checkChannelStatus^(0+128)
 17601  17F9  0839               	movf	??_checkChannelStatus^(0+128),w
 17602  17FA  07CE               	addwf	checkChannelStatus@channel^(0+128),f
 17603  17FB  3004               	movlw	4
 17604  17FC  024E               	subwf	checkChannelStatus@channel^(0+128),w
 17605  17FD  1803               	btfsc	3,0
 17606  17FE  0008               	return
 17607  17FF  2C16               	goto	l9076
 17608  1800                     __end_of_checkChannelStatus:	
 17609                           
 17610                           	psect	text38
 17611  356B                     __ptext38:	
 17612 ;; *************** function _setChannelSwitch *****************
 17613 ;; Defined at:
 17614 ;;		line 6 in file "io.c"
 17615 ;; Parameters:    Size  Location     Type
 17616 ;;  channel         1    wreg     unsigned char 
 17617 ;;  state           1   13[BANK0 ] unsigned char 
 17618 ;; Auto vars:     Size  Location     Type
 17619 ;;  channel         1   16[BANK0 ] unsigned char 
 17620 ;; Return value:  Size  Location     Type
 17621 ;;                  1    wreg      void 
 17622 ;; Registers used:
 17623 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 17624 ;; Tracked objects:
 17625 ;;		On entry : 0/0
 17626 ;;		On exit  : 0/0
 17627 ;;		Unchanged: 0/0
 17628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17629 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17630 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17631 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17632 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17633 ;;Total ram usage:        4 bytes
 17634 ;; Hardware stack levels used:    1
 17635 ;; Hardware stack levels required when called:    3
 17636 ;; This function calls:
 17637 ;;		Nothing
 17638 ;; This function is called by:
 17639 ;;		_checkChannelStatus
 17640 ;;		_systemCheck
 17641 ;;		_controller
 17642 ;; This function uses a non-reentrant model
 17643 ;;
 17644                           
 17645                           
 17646                           ;psect for function _setChannelSwitch
 17647  356B                     _setChannelSwitch:	
 17648                           
 17649                           ;incstack = 0
 17650                           ; Regs used in _setChannelSwitch: [wreg-fsr0h+status,2+status,0]
 17651                           ;setChannelSwitch@channel stored from wreg
 17652  356B  0140               	movlb	0	; select bank0
 17653  356C  00B0               	movwf	setChannelSwitch@channel
 17654                           
 17655                           ;io.c: 6: void setChannelSwitch(uint8_t channel, uint8_t state);io.c: 7: {;io.c: 8:  swi
      +                          tch(channel) {
 17656  356D  2D9B               	goto	l8602
 17657  356E                     l8590:	
 17658                           
 17659                           ;io.c: 10:   LATAbits.LATA0 = state;
 17660  356E  0C2D               	rrf	setChannelSwitch@state,w
 17661  356F  1C03               	skipc
 17662  3570  1018               	bcf	24,0	;volatile
 17663  3571  1803               	skipnc
 17664  3572  1418               	bsf	24,0	;volatile
 17665                           
 17666                           ;io.c: 11:   break;
 17667  3573  0008               	return
 17668  3574                     l8592:	
 17669                           
 17670                           ;io.c: 13:   LATAbits.LATA1 = state;
 17671  3574  0C2D               	rrf	setChannelSwitch@state,w
 17672  3575  1C03               	skipc
 17673  3576  1098               	bcf	24,1	;volatile
 17674  3577  1803               	skipnc
 17675  3578  1498               	bsf	24,1	;volatile
 17676                           
 17677                           ;io.c: 14:   break;
 17678  3579  0008               	return
 17679  357A                     l8594:	
 17680                           
 17681                           ;io.c: 16:   LATAbits.LATA2 = state;
 17682  357A  0C2D               	rrf	setChannelSwitch@state,w
 17683  357B  1C03               	skipc
 17684  357C  1118               	bcf	24,2	;volatile
 17685  357D  1803               	skipnc
 17686  357E  1518               	bsf	24,2	;volatile
 17687                           
 17688                           ;io.c: 17:   break;
 17689  357F  0008               	return
 17690  3580                     l8596:	
 17691                           
 17692                           ;io.c: 19:   LATAbits.LATA3 = state;
 17693  3580  0C2D               	rrf	setChannelSwitch@state,w
 17694  3581  1C03               	skipc
 17695  3582  1198               	bcf	24,3	;volatile
 17696  3583  1803               	skipnc
 17697  3584  1598               	bsf	24,3	;volatile
 17698                           
 17699                           ;io.c: 20:   break;
 17700  3585  0008               	return
 17701  3586                     l8598:	
 17702                           
 17703                           ;io.c: 22:   LATAbits.LATA0 = state;
 17704  3586  0C2D               	rrf	setChannelSwitch@state,w
 17705  3587  1C03               	skipc
 17706  3588  1018               	bcf	24,0	;volatile
 17707  3589  1803               	skipnc
 17708  358A  1418               	bsf	24,0	;volatile
 17709                           
 17710                           ;io.c: 23:   LATAbits.LATA1 = state;
 17711  358B  0C2D               	rrf	setChannelSwitch@state,w
 17712  358C  1C03               	skipc
 17713  358D  1098               	bcf	24,1	;volatile
 17714  358E  1803               	skipnc
 17715  358F  1498               	bsf	24,1	;volatile
 17716                           
 17717                           ;io.c: 24:   LATAbits.LATA2 = state;
 17718  3590  0C2D               	rrf	setChannelSwitch@state,w
 17719  3591  1C03               	skipc
 17720  3592  1118               	bcf	24,2	;volatile
 17721  3593  1803               	skipnc
 17722  3594  1518               	bsf	24,2	;volatile
 17723                           
 17724                           ;io.c: 25:   LATAbits.LATA3 = state;
 17725  3595  0C2D               	rrf	setChannelSwitch@state,w
 17726  3596  1C03               	skipc
 17727  3597  1198               	bcf	24,3	;volatile
 17728  3598  1803               	skipnc
 17729  3599  1598               	bsf	24,3	;volatile
 17730                           
 17731                           ;io.c: 26:   break;
 17732  359A  0008               	return
 17733  359B                     l8602:	
 17734  359B  0830               	movf	setChannelSwitch@channel,w
 17735  359C  00AE               	movwf	??_setChannelSwitch
 17736  359D  01AF               	clrf	??_setChannelSwitch+1
 17737                           
 17738                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 17739                           ; Switch size 1, requested type "simple"
 17740                           ; Number of cases is 1, Range of values is 0 to 0
 17741                           ; switch strategies available:
 17742                           ; Name         Instructions Cycles
 17743                           ; simple_byte            4     3 (average)
 17744                           ; direct_byte            8     6 (fixed)
 17745                           ; jumptable            260     6 (fixed)
 17746                           ;	Chosen strategy is simple_byte
 17747  359E  082F               	movf	??_setChannelSwitch+1,w
 17748  359F  3A00               	xorlw	0	; case 0
 17749  35A0  1903               	skipnz
 17750  35A1  2DA3               	goto	l9580
 17751  35A2  2D86               	goto	l8598
 17752  35A3                     l9580:	
 17753                           
 17754                           ; Switch size 1, requested type "simple"
 17755                           ; Number of cases is 4, Range of values is 0 to 3
 17756                           ; switch strategies available:
 17757                           ; Name         Instructions Cycles
 17758                           ; simple_byte           13     7 (average)
 17759                           ; direct_byte           14     6 (fixed)
 17760                           ; jumptable            260     6 (fixed)
 17761                           ;	Chosen strategy is simple_byte
 17762  35A3  082E               	movf	??_setChannelSwitch,w
 17763  35A4  3A00               	xorlw	0	; case 0
 17764  35A5  1903               	skipnz
 17765  35A6  2D6E               	goto	l8590
 17766  35A7  3A01               	xorlw	1	; case 1
 17767  35A8  1903               	skipnz
 17768  35A9  2D74               	goto	l8592
 17769  35AA  3A03               	xorlw	3	; case 2
 17770  35AB  1903               	skipnz
 17771  35AC  2D7A               	goto	l8594
 17772  35AD  3A01               	xorlw	1	; case 3
 17773  35AE  1903               	skipnz
 17774  35AF  2D80               	goto	l8596
 17775  35B0  2D86               	goto	l8598
 17776  35B1  0008               	return
 17777  35B2                     __end_of_setChannelSwitch:	
 17778                           
 17779                           	psect	text39
 17780  317D                     __ptext39:	
 17781 ;; *************** function _getAnalogValue *****************
 17782 ;; Defined at:
 17783 ;;		line 33 in file "io.c"
 17784 ;; Parameters:    Size  Location     Type
 17785 ;;  channel         1    wreg     unsigned char 
 17786 ;; Auto vars:     Size  Location     Type
 17787 ;;  channel         1    3[BANK0 ] unsigned char 
 17788 ;; Return value:  Size  Location     Type
 17789 ;;                  2    0[BANK0 ] unsigned short 
 17790 ;; Registers used:
 17791 ;;		wreg, status,2, status,0
 17792 ;; Tracked objects:
 17793 ;;		On entry : 0/0
 17794 ;;		On exit  : 0/0
 17795 ;;		Unchanged: 0/0
 17796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17797 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17798 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17799 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17800 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17801 ;;Total ram usage:        4 bytes
 17802 ;; Hardware stack levels used:    1
 17803 ;; Hardware stack levels required when called:    3
 17804 ;; This function calls:
 17805 ;;		Nothing
 17806 ;; This function is called by:
 17807 ;;		_checkChannelStatus
 17808 ;;		_systemCheck
 17809 ;;		_getAnalogValues
 17810 ;; This function uses a non-reentrant model
 17811 ;;
 17812                           
 17813                           
 17814                           ;psect for function _getAnalogValue
 17815  317D                     _getAnalogValue:	
 17816                           
 17817                           ;incstack = 0
 17818                           ; Regs used in _getAnalogValue: [wreg+status,2+status,0]
 17819                           ;getAnalogValue@channel stored from wreg
 17820  317D  0140               	movlb	0	; select bank0
 17821  317E  00A3               	movwf	getAnalogValue@channel
 17822                           
 17823                           ;io.c: 33: uint16_t getAnalogValue(uint8_t channel);io.c: 34: {;io.c: 35:  ADCON0bits.CH
      +                          S = channel;
 17824  317F  0823               	movf	getAnalogValue@channel,w
 17825  3180  00A2               	movwf	??_getAnalogValue
 17826  3181  0DA2               	rlf	??_getAnalogValue,f
 17827  3182  0DA2               	rlf	??_getAnalogValue,f
 17828  3183  0141               	movlb	1	; select bank1
 17829  3184  081D               	movf	29,w	;volatile
 17830  3185  0140               	movlb	0	; select bank0
 17831  3186  0622               	xorwf	??_getAnalogValue,w
 17832  3187  3903               	andlw	-253
 17833  3188  0622               	xorwf	??_getAnalogValue,w
 17834  3189  0141               	movlb	1	; select bank1
 17835  318A  009D               	movwf	29	;volatile
 17836                           
 17837                           ;io.c: 36:  _delay((unsigned long)((5)*(4000000UL/4000000.0)));
 17838  318B  3200               	nop2	;2 cycle nop
 17839  318C  3200               	nop2	;2 cycle nop
 17840  318D  0000               	nop
 17841                           
 17842                           ;io.c: 37:  ADCON0bits.GO = 1;
 17843  318E  0141               	movlb	1	; select bank1
 17844  318F  149D               	bsf	29,1	;volatile
 17845  3190                     l730:	
 17846                           ;io.c: 38:  while (ADCON0bits.GO);
 17847                           
 17848  3190  189D               	btfsc	29,1	;volatile
 17849  3191  2990               	goto	l730
 17850                           
 17851                           ;io.c: 39:  return(uint16_t) ((ADRESH << 8) + ADRESL);
 17852  3192  081C               	movf	28,w	;volatile
 17853  3193  0140               	movlb	0	; select bank0
 17854  3194  00A1               	movwf	?_getAnalogValue+1
 17855  3195  0141               	movlb	1	; select bank1
 17856  3196  081B               	movf	27,w	;volatile
 17857  3197  0140               	movlb	0	; select bank0
 17858  3198  00A0               	movwf	?_getAnalogValue
 17859  3199  0008               	return
 17860  319A                     __end_of_getAnalogValue:	
 17861                           
 17862                           	psect	text40
 17863  345E                     __ptext40:	
 17864 ;; *************** function _error *****************
 17865 ;; Defined at:
 17866 ;;		line 13 in file "error.c"
 17867 ;; Parameters:    Size  Location     Type
 17868 ;;  error           1    wreg     enum E7825
 17869 ;; Auto vars:     Size  Location     Type
 17870 ;;  error           1    8[BANK0 ] enum E7825
 17871 ;; Return value:  Size  Location     Type
 17872 ;;                  1    wreg      void 
 17873 ;; Registers used:
 17874 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17875 ;; Tracked objects:
 17876 ;;		On entry : 0/0
 17877 ;;		On exit  : 0/0
 17878 ;;		Unchanged: 0/0
 17879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17883 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17884 ;;Total ram usage:        2 bytes
 17885 ;; Hardware stack levels used:    1
 17886 ;; Hardware stack levels required when called:    4
 17887 ;; This function calls:
 17888 ;;		___awmod
 17889 ;; This function is called by:
 17890 ;;		_menu
 17891 ;;		_checkChannelStatus
 17892 ;;		_systemCheck
 17893 ;;		_checkSensor
 17894 ;; This function uses a non-reentrant model
 17895 ;;
 17896                           
 17897                           
 17898                           ;psect for function _error
 17899  345E                     _error:	
 17900                           
 17901                           ;incstack = 0
 17902                           ; Regs used in _error: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17903                           ;error@error stored from wreg
 17904  345E  0140               	movlb	0	; select bank0
 17905  345F  00A8               	movwf	error@error
 17906                           
 17907                           ;error.c: 13: void error(enum e_errorcode error);error.c: 14: {;error.c: 15:  errorMessa
      +                          geQueue[head] = error;
 17908  3460  0828               	movf	error@error,w
 17909  3461  00A7               	movwf	??_error
 17910  3462  0142               	movlb	2	; select bank2
 17911  3463  0865               	movf	_head^(0+256),w
 17912  3464  3E20               	addlw	(low (_errorMessageQueue| (0+512)))& (0+255)
 17913  3465  0086               	movwf	6
 17914  3466  3002               	movlw	2	; select bank4/5
 17915  3467  0087               	movwf	7
 17916  3468  0140               	movlb	0	; select bank0
 17917  3469  0827               	movf	??_error,w
 17918  346A  0081               	movwf	1
 17919                           
 17920                           ;error.c: 16:  head = (head + 1) % 10;
 17921  346B  300A               	movlw	10
 17922  346C  00A0               	movwf	___awmod@divisor
 17923  346D  3000               	movlw	0
 17924  346E  00A1               	movwf	___awmod@divisor+1
 17925  346F  0142               	movlb	2	; select bank2
 17926  3470  0865               	movf	_head^(0+256),w
 17927  3471  3E01               	addlw	1
 17928  3472  0140               	movlb	0	; select bank0
 17929  3473  00A2               	movwf	___awmod@dividend
 17930  3474  3000               	movlw	0
 17931  3475  1803               	skipnc
 17932  3476  3001               	movlw	1
 17933  3477  00A3               	movwf	___awmod@dividend+1
 17934  3478  31B4  24DE  31B4   	fcall	___awmod
 17935  347B  0140               	movlb	0	; select bank0
 17936  347C  0820               	movf	?___awmod,w
 17937  347D  00A7               	movwf	??_error
 17938  347E  0827               	movf	??_error,w
 17939  347F  0142               	movlb	2	; select bank2
 17940  3480  00E5               	movwf	_head^(0+256)
 17941                           
 17942                           ;error.c: 17:  if (head == tail)
 17943  3481  0865               	movf	_head^(0+256),w
 17944  3482  067C               	xorwf	_tail,w
 17945  3483  1D03               	skipz
 17946  3484  0008               	return
 17947                           
 17948                           ;error.c: 18:   tail = (tail + 1) % 10;
 17949  3485  300A               	movlw	10
 17950  3486  0140               	movlb	0	; select bank0
 17951  3487  00A0               	movwf	___awmod@divisor
 17952  3488  3000               	movlw	0
 17953  3489  00A1               	movwf	___awmod@divisor+1
 17954  348A  087C               	movf	_tail,w
 17955  348B  3E01               	addlw	1
 17956  348C  00A2               	movwf	___awmod@dividend
 17957  348D  3000               	movlw	0
 17958  348E  1803               	skipnc
 17959  348F  3001               	movlw	1
 17960  3490  00A3               	movwf	___awmod@dividend+1
 17961  3491  31B4  24DE         	fcall	___awmod
 17962  3493  0140               	movlb	0	; select bank0
 17963  3494  0820               	movf	?___awmod,w
 17964  3495  00A7               	movwf	??_error
 17965  3496  0827               	movf	??_error,w
 17966  3497  00FC               	movwf	_tail
 17967  3498  0008               	return
 17968  3499                     __end_of_error:	
 17969                           
 17970                           	psect	text41
 17971  34DE                     __ptext41:	
 17972 ;; *************** function ___awmod *****************
 17973 ;; Defined at:
 17974 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 17975 ;; Parameters:    Size  Location     Type
 17976 ;;  divisor         2    0[BANK0 ] int 
 17977 ;;  dividend        2    2[BANK0 ] int 
 17978 ;; Auto vars:     Size  Location     Type
 17979 ;;  sign            1    6[BANK0 ] unsigned char 
 17980 ;;  counter         1    5[BANK0 ] unsigned char 
 17981 ;; Return value:  Size  Location     Type
 17982 ;;                  2    0[BANK0 ] int 
 17983 ;; Registers used:
 17984 ;;		wreg, status,2, status,0
 17985 ;; Tracked objects:
 17986 ;;		On entry : 0/0
 17987 ;;		On exit  : 0/0
 17988 ;;		Unchanged: 0/0
 17989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17990 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17991 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17992 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17993 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17994 ;;Total ram usage:        7 bytes
 17995 ;; Hardware stack levels used:    1
 17996 ;; Hardware stack levels required when called:    3
 17997 ;; This function calls:
 17998 ;;		Nothing
 17999 ;; This function is called by:
 18000 ;;		_error
 18001 ;;		_viewErrorMessage
 18002 ;;		_itoa
 18003 ;; This function uses a non-reentrant model
 18004 ;;
 18005                           
 18006                           
 18007                           ;psect for function ___awmod
 18008  34DE                     ___awmod:	
 18009                           
 18010                           ;incstack = 0
 18011                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 18012  34DE  0140               	movlb	0	; select bank0
 18013  34DF  01A6               	clrf	___awmod@sign
 18014  34E0  1FA3               	btfss	___awmod@dividend+1,7
 18015  34E1  2CE9               	goto	l7436
 18016  34E2  09A2               	comf	___awmod@dividend,f
 18017  34E3  09A3               	comf	___awmod@dividend+1,f
 18018  34E4  0AA2               	incf	___awmod@dividend,f
 18019  34E5  1903               	skipnz
 18020  34E6  0AA3               	incf	___awmod@dividend+1,f
 18021  34E7  01A6               	clrf	___awmod@sign
 18022  34E8  0AA6               	incf	___awmod@sign,f
 18023  34E9                     l7436:	
 18024  34E9  1FA1               	btfss	___awmod@divisor+1,7
 18025  34EA  2CF0               	goto	l7440
 18026  34EB  09A0               	comf	___awmod@divisor,f
 18027  34EC  09A1               	comf	___awmod@divisor+1,f
 18028  34ED  0AA0               	incf	___awmod@divisor,f
 18029  34EE  1903               	skipnz
 18030  34EF  0AA1               	incf	___awmod@divisor+1,f
 18031  34F0                     l7440:	
 18032  34F0  0820               	movf	___awmod@divisor,w
 18033  34F1  0421               	iorwf	___awmod@divisor+1,w
 18034  34F2  1903               	btfsc	3,2
 18035  34F3  2D17               	goto	l7458
 18036  34F4  01A5               	clrf	___awmod@counter
 18037  34F5  0AA5               	incf	___awmod@counter,f
 18038  34F6                     l7448:	
 18039  34F6  1BA1               	btfsc	___awmod@divisor+1,7
 18040  34F7  2D02               	goto	l7450
 18041  34F8  3001               	movlw	1
 18042  34F9                     u8195:	
 18043  34F9  35A0               	lslf	___awmod@divisor,f
 18044  34FA  0DA1               	rlf	___awmod@divisor+1,f
 18045  34FB  0B89               	decfsz	9,f
 18046  34FC  2CF9               	goto	u8195
 18047  34FD  3001               	movlw	1
 18048  34FE  00A4               	movwf	??___awmod
 18049  34FF  0824               	movf	??___awmod,w
 18050  3500  07A5               	addwf	___awmod@counter,f
 18051  3501  2CF6               	goto	l7448
 18052  3502                     l7450:	
 18053  3502  0821               	movf	___awmod@divisor+1,w
 18054  3503  0223               	subwf	___awmod@dividend+1,w
 18055  3504  1D03               	skipz
 18056  3505  2D08               	goto	u8215
 18057  3506  0820               	movf	___awmod@divisor,w
 18058  3507  0222               	subwf	___awmod@dividend,w
 18059  3508                     u8215:	
 18060  3508  1C03               	skipc
 18061  3509  2D0E               	goto	l7454
 18062  350A  0820               	movf	___awmod@divisor,w
 18063  350B  02A2               	subwf	___awmod@dividend,f
 18064  350C  0821               	movf	___awmod@divisor+1,w
 18065  350D  3BA3               	subwfb	___awmod@dividend+1,f
 18066  350E                     l7454:	
 18067  350E  3001               	movlw	1
 18068  350F                     u8225:	
 18069  350F  36A1               	lsrf	___awmod@divisor+1,f
 18070  3510  0CA0               	rrf	___awmod@divisor,f
 18071  3511  0B89               	decfsz	9,f
 18072  3512  2D0F               	goto	u8225
 18073  3513  3001               	movlw	1
 18074  3514  02A5               	subwf	___awmod@counter,f
 18075  3515  1D03               	btfss	3,2
 18076  3516  2D02               	goto	l7450
 18077  3517                     l7458:	
 18078  3517  0826               	movf	___awmod@sign,w
 18079  3518  1903               	btfsc	3,2
 18080  3519  2D1F               	goto	l7462
 18081  351A  09A2               	comf	___awmod@dividend,f
 18082  351B  09A3               	comf	___awmod@dividend+1,f
 18083  351C  0AA2               	incf	___awmod@dividend,f
 18084  351D  1903               	skipnz
 18085  351E  0AA3               	incf	___awmod@dividend+1,f
 18086  351F                     l7462:	
 18087  351F  0823               	movf	___awmod@dividend+1,w
 18088  3520  00A1               	movwf	?___awmod+1
 18089  3521  0822               	movf	___awmod@dividend,w
 18090  3522  00A0               	movwf	?___awmod
 18091  3523  0008               	return
 18092  3524                     __end_of___awmod:	
 18093                           
 18094                           	psect	text42
 18095  285C                     __ptext42:	
 18096 ;; *************** function _ema *****************
 18097 ;; Defined at:
 18098 ;;		line 64 in file "common.c"
 18099 ;; Parameters:    Size  Location     Type
 18100 ;;  in              2   12[BANK0 ] unsigned short 
 18101 ;;  average         2   14[BANK0 ] unsigned short 
 18102 ;;  alpha           4   16[BANK0 ] unsigned long 
 18103 ;; Auto vars:     Size  Location     Type
 18104 ;;  tmp0            4   28[BANK0 ] unsigned long 
 18105 ;; Return value:  Size  Location     Type
 18106 ;;                  2   12[BANK0 ] unsigned short 
 18107 ;; Registers used:
 18108 ;;		wreg, status,2, status,0, pclath, cstack
 18109 ;; Tracked objects:
 18110 ;;		On entry : 0/0
 18111 ;;		On exit  : 0/0
 18112 ;;		Unchanged: 0/0
 18113 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18114 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18115 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18116 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18117 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18118 ;;Total ram usage:       20 bytes
 18119 ;; Hardware stack levels used:    1
 18120 ;; Hardware stack levels required when called:    4
 18121 ;; This function calls:
 18122 ;;		___lmul
 18123 ;; This function is called by:
 18124 ;;		_checkChannelStatus
 18125 ;;		_getAnalogValues
 18126 ;; This function uses a non-reentrant model
 18127 ;;
 18128                           
 18129                           
 18130                           ;psect for function _ema
 18131  285C                     _ema:	
 18132                           
 18133                           ;common.c: 64: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);common.c: 65:
      +                           {;common.c: 66:  uint32_t tmp0;;common.c: 67:  tmp0 = in * alpha + average * (65536 - a
      +                          lpha);
 18134                           
 18135                           ;incstack = 0
 18136                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 18137  285C  0140               	movlb	0	; select bank0
 18138  285D  082E               	movf	ema@average,w
 18139  285E  00A0               	movwf	___lmul@multiplier
 18140  285F  082F               	movf	ema@average+1,w
 18141  2860  00A1               	movwf	___lmul@multiplier+1
 18142  2861  01A2               	clrf	___lmul@multiplier+2
 18143  2862  01A3               	clrf	___lmul@multiplier+3
 18144  2863  3000               	movlw	0
 18145  2864  00B4               	movwf	??_ema
 18146  2865  3000               	movlw	0
 18147  2866  00B5               	movwf	??_ema+1
 18148  2867  3001               	movlw	1
 18149  2868  00B6               	movwf	??_ema+2
 18150  2869  3000               	movlw	0
 18151  286A  00B7               	movwf	??_ema+3
 18152  286B  0830               	movf	ema@alpha,w
 18153  286C  02B4               	subwf	??_ema,f
 18154  286D  0831               	movf	ema@alpha+1,w
 18155  286E  3BB5               	subwfb	??_ema+1,f
 18156  286F  0832               	movf	ema@alpha+2,w
 18157  2870  3BB6               	subwfb	??_ema+2,f
 18158  2871  0833               	movf	ema@alpha+3,w
 18159  2872  3BB7               	subwfb	??_ema+3,f
 18160  2873  0837               	movf	??_ema+3,w
 18161  2874  00A7               	movwf	___lmul@multiplicand+3
 18162  2875  0836               	movf	??_ema+2,w
 18163  2876  00A6               	movwf	___lmul@multiplicand+2
 18164  2877  0835               	movf	??_ema+1,w
 18165  2878  00A5               	movwf	___lmul@multiplicand+1
 18166  2879  0834               	movf	??_ema,w
 18167  287A  00A4               	movwf	___lmul@multiplicand
 18168  287B  31B2  22C3  31A8   	fcall	___lmul
 18169  287E  0140               	movlb	0	; select bank0
 18170  287F  0820               	movf	?___lmul,w
 18171  2880  00B8               	movwf	??_ema+4
 18172  2881  0821               	movf	?___lmul+1,w
 18173  2882  00B9               	movwf	??_ema+5
 18174  2883  0822               	movf	?___lmul+2,w
 18175  2884  00BA               	movwf	??_ema+6
 18176  2885  0823               	movf	?___lmul+3,w
 18177  2886  00BB               	movwf	??_ema+7
 18178  2887  082C               	movf	ema@in,w
 18179  2888  00A0               	movwf	___lmul@multiplier
 18180  2889  082D               	movf	ema@in+1,w
 18181  288A  00A1               	movwf	___lmul@multiplier+1
 18182  288B  01A2               	clrf	___lmul@multiplier+2
 18183  288C  01A3               	clrf	___lmul@multiplier+3
 18184  288D  0833               	movf	ema@alpha+3,w
 18185  288E  00A7               	movwf	___lmul@multiplicand+3
 18186  288F  0832               	movf	ema@alpha+2,w
 18187  2890  00A6               	movwf	___lmul@multiplicand+2
 18188  2891  0831               	movf	ema@alpha+1,w
 18189  2892  00A5               	movwf	___lmul@multiplicand+1
 18190  2893  0830               	movf	ema@alpha,w
 18191  2894  00A4               	movwf	___lmul@multiplicand
 18192  2895  31B2  22C3  31A8   	fcall	___lmul
 18193  2898  0140               	movlb	0	; select bank0
 18194  2899  0820               	movf	?___lmul,w
 18195  289A  07B8               	addwf	??_ema+4,f
 18196  289B  0821               	movf	?___lmul+1,w
 18197  289C  3DB9               	addwfc	??_ema+5,f
 18198  289D  0822               	movf	?___lmul+2,w
 18199  289E  3DBA               	addwfc	??_ema+6,f
 18200  289F  0823               	movf	?___lmul+3,w
 18201  28A0  3DBB               	addwfc	??_ema+7,f
 18202  28A1  083B               	movf	??_ema+7,w
 18203  28A2  00BF               	movwf	ema@tmp0+3
 18204  28A3  083A               	movf	??_ema+6,w
 18205  28A4  00BE               	movwf	ema@tmp0+2
 18206  28A5  0839               	movf	??_ema+5,w
 18207  28A6  00BD               	movwf	ema@tmp0+1
 18208  28A7  0838               	movf	??_ema+4,w
 18209  28A8  00BC               	movwf	ema@tmp0
 18210                           
 18211                           ;common.c: 68:  return(tmp0 + 32768) / 65536;
 18212  28A9  3000               	movlw	0
 18213  28AA  00B4               	movwf	??_ema
 18214  28AB  3080               	movlw	128
 18215  28AC  00B5               	movwf	??_ema+1
 18216  28AD  3000               	movlw	0
 18217  28AE  00B6               	movwf	??_ema+2
 18218  28AF  3000               	movlw	0
 18219  28B0  00B7               	movwf	??_ema+3
 18220  28B1  083C               	movf	ema@tmp0,w
 18221  28B2  07B4               	addwf	??_ema,f
 18222  28B3  083D               	movf	ema@tmp0+1,w
 18223  28B4  3DB5               	addwfc	??_ema+1,f
 18224  28B5  083E               	movf	ema@tmp0+2,w
 18225  28B6  3DB6               	addwfc	??_ema+2,f
 18226  28B7  083F               	movf	ema@tmp0+3,w
 18227  28B8  3DB7               	addwfc	??_ema+3,f
 18228  28B9  3010               	movlw	16
 18229  28BA                     u9915:	
 18230  28BA  36B7               	lsrf	??_ema+3,f
 18231  28BB  0CB6               	rrf	??_ema+2,f
 18232  28BC  0CB5               	rrf	??_ema+1,f
 18233  28BD  0CB4               	rrf	??_ema,f
 18234  28BE  0B89               	decfsz	9,f
 18235  28BF  28BA               	goto	u9915
 18236  28C0  0835               	movf	??_ema+1,w
 18237  28C1  00AD               	movwf	?_ema+1
 18238  28C2  0834               	movf	??_ema,w
 18239  28C3  00AC               	movwf	?_ema
 18240  28C4  0008               	return
 18241  28C5                     __end_of_ema:	
 18242                           
 18243                           	psect	text43
 18244  32C3                     __ptext43:	
 18245 ;; *************** function ___lmul *****************
 18246 ;; Defined at:
 18247 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 18248 ;; Parameters:    Size  Location     Type
 18249 ;;  multiplier      4    0[BANK0 ] unsigned long 
 18250 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 18251 ;; Auto vars:     Size  Location     Type
 18252 ;;  product         4    8[BANK0 ] unsigned long 
 18253 ;; Return value:  Size  Location     Type
 18254 ;;                  4    0[BANK0 ] unsigned long 
 18255 ;; Registers used:
 18256 ;;		wreg, status,2, status,0
 18257 ;; Tracked objects:
 18258 ;;		On entry : 0/0
 18259 ;;		On exit  : 0/0
 18260 ;;		Unchanged: 0/0
 18261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18262 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18263 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18264 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18265 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18266 ;;Total ram usage:       12 bytes
 18267 ;; Hardware stack levels used:    1
 18268 ;; Hardware stack levels required when called:    3
 18269 ;; This function calls:
 18270 ;;		Nothing
 18271 ;; This function is called by:
 18272 ;;		_ema
 18273 ;; This function uses a non-reentrant model
 18274 ;;
 18275                           
 18276                           
 18277                           ;psect for function ___lmul
 18278  32C3                     ___lmul:	
 18279                           
 18280                           ;incstack = 0
 18281                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 18282  32C3  3000               	movlw	0
 18283  32C4  0140               	movlb	0	; select bank0
 18284  32C5  00AB               	movwf	___lmul@product+3
 18285  32C6  3000               	movlw	0
 18286  32C7  00AA               	movwf	___lmul@product+2
 18287  32C8  3000               	movlw	0
 18288  32C9  00A9               	movwf	___lmul@product+1
 18289  32CA  3000               	movlw	0
 18290  32CB  00A8               	movwf	___lmul@product
 18291  32CC                     l8070:	
 18292  32CC  1C20               	btfss	___lmul@multiplier,0
 18293  32CD  2AD6               	goto	l8074
 18294  32CE  0824               	movf	___lmul@multiplicand,w
 18295  32CF  07A8               	addwf	___lmul@product,f
 18296  32D0  0825               	movf	___lmul@multiplicand+1,w
 18297  32D1  3DA9               	addwfc	___lmul@product+1,f
 18298  32D2  0826               	movf	___lmul@multiplicand+2,w
 18299  32D3  3DAA               	addwfc	___lmul@product+2,f
 18300  32D4  0827               	movf	___lmul@multiplicand+3,w
 18301  32D5  3DAB               	addwfc	___lmul@product+3,f
 18302  32D6                     l8074:	
 18303  32D6  3001               	movlw	1
 18304  32D7                     u9375:	
 18305  32D7  35A4               	lslf	___lmul@multiplicand,f
 18306  32D8  0DA5               	rlf	___lmul@multiplicand+1,f
 18307  32D9  0DA6               	rlf	___lmul@multiplicand+2,f
 18308  32DA  0DA7               	rlf	___lmul@multiplicand+3,f
 18309  32DB  0B89               	decfsz	9,f
 18310  32DC  2AD7               	goto	u9375
 18311  32DD  3001               	movlw	1
 18312  32DE                     u9385:	
 18313  32DE  36A3               	lsrf	___lmul@multiplier+3,f
 18314  32DF  0CA2               	rrf	___lmul@multiplier+2,f
 18315  32E0  0CA1               	rrf	___lmul@multiplier+1,f
 18316  32E1  0CA0               	rrf	___lmul@multiplier,f
 18317  32E2  0B89               	decfsz	9,f
 18318  32E3  2ADE               	goto	u9385
 18319  32E4  0823               	movf	___lmul@multiplier+3,w
 18320  32E5  0422               	iorwf	___lmul@multiplier+2,w
 18321  32E6  0421               	iorwf	___lmul@multiplier+1,w
 18322  32E7  0420               	iorwf	___lmul@multiplier,w
 18323  32E8  1D03               	skipz
 18324  32E9  2ACC               	goto	l8070
 18325  32EA  082B               	movf	___lmul@product+3,w
 18326  32EB  00A3               	movwf	?___lmul+3
 18327  32EC  082A               	movf	___lmul@product+2,w
 18328  32ED  00A2               	movwf	?___lmul+2
 18329  32EE  0829               	movf	___lmul@product+1,w
 18330  32EF  00A1               	movwf	?___lmul+1
 18331  32F0  0828               	movf	___lmul@product,w
 18332  32F1  00A0               	movwf	?___lmul
 18333  32F2  0008               	return
 18334  32F3                     __end_of___lmul:	
 18335                           
 18336                           	psect	text44
 18337  35FA                     __ptext44:	
 18338 ;; *************** function ___fleq *****************
 18339 ;; Defined at:
 18340 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 18341 ;; Parameters:    Size  Location     Type
 18342 ;;  ff1             4    0[BANK0 ] unsigned long 
 18343 ;;  ff2             4    4[BANK0 ] unsigned long 
 18344 ;; Auto vars:     Size  Location     Type
 18345 ;;		None
 18346 ;; Return value:  Size  Location     Type
 18347 ;;		None               void
 18348 ;; Registers used:
 18349 ;;		wreg, status,2, status,0
 18350 ;; Tracked objects:
 18351 ;;		On entry : 0/0
 18352 ;;		On exit  : 0/0
 18353 ;;		Unchanged: 0/0
 18354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18355 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18356 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18357 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18358 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18359 ;;Total ram usage:       12 bytes
 18360 ;; Hardware stack levels used:    1
 18361 ;; Hardware stack levels required when called:    3
 18362 ;; This function calls:
 18363 ;;		Nothing
 18364 ;; This function is called by:
 18365 ;;		_channelSetup
 18366 ;;		_setOutputPower
 18367 ;;		_checkChannelStatus
 18368 ;; This function uses a non-reentrant model
 18369 ;;
 18370                           
 18371                           
 18372                           ;psect for function ___fleq
 18373  35FA                     ___fleq:	
 18374                           
 18375                           ;incstack = 0
 18376                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 18377  35FA  3000               	movlw	0
 18378  35FB  0140               	movlb	0	; select bank0
 18379  35FC  0520               	andwf	___fleq@ff1,w
 18380  35FD  00A8               	movwf	??___fleq
 18381  35FE  3000               	movlw	0
 18382  35FF  0521               	andwf	___fleq@ff1+1,w
 18383  3600  00A9               	movwf	??___fleq+1
 18384  3601  3080               	movlw	128
 18385  3602  0522               	andwf	___fleq@ff1+2,w
 18386  3603  00AA               	movwf	??___fleq+2
 18387  3604  307F               	movlw	127
 18388  3605  0523               	andwf	___fleq@ff1+3,w
 18389  3606  00AB               	movwf	??___fleq+3
 18390  3607  082B               	movf	??___fleq+3,w
 18391  3608  042A               	iorwf	??___fleq+2,w
 18392  3609  0429               	iorwf	??___fleq+1,w
 18393  360A  0428               	iorwf	??___fleq,w
 18394  360B  1D03               	skipz
 18395  360C  2E15               	goto	l1285
 18396  360D  3000               	movlw	0
 18397  360E  00A3               	movwf	___fleq@ff1+3
 18398  360F  3000               	movlw	0
 18399  3610  00A2               	movwf	___fleq@ff1+2
 18400  3611  3000               	movlw	0
 18401  3612  00A1               	movwf	___fleq@ff1+1
 18402  3613  3000               	movlw	0
 18403  3614  00A0               	movwf	___fleq@ff1
 18404  3615                     l1285:	
 18405  3615  3000               	movlw	0
 18406  3616  0524               	andwf	___fleq@ff2,w
 18407  3617  00A8               	movwf	??___fleq
 18408  3618  3000               	movlw	0
 18409  3619  0525               	andwf	___fleq@ff2+1,w
 18410  361A  00A9               	movwf	??___fleq+1
 18411  361B  3080               	movlw	128
 18412  361C  0526               	andwf	___fleq@ff2+2,w
 18413  361D  00AA               	movwf	??___fleq+2
 18414  361E  307F               	movlw	127
 18415  361F  0527               	andwf	___fleq@ff2+3,w
 18416  3620  00AB               	movwf	??___fleq+3
 18417  3621  082B               	movf	??___fleq+3,w
 18418  3622  042A               	iorwf	??___fleq+2,w
 18419  3623  0429               	iorwf	??___fleq+1,w
 18420  3624  0428               	iorwf	??___fleq,w
 18421  3625  1D03               	skipz
 18422  3626  2E2F               	goto	l1286
 18423  3627  3000               	movlw	0
 18424  3628  00A7               	movwf	___fleq@ff2+3
 18425  3629  3000               	movlw	0
 18426  362A  00A6               	movwf	___fleq@ff2+2
 18427  362B  3000               	movlw	0
 18428  362C  00A5               	movwf	___fleq@ff2+1
 18429  362D  3000               	movlw	0
 18430  362E  00A4               	movwf	___fleq@ff2
 18431  362F                     l1286:	
 18432  362F  0827               	movf	___fleq@ff2+3,w
 18433  3630  0623               	xorwf	___fleq@ff1+3,w
 18434  3631  1D03               	skipz
 18435  3632  2E3D               	goto	u9425
 18436  3633  0826               	movf	___fleq@ff2+2,w
 18437  3634  0622               	xorwf	___fleq@ff1+2,w
 18438  3635  1D03               	skipz
 18439  3636  2E3D               	goto	u9425
 18440  3637  0825               	movf	___fleq@ff2+1,w
 18441  3638  0621               	xorwf	___fleq@ff1+1,w
 18442  3639  1D03               	skipz
 18443  363A  2E3D               	goto	u9425
 18444  363B  0824               	movf	___fleq@ff2,w
 18445  363C  0620               	xorwf	___fleq@ff1,w
 18446  363D                     u9425:	
 18447  363D  1903               	skipnz
 18448  363E  2E41               	goto	l8090
 18449  363F  1003               	clrc
 18450  3640  0008               	return
 18451  3641                     l8090:	
 18452  3641  1403               	setc
 18453  3642  0008               	return
 18454  3643                     __end_of___fleq:	
 18455                           
 18456                           	psect	text45
 18457  0BCC                     __ptext45:	
 18458 ;; *************** function _channelThing *****************
 18459 ;; Defined at:
 18460 ;;		line 371 in file "system.c"
 18461 ;; Parameters:    Size  Location     Type
 18462 ;;		None
 18463 ;; Auto vars:     Size  Location     Type
 18464 ;;  grpB            4   18[BANK4 ] char [4]
 18465 ;;  grpA            4   12[BANK4 ] char [4]
 18466 ;;  totalGrpB       4    8[BANK4 ] float 
 18467 ;;  totalGrpA       4    4[BANK4 ] float 
 18468 ;;  total           4    0[BANK4 ] float 
 18469 ;;  n               1   22[BANK4 ] unsigned char 
 18470 ;;  numGrpB         1   17[BANK4 ] unsigned char 
 18471 ;;  numGrpA         1   16[BANK4 ] unsigned char 
 18472 ;; Return value:  Size  Location     Type
 18473 ;;                  1    wreg      void 
 18474 ;; Registers used:
 18475 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 18476 ;; Tracked objects:
 18477 ;;		On entry : 0/0
 18478 ;;		On exit  : 0/0
 18479 ;;		Unchanged: 0/0
 18480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18482 ;;      Locals:         0       0       0       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18483 ;;      Temps:          0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18484 ;;      Totals:         0       0      11       0       0      23       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18485 ;;Total ram usage:       34 bytes
 18486 ;; Hardware stack levels used:    1
 18487 ;; Hardware stack levels required when called:    7
 18488 ;; This function calls:
 18489 ;;		___bmul
 18490 ;;		___fladd
 18491 ;;		___fldiv
 18492 ;;		___flge
 18493 ;;		___flmul
 18494 ;;		___wmul
 18495 ;;		___xxtofl
 18496 ;;		_qsort
 18497 ;; This function is called by:
 18498 ;;		_main
 18499 ;; This function uses a non-reentrant model
 18500 ;;
 18501                           
 18502                           
 18503                           ;psect for function _channelThing
 18504  0BCC                     _channelThing:	
 18505                           
 18506                           ;system.c: 373:  uint8_t n;;system.c: 374:  float total, totalGrpA, totalGrpB;;system.c:
      +                           375:  uint8_t numGrpA, numGrpB;;system.c: 376:  int8_t grpA[4], grpB[4];;system.c: 379:
      +                            for(n = 0; n < 4; n++) {
 18507                           
 18508                           ;incstack = 0
 18509                           ; Regs used in _channelThing: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 18510  0BCC  0144               	movlb	4	; select bank4
 18511  0BCD  01DD               	clrf	channelThing@n^(0+512)
 18512  0BCE                     l9172:	
 18513                           
 18514                           ;system.c: 380:   grpA[n] = -1;
 18515  0BCE  085D               	movf	channelThing@n^(0+512),w
 18516  0BCF  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18517  0BD0  0086               	movwf	6
 18518  0BD1  3002               	movlw	2	; select bank4/5
 18519  0BD2  0087               	movwf	7
 18520  0BD3  0181               	clrf	1
 18521  0BD4  0381               	decf	1,f
 18522                           
 18523                           ;system.c: 381:   grpB[n] = -1;
 18524  0BD5  085D               	movf	channelThing@n^(0+512),w
 18525  0BD6  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 18526  0BD7  0086               	movwf	6
 18527  0BD8  3002               	movlw	2	; select bank4/5
 18528  0BD9  0087               	movwf	7
 18529  0BDA  0181               	clrf	1
 18530  0BDB  0381               	decf	1,f
 18531                           
 18532                           ;system.c: 383:   virtChannels[n].phyChanNum = n;
 18533  0BDC  085D               	movf	channelThing@n^(0+512),w
 18534  0BDD  0141               	movlb	1	; select bank1
 18535  0BDE  00D3               	movwf	??_channelThing^(0+128)
 18536  0BDF  01D4               	clrf	(??_channelThing^(0+128)+1)
 18537  0BE0  3009               	movlw	9
 18538  0BE1  00D5               	movwf	(??_channelThing+2)^(0+128)
 18539  0BE2  0855               	movf	(??_channelThing+2)^(0+128),w
 18540  0BE3  0140               	movlb	0	; select bank0
 18541  0BE4  00A9               	movwf	___bmul@multiplicand
 18542  0BE5  0144               	movlb	4	; select bank4
 18543  0BE6  085D               	movf	channelThing@n^(0+512),w
 18544  0BE7  31B1  214F  318B   	fcall	___bmul
 18545  0BEA  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 18546  0BEB  0086               	movwf	6
 18547  0BEC  3002               	movlw	2	; select bank5/6
 18548  0BED  0087               	movwf	7
 18549  0BEE  0141               	movlb	1	; select bank1
 18550  0BEF  0853               	movf	??_channelThing^(0+128),w
 18551  0BF0  3FC0               	movwi [0]fsr1
 18552  0BF1  0854               	movf	(??_channelThing+1)^(0+128),w
 18553  0BF2  3FC1               	movwi [1]fsr1
 18554                           
 18555                           ;system.c: 384:   virtChannels[n].current = data.heater[n].current;
 18556  0BF3  0144               	movlb	4	; select bank4
 18557  0BF4  085D               	movf	channelThing@n^(0+512),w
 18558  0BF5  0141               	movlb	1	; select bank1
 18559  0BF6  00D3               	movwf	??_channelThing^(0+128)
 18560  0BF7  01D4               	clrf	(??_channelThing^(0+128)+1)
 18561  0BF8  0853               	movf	??_channelThing^(0+128),w
 18562  0BF9  0140               	movlb	0	; select bank0
 18563  0BFA  00AD               	movwf	___wmul@multiplier
 18564  0BFB  0141               	movlb	1	; select bank1
 18565  0BFC  0854               	movf	(??_channelThing+1)^(0+128),w
 18566  0BFD  0140               	movlb	0	; select bank0
 18567  0BFE  00AE               	movwf	___wmul@multiplier+1
 18568  0BFF  301F               	movlw	31
 18569  0C00  00AF               	movwf	___wmul@multiplicand
 18570  0C01  3000               	movlw	0
 18571  0C02  00B0               	movwf	___wmul@multiplicand+1
 18572  0C03  31B1  2161  318B   	fcall	___wmul
 18573  0C06  3074               	movlw	116
 18574  0C07  0141               	movlb	1	; select bank1
 18575  0C08  00D5               	movwf	(??_channelThing+2)^(0+128)
 18576  0C09  3027               	movlw	39
 18577  0C0A  00D6               	movwf	((??_channelThing+2)^(0+128)+1)
 18578  0C0B  0140               	movlb	0	; select bank0
 18579  0C0C  082D               	movf	?___wmul,w
 18580  0C0D  0141               	movlb	1	; select bank1
 18581  0C0E  0755               	addwf	(??_channelThing+2)^(0+128),w
 18582  0C0F  0086               	movwf	6
 18583  0C10  0140               	movlb	0	; select bank0
 18584  0C11  082E               	movf	?___wmul+1,w
 18585  0C12  0141               	movlb	1	; select bank1
 18586  0C13  3D56               	addwfc	(??_channelThing+3)^(0+128),w
 18587  0C14  0087               	movwf	7
 18588  0C15  3F40               	moviw [0]fsr1
 18589  0C16  00D7               	movwf	(??_channelThing+4)^(0+128)
 18590  0C17  3F41               	moviw [1]fsr1
 18591  0C18  00D8               	movwf	((??_channelThing+4)^(0+128)+1)
 18592  0C19  3F42               	moviw [2]fsr1
 18593  0C1A  00D9               	movwf	((??_channelThing+4)^(0+128)+2)
 18594  0C1B  3F43               	moviw [3]fsr1
 18595  0C1C  00DA               	movwf	((??_channelThing+4)^(0+128)+3)
 18596  0C1D  3009               	movlw	9
 18597  0C1E  00DB               	movwf	(??_channelThing+8)^(0+128)
 18598  0C1F  085B               	movf	(??_channelThing+8)^(0+128),w
 18599  0C20  0140               	movlb	0	; select bank0
 18600  0C21  00A9               	movwf	___bmul@multiplicand
 18601  0C22  0144               	movlb	4	; select bank4
 18602  0C23  085D               	movf	channelThing@n^(0+512),w
 18603  0C24  31B1  214F  318B   	fcall	___bmul
 18604  0C27  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18605  0C28  0086               	movwf	6
 18606  0C29  3002               	movlw	2	; select bank5/6
 18607  0C2A  0087               	movwf	7
 18608  0C2B  0141               	movlb	1	; select bank1
 18609  0C2C  0857               	movf	(??_channelThing+4)^(0+128),w
 18610  0C2D  3FC0               	movwi [0]fsr1
 18611  0C2E  0858               	movf	(??_channelThing+5)^(0+128),w
 18612  0C2F  3FC1               	movwi [1]fsr1
 18613  0C30  0859               	movf	(??_channelThing+6)^(0+128),w
 18614  0C31  3FC2               	movwi [2]fsr1
 18615  0C32  085A               	movf	(??_channelThing+7)^(0+128),w
 18616  0C33  3FC3               	movwi [3]fsr1
 18617                           
 18618                           ;system.c: 385:   virtChannels[n].DC = data.heater[n].DCreq;
 18619  0C34  0144               	movlb	4	; select bank4
 18620  0C35  085D               	movf	channelThing@n^(0+512),w
 18621  0C36  0141               	movlb	1	; select bank1
 18622  0C37  00D3               	movwf	??_channelThing^(0+128)
 18623  0C38  01D4               	clrf	(??_channelThing^(0+128)+1)
 18624  0C39  0853               	movf	??_channelThing^(0+128),w
 18625  0C3A  0140               	movlb	0	; select bank0
 18626  0C3B  00AD               	movwf	___wmul@multiplier
 18627  0C3C  0141               	movlb	1	; select bank1
 18628  0C3D  0854               	movf	(??_channelThing+1)^(0+128),w
 18629  0C3E  0140               	movlb	0	; select bank0
 18630  0C3F  00AE               	movwf	___wmul@multiplier+1
 18631  0C40  301F               	movlw	31
 18632  0C41  00AF               	movwf	___wmul@multiplicand
 18633  0C42  3000               	movlw	0
 18634  0C43  00B0               	movwf	___wmul@multiplicand+1
 18635  0C44  31B1  2161  318B   	fcall	___wmul
 18636  0C47  3088               	movlw	136
 18637  0C48  0141               	movlb	1	; select bank1
 18638  0C49  00D5               	movwf	(??_channelThing+2)^(0+128)
 18639  0C4A  3027               	movlw	39
 18640  0C4B  00D6               	movwf	((??_channelThing+2)^(0+128)+1)
 18641  0C4C  0140               	movlb	0	; select bank0
 18642  0C4D  082D               	movf	?___wmul,w
 18643  0C4E  0141               	movlb	1	; select bank1
 18644  0C4F  0755               	addwf	(??_channelThing+2)^(0+128),w
 18645  0C50  0086               	movwf	6
 18646  0C51  0140               	movlb	0	; select bank0
 18647  0C52  082E               	movf	?___wmul+1,w
 18648  0C53  0141               	movlb	1	; select bank1
 18649  0C54  3D56               	addwfc	(??_channelThing+3)^(0+128),w
 18650  0C55  0087               	movwf	7
 18651  0C56  0801               	movf	1,w
 18652  0C57  00D7               	movwf	(??_channelThing+4)^(0+128)
 18653  0C58  3009               	movlw	9
 18654  0C59  00D8               	movwf	(??_channelThing+5)^(0+128)
 18655  0C5A  0858               	movf	(??_channelThing+5)^(0+128),w
 18656  0C5B  0140               	movlb	0	; select bank0
 18657  0C5C  00A9               	movwf	___bmul@multiplicand
 18658  0C5D  0144               	movlb	4	; select bank4
 18659  0C5E  085D               	movf	channelThing@n^(0+512),w
 18660  0C5F  31B1  214F  318B   	fcall	___bmul
 18661  0C62  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 18662  0C63  0086               	movwf	6
 18663  0C64  3002               	movlw	2	; select bank5/6
 18664  0C65  0087               	movwf	7
 18665  0C66  0141               	movlb	1	; select bank1
 18666  0C67  0857               	movf	(??_channelThing+4)^(0+128),w
 18667  0C68  0081               	movwf	1
 18668                           
 18669                           ;system.c: 386:  }
 18670  0C69  3001               	movlw	1
 18671  0C6A  00D3               	movwf	??_channelThing^(0+128)
 18672  0C6B  0853               	movf	??_channelThing^(0+128),w
 18673  0C6C  0144               	movlb	4	; select bank4
 18674  0C6D  07DD               	addwf	channelThing@n^(0+512),f
 18675  0C6E  3004               	movlw	4
 18676  0C6F  025D               	subwf	channelThing@n^(0+512),w
 18677  0C70  1C03               	skipc
 18678  0C71  2BCE               	goto	l9172
 18679                           
 18680                           ;system.c: 389:  qsort(virtChannels, 4, sizeof(virtChannels[0]), sortCur);
 18681  0C72  3004               	movlw	4
 18682  0C73  0141               	movlb	1	; select bank1
 18683  0C74  00BB               	movwf	qsort@nel^(0+128)
 18684  0C75  3000               	movlw	0
 18685  0C76  00BC               	movwf	(qsort@nel^(0+128)+1)
 18686  0C77  3009               	movlw	9
 18687  0C78  00BD               	movwf	qsort@width^(0+128)
 18688  0C79  3000               	movlw	0
 18689  0C7A  00BE               	movwf	(qsort@width^(0+128)+1)
 18690  0C7B  3027               	movlw	low _sortCur
 18691  0C7C  00BF               	movwf	qsort@compar^(0+128)
 18692  0C7D  3034               	movlw	high _sortCur
 18693  0C7E  00C0               	movwf	(qsort@compar^(0+128)+1)
 18694  0C7F  30A0               	movlw	(low (_virtChannels| (0+512)))& (0+255)
 18695  0C80  319A  22A6  318B   	fcall	_qsort
 18696                           
 18697                           ;system.c: 391:  total = totalGrpA = totalGrpB = 0;
 18698  0C83  3000               	movlw	0
 18699  0C84  0144               	movlb	4	; select bank4
 18700  0C85  00D2               	movwf	(channelThing@totalGrpB+3)^(0+512)
 18701  0C86  3000               	movlw	0
 18702  0C87  00D1               	movwf	(channelThing@totalGrpB+2)^(0+512)
 18703  0C88  3000               	movlw	0
 18704  0C89  00D0               	movwf	(channelThing@totalGrpB+1)^(0+512)
 18705  0C8A  3000               	movlw	0
 18706  0C8B  00CF               	movwf	channelThing@totalGrpB^(0+512)
 18707  0C8C  0852               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18708  0C8D  00CE               	movwf	(channelThing@totalGrpA+3)^(0+512)
 18709  0C8E  0851               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18710  0C8F  00CD               	movwf	(channelThing@totalGrpA+2)^(0+512)
 18711  0C90  0850               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18712  0C91  00CC               	movwf	(channelThing@totalGrpA+1)^(0+512)
 18713  0C92  084F               	movf	channelThing@totalGrpB^(0+512),w
 18714  0C93  00CB               	movwf	channelThing@totalGrpA^(0+512)
 18715  0C94  084E               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18716  0C95  00CA               	movwf	(channelThing@total+3)^(0+512)
 18717  0C96  084D               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18718  0C97  00C9               	movwf	(channelThing@total+2)^(0+512)
 18719  0C98  084C               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18720  0C99  00C8               	movwf	(channelThing@total+1)^(0+512)
 18721  0C9A  084B               	movf	channelThing@totalGrpA^(0+512),w
 18722  0C9B  00C7               	movwf	channelThing@total^(0+512)
 18723                           
 18724                           ;system.c: 392:  numGrpA = numGrpB = 0;
 18725  0C9C  01D8               	clrf	channelThing@numGrpB^(0+512)
 18726  0C9D  01D7               	clrf	channelThing@numGrpA^(0+512)
 18727                           
 18728                           ;system.c: 396:  for(n = 0; n < 4; n++) {
 18729  0C9E  01DD               	clrf	channelThing@n^(0+512)
 18730  0C9F                     l9196:	
 18731                           
 18732                           ;system.c: 397:   total += virtChannels[n].current;
 18733  0C9F  3009               	movlw	9
 18734  0CA0  0141               	movlb	1	; select bank1
 18735  0CA1  00D3               	movwf	??_channelThing^(0+128)
 18736  0CA2  0853               	movf	??_channelThing^(0+128),w
 18737  0CA3  0140               	movlb	0	; select bank0
 18738  0CA4  00A9               	movwf	___bmul@multiplicand
 18739  0CA5  0144               	movlb	4	; select bank4
 18740  0CA6  085D               	movf	channelThing@n^(0+512),w
 18741  0CA7  31B1  214F  318B   	fcall	___bmul
 18742  0CAA  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18743  0CAB  0086               	movwf	6
 18744  0CAC  3002               	movlw	2	; select bank5/6
 18745  0CAD  0087               	movwf	7
 18746  0CAE  3F40               	moviw [0]fsr1
 18747  0CAF  0140               	movlb	0	; select bank0
 18748  0CB0  00DB               	movwf	___fladd@b
 18749  0CB1  3F41               	moviw [1]fsr1
 18750  0CB2  00DC               	movwf	___fladd@b+1
 18751  0CB3  3F42               	moviw [2]fsr1
 18752  0CB4  00DD               	movwf	___fladd@b+2
 18753  0CB5  3F43               	moviw [3]fsr1
 18754  0CB6  00DE               	movwf	___fladd@b+3
 18755  0CB7  0144               	movlb	4	; select bank4
 18756  0CB8  084A               	movf	(channelThing@total+3)^(0+512),w
 18757  0CB9  0140               	movlb	0	; select bank0
 18758  0CBA  00E2               	movwf	___fladd@a+3
 18759  0CBB  0144               	movlb	4	; select bank4
 18760  0CBC  0849               	movf	(channelThing@total+2)^(0+512),w
 18761  0CBD  0140               	movlb	0	; select bank0
 18762  0CBE  00E1               	movwf	___fladd@a+2
 18763  0CBF  0144               	movlb	4	; select bank4
 18764  0CC0  0848               	movf	(channelThing@total+1)^(0+512),w
 18765  0CC1  0140               	movlb	0	; select bank0
 18766  0CC2  00E0               	movwf	___fladd@a+1
 18767  0CC3  0144               	movlb	4	; select bank4
 18768  0CC4  0847               	movf	channelThing@total^(0+512),w
 18769  0CC5  0140               	movlb	0	; select bank0
 18770  0CC6  00DF               	movwf	___fladd@a
 18771  0CC7  3192  2232  318B   	fcall	___fladd
 18772  0CCA  0140               	movlb	0	; select bank0
 18773  0CCB  085E               	movf	?___fladd+3,w
 18774  0CCC  0144               	movlb	4	; select bank4
 18775  0CCD  00CA               	movwf	(channelThing@total+3)^(0+512)
 18776  0CCE  0140               	movlb	0	; select bank0
 18777  0CCF  085D               	movf	?___fladd+2,w
 18778  0CD0  0144               	movlb	4	; select bank4
 18779  0CD1  00C9               	movwf	(channelThing@total+2)^(0+512)
 18780  0CD2  0140               	movlb	0	; select bank0
 18781  0CD3  085C               	movf	?___fladd+1,w
 18782  0CD4  0144               	movlb	4	; select bank4
 18783  0CD5  00C8               	movwf	(channelThing@total+1)^(0+512)
 18784  0CD6  0140               	movlb	0	; select bank0
 18785  0CD7  085B               	movf	?___fladd,w
 18786  0CD8  0144               	movlb	4	; select bank4
 18787  0CD9  00C7               	movwf	channelThing@total^(0+512)
 18788                           
 18789                           ;system.c: 398:   if (totalGrpA + virtChannels[n].current <= 3.5) {
 18790  0CDA  3040               	movlw	64
 18791  0CDB  0141               	movlb	1	; select bank1
 18792  0CDC  00B0               	movwf	(___flge@ff1+3)^(0+128)
 18793  0CDD  3060               	movlw	96
 18794  0CDE  00AF               	movwf	(___flge@ff1+2)^(0+128)
 18795  0CDF  3000               	movlw	0
 18796  0CE0  00AE               	movwf	(___flge@ff1+1)^(0+128)
 18797  0CE1  3000               	movlw	0
 18798  0CE2  00AD               	movwf	___flge@ff1^(0+128)
 18799  0CE3  0144               	movlb	4	; select bank4
 18800  0CE4  084E               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18801  0CE5  0140               	movlb	0	; select bank0
 18802  0CE6  00DE               	movwf	___fladd@b+3
 18803  0CE7  0144               	movlb	4	; select bank4
 18804  0CE8  084D               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18805  0CE9  0140               	movlb	0	; select bank0
 18806  0CEA  00DD               	movwf	___fladd@b+2
 18807  0CEB  0144               	movlb	4	; select bank4
 18808  0CEC  084C               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18809  0CED  0140               	movlb	0	; select bank0
 18810  0CEE  00DC               	movwf	___fladd@b+1
 18811  0CEF  0144               	movlb	4	; select bank4
 18812  0CF0  084B               	movf	channelThing@totalGrpA^(0+512),w
 18813  0CF1  0140               	movlb	0	; select bank0
 18814  0CF2  00DB               	movwf	___fladd@b
 18815  0CF3  3009               	movlw	9
 18816  0CF4  0141               	movlb	1	; select bank1
 18817  0CF5  00D3               	movwf	??_channelThing^(0+128)
 18818  0CF6  0853               	movf	??_channelThing^(0+128),w
 18819  0CF7  0140               	movlb	0	; select bank0
 18820  0CF8  00A9               	movwf	___bmul@multiplicand
 18821  0CF9  0144               	movlb	4	; select bank4
 18822  0CFA  085D               	movf	channelThing@n^(0+512),w
 18823  0CFB  31B1  214F  318B   	fcall	___bmul
 18824  0CFE  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18825  0CFF  0086               	movwf	6
 18826  0D00  3002               	movlw	2	; select bank5/6
 18827  0D01  0087               	movwf	7
 18828  0D02  3F40               	moviw [0]fsr1
 18829  0D03  0140               	movlb	0	; select bank0
 18830  0D04  00DF               	movwf	___fladd@a
 18831  0D05  3F41               	moviw [1]fsr1
 18832  0D06  00E0               	movwf	___fladd@a+1
 18833  0D07  3F42               	moviw [2]fsr1
 18834  0D08  00E1               	movwf	___fladd@a+2
 18835  0D09  3F43               	moviw [3]fsr1
 18836  0D0A  00E2               	movwf	___fladd@a+3
 18837  0D0B  3192  2232  318B   	fcall	___fladd
 18838  0D0E  0140               	movlb	0	; select bank0
 18839  0D0F  085E               	movf	?___fladd+3,w
 18840  0D10  0141               	movlb	1	; select bank1
 18841  0D11  00B4               	movwf	(___flge@ff2+3)^(0+128)
 18842  0D12  0140               	movlb	0	; select bank0
 18843  0D13  085D               	movf	?___fladd+2,w
 18844  0D14  0141               	movlb	1	; select bank1
 18845  0D15  00B3               	movwf	(___flge@ff2+2)^(0+128)
 18846  0D16  0140               	movlb	0	; select bank0
 18847  0D17  085C               	movf	?___fladd+1,w
 18848  0D18  0141               	movlb	1	; select bank1
 18849  0D19  00B2               	movwf	(___flge@ff2+1)^(0+128)
 18850  0D1A  0140               	movlb	0	; select bank0
 18851  0D1B  085B               	movf	?___fladd,w
 18852  0D1C  0141               	movlb	1	; select bank1
 18853  0D1D  00B1               	movwf	___flge@ff2^(0+128)
 18854  0D1E  31AA  2227  318B   	fcall	___flge
 18855  0D21  1C03               	btfss	3,0
 18856  0D22  2D70               	goto	l9204
 18857                           
 18858                           ;system.c: 399:    totalGrpA += virtChannels[n].current;
 18859  0D23  3009               	movlw	9
 18860  0D24  0141               	movlb	1	; select bank1
 18861  0D25  00D3               	movwf	??_channelThing^(0+128)
 18862  0D26  0853               	movf	??_channelThing^(0+128),w
 18863  0D27  0140               	movlb	0	; select bank0
 18864  0D28  00A9               	movwf	___bmul@multiplicand
 18865  0D29  0144               	movlb	4	; select bank4
 18866  0D2A  085D               	movf	channelThing@n^(0+512),w
 18867  0D2B  31B1  214F  318B   	fcall	___bmul
 18868  0D2E  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18869  0D2F  0086               	movwf	6
 18870  0D30  3002               	movlw	2	; select bank5/6
 18871  0D31  0087               	movwf	7
 18872  0D32  3F40               	moviw [0]fsr1
 18873  0D33  0140               	movlb	0	; select bank0
 18874  0D34  00DB               	movwf	___fladd@b
 18875  0D35  3F41               	moviw [1]fsr1
 18876  0D36  00DC               	movwf	___fladd@b+1
 18877  0D37  3F42               	moviw [2]fsr1
 18878  0D38  00DD               	movwf	___fladd@b+2
 18879  0D39  3F43               	moviw [3]fsr1
 18880  0D3A  00DE               	movwf	___fladd@b+3
 18881  0D3B  0144               	movlb	4	; select bank4
 18882  0D3C  084E               	movf	(channelThing@totalGrpA+3)^(0+512),w
 18883  0D3D  0140               	movlb	0	; select bank0
 18884  0D3E  00E2               	movwf	___fladd@a+3
 18885  0D3F  0144               	movlb	4	; select bank4
 18886  0D40  084D               	movf	(channelThing@totalGrpA+2)^(0+512),w
 18887  0D41  0140               	movlb	0	; select bank0
 18888  0D42  00E1               	movwf	___fladd@a+2
 18889  0D43  0144               	movlb	4	; select bank4
 18890  0D44  084C               	movf	(channelThing@totalGrpA+1)^(0+512),w
 18891  0D45  0140               	movlb	0	; select bank0
 18892  0D46  00E0               	movwf	___fladd@a+1
 18893  0D47  0144               	movlb	4	; select bank4
 18894  0D48  084B               	movf	channelThing@totalGrpA^(0+512),w
 18895  0D49  0140               	movlb	0	; select bank0
 18896  0D4A  00DF               	movwf	___fladd@a
 18897  0D4B  3192  2232  318B   	fcall	___fladd
 18898  0D4E  0140               	movlb	0	; select bank0
 18899  0D4F  085E               	movf	?___fladd+3,w
 18900  0D50  0144               	movlb	4	; select bank4
 18901  0D51  00CE               	movwf	(channelThing@totalGrpA+3)^(0+512)
 18902  0D52  0140               	movlb	0	; select bank0
 18903  0D53  085D               	movf	?___fladd+2,w
 18904  0D54  0144               	movlb	4	; select bank4
 18905  0D55  00CD               	movwf	(channelThing@totalGrpA+2)^(0+512)
 18906  0D56  0140               	movlb	0	; select bank0
 18907  0D57  085C               	movf	?___fladd+1,w
 18908  0D58  0144               	movlb	4	; select bank4
 18909  0D59  00CC               	movwf	(channelThing@totalGrpA+1)^(0+512)
 18910  0D5A  0140               	movlb	0	; select bank0
 18911  0D5B  085B               	movf	?___fladd,w
 18912  0D5C  0144               	movlb	4	; select bank4
 18913  0D5D  00CB               	movwf	channelThing@totalGrpA^(0+512)
 18914                           
 18915                           ;system.c: 400:    grpA[numGrpA++] = n;
 18916  0D5E  085D               	movf	channelThing@n^(0+512),w
 18917  0D5F  0141               	movlb	1	; select bank1
 18918  0D60  00D3               	movwf	??_channelThing^(0+128)
 18919  0D61  0144               	movlb	4	; select bank4
 18920  0D62  0857               	movf	channelThing@numGrpA^(0+512),w
 18921  0D63  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 18922  0D64  0086               	movwf	6
 18923  0D65  3002               	movlw	2	; select bank4/5
 18924  0D66  0087               	movwf	7
 18925  0D67  0141               	movlb	1	; select bank1
 18926  0D68  0853               	movf	??_channelThing^(0+128),w
 18927  0D69  0081               	movwf	1
 18928  0D6A  3001               	movlw	1
 18929  0D6B  00D3               	movwf	??_channelThing^(0+128)
 18930  0D6C  0853               	movf	??_channelThing^(0+128),w
 18931  0D6D  0144               	movlb	4	; select bank4
 18932  0D6E  07D7               	addwf	channelThing@numGrpA^(0+512),f
 18933                           
 18934                           ;system.c: 401:   } else if (totalGrpB + virtChannels[n].current <= 3.5) {
 18935  0D6F  2E05               	goto	l9212
 18936  0D70                     l9204:	
 18937  0D70  3040               	movlw	64
 18938  0D71  0141               	movlb	1	; select bank1
 18939  0D72  00B0               	movwf	(___flge@ff1+3)^(0+128)
 18940  0D73  3060               	movlw	96
 18941  0D74  00AF               	movwf	(___flge@ff1+2)^(0+128)
 18942  0D75  3000               	movlw	0
 18943  0D76  00AE               	movwf	(___flge@ff1+1)^(0+128)
 18944  0D77  3000               	movlw	0
 18945  0D78  00AD               	movwf	___flge@ff1^(0+128)
 18946  0D79  0144               	movlb	4	; select bank4
 18947  0D7A  0852               	movf	(channelThing@totalGrpB+3)^(0+512),w
 18948  0D7B  0140               	movlb	0	; select bank0
 18949  0D7C  00DE               	movwf	___fladd@b+3
 18950  0D7D  0144               	movlb	4	; select bank4
 18951  0D7E  0851               	movf	(channelThing@totalGrpB+2)^(0+512),w
 18952  0D7F  0140               	movlb	0	; select bank0
 18953  0D80  00DD               	movwf	___fladd@b+2
 18954  0D81  0144               	movlb	4	; select bank4
 18955  0D82  0850               	movf	(channelThing@totalGrpB+1)^(0+512),w
 18956  0D83  0140               	movlb	0	; select bank0
 18957  0D84  00DC               	movwf	___fladd@b+1
 18958  0D85  0144               	movlb	4	; select bank4
 18959  0D86  084F               	movf	channelThing@totalGrpB^(0+512),w
 18960  0D87  0140               	movlb	0	; select bank0
 18961  0D88  00DB               	movwf	___fladd@b
 18962  0D89  3009               	movlw	9
 18963  0D8A  0141               	movlb	1	; select bank1
 18964  0D8B  00D3               	movwf	??_channelThing^(0+128)
 18965  0D8C  0853               	movf	??_channelThing^(0+128),w
 18966  0D8D  0140               	movlb	0	; select bank0
 18967  0D8E  00A9               	movwf	___bmul@multiplicand
 18968  0D8F  0144               	movlb	4	; select bank4
 18969  0D90  085D               	movf	channelThing@n^(0+512),w
 18970  0D91  31B1  214F  318B   	fcall	___bmul
 18971  0D94  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 18972  0D95  0086               	movwf	6
 18973  0D96  3002               	movlw	2	; select bank5/6
 18974  0D97  0087               	movwf	7
 18975  0D98  3F40               	moviw [0]fsr1
 18976  0D99  0140               	movlb	0	; select bank0
 18977  0D9A  00DF               	movwf	___fladd@a
 18978  0D9B  3F41               	moviw [1]fsr1
 18979  0D9C  00E0               	movwf	___fladd@a+1
 18980  0D9D  3F42               	moviw [2]fsr1
 18981  0D9E  00E1               	movwf	___fladd@a+2
 18982  0D9F  3F43               	moviw [3]fsr1
 18983  0DA0  00E2               	movwf	___fladd@a+3
 18984  0DA1  3192  2232  318B   	fcall	___fladd
 18985  0DA4  0140               	movlb	0	; select bank0
 18986  0DA5  085E               	movf	?___fladd+3,w
 18987  0DA6  0141               	movlb	1	; select bank1
 18988  0DA7  00B4               	movwf	(___flge@ff2+3)^(0+128)
 18989  0DA8  0140               	movlb	0	; select bank0
 18990  0DA9  085D               	movf	?___fladd+2,w
 18991  0DAA  0141               	movlb	1	; select bank1
 18992  0DAB  00B3               	movwf	(___flge@ff2+2)^(0+128)
 18993  0DAC  0140               	movlb	0	; select bank0
 18994  0DAD  085C               	movf	?___fladd+1,w
 18995  0DAE  0141               	movlb	1	; select bank1
 18996  0DAF  00B2               	movwf	(___flge@ff2+1)^(0+128)
 18997  0DB0  0140               	movlb	0	; select bank0
 18998  0DB1  085B               	movf	?___fladd,w
 18999  0DB2  0141               	movlb	1	; select bank1
 19000  0DB3  00B1               	movwf	___flge@ff2^(0+128)
 19001  0DB4  31AA  2227  318B   	fcall	___flge
 19002  0DB7  1C03               	btfss	3,0
 19003  0DB8  2E05               	goto	l9212
 19004                           
 19005                           ;system.c: 402:    totalGrpB += virtChannels[n].current;
 19006  0DB9  3009               	movlw	9
 19007  0DBA  0141               	movlb	1	; select bank1
 19008  0DBB  00D3               	movwf	??_channelThing^(0+128)
 19009  0DBC  0853               	movf	??_channelThing^(0+128),w
 19010  0DBD  0140               	movlb	0	; select bank0
 19011  0DBE  00A9               	movwf	___bmul@multiplicand
 19012  0DBF  0144               	movlb	4	; select bank4
 19013  0DC0  085D               	movf	channelThing@n^(0+512),w
 19014  0DC1  31B1  214F  318B   	fcall	___bmul
 19015  0DC4  3EA2               	addlw	(low ((_virtChannels| (0+512)+2)))& (0+255)
 19016  0DC5  0086               	movwf	6
 19017  0DC6  3002               	movlw	2	; select bank5/6
 19018  0DC7  0087               	movwf	7
 19019  0DC8  3F40               	moviw [0]fsr1
 19020  0DC9  0140               	movlb	0	; select bank0
 19021  0DCA  00DB               	movwf	___fladd@b
 19022  0DCB  3F41               	moviw [1]fsr1
 19023  0DCC  00DC               	movwf	___fladd@b+1
 19024  0DCD  3F42               	moviw [2]fsr1
 19025  0DCE  00DD               	movwf	___fladd@b+2
 19026  0DCF  3F43               	moviw [3]fsr1
 19027  0DD0  00DE               	movwf	___fladd@b+3
 19028  0DD1  0144               	movlb	4	; select bank4
 19029  0DD2  0852               	movf	(channelThing@totalGrpB+3)^(0+512),w
 19030  0DD3  0140               	movlb	0	; select bank0
 19031  0DD4  00E2               	movwf	___fladd@a+3
 19032  0DD5  0144               	movlb	4	; select bank4
 19033  0DD6  0851               	movf	(channelThing@totalGrpB+2)^(0+512),w
 19034  0DD7  0140               	movlb	0	; select bank0
 19035  0DD8  00E1               	movwf	___fladd@a+2
 19036  0DD9  0144               	movlb	4	; select bank4
 19037  0DDA  0850               	movf	(channelThing@totalGrpB+1)^(0+512),w
 19038  0DDB  0140               	movlb	0	; select bank0
 19039  0DDC  00E0               	movwf	___fladd@a+1
 19040  0DDD  0144               	movlb	4	; select bank4
 19041  0DDE  084F               	movf	channelThing@totalGrpB^(0+512),w
 19042  0DDF  0140               	movlb	0	; select bank0
 19043  0DE0  00DF               	movwf	___fladd@a
 19044  0DE1  3192  2232  318B   	fcall	___fladd
 19045  0DE4  0140               	movlb	0	; select bank0
 19046  0DE5  085E               	movf	?___fladd+3,w
 19047  0DE6  0144               	movlb	4	; select bank4
 19048  0DE7  00D2               	movwf	(channelThing@totalGrpB+3)^(0+512)
 19049  0DE8  0140               	movlb	0	; select bank0
 19050  0DE9  085D               	movf	?___fladd+2,w
 19051  0DEA  0144               	movlb	4	; select bank4
 19052  0DEB  00D1               	movwf	(channelThing@totalGrpB+2)^(0+512)
 19053  0DEC  0140               	movlb	0	; select bank0
 19054  0DED  085C               	movf	?___fladd+1,w
 19055  0DEE  0144               	movlb	4	; select bank4
 19056  0DEF  00D0               	movwf	(channelThing@totalGrpB+1)^(0+512)
 19057  0DF0  0140               	movlb	0	; select bank0
 19058  0DF1  085B               	movf	?___fladd,w
 19059  0DF2  0144               	movlb	4	; select bank4
 19060  0DF3  00CF               	movwf	channelThing@totalGrpB^(0+512)
 19061                           
 19062                           ;system.c: 403:    grpB[numGrpB++] = n;
 19063  0DF4  085D               	movf	channelThing@n^(0+512),w
 19064  0DF5  0141               	movlb	1	; select bank1
 19065  0DF6  00D3               	movwf	??_channelThing^(0+128)
 19066  0DF7  0144               	movlb	4	; select bank4
 19067  0DF8  0858               	movf	channelThing@numGrpB^(0+512),w
 19068  0DF9  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19069  0DFA  0086               	movwf	6
 19070  0DFB  3002               	movlw	2	; select bank4/5
 19071  0DFC  0087               	movwf	7
 19072  0DFD  0141               	movlb	1	; select bank1
 19073  0DFE  0853               	movf	??_channelThing^(0+128),w
 19074  0DFF  0081               	movwf	1
 19075  0E00  3001               	movlw	1
 19076  0E01  00D3               	movwf	??_channelThing^(0+128)
 19077  0E02  0853               	movf	??_channelThing^(0+128),w
 19078  0E03  0144               	movlb	4	; select bank4
 19079  0E04  07D8               	addwf	channelThing@numGrpB^(0+512),f
 19080  0E05                     l9212:	
 19081                           
 19082                           ;system.c: 405:  }
 19083  0E05  3001               	movlw	1
 19084  0E06  0141               	movlb	1	; select bank1
 19085  0E07  00D3               	movwf	??_channelThing^(0+128)
 19086  0E08  0853               	movf	??_channelThing^(0+128),w
 19087  0E09  0144               	movlb	4	; select bank4
 19088  0E0A  07DD               	addwf	channelThing@n^(0+512),f
 19089  0E0B  3004               	movlw	4
 19090  0E0C  025D               	subwf	channelThing@n^(0+512),w
 19091  0E0D  1C03               	skipc
 19092  0E0E  2C9F               	goto	l9196
 19093                           
 19094                           ;system.c: 408:  qsort(grpA, numGrpA, sizeof(grpA[0]), sortDC);
 19095  0E0F  0857               	movf	channelThing@numGrpA^(0+512),w
 19096  0E10  0141               	movlb	1	; select bank1
 19097  0E11  00D3               	movwf	??_channelThing^(0+128)
 19098  0E12  01D4               	clrf	(??_channelThing^(0+128)+1)
 19099  0E13  0853               	movf	??_channelThing^(0+128),w
 19100  0E14  00BB               	movwf	qsort@nel^(0+128)
 19101  0E15  0854               	movf	(??_channelThing+1)^(0+128),w
 19102  0E16  00BC               	movwf	(qsort@nel+1)^(0+128)
 19103  0E17  3001               	movlw	1
 19104  0E18  00BD               	movwf	qsort@width^(0+128)
 19105  0E19  3000               	movlw	0
 19106  0E1A  00BE               	movwf	(qsort@width^(0+128)+1)
 19107  0E1B  30F2               	movlw	low _sortDC
 19108  0E1C  00BF               	movwf	qsort@compar^(0+128)
 19109  0E1D  3033               	movlw	high _sortDC
 19110  0E1E  00C0               	movwf	(qsort@compar^(0+128)+1)
 19111  0E1F  3053               	movlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19112  0E20  319A  22A6  318B   	fcall	_qsort
 19113                           
 19114                           ;system.c: 409:  qsort(grpB, numGrpB, sizeof(grpB[0]), sortDCRev);
 19115  0E23  0144               	movlb	4	; select bank4
 19116  0E24  0858               	movf	channelThing@numGrpB^(0+512),w
 19117  0E25  0141               	movlb	1	; select bank1
 19118  0E26  00D3               	movwf	??_channelThing^(0+128)
 19119  0E27  01D4               	clrf	(??_channelThing^(0+128)+1)
 19120  0E28  0853               	movf	??_channelThing^(0+128),w
 19121  0E29  00BB               	movwf	qsort@nel^(0+128)
 19122  0E2A  0854               	movf	(??_channelThing+1)^(0+128),w
 19123  0E2B  00BC               	movwf	(qsort@nel+1)^(0+128)
 19124  0E2C  3001               	movlw	1
 19125  0E2D  00BD               	movwf	qsort@width^(0+128)
 19126  0E2E  3000               	movlw	0
 19127  0E2F  00BE               	movwf	(qsort@width^(0+128)+1)
 19128  0E30  30BD               	movlw	low _sortDCRev
 19129  0E31  00BF               	movwf	qsort@compar^(0+128)
 19130  0E32  3033               	movlw	high _sortDCRev
 19131  0E33  00C0               	movwf	(qsort@compar^(0+128)+1)
 19132  0E34  3059               	movlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19133  0E35  319A  22A6  318B   	fcall	_qsort
 19134                           
 19135                           ;system.c: 412:  for(n = 0; n < numGrpA; n++) {
 19136  0E38  0144               	movlb	4	; select bank4
 19137  0E39  01DD               	clrf	channelThing@n^(0+512)
 19138  0E3A                     l9228:	
 19139  0E3A  0857               	movf	channelThing@numGrpA^(0+512),w
 19140  0E3B  025D               	subwf	channelThing@n^(0+512),w
 19141  0E3C  1803               	btfsc	3,0
 19142  0E3D  2EF4               	goto	l9230
 19143                           
 19144                           ;system.c: 413:   if (grpB[n] > -1) {
 19145  0E3E  085D               	movf	channelThing@n^(0+512),w
 19146  0E3F  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19147  0E40  0086               	movwf	6
 19148  0E41  3002               	movlw	2	; select bank4/5
 19149  0E42  0087               	movwf	7
 19150  0E43  1B81               	btfsc	1,7
 19151  0E44  2EAC               	goto	l909
 19152                           
 19153                           ;system.c: 414:    if (virtChannels[grpA[n]].DC + virtChannels[grpB[n]].DC > 100)
 19154  0E45  3009               	movlw	9
 19155  0E46  0141               	movlb	1	; select bank1
 19156  0E47  00D3               	movwf	??_channelThing^(0+128)
 19157  0E48  0853               	movf	??_channelThing^(0+128),w
 19158  0E49  0140               	movlb	0	; select bank0
 19159  0E4A  00A9               	movwf	___bmul@multiplicand
 19160  0E4B  0144               	movlb	4	; select bank4
 19161  0E4C  085D               	movf	channelThing@n^(0+512),w
 19162  0E4D  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19163  0E4E  0086               	movwf	6
 19164  0E4F  3002               	movlw	2	; select bank4/5
 19165  0E50  0087               	movwf	7
 19166  0E51  0801               	movf	1,w
 19167  0E52  31B1  214F  318B   	fcall	___bmul
 19168  0E55  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19169  0E56  0086               	movwf	6
 19170  0E57  3002               	movlw	2	; select bank5/6
 19171  0E58  0087               	movwf	7
 19172  0E59  3009               	movlw	9
 19173  0E5A  0141               	movlb	1	; select bank1
 19174  0E5B  00D4               	movwf	(??_channelThing+1)^(0+128)
 19175  0E5C  0854               	movf	(??_channelThing+1)^(0+128),w
 19176  0E5D  0140               	movlb	0	; select bank0
 19177  0E5E  00A9               	movwf	___bmul@multiplicand
 19178  0E5F  0144               	movlb	4	; select bank4
 19179  0E60  085D               	movf	channelThing@n^(0+512),w
 19180  0E61  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19181  0E62  0084               	movwf	4
 19182  0E63  3002               	movlw	2	; select bank4/5
 19183  0E64  0085               	movwf	5
 19184  0E65  0800               	movf	0,w
 19185  0E66  31B1  214F  318B   	fcall	___bmul
 19186  0E69  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19187  0E6A  0084               	movwf	4
 19188  0E6B  3002               	movlw	2	; select bank5/6
 19189  0E6C  0085               	movwf	5
 19190  0E6D  0800               	movf	0,w
 19191  0E6E  0701               	addwf	1,w
 19192  0E6F  0141               	movlb	1	; select bank1
 19193  0E70  00D5               	movwf	(??_channelThing+2)^(0+128)
 19194  0E71  01D6               	clrf	((??_channelThing+2)^(0+128)+1)
 19195  0E72  0DD6               	rlf	(??_channelThing+3)^(0+128),f
 19196  0E73  0856               	movf	(??_channelThing+3)^(0+128),w
 19197  0E74  3A80               	xorlw	128
 19198  0E75  00D7               	movwf	(??_channelThing+4)^(0+128)
 19199  0E76  3080               	movlw	128
 19200  0E77  0257               	subwf	(??_channelThing+4)^(0+128),w
 19201  0E78  1D03               	skipz
 19202  0E79  2E7C               	goto	u10565
 19203  0E7A  3065               	movlw	101
 19204  0E7B  0255               	subwf	(??_channelThing+2)^(0+128),w
 19205  0E7C                     u10565:	
 19206  0E7C  1C03               	skipc
 19207  0E7D  2EAC               	goto	l909
 19208                           
 19209                           ;system.c: 415:     virtChannels[grpB[n]].DC = 100 - virtChannels[grpA[n]].DC;
 19210  0E7E  3009               	movlw	9
 19211  0E7F  0141               	movlb	1	; select bank1
 19212  0E80  00D3               	movwf	??_channelThing^(0+128)
 19213  0E81  0853               	movf	??_channelThing^(0+128),w
 19214  0E82  0140               	movlb	0	; select bank0
 19215  0E83  00A9               	movwf	___bmul@multiplicand
 19216  0E84  0144               	movlb	4	; select bank4
 19217  0E85  085D               	movf	channelThing@n^(0+512),w
 19218  0E86  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19219  0E87  0086               	movwf	6
 19220  0E88  3002               	movlw	2	; select bank4/5
 19221  0E89  0087               	movwf	7
 19222  0E8A  0801               	movf	1,w
 19223  0E8B  31B1  214F  318B   	fcall	___bmul
 19224  0E8E  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19225  0E8F  0086               	movwf	6
 19226  0E90  3002               	movlw	2	; select bank5/6
 19227  0E91  0087               	movwf	7
 19228  0E92  0801               	movf	1,w
 19229  0E93  3C64               	sublw	100
 19230  0E94  0141               	movlb	1	; select bank1
 19231  0E95  00D4               	movwf	(??_channelThing+1)^(0+128)
 19232  0E96  3009               	movlw	9
 19233  0E97  00D5               	movwf	(??_channelThing+2)^(0+128)
 19234  0E98  0855               	movf	(??_channelThing+2)^(0+128),w
 19235  0E99  0140               	movlb	0	; select bank0
 19236  0E9A  00A9               	movwf	___bmul@multiplicand
 19237  0E9B  0144               	movlb	4	; select bank4
 19238  0E9C  085D               	movf	channelThing@n^(0+512),w
 19239  0E9D  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19240  0E9E  0086               	movwf	6
 19241  0E9F  3002               	movlw	2	; select bank4/5
 19242  0EA0  0087               	movwf	7
 19243  0EA1  0801               	movf	1,w
 19244  0EA2  31B1  214F  318B   	fcall	___bmul
 19245  0EA5  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19246  0EA6  0086               	movwf	6
 19247  0EA7  3002               	movlw	2	; select bank5/6
 19248  0EA8  0087               	movwf	7
 19249  0EA9  0141               	movlb	1	; select bank1
 19250  0EAA  0854               	movf	(??_channelThing+1)^(0+128),w
 19251  0EAB  0081               	movwf	1
 19252  0EAC                     l909:	
 19253                           ;system.c: 416:   }
 19254                           
 19255                           
 19256                           ;system.c: 419:   virtChannels[grpA[n]].start = 0;
 19257  0EAC  3009               	movlw	9
 19258  0EAD  0141               	movlb	1	; select bank1
 19259  0EAE  00D3               	movwf	??_channelThing^(0+128)
 19260  0EAF  0853               	movf	??_channelThing^(0+128),w
 19261  0EB0  0140               	movlb	0	; select bank0
 19262  0EB1  00A9               	movwf	___bmul@multiplicand
 19263  0EB2  0144               	movlb	4	; select bank4
 19264  0EB3  085D               	movf	channelThing@n^(0+512),w
 19265  0EB4  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19266  0EB5  0086               	movwf	6
 19267  0EB6  3002               	movlw	2	; select bank4/5
 19268  0EB7  0087               	movwf	7
 19269  0EB8  0801               	movf	1,w
 19270  0EB9  31B1  214F  318B   	fcall	___bmul
 19271  0EBC  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 19272  0EBD  0086               	movwf	6
 19273  0EBE  3002               	movlw	2	; select bank5/6
 19274  0EBF  0087               	movwf	7
 19275  0EC0  0181               	clrf	1
 19276                           
 19277                           ;system.c: 420:   virtChannels[grpA[n]].stop = virtChannels[grpA[n]].DC;
 19278  0EC1  3009               	movlw	9
 19279  0EC2  0141               	movlb	1	; select bank1
 19280  0EC3  00D3               	movwf	??_channelThing^(0+128)
 19281  0EC4  0853               	movf	??_channelThing^(0+128),w
 19282  0EC5  0140               	movlb	0	; select bank0
 19283  0EC6  00A9               	movwf	___bmul@multiplicand
 19284  0EC7  0144               	movlb	4	; select bank4
 19285  0EC8  085D               	movf	channelThing@n^(0+512),w
 19286  0EC9  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19287  0ECA  0086               	movwf	6
 19288  0ECB  3002               	movlw	2	; select bank4/5
 19289  0ECC  0087               	movwf	7
 19290  0ECD  0801               	movf	1,w
 19291  0ECE  31B1  214F  318B   	fcall	___bmul
 19292  0ED1  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19293  0ED2  0086               	movwf	6
 19294  0ED3  3002               	movlw	2	; select bank5/6
 19295  0ED4  0087               	movwf	7
 19296  0ED5  0801               	movf	1,w
 19297  0ED6  0141               	movlb	1	; select bank1
 19298  0ED7  00D4               	movwf	(??_channelThing+1)^(0+128)
 19299  0ED8  3009               	movlw	9
 19300  0ED9  00D5               	movwf	(??_channelThing+2)^(0+128)
 19301  0EDA  0855               	movf	(??_channelThing+2)^(0+128),w
 19302  0EDB  0140               	movlb	0	; select bank0
 19303  0EDC  00A9               	movwf	___bmul@multiplicand
 19304  0EDD  0144               	movlb	4	; select bank4
 19305  0EDE  085D               	movf	channelThing@n^(0+512),w
 19306  0EDF  3E53               	addlw	(low (channelThing@grpA| (0+512)))& (0+255)
 19307  0EE0  0086               	movwf	6
 19308  0EE1  3002               	movlw	2	; select bank4/5
 19309  0EE2  0087               	movwf	7
 19310  0EE3  0801               	movf	1,w
 19311  0EE4  31B1  214F  318B   	fcall	___bmul
 19312  0EE7  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 19313  0EE8  0086               	movwf	6
 19314  0EE9  3002               	movlw	2	; select bank5/6
 19315  0EEA  0087               	movwf	7
 19316  0EEB  0141               	movlb	1	; select bank1
 19317  0EEC  0854               	movf	(??_channelThing+1)^(0+128),w
 19318  0EED  0081               	movwf	1
 19319                           
 19320                           ;system.c: 421:  }
 19321  0EEE  3001               	movlw	1
 19322  0EEF  00D3               	movwf	??_channelThing^(0+128)
 19323  0EF0  0853               	movf	??_channelThing^(0+128),w
 19324  0EF1  0144               	movlb	4	; select bank4
 19325  0EF2  07DD               	addwf	channelThing@n^(0+512),f
 19326  0EF3  2E3A               	goto	l9228
 19327  0EF4                     l9230:	
 19328                           
 19329                           ;system.c: 423:  for(n = 0; n < numGrpB; n++) {
 19330  0EF4  01DD               	clrf	channelThing@n^(0+512)
 19331  0EF5                     l9236:	
 19332  0EF5  0858               	movf	channelThing@numGrpB^(0+512),w
 19333  0EF6  025D               	subwf	channelThing@n^(0+512),w
 19334  0EF7  1803               	btfsc	3,0
 19335  0EF8  2F45               	goto	l9238
 19336                           
 19337                           ;system.c: 424:   virtChannels[grpB[n]].start = 100 - virtChannels[grpB[n]].DC ;
 19338  0EF9  3009               	movlw	9
 19339  0EFA  0141               	movlb	1	; select bank1
 19340  0EFB  00D3               	movwf	??_channelThing^(0+128)
 19341  0EFC  0853               	movf	??_channelThing^(0+128),w
 19342  0EFD  0140               	movlb	0	; select bank0
 19343  0EFE  00A9               	movwf	___bmul@multiplicand
 19344  0EFF  0144               	movlb	4	; select bank4
 19345  0F00  085D               	movf	channelThing@n^(0+512),w
 19346  0F01  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19347  0F02  0086               	movwf	6
 19348  0F03  3002               	movlw	2	; select bank4/5
 19349  0F04  0087               	movwf	7
 19350  0F05  0801               	movf	1,w
 19351  0F06  31B1  214F  318B   	fcall	___bmul
 19352  0F09  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19353  0F0A  0086               	movwf	6
 19354  0F0B  3002               	movlw	2	; select bank5/6
 19355  0F0C  0087               	movwf	7
 19356  0F0D  0801               	movf	1,w
 19357  0F0E  3C64               	sublw	100
 19358  0F0F  0141               	movlb	1	; select bank1
 19359  0F10  00D4               	movwf	(??_channelThing+1)^(0+128)
 19360  0F11  3009               	movlw	9
 19361  0F12  00D5               	movwf	(??_channelThing+2)^(0+128)
 19362  0F13  0855               	movf	(??_channelThing+2)^(0+128),w
 19363  0F14  0140               	movlb	0	; select bank0
 19364  0F15  00A9               	movwf	___bmul@multiplicand
 19365  0F16  0144               	movlb	4	; select bank4
 19366  0F17  085D               	movf	channelThing@n^(0+512),w
 19367  0F18  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19368  0F19  0086               	movwf	6
 19369  0F1A  3002               	movlw	2	; select bank4/5
 19370  0F1B  0087               	movwf	7
 19371  0F1C  0801               	movf	1,w
 19372  0F1D  31B1  214F  318B   	fcall	___bmul
 19373  0F20  3EA7               	addlw	(low ((_virtChannels| (0+512)+7)))& (0+255)
 19374  0F21  0086               	movwf	6
 19375  0F22  3002               	movlw	2	; select bank5/6
 19376  0F23  0087               	movwf	7
 19377  0F24  0141               	movlb	1	; select bank1
 19378  0F25  0854               	movf	(??_channelThing+1)^(0+128),w
 19379  0F26  0081               	movwf	1
 19380                           
 19381                           ;system.c: 425:   virtChannels[grpB[n]].stop = 100;
 19382  0F27  3064               	movlw	100
 19383  0F28  00D3               	movwf	??_channelThing^(0+128)
 19384  0F29  3009               	movlw	9
 19385  0F2A  00D4               	movwf	(??_channelThing+1)^(0+128)
 19386  0F2B  0854               	movf	(??_channelThing+1)^(0+128),w
 19387  0F2C  0140               	movlb	0	; select bank0
 19388  0F2D  00A9               	movwf	___bmul@multiplicand
 19389  0F2E  0144               	movlb	4	; select bank4
 19390  0F2F  085D               	movf	channelThing@n^(0+512),w
 19391  0F30  3E59               	addlw	(low (channelThing@grpB| (0+512)))& (0+255)
 19392  0F31  0086               	movwf	6
 19393  0F32  3002               	movlw	2	; select bank4/5
 19394  0F33  0087               	movwf	7
 19395  0F34  0801               	movf	1,w
 19396  0F35  31B1  214F  318B   	fcall	___bmul
 19397  0F38  3EA8               	addlw	(low ((_virtChannels| (0+512)+8)))& (0+255)
 19398  0F39  0086               	movwf	6
 19399  0F3A  3002               	movlw	2	; select bank5/6
 19400  0F3B  0087               	movwf	7
 19401  0F3C  0141               	movlb	1	; select bank1
 19402  0F3D  0853               	movf	??_channelThing^(0+128),w
 19403  0F3E  0081               	movwf	1
 19404                           
 19405                           ;system.c: 426:  }
 19406  0F3F  3001               	movlw	1
 19407  0F40  00D3               	movwf	??_channelThing^(0+128)
 19408  0F41  0853               	movf	??_channelThing^(0+128),w
 19409  0F42  0144               	movlb	4	; select bank4
 19410  0F43  07DD               	addwf	channelThing@n^(0+512),f
 19411  0F44  2EF5               	goto	l9236
 19412  0F45                     l9238:	
 19413                           
 19414                           ;system.c: 429:  for(n = 0; n < 4; n++) {
 19415  0F45  01DD               	clrf	channelThing@n^(0+512)
 19416  0F46                     l9244:	
 19417                           
 19418                           ;system.c: 430:   data.heater[virtChannels[n].phyChanNum].Patt =
 19419  0F46  3009               	movlw	9
 19420  0F47  0141               	movlb	1	; select bank1
 19421  0F48  00D3               	movwf	??_channelThing^(0+128)
 19422  0F49  0853               	movf	??_channelThing^(0+128),w
 19423  0F4A  0140               	movlb	0	; select bank0
 19424  0F4B  00A9               	movwf	___bmul@multiplicand
 19425  0F4C  0144               	movlb	4	; select bank4
 19426  0F4D  085D               	movf	channelThing@n^(0+512),w
 19427  0F4E  31B1  214F  318B   	fcall	___bmul
 19428  0F51  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19429  0F52  0086               	movwf	6
 19430  0F53  3002               	movlw	2	; select bank5/6
 19431  0F54  0087               	movwf	7
 19432  0F55  3F40               	moviw [0]fsr1
 19433  0F56  0140               	movlb	0	; select bank0
 19434  0F57  00AD               	movwf	___wmul@multiplier
 19435  0F58  3F41               	moviw [1]fsr1
 19436  0F59  00AE               	movwf	___wmul@multiplier+1
 19437  0F5A  301F               	movlw	31
 19438  0F5B  00AF               	movwf	___wmul@multiplicand
 19439  0F5C  3000               	movlw	0
 19440  0F5D  00B0               	movwf	___wmul@multiplicand+1
 19441  0F5E  31B1  2161  318B   	fcall	___wmul
 19442  0F61  3080               	movlw	128
 19443  0F62  0141               	movlb	1	; select bank1
 19444  0F63  00D4               	movwf	(??_channelThing+1)^(0+128)
 19445  0F64  3027               	movlw	39
 19446  0F65  00D5               	movwf	((??_channelThing+1)^(0+128)+1)
 19447  0F66  0140               	movlb	0	; select bank0
 19448  0F67  082D               	movf	?___wmul,w
 19449  0F68  0141               	movlb	1	; select bank1
 19450  0F69  0754               	addwf	(??_channelThing+1)^(0+128),w
 19451  0F6A  0086               	movwf	6
 19452  0F6B  0140               	movlb	0	; select bank0
 19453  0F6C  082E               	movf	?___wmul+1,w
 19454  0F6D  0141               	movlb	1	; select bank1
 19455  0F6E  3D55               	addwfc	(??_channelThing+2)^(0+128),w
 19456  0F6F  0087               	movwf	7
 19457  0F70  3042               	movlw	66
 19458  0F71  0140               	movlb	0	; select bank0
 19459  0F72  00DE               	movwf	___fldiv@a+3
 19460  0F73  30C8               	movlw	200
 19461  0F74  00DD               	movwf	___fldiv@a+2
 19462  0F75  3000               	movlw	0
 19463  0F76  00DC               	movwf	___fldiv@a+1
 19464  0F77  3000               	movlw	0
 19465  0F78  00DB               	movwf	___fldiv@a
 19466  0F79  301F               	movlw	31
 19467  0F7A  00AF               	movwf	___wmul@multiplicand
 19468  0F7B  3000               	movlw	0
 19469  0F7C  00B0               	movwf	___wmul@multiplicand+1
 19470  0F7D  3009               	movlw	9
 19471  0F7E  0141               	movlb	1	; select bank1
 19472  0F7F  00D6               	movwf	(??_channelThing+3)^(0+128)
 19473  0F80  0856               	movf	(??_channelThing+3)^(0+128),w
 19474  0F81  0140               	movlb	0	; select bank0
 19475  0F82  00A9               	movwf	___bmul@multiplicand
 19476  0F83  0144               	movlb	4	; select bank4
 19477  0F84  085D               	movf	channelThing@n^(0+512),w
 19478  0F85  31B1  214F  318B   	fcall	___bmul
 19479  0F88  3EA0               	addlw	(low (_virtChannels| (0+512)))& (0+255)
 19480  0F89  0084               	movwf	4
 19481  0F8A  3002               	movlw	2	; select bank5/6
 19482  0F8B  0085               	movwf	5
 19483  0F8C  3F00               	moviw [0]fsr0
 19484  0F8D  0140               	movlb	0	; select bank0
 19485  0F8E  00AD               	movwf	___wmul@multiplier
 19486  0F8F  3F01               	moviw [1]fsr0
 19487  0F90  00AE               	movwf	___wmul@multiplier+1
 19488  0F91  31B1  2161  318B   	fcall	___wmul
 19489  0F94  3078               	movlw	120
 19490  0F95  0141               	movlb	1	; select bank1
 19491  0F96  00D7               	movwf	(??_channelThing+4)^(0+128)
 19492  0F97  3027               	movlw	39
 19493  0F98  00D8               	movwf	((??_channelThing+4)^(0+128)+1)
 19494  0F99  0140               	movlb	0	; select bank0
 19495  0F9A  082D               	movf	?___wmul,w
 19496  0F9B  0141               	movlb	1	; select bank1
 19497  0F9C  0757               	addwf	(??_channelThing+4)^(0+128),w
 19498  0F9D  0084               	movwf	4
 19499  0F9E  0140               	movlb	0	; select bank0
 19500  0F9F  082E               	movf	?___wmul+1,w
 19501  0FA0  0141               	movlb	1	; select bank1
 19502  0FA1  3D58               	addwfc	(??_channelThing+5)^(0+128),w
 19503  0FA2  0085               	movwf	5
 19504  0FA3  3F00               	moviw [0]fsr0
 19505  0FA4  0140               	movlb	0	; select bank0
 19506  0FA5  00C1               	movwf	___flmul@b
 19507  0FA6  3F01               	moviw [1]fsr0
 19508  0FA7  00C2               	movwf	___flmul@b+1
 19509  0FA8  3F02               	moviw [2]fsr0
 19510  0FA9  00C3               	movwf	___flmul@b+2
 19511  0FAA  3F03               	moviw [3]fsr0
 19512  0FAB  00C4               	movwf	___flmul@b+3
 19513  0FAC  3009               	movlw	9
 19514  0FAD  0141               	movlb	1	; select bank1
 19515  0FAE  00D9               	movwf	(??_channelThing+6)^(0+128)
 19516  0FAF  0859               	movf	(??_channelThing+6)^(0+128),w
 19517  0FB0  0140               	movlb	0	; select bank0
 19518  0FB1  00A9               	movwf	___bmul@multiplicand
 19519  0FB2  0144               	movlb	4	; select bank4
 19520  0FB3  085D               	movf	channelThing@n^(0+512),w
 19521  0FB4  31B1  214F  318B   	fcall	___bmul
 19522  0FB7  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 19523  0FB8  0084               	movwf	4
 19524  0FB9  3002               	movlw	2	; select bank5/6
 19525  0FBA  0085               	movwf	5
 19526  0FBB  0800               	movf	0,w
 19527  0FBC  0141               	movlb	1	; select bank1
 19528  0FBD  00DA               	movwf	(??_channelThing+7)^(0+128)
 19529  0FBE  01DB               	clrf	((??_channelThing+7)^(0+128)+1)
 19530  0FBF  01DC               	clrf	((??_channelThing+7)^(0+128)+2)
 19531  0FC0  01DD               	clrf	((??_channelThing+7)^(0+128)+3)
 19532  0FC1  085D               	movf	(??_channelThing+10)^(0+128),w
 19533  0FC2  0140               	movlb	0	; select bank0
 19534  0FC3  00B6               	movwf	___xxtofl@val+3
 19535  0FC4  0141               	movlb	1	; select bank1
 19536  0FC5  085C               	movf	(??_channelThing+9)^(0+128),w
 19537  0FC6  0140               	movlb	0	; select bank0
 19538  0FC7  00B5               	movwf	___xxtofl@val+2
 19539  0FC8  0141               	movlb	1	; select bank1
 19540  0FC9  085B               	movf	(??_channelThing+8)^(0+128),w
 19541  0FCA  0140               	movlb	0	; select bank0
 19542  0FCB  00B4               	movwf	___xxtofl@val+1
 19543  0FCC  0141               	movlb	1	; select bank1
 19544  0FCD  085A               	movf	(??_channelThing+7)^(0+128),w
 19545  0FCE  0140               	movlb	0	; select bank0
 19546  0FCF  00B3               	movwf	___xxtofl@val
 19547  0FD0  3001               	movlw	1
 19548  0FD1  31AC  2430  318B   	fcall	___xxtofl
 19549  0FD4  0140               	movlb	0	; select bank0
 19550  0FD5  0836               	movf	?___xxtofl+3,w
 19551  0FD6  00C8               	movwf	___flmul@a+3
 19552  0FD7  0835               	movf	?___xxtofl+2,w
 19553  0FD8  00C7               	movwf	___flmul@a+2
 19554  0FD9  0834               	movf	?___xxtofl+1,w
 19555  0FDA  00C6               	movwf	___flmul@a+1
 19556  0FDB  0833               	movf	?___xxtofl,w
 19557  0FDC  00C5               	movwf	___flmul@a
 19558  0FDD  3185  2561  318B   	fcall	___flmul
 19559  0FE0  0140               	movlb	0	; select bank0
 19560  0FE1  0844               	movf	?___flmul+3,w
 19561  0FE2  00E2               	movwf	___fldiv@b+3
 19562  0FE3  0843               	movf	?___flmul+2,w
 19563  0FE4  00E1               	movwf	___fldiv@b+2
 19564  0FE5  0842               	movf	?___flmul+1,w
 19565  0FE6  00E0               	movwf	___fldiv@b+1
 19566  0FE7  0841               	movf	?___flmul,w
 19567  0FE8  00DF               	movwf	___fldiv@b
 19568  0FE9  319E  2628  318B   	fcall	___fldiv
 19569  0FEC  0140               	movlb	0	; select bank0
 19570  0FED  085B               	movf	?___fldiv,w
 19571  0FEE  3FC0               	movwi [0]fsr1
 19572  0FEF  085C               	movf	?___fldiv+1,w
 19573  0FF0  3FC1               	movwi [1]fsr1
 19574  0FF1  085D               	movf	?___fldiv+2,w
 19575  0FF2  3FC2               	movwi [2]fsr1
 19576  0FF3  085E               	movf	?___fldiv+3,w
 19577  0FF4  3FC3               	movwi [3]fsr1
 19578                           
 19579                           ;system.c: 432:  }
 19580  0FF5  3001               	movlw	1
 19581  0FF6  0141               	movlb	1	; select bank1
 19582  0FF7  00D3               	movwf	??_channelThing^(0+128)
 19583  0FF8  0853               	movf	??_channelThing^(0+128),w
 19584  0FF9  0144               	movlb	4	; select bank4
 19585  0FFA  07DD               	addwf	channelThing@n^(0+512),f
 19586  0FFB  3004               	movlw	4
 19587  0FFC  025D               	subwf	channelThing@n^(0+512),w
 19588  0FFD  1803               	btfsc	3,0
 19589  0FFE  0008               	return
 19590  0FFF  2F46               	goto	l9244
 19591  1000                     __end_of_channelThing:	
 19592                           
 19593                           	psect	text46
 19594  1AA6                     __ptext46:	
 19595 ;; *************** function _qsort *****************
 19596 ;; Defined at:
 19597 ;;		line 22 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 19598 ;; Parameters:    Size  Location     Type
 19599 ;;  vbase           1    wreg     PTR void 
 19600 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19601 ;;  nel             2   27[BANK1 ] unsigned int 
 19602 ;;  width           2   29[BANK1 ] unsigned int 
 19603 ;;  compar          2   31[BANK1 ] PTR FTN(PTR const void ,
 19604 ;;		 -> sortCur(2), sortDCRev(2), sortDC(2), 
 19605 ;; Auto vars:     Size  Location     Type
 19606 ;;  vbase           1   38[BANK1 ] PTR void 
 19607 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19608 ;;  stack          64    0[BANK3 ] struct .[16]
 19609 ;;  xbuf           60    0[BANK2 ] unsigned char [60]
 19610 ;;  j               2   49[BANK1 ] int 
 19611 ;;  i               2   47[BANK1 ] int 
 19612 ;;  s               2   45[BANK1 ] int 
 19613 ;;  r               2   43[BANK1 ] int 
 19614 ;;  l               2   41[BANK1 ] int 
 19615 ;;  base            1   40[BANK1 ] PTR unsigned char 
 19616 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 19617 ;;  x               1   39[BANK1 ] PTR unsigned char 
 19618 ;;		 -> qsort@xbuf(60), 
 19619 ;; Return value:  Size  Location     Type
 19620 ;;                  1    wreg      void 
 19621 ;; Registers used:
 19622 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19623 ;; Tracked objects:
 19624 ;;		On entry : 0/0
 19625 ;;		On exit  : 0/0
 19626 ;;		Unchanged: 0/0
 19627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19628 ;;      Params:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19629 ;;      Locals:         0       1      13      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19630 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19631 ;;      Totals:         0       1      24      60      64       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19632 ;;Total ram usage:      149 bytes
 19633 ;; Hardware stack levels used:    1
 19634 ;; Hardware stack levels required when called:    6
 19635 ;; This function calls:
 19636 ;;		___awdiv
 19637 ;;		___bmul
 19638 ;;		_memcpy
 19639 ;;		_sortCur
 19640 ;;		_sortDC
 19641 ;;		_sortDCRev
 19642 ;;		_swap
 19643 ;; This function is called by:
 19644 ;;		_channelThing
 19645 ;; This function uses a non-reentrant model
 19646 ;;
 19647                           
 19648                           
 19649                           ;psect for function _qsort
 19650  1AA6                     _qsort:	
 19651                           
 19652                           ;incstack = 0
 19653                           ; Regs used in _qsort: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19654                           ;qsort@vbase stored from wreg
 19655  1AA6  0141               	movlb	1	; select bank1
 19656  1AA7  00C6               	movwf	qsort@vbase^(0+128)
 19657  1AA8  0846               	movf	qsort@vbase^(0+128),w
 19658  1AA9  00C1               	movwf	??_qsort^(0+128)
 19659  1AAA  0841               	movf	??_qsort^(0+128),w
 19660  1AAB  00C8               	movwf	qsort@base^(0+128)
 19661  1AAC  3000               	movlw	0
 19662  1AAD  023E               	subwf	(qsort@width+1)^(0+128),w
 19663  1AAE  303C               	movlw	60
 19664  1AAF  1903               	skipnz
 19665  1AB0  023D               	subwf	qsort@width^(0+128),w
 19666  1AB1  1803               	skipnc
 19667  1AB2  0008               	return
 19668  1AB3  3020               	movlw	(low (qsort@xbuf| (0+256)))& (0+255)
 19669  1AB4  00C1               	movwf	??_qsort^(0+128)
 19670  1AB5  0841               	movf	??_qsort^(0+128),w
 19671  1AB6  00C7               	movwf	qsort@x^(0+128)
 19672  1AB7  083D               	movf	qsort@width^(0+128),w
 19673  1AB8  0747               	addwf	qsort@x^(0+128),w
 19674  1AB9  00C1               	movwf	??_qsort^(0+128)
 19675  1ABA  0841               	movf	??_qsort^(0+128),w
 19676  1ABB  0086               	movwf	6
 19677  1ABC  3001               	movlw	1	; select bank2/3
 19678  1ABD  0087               	movwf	7
 19679  1ABE  0181               	clrf	1
 19680  1ABF  01CD               	clrf	qsort@s^(0+128)
 19681  1AC0  01CE               	clrf	(qsort@s+1)^(0+128)
 19682  1AC1  0143               	movlb	3	; select bank3
 19683  1AC2  01A0               	clrf	qsort@stack^(0+384)
 19684  1AC3  01A1               	clrf	(qsort@stack+1)^(0+384)
 19685  1AC4  0141               	movlb	1	; select bank1
 19686  1AC5  083B               	movf	qsort@nel^(0+128),w
 19687  1AC6  3EFF               	addlw	255
 19688  1AC7  0143               	movlb	3	; select bank3
 19689  1AC8  00A2               	movwf	(qsort@stack^(0+384)+2)
 19690  1AC9  30FF               	movlw	255
 19691  1ACA  0141               	movlb	1	; select bank1
 19692  1ACB  3D3C               	addwfc	(qsort@nel+1)^(0+128),w
 19693  1ACC  0143               	movlb	3	; select bank3
 19694  1ACD  00A3               	movwf	((qsort@stack+1)^(0+384)+2)
 19695  1ACE                     l8638:	
 19696  1ACE  0141               	movlb	1	; select bank1
 19697  1ACF  084D               	movf	qsort@s^(0+128),w
 19698  1AD0  00C1               	movwf	??_qsort^(0+128)
 19699  1AD1  3001               	movlw	1
 19700  1AD2                     u9935:	
 19701  1AD2  35C1               	lslf	??_qsort^(0+128),f
 19702  1AD3  3EFF               	addlw	-1
 19703  1AD4  1D03               	skipz
 19704  1AD5  2AD2               	goto	u9935
 19705  1AD6  3541               	lslf	??_qsort^(0+128),w
 19706  1AD7  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19707  1AD8  0086               	movwf	6
 19708  1AD9  3001               	movlw	1	; select bank3/4
 19709  1ADA  0087               	movwf	7
 19710  1ADB  3F40               	moviw [0]fsr1
 19711  1ADC  00C9               	movwf	qsort@l^(0+128)
 19712  1ADD  3F41               	moviw [1]fsr1
 19713  1ADE  00CA               	movwf	(qsort@l+1)^(0+128)
 19714  1ADF  084D               	movf	qsort@s^(0+128),w
 19715  1AE0  00C1               	movwf	??_qsort^(0+128)
 19716  1AE1  3001               	movlw	1
 19717  1AE2                     u9945:	
 19718  1AE2  35C1               	lslf	??_qsort^(0+128),f
 19719  1AE3  3EFF               	addlw	-1
 19720  1AE4  1D03               	skipz
 19721  1AE5  2AE2               	goto	u9945
 19722  1AE6  3541               	lslf	??_qsort^(0+128),w
 19723  1AE7  3E02               	addlw	2
 19724  1AE8  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19725  1AE9  0086               	movwf	6
 19726  1AEA  3001               	movlw	1	; select bank3/4
 19727  1AEB  0087               	movwf	7
 19728  1AEC  3F40               	moviw [0]fsr1
 19729  1AED  00CB               	movwf	qsort@r^(0+128)
 19730  1AEE  3F41               	moviw [1]fsr1
 19731  1AEF  00CC               	movwf	(qsort@r+1)^(0+128)
 19732  1AF0  30FF               	movlw	255
 19733  1AF1  07CD               	addwf	qsort@s^(0+128),f
 19734  1AF2  30FF               	movlw	255
 19735  1AF3  3DCE               	addwfc	(qsort@s+1)^(0+128),f
 19736  1AF4                     l8644:	
 19737  1AF4  0141               	movlb	1	; select bank1
 19738  1AF5  084A               	movf	(qsort@l+1)^(0+128),w
 19739  1AF6  00D0               	movwf	(qsort@i+1)^(0+128)
 19740  1AF7  0849               	movf	qsort@l^(0+128),w
 19741  1AF8  00CF               	movwf	qsort@i^(0+128)
 19742  1AF9  084C               	movf	(qsort@r+1)^(0+128),w
 19743  1AFA  00D2               	movwf	(qsort@j+1)^(0+128)
 19744  1AFB  084B               	movf	qsort@r^(0+128),w
 19745  1AFC  00D1               	movwf	qsort@j^(0+128)
 19746  1AFD  083D               	movf	qsort@width^(0+128),w
 19747  1AFE  00C1               	movwf	??_qsort^(0+128)
 19748  1AFF  0841               	movf	??_qsort^(0+128),w
 19749  1B00  0140               	movlb	0	; select bank0
 19750  1B01  00A9               	movwf	___bmul@multiplicand
 19751  1B02  0141               	movlb	1	; select bank1
 19752  1B03  0851               	movf	qsort@j^(0+128),w
 19753  1B04  074F               	addwf	qsort@i^(0+128),w
 19754  1B05  0140               	movlb	0	; select bank0
 19755  1B06  00A2               	movwf	___awdiv@dividend
 19756  1B07  0141               	movlb	1	; select bank1
 19757  1B08  0852               	movf	(qsort@j+1)^(0+128),w
 19758  1B09  3D50               	addwfc	(qsort@i+1)^(0+128),w
 19759  1B0A  0140               	movlb	0	; select bank0
 19760  1B0B  00A3               	movwf	___awdiv@dividend+1
 19761  1B0C  3002               	movlw	2
 19762  1B0D  00A0               	movwf	___awdiv@divisor
 19763  1B0E  3000               	movlw	0
 19764  1B0F  00A1               	movwf	___awdiv@divisor+1
 19765  1B10  3190  2002  319A   	fcall	___awdiv
 19766  1B13  0140               	movlb	0	; select bank0
 19767  1B14  0820               	movf	?___awdiv,w
 19768  1B15  31B1  214F  319A   	fcall	___bmul
 19769  1B18  0141               	movlb	1	; select bank1
 19770  1B19  0748               	addwf	qsort@base^(0+128),w
 19771  1B1A  00C2               	movwf	(??_qsort+1)^(0+128)
 19772  1B1B  0842               	movf	(??_qsort+1)^(0+128),w
 19773  1B1C  0140               	movlb	0	; select bank0
 19774  1B1D  00AD               	movwf	memcpy@s1
 19775  1B1E  0141               	movlb	1	; select bank1
 19776  1B1F  083E               	movf	(qsort@width+1)^(0+128),w
 19777  1B20  0140               	movlb	0	; select bank0
 19778  1B21  00AF               	movwf	memcpy@n+1
 19779  1B22  0141               	movlb	1	; select bank1
 19780  1B23  083D               	movf	qsort@width^(0+128),w
 19781  1B24  0140               	movlb	0	; select bank0
 19782  1B25  00AE               	movwf	memcpy@n
 19783  1B26  0141               	movlb	1	; select bank1
 19784  1B27  0847               	movf	qsort@x^(0+128),w
 19785  1B28  31B2  2268  319A   	fcall	_memcpy
 19786  1B2B                     l8652:	
 19787  1B2B  0141               	movlb	1	; select bank1
 19788  1B2C  083D               	movf	qsort@width^(0+128),w
 19789  1B2D  00C1               	movwf	??_qsort^(0+128)
 19790  1B2E  0841               	movf	??_qsort^(0+128),w
 19791  1B2F  0140               	movlb	0	; select bank0
 19792  1B30  00A9               	movwf	___bmul@multiplicand
 19793  1B31  0141               	movlb	1	; select bank1
 19794  1B32  084F               	movf	qsort@i^(0+128),w
 19795  1B33  31B1  214F  319A   	fcall	___bmul
 19796  1B36  0141               	movlb	1	; select bank1
 19797  1B37  0748               	addwf	qsort@base^(0+128),w
 19798  1B38  00C2               	movwf	(??_qsort+1)^(0+128)
 19799  1B39  0842               	movf	(??_qsort+1)^(0+128),w
 19800  1B3A  0140               	movlb	0	; select bank0
 19801  1B3B  00EF               	movwf	_qsort$2808
 19802  1B3C  086F               	movf	_qsort$2808,w
 19803  1B3D  0141               	movlb	1	; select bank1
 19804  1B3E  00B3               	movwf	sortCur@cmp1^(0+128)
 19805  1B3F  3002               	movlw	2
 19806  1B40  00B4               	movwf	(sortCur@cmp1+1)^(0+128)
 19807  1B41  0847               	movf	qsort@x^(0+128),w
 19808  1B42  00B5               	movwf	sortCur@cmp2^(0+128)
 19809  1B43  3001               	movlw	1
 19810  1B44  00B6               	movwf	(sortCur@cmp2+1)^(0+128)
 19811  1B45  0840               	movf	(qsort@compar+1)^(0+128),w
 19812  1B46  008A               	movwf	10
 19813  1B47  083F               	movf	qsort@compar^(0+128),w
 19814  1B48  000A               	callw
 19815  1B49  319A               	pagesel	$
 19816  1B4A  0141               	movlb	1	; select bank1
 19817  1B4B  1FB4               	btfss	(?_sortCur+1)^(0+128),7
 19818  1B4C  2B56               	goto	l8658
 19819  1B4D  3001               	movlw	1
 19820  1B4E  07CF               	addwf	qsort@i^(0+128),f
 19821  1B4F  3000               	movlw	0
 19822  1B50  3DD0               	addwfc	(qsort@i+1)^(0+128),f
 19823  1B51  2B2B               	goto	l8652
 19824  1B52                     l8656:	
 19825  1B52  30FF               	movlw	255
 19826  1B53  07D1               	addwf	qsort@j^(0+128),f
 19827  1B54  30FF               	movlw	255
 19828  1B55  3DD2               	addwfc	(qsort@j+1)^(0+128),f
 19829  1B56                     l8658:	
 19830  1B56  083D               	movf	qsort@width^(0+128),w
 19831  1B57  00C1               	movwf	??_qsort^(0+128)
 19832  1B58  0841               	movf	??_qsort^(0+128),w
 19833  1B59  0140               	movlb	0	; select bank0
 19834  1B5A  00A9               	movwf	___bmul@multiplicand
 19835  1B5B  0141               	movlb	1	; select bank1
 19836  1B5C  0851               	movf	qsort@j^(0+128),w
 19837  1B5D  31B1  214F  319A   	fcall	___bmul
 19838  1B60  0141               	movlb	1	; select bank1
 19839  1B61  0748               	addwf	qsort@base^(0+128),w
 19840  1B62  00C2               	movwf	(??_qsort+1)^(0+128)
 19841  1B63  0842               	movf	(??_qsort+1)^(0+128),w
 19842  1B64  0140               	movlb	0	; select bank0
 19843  1B65  00EF               	movwf	_qsort$2808
 19844  1B66  0141               	movlb	1	; select bank1
 19845  1B67  0847               	movf	qsort@x^(0+128),w
 19846  1B68  00B3               	movwf	sortCur@cmp1^(0+128)
 19847  1B69  3001               	movlw	1
 19848  1B6A  00B4               	movwf	(sortCur@cmp1+1)^(0+128)
 19849  1B6B  0140               	movlb	0	; select bank0
 19850  1B6C  086F               	movf	_qsort$2808,w
 19851  1B6D  0141               	movlb	1	; select bank1
 19852  1B6E  00B5               	movwf	sortCur@cmp2^(0+128)
 19853  1B6F  3002               	movlw	2
 19854  1B70  00B6               	movwf	(sortCur@cmp2+1)^(0+128)
 19855  1B71  0840               	movf	(qsort@compar+1)^(0+128),w
 19856  1B72  008A               	movwf	10
 19857  1B73  083F               	movf	qsort@compar^(0+128),w
 19858  1B74  000A               	callw
 19859  1B75  319A               	pagesel	$
 19860  1B76  0141               	movlb	1	; select bank1
 19861  1B77  1BB4               	btfsc	(?_sortCur+1)^(0+128),7
 19862  1B78  2B52               	goto	l8656
 19863  1B79  0852               	movf	(qsort@j+1)^(0+128),w
 19864  1B7A  3A80               	xorlw	128
 19865  1B7B  00C1               	movwf	??_qsort^(0+128)
 19866  1B7C  0850               	movf	(qsort@i+1)^(0+128),w
 19867  1B7D  3A80               	xorlw	128
 19868  1B7E  0241               	subwf	??_qsort^(0+128),w
 19869  1B7F  1D03               	skipz
 19870  1B80  2B83               	goto	u9975
 19871  1B81  084F               	movf	qsort@i^(0+128),w
 19872  1B82  0251               	subwf	qsort@j^(0+128),w
 19873  1B83                     u9975:	
 19874  1B83  1C03               	skipc
 19875  1B84  2BBB               	goto	l8670
 19876  1B85  0141               	movlb	1	; select bank1
 19877  1B86  083E               	movf	(qsort@width+1)^(0+128),w
 19878  1B87  0140               	movlb	0	; select bank0
 19879  1B88  00AE               	movwf	swap@len+1
 19880  1B89  0141               	movlb	1	; select bank1
 19881  1B8A  083D               	movf	qsort@width^(0+128),w
 19882  1B8B  0140               	movlb	0	; select bank0
 19883  1B8C  00AD               	movwf	swap@len
 19884  1B8D  0141               	movlb	1	; select bank1
 19885  1B8E  083D               	movf	qsort@width^(0+128),w
 19886  1B8F  00C1               	movwf	??_qsort^(0+128)
 19887  1B90  0841               	movf	??_qsort^(0+128),w
 19888  1B91  0140               	movlb	0	; select bank0
 19889  1B92  00A9               	movwf	___bmul@multiplicand
 19890  1B93  0141               	movlb	1	; select bank1
 19891  1B94  084F               	movf	qsort@i^(0+128),w
 19892  1B95  31B1  214F  319A   	fcall	___bmul
 19893  1B98  0141               	movlb	1	; select bank1
 19894  1B99  0748               	addwf	qsort@base^(0+128),w
 19895  1B9A  00C2               	movwf	(??_qsort+1)^(0+128)
 19896  1B9B  0842               	movf	(??_qsort+1)^(0+128),w
 19897  1B9C  0140               	movlb	0	; select bank0
 19898  1B9D  00AF               	movwf	swap@s1
 19899  1B9E  0141               	movlb	1	; select bank1
 19900  1B9F  083D               	movf	qsort@width^(0+128),w
 19901  1BA0  00C3               	movwf	(??_qsort+2)^(0+128)
 19902  1BA1  0843               	movf	(??_qsort+2)^(0+128),w
 19903  1BA2  0140               	movlb	0	; select bank0
 19904  1BA3  00A9               	movwf	___bmul@multiplicand
 19905  1BA4  0141               	movlb	1	; select bank1
 19906  1BA5  0851               	movf	qsort@j^(0+128),w
 19907  1BA6  31B1  214F  319A   	fcall	___bmul
 19908  1BA9  0141               	movlb	1	; select bank1
 19909  1BAA  0748               	addwf	qsort@base^(0+128),w
 19910  1BAB  00C4               	movwf	(??_qsort+3)^(0+128)
 19911  1BAC  0844               	movf	(??_qsort+3)^(0+128),w
 19912  1BAD  0140               	movlb	0	; select bank0
 19913  1BAE  00B0               	movwf	swap@s2
 19914  1BAF  31B2  2294  319A   	fcall	_swap
 19915  1BB2  3001               	movlw	1
 19916  1BB3  0141               	movlb	1	; select bank1
 19917  1BB4  07CF               	addwf	qsort@i^(0+128),f
 19918  1BB5  3000               	movlw	0
 19919  1BB6  3DD0               	addwfc	(qsort@i+1)^(0+128),f
 19920  1BB7  30FF               	movlw	255
 19921  1BB8  07D1               	addwf	qsort@j^(0+128),f
 19922  1BB9  30FF               	movlw	255
 19923  1BBA  3DD2               	addwfc	(qsort@j+1)^(0+128),f
 19924  1BBB                     l8670:	
 19925  1BBB  0141               	movlb	1	; select bank1
 19926  1BBC  0852               	movf	(qsort@j+1)^(0+128),w
 19927  1BBD  3A80               	xorlw	128
 19928  1BBE  00C1               	movwf	??_qsort^(0+128)
 19929  1BBF  0850               	movf	(qsort@i+1)^(0+128),w
 19930  1BC0  3A80               	xorlw	128
 19931  1BC1  0241               	subwf	??_qsort^(0+128),w
 19932  1BC2  1D03               	skipz
 19933  1BC3  2BC6               	goto	u9985
 19934  1BC4  084F               	movf	qsort@i^(0+128),w
 19935  1BC5  0251               	subwf	qsort@j^(0+128),w
 19936  1BC6                     u9985:	
 19937  1BC6  1803               	skipnc
 19938  1BC7  2B2B               	goto	l8652
 19939  1BC8  0141               	movlb	1	; select bank1
 19940  1BC9  084F               	movf	qsort@i^(0+128),w
 19941  1BCA  024B               	subwf	qsort@r^(0+128),w
 19942  1BCB  00C1               	movwf	??_qsort^(0+128)
 19943  1BCC  0850               	movf	(qsort@i+1)^(0+128),w
 19944  1BCD  3B4C               	subwfb	(qsort@r+1)^(0+128),w
 19945  1BCE  00C2               	movwf	(??_qsort+1)^(0+128)
 19946  1BCF  0849               	movf	qsort@l^(0+128),w
 19947  1BD0  0251               	subwf	qsort@j^(0+128),w
 19948  1BD1  00C3               	movwf	(??_qsort+2)^(0+128)
 19949  1BD2  084A               	movf	(qsort@l+1)^(0+128),w
 19950  1BD3  3B52               	subwfb	(qsort@j+1)^(0+128),w
 19951  1BD4  00C4               	movwf	(??_qsort+3)^(0+128)
 19952  1BD5  0844               	movf	(??_qsort+3)^(0+128),w
 19953  1BD6  3A80               	xorlw	128
 19954  1BD7  00C5               	movwf	(??_qsort+4)^(0+128)
 19955  1BD8  0842               	movf	(??_qsort+1)^(0+128),w
 19956  1BD9  3A80               	xorlw	128
 19957  1BDA  0245               	subwf	(??_qsort+4)^(0+128),w
 19958  1BDB  1D03               	skipz
 19959  1BDC  2BDF               	goto	u9995
 19960  1BDD  0841               	movf	??_qsort^(0+128),w
 19961  1BDE  0243               	subwf	(??_qsort+2)^(0+128),w
 19962  1BDF                     u9995:	
 19963  1BDF  1803               	skipnc
 19964  1BE0  2C1A               	goto	l8680
 19965  1BE1  0141               	movlb	1	; select bank1
 19966  1BE2  0850               	movf	(qsort@i+1)^(0+128),w
 19967  1BE3  3A80               	xorlw	128
 19968  1BE4  00C1               	movwf	??_qsort^(0+128)
 19969  1BE5  084C               	movf	(qsort@r+1)^(0+128),w
 19970  1BE6  3A80               	xorlw	128
 19971  1BE7  0241               	subwf	??_qsort^(0+128),w
 19972  1BE8  1D03               	skipz
 19973  1BE9  2BEC               	goto	u10005
 19974  1BEA  084B               	movf	qsort@r^(0+128),w
 19975  1BEB  024F               	subwf	qsort@i^(0+128),w
 19976  1BEC                     u10005:	
 19977  1BEC  1803               	skipnc
 19978  1BED  2C14               	goto	l8678
 19979  1BEE  3001               	movlw	1
 19980  1BEF  0141               	movlb	1	; select bank1
 19981  1BF0  07CD               	addwf	qsort@s^(0+128),f
 19982  1BF1  3000               	movlw	0
 19983  1BF2  3DCE               	addwfc	(qsort@s+1)^(0+128),f
 19984  1BF3  084D               	movf	qsort@s^(0+128),w
 19985  1BF4  00C1               	movwf	??_qsort^(0+128)
 19986  1BF5  3001               	movlw	1
 19987  1BF6                     u10015:	
 19988  1BF6  35C1               	lslf	??_qsort^(0+128),f
 19989  1BF7  3EFF               	addlw	-1
 19990  1BF8  1D03               	skipz
 19991  1BF9  2BF6               	goto	u10015
 19992  1BFA  3541               	lslf	??_qsort^(0+128),w
 19993  1BFB  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 19994  1BFC  0086               	movwf	6
 19995  1BFD  3001               	movlw	1	; select bank3/4
 19996  1BFE  0087               	movwf	7
 19997  1BFF  084F               	movf	qsort@i^(0+128),w
 19998  1C00  3FC0               	movwi [0]fsr1
 19999  1C01  0850               	movf	(qsort@i+1)^(0+128),w
 20000  1C02  3FC1               	movwi [1]fsr1
 20001  1C03  084D               	movf	qsort@s^(0+128),w
 20002  1C04  00C1               	movwf	??_qsort^(0+128)
 20003  1C05  3001               	movlw	1
 20004  1C06                     u10025:	
 20005  1C06  35C1               	lslf	??_qsort^(0+128),f
 20006  1C07  3EFF               	addlw	-1
 20007  1C08  1D03               	skipz
 20008  1C09  2C06               	goto	u10025
 20009  1C0A  3541               	lslf	??_qsort^(0+128),w
 20010  1C0B  3E02               	addlw	2
 20011  1C0C  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20012  1C0D  0086               	movwf	6
 20013  1C0E  3001               	movlw	1	; select bank3/4
 20014  1C0F  0087               	movwf	7
 20015  1C10  084B               	movf	qsort@r^(0+128),w
 20016  1C11  3FC0               	movwi [0]fsr1
 20017  1C12  084C               	movf	(qsort@r+1)^(0+128),w
 20018  1C13  3FC1               	movwi [1]fsr1
 20019  1C14                     l8678:	
 20020  1C14  0141               	movlb	1	; select bank1
 20021  1C15  0852               	movf	(qsort@j+1)^(0+128),w
 20022  1C16  00CC               	movwf	(qsort@r+1)^(0+128)
 20023  1C17  0851               	movf	qsort@j^(0+128),w
 20024  1C18  00CB               	movwf	qsort@r^(0+128)
 20025  1C19  2C52               	goto	l8686
 20026  1C1A                     l8680:	
 20027  1C1A  0141               	movlb	1	; select bank1
 20028  1C1B  084A               	movf	(qsort@l+1)^(0+128),w
 20029  1C1C  3A80               	xorlw	128
 20030  1C1D  00C1               	movwf	??_qsort^(0+128)
 20031  1C1E  0852               	movf	(qsort@j+1)^(0+128),w
 20032  1C1F  3A80               	xorlw	128
 20033  1C20  0241               	subwf	??_qsort^(0+128),w
 20034  1C21  1D03               	skipz
 20035  1C22  2C25               	goto	u10035
 20036  1C23  0851               	movf	qsort@j^(0+128),w
 20037  1C24  0249               	subwf	qsort@l^(0+128),w
 20038  1C25                     u10035:	
 20039  1C25  1803               	skipnc
 20040  1C26  2C4D               	goto	l8684
 20041  1C27  3001               	movlw	1
 20042  1C28  0141               	movlb	1	; select bank1
 20043  1C29  07CD               	addwf	qsort@s^(0+128),f
 20044  1C2A  3000               	movlw	0
 20045  1C2B  3DCE               	addwfc	(qsort@s+1)^(0+128),f
 20046  1C2C  084D               	movf	qsort@s^(0+128),w
 20047  1C2D  00C1               	movwf	??_qsort^(0+128)
 20048  1C2E  3001               	movlw	1
 20049  1C2F                     u10045:	
 20050  1C2F  35C1               	lslf	??_qsort^(0+128),f
 20051  1C30  3EFF               	addlw	-1
 20052  1C31  1D03               	skipz
 20053  1C32  2C2F               	goto	u10045
 20054  1C33  3541               	lslf	??_qsort^(0+128),w
 20055  1C34  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20056  1C35  0086               	movwf	6
 20057  1C36  3001               	movlw	1	; select bank3/4
 20058  1C37  0087               	movwf	7
 20059  1C38  0849               	movf	qsort@l^(0+128),w
 20060  1C39  3FC0               	movwi [0]fsr1
 20061  1C3A  084A               	movf	(qsort@l+1)^(0+128),w
 20062  1C3B  3FC1               	movwi [1]fsr1
 20063  1C3C  084D               	movf	qsort@s^(0+128),w
 20064  1C3D  00C1               	movwf	??_qsort^(0+128)
 20065  1C3E  3001               	movlw	1
 20066  1C3F                     u10055:	
 20067  1C3F  35C1               	lslf	??_qsort^(0+128),f
 20068  1C40  3EFF               	addlw	-1
 20069  1C41  1D03               	skipz
 20070  1C42  2C3F               	goto	u10055
 20071  1C43  3541               	lslf	??_qsort^(0+128),w
 20072  1C44  3E02               	addlw	2
 20073  1C45  3EA0               	addlw	(low (qsort@stack| (0+256)))& (0+255)
 20074  1C46  0086               	movwf	6
 20075  1C47  3001               	movlw	1	; select bank3/4
 20076  1C48  0087               	movwf	7
 20077  1C49  0851               	movf	qsort@j^(0+128),w
 20078  1C4A  3FC0               	movwi [0]fsr1
 20079  1C4B  0852               	movf	(qsort@j+1)^(0+128),w
 20080  1C4C  3FC1               	movwi [1]fsr1
 20081  1C4D                     l8684:	
 20082  1C4D  0141               	movlb	1	; select bank1
 20083  1C4E  0850               	movf	(qsort@i+1)^(0+128),w
 20084  1C4F  00CA               	movwf	(qsort@l+1)^(0+128)
 20085  1C50  084F               	movf	qsort@i^(0+128),w
 20086  1C51  00C9               	movwf	qsort@l^(0+128)
 20087  1C52                     l8686:	
 20088  1C52  084A               	movf	(qsort@l+1)^(0+128),w
 20089  1C53  3A80               	xorlw	128
 20090  1C54  00C1               	movwf	??_qsort^(0+128)
 20091  1C55  084C               	movf	(qsort@r+1)^(0+128),w
 20092  1C56  3A80               	xorlw	128
 20093  1C57  0241               	subwf	??_qsort^(0+128),w
 20094  1C58  1D03               	skipz
 20095  1C59  2C5C               	goto	u10065
 20096  1C5A  084B               	movf	qsort@r^(0+128),w
 20097  1C5B  0249               	subwf	qsort@l^(0+128),w
 20098  1C5C                     u10065:	
 20099  1C5C  1C03               	skipc
 20100  1C5D  2AF4               	goto	l8644
 20101  1C5E  0141               	movlb	1	; select bank1
 20102  1C5F  1BCE               	btfsc	(qsort@s+1)^(0+128),7
 20103  1C60  0008               	return
 20104  1C61  2ACE               	goto	l8638
 20105  1C62                     __end_of_qsort:	
 20106                           
 20107                           	psect	text47
 20108  3294                     __ptext47:	
 20109 ;; *************** function _swap *****************
 20110 ;; Defined at:
 20111 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\qsort.c"
 20112 ;; Parameters:    Size  Location     Type
 20113 ;;  len             2   13[BANK0 ] unsigned int 
 20114 ;;  s1              1   15[BANK0 ] PTR unsigned char 
 20115 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20116 ;;  s2              1   16[BANK0 ] PTR unsigned char 
 20117 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20118 ;; Auto vars:     Size  Location     Type
 20119 ;;  c               1   18[BANK0 ] unsigned char 
 20120 ;; Return value:  Size  Location     Type
 20121 ;;                  1    wreg      void 
 20122 ;; Registers used:
 20123 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20124 ;; Tracked objects:
 20125 ;;		On entry : 0/0
 20126 ;;		On exit  : 0/0
 20127 ;;		Unchanged: 0/0
 20128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20129 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20130 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20131 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20132 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20133 ;;Total ram usage:        6 bytes
 20134 ;; Hardware stack levels used:    1
 20135 ;; Hardware stack levels required when called:    3
 20136 ;; This function calls:
 20137 ;;		Nothing
 20138 ;; This function is called by:
 20139 ;;		_qsort
 20140 ;; This function uses a non-reentrant model
 20141 ;;
 20142                           
 20143                           
 20144                           ;psect for function _swap
 20145  3294                     _swap:	
 20146  3294                     l1571:	
 20147                           ;incstack = 0
 20148                           ; Regs used in _swap: [wreg+fsr1l+fsr1h+status,2+status,0]
 20149                           
 20150  3294  3001               	movlw	1
 20151  3295  0140               	movlb	0	; select bank0
 20152  3296  02AD               	subwf	swap@len,f
 20153  3297  3000               	movlw	0
 20154  3298  3BAE               	subwfb	swap@len+1,f
 20155  3299  0A2D               	incf	swap@len,w
 20156  329A  1903               	btfsc	3,2
 20157  329B  0A2E               	incf	swap@len+1,w
 20158  329C  1903               	btfsc	3,2
 20159  329D  0008               	return
 20160  329E  082F               	movf	swap@s1,w
 20161  329F  0086               	movwf	6
 20162  32A0  3002               	movlw	2	; select bank4/5
 20163  32A1  0087               	movwf	7
 20164  32A2  0801               	movf	1,w
 20165  32A3  00B1               	movwf	??_swap
 20166  32A4  0831               	movf	??_swap,w
 20167  32A5  00B2               	movwf	swap@c
 20168  32A6  0830               	movf	swap@s2,w
 20169  32A7  0086               	movwf	6
 20170  32A8  3002               	movlw	2	; select bank4/5
 20171  32A9  0087               	movwf	7
 20172  32AA  0801               	movf	1,w
 20173  32AB  00B1               	movwf	??_swap
 20174  32AC  082F               	movf	swap@s1,w
 20175  32AD  0086               	movwf	6
 20176  32AE  3002               	movlw	2	; select bank4/5
 20177  32AF  0087               	movwf	7
 20178  32B0  0831               	movf	??_swap,w
 20179  32B1  0081               	movwf	1
 20180  32B2  3001               	movlw	1
 20181  32B3  00B1               	movwf	??_swap
 20182  32B4  0831               	movf	??_swap,w
 20183  32B5  07AF               	addwf	swap@s1,f
 20184  32B6  0832               	movf	swap@c,w
 20185  32B7  00B1               	movwf	??_swap
 20186  32B8  0830               	movf	swap@s2,w
 20187  32B9  0086               	movwf	6
 20188  32BA  3002               	movlw	2	; select bank4/5
 20189  32BB  0087               	movwf	7
 20190  32BC  0831               	movf	??_swap,w
 20191  32BD  0081               	movwf	1
 20192  32BE  3001               	movlw	1
 20193  32BF  00B1               	movwf	??_swap
 20194  32C0  0831               	movf	??_swap,w
 20195  32C1  07B0               	addwf	swap@s2,f
 20196  32C2  2A94               	goto	l1571
 20197  32C3                     __end_of_swap:	
 20198                           
 20199                           	psect	text48
 20200  3427                     __ptext48:	
 20201 ;; *************** function _sortCur *****************
 20202 ;; Defined at:
 20203 ;;		line 358 in file "system.c"
 20204 ;; Parameters:    Size  Location     Type
 20205 ;;  cmp1            2   19[BANK1 ] PTR const void 
 20206 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20207 ;;  cmp2            2   21[BANK1 ] PTR const void 
 20208 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20209 ;; Auto vars:     Size  Location     Type
 20210 ;;  b               2   25[BANK1 ] PTR struct .
 20211 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20212 ;;  a               2   23[BANK1 ] PTR struct .
 20213 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20214 ;; Return value:  Size  Location     Type
 20215 ;;                  2   19[BANK1 ] int 
 20216 ;; Registers used:
 20217 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20218 ;; Tracked objects:
 20219 ;;		On entry : 0/0
 20220 ;;		On exit  : 0/0
 20221 ;;		Unchanged: 0/0
 20222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20223 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20224 ;;      Locals:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20226 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20227 ;;Total ram usage:        8 bytes
 20228 ;; Hardware stack levels used:    1
 20229 ;; Hardware stack levels required when called:    5
 20230 ;; This function calls:
 20231 ;;		___flsub
 20232 ;;		___fltol
 20233 ;; This function is called by:
 20234 ;;		_channelThing
 20235 ;;		_qsort
 20236 ;; This function uses a non-reentrant model
 20237 ;;
 20238                           
 20239                           
 20240                           ;psect for function _sortCur
 20241  3427                     _sortCur:	
 20242                           
 20243                           ;system.c: 358: int sortCur(const void *cmp1, const void *cmp2);system.c: 359: {;system.
      +                          c: 360:  t_virtChannel *a = (t_virtChannel *)cmp1;
 20244                           
 20245                           ;incstack = 0
 20246                           ; Regs used in _sortCur: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 20247  3427  0141               	movlb	1	; select bank1
 20248  3428  0834               	movf	(sortCur@cmp1+1)^(0+128),w
 20249  3429  00B8               	movwf	(sortCur@a+1)^(0+128)
 20250  342A  0833               	movf	sortCur@cmp1^(0+128),w
 20251  342B  00B7               	movwf	sortCur@a^(0+128)
 20252                           
 20253                           ;system.c: 361:  t_virtChannel *b = (t_virtChannel *)cmp2;
 20254  342C  0836               	movf	(sortCur@cmp2+1)^(0+128),w
 20255  342D  00BA               	movwf	(sortCur@b+1)^(0+128)
 20256  342E  0835               	movf	sortCur@cmp2^(0+128),w
 20257  342F  00B9               	movwf	sortCur@b^(0+128)
 20258                           
 20259                           ;system.c: 363:  return (b->current - a->current);
 20260  3430  0839               	movf	sortCur@b^(0+128),w
 20261  3431  0086               	movwf	6
 20262  3432  083A               	movf	(sortCur@b+1)^(0+128),w
 20263  3433  0087               	movwf	7
 20264  3434  3142               	addfsr 1,2
 20265  3435  3F40               	moviw [0]fsr1
 20266  3436  00A4               	movwf	___flsub@b^(0+128)
 20267  3437  3F41               	moviw [1]fsr1
 20268  3438  00A5               	movwf	(___flsub@b+1)^(0+128)
 20269  3439  3F42               	moviw [2]fsr1
 20270  343A  00A6               	movwf	(___flsub@b+2)^(0+128)
 20271  343B  3F43               	moviw [3]fsr1
 20272  343C  00A7               	movwf	(___flsub@b+3)^(0+128)
 20273  343D  0837               	movf	sortCur@a^(0+128),w
 20274  343E  0086               	movwf	6
 20275  343F  0838               	movf	(sortCur@a+1)^(0+128),w
 20276  3440  0087               	movwf	7
 20277  3441  3142               	addfsr 1,2
 20278  3442  3F40               	moviw [0]fsr1
 20279  3443  00A0               	movwf	___flsub@a^(0+128)
 20280  3444  3F41               	moviw [1]fsr1
 20281  3445  00A1               	movwf	(___flsub@a+1)^(0+128)
 20282  3446  3F42               	moviw [2]fsr1
 20283  3447  00A2               	movwf	(___flsub@a+2)^(0+128)
 20284  3448  3F43               	moviw [3]fsr1
 20285  3449  00A3               	movwf	(___flsub@a+3)^(0+128)
 20286  344A  31B3  2388  31B4   	fcall	___flsub
 20287  344D  0141               	movlb	1	; select bank1
 20288  344E  0823               	movf	(?___flsub+3)^(0+128),w
 20289  344F  00AB               	movwf	(___fltol@f1+3)^(0+128)
 20290  3450  0822               	movf	(?___flsub+2)^(0+128),w
 20291  3451  00AA               	movwf	(___fltol@f1+2)^(0+128)
 20292  3452  0821               	movf	(?___flsub+1)^(0+128),w
 20293  3453  00A9               	movwf	(___fltol@f1+1)^(0+128)
 20294  3454  0820               	movf	?___flsub^(0+128),w
 20295  3455  00A8               	movwf	___fltol@f1^(0+128)
 20296  3456  31B7  279A         	fcall	___fltol
 20297  3458  0141               	movlb	1	; select bank1
 20298  3459  0829               	movf	(?___fltol+1)^(0+128),w
 20299  345A  00B4               	movwf	(?_sortCur+1)^(0+128)
 20300  345B  0828               	movf	?___fltol^(0+128),w
 20301  345C  00B3               	movwf	?_sortCur^(0+128)
 20302  345D  0008               	return
 20303  345E                     __end_of_sortCur:	
 20304                           
 20305                           	psect	text49
 20306  33F2                     __ptext49:	
 20307 ;; *************** function _sortDC *****************
 20308 ;; Defined at:
 20309 ;;		line 336 in file "system.c"
 20310 ;; Parameters:    Size  Location     Type
 20311 ;;  cmp1            2   19[BANK1 ] PTR const void 
 20312 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20313 ;;  cmp2            2   21[BANK1 ] PTR const void 
 20314 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20315 ;; Auto vars:     Size  Location     Type
 20316 ;;  b               1   26[BANK1 ] unsigned char 
 20317 ;;  a               1   25[BANK1 ] unsigned char 
 20318 ;; Return value:  Size  Location     Type
 20319 ;;                  2   19[BANK1 ] int 
 20320 ;; Registers used:
 20321 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20322 ;; Tracked objects:
 20323 ;;		On entry : 0/0
 20324 ;;		On exit  : 0/0
 20325 ;;		Unchanged: 0/0
 20326 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20327 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20328 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20329 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20330 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20331 ;;Total ram usage:        8 bytes
 20332 ;; Hardware stack levels used:    1
 20333 ;; Hardware stack levels required when called:    4
 20334 ;; This function calls:
 20335 ;;		___bmul
 20336 ;; This function is called by:
 20337 ;;		_channelThing
 20338 ;;		_qsort
 20339 ;; This function uses a non-reentrant model
 20340 ;;
 20341                           
 20342                           
 20343                           ;psect for function _sortDC
 20344  33F2                     _sortDC:	
 20345                           
 20346                           ;system.c: 336: int sortDC(const void *cmp1, const void *cmp2);system.c: 337: {;system.c
      +                          : 338:  uint8_t a = *(uint8_t *)cmp1;
 20347                           
 20348                           ;incstack = 0
 20349                           ; Regs used in _sortDC: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20350  33F2  0141               	movlb	1	; select bank1
 20351  33F3  0833               	movf	sortDC@cmp1^(0+128),w
 20352  33F4  0086               	movwf	6
 20353  33F5  0834               	movf	(sortDC@cmp1+1)^(0+128),w
 20354  33F6  0087               	movwf	7
 20355  33F7  0801               	movf	1,w
 20356  33F8  00B7               	movwf	??_sortDC^(0+128)
 20357  33F9  0837               	movf	??_sortDC^(0+128),w
 20358  33FA  00B9               	movwf	sortDC@a^(0+128)
 20359                           
 20360                           ;system.c: 339:  uint8_t b = *(uint8_t *)cmp2;
 20361  33FB  0835               	movf	sortDC@cmp2^(0+128),w
 20362  33FC  0086               	movwf	6
 20363  33FD  0836               	movf	(sortDC@cmp2+1)^(0+128),w
 20364  33FE  0087               	movwf	7
 20365  33FF  0801               	movf	1,w
 20366  3400  00B7               	movwf	??_sortDC^(0+128)
 20367  3401  0837               	movf	??_sortDC^(0+128),w
 20368  3402  00BA               	movwf	sortDC@b^(0+128)
 20369                           
 20370                           ;system.c: 341:  return (virtChannels[b].DC - virtChannels[a].DC);
 20371  3403  3009               	movlw	9
 20372  3404  00B7               	movwf	??_sortDC^(0+128)
 20373  3405  0837               	movf	??_sortDC^(0+128),w
 20374  3406  0140               	movlb	0	; select bank0
 20375  3407  00A9               	movwf	___bmul@multiplicand
 20376  3408  0141               	movlb	1	; select bank1
 20377  3409  083A               	movf	sortDC@b^(0+128),w
 20378  340A  31B1  214F  31B3   	fcall	___bmul
 20379  340D  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20380  340E  0086               	movwf	6
 20381  340F  3002               	movlw	2	; select bank5/6
 20382  3410  0087               	movwf	7
 20383  3411  3009               	movlw	9
 20384  3412  0141               	movlb	1	; select bank1
 20385  3413  00B8               	movwf	(??_sortDC+1)^(0+128)
 20386  3414  0838               	movf	(??_sortDC+1)^(0+128),w
 20387  3415  0140               	movlb	0	; select bank0
 20388  3416  00A9               	movwf	___bmul@multiplicand
 20389  3417  0141               	movlb	1	; select bank1
 20390  3418  0839               	movf	sortDC@a^(0+128),w
 20391  3419  31B1  214F         	fcall	___bmul
 20392  341B  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20393  341C  0084               	movwf	4
 20394  341D  3002               	movlw	2	; select bank5/6
 20395  341E  0085               	movwf	5
 20396  341F  0800               	movf	0,w
 20397  3420  0201               	subwf	1,w
 20398  3421  0141               	movlb	1	; select bank1
 20399  3422  00B3               	movwf	?_sortDC^(0+128)
 20400  3423  01B4               	clrf	(?_sortDC^(0+128)+1)
 20401  3424  1C03               	skipc
 20402  3425  03B4               	decf	(?_sortDC+1)^(0+128),f
 20403  3426  0008               	return
 20404  3427                     __end_of_sortDC:	
 20405                           
 20406                           	psect	text50
 20407  33BD                     __ptext50:	
 20408 ;; *************** function _sortDCRev *****************
 20409 ;; Defined at:
 20410 ;;		line 347 in file "system.c"
 20411 ;; Parameters:    Size  Location     Type
 20412 ;;  cmp1            2   19[BANK1 ] PTR const void 
 20413 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20414 ;;  cmp2            2   21[BANK1 ] PTR const void 
 20415 ;;		 -> qsort@xbuf(60), channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20416 ;; Auto vars:     Size  Location     Type
 20417 ;;  b               1   26[BANK1 ] unsigned char 
 20418 ;;  a               1   25[BANK1 ] unsigned char 
 20419 ;; Return value:  Size  Location     Type
 20420 ;;                  2   19[BANK1 ] int 
 20421 ;; Registers used:
 20422 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 20423 ;; Tracked objects:
 20424 ;;		On entry : 0/0
 20425 ;;		On exit  : 0/0
 20426 ;;		Unchanged: 0/0
 20427 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20428 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20429 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20430 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20431 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20432 ;;Total ram usage:        8 bytes
 20433 ;; Hardware stack levels used:    1
 20434 ;; Hardware stack levels required when called:    4
 20435 ;; This function calls:
 20436 ;;		___bmul
 20437 ;; This function is called by:
 20438 ;;		_channelThing
 20439 ;;		_qsort
 20440 ;; This function uses a non-reentrant model
 20441 ;;
 20442                           
 20443                           
 20444                           ;psect for function _sortDCRev
 20445  33BD                     _sortDCRev:	
 20446                           
 20447                           ;system.c: 347: int sortDCRev(const void *cmp1, const void *cmp2);system.c: 348: {;syste
      +                          m.c: 349:  uint8_t a = *(uint8_t *)cmp1;
 20448                           
 20449                           ;incstack = 0
 20450                           ; Regs used in _sortDCRev: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 20451  33BD  0141               	movlb	1	; select bank1
 20452  33BE  0833               	movf	sortDCRev@cmp1^(0+128),w
 20453  33BF  0086               	movwf	6
 20454  33C0  0834               	movf	(sortDCRev@cmp1+1)^(0+128),w
 20455  33C1  0087               	movwf	7
 20456  33C2  0801               	movf	1,w
 20457  33C3  00B7               	movwf	??_sortDCRev^(0+128)
 20458  33C4  0837               	movf	??_sortDCRev^(0+128),w
 20459  33C5  00B9               	movwf	sortDCRev@a^(0+128)
 20460                           
 20461                           ;system.c: 350:  uint8_t b = *(uint8_t *)cmp2;
 20462  33C6  0835               	movf	sortDCRev@cmp2^(0+128),w
 20463  33C7  0086               	movwf	6
 20464  33C8  0836               	movf	(sortDCRev@cmp2+1)^(0+128),w
 20465  33C9  0087               	movwf	7
 20466  33CA  0801               	movf	1,w
 20467  33CB  00B7               	movwf	??_sortDCRev^(0+128)
 20468  33CC  0837               	movf	??_sortDCRev^(0+128),w
 20469  33CD  00BA               	movwf	sortDCRev@b^(0+128)
 20470                           
 20471                           ;system.c: 352:  return (virtChannels[a].DC - virtChannels[b].DC);
 20472  33CE  3009               	movlw	9
 20473  33CF  00B7               	movwf	??_sortDCRev^(0+128)
 20474  33D0  0837               	movf	??_sortDCRev^(0+128),w
 20475  33D1  0140               	movlb	0	; select bank0
 20476  33D2  00A9               	movwf	___bmul@multiplicand
 20477  33D3  0141               	movlb	1	; select bank1
 20478  33D4  0839               	movf	sortDCRev@a^(0+128),w
 20479  33D5  31B1  214F  31B3   	fcall	___bmul
 20480  33D8  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20481  33D9  0086               	movwf	6
 20482  33DA  3002               	movlw	2	; select bank5/6
 20483  33DB  0087               	movwf	7
 20484  33DC  3009               	movlw	9
 20485  33DD  0141               	movlb	1	; select bank1
 20486  33DE  00B8               	movwf	(??_sortDCRev+1)^(0+128)
 20487  33DF  0838               	movf	(??_sortDCRev+1)^(0+128),w
 20488  33E0  0140               	movlb	0	; select bank0
 20489  33E1  00A9               	movwf	___bmul@multiplicand
 20490  33E2  0141               	movlb	1	; select bank1
 20491  33E3  083A               	movf	sortDCRev@b^(0+128),w
 20492  33E4  31B1  214F         	fcall	___bmul
 20493  33E6  3EA6               	addlw	(low ((_virtChannels| (0+512)+6)))& (0+255)
 20494  33E7  0084               	movwf	4
 20495  33E8  3002               	movlw	2	; select bank5/6
 20496  33E9  0085               	movwf	5
 20497  33EA  0800               	movf	0,w
 20498  33EB  0201               	subwf	1,w
 20499  33EC  0141               	movlb	1	; select bank1
 20500  33ED  00B3               	movwf	?_sortDCRev^(0+128)
 20501  33EE  01B4               	clrf	(?_sortDCRev^(0+128)+1)
 20502  33EF  1C03               	skipc
 20503  33F0  03B4               	decf	(?_sortDCRev+1)^(0+128),f
 20504  33F1  0008               	return
 20505  33F2                     __end_of_sortDCRev:	
 20506                           
 20507                           	psect	text51
 20508  314F                     __ptext51:	
 20509 ;; *************** function ___bmul *****************
 20510 ;; Defined at:
 20511 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8.c"
 20512 ;; Parameters:    Size  Location     Type
 20513 ;;  multiplier      1    wreg     unsigned char 
 20514 ;;  multiplicand    1    9[BANK0 ] unsigned char 
 20515 ;; Auto vars:     Size  Location     Type
 20516 ;;  multiplier      1   12[BANK0 ] unsigned char 
 20517 ;;  product         1   11[BANK0 ] unsigned char 
 20518 ;; Return value:  Size  Location     Type
 20519 ;;                  1    wreg      unsigned char 
 20520 ;; Registers used:
 20521 ;;		wreg, status,2, status,0
 20522 ;; Tracked objects:
 20523 ;;		On entry : 0/0
 20524 ;;		On exit  : 0/0
 20525 ;;		Unchanged: 0/0
 20526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20527 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20528 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20529 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20530 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20531 ;;Total ram usage:        4 bytes
 20532 ;; Hardware stack levels used:    1
 20533 ;; Hardware stack levels required when called:    3
 20534 ;; This function calls:
 20535 ;;		Nothing
 20536 ;; This function is called by:
 20537 ;;		_channelView
 20538 ;;		_sortDC
 20539 ;;		_sortDCRev
 20540 ;;		_channelThing
 20541 ;;		_controller
 20542 ;;		_qsort
 20543 ;; This function uses a non-reentrant model
 20544 ;;
 20545                           
 20546                           
 20547                           ;psect for function ___bmul
 20548  314F                     ___bmul:	
 20549                           
 20550                           ;incstack = 0
 20551                           ; Regs used in ___bmul: [wreg+status,2+status,0]
 20552                           ;___bmul@multiplier stored from wreg
 20553  314F  0140               	movlb	0	; select bank0
 20554  3150  00AC               	movwf	___bmul@multiplier
 20555  3151  01AB               	clrf	___bmul@product
 20556  3152                     l7372:	
 20557  3152  1C2C               	btfss	___bmul@multiplier,0
 20558  3153  2958               	goto	l7376
 20559  3154  0829               	movf	___bmul@multiplicand,w
 20560  3155  00AA               	movwf	??___bmul
 20561  3156  082A               	movf	??___bmul,w
 20562  3157  07AB               	addwf	___bmul@product,f
 20563  3158                     l7376:	
 20564  3158  1003               	clrc
 20565  3159  0DA9               	rlf	___bmul@multiplicand,f
 20566  315A  1003               	clrc
 20567  315B  0CAC               	rrf	___bmul@multiplier,f
 20568  315C  082C               	movf	___bmul@multiplier,w
 20569  315D  1D03               	btfss	3,2
 20570  315E  2952               	goto	l7372
 20571  315F  082B               	movf	___bmul@product,w
 20572  3160  0008               	return
 20573  3161                     __end_of___bmul:	
 20574                           
 20575                           	psect	text52
 20576  379A                     __ptext52:	
 20577 ;; *************** function ___fltol *****************
 20578 ;; Defined at:
 20579 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 20580 ;; Parameters:    Size  Location     Type
 20581 ;;  f1              4    8[BANK1 ] unsigned char 
 20582 ;; Auto vars:     Size  Location     Type
 20583 ;;  exp1            1   18[BANK1 ] unsigned char 
 20584 ;;  sign1           1   17[BANK1 ] unsigned char 
 20585 ;; Return value:  Size  Location     Type
 20586 ;;                  4    8[BANK1 ] long 
 20587 ;; Registers used:
 20588 ;;		wreg, status,2, status,0
 20589 ;; Tracked objects:
 20590 ;;		On entry : 0/0
 20591 ;;		On exit  : 0/0
 20592 ;;		Unchanged: 0/0
 20593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20594 ;;      Params:         0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20595 ;;      Locals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20596 ;;      Temps:          0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20597 ;;      Totals:         0       0      11       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20598 ;;Total ram usage:       11 bytes
 20599 ;; Hardware stack levels used:    1
 20600 ;; Hardware stack levels required when called:    3
 20601 ;; This function calls:
 20602 ;;		Nothing
 20603 ;; This function is called by:
 20604 ;;		_checkChannelStatus
 20605 ;;		_sortCur
 20606 ;;		_ftoa
 20607 ;; This function uses a non-reentrant model
 20608 ;;
 20609                           
 20610                           
 20611                           ;psect for function ___fltol
 20612  379A                     ___fltol:	
 20613                           
 20614                           ;incstack = 0
 20615                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 20616  379A  1003               	clrc
 20617  379B  0141               	movlb	1	; select bank1
 20618  379C  0D2A               	rlf	(___fltol@f1+2)^(0+128),w
 20619  379D  0D2B               	rlf	(___fltol@f1+3)^(0+128),w
 20620  379E  00AC               	movwf	??___fltol^(0+128)
 20621  379F  082C               	movf	??___fltol^(0+128),w
 20622  37A0  00B2               	movwf	___fltol@exp1^(0+128)
 20623  37A1  0832               	movf	___fltol@exp1^(0+128),w
 20624  37A2  1D03               	btfss	3,2
 20625  37A3  2FAD               	goto	l7492
 20626  37A4                     l7488:	
 20627  37A4  3000               	movlw	0
 20628  37A5  00AB               	movwf	(?___fltol+3)^(0+128)
 20629  37A6  3000               	movlw	0
 20630  37A7  00AA               	movwf	(?___fltol+2)^(0+128)
 20631  37A8  3000               	movlw	0
 20632  37A9  00A9               	movwf	(?___fltol+1)^(0+128)
 20633  37AA  3000               	movlw	0
 20634  37AB  00A8               	movwf	?___fltol^(0+128)
 20635  37AC  0008               	return
 20636  37AD                     l7492:	
 20637  37AD  0828               	movf	___fltol@f1^(0+128),w
 20638  37AE  00AC               	movwf	??___fltol^(0+128)
 20639  37AF  0829               	movf	(___fltol@f1+1)^(0+128),w
 20640  37B0  00AD               	movwf	(??___fltol^(0+128)+1)
 20641  37B1  082A               	movf	(___fltol@f1+2)^(0+128),w
 20642  37B2  00AE               	movwf	(??___fltol^(0+128)+2)
 20643  37B3  082B               	movf	(___fltol@f1+3)^(0+128),w
 20644  37B4  00AF               	movwf	(??___fltol^(0+128)+3)
 20645  37B5  301F               	movlw	31
 20646  37B6                     u8315:	
 20647  37B6  36AF               	lsrf	(??___fltol^(0+128)+3),f
 20648  37B7  0CAE               	rrf	(??___fltol^(0+128)+2),f
 20649  37B8  0CAD               	rrf	(??___fltol^(0+128)+1),f
 20650  37B9  0CAC               	rrf	??___fltol^(0+128),f
 20651  37BA  0B89               	decfsz	9,f
 20652  37BB  2FB6               	goto	u8315
 20653  37BC  082C               	movf	??___fltol^(0+128),w
 20654  37BD  00B0               	movwf	(??___fltol+4)^(0+128)
 20655  37BE  0830               	movf	(??___fltol+4)^(0+128),w
 20656  37BF  00B1               	movwf	___fltol@sign1^(0+128)
 20657  37C0  17AA               	bsf	(___fltol@f1^(0+128)+2),7
 20658  37C1  30FF               	movlw	255
 20659  37C2  05A8               	andwf	___fltol@f1^(0+128),f
 20660  37C3  30FF               	movlw	255
 20661  37C4  05A9               	andwf	(___fltol@f1+1)^(0+128),f
 20662  37C5  30FF               	movlw	255
 20663  37C6  05AA               	andwf	(___fltol@f1+2)^(0+128),f
 20664  37C7  3000               	movlw	0
 20665  37C8  05AB               	andwf	(___fltol@f1+3)^(0+128),f
 20666  37C9  3096               	movlw	150
 20667  37CA  02B2               	subwf	___fltol@exp1^(0+128),f
 20668  37CB  1FB2               	btfss	___fltol@exp1^(0+128),7
 20669  37CC  2FE0               	goto	l7510
 20670  37CD  0832               	movf	___fltol@exp1^(0+128),w
 20671  37CE  3A80               	xorlw	128
 20672  37CF  3E97               	addlw	151
 20673  37D0  1C03               	btfss	3,0
 20674  37D1  2FA4               	goto	l7488
 20675  37D2                     l7508:	
 20676  37D2  3001               	movlw	1
 20677  37D3                     u8345:	
 20678  37D3  36AB               	lsrf	(___fltol@f1+3)^(0+128),f
 20679  37D4  0CAA               	rrf	(___fltol@f1+2)^(0+128),f
 20680  37D5  0CA9               	rrf	(___fltol@f1+1)^(0+128),f
 20681  37D6  0CA8               	rrf	___fltol@f1^(0+128),f
 20682  37D7  0B89               	decfsz	9,f
 20683  37D8  2FD3               	goto	u8345
 20684  37D9  3001               	movlw	1
 20685  37DA  00AC               	movwf	??___fltol^(0+128)
 20686  37DB  082C               	movf	??___fltol^(0+128),w
 20687  37DC  07B2               	addwf	___fltol@exp1^(0+128),f
 20688  37DD  1903               	btfsc	3,2
 20689  37DE  2FF1               	goto	l7518
 20690  37DF  2FD2               	goto	l7508
 20691  37E0                     l7510:	
 20692  37E0  3020               	movlw	32
 20693  37E1  0232               	subwf	___fltol@exp1^(0+128),w
 20694  37E2  1803               	btfsc	3,0
 20695  37E3  2FA4               	goto	l7488
 20696  37E4                     l1317:	
 20697  37E4  0832               	movf	___fltol@exp1^(0+128),w
 20698  37E5  1903               	btfsc	3,2
 20699  37E6  2FF1               	goto	l7518
 20700  37E7  3001               	movlw	1
 20701  37E8                     u8375:	
 20702  37E8  35A8               	lslf	___fltol@f1^(0+128),f
 20703  37E9  0DA9               	rlf	(___fltol@f1+1)^(0+128),f
 20704  37EA  0DAA               	rlf	(___fltol@f1+2)^(0+128),f
 20705  37EB  0DAB               	rlf	(___fltol@f1+3)^(0+128),f
 20706  37EC  0B89               	decfsz	9,f
 20707  37ED  2FE8               	goto	u8375
 20708  37EE  3001               	movlw	1
 20709  37EF  02B2               	subwf	___fltol@exp1^(0+128),f
 20710  37F0  2FE4               	goto	l1317
 20711  37F1                     l7518:	
 20712  37F1  0831               	movf	___fltol@sign1^(0+128),w
 20713  37F2  1903               	btfsc	3,2
 20714  37F3  0008               	return
 20715  37F4  09A8               	comf	___fltol@f1^(0+128),f
 20716  37F5  09A9               	comf	(___fltol@f1+1)^(0+128),f
 20717  37F6  09AA               	comf	(___fltol@f1+2)^(0+128),f
 20718  37F7  09AB               	comf	(___fltol@f1+3)^(0+128),f
 20719  37F8  0AA8               	incf	___fltol@f1^(0+128),f
 20720  37F9  1903               	skipnz
 20721  37FA  0AA9               	incf	(___fltol@f1+1)^(0+128),f
 20722  37FB  1903               	skipnz
 20723  37FC  0AAA               	incf	(___fltol@f1+2)^(0+128),f
 20724  37FD  1903               	skipnz
 20725  37FE  0AAB               	incf	(___fltol@f1+3)^(0+128),f
 20726  37FF  0008               	return
 20727  3800                     __end_of___fltol:	
 20728                           
 20729                           	psect	text53
 20730  3268                     __ptext53:	
 20731 ;; *************** function _memcpy *****************
 20732 ;; Defined at:
 20733 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\memcpy.c"
 20734 ;; Parameters:    Size  Location     Type
 20735 ;;  d1              1    wreg     PTR void 
 20736 ;;		 -> qsort@xbuf(60), 
 20737 ;;  s1              1   13[BANK0 ] PTR const void 
 20738 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20739 ;;  n               2   14[BANK0 ] unsigned int 
 20740 ;; Auto vars:     Size  Location     Type
 20741 ;;  d1              1   18[BANK0 ] PTR void 
 20742 ;;		 -> qsort@xbuf(60), 
 20743 ;;  s               1   20[BANK0 ] PTR const unsigned char 
 20744 ;;		 -> channelThing@grpB(4), channelThing@grpA(4), virtChannels(36), 
 20745 ;;  d               1   19[BANK0 ] PTR unsigned char 
 20746 ;;		 -> qsort@xbuf(60), 
 20747 ;;  tmp             1   17[BANK0 ] unsigned char 
 20748 ;; Return value:  Size  Location     Type
 20749 ;;                  1    wreg      PTR void 
 20750 ;; Registers used:
 20751 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 20752 ;; Tracked objects:
 20753 ;;		On entry : 0/0
 20754 ;;		On exit  : 0/0
 20755 ;;		Unchanged: 0/0
 20756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20757 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20758 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20759 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20760 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20761 ;;Total ram usage:        8 bytes
 20762 ;; Hardware stack levels used:    1
 20763 ;; Hardware stack levels required when called:    3
 20764 ;; This function calls:
 20765 ;;		Nothing
 20766 ;; This function is called by:
 20767 ;;		_qsort
 20768 ;; This function uses a non-reentrant model
 20769 ;;
 20770                           
 20771                           
 20772                           ;psect for function _memcpy
 20773  3268                     _memcpy:	
 20774                           
 20775                           ;incstack = 0
 20776                           ; Regs used in _memcpy: [wreg+fsr1l+fsr1h+status,2+status,0]
 20777                           ;memcpy@d1 stored from wreg
 20778  3268  0140               	movlb	0	; select bank0
 20779  3269  00B2               	movwf	memcpy@d1
 20780  326A  082D               	movf	memcpy@s1,w
 20781  326B  00B0               	movwf	??_memcpy
 20782  326C  0830               	movf	??_memcpy,w
 20783  326D  00B4               	movwf	memcpy@s
 20784  326E  0832               	movf	memcpy@d1,w
 20785  326F  00B0               	movwf	??_memcpy
 20786  3270  0830               	movf	??_memcpy,w
 20787  3271  00B3               	movwf	memcpy@d
 20788  3272                     l1615:	
 20789  3272  3001               	movlw	1
 20790  3273  02AE               	subwf	memcpy@n,f
 20791  3274  3000               	movlw	0
 20792  3275  3BAF               	subwfb	memcpy@n+1,f
 20793  3276  0A2E               	incf	memcpy@n,w
 20794  3277  1903               	btfsc	3,2
 20795  3278  0A2F               	incf	memcpy@n+1,w
 20796  3279  1903               	btfsc	3,2
 20797  327A  0008               	return
 20798  327B  0834               	movf	memcpy@s,w
 20799  327C  0086               	movwf	6
 20800  327D  3002               	movlw	2	; select bank4/5
 20801  327E  0087               	movwf	7
 20802  327F  0801               	movf	1,w
 20803  3280  00B0               	movwf	??_memcpy
 20804  3281  0830               	movf	??_memcpy,w
 20805  3282  00B1               	movwf	memcpy@tmp
 20806  3283  3001               	movlw	1
 20807  3284  00B0               	movwf	??_memcpy
 20808  3285  0830               	movf	??_memcpy,w
 20809  3286  07B4               	addwf	memcpy@s,f
 20810  3287  0831               	movf	memcpy@tmp,w
 20811  3288  00B0               	movwf	??_memcpy
 20812  3289  0833               	movf	memcpy@d,w
 20813  328A  0086               	movwf	6
 20814  328B  3001               	movlw	1	; select bank2/3
 20815  328C  0087               	movwf	7
 20816  328D  0830               	movf	??_memcpy,w
 20817  328E  0081               	movwf	1
 20818  328F  3001               	movlw	1
 20819  3290  00B0               	movwf	??_memcpy
 20820  3291  0830               	movf	??_memcpy,w
 20821  3292  07B3               	addwf	memcpy@d,f
 20822  3293  2A72               	goto	l1615
 20823  3294                     __end_of_memcpy:	
 20824                           
 20825                           	psect	text54
 20826  1002                     __ptext54:	
 20827 ;; *************** function ___awdiv *****************
 20828 ;; Defined at:
 20829 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 20830 ;; Parameters:    Size  Location     Type
 20831 ;;  divisor         2    0[BANK0 ] int 
 20832 ;;  dividend        2    2[BANK0 ] int 
 20833 ;; Auto vars:     Size  Location     Type
 20834 ;;  quotient        2    7[BANK0 ] int 
 20835 ;;  sign            1    6[BANK0 ] unsigned char 
 20836 ;;  counter         1    5[BANK0 ] unsigned char 
 20837 ;; Return value:  Size  Location     Type
 20838 ;;                  2    0[BANK0 ] int 
 20839 ;; Registers used:
 20840 ;;		wreg, status,2, status,0
 20841 ;; Tracked objects:
 20842 ;;		On entry : 0/0
 20843 ;;		On exit  : 0/0
 20844 ;;		Unchanged: 0/0
 20845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20846 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20847 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20848 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20849 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20850 ;;Total ram usage:        9 bytes
 20851 ;; Hardware stack levels used:    1
 20852 ;; Hardware stack levels required when called:    3
 20853 ;; This function calls:
 20854 ;;		Nothing
 20855 ;; This function is called by:
 20856 ;;		_itoa
 20857 ;;		_qsort
 20858 ;; This function uses a non-reentrant model
 20859 ;;
 20860                           
 20861                           
 20862                           ;psect for function ___awdiv
 20863  1002                     ___awdiv:	
 20864                           
 20865                           ;incstack = 0
 20866                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 20867  1002  0140               	movlb	0	; select bank0
 20868  1003  01A6               	clrf	___awdiv@sign
 20869  1004  1FA1               	btfss	___awdiv@divisor+1,7
 20870  1005  280D               	goto	l7392
 20871  1006  09A0               	comf	___awdiv@divisor,f
 20872  1007  09A1               	comf	___awdiv@divisor+1,f
 20873  1008  0AA0               	incf	___awdiv@divisor,f
 20874  1009  1903               	skipnz
 20875  100A  0AA1               	incf	___awdiv@divisor+1,f
 20876  100B  01A6               	clrf	___awdiv@sign
 20877  100C  0AA6               	incf	___awdiv@sign,f
 20878  100D                     l7392:	
 20879  100D  1FA3               	btfss	___awdiv@dividend+1,7
 20880  100E  2818               	goto	l7398
 20881  100F  09A2               	comf	___awdiv@dividend,f
 20882  1010  09A3               	comf	___awdiv@dividend+1,f
 20883  1011  0AA2               	incf	___awdiv@dividend,f
 20884  1012  1903               	skipnz
 20885  1013  0AA3               	incf	___awdiv@dividend+1,f
 20886  1014  3001               	movlw	1
 20887  1015  00A4               	movwf	??___awdiv
 20888  1016  0824               	movf	??___awdiv,w
 20889  1017  06A6               	xorwf	___awdiv@sign,f
 20890  1018                     l7398:	
 20891  1018  01A7               	clrf	___awdiv@quotient
 20892  1019  01A8               	clrf	___awdiv@quotient+1
 20893  101A  0820               	movf	___awdiv@divisor,w
 20894  101B  0421               	iorwf	___awdiv@divisor+1,w
 20895  101C  1903               	btfsc	3,2
 20896  101D  2847               	goto	l7420
 20897  101E  01A5               	clrf	___awdiv@counter
 20898  101F  0AA5               	incf	___awdiv@counter,f
 20899  1020                     l7408:	
 20900  1020  1BA1               	btfsc	___awdiv@divisor+1,7
 20901  1021  282C               	goto	l7410
 20902  1022  3001               	movlw	1
 20903  1023                     u8095:	
 20904  1023  35A0               	lslf	___awdiv@divisor,f
 20905  1024  0DA1               	rlf	___awdiv@divisor+1,f
 20906  1025  0B89               	decfsz	9,f
 20907  1026  2823               	goto	u8095
 20908  1027  3001               	movlw	1
 20909  1028  00A4               	movwf	??___awdiv
 20910  1029  0824               	movf	??___awdiv,w
 20911  102A  07A5               	addwf	___awdiv@counter,f
 20912  102B  2820               	goto	l7408
 20913  102C                     l7410:	
 20914  102C  3001               	movlw	1
 20915  102D                     u8115:	
 20916  102D  35A7               	lslf	___awdiv@quotient,f
 20917  102E  0DA8               	rlf	___awdiv@quotient+1,f
 20918  102F  0B89               	decfsz	9,f
 20919  1030  282D               	goto	u8115
 20920  1031  0821               	movf	___awdiv@divisor+1,w
 20921  1032  0223               	subwf	___awdiv@dividend+1,w
 20922  1033  1D03               	skipz
 20923  1034  2837               	goto	u8125
 20924  1035  0820               	movf	___awdiv@divisor,w
 20925  1036  0222               	subwf	___awdiv@dividend,w
 20926  1037                     u8125:	
 20927  1037  1C03               	skipc
 20928  1038  283E               	goto	l7416
 20929  1039  0820               	movf	___awdiv@divisor,w
 20930  103A  02A2               	subwf	___awdiv@dividend,f
 20931  103B  0821               	movf	___awdiv@divisor+1,w
 20932  103C  3BA3               	subwfb	___awdiv@dividend+1,f
 20933  103D  1427               	bsf	___awdiv@quotient,0
 20934  103E                     l7416:	
 20935  103E  3001               	movlw	1
 20936  103F                     u8135:	
 20937  103F  36A1               	lsrf	___awdiv@divisor+1,f
 20938  1040  0CA0               	rrf	___awdiv@divisor,f
 20939  1041  0B89               	decfsz	9,f
 20940  1042  283F               	goto	u8135
 20941  1043  3001               	movlw	1
 20942  1044  02A5               	subwf	___awdiv@counter,f
 20943  1045  1D03               	btfss	3,2
 20944  1046  282C               	goto	l7410
 20945  1047                     l7420:	
 20946  1047  0826               	movf	___awdiv@sign,w
 20947  1048  1903               	btfsc	3,2
 20948  1049  284F               	goto	l7424
 20949  104A  09A7               	comf	___awdiv@quotient,f
 20950  104B  09A8               	comf	___awdiv@quotient+1,f
 20951  104C  0AA7               	incf	___awdiv@quotient,f
 20952  104D  1903               	skipnz
 20953  104E  0AA8               	incf	___awdiv@quotient+1,f
 20954  104F                     l7424:	
 20955  104F  0828               	movf	___awdiv@quotient+1,w
 20956  1050  00A1               	movwf	?___awdiv+1
 20957  1051  0827               	movf	___awdiv@quotient,w
 20958  1052  00A0               	movwf	?___awdiv
 20959  1053  0008               	return
 20960  1054                     __end_of___awdiv:	
 20961                           
 20962                           	psect	text55
 20963  2C30                     __ptext55:	
 20964 ;; *************** function ___xxtofl *****************
 20965 ;; Defined at:
 20966 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 20967 ;; Parameters:    Size  Location     Type
 20968 ;;  sign            1    wreg     unsigned char 
 20969 ;;  val             4   19[BANK0 ] long 
 20970 ;; Auto vars:     Size  Location     Type
 20971 ;;  sign            1   27[BANK0 ] unsigned char 
 20972 ;;  arg             4   29[BANK0 ] unsigned long 
 20973 ;;  exp             1   28[BANK0 ] unsigned char 
 20974 ;; Return value:  Size  Location     Type
 20975 ;;                  4   19[BANK0 ] unsigned char 
 20976 ;; Registers used:
 20977 ;;		wreg, status,2, status,0
 20978 ;; Tracked objects:
 20979 ;;		On entry : 0/0
 20980 ;;		On exit  : 0/0
 20981 ;;		Unchanged: 0/0
 20982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20983 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20984 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20985 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20986 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20987 ;;Total ram usage:       14 bytes
 20988 ;; Hardware stack levels used:    1
 20989 ;; Hardware stack levels required when called:    3
 20990 ;; This function calls:
 20991 ;;		Nothing
 20992 ;; This function is called by:
 20993 ;;		_checkChannelStatus
 20994 ;;		_systemCheck
 20995 ;;		_getAnalogValues
 20996 ;;		_channelThing
 20997 ;;		_ftoa
 20998 ;; This function uses a non-reentrant model
 20999 ;;
 21000                           
 21001                           
 21002                           ;psect for function ___xxtofl
 21003  2C30                     ___xxtofl:	
 21004                           
 21005                           ;incstack = 0
 21006                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 21007                           ;___xxtofl@sign stored from wreg
 21008  2C30  0140               	movlb	0	; select bank0
 21009  2C31  00BB               	movwf	___xxtofl@sign
 21010  2C32  083B               	movf	___xxtofl@sign,w
 21011  2C33  1D03               	btfss	3,2
 21012  2C34  1FB6               	btfss	___xxtofl@val+3,7
 21013  2C35  2C46               	goto	l7814
 21014  2C36  0933               	comf	___xxtofl@val,w
 21015  2C37  00BD               	movwf	___xxtofl@arg
 21016  2C38  0934               	comf	___xxtofl@val+1,w
 21017  2C39  00BE               	movwf	___xxtofl@arg+1
 21018  2C3A  0935               	comf	___xxtofl@val+2,w
 21019  2C3B  00BF               	movwf	___xxtofl@arg+2
 21020  2C3C  0936               	comf	___xxtofl@val+3,w
 21021  2C3D  00C0               	movwf	___xxtofl@arg+3
 21022  2C3E  0ABD               	incf	___xxtofl@arg,f
 21023  2C3F  1903               	skipnz
 21024  2C40  0ABE               	incf	___xxtofl@arg+1,f
 21025  2C41  1903               	skipnz
 21026  2C42  0ABF               	incf	___xxtofl@arg+2,f
 21027  2C43  1903               	skipnz
 21028  2C44  0AC0               	incf	___xxtofl@arg+3,f
 21029  2C45  2C4E               	goto	l1551
 21030  2C46                     l7814:	
 21031  2C46  0836               	movf	___xxtofl@val+3,w
 21032  2C47  00C0               	movwf	___xxtofl@arg+3
 21033  2C48  0835               	movf	___xxtofl@val+2,w
 21034  2C49  00BF               	movwf	___xxtofl@arg+2
 21035  2C4A  0834               	movf	___xxtofl@val+1,w
 21036  2C4B  00BE               	movwf	___xxtofl@arg+1
 21037  2C4C  0833               	movf	___xxtofl@val,w
 21038  2C4D  00BD               	movwf	___xxtofl@arg
 21039  2C4E                     l1551:	
 21040  2C4E  0836               	movf	___xxtofl@val+3,w
 21041  2C4F  0435               	iorwf	___xxtofl@val+2,w
 21042  2C50  0434               	iorwf	___xxtofl@val+1,w
 21043  2C51  0433               	iorwf	___xxtofl@val,w
 21044  2C52  1D03               	skipz
 21045  2C53  2C5D               	goto	l7820
 21046  2C54  3000               	movlw	0
 21047  2C55  00B6               	movwf	?___xxtofl+3
 21048  2C56  3000               	movlw	0
 21049  2C57  00B5               	movwf	?___xxtofl+2
 21050  2C58  3000               	movlw	0
 21051  2C59  00B4               	movwf	?___xxtofl+1
 21052  2C5A  3000               	movlw	0
 21053  2C5B  00B3               	movwf	?___xxtofl
 21054  2C5C  0008               	return
 21055  2C5D                     l7820:	
 21056  2C5D  3096               	movlw	150
 21057  2C5E  00B7               	movwf	??___xxtofl
 21058  2C5F  0837               	movf	??___xxtofl,w
 21059  2C60  00BC               	movwf	___xxtofl@exp
 21060  2C61                     l7824:	
 21061  2C61  30FE               	movlw	254
 21062  2C62  0540               	andwf	___xxtofl@arg+3,w
 21063  2C63  1903               	btfsc	3,2
 21064  2C64  2C84               	goto	l1557
 21065  2C65  3001               	movlw	1
 21066  2C66  00B7               	movwf	??___xxtofl
 21067  2C67  0837               	movf	??___xxtofl,w
 21068  2C68  07BC               	addwf	___xxtofl@exp,f
 21069  2C69  3001               	movlw	1
 21070  2C6A                     u8985:	
 21071  2C6A  36C0               	lsrf	___xxtofl@arg+3,f
 21072  2C6B  0CBF               	rrf	___xxtofl@arg+2,f
 21073  2C6C  0CBE               	rrf	___xxtofl@arg+1,f
 21074  2C6D  0CBD               	rrf	___xxtofl@arg,f
 21075  2C6E  0B89               	decfsz	9,f
 21076  2C6F  2C6A               	goto	u8985
 21077  2C70  2C61               	goto	l7824
 21078  2C71                     l7826:	
 21079  2C71  3001               	movlw	1
 21080  2C72  00B7               	movwf	??___xxtofl
 21081  2C73  0837               	movf	??___xxtofl,w
 21082  2C74  07BC               	addwf	___xxtofl@exp,f
 21083  2C75  3001               	movlw	1
 21084  2C76  07BD               	addwf	___xxtofl@arg,f
 21085  2C77  3000               	movlw	0
 21086  2C78  3DBE               	addwfc	___xxtofl@arg+1,f
 21087  2C79  3000               	movlw	0
 21088  2C7A  3DBF               	addwfc	___xxtofl@arg+2,f
 21089  2C7B  3000               	movlw	0
 21090  2C7C  3DC0               	addwfc	___xxtofl@arg+3,f
 21091  2C7D  3001               	movlw	1
 21092  2C7E                     u9005:	
 21093  2C7E  36C0               	lsrf	___xxtofl@arg+3,f
 21094  2C7F  0CBF               	rrf	___xxtofl@arg+2,f
 21095  2C80  0CBE               	rrf	___xxtofl@arg+1,f
 21096  2C81  0CBD               	rrf	___xxtofl@arg,f
 21097  2C82  0B89               	decfsz	9,f
 21098  2C83  2C7E               	goto	u9005
 21099  2C84                     l1557:	
 21100  2C84  30FF               	movlw	255
 21101  2C85  0540               	andwf	___xxtofl@arg+3,w
 21102  2C86  1903               	btfsc	3,2
 21103  2C87  2C96               	goto	l7834
 21104  2C88  2C71               	goto	l7826
 21105  2C89                     l7836:	
 21106  2C89  3002               	movlw	2
 21107  2C8A  023C               	subwf	___xxtofl@exp,w
 21108  2C8B  1C03               	btfss	3,0
 21109  2C8C  2C98               	goto	l1564
 21110  2C8D  3001               	movlw	1
 21111  2C8E  02BC               	subwf	___xxtofl@exp,f
 21112  2C8F  3001               	movlw	1
 21113  2C90                     u9025:	
 21114  2C90  35BD               	lslf	___xxtofl@arg,f
 21115  2C91  0DBE               	rlf	___xxtofl@arg+1,f
 21116  2C92  0DBF               	rlf	___xxtofl@arg+2,f
 21117  2C93  0DC0               	rlf	___xxtofl@arg+3,f
 21118  2C94  0B89               	decfsz	9,f
 21119  2C95  2C90               	goto	u9025
 21120  2C96                     l7834:	
 21121  2C96  1FBF               	btfss	___xxtofl@arg+2,7
 21122  2C97  2C89               	goto	l7836
 21123  2C98                     l1564:	
 21124  2C98  183C               	btfsc	___xxtofl@exp,0
 21125  2C99  2CA2               	goto	l1565
 21126  2C9A  30FF               	movlw	255
 21127  2C9B  05BD               	andwf	___xxtofl@arg,f
 21128  2C9C  30FF               	movlw	255
 21129  2C9D  05BE               	andwf	___xxtofl@arg+1,f
 21130  2C9E  307F               	movlw	127
 21131  2C9F  05BF               	andwf	___xxtofl@arg+2,f
 21132  2CA0  30FF               	movlw	255
 21133  2CA1  05C0               	andwf	___xxtofl@arg+3,f
 21134  2CA2                     l1565:	
 21135  2CA2  1003               	clrc
 21136  2CA3  0CBC               	rrf	___xxtofl@exp,f
 21137  2CA4  083C               	movf	___xxtofl@exp,w
 21138  2CA5  00B7               	movwf	??___xxtofl
 21139  2CA6  01B8               	clrf	??___xxtofl+1
 21140  2CA7  01B9               	clrf	??___xxtofl+2
 21141  2CA8  01BA               	clrf	??___xxtofl+3
 21142  2CA9  3018               	movlw	24
 21143  2CAA                     u9065:	
 21144  2CAA  35B7               	lslf	??___xxtofl,f
 21145  2CAB  0DB8               	rlf	??___xxtofl+1,f
 21146  2CAC  0DB9               	rlf	??___xxtofl+2,f
 21147  2CAD  0DBA               	rlf	??___xxtofl+3,f
 21148  2CAE  0B89               	decfsz	9,f
 21149  2CAF  2CAA               	goto	u9065
 21150  2CB0  0837               	movf	??___xxtofl,w
 21151  2CB1  04BD               	iorwf	___xxtofl@arg,f
 21152  2CB2  0838               	movf	??___xxtofl+1,w
 21153  2CB3  04BE               	iorwf	___xxtofl@arg+1,f
 21154  2CB4  0839               	movf	??___xxtofl+2,w
 21155  2CB5  04BF               	iorwf	___xxtofl@arg+2,f
 21156  2CB6  083A               	movf	??___xxtofl+3,w
 21157  2CB7  04C0               	iorwf	___xxtofl@arg+3,f
 21158  2CB8  083B               	movf	___xxtofl@sign,w
 21159  2CB9  1D03               	btfss	3,2
 21160  2CBA  1FB6               	btfss	___xxtofl@val+3,7
 21161  2CBB  2CBD               	goto	l7848
 21162  2CBC  17C0               	bsf	___xxtofl@arg+3,7
 21163  2CBD                     l7848:	
 21164  2CBD  0840               	movf	___xxtofl@arg+3,w
 21165  2CBE  00B6               	movwf	?___xxtofl+3
 21166  2CBF  083F               	movf	___xxtofl@arg+2,w
 21167  2CC0  00B5               	movwf	?___xxtofl+2
 21168  2CC1  083E               	movf	___xxtofl@arg+1,w
 21169  2CC2  00B4               	movwf	?___xxtofl+1
 21170  2CC3  083D               	movf	___xxtofl@arg,w
 21171  2CC4  00B3               	movwf	?___xxtofl
 21172  2CC5  0008               	return
 21173  2CC6                     __end_of___xxtofl:	
 21174                           
 21175                           	psect	text56
 21176  2A27                     __ptext56:	
 21177 ;; *************** function ___flge *****************
 21178 ;; Defined at:
 21179 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 21180 ;; Parameters:    Size  Location     Type
 21181 ;;  ff1             4   13[BANK1 ] unsigned char 
 21182 ;;  ff2             4   17[BANK1 ] unsigned char 
 21183 ;; Auto vars:     Size  Location     Type
 21184 ;;		None
 21185 ;; Return value:  Size  Location     Type
 21186 ;;		None               void
 21187 ;; Registers used:
 21188 ;;		wreg, status,2, status,0
 21189 ;; Tracked objects:
 21190 ;;		On entry : 0/0
 21191 ;;		On exit  : 0/0
 21192 ;;		Unchanged: 0/0
 21193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21194 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21195 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21196 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21197 ;;      Totals:         0       0      12       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21198 ;;Total ram usage:       12 bytes
 21199 ;; Hardware stack levels used:    1
 21200 ;; Hardware stack levels required when called:    3
 21201 ;; This function calls:
 21202 ;;		Nothing
 21203 ;; This function is called by:
 21204 ;;		_spinInput
 21205 ;;		_channelSetup
 21206 ;;		_setOutputPower
 21207 ;;		_checkChannelStatus
 21208 ;;		_systemCheck
 21209 ;;		_checkSensor
 21210 ;;		_channelThing
 21211 ;;		_ftoa
 21212 ;; This function uses a non-reentrant model
 21213 ;;
 21214                           
 21215                           
 21216                           ;psect for function ___flge
 21217  2A27                     ___flge:	
 21218                           
 21219                           ;incstack = 0
 21220                           ; Regs used in ___flge: [wreg+status,2+status,0]
 21221  2A27  3000               	movlw	0
 21222  2A28  0141               	movlb	1	; select bank1
 21223  2A29  052D               	andwf	___flge@ff1^(0+128),w
 21224  2A2A  00B5               	movwf	??___flge^(0+128)
 21225  2A2B  3000               	movlw	0
 21226  2A2C  052E               	andwf	(___flge@ff1+1)^(0+128),w
 21227  2A2D  00B6               	movwf	(??___flge^(0+128)+1)
 21228  2A2E  3080               	movlw	128
 21229  2A2F  052F               	andwf	(___flge@ff1+2)^(0+128),w
 21230  2A30  00B7               	movwf	(??___flge^(0+128)+2)
 21231  2A31  307F               	movlw	127
 21232  2A32  0530               	andwf	(___flge@ff1+3)^(0+128),w
 21233  2A33  00B8               	movwf	(??___flge^(0+128)+3)
 21234  2A34  0838               	movf	(??___flge+3)^(0+128),w
 21235  2A35  0437               	iorwf	(??___flge+2)^(0+128),w
 21236  2A36  0436               	iorwf	(??___flge+1)^(0+128),w
 21237  2A37  0435               	iorwf	??___flge^(0+128),w
 21238  2A38  1D03               	skipz
 21239  2A39  2A42               	goto	l1294
 21240  2A3A  3000               	movlw	0
 21241  2A3B  00B0               	movwf	(___flge@ff1+3)^(0+128)
 21242  2A3C  3000               	movlw	0
 21243  2A3D  00AF               	movwf	(___flge@ff1+2)^(0+128)
 21244  2A3E  3000               	movlw	0
 21245  2A3F  00AE               	movwf	(___flge@ff1+1)^(0+128)
 21246  2A40  3000               	movlw	0
 21247  2A41  00AD               	movwf	___flge@ff1^(0+128)
 21248  2A42                     l1294:	
 21249  2A42  3000               	movlw	0
 21250  2A43  0531               	andwf	___flge@ff2^(0+128),w
 21251  2A44  00B5               	movwf	??___flge^(0+128)
 21252  2A45  3000               	movlw	0
 21253  2A46  0532               	andwf	(___flge@ff2+1)^(0+128),w
 21254  2A47  00B6               	movwf	(??___flge^(0+128)+1)
 21255  2A48  3080               	movlw	128
 21256  2A49  0533               	andwf	(___flge@ff2+2)^(0+128),w
 21257  2A4A  00B7               	movwf	(??___flge^(0+128)+2)
 21258  2A4B  307F               	movlw	127
 21259  2A4C  0534               	andwf	(___flge@ff2+3)^(0+128),w
 21260  2A4D  00B8               	movwf	(??___flge^(0+128)+3)
 21261  2A4E  0838               	movf	(??___flge+3)^(0+128),w
 21262  2A4F  0437               	iorwf	(??___flge+2)^(0+128),w
 21263  2A50  0436               	iorwf	(??___flge+1)^(0+128),w
 21264  2A51  0435               	iorwf	??___flge^(0+128),w
 21265  2A52  1D03               	skipz
 21266  2A53  2A5C               	goto	l7472
 21267  2A54  3000               	movlw	0
 21268  2A55  00B4               	movwf	(___flge@ff2+3)^(0+128)
 21269  2A56  3000               	movlw	0
 21270  2A57  00B3               	movwf	(___flge@ff2+2)^(0+128)
 21271  2A58  3000               	movlw	0
 21272  2A59  00B2               	movwf	(___flge@ff2+1)^(0+128)
 21273  2A5A  3000               	movlw	0
 21274  2A5B  00B1               	movwf	___flge@ff2^(0+128)
 21275  2A5C                     l7472:	
 21276  2A5C  1FB0               	btfss	(___flge@ff1+3)^(0+128),7
 21277  2A5D  2A76               	goto	l7476
 21278  2A5E  3000               	movlw	0
 21279  2A5F  00B5               	movwf	??___flge^(0+128)
 21280  2A60  3000               	movlw	0
 21281  2A61  00B6               	movwf	(??___flge^(0+128)+1)
 21282  2A62  3000               	movlw	0
 21283  2A63  00B7               	movwf	(??___flge^(0+128)+2)
 21284  2A64  3080               	movlw	128
 21285  2A65  00B8               	movwf	(??___flge^(0+128)+3)
 21286  2A66  082D               	movf	___flge@ff1^(0+128),w
 21287  2A67  02B5               	subwf	??___flge^(0+128),f
 21288  2A68  082E               	movf	(___flge@ff1+1)^(0+128),w
 21289  2A69  3BB6               	subwfb	(??___flge^(0+128)+1),f
 21290  2A6A  082F               	movf	(___flge@ff1+2)^(0+128),w
 21291  2A6B  3BB7               	subwfb	(??___flge^(0+128)+2),f
 21292  2A6C  0830               	movf	(___flge@ff1+3)^(0+128),w
 21293  2A6D  3BB8               	subwfb	(??___flge^(0+128)+3),f
 21294  2A6E  0838               	movf	(??___flge+3)^(0+128),w
 21295  2A6F  00B0               	movwf	(___flge@ff1+3)^(0+128)
 21296  2A70  0837               	movf	(??___flge+2)^(0+128),w
 21297  2A71  00AF               	movwf	(___flge@ff1+2)^(0+128)
 21298  2A72  0836               	movf	(??___flge+1)^(0+128),w
 21299  2A73  00AE               	movwf	(___flge@ff1+1)^(0+128)
 21300  2A74  0835               	movf	??___flge^(0+128),w
 21301  2A75  00AD               	movwf	___flge@ff1^(0+128)
 21302  2A76                     l7476:	
 21303  2A76  1FB4               	btfss	(___flge@ff2+3)^(0+128),7
 21304  2A77  2A90               	goto	l1297
 21305  2A78  3000               	movlw	0
 21306  2A79  00B5               	movwf	??___flge^(0+128)
 21307  2A7A  3000               	movlw	0
 21308  2A7B  00B6               	movwf	(??___flge^(0+128)+1)
 21309  2A7C  3000               	movlw	0
 21310  2A7D  00B7               	movwf	(??___flge^(0+128)+2)
 21311  2A7E  3080               	movlw	128
 21312  2A7F  00B8               	movwf	(??___flge^(0+128)+3)
 21313  2A80  0831               	movf	___flge@ff2^(0+128),w
 21314  2A81  02B5               	subwf	??___flge^(0+128),f
 21315  2A82  0832               	movf	(___flge@ff2+1)^(0+128),w
 21316  2A83  3BB6               	subwfb	(??___flge^(0+128)+1),f
 21317  2A84  0833               	movf	(___flge@ff2+2)^(0+128),w
 21318  2A85  3BB7               	subwfb	(??___flge^(0+128)+2),f
 21319  2A86  0834               	movf	(___flge@ff2+3)^(0+128),w
 21320  2A87  3BB8               	subwfb	(??___flge^(0+128)+3),f
 21321  2A88  0838               	movf	(??___flge+3)^(0+128),w
 21322  2A89  00B4               	movwf	(___flge@ff2+3)^(0+128)
 21323  2A8A  0837               	movf	(??___flge+2)^(0+128),w
 21324  2A8B  00B3               	movwf	(___flge@ff2+2)^(0+128)
 21325  2A8C  0836               	movf	(??___flge+1)^(0+128),w
 21326  2A8D  00B2               	movwf	(___flge@ff2+1)^(0+128)
 21327  2A8E  0835               	movf	??___flge^(0+128),w
 21328  2A8F  00B1               	movwf	___flge@ff2^(0+128)
 21329  2A90                     l1297:	
 21330  2A90  3080               	movlw	128
 21331  2A91  06B0               	xorwf	(___flge@ff1+3)^(0+128),f
 21332  2A92  3080               	movlw	128
 21333  2A93  06B4               	xorwf	(___flge@ff2+3)^(0+128),f
 21334  2A94  0834               	movf	(___flge@ff2+3)^(0+128),w
 21335  2A95  0230               	subwf	(___flge@ff1+3)^(0+128),w
 21336  2A96  1D03               	skipz
 21337  2A97  0008               	return
 21338  2A98  0833               	movf	(___flge@ff2+2)^(0+128),w
 21339  2A99  022F               	subwf	(___flge@ff1+2)^(0+128),w
 21340  2A9A  1D03               	skipz
 21341  2A9B  0008               	return
 21342  2A9C  0832               	movf	(___flge@ff2+1)^(0+128),w
 21343  2A9D  022E               	subwf	(___flge@ff1+1)^(0+128),w
 21344  2A9E  1D03               	skipz
 21345  2A9F  0008               	return
 21346  2AA0  0831               	movf	___flge@ff2^(0+128),w
 21347  2AA1  022D               	subwf	___flge@ff1^(0+128),w
 21348  2AA2  0008               	return
 21349  2AA3                     __end_of___flge:	
 21350                           
 21351                           	psect	text57
 21352  00D5                     __ptext57:	
 21353 ;; *************** function _calcRequiredPower *****************
 21354 ;; Defined at:
 21355 ;;		line 276 in file "system.c"
 21356 ;; Parameters:    Size  Location     Type
 21357 ;;		None
 21358 ;; Auto vars:     Size  Location     Type
 21359 ;;  T2              4   69[BANK1 ] float 
 21360 ;;  T1              4   65[BANK1 ] float 
 21361 ;;  A               4   57[BANK1 ] float 
 21362 ;;  phi             4   53[BANK1 ] float 
 21363 ;;  d               4   49[BANK1 ] float 
 21364 ;;  Rth             4   21[BANK1 ] float 
 21365 ;;  p               4   17[BANK1 ] float 
 21366 ;;  n               1   73[BANK1 ] unsigned char 
 21367 ;; Return value:  Size  Location     Type
 21368 ;;                  1    wreg      void 
 21369 ;; Registers used:
 21370 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21371 ;; Tracked objects:
 21372 ;;		On entry : 0/0
 21373 ;;		On exit  : 0/0
 21374 ;;		Unchanged: 0/0
 21375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21377 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21378 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21379 ;;      Totals:         0       0      61       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21380 ;;Total ram usage:       61 bytes
 21381 ;; Hardware stack levels used:    1
 21382 ;; Hardware stack levels required when called:    5
 21383 ;; This function calls:
 21384 ;;		___fladd
 21385 ;;		___fldiv
 21386 ;;		___flmul
 21387 ;;		___flsub
 21388 ;;		___wmul
 21389 ;; This function is called by:
 21390 ;;		_main
 21391 ;; This function uses a non-reentrant model
 21392 ;;
 21393                           
 21394                           
 21395                           ;psect for function _calcRequiredPower
 21396  00D5                     _calcRequiredPower:	
 21397                           
 21398                           ;system.c: 278:  uint8_t n;;system.c: 279:  float d, A, T1, T2, phi;;system.c: 280:  flo
      +                          at p, Rth;;system.c: 282:  for (n = 0; n < 4; n++) {
 21399                           
 21400                           ;incstack = 0
 21401                           ; Regs used in _calcRequiredPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21402  00D5  0141               	movlb	1	; select bank1
 21403  00D6  01E9               	clrf	calcRequiredPower@n^(0+128)
 21404  00D7                     l9044:	
 21405                           
 21406                           ;system.c: 292:   d = 0.0254 * data.heater[n].lensDia;
 21407  00D7  303C               	movlw	60
 21408  00D8  0140               	movlb	0	; select bank0
 21409  00D9  00C4               	movwf	___flmul@b+3
 21410  00DA  30D0               	movlw	208
 21411  00DB  00C3               	movwf	___flmul@b+2
 21412  00DC  3013               	movlw	19
 21413  00DD  00C2               	movwf	___flmul@b+1
 21414  00DE  30A9               	movlw	169
 21415  00DF  00C1               	movwf	___flmul@b
 21416  00E0  0141               	movlb	1	; select bank1
 21417  00E1  0869               	movf	calcRequiredPower@n^(0+128),w
 21418  00E2  00AD               	movwf	??_calcRequiredPower^(0+128)
 21419  00E3  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 21420  00E4  082D               	movf	??_calcRequiredPower^(0+128),w
 21421  00E5  0140               	movlb	0	; select bank0
 21422  00E6  00AD               	movwf	___wmul@multiplier
 21423  00E7  0141               	movlb	1	; select bank1
 21424  00E8  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 21425  00E9  0140               	movlb	0	; select bank0
 21426  00EA  00AE               	movwf	___wmul@multiplier+1
 21427  00EB  301F               	movlw	31
 21428  00EC  00AF               	movwf	___wmul@multiplicand
 21429  00ED  3000               	movlw	0
 21430  00EE  00B0               	movwf	___wmul@multiplicand+1
 21431  00EF  31B1  2161  3180   	fcall	___wmul
 21432  00F2  3089               	movlw	137
 21433  00F3  0141               	movlb	1	; select bank1
 21434  00F4  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 21435  00F5  3027               	movlw	39
 21436  00F6  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 21437  00F7  0140               	movlb	0	; select bank0
 21438  00F8  082D               	movf	?___wmul,w
 21439  00F9  0141               	movlb	1	; select bank1
 21440  00FA  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 21441  00FB  0086               	movwf	6
 21442  00FC  0140               	movlb	0	; select bank0
 21443  00FD  082E               	movf	?___wmul+1,w
 21444  00FE  0141               	movlb	1	; select bank1
 21445  00FF  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 21446  0100  0087               	movwf	7
 21447  0101  3F40               	moviw [0]fsr1
 21448  0102  0140               	movlb	0	; select bank0
 21449  0103  00C5               	movwf	___flmul@a
 21450  0104  3F41               	moviw [1]fsr1
 21451  0105  00C6               	movwf	___flmul@a+1
 21452  0106  3F42               	moviw [2]fsr1
 21453  0107  00C7               	movwf	___flmul@a+2
 21454  0108  3F43               	moviw [3]fsr1
 21455  0109  00C8               	movwf	___flmul@a+3
 21456  010A  3185  2561  3180   	fcall	___flmul
 21457  010D  0140               	movlb	0	; select bank0
 21458  010E  0844               	movf	?___flmul+3,w
 21459  010F  0141               	movlb	1	; select bank1
 21460  0110  00D4               	movwf	(calcRequiredPower@d+3)^(0+128)
 21461  0111  0140               	movlb	0	; select bank0
 21462  0112  0843               	movf	?___flmul+2,w
 21463  0113  0141               	movlb	1	; select bank1
 21464  0114  00D3               	movwf	(calcRequiredPower@d+2)^(0+128)
 21465  0115  0140               	movlb	0	; select bank0
 21466  0116  0842               	movf	?___flmul+1,w
 21467  0117  0141               	movlb	1	; select bank1
 21468  0118  00D2               	movwf	(calcRequiredPower@d+1)^(0+128)
 21469  0119  0140               	movlb	0	; select bank0
 21470  011A  0841               	movf	?___flmul,w
 21471  011B  0141               	movlb	1	; select bank1
 21472  011C  00D1               	movwf	calcRequiredPower@d^(0+128)
 21473                           
 21474                           ;system.c: 293:   A = (3.14 * d * d) / 4;
 21475  011D  3040               	movlw	64
 21476  011E  0140               	movlb	0	; select bank0
 21477  011F  00C4               	movwf	___flmul@b+3
 21478  0120  3048               	movlw	72
 21479  0121  00C3               	movwf	___flmul@b+2
 21480  0122  30F5               	movlw	245
 21481  0123  00C2               	movwf	___flmul@b+1
 21482  0124  30C3               	movlw	195
 21483  0125  00C1               	movwf	___flmul@b
 21484  0126  0141               	movlb	1	; select bank1
 21485  0127  0854               	movf	(calcRequiredPower@d+3)^(0+128),w
 21486  0128  0140               	movlb	0	; select bank0
 21487  0129  00C8               	movwf	___flmul@a+3
 21488  012A  0141               	movlb	1	; select bank1
 21489  012B  0853               	movf	(calcRequiredPower@d+2)^(0+128),w
 21490  012C  0140               	movlb	0	; select bank0
 21491  012D  00C7               	movwf	___flmul@a+2
 21492  012E  0141               	movlb	1	; select bank1
 21493  012F  0852               	movf	(calcRequiredPower@d+1)^(0+128),w
 21494  0130  0140               	movlb	0	; select bank0
 21495  0131  00C6               	movwf	___flmul@a+1
 21496  0132  0141               	movlb	1	; select bank1
 21497  0133  0851               	movf	calcRequiredPower@d^(0+128),w
 21498  0134  0140               	movlb	0	; select bank0
 21499  0135  00C5               	movwf	___flmul@a
 21500  0136  3185  2561  3180   	fcall	___flmul
 21501  0139  0140               	movlb	0	; select bank0
 21502  013A  0844               	movf	?___flmul+3,w
 21503  013B  0141               	movlb	1	; select bank1
 21504  013C  00E0               	movwf	(_calcRequiredPower$2773+3)^(0+128)
 21505  013D  0140               	movlb	0	; select bank0
 21506  013E  0843               	movf	?___flmul+2,w
 21507  013F  0141               	movlb	1	; select bank1
 21508  0140  00DF               	movwf	(_calcRequiredPower$2773+2)^(0+128)
 21509  0141  0140               	movlb	0	; select bank0
 21510  0142  0842               	movf	?___flmul+1,w
 21511  0143  0141               	movlb	1	; select bank1
 21512  0144  00DE               	movwf	(_calcRequiredPower$2773+1)^(0+128)
 21513  0145  0140               	movlb	0	; select bank0
 21514  0146  0841               	movf	?___flmul,w
 21515  0147  0141               	movlb	1	; select bank1
 21516  0148  00DD               	movwf	_calcRequiredPower$2773^(0+128)
 21517                           
 21518                           ;system.c: 293:   A = (3.14 * d * d) / 4;
 21519  0149  3040               	movlw	64
 21520  014A  0140               	movlb	0	; select bank0
 21521  014B  00DE               	movwf	___fldiv@a+3
 21522  014C  3080               	movlw	128
 21523  014D  00DD               	movwf	___fldiv@a+2
 21524  014E  3000               	movlw	0
 21525  014F  00DC               	movwf	___fldiv@a+1
 21526  0150  3000               	movlw	0
 21527  0151  00DB               	movwf	___fldiv@a
 21528  0152  0141               	movlb	1	; select bank1
 21529  0153  0854               	movf	(calcRequiredPower@d+3)^(0+128),w
 21530  0154  0140               	movlb	0	; select bank0
 21531  0155  00C4               	movwf	___flmul@b+3
 21532  0156  0141               	movlb	1	; select bank1
 21533  0157  0853               	movf	(calcRequiredPower@d+2)^(0+128),w
 21534  0158  0140               	movlb	0	; select bank0
 21535  0159  00C3               	movwf	___flmul@b+2
 21536  015A  0141               	movlb	1	; select bank1
 21537  015B  0852               	movf	(calcRequiredPower@d+1)^(0+128),w
 21538  015C  0140               	movlb	0	; select bank0
 21539  015D  00C2               	movwf	___flmul@b+1
 21540  015E  0141               	movlb	1	; select bank1
 21541  015F  0851               	movf	calcRequiredPower@d^(0+128),w
 21542  0160  0140               	movlb	0	; select bank0
 21543  0161  00C1               	movwf	___flmul@b
 21544  0162  0141               	movlb	1	; select bank1
 21545  0163  0860               	movf	(_calcRequiredPower$2773+3)^(0+128),w
 21546  0164  0140               	movlb	0	; select bank0
 21547  0165  00C8               	movwf	___flmul@a+3
 21548  0166  0141               	movlb	1	; select bank1
 21549  0167  085F               	movf	(_calcRequiredPower$2773+2)^(0+128),w
 21550  0168  0140               	movlb	0	; select bank0
 21551  0169  00C7               	movwf	___flmul@a+2
 21552  016A  0141               	movlb	1	; select bank1
 21553  016B  085E               	movf	(_calcRequiredPower$2773+1)^(0+128),w
 21554  016C  0140               	movlb	0	; select bank0
 21555  016D  00C6               	movwf	___flmul@a+1
 21556  016E  0141               	movlb	1	; select bank1
 21557  016F  085D               	movf	_calcRequiredPower$2773^(0+128),w
 21558  0170  0140               	movlb	0	; select bank0
 21559  0171  00C5               	movwf	___flmul@a
 21560  0172  3185  2561  3180   	fcall	___flmul
 21561  0175  0140               	movlb	0	; select bank0
 21562  0176  0844               	movf	?___flmul+3,w
 21563  0177  00E2               	movwf	___fldiv@b+3
 21564  0178  0843               	movf	?___flmul+2,w
 21565  0179  00E1               	movwf	___fldiv@b+2
 21566  017A  0842               	movf	?___flmul+1,w
 21567  017B  00E0               	movwf	___fldiv@b+1
 21568  017C  0841               	movf	?___flmul,w
 21569  017D  00DF               	movwf	___fldiv@b
 21570  017E  319E  2628  3180   	fcall	___fldiv
 21571  0181  0140               	movlb	0	; select bank0
 21572  0182  085E               	movf	?___fldiv+3,w
 21573  0183  0141               	movlb	1	; select bank1
 21574  0184  00DC               	movwf	(calcRequiredPower@A+3)^(0+128)
 21575  0185  0140               	movlb	0	; select bank0
 21576  0186  085D               	movf	?___fldiv+2,w
 21577  0187  0141               	movlb	1	; select bank1
 21578  0188  00DB               	movwf	(calcRequiredPower@A+2)^(0+128)
 21579  0189  0140               	movlb	0	; select bank0
 21580  018A  085C               	movf	?___fldiv+1,w
 21581  018B  0141               	movlb	1	; select bank1
 21582  018C  00DA               	movwf	(calcRequiredPower@A+1)^(0+128)
 21583  018D  0140               	movlb	0	; select bank0
 21584  018E  085B               	movf	?___fldiv,w
 21585  018F  0141               	movlb	1	; select bank1
 21586  0190  00D9               	movwf	calcRequiredPower@A^(0+128)
 21587                           
 21588                           ;system.c: 295:   T1 = data.dewPointC + data.dpOffset + 273.15;
 21589  0191  304A               	movlw	74
 21590  0192  0086               	movwf	6
 21591  0193  3027               	movlw	39
 21592  0194  0087               	movwf	7
 21593  0195  315D               	addfsr 1,29
 21594  0196  3F40               	moviw [0]fsr1
 21595  0197  0140               	movlb	0	; select bank0
 21596  0198  00DB               	movwf	___fladd@b
 21597  0199  3F41               	moviw [1]fsr1
 21598  019A  00DC               	movwf	___fladd@b+1
 21599  019B  3F42               	moviw [2]fsr1
 21600  019C  00DD               	movwf	___fladd@b+2
 21601  019D  3F43               	moviw [3]fsr1
 21602  019E  00DE               	movwf	___fladd@b+3
 21603  019F  304A               	movlw	74
 21604  01A0  0086               	movwf	6
 21605  01A1  3027               	movlw	39
 21606  01A2  0087               	movwf	7
 21607  01A3  3148               	addfsr 1,8
 21608  01A4  3F40               	moviw [0]fsr1
 21609  01A5  00DF               	movwf	___fladd@a
 21610  01A6  3F41               	moviw [1]fsr1
 21611  01A7  00E0               	movwf	___fladd@a+1
 21612  01A8  3F42               	moviw [2]fsr1
 21613  01A9  00E1               	movwf	___fladd@a+2
 21614  01AA  3F43               	moviw [3]fsr1
 21615  01AB  00E2               	movwf	___fladd@a+3
 21616  01AC  3192  2232  3180   	fcall	___fladd
 21617  01AF  0140               	movlb	0	; select bank0
 21618  01B0  085E               	movf	?___fladd+3,w
 21619  01B1  0141               	movlb	1	; select bank1
 21620  01B2  00BC               	movwf	(_calcRequiredPower$2774+3)^(0+128)
 21621  01B3  0140               	movlb	0	; select bank0
 21622  01B4  085D               	movf	?___fladd+2,w
 21623  01B5  0141               	movlb	1	; select bank1
 21624  01B6  00BB               	movwf	(_calcRequiredPower$2774+2)^(0+128)
 21625  01B7  0140               	movlb	0	; select bank0
 21626  01B8  085C               	movf	?___fladd+1,w
 21627  01B9  0141               	movlb	1	; select bank1
 21628  01BA  00BA               	movwf	(_calcRequiredPower$2774+1)^(0+128)
 21629  01BB  0140               	movlb	0	; select bank0
 21630  01BC  085B               	movf	?___fladd,w
 21631  01BD  0141               	movlb	1	; select bank1
 21632  01BE  00B9               	movwf	_calcRequiredPower$2774^(0+128)
 21633                           
 21634                           ;system.c: 295:   T1 = data.dewPointC + data.dpOffset + 273.15;
 21635  01BF  3043               	movlw	67
 21636  01C0  0140               	movlb	0	; select bank0
 21637  01C1  00DE               	movwf	___fladd@b+3
 21638  01C2  3088               	movlw	136
 21639  01C3  00DD               	movwf	___fladd@b+2
 21640  01C4  3093               	movlw	147
 21641  01C5  00DC               	movwf	___fladd@b+1
 21642  01C6  3033               	movlw	51
 21643  01C7  00DB               	movwf	___fladd@b
 21644  01C8  0141               	movlb	1	; select bank1
 21645  01C9  083C               	movf	(_calcRequiredPower$2774+3)^(0+128),w
 21646  01CA  0140               	movlb	0	; select bank0
 21647  01CB  00E2               	movwf	___fladd@a+3
 21648  01CC  0141               	movlb	1	; select bank1
 21649  01CD  083B               	movf	(_calcRequiredPower$2774+2)^(0+128),w
 21650  01CE  0140               	movlb	0	; select bank0
 21651  01CF  00E1               	movwf	___fladd@a+2
 21652  01D0  0141               	movlb	1	; select bank1
 21653  01D1  083A               	movf	(_calcRequiredPower$2774+1)^(0+128),w
 21654  01D2  0140               	movlb	0	; select bank0
 21655  01D3  00E0               	movwf	___fladd@a+1
 21656  01D4  0141               	movlb	1	; select bank1
 21657  01D5  0839               	movf	_calcRequiredPower$2774^(0+128),w
 21658  01D6  0140               	movlb	0	; select bank0
 21659  01D7  00DF               	movwf	___fladd@a
 21660  01D8  3192  2232  3180   	fcall	___fladd
 21661  01DB  0140               	movlb	0	; select bank0
 21662  01DC  085E               	movf	?___fladd+3,w
 21663  01DD  0141               	movlb	1	; select bank1
 21664  01DE  00E4               	movwf	(calcRequiredPower@T1+3)^(0+128)
 21665  01DF  0140               	movlb	0	; select bank0
 21666  01E0  085D               	movf	?___fladd+2,w
 21667  01E1  0141               	movlb	1	; select bank1
 21668  01E2  00E3               	movwf	(calcRequiredPower@T1+2)^(0+128)
 21669  01E3  0140               	movlb	0	; select bank0
 21670  01E4  085C               	movf	?___fladd+1,w
 21671  01E5  0141               	movlb	1	; select bank1
 21672  01E6  00E2               	movwf	(calcRequiredPower@T1+1)^(0+128)
 21673  01E7  0140               	movlb	0	; select bank0
 21674  01E8  085B               	movf	?___fladd,w
 21675  01E9  0141               	movlb	1	; select bank1
 21676  01EA  00E1               	movwf	calcRequiredPower@T1^(0+128)
 21677                           
 21678                           ;system.c: 296:   T2 = data.skyTemp + 273.15;
 21679  01EB  3043               	movlw	67
 21680  01EC  0140               	movlb	0	; select bank0
 21681  01ED  00DE               	movwf	___fladd@b+3
 21682  01EE  3088               	movlw	136
 21683  01EF  00DD               	movwf	___fladd@b+2
 21684  01F0  3093               	movlw	147
 21685  01F1  00DC               	movwf	___fladd@b+1
 21686  01F2  3033               	movlw	51
 21687  01F3  00DB               	movwf	___fladd@b
 21688  01F4  306B               	movlw	107
 21689  01F5  0086               	movwf	6
 21690  01F6  3027               	movlw	39
 21691  01F7  0087               	movwf	7
 21692  01F8  3F40               	moviw [0]fsr1
 21693  01F9  00DF               	movwf	___fladd@a
 21694  01FA  3F41               	moviw [1]fsr1
 21695  01FB  00E0               	movwf	___fladd@a+1
 21696  01FC  3F42               	moviw [2]fsr1
 21697  01FD  00E1               	movwf	___fladd@a+2
 21698  01FE  3F43               	moviw [3]fsr1
 21699  01FF  00E2               	movwf	___fladd@a+3
 21700  0200  3192  2232  3180   	fcall	___fladd
 21701  0203  0140               	movlb	0	; select bank0
 21702  0204  085E               	movf	?___fladd+3,w
 21703  0205  0141               	movlb	1	; select bank1
 21704  0206  00E8               	movwf	(calcRequiredPower@T2+3)^(0+128)
 21705  0207  0140               	movlb	0	; select bank0
 21706  0208  085D               	movf	?___fladd+2,w
 21707  0209  0141               	movlb	1	; select bank1
 21708  020A  00E7               	movwf	(calcRequiredPower@T2+2)^(0+128)
 21709  020B  0140               	movlb	0	; select bank0
 21710  020C  085C               	movf	?___fladd+1,w
 21711  020D  0141               	movlb	1	; select bank1
 21712  020E  00E6               	movwf	(calcRequiredPower@T2+1)^(0+128)
 21713  020F  0140               	movlb	0	; select bank0
 21714  0210  085B               	movf	?___fladd,w
 21715  0211  0141               	movlb	1	; select bank1
 21716  0212  00E5               	movwf	calcRequiredPower@T2^(0+128)
 21717                           
 21718                           ;system.c: 298:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21719  0213  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 21720  0214  0140               	movlb	0	; select bank0
 21721  0215  00C4               	movwf	___flmul@b+3
 21722  0216  0141               	movlb	1	; select bank1
 21723  0217  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 21724  0218  0140               	movlb	0	; select bank0
 21725  0219  00C3               	movwf	___flmul@b+2
 21726  021A  0141               	movlb	1	; select bank1
 21727  021B  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 21728  021C  0140               	movlb	0	; select bank0
 21729  021D  00C2               	movwf	___flmul@b+1
 21730  021E  0141               	movlb	1	; select bank1
 21731  021F  0865               	movf	calcRequiredPower@T2^(0+128),w
 21732  0220  0140               	movlb	0	; select bank0
 21733  0221  00C1               	movwf	___flmul@b
 21734  0222  0141               	movlb	1	; select bank1
 21735  0223  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 21736  0224  0140               	movlb	0	; select bank0
 21737  0225  00C8               	movwf	___flmul@a+3
 21738  0226  0141               	movlb	1	; select bank1
 21739  0227  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 21740  0228  0140               	movlb	0	; select bank0
 21741  0229  00C7               	movwf	___flmul@a+2
 21742  022A  0141               	movlb	1	; select bank1
 21743  022B  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 21744  022C  0140               	movlb	0	; select bank0
 21745  022D  00C6               	movwf	___flmul@a+1
 21746  022E  0141               	movlb	1	; select bank1
 21747  022F  0865               	movf	calcRequiredPower@T2^(0+128),w
 21748  0230  0140               	movlb	0	; select bank0
 21749  0231  00C5               	movwf	___flmul@a
 21750  0232  3185  2561  3180   	fcall	___flmul
 21751  0235  0140               	movlb	0	; select bank0
 21752  0236  0844               	movf	?___flmul+3,w
 21753  0237  0141               	movlb	1	; select bank1
 21754  0238  00E0               	movwf	(_calcRequiredPower$2773+3)^(0+128)
 21755  0239  0140               	movlb	0	; select bank0
 21756  023A  0843               	movf	?___flmul+2,w
 21757  023B  0141               	movlb	1	; select bank1
 21758  023C  00DF               	movwf	(_calcRequiredPower$2773+2)^(0+128)
 21759  023D  0140               	movlb	0	; select bank0
 21760  023E  0842               	movf	?___flmul+1,w
 21761  023F  0141               	movlb	1	; select bank1
 21762  0240  00DE               	movwf	(_calcRequiredPower$2773+1)^(0+128)
 21763  0241  0140               	movlb	0	; select bank0
 21764  0242  0841               	movf	?___flmul,w
 21765  0243  0141               	movlb	1	; select bank1
 21766  0244  00DD               	movwf	_calcRequiredPower$2773^(0+128)
 21767                           
 21768                           ;system.c: 298:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21769  0245  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 21770  0246  0140               	movlb	0	; select bank0
 21771  0247  00C4               	movwf	___flmul@b+3
 21772  0248  0141               	movlb	1	; select bank1
 21773  0249  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 21774  024A  0140               	movlb	0	; select bank0
 21775  024B  00C3               	movwf	___flmul@b+2
 21776  024C  0141               	movlb	1	; select bank1
 21777  024D  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 21778  024E  0140               	movlb	0	; select bank0
 21779  024F  00C2               	movwf	___flmul@b+1
 21780  0250  0141               	movlb	1	; select bank1
 21781  0251  0865               	movf	calcRequiredPower@T2^(0+128),w
 21782  0252  0140               	movlb	0	; select bank0
 21783  0253  00C1               	movwf	___flmul@b
 21784  0254  0141               	movlb	1	; select bank1
 21785  0255  0860               	movf	(_calcRequiredPower$2773+3)^(0+128),w
 21786  0256  0140               	movlb	0	; select bank0
 21787  0257  00C8               	movwf	___flmul@a+3
 21788  0258  0141               	movlb	1	; select bank1
 21789  0259  085F               	movf	(_calcRequiredPower$2773+2)^(0+128),w
 21790  025A  0140               	movlb	0	; select bank0
 21791  025B  00C7               	movwf	___flmul@a+2
 21792  025C  0141               	movlb	1	; select bank1
 21793  025D  085E               	movf	(_calcRequiredPower$2773+1)^(0+128),w
 21794  025E  0140               	movlb	0	; select bank0
 21795  025F  00C6               	movwf	___flmul@a+1
 21796  0260  0141               	movlb	1	; select bank1
 21797  0261  085D               	movf	_calcRequiredPower$2773^(0+128),w
 21798  0262  0140               	movlb	0	; select bank0
 21799  0263  00C5               	movwf	___flmul@a
 21800  0264  3185  2561  3180   	fcall	___flmul
 21801  0267  0140               	movlb	0	; select bank0
 21802  0268  0844               	movf	?___flmul+3,w
 21803  0269  0141               	movlb	1	; select bank1
 21804  026A  00C0               	movwf	(_calcRequiredPower$2775+3)^(0+128)
 21805  026B  0140               	movlb	0	; select bank0
 21806  026C  0843               	movf	?___flmul+2,w
 21807  026D  0141               	movlb	1	; select bank1
 21808  026E  00BF               	movwf	(_calcRequiredPower$2775+2)^(0+128)
 21809  026F  0140               	movlb	0	; select bank0
 21810  0270  0842               	movf	?___flmul+1,w
 21811  0271  0141               	movlb	1	; select bank1
 21812  0272  00BE               	movwf	(_calcRequiredPower$2775+1)^(0+128)
 21813  0273  0140               	movlb	0	; select bank0
 21814  0274  0841               	movf	?___flmul,w
 21815  0275  0141               	movlb	1	; select bank1
 21816  0276  00BD               	movwf	_calcRequiredPower$2775^(0+128)
 21817                           
 21818                           ;system.c: 298:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21819  0277  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 21820  0278  0140               	movlb	0	; select bank0
 21821  0279  00C4               	movwf	___flmul@b+3
 21822  027A  0141               	movlb	1	; select bank1
 21823  027B  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 21824  027C  0140               	movlb	0	; select bank0
 21825  027D  00C3               	movwf	___flmul@b+2
 21826  027E  0141               	movlb	1	; select bank1
 21827  027F  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 21828  0280  0140               	movlb	0	; select bank0
 21829  0281  00C2               	movwf	___flmul@b+1
 21830  0282  0141               	movlb	1	; select bank1
 21831  0283  0861               	movf	calcRequiredPower@T1^(0+128),w
 21832  0284  0140               	movlb	0	; select bank0
 21833  0285  00C1               	movwf	___flmul@b
 21834  0286  0141               	movlb	1	; select bank1
 21835  0287  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 21836  0288  0140               	movlb	0	; select bank0
 21837  0289  00C8               	movwf	___flmul@a+3
 21838  028A  0141               	movlb	1	; select bank1
 21839  028B  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 21840  028C  0140               	movlb	0	; select bank0
 21841  028D  00C7               	movwf	___flmul@a+2
 21842  028E  0141               	movlb	1	; select bank1
 21843  028F  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 21844  0290  0140               	movlb	0	; select bank0
 21845  0291  00C6               	movwf	___flmul@a+1
 21846  0292  0141               	movlb	1	; select bank1
 21847  0293  0861               	movf	calcRequiredPower@T1^(0+128),w
 21848  0294  0140               	movlb	0	; select bank0
 21849  0295  00C5               	movwf	___flmul@a
 21850  0296  3185  2561  3180   	fcall	___flmul
 21851  0299  0140               	movlb	0	; select bank0
 21852  029A  0844               	movf	?___flmul+3,w
 21853  029B  0141               	movlb	1	; select bank1
 21854  029C  00C4               	movwf	(_calcRequiredPower$2776+3)^(0+128)
 21855  029D  0140               	movlb	0	; select bank0
 21856  029E  0843               	movf	?___flmul+2,w
 21857  029F  0141               	movlb	1	; select bank1
 21858  02A0  00C3               	movwf	(_calcRequiredPower$2776+2)^(0+128)
 21859  02A1  0140               	movlb	0	; select bank0
 21860  02A2  0842               	movf	?___flmul+1,w
 21861  02A3  0141               	movlb	1	; select bank1
 21862  02A4  00C2               	movwf	(_calcRequiredPower$2776+1)^(0+128)
 21863  02A5  0140               	movlb	0	; select bank0
 21864  02A6  0841               	movf	?___flmul,w
 21865  02A7  0141               	movlb	1	; select bank1
 21866  02A8  00C1               	movwf	_calcRequiredPower$2776^(0+128)
 21867                           
 21868                           ;system.c: 298:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21869  02A9  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 21870  02AA  0140               	movlb	0	; select bank0
 21871  02AB  00C4               	movwf	___flmul@b+3
 21872  02AC  0141               	movlb	1	; select bank1
 21873  02AD  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 21874  02AE  0140               	movlb	0	; select bank0
 21875  02AF  00C3               	movwf	___flmul@b+2
 21876  02B0  0141               	movlb	1	; select bank1
 21877  02B1  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 21878  02B2  0140               	movlb	0	; select bank0
 21879  02B3  00C2               	movwf	___flmul@b+1
 21880  02B4  0141               	movlb	1	; select bank1
 21881  02B5  0861               	movf	calcRequiredPower@T1^(0+128),w
 21882  02B6  0140               	movlb	0	; select bank0
 21883  02B7  00C1               	movwf	___flmul@b
 21884  02B8  0141               	movlb	1	; select bank1
 21885  02B9  0844               	movf	(_calcRequiredPower$2776+3)^(0+128),w
 21886  02BA  0140               	movlb	0	; select bank0
 21887  02BB  00C8               	movwf	___flmul@a+3
 21888  02BC  0141               	movlb	1	; select bank1
 21889  02BD  0843               	movf	(_calcRequiredPower$2776+2)^(0+128),w
 21890  02BE  0140               	movlb	0	; select bank0
 21891  02BF  00C7               	movwf	___flmul@a+2
 21892  02C0  0141               	movlb	1	; select bank1
 21893  02C1  0842               	movf	(_calcRequiredPower$2776+1)^(0+128),w
 21894  02C2  0140               	movlb	0	; select bank0
 21895  02C3  00C6               	movwf	___flmul@a+1
 21896  02C4  0141               	movlb	1	; select bank1
 21897  02C5  0841               	movf	_calcRequiredPower$2776^(0+128),w
 21898  02C6  0140               	movlb	0	; select bank0
 21899  02C7  00C5               	movwf	___flmul@a
 21900  02C8  3185  2561  3180   	fcall	___flmul
 21901  02CB  0140               	movlb	0	; select bank0
 21902  02CC  0844               	movf	?___flmul+3,w
 21903  02CD  0141               	movlb	1	; select bank1
 21904  02CE  00C8               	movwf	(_calcRequiredPower$2777+3)^(0+128)
 21905  02CF  0140               	movlb	0	; select bank0
 21906  02D0  0843               	movf	?___flmul+2,w
 21907  02D1  0141               	movlb	1	; select bank1
 21908  02D2  00C7               	movwf	(_calcRequiredPower$2777+2)^(0+128)
 21909  02D3  0140               	movlb	0	; select bank0
 21910  02D4  0842               	movf	?___flmul+1,w
 21911  02D5  0141               	movlb	1	; select bank1
 21912  02D6  00C6               	movwf	(_calcRequiredPower$2777+1)^(0+128)
 21913  02D7  0140               	movlb	0	; select bank0
 21914  02D8  0841               	movf	?___flmul,w
 21915  02D9  0141               	movlb	1	; select bank1
 21916  02DA  00C5               	movwf	_calcRequiredPower$2777^(0+128)
 21917                           
 21918                           ;system.c: 298:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 21919  02DB  0868               	movf	(calcRequiredPower@T2+3)^(0+128),w
 21920  02DC  0140               	movlb	0	; select bank0
 21921  02DD  00C4               	movwf	___flmul@b+3
 21922  02DE  0141               	movlb	1	; select bank1
 21923  02DF  0867               	movf	(calcRequiredPower@T2+2)^(0+128),w
 21924  02E0  0140               	movlb	0	; select bank0
 21925  02E1  00C3               	movwf	___flmul@b+2
 21926  02E2  0141               	movlb	1	; select bank1
 21927  02E3  0866               	movf	(calcRequiredPower@T2+1)^(0+128),w
 21928  02E4  0140               	movlb	0	; select bank0
 21929  02E5  00C2               	movwf	___flmul@b+1
 21930  02E6  0141               	movlb	1	; select bank1
 21931  02E7  0865               	movf	calcRequiredPower@T2^(0+128),w
 21932  02E8  0140               	movlb	0	; select bank0
 21933  02E9  00C1               	movwf	___flmul@b
 21934  02EA  0141               	movlb	1	; select bank1
 21935  02EB  0840               	movf	(_calcRequiredPower$2775+3)^(0+128),w
 21936  02EC  0140               	movlb	0	; select bank0
 21937  02ED  00C8               	movwf	___flmul@a+3
 21938  02EE  0141               	movlb	1	; select bank1
 21939  02EF  083F               	movf	(_calcRequiredPower$2775+2)^(0+128),w
 21940  02F0  0140               	movlb	0	; select bank0
 21941  02F1  00C7               	movwf	___flmul@a+2
 21942  02F2  0141               	movlb	1	; select bank1
 21943  02F3  083E               	movf	(_calcRequiredPower$2775+1)^(0+128),w
 21944  02F4  0140               	movlb	0	; select bank0
 21945  02F5  00C6               	movwf	___flmul@a+1
 21946  02F6  0141               	movlb	1	; select bank1
 21947  02F7  083D               	movf	_calcRequiredPower$2775^(0+128),w
 21948  02F8  0140               	movlb	0	; select bank0
 21949  02F9  00C5               	movwf	___flmul@a
 21950  02FA  3185  2561  3180   	fcall	___flmul
 21951  02FD  0140               	movlb	0	; select bank0
 21952  02FE  0844               	movf	?___flmul+3,w
 21953  02FF  0141               	movlb	1	; select bank1
 21954  0300  00A3               	movwf	(___flsub@a+3)^(0+128)
 21955  0301  0140               	movlb	0	; select bank0
 21956  0302  0843               	movf	?___flmul+2,w
 21957  0303  0141               	movlb	1	; select bank1
 21958  0304  00A2               	movwf	(___flsub@a+2)^(0+128)
 21959  0305  0140               	movlb	0	; select bank0
 21960  0306  0842               	movf	?___flmul+1,w
 21961  0307  0141               	movlb	1	; select bank1
 21962  0308  00A1               	movwf	(___flsub@a+1)^(0+128)
 21963  0309  0140               	movlb	0	; select bank0
 21964  030A  0841               	movf	?___flmul,w
 21965  030B  0141               	movlb	1	; select bank1
 21966  030C  00A0               	movwf	___flsub@a^(0+128)
 21967  030D  0864               	movf	(calcRequiredPower@T1+3)^(0+128),w
 21968  030E  0140               	movlb	0	; select bank0
 21969  030F  00C4               	movwf	___flmul@b+3
 21970  0310  0141               	movlb	1	; select bank1
 21971  0311  0863               	movf	(calcRequiredPower@T1+2)^(0+128),w
 21972  0312  0140               	movlb	0	; select bank0
 21973  0313  00C3               	movwf	___flmul@b+2
 21974  0314  0141               	movlb	1	; select bank1
 21975  0315  0862               	movf	(calcRequiredPower@T1+1)^(0+128),w
 21976  0316  0140               	movlb	0	; select bank0
 21977  0317  00C2               	movwf	___flmul@b+1
 21978  0318  0141               	movlb	1	; select bank1
 21979  0319  0861               	movf	calcRequiredPower@T1^(0+128),w
 21980  031A  0140               	movlb	0	; select bank0
 21981  031B  00C1               	movwf	___flmul@b
 21982  031C  0141               	movlb	1	; select bank1
 21983  031D  0848               	movf	(_calcRequiredPower$2777+3)^(0+128),w
 21984  031E  0140               	movlb	0	; select bank0
 21985  031F  00C8               	movwf	___flmul@a+3
 21986  0320  0141               	movlb	1	; select bank1
 21987  0321  0847               	movf	(_calcRequiredPower$2777+2)^(0+128),w
 21988  0322  0140               	movlb	0	; select bank0
 21989  0323  00C7               	movwf	___flmul@a+2
 21990  0324  0141               	movlb	1	; select bank1
 21991  0325  0846               	movf	(_calcRequiredPower$2777+1)^(0+128),w
 21992  0326  0140               	movlb	0	; select bank0
 21993  0327  00C6               	movwf	___flmul@a+1
 21994  0328  0141               	movlb	1	; select bank1
 21995  0329  0845               	movf	_calcRequiredPower$2777^(0+128),w
 21996  032A  0140               	movlb	0	; select bank0
 21997  032B  00C5               	movwf	___flmul@a
 21998  032C  3185  2561  3180   	fcall	___flmul
 21999  032F  0140               	movlb	0	; select bank0
 22000  0330  0844               	movf	?___flmul+3,w
 22001  0331  0141               	movlb	1	; select bank1
 22002  0332  00A7               	movwf	(___flsub@b+3)^(0+128)
 22003  0333  0140               	movlb	0	; select bank0
 22004  0334  0843               	movf	?___flmul+2,w
 22005  0335  0141               	movlb	1	; select bank1
 22006  0336  00A6               	movwf	(___flsub@b+2)^(0+128)
 22007  0337  0140               	movlb	0	; select bank0
 22008  0338  0842               	movf	?___flmul+1,w
 22009  0339  0141               	movlb	1	; select bank1
 22010  033A  00A5               	movwf	(___flsub@b+1)^(0+128)
 22011  033B  0140               	movlb	0	; select bank0
 22012  033C  0841               	movf	?___flmul,w
 22013  033D  0141               	movlb	1	; select bank1
 22014  033E  00A4               	movwf	___flsub@b^(0+128)
 22015  033F  31B3  2388  3180   	fcall	___flsub
 22016  0342  0141               	movlb	1	; select bank1
 22017  0343  0823               	movf	(?___flsub+3)^(0+128),w
 22018  0344  00CC               	movwf	(_calcRequiredPower$2778+3)^(0+128)
 22019  0345  0822               	movf	(?___flsub+2)^(0+128),w
 22020  0346  00CB               	movwf	(_calcRequiredPower$2778+2)^(0+128)
 22021  0347  0821               	movf	(?___flsub+1)^(0+128),w
 22022  0348  00CA               	movwf	(_calcRequiredPower$2778+1)^(0+128)
 22023  0349  0820               	movf	?___flsub^(0+128),w
 22024  034A  00C9               	movwf	_calcRequiredPower$2778^(0+128)
 22025                           
 22026                           ;system.c: 298:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 22027  034B  3033               	movlw	51
 22028  034C  0140               	movlb	0	; select bank0
 22029  034D  00C4               	movwf	___flmul@b+3
 22030  034E  3067               	movlw	103
 22031  034F  00C3               	movwf	___flmul@b+2
 22032  0350  3059               	movlw	89
 22033  0351  00C2               	movwf	___flmul@b+1
 22034  0352  3032               	movlw	50
 22035  0353  00C1               	movwf	___flmul@b
 22036  0354  0141               	movlb	1	; select bank1
 22037  0355  085C               	movf	(calcRequiredPower@A+3)^(0+128),w
 22038  0356  0140               	movlb	0	; select bank0
 22039  0357  00C8               	movwf	___flmul@a+3
 22040  0358  0141               	movlb	1	; select bank1
 22041  0359  085B               	movf	(calcRequiredPower@A+2)^(0+128),w
 22042  035A  0140               	movlb	0	; select bank0
 22043  035B  00C7               	movwf	___flmul@a+2
 22044  035C  0141               	movlb	1	; select bank1
 22045  035D  085A               	movf	(calcRequiredPower@A+1)^(0+128),w
 22046  035E  0140               	movlb	0	; select bank0
 22047  035F  00C6               	movwf	___flmul@a+1
 22048  0360  0141               	movlb	1	; select bank1
 22049  0361  0859               	movf	calcRequiredPower@A^(0+128),w
 22050  0362  0140               	movlb	0	; select bank0
 22051  0363  00C5               	movwf	___flmul@a
 22052  0364  3185  2561  3180   	fcall	___flmul
 22053  0367  0140               	movlb	0	; select bank0
 22054  0368  0844               	movf	?___flmul+3,w
 22055  0369  0141               	movlb	1	; select bank1
 22056  036A  00D0               	movwf	(_calcRequiredPower$2779+3)^(0+128)
 22057  036B  0140               	movlb	0	; select bank0
 22058  036C  0843               	movf	?___flmul+2,w
 22059  036D  0141               	movlb	1	; select bank1
 22060  036E  00CF               	movwf	(_calcRequiredPower$2779+2)^(0+128)
 22061  036F  0140               	movlb	0	; select bank0
 22062  0370  0842               	movf	?___flmul+1,w
 22063  0371  0141               	movlb	1	; select bank1
 22064  0372  00CE               	movwf	(_calcRequiredPower$2779+1)^(0+128)
 22065  0373  0140               	movlb	0	; select bank0
 22066  0374  0841               	movf	?___flmul,w
 22067  0375  0141               	movlb	1	; select bank1
 22068  0376  00CD               	movwf	_calcRequiredPower$2779^(0+128)
 22069                           
 22070                           ;system.c: 298:   phi = 0.95 * 5.67e-8 * A * (T1 * T1 * T1 * T1 - T2 * T2 * T2 * T2);
 22071  0377  084C               	movf	(_calcRequiredPower$2778+3)^(0+128),w
 22072  0378  0140               	movlb	0	; select bank0
 22073  0379  00C4               	movwf	___flmul@b+3
 22074  037A  0141               	movlb	1	; select bank1
 22075  037B  084B               	movf	(_calcRequiredPower$2778+2)^(0+128),w
 22076  037C  0140               	movlb	0	; select bank0
 22077  037D  00C3               	movwf	___flmul@b+2
 22078  037E  0141               	movlb	1	; select bank1
 22079  037F  084A               	movf	(_calcRequiredPower$2778+1)^(0+128),w
 22080  0380  0140               	movlb	0	; select bank0
 22081  0381  00C2               	movwf	___flmul@b+1
 22082  0382  0141               	movlb	1	; select bank1
 22083  0383  0849               	movf	_calcRequiredPower$2778^(0+128),w
 22084  0384  0140               	movlb	0	; select bank0
 22085  0385  00C1               	movwf	___flmul@b
 22086  0386  0141               	movlb	1	; select bank1
 22087  0387  0850               	movf	(_calcRequiredPower$2779+3)^(0+128),w
 22088  0388  0140               	movlb	0	; select bank0
 22089  0389  00C8               	movwf	___flmul@a+3
 22090  038A  0141               	movlb	1	; select bank1
 22091  038B  084F               	movf	(_calcRequiredPower$2779+2)^(0+128),w
 22092  038C  0140               	movlb	0	; select bank0
 22093  038D  00C7               	movwf	___flmul@a+2
 22094  038E  0141               	movlb	1	; select bank1
 22095  038F  084E               	movf	(_calcRequiredPower$2779+1)^(0+128),w
 22096  0390  0140               	movlb	0	; select bank0
 22097  0391  00C6               	movwf	___flmul@a+1
 22098  0392  0141               	movlb	1	; select bank1
 22099  0393  084D               	movf	_calcRequiredPower$2779^(0+128),w
 22100  0394  0140               	movlb	0	; select bank0
 22101  0395  00C5               	movwf	___flmul@a
 22102  0396  3185  2561  3180   	fcall	___flmul
 22103  0399  0140               	movlb	0	; select bank0
 22104  039A  0844               	movf	?___flmul+3,w
 22105  039B  0141               	movlb	1	; select bank1
 22106  039C  00D8               	movwf	(calcRequiredPower@phi+3)^(0+128)
 22107  039D  0140               	movlb	0	; select bank0
 22108  039E  0843               	movf	?___flmul+2,w
 22109  039F  0141               	movlb	1	; select bank1
 22110  03A0  00D7               	movwf	(calcRequiredPower@phi+2)^(0+128)
 22111  03A1  0140               	movlb	0	; select bank0
 22112  03A2  0842               	movf	?___flmul+1,w
 22113  03A3  0141               	movlb	1	; select bank1
 22114  03A4  00D6               	movwf	(calcRequiredPower@phi+1)^(0+128)
 22115  03A5  0140               	movlb	0	; select bank0
 22116  03A6  0841               	movf	?___flmul,w
 22117  03A7  0141               	movlb	1	; select bank1
 22118  03A8  00D5               	movwf	calcRequiredPower@phi^(0+128)
 22119                           
 22120                           ;system.c: 300:   data.heater[n].Preq = phi * data.fudgeFactor;
 22121  03A9  0869               	movf	calcRequiredPower@n^(0+128),w
 22122  03AA  00AD               	movwf	??_calcRequiredPower^(0+128)
 22123  03AB  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 22124  03AC  082D               	movf	??_calcRequiredPower^(0+128),w
 22125  03AD  0140               	movlb	0	; select bank0
 22126  03AE  00AD               	movwf	___wmul@multiplier
 22127  03AF  0141               	movlb	1	; select bank1
 22128  03B0  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 22129  03B1  0140               	movlb	0	; select bank0
 22130  03B2  00AE               	movwf	___wmul@multiplier+1
 22131  03B3  301F               	movlw	31
 22132  03B4  00AF               	movwf	___wmul@multiplicand
 22133  03B5  3000               	movlw	0
 22134  03B6  00B0               	movwf	___wmul@multiplicand+1
 22135  03B7  31B1  2161  3180   	fcall	___wmul
 22136  03BA  307C               	movlw	124
 22137  03BB  0141               	movlb	1	; select bank1
 22138  03BC  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 22139  03BD  3027               	movlw	39
 22140  03BE  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22141  03BF  0140               	movlb	0	; select bank0
 22142  03C0  082D               	movf	?___wmul,w
 22143  03C1  0141               	movlb	1	; select bank1
 22144  03C2  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22145  03C3  0086               	movwf	6
 22146  03C4  0140               	movlb	0	; select bank0
 22147  03C5  082E               	movf	?___wmul+1,w
 22148  03C6  0141               	movlb	1	; select bank1
 22149  03C7  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22150  03C8  0087               	movwf	7
 22151  03C9  0858               	movf	(calcRequiredPower@phi+3)^(0+128),w
 22152  03CA  0140               	movlb	0	; select bank0
 22153  03CB  00C4               	movwf	___flmul@b+3
 22154  03CC  0141               	movlb	1	; select bank1
 22155  03CD  0857               	movf	(calcRequiredPower@phi+2)^(0+128),w
 22156  03CE  0140               	movlb	0	; select bank0
 22157  03CF  00C3               	movwf	___flmul@b+2
 22158  03D0  0141               	movlb	1	; select bank1
 22159  03D1  0856               	movf	(calcRequiredPower@phi+1)^(0+128),w
 22160  03D2  0140               	movlb	0	; select bank0
 22161  03D3  00C2               	movwf	___flmul@b+1
 22162  03D4  0141               	movlb	1	; select bank1
 22163  03D5  0855               	movf	calcRequiredPower@phi^(0+128),w
 22164  03D6  0140               	movlb	0	; select bank0
 22165  03D7  00C1               	movwf	___flmul@b
 22166  03D8  306F               	movlw	111
 22167  03D9  0084               	movwf	4
 22168  03DA  3027               	movlw	39
 22169  03DB  0085               	movwf	5
 22170  03DC  3F00               	moviw [0]fsr0
 22171  03DD  00C5               	movwf	___flmul@a
 22172  03DE  3F01               	moviw [1]fsr0
 22173  03DF  00C6               	movwf	___flmul@a+1
 22174  03E0  3F02               	moviw [2]fsr0
 22175  03E1  00C7               	movwf	___flmul@a+2
 22176  03E2  3F03               	moviw [3]fsr0
 22177  03E3  00C8               	movwf	___flmul@a+3
 22178  03E4  3185  2561  3180   	fcall	___flmul
 22179  03E7  0140               	movlb	0	; select bank0
 22180  03E8  0841               	movf	?___flmul,w
 22181  03E9  3FC0               	movwi [0]fsr1
 22182  03EA  0842               	movf	?___flmul+1,w
 22183  03EB  3FC1               	movwi [1]fsr1
 22184  03EC  0843               	movf	?___flmul+2,w
 22185  03ED  3FC2               	movwi [2]fsr1
 22186  03EE  0844               	movf	?___flmul+3,w
 22187  03EF  3FC3               	movwi [3]fsr1
 22188                           
 22189                           ;system.c: 303:   p = 2 * 3.14 * 0.0254 * data.heater[n].lensDia;
 22190  03F0  303E               	movlw	62
 22191  03F1  00C4               	movwf	___flmul@b+3
 22192  03F2  3023               	movlw	35
 22193  03F3  00C3               	movwf	___flmul@b+2
 22194  03F4  3057               	movlw	87
 22195  03F5  00C2               	movwf	___flmul@b+1
 22196  03F6  301D               	movlw	29
 22197  03F7  00C1               	movwf	___flmul@b
 22198  03F8  0141               	movlb	1	; select bank1
 22199  03F9  0869               	movf	calcRequiredPower@n^(0+128),w
 22200  03FA  00AD               	movwf	??_calcRequiredPower^(0+128)
 22201  03FB  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 22202  03FC  082D               	movf	??_calcRequiredPower^(0+128),w
 22203  03FD  0140               	movlb	0	; select bank0
 22204  03FE  00AD               	movwf	___wmul@multiplier
 22205  03FF  0141               	movlb	1	; select bank1
 22206  0400  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 22207  0401  0140               	movlb	0	; select bank0
 22208  0402  00AE               	movwf	___wmul@multiplier+1
 22209  0403  301F               	movlw	31
 22210  0404  00AF               	movwf	___wmul@multiplicand
 22211  0405  3000               	movlw	0
 22212  0406  00B0               	movwf	___wmul@multiplicand+1
 22213  0407  31B1  2161  3180   	fcall	___wmul
 22214  040A  3089               	movlw	137
 22215  040B  0141               	movlb	1	; select bank1
 22216  040C  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 22217  040D  3027               	movlw	39
 22218  040E  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22219  040F  0140               	movlb	0	; select bank0
 22220  0410  082D               	movf	?___wmul,w
 22221  0411  0141               	movlb	1	; select bank1
 22222  0412  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22223  0413  0086               	movwf	6
 22224  0414  0140               	movlb	0	; select bank0
 22225  0415  082E               	movf	?___wmul+1,w
 22226  0416  0141               	movlb	1	; select bank1
 22227  0417  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22228  0418  0087               	movwf	7
 22229  0419  3F40               	moviw [0]fsr1
 22230  041A  0140               	movlb	0	; select bank0
 22231  041B  00C5               	movwf	___flmul@a
 22232  041C  3F41               	moviw [1]fsr1
 22233  041D  00C6               	movwf	___flmul@a+1
 22234  041E  3F42               	moviw [2]fsr1
 22235  041F  00C7               	movwf	___flmul@a+2
 22236  0420  3F43               	moviw [3]fsr1
 22237  0421  00C8               	movwf	___flmul@a+3
 22238  0422  3185  2561  3180   	fcall	___flmul
 22239  0425  0140               	movlb	0	; select bank0
 22240  0426  0844               	movf	?___flmul+3,w
 22241  0427  0141               	movlb	1	; select bank1
 22242  0428  00B4               	movwf	(calcRequiredPower@p+3)^(0+128)
 22243  0429  0140               	movlb	0	; select bank0
 22244  042A  0843               	movf	?___flmul+2,w
 22245  042B  0141               	movlb	1	; select bank1
 22246  042C  00B3               	movwf	(calcRequiredPower@p+2)^(0+128)
 22247  042D  0140               	movlb	0	; select bank0
 22248  042E  0842               	movf	?___flmul+1,w
 22249  042F  0141               	movlb	1	; select bank1
 22250  0430  00B2               	movwf	(calcRequiredPower@p+1)^(0+128)
 22251  0431  0140               	movlb	0	; select bank0
 22252  0432  0841               	movf	?___flmul,w
 22253  0433  0141               	movlb	1	; select bank1
 22254  0434  00B1               	movwf	calcRequiredPower@p^(0+128)
 22255                           
 22256                           ;system.c: 304:   A = p * 0.03;
 22257  0435  303C               	movlw	60
 22258  0436  0140               	movlb	0	; select bank0
 22259  0437  00C4               	movwf	___flmul@b+3
 22260  0438  30F5               	movlw	245
 22261  0439  00C3               	movwf	___flmul@b+2
 22262  043A  30C2               	movlw	194
 22263  043B  00C2               	movwf	___flmul@b+1
 22264  043C  308F               	movlw	143
 22265  043D  00C1               	movwf	___flmul@b
 22266  043E  0141               	movlb	1	; select bank1
 22267  043F  0834               	movf	(calcRequiredPower@p+3)^(0+128),w
 22268  0440  0140               	movlb	0	; select bank0
 22269  0441  00C8               	movwf	___flmul@a+3
 22270  0442  0141               	movlb	1	; select bank1
 22271  0443  0833               	movf	(calcRequiredPower@p+2)^(0+128),w
 22272  0444  0140               	movlb	0	; select bank0
 22273  0445  00C7               	movwf	___flmul@a+2
 22274  0446  0141               	movlb	1	; select bank1
 22275  0447  0832               	movf	(calcRequiredPower@p+1)^(0+128),w
 22276  0448  0140               	movlb	0	; select bank0
 22277  0449  00C6               	movwf	___flmul@a+1
 22278  044A  0141               	movlb	1	; select bank1
 22279  044B  0831               	movf	calcRequiredPower@p^(0+128),w
 22280  044C  0140               	movlb	0	; select bank0
 22281  044D  00C5               	movwf	___flmul@a
 22282  044E  3185  2561  3180   	fcall	___flmul
 22283  0451  0140               	movlb	0	; select bank0
 22284  0452  0844               	movf	?___flmul+3,w
 22285  0453  0141               	movlb	1	; select bank1
 22286  0454  00DC               	movwf	(calcRequiredPower@A+3)^(0+128)
 22287  0455  0140               	movlb	0	; select bank0
 22288  0456  0843               	movf	?___flmul+2,w
 22289  0457  0141               	movlb	1	; select bank1
 22290  0458  00DB               	movwf	(calcRequiredPower@A+2)^(0+128)
 22291  0459  0140               	movlb	0	; select bank0
 22292  045A  0842               	movf	?___flmul+1,w
 22293  045B  0141               	movlb	1	; select bank1
 22294  045C  00DA               	movwf	(calcRequiredPower@A+1)^(0+128)
 22295  045D  0140               	movlb	0	; select bank0
 22296  045E  0841               	movf	?___flmul,w
 22297  045F  0141               	movlb	1	; select bank1
 22298  0460  00D9               	movwf	calcRequiredPower@A^(0+128)
 22299                           
 22300                           ;system.c: 306:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 22301  0461  303F               	movlw	63
 22302  0462  0140               	movlb	0	; select bank0
 22303  0463  00C4               	movwf	___flmul@b+3
 22304  0464  3059               	movlw	89
 22305  0465  00C3               	movwf	___flmul@b+2
 22306  0466  3099               	movlw	153
 22307  0467  00C2               	movwf	___flmul@b+1
 22308  0468  309A               	movlw	154
 22309  0469  00C1               	movwf	___flmul@b
 22310  046A  3040               	movlw	64
 22311  046B  00DE               	movwf	___fldiv@a+3
 22312  046C  3000               	movlw	0
 22313  046D  00DD               	movwf	___fldiv@a+2
 22314  046E  3000               	movlw	0
 22315  046F  00DC               	movwf	___fldiv@a+1
 22316  0470  3000               	movlw	0
 22317  0471  00DB               	movwf	___fldiv@a
 22318  0472  0141               	movlb	1	; select bank1
 22319  0473  0869               	movf	calcRequiredPower@n^(0+128),w
 22320  0474  00AD               	movwf	??_calcRequiredPower^(0+128)
 22321  0475  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 22322  0476  082D               	movf	??_calcRequiredPower^(0+128),w
 22323  0477  0140               	movlb	0	; select bank0
 22324  0478  00AD               	movwf	___wmul@multiplier
 22325  0479  0141               	movlb	1	; select bank1
 22326  047A  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 22327  047B  0140               	movlb	0	; select bank0
 22328  047C  00AE               	movwf	___wmul@multiplier+1
 22329  047D  301F               	movlw	31
 22330  047E  00AF               	movwf	___wmul@multiplicand
 22331  047F  3000               	movlw	0
 22332  0480  00B0               	movwf	___wmul@multiplicand+1
 22333  0481  31B1  2161  3180   	fcall	___wmul
 22334  0484  3089               	movlw	137
 22335  0485  0141               	movlb	1	; select bank1
 22336  0486  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 22337  0487  3027               	movlw	39
 22338  0488  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22339  0489  0140               	movlb	0	; select bank0
 22340  048A  082D               	movf	?___wmul,w
 22341  048B  0141               	movlb	1	; select bank1
 22342  048C  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22343  048D  0086               	movwf	6
 22344  048E  0140               	movlb	0	; select bank0
 22345  048F  082E               	movf	?___wmul+1,w
 22346  0490  0141               	movlb	1	; select bank1
 22347  0491  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22348  0492  0087               	movwf	7
 22349  0493  3F40               	moviw [0]fsr1
 22350  0494  0140               	movlb	0	; select bank0
 22351  0495  00DF               	movwf	___fldiv@b
 22352  0496  3F41               	moviw [1]fsr1
 22353  0497  00E0               	movwf	___fldiv@b+1
 22354  0498  3F42               	moviw [2]fsr1
 22355  0499  00E1               	movwf	___fldiv@b+2
 22356  049A  3F43               	moviw [3]fsr1
 22357  049B  00E2               	movwf	___fldiv@b+3
 22358  049C  319E  2628  3180   	fcall	___fldiv
 22359  049F  0140               	movlb	0	; select bank0
 22360  04A0  085E               	movf	?___fldiv+3,w
 22361  04A1  00C8               	movwf	___flmul@a+3
 22362  04A2  085D               	movf	?___fldiv+2,w
 22363  04A3  00C7               	movwf	___flmul@a+2
 22364  04A4  085C               	movf	?___fldiv+1,w
 22365  04A5  00C6               	movwf	___flmul@a+1
 22366  04A6  085B               	movf	?___fldiv,w
 22367  04A7  00C5               	movwf	___flmul@a
 22368  04A8  3185  2561  3180   	fcall	___flmul
 22369  04AB  0140               	movlb	0	; select bank0
 22370  04AC  0844               	movf	?___flmul+3,w
 22371  04AD  0141               	movlb	1	; select bank1
 22372  04AE  00E0               	movwf	(_calcRequiredPower$2773+3)^(0+128)
 22373  04AF  0140               	movlb	0	; select bank0
 22374  04B0  0843               	movf	?___flmul+2,w
 22375  04B1  0141               	movlb	1	; select bank1
 22376  04B2  00DF               	movwf	(_calcRequiredPower$2773+2)^(0+128)
 22377  04B3  0140               	movlb	0	; select bank0
 22378  04B4  0842               	movf	?___flmul+1,w
 22379  04B5  0141               	movlb	1	; select bank1
 22380  04B6  00DE               	movwf	(_calcRequiredPower$2773+1)^(0+128)
 22381  04B7  0140               	movlb	0	; select bank0
 22382  04B8  0841               	movf	?___flmul,w
 22383  04B9  0141               	movlb	1	; select bank1
 22384  04BA  00DD               	movwf	_calcRequiredPower$2773^(0+128)
 22385                           
 22386                           ;system.c: 306:   Rth = (data.heater[n].lensDia / 2) * 0.85 * A;
 22387  04BB  085C               	movf	(calcRequiredPower@A+3)^(0+128),w
 22388  04BC  0140               	movlb	0	; select bank0
 22389  04BD  00C4               	movwf	___flmul@b+3
 22390  04BE  0141               	movlb	1	; select bank1
 22391  04BF  085B               	movf	(calcRequiredPower@A+2)^(0+128),w
 22392  04C0  0140               	movlb	0	; select bank0
 22393  04C1  00C3               	movwf	___flmul@b+2
 22394  04C2  0141               	movlb	1	; select bank1
 22395  04C3  085A               	movf	(calcRequiredPower@A+1)^(0+128),w
 22396  04C4  0140               	movlb	0	; select bank0
 22397  04C5  00C2               	movwf	___flmul@b+1
 22398  04C6  0141               	movlb	1	; select bank1
 22399  04C7  0859               	movf	calcRequiredPower@A^(0+128),w
 22400  04C8  0140               	movlb	0	; select bank0
 22401  04C9  00C1               	movwf	___flmul@b
 22402  04CA  0141               	movlb	1	; select bank1
 22403  04CB  0860               	movf	(_calcRequiredPower$2773+3)^(0+128),w
 22404  04CC  0140               	movlb	0	; select bank0
 22405  04CD  00C8               	movwf	___flmul@a+3
 22406  04CE  0141               	movlb	1	; select bank1
 22407  04CF  085F               	movf	(_calcRequiredPower$2773+2)^(0+128),w
 22408  04D0  0140               	movlb	0	; select bank0
 22409  04D1  00C7               	movwf	___flmul@a+2
 22410  04D2  0141               	movlb	1	; select bank1
 22411  04D3  085E               	movf	(_calcRequiredPower$2773+1)^(0+128),w
 22412  04D4  0140               	movlb	0	; select bank0
 22413  04D5  00C6               	movwf	___flmul@a+1
 22414  04D6  0141               	movlb	1	; select bank1
 22415  04D7  085D               	movf	_calcRequiredPower$2773^(0+128),w
 22416  04D8  0140               	movlb	0	; select bank0
 22417  04D9  00C5               	movwf	___flmul@a
 22418  04DA  3185  2561  3180   	fcall	___flmul
 22419  04DD  0140               	movlb	0	; select bank0
 22420  04DE  0844               	movf	?___flmul+3,w
 22421  04DF  0141               	movlb	1	; select bank1
 22422  04E0  00B8               	movwf	(calcRequiredPower@Rth+3)^(0+128)
 22423  04E1  0140               	movlb	0	; select bank0
 22424  04E2  0843               	movf	?___flmul+2,w
 22425  04E3  0141               	movlb	1	; select bank1
 22426  04E4  00B7               	movwf	(calcRequiredPower@Rth+2)^(0+128)
 22427  04E5  0140               	movlb	0	; select bank0
 22428  04E6  0842               	movf	?___flmul+1,w
 22429  04E7  0141               	movlb	1	; select bank1
 22430  04E8  00B6               	movwf	(calcRequiredPower@Rth+1)^(0+128)
 22431  04E9  0140               	movlb	0	; select bank0
 22432  04EA  0841               	movf	?___flmul,w
 22433  04EB  0141               	movlb	1	; select bank1
 22434  04EC  00B5               	movwf	calcRequiredPower@Rth^(0+128)
 22435                           
 22436                           ;system.c: 308:   data.heater[n].dt = phi * Rth - data.dewPointC;
 22437  04ED  0869               	movf	calcRequiredPower@n^(0+128),w
 22438  04EE  00AD               	movwf	??_calcRequiredPower^(0+128)
 22439  04EF  01AE               	clrf	(??_calcRequiredPower^(0+128)+1)
 22440  04F0  082D               	movf	??_calcRequiredPower^(0+128),w
 22441  04F1  0140               	movlb	0	; select bank0
 22442  04F2  00AD               	movwf	___wmul@multiplier
 22443  04F3  0141               	movlb	1	; select bank1
 22444  04F4  082E               	movf	(??_calcRequiredPower+1)^(0+128),w
 22445  04F5  0140               	movlb	0	; select bank0
 22446  04F6  00AE               	movwf	___wmul@multiplier+1
 22447  04F7  301F               	movlw	31
 22448  04F8  00AF               	movwf	___wmul@multiplicand
 22449  04F9  3000               	movlw	0
 22450  04FA  00B0               	movwf	___wmul@multiplicand+1
 22451  04FB  31B1  2161  3180   	fcall	___wmul
 22452  04FE  308D               	movlw	141
 22453  04FF  0141               	movlb	1	; select bank1
 22454  0500  00AF               	movwf	(??_calcRequiredPower+2)^(0+128)
 22455  0501  3027               	movlw	39
 22456  0502  00B0               	movwf	((??_calcRequiredPower+2)^(0+128)+1)
 22457  0503  0140               	movlb	0	; select bank0
 22458  0504  082D               	movf	?___wmul,w
 22459  0505  0141               	movlb	1	; select bank1
 22460  0506  072F               	addwf	(??_calcRequiredPower+2)^(0+128),w
 22461  0507  0086               	movwf	6
 22462  0508  0140               	movlb	0	; select bank0
 22463  0509  082E               	movf	?___wmul+1,w
 22464  050A  0141               	movlb	1	; select bank1
 22465  050B  3D30               	addwfc	(??_calcRequiredPower+3)^(0+128),w
 22466  050C  0087               	movwf	7
 22467  050D  304A               	movlw	74
 22468  050E  0084               	movwf	4
 22469  050F  3027               	movlw	39
 22470  0510  0085               	movwf	5
 22471  0511  3108               	addfsr 0,8
 22472  0512  3F00               	moviw [0]fsr0
 22473  0513  00A0               	movwf	___flsub@a^(0+128)
 22474  0514  3F01               	moviw [1]fsr0
 22475  0515  00A1               	movwf	(___flsub@a+1)^(0+128)
 22476  0516  3F02               	moviw [2]fsr0
 22477  0517  00A2               	movwf	(___flsub@a+2)^(0+128)
 22478  0518  3F03               	moviw [3]fsr0
 22479  0519  00A3               	movwf	(___flsub@a+3)^(0+128)
 22480  051A  0838               	movf	(calcRequiredPower@Rth+3)^(0+128),w
 22481  051B  0140               	movlb	0	; select bank0
 22482  051C  00C4               	movwf	___flmul@b+3
 22483  051D  0141               	movlb	1	; select bank1
 22484  051E  0837               	movf	(calcRequiredPower@Rth+2)^(0+128),w
 22485  051F  0140               	movlb	0	; select bank0
 22486  0520  00C3               	movwf	___flmul@b+2
 22487  0521  0141               	movlb	1	; select bank1
 22488  0522  0836               	movf	(calcRequiredPower@Rth+1)^(0+128),w
 22489  0523  0140               	movlb	0	; select bank0
 22490  0524  00C2               	movwf	___flmul@b+1
 22491  0525  0141               	movlb	1	; select bank1
 22492  0526  0835               	movf	calcRequiredPower@Rth^(0+128),w
 22493  0527  0140               	movlb	0	; select bank0
 22494  0528  00C1               	movwf	___flmul@b
 22495  0529  0141               	movlb	1	; select bank1
 22496  052A  0858               	movf	(calcRequiredPower@phi+3)^(0+128),w
 22497  052B  0140               	movlb	0	; select bank0
 22498  052C  00C8               	movwf	___flmul@a+3
 22499  052D  0141               	movlb	1	; select bank1
 22500  052E  0857               	movf	(calcRequiredPower@phi+2)^(0+128),w
 22501  052F  0140               	movlb	0	; select bank0
 22502  0530  00C7               	movwf	___flmul@a+2
 22503  0531  0141               	movlb	1	; select bank1
 22504  0532  0856               	movf	(calcRequiredPower@phi+1)^(0+128),w
 22505  0533  0140               	movlb	0	; select bank0
 22506  0534  00C6               	movwf	___flmul@a+1
 22507  0535  0141               	movlb	1	; select bank1
 22508  0536  0855               	movf	calcRequiredPower@phi^(0+128),w
 22509  0537  0140               	movlb	0	; select bank0
 22510  0538  00C5               	movwf	___flmul@a
 22511  0539  3185  2561  3180   	fcall	___flmul
 22512  053C  0140               	movlb	0	; select bank0
 22513  053D  0844               	movf	?___flmul+3,w
 22514  053E  0141               	movlb	1	; select bank1
 22515  053F  00A7               	movwf	(___flsub@b+3)^(0+128)
 22516  0540  0140               	movlb	0	; select bank0
 22517  0541  0843               	movf	?___flmul+2,w
 22518  0542  0141               	movlb	1	; select bank1
 22519  0543  00A6               	movwf	(___flsub@b+2)^(0+128)
 22520  0544  0140               	movlb	0	; select bank0
 22521  0545  0842               	movf	?___flmul+1,w
 22522  0546  0141               	movlb	1	; select bank1
 22523  0547  00A5               	movwf	(___flsub@b+1)^(0+128)
 22524  0548  0140               	movlb	0	; select bank0
 22525  0549  0841               	movf	?___flmul,w
 22526  054A  0141               	movlb	1	; select bank1
 22527  054B  00A4               	movwf	___flsub@b^(0+128)
 22528  054C  31B3  2388  3180   	fcall	___flsub
 22529  054F  0141               	movlb	1	; select bank1
 22530  0550  0820               	movf	?___flsub^(0+128),w
 22531  0551  3FC0               	movwi [0]fsr1
 22532  0552  0821               	movf	(?___flsub+1)^(0+128),w
 22533  0553  3FC1               	movwi [1]fsr1
 22534  0554  0822               	movf	(?___flsub+2)^(0+128),w
 22535  0555  3FC2               	movwi [2]fsr1
 22536  0556  0823               	movf	(?___flsub+3)^(0+128),w
 22537  0557  3FC3               	movwi [3]fsr1
 22538                           
 22539                           ;system.c: 309:  }
 22540  0558  3001               	movlw	1
 22541  0559  00AD               	movwf	??_calcRequiredPower^(0+128)
 22542  055A  082D               	movf	??_calcRequiredPower^(0+128),w
 22543  055B  07E9               	addwf	calcRequiredPower@n^(0+128),f
 22544  055C  3004               	movlw	4
 22545  055D  0269               	subwf	calcRequiredPower@n^(0+128),w
 22546  055E  1803               	btfsc	3,0
 22547  055F  0008               	return
 22548  0560  28D7               	goto	l9044
 22549  0561                     __end_of_calcRequiredPower:	
 22550                           
 22551                           	psect	text58
 22552  3161                     __ptext58:	
 22553 ;; *************** function ___wmul *****************
 22554 ;; Defined at:
 22555 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 22556 ;; Parameters:    Size  Location     Type
 22557 ;;  multiplier      2   13[BANK0 ] unsigned int 
 22558 ;;  multiplicand    2   15[BANK0 ] unsigned int 
 22559 ;; Auto vars:     Size  Location     Type
 22560 ;;  product         2   17[BANK0 ] unsigned int 
 22561 ;; Return value:  Size  Location     Type
 22562 ;;                  2   13[BANK0 ] unsigned int 
 22563 ;; Registers used:
 22564 ;;		wreg, status,2, status,0
 22565 ;; Tracked objects:
 22566 ;;		On entry : 0/0
 22567 ;;		On exit  : 0/0
 22568 ;;		Unchanged: 0/0
 22569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22570 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22571 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22573 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22574 ;;Total ram usage:        6 bytes
 22575 ;; Hardware stack levels used:    1
 22576 ;; Hardware stack levels required when called:    3
 22577 ;; This function calls:
 22578 ;;		Nothing
 22579 ;; This function is called by:
 22580 ;;		_initGlobalData
 22581 ;;		_channelView
 22582 ;;		_channelSetup
 22583 ;;		_setOutputPower
 22584 ;;		_setLensDia
 22585 ;;		_getNextState
 22586 ;;		_returnToPage
 22587 ;;		_checkChannelStatus
 22588 ;;		_calcRequiredPower
 22589 ;;		_channelThing
 22590 ;;		_ftoa
 22591 ;;		_qsort
 22592 ;; This function uses a non-reentrant model
 22593 ;;
 22594                           
 22595                           
 22596                           ;psect for function ___wmul
 22597  3161                     ___wmul:	
 22598                           
 22599                           ;incstack = 0
 22600                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 22601  3161  0140               	movlb	0	; select bank0
 22602  3162  01B1               	clrf	___wmul@product
 22603  3163  01B2               	clrf	___wmul@product+1
 22604  3164                     l7358:	
 22605  3164  1C2D               	btfss	___wmul@multiplier,0
 22606  3165  296A               	goto	l1116
 22607  3166  082F               	movf	___wmul@multiplicand,w
 22608  3167  07B1               	addwf	___wmul@product,f
 22609  3168  0830               	movf	___wmul@multiplicand+1,w
 22610  3169  3DB2               	addwfc	___wmul@product+1,f
 22611  316A                     l1116:	
 22612  316A  3001               	movlw	1
 22613  316B                     u8015:	
 22614  316B  35AF               	lslf	___wmul@multiplicand,f
 22615  316C  0DB0               	rlf	___wmul@multiplicand+1,f
 22616  316D  0B89               	decfsz	9,f
 22617  316E  296B               	goto	u8015
 22618  316F  3001               	movlw	1
 22619  3170                     u8025:	
 22620  3170  36AE               	lsrf	___wmul@multiplier+1,f
 22621  3171  0CAD               	rrf	___wmul@multiplier,f
 22622  3172  0B89               	decfsz	9,f
 22623  3173  2970               	goto	u8025
 22624  3174  082D               	movf	___wmul@multiplier,w
 22625  3175  042E               	iorwf	___wmul@multiplier+1,w
 22626  3176  1D03               	btfss	3,2
 22627  3177  2964               	goto	l7358
 22628  3178  0832               	movf	___wmul@product+1,w
 22629  3179  00AE               	movwf	?___wmul+1
 22630  317A  0831               	movf	___wmul@product,w
 22631  317B  00AD               	movwf	?___wmul
 22632  317C  0008               	return
 22633  317D                     __end_of___wmul:	
 22634                           
 22635                           	psect	text59
 22636  3388                     __ptext59:	
 22637 ;; *************** function ___flsub *****************
 22638 ;; Defined at:
 22639 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 22640 ;; Parameters:    Size  Location     Type
 22641 ;;  a               4    0[BANK1 ] unsigned int 
 22642 ;;  b               4    4[BANK1 ] unsigned int 
 22643 ;; Auto vars:     Size  Location     Type
 22644 ;;		None
 22645 ;; Return value:  Size  Location     Type
 22646 ;;                  4    0[BANK1 ] unsigned int 
 22647 ;; Registers used:
 22648 ;;		wreg, status,2, status,0, pclath, cstack
 22649 ;; Tracked objects:
 22650 ;;		On entry : 0/0
 22651 ;;		On exit  : 0/0
 22652 ;;		Unchanged: 0/0
 22653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22654 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22657 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22658 ;;Total ram usage:        8 bytes
 22659 ;; Hardware stack levels used:    1
 22660 ;; Hardware stack levels required when called:    4
 22661 ;; This function calls:
 22662 ;;		___fladd
 22663 ;; This function is called by:
 22664 ;;		_spinInput
 22665 ;;		_calcRequiredPower
 22666 ;;		_sortCur
 22667 ;;		_ftoa
 22668 ;; This function uses a non-reentrant model
 22669 ;;
 22670                           
 22671                           
 22672                           ;psect for function ___flsub
 22673  3388                     ___flsub:	
 22674                           
 22675                           ;incstack = 0
 22676                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 22677  3388  3080               	movlw	128
 22678  3389  0141               	movlb	1	; select bank1
 22679  338A  06A3               	xorwf	(___flsub@a+3)^(0+128),f
 22680  338B  0827               	movf	(___flsub@b+3)^(0+128),w
 22681  338C  0140               	movlb	0	; select bank0
 22682  338D  00DE               	movwf	___fladd@b+3
 22683  338E  0141               	movlb	1	; select bank1
 22684  338F  0826               	movf	(___flsub@b+2)^(0+128),w
 22685  3390  0140               	movlb	0	; select bank0
 22686  3391  00DD               	movwf	___fladd@b+2
 22687  3392  0141               	movlb	1	; select bank1
 22688  3393  0825               	movf	(___flsub@b+1)^(0+128),w
 22689  3394  0140               	movlb	0	; select bank0
 22690  3395  00DC               	movwf	___fladd@b+1
 22691  3396  0141               	movlb	1	; select bank1
 22692  3397  0824               	movf	___flsub@b^(0+128),w
 22693  3398  0140               	movlb	0	; select bank0
 22694  3399  00DB               	movwf	___fladd@b
 22695  339A  0141               	movlb	1	; select bank1
 22696  339B  0823               	movf	(___flsub@a+3)^(0+128),w
 22697  339C  0140               	movlb	0	; select bank0
 22698  339D  00E2               	movwf	___fladd@a+3
 22699  339E  0141               	movlb	1	; select bank1
 22700  339F  0822               	movf	(___flsub@a+2)^(0+128),w
 22701  33A0  0140               	movlb	0	; select bank0
 22702  33A1  00E1               	movwf	___fladd@a+2
 22703  33A2  0141               	movlb	1	; select bank1
 22704  33A3  0821               	movf	(___flsub@a+1)^(0+128),w
 22705  33A4  0140               	movlb	0	; select bank0
 22706  33A5  00E0               	movwf	___fladd@a+1
 22707  33A6  0141               	movlb	1	; select bank1
 22708  33A7  0820               	movf	___flsub@a^(0+128),w
 22709  33A8  0140               	movlb	0	; select bank0
 22710  33A9  00DF               	movwf	___fladd@a
 22711  33AA  3192  2232         	fcall	___fladd
 22712  33AC  0140               	movlb	0	; select bank0
 22713  33AD  085E               	movf	?___fladd+3,w
 22714  33AE  0141               	movlb	1	; select bank1
 22715  33AF  00A3               	movwf	(?___flsub+3)^(0+128)
 22716  33B0  0140               	movlb	0	; select bank0
 22717  33B1  085D               	movf	?___fladd+2,w
 22718  33B2  0141               	movlb	1	; select bank1
 22719  33B3  00A2               	movwf	(?___flsub+2)^(0+128)
 22720  33B4  0140               	movlb	0	; select bank0
 22721  33B5  085C               	movf	?___fladd+1,w
 22722  33B6  0141               	movlb	1	; select bank1
 22723  33B7  00A1               	movwf	(?___flsub+1)^(0+128)
 22724  33B8  0140               	movlb	0	; select bank0
 22725  33B9  085B               	movf	?___fladd,w
 22726  33BA  0141               	movlb	1	; select bank1
 22727  33BB  00A0               	movwf	?___flsub^(0+128)
 22728  33BC  0008               	return
 22729  33BD                     __end_of___flsub:	
 22730                           
 22731                           	psect	text60
 22732  1232                     __ptext60:	
 22733 ;; *************** function ___fladd *****************
 22734 ;; Defined at:
 22735 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 22736 ;; Parameters:    Size  Location     Type
 22737 ;;  b               4   59[BANK0 ] unsigned int 
 22738 ;;  a               4   63[BANK0 ] unsigned int 
 22739 ;; Auto vars:     Size  Location     Type
 22740 ;;  grs             1   78[BANK0 ] unsigned char 
 22741 ;;  bexp            1   77[BANK0 ] unsigned char 
 22742 ;;  aexp            1   76[BANK0 ] unsigned char 
 22743 ;;  signs           1   75[BANK0 ] unsigned char 
 22744 ;; Return value:  Size  Location     Type
 22745 ;;                  4   59[BANK0 ] unsigned char 
 22746 ;; Registers used:
 22747 ;;		wreg, status,2, status,0
 22748 ;; Tracked objects:
 22749 ;;		On entry : 0/0
 22750 ;;		On exit  : 0/0
 22751 ;;		Unchanged: 0/0
 22752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22753 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22754 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22755 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22756 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22757 ;;Total ram usage:       20 bytes
 22758 ;; Hardware stack levels used:    1
 22759 ;; Hardware stack levels required when called:    3
 22760 ;; This function calls:
 22761 ;;		Nothing
 22762 ;; This function is called by:
 22763 ;;		_spinInput
 22764 ;;		_calcRequiredPower
 22765 ;;		_getAnalogValues
 22766 ;;		_channelThing
 22767 ;;		___flsub
 22768 ;; This function uses a non-reentrant model
 22769 ;;
 22770                           
 22771                           
 22772                           ;psect for function ___fladd
 22773  1232                     ___fladd:	
 22774                           
 22775                           ;incstack = 0
 22776                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 22777  1232  0140               	movlb	0	; select bank0
 22778  1233  085E               	movf	___fladd@b+3,w
 22779  1234  3980               	andlw	128
 22780  1235  00E3               	movwf	??___fladd
 22781  1236  0863               	movf	??___fladd,w
 22782  1237  00EB               	movwf	___fladd@signs
 22783  1238  355E               	lslf	___fladd@b+3,w
 22784  1239  00E3               	movwf	??___fladd
 22785  123A  0863               	movf	??___fladd,w
 22786  123B  00ED               	movwf	___fladd@bexp
 22787  123C  1BDD               	btfsc	___fladd@b+2,7
 22788  123D  146D               	bsf	___fladd@bexp,0
 22789  123E  086D               	movf	___fladd@bexp,w
 22790  123F  1903               	btfsc	3,2
 22791  1240  2A4F               	goto	l7104
 22792  1241  0A6D               	incf	___fladd@bexp,w
 22793  1242  1D03               	btfss	3,2
 22794  1243  2A4C               	goto	l7100
 22795  1244  3000               	movlw	0
 22796  1245  00DE               	movwf	___fladd@b+3
 22797  1246  3000               	movlw	0
 22798  1247  00DD               	movwf	___fladd@b+2
 22799  1248  3000               	movlw	0
 22800  1249  00DC               	movwf	___fladd@b+1
 22801  124A  3000               	movlw	0
 22802  124B  00DB               	movwf	___fladd@b
 22803  124C                     l7100:	
 22804  124C  17DD               	bsf	___fladd@b+2,7
 22805  124D  01DE               	clrf	___fladd@b+3
 22806  124E  2A57               	goto	l7106
 22807  124F                     l7104:	
 22808  124F  3000               	movlw	0
 22809  1250  00DE               	movwf	___fladd@b+3
 22810  1251  3000               	movlw	0
 22811  1252  00DD               	movwf	___fladd@b+2
 22812  1253  3000               	movlw	0
 22813  1254  00DC               	movwf	___fladd@b+1
 22814  1255  3000               	movlw	0
 22815  1256  00DB               	movwf	___fladd@b
 22816  1257                     l7106:	
 22817  1257  0862               	movf	___fladd@a+3,w
 22818  1258  3980               	andlw	128
 22819  1259  00E3               	movwf	??___fladd
 22820  125A  0863               	movf	??___fladd,w
 22821  125B  00EC               	movwf	___fladd@aexp
 22822  125C  086C               	movf	___fladd@aexp,w
 22823  125D  066B               	xorwf	___fladd@signs,w
 22824  125E  1D03               	btfss	3,2
 22825  125F  176B               	bsf	___fladd@signs,6
 22826  1260  3562               	lslf	___fladd@a+3,w
 22827  1261  00E3               	movwf	??___fladd
 22828  1262  0863               	movf	??___fladd,w
 22829  1263  00EC               	movwf	___fladd@aexp
 22830  1264  1BE1               	btfsc	___fladd@a+2,7
 22831  1265  146C               	bsf	___fladd@aexp,0
 22832  1266  086C               	movf	___fladd@aexp,w
 22833  1267  1903               	btfsc	3,2
 22834  1268  2A77               	goto	l7128
 22835  1269  0A6C               	incf	___fladd@aexp,w
 22836  126A  1D03               	btfss	3,2
 22837  126B  2A74               	goto	l7124
 22838  126C  3000               	movlw	0
 22839  126D  00E2               	movwf	___fladd@a+3
 22840  126E  3000               	movlw	0
 22841  126F  00E1               	movwf	___fladd@a+2
 22842  1270  3000               	movlw	0
 22843  1271  00E0               	movwf	___fladd@a+1
 22844  1272  3000               	movlw	0
 22845  1273  00DF               	movwf	___fladd@a
 22846  1274                     l7124:	
 22847  1274  17E1               	bsf	___fladd@a+2,7
 22848  1275  01E2               	clrf	___fladd@a+3
 22849  1276  2A7F               	goto	l1417
 22850  1277                     l7128:	
 22851  1277  3000               	movlw	0
 22852  1278  00E2               	movwf	___fladd@a+3
 22853  1279  3000               	movlw	0
 22854  127A  00E1               	movwf	___fladd@a+2
 22855  127B  3000               	movlw	0
 22856  127C  00E0               	movwf	___fladd@a+1
 22857  127D  3000               	movlw	0
 22858  127E  00DF               	movwf	___fladd@a
 22859  127F                     l1417:	
 22860  127F  086D               	movf	___fladd@bexp,w
 22861  1280  026C               	subwf	___fladd@aexp,w
 22862  1281  1803               	skipnc
 22863  1282  2AC5               	goto	l7164
 22864  1283  1F6B               	btfss	___fladd@signs,6
 22865  1284  2A89               	goto	l7134
 22866  1285  3080               	movlw	128
 22867  1286  00E3               	movwf	??___fladd
 22868  1287  0863               	movf	??___fladd,w
 22869  1288  06EB               	xorwf	___fladd@signs,f
 22870  1289                     l7134:	
 22871  1289  086D               	movf	___fladd@bexp,w
 22872  128A  00E3               	movwf	??___fladd
 22873  128B  0863               	movf	??___fladd,w
 22874  128C  00EE               	movwf	___fladd@grs
 22875  128D  086C               	movf	___fladd@aexp,w
 22876  128E  00E3               	movwf	??___fladd
 22877  128F  0863               	movf	??___fladd,w
 22878  1290  00ED               	movwf	___fladd@bexp
 22879  1291  086E               	movf	___fladd@grs,w
 22880  1292  00E3               	movwf	??___fladd
 22881  1293  0863               	movf	??___fladd,w
 22882  1294  00EC               	movwf	___fladd@aexp
 22883  1295  085B               	movf	___fladd@b,w
 22884  1296  00E3               	movwf	??___fladd
 22885  1297  0863               	movf	??___fladd,w
 22886  1298  00EE               	movwf	___fladd@grs
 22887  1299  085F               	movf	___fladd@a,w
 22888  129A  00E3               	movwf	??___fladd
 22889  129B  0863               	movf	??___fladd,w
 22890  129C  00DB               	movwf	___fladd@b
 22891  129D  086E               	movf	___fladd@grs,w
 22892  129E  00E3               	movwf	??___fladd
 22893  129F  0863               	movf	??___fladd,w
 22894  12A0  00DF               	movwf	___fladd@a
 22895  12A1  085C               	movf	___fladd@b+1,w
 22896  12A2  00E3               	movwf	??___fladd
 22897  12A3  0863               	movf	??___fladd,w
 22898  12A4  00EE               	movwf	___fladd@grs
 22899  12A5  0860               	movf	___fladd@a+1,w
 22900  12A6  00E3               	movwf	??___fladd
 22901  12A7  0863               	movf	??___fladd,w
 22902  12A8  00DC               	movwf	___fladd@b+1
 22903  12A9  086E               	movf	___fladd@grs,w
 22904  12AA  00E3               	movwf	??___fladd
 22905  12AB  0863               	movf	??___fladd,w
 22906  12AC  00E0               	movwf	___fladd@a+1
 22907  12AD  085D               	movf	___fladd@b+2,w
 22908  12AE  00E3               	movwf	??___fladd
 22909  12AF  0863               	movf	??___fladd,w
 22910  12B0  00EE               	movwf	___fladd@grs
 22911  12B1  0861               	movf	___fladd@a+2,w
 22912  12B2  00E3               	movwf	??___fladd
 22913  12B3  0863               	movf	??___fladd,w
 22914  12B4  00DD               	movwf	___fladd@b+2
 22915  12B5  086E               	movf	___fladd@grs,w
 22916  12B6  00E3               	movwf	??___fladd
 22917  12B7  0863               	movf	??___fladd,w
 22918  12B8  00E1               	movwf	___fladd@a+2
 22919  12B9  085E               	movf	___fladd@b+3,w
 22920  12BA  00E3               	movwf	??___fladd
 22921  12BB  0863               	movf	??___fladd,w
 22922  12BC  00EE               	movwf	___fladd@grs
 22923  12BD  0862               	movf	___fladd@a+3,w
 22924  12BE  00E3               	movwf	??___fladd
 22925  12BF  0863               	movf	??___fladd,w
 22926  12C0  00DE               	movwf	___fladd@b+3
 22927  12C1  086E               	movf	___fladd@grs,w
 22928  12C2  00E3               	movwf	??___fladd
 22929  12C3  0863               	movf	??___fladd,w
 22930  12C4  00E2               	movwf	___fladd@a+3
 22931  12C5                     l7164:	
 22932  12C5  01EE               	clrf	___fladd@grs
 22933  12C6  086C               	movf	___fladd@aexp,w
 22934  12C7  00E3               	movwf	??___fladd
 22935  12C8  01E4               	clrf	??___fladd+1
 22936  12C9  0864               	movf	??___fladd+1,w
 22937  12CA  00E6               	movwf	??___fladd+3
 22938  12CB  086D               	movf	___fladd@bexp,w
 22939  12CC  0263               	subwf	??___fladd,w
 22940  12CD  00E5               	movwf	??___fladd+2
 22941  12CE  1C03               	skipc
 22942  12CF  03E6               	decf	??___fladd+3,f
 22943  12D0  0866               	movf	??___fladd+3,w
 22944  12D1  3A80               	xorlw	128
 22945  12D2  00E7               	movwf	??___fladd+4
 22946  12D3  3080               	movlw	128
 22947  12D4  0267               	subwf	??___fladd+4,w
 22948  12D5  1D03               	skipz
 22949  12D6  2AD9               	goto	u7605
 22950  12D7  301A               	movlw	26
 22951  12D8  0265               	subwf	??___fladd+2,w
 22952  12D9                     u7605:	
 22953  12D9  1C03               	skipc
 22954  12DA  2B0D               	goto	l7182
 22955  12DB  0140               	movlb	0	; select bank0
 22956  12DC  085E               	movf	___fladd@b+3,w
 22957  12DD  045D               	iorwf	___fladd@b+2,w
 22958  12DE  045C               	iorwf	___fladd@b+1,w
 22959  12DF  045B               	iorwf	___fladd@b,w
 22960  12E0  1903               	btfsc	3,2
 22961  12E1  2AE4               	goto	u7610
 22962  12E2  3001               	movlw	1
 22963  12E3  2AE5               	goto	u7620
 22964  12E4                     u7610:	
 22965  12E4  3000               	movlw	0
 22966  12E5                     u7620:	
 22967  12E5  00E3               	movwf	??___fladd
 22968  12E6  0863               	movf	??___fladd,w
 22969  12E7  00EE               	movwf	___fladd@grs
 22970  12E8  3000               	movlw	0
 22971  12E9  00DE               	movwf	___fladd@b+3
 22972  12EA  3000               	movlw	0
 22973  12EB  00DD               	movwf	___fladd@b+2
 22974  12EC  3000               	movlw	0
 22975  12ED  00DC               	movwf	___fladd@b+1
 22976  12EE  3000               	movlw	0
 22977  12EF  00DB               	movwf	___fladd@b
 22978  12F0  086C               	movf	___fladd@aexp,w
 22979  12F1  00E3               	movwf	??___fladd
 22980  12F2  0863               	movf	??___fladd,w
 22981  12F3  00ED               	movwf	___fladd@bexp
 22982  12F4  2B12               	goto	l1421
 22983  12F5                     l1423:	
 22984  12F5  1C6E               	btfss	___fladd@grs,0
 22985  12F6  2AFD               	goto	l7172
 22986  12F7  366E               	lsrf	___fladd@grs,w
 22987  12F8  3801               	iorlw	1
 22988  12F9  00E3               	movwf	??___fladd
 22989  12FA  0863               	movf	??___fladd,w
 22990  12FB  00EE               	movwf	___fladd@grs
 22991  12FC  2AFF               	goto	l7174
 22992  12FD                     l7172:	
 22993  12FD  1003               	clrc
 22994  12FE  0CEE               	rrf	___fladd@grs,f
 22995  12FF                     l7174:	
 22996  12FF  185B               	btfsc	___fladd@b,0
 22997  1300  17EE               	bsf	___fladd@grs,7
 22998  1301  3001               	movlw	1
 22999  1302  00E3               	movwf	??___fladd
 23000  1303                     u7655:	
 23001  1303  37DE               	asrf	___fladd@b+3,f
 23002  1304  0CDD               	rrf	___fladd@b+2,f
 23003  1305  0CDC               	rrf	___fladd@b+1,f
 23004  1306  0CDB               	rrf	___fladd@b,f
 23005  1307  0BE3               	decfsz	??___fladd& (0+127),f
 23006  1308  2B03               	goto	u7655
 23007  1309  3001               	movlw	1
 23008  130A  00E3               	movwf	??___fladd
 23009  130B  0863               	movf	??___fladd,w
 23010  130C  07ED               	addwf	___fladd@bexp,f
 23011  130D                     l7182:	
 23012  130D  0140               	movlb	0	; select bank0
 23013  130E  086C               	movf	___fladd@aexp,w
 23014  130F  026D               	subwf	___fladd@bexp,w
 23015  1310  1C03               	skipc
 23016  1311  2AF5               	goto	l1423
 23017  1312                     l1421:	
 23018  1312  1B6B               	btfsc	___fladd@signs,6
 23019  1313  2B43               	goto	l7208
 23020  1314  086D               	movf	___fladd@bexp,w
 23021  1315  1D03               	btfss	3,2
 23022  1316  2B20               	goto	l7190
 23023  1317  3000               	movlw	0
 23024  1318  00DE               	movwf	?___fladd+3
 23025  1319  3000               	movlw	0
 23026  131A  00DD               	movwf	?___fladd+2
 23027  131B  3000               	movlw	0
 23028  131C  00DC               	movwf	?___fladd+1
 23029  131D  3000               	movlw	0
 23030  131E  00DB               	movwf	?___fladd
 23031  131F  0008               	return
 23032  1320                     l7190:	
 23033  1320  085F               	movf	___fladd@a,w
 23034  1321  07DB               	addwf	___fladd@b,f
 23035  1322  0860               	movf	___fladd@a+1,w
 23036  1323  3DDC               	addwfc	___fladd@b+1,f
 23037  1324  0861               	movf	___fladd@a+2,w
 23038  1325  3DDD               	addwfc	___fladd@b+2,f
 23039  1326  0862               	movf	___fladd@a+3,w
 23040  1327  3DDE               	addwfc	___fladd@b+3,f
 23041  1328  1C5E               	btfss	___fladd@b+3,0
 23042  1329  2BBD               	goto	l7242
 23043  132A  1C6E               	btfss	___fladd@grs,0
 23044  132B  2B32               	goto	l7198
 23045  132C  366E               	lsrf	___fladd@grs,w
 23046  132D  3801               	iorlw	1
 23047  132E  00E3               	movwf	??___fladd
 23048  132F  0863               	movf	??___fladd,w
 23049  1330  00EE               	movwf	___fladd@grs
 23050  1331  2B34               	goto	l7200
 23051  1332                     l7198:	
 23052  1332  1003               	clrc
 23053  1333  0CEE               	rrf	___fladd@grs,f
 23054  1334                     l7200:	
 23055  1334  185B               	btfsc	___fladd@b,0
 23056  1335  17EE               	bsf	___fladd@grs,7
 23057  1336  3001               	movlw	1
 23058  1337  00E3               	movwf	??___fladd
 23059  1338                     u7725:	
 23060  1338  37DE               	asrf	___fladd@b+3,f
 23061  1339  0CDD               	rrf	___fladd@b+2,f
 23062  133A  0CDC               	rrf	___fladd@b+1,f
 23063  133B  0CDB               	rrf	___fladd@b,f
 23064  133C  0BE3               	decfsz	??___fladd& (0+127),f
 23065  133D  2B38               	goto	u7725
 23066  133E  3001               	movlw	1
 23067  133F  00E3               	movwf	??___fladd
 23068  1340  0863               	movf	??___fladd,w
 23069  1341  07ED               	addwf	___fladd@bexp,f
 23070  1342  2BBD               	goto	l7242
 23071  1343                     l7208:	
 23072  1343  085E               	movf	___fladd@b+3,w
 23073  1344  3A80               	xorlw	128
 23074  1345  00E3               	movwf	??___fladd
 23075  1346  0862               	movf	___fladd@a+3,w
 23076  1347  3A80               	xorlw	128
 23077  1348  0263               	subwf	??___fladd,w
 23078  1349  1D03               	skipz
 23079  134A  2B55               	goto	u7733
 23080  134B  0861               	movf	___fladd@a+2,w
 23081  134C  025D               	subwf	___fladd@b+2,w
 23082  134D  1D03               	skipz
 23083  134E  2B55               	goto	u7733
 23084  134F  0860               	movf	___fladd@a+1,w
 23085  1350  025C               	subwf	___fladd@b+1,w
 23086  1351  1D03               	skipz
 23087  1352  2B55               	goto	u7733
 23088  1353  085F               	movf	___fladd@a,w
 23089  1354  025B               	subwf	___fladd@b,w
 23090  1355                     u7733:	
 23091  1355  1803               	skipnc
 23092  1356  2B8D               	goto	l7218
 23093  1357  30FF               	movlw	255
 23094  1358  00E3               	movwf	??___fladd
 23095  1359  30FF               	movlw	255
 23096  135A  00E4               	movwf	??___fladd+1
 23097  135B  30FF               	movlw	255
 23098  135C  00E5               	movwf	??___fladd+2
 23099  135D  30FF               	movlw	255
 23100  135E  00E6               	movwf	??___fladd+3
 23101  135F  085B               	movf	___fladd@b,w
 23102  1360  025F               	subwf	___fladd@a,w
 23103  1361  00E7               	movwf	??___fladd+4
 23104  1362  085C               	movf	___fladd@b+1,w
 23105  1363  3B60               	subwfb	___fladd@a+1,w
 23106  1364  00E8               	movwf	??___fladd+5
 23107  1365  085D               	movf	___fladd@b+2,w
 23108  1366  3B61               	subwfb	___fladd@a+2,w
 23109  1367  00E9               	movwf	??___fladd+6
 23110  1368  085E               	movf	___fladd@b+3,w
 23111  1369  3B62               	subwfb	___fladd@a+3,w
 23112  136A  00EA               	movwf	??___fladd+7
 23113  136B  0867               	movf	??___fladd+4,w
 23114  136C  07E3               	addwf	??___fladd,f
 23115  136D  0868               	movf	??___fladd+5,w
 23116  136E  3DE4               	addwfc	??___fladd+1,f
 23117  136F  0869               	movf	??___fladd+6,w
 23118  1370  3DE5               	addwfc	??___fladd+2,f
 23119  1371  086A               	movf	??___fladd+7,w
 23120  1372  3DE6               	addwfc	??___fladd+3,f
 23121  1373  0866               	movf	??___fladd+3,w
 23122  1374  00DE               	movwf	___fladd@b+3
 23123  1375  0865               	movf	??___fladd+2,w
 23124  1376  00DD               	movwf	___fladd@b+2
 23125  1377  0864               	movf	??___fladd+1,w
 23126  1378  00DC               	movwf	___fladd@b+1
 23127  1379  0863               	movf	??___fladd,w
 23128  137A  00DB               	movwf	___fladd@b
 23129  137B  3080               	movlw	128
 23130  137C  00E3               	movwf	??___fladd
 23131  137D  0863               	movf	??___fladd,w
 23132  137E  06EB               	xorwf	___fladd@signs,f
 23133  137F  09EE               	comf	___fladd@grs,f
 23134  1380  0AEE               	incf	___fladd@grs,f
 23135  1381  086E               	movf	___fladd@grs,w
 23136  1382  1D03               	btfss	3,2
 23137  1383  2B95               	goto	l1438
 23138  1384  3001               	movlw	1
 23139  1385  07DB               	addwf	___fladd@b,f
 23140  1386  3000               	movlw	0
 23141  1387  3DDC               	addwfc	___fladd@b+1,f
 23142  1388  3000               	movlw	0
 23143  1389  3DDD               	addwfc	___fladd@b+2,f
 23144  138A  3000               	movlw	0
 23145  138B  3DDE               	addwfc	___fladd@b+3,f
 23146  138C  2B95               	goto	l1438
 23147  138D                     l7218:	
 23148  138D  085F               	movf	___fladd@a,w
 23149  138E  02DB               	subwf	___fladd@b,f
 23150  138F  0860               	movf	___fladd@a+1,w
 23151  1390  3BDC               	subwfb	___fladd@b+1,f
 23152  1391  0861               	movf	___fladd@a+2,w
 23153  1392  3BDD               	subwfb	___fladd@b+2,f
 23154  1393  0862               	movf	___fladd@a+3,w
 23155  1394  3BDE               	subwfb	___fladd@b+3,f
 23156  1395                     l1438:	
 23157  1395  085E               	movf	___fladd@b+3,w
 23158  1396  045D               	iorwf	___fladd@b+2,w
 23159  1397  045C               	iorwf	___fladd@b+1,w
 23160  1398  045B               	iorwf	___fladd@b,w
 23161  1399  1D03               	skipz
 23162  139A  2BBB               	goto	l7240
 23163  139B  086E               	movf	___fladd@grs,w
 23164  139C  1D03               	btfss	3,2
 23165  139D  2BBB               	goto	l7240
 23166  139E  3000               	movlw	0
 23167  139F  00DE               	movwf	?___fladd+3
 23168  13A0  3000               	movlw	0
 23169  13A1  00DD               	movwf	?___fladd+2
 23170  13A2  3000               	movlw	0
 23171  13A3  00DC               	movwf	?___fladd+1
 23172  13A4  3000               	movlw	0
 23173  13A5  00DB               	movwf	?___fladd
 23174  13A6  0008               	return
 23175  13A7                     l7226:	
 23176  13A7  3001               	movlw	1
 23177  13A8                     u7775:	
 23178  13A8  35DB               	lslf	___fladd@b,f
 23179  13A9  0DDC               	rlf	___fladd@b+1,f
 23180  13AA  0DDD               	rlf	___fladd@b+2,f
 23181  13AB  0DDE               	rlf	___fladd@b+3,f
 23182  13AC  0B89               	decfsz	9,f
 23183  13AD  2BA8               	goto	u7775
 23184  13AE  1BEE               	btfsc	___fladd@grs,7
 23185  13AF  145B               	bsf	___fladd@b,0
 23186  13B0  1C6E               	btfss	___fladd@grs,0
 23187  13B1  2BB4               	goto	l7234
 23188  13B2  1403               	setc
 23189  13B3  2BB5               	goto	L13
 23190  13B4                     l7234:	
 23191  13B4  1003               	clrc
 23192  13B5                     L13:	
 23193  13B5  0DEE               	rlf	___fladd@grs,f
 23194  13B6  086D               	movf	___fladd@bexp,w
 23195  13B7  1903               	btfsc	3,2
 23196  13B8  2BBB               	goto	l7240
 23197  13B9  3001               	movlw	1
 23198  13BA  02ED               	subwf	___fladd@bexp,f
 23199  13BB                     l7240:	
 23200  13BB  1FDD               	btfss	___fladd@b+2,7
 23201  13BC  2BA7               	goto	l7226
 23202  13BD                     l7242:	
 23203  13BD  01EC               	clrf	___fladd@aexp
 23204  13BE  1FEE               	btfss	___fladd@grs,7
 23205  13BF  2BC8               	goto	l7252
 23206  13C0  086E               	movf	___fladd@grs,w
 23207  13C1  397F               	andlw	127
 23208  13C2  1903               	btfsc	3,2
 23209  13C3  185B               	btfsc	___fladd@b,0
 23210  13C4  2BC6               	goto	l7248
 23211  13C5  2BC8               	goto	l7252
 23212  13C6                     l7248:	
 23213  13C6  01EC               	clrf	___fladd@aexp
 23214  13C7  0AEC               	incf	___fladd@aexp,f
 23215  13C8                     l7252:	
 23216  13C8  086C               	movf	___fladd@aexp,w
 23217  13C9  1903               	btfsc	3,2
 23218  13CA  2BF4               	goto	l1451
 23219  13CB  3001               	movlw	1
 23220  13CC  07DB               	addwf	___fladd@b,f
 23221  13CD  3000               	movlw	0
 23222  13CE  3DDC               	addwfc	___fladd@b+1,f
 23223  13CF  3000               	movlw	0
 23224  13D0  3DDD               	addwfc	___fladd@b+2,f
 23225  13D1  3000               	movlw	0
 23226  13D2  3DDE               	addwfc	___fladd@b+3,f
 23227  13D3  1C5E               	btfss	___fladd@b+3,0
 23228  13D4  2BF4               	goto	l1451
 23229  13D5  085B               	movf	___fladd@b,w
 23230  13D6  00E3               	movwf	??___fladd
 23231  13D7  085C               	movf	___fladd@b+1,w
 23232  13D8  00E4               	movwf	??___fladd+1
 23233  13D9  085D               	movf	___fladd@b+2,w
 23234  13DA  00E5               	movwf	??___fladd+2
 23235  13DB  085E               	movf	___fladd@b+3,w
 23236  13DC  00E6               	movwf	??___fladd+3
 23237  13DD  3001               	movlw	1
 23238  13DE  00E7               	movwf	??___fladd+4
 23239  13DF                     u7875:	
 23240  13DF  37E6               	asrf	??___fladd+3,f
 23241  13E0  0CE5               	rrf	??___fladd+2,f
 23242  13E1  0CE4               	rrf	??___fladd+1,f
 23243  13E2  0CE3               	rrf	??___fladd,f
 23244  13E3  0BE7               	decfsz	??___fladd+4,f
 23245  13E4  2BDF               	goto	u7875
 23246  13E5  0866               	movf	??___fladd+3,w
 23247  13E6  00DE               	movwf	___fladd@b+3
 23248  13E7  0865               	movf	??___fladd+2,w
 23249  13E8  00DD               	movwf	___fladd@b+2
 23250  13E9  0864               	movf	??___fladd+1,w
 23251  13EA  00DC               	movwf	___fladd@b+1
 23252  13EB  0863               	movf	??___fladd,w
 23253  13EC  00DB               	movwf	___fladd@b
 23254  13ED  0A6D               	incf	___fladd@bexp,w
 23255  13EE  1903               	btfsc	3,2
 23256  13EF  2BF4               	goto	l1451
 23257  13F0  3001               	movlw	1
 23258  13F1  00E3               	movwf	??___fladd
 23259  13F2  0863               	movf	??___fladd,w
 23260  13F3  07ED               	addwf	___fladd@bexp,f
 23261  13F4                     l1451:	
 23262  13F4  0A6D               	incf	___fladd@bexp,w
 23263  13F5  1D03               	btfss	3,2
 23264  13F6  086D               	movf	___fladd@bexp,w
 23265  13F7  1D03               	btfss	3,2
 23266  13F8  2C04               	goto	l7270
 23267  13F9  3000               	movlw	0
 23268  13FA  00DE               	movwf	___fladd@b+3
 23269  13FB  3000               	movlw	0
 23270  13FC  00DD               	movwf	___fladd@b+2
 23271  13FD  3000               	movlw	0
 23272  13FE  00DC               	movwf	___fladd@b+1
 23273  13FF  3000               	movlw	0
 23274  1400  00DB               	movwf	___fladd@b
 23275  1401  086D               	movf	___fladd@bexp,w
 23276  1402  1903               	btfsc	3,2
 23277  1403  01EB               	clrf	___fladd@signs
 23278  1404                     l7270:	
 23279  1404  1C6D               	btfss	___fladd@bexp,0
 23280  1405  2C08               	goto	l7274
 23281  1406  17DD               	bsf	___fladd@b+2,7
 23282  1407  2C0C               	goto	l1459
 23283  1408                     l7274:	
 23284  1408  307F               	movlw	127
 23285  1409  00E3               	movwf	??___fladd
 23286  140A  0863               	movf	??___fladd,w
 23287  140B  05DD               	andwf	___fladd@b+2,f
 23288  140C                     l1459:	
 23289  140C  366D               	lsrf	___fladd@bexp,w
 23290  140D  00E3               	movwf	??___fladd
 23291  140E  0863               	movf	??___fladd,w
 23292  140F  00DE               	movwf	___fladd@b+3
 23293  1410  1FEB               	btfss	___fladd@signs,7
 23294  1411  0008               	return
 23295  1412  17DE               	bsf	___fladd@b+3,7
 23296  1413  0008               	return
 23297  1414                     __end_of___fladd:	
 23298                           
 23299                           	psect	text61
 23300  0561                     __ptext61:	
 23301 ;; *************** function ___flmul *****************
 23302 ;; Defined at:
 23303 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 23304 ;; Parameters:    Size  Location     Type
 23305 ;;  b               4   33[BANK0 ] unsigned char 
 23306 ;;  a               4   37[BANK0 ] unsigned char 
 23307 ;; Auto vars:     Size  Location     Type
 23308 ;;  prod            4   53[BANK0 ] struct .
 23309 ;;  grs             4   48[BANK0 ] unsigned long 
 23310 ;;  temp            2   57[BANK0 ] struct .
 23311 ;;  bexp            1   52[BANK0 ] unsigned char 
 23312 ;;  aexp            1   47[BANK0 ] unsigned char 
 23313 ;;  sign            1   46[BANK0 ] unsigned char 
 23314 ;; Return value:  Size  Location     Type
 23315 ;;                  4   33[BANK0 ] unsigned char 
 23316 ;; Registers used:
 23317 ;;		wreg, status,2, status,0, pclath, cstack
 23318 ;; Tracked objects:
 23319 ;;		On entry : 0/0
 23320 ;;		On exit  : 0/0
 23321 ;;		Unchanged: 0/0
 23322 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23323 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23324 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23325 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23326 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23327 ;;Total ram usage:       26 bytes
 23328 ;; Hardware stack levels used:    1
 23329 ;; Hardware stack levels required when called:    4
 23330 ;; This function calls:
 23331 ;;		__Umul8_16
 23332 ;; This function is called by:
 23333 ;;		_checkChannelStatus
 23334 ;;		_systemCheck
 23335 ;;		_calcRequiredPower
 23336 ;;		_getAnalogValues
 23337 ;;		_channelThing
 23338 ;;		_ftoa
 23339 ;; This function uses a non-reentrant model
 23340 ;;
 23341                           
 23342                           
 23343                           ;psect for function ___flmul
 23344  0561                     ___flmul:	
 23345                           
 23346                           ;incstack = 0
 23347                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 23348  0561  0140               	movlb	0	; select bank0
 23349  0562  0844               	movf	___flmul@b+3,w
 23350  0563  3980               	andlw	128
 23351  0564  00C9               	movwf	??___flmul
 23352  0565  0849               	movf	??___flmul,w
 23353  0566  00CE               	movwf	___flmul@sign
 23354  0567  3544               	lslf	___flmul@b+3,w
 23355  0568  00C9               	movwf	??___flmul
 23356  0569  0849               	movf	??___flmul,w
 23357  056A  00D4               	movwf	___flmul@bexp
 23358  056B  1BC3               	btfsc	___flmul@b+2,7
 23359  056C  1454               	bsf	___flmul@bexp,0
 23360  056D  0854               	movf	___flmul@bexp,w
 23361  056E  1903               	btfsc	3,2
 23362  056F  2D7D               	goto	l7684
 23363  0570  0A54               	incf	___flmul@bexp,w
 23364  0571  1D03               	btfss	3,2
 23365  0572  2D7B               	goto	l7682
 23366  0573  3000               	movlw	0
 23367  0574  00C4               	movwf	___flmul@b+3
 23368  0575  3000               	movlw	0
 23369  0576  00C3               	movwf	___flmul@b+2
 23370  0577  3000               	movlw	0
 23371  0578  00C2               	movwf	___flmul@b+1
 23372  0579  3000               	movlw	0
 23373  057A  00C1               	movwf	___flmul@b
 23374  057B                     l7682:	
 23375  057B  17C3               	bsf	___flmul@b+2,7
 23376  057C  2D85               	goto	l7686
 23377  057D                     l7684:	
 23378  057D  3000               	movlw	0
 23379  057E  00C4               	movwf	___flmul@b+3
 23380  057F  3000               	movlw	0
 23381  0580  00C3               	movwf	___flmul@b+2
 23382  0581  3000               	movlw	0
 23383  0582  00C2               	movwf	___flmul@b+1
 23384  0583  3000               	movlw	0
 23385  0584  00C1               	movwf	___flmul@b
 23386  0585                     l7686:	
 23387  0585  0848               	movf	___flmul@a+3,w
 23388  0586  3980               	andlw	128
 23389  0587  00C9               	movwf	??___flmul
 23390  0588  0849               	movf	??___flmul,w
 23391  0589  06CE               	xorwf	___flmul@sign,f
 23392  058A  3548               	lslf	___flmul@a+3,w
 23393  058B  00C9               	movwf	??___flmul
 23394  058C  0849               	movf	??___flmul,w
 23395  058D  00CF               	movwf	___flmul@aexp
 23396  058E  1BC7               	btfsc	___flmul@a+2,7
 23397  058F  144F               	bsf	___flmul@aexp,0
 23398  0590  084F               	movf	___flmul@aexp,w
 23399  0591  1903               	btfsc	3,2
 23400  0592  2DA0               	goto	l7702
 23401  0593  0A4F               	incf	___flmul@aexp,w
 23402  0594  1D03               	btfss	3,2
 23403  0595  2D9E               	goto	l7700
 23404  0596  3000               	movlw	0
 23405  0597  00C8               	movwf	___flmul@a+3
 23406  0598  3000               	movlw	0
 23407  0599  00C7               	movwf	___flmul@a+2
 23408  059A  3000               	movlw	0
 23409  059B  00C6               	movwf	___flmul@a+1
 23410  059C  3000               	movlw	0
 23411  059D  00C5               	movwf	___flmul@a
 23412  059E                     l7700:	
 23413  059E  17C7               	bsf	___flmul@a+2,7
 23414  059F  2DA8               	goto	l7704
 23415  05A0                     l7702:	
 23416  05A0  3000               	movlw	0
 23417  05A1  00C8               	movwf	___flmul@a+3
 23418  05A2  3000               	movlw	0
 23419  05A3  00C7               	movwf	___flmul@a+2
 23420  05A4  3000               	movlw	0
 23421  05A5  00C6               	movwf	___flmul@a+1
 23422  05A6  3000               	movlw	0
 23423  05A7  00C5               	movwf	___flmul@a
 23424  05A8                     l7704:	
 23425  05A8  084F               	movf	___flmul@aexp,w
 23426  05A9  1D03               	btfss	3,2
 23427  05AA  0854               	movf	___flmul@bexp,w
 23428  05AB  1D03               	btfss	3,2
 23429  05AC  2DB6               	goto	l7712
 23430  05AD  3000               	movlw	0
 23431  05AE  00C4               	movwf	?___flmul+3
 23432  05AF  3000               	movlw	0
 23433  05B0  00C3               	movwf	?___flmul+2
 23434  05B1  3000               	movlw	0
 23435  05B2  00C2               	movwf	?___flmul+1
 23436  05B3  3000               	movlw	0
 23437  05B4  00C1               	movwf	?___flmul
 23438  05B5  0008               	return
 23439  05B6                     l7712:	
 23440  05B6  0841               	movf	___flmul@b,w
 23441  05B7  00C9               	movwf	??___flmul
 23442  05B8  0849               	movf	??___flmul,w
 23443  05B9  00A0               	movwf	__Umul8_16@multiplicand
 23444  05BA  0847               	movf	___flmul@a+2,w
 23445  05BB  31B1  219A  3185   	fcall	__Umul8_16
 23446  05BE  0140               	movlb	0	; select bank0
 23447  05BF  0821               	movf	?__Umul8_16+1,w
 23448  05C0  00DA               	movwf	___flmul@temp+1
 23449  05C1  0820               	movf	?__Umul8_16,w
 23450  05C2  00D9               	movwf	___flmul@temp
 23451  05C3  0859               	movf	___flmul@temp,w
 23452  05C4  00C9               	movwf	??___flmul
 23453  05C5  01CA               	clrf	??___flmul+1
 23454  05C6  01CB               	clrf	??___flmul+2
 23455  05C7  01CC               	clrf	??___flmul+3
 23456  05C8  084C               	movf	??___flmul+3,w
 23457  05C9  00D3               	movwf	___flmul@grs+3
 23458  05CA  084B               	movf	??___flmul+2,w
 23459  05CB  00D2               	movwf	___flmul@grs+2
 23460  05CC  084A               	movf	??___flmul+1,w
 23461  05CD  00D1               	movwf	___flmul@grs+1
 23462  05CE  0849               	movf	??___flmul,w
 23463  05CF  00D0               	movwf	___flmul@grs
 23464  05D0  085A               	movf	___flmul@temp+1,w
 23465  05D1  00C9               	movwf	??___flmul
 23466  05D2  01CA               	clrf	??___flmul+1
 23467  05D3  01CB               	clrf	??___flmul+2
 23468  05D4  01CC               	clrf	??___flmul+3
 23469  05D5  084C               	movf	??___flmul+3,w
 23470  05D6  00D8               	movwf	___flmul@prod+3
 23471  05D7  084B               	movf	??___flmul+2,w
 23472  05D8  00D7               	movwf	___flmul@prod+2
 23473  05D9  084A               	movf	??___flmul+1,w
 23474  05DA  00D6               	movwf	___flmul@prod+1
 23475  05DB  0849               	movf	??___flmul,w
 23476  05DC  00D5               	movwf	___flmul@prod
 23477  05DD  0842               	movf	___flmul@b+1,w
 23478  05DE  00C9               	movwf	??___flmul
 23479  05DF  0849               	movf	??___flmul,w
 23480  05E0  00A0               	movwf	__Umul8_16@multiplicand
 23481  05E1  0846               	movf	___flmul@a+1,w
 23482  05E2  31B1  219A  3185   	fcall	__Umul8_16
 23483  05E5  0140               	movlb	0	; select bank0
 23484  05E6  0821               	movf	?__Umul8_16+1,w
 23485  05E7  00DA               	movwf	___flmul@temp+1
 23486  05E8  0820               	movf	?__Umul8_16,w
 23487  05E9  00D9               	movwf	___flmul@temp
 23488  05EA  0859               	movf	___flmul@temp,w
 23489  05EB  00C9               	movwf	??___flmul
 23490  05EC  01CA               	clrf	??___flmul+1
 23491  05ED  01CB               	clrf	??___flmul+2
 23492  05EE  01CC               	clrf	??___flmul+3
 23493  05EF  0849               	movf	??___flmul,w
 23494  05F0  07D0               	addwf	___flmul@grs,f
 23495  05F1  084A               	movf	??___flmul+1,w
 23496  05F2  3DD1               	addwfc	___flmul@grs+1,f
 23497  05F3  084B               	movf	??___flmul+2,w
 23498  05F4  3DD2               	addwfc	___flmul@grs+2,f
 23499  05F5  084C               	movf	??___flmul+3,w
 23500  05F6  3DD3               	addwfc	___flmul@grs+3,f
 23501  05F7  085A               	movf	___flmul@temp+1,w
 23502  05F8  00C9               	movwf	??___flmul
 23503  05F9  01CA               	clrf	??___flmul+1
 23504  05FA  01CB               	clrf	??___flmul+2
 23505  05FB  01CC               	clrf	??___flmul+3
 23506  05FC  0849               	movf	??___flmul,w
 23507  05FD  07D5               	addwf	___flmul@prod,f
 23508  05FE  084A               	movf	??___flmul+1,w
 23509  05FF  3DD6               	addwfc	___flmul@prod+1,f
 23510  0600  084B               	movf	??___flmul+2,w
 23511  0601  3DD7               	addwfc	___flmul@prod+2,f
 23512  0602  084C               	movf	??___flmul+3,w
 23513  0603  3DD8               	addwfc	___flmul@prod+3,f
 23514  0604  0843               	movf	___flmul@b+2,w
 23515  0605  00C9               	movwf	??___flmul
 23516  0606  0849               	movf	??___flmul,w
 23517  0607  00A0               	movwf	__Umul8_16@multiplicand
 23518  0608  0845               	movf	___flmul@a,w
 23519  0609  31B1  219A  3185   	fcall	__Umul8_16
 23520  060C  0140               	movlb	0	; select bank0
 23521  060D  0821               	movf	?__Umul8_16+1,w
 23522  060E  00DA               	movwf	___flmul@temp+1
 23523  060F  0820               	movf	?__Umul8_16,w
 23524  0610  00D9               	movwf	___flmul@temp
 23525  0611  0859               	movf	___flmul@temp,w
 23526  0612  00C9               	movwf	??___flmul
 23527  0613  01CA               	clrf	??___flmul+1
 23528  0614  01CB               	clrf	??___flmul+2
 23529  0615  01CC               	clrf	??___flmul+3
 23530  0616  0849               	movf	??___flmul,w
 23531  0617  07D0               	addwf	___flmul@grs,f
 23532  0618  084A               	movf	??___flmul+1,w
 23533  0619  3DD1               	addwfc	___flmul@grs+1,f
 23534  061A  084B               	movf	??___flmul+2,w
 23535  061B  3DD2               	addwfc	___flmul@grs+2,f
 23536  061C  084C               	movf	??___flmul+3,w
 23537  061D  3DD3               	addwfc	___flmul@grs+3,f
 23538  061E  085A               	movf	___flmul@temp+1,w
 23539  061F  00C9               	movwf	??___flmul
 23540  0620  01CA               	clrf	??___flmul+1
 23541  0621  01CB               	clrf	??___flmul+2
 23542  0622  01CC               	clrf	??___flmul+3
 23543  0623  0849               	movf	??___flmul,w
 23544  0624  07D5               	addwf	___flmul@prod,f
 23545  0625  084A               	movf	??___flmul+1,w
 23546  0626  3DD6               	addwfc	___flmul@prod+1,f
 23547  0627  084B               	movf	??___flmul+2,w
 23548  0628  3DD7               	addwfc	___flmul@prod+2,f
 23549  0629  084C               	movf	??___flmul+3,w
 23550  062A  3DD8               	addwfc	___flmul@prod+3,f
 23551  062B  3008               	movlw	8
 23552  062C                     u8775:	
 23553  062C  35D0               	lslf	___flmul@grs,f
 23554  062D  0DD1               	rlf	___flmul@grs+1,f
 23555  062E  0DD2               	rlf	___flmul@grs+2,f
 23556  062F  0DD3               	rlf	___flmul@grs+3,f
 23557  0630  0B89               	decfsz	9,f
 23558  0631  2E2C               	goto	u8775
 23559  0632  0842               	movf	___flmul@b+1,w
 23560  0633  00C9               	movwf	??___flmul
 23561  0634  0849               	movf	??___flmul,w
 23562  0635  00A0               	movwf	__Umul8_16@multiplicand
 23563  0636  0845               	movf	___flmul@a,w
 23564  0637  31B1  219A  3185   	fcall	__Umul8_16
 23565  063A  0140               	movlb	0	; select bank0
 23566  063B  0821               	movf	?__Umul8_16+1,w
 23567  063C  00DA               	movwf	___flmul@temp+1
 23568  063D  0820               	movf	?__Umul8_16,w
 23569  063E  00D9               	movwf	___flmul@temp
 23570  063F  0859               	movf	___flmul@temp,w
 23571  0640  07D0               	addwf	___flmul@grs,f
 23572  0641  085A               	movf	___flmul@temp+1,w
 23573  0642  3DD1               	addwfc	___flmul@grs+1,f
 23574  0643  3000               	movlw	0
 23575  0644  3DD2               	addwfc	___flmul@grs+2,f
 23576  0645  3DD3               	addwfc	___flmul@grs+3,f
 23577  0646  0841               	movf	___flmul@b,w
 23578  0647  00C9               	movwf	??___flmul
 23579  0648  0849               	movf	??___flmul,w
 23580  0649  00A0               	movwf	__Umul8_16@multiplicand
 23581  064A  0846               	movf	___flmul@a+1,w
 23582  064B  31B1  219A  3185   	fcall	__Umul8_16
 23583  064E  0140               	movlb	0	; select bank0
 23584  064F  0821               	movf	?__Umul8_16+1,w
 23585  0650  00DA               	movwf	___flmul@temp+1
 23586  0651  0820               	movf	?__Umul8_16,w
 23587  0652  00D9               	movwf	___flmul@temp
 23588  0653  0859               	movf	___flmul@temp,w
 23589  0654  07D0               	addwf	___flmul@grs,f
 23590  0655  085A               	movf	___flmul@temp+1,w
 23591  0656  3DD1               	addwfc	___flmul@grs+1,f
 23592  0657  3000               	movlw	0
 23593  0658  3DD2               	addwfc	___flmul@grs+2,f
 23594  0659  3DD3               	addwfc	___flmul@grs+3,f
 23595  065A  3008               	movlw	8
 23596  065B                     u8785:	
 23597  065B  35D0               	lslf	___flmul@grs,f
 23598  065C  0DD1               	rlf	___flmul@grs+1,f
 23599  065D  0DD2               	rlf	___flmul@grs+2,f
 23600  065E  0DD3               	rlf	___flmul@grs+3,f
 23601  065F  0B89               	decfsz	9,f
 23602  0660  2E5B               	goto	u8785
 23603  0661  0841               	movf	___flmul@b,w
 23604  0662  00C9               	movwf	??___flmul
 23605  0663  0849               	movf	??___flmul,w
 23606  0664  00A0               	movwf	__Umul8_16@multiplicand
 23607  0665  0845               	movf	___flmul@a,w
 23608  0666  31B1  219A  3185   	fcall	__Umul8_16
 23609  0669  0140               	movlb	0	; select bank0
 23610  066A  0821               	movf	?__Umul8_16+1,w
 23611  066B  00DA               	movwf	___flmul@temp+1
 23612  066C  0820               	movf	?__Umul8_16,w
 23613  066D  00D9               	movwf	___flmul@temp
 23614  066E  0859               	movf	___flmul@temp,w
 23615  066F  07D0               	addwf	___flmul@grs,f
 23616  0670  085A               	movf	___flmul@temp+1,w
 23617  0671  3DD1               	addwfc	___flmul@grs+1,f
 23618  0672  3000               	movlw	0
 23619  0673  3DD2               	addwfc	___flmul@grs+2,f
 23620  0674  3DD3               	addwfc	___flmul@grs+3,f
 23621  0675  0842               	movf	___flmul@b+1,w
 23622  0676  00C9               	movwf	??___flmul
 23623  0677  0849               	movf	??___flmul,w
 23624  0678  00A0               	movwf	__Umul8_16@multiplicand
 23625  0679  0847               	movf	___flmul@a+2,w
 23626  067A  31B1  219A  3185   	fcall	__Umul8_16
 23627  067D  0140               	movlb	0	; select bank0
 23628  067E  0821               	movf	?__Umul8_16+1,w
 23629  067F  00DA               	movwf	___flmul@temp+1
 23630  0680  0820               	movf	?__Umul8_16,w
 23631  0681  00D9               	movwf	___flmul@temp
 23632  0682  0859               	movf	___flmul@temp,w
 23633  0683  07D5               	addwf	___flmul@prod,f
 23634  0684  085A               	movf	___flmul@temp+1,w
 23635  0685  3DD6               	addwfc	___flmul@prod+1,f
 23636  0686  3000               	movlw	0
 23637  0687  3DD7               	addwfc	___flmul@prod+2,f
 23638  0688  3DD8               	addwfc	___flmul@prod+3,f
 23639  0689  0843               	movf	___flmul@b+2,w
 23640  068A  00C9               	movwf	??___flmul
 23641  068B  0849               	movf	??___flmul,w
 23642  068C  00A0               	movwf	__Umul8_16@multiplicand
 23643  068D  0846               	movf	___flmul@a+1,w
 23644  068E  31B1  219A  3185   	fcall	__Umul8_16
 23645  0691  0140               	movlb	0	; select bank0
 23646  0692  0821               	movf	?__Umul8_16+1,w
 23647  0693  00DA               	movwf	___flmul@temp+1
 23648  0694  0820               	movf	?__Umul8_16,w
 23649  0695  00D9               	movwf	___flmul@temp
 23650  0696  0859               	movf	___flmul@temp,w
 23651  0697  07D5               	addwf	___flmul@prod,f
 23652  0698  085A               	movf	___flmul@temp+1,w
 23653  0699  3DD6               	addwfc	___flmul@prod+1,f
 23654  069A  3000               	movlw	0
 23655  069B  3DD7               	addwfc	___flmul@prod+2,f
 23656  069C  3DD8               	addwfc	___flmul@prod+3,f
 23657  069D  0843               	movf	___flmul@b+2,w
 23658  069E  00C9               	movwf	??___flmul
 23659  069F  0849               	movf	??___flmul,w
 23660  06A0  00A0               	movwf	__Umul8_16@multiplicand
 23661  06A1  0847               	movf	___flmul@a+2,w
 23662  06A2  31B1  219A  3185   	fcall	__Umul8_16
 23663  06A5  0140               	movlb	0	; select bank0
 23664  06A6  0821               	movf	?__Umul8_16+1,w
 23665  06A7  00DA               	movwf	___flmul@temp+1
 23666  06A8  0820               	movf	?__Umul8_16,w
 23667  06A9  00D9               	movwf	___flmul@temp
 23668  06AA  0859               	movf	___flmul@temp,w
 23669  06AB  00C9               	movwf	??___flmul
 23670  06AC  085A               	movf	___flmul@temp+1,w
 23671  06AD  00CA               	movwf	??___flmul+1
 23672  06AE  01CB               	clrf	??___flmul+2
 23673  06AF  01CC               	clrf	??___flmul+3
 23674  06B0  3008               	movlw	8
 23675  06B1                     u8795:	
 23676  06B1  35C9               	lslf	??___flmul,f
 23677  06B2  0DCA               	rlf	??___flmul+1,f
 23678  06B3  0DCB               	rlf	??___flmul+2,f
 23679  06B4  0DCC               	rlf	??___flmul+3,f
 23680  06B5  0B89               	decfsz	9,f
 23681  06B6  2EB1               	goto	u8795
 23682  06B7  0849               	movf	??___flmul,w
 23683  06B8  07D5               	addwf	___flmul@prod,f
 23684  06B9  084A               	movf	??___flmul+1,w
 23685  06BA  3DD6               	addwfc	___flmul@prod+1,f
 23686  06BB  084B               	movf	??___flmul+2,w
 23687  06BC  3DD7               	addwfc	___flmul@prod+2,f
 23688  06BD  084C               	movf	??___flmul+3,w
 23689  06BE  3DD8               	addwfc	___flmul@prod+3,f
 23690  06BF  0850               	movf	___flmul@grs,w
 23691  06C0  00C9               	movwf	??___flmul
 23692  06C1  0851               	movf	___flmul@grs+1,w
 23693  06C2  00CA               	movwf	??___flmul+1
 23694  06C3  0852               	movf	___flmul@grs+2,w
 23695  06C4  00CB               	movwf	??___flmul+2
 23696  06C5  0853               	movf	___flmul@grs+3,w
 23697  06C6  00CC               	movwf	??___flmul+3
 23698  06C7  3018               	movlw	24
 23699  06C8                     u8805:	
 23700  06C8  36CC               	lsrf	??___flmul+3,f
 23701  06C9  0CCB               	rrf	??___flmul+2,f
 23702  06CA  0CCA               	rrf	??___flmul+1,f
 23703  06CB  0CC9               	rrf	??___flmul,f
 23704  06CC  0B89               	decfsz	9,f
 23705  06CD  2EC8               	goto	u8805
 23706  06CE  0849               	movf	??___flmul,w
 23707  06CF  07D5               	addwf	___flmul@prod,f
 23708  06D0  084A               	movf	??___flmul+1,w
 23709  06D1  3DD6               	addwfc	___flmul@prod+1,f
 23710  06D2  084B               	movf	??___flmul+2,w
 23711  06D3  3DD7               	addwfc	___flmul@prod+2,f
 23712  06D4  084C               	movf	??___flmul+3,w
 23713  06D5  3DD8               	addwfc	___flmul@prod+3,f
 23714  06D6  3008               	movlw	8
 23715  06D7                     u8815:	
 23716  06D7  35D0               	lslf	___flmul@grs,f
 23717  06D8  0DD1               	rlf	___flmul@grs+1,f
 23718  06D9  0DD2               	rlf	___flmul@grs+2,f
 23719  06DA  0DD3               	rlf	___flmul@grs+3,f
 23720  06DB  0B89               	decfsz	9,f
 23721  06DC  2ED7               	goto	u8815
 23722  06DD  0854               	movf	___flmul@bexp,w
 23723  06DE  074F               	addwf	___flmul@aexp,w
 23724  06DF  00C9               	movwf	??___flmul
 23725  06E0  01CA               	clrf	??___flmul+1
 23726  06E1  0DCA               	rlf	??___flmul+1,f
 23727  06E2  0849               	movf	??___flmul,w
 23728  06E3  3E82               	addlw	130
 23729  06E4  00D9               	movwf	___flmul@temp
 23730  06E5  30FF               	movlw	255
 23731  06E6  3D4A               	addwfc	??___flmul+1,w
 23732  06E7  00DA               	movwf	___flmul@temp+1
 23733  06E8                     l7764:	
 23734  06E8  1BD7               	btfsc	___flmul@prod+2,7
 23735  06E9  2EFF               	goto	l7766
 23736  06EA  3001               	movlw	1
 23737  06EB                     u8825:	
 23738  06EB  35D5               	lslf	___flmul@prod,f
 23739  06EC  0DD6               	rlf	___flmul@prod+1,f
 23740  06ED  0DD7               	rlf	___flmul@prod+2,f
 23741  06EE  0DD8               	rlf	___flmul@prod+3,f
 23742  06EF  0B89               	decfsz	9,f
 23743  06F0  2EEB               	goto	u8825
 23744  06F1  1BD3               	btfsc	___flmul@grs+3,7
 23745  06F2  1455               	bsf	___flmul@prod,0
 23746  06F3  3001               	movlw	1
 23747  06F4                     u8845:	
 23748  06F4  35D0               	lslf	___flmul@grs,f
 23749  06F5  0DD1               	rlf	___flmul@grs+1,f
 23750  06F6  0DD2               	rlf	___flmul@grs+2,f
 23751  06F7  0DD3               	rlf	___flmul@grs+3,f
 23752  06F8  0B89               	decfsz	9,f
 23753  06F9  2EF4               	goto	u8845
 23754  06FA  30FF               	movlw	255
 23755  06FB  07D9               	addwf	___flmul@temp,f
 23756  06FC  30FF               	movlw	255
 23757  06FD  3DDA               	addwfc	___flmul@temp+1,f
 23758  06FE  2EE8               	goto	l7764
 23759  06FF                     l7766:	
 23760  06FF  01CF               	clrf	___flmul@aexp
 23761  0700  1FD3               	btfss	___flmul@grs+3,7
 23762  0701  2F18               	goto	l7776
 23763  0702  30FF               	movlw	255
 23764  0703  0550               	andwf	___flmul@grs,w
 23765  0704  00C9               	movwf	??___flmul
 23766  0705  30FF               	movlw	255
 23767  0706  0551               	andwf	___flmul@grs+1,w
 23768  0707  00CA               	movwf	??___flmul+1
 23769  0708  30FF               	movlw	255
 23770  0709  0552               	andwf	___flmul@grs+2,w
 23771  070A  00CB               	movwf	??___flmul+2
 23772  070B  307F               	movlw	127
 23773  070C  0553               	andwf	___flmul@grs+3,w
 23774  070D  00CC               	movwf	??___flmul+3
 23775  070E  084C               	movf	??___flmul+3,w
 23776  070F  044B               	iorwf	??___flmul+2,w
 23777  0710  044A               	iorwf	??___flmul+1,w
 23778  0711  0449               	iorwf	??___flmul,w
 23779  0712  1903               	skipnz
 23780  0713  1855               	btfsc	___flmul@prod,0
 23781  0714  2F16               	goto	l7772
 23782  0715  2F18               	goto	l7776
 23783  0716                     l7772:	
 23784  0716  01CF               	clrf	___flmul@aexp
 23785  0717  0ACF               	incf	___flmul@aexp,f
 23786  0718                     l7776:	
 23787  0718  084F               	movf	___flmul@aexp,w
 23788  0719  1903               	btfsc	3,2
 23789  071A  2F41               	goto	l7786
 23790  071B  3001               	movlw	1
 23791  071C  07D5               	addwf	___flmul@prod,f
 23792  071D  3000               	movlw	0
 23793  071E  3DD6               	addwfc	___flmul@prod+1,f
 23794  071F  3000               	movlw	0
 23795  0720  3DD7               	addwfc	___flmul@prod+2,f
 23796  0721  3000               	movlw	0
 23797  0722  3DD8               	addwfc	___flmul@prod+3,f
 23798  0723  1C58               	btfss	___flmul@prod+3,0
 23799  0724  2F41               	goto	l7786
 23800  0725  0855               	movf	___flmul@prod,w
 23801  0726  00C9               	movwf	??___flmul
 23802  0727  0856               	movf	___flmul@prod+1,w
 23803  0728  00CA               	movwf	??___flmul+1
 23804  0729  0857               	movf	___flmul@prod+2,w
 23805  072A  00CB               	movwf	??___flmul+2
 23806  072B  0858               	movf	___flmul@prod+3,w
 23807  072C  00CC               	movwf	??___flmul+3
 23808  072D  3001               	movlw	1
 23809  072E  00CD               	movwf	??___flmul+4
 23810  072F                     u8915:	
 23811  072F  37CC               	asrf	??___flmul+3,f
 23812  0730  0CCB               	rrf	??___flmul+2,f
 23813  0731  0CCA               	rrf	??___flmul+1,f
 23814  0732  0CC9               	rrf	??___flmul,f
 23815  0733  0BCD               	decfsz	??___flmul+4,f
 23816  0734  2F2F               	goto	u8915
 23817  0735  084C               	movf	??___flmul+3,w
 23818  0736  00D8               	movwf	___flmul@prod+3
 23819  0737  084B               	movf	??___flmul+2,w
 23820  0738  00D7               	movwf	___flmul@prod+2
 23821  0739  084A               	movf	??___flmul+1,w
 23822  073A  00D6               	movwf	___flmul@prod+1
 23823  073B  0849               	movf	??___flmul,w
 23824  073C  00D5               	movwf	___flmul@prod
 23825  073D  3001               	movlw	1
 23826  073E  07D9               	addwf	___flmul@temp,f
 23827  073F  3000               	movlw	0
 23828  0740  3DDA               	addwfc	___flmul@temp+1,f
 23829  0741                     l7786:	
 23830  0741  085A               	movf	___flmul@temp+1,w
 23831  0742  3A80               	xorlw	128
 23832  0743  00C9               	movwf	??___flmul
 23833  0744  3080               	movlw	128
 23834  0745  0249               	subwf	??___flmul,w
 23835  0746  1D03               	skipz
 23836  0747  2F4A               	goto	u8925
 23837  0748  30FF               	movlw	255
 23838  0749  0259               	subwf	___flmul@temp,w
 23839  074A                     u8925:	
 23840  074A  1C03               	skipc
 23841  074B  2F56               	goto	l7790
 23842  074C  307F               	movlw	127
 23843  074D  0140               	movlb	0	; select bank0
 23844  074E  00D8               	movwf	___flmul@prod+3
 23845  074F  3080               	movlw	128
 23846  0750  00D7               	movwf	___flmul@prod+2
 23847  0751  3000               	movlw	0
 23848  0752  00D6               	movwf	___flmul@prod+1
 23849  0753  3000               	movlw	0
 23850  0754  00D5               	movwf	___flmul@prod
 23851  0755  2F80               	goto	l1525
 23852  0756                     l7790:	
 23853  0756  0140               	movlb	0	; select bank0
 23854  0757  085A               	movf	___flmul@temp+1,w
 23855  0758  3A80               	xorlw	128
 23856  0759  00C9               	movwf	??___flmul
 23857  075A  3080               	movlw	128
 23858  075B  0249               	subwf	??___flmul,w
 23859  075C  1D03               	skipz
 23860  075D  2F60               	goto	u8935
 23861  075E  3001               	movlw	1
 23862  075F  0259               	subwf	___flmul@temp,w
 23863  0760                     u8935:	
 23864  0760  1803               	skipnc
 23865  0761  2F6D               	goto	l7796
 23866  0762  3000               	movlw	0
 23867  0763  0140               	movlb	0	; select bank0
 23868  0764  00D8               	movwf	___flmul@prod+3
 23869  0765  3000               	movlw	0
 23870  0766  00D7               	movwf	___flmul@prod+2
 23871  0767  3000               	movlw	0
 23872  0768  00D6               	movwf	___flmul@prod+1
 23873  0769  3000               	movlw	0
 23874  076A  00D5               	movwf	___flmul@prod
 23875  076B  01CE               	clrf	___flmul@sign
 23876  076C  2F80               	goto	l1525
 23877  076D                     l7796:	
 23878  076D  0140               	movlb	0	; select bank0
 23879  076E  0859               	movf	___flmul@temp,w
 23880  076F  00C9               	movwf	??___flmul
 23881  0770  0849               	movf	??___flmul,w
 23882  0771  00D4               	movwf	___flmul@bexp
 23883  0772  30FF               	movlw	255
 23884  0773  05D5               	andwf	___flmul@prod,f
 23885  0774  30FF               	movlw	255
 23886  0775  05D6               	andwf	___flmul@prod+1,f
 23887  0776  307F               	movlw	127
 23888  0777  05D7               	andwf	___flmul@prod+2,f
 23889  0778  3000               	movlw	0
 23890  0779  05D8               	andwf	___flmul@prod+3,f
 23891  077A  1854               	btfsc	___flmul@bexp,0
 23892  077B  17D7               	bsf	___flmul@prod+2,7
 23893  077C  3654               	lsrf	___flmul@bexp,w
 23894  077D  00C9               	movwf	??___flmul
 23895  077E  0849               	movf	??___flmul,w
 23896  077F  00D8               	movwf	___flmul@prod+3
 23897  0780                     l1525:	
 23898  0780  084E               	movf	___flmul@sign,w
 23899  0781  00C9               	movwf	??___flmul
 23900  0782  0849               	movf	??___flmul,w
 23901  0783  04D8               	iorwf	___flmul@prod+3,f
 23902  0784  0858               	movf	___flmul@prod+3,w
 23903  0785  00C4               	movwf	?___flmul+3
 23904  0786  0857               	movf	___flmul@prod+2,w
 23905  0787  00C3               	movwf	?___flmul+2
 23906  0788  0856               	movf	___flmul@prod+1,w
 23907  0789  00C2               	movwf	?___flmul+1
 23908  078A  0855               	movf	___flmul@prod,w
 23909  078B  00C1               	movwf	?___flmul
 23910  078C  0008               	return
 23911  078D                     __end_of___flmul:	
 23912                           
 23913                           	psect	text62
 23914  319A                     __ptext62:	
 23915 ;; *************** function __Umul8_16 *****************
 23916 ;; Defined at:
 23917 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 23918 ;; Parameters:    Size  Location     Type
 23919 ;;  multiplier      1    wreg     unsigned char 
 23920 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 23921 ;; Auto vars:     Size  Location     Type
 23922 ;;  multiplier      1    8[BANK0 ] unsigned char 
 23923 ;;  word_mpld       2    6[BANK0 ] unsigned int 
 23924 ;;  product         2    4[BANK0 ] unsigned int 
 23925 ;; Return value:  Size  Location     Type
 23926 ;;                  2    0[BANK0 ] unsigned int 
 23927 ;; Registers used:
 23928 ;;		wreg, status,2, status,0
 23929 ;; Tracked objects:
 23930 ;;		On entry : 0/0
 23931 ;;		On exit  : 0/0
 23932 ;;		Unchanged: 0/0
 23933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 23934 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23935 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23936 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23937 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 23938 ;;Total ram usage:        9 bytes
 23939 ;; Hardware stack levels used:    1
 23940 ;; Hardware stack levels required when called:    3
 23941 ;; This function calls:
 23942 ;;		Nothing
 23943 ;; This function is called by:
 23944 ;;		___flmul
 23945 ;; This function uses a non-reentrant model
 23946 ;;
 23947                           
 23948                           
 23949                           ;psect for function __Umul8_16
 23950  319A                     __Umul8_16:	
 23951                           
 23952                           ;incstack = 0
 23953                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 23954                           ;__Umul8_16@multiplier stored from wreg
 23955  319A  0140               	movlb	0	; select bank0
 23956  319B  00A8               	movwf	__Umul8_16@multiplier
 23957  319C  01A4               	clrf	__Umul8_16@product
 23958  319D  01A5               	clrf	__Umul8_16@product+1
 23959  319E  0820               	movf	__Umul8_16@multiplicand,w
 23960  319F  00A2               	movwf	??__Umul8_16
 23961  31A0  01A3               	clrf	??__Umul8_16+1
 23962  31A1  0822               	movf	??__Umul8_16,w
 23963  31A2  00A6               	movwf	__Umul8_16@word_mpld
 23964  31A3  0823               	movf	??__Umul8_16+1,w
 23965  31A4  00A7               	movwf	__Umul8_16@word_mpld+1
 23966  31A5                     l7284:	
 23967  31A5  1C28               	btfss	__Umul8_16@multiplier,0
 23968  31A6  29AB               	goto	l1610
 23969  31A7  0826               	movf	__Umul8_16@word_mpld,w
 23970  31A8  07A4               	addwf	__Umul8_16@product,f
 23971  31A9  0827               	movf	__Umul8_16@word_mpld+1,w
 23972  31AA  3DA5               	addwfc	__Umul8_16@product+1,f
 23973  31AB                     l1610:	
 23974  31AB  3001               	movlw	1
 23975  31AC                     u7955:	
 23976  31AC  35A6               	lslf	__Umul8_16@word_mpld,f
 23977  31AD  0DA7               	rlf	__Umul8_16@word_mpld+1,f
 23978  31AE  0B89               	decfsz	9,f
 23979  31AF  29AC               	goto	u7955
 23980  31B0  1003               	clrc
 23981  31B1  0CA8               	rrf	__Umul8_16@multiplier,f
 23982  31B2  0828               	movf	__Umul8_16@multiplier,w
 23983  31B3  1D03               	btfss	3,2
 23984  31B4  29A5               	goto	l7284
 23985  31B5  0825               	movf	__Umul8_16@product+1,w
 23986  31B6  00A1               	movwf	?__Umul8_16+1
 23987  31B7  0824               	movf	__Umul8_16@product,w
 23988  31B8  00A0               	movwf	?__Umul8_16
 23989  31B9  0008               	return
 23990  31BA                     __end_of__Umul8_16:	
 23991                           
 23992                           	psect	text63
 23993  1E28                     __ptext63:	
 23994 ;; *************** function ___fldiv *****************
 23995 ;; Defined at:
 23996 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 23997 ;; Parameters:    Size  Location     Type
 23998 ;;  a               4   59[BANK0 ] unsigned int 
 23999 ;;  b               4   63[BANK0 ] unsigned int 
 24000 ;; Auto vars:     Size  Location     Type
 24001 ;;  grs             4    7[BANK1 ] unsigned long 
 24002 ;;  rem             4    0[BANK1 ] unsigned long 
 24003 ;;  new_exp         2    5[BANK1 ] int 
 24004 ;;  aexp            1   12[BANK1 ] unsigned char 
 24005 ;;  bexp            1   11[BANK1 ] unsigned char 
 24006 ;;  sign            1    4[BANK1 ] unsigned char 
 24007 ;; Return value:  Size  Location     Type
 24008 ;;                  4   59[BANK0 ] unsigned char 
 24009 ;; Registers used:
 24010 ;;		wreg, status,2, status,0
 24011 ;; Tracked objects:
 24012 ;;		On entry : 0/0
 24013 ;;		On exit  : 0/0
 24014 ;;		Unchanged: 0/0
 24015 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24016 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24017 ;;      Locals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24018 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24019 ;;      Totals:         0      13      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24020 ;;Total ram usage:       26 bytes
 24021 ;; Hardware stack levels used:    1
 24022 ;; Hardware stack levels required when called:    3
 24023 ;; This function calls:
 24024 ;;		Nothing
 24025 ;; This function is called by:
 24026 ;;		_checkChannelStatus
 24027 ;;		_systemCheck
 24028 ;;		_calcRequiredPower
 24029 ;;		_getAnalogValues
 24030 ;;		_channelThing
 24031 ;;		_ftoa
 24032 ;; This function uses a non-reentrant model
 24033 ;;
 24034                           
 24035                           
 24036                           ;psect for function ___fldiv
 24037  1E28                     ___fldiv:	
 24038                           
 24039                           ;incstack = 0
 24040                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 24041  1E28  0140               	movlb	0	; select bank0
 24042  1E29  0862               	movf	___fldiv@b+3,w
 24043  1E2A  3980               	andlw	128
 24044  1E2B  00E3               	movwf	??___fldiv
 24045  1E2C  0863               	movf	??___fldiv,w
 24046  1E2D  0141               	movlb	1	; select bank1
 24047  1E2E  00A4               	movwf	___fldiv@sign^(0+128)
 24048  1E2F  0140               	movlb	0	; select bank0
 24049  1E30  3562               	lslf	___fldiv@b+3,w
 24050  1E31  00E3               	movwf	??___fldiv
 24051  1E32  0863               	movf	??___fldiv,w
 24052  1E33  0141               	movlb	1	; select bank1
 24053  1E34  00AB               	movwf	___fldiv@bexp^(0+128)
 24054  1E35  0140               	movlb	0	; select bank0
 24055  1E36  1FE1               	btfss	___fldiv@b+2,7
 24056  1E37  2E3A               	goto	l7536
 24057  1E38  0141               	movlb	1	; select bank1
 24058  1E39  142B               	bsf	___fldiv@bexp^(0+128),0
 24059  1E3A                     l7536:	
 24060  1E3A  0141               	movlb	1	; select bank1
 24061  1E3B  082B               	movf	___fldiv@bexp^(0+128),w
 24062  1E3C  1903               	btfsc	3,2
 24063  1E3D  2E4E               	goto	l7546
 24064  1E3E  0A2B               	incf	___fldiv@bexp^(0+128),w
 24065  1E3F  1D03               	btfss	3,2
 24066  1E40  2E4A               	goto	l7542
 24067  1E41  3000               	movlw	0
 24068  1E42  0140               	movlb	0	; select bank0
 24069  1E43  00E2               	movwf	___fldiv@b+3
 24070  1E44  3000               	movlw	0
 24071  1E45  00E1               	movwf	___fldiv@b+2
 24072  1E46  3000               	movlw	0
 24073  1E47  00E0               	movwf	___fldiv@b+1
 24074  1E48  3000               	movlw	0
 24075  1E49  00DF               	movwf	___fldiv@b
 24076  1E4A                     l7542:	
 24077  1E4A  0140               	movlb	0	; select bank0
 24078  1E4B  17E1               	bsf	___fldiv@b+2,7
 24079  1E4C  01E2               	clrf	___fldiv@b+3
 24080  1E4D  2E57               	goto	l7548
 24081  1E4E                     l7546:	
 24082  1E4E  3000               	movlw	0
 24083  1E4F  0140               	movlb	0	; select bank0
 24084  1E50  00E2               	movwf	___fldiv@b+3
 24085  1E51  3000               	movlw	0
 24086  1E52  00E1               	movwf	___fldiv@b+2
 24087  1E53  3000               	movlw	0
 24088  1E54  00E0               	movwf	___fldiv@b+1
 24089  1E55  3000               	movlw	0
 24090  1E56  00DF               	movwf	___fldiv@b
 24091  1E57                     l7548:	
 24092  1E57  085E               	movf	___fldiv@a+3,w
 24093  1E58  3980               	andlw	128
 24094  1E59  00E3               	movwf	??___fldiv
 24095  1E5A  0863               	movf	??___fldiv,w
 24096  1E5B  0141               	movlb	1	; select bank1
 24097  1E5C  06A4               	xorwf	___fldiv@sign^(0+128),f
 24098  1E5D  0140               	movlb	0	; select bank0
 24099  1E5E  355E               	lslf	___fldiv@a+3,w
 24100  1E5F  00E3               	movwf	??___fldiv
 24101  1E60  0863               	movf	??___fldiv,w
 24102  1E61  0141               	movlb	1	; select bank1
 24103  1E62  00AC               	movwf	___fldiv@aexp^(0+128)
 24104  1E63  0140               	movlb	0	; select bank0
 24105  1E64  1FDD               	btfss	___fldiv@a+2,7
 24106  1E65  2E68               	goto	l7556
 24107  1E66  0141               	movlb	1	; select bank1
 24108  1E67  142C               	bsf	___fldiv@aexp^(0+128),0
 24109  1E68                     l7556:	
 24110  1E68  0141               	movlb	1	; select bank1
 24111  1E69  082C               	movf	___fldiv@aexp^(0+128),w
 24112  1E6A  1903               	btfsc	3,2
 24113  1E6B  2E7C               	goto	l7566
 24114  1E6C  0A2C               	incf	___fldiv@aexp^(0+128),w
 24115  1E6D  1D03               	btfss	3,2
 24116  1E6E  2E78               	goto	l7562
 24117  1E6F  3000               	movlw	0
 24118  1E70  0140               	movlb	0	; select bank0
 24119  1E71  00DE               	movwf	___fldiv@a+3
 24120  1E72  3000               	movlw	0
 24121  1E73  00DD               	movwf	___fldiv@a+2
 24122  1E74  3000               	movlw	0
 24123  1E75  00DC               	movwf	___fldiv@a+1
 24124  1E76  3000               	movlw	0
 24125  1E77  00DB               	movwf	___fldiv@a
 24126  1E78                     l7562:	
 24127  1E78  0140               	movlb	0	; select bank0
 24128  1E79  17DD               	bsf	___fldiv@a+2,7
 24129  1E7A  01DE               	clrf	___fldiv@a+3
 24130  1E7B  2E85               	goto	l1473
 24131  1E7C                     l7566:	
 24132  1E7C  3000               	movlw	0
 24133  1E7D  0140               	movlb	0	; select bank0
 24134  1E7E  00DE               	movwf	___fldiv@a+3
 24135  1E7F  3000               	movlw	0
 24136  1E80  00DD               	movwf	___fldiv@a+2
 24137  1E81  3000               	movlw	0
 24138  1E82  00DC               	movwf	___fldiv@a+1
 24139  1E83  3000               	movlw	0
 24140  1E84  00DB               	movwf	___fldiv@a
 24141  1E85                     l1473:	
 24142  1E85  085E               	movf	___fldiv@a+3,w
 24143  1E86  045D               	iorwf	___fldiv@a+2,w
 24144  1E87  045C               	iorwf	___fldiv@a+1,w
 24145  1E88  045B               	iorwf	___fldiv@a,w
 24146  1E89  1D03               	skipz
 24147  1E8A  2EA6               	goto	l7576
 24148  1E8B  3000               	movlw	0
 24149  1E8C  00E2               	movwf	___fldiv@b+3
 24150  1E8D  3000               	movlw	0
 24151  1E8E  00E1               	movwf	___fldiv@b+2
 24152  1E8F  3000               	movlw	0
 24153  1E90  00E0               	movwf	___fldiv@b+1
 24154  1E91  3000               	movlw	0
 24155  1E92  00DF               	movwf	___fldiv@b
 24156  1E93  3080               	movlw	128
 24157  1E94  04E1               	iorwf	___fldiv@b+2,f
 24158  1E95  307F               	movlw	127
 24159  1E96  04E2               	iorwf	___fldiv@b+3,f
 24160  1E97                     L14:	
 24161  1E97  0141               	movlb	1	; select bank1
 24162  1E98  0824               	movf	___fldiv@sign^(0+128),w
 24163  1E99  0140               	movlb	0	; select bank0
 24164  1E9A  00E3               	movwf	??___fldiv
 24165  1E9B  0863               	movf	??___fldiv,w
 24166  1E9C  04E2               	iorwf	___fldiv@b+3,f
 24167  1E9D  0862               	movf	___fldiv@b+3,w
 24168  1E9E  00DE               	movwf	?___fldiv+3
 24169  1E9F  0861               	movf	___fldiv@b+2,w
 24170  1EA0  00DD               	movwf	?___fldiv+2
 24171  1EA1  0860               	movf	___fldiv@b+1,w
 24172  1EA2  00DC               	movwf	?___fldiv+1
 24173  1EA3  085F               	movf	___fldiv@b,w
 24174  1EA4  00DB               	movwf	?___fldiv
 24175  1EA5  0008               	return
 24176  1EA6                     l7576:	
 24177  1EA6  0141               	movlb	1	; select bank1
 24178  1EA7  082B               	movf	___fldiv@bexp^(0+128),w
 24179  1EA8  1D03               	btfss	3,2
 24180  1EA9  2EB4               	goto	l7582
 24181  1EAA  3000               	movlw	0
 24182  1EAB  0140               	movlb	0	; select bank0
 24183  1EAC  00DE               	movwf	?___fldiv+3
 24184  1EAD  3000               	movlw	0
 24185  1EAE  00DD               	movwf	?___fldiv+2
 24186  1EAF  3000               	movlw	0
 24187  1EB0  00DC               	movwf	?___fldiv+1
 24188  1EB1  3000               	movlw	0
 24189  1EB2  00DB               	movwf	?___fldiv
 24190  1EB3  0008               	return
 24191  1EB4                     l7582:	
 24192  1EB4  082B               	movf	___fldiv@bexp^(0+128),w
 24193  1EB5  0140               	movlb	0	; select bank0
 24194  1EB6  00E3               	movwf	??___fldiv
 24195  1EB7  01E4               	clrf	??___fldiv+1
 24196  1EB8  0864               	movf	??___fldiv+1,w
 24197  1EB9  00E6               	movwf	??___fldiv+3
 24198  1EBA  0141               	movlb	1	; select bank1
 24199  1EBB  082C               	movf	___fldiv@aexp^(0+128),w
 24200  1EBC  0140               	movlb	0	; select bank0
 24201  1EBD  0263               	subwf	??___fldiv,w
 24202  1EBE  00E5               	movwf	??___fldiv+2
 24203  1EBF  1C03               	skipc
 24204  1EC0  03E6               	decf	??___fldiv+3,f
 24205  1EC1  0865               	movf	??___fldiv+2,w
 24206  1EC2  3E7F               	addlw	127
 24207  1EC3  0141               	movlb	1	; select bank1
 24208  1EC4  00A5               	movwf	___fldiv@new_exp^(0+128)
 24209  1EC5  3000               	movlw	0
 24210  1EC6  0140               	movlb	0	; select bank0
 24211  1EC7  3D66               	addwfc	??___fldiv+3,w
 24212  1EC8  0141               	movlb	1	; select bank1
 24213  1EC9  00A6               	movwf	(___fldiv@new_exp+1)^(0+128)
 24214  1ECA  0140               	movlb	0	; select bank0
 24215  1ECB  0862               	movf	___fldiv@b+3,w
 24216  1ECC  0141               	movlb	1	; select bank1
 24217  1ECD  00A3               	movwf	(___fldiv@rem+3)^(0+128)
 24218  1ECE  0140               	movlb	0	; select bank0
 24219  1ECF  0861               	movf	___fldiv@b+2,w
 24220  1ED0  0141               	movlb	1	; select bank1
 24221  1ED1  00A2               	movwf	(___fldiv@rem+2)^(0+128)
 24222  1ED2  0140               	movlb	0	; select bank0
 24223  1ED3  0860               	movf	___fldiv@b+1,w
 24224  1ED4  0141               	movlb	1	; select bank1
 24225  1ED5  00A1               	movwf	(___fldiv@rem+1)^(0+128)
 24226  1ED6  0140               	movlb	0	; select bank0
 24227  1ED7  085F               	movf	___fldiv@b,w
 24228  1ED8  0141               	movlb	1	; select bank1
 24229  1ED9  00A0               	movwf	___fldiv@rem^(0+128)
 24230  1EDA  3000               	movlw	0
 24231  1EDB  0140               	movlb	0	; select bank0
 24232  1EDC  00E2               	movwf	___fldiv@b+3
 24233  1EDD  3000               	movlw	0
 24234  1EDE  00E1               	movwf	___fldiv@b+2
 24235  1EDF  3000               	movlw	0
 24236  1EE0  00E0               	movwf	___fldiv@b+1
 24237  1EE1  3000               	movlw	0
 24238  1EE2  00DF               	movwf	___fldiv@b
 24239  1EE3  3000               	movlw	0
 24240  1EE4  0141               	movlb	1	; select bank1
 24241  1EE5  00AA               	movwf	(___fldiv@grs+3)^(0+128)
 24242  1EE6  3000               	movlw	0
 24243  1EE7  00A9               	movwf	(___fldiv@grs+2)^(0+128)
 24244  1EE8  3000               	movlw	0
 24245  1EE9  00A8               	movwf	(___fldiv@grs+1)^(0+128)
 24246  1EEA  3000               	movlw	0
 24247  1EEB  00A7               	movwf	___fldiv@grs^(0+128)
 24248  1EEC  01AC               	clrf	___fldiv@aexp^(0+128)
 24249  1EED                     l7610:	
 24250  1EED  301A               	movlw	26
 24251  1EEE  022C               	subwf	___fldiv@aexp^(0+128),w
 24252  1EEF  1803               	btfsc	3,0
 24253  1EF0  2F40               	goto	l7612
 24254  1EF1  082C               	movf	___fldiv@aexp^(0+128),w
 24255  1EF2  1903               	btfsc	3,2
 24256  1EF3  2F10               	goto	l7602
 24257  1EF4  3001               	movlw	1
 24258  1EF5                     u8495:	
 24259  1EF5  35A0               	lslf	___fldiv@rem^(0+128),f
 24260  1EF6  0DA1               	rlf	(___fldiv@rem+1)^(0+128),f
 24261  1EF7  0DA2               	rlf	(___fldiv@rem+2)^(0+128),f
 24262  1EF8  0DA3               	rlf	(___fldiv@rem+3)^(0+128),f
 24263  1EF9  0B89               	decfsz	9,f
 24264  1EFA  2EF5               	goto	u8495
 24265  1EFB  3001               	movlw	1
 24266  1EFC                     u8505:	
 24267  1EFC  0140               	movlb	0	; select bank0
 24268  1EFD  35DF               	lslf	___fldiv@b,f
 24269  1EFE  0DE0               	rlf	___fldiv@b+1,f
 24270  1EFF  0DE1               	rlf	___fldiv@b+2,f
 24271  1F00  0DE2               	rlf	___fldiv@b+3,f
 24272  1F01  0B89               	decfsz	9,f
 24273  1F02  2EFC               	goto	u8505
 24274  1F03  0141               	movlb	1	; select bank1
 24275  1F04  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 24276  1F05  2F08               	goto	l7600
 24277  1F06  0140               	movlb	0	; select bank0
 24278  1F07  145F               	bsf	___fldiv@b,0
 24279  1F08                     l7600:	
 24280  1F08  3001               	movlw	1
 24281  1F09                     u8525:	
 24282  1F09  0141               	movlb	1	; select bank1
 24283  1F0A  35A7               	lslf	___fldiv@grs^(0+128),f
 24284  1F0B  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 24285  1F0C  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 24286  1F0D  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 24287  1F0E  0B89               	decfsz	9,f
 24288  1F0F  2F09               	goto	u8525
 24289  1F10                     l7602:	
 24290  1F10  0140               	movlb	0	; select bank0
 24291  1F11  085E               	movf	___fldiv@a+3,w
 24292  1F12  0141               	movlb	1	; select bank1
 24293  1F13  0223               	subwf	(___fldiv@rem+3)^(0+128),w
 24294  1F14  1D03               	skipz
 24295  1F15  2F26               	goto	u8535
 24296  1F16  0140               	movlb	0	; select bank0
 24297  1F17  085D               	movf	___fldiv@a+2,w
 24298  1F18  0141               	movlb	1	; select bank1
 24299  1F19  0222               	subwf	(___fldiv@rem+2)^(0+128),w
 24300  1F1A  1D03               	skipz
 24301  1F1B  2F26               	goto	u8535
 24302  1F1C  0140               	movlb	0	; select bank0
 24303  1F1D  085C               	movf	___fldiv@a+1,w
 24304  1F1E  0141               	movlb	1	; select bank1
 24305  1F1F  0221               	subwf	(___fldiv@rem+1)^(0+128),w
 24306  1F20  1D03               	skipz
 24307  1F21  2F26               	goto	u8535
 24308  1F22  0140               	movlb	0	; select bank0
 24309  1F23  085B               	movf	___fldiv@a,w
 24310  1F24  0141               	movlb	1	; select bank1
 24311  1F25  0220               	subwf	___fldiv@rem^(0+128),w
 24312  1F26                     u8535:	
 24313  1F26  1C03               	skipc
 24314  1F27  2F39               	goto	l7608
 24315  1F28  172A               	bsf	(___fldiv@grs^(0+128)+3),6
 24316  1F29  0140               	movlb	0	; select bank0
 24317  1F2A  085B               	movf	___fldiv@a,w
 24318  1F2B  0141               	movlb	1	; select bank1
 24319  1F2C  02A0               	subwf	___fldiv@rem^(0+128),f
 24320  1F2D  0140               	movlb	0	; select bank0
 24321  1F2E  085C               	movf	___fldiv@a+1,w
 24322  1F2F  0141               	movlb	1	; select bank1
 24323  1F30  3BA1               	subwfb	(___fldiv@rem+1)^(0+128),f
 24324  1F31  0140               	movlb	0	; select bank0
 24325  1F32  085D               	movf	___fldiv@a+2,w
 24326  1F33  0141               	movlb	1	; select bank1
 24327  1F34  3BA2               	subwfb	(___fldiv@rem+2)^(0+128),f
 24328  1F35  0140               	movlb	0	; select bank0
 24329  1F36  085E               	movf	___fldiv@a+3,w
 24330  1F37  0141               	movlb	1	; select bank1
 24331  1F38  3BA3               	subwfb	(___fldiv@rem+3)^(0+128),f
 24332  1F39                     l7608:	
 24333  1F39  3001               	movlw	1
 24334  1F3A  0140               	movlb	0	; select bank0
 24335  1F3B  00E3               	movwf	??___fldiv
 24336  1F3C  0863               	movf	??___fldiv,w
 24337  1F3D  0141               	movlb	1	; select bank1
 24338  1F3E  07AC               	addwf	___fldiv@aexp^(0+128),f
 24339  1F3F  2EED               	goto	l7610
 24340  1F40                     l7612:	
 24341  1F40  0823               	movf	(___fldiv@rem+3)^(0+128),w
 24342  1F41  0422               	iorwf	(___fldiv@rem+2)^(0+128),w
 24343  1F42  0421               	iorwf	(___fldiv@rem+1)^(0+128),w
 24344  1F43  0420               	iorwf	___fldiv@rem^(0+128),w
 24345  1F44  1D03               	btfss	3,2
 24346  1F45  1427               	bsf	___fldiv@grs^(0+128),0
 24347  1F46                     l7626:	
 24348  1F46  0140               	movlb	0	; select bank0
 24349  1F47  1BE1               	btfsc	___fldiv@b+2,7
 24350  1F48  2F62               	goto	l7628
 24351  1F49  3001               	movlw	1
 24352  1F4A                     u8565:	
 24353  1F4A  35DF               	lslf	___fldiv@b,f
 24354  1F4B  0DE0               	rlf	___fldiv@b+1,f
 24355  1F4C  0DE1               	rlf	___fldiv@b+2,f
 24356  1F4D  0DE2               	rlf	___fldiv@b+3,f
 24357  1F4E  0B89               	decfsz	9,f
 24358  1F4F  2F4A               	goto	u8565
 24359  1F50  0141               	movlb	1	; select bank1
 24360  1F51  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 24361  1F52  2F55               	goto	l7622
 24362  1F53  0140               	movlb	0	; select bank0
 24363  1F54  145F               	bsf	___fldiv@b,0
 24364  1F55                     l7622:	
 24365  1F55  3001               	movlw	1
 24366  1F56                     u8585:	
 24367  1F56  0141               	movlb	1	; select bank1
 24368  1F57  35A7               	lslf	___fldiv@grs^(0+128),f
 24369  1F58  0DA8               	rlf	(___fldiv@grs+1)^(0+128),f
 24370  1F59  0DA9               	rlf	(___fldiv@grs+2)^(0+128),f
 24371  1F5A  0DAA               	rlf	(___fldiv@grs+3)^(0+128),f
 24372  1F5B  0B89               	decfsz	9,f
 24373  1F5C  2F56               	goto	u8585
 24374  1F5D  30FF               	movlw	255
 24375  1F5E  07A5               	addwf	___fldiv@new_exp^(0+128),f
 24376  1F5F  30FF               	movlw	255
 24377  1F60  3DA6               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 24378  1F61  2F46               	goto	l7626
 24379  1F62                     l7628:	
 24380  1F62  0141               	movlb	1	; select bank1
 24381  1F63  01AC               	clrf	___fldiv@aexp^(0+128)
 24382  1F64  1FAA               	btfss	(___fldiv@grs+3)^(0+128),7
 24383  1F65  2F84               	goto	l7638
 24384  1F66  30FF               	movlw	255
 24385  1F67  0527               	andwf	___fldiv@grs^(0+128),w
 24386  1F68  0140               	movlb	0	; select bank0
 24387  1F69  00E3               	movwf	??___fldiv
 24388  1F6A  30FF               	movlw	255
 24389  1F6B  0141               	movlb	1	; select bank1
 24390  1F6C  0528               	andwf	(___fldiv@grs+1)^(0+128),w
 24391  1F6D  0140               	movlb	0	; select bank0
 24392  1F6E  00E4               	movwf	??___fldiv+1
 24393  1F6F  30FF               	movlw	255
 24394  1F70  0141               	movlb	1	; select bank1
 24395  1F71  0529               	andwf	(___fldiv@grs+2)^(0+128),w
 24396  1F72  0140               	movlb	0	; select bank0
 24397  1F73  00E5               	movwf	??___fldiv+2
 24398  1F74  307F               	movlw	127
 24399  1F75  0141               	movlb	1	; select bank1
 24400  1F76  052A               	andwf	(___fldiv@grs+3)^(0+128),w
 24401  1F77  0140               	movlb	0	; select bank0
 24402  1F78  00E6               	movwf	??___fldiv+3
 24403  1F79  0866               	movf	??___fldiv+3,w
 24404  1F7A  0465               	iorwf	??___fldiv+2,w
 24405  1F7B  0464               	iorwf	??___fldiv+1,w
 24406  1F7C  0463               	iorwf	??___fldiv,w
 24407  1F7D  1903               	skipnz
 24408  1F7E  185F               	btfsc	___fldiv@b,0
 24409  1F7F  2F81               	goto	l7634
 24410  1F80  2F84               	goto	l7638
 24411  1F81                     l7634:	
 24412  1F81  0141               	movlb	1	; select bank1
 24413  1F82  01AC               	clrf	___fldiv@aexp^(0+128)
 24414  1F83  0AAC               	incf	___fldiv@aexp^(0+128),f
 24415  1F84                     l7638:	
 24416  1F84  0141               	movlb	1	; select bank1
 24417  1F85  082C               	movf	___fldiv@aexp^(0+128),w
 24418  1F86  1903               	btfsc	3,2
 24419  1F87  2FB0               	goto	l7648
 24420  1F88  3001               	movlw	1
 24421  1F89  0140               	movlb	0	; select bank0
 24422  1F8A  07DF               	addwf	___fldiv@b,f
 24423  1F8B  3000               	movlw	0
 24424  1F8C  3DE0               	addwfc	___fldiv@b+1,f
 24425  1F8D  3000               	movlw	0
 24426  1F8E  3DE1               	addwfc	___fldiv@b+2,f
 24427  1F8F  3000               	movlw	0
 24428  1F90  3DE2               	addwfc	___fldiv@b+3,f
 24429  1F91  1C62               	btfss	___fldiv@b+3,0
 24430  1F92  2FB0               	goto	l7648
 24431  1F93  085F               	movf	___fldiv@b,w
 24432  1F94  00E3               	movwf	??___fldiv
 24433  1F95  0860               	movf	___fldiv@b+1,w
 24434  1F96  00E4               	movwf	??___fldiv+1
 24435  1F97  0861               	movf	___fldiv@b+2,w
 24436  1F98  00E5               	movwf	??___fldiv+2
 24437  1F99  0862               	movf	___fldiv@b+3,w
 24438  1F9A  00E6               	movwf	??___fldiv+3
 24439  1F9B  3001               	movlw	1
 24440  1F9C  00E7               	movwf	??___fldiv+4
 24441  1F9D                     u8655:	
 24442  1F9D  37E6               	asrf	??___fldiv+3,f
 24443  1F9E  0CE5               	rrf	??___fldiv+2,f
 24444  1F9F  0CE4               	rrf	??___fldiv+1,f
 24445  1FA0  0CE3               	rrf	??___fldiv,f
 24446  1FA1  0BE7               	decfsz	??___fldiv+4,f
 24447  1FA2  2F9D               	goto	u8655
 24448  1FA3  0866               	movf	??___fldiv+3,w
 24449  1FA4  00E2               	movwf	___fldiv@b+3
 24450  1FA5  0865               	movf	??___fldiv+2,w
 24451  1FA6  00E1               	movwf	___fldiv@b+2
 24452  1FA7  0864               	movf	??___fldiv+1,w
 24453  1FA8  00E0               	movwf	___fldiv@b+1
 24454  1FA9  0863               	movf	??___fldiv,w
 24455  1FAA  00DF               	movwf	___fldiv@b
 24456  1FAB  3001               	movlw	1
 24457  1FAC  0141               	movlb	1	; select bank1
 24458  1FAD  07A5               	addwf	___fldiv@new_exp^(0+128),f
 24459  1FAE  3000               	movlw	0
 24460  1FAF  3DA6               	addwfc	(___fldiv@new_exp+1)^(0+128),f
 24461  1FB0                     l7648:	
 24462  1FB0  0141               	movlb	1	; select bank1
 24463  1FB1  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 24464  1FB2  3A80               	xorlw	128
 24465  1FB3  0140               	movlb	0	; select bank0
 24466  1FB4  00E3               	movwf	??___fldiv
 24467  1FB5  3080               	movlw	128
 24468  1FB6  0263               	subwf	??___fldiv,w
 24469  1FB7  1D03               	skipz
 24470  1FB8  2FBC               	goto	u8665
 24471  1FB9  30FF               	movlw	255
 24472  1FBA  0141               	movlb	1	; select bank1
 24473  1FBB  0225               	subwf	___fldiv@new_exp^(0+128),w
 24474  1FBC                     u8665:	
 24475  1FBC  1C03               	skipc
 24476  1FBD  2FCC               	goto	l1494
 24477  1FBE  30FF               	movlw	255
 24478  1FBF  0141               	movlb	1	; select bank1
 24479  1FC0  00A5               	movwf	___fldiv@new_exp^(0+128)
 24480  1FC1  3000               	movlw	0
 24481  1FC2  00A6               	movwf	(___fldiv@new_exp^(0+128)+1)
 24482  1FC3  3000               	movlw	0
 24483  1FC4  0140               	movlb	0	; select bank0
 24484  1FC5  00E2               	movwf	___fldiv@b+3
 24485  1FC6  3000               	movlw	0
 24486  1FC7  00E1               	movwf	___fldiv@b+2
 24487  1FC8  3000               	movlw	0
 24488  1FC9  00E0               	movwf	___fldiv@b+1
 24489  1FCA  3000               	movlw	0
 24490  1FCB  00DF               	movwf	___fldiv@b
 24491  1FCC                     l1494:	
 24492  1FCC  0141               	movlb	1	; select bank1
 24493  1FCD  0826               	movf	(___fldiv@new_exp+1)^(0+128),w
 24494  1FCE  3A80               	xorlw	128
 24495  1FCF  0140               	movlb	0	; select bank0
 24496  1FD0  00E3               	movwf	??___fldiv
 24497  1FD1  3080               	movlw	128
 24498  1FD2  0263               	subwf	??___fldiv,w
 24499  1FD3  1D03               	skipz
 24500  1FD4  2FD8               	goto	u8675
 24501  1FD5  3001               	movlw	1
 24502  1FD6  0141               	movlb	1	; select bank1
 24503  1FD7  0225               	subwf	___fldiv@new_exp^(0+128),w
 24504  1FD8                     u8675:	
 24505  1FD8  1803               	skipnc
 24506  1FD9  2FE8               	goto	l1495
 24507  1FDA  0141               	movlb	1	; select bank1
 24508  1FDB  01A5               	clrf	___fldiv@new_exp^(0+128)
 24509  1FDC  01A6               	clrf	(___fldiv@new_exp+1)^(0+128)
 24510  1FDD  3000               	movlw	0
 24511  1FDE  0140               	movlb	0	; select bank0
 24512  1FDF  00E2               	movwf	___fldiv@b+3
 24513  1FE0  3000               	movlw	0
 24514  1FE1  00E1               	movwf	___fldiv@b+2
 24515  1FE2  3000               	movlw	0
 24516  1FE3  00E0               	movwf	___fldiv@b+1
 24517  1FE4  3000               	movlw	0
 24518  1FE5  00DF               	movwf	___fldiv@b
 24519  1FE6  0141               	movlb	1	; select bank1
 24520  1FE7  01A4               	clrf	___fldiv@sign^(0+128)
 24521  1FE8                     l1495:	
 24522  1FE8  0141               	movlb	1	; select bank1
 24523  1FE9  0825               	movf	___fldiv@new_exp^(0+128),w
 24524  1FEA  0140               	movlb	0	; select bank0
 24525  1FEB  00E3               	movwf	??___fldiv
 24526  1FEC  0863               	movf	??___fldiv,w
 24527  1FED  0141               	movlb	1	; select bank1
 24528  1FEE  00AB               	movwf	___fldiv@bexp^(0+128)
 24529  1FEF  1C2B               	btfss	___fldiv@bexp^(0+128),0
 24530  1FF0  2FF4               	goto	l7662
 24531  1FF1  0140               	movlb	0	; select bank0
 24532  1FF2  17E1               	bsf	___fldiv@b+2,7
 24533  1FF3  2FF9               	goto	l1497
 24534  1FF4                     l7662:	
 24535  1FF4  307F               	movlw	127
 24536  1FF5  0140               	movlb	0	; select bank0
 24537  1FF6  00E3               	movwf	??___fldiv
 24538  1FF7  0863               	movf	??___fldiv,w
 24539  1FF8  05E1               	andwf	___fldiv@b+2,f
 24540  1FF9                     l1497:	
 24541  1FF9  0141               	movlb	1	; select bank1
 24542  1FFA  362B               	lsrf	___fldiv@bexp^(0+128),w
 24543  1FFB  0140               	movlb	0	; select bank0
 24544  1FFC  00E3               	movwf	??___fldiv
 24545  1FFD  0863               	movf	??___fldiv,w
 24546  1FFE  00E2               	movwf	___fldiv@b+3
 24547  1FFF  2E97               	goto	L14
 24548  2000                     __end_of___fldiv:	
 24549                           
 24550                           	psect	text64
 24551  3241                     __ptext64:	
 24552 ;; *************** function _OLED_loadSpecialChars *****************
 24553 ;; Defined at:
 24554 ;;		line 155 in file "oled.c"
 24555 ;; Parameters:    Size  Location     Type
 24556 ;;		None
 24557 ;; Auto vars:     Size  Location     Type
 24558 ;;  special        32    8[BANK0 ] unsigned char [32]
 24559 ;;  n               1   40[BANK0 ] unsigned char 
 24560 ;; Return value:  Size  Location     Type
 24561 ;;                  1    wreg      void 
 24562 ;; Registers used:
 24563 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 24564 ;; Tracked objects:
 24565 ;;		On entry : 0/0
 24566 ;;		On exit  : 0/0
 24567 ;;		Unchanged: 0/0
 24568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24570 ;;      Locals:         0      33       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24571 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24572 ;;      Totals:         0      34       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24573 ;;Total ram usage:       34 bytes
 24574 ;; Hardware stack levels used:    1
 24575 ;; Hardware stack levels required when called:    6
 24576 ;; This function calls:
 24577 ;;		_OLED_command
 24578 ;;		_OLED_write
 24579 ;; This function is called by:
 24580 ;;		_main
 24581 ;; This function uses a non-reentrant model
 24582 ;;
 24583                           
 24584                           
 24585                           ;psect for function _OLED_loadSpecialChars
 24586  3241                     _OLED_loadSpecialChars:	
 24587                           
 24588                           ;oled.c: 157:  uint8_t special[] = {0x18, 0x18, 0x03, 0x04, 0x04, 0x04, 0x03, 0x00,
 24589                           
 24590                           ;incstack = 0
 24591                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 24592  3241  3020               	movlw	low OLED_loadSpecialChars@F7970
 24593  3242  0086               	movwf	6
 24594  3243  3003               	movlw	high OLED_loadSpecialChars@F7970
 24595  3244  0087               	movwf	7
 24596  3245  3028               	movlw	low OLED_loadSpecialChars@special
 24597  3246  0084               	movwf	4
 24598  3247  3000               	movlw	high OLED_loadSpecialChars@special
 24599  3248  0085               	movwf	5
 24600  3249  3020               	movlw	32
 24601  324A  0140               	movlb	0	; select bank0
 24602  324B  00A7               	movwf	??_OLED_loadSpecialChars
 24603  324C                     u10090:	
 24604  324C  0016               	moviw fsr1++
 24605  324D  001A               	movwi fsr0++
 24606  324E  0BA7               	decfsz	??_OLED_loadSpecialChars,f
 24607  324F  2A4C               	goto	u10090
 24608                           
 24609                           ;oled.c: 162:  uint8_t n;;oled.c: 164:  OLED_command(0x40 + 8);
 24610  3250  3048               	movlw	72
 24611  3251  31B1  2102  31B2   	fcall	_OLED_command
 24612                           
 24613                           ;oled.c: 165:  for(n = 0; n < sizeof(special); n++) {
 24614  3254  0140               	movlb	0	; select bank0
 24615  3255  01C8               	clrf	OLED_loadSpecialChars@n
 24616  3256                     l8816:	
 24617                           
 24618                           ;oled.c: 166:   OLED_write(special[n]);
 24619  3256  0848               	movf	OLED_loadSpecialChars@n,w
 24620  3257  3E28               	addlw	(low (OLED_loadSpecialChars@special| 0))& (0+255)
 24621  3258  0086               	movwf	6
 24622  3259  0187               	clrf	7
 24623  325A  0801               	movf	1,w
 24624  325B  31B1  2116  31B2   	fcall	_OLED_write
 24625                           
 24626                           ;oled.c: 167:  }
 24627  325E  3001               	movlw	1
 24628  325F  0140               	movlb	0	; select bank0
 24629  3260  00A7               	movwf	??_OLED_loadSpecialChars
 24630  3261  0827               	movf	??_OLED_loadSpecialChars,w
 24631  3262  07C8               	addwf	OLED_loadSpecialChars@n,f
 24632  3263  3020               	movlw	32
 24633  3264  0248               	subwf	OLED_loadSpecialChars@n,w
 24634  3265  1803               	btfsc	3,0
 24635  3266  0008               	return
 24636  3267  2A56               	goto	l8816
 24637  3268                     __end_of_OLED_loadSpecialChars:	
 24638                           
 24639                           	psect	text65
 24640  3116                     __ptext65:	
 24641 ;; *************** function _OLED_write *****************
 24642 ;; Defined at:
 24643 ;;		line 76 in file "oled.c"
 24644 ;; Parameters:    Size  Location     Type
 24645 ;;  value           1    wreg     unsigned char 
 24646 ;; Auto vars:     Size  Location     Type
 24647 ;;  value           1    6[BANK0 ] unsigned char 
 24648 ;; Return value:  Size  Location     Type
 24649 ;;                  1    wreg      void 
 24650 ;; Registers used:
 24651 ;;		wreg, status,2, status,0, pclath, cstack
 24652 ;; Tracked objects:
 24653 ;;		On entry : 0/0
 24654 ;;		On exit  : 0/0
 24655 ;;		Unchanged: 0/0
 24656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24658 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24659 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24660 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24661 ;;Total ram usage:        1 bytes
 24662 ;; Hardware stack levels used:    1
 24663 ;; Hardware stack levels required when called:    5
 24664 ;; This function calls:
 24665 ;;		_OLED_send
 24666 ;;		_OLED_waitForReady
 24667 ;; This function is called by:
 24668 ;;		_OLED_print_xy
 24669 ;;		_OLED_loadSpecialChars
 24670 ;;		_OLED_print
 24671 ;; This function uses a non-reentrant model
 24672 ;;
 24673                           
 24674                           
 24675                           ;psect for function _OLED_write
 24676  3116                     _OLED_write:	
 24677                           
 24678                           ;incstack = 0
 24679                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 24680                           ;OLED_write@value stored from wreg
 24681  3116  0140               	movlb	0	; select bank0
 24682  3117  00A6               	movwf	OLED_write@value
 24683                           
 24684                           ;oled.c: 76: void OLED_write(uint8_t value);oled.c: 77: {;oled.c: 78:  OLED_send(value, 
      +                          1);
 24685  3118  01A3               	clrf	OLED_send@mode
 24686  3119  0AA3               	incf	OLED_send@mode,f
 24687  311A  0826               	movf	OLED_write@value,w
 24688  311B  31A0  2001  31B1   	fcall	_OLED_send
 24689                           
 24690                           ;oled.c: 79:  OLED_waitForReady();
 24691  311E  31B2  221A         	fcall	_OLED_waitForReady
 24692  3120  0008               	return
 24693  3121                     __end_of_OLED_write:	
 24694                           
 24695                           	psect	text66
 24696  2BA5                     __ptext66:	
 24697 ;; *************** function _OLED_init *****************
 24698 ;; Defined at:
 24699 ;;		line 82 in file "oled.c"
 24700 ;; Parameters:    Size  Location     Type
 24701 ;;		None
 24702 ;; Auto vars:     Size  Location     Type
 24703 ;;		None
 24704 ;; Return value:  Size  Location     Type
 24705 ;;                  1    wreg      void 
 24706 ;; Registers used:
 24707 ;;		wreg, status,2, status,0, pclath, cstack
 24708 ;; Tracked objects:
 24709 ;;		On entry : 0/0
 24710 ;;		On exit  : 0/0
 24711 ;;		Unchanged: 0/0
 24712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24713 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24714 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24715 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24716 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24717 ;;Total ram usage:        1 bytes
 24718 ;; Hardware stack levels used:    1
 24719 ;; Hardware stack levels required when called:    6
 24720 ;; This function calls:
 24721 ;;		_OLED_command
 24722 ;;		_OLED_write4bits
 24723 ;; This function is called by:
 24724 ;;		_main
 24725 ;; This function uses a non-reentrant model
 24726 ;;
 24727                           
 24728                           
 24729                           ;psect for function _OLED_init
 24730  2BA5                     _OLED_init:	
 24731                           
 24732                           ;oled.c: 84:  LATBbits.LATB4 = 0;
 24733                           
 24734                           ;incstack = 0
 24735                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 24736  2BA5  0140               	movlb	0	; select bank0
 24737  2BA6  1219               	bcf	25,4	;volatile
 24738                           
 24739                           ;oled.c: 85:  LATBbits.LATB2 = 0;
 24740  2BA7  1119               	bcf	25,2	;volatile
 24741                           
 24742                           ;oled.c: 86:  LATBbits.LATB3 = 0;
 24743  2BA8  1199               	bcf	25,3	;volatile
 24744                           
 24745                           ;oled.c: 88:  _delay((unsigned long)((50)*(4000000UL/4000.0)));
 24746  2BA9  3041               	movlw	65
 24747  2BAA  0140               	movlb	0	; select bank0
 24748  2BAB  00A7               	movwf	??_OLED_init
 24749  2BAC  30EE               	movlw	238
 24750  2BAD                     u10917:	
 24751  2BAD  0B89               	decfsz	9,f
 24752  2BAE  2BAD               	goto	u10917
 24753  2BAF  0BA7               	decfsz	??_OLED_init,f
 24754  2BB0  2BAD               	goto	u10917
 24755  2BB1  0000               	nop
 24756                           
 24757                           ;oled.c: 92:  LATBbits.LATB1 = 0;
 24758  2BB2  0140               	movlb	0	; select bank0
 24759  2BB3  1099               	bcf	25,1	;volatile
 24760                           
 24761                           ;oled.c: 93:  LATBbits.LATB0 = 0;
 24762  2BB4  1019               	bcf	25,0	;volatile
 24763                           
 24764                           ;oled.c: 94:  LATCbits.LATC5 = 0;
 24765  2BB5  129A               	bcf	26,5	;volatile
 24766                           
 24767                           ;oled.c: 95:  LATCbits.LATC4 = 0;
 24768  2BB6  121A               	bcf	26,4	;volatile
 24769                           
 24770                           ;oled.c: 106:  OLED_write4bits(0x03);
 24771  2BB7  3003               	movlw	3
 24772  2BB8  31B4  2499  31AB   	fcall	_OLED_write4bits
 24773                           
 24774                           ;oled.c: 107:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24775  2BBB  3007               	movlw	7
 24776  2BBC  0140               	movlb	0	; select bank0
 24777  2BBD  00A7               	movwf	??_OLED_init
 24778  2BBE  307D               	movlw	125
 24779  2BBF                     u10927:	
 24780  2BBF  0B89               	decfsz	9,f
 24781  2BC0  2BBF               	goto	u10927
 24782  2BC1  0BA7               	decfsz	??_OLED_init,f
 24783  2BC2  2BBF               	goto	u10927
 24784                           
 24785                           ;oled.c: 108:  OLED_write4bits(0x08);
 24786  2BC3  3008               	movlw	8
 24787  2BC4  31B4  2499  31AB   	fcall	_OLED_write4bits
 24788                           
 24789                           ;oled.c: 109:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24790  2BC7  3007               	movlw	7
 24791  2BC8  0140               	movlb	0	; select bank0
 24792  2BC9  00A7               	movwf	??_OLED_init
 24793  2BCA  307D               	movlw	125
 24794  2BCB                     u10937:	
 24795  2BCB  0B89               	decfsz	9,f
 24796  2BCC  2BCB               	goto	u10937
 24797  2BCD  0BA7               	decfsz	??_OLED_init,f
 24798  2BCE  2BCB               	goto	u10937
 24799                           
 24800                           ;oled.c: 111:  OLED_write4bits(0x02);
 24801  2BCF  3002               	movlw	2
 24802  2BD0  31B4  2499  31AB   	fcall	_OLED_write4bits
 24803                           
 24804                           ;oled.c: 112:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24805  2BD3  3007               	movlw	7
 24806  2BD4  0140               	movlb	0	; select bank0
 24807  2BD5  00A7               	movwf	??_OLED_init
 24808  2BD6  307D               	movlw	125
 24809  2BD7                     u10947:	
 24810  2BD7  0B89               	decfsz	9,f
 24811  2BD8  2BD7               	goto	u10947
 24812  2BD9  0BA7               	decfsz	??_OLED_init,f
 24813  2BDA  2BD7               	goto	u10947
 24814                           
 24815                           ;oled.c: 113:  OLED_write4bits(0x02);
 24816  2BDB  3002               	movlw	2
 24817  2BDC  31B4  2499  31AB   	fcall	_OLED_write4bits
 24818                           
 24819                           ;oled.c: 114:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24820  2BDF  3007               	movlw	7
 24821  2BE0  0140               	movlb	0	; select bank0
 24822  2BE1  00A7               	movwf	??_OLED_init
 24823  2BE2  307D               	movlw	125
 24824  2BE3                     u10957:	
 24825  2BE3  0B89               	decfsz	9,f
 24826  2BE4  2BE3               	goto	u10957
 24827  2BE5  0BA7               	decfsz	??_OLED_init,f
 24828  2BE6  2BE3               	goto	u10957
 24829                           
 24830                           ;oled.c: 115:  OLED_write4bits(0x08);
 24831  2BE7  3008               	movlw	8
 24832  2BE8  31B4  2499  31AB   	fcall	_OLED_write4bits
 24833                           
 24834                           ;oled.c: 116:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24835  2BEB  3007               	movlw	7
 24836  2BEC  0140               	movlb	0	; select bank0
 24837  2BED  00A7               	movwf	??_OLED_init
 24838  2BEE  307D               	movlw	125
 24839  2BEF                     u10967:	
 24840  2BEF  0B89               	decfsz	9,f
 24841  2BF0  2BEF               	goto	u10967
 24842  2BF1  0BA7               	decfsz	??_OLED_init,f
 24843  2BF2  2BEF               	goto	u10967
 24844                           
 24845                           ;oled.c: 118:  OLED_command(0x08);
 24846  2BF3  3008               	movlw	8
 24847  2BF4  31B1  2102  31AB   	fcall	_OLED_command
 24848                           
 24849                           ;oled.c: 119:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24850  2BF7  3007               	movlw	7
 24851  2BF8  0140               	movlb	0	; select bank0
 24852  2BF9  00A7               	movwf	??_OLED_init
 24853  2BFA  307D               	movlw	125
 24854  2BFB                     u10977:	
 24855  2BFB  0B89               	decfsz	9,f
 24856  2BFC  2BFB               	goto	u10977
 24857  2BFD  0BA7               	decfsz	??_OLED_init,f
 24858  2BFE  2BFB               	goto	u10977
 24859                           
 24860                           ;oled.c: 120:  OLED_command(0x01);
 24861  2BFF  3001               	movlw	1
 24862  2C00  31B1  2102  31AB   	fcall	_OLED_command
 24863                           
 24864                           ;oled.c: 121:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24865  2C03  3007               	movlw	7
 24866  2C04  0140               	movlb	0	; select bank0
 24867  2C05  00A7               	movwf	??_OLED_init
 24868  2C06  307D               	movlw	125
 24869  2C07                     u10987:	
 24870  2C07  0B89               	decfsz	9,f
 24871  2C08  2C07               	goto	u10987
 24872  2C09  0BA7               	decfsz	??_OLED_init,f
 24873  2C0A  2C07               	goto	u10987
 24874                           
 24875                           ;oled.c: 122:  OLED_command(0x06);
 24876  2C0B  3006               	movlw	6
 24877  2C0C  31B1  2102  31AB   	fcall	_OLED_command
 24878                           
 24879                           ;oled.c: 123:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24880  2C0F  3007               	movlw	7
 24881  2C10  0140               	movlb	0	; select bank0
 24882  2C11  00A7               	movwf	??_OLED_init
 24883  2C12  307D               	movlw	125
 24884  2C13                     u10997:	
 24885  2C13  0B89               	decfsz	9,f
 24886  2C14  2C13               	goto	u10997
 24887  2C15  0BA7               	decfsz	??_OLED_init,f
 24888  2C16  2C13               	goto	u10997
 24889                           
 24890                           ;oled.c: 124:  OLED_command(0x02);
 24891  2C17  3002               	movlw	2
 24892  2C18  31B1  2102  31AB   	fcall	_OLED_command
 24893                           
 24894                           ;oled.c: 125:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24895  2C1B  3007               	movlw	7
 24896  2C1C  0140               	movlb	0	; select bank0
 24897  2C1D  00A7               	movwf	??_OLED_init
 24898  2C1E  307D               	movlw	125
 24899  2C1F                     u11007:	
 24900  2C1F  0B89               	decfsz	9,f
 24901  2C20  2C1F               	goto	u11007
 24902  2C21  0BA7               	decfsz	??_OLED_init,f
 24903  2C22  2C1F               	goto	u11007
 24904                           
 24905                           ;oled.c: 126:  OLED_command(0x0C);
 24906  2C23  300C               	movlw	12
 24907  2C24  31B1  2102  31AB   	fcall	_OLED_command
 24908                           
 24909                           ;oled.c: 127:  _delay((unsigned long)((5)*(4000000UL/4000.0)));
 24910  2C27  3007               	movlw	7
 24911  2C28  0140               	movlb	0	; select bank0
 24912  2C29  00A7               	movwf	??_OLED_init
 24913  2C2A  307D               	movlw	125
 24914  2C2B                     u11017:	
 24915  2C2B  0B89               	decfsz	9,f
 24916  2C2C  2C2B               	goto	u11017
 24917  2C2D  0BA7               	decfsz	??_OLED_init,f
 24918  2C2E  2C2B               	goto	u11017
 24919  2C2F  0008               	return
 24920  2C30                     __end_of_OLED_init:	
 24921                           
 24922                           	psect	text67
 24923  3102                     __ptext67:	
 24924 ;; *************** function _OLED_command *****************
 24925 ;; Defined at:
 24926 ;;		line 70 in file "oled.c"
 24927 ;; Parameters:    Size  Location     Type
 24928 ;;  value           1    wreg     unsigned char 
 24929 ;; Auto vars:     Size  Location     Type
 24930 ;;  value           1    6[BANK0 ] unsigned char 
 24931 ;; Return value:  Size  Location     Type
 24932 ;;                  1    wreg      void 
 24933 ;; Registers used:
 24934 ;;		wreg, status,2, status,0, pclath, cstack
 24935 ;; Tracked objects:
 24936 ;;		On entry : 0/0
 24937 ;;		On exit  : 0/0
 24938 ;;		Unchanged: 0/0
 24939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 24940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24941 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24943 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 24944 ;;Total ram usage:        1 bytes
 24945 ;; Hardware stack levels used:    1
 24946 ;; Hardware stack levels required when called:    5
 24947 ;; This function calls:
 24948 ;;		_OLED_send
 24949 ;;		_OLED_waitForReady
 24950 ;; This function is called by:
 24951 ;;		_main
 24952 ;;		_OLED_off
 24953 ;;		_OLED_init
 24954 ;;		_OLED_print_xy
 24955 ;;		_OLED_loadSpecialChars
 24956 ;;		_viewErrorMessage
 24957 ;;		_menu
 24958 ;;		_paging
 24959 ;;		_returnToPage
 24960 ;;		_systemCheck
 24961 ;;		_OLED_setCursor
 24962 ;; This function uses a non-reentrant model
 24963 ;;
 24964                           
 24965                           
 24966                           ;psect for function _OLED_command
 24967  3102                     _OLED_command:	
 24968                           
 24969                           ;incstack = 0
 24970                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 24971                           ;OLED_command@value stored from wreg
 24972  3102  0140               	movlb	0	; select bank0
 24973  3103  00A6               	movwf	OLED_command@value
 24974                           
 24975                           ;oled.c: 70: void OLED_command(uint8_t value);oled.c: 71: {;oled.c: 72:  OLED_send(value
      +                          , 0);
 24976  3104  01A3               	clrf	OLED_send@mode
 24977  3105  0826               	movf	OLED_command@value,w
 24978  3106  31A0  2001  31B1   	fcall	_OLED_send
 24979                           
 24980                           ;oled.c: 73:  OLED_waitForReady();
 24981  3109  31B2  221A         	fcall	_OLED_waitForReady
 24982  310B  0008               	return
 24983  310C                     __end_of_OLED_command:	
 24984                           
 24985                           	psect	text68
 24986  321A                     __ptext68:	
 24987 ;; *************** function _OLED_waitForReady *****************
 24988 ;; Defined at:
 24989 ;;		line 42 in file "oled.c"
 24990 ;; Parameters:    Size  Location     Type
 24991 ;;		None
 24992 ;; Auto vars:     Size  Location     Type
 24993 ;;  busy            1    0[BANK0 ] unsigned char 
 24994 ;; Return value:  Size  Location     Type
 24995 ;;                  1    wreg      void 
 24996 ;; Registers used:
 24997 ;;		wreg, status,2, status,0
 24998 ;; Tracked objects:
 24999 ;;		On entry : 0/0
 25000 ;;		On exit  : 0/0
 25001 ;;		Unchanged: 0/0
 25002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25003 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25004 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25005 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25006 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25007 ;;Total ram usage:        1 bytes
 25008 ;; Hardware stack levels used:    1
 25009 ;; Hardware stack levels required when called:    3
 25010 ;; This function calls:
 25011 ;;		Nothing
 25012 ;; This function is called by:
 25013 ;;		_OLED_command
 25014 ;;		_OLED_write
 25015 ;; This function uses a non-reentrant model
 25016 ;;
 25017                           
 25018                           
 25019                           ;psect for function _OLED_waitForReady
 25020  321A                     _OLED_waitForReady:	
 25021                           
 25022                           ;oled.c: 46:  TRISCbits.TRISC4 = 1;
 25023                           
 25024                           ;incstack = 0
 25025                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0]
 25026  321A  0140               	movlb	0	; select bank0
 25027  321B  1614               	bsf	20,4	;volatile
 25028                           
 25029                           ;oled.c: 47:  LATBbits.LATB4 = 0;
 25030  321C  1219               	bcf	25,4	;volatile
 25031                           
 25032                           ;oled.c: 48:  LATBbits.LATB3 = 1;
 25033  321D  1599               	bsf	25,3	;volatile
 25034  321E                     l185:	
 25035                           ;oled.c: 50:  do {
 25036                           
 25037                           
 25038                           ;oled.c: 51:   LATBbits.LATB2 = 0;
 25039  321E  1119               	bcf	25,2	;volatile
 25040                           
 25041                           ;oled.c: 52:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 25042  321F  3003               	movlw	3
 25043  3220                     u11027:	
 25044  3220  0B89               	decfsz	9,f
 25045  3221  2A20               	goto	u11027
 25046  3222  0000               	nop
 25047                           
 25048                           ;oled.c: 53:   LATBbits.LATB2 = 1;
 25049  3223  0140               	movlb	0	; select bank0
 25050  3224  1519               	bsf	25,2	;volatile
 25051                           
 25052                           ;oled.c: 55:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 25053  3225  3003               	movlw	3
 25054  3226                     u11037:	
 25055  3226  0B89               	decfsz	9,f
 25056  3227  2A26               	goto	u11037
 25057  3228  0000               	nop
 25058                           
 25059                           ;oled.c: 56:   busy = PORTCbits.RC4;
 25060  3229  3000               	movlw	0
 25061  322A  0140               	movlb	0	; select bank0
 25062  322B  1A0E               	btfsc	14,4	;volatile
 25063  322C  3001               	movlw	1
 25064  322D  00A0               	movwf	OLED_waitForReady@busy
 25065                           
 25066                           ;oled.c: 58:   LATBbits.LATB2 = 0;
 25067  322E  1119               	bcf	25,2	;volatile
 25068                           
 25069                           ;oled.c: 59:   _delay((unsigned long)((10)*(4000000UL/4000000.0)));
 25070  322F  3003               	movlw	3
 25071  3230                     u11047:	
 25072  3230  0B89               	decfsz	9,f
 25073  3231  2A30               	goto	u11047
 25074  3232  0000               	nop
 25075                           
 25076                           ;oled.c: 61:   LATBbits.LATB2 = 1;
 25077  3233  0140               	movlb	0	; select bank0
 25078  3234  1519               	bsf	25,2	;volatile
 25079                           
 25080                           ;oled.c: 62:   _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25081  3235  3010               	movlw	16
 25082  3236                     u11057:	
 25083  3236  0B89               	decfsz	9,f
 25084  3237  2A36               	goto	u11057
 25085  3238  3200               	nop2
 25086                           
 25087                           ;oled.c: 63:   LATBbits.LATB2 = 0;
 25088  3239  0140               	movlb	0	; select bank0
 25089  323A  1119               	bcf	25,2	;volatile
 25090                           
 25091                           ;oled.c: 64:  } while (busy);
 25092  323B  0820               	movf	OLED_waitForReady@busy,w
 25093  323C  1D03               	btfss	3,2
 25094  323D  2A1E               	goto	l185
 25095                           
 25096                           ;oled.c: 66:  TRISCbits.TRISC4 = 0;
 25097  323E  1214               	bcf	20,4	;volatile
 25098                           
 25099                           ;oled.c: 67:  LATBbits.LATB3 = 0;
 25100  323F  1199               	bcf	25,3	;volatile
 25101  3240  0008               	return
 25102  3241                     __end_of_OLED_waitForReady:	
 25103                           
 25104                           	psect	text69
 25105  2001                     __ptext69:	
 25106 ;; *************** function _OLED_send *****************
 25107 ;; Defined at:
 25108 ;;		line 31 in file "oled.c"
 25109 ;; Parameters:    Size  Location     Type
 25110 ;;  value           1    wreg     unsigned char 
 25111 ;;  mode            1    3[BANK0 ] unsigned char 
 25112 ;; Auto vars:     Size  Location     Type
 25113 ;;  value           1    5[BANK0 ] unsigned char 
 25114 ;; Return value:  Size  Location     Type
 25115 ;;                  1    wreg      void 
 25116 ;; Registers used:
 25117 ;;		wreg, status,2, status,0, pclath, cstack
 25118 ;; Tracked objects:
 25119 ;;		On entry : 0/0
 25120 ;;		On exit  : 0/0
 25121 ;;		Unchanged: 0/0
 25122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25123 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25124 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25125 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25126 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25127 ;;Total ram usage:        3 bytes
 25128 ;; Hardware stack levels used:    1
 25129 ;; Hardware stack levels required when called:    4
 25130 ;; This function calls:
 25131 ;;		_OLED_write4bits
 25132 ;; This function is called by:
 25133 ;;		_OLED_command
 25134 ;;		_OLED_write
 25135 ;; This function uses a non-reentrant model
 25136 ;;
 25137                           
 25138                           
 25139                           ;psect for function _OLED_send
 25140  2001                     _OLED_send:	
 25141                           
 25142                           ;incstack = 0
 25143                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 25144                           ;OLED_send@value stored from wreg
 25145  2001  0140               	movlb	0	; select bank0
 25146  2002  00A5               	movwf	OLED_send@value
 25147                           
 25148                           ;oled.c: 31: void OLED_send(uint8_t value, uint8_t mode);oled.c: 32: {;oled.c: 33:  LATB
      +                          bits.LATB4 = mode;
 25149  2003  0C23               	rrf	OLED_send@mode,w
 25150  2004  1C03               	skipc
 25151  2005  1219               	bcf	25,4	;volatile
 25152  2006  1803               	skipnc
 25153  2007  1619               	bsf	25,4	;volatile
 25154                           
 25155                           ;oled.c: 34:  LATBbits.LATB3 = 0;
 25156  2008  1199               	bcf	25,3	;volatile
 25157                           
 25158                           ;oled.c: 36:  OLED_write4bits(value >> 4);
 25159  2009  0825               	movf	OLED_send@value,w
 25160  200A  00A4               	movwf	??_OLED_send
 25161  200B  3004               	movlw	4
 25162  200C                     u7495:	
 25163  200C  36A4               	lsrf	??_OLED_send,f
 25164  200D  0B89               	decfsz	9,f
 25165  200E  280C               	goto	u7495
 25166  200F  0824               	movf	??_OLED_send,w
 25167  2010  31B4  2499  31A0   	fcall	_OLED_write4bits
 25168                           
 25169                           ;oled.c: 37:  OLED_write4bits(value);
 25170  2013  0140               	movlb	0	; select bank0
 25171  2014  0825               	movf	OLED_send@value,w
 25172  2015  31B4  2499         	fcall	_OLED_write4bits
 25173  2017  0008               	return
 25174  2018                     __end_of_OLED_send:	
 25175                           
 25176                           	psect	text70
 25177  3499                     __ptext70:	
 25178 ;; *************** function _OLED_write4bits *****************
 25179 ;; Defined at:
 25180 ;;		line 18 in file "oled.c"
 25181 ;; Parameters:    Size  Location     Type
 25182 ;;  value           1    wreg     unsigned char 
 25183 ;; Auto vars:     Size  Location     Type
 25184 ;;  value           1    2[BANK0 ] unsigned char 
 25185 ;; Return value:  Size  Location     Type
 25186 ;;                  1    wreg      void 
 25187 ;; Registers used:
 25188 ;;		wreg, status,2, status,0
 25189 ;; Tracked objects:
 25190 ;;		On entry : 0/0
 25191 ;;		On exit  : 0/0
 25192 ;;		Unchanged: 0/0
 25193 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25194 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25195 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25196 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25197 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25198 ;;Total ram usage:        3 bytes
 25199 ;; Hardware stack levels used:    1
 25200 ;; Hardware stack levels required when called:    3
 25201 ;; This function calls:
 25202 ;;		Nothing
 25203 ;; This function is called by:
 25204 ;;		_OLED_send
 25205 ;;		_OLED_init
 25206 ;; This function uses a non-reentrant model
 25207 ;;
 25208                           
 25209                           
 25210                           ;psect for function _OLED_write4bits
 25211  3499                     _OLED_write4bits:	
 25212                           
 25213                           ;incstack = 0
 25214                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0]
 25215                           ;OLED_write4bits@value stored from wreg
 25216  3499  0140               	movlb	0	; select bank0
 25217  349A  00A2               	movwf	OLED_write4bits@value
 25218                           
 25219                           ;oled.c: 18: void OLED_write4bits(uint8_t value);oled.c: 19: {;oled.c: 20:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 25220  349B  0822               	movf	OLED_write4bits@value,w
 25221  349C  3901               	andlw	1
 25222  349D  00A0               	movwf	??_OLED_write4bits
 25223  349E  0DA0               	rlf	??_OLED_write4bits,f
 25224  349F  0819               	movf	25,w	;volatile
 25225  34A0  0620               	xorwf	??_OLED_write4bits,w
 25226  34A1  39FD               	andlw	-3
 25227  34A2  0620               	xorwf	??_OLED_write4bits,w
 25228  34A3  0099               	movwf	25	;volatile
 25229                           
 25230                           ;oled.c: 21:  LATBbits.LATB0 = (value >> 1) & 0x01;
 25231  34A4  0822               	movf	OLED_write4bits@value,w
 25232  34A5  00A0               	movwf	??_OLED_write4bits
 25233  34A6  3001               	movlw	1
 25234  34A7                     u7465:	
 25235  34A7  36A0               	lsrf	??_OLED_write4bits,f
 25236  34A8  0B89               	decfsz	9,f
 25237  34A9  2CA7               	goto	u7465
 25238  34AA  3001               	movlw	1
 25239  34AB  0520               	andwf	??_OLED_write4bits,w
 25240  34AC  00A1               	movwf	??_OLED_write4bits+1
 25241  34AD  0819               	movf	25,w	;volatile
 25242  34AE  0621               	xorwf	??_OLED_write4bits+1,w
 25243  34AF  39FE               	andlw	-2
 25244  34B0  0621               	xorwf	??_OLED_write4bits+1,w
 25245  34B1  0099               	movwf	25	;volatile
 25246                           
 25247                           ;oled.c: 22:  LATCbits.LATC5 = (value >> 2) & 0x01;
 25248  34B2  0822               	movf	OLED_write4bits@value,w
 25249  34B3  00A0               	movwf	??_OLED_write4bits
 25250  34B4  3002               	movlw	2
 25251  34B5                     u7475:	
 25252  34B5  36A0               	lsrf	??_OLED_write4bits,f
 25253  34B6  0B89               	decfsz	9,f
 25254  34B7  2CB5               	goto	u7475
 25255  34B8  0820               	movf	??_OLED_write4bits,w
 25256  34B9  3901               	andlw	1
 25257  34BA  00A1               	movwf	??_OLED_write4bits+1
 25258  34BB  0EA1               	swapf	??_OLED_write4bits+1,f
 25259  34BC  0DA1               	rlf	??_OLED_write4bits+1,f
 25260  34BD  081A               	movf	26,w	;volatile
 25261  34BE  0621               	xorwf	??_OLED_write4bits+1,w
 25262  34BF  39DF               	andlw	-33
 25263  34C0  0621               	xorwf	??_OLED_write4bits+1,w
 25264  34C1  009A               	movwf	26	;volatile
 25265                           
 25266                           ;oled.c: 23:  LATCbits.LATC4 = (value >> 3) & 0x01;
 25267  34C2  0822               	movf	OLED_write4bits@value,w
 25268  34C3  00A0               	movwf	??_OLED_write4bits
 25269  34C4  3003               	movlw	3
 25270  34C5                     u7485:	
 25271  34C5  36A0               	lsrf	??_OLED_write4bits,f
 25272  34C6  0B89               	decfsz	9,f
 25273  34C7  2CC5               	goto	u7485
 25274  34C8  0820               	movf	??_OLED_write4bits,w
 25275  34C9  3901               	andlw	1
 25276  34CA  00A1               	movwf	??_OLED_write4bits+1
 25277  34CB  0EA1               	swapf	??_OLED_write4bits+1,f
 25278  34CC  081A               	movf	26,w	;volatile
 25279  34CD  0621               	xorwf	??_OLED_write4bits+1,w
 25280  34CE  39EF               	andlw	-17
 25281  34CF  0621               	xorwf	??_OLED_write4bits+1,w
 25282  34D0  009A               	movwf	26	;volatile
 25283                           
 25284                           ;oled.c: 25:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25285  34D1  3010               	movlw	16
 25286  34D2                     u11067:	
 25287  34D2  0B89               	decfsz	9,f
 25288  34D3  2CD2               	goto	u11067
 25289  34D4  3200               	nop2
 25290                           
 25291                           ;oled.c: 26:  LATBbits.LATB2 = 1;
 25292  34D5  0140               	movlb	0	; select bank0
 25293  34D6  1519               	bsf	25,2	;volatile
 25294                           
 25295                           ;oled.c: 27:  _delay((unsigned long)((50)*(4000000UL/4000000.0)));
 25296  34D7  3010               	movlw	16
 25297  34D8                     u11077:	
 25298  34D8  0B89               	decfsz	9,f
 25299  34D9  2CD8               	goto	u11077
 25300  34DA  3200               	nop2
 25301                           
 25302                           ;oled.c: 28:  LATBbits.LATB2 = 0;
 25303  34DB  0140               	movlb	0	; select bank0
 25304  34DC  1119               	bcf	25,2	;volatile
 25305  34DD  0008               	return
 25306  34DE                     __end_of_OLED_write4bits:	
 25307                           
 25308                           	psect	intentry
 25309  0004                     __pintentry:	
 25310 ;; *************** function _ISR *****************
 25311 ;; Defined at:
 25312 ;;		line 22 in file "interrupt.c"
 25313 ;; Parameters:    Size  Location     Type
 25314 ;;		None
 25315 ;; Auto vars:     Size  Location     Type
 25316 ;;		None
 25317 ;; Return value:  Size  Location     Type
 25318 ;;                  1    wreg      void 
 25319 ;; Registers used:
 25320 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25321 ;; Tracked objects:
 25322 ;;		On entry : 0/0
 25323 ;;		On exit  : 0/0
 25324 ;;		Unchanged: 0/0
 25325 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25328 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25329 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25330 ;;Total ram usage:        4 bytes
 25331 ;; Hardware stack levels used:    1
 25332 ;; Hardware stack levels required when called:    2
 25333 ;; This function calls:
 25334 ;;		_pushButtonISR
 25335 ;;		_rotISR
 25336 ;;		_uartReceiveISR
 25337 ;; This function is called by:
 25338 ;;		Interrupt level 1
 25339 ;; This function uses a non-reentrant model
 25340 ;;
 25341                           
 25342  0004                     _ISR:	
 25343                           
 25344                           ;incstack = 0
 25345  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 25346                           
 25347                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25348  0005  3180               	pagesel	$
 25349                           
 25350                           ;interrupt.c: 24:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 25351  0006  014E               	movlb	14	; select bank14
 25352  0007  1A96               	btfsc	22,5	;volatile
 25353  0008  1E8C               	btfss	12,5	;volatile
 25354  0009  281C               	goto	i1l271
 25355                           
 25356                           ;interrupt.c: 27:   tick10ms++;
 25357  000A  3001               	movlw	1
 25358  000B  00F8               	movwf	??_ISR
 25359  000C  0878               	movf	??_ISR,w
 25360  000D  0142               	movlb	2	; select bank2
 25361  000E  07EE               	addwf	_tick10ms^(0+256),f	;volatile
 25362                           
 25363                           ;interrupt.c: 28:   if (pbState == PB_WAIT)
 25364  000F  3004               	movlw	4
 25365  0010  067D               	xorwf	_pbState,w	;volatile
 25366  0011  1D03               	btfss	3,2
 25367  0012  2816               	goto	i1l6864
 25368                           
 25369                           ;interrupt.c: 29:    pushButtonISR();
 25370  0013  31B6  268D  3180   	fcall	_pushButtonISR
 25371  0016                     i1l6864:	
 25372                           
 25373                           ;interrupt.c: 30:   TMR0 = 178;
 25374  0016  30B2               	movlw	178
 25375  0017  014B               	movlb	11	; select bank11
 25376  0018  009C               	movwf	28	;volatile
 25377                           
 25378                           ;interrupt.c: 31:   PIR0bits.TMR0IF = 0;
 25379  0019  014E               	movlb	14	; select bank14
 25380  001A  128C               	bcf	12,5	;volatile
 25381                           
 25382                           ;interrupt.c: 32:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 25383  001B  286C               	goto	i1l284
 25384  001C                     i1l271:	
 25385  001C  1A16               	btfsc	22,4	;volatile
 25386  001D  1E0C               	btfss	12,4	;volatile
 25387  001E  2838               	goto	i1l274
 25388                           
 25389                           ;interrupt.c: 34:   if (IOCAFbits.IOCAF7 == 1) {
 25390  001F  017E               	movlb	62	; select bank62
 25391  0020  1FBF               	btfss	63,7	;volatile
 25392  0021  2827               	goto	i1l6876
 25393                           
 25394                           ;interrupt.c: 35:    pushButtonISR();
 25395  0022  31B6  268D  3180   	fcall	_pushButtonISR
 25396                           
 25397                           ;interrupt.c: 36:    IOCAFbits.IOCAF7 = 0;
 25398  0025  017E               	movlb	62	; select bank62
 25399  0026  13BF               	bcf	63,7	;volatile
 25400  0027                     i1l6876:	
 25401                           
 25402                           ;interrupt.c: 38:   if (IOCAFbits.IOCAF4 == 1) {
 25403  0027  1E3F               	btfss	63,4	;volatile
 25404  0028  282E               	goto	i1l6882
 25405                           
 25406                           ;interrupt.c: 39:    rotISR();
 25407  0029  31B6  2643  3180   	fcall	_rotISR
 25408                           
 25409                           ;interrupt.c: 40:    IOCAFbits.IOCAF4 = 0;
 25410  002C  017E               	movlb	62	; select bank62
 25411  002D  123F               	bcf	63,4	;volatile
 25412  002E                     i1l6882:	
 25413                           
 25414                           ;interrupt.c: 42:   if (IOCAFbits.IOCAF5 == 1) {
 25415  002E  1EBF               	btfss	63,5	;volatile
 25416  002F  2835               	goto	i1l6888
 25417                           
 25418                           ;interrupt.c: 43:    rotISR();
 25419  0030  31B6  2643  3180   	fcall	_rotISR
 25420                           
 25421                           ;interrupt.c: 44:    IOCAFbits.IOCAF5 = 0;
 25422  0033  017E               	movlb	62	; select bank62
 25423  0034  12BF               	bcf	63,5	;volatile
 25424  0035                     i1l6888:	
 25425                           
 25426                           ;interrupt.c: 46:   PIR0bits.IOCIF = 0;
 25427  0035  014E               	movlb	14	; select bank14
 25428  0036  120C               	bcf	12,4	;volatile
 25429                           
 25430                           ;interrupt.c: 47:  } else if (INTCONbits.PEIE == 1) {
 25431  0037  286C               	goto	i1l284
 25432  0038                     i1l274:	
 25433  0038  1F0B               	btfss	11,6	;volatile
 25434  0039  286C               	goto	i1l284
 25435                           
 25436                           ;interrupt.c: 48:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 25437  003A  181A               	btfsc	26,0	;volatile
 25438  003B  1C10               	btfss	16,0	;volatile
 25439  003C  2865               	goto	i1l280
 25440                           
 25441                           ;interrupt.c: 51:    if (tick100ms++ >= 1000000000UL)
 25442  003D  0144               	movlb	4	; select bank4
 25443  003E  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 25444  003F  00FB               	movwf	??_ISR+3
 25445  0040  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 25446  0041  00FA               	movwf	??_ISR+2
 25447  0042  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 25448  0043  00F9               	movwf	??_ISR+1
 25449  0044  0832               	movf	_tick100ms^(0+512),w	;volatile
 25450  0045  00F8               	movwf	??_ISR
 25451  0046  3001               	movlw	1
 25452  0047  07B2               	addwf	_tick100ms^(0+512),f	;volatile
 25453  0048  3000               	movlw	0
 25454  0049  3DB3               	addwfc	(_tick100ms+1)^(0+512),f	;volatile
 25455  004A  3DB4               	addwfc	(_tick100ms+2)^(0+512),f	;volatile
 25456  004B  3DB5               	addwfc	(_tick100ms+3)^(0+512),f	;volatile
 25457  004C  3000               	movlw	0
 25458  004D  0278               	subwf	??_ISR,w
 25459  004E  30CA               	movlw	202
 25460  004F  3B79               	subwfb	??_ISR+1,w
 25461  0050  309A               	movlw	154
 25462  0051  3B7A               	subwfb	??_ISR+2,w
 25463  0052  303B               	movlw	59
 25464  0053  3B7B               	subwfb	??_ISR+3,w
 25465  0054  1C03               	btfss	3,0
 25466  0055  285E               	goto	i1l6898
 25467                           
 25468                           ;interrupt.c: 52:     tick100ms = 0;
 25469  0056  3000               	movlw	0
 25470  0057  00B5               	movwf	(_tick100ms+3)^(0+512)	;volatile
 25471  0058  3000               	movlw	0
 25472  0059  00B4               	movwf	(_tick100ms+2)^(0+512)	;volatile
 25473  005A  3000               	movlw	0
 25474  005B  00B3               	movwf	(_tick100ms+1)^(0+512)	;volatile
 25475  005C  3000               	movlw	0
 25476  005D  00B2               	movwf	_tick100ms^(0+512)	;volatile
 25477  005E                     i1l6898:	
 25478                           
 25479                           ;interrupt.c: 53:    TMR1 = 53035;
 25480  005E  30CF               	movlw	207
 25481  005F  008D               	movwf	13	;volatile
 25482  0060  302B               	movlw	43
 25483  0061  008C               	movwf	12	;volatile
 25484                           
 25485                           ;interrupt.c: 54:    PIR4bits.TMR1IF = 0;
 25486  0062  014E               	movlb	14	; select bank14
 25487  0063  1010               	bcf	16,0	;volatile
 25488                           
 25489                           ;interrupt.c: 55:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 25490  0064  286C               	goto	i1l284
 25491  0065                     i1l280:	
 25492  0065  1A99               	btfsc	25,5	;volatile
 25493  0066  1E8F               	btfss	15,5	;volatile
 25494  0067  286C               	goto	i1l284
 25495                           
 25496                           ;interrupt.c: 56:    uartReceiveISR();
 25497  0068  31B5  2524         	fcall	_uartReceiveISR
 25498                           
 25499                           ;interrupt.c: 57:    PIR3bits.RC1IF = 0;
 25500  006A  014E               	movlb	14	; select bank14
 25501  006B  128F               	bcf	15,5	;volatile
 25502  006C                     i1l284:	
 25503  006C  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 25504  006D  0009               	retfie
 25505  006E                     __end_of_ISR:	
 25506                           
 25507                           	psect	text72
 25508  3524                     __ptext72:	
 25509 ;; *************** function _uartReceiveISR *****************
 25510 ;; Defined at:
 25511 ;;		line 21 in file "uart.c"
 25512 ;; Parameters:    Size  Location     Type
 25513 ;;		None
 25514 ;; Auto vars:     Size  Location     Type
 25515 ;;		None
 25516 ;; Return value:  Size  Location     Type
 25517 ;;                  1    wreg      void 
 25518 ;; Registers used:
 25519 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 25520 ;; Tracked objects:
 25521 ;;		On entry : 0/0
 25522 ;;		On exit  : 0/0
 25523 ;;		Unchanged: 0/0
 25524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25525 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25527 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25528 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25529 ;;Total ram usage:        1 bytes
 25530 ;; Hardware stack levels used:    1
 25531 ;; Hardware stack levels required when called:    1
 25532 ;; This function calls:
 25533 ;;		_strncpy
 25534 ;; This function is called by:
 25535 ;;		_ISR
 25536 ;; This function uses a non-reentrant model
 25537 ;;
 25538                           
 25539                           
 25540                           ;psect for function _uartReceiveISR
 25541  3524                     _uartReceiveISR:	
 25542                           
 25543                           ;uart.c: 23:  static char buffer[20];;uart.c: 25:  static uint8_t checksum = 0;;uart.c: 
      +                          27:  if (RC1STAbits.OERR)
 25544                           
 25545                           ;incstack = 0
 25546                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 25547  3524  0142               	movlb	2	; select bank2
 25548  3525  1C9D               	btfss	29,1	;volatile
 25549  3526  2D2E               	goto	i1l6764
 25550                           
 25551                           ;uart.c: 28:  {;uart.c: 29:   RC1STAbits.CREN = 0;
 25552  3527  121D               	bcf	29,4	;volatile
 25553                           
 25554                           ;uart.c: 30:   RC1STAbits.CREN = 1;
 25555  3528  161D               	bsf	29,4	;volatile
 25556                           
 25557                           ;uart.c: 31:   rxOErrCount++;
 25558  3529  3001               	movlw	1
 25559  352A  00F6               	movwf	??_uartReceiveISR
 25560  352B  0876               	movf	??_uartReceiveISR,w
 25561  352C  0143               	movlb	3	; select bank3
 25562  352D  07E4               	addwf	_rxOErrCount^(0+384),f	;volatile
 25563  352E                     i1l6764:	
 25564                           
 25565                           ;uart.c: 33:  if (RC1STAbits.FERR)
 25566  352E  0142               	movlb	2	; select bank2
 25567  352F  1D1D               	btfss	29,2	;volatile
 25568  3530  2D38               	goto	i1l6770
 25569                           
 25570                           ;uart.c: 34:  {;uart.c: 35:   RC1STAbits.SPEN = 0;
 25571  3531  139D               	bcf	29,7	;volatile
 25572                           
 25573                           ;uart.c: 36:   RC1STAbits.SPEN = 1;
 25574  3532  179D               	bsf	29,7	;volatile
 25575                           
 25576                           ;uart.c: 37:   rxFErrCount++;
 25577  3533  3001               	movlw	1
 25578  3534  00F6               	movwf	??_uartReceiveISR
 25579  3535  0876               	movf	??_uartReceiveISR,w
 25580  3536  0143               	movlb	3	; select bank3
 25581  3537  07E5               	addwf	_rxFErrCount^(0+384),f	;volatile
 25582  3538                     i1l6770:	
 25583                           
 25584                           ;uart.c: 41:  if (rxCount < sizeof(dataPacket)) {
 25585  3538  300F               	movlw	15
 25586  3539  0142               	movlb	2	; select bank2
 25587  353A  026B               	subwf	_rxCount^(0+256),w	;volatile
 25588  353B  1803               	skipnc
 25589  353C  2D54               	goto	i1l6776
 25590                           
 25591                           ;uart.c: 42:   buffer[rxCount] = RC1REG;
 25592  353D  0819               	movf	25,w	;volatile
 25593  353E  00F6               	movwf	??_uartReceiveISR
 25594  353F  086B               	movf	_rxCount^(0+256),w
 25595  3540  3EC4               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 25596  3541  0086               	movwf	6
 25597  3542  3002               	movlw	2	; select bank5/6
 25598  3543  0087               	movwf	7
 25599  3544  0876               	movf	??_uartReceiveISR,w
 25600  3545  0081               	movwf	1
 25601                           
 25602                           ;uart.c: 43:   checksum ^= buffer[rxCount];
 25603  3546  086B               	movf	_rxCount^(0+256),w
 25604  3547  3EC4               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 25605  3548  0086               	movwf	6
 25606  3549  3002               	movlw	2	; select bank5/6
 25607  354A  0087               	movwf	7
 25608  354B  0801               	movf	1,w
 25609  354C  00F6               	movwf	??_uartReceiveISR
 25610  354D  0876               	movf	??_uartReceiveISR,w
 25611  354E  06EA               	xorwf	uartReceiveISR@checksum^(0+256),f
 25612                           
 25613                           ;uart.c: 44:   rxCount++;
 25614  354F  3001               	movlw	1
 25615  3550  00F6               	movwf	??_uartReceiveISR
 25616  3551  0876               	movf	??_uartReceiveISR,w
 25617  3552  07EB               	addwf	_rxCount^(0+256),f	;volatile
 25618                           
 25619                           ;uart.c: 45:  } else {
 25620  3553  0008               	return
 25621  3554                     i1l6776:	
 25622                           
 25623                           ;uart.c: 47:   if (RC1REG == checksum) {
 25624  3554  0819               	movf	25,w	;volatile
 25625  3555  066A               	xorwf	uartReceiveISR@checksum^(0+256),w
 25626  3556  1D03               	skipz
 25627  3557  2D67               	goto	i1l6782
 25628                           
 25629                           ;uart.c: 49:    uartDataReadyFlag = 1;
 25630  3558  3001               	movlw	1
 25631  3559  00F6               	movwf	??_uartReceiveISR
 25632  355A  0876               	movf	??_uartReceiveISR,w
 25633  355B  00ED               	movwf	_uartDataReadyFlag^(0+256)	;volatile
 25634                           
 25635                           ;uart.c: 50:    strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 25636  355C  30C4               	movlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 25637  355D  00F6               	movwf	??_uartReceiveISR
 25638  355E  0876               	movf	??_uartReceiveISR,w
 25639  355F  00F0               	movwf	strncpy@s
 25640  3560  300F               	movlw	15
 25641  3561  00F1               	movwf	strncpy@n
 25642  3562  3000               	movlw	0
 25643  3563  00F2               	movwf	strncpy@n+1
 25644  3564  3038               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 25645  3565  31B2  22F3         	fcall	_strncpy
 25646  3567                     i1l6782:	
 25647                           
 25648                           ;uart.c: 52:   checksum = 0;
 25649  3567  0142               	movlb	2	; select bank2
 25650  3568  01EA               	clrf	uartReceiveISR@checksum^(0+256)
 25651                           
 25652                           ;uart.c: 53:   rxCount = 0;
 25653  3569  01EB               	clrf	_rxCount^(0+256)	;volatile
 25654  356A  0008               	return
 25655  356B                     __end_of_uartReceiveISR:	
 25656                           
 25657                           	psect	text73
 25658  32F3                     __ptext73:	
 25659 ;; *************** function _strncpy *****************
 25660 ;; Defined at:
 25661 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncpy.c"
 25662 ;; Parameters:    Size  Location     Type
 25663 ;;  d               1    wreg     PTR unsigned char 
 25664 ;;		 -> dataPacket(15), 
 25665 ;;  s               1    0[COMMON] PTR const unsigned char 
 25666 ;;		 -> uartReceiveISR@buffer(20), 
 25667 ;;  n               2    1[COMMON] unsigned int 
 25668 ;; Auto vars:     Size  Location     Type
 25669 ;;  d               1    4[COMMON] PTR unsigned char 
 25670 ;;		 -> dataPacket(15), 
 25671 ;;  cp              1    5[COMMON] PTR unsigned char 
 25672 ;;		 -> dataPacket(15), 
 25673 ;; Return value:  Size  Location     Type
 25674 ;;                  1    wreg      PTR unsigned char 
 25675 ;; Registers used:
 25676 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 25677 ;; Tracked objects:
 25678 ;;		On entry : 0/0
 25679 ;;		On exit  : 0/0
 25680 ;;		Unchanged: 0/0
 25681 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25682 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25683 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25684 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25685 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25686 ;;Total ram usage:        6 bytes
 25687 ;; Hardware stack levels used:    1
 25688 ;; This function calls:
 25689 ;;		Nothing
 25690 ;; This function is called by:
 25691 ;;		_uartReceiveISR
 25692 ;; This function uses a non-reentrant model
 25693 ;;
 25694                           
 25695                           
 25696                           ;psect for function _strncpy
 25697  32F3                     _strncpy:	
 25698                           
 25699                           ;incstack = 0
 25700                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 25701                           ;strncpy@d stored from wreg
 25702  32F3  00F4               	movwf	strncpy@d
 25703  32F4  0874               	movf	strncpy@d,w
 25704  32F5  00F3               	movwf	??_strncpy
 25705  32F6  0873               	movf	??_strncpy,w
 25706  32F7  00F5               	movwf	strncpy@cp
 25707  32F8                     i1l5448:	
 25708  32F8  0871               	movf	strncpy@n,w
 25709  32F9  0472               	iorwf	strncpy@n+1,w
 25710  32FA  1903               	btfsc	3,2
 25711  32FB  2B19               	goto	i1l5454
 25712  32FC  3001               	movlw	1
 25713  32FD  02F1               	subwf	strncpy@n,f
 25714  32FE  3000               	movlw	0
 25715  32FF  3BF2               	subwfb	strncpy@n+1,f
 25716  3300  0875               	movf	strncpy@cp,w
 25717  3301  0086               	movwf	6
 25718  3302  3002               	movlw	2	; select bank4/5
 25719  3303  0087               	movwf	7
 25720  3304  0AF5               	incf	strncpy@cp,f
 25721  3305  0870               	movf	strncpy@s,w
 25722  3306  0084               	movwf	4
 25723  3307  3002               	movlw	2	; select bank4/5
 25724  3308  0085               	movwf	5
 25725  3309  0AF0               	incf	strncpy@s,f
 25726  330A  0800               	movf	0,w
 25727  330B  3FC0               	movwi [0]fsr1
 25728  330C  0889               	movf	9,f
 25729  330D  1903               	btfsc	3,2
 25730  330E  2B19               	goto	i1l5454
 25731  330F  2AF8               	goto	i1l5448
 25732  3310                     i1l5450:	
 25733  3310  0875               	movf	strncpy@cp,w
 25734  3311  0086               	movwf	6
 25735  3312  3002               	movlw	2	; select bank4/5
 25736  3313  0087               	movwf	7
 25737  3314  0181               	clrf	1
 25738  3315  3001               	movlw	1
 25739  3316  00F3               	movwf	??_strncpy
 25740  3317  0873               	movf	??_strncpy,w
 25741  3318  07F5               	addwf	strncpy@cp,f
 25742  3319                     i1l5454:	
 25743  3319  3001               	movlw	1
 25744  331A  02F1               	subwf	strncpy@n,f
 25745  331B  3000               	movlw	0
 25746  331C  3BF2               	subwfb	strncpy@n+1,f
 25747  331D  0A71               	incf	strncpy@n,w
 25748  331E  1D03               	skipz
 25749  331F  2B10               	goto	i1l5450
 25750  3320  0A72               	incf	strncpy@n+1,w
 25751  3321  1903               	btfsc	3,2
 25752  3322  0008               	return
 25753  3323  2B10               	goto	i1l5450
 25754  3324                     __end_of_strncpy:	
 25755                           
 25756                           	psect	text74
 25757  3643                     __ptext74:	
 25758 ;; *************** function _rotISR *****************
 25759 ;; Defined at:
 25760 ;;		line 34 in file "inputs.c"
 25761 ;; Parameters:    Size  Location     Type
 25762 ;;		None
 25763 ;; Auto vars:     Size  Location     Type
 25764 ;;  input           1    7[COMMON] unsigned char 
 25765 ;; Return value:  Size  Location     Type
 25766 ;;                  1    wreg      void 
 25767 ;; Registers used:
 25768 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 25769 ;; Tracked objects:
 25770 ;;		On entry : 0/0
 25771 ;;		On exit  : 0/0
 25772 ;;		Unchanged: 0/0
 25773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25775 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25776 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25777 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25778 ;;Total ram usage:        8 bytes
 25779 ;; Hardware stack levels used:    1
 25780 ;; This function calls:
 25781 ;;		Nothing
 25782 ;; This function is called by:
 25783 ;;		_ISR
 25784 ;; This function uses a non-reentrant model
 25785 ;;
 25786                           
 25787                           
 25788                           ;psect for function _rotISR
 25789  3643                     _rotISR:	
 25790                           
 25791                           ;inputs.c: 36:  uint8_t input;;inputs.c: 38:  input = (PORTAbits.RA5 << 1) | PORTAbits.R
      +                          A4;
 25792                           
 25793                           ;incstack = 0
 25794                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 25795  3643  0140               	movlb	0	; select bank0
 25796  3644  0E0C               	swapf	12,w	;volatile
 25797  3645  3901               	andlw	1
 25798  3646  00F0               	movwf	??_rotISR
 25799  3647  0E0C               	swapf	12,w	;volatile
 25800  3648  0C89               	rrf	9,f
 25801  3649  3901               	andlw	1
 25802  364A  0709               	addwf	9,w
 25803  364B  0470               	iorwf	??_rotISR,w
 25804  364C  00F1               	movwf	??_rotISR+1
 25805  364D  0871               	movf	??_rotISR+1,w
 25806  364E  00F7               	movwf	rotISR@input
 25807                           
 25808                           ;inputs.c: 41:  curRotState = transition_table[curRotState & 0b00000111][input];
 25809  364F  0141               	movlb	1	; select bank1
 25810  3650  086C               	movf	_curRotState^(0+128),w	;volatile
 25811  3651  3907               	andlw	7
 25812  3652  00F0               	movwf	??_rotISR
 25813  3653  01F1               	clrf	??_rotISR+1
 25814  3654  35F0               	lslf	??_rotISR,f
 25815  3655  0DF1               	rlf	??_rotISR+1,f
 25816  3656  35F0               	lslf	??_rotISR,f
 25817  3657  0DF1               	rlf	??_rotISR+1,f
 25818  3658  3070               	movlw	low (_transition_table| (0+32768))
 25819  3659  00F2               	movwf	??_rotISR+2
 25820  365A  30B8               	movlw	high (_transition_table| (0+32768))
 25821  365B  00F3               	movwf	??_rotISR+3
 25822  365C  0870               	movf	??_rotISR,w
 25823  365D  0772               	addwf	??_rotISR+2,w
 25824  365E  00F4               	movwf	??_rotISR+4
 25825  365F  0871               	movf	??_rotISR+1,w
 25826  3660  3D73               	addwfc	??_rotISR+3,w
 25827  3661  00F5               	movwf	??_rotISR+5
 25828  3662  0877               	movf	rotISR@input,w
 25829  3663  0774               	addwf	??_rotISR+4,w
 25830  3664  0084               	movwf	4
 25831  3665  0875               	movf	??_rotISR+5,w
 25832  3666  1803               	skipnc
 25833  3667  0A75               	incf	??_rotISR+5,w
 25834  3668  0085               	movwf	5
 25835  3669  0800               	movf	0,w	;code access
 25836  366A  00F6               	movwf	??_rotISR+6
 25837  366B  0876               	movf	??_rotISR+6,w
 25838  366C  00EC               	movwf	_curRotState^(0+128)	;volatile
 25839                           
 25840                           ;inputs.c: 44:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 25841  366D  1FEC               	btfss	_curRotState^(0+128),7	;volatile
 25842  366E  2E74               	goto	i1l6754
 25843  366F  3001               	movlw	1
 25844  3670  00F0               	movwf	??_rotISR
 25845  3671  0870               	movf	??_rotISR,w
 25846  3672  0142               	movlb	2	; select bank2
 25847  3673  00EC               	movwf	_rotDir^(0+256)	;volatile
 25848  3674                     i1l6754:	
 25849                           
 25850                           ;inputs.c: 45:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 25851  3674  0141               	movlb	1	; select bank1
 25852  3675  1F6C               	btfss	_curRotState^(0+128),6	;volatile
 25853  3676  2E7C               	goto	i1l310
 25854  3677  3002               	movlw	2
 25855  3678  00F0               	movwf	??_rotISR
 25856  3679  0870               	movf	??_rotISR,w
 25857  367A  0142               	movlb	2	; select bank2
 25858  367B  00EC               	movwf	_rotDir^(0+256)	;volatile
 25859  367C                     i1l310:	
 25860                           
 25861                           ;inputs.c: 47:  userActivity = tick100ms;
 25862  367C  0144               	movlb	4	; select bank4
 25863  367D  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 25864  367E  0142               	movlb	2	; select bank2
 25865  367F  00DF               	movwf	(_userActivity+3)^(0+256)	;volatile
 25866  3680  0144               	movlb	4	; select bank4
 25867  3681  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 25868  3682  0142               	movlb	2	; select bank2
 25869  3683  00DE               	movwf	(_userActivity+2)^(0+256)	;volatile
 25870  3684  0144               	movlb	4	; select bank4
 25871  3685  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 25872  3686  0142               	movlb	2	; select bank2
 25873  3687  00DD               	movwf	(_userActivity+1)^(0+256)	;volatile
 25874  3688  0144               	movlb	4	; select bank4
 25875  3689  0832               	movf	_tick100ms^(0+512),w	;volatile
 25876  368A  0142               	movlb	2	; select bank2
 25877  368B  00DC               	movwf	_userActivity^(0+256)	;volatile
 25878  368C  0008               	return
 25879  368D                     __end_of_rotISR:	
 25880                           
 25881                           	psect	text75
 25882  368D                     __ptext75:	
 25883 ;; *************** function _pushButtonISR *****************
 25884 ;; Defined at:
 25885 ;;		line 54 in file "inputs.c"
 25886 ;; Parameters:    Size  Location     Type
 25887 ;;		None
 25888 ;; Auto vars:     Size  Location     Type
 25889 ;;  time            1    1[COMMON] unsigned char 
 25890 ;; Return value:  Size  Location     Type
 25891 ;;                  1    wreg      void 
 25892 ;; Registers used:
 25893 ;;		wreg, status,2, status,0
 25894 ;; Tracked objects:
 25895 ;;		On entry : 0/0
 25896 ;;		On exit  : 0/0
 25897 ;;		Unchanged: 0/0
 25898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 25899 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25900 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25901 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25902 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 25903 ;;Total ram usage:        2 bytes
 25904 ;; Hardware stack levels used:    1
 25905 ;; This function calls:
 25906 ;;		Nothing
 25907 ;; This function is called by:
 25908 ;;		_ISR
 25909 ;; This function uses a non-reentrant model
 25910 ;;
 25911                           
 25912                           
 25913                           ;psect for function _pushButtonISR
 25914  368D                     _pushButtonISR:	
 25915                           
 25916                           ;inputs.c: 56:  uint8_t time;;inputs.c: 58:  if ((!PORTAbits.RA7) && (pbState != PB_WAIT
      +                          )) {
 25917                           
 25918                           ;incstack = 0
 25919                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0]
 25920  368D  0140               	movlb	0	; select bank0
 25921  368E  1B8C               	btfsc	12,7	;volatile
 25922  368F  2EAB               	goto	i1l6728
 25923  3690  3004               	movlw	4
 25924  3691  067D               	xorwf	_pbState,w	;volatile
 25925  3692  1903               	btfsc	3,2
 25926  3693  2EAB               	goto	i1l6728
 25927                           
 25928                           ;inputs.c: 59:   tick10ms = 0;
 25929  3694  0142               	movlb	2	; select bank2
 25930  3695  01EE               	clrf	_tick10ms^(0+256)	;volatile
 25931                           
 25932                           ;inputs.c: 60:   pbState = PB_WAIT;
 25933  3696  3004               	movlw	4
 25934  3697  00F0               	movwf	??_pushButtonISR
 25935  3698  0870               	movf	??_pushButtonISR,w
 25936  3699  00FD               	movwf	_pbState	;volatile
 25937                           
 25938                           ;inputs.c: 61:   userActivity = tick100ms;
 25939  369A  0144               	movlb	4	; select bank4
 25940  369B  0835               	movf	(_tick100ms+3)^(0+512),w	;volatile
 25941  369C  0142               	movlb	2	; select bank2
 25942  369D  00DF               	movwf	(_userActivity+3)^(0+256)	;volatile
 25943  369E  0144               	movlb	4	; select bank4
 25944  369F  0834               	movf	(_tick100ms+2)^(0+512),w	;volatile
 25945  36A0  0142               	movlb	2	; select bank2
 25946  36A1  00DE               	movwf	(_userActivity+2)^(0+256)	;volatile
 25947  36A2  0144               	movlb	4	; select bank4
 25948  36A3  0833               	movf	(_tick100ms+1)^(0+512),w	;volatile
 25949  36A4  0142               	movlb	2	; select bank2
 25950  36A5  00DD               	movwf	(_userActivity+1)^(0+256)	;volatile
 25951  36A6  0144               	movlb	4	; select bank4
 25952  36A7  0832               	movf	_tick100ms^(0+512),w	;volatile
 25953  36A8  0142               	movlb	2	; select bank2
 25954  36A9  00DC               	movwf	_userActivity^(0+256)	;volatile
 25955                           
 25956                           ;inputs.c: 62:  } else if (pbState == PB_WAIT) {
 25957  36AA  0008               	return
 25958  36AB                     i1l6728:	
 25959  36AB  3004               	movlw	4
 25960  36AC  067D               	xorwf	_pbState,w	;volatile
 25961  36AD  1D03               	btfss	3,2
 25962  36AE  0008               	return
 25963                           
 25964                           ;inputs.c: 63:   time = tick10ms;
 25965  36AF  0142               	movlb	2	; select bank2
 25966  36B0  086E               	movf	_tick10ms^(0+256),w	;volatile
 25967  36B1  00F0               	movwf	??_pushButtonISR
 25968  36B2  0870               	movf	??_pushButtonISR,w
 25969  36B3  00F1               	movwf	pushButtonISR@time
 25970                           
 25971                           ;inputs.c: 64:   if ((time > 10) && (time <= 70) && (PORTAbits.RA7))
 25972  36B4  300B               	movlw	11
 25973  36B5  0271               	subwf	pushButtonISR@time,w
 25974  36B6  1C03               	skipc
 25975  36B7  2EC4               	goto	i1l6738
 25976  36B8  3047               	movlw	71
 25977  36B9  0271               	subwf	pushButtonISR@time,w
 25978  36BA  1803               	skipnc
 25979  36BB  2EC4               	goto	i1l6738
 25980  36BC  0140               	movlb	0	; select bank0
 25981  36BD  1F8C               	btfss	12,7	;volatile
 25982  36BE  2EC4               	goto	i1l6738
 25983                           
 25984                           ;inputs.c: 66:    pbState = PB_SHORT;
 25985  36BF  3001               	movlw	1
 25986  36C0  00F0               	movwf	??_pushButtonISR
 25987  36C1  0870               	movf	??_pushButtonISR,w
 25988  36C2  00FD               	movwf	_pbState	;volatile
 25989  36C3  0008               	return
 25990  36C4                     i1l6738:	
 25991  36C4  3047               	movlw	71
 25992  36C5  0271               	subwf	pushButtonISR@time,w
 25993  36C6  1C03               	skipc
 25994  36C7  2ED0               	goto	i1l319
 25995  36C8  0140               	movlb	0	; select bank0
 25996  36C9  1B8C               	btfsc	12,7	;volatile
 25997  36CA  2ED0               	goto	i1l319
 25998                           
 25999                           ;inputs.c: 69:    pbState = PB_LONG;
 26000  36CB  3002               	movlw	2
 26001  36CC  00F0               	movwf	??_pushButtonISR
 26002  36CD  0870               	movf	??_pushButtonISR,w
 26003  36CE  00FD               	movwf	_pbState	;volatile
 26004  36CF  0008               	return
 26005  36D0                     i1l319:	
 26006                           ;inputs.c: 70:   else if (PORTAbits.RA7)
 26007                           
 26008  36D0  0140               	movlb	0	; select bank0
 26009  36D1  1F8C               	btfss	12,7	;volatile
 26010  36D2  0008               	return
 26011                           
 26012                           ;inputs.c: 72:    pbState = PB_ABORT;
 26013  36D3  3003               	movlw	3
 26014  36D4  00F0               	movwf	??_pushButtonISR
 26015  36D5  0870               	movf	??_pushButtonISR,w
 26016  36D6  00FD               	movwf	_pbState	;volatile
 26017  36D7  0008               	return
 26018  36D8                     __end_of_pushButtonISR:	
 26019                           ;inputs.c: 73:  }
 26020                           
 26021  007E                     btemp	set	126	;btemp
 26022  007E                     int$flags	set	126
 26023  007E                     wtemp0	set	126


Data Sizes:
    Strings     783
    Constant    154
    Data        46
    BSS         134
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     80      80
    BANK1            80     75      78
    BANK2            80     60      80
    BANK3            80     64      80
    BANK4            80     29      80
    BANK5            80      0      56
    BANK6            80      0      32
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           26      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    qsort$2808	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    compar$0	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@d1	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@d	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    memcpy@s1	PTR const void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    memcpy@s	PTR const unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK5[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    qsort@compar	PTR FTN(PTR const void ,PTR const void ,)int  size(2) Largest target is 2
		 -> sortCur(), sortDCRev(), sortDC(), 

    sp__memcpy	PTR void  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@x	PTR unsigned char  size(1) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), 

    qsort@vbase	PTR void  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    qsort@base	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s2	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    swap@s1	PTR unsigned char  size(1) Largest target is 36
		 -> channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    FLASH_WriteBlock@flashWordArray	PTR unsigned short  size(1) Largest target is 64
		 -> storeNVM@buf(BANK0[64]), 

    itoa@str	PTR unsigned char  size(2) Largest target is 10
		 -> systemCheck@str(BANK1[3]), str(BANK3[10]), 

    ftoa@str	PTR unsigned char  size(1) Largest target is 10
		 -> str(BANK3[10]), 

    sortCur@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@b	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortCur@a	PTR struct . size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDCRev@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp2	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    sortDC@cmp1	PTR const void  size(2) Largest target is 60
		 -> qsort@xbuf(BANK2[60]), channelThing@grpB(BANK4[4]), channelThing@grpA(BANK4[4]), virtChannels(BANK5[36]), 

    checkChannelStatus@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    menu@func	PTR FTN()unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    stateFuncTbl	const PTR FTN()unsigned char [9] size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setOutputPower@chData	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    channelSetup@chData	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    spinInput@input	PTR float  size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 57
		 -> STR_87(CODE[4]), systemCheck@str(BANK1[3]), STR_86(CODE[12]), STR_85(CODE[13]), 
		 -> STR_84(CODE[13]), STR_83(CODE[13]), STR_82(CODE[13]), STR_81(CODE[13]), 
		 -> STR_80(CODE[13]), STR_79(CODE[13]), STR_78(CODE[13]), STR_77(CODE[13]), 
		 -> STR_76(CODE[13]), STR_75(CODE[13]), STR_74(CODE[13]), STR_73(CODE[13]), 
		 -> STR_72(CODE[13]), STR_71(CODE[13]), STR_70(CODE[13]), STR_69(CODE[13]), 
		 -> STR_68(CODE[13]), STR_67(CODE[13]), STR_66(CODE[13]), STR_65(CODE[13]), 
		 -> STR_64(CODE[13]), STR_63(CODE[13]), STR_62(CODE[13]), STR_61(CODE[9]), 
		 -> STR_60(CODE[2]), STR_59(CODE[13]), STR_58(CODE[9]), STR_57(CODE[2]), 
		 -> STR_56(CODE[13]), STR_55(CODE[3]), STR_54(CODE[7]), STR_53(CODE[13]), 
		 -> STR_52(CODE[10]), STR_51(CODE[10]), STR_50(CODE[3]), STR_49(CODE[7]), 
		 -> STR_48(CODE[37]), STR_47(CODE[8]), STR_46(CODE[2]), STR_45(CODE[13]), 
		 -> STR_44(CODE[13]), STR_43(CODE[13]), STR_42(CODE[8]), STR_41(CODE[2]), 
		 -> STR_40(CODE[7]), STR_39(CODE[6]), STR_38(CODE[7]), STR_37(CODE[6]), 
		 -> STR_36(CODE[13]), STR_35(CODE[8]), STR_34(CODE[13]), STR_33(CODE[13]), 
		 -> STR_32(CODE[13]), STR_31(CODE[13]), STR_30(CODE[13]), STR_29(CODE[13]), 
		 -> STR_28(CODE[13]), STR_27(CODE[9]), STR_26(CODE[8]), STR_25(CODE[5]), 
		 -> STR_24(CODE[8]), STR_23(CODE[5]), STR_22(CODE[13]), STR_21(CODE[13]), 
		 -> STR_20(CODE[13]), STR_19(CODE[13]), STR_18(CODE[13]), STR_17(CODE[9]), 
		 -> STR_16(CODE[3]), STR_15(CODE[3]), STR_14(CODE[13]), STR_13(CODE[13]), 
		 -> STR_12(CODE[3]), STR_11(CODE[3]), STR_10(CODE[4]), STR_9(CODE[2]), 
		 -> STR_8(CODE[4]), STR_7(CODE[8]), STR_6(CODE[7]), STR_5(CODE[8]), 
		 -> STR_4(CODE[2]), STR_3(CODE[4]), str(BANK3[10]), STR_2(CODE[8]), 
		 -> STR_1(CODE[57]), 

    initGlobalData@heater	PTR struct . size(2) Largest target is 166
		 -> data.heater(BIGRAM[124]), data(BIGRAM[166]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->_strncpy

Critical Paths under _main in BANK0

    _viewErrorMessage->_OLED_print_xy
    _OLED_off->_OLED_command
    _readNVM->_FLASH_ReadWord
    _setSkyTemp->_spinInput
    _setSkyTemp->_storeNVM
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setLensDia->_storeNVM
    _setFudgeFactor->_spinInput
    _setFudgeFactor->_storeNVM
    _setDPOffset->_spinInput
    _setDPOffset->_storeNVM
    _storeNVM->_FLASH_WriteBlock
    _FLASH_WriteBlock->_FLASH_EraseBlock
    _spinInput->___fladd
    _getNextState->___wmul
    _returnToPage->___wmul
    _paging->_OLED_command
    _itoa->___awdiv
    _OLED_print_xy->___bmul
    _initGlobalData->___wmul
    _getAnalogValues->___fladd
    _controller->_setChannelSwitch
    _setChannelSwitch->___bmul
    _error->___awmod
    _ema->___lmul
    _channelThing->_qsort
    _swap->___bmul
    ___bmul->___awdiv
    _memcpy->___bmul
    ___xxtofl->___wmul
    ___flge->___fladd
    _calcRequiredPower->___fladd
    ___wmul->___bmul
    ___flsub->___fladd
    ___fladd->___flmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_calcRequiredPower
    _systemCheck->___flge
    _menu->_channelView
    _statusView->_ftoa
    _setup->_ftoa
    _setSkyTemp->_spinInput
    _setOutputPower->_spinInput
    _setLensDia->_spinInput
    _setFudgeFactor->_spinInput
    _setDPOffset->_spinInput
    _spinInput->___flge
    _channelView->_ftoa
    _channelSetup->_ftoa
    _ftoa->___flge
    _getAnalogValues->___fldiv
    _checkSensor->___flge
    _checkChannelStatus->___flge
    _channelThing->_qsort
    _qsort->_sortCur
    _qsort->_sortDC
    _qsort->_sortDCRev
    _sortCur->___fltol
    ___fltol->___flsub
    ___flge->___fldiv
    _calcRequiredPower->___fldiv

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _channelThing->_qsort

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _channelThing->_qsort

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    _main->_channelThing

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0 1082877
                                             74 BANK1      1     1      0
                                             23 BANK4      6     6      0
                       _OLED_command
                          _OLED_init
              _OLED_loadSpecialChars
                  _calcRequiredPower
                       _channelThing
                 _checkChannelStatus
                        _checkSensor
                         _controller
                    _getAnalogValues
                       _getLastError
                     _initGlobalData
                         _initialize
                               _menu
                            _readNVM
                        _systemCheck
                          _timeSince
                   _viewErrorMessage
 ---------------------------------------------------------------------------------
 (1) _viewErrorMessage                                     5     5      0   23517
                                             22 BANK0      5     5      0
                       _OLED_command
                      _OLED_print_xy
                            ___awmod
                              _getPB
 ---------------------------------------------------------------------------------
 (1) _systemCheck                                          8     8      0   47653
                                             25 BANK1      8     8      0
                       _OLED_command
                           _OLED_off
                      _OLED_print_xy
                            ___fldiv
                             ___flge
                            ___flmul
                           ___xxtofl
                              _error
                     _getAnalogValue
                               _itoa
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _OLED_off                                             0     0      0     465
                       _OLED_command
 ---------------------------------------------------------------------------------
 (1) _readNVM                                             98    98      0     811
                                              3 BANK0     66    66      0
                                              0 BANK1     32    32      0
                     _FLASH_ReadWord
 ---------------------------------------------------------------------------------
 (2) _FLASH_ReadWord                                       3     1      2     276
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _menu                                                10    10      0  839089
                                             50 BANK1     10    10      0
                       _OLED_command
                       _channelSetup *
                        _channelView *
                              _error
                       _getNextState
                              _getPB
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
                          _timeSince
 ---------------------------------------------------------------------------------
 (2) _statusView                                           2     2      0   78308
                                             39 BANK1      2     2      0
                      _OLED_print_xy
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setup                                                2     2      0   74246
                                             39 BANK1      2     2      0
                      _OLED_print_xy
                               _ftoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           1     1      0   92636
                                             40 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       6     6      0  109759
                                             40 BANK1      6     6      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                              _getPB
                               _itoa
                       _returnToPage
                          _spinInput
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           8     8      0  101806
                                             40 BANK1      8     8      0
                      _OLED_print_xy
                             ___wmul
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       1     1      0   92636
                                             40 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          1     1      0   92636
                                             40 BANK1      1     1      0
                      _OLED_print_xy
                               _ftoa
                              _getPB
                       _returnToPage
                          _spinInput
                           _storeNVM
 ---------------------------------------------------------------------------------
 (3) _storeNVM                                            99    99      0    1824
                                             13 BANK0     67    67      0
                                              0 BANK1     32    32      0
                   _FLASH_EraseBlock
                   _FLASH_WriteBlock
 ---------------------------------------------------------------------------------
 (4) _FLASH_WriteBlock                                    10     7      3    1085
                                              3 BANK0     10     7      3
                   _FLASH_EraseBlock
 ---------------------------------------------------------------------------------
 (5) _FLASH_EraseBlock                                     3     1      2     276
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           16     2     14   17784
                                             79 BANK0      1     1      0
                                             25 BANK1     15     1     14
                            ___fladd
                             ___flge
                            ___flsub
                             ___wmul (ARG)
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _getPB                                                2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         8     5      3    9846
                                             19 BANK0      8     5      3
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                         11    11      0   91255
                                             39 BANK1     11    11      0
                      _OLED_print_xy
                             ___bmul
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         6     6      0   93193
                                             39 BANK1      6     6      0
                      _OLED_print_xy
                             ___fleq
                             ___flge
                             ___wmul
                               _ftoa
                               _itoa
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         4     4      0    9669
                                             19 BANK0      4     4      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1252
                                              7 BANK0      6     5      1
                       _OLED_command
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _itoa                                                11     7      4    4062
                                              9 BANK0     11     7      4
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (3) _ftoa                                                14     8      6   41531
                                             25 BANK1     14     8      6
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flsub
                            ___fltol
                             ___wmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) _OLED_print_xy                                        9     6      3   21794
                                             13 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       7     7      0    9486
                                             19 BANK0      7     7      0
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _getLastError                                         4     4      0      37
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _getAnalogValues                                      6     6      0   20705
                                             13 BANK1      6     6      0
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                                _ema
                     _getAnalogValue
 ---------------------------------------------------------------------------------
 (1) _controller                                          10    10      0    4817
                                             17 BANK0     10    10      0
                             ___bmul
                   _setChannelSwitch
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          4     4      0    6803
                                             25 BANK1      2     2      0
                             ___flge
                              _error
                          _timeSince
                          _uartReset
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartReset                                            1     1      0       3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     819
                                              0 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (1) _checkChannelStatus                                  24    24      0   34533
                                             25 BANK1     24    24      0
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___fltol
                             ___wmul
                           ___xxtofl
                                _ema
                              _error
                     _getAnalogValue
                   _setChannelSwitch
 ---------------------------------------------------------------------------------
 (2) _setChannelSwitch                                     4     3      1     819
                                             13 BANK0      4     3      1
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _getAnalogValue                                       4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (2) _error                                                2     2      0    1184
                                              7 BANK0      2     2      0
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4    1153
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _ema                                                 20    12      8    1734
                                             12 BANK0     20    12      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     496
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (3) ___fleq                                              12     4      8     670
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (1) _channelThing                                        34    34      0   58603
                                             51 BANK1     11    11      0
                                              0 BANK4     23    23      0
                             ___bmul
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                             ___wmul
                           ___xxtofl
                              _qsort
 ---------------------------------------------------------------------------------
 (2) _qsort                                              149   143      6   20796
                                             79 BANK0      1     1      0
                                             27 BANK1     24    18      6
                                              0 BANK2     60    60      0
                                              0 BANK3     64    64      0
                            ___awdiv
                             ___bmul
                             _memcpy
                            _sortCur *
                             _sortDC *
                          _sortDCRev *
                               _swap
 ---------------------------------------------------------------------------------
 (3) _swap                                                 6     2      4     465
                                             13 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortDCRev                                            8     4      4    3021
                                             19 BANK1      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) _sortDC                                               8     4      4    3021
                                             19 BANK1      8     4      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               4     3      1    2891
                                              9 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) _sortCur                                              8     4      4    7064
                                             19 BANK1      8     4      4
                             ___bmul (ARG)
                            ___flsub
                            ___fltol
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             11     7      4     787
                                              8 BANK1     11     7      4
                            ___flsub (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) _memcpy                                               8     5      3     424
                                             13 BANK0      8     5      3
                            ___awdiv (ARG)
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              9     5      4     805
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4    1106
                                             19 BANK0     14    10      4
                             ___bmul (ARG)
                             ___wmul (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flge                                              12     4      8    4766
                                             13 BANK1     12     4      8
                             ___bmul (ARG)
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _calcRequiredPower                                   61    61      0   33770
                                             13 BANK1     61    61      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flsub
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    9136
                                             13 BANK0      6     2      4
                             ___bmul (ARG)
 ---------------------------------------------------------------------------------
 (4) ___flsub                                              8     0      8    5887
                                              0 BANK1      8     0      8
                            ___fladd
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (5) ___fladd                                             20    12      8    4922
                                             59 BANK0     20    12      8
                             ___bmul (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             26    18      8    8933
                                             33 BANK0     26    18      8
                          __Umul8_16
                             ___bmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (3) __Umul8_16                                            9     7      2     980
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             26    18      8    3843
                                             59 BANK0     13     5      8
                                              0 BANK1     13    13      0
                             ___bmul (ARG)
                            ___flmul (ARG)
                             ___wmul (ARG)
                           ___xxtofl (ARG)
                     _getAnalogValue (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                               34    34      0    1066
                                              7 BANK0     34    34      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (3) _OLED_write                                           1     1      0     465
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     589
                                              7 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (3) _OLED_command                                         1     1      0     465
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (4) _OLED_waitForReady                                    1     1      0      37
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _OLED_send                                            3     2      1     397
                                              3 BANK0      3     2      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (5) _OLED_write4bits                                      3     3      0     124
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _ISR                                                  4     4      0     416
                                              8 COMMON     4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (8) _uartReceiveISR                                       1     1      0     326
                                              6 COMMON     1     1      0
                            _strncpy
 ---------------------------------------------------------------------------------
 (9) _strncpy                                              6     3      3     326
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (8) _rotISR                                               8     8      0      23
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (8) _pushButtonISR                                        2     2      0      67
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_command
     _OLED_send
       _OLED_write4bits
     _OLED_waitForReady
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write4bits
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_write
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
   _calcRequiredPower
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flsub
       ___fladd
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _channelThing
     ___bmul
       ___awdiv (ARG)
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _qsort
       ___awdiv
       ___bmul
         ___awdiv (ARG)
       _memcpy
         ___awdiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _sortCur *
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flsub (ARG)
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol (ARG)
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
       _sortDC *
         ___bmul
           ___awdiv (ARG)
       _sortDCRev *
         ___bmul
           ___awdiv (ARG)
       _swap *
         ___bmul (ARG)
           ___awdiv (ARG)
   _checkChannelStatus
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fleq
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___fltol
       ___flsub (ARG)
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _error
       ___awmod
     _getAnalogValue
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _checkSensor
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _timeSince
     _uartReset
     _uartSendByte
   _controller
     ___bmul
       ___awdiv (ARG)
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
     _timeSince
   _getAnalogValues
     ___fladd
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _ema
       ___lmul
     _getAnalogValue
   _getLastError
   _initGlobalData
     ___wmul
       ___bmul (ARG)
         ___awdiv (ARG)
   _initialize
   _menu
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___bmul
         ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _error *
       ___awmod
     _getNextState *
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
     _getPB *
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       ___fleq
       ___flge
         ___bmul (ARG)
           ___awdiv (ARG)
         ___fladd (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fldiv (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _itoa
         ___awdiv
         ___awmod
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _getPB
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
       _spinInput
         ___fladd
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getRotDir (ARG)
       _storeNVM
         _FLASH_EraseBlock
         _FLASH_WriteBlock
           _FLASH_EraseBlock
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _OLED_write
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___bmul (ARG)
           ___awdiv (ARG)
       _ftoa
         ___fldiv
           ___bmul (ARG)
             ___awdiv (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flge
           ___bmul (ARG)
             ___awdiv (ARG)
           ___fladd (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___fldiv (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flmul
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___flsub
           ___fladd
             ___bmul (ARG)
               ___awdiv (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
             _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
         ___fltol
           ___flsub (ARG)
             ___fladd
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___flmul (ARG)
                 __Umul8_16
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 ___xxtofl (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                   ___wmul (ARG)
                     ___bmul (ARG)
                       ___awdiv (ARG)
                   _getAnalogValue (ARG)
                 _getAnalogValue (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
             ___flmul (ARG)
               __Umul8_16
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               ___xxtofl (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
                 ___wmul (ARG)
                   ___bmul (ARG)
                     ___awdiv (ARG)
                 _getAnalogValue (ARG)
               _getAnalogValue (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             ___xxtofl (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
               ___wmul (ARG)
                 ___bmul (ARG)
                   ___awdiv (ARG)
               _getAnalogValue (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       _itoa
         ___awdiv
         ___awmod
       _paging
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
           _OLED_waitForReady
         ___wmul
           ___bmul (ARG)
             ___awdiv (ARG)
     _timeSince *
   _readNVM
     _FLASH_ReadWord
   _systemCheck
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_off
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___fldiv
       ___bmul (ARG)
         ___awdiv (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flge
       ___bmul (ARG)
         ___awdiv (ARG)
       ___fladd (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
       ___fldiv (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___flmul (ARG)
           __Umul8_16
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           ___xxtofl (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
             ___wmul (ARG)
               ___bmul (ARG)
                 ___awdiv (ARG)
             _getAnalogValue (ARG)
           _getAnalogValue (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___flmul (ARG)
         __Umul8_16
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         ___xxtofl (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
           ___wmul (ARG)
             ___bmul (ARG)
               ___awdiv (ARG)
           _getAnalogValue (ARG)
         _getAnalogValue (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___flmul
       __Umul8_16
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       ___xxtofl (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
         ___wmul (ARG)
           ___bmul (ARG)
             ___awdiv (ARG)
         _getAnalogValue (ARG)
       _getAnalogValue (ARG)
     ___xxtofl
       ___bmul (ARG)
         ___awdiv (ARG)
       ___wmul (ARG)
         ___bmul (ARG)
           ___awdiv (ARG)
       _getAnalogValue (ARG)
     _error
       ___awmod
     _getAnalogValue
     _itoa
       ___awdiv
       ___awmod
     _setChannelSwitch
       ___bmul (ARG)
         ___awdiv (ARG)
   _timeSince
   _viewErrorMessage
     _OLED_command
       _OLED_send
         _OLED_write4bits
       _OLED_waitForReady
     _OLED_print_xy
       _OLED_command
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       _OLED_write
         _OLED_send
           _OLED_write4bits
         _OLED_waitForReady
       ___bmul (ARG)
         ___awdiv (ARG)
     ___awmod
     _getPB

 _ISR (ROOT)
   _pushButtonISR
   _rotISR
   _uartReceiveISR
     _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     4B      4E       7       97.5%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     1F4       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     3C      50      10      100.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     40      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50     1D      50      14      100.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      38      16       70.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      20      18       40.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              1A      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     1F4      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Sat Feb 01 19:33:40 2020

                  _pushButtonISR 368D                    returnToPage@n 0036         __end_of_transition_table 388C  
                   _stateFuncTbl 3800                     ___fldiv@aexp 00AC                     ___fldiv@bexp 00AB  
                   ___fldiv@sign 00A4                   ___bmul@product 002B                      __CFG_CP$OFF 0000  
            __end_of_systemCheck 1E28                     ___awdiv@sign 0026           _calcRequiredPower$2773 00DD  
         _calcRequiredPower$2774 00B9           _calcRequiredPower$2775 00BD           _calcRequiredPower$2776 00C1  
         _calcRequiredPower$2777 00C5           _calcRequiredPower$2778 00C9           _calcRequiredPower$2779 00CD  
            ___wmul@multiplicand 002F          ??_OLED_loadSpecialChars 0027              __Umul8_16@word_mpld 0026  
                    __CFG_LVP$ON 0000                     _virtChannels 02A0                              l126 2D85  
                            l144 35B7                              l185 321E                              l370 3112  
                            l471 27B7                              l730 3190                              l815 1688  
                            l808 15EA                              l909 0EAC                              l925 2E8E  
                            l838 1D92                              _ISR 0004                              _ema 285C  
                            _str 01E6                     ___awmod@sign 0026                     __CFG_BORV$LO 0000  
                            wreg 0009                 returnToPage@page 0035                     ___flmul@aexp 004F  
                   ___flmul@bexp 0054                     ___flmul@sign 004E                     ___flmul@temp 0059  
                   ___flmul@prod 0055                    __CFG_BBEN$OFF 0000   FLASH_WriteBlock@flashWordArray 0025  
       __end_of_setChannelSwitch 35B2                     _userActivity 015C                             ?_ISR 0070  
               channelThing@grpA 0253                 channelThing@grpB 0259                     __CFG_ZCD$OFF 0000  
                   ___fltol@exp1 00B2             __end_of_channelThing 1000                             l1116 316A  
                           l1421 1312                             l1317 37E4                             l1423 12F5  
                           l1417 127F                             l1610 31AB                             l1451 13F4  
                           l1525 0780                             l1285 3615                             l1438 1395  
                           l1294 2A42                             l1286 362F                             l1551 2C4E  
                           l1615 3272                             ?_ema 002C                             l1473 1E85  
                           l1297 2A90                             l1459 140C                             l1571 3294  
           __end_of_channelSetup 2800                             l1564 2C98                             l1565 2CA2  
                           l1557 2C84                             l1494 1FCC                             l1495 1FE8  
                           l1497 1FF9                             l7100 124C                             l7200 1334  
                           l7104 124F                             l7106 1257                             l8010 07D9  
                           l7124 1274                             l7134 1289                             l7240 13BB  
                           l7208 1343                             l7128 1277                             l7234 13B4  
                           l7226 13A7                             l7218 138D                             l7242 13BD  
                           l7410 102C                             l8018 07EF                             l7252 13C8  
                           l7172 12FD                             l7164 12C5                             l7420 1047  
                           l8116 2837                             l7340 377C                             l7270 1404  
                           l7190 1320                             l7174 12FF                             l7182 130D  
                           l7510 37E0                             l8070 32CC                             l9110 1546  
                           l9022 21E6                             l9030 21FE                             l8038 2B7B  
                           l7600 1F08                             l7248 13C6                             l7424 104F  
                           l7416 103E                             l7408 1020                             l7440 34F0  
                           l9104 1520                             l9024 21E9                             l9016 21D7  
                           l7328 3756                             l8144 1072                             l8240 09FE  
                           l8208 0924                             l8232 09E2                             l8304 26E5  
                           l8320 275C                             l7602 1F10                             l7610 1EED  
                           l7274 1408                             l8090 3641                             l8074 32D6  
                           l7450 3502                             l9106 152D                             l8154 1099  
                           l8146 1078                             l8242 0A14                             l8234 09E3  
                           l8314 2730                             l7612 1F40                             l7284 31A5  
                           l7700 059E                             l9044 00D7                             l7508 37D2  
                           l7372 3152                             l9212 0E05                             l9204 0D70  
                           l7436 34E9                             l9140 1636                             l9124 1574  
                           l9028 21EC                             l8148 107B                             l8260 0B48  
                           l8332 27A2                             l8324 2776                             l8404 2658  
                           l7622 1F55                             l7542 1E4A                             l7702 05A0  
                           l7198 1332                             l7358 3164                             l7518 37F1  
                           l9230 0EF4                             l7462 351F                             l7454 350E  
                           l9142 1651                             l8166 10F7                             l8262 0B5E  
                           l8254 0B05                             l8238 09E8                             l9310 23DA  
                           l9302 2386                             l7608 1F39                             l7536 1E3A  
                           l7712 05B6                             l7704 05A8                             l7472 2A5C  
                           l7392 100D                             l7376 3158                             l7448 34F6  
                           l9160 1796                             l9144 1657                             l9136 1619  
                           l8256 0B1C                             l8272 0BB6                             l8328 2790  
                           l8352 250E                             l9320 2443                             l9312 23EF  
                           l9304 239B                             l7634 1F81                             l7626 1F46  
                           l7562 1E78                             l7546 1E4E                             l7458 3517  
                           l8602 359B                             l9154 16EC                             l9162 17F6  
                           l8258 0B32                             l8266 0B74                             l8418 2EA6  
                           l8530 29AE                             l9314 2404                             l9306 23B0  
                           l9330 248A                             l7628 1F62                             l7556 1E68  
                           l7548 1E57                             l7476 2A76                             l7820 2C5D  
                           l7492 37AD                             l9244 0F46                             l9236 0EF5  
                           l9228 0E3A                             l9172 0BCE                             l9156 173A  
                           l9148 167B                             l9076 1416                             l8268 0BB0  
                           l8292 2691                             l8356 251B                             l8508 2938  
                           l9316 2419                             l9308 23C5                             l9332 24B6  
                           l9420 2DB6                             l7662 1FF4                             l7638 1F84  
                           l7582 1EB4                             l7566 1E7C                             l7814 2C46  
                           l7398 1018                             l9238 0F45                             l8198 122F  
                           l8390 262B                             l8438 2F48                             l8462 2FEF  
                           l8518 294C                             l9326 2460                             l9318 242E  
                           l7648 1FB0                             l7576 1EA6                             l7824 2C61  
                           l7488 37A4                             l9088 147B                             l9272 2E72  
                           l9256 2E01                             l8560 2087                             l8368 2591  
                           l9328 2475                             l9440 2DE4                             l9416 2DAA  
                           l7682 057B                             l7834 2C96                             l7826 2C71  
                           l9266 2E2B                             l7922 224B                             l8554 206C  
                           l8394 2643                             l8378 25DF                             l8386 2619  
                           l8474 29C2                             l9370 188E                             l9362 186B  
                           l9354 1845                             l9338 24D4                             l9442 2DE7  
                           l9434 2DD2                             l9426 2DC2                             l7772 0716  
                           l7764 06E8                             l7684 057D                             l7836 2C89  
                           l8652 1B2B                             l8644 1AF4                             l9196 0C9F  
                           l7860 3340                             l7932 229F                             l7924 2292  
                           l8580 20D6                             l8548 201B                             l9356 1864  
                           l8900 1CEF                             l9436 2DDA                             l7790 0756  
                           l7766 06FF                             l7686 0585                             l8670 1BBB  
                           l8638 1ACE                             l8590 356E                             l9278 2E91  
                           l9286 1816                             l7934 22B5                             l8398 2656  
                           l8486 2A25                             l8910 1D34                             l8816 3256  
                           l7776 0718                             l7848 2CBD                             l8680 1C1A  
                           l8656 1B52                             l8592 3574                             l9288 1819  
                           l8576 20BE                             l8568 20A2                             l7880 2D10  
                           l8496 28D7                             l9368 188A                             l9296 237A  
                           l7786 0741                             l8658 1B56                             l8594 357A  
                           l7954 22C7                             l7970 3731                             l9386 18F4  
                           l8906 1CFE                             l9298 237D                             l7796 076D  
                           l8684 1C4D                             l9580 35A3                             l8596 3580  
                           l7956 235E                             l7964 36E3                             l8686 1C52  
                           l8678 1C14                             l8598 3586                             l8846 0893  
                           l7990 07B7                             l9574 2493                             l7968 3720  
                           l9576 0B9C                             l8928 1D54                             l8944 1D93  
                           l9578 21F6                             l8970 2116                             l7898 3366  
                           l8874 2AA5                             l8954 1DD8                             l8972 211C  
                           l8964 1E1D                             l8982 215C                             l8974 2122  
                           l7998 07CE                             STR_1 3812                             l8992 218E  
                           l8984 217D                             l8976 2143                             STR_2 3AE8  
                           STR_3 3B1D                             l8994 2192                             STR_4 3B3B  
                           STR_5 3AC8                             STR_6 3B05                             STR_7 3AC8  
                           STR_8 3B21                             STR_9 3981                             _PIE0 0716  
                           _PIE3 0719                             _PIE4 071A                             u8015 316B  
                           u8025 3170                             u8115 102D                             u9005 2C7E  
                           u8125 1037                             u8135 103F                             u8215 3508  
                           u9025 2C90                             u8225 350F                             u7610 12E4  
                           u8315 37B6                             u7620 12E5                             u7605 12D9  
                           u8095 1023                             u7465 34A7                             u8505 1EFC  
                           u9065 2CAA                             u8345 37D3                             u9305 07AF  
                           u7475 34B5                             u8195 34F9                             u7485 34C5  
                           u8525 1F09                             u7733 1355                             u7725 1338  
                           u9165 337C                             u7495 200C                             u8535 1F26  
                           u7655 1303                             u8375 37E8                             u9425 363D  
                           u8565 1F4A                             u8805 06C8                             u8655 1F9D  
                           u8495 1EF5                             u8815 06D7                             u7775 13A8  
                           u9375 32D7                             u9455 2820                             u8665 1FBC  
                           u8585 1F56                             u8825 06EB                             u9385 32DE  
                           u8675 1FD8                             u7955 31AC                             u8915 072F  
                           u7875 13DF                             u8925 074A                             u8845 06F4  
                           u8935 0760                             u8775 062C                             u7975 3746  
                           u8785 065B                             u8795 06B1                             u9915 28BA  
                           u9935 1AD2                             _TMR0 059C                             u8985 2C6A  
                           u9945 1AE2                             _TMR1 020C                             u9975 1B83  
                           u9985 1BC6                             u9995 1BDF                    __CFG_FCMEN$ON 0000  
                  OLED_send@mode 0023                             _data 274A                             _head 0165  
                           _main 2D5C                             _ftoa 2200                             _menu 181B  
                           _itoa 36D8                             _tail 007C                             fsr0h 0005  
                           fsr1h 0007                             indf0 0000                             fsr0l 0004  
                           indf1 0001                             fsr1l 0006                             _swap 3294  
               channelSetup@page 0167                             btemp 007E                ?_FLASH_WriteBlock 0023  
                  __CFG_BOREN$ON 0000                             start 006E                      ?_OLED_write 0070  
                   spinInput@dir 00C7                  ___fldiv@new_exp 00A5                     spinInput@max 00BF  
                   spinInput@min 00BB                _calcRequiredPower 00D5               ??_FLASH_WriteBlock 0026  
                 ?_pushButtonISR 0070                    __CFG_CSWEN$ON 0000                ___bmul@multiplier 002C  
                  __CFG_MCLRE$ON 0000               ?_calcRequiredPower 0070                            ??_ISR 0078  
                          ??_ema 0034               __size_of_OLED_init 008B               __size_of_OLED_send 0017  
                 _setFudgeFactor 293A                channelThing@total 0247                    ___fltol@sign1 00B1  
                __end_of___fladd 1414                            ?_main 0070                            ?_ftoa 00B9  
                          ?_menu 0070                  __end_of___fldiv 2000                            ?_itoa 0029  
                __end_of___awdiv 1054                            STR_10 3B25                            STR_11 3B32  
                          STR_12 3B2F                            STR_20 3A46                            STR_21 3A6D  
                          STR_13 3A39                            STR_22 3A7A                            STR_14 39DE  
                          STR_30 39B7                            STR_23 3B14                            STR_15 3B35  
                          STR_31 39EB                            STR_16 3B38                            STR_40 3AF7  
                          STR_24 3AD0                            STR_32 39AA                            STR_41 3B03  
                          STR_25 3B14                            STR_17 3AAF                            STR_33 39C4  
                  __CFG_WDTE$OFF 0000                            STR_50 3B2C                            STR_26 3AE0  
                          STR_42 3AC0                            STR_18 3A53                            STR_34 3A1F  
                          STR_27 3AAF                            STR_35 3AD8                            STR_51 3A93  
                          STR_43 3A2C                            STR_19 39D1                            STR_60 3B03  
                          STR_52 39A0                            STR_36 3A7A                            STR_44 3A60  
                          STR_28 399D                  __end_of___awmod 3524                            STR_45 3A1F  
                          STR_37 3B13                            STR_61 3AA6                            STR_53 3A12  
                          STR_29 3A05                            STR_46 3B03                            STR_54 3AFE  
                          STR_38 3AF0                            STR_70 3969                            STR_62 388C  
                          STR_39 3B13                            STR_55 3B29                            STR_47 3AB8  
                          STR_71 391B                            STR_63 38C0                            STR_80 394F  
                          STR_72 3969                            STR_56 39F8                            STR_64 38A6  
                          STR_48 384B                            STR_57 3B03                            STR_49 3B0C  
                          STR_81 3990                            STR_73 38F4                            STR_65 38E7  
                          STR_58 3A9D                            STR_66 394F                            STR_82 3942  
                          STR_74 3899                            STR_59 3863                            STR_67 390E  
                          STR_75 38DA                            STR_83 38B3                            STR_68 388C  
                          STR_76 3983                            STR_84 38CD                            STR_69 395C  
                          STR_85 3928                            STR_77 3901                            STR_86 3A87  
                          STR_78 3935                            STR_87 3B19                            STR_79 3976  
                __end_of___flmul 078D              ??_calcRequiredPower 00AD  checkSensor@sensorUpdateInterval 0264  
                __end_of___flsub 33BD                  __end_of___fltol 3800                            ?_swap 002D  
                          u10005 1BEC                            u10015 1BF6                            u10025 1C06  
                          u10035 1C25                            u10045 1C2F                            u11007 2C1F  
                          u10055 1C3F                            u11017 2C2B                            u10065 1C5C  
                          u10090 324C                            u11027 3220                            u11037 3226  
                          u11047 3230                            _T1CLK 0211                            u11057 3236  
                          u11067 34D2                  ___awdiv@divisor 0020                            u11077 34D8  
                          _T1CON 020E                            u10625 2E4B                            u10635 2E6D  
                          u10740 18B9                            u10565 0E7C                            u10741 18B7  
                          u10750 18BA                            u10907 156D                            u10917 2BAD  
                          u10927 2BBF                            u10775 18EA                            u10937 2BCB  
                          u10947 2BD7                            u10867 2DEB                            u10957 2BE3  
                          u10877 1D80                            u10967 2BEF                            u10887 07BF  
                          u10977 2BFB                            u10897 07E1                            u10987 2C07  
                          u10997 2C13                            _IOCAN 1F3E                            _IOCAP 1F3D  
                          _IOCCN 1F54                            i1l310 367C                            i1l319 36D0  
                          i1l271 001C                            i1l280 0065                            i1l274 0038  
                          i1l284 006C                 __end_of_OLED_off 3102                  ___awdiv@counter 0025  
                   main@initDone 0262                            _TRISA 0012                            _TRISB 0013  
                          _TRISC 0014           uartReceiveISR@checksum 016A              ___lmul@multiplicand 0024  
           __size_of_checkSensor 0120                     ?_setDPOffset 0070                    __CFG_WRTB$OFF 0000  
                  __CFG_WRTC$OFF 0000       __end_of_checkChannelStatus 1800                   OLED_send@value 0025  
                          _getPB 312C              getNextState@timeout 0035                  __end_of_readNVM 2B23  
                 statusView@page 0169         statusView@prevSensorStat 016F                            ema@in 002C  
                          _error 345E                            _setup 2F4A                            _qsort 1AA6  
                          ftoa@w 00C4                            pclath 000A             __size_of_channelView 02B2  
                          swap@c 0032                  __end_of_sortCur 345E                            status 0003  
                          wtemp0 007E        __end_of_calcRequiredPower 0561                  __end_of_strncpy 3324  
                    controller@n 003A                    spinInput@step 00C3                      _systemCheck 1C62  
           __end_of_getLastError 181B                  __initialization 0070                     __end_of_main 2DF2  
                   __end_of_ftoa 2367                     __end_of_menu 18F8                     __end_of_itoa 3735  
        __size_of_getAnalogValue 001D                     __end_of_swap 32C3           __end_of_setFudgeFactor 29B0  
                 __CFG_SAFEN$OFF 0000                 _viewErrorMessage 2367         controller@dutyCycleTimer 022A  
                         ??_main 00EA                           ??_ftoa 00BF                           ??_menu 00D2  
                         ??_itoa 002D                           ??_swap 0031                   OLED_print_xy@s 002E  
                  sortDCRev@cmp1 00B3                    sortDCRev@cmp2 00B5             __end_of_getNextState 20E0  
        __size_of_FLASH_ReadWord 0020          __size_of_setOutputPower 0182              __size_of_OLED_write 000B  
              _uartDataReadyFlag 016D            getAnalogValue@channel 0023                  _setLensDia$2772 00CC  
                         ?_getPB 0070                           _ADCON1 009E        FLASH_WriteBlock@writeAddr 0023  
                         ?_error 0070                           _ADRESH 009C                           _ADRESL 009B  
               ___awdiv@dividend 0022                           ?_setup 0070                           _ANSELA 1F38  
                         _ANSELB 1F43                           _ANSELC 1F4E               __CFG_RSTOSC$HFINT1 0000  
                         ?_qsort 00BB                           _T0CON0 059E                           _T0CON1 059F  
                         _RC1REG 0119                           _RC1STA 011D                           _RC6PPS 1F26  
                 __CFG_WDTCCS$SC 0000                           i1l5450 3310                           i1l5454 3319  
                         i1l5448 32F8                           i1l6728 36AB                           i1l6738 36C4  
                         i1l6754 3674                           i1l6770 3538                           i1l6764 352E  
                         i1l6782 3567                           i1l6776 3554                           i1l6864 0016  
                         i1l6882 002E                           i1l6876 0027                           i1l6888 0035  
                         _INTCON 000B                           i1l6898 005E                __end_of_OLED_init 2C30  
      __size_of_FLASH_EraseBlock 0020                __end_of_OLED_send 2018                           _OSCFRQ 0893  
                         _SPBRGL 011B                           _TX1REG 011A                           _TX1STA 011E  
           getNextState@intState 0033                 __end_of___xxtofl 2CC6                  ??_pushButtonISR 0070  
                 __CFG_PWRTE$OFF 0000                      menu@timeout 00D8                           ___flge 2A27  
                         ___bmul 314F                           ___fleq 35FA                           ___lmul 32C3  
     OLED_loadSpecialChars@F7970 0320                        ??___fladd 0063                           ___wmul 3161  
                      ??___fldiv 0063                        ??___awdiv 0024                   __CFG_STVREN$ON 0000  
                      ??___awmod 0024                        ??___flmul 0049                        ??___flsub 006F  
                      ??___fltol 00AC                  ?_setFudgeFactor 0070               channelSetup@chData 00CB  
                         _paging 078D                           _memcpy 3268                 ___awdiv@quotient 0027  
                ___awmod@divisor 0020                           _rotISR 3643                           _rotDir 016C  
        __size_of_initGlobalData 010E                    ?_OLED_command 0070                  ___awmod@counter 0025  
                         _sortDC 33F2                           menu@pb 00D7                        ??_readNVM 0023  
        FLASH_ReadWord@flashAddr 0020               __size_of__Umul8_16 0020            __size_of_channelThing 0434  
          __size_of_channelSetup 01A6            OLED_waitForReady@busy 0020                           swap@s1 002F  
                         swap@s2 0030                OLED_command@value 0026                           qsort@i 00CF  
                         qsort@j 00D1                           qsort@l 00C9                           qsort@r 00CB  
                         qsort@s 00CD                           qsort@x 00C7                        ??_sortCur 006F  
               __end_of_storeNVM 2BA5                        ??_strncpy 0073                       ___flge@ff1 00AD  
                     ___flge@ff2 00B1                     ___xxtofl@arg 003D                     ___xxtofl@exp 003C  
                   ___xxtofl@val 0033                       ___fleq@ff1 0020                       ___fleq@ff2 0024  
                 spinInput@input 00B9          __end_of__initialization 00D1                     ftoa@intValue 00C3  
     __size_of_calcRequiredPower 048C                       ___fltol@f1 00A8              ___bmul@multiplicand 0029  
                      ?_OLED_off 0070         __size_of_OLED_write4bits 0045                   __pcstackCOMMON 0070  
                   __pidataBANK1 07FA                     __pidataBANK2 07FB                     __pidataBANK4 0800  
                   __pidataBANK6 31FA                    __end_of_getPB 3137             uartReceiveISR@buffer 02C4  
                  __end_of_error 3499                     _channelThing 0BCC         __size_of_getAnalogValues 01AE  
                   _channelSetup 265A                    __end_of_setup 3000                    __end_of_qsort 1C62  
                 ??_OLED_command 0026   __size_of_OLED_loadSpecialChars 0027    __end_of_OLED_loadSpecialChars 3268  
             __size_of_getRotDir 000B      FLASH_WriteBlock@GIEBitValue 002B                          ??_getPB 0020  
         __size_of_OLED_print_xy 0032                          ??_error 0027                       _dataPacket 0238  
              ?_setChannelSwitch 002D                          ??_setup 00C7             __size_of_setDPOffset 0077  
                        ??_qsort 00C1                       __pbssBANK1 00EB                       __pbssBANK2 015C  
                     __pbssBANK3 01E0                       __pbssBANK4 0220                       __pbssBANK5 02A0  
        __size_of_uartReceiveISR 0047               ??_setChannelSwitch 002E            __size_of_getLastError 0018  
                   ??_OLED_write 0026                __end_of__Umul8_16 31BA                       ??_OLED_off 0027  
            channelThing@numGrpA 0257              channelThing@numGrpB 0258                       __pmaintext 2D5C  
                 _getAnalogValue 317D                          ?___flge 00AD                          ?___bmul 0029  
                        ?___fleq 0020                          ?___lmul 0020                          ?___wmul 002D  
                __CFG_PPS1WAY$ON 0000                       __pintentry 0004            __size_of_getNextState 00C8  
                        ?_paging 0027                          ?_memcpy 002D                _OLED_waitForReady 321A  
                 ___lmul@product 0028                          ?_rotISR 0070                          ?_sortDC 00B3  
      __size_of_FLASH_WriteBlock 0065               __size_of_timeSince 005A               ?_OLED_waitForReady 0070  
             __size_of_uartReset 0008                   _FLASH_ReadWord 31DA            channelThing@totalGrpA 024B  
          channelThing@totalGrpB 024F                   _setOutputPower 24D8                        ?___xxtofl 0033  
             __size_of_spinInput 0096                          _OSCCON1 088D               __size_of_sortDCRev 0035  
                        _NVMADRH 081B                          _NVMADRL 081A                          _NVMDATH 081D  
                        _NVMDATL 081C               __end_of_OLED_write 3121                          _NVMCON2 081F  
                   _getLastError 1803              ??_OLED_waitForReady 0020                pushButtonISR@time 0071  
                  channelThing@n 025D         __end_of_viewErrorMessage 24D8                 _FLASH_EraseBlock 31BA  
                    rotISR@input 0077                       _controller 2DF2                     _getNextState 2018  
                   ?_systemCheck 0070               _checkChannelStatus 1414           __end_of_getAnalogValue 319A  
              __end_of_getRotDir 312C                       ema@average 002E                    _OLED_print_xy 3324  
             getAnalogValues@adc 00B1        __end_of_OLED_waitForReady 3241                  __size_of___flge 007C  
                __size_of___bmul 0012                  __size_of___fleq 0049                          ___fladd 1232  
                        ___fldiv 1E28                          ___awdiv 1002                  __size_of___lmul 0030  
                        ___awmod 34DE                          ___flmul 0561                          ___flsub 3388  
                        ___fltol 379A                  __size_of___wmul 001C                  OLED_write@value 0026  
            ?_checkChannelStatus 0070                    ?_uartSendByte 0070                        ?_storeNVM 0070  
                 _initGlobalData 080C           __end_of_FLASH_ReadWord 31FA                  __size_of_paging 006D  
              ??_OLED_write4bits 0020                  __size_of_memcpy 002C                       _initialize 35B2  
                __size_of_rotISR 004A           __end_of_setOutputPower 265A                          __ptext1 2367  
                        __ptext2 1C62                          __ptext3 30FA                          __ptext4 2AA3  
                        __ptext5 31DA                          __ptext6 181B                          __ptext7 293A  
                        __ptext8 28C5                          __ptext9 29B0                    ??_checkSensor 00B9  
                __size_of_sortDC 0035                          _pbState 007D                  __CFG_WRTAPP$OFF 0000  
                   __size_of_ISR 006A                          _readNVM 2AA3                 _channelView$2771 00CD  
                        ema@tmp0 003C                     __size_of_ema 0069                       ??___xxtofl 0037  
               ___awmod@dividend 0022                ??_getAnalogValues 006F                        _IOCAFbits 1F3F  
                __CFG_WRTSAF$OFF 0000                          _rxCount 016B                    ??_channelView 00C7  
                        _sortCur 3427                          clrloop0 3138             ??_checkChannelStatus 00B9  
        setChannelSwitch@channel 0030                          _strncpy 32F3             end_of_initialization 00D1  
                     _setLensDia 2E94                          ftoa@len 00C1                          ftoa@pos 00C5  
                        ftoa@str 00C6                          paging@n 002C                          memcpy@d 0033  
                        memcpy@n 002E                          memcpy@s 0034                   paging@lastPage 0027  
          checkChannelStatus@adc 00BD             __end_of_OLED_command 310C            checkChannelStatus@avg 00C8  
                        init_ram 3143                          itoa@str 0029                          initloop 3144  
                     _setSkyTemp 28C5                __end_of_timeSince 285C                __end_of_uartReset 30FA  
               ??_setFudgeFactor 00C8                        _OLED_init 2BA5                        _OLED_send 2001  
                ?_getAnalogValue 0020              OLED_setCursor@F7959 026C                    ?_returnToPage 0070  
              __end_of_spinInput 2D5C                   ?_OLED_print_xy 002D                __end_of_sortDCRev 33F2  
             OLED_print_xy@F7967 0268                          sortDC@a 00B9                          sortDC@b 00BA  
                        swap@len 002D           __end_of_initGlobalData 091A                   ??_uartSendByte 0020  
      FLASH_ReadWord@GIEBitValue 0022            __CFG_WDTCPS$WDTCPS_31 0000                       ??_storeNVM 002D  
                ?_FLASH_ReadWord 0020                        _PORTAbits 000C                        _PORTCbits 000E  
                ?_setOutputPower 0070                       _qsort$2808 006F                  _selectedChannel 00EB  
                    ___fladd@grs 006E                    ___xxtofl@sign 003B                        _TRISCbits 0014  
                    ___fldiv@grs 00A7                      ___fldiv@rem 00A0             _getAnalogValues$2780 00AD  
            __end_of_checkSensor 2200                 __CFG_FEXTOSC$OFF 0000     OLED_loadSpecialChars@special 0028  
                 _uartReceiveISR 3524                      ___flmul@grs 0050                       _statusView 1054  
            __end_of_channelView 0BCC                      ?_controller 0070                getNextState@state 0039  
                channelView@page 0168                       ?_OLED_init 0070                   ??_returnToPage 0033  
                     ?_OLED_send 0023                FLASH_WriteBlock@i 002C            __end_of_pushButtonISR 36D8  
     __size_of_OLED_waitForReady 0027                __size_of_OLED_off 0008                  ?_initGlobalData 0070  
                 __end_of___flge 2AA3             __end_of_nextStateTbl 306C                   __end_of___bmul 3161  
                 __end_of___fleq 3643                   __end_of___lmul 32F3                   __end_of___wmul 317D  
                    ?_initialize 0070                 _FLASH_WriteBlock 3735                   __end_of_paging 07FA  
                 __end_of_memcpy 3294                       ftoa@fValue 00B9                   __end_of_rotISR 368D  
                 __end_of_sortDC 3427              start_initialization 0070                      __end_of_ISR 006E  
                    __end_of_ema 28C5         OLED_print_xy@row_offsets 0031           __end_of_uartReceiveISR 356B  
                    ?_setLensDia 0070                       readNVM@buf 0024                       readNVM@nvm 00A0  
           calcRequiredPower@Rth 00B5             calcRequiredPower@phi 00D5                      ?_setSkyTemp 0070  
           initGlobalData@heater 0038                  ??_OLED_print_xy 0030                   systemCheck@str 00BD  
                    sortCur@cmp1 00B3                      sortCur@cmp2 00B5                 __CFG_LPBOREN$OFF 0000  
        _checkChannelStatus$1887 00BF          _checkChannelStatus$1888 00C3                       error@error 0028  
                       ??___flge 00B5                         ??___bmul 002A                         ??___fleq 0028  
           __size_of_systemCheck 01C6                   timeSince@since 0020                         ??___lmul 0028  
      __size_of_setChannelSwitch 0047                         ??___wmul 0031         checkChannelStatus@heater 00CF  
                      __Umul8_16 319A                      __pdataBANK1 00ED                      __pdataBANK2 016F  
                    __pdataBANK4 0264                      __pdataBANK6 0320                         ??_paging 0028  
                       ??_memcpy 0030      FLASH_EraseBlock@GIEBitValue 0022                         ??_rotISR 0070  
       __end_of_FLASH_EraseBlock 31DA            setChannelSwitch@state 002D                      qsort@compar 00BF  
                       ??_sortDC 00B7                 OLED_print_xy@col 0035                      _checkSensor 20E0  
                      ___fladd@a 005F                        ___fladd@b 005B                 OLED_print_xy@row 002D  
                      ___fldiv@a 005B                        ___fldiv@b 005F                      __pbssBIGRAM 274A  
            __size_of_controller 00A2                        ___flmul@a 0045                        ___flmul@b 0041  
                    __pbssCOMMON 007C                        ___flsub@a 00A0                        ___flsub@b 00A4  
                      ___latbits 0003                    ??_setDPOffset 00C8                    __pcstackBANK0 0020  
                  __pcstackBANK1 00A0                    __pcstackBANK2 0120                    __pcstackBANK3 01A0  
                  __pcstackBANK4 0247            _OLED_loadSpecialChars 3241            __size_of_OLED_command 000A  
              __size_of___xxtofl 0096                paging@currentPage 002A                      _channelView 091A  
                ?_uartReceiveISR 0070             __end_of_uartSendByte 3116                     systemCheck@n 00C0  
                    ?_statusView 0070                ?_viewErrorMessage 0070              __size_of_initialize 0048  
           setOutputPower@chData 00CC               ??_viewErrorMessage 0036                  _OLED_write4bits 3499  
                    ??_OLED_init 0027                      ??_OLED_send 0024                      storeNVM@buf 002F  
                    storeNVM@nvm 00A0            _viewErrorMessage$1381 0039                         ?___fladd 005B  
                _getAnalogValues 18F8                         ?___fldiv 005B                         ?___awdiv 0020  
                       ?___awmod 0020                         ?___flmul 0041                         ?___flsub 00A0  
                       ?___fltol 00A8                        _getRotDir 3121                       ?__Umul8_16 0020  
            __size_of_setLensDia 00B6                     _OLED_command 3102                         _BAUD1CON 011F  
                 getNextState@pb 0034                __size_of_storeNVM 0082                     channelView@n 00D1  
                       ?_readNVM 0070              __size_of_setSkyTemp 0075             __end_of_returnToPage 3388  
                 __size_of_getPB 000B                         ?_sortCur 00B3                   __size_of_error 003B  
                      _tick100ms 0232                         ?_strncpy 0070                   __size_of_setup 00B6  
                 __size_of_qsort 01BC   FLASH_WriteBlock@blockStartAddr 0029                 ??_getAnalogValue 0022  
            __end_of_setDPOffset 2A27                   ___wmul@product 0031                         _LATAbits 0018  
                       _LATBbits 0019                         _LATCbits 001A                        clear_ram0 3137  
                  paging@lastDir 0162                         _PIE0bits 0716                         _PIE3bits 0719  
                       _PIE4bits 071A                         _OLED_off 30FA                         _PIR0bits 070C  
                       _PIR3bits 070F        FLASH_EraseBlock@startAddr 0020                         _PIR4bits 0710  
               ??_FLASH_ReadWord 0022                        _timeSince 2802                        _uartReset 30F2  
                initGlobalData@n 0037                __CFG_BBSIZE$BB512 0000                 ??_setOutputPower 00C8  
                     ?_getRotDir 0070                        _spinInput 2CC6                        _sortDCRev 33BD  
                     _ADCON0bits 009D                ___wmul@multiplier 002D                     _RX1DTPPSbits 1ECB  
            __size_of_statusView 01DE           ?_OLED_loadSpecialChars 0070                    menu@nextState 00DB  
                     sortDC@cmp1 00B3                       sortDC@cmp2 00B5             OLED_write4bits@value 0022  
                    _curRotState 00EC                       sortDCRev@a 00B9                       sortDCRev@b 00BA  
               _transition_table 3870             __end_of_stateFuncTbl 3812                ___lmul@multiplier 0020  
        __end_of_OLED_write4bits 34DE      __size_of_checkChannelStatus 03EC                     _nextStateTbl 3000  
              _getLastError$1378 0022                        ftoa@width 00BD         __end_of_FLASH_WriteBlock 379A  
                   ??_controller 0031          __end_of_getAnalogValues 1AA6              calcRequiredPower@T1 00E1  
            calcRequiredPower@T2 00E5                 ??_initGlobalData 0033                        paging@dir 002B  
                  uartSendByte@s 0020                        menu@sleep 0164                        menu@state 0163  
                      memcpy@tmp 0031                       ?_timeSince 0020                       ?_uartReset 0070  
      checkChannelStatus@channel 00CE                 _setChannelSwitch 356B                      ??__Umul8_16 0022  
                  ?_channelThing 0070                        itoa@value 002B              getAnalogValues@avgI 0236  
                  ?_channelSetup 0070              getAnalogValues@avgT 01E2              getAnalogValues@avgV 01E0  
                      itoa@width 002C                 __size_of___fladd 01E2                       qsort@vbase 00C6  
               __size_of___fldiv 01D8                 __size_of___awdiv 0052                 __size_of___awmod 0046  
                     ?_spinInput 00B9                 __size_of___flmul 022C                 __size_of___flsub 0035  
               __size_of___fltol 0066                       qsort@stack 01A0                       qsort@width 00BD  
                     ?_sortDCRev 00B3           OLED_loadSpecialChars@n 0048                     ??_initialize 0020  
      checkChannelStatus@current 00CA        checkChannelStatus@samples 00C7                         ___xxtofl 2C30  
               __size_of_readNVM 0080               __end_of_controller 2E94                      _rxFErrCount 01E5  
              _errorMessageQueue 0220            __size_of_uartSendByte 000A                      _setDPOffset 29B0  
       checkSensor@sensorTimeout 022E                         __ptext10 2F4A                         __ptext11 2E94  
                       __ptext20 312C                         __ptext12 24D8                         __ptext21 2018  
                       __ptext13 265A                         __ptext30 1803                         __ptext22 3356  
                       __ptext14 091A                         __ptext31 18F8                         __ptext23 078D  
                       __ptext15 1054                         __ptext40 345E                         __ptext32 2DF2  
                       __ptext24 3121                         __ptext16 2B23                         __ptext41 34DE  
                       __ptext33 20E0                         __ptext25 36D8                         __ptext17 3735  
                       __ptext50 33BD                         __ptext42 285C                         __ptext34 310C  
                       __ptext26 2200                         __ptext18 31BA                         __ptext51 314F  
                       __ptext43 32C3                         __ptext35 30F2                         __ptext27 3324  
                       __ptext19 2CC6                         __ptext60 1232                         __ptext52 379A  
                       __ptext44 35FA                         __ptext36 2802                         __ptext28 35B2  
                       __ptext61 0561                         __ptext53 3268                         __ptext45 0BCC  
                       __ptext37 1414                         __ptext29 080C                         __ptext70 3499  
                       __ptext62 319A                         __ptext54 1002                         __ptext46 1AA6  
                       __ptext38 356B                         __ptext63 1E28                         __ptext55 2C30  
                       __ptext47 3294                         __ptext39 317D                         __ptext72 3524  
                       __ptext64 3241                         __ptext56 2A27                         __ptext48 3427  
                       __ptext73 32F3                         __ptext65 3116                         __ptext57 00D5  
                       __ptext49 33F2                         __ptext74 3643                         __ptext66 2BA5  
                       __ptext58 3161                         __ptext75 368D                         __ptext67 3102  
                       __ptext59 3388                         __ptext68 321A                         __ptext69 2001  
                   ??_setLensDia 00C8                 __size_of_sortCur 0037                    getNextState@n 003A  
                    _OSCCON3bits 088F                 __size_of_strncpy 0031                         ema@alpha 0030  
                  __size_of_main 0096                    __size_of_ftoa 0167             main@sysCheckInterval 025E  
                  __size_of_menu 00DD                    __size_of_itoa 005D                     ??_setSkyTemp 00C8  
                       getPB@ret 0021                    __size_of_swap 002F                         _tick10ms 016E  
             __end_of_initialize 35FA             __CFG_WDTCWS$WDTCWS_7 0000                       _RC1STAbits 011D  
                    _rxOErrCount 01E4                   ??_channelThing 00D3                   ??_channelSetup 00C7  
                       int$flags 007E                        setup@page 0166                      ??_getRotDir 0020  
                       main@idle 0263                         _storeNVM 2B23                     _uartSendByte 310C  
          __size_of_returnToPage 0032               __end_of_setLensDia 2F4A          __size_of_setFudgeFactor 0076  
              ?_FLASH_EraseBlock 0020                     ?_checkSensor 0070                 ??_uartReceiveISR 0076  
                       ftoa@prec 00BE                         ftoa@sign 00C2               ??_FLASH_EraseBlock 0022  
                       readNVM@n 0064                       _INTCONbits 000B               calcRequiredPower@A 00D9  
             calcRequiredPower@d 00D1               calcRequiredPower@n 00E9               calcRequiredPower@p 00B1  
             __end_of_setSkyTemp 293A                      _NVMCON1bits 081E                         menu@page 00D6  
                       memcpy@d1 0032                         menu@func 00D9                         memcpy@s1 002D  
                  ?_getLastError 0070                     timeSince@now 002C                   __pstringtext10 38CD  
                 __pstringtext11 38DA                   __pstringtext20 394F                   __pstringtext12 38E7  
                 __pstringtext21 395C                   __pstringtext13 38F4                   __pstringtext30 39D1  
                 __pstringtext22 3969                   __pstringtext14 3901                   __pstringtext31 39DE  
                 __pstringtext23 3976                   __pstringtext15 390E                   __pstringtext40 3A53  
                 __pstringtext32 39EB                   __pstringtext24 3983                   __pstringtext16 391B  
                 __pstringtext41 3A60                   __pstringtext33 39F8                   __pstringtext25 3990  
                 __pstringtext17 3928                   __pstringtext50 3AC0                   __pstringtext42 3A6D  
                 __pstringtext34 3A05                   __pstringtext26 399D                   __pstringtext18 3935  
                 __pstringtext51 3AC8                   __pstringtext43 3A7A                   __pstringtext35 3A12  
                 __pstringtext27 39AA                   __pstringtext19 3942                   __pstringtext60 3B0C  
                 __pstringtext52 3AD0                   __pstringtext44 3A87                   __pstringtext36 3A1F  
                 __pstringtext28 39B7                   __pstringtext61 3B13                   __pstringtext53 3AD8  
                 __pstringtext45 3A93                   __pstringtext37 3A2C                   __pstringtext29 39C4  
                 __pstringtext70 3B35                   __pstringtext62 3B19                   __pstringtext54 3AE0  
                 __pstringtext46 3A9D                   __pstringtext38 3A39                   __pstringtext71 3B38  
                 __pstringtext63 3B1D                   __pstringtext55 3AE8                   __pstringtext47 3AA6  
                 __pstringtext39 3A46                   __pstringtext72 3B3B                   __pstringtext64 3B21  
                 __pstringtext56 3AF0                   __pstringtext48 3AAF                   __pstringtext73 0000  
                 __pstringtext65 3B25                   __pstringtext57 3AF7                   __pstringtext49 3AB8  
                 __pstringtext66 3B29                   __pstringtext58 3AFE                   __pstringtext67 3B2C  
                 __pstringtext59 3B05                   __pstringtext68 3B2F                   __pstringtext69 3B32  
         __size_of_pushButtonISR 004B                        qsort@base 00C8                     ?_channelView 0070  
                      qsort@xbuf 0120        viewErrorMessage@errorCode 0038                 ?_OLED_write4bits 0070  
                       intlevel1 0000                        storeNVM@n 006F                     ??_statusView 00C7  
              __CFG_CLKOUTEN$OFF 0000                 ?_getAnalogValues 0070                    ?_getNextState 0033  
                  ??_systemCheck 00B9                       _OLED_write 3116                        strncpy@cp 0075  
          __end_of_OLED_print_xy 3356                     _returnToPage 3356                      ??_timeSince 0024  
                    ??_uartReset 0020                      ??_spinInput 006F                      ??_sortDCRev 00B7  
                   getRotDir@ret 0021        __size_of_viewErrorMessage 0171                         sortCur@a 00B7  
                       sortCur@b 00B9                    __pstringtext1 3000                    __pstringtext2 3870  
                  __pstringtext3 3800                    __pstringtext4 384B                    __pstringtext5 388C  
                  __pstringtext6 3899                    __pstringtext7 38A6                    __pstringtext8 38B3  
                  __pstringtext9 38C0                         qsort@nel 00BB           __Umul8_16@multiplicand 0020  
             __end_of_statusView 1232                   ??_getLastError 0020                         strncpy@d 0074  
                       strncpy@n 0071                         strncpy@s 0070                    ___fladd@signs 006B  
               checkSensor@state 0161                     ___fladd@aexp 006C                     ___fladd@bexp 006D  
                 controller@idle 0160                   controller@tick 0036                   ??_getNextState 0036  
           __Umul8_16@multiplier 0028                __Umul8_16@product 0024                  _g_screenRefresh 00ED  
