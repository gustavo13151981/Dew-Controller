

Microchip Technology PIC PRO Macro Assembler V2.00 build -1524193055 
                                                                                               Sat Jan 25 14:02:59 2020

Microchip Technology Omniscient Code Generator v2.00 (PRO mode) build 20180527130849
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	idataBANK2,global,class=CODE,delta=2
     5                           	psect	idataBANK3,global,class=CODE,delta=2
     6                           	psect	stringtext1,global,class=STRCODE,delta=2
     7                           	psect	stringtext2,global,class=STRCODE,delta=2
     8                           	psect	stringtext3,global,class=STRCODE,delta=2
     9                           	psect	stringtext4,global,class=STRCODE,delta=2
    10                           	psect	stringtext5,global,class=STRCODE,delta=2
    11                           	psect	stringtext6,global,class=STRCODE,delta=2
    12                           	psect	stringtext7,global,class=STRCODE,delta=2
    13                           	psect	stringtext8,global,class=STRCODE,delta=2
    14                           	psect	stringtext9,global,class=STRCODE,delta=2
    15                           	psect	stringtext10,global,class=STRCODE,delta=2
    16                           	psect	stringtext11,global,class=STRCODE,delta=2
    17                           	psect	stringtext12,global,class=STRCODE,delta=2
    18                           	psect	stringtext13,global,class=STRCODE,delta=2
    19                           	psect	stringtext14,global,class=STRCODE,delta=2
    20                           	psect	stringtext15,global,class=STRCODE,delta=2
    21                           	psect	stringtext16,global,class=STRCODE,delta=2
    22                           	psect	stringtext17,global,class=STRCODE,delta=2
    23                           	psect	cinit,global,class=CODE,merge=1,delta=2
    24                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    25                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    26                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    27                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    28                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    29                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    30                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    31                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    32                           	psect	inittext,global,class=CODE,delta=2
    33                           	psect	clrtext,global,class=CODE,delta=2
    34                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    35                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    36                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    37                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    38                           	psect	text15,local,class=CODE,merge=1,delta=2
    39                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    42                           	psect	text27,local,class=CODE,merge=1,delta=2
    43                           	psect	text28,local,class=CODE,merge=1,delta=2
    44                           	psect	text37,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text55,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	intentry,global,class=CODE,delta=2
    48                           	psect	text72,local,class=CODE,merge=1,delta=2
    49                           	psect	text74,local,class=CODE,merge=1,delta=2
    50                           	psect	text75,local,class=CODE,merge=1,delta=2
    51                           	psect	pa_nodes0,global,class=CODE,delta=2
    52                           	dabs	1,0x7E,2
    53  0000                     
    54                           ; Version 2.00
    55                           ; Generated 27/05/2018 GMT
    56                           ; 
    57                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC16F15356 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     	;# 
    89  0001                     	;# 
    90  0002                     	;# 
    91  0003                     	;# 
    92  0004                     	;# 
    93  0005                     	;# 
    94  0006                     	;# 
    95  0007                     	;# 
    96  0008                     	;# 
    97  0009                     	;# 
    98  000A                     	;# 
    99  000B                     	;# 
   100  000C                     	;# 
   101  000D                     	;# 
   102  000E                     	;# 
   103  0010                     	;# 
   104  0012                     	;# 
   105  0013                     	;# 
   106  0014                     	;# 
   107  0016                     	;# 
   108  0018                     	;# 
   109  0019                     	;# 
   110  001A                     	;# 
   111  009B                     	;# 
   112  009B                     	;# 
   113  009C                     	;# 
   114  009D                     	;# 
   115  009E                     	;# 
   116  009F                     	;# 
   117  0119                     	;# 
   118  0119                     	;# 
   119  0119                     	;# 
   120  011A                     	;# 
   121  011A                     	;# 
   122  011A                     	;# 
   123  011B                     	;# 
   124  011B                     	;# 
   125  011B                     	;# 
   126  011B                     	;# 
   127  011B                     	;# 
   128  011C                     	;# 
   129  011C                     	;# 
   130  011C                     	;# 
   131  011D                     	;# 
   132  011D                     	;# 
   133  011D                     	;# 
   134  011E                     	;# 
   135  011E                     	;# 
   136  011E                     	;# 
   137  011F                     	;# 
   138  011F                     	;# 
   139  011F                     	;# 
   140  011F                     	;# 
   141  011F                     	;# 
   142  018C                     	;# 
   143  018D                     	;# 
   144  018E                     	;# 
   145  018F                     	;# 
   146  0190                     	;# 
   147  0191                     	;# 
   148  0192                     	;# 
   149  0196                     	;# 
   150  0197                     	;# 
   151  0198                     	;# 
   152  0199                     	;# 
   153  019A                     	;# 
   154  019B                     	;# 
   155  019C                     	;# 
   156  020C                     	;# 
   157  020C                     	;# 
   158  020D                     	;# 
   159  020E                     	;# 
   160  020F                     	;# 
   161  020F                     	;# 
   162  0210                     	;# 
   163  0210                     	;# 
   164  0211                     	;# 
   165  0211                     	;# 
   166  028C                     	;# 
   167  028C                     	;# 
   168  028D                     	;# 
   169  028D                     	;# 
   170  028E                     	;# 
   171  028F                     	;# 
   172  0290                     	;# 
   173  0291                     	;# 
   174  030C                     	;# 
   175  030C                     	;# 
   176  030D                     	;# 
   177  030E                     	;# 
   178  030F                     	;# 
   179  0310                     	;# 
   180  0310                     	;# 
   181  0311                     	;# 
   182  0312                     	;# 
   183  0313                     	;# 
   184  0314                     	;# 
   185  0314                     	;# 
   186  0315                     	;# 
   187  0316                     	;# 
   188  0318                     	;# 
   189  0318                     	;# 
   190  0319                     	;# 
   191  031A                     	;# 
   192  031C                     	;# 
   193  031C                     	;# 
   194  031D                     	;# 
   195  031E                     	;# 
   196  038C                     	;# 
   197  038C                     	;# 
   198  038D                     	;# 
   199  038E                     	;# 
   200  058C                     	;# 
   201  058C                     	;# 
   202  058D                     	;# 
   203  058E                     	;# 
   204  058F                     	;# 
   205  058F                     	;# 
   206  0590                     	;# 
   207  0591                     	;# 
   208  0592                     	;# 
   209  0593                     	;# 
   210  059C                     	;# 
   211  059C                     	;# 
   212  059D                     	;# 
   213  059D                     	;# 
   214  059E                     	;# 
   215  059F                     	;# 
   216  060C                     	;# 
   217  060D                     	;# 
   218  060E                     	;# 
   219  060F                     	;# 
   220  0610                     	;# 
   221  0611                     	;# 
   222  0612                     	;# 
   223  0613                     	;# 
   224  0614                     	;# 
   225  070C                     	;# 
   226  070D                     	;# 
   227  070E                     	;# 
   228  070F                     	;# 
   229  0710                     	;# 
   230  0711                     	;# 
   231  0712                     	;# 
   232  0713                     	;# 
   233  0716                     	;# 
   234  0717                     	;# 
   235  0718                     	;# 
   236  0719                     	;# 
   237  071A                     	;# 
   238  071B                     	;# 
   239  071C                     	;# 
   240  071D                     	;# 
   241  0796                     	;# 
   242  0797                     	;# 
   243  0798                     	;# 
   244  0799                     	;# 
   245  079A                     	;# 
   246  079B                     	;# 
   247  080C                     	;# 
   248  080D                     	;# 
   249  080E                     	;# 
   250  080F                     	;# 
   251  0810                     	;# 
   252  0811                     	;# 
   253  0812                     	;# 
   254  0813                     	;# 
   255  0814                     	;# 
   256  081A                     	;# 
   257  081A                     	;# 
   258  081B                     	;# 
   259  081C                     	;# 
   260  081C                     	;# 
   261  081D                     	;# 
   262  081E                     	;# 
   263  081F                     	;# 
   264  088C                     	;# 
   265  088D                     	;# 
   266  088E                     	;# 
   267  088F                     	;# 
   268  0890                     	;# 
   269  0891                     	;# 
   270  0892                     	;# 
   271  0893                     	;# 
   272  0895                     	;# 
   273  0896                     	;# 
   274  090C                     	;# 
   275  090E                     	;# 
   276  090F                     	;# 
   277  091F                     	;# 
   278  098F                     	;# 
   279  098F                     	;# 
   280  0990                     	;# 
   281  0991                     	;# 
   282  0992                     	;# 
   283  0993                     	;# 
   284  0994                     	;# 
   285  0995                     	;# 
   286  0996                     	;# 
   287  0997                     	;# 
   288  0A19                     	;# 
   289  0A19                     	;# 
   290  0A1A                     	;# 
   291  0A1A                     	;# 
   292  0A1B                     	;# 
   293  0A1B                     	;# 
   294  0A1B                     	;# 
   295  0A1C                     	;# 
   296  0A1C                     	;# 
   297  0A1D                     	;# 
   298  0A1D                     	;# 
   299  0A1E                     	;# 
   300  0A1E                     	;# 
   301  0A1F                     	;# 
   302  0A1F                     	;# 
   303  0A1F                     	;# 
   304  1E0F                     	;# 
   305  1E10                     	;# 
   306  1E11                     	;# 
   307  1E12                     	;# 
   308  1E13                     	;# 
   309  1E14                     	;# 
   310  1E15                     	;# 
   311  1E16                     	;# 
   312  1E17                     	;# 
   313  1E18                     	;# 
   314  1E19                     	;# 
   315  1E1A                     	;# 
   316  1E1B                     	;# 
   317  1E1C                     	;# 
   318  1E1D                     	;# 
   319  1E1E                     	;# 
   320  1E1F                     	;# 
   321  1E20                     	;# 
   322  1E21                     	;# 
   323  1E22                     	;# 
   324  1E23                     	;# 
   325  1E24                     	;# 
   326  1E25                     	;# 
   327  1E26                     	;# 
   328  1E27                     	;# 
   329  1E28                     	;# 
   330  1E29                     	;# 
   331  1E2A                     	;# 
   332  1E2B                     	;# 
   333  1E2C                     	;# 
   334  1E2D                     	;# 
   335  1E2E                     	;# 
   336  1E2F                     	;# 
   337  1E30                     	;# 
   338  1E31                     	;# 
   339  1E32                     	;# 
   340  1E33                     	;# 
   341  1E34                     	;# 
   342  1E35                     	;# 
   343  1E36                     	;# 
   344  1E37                     	;# 
   345  1E8F                     	;# 
   346  1E90                     	;# 
   347  1E91                     	;# 
   348  1E92                     	;# 
   349  1E93                     	;# 
   350  1E9C                     	;# 
   351  1EA1                     	;# 
   352  1EA2                     	;# 
   353  1EB1                     	;# 
   354  1EBB                     	;# 
   355  1EBC                     	;# 
   356  1EBD                     	;# 
   357  1EBE                     	;# 
   358  1EC3                     	;# 
   359  1EC5                     	;# 
   360  1EC6                     	;# 
   361  1EC7                     	;# 
   362  1EC8                     	;# 
   363  1EC9                     	;# 
   364  1ECA                     	;# 
   365  1ECB                     	;# 
   366  1ECC                     	;# 
   367  1ECD                     	;# 
   368  1ECE                     	;# 
   369  1F10                     	;# 
   370  1F11                     	;# 
   371  1F12                     	;# 
   372  1F13                     	;# 
   373  1F14                     	;# 
   374  1F15                     	;# 
   375  1F16                     	;# 
   376  1F17                     	;# 
   377  1F18                     	;# 
   378  1F19                     	;# 
   379  1F1A                     	;# 
   380  1F1B                     	;# 
   381  1F1C                     	;# 
   382  1F1D                     	;# 
   383  1F1E                     	;# 
   384  1F1F                     	;# 
   385  1F20                     	;# 
   386  1F21                     	;# 
   387  1F22                     	;# 
   388  1F23                     	;# 
   389  1F24                     	;# 
   390  1F25                     	;# 
   391  1F26                     	;# 
   392  1F27                     	;# 
   393  1F38                     	;# 
   394  1F39                     	;# 
   395  1F3A                     	;# 
   396  1F3B                     	;# 
   397  1F3C                     	;# 
   398  1F3D                     	;# 
   399  1F3E                     	;# 
   400  1F3F                     	;# 
   401  1F43                     	;# 
   402  1F44                     	;# 
   403  1F45                     	;# 
   404  1F46                     	;# 
   405  1F47                     	;# 
   406  1F48                     	;# 
   407  1F49                     	;# 
   408  1F4A                     	;# 
   409  1F4E                     	;# 
   410  1F4F                     	;# 
   411  1F50                     	;# 
   412  1F51                     	;# 
   413  1F52                     	;# 
   414  1F53                     	;# 
   415  1F54                     	;# 
   416  1F55                     	;# 
   417  1F65                     	;# 
   418  1F68                     	;# 
   419  1F69                     	;# 
   420  1F6A                     	;# 
   421  1F6B                     	;# 
   422  1FE4                     	;# 
   423  1FE5                     	;# 
   424  1FE6                     	;# 
   425  1FE7                     	;# 
   426  1FE8                     	;# 
   427  1FE8                     	;# 
   428  1FE9                     	;# 
   429  1FEA                     	;# 
   430  1FEB                     	;# 
   431  1FED                     	;# 
   432  1FEE                     	;# 
   433  1FEF                     	;# 
   434  0000                     	;# 
   435  0001                     	;# 
   436  0002                     	;# 
   437  0003                     	;# 
   438  0004                     	;# 
   439  0005                     	;# 
   440  0006                     	;# 
   441  0007                     	;# 
   442  0008                     	;# 
   443  0009                     	;# 
   444  000A                     	;# 
   445  000B                     	;# 
   446  000C                     	;# 
   447  000D                     	;# 
   448  000E                     	;# 
   449  0010                     	;# 
   450  0012                     	;# 
   451  0013                     	;# 
   452  0014                     	;# 
   453  0016                     	;# 
   454  0018                     	;# 
   455  0019                     	;# 
   456  001A                     	;# 
   457  009B                     	;# 
   458  009B                     	;# 
   459  009C                     	;# 
   460  009D                     	;# 
   461  009E                     	;# 
   462  009F                     	;# 
   463  0119                     	;# 
   464  0119                     	;# 
   465  0119                     	;# 
   466  011A                     	;# 
   467  011A                     	;# 
   468  011A                     	;# 
   469  011B                     	;# 
   470  011B                     	;# 
   471  011B                     	;# 
   472  011B                     	;# 
   473  011B                     	;# 
   474  011C                     	;# 
   475  011C                     	;# 
   476  011C                     	;# 
   477  011D                     	;# 
   478  011D                     	;# 
   479  011D                     	;# 
   480  011E                     	;# 
   481  011E                     	;# 
   482  011E                     	;# 
   483  011F                     	;# 
   484  011F                     	;# 
   485  011F                     	;# 
   486  011F                     	;# 
   487  011F                     	;# 
   488  018C                     	;# 
   489  018D                     	;# 
   490  018E                     	;# 
   491  018F                     	;# 
   492  0190                     	;# 
   493  0191                     	;# 
   494  0192                     	;# 
   495  0196                     	;# 
   496  0197                     	;# 
   497  0198                     	;# 
   498  0199                     	;# 
   499  019A                     	;# 
   500  019B                     	;# 
   501  019C                     	;# 
   502  020C                     	;# 
   503  020C                     	;# 
   504  020D                     	;# 
   505  020E                     	;# 
   506  020F                     	;# 
   507  020F                     	;# 
   508  0210                     	;# 
   509  0210                     	;# 
   510  0211                     	;# 
   511  0211                     	;# 
   512  028C                     	;# 
   513  028C                     	;# 
   514  028D                     	;# 
   515  028D                     	;# 
   516  028E                     	;# 
   517  028F                     	;# 
   518  0290                     	;# 
   519  0291                     	;# 
   520  030C                     	;# 
   521  030C                     	;# 
   522  030D                     	;# 
   523  030E                     	;# 
   524  030F                     	;# 
   525  0310                     	;# 
   526  0310                     	;# 
   527  0311                     	;# 
   528  0312                     	;# 
   529  0313                     	;# 
   530  0314                     	;# 
   531  0314                     	;# 
   532  0315                     	;# 
   533  0316                     	;# 
   534  0318                     	;# 
   535  0318                     	;# 
   536  0319                     	;# 
   537  031A                     	;# 
   538  031C                     	;# 
   539  031C                     	;# 
   540  031D                     	;# 
   541  031E                     	;# 
   542  038C                     	;# 
   543  038C                     	;# 
   544  038D                     	;# 
   545  038E                     	;# 
   546  058C                     	;# 
   547  058C                     	;# 
   548  058D                     	;# 
   549  058E                     	;# 
   550  058F                     	;# 
   551  058F                     	;# 
   552  0590                     	;# 
   553  0591                     	;# 
   554  0592                     	;# 
   555  0593                     	;# 
   556  059C                     	;# 
   557  059C                     	;# 
   558  059D                     	;# 
   559  059D                     	;# 
   560  059E                     	;# 
   561  059F                     	;# 
   562  060C                     	;# 
   563  060D                     	;# 
   564  060E                     	;# 
   565  060F                     	;# 
   566  0610                     	;# 
   567  0611                     	;# 
   568  0612                     	;# 
   569  0613                     	;# 
   570  0614                     	;# 
   571  070C                     	;# 
   572  070D                     	;# 
   573  070E                     	;# 
   574  070F                     	;# 
   575  0710                     	;# 
   576  0711                     	;# 
   577  0712                     	;# 
   578  0713                     	;# 
   579  0716                     	;# 
   580  0717                     	;# 
   581  0718                     	;# 
   582  0719                     	;# 
   583  071A                     	;# 
   584  071B                     	;# 
   585  071C                     	;# 
   586  071D                     	;# 
   587  0796                     	;# 
   588  0797                     	;# 
   589  0798                     	;# 
   590  0799                     	;# 
   591  079A                     	;# 
   592  079B                     	;# 
   593  080C                     	;# 
   594  080D                     	;# 
   595  080E                     	;# 
   596  080F                     	;# 
   597  0810                     	;# 
   598  0811                     	;# 
   599  0812                     	;# 
   600  0813                     	;# 
   601  0814                     	;# 
   602  081A                     	;# 
   603  081A                     	;# 
   604  081B                     	;# 
   605  081C                     	;# 
   606  081C                     	;# 
   607  081D                     	;# 
   608  081E                     	;# 
   609  081F                     	;# 
   610  088C                     	;# 
   611  088D                     	;# 
   612  088E                     	;# 
   613  088F                     	;# 
   614  0890                     	;# 
   615  0891                     	;# 
   616  0892                     	;# 
   617  0893                     	;# 
   618  0895                     	;# 
   619  0896                     	;# 
   620  090C                     	;# 
   621  090E                     	;# 
   622  090F                     	;# 
   623  091F                     	;# 
   624  098F                     	;# 
   625  098F                     	;# 
   626  0990                     	;# 
   627  0991                     	;# 
   628  0992                     	;# 
   629  0993                     	;# 
   630  0994                     	;# 
   631  0995                     	;# 
   632  0996                     	;# 
   633  0997                     	;# 
   634  0A19                     	;# 
   635  0A19                     	;# 
   636  0A1A                     	;# 
   637  0A1A                     	;# 
   638  0A1B                     	;# 
   639  0A1B                     	;# 
   640  0A1B                     	;# 
   641  0A1C                     	;# 
   642  0A1C                     	;# 
   643  0A1D                     	;# 
   644  0A1D                     	;# 
   645  0A1E                     	;# 
   646  0A1E                     	;# 
   647  0A1F                     	;# 
   648  0A1F                     	;# 
   649  0A1F                     	;# 
   650  1E0F                     	;# 
   651  1E10                     	;# 
   652  1E11                     	;# 
   653  1E12                     	;# 
   654  1E13                     	;# 
   655  1E14                     	;# 
   656  1E15                     	;# 
   657  1E16                     	;# 
   658  1E17                     	;# 
   659  1E18                     	;# 
   660  1E19                     	;# 
   661  1E1A                     	;# 
   662  1E1B                     	;# 
   663  1E1C                     	;# 
   664  1E1D                     	;# 
   665  1E1E                     	;# 
   666  1E1F                     	;# 
   667  1E20                     	;# 
   668  1E21                     	;# 
   669  1E22                     	;# 
   670  1E23                     	;# 
   671  1E24                     	;# 
   672  1E25                     	;# 
   673  1E26                     	;# 
   674  1E27                     	;# 
   675  1E28                     	;# 
   676  1E29                     	;# 
   677  1E2A                     	;# 
   678  1E2B                     	;# 
   679  1E2C                     	;# 
   680  1E2D                     	;# 
   681  1E2E                     	;# 
   682  1E2F                     	;# 
   683  1E30                     	;# 
   684  1E31                     	;# 
   685  1E32                     	;# 
   686  1E33                     	;# 
   687  1E34                     	;# 
   688  1E35                     	;# 
   689  1E36                     	;# 
   690  1E37                     	;# 
   691  1E8F                     	;# 
   692  1E90                     	;# 
   693  1E91                     	;# 
   694  1E92                     	;# 
   695  1E93                     	;# 
   696  1E9C                     	;# 
   697  1EA1                     	;# 
   698  1EA2                     	;# 
   699  1EB1                     	;# 
   700  1EBB                     	;# 
   701  1EBC                     	;# 
   702  1EBD                     	;# 
   703  1EBE                     	;# 
   704  1EC3                     	;# 
   705  1EC5                     	;# 
   706  1EC6                     	;# 
   707  1EC7                     	;# 
   708  1EC8                     	;# 
   709  1EC9                     	;# 
   710  1ECA                     	;# 
   711  1ECB                     	;# 
   712  1ECC                     	;# 
   713  1ECD                     	;# 
   714  1ECE                     	;# 
   715  1F10                     	;# 
   716  1F11                     	;# 
   717  1F12                     	;# 
   718  1F13                     	;# 
   719  1F14                     	;# 
   720  1F15                     	;# 
   721  1F16                     	;# 
   722  1F17                     	;# 
   723  1F18                     	;# 
   724  1F19                     	;# 
   725  1F1A                     	;# 
   726  1F1B                     	;# 
   727  1F1C                     	;# 
   728  1F1D                     	;# 
   729  1F1E                     	;# 
   730  1F1F                     	;# 
   731  1F20                     	;# 
   732  1F21                     	;# 
   733  1F22                     	;# 
   734  1F23                     	;# 
   735  1F24                     	;# 
   736  1F25                     	;# 
   737  1F26                     	;# 
   738  1F27                     	;# 
   739  1F38                     	;# 
   740  1F39                     	;# 
   741  1F3A                     	;# 
   742  1F3B                     	;# 
   743  1F3C                     	;# 
   744  1F3D                     	;# 
   745  1F3E                     	;# 
   746  1F3F                     	;# 
   747  1F43                     	;# 
   748  1F44                     	;# 
   749  1F45                     	;# 
   750  1F46                     	;# 
   751  1F47                     	;# 
   752  1F48                     	;# 
   753  1F49                     	;# 
   754  1F4A                     	;# 
   755  1F4E                     	;# 
   756  1F4F                     	;# 
   757  1F50                     	;# 
   758  1F51                     	;# 
   759  1F52                     	;# 
   760  1F53                     	;# 
   761  1F54                     	;# 
   762  1F55                     	;# 
   763  1F65                     	;# 
   764  1F68                     	;# 
   765  1F69                     	;# 
   766  1F6A                     	;# 
   767  1F6B                     	;# 
   768  1FE4                     	;# 
   769  1FE5                     	;# 
   770  1FE6                     	;# 
   771  1FE7                     	;# 
   772  1FE8                     	;# 
   773  1FE8                     	;# 
   774  1FE9                     	;# 
   775  1FEA                     	;# 
   776  1FEB                     	;# 
   777  1FED                     	;# 
   778  1FEE                     	;# 
   779  1FEF                     	;# 
   780  0000                     	;# 
   781  0001                     	;# 
   782  0002                     	;# 
   783  0003                     	;# 
   784  0004                     	;# 
   785  0005                     	;# 
   786  0006                     	;# 
   787  0007                     	;# 
   788  0008                     	;# 
   789  0009                     	;# 
   790  000A                     	;# 
   791  000B                     	;# 
   792  000C                     	;# 
   793  000D                     	;# 
   794  000E                     	;# 
   795  0010                     	;# 
   796  0012                     	;# 
   797  0013                     	;# 
   798  0014                     	;# 
   799  0016                     	;# 
   800  0018                     	;# 
   801  0019                     	;# 
   802  001A                     	;# 
   803  009B                     	;# 
   804  009B                     	;# 
   805  009C                     	;# 
   806  009D                     	;# 
   807  009E                     	;# 
   808  009F                     	;# 
   809  0119                     	;# 
   810  0119                     	;# 
   811  0119                     	;# 
   812  011A                     	;# 
   813  011A                     	;# 
   814  011A                     	;# 
   815  011B                     	;# 
   816  011B                     	;# 
   817  011B                     	;# 
   818  011B                     	;# 
   819  011B                     	;# 
   820  011C                     	;# 
   821  011C                     	;# 
   822  011C                     	;# 
   823  011D                     	;# 
   824  011D                     	;# 
   825  011D                     	;# 
   826  011E                     	;# 
   827  011E                     	;# 
   828  011E                     	;# 
   829  011F                     	;# 
   830  011F                     	;# 
   831  011F                     	;# 
   832  011F                     	;# 
   833  011F                     	;# 
   834  018C                     	;# 
   835  018D                     	;# 
   836  018E                     	;# 
   837  018F                     	;# 
   838  0190                     	;# 
   839  0191                     	;# 
   840  0192                     	;# 
   841  0196                     	;# 
   842  0197                     	;# 
   843  0198                     	;# 
   844  0199                     	;# 
   845  019A                     	;# 
   846  019B                     	;# 
   847  019C                     	;# 
   848  020C                     	;# 
   849  020C                     	;# 
   850  020D                     	;# 
   851  020E                     	;# 
   852  020F                     	;# 
   853  020F                     	;# 
   854  0210                     	;# 
   855  0210                     	;# 
   856  0211                     	;# 
   857  0211                     	;# 
   858  028C                     	;# 
   859  028C                     	;# 
   860  028D                     	;# 
   861  028D                     	;# 
   862  028E                     	;# 
   863  028F                     	;# 
   864  0290                     	;# 
   865  0291                     	;# 
   866  030C                     	;# 
   867  030C                     	;# 
   868  030D                     	;# 
   869  030E                     	;# 
   870  030F                     	;# 
   871  0310                     	;# 
   872  0310                     	;# 
   873  0311                     	;# 
   874  0312                     	;# 
   875  0313                     	;# 
   876  0314                     	;# 
   877  0314                     	;# 
   878  0315                     	;# 
   879  0316                     	;# 
   880  0318                     	;# 
   881  0318                     	;# 
   882  0319                     	;# 
   883  031A                     	;# 
   884  031C                     	;# 
   885  031C                     	;# 
   886  031D                     	;# 
   887  031E                     	;# 
   888  038C                     	;# 
   889  038C                     	;# 
   890  038D                     	;# 
   891  038E                     	;# 
   892  058C                     	;# 
   893  058C                     	;# 
   894  058D                     	;# 
   895  058E                     	;# 
   896  058F                     	;# 
   897  058F                     	;# 
   898  0590                     	;# 
   899  0591                     	;# 
   900  0592                     	;# 
   901  0593                     	;# 
   902  059C                     	;# 
   903  059C                     	;# 
   904  059D                     	;# 
   905  059D                     	;# 
   906  059E                     	;# 
   907  059F                     	;# 
   908  060C                     	;# 
   909  060D                     	;# 
   910  060E                     	;# 
   911  060F                     	;# 
   912  0610                     	;# 
   913  0611                     	;# 
   914  0612                     	;# 
   915  0613                     	;# 
   916  0614                     	;# 
   917  070C                     	;# 
   918  070D                     	;# 
   919  070E                     	;# 
   920  070F                     	;# 
   921  0710                     	;# 
   922  0711                     	;# 
   923  0712                     	;# 
   924  0713                     	;# 
   925  0716                     	;# 
   926  0717                     	;# 
   927  0718                     	;# 
   928  0719                     	;# 
   929  071A                     	;# 
   930  071B                     	;# 
   931  071C                     	;# 
   932  071D                     	;# 
   933  0796                     	;# 
   934  0797                     	;# 
   935  0798                     	;# 
   936  0799                     	;# 
   937  079A                     	;# 
   938  079B                     	;# 
   939  080C                     	;# 
   940  080D                     	;# 
   941  080E                     	;# 
   942  080F                     	;# 
   943  0810                     	;# 
   944  0811                     	;# 
   945  0812                     	;# 
   946  0813                     	;# 
   947  0814                     	;# 
   948  081A                     	;# 
   949  081A                     	;# 
   950  081B                     	;# 
   951  081C                     	;# 
   952  081C                     	;# 
   953  081D                     	;# 
   954  081E                     	;# 
   955  081F                     	;# 
   956  088C                     	;# 
   957  088D                     	;# 
   958  088E                     	;# 
   959  088F                     	;# 
   960  0890                     	;# 
   961  0891                     	;# 
   962  0892                     	;# 
   963  0893                     	;# 
   964  0895                     	;# 
   965  0896                     	;# 
   966  090C                     	;# 
   967  090E                     	;# 
   968  090F                     	;# 
   969  091F                     	;# 
   970  098F                     	;# 
   971  098F                     	;# 
   972  0990                     	;# 
   973  0991                     	;# 
   974  0992                     	;# 
   975  0993                     	;# 
   976  0994                     	;# 
   977  0995                     	;# 
   978  0996                     	;# 
   979  0997                     	;# 
   980  0A19                     	;# 
   981  0A19                     	;# 
   982  0A1A                     	;# 
   983  0A1A                     	;# 
   984  0A1B                     	;# 
   985  0A1B                     	;# 
   986  0A1B                     	;# 
   987  0A1C                     	;# 
   988  0A1C                     	;# 
   989  0A1D                     	;# 
   990  0A1D                     	;# 
   991  0A1E                     	;# 
   992  0A1E                     	;# 
   993  0A1F                     	;# 
   994  0A1F                     	;# 
   995  0A1F                     	;# 
   996  1E0F                     	;# 
   997  1E10                     	;# 
   998  1E11                     	;# 
   999  1E12                     	;# 
  1000  1E13                     	;# 
  1001  1E14                     	;# 
  1002  1E15                     	;# 
  1003  1E16                     	;# 
  1004  1E17                     	;# 
  1005  1E18                     	;# 
  1006  1E19                     	;# 
  1007  1E1A                     	;# 
  1008  1E1B                     	;# 
  1009  1E1C                     	;# 
  1010  1E1D                     	;# 
  1011  1E1E                     	;# 
  1012  1E1F                     	;# 
  1013  1E20                     	;# 
  1014  1E21                     	;# 
  1015  1E22                     	;# 
  1016  1E23                     	;# 
  1017  1E24                     	;# 
  1018  1E25                     	;# 
  1019  1E26                     	;# 
  1020  1E27                     	;# 
  1021  1E28                     	;# 
  1022  1E29                     	;# 
  1023  1E2A                     	;# 
  1024  1E2B                     	;# 
  1025  1E2C                     	;# 
  1026  1E2D                     	;# 
  1027  1E2E                     	;# 
  1028  1E2F                     	;# 
  1029  1E30                     	;# 
  1030  1E31                     	;# 
  1031  1E32                     	;# 
  1032  1E33                     	;# 
  1033  1E34                     	;# 
  1034  1E35                     	;# 
  1035  1E36                     	;# 
  1036  1E37                     	;# 
  1037  1E8F                     	;# 
  1038  1E90                     	;# 
  1039  1E91                     	;# 
  1040  1E92                     	;# 
  1041  1E93                     	;# 
  1042  1E9C                     	;# 
  1043  1EA1                     	;# 
  1044  1EA2                     	;# 
  1045  1EB1                     	;# 
  1046  1EBB                     	;# 
  1047  1EBC                     	;# 
  1048  1EBD                     	;# 
  1049  1EBE                     	;# 
  1050  1EC3                     	;# 
  1051  1EC5                     	;# 
  1052  1EC6                     	;# 
  1053  1EC7                     	;# 
  1054  1EC8                     	;# 
  1055  1EC9                     	;# 
  1056  1ECA                     	;# 
  1057  1ECB                     	;# 
  1058  1ECC                     	;# 
  1059  1ECD                     	;# 
  1060  1ECE                     	;# 
  1061  1F10                     	;# 
  1062  1F11                     	;# 
  1063  1F12                     	;# 
  1064  1F13                     	;# 
  1065  1F14                     	;# 
  1066  1F15                     	;# 
  1067  1F16                     	;# 
  1068  1F17                     	;# 
  1069  1F18                     	;# 
  1070  1F19                     	;# 
  1071  1F1A                     	;# 
  1072  1F1B                     	;# 
  1073  1F1C                     	;# 
  1074  1F1D                     	;# 
  1075  1F1E                     	;# 
  1076  1F1F                     	;# 
  1077  1F20                     	;# 
  1078  1F21                     	;# 
  1079  1F22                     	;# 
  1080  1F23                     	;# 
  1081  1F24                     	;# 
  1082  1F25                     	;# 
  1083  1F26                     	;# 
  1084  1F27                     	;# 
  1085  1F38                     	;# 
  1086  1F39                     	;# 
  1087  1F3A                     	;# 
  1088  1F3B                     	;# 
  1089  1F3C                     	;# 
  1090  1F3D                     	;# 
  1091  1F3E                     	;# 
  1092  1F3F                     	;# 
  1093  1F43                     	;# 
  1094  1F44                     	;# 
  1095  1F45                     	;# 
  1096  1F46                     	;# 
  1097  1F47                     	;# 
  1098  1F48                     	;# 
  1099  1F49                     	;# 
  1100  1F4A                     	;# 
  1101  1F4E                     	;# 
  1102  1F4F                     	;# 
  1103  1F50                     	;# 
  1104  1F51                     	;# 
  1105  1F52                     	;# 
  1106  1F53                     	;# 
  1107  1F54                     	;# 
  1108  1F55                     	;# 
  1109  1F65                     	;# 
  1110  1F68                     	;# 
  1111  1F69                     	;# 
  1112  1F6A                     	;# 
  1113  1F6B                     	;# 
  1114  1FE4                     	;# 
  1115  1FE5                     	;# 
  1116  1FE6                     	;# 
  1117  1FE7                     	;# 
  1118  1FE8                     	;# 
  1119  1FE8                     	;# 
  1120  1FE9                     	;# 
  1121  1FEA                     	;# 
  1122  1FEB                     	;# 
  1123  1FED                     	;# 
  1124  1FEE                     	;# 
  1125  1FEF                     	;# 
  1126  0000                     	;# 
  1127  0001                     	;# 
  1128  0002                     	;# 
  1129  0003                     	;# 
  1130  0004                     	;# 
  1131  0005                     	;# 
  1132  0006                     	;# 
  1133  0007                     	;# 
  1134  0008                     	;# 
  1135  0009                     	;# 
  1136  000A                     	;# 
  1137  000B                     	;# 
  1138  000C                     	;# 
  1139  000D                     	;# 
  1140  000E                     	;# 
  1141  0010                     	;# 
  1142  0012                     	;# 
  1143  0013                     	;# 
  1144  0014                     	;# 
  1145  0016                     	;# 
  1146  0018                     	;# 
  1147  0019                     	;# 
  1148  001A                     	;# 
  1149  009B                     	;# 
  1150  009B                     	;# 
  1151  009C                     	;# 
  1152  009D                     	;# 
  1153  009E                     	;# 
  1154  009F                     	;# 
  1155  0119                     	;# 
  1156  0119                     	;# 
  1157  0119                     	;# 
  1158  011A                     	;# 
  1159  011A                     	;# 
  1160  011A                     	;# 
  1161  011B                     	;# 
  1162  011B                     	;# 
  1163  011B                     	;# 
  1164  011B                     	;# 
  1165  011B                     	;# 
  1166  011C                     	;# 
  1167  011C                     	;# 
  1168  011C                     	;# 
  1169  011D                     	;# 
  1170  011D                     	;# 
  1171  011D                     	;# 
  1172  011E                     	;# 
  1173  011E                     	;# 
  1174  011E                     	;# 
  1175  011F                     	;# 
  1176  011F                     	;# 
  1177  011F                     	;# 
  1178  011F                     	;# 
  1179  011F                     	;# 
  1180  018C                     	;# 
  1181  018D                     	;# 
  1182  018E                     	;# 
  1183  018F                     	;# 
  1184  0190                     	;# 
  1185  0191                     	;# 
  1186  0192                     	;# 
  1187  0196                     	;# 
  1188  0197                     	;# 
  1189  0198                     	;# 
  1190  0199                     	;# 
  1191  019A                     	;# 
  1192  019B                     	;# 
  1193  019C                     	;# 
  1194  020C                     	;# 
  1195  020C                     	;# 
  1196  020D                     	;# 
  1197  020E                     	;# 
  1198  020F                     	;# 
  1199  020F                     	;# 
  1200  0210                     	;# 
  1201  0210                     	;# 
  1202  0211                     	;# 
  1203  0211                     	;# 
  1204  028C                     	;# 
  1205  028C                     	;# 
  1206  028D                     	;# 
  1207  028D                     	;# 
  1208  028E                     	;# 
  1209  028F                     	;# 
  1210  0290                     	;# 
  1211  0291                     	;# 
  1212  030C                     	;# 
  1213  030C                     	;# 
  1214  030D                     	;# 
  1215  030E                     	;# 
  1216  030F                     	;# 
  1217  0310                     	;# 
  1218  0310                     	;# 
  1219  0311                     	;# 
  1220  0312                     	;# 
  1221  0313                     	;# 
  1222  0314                     	;# 
  1223  0314                     	;# 
  1224  0315                     	;# 
  1225  0316                     	;# 
  1226  0318                     	;# 
  1227  0318                     	;# 
  1228  0319                     	;# 
  1229  031A                     	;# 
  1230  031C                     	;# 
  1231  031C                     	;# 
  1232  031D                     	;# 
  1233  031E                     	;# 
  1234  038C                     	;# 
  1235  038C                     	;# 
  1236  038D                     	;# 
  1237  038E                     	;# 
  1238  058C                     	;# 
  1239  058C                     	;# 
  1240  058D                     	;# 
  1241  058E                     	;# 
  1242  058F                     	;# 
  1243  058F                     	;# 
  1244  0590                     	;# 
  1245  0591                     	;# 
  1246  0592                     	;# 
  1247  0593                     	;# 
  1248  059C                     	;# 
  1249  059C                     	;# 
  1250  059D                     	;# 
  1251  059D                     	;# 
  1252  059E                     	;# 
  1253  059F                     	;# 
  1254  060C                     	;# 
  1255  060D                     	;# 
  1256  060E                     	;# 
  1257  060F                     	;# 
  1258  0610                     	;# 
  1259  0611                     	;# 
  1260  0612                     	;# 
  1261  0613                     	;# 
  1262  0614                     	;# 
  1263  070C                     	;# 
  1264  070D                     	;# 
  1265  070E                     	;# 
  1266  070F                     	;# 
  1267  0710                     	;# 
  1268  0711                     	;# 
  1269  0712                     	;# 
  1270  0713                     	;# 
  1271  0716                     	;# 
  1272  0717                     	;# 
  1273  0718                     	;# 
  1274  0719                     	;# 
  1275  071A                     	;# 
  1276  071B                     	;# 
  1277  071C                     	;# 
  1278  071D                     	;# 
  1279  0796                     	;# 
  1280  0797                     	;# 
  1281  0798                     	;# 
  1282  0799                     	;# 
  1283  079A                     	;# 
  1284  079B                     	;# 
  1285  080C                     	;# 
  1286  080D                     	;# 
  1287  080E                     	;# 
  1288  080F                     	;# 
  1289  0810                     	;# 
  1290  0811                     	;# 
  1291  0812                     	;# 
  1292  0813                     	;# 
  1293  0814                     	;# 
  1294  081A                     	;# 
  1295  081A                     	;# 
  1296  081B                     	;# 
  1297  081C                     	;# 
  1298  081C                     	;# 
  1299  081D                     	;# 
  1300  081E                     	;# 
  1301  081F                     	;# 
  1302  088C                     	;# 
  1303  088D                     	;# 
  1304  088E                     	;# 
  1305  088F                     	;# 
  1306  0890                     	;# 
  1307  0891                     	;# 
  1308  0892                     	;# 
  1309  0893                     	;# 
  1310  0895                     	;# 
  1311  0896                     	;# 
  1312  090C                     	;# 
  1313  090E                     	;# 
  1314  090F                     	;# 
  1315  091F                     	;# 
  1316  098F                     	;# 
  1317  098F                     	;# 
  1318  0990                     	;# 
  1319  0991                     	;# 
  1320  0992                     	;# 
  1321  0993                     	;# 
  1322  0994                     	;# 
  1323  0995                     	;# 
  1324  0996                     	;# 
  1325  0997                     	;# 
  1326  0A19                     	;# 
  1327  0A19                     	;# 
  1328  0A1A                     	;# 
  1329  0A1A                     	;# 
  1330  0A1B                     	;# 
  1331  0A1B                     	;# 
  1332  0A1B                     	;# 
  1333  0A1C                     	;# 
  1334  0A1C                     	;# 
  1335  0A1D                     	;# 
  1336  0A1D                     	;# 
  1337  0A1E                     	;# 
  1338  0A1E                     	;# 
  1339  0A1F                     	;# 
  1340  0A1F                     	;# 
  1341  0A1F                     	;# 
  1342  1E0F                     	;# 
  1343  1E10                     	;# 
  1344  1E11                     	;# 
  1345  1E12                     	;# 
  1346  1E13                     	;# 
  1347  1E14                     	;# 
  1348  1E15                     	;# 
  1349  1E16                     	;# 
  1350  1E17                     	;# 
  1351  1E18                     	;# 
  1352  1E19                     	;# 
  1353  1E1A                     	;# 
  1354  1E1B                     	;# 
  1355  1E1C                     	;# 
  1356  1E1D                     	;# 
  1357  1E1E                     	;# 
  1358  1E1F                     	;# 
  1359  1E20                     	;# 
  1360  1E21                     	;# 
  1361  1E22                     	;# 
  1362  1E23                     	;# 
  1363  1E24                     	;# 
  1364  1E25                     	;# 
  1365  1E26                     	;# 
  1366  1E27                     	;# 
  1367  1E28                     	;# 
  1368  1E29                     	;# 
  1369  1E2A                     	;# 
  1370  1E2B                     	;# 
  1371  1E2C                     	;# 
  1372  1E2D                     	;# 
  1373  1E2E                     	;# 
  1374  1E2F                     	;# 
  1375  1E30                     	;# 
  1376  1E31                     	;# 
  1377  1E32                     	;# 
  1378  1E33                     	;# 
  1379  1E34                     	;# 
  1380  1E35                     	;# 
  1381  1E36                     	;# 
  1382  1E37                     	;# 
  1383  1E8F                     	;# 
  1384  1E90                     	;# 
  1385  1E91                     	;# 
  1386  1E92                     	;# 
  1387  1E93                     	;# 
  1388  1E9C                     	;# 
  1389  1EA1                     	;# 
  1390  1EA2                     	;# 
  1391  1EB1                     	;# 
  1392  1EBB                     	;# 
  1393  1EBC                     	;# 
  1394  1EBD                     	;# 
  1395  1EBE                     	;# 
  1396  1EC3                     	;# 
  1397  1EC5                     	;# 
  1398  1EC6                     	;# 
  1399  1EC7                     	;# 
  1400  1EC8                     	;# 
  1401  1EC9                     	;# 
  1402  1ECA                     	;# 
  1403  1ECB                     	;# 
  1404  1ECC                     	;# 
  1405  1ECD                     	;# 
  1406  1ECE                     	;# 
  1407  1F10                     	;# 
  1408  1F11                     	;# 
  1409  1F12                     	;# 
  1410  1F13                     	;# 
  1411  1F14                     	;# 
  1412  1F15                     	;# 
  1413  1F16                     	;# 
  1414  1F17                     	;# 
  1415  1F18                     	;# 
  1416  1F19                     	;# 
  1417  1F1A                     	;# 
  1418  1F1B                     	;# 
  1419  1F1C                     	;# 
  1420  1F1D                     	;# 
  1421  1F1E                     	;# 
  1422  1F1F                     	;# 
  1423  1F20                     	;# 
  1424  1F21                     	;# 
  1425  1F22                     	;# 
  1426  1F23                     	;# 
  1427  1F24                     	;# 
  1428  1F25                     	;# 
  1429  1F26                     	;# 
  1430  1F27                     	;# 
  1431  1F38                     	;# 
  1432  1F39                     	;# 
  1433  1F3A                     	;# 
  1434  1F3B                     	;# 
  1435  1F3C                     	;# 
  1436  1F3D                     	;# 
  1437  1F3E                     	;# 
  1438  1F3F                     	;# 
  1439  1F43                     	;# 
  1440  1F44                     	;# 
  1441  1F45                     	;# 
  1442  1F46                     	;# 
  1443  1F47                     	;# 
  1444  1F48                     	;# 
  1445  1F49                     	;# 
  1446  1F4A                     	;# 
  1447  1F4E                     	;# 
  1448  1F4F                     	;# 
  1449  1F50                     	;# 
  1450  1F51                     	;# 
  1451  1F52                     	;# 
  1452  1F53                     	;# 
  1453  1F54                     	;# 
  1454  1F55                     	;# 
  1455  1F65                     	;# 
  1456  1F68                     	;# 
  1457  1F69                     	;# 
  1458  1F6A                     	;# 
  1459  1F6B                     	;# 
  1460  1FE4                     	;# 
  1461  1FE5                     	;# 
  1462  1FE6                     	;# 
  1463  1FE7                     	;# 
  1464  1FE8                     	;# 
  1465  1FE8                     	;# 
  1466  1FE9                     	;# 
  1467  1FEA                     	;# 
  1468  1FEB                     	;# 
  1469  1FED                     	;# 
  1470  1FEE                     	;# 
  1471  1FEF                     	;# 
  1472  0000                     	;# 
  1473  0001                     	;# 
  1474  0002                     	;# 
  1475  0003                     	;# 
  1476  0004                     	;# 
  1477  0005                     	;# 
  1478  0006                     	;# 
  1479  0007                     	;# 
  1480  0008                     	;# 
  1481  0009                     	;# 
  1482  000A                     	;# 
  1483  000B                     	;# 
  1484  000C                     	;# 
  1485  000D                     	;# 
  1486  000E                     	;# 
  1487  0010                     	;# 
  1488  0012                     	;# 
  1489  0013                     	;# 
  1490  0014                     	;# 
  1491  0016                     	;# 
  1492  0018                     	;# 
  1493  0019                     	;# 
  1494  001A                     	;# 
  1495  009B                     	;# 
  1496  009B                     	;# 
  1497  009C                     	;# 
  1498  009D                     	;# 
  1499  009E                     	;# 
  1500  009F                     	;# 
  1501  0119                     	;# 
  1502  0119                     	;# 
  1503  0119                     	;# 
  1504  011A                     	;# 
  1505  011A                     	;# 
  1506  011A                     	;# 
  1507  011B                     	;# 
  1508  011B                     	;# 
  1509  011B                     	;# 
  1510  011B                     	;# 
  1511  011B                     	;# 
  1512  011C                     	;# 
  1513  011C                     	;# 
  1514  011C                     	;# 
  1515  011D                     	;# 
  1516  011D                     	;# 
  1517  011D                     	;# 
  1518  011E                     	;# 
  1519  011E                     	;# 
  1520  011E                     	;# 
  1521  011F                     	;# 
  1522  011F                     	;# 
  1523  011F                     	;# 
  1524  011F                     	;# 
  1525  011F                     	;# 
  1526  018C                     	;# 
  1527  018D                     	;# 
  1528  018E                     	;# 
  1529  018F                     	;# 
  1530  0190                     	;# 
  1531  0191                     	;# 
  1532  0192                     	;# 
  1533  0196                     	;# 
  1534  0197                     	;# 
  1535  0198                     	;# 
  1536  0199                     	;# 
  1537  019A                     	;# 
  1538  019B                     	;# 
  1539  019C                     	;# 
  1540  020C                     	;# 
  1541  020C                     	;# 
  1542  020D                     	;# 
  1543  020E                     	;# 
  1544  020F                     	;# 
  1545  020F                     	;# 
  1546  0210                     	;# 
  1547  0210                     	;# 
  1548  0211                     	;# 
  1549  0211                     	;# 
  1550  028C                     	;# 
  1551  028C                     	;# 
  1552  028D                     	;# 
  1553  028D                     	;# 
  1554  028E                     	;# 
  1555  028F                     	;# 
  1556  0290                     	;# 
  1557  0291                     	;# 
  1558  030C                     	;# 
  1559  030C                     	;# 
  1560  030D                     	;# 
  1561  030E                     	;# 
  1562  030F                     	;# 
  1563  0310                     	;# 
  1564  0310                     	;# 
  1565  0311                     	;# 
  1566  0312                     	;# 
  1567  0313                     	;# 
  1568  0314                     	;# 
  1569  0314                     	;# 
  1570  0315                     	;# 
  1571  0316                     	;# 
  1572  0318                     	;# 
  1573  0318                     	;# 
  1574  0319                     	;# 
  1575  031A                     	;# 
  1576  031C                     	;# 
  1577  031C                     	;# 
  1578  031D                     	;# 
  1579  031E                     	;# 
  1580  038C                     	;# 
  1581  038C                     	;# 
  1582  038D                     	;# 
  1583  038E                     	;# 
  1584  058C                     	;# 
  1585  058C                     	;# 
  1586  058D                     	;# 
  1587  058E                     	;# 
  1588  058F                     	;# 
  1589  058F                     	;# 
  1590  0590                     	;# 
  1591  0591                     	;# 
  1592  0592                     	;# 
  1593  0593                     	;# 
  1594  059C                     	;# 
  1595  059C                     	;# 
  1596  059D                     	;# 
  1597  059D                     	;# 
  1598  059E                     	;# 
  1599  059F                     	;# 
  1600  060C                     	;# 
  1601  060D                     	;# 
  1602  060E                     	;# 
  1603  060F                     	;# 
  1604  0610                     	;# 
  1605  0611                     	;# 
  1606  0612                     	;# 
  1607  0613                     	;# 
  1608  0614                     	;# 
  1609  070C                     	;# 
  1610  070D                     	;# 
  1611  070E                     	;# 
  1612  070F                     	;# 
  1613  0710                     	;# 
  1614  0711                     	;# 
  1615  0712                     	;# 
  1616  0713                     	;# 
  1617  0716                     	;# 
  1618  0717                     	;# 
  1619  0718                     	;# 
  1620  0719                     	;# 
  1621  071A                     	;# 
  1622  071B                     	;# 
  1623  071C                     	;# 
  1624  071D                     	;# 
  1625  0796                     	;# 
  1626  0797                     	;# 
  1627  0798                     	;# 
  1628  0799                     	;# 
  1629  079A                     	;# 
  1630  079B                     	;# 
  1631  080C                     	;# 
  1632  080D                     	;# 
  1633  080E                     	;# 
  1634  080F                     	;# 
  1635  0810                     	;# 
  1636  0811                     	;# 
  1637  0812                     	;# 
  1638  0813                     	;# 
  1639  0814                     	;# 
  1640  081A                     	;# 
  1641  081A                     	;# 
  1642  081B                     	;# 
  1643  081C                     	;# 
  1644  081C                     	;# 
  1645  081D                     	;# 
  1646  081E                     	;# 
  1647  081F                     	;# 
  1648  088C                     	;# 
  1649  088D                     	;# 
  1650  088E                     	;# 
  1651  088F                     	;# 
  1652  0890                     	;# 
  1653  0891                     	;# 
  1654  0892                     	;# 
  1655  0893                     	;# 
  1656  0895                     	;# 
  1657  0896                     	;# 
  1658  090C                     	;# 
  1659  090E                     	;# 
  1660  090F                     	;# 
  1661  091F                     	;# 
  1662  098F                     	;# 
  1663  098F                     	;# 
  1664  0990                     	;# 
  1665  0991                     	;# 
  1666  0992                     	;# 
  1667  0993                     	;# 
  1668  0994                     	;# 
  1669  0995                     	;# 
  1670  0996                     	;# 
  1671  0997                     	;# 
  1672  0A19                     	;# 
  1673  0A19                     	;# 
  1674  0A1A                     	;# 
  1675  0A1A                     	;# 
  1676  0A1B                     	;# 
  1677  0A1B                     	;# 
  1678  0A1B                     	;# 
  1679  0A1C                     	;# 
  1680  0A1C                     	;# 
  1681  0A1D                     	;# 
  1682  0A1D                     	;# 
  1683  0A1E                     	;# 
  1684  0A1E                     	;# 
  1685  0A1F                     	;# 
  1686  0A1F                     	;# 
  1687  0A1F                     	;# 
  1688  1E0F                     	;# 
  1689  1E10                     	;# 
  1690  1E11                     	;# 
  1691  1E12                     	;# 
  1692  1E13                     	;# 
  1693  1E14                     	;# 
  1694  1E15                     	;# 
  1695  1E16                     	;# 
  1696  1E17                     	;# 
  1697  1E18                     	;# 
  1698  1E19                     	;# 
  1699  1E1A                     	;# 
  1700  1E1B                     	;# 
  1701  1E1C                     	;# 
  1702  1E1D                     	;# 
  1703  1E1E                     	;# 
  1704  1E1F                     	;# 
  1705  1E20                     	;# 
  1706  1E21                     	;# 
  1707  1E22                     	;# 
  1708  1E23                     	;# 
  1709  1E24                     	;# 
  1710  1E25                     	;# 
  1711  1E26                     	;# 
  1712  1E27                     	;# 
  1713  1E28                     	;# 
  1714  1E29                     	;# 
  1715  1E2A                     	;# 
  1716  1E2B                     	;# 
  1717  1E2C                     	;# 
  1718  1E2D                     	;# 
  1719  1E2E                     	;# 
  1720  1E2F                     	;# 
  1721  1E30                     	;# 
  1722  1E31                     	;# 
  1723  1E32                     	;# 
  1724  1E33                     	;# 
  1725  1E34                     	;# 
  1726  1E35                     	;# 
  1727  1E36                     	;# 
  1728  1E37                     	;# 
  1729  1E8F                     	;# 
  1730  1E90                     	;# 
  1731  1E91                     	;# 
  1732  1E92                     	;# 
  1733  1E93                     	;# 
  1734  1E9C                     	;# 
  1735  1EA1                     	;# 
  1736  1EA2                     	;# 
  1737  1EB1                     	;# 
  1738  1EBB                     	;# 
  1739  1EBC                     	;# 
  1740  1EBD                     	;# 
  1741  1EBE                     	;# 
  1742  1EC3                     	;# 
  1743  1EC5                     	;# 
  1744  1EC6                     	;# 
  1745  1EC7                     	;# 
  1746  1EC8                     	;# 
  1747  1EC9                     	;# 
  1748  1ECA                     	;# 
  1749  1ECB                     	;# 
  1750  1ECC                     	;# 
  1751  1ECD                     	;# 
  1752  1ECE                     	;# 
  1753  1F10                     	;# 
  1754  1F11                     	;# 
  1755  1F12                     	;# 
  1756  1F13                     	;# 
  1757  1F14                     	;# 
  1758  1F15                     	;# 
  1759  1F16                     	;# 
  1760  1F17                     	;# 
  1761  1F18                     	;# 
  1762  1F19                     	;# 
  1763  1F1A                     	;# 
  1764  1F1B                     	;# 
  1765  1F1C                     	;# 
  1766  1F1D                     	;# 
  1767  1F1E                     	;# 
  1768  1F1F                     	;# 
  1769  1F20                     	;# 
  1770  1F21                     	;# 
  1771  1F22                     	;# 
  1772  1F23                     	;# 
  1773  1F24                     	;# 
  1774  1F25                     	;# 
  1775  1F26                     	;# 
  1776  1F27                     	;# 
  1777  1F38                     	;# 
  1778  1F39                     	;# 
  1779  1F3A                     	;# 
  1780  1F3B                     	;# 
  1781  1F3C                     	;# 
  1782  1F3D                     	;# 
  1783  1F3E                     	;# 
  1784  1F3F                     	;# 
  1785  1F43                     	;# 
  1786  1F44                     	;# 
  1787  1F45                     	;# 
  1788  1F46                     	;# 
  1789  1F47                     	;# 
  1790  1F48                     	;# 
  1791  1F49                     	;# 
  1792  1F4A                     	;# 
  1793  1F4E                     	;# 
  1794  1F4F                     	;# 
  1795  1F50                     	;# 
  1796  1F51                     	;# 
  1797  1F52                     	;# 
  1798  1F53                     	;# 
  1799  1F54                     	;# 
  1800  1F55                     	;# 
  1801  1F65                     	;# 
  1802  1F68                     	;# 
  1803  1F69                     	;# 
  1804  1F6A                     	;# 
  1805  1F6B                     	;# 
  1806  1FE4                     	;# 
  1807  1FE5                     	;# 
  1808  1FE6                     	;# 
  1809  1FE7                     	;# 
  1810  1FE8                     	;# 
  1811  1FE8                     	;# 
  1812  1FE9                     	;# 
  1813  1FEA                     	;# 
  1814  1FEB                     	;# 
  1815  1FED                     	;# 
  1816  1FEE                     	;# 
  1817  1FEF                     	;# 
  1818  0000                     	;# 
  1819  0001                     	;# 
  1820  0002                     	;# 
  1821  0003                     	;# 
  1822  0004                     	;# 
  1823  0005                     	;# 
  1824  0006                     	;# 
  1825  0007                     	;# 
  1826  0008                     	;# 
  1827  0009                     	;# 
  1828  000A                     	;# 
  1829  000B                     	;# 
  1830  000C                     	;# 
  1831  000D                     	;# 
  1832  000E                     	;# 
  1833  0010                     	;# 
  1834  0012                     	;# 
  1835  0013                     	;# 
  1836  0014                     	;# 
  1837  0016                     	;# 
  1838  0018                     	;# 
  1839  0019                     	;# 
  1840  001A                     	;# 
  1841  009B                     	;# 
  1842  009B                     	;# 
  1843  009C                     	;# 
  1844  009D                     	;# 
  1845  009E                     	;# 
  1846  009F                     	;# 
  1847  0119                     	;# 
  1848  0119                     	;# 
  1849  0119                     	;# 
  1850  011A                     	;# 
  1851  011A                     	;# 
  1852  011A                     	;# 
  1853  011B                     	;# 
  1854  011B                     	;# 
  1855  011B                     	;# 
  1856  011B                     	;# 
  1857  011B                     	;# 
  1858  011C                     	;# 
  1859  011C                     	;# 
  1860  011C                     	;# 
  1861  011D                     	;# 
  1862  011D                     	;# 
  1863  011D                     	;# 
  1864  011E                     	;# 
  1865  011E                     	;# 
  1866  011E                     	;# 
  1867  011F                     	;# 
  1868  011F                     	;# 
  1869  011F                     	;# 
  1870  011F                     	;# 
  1871  011F                     	;# 
  1872  018C                     	;# 
  1873  018D                     	;# 
  1874  018E                     	;# 
  1875  018F                     	;# 
  1876  0190                     	;# 
  1877  0191                     	;# 
  1878  0192                     	;# 
  1879  0196                     	;# 
  1880  0197                     	;# 
  1881  0198                     	;# 
  1882  0199                     	;# 
  1883  019A                     	;# 
  1884  019B                     	;# 
  1885  019C                     	;# 
  1886  020C                     	;# 
  1887  020C                     	;# 
  1888  020D                     	;# 
  1889  020E                     	;# 
  1890  020F                     	;# 
  1891  020F                     	;# 
  1892  0210                     	;# 
  1893  0210                     	;# 
  1894  0211                     	;# 
  1895  0211                     	;# 
  1896  028C                     	;# 
  1897  028C                     	;# 
  1898  028D                     	;# 
  1899  028D                     	;# 
  1900  028E                     	;# 
  1901  028F                     	;# 
  1902  0290                     	;# 
  1903  0291                     	;# 
  1904  030C                     	;# 
  1905  030C                     	;# 
  1906  030D                     	;# 
  1907  030E                     	;# 
  1908  030F                     	;# 
  1909  0310                     	;# 
  1910  0310                     	;# 
  1911  0311                     	;# 
  1912  0312                     	;# 
  1913  0313                     	;# 
  1914  0314                     	;# 
  1915  0314                     	;# 
  1916  0315                     	;# 
  1917  0316                     	;# 
  1918  0318                     	;# 
  1919  0318                     	;# 
  1920  0319                     	;# 
  1921  031A                     	;# 
  1922  031C                     	;# 
  1923  031C                     	;# 
  1924  031D                     	;# 
  1925  031E                     	;# 
  1926  038C                     	;# 
  1927  038C                     	;# 
  1928  038D                     	;# 
  1929  038E                     	;# 
  1930  058C                     	;# 
  1931  058C                     	;# 
  1932  058D                     	;# 
  1933  058E                     	;# 
  1934  058F                     	;# 
  1935  058F                     	;# 
  1936  0590                     	;# 
  1937  0591                     	;# 
  1938  0592                     	;# 
  1939  0593                     	;# 
  1940  059C                     	;# 
  1941  059C                     	;# 
  1942  059D                     	;# 
  1943  059D                     	;# 
  1944  059E                     	;# 
  1945  059F                     	;# 
  1946  060C                     	;# 
  1947  060D                     	;# 
  1948  060E                     	;# 
  1949  060F                     	;# 
  1950  0610                     	;# 
  1951  0611                     	;# 
  1952  0612                     	;# 
  1953  0613                     	;# 
  1954  0614                     	;# 
  1955  070C                     	;# 
  1956  070D                     	;# 
  1957  070E                     	;# 
  1958  070F                     	;# 
  1959  0710                     	;# 
  1960  0711                     	;# 
  1961  0712                     	;# 
  1962  0713                     	;# 
  1963  0716                     	;# 
  1964  0717                     	;# 
  1965  0718                     	;# 
  1966  0719                     	;# 
  1967  071A                     	;# 
  1968  071B                     	;# 
  1969  071C                     	;# 
  1970  071D                     	;# 
  1971  0796                     	;# 
  1972  0797                     	;# 
  1973  0798                     	;# 
  1974  0799                     	;# 
  1975  079A                     	;# 
  1976  079B                     	;# 
  1977  080C                     	;# 
  1978  080D                     	;# 
  1979  080E                     	;# 
  1980  080F                     	;# 
  1981  0810                     	;# 
  1982  0811                     	;# 
  1983  0812                     	;# 
  1984  0813                     	;# 
  1985  0814                     	;# 
  1986  081A                     	;# 
  1987  081A                     	;# 
  1988  081B                     	;# 
  1989  081C                     	;# 
  1990  081C                     	;# 
  1991  081D                     	;# 
  1992  081E                     	;# 
  1993  081F                     	;# 
  1994  088C                     	;# 
  1995  088D                     	;# 
  1996  088E                     	;# 
  1997  088F                     	;# 
  1998  0890                     	;# 
  1999  0891                     	;# 
  2000  0892                     	;# 
  2001  0893                     	;# 
  2002  0895                     	;# 
  2003  0896                     	;# 
  2004  090C                     	;# 
  2005  090E                     	;# 
  2006  090F                     	;# 
  2007  091F                     	;# 
  2008  098F                     	;# 
  2009  098F                     	;# 
  2010  0990                     	;# 
  2011  0991                     	;# 
  2012  0992                     	;# 
  2013  0993                     	;# 
  2014  0994                     	;# 
  2015  0995                     	;# 
  2016  0996                     	;# 
  2017  0997                     	;# 
  2018  0A19                     	;# 
  2019  0A19                     	;# 
  2020  0A1A                     	;# 
  2021  0A1A                     	;# 
  2022  0A1B                     	;# 
  2023  0A1B                     	;# 
  2024  0A1B                     	;# 
  2025  0A1C                     	;# 
  2026  0A1C                     	;# 
  2027  0A1D                     	;# 
  2028  0A1D                     	;# 
  2029  0A1E                     	;# 
  2030  0A1E                     	;# 
  2031  0A1F                     	;# 
  2032  0A1F                     	;# 
  2033  0A1F                     	;# 
  2034  1E0F                     	;# 
  2035  1E10                     	;# 
  2036  1E11                     	;# 
  2037  1E12                     	;# 
  2038  1E13                     	;# 
  2039  1E14                     	;# 
  2040  1E15                     	;# 
  2041  1E16                     	;# 
  2042  1E17                     	;# 
  2043  1E18                     	;# 
  2044  1E19                     	;# 
  2045  1E1A                     	;# 
  2046  1E1B                     	;# 
  2047  1E1C                     	;# 
  2048  1E1D                     	;# 
  2049  1E1E                     	;# 
  2050  1E1F                     	;# 
  2051  1E20                     	;# 
  2052  1E21                     	;# 
  2053  1E22                     	;# 
  2054  1E23                     	;# 
  2055  1E24                     	;# 
  2056  1E25                     	;# 
  2057  1E26                     	;# 
  2058  1E27                     	;# 
  2059  1E28                     	;# 
  2060  1E29                     	;# 
  2061  1E2A                     	;# 
  2062  1E2B                     	;# 
  2063  1E2C                     	;# 
  2064  1E2D                     	;# 
  2065  1E2E                     	;# 
  2066  1E2F                     	;# 
  2067  1E30                     	;# 
  2068  1E31                     	;# 
  2069  1E32                     	;# 
  2070  1E33                     	;# 
  2071  1E34                     	;# 
  2072  1E35                     	;# 
  2073  1E36                     	;# 
  2074  1E37                     	;# 
  2075  1E8F                     	;# 
  2076  1E90                     	;# 
  2077  1E91                     	;# 
  2078  1E92                     	;# 
  2079  1E93                     	;# 
  2080  1E9C                     	;# 
  2081  1EA1                     	;# 
  2082  1EA2                     	;# 
  2083  1EB1                     	;# 
  2084  1EBB                     	;# 
  2085  1EBC                     	;# 
  2086  1EBD                     	;# 
  2087  1EBE                     	;# 
  2088  1EC3                     	;# 
  2089  1EC5                     	;# 
  2090  1EC6                     	;# 
  2091  1EC7                     	;# 
  2092  1EC8                     	;# 
  2093  1EC9                     	;# 
  2094  1ECA                     	;# 
  2095  1ECB                     	;# 
  2096  1ECC                     	;# 
  2097  1ECD                     	;# 
  2098  1ECE                     	;# 
  2099  1F10                     	;# 
  2100  1F11                     	;# 
  2101  1F12                     	;# 
  2102  1F13                     	;# 
  2103  1F14                     	;# 
  2104  1F15                     	;# 
  2105  1F16                     	;# 
  2106  1F17                     	;# 
  2107  1F18                     	;# 
  2108  1F19                     	;# 
  2109  1F1A                     	;# 
  2110  1F1B                     	;# 
  2111  1F1C                     	;# 
  2112  1F1D                     	;# 
  2113  1F1E                     	;# 
  2114  1F1F                     	;# 
  2115  1F20                     	;# 
  2116  1F21                     	;# 
  2117  1F22                     	;# 
  2118  1F23                     	;# 
  2119  1F24                     	;# 
  2120  1F25                     	;# 
  2121  1F26                     	;# 
  2122  1F27                     	;# 
  2123  1F38                     	;# 
  2124  1F39                     	;# 
  2125  1F3A                     	;# 
  2126  1F3B                     	;# 
  2127  1F3C                     	;# 
  2128  1F3D                     	;# 
  2129  1F3E                     	;# 
  2130  1F3F                     	;# 
  2131  1F43                     	;# 
  2132  1F44                     	;# 
  2133  1F45                     	;# 
  2134  1F46                     	;# 
  2135  1F47                     	;# 
  2136  1F48                     	;# 
  2137  1F49                     	;# 
  2138  1F4A                     	;# 
  2139  1F4E                     	;# 
  2140  1F4F                     	;# 
  2141  1F50                     	;# 
  2142  1F51                     	;# 
  2143  1F52                     	;# 
  2144  1F53                     	;# 
  2145  1F54                     	;# 
  2146  1F55                     	;# 
  2147  1F65                     	;# 
  2148  1F68                     	;# 
  2149  1F69                     	;# 
  2150  1F6A                     	;# 
  2151  1F6B                     	;# 
  2152  1FE4                     	;# 
  2153  1FE5                     	;# 
  2154  1FE6                     	;# 
  2155  1FE7                     	;# 
  2156  1FE8                     	;# 
  2157  1FE8                     	;# 
  2158  1FE9                     	;# 
  2159  1FEA                     	;# 
  2160  1FEB                     	;# 
  2161  1FED                     	;# 
  2162  1FEE                     	;# 
  2163  1FEF                     	;# 
  2164                           
  2165                           	psect	idataBANK2
  2166  0000                     __pidataBANK2:	
  2167                           
  2168                           	psect	idataBANK3
  2169  1C45                     __pidataBANK3:	
  2170                           
  2171                           ;initializer for _p_fct
  2172  1C45  3401               	retlw	low _statusView
  2173  1C46  3412               	retlw	high _statusView
  2174  1C47  3496               	retlw	low _channelView
  2175  1C48  3411               	retlw	high _channelView
  2176  1C49  34DB               	retlw	low _channelSetup
  2177  1C4A  3411               	retlw	high _channelSetup
  2178  1C4B  34C6               	retlw	low _setOutputPower
  2179  1C4C  3411               	retlw	high _setOutputPower
  2180  1C4D  34B1               	retlw	low _setLensDia
  2181  1C4E  3411               	retlw	high _setLensDia
  2182                           
  2183                           ;initializer for stoa@F1151
  2184  1C4F  3428               	retlw	40
  2185  1C50  346E               	retlw	110
  2186  1C51  3475               	retlw	117
  2187  1C52  346C               	retlw	108
  2188  1C53  346C               	retlw	108
  2189  1C54  3429               	retlw	41
  2190  1C55  3400               	retlw	0
  2191                           
  2192                           ;initializer for OLED_print_xy@F7874
  2193  1C56  3400               	retlw	0
  2194  1C57  3440               	retlw	64
  2195  1C58  3414               	retlw	20
  2196  1C59  3454               	retlw	84
  2197                           
  2198                           	psect	stringtext1
  2199  20A8                     __pstringtext1:	
  2200  20A8                     _nextStateTbl:	
  2201  20A8  3400               	retlw	0
  2202  20A9  34FF               	retlw	255
  2203  20AA  3401               	retlw	1
  2204  20AB  3400               	retlw	0
  2205  20AC  3400               	retlw	0
  2206  20AD  3401               	retlw	1
  2207  20AE  34FF               	retlw	255
  2208  20AF  3400               	retlw	0
  2209  20B0  3402               	retlw	2
  2210  20B1  3401               	retlw	1
  2211  20B2  3402               	retlw	2
  2212  20B3  3400               	retlw	0
  2213  20B4  3403               	retlw	3
  2214  20B5  3401               	retlw	1
  2215  20B6  3401               	retlw	1
  2216  20B7  3402               	retlw	2
  2217  20B8  3401               	retlw	1
  2218  20B9  3404               	retlw	4
  2219  20BA  3401               	retlw	1
  2220  20BB  3401               	retlw	1
  2221  20BC  3403               	retlw	3
  2222  20BD  3400               	retlw	0
  2223  20BE  3402               	retlw	2
  2224  20BF  3402               	retlw	2
  2225  20C0  3402               	retlw	2
  2226  20C1  3404               	retlw	4
  2227  20C2  3400               	retlw	0
  2228  20C3  3402               	retlw	2
  2229  20C4  3402               	retlw	2
  2230  20C5  3402               	retlw	2
  2231  20C6                     __end_of_nextStateTbl:	
  2232                           
  2233                           	psect	stringtext2
  2234  2000                     __pstringtext2:	
  2235  2000                     _transition_table:	
  2236  2000  3400               	retlw	0
  2237  2001  3404               	retlw	4
  2238  2002  3401               	retlw	1
  2239  2003  3400               	retlw	0
  2240  2004  3482               	retlw	130
  2241  2005  3400               	retlw	0
  2242  2006  3401               	retlw	1
  2243  2007  3400               	retlw	0
  2244  2008  3402               	retlw	2
  2245  2009  3403               	retlw	3
  2246  200A  3401               	retlw	1
  2247  200B  3400               	retlw	0
  2248  200C  3402               	retlw	2
  2249  200D  3403               	retlw	3
  2250  200E  3400               	retlw	0
  2251  200F  3480               	retlw	128
  2252  2010  3445               	retlw	69
  2253  2011  3404               	retlw	4
  2254  2012  3400               	retlw	0
  2255  2013  3400               	retlw	0
  2256  2014  3405               	retlw	5
  2257  2015  3404               	retlw	4
  2258  2016  3406               	retlw	6
  2259  2017  3400               	retlw	0
  2260  2018  3405               	retlw	5
  2261  2019  3400               	retlw	0
  2262  201A  3406               	retlw	6
  2263  201B  3440               	retlw	64
  2264  201C                     __end_of_transition_table:	
  2265  000C                     _PORTAbits	set	12
  2266  000B                     _INTCONbits	set	11
  2267  000E                     _PORTCbits	set	14
  2268  0014                     _TRISCbits	set	20
  2269  000B                     _INTCON	set	11
  2270  0014                     _TRISC	set	20
  2271  0013                     _TRISB	set	19
  2272  0012                     _TRISA	set	18
  2273  0018                     _LATAbits	set	24
  2274  001A                     _LATCbits	set	26
  2275  0019                     _LATBbits	set	25
  2276  009E                     _ADCON1	set	158
  2277  009B                     _ADRESL	set	155
  2278  009C                     _ADRESH	set	156
  2279  009D                     _ADCON0bits	set	157
  2280  0119                     _RC1REG	set	281
  2281  011D                     _RC1STAbits	set	285
  2282  011A                     _TX1REG	set	282
  2283  011E                     _TX1STA	set	286
  2284  011D                     _RC1STA	set	285
  2285  011B                     _SPBRGL	set	283
  2286  011F                     _BAUD1CON	set	287
  2287  020C                     _TMR1	set	524
  2288  0211                     _T1CLK	set	529
  2289  020E                     _T1CON	set	526
  2290  059C                     _TMR0	set	1436
  2291  059F                     _T0CON1	set	1439
  2292  059E                     _T0CON0	set	1438
  2293  070F                     _PIR3bits	set	1807
  2294  0719                     _PIE3bits	set	1817
  2295  0710                     _PIR4bits	set	1808
  2296  071A                     _PIE4bits	set	1818
  2297  070C                     _PIR0bits	set	1804
  2298  0716                     _PIE0bits	set	1814
  2299  071A                     _PIE4	set	1818
  2300  0719                     _PIE3	set	1817
  2301  0716                     _PIE0	set	1814
  2302  088F                     _OSCCON3bits	set	2191
  2303  088D                     _OSCCON1	set	2189
  2304  0893                     _OSCFRQ	set	2195
  2305  1ECB                     _RX1DTPPSbits	set	7883
  2306  1F3F                     _IOCAFbits	set	7999
  2307  1F54                     _IOCCN	set	8020
  2308  1F3E                     _IOCAN	set	7998
  2309  1F3D                     _IOCAP	set	7997
  2310  1F4E                     _ANSELC	set	8014
  2311  1F43                     _ANSELB	set	8003
  2312  1F38                     _ANSELA	set	7992
  2313  1F26                     _RC6PPS	set	7974
  2314  201C                     STR_7:	
  2315  201C  3443               	retlw	67	;'C'
  2316  201D  3468               	retlw	104	;'h'
  2317  201E  3431               	retlw	49	;'1'
  2318  201F  343A               	retlw	58	;':'
  2319  2020  3420               	retlw	32	;' '
  2320  2021  3478               	retlw	120	;'x'
  2321  2022  3478               	retlw	120	;'x'
  2322  2023  3420               	retlw	32	;' '
  2323  2024  3469               	retlw	105	;'i'
  2324  2025  346E               	retlw	110	;'n'
  2325  2026  3463               	retlw	99	;'c'
  2326  2027  3468               	retlw	104	;'h'
  2327  2028  3443               	retlw	67	;'C'
  2328  2029  3468               	retlw	104	;'h'
  2329  202A  3432               	retlw	50	;'2'
  2330  202B  343A               	retlw	58	;':'
  2331  202C  3420               	retlw	32	;' '
  2332  202D  3478               	retlw	120	;'x'
  2333  202E  3478               	retlw	120	;'x'
  2334  202F  3420               	retlw	32	;' '
  2335  2030  3469               	retlw	105	;'i'
  2336  2031  346E               	retlw	110	;'n'
  2337  2032  3463               	retlw	99	;'c'
  2338  2033  3468               	retlw	104	;'h'
  2339  2034  3443               	retlw	67	;'C'
  2340  2035  3468               	retlw	104	;'h'
  2341  2036  3433               	retlw	51	;'3'
  2342  2037  343A               	retlw	58	;':'
  2343  2038  3420               	retlw	32	;' '
  2344  2039  3478               	retlw	120	;'x'
  2345  203A  3478               	retlw	120	;'x'
  2346  203B  3420               	retlw	32	;' '
  2347  203C  3469               	retlw	105	;'i'
  2348  203D  346E               	retlw	110	;'n'
  2349  203E  3463               	retlw	99	;'c'
  2350  203F  3468               	retlw	104	;'h'
  2351  2040  3443               	retlw	67	;'C'
  2352  2041  3468               	retlw	104	;'h'
  2353  2042  3434               	retlw	52	;'4'
  2354  2043  343A               	retlw	58	;':'
  2355  2044  3420               	retlw	32	;' '
  2356  2045  3478               	retlw	120	;'x'
  2357  2046  3478               	retlw	120	;'x'
  2358  2047  3420               	retlw	32	;' '
  2359  2048  3469               	retlw	105	;'i'
  2360  2049  346E               	retlw	110	;'n'
  2361  204A  3463               	retlw	99	;'c'
  2362  204B  3468               	retlw	104	;'h'
  2363  204C  3400               	retlw	0
  2364                           
  2365                           	psect	stringtext3
  2366  204D                     __pstringtext3:	
  2367  204D                     STR_1:	
  2368  204D  3454               	retlw	84	;'T'
  2369  204E  3465               	retlw	101	;'e'
  2370  204F  346D               	retlw	109	;'m'
  2371  2050  3470               	retlw	112	;'p'
  2372  2051  3465               	retlw	101	;'e'
  2373  2052  3472               	retlw	114	;'r'
  2374  2053  3461               	retlw	97	;'a'
  2375  2054  3474               	retlw	116	;'t'
  2376  2055  3475               	retlw	117	;'u'
  2377  2056  3472               	retlw	114	;'r'
  2378  2057  3465               	retlw	101	;'e'
  2379  2058  3420               	retlw	32	;' '
  2380  2059  3452               	retlw	82	;'R'
  2381  205A  3465               	retlw	101	;'e'
  2382  205B  346C               	retlw	108	;'l'
  2383  205C  342E               	retlw	46	;'.'
  2384  205D  3468               	retlw	104	;'h'
  2385  205E  3475               	retlw	117	;'u'
  2386  205F  346D               	retlw	109	;'m'
  2387  2060  3469               	retlw	105	;'i'
  2388  2061  3464               	retlw	100	;'d'
  2389  2062  3469               	retlw	105	;'i'
  2390  2063  3474               	retlw	116	;'t'
  2391  2064  3479               	retlw	121	;'y'
  2392  2065  3444               	retlw	68	;'D'
  2393  2066  3465               	retlw	101	;'e'
  2394  2067  3477               	retlw	119	;'w'
  2395  2068  3470               	retlw	112	;'p'
  2396  2069  346F               	retlw	111	;'o'
  2397  206A  3469               	retlw	105	;'i'
  2398  206B  346E               	retlw	110	;'n'
  2399  206C  3474               	retlw	116	;'t'
  2400  206D  3420               	retlw	32	;' '
  2401  206E  3420               	retlw	32	;' '
  2402  206F  3420               	retlw	32	;' '
  2403  2070  3420               	retlw	32	;' '
  2404  2071  3442               	retlw	66	;'B'
  2405  2072  3461               	retlw	97	;'a'
  2406  2073  3474               	retlw	116	;'t'
  2407  2074  342E               	retlw	46	;'.'
  2408  2075  3420               	retlw	32	;' '
  2409  2076  3420               	retlw	32	;' '
  2410  2077  3420               	retlw	32	;' '
  2411  2078  3450               	retlw	80	;'P'
  2412  2079  346F               	retlw	111	;'o'
  2413  207A  3477               	retlw	119	;'w'
  2414  207B  3465               	retlw	101	;'e'
  2415  207C  3472               	retlw	114	;'r'
  2416  207D  3400               	retlw	0
  2417                           
  2418                           	psect	stringtext4
  2419  207E                     __pstringtext4:	
  2420  207E                     STR_4:	
  2421  207E  3425               	retlw	37	;'%'
  2422  207F  3473               	retlw	115	;'s'
  2423  2080  3425               	retlw	37	;'%'
  2424  2081  3435               	retlw	53	;'5'
  2425  2082  342E               	retlw	46	;'.'
  2426  2083  3431               	retlw	49	;'1'
  2427  2084  3466               	retlw	102	;'f'
  2428  2085  3420               	retlw	32	;' '
  2429  2086  3425               	retlw	37	;'%'
  2430  2087  3425               	retlw	37	;'%'
  2431  2088  3420               	retlw	32	;' '
  2432  2089  3420               	retlw	32	;' '
  2433  208A  3420               	retlw	32	;' '
  2434  208B  3420               	retlw	32	;' '
  2435  208C  3420               	retlw	32	;' '
  2436  208D  3425               	retlw	37	;'%'
  2437  208E  3435               	retlw	53	;'5'
  2438  208F  342E               	retlw	46	;'.'
  2439  2090  3431               	retlw	49	;'1'
  2440  2091  3466               	retlw	102	;'f'
  2441  2092  3420               	retlw	32	;' '
  2442  2093  34DF               	retlw	-33
  2443  2094  3443               	retlw	67	;'C'
  2444  2095  3420               	retlw	32	;' '
  2445  2096  3420               	retlw	32	;' '
  2446  2097  3420               	retlw	32	;' '
  2447  2098  3420               	retlw	32	;' '
  2448  2099  3425               	retlw	37	;'%'
  2449  209A  3434               	retlw	52	;'4'
  2450  209B  342E               	retlw	46	;'.'
  2451  209C  3431               	retlw	49	;'1'
  2452  209D  3466               	retlw	102	;'f'
  2453  209E  3456               	retlw	86	;'V'
  2454  209F  3420               	retlw	32	;' '
  2455  20A0  3420               	retlw	32	;' '
  2456  20A1  3425               	retlw	37	;'%'
  2457  20A2  3434               	retlw	52	;'4'
  2458  20A3  342E               	retlw	46	;'.'
  2459  20A4  3431               	retlw	49	;'1'
  2460  20A5  3466               	retlw	102	;'f'
  2461  20A6  3457               	retlw	87	;'W'
  2462  20A7  3400               	retlw	0
  2463                           
  2464                           	psect	stringtext5
  2465  20C6                     __pstringtext5:	
  2466  20C6                     STR_8:	
  2467  20C6  344F               	retlw	79	;'O'
  2468  20C7  3475               	retlw	117	;'u'
  2469  20C8  3474               	retlw	116	;'t'
  2470  20C9  3470               	retlw	112	;'p'
  2471  20CA  3475               	retlw	117	;'u'
  2472  20CB  3474               	retlw	116	;'t'
  2473  20CC  3420               	retlw	32	;' '
  2474  20CD  3470               	retlw	112	;'p'
  2475  20CE  346F               	retlw	111	;'o'
  2476  20CF  3477               	retlw	119	;'w'
  2477  20D0  3465               	retlw	101	;'e'
  2478  20D1  3472               	retlw	114	;'r'
  2479  20D2  3420               	retlw	32	;' '
  2480  20D3  344C               	retlw	76	;'L'
  2481  20D4  3465               	retlw	101	;'e'
  2482  20D5  346E               	retlw	110	;'n'
  2483  20D6  3473               	retlw	115	;'s'
  2484  20D7  3420               	retlw	32	;' '
  2485  20D8  3464               	retlw	100	;'d'
  2486  20D9  3469               	retlw	105	;'i'
  2487  20DA  3461               	retlw	97	;'a'
  2488  20DB  346D               	retlw	109	;'m'
  2489  20DC  342E               	retlw	46	;'.'
  2490  20DD  3420               	retlw	32	;' '
  2491  20DE  3400               	retlw	0
  2492                           
  2493                           	psect	stringtext6
  2494  20DF                     __pstringtext6:	
  2495  20DF                     STR_9:	
  2496  20DF  3425               	retlw	37	;'%'
  2497  20E0  3431               	retlw	49	;'1'
  2498  20E1  3464               	retlw	100	;'d'
  2499  20E2  3420               	retlw	32	;' '
  2500  20E3  3420               	retlw	32	;' '
  2501  20E4  3420               	retlw	32	;' '
  2502  20E5  3420               	retlw	32	;' '
  2503  20E6  3420               	retlw	32	;' '
  2504  20E7  3420               	retlw	32	;' '
  2505  20E8  3420               	retlw	32	;' '
  2506  20E9  3420               	retlw	32	;' '
  2507  20EA  3420               	retlw	32	;' '
  2508  20EB  3420               	retlw	32	;' '
  2509  20EC  3420               	retlw	32	;' '
  2510  20ED  3420               	retlw	32	;' '
  2511  20EE  3425               	retlw	37	;'%'
  2512  20EF  3431               	retlw	49	;'1'
  2513  20F0  3464               	retlw	100	;'d'
  2514  20F1  3400               	retlw	0
  2515                           
  2516                           	psect	stringtext7
  2517  20F2                     __pstringtext7:	
  2518  20F2                     STR_2:	
  2519  20F2  3425               	retlw	37	;'%'
  2520  20F3  3433               	retlw	51	;'3'
  2521  20F4  342E               	retlw	46	;'.'
  2522  20F5  3430               	retlw	48	;'0'
  2523  20F6  3466               	retlw	102	;'f'
  2524  20F7  3420               	retlw	32	;' '
  2525  20F8  347C               	retlw	124	;'|'
  2526  20F9  3420               	retlw	32	;' '
  2527  20FA  3425               	retlw	37	;'%'
  2528  20FB  3433               	retlw	51	;'3'
  2529  20FC  342E               	retlw	46	;'.'
  2530  20FD  3430               	retlw	48	;'0'
  2531  20FE  3466               	retlw	102	;'f'
  2532  20FF  3420               	retlw	32	;' '
  2533  2100  34DF               	retlw	-33
  2534  2101  3443               	retlw	67	;'C'
  2535  2102  3400               	retlw	0
  2536                           
  2537                           	psect	stringtext8
  2538  2103                     __pstringtext8:	
  2539  2103                     STR_11:	
  2540  2103  3425               	retlw	37	;'%'
  2541  2104  3431               	retlw	49	;'1'
  2542  2105  3464               	retlw	100	;'d'
  2543  2106  3420               	retlw	32	;' '
  2544  2107  3420               	retlw	32	;' '
  2545  2108  3420               	retlw	32	;' '
  2546  2109  3420               	retlw	32	;' '
  2547  210A  3420               	retlw	32	;' '
  2548  210B  3420               	retlw	32	;' '
  2549  210C  3420               	retlw	32	;' '
  2550  210D  3420               	retlw	32	;' '
  2551  210E  3420               	retlw	32	;' '
  2552  210F  3420               	retlw	32	;' '
  2553  2110  3400               	retlw	0
  2554                           
  2555                           	psect	stringtext9
  2556  2111                     __pstringtext9:	
  2557  2111                     STR_3:	
  2558  2111  3425               	retlw	37	;'%'
  2559  2112  3435               	retlw	53	;'5'
  2560  2113  342E               	retlw	46	;'.'
  2561  2114  3431               	retlw	49	;'1'
  2562  2115  3466               	retlw	102	;'f'
  2563  2116  3420               	retlw	32	;' '
  2564  2117  34DF               	retlw	-33
  2565  2118  3443               	retlw	67	;'C'
  2566  2119  3420               	retlw	32	;' '
  2567  211A  3420               	retlw	32	;' '
  2568  211B  3420               	retlw	32	;' '
  2569  211C  3420               	retlw	32	;' '
  2570  211D  3400               	retlw	0
  2571                           
  2572                           	psect	stringtext10
  2573  211E                     __pstringtext10:	
  2574  211E                     STR_10:	
  2575  211E  3453               	retlw	83	;'S'
  2576  211F  3465               	retlw	101	;'e'
  2577  2120  3474               	retlw	116	;'t'
  2578  2121  3420               	retlw	32	;' '
  2579  2122  346F               	retlw	111	;'o'
  2580  2123  3475               	retlw	117	;'u'
  2581  2124  3474               	retlw	116	;'t'
  2582  2125  3470               	retlw	112	;'p'
  2583  2126  3420               	retlw	32	;' '
  2584  2127  3420               	retlw	32	;' '
  2585  2128  3420               	retlw	32	;' '
  2586  2129  3420               	retlw	32	;' '
  2587  212A  3400               	retlw	0
  2588                           
  2589                           	psect	stringtext11
  2590  212B                     __pstringtext11:	
  2591  212B                     STR_12:	
  2592  212B  3453               	retlw	83	;'S'
  2593  212C  3465               	retlw	101	;'e'
  2594  212D  3474               	retlw	116	;'t'
  2595  212E  3420               	retlw	32	;' '
  2596  212F  346C               	retlw	108	;'l'
  2597  2130  3465               	retlw	101	;'e'
  2598  2131  346E               	retlw	110	;'n'
  2599  2132  3473               	retlw	115	;'s'
  2600  2133  3420               	retlw	32	;' '
  2601  2134  3420               	retlw	32	;' '
  2602  2135  3420               	retlw	32	;' '
  2603  2136  3400               	retlw	0
  2604                           
  2605                           	psect	stringtext12
  2606  2137                     __pstringtext12:	
  2607  2137                     STR_14:	
  2608  2137  3449               	retlw	73	;'I'
  2609  2138  344E               	retlw	78	;'N'
  2610  2139  3446               	retlw	70	;'F'
  2611  213A  3400               	retlw	0
  2612                           
  2613                           	psect	stringtext13
  2614  213B                     __pstringtext13:	
  2615  213B                     STR_18:	
  2616  213B  344E               	retlw	78	;'N'
  2617  213C  3441               	retlw	65	;'A'
  2618  213D  344E               	retlw	78	;'N'
  2619  213E  3400               	retlw	0
  2620                           
  2621                           	psect	stringtext14
  2622  213F                     __pstringtext14:	
  2623  213F                     STR_15:	
  2624  213F  3469               	retlw	105	;'i'
  2625  2140  346E               	retlw	110	;'n'
  2626  2141  3466               	retlw	102	;'f'
  2627  2142  3400               	retlw	0
  2628                           
  2629                           	psect	stringtext15
  2630  2143                     __pstringtext15:	
  2631  2143                     STR_19:	
  2632  2143  346E               	retlw	110	;'n'
  2633  2144  3461               	retlw	97	;'a'
  2634  2145  346E               	retlw	110	;'n'
  2635  2146  3400               	retlw	0
  2636                           
  2637                           	psect	stringtext16
  2638  2147                     __pstringtext16:	
  2639  2147                     STR_22:	
  2640  2147  346C               	retlw	108	;'l'
  2641  2148  3466               	retlw	102	;'f'
  2642  2149  3400               	retlw	0
  2643                           
  2644                           	psect	stringtext17
  2645  0000                     __pstringtext17:	
  2646  2103                     
  2647                           ; #config settings
  2648  0000                     
  2649                           	psect	cinit
  2650  0061                     start_initialization:	
  2651  0061                     __initialization:	
  2652                           
  2653                           ; Initialize objects allocated to BANK2
  2654  0061  0142               	movlb	2	; select bank2
  2655                           
  2656                           ;initializer for _updateScreen
  2657  0062  3001               	movlw	1
  2658  0063  00EE               	movwf	__pdataBANK2& (0+127)
  2659                           
  2660                           ; Initialize objects allocated to BANK3
  2661  0064  3045               	movlw	low __pidataBANK3
  2662  0065  0084               	movwf	4
  2663  0066  309C               	movlw	(high __pidataBANK3)| (0+128)
  2664  0067  0085               	movwf	5
  2665  0068  30D8               	movlw	low __pdataBANK3
  2666  0069  0086               	movwf	6
  2667  006A  3001               	movlw	high __pdataBANK3
  2668  006B  0087               	movwf	7
  2669  006C  3015               	movlw	21
  2670  006D  3188  200D  3180   	fcall	init_ram
  2671  0070  305C               	movlw	low __pbssBANK2
  2672                           
  2673                           ; Clear objects allocated to COMMON
  2674  0071  01FB               	clrf	__pbssCOMMON& (0+127)
  2675  0072  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
  2676  0073  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
  2677                           
  2678                           ; Clear objects allocated to BANK2
  2679  0074  0084               	movwf	4
  2680  0075  3001               	movlw	high __pbssBANK2
  2681  0076  0085               	movwf	5
  2682  0077  3012               	movlw	18
  2683  0078  3188  2007  3180   	fcall	clear_ram0
  2684                           
  2685                           ; Clear objects allocated to BANK3
  2686  007B  30A0               	movlw	low __pbssBANK3
  2687  007C  0084               	movwf	4
  2688  007D  3001               	movlw	high __pbssBANK3
  2689  007E  0085               	movwf	5
  2690  007F  3038               	movlw	56
  2691  0080  3188  2007  3180   	fcall	clear_ram0
  2692                           
  2693                           ; Clear objects allocated to BANK4
  2694  0083  3020               	movlw	low __pbssBANK4
  2695  0084  0084               	movwf	4
  2696  0085  3002               	movlw	high __pbssBANK4
  2697  0086  0085               	movwf	5
  2698  0087  3035               	movlw	53
  2699  0088  3188  2007  3180   	fcall	clear_ram0
  2700                           
  2701                           ; Clear objects allocated to BANK5
  2702  008B  30A0               	movlw	low __pbssBANK5
  2703  008C  0084               	movwf	4
  2704  008D  3002               	movlw	high __pbssBANK5
  2705  008E  0085               	movwf	5
  2706  008F  3050               	movlw	80
  2707  0090  3188  2007  3180   	fcall	clear_ram0
  2708                           
  2709                           ; Clear objects allocated to BANK6
  2710  0093  3020               	movlw	low __pbssBANK6
  2711  0094  0084               	movwf	4
  2712  0095  3003               	movlw	high __pbssBANK6
  2713  0096  0085               	movwf	5
  2714  0097  303D               	movlw	61
  2715  0098  3188  2007  3180   	fcall	clear_ram0
  2716  009B                     end_of_initialization:	
  2717                           ;End of C runtime variable initialization code
  2718                           
  2719  009B                     __end_of__initialization:	
  2720  009B  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
  2721  009C  0140               	movlb	0
  2722  009D  289E               	ljmp	_main	;jump to C main() function
  2723  009E                     __pmaintext:	
  2724                           ; 1 bytes @ 0x50
  2725 ;;
  2726 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2727 ;;
  2728 ;; *************** function _main *****************
  2729 ;; Defined at:
  2730 ;;		line 34 in file "main.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;		None
  2733 ;; Auto vars:     Size  Location     Type
  2734 ;;		None
  2735 ;; Return value:  Size  Location     Type
  2736 ;;                  1    wreg      void 
  2737 ;; Registers used:
  2738 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2739 ;; Tracked objects:
  2740 ;;		On entry : B3F/0
  2741 ;;		On exit  : 0/0
  2742 ;;		Unchanged: 0/0
  2743 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2744 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2745 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2746 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2747 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2748 ;;Total ram usage:        1 bytes
  2749 ;; Hardware stack levels required when called:   13
  2750 ;; This function calls:
  2751 ;;		_OLED_clearDisplay
  2752 ;;		_OLED_init
  2753 ;;		_OLED_returnHome
  2754 ;;		_checkSensor
  2755 ;;		_convertAnalogValues
  2756 ;;		_initialize
  2757 ;;		_menu
  2758 ;; This function is called by:
  2759 ;;		Startup code after reset
  2760 ;; This function uses a non-reentrant model
  2761 ;;
  2762                           
  2763                           
  2764                           ;psect for function _main
  2765  009E                     _main:	
  2766                           
  2767                           ;main.c: 38:  initialize();
  2768                           
  2769                           ;incstack = 0
  2770                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  2771  009E  22D8  3180         	fcall	_initialize
  2772                           
  2773                           ;main.c: 39:  LATBbits.LATB5 = 1;
  2774  00A0  0140               	movlb	0	; select bank0
  2775  00A1  1699               	bsf	25,5	;volatile
  2776                           
  2777                           ;main.c: 40:  LATCbits.LATC3 = 1;
  2778  00A2  159A               	bsf	26,3	;volatile
  2779                           
  2780                           ;main.c: 41:  OLED_init();
  2781  00A3  20C0  3180         	fcall	_OLED_init
  2782                           
  2783                           ;main.c: 42:  OLED_returnHome();
  2784  00A5  263A  3180         	fcall	_OLED_returnHome
  2785                           
  2786                           ;main.c: 43:  OLED_clearDisplay();
  2787  00A7  20BE  3180         	fcall	_OLED_clearDisplay
  2788                           
  2789                           ;main.c: 45:  LATAbits.LATA0 = 1;
  2790  00A9  1418               	bsf	24,0	;volatile
  2791  00AA                     l103:	
  2792                           ;main.c: 47:  while (1) {
  2793                           
  2794  00AA  0064               	clrwdt	;# 
  2795                           
  2796                           ;main.c: 49:   convertAnalogValues(&data);
  2797  00AB  3020               	movlw	(low (_data| (0+512)))& (0+255)
  2798  00AC  231F  3180         	fcall	_convertAnalogValues
  2799                           
  2800                           ;main.c: 50:   checkSensor(&data);
  2801  00AE  3020               	movlw	(low (_data| (0+512)))& (0+255)
  2802  00AF  2175  3180         	fcall	_checkSensor
  2803                           
  2804                           ;main.c: 51:   menu(&data);
  2805  00B1  3020               	movlw	(low (_data| (0+512)))& (0+255)
  2806  00B2  263C  3180         	fcall	_menu
  2807                           
  2808                           ;main.c: 52:   _delay((unsigned long)((10)*(4000000/4000.0)));
  2809  00B4  300D               	movlw	13
  2810  00B5  0142               	movlb	2	; select bank2
  2811  00B6  00DB               	movwf	??_main^(0+256)
  2812  00B7  30FB               	movlw	251
  2813  00B8                     u7317:	
  2814  00B8  0B89               	decfsz	9,f
  2815  00B9  28B8               	goto	u7317
  2816  00BA  0BDB               	decfsz	??_main^(0+256),f
  2817  00BB  28B8               	goto	u7317
  2818  00BC  3200               	nop2
  2819  00BD  28AA               	goto	l103
  2820  00BE                     __end_of_main:	
  2821  00BE                     __ptext65:	
  2822 ;; *************** function _OLED_clearDisplay *****************
  2823 ;; Defined at:
  2824 ;;		line 165 in file "oled.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;		None
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;		None
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  1    wreg      void 
  2831 ;; Registers used:
  2832 ;;		wreg, status,2, status,0, pclath, cstack
  2833 ;; Tracked objects:
  2834 ;;		On entry : 3F/0
  2835 ;;		On exit  : 3F/0
  2836 ;;		Unchanged: 0/0
  2837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2838 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2839 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2840 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2841 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2842 ;;Total ram usage:        0 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; Hardware stack levels required when called:    7
  2845 ;; This function calls:
  2846 ;;		_OLED_command
  2847 ;; This function is called by:
  2848 ;;		_main
  2849 ;; This function uses a non-reentrant model
  2850 ;;
  2851                           
  2852                           
  2853                           ;psect for function _OLED_clearDisplay
  2854  00BE                     _OLED_clearDisplay:	
  2855                           
  2856                           ;oled.c: 167:  OLED_command(0x01);
  2857                           
  2858                           ;incstack = 0
  2859                           ; Regs used in _OLED_clearDisplay: [wreg+status,2+status,0+pclath+cstack]
  2860  00BE  3001               	movlw	1
  2861  00BF  296E               	ljmp	_OLED_command
  2862  00C0                     __end_of_OLED_clearDisplay:	
  2863  00C0                     __ptext64:	
  2864 ;; *************** function _OLED_init *****************
  2865 ;; Defined at:
  2866 ;;		line 78 in file "oled.c"
  2867 ;; Parameters:    Size  Location     Type
  2868 ;;		None
  2869 ;; Auto vars:     Size  Location     Type
  2870 ;;		None
  2871 ;; Return value:  Size  Location     Type
  2872 ;;                  1    wreg      void 
  2873 ;; Registers used:
  2874 ;;		wreg, status,2, status,0, pclath, cstack
  2875 ;; Tracked objects:
  2876 ;;		On entry : B3F/0
  2877 ;;		On exit  : 0/0
  2878 ;;		Unchanged: 0/0
  2879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  2880 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2883 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  2884 ;;Total ram usage:        1 bytes
  2885 ;; Hardware stack levels used:    1
  2886 ;; Hardware stack levels required when called:    7
  2887 ;; This function calls:
  2888 ;;		_OLED_command
  2889 ;;		_OLED_write4bits
  2890 ;; This function is called by:
  2891 ;;		_main
  2892 ;; This function uses a non-reentrant model
  2893 ;;
  2894                           
  2895                           
  2896                           ;psect for function _OLED_init
  2897  00C0                     _OLED_init:	
  2898                           
  2899                           ;oled.c: 80:  LATBbits.LATB4 = 0;
  2900                           
  2901                           ;incstack = 0
  2902                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
  2903  00C0  1219               	bcf	25,4	;volatile
  2904                           
  2905                           ;oled.c: 81:  LATBbits.LATB2 = 0;
  2906  00C1  1119               	bcf	25,2	;volatile
  2907                           
  2908                           ;oled.c: 82:  LATBbits.LATB3 = 0;
  2909  00C2  1199               	bcf	25,3	;volatile
  2910                           
  2911                           ;oled.c: 84:  _delay((unsigned long)((50)*(4000000/4000.0)));
  2912  00C3  3041               	movlw	65
  2913  00C4  0140               	movlb	0	; select bank0
  2914  00C5  00A6               	movwf	??_OLED_init
  2915  00C6  30EE               	movlw	238
  2916  00C7                     u7347:	
  2917  00C7  0B89               	decfsz	9,f
  2918  00C8  28C7               	goto	u7347
  2919  00C9  0BA6               	decfsz	??_OLED_init,f
  2920  00CA  28C7               	goto	u7347
  2921  00CB  0000               	nop
  2922                           
  2923                           ;oled.c: 88:  LATBbits.LATB1 = 0;
  2924  00CC  0140               	movlb	0	; select bank0
  2925  00CD  1099               	bcf	25,1	;volatile
  2926                           
  2927                           ;oled.c: 89:  LATBbits.LATB0 = 0;
  2928  00CE  1019               	bcf	25,0	;volatile
  2929                           
  2930                           ;oled.c: 90:  LATCbits.LATC5 = 0;
  2931  00CF  129A               	bcf	26,5	;volatile
  2932                           
  2933                           ;oled.c: 91:  LATCbits.LATC4 = 0;
  2934  00D0  121A               	bcf	26,4	;volatile
  2935                           
  2936                           ;oled.c: 102:  OLED_write4bits(0x03);
  2937  00D1  3003               	movlw	3
  2938  00D2  2140  3180         	fcall	_OLED_write4bits
  2939                           
  2940                           ;oled.c: 103:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2941  00D4  3007               	movlw	7
  2942  00D5  0140               	movlb	0	; select bank0
  2943  00D6  00A6               	movwf	??_OLED_init
  2944  00D7  307D               	movlw	125
  2945  00D8                     u7357:	
  2946  00D8  0B89               	decfsz	9,f
  2947  00D9  28D8               	goto	u7357
  2948  00DA  0BA6               	decfsz	??_OLED_init,f
  2949  00DB  28D8               	goto	u7357
  2950                           
  2951                           ;oled.c: 104:  OLED_write4bits(0x08);
  2952  00DC  3008               	movlw	8
  2953  00DD  2140  3180         	fcall	_OLED_write4bits
  2954                           
  2955                           ;oled.c: 105:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2956  00DF  3007               	movlw	7
  2957  00E0  0140               	movlb	0	; select bank0
  2958  00E1  00A6               	movwf	??_OLED_init
  2959  00E2  307D               	movlw	125
  2960  00E3                     u7367:	
  2961  00E3  0B89               	decfsz	9,f
  2962  00E4  28E3               	goto	u7367
  2963  00E5  0BA6               	decfsz	??_OLED_init,f
  2964  00E6  28E3               	goto	u7367
  2965                           
  2966                           ;oled.c: 107:  OLED_write4bits(0x02);
  2967  00E7  3002               	movlw	2
  2968  00E8  2140  3180         	fcall	_OLED_write4bits
  2969                           
  2970                           ;oled.c: 108:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2971  00EA  3007               	movlw	7
  2972  00EB  0140               	movlb	0	; select bank0
  2973  00EC  00A6               	movwf	??_OLED_init
  2974  00ED  307D               	movlw	125
  2975  00EE                     u7377:	
  2976  00EE  0B89               	decfsz	9,f
  2977  00EF  28EE               	goto	u7377
  2978  00F0  0BA6               	decfsz	??_OLED_init,f
  2979  00F1  28EE               	goto	u7377
  2980                           
  2981                           ;oled.c: 109:  OLED_write4bits(0x02);
  2982  00F2  3002               	movlw	2
  2983  00F3  2140  3180         	fcall	_OLED_write4bits
  2984                           
  2985                           ;oled.c: 110:  _delay((unsigned long)((5)*(4000000/4000.0)));
  2986  00F5  3007               	movlw	7
  2987  00F6  0140               	movlb	0	; select bank0
  2988  00F7  00A6               	movwf	??_OLED_init
  2989  00F8  307D               	movlw	125
  2990  00F9                     u7387:	
  2991  00F9  0B89               	decfsz	9,f
  2992  00FA  28F9               	goto	u7387
  2993  00FB  0BA6               	decfsz	??_OLED_init,f
  2994  00FC  28F9               	goto	u7387
  2995                           
  2996                           ;oled.c: 111:  OLED_write4bits(0x08);
  2997  00FD  3008               	movlw	8
  2998  00FE  2140  3180         	fcall	_OLED_write4bits
  2999                           
  3000                           ;oled.c: 112:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3001  0100  3007               	movlw	7
  3002  0101  0140               	movlb	0	; select bank0
  3003  0102  00A6               	movwf	??_OLED_init
  3004  0103  307D               	movlw	125
  3005  0104                     u7397:	
  3006  0104  0B89               	decfsz	9,f
  3007  0105  2904               	goto	u7397
  3008  0106  0BA6               	decfsz	??_OLED_init,f
  3009  0107  2904               	goto	u7397
  3010                           
  3011                           ;oled.c: 114:  OLED_command(0x08);
  3012  0108  3008               	movlw	8
  3013  0109  216E  3180         	fcall	_OLED_command
  3014                           
  3015                           ;oled.c: 115:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3016  010B  3007               	movlw	7
  3017  010C  0140               	movlb	0	; select bank0
  3018  010D  00A6               	movwf	??_OLED_init
  3019  010E  307D               	movlw	125
  3020  010F                     u7407:	
  3021  010F  0B89               	decfsz	9,f
  3022  0110  290F               	goto	u7407
  3023  0111  0BA6               	decfsz	??_OLED_init,f
  3024  0112  290F               	goto	u7407
  3025                           
  3026                           ;oled.c: 116:  OLED_command(0x01);
  3027  0113  3001               	movlw	1
  3028  0114  216E  3180         	fcall	_OLED_command
  3029                           
  3030                           ;oled.c: 117:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3031  0116  3007               	movlw	7
  3032  0117  0140               	movlb	0	; select bank0
  3033  0118  00A6               	movwf	??_OLED_init
  3034  0119  307D               	movlw	125
  3035  011A                     u7417:	
  3036  011A  0B89               	decfsz	9,f
  3037  011B  291A               	goto	u7417
  3038  011C  0BA6               	decfsz	??_OLED_init,f
  3039  011D  291A               	goto	u7417
  3040                           
  3041                           ;oled.c: 118:  OLED_command(0x06);
  3042  011E  3006               	movlw	6
  3043  011F  216E  3180         	fcall	_OLED_command
  3044                           
  3045                           ;oled.c: 119:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3046  0121  3007               	movlw	7
  3047  0122  0140               	movlb	0	; select bank0
  3048  0123  00A6               	movwf	??_OLED_init
  3049  0124  307D               	movlw	125
  3050  0125                     u7427:	
  3051  0125  0B89               	decfsz	9,f
  3052  0126  2925               	goto	u7427
  3053  0127  0BA6               	decfsz	??_OLED_init,f
  3054  0128  2925               	goto	u7427
  3055                           
  3056                           ;oled.c: 120:  OLED_command(0x02);
  3057  0129  3002               	movlw	2
  3058  012A  216E  3180         	fcall	_OLED_command
  3059                           
  3060                           ;oled.c: 121:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3061  012C  3007               	movlw	7
  3062  012D  0140               	movlb	0	; select bank0
  3063  012E  00A6               	movwf	??_OLED_init
  3064  012F  307D               	movlw	125
  3065  0130                     u7437:	
  3066  0130  0B89               	decfsz	9,f
  3067  0131  2930               	goto	u7437
  3068  0132  0BA6               	decfsz	??_OLED_init,f
  3069  0133  2930               	goto	u7437
  3070                           
  3071                           ;oled.c: 122:  OLED_command(0x0C);
  3072  0134  300C               	movlw	12
  3073  0135  216E  3180         	fcall	_OLED_command
  3074                           
  3075                           ;oled.c: 123:  _delay((unsigned long)((5)*(4000000/4000.0)));
  3076  0137  3007               	movlw	7
  3077  0138  0140               	movlb	0	; select bank0
  3078  0139  00A6               	movwf	??_OLED_init
  3079  013A  307D               	movlw	125
  3080  013B                     u7447:	
  3081  013B  0B89               	decfsz	9,f
  3082  013C  293B               	goto	u7447
  3083  013D  0BA6               	decfsz	??_OLED_init,f
  3084  013E  293B               	goto	u7447
  3085  013F  0008               	return
  3086  0140                     __end_of_OLED_init:	
  3087  0140                     __ptext69:	
  3088 ;; *************** function _OLED_write4bits *****************
  3089 ;; Defined at:
  3090 ;;		line 19 in file "oled.c"
  3091 ;; Parameters:    Size  Location     Type
  3092 ;;  value           1    wreg     unsigned char 
  3093 ;; Auto vars:     Size  Location     Type
  3094 ;;  value           1    2[BANK0 ] unsigned char 
  3095 ;; Return value:  Size  Location     Type
  3096 ;;                  1    wreg      void 
  3097 ;; Registers used:
  3098 ;;		wreg, status,2, status,0, pclath, cstack
  3099 ;; Tracked objects:
  3100 ;;		On entry : 0/0
  3101 ;;		On exit  : 3F/0
  3102 ;;		Unchanged: 0/0
  3103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3105 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3106 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3107 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3108 ;;Total ram usage:        3 bytes
  3109 ;; Hardware stack levels used:    1
  3110 ;; Hardware stack levels required when called:    4
  3111 ;; This function calls:
  3112 ;;		_OLED_pulseEnable
  3113 ;; This function is called by:
  3114 ;;		_OLED_send
  3115 ;;		_OLED_init
  3116 ;; This function uses a non-reentrant model
  3117 ;;
  3118                           
  3119                           
  3120                           ;psect for function _OLED_write4bits
  3121  0140                     _OLED_write4bits:	
  3122                           
  3123                           ;incstack = 0
  3124                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0+pclath+cstack]
  3125                           ;OLED_write4bits@value stored from wreg
  3126  0140  0140               	movlb	0	; select bank0
  3127  0141  00A2               	movwf	OLED_write4bits@value
  3128                           
  3129                           ;oled.c: 19: void OLED_write4bits(uint8_t value);oled.c: 20: {;oled.c: 21:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
  3130  0142  3901               	andlw	1
  3131  0143  00A0               	movwf	??_OLED_write4bits
  3132  0144  0DA0               	rlf	??_OLED_write4bits,f
  3133  0145  0819               	movf	25,w	;volatile
  3134  0146  0620               	xorwf	??_OLED_write4bits,w
  3135  0147  39FD               	andlw	-3
  3136  0148  0620               	xorwf	??_OLED_write4bits,w
  3137  0149  0099               	movwf	25	;volatile
  3138                           
  3139                           ;oled.c: 22:  LATBbits.LATB0 = (value >> 1) & 0x01;
  3140  014A  0822               	movf	OLED_write4bits@value,w
  3141  014B  00A0               	movwf	??_OLED_write4bits
  3142  014C  3001               	movlw	1
  3143  014D  36A0               	lsrf	??_OLED_write4bits,f
  3144  014E  0520               	andwf	??_OLED_write4bits,w
  3145  014F  00A1               	movwf	??_OLED_write4bits+1
  3146  0150  0819               	movf	25,w	;volatile
  3147  0151  0621               	xorwf	??_OLED_write4bits+1,w
  3148  0152  39FE               	andlw	-2
  3149  0153  0621               	xorwf	??_OLED_write4bits+1,w
  3150  0154  0099               	movwf	25	;volatile
  3151                           
  3152                           ;oled.c: 23:  LATCbits.LATC5 = (value >> 2) & 0x01;
  3153  0155  0822               	movf	OLED_write4bits@value,w
  3154  0156  00A0               	movwf	??_OLED_write4bits
  3155  0157  27B3  3180         	fcall	PL134	;call to abstracted procedure
  3156  0159  0DA1               	rlf	??_OLED_write4bits+1,f
  3157  015A  081A               	movf	26,w	;volatile
  3158  015B  0621               	xorwf	??_OLED_write4bits+1,w
  3159  015C  39DF               	andlw	-33
  3160  015D  0621               	xorwf	??_OLED_write4bits+1,w
  3161  015E  009A               	movwf	26	;volatile
  3162                           
  3163                           ;oled.c: 24:  LATCbits.LATC4 = (value >> 3) & 0x01;
  3164  015F  0822               	movf	OLED_write4bits@value,w
  3165  0160  00A0               	movwf	??_OLED_write4bits
  3166  0161  36A0               	lsrf	??_OLED_write4bits,f
  3167  0162  27B3  3180         	fcall	PL134	;call to abstracted procedure
  3168  0164  081A               	movf	26,w	;volatile
  3169  0165  0621               	xorwf	??_OLED_write4bits+1,w
  3170  0166  39EF               	andlw	-17
  3171  0167  0621               	xorwf	??_OLED_write4bits+1,w
  3172  0168  009A               	movwf	26	;volatile
  3173                           
  3174                           ;oled.c: 26:  _delay((unsigned long)((50)*(4000000/4000000.0)));
  3175  0169  3010               	movlw	16
  3176  016A                     u7477:	
  3177  016A  0B89               	decfsz	9,f
  3178  016B  296A               	goto	u7477
  3179  016C  3200               	nop2
  3180                           
  3181                           ;oled.c: 27:  OLED_pulseEnable();
  3182  016D  2EDD               	ljmp	l3508
  3183  016E                     __end_of_OLED_write4bits:	
  3184  016E                     __ptext66:	
  3185 ;; *************** function _OLED_command *****************
  3186 ;; Defined at:
  3187 ;;		line 66 in file "oled.c"
  3188 ;; Parameters:    Size  Location     Type
  3189 ;;  value           1    wreg     unsigned char 
  3190 ;; Auto vars:     Size  Location     Type
  3191 ;;  value           1    5[BANK0 ] unsigned char 
  3192 ;; Return value:  Size  Location     Type
  3193 ;;                  1    wreg      void 
  3194 ;; Registers used:
  3195 ;;		wreg, status,2, status,0, pclath, cstack
  3196 ;; Tracked objects:
  3197 ;;		On entry : 0/0
  3198 ;;		On exit  : 3F/0
  3199 ;;		Unchanged: 0/0
  3200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3202 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3204 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3205 ;;Total ram usage:        1 bytes
  3206 ;; Hardware stack levels used:    1
  3207 ;; Hardware stack levels required when called:    6
  3208 ;; This function calls:
  3209 ;;		_OLED_send
  3210 ;;		_OLED_waitForReady
  3211 ;; This function is called by:
  3212 ;;		_OLED_init
  3213 ;;		_OLED_scrollDisplayLeft
  3214 ;;		_OLED_scrollDisplayRight
  3215 ;;		_OLED_print_xy
  3216 ;;		_OLED_returnHome
  3217 ;;		_OLED_clearDisplay
  3218 ;;		_returnToPage
  3219 ;; This function uses a non-reentrant model
  3220 ;;
  3221                           
  3222                           
  3223                           ;psect for function _OLED_command
  3224  016E                     _OLED_command:	
  3225                           
  3226                           ;incstack = 0
  3227                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
  3228                           ;OLED_command@value stored from wreg
  3229  016E  0140               	movlb	0	; select bank0
  3230  016F  00A5               	movwf	OLED_command@value
  3231                           
  3232                           ;oled.c: 66: void OLED_command(uint8_t value);oled.c: 67: {;oled.c: 68:  OLED_send(value
      +                          , 0);
  3233  0170  01A3               	clrf	OLED_send@mode
  3234  0171  0825               	movf	OLED_command@value,w
  3235  0172  22C1  3180         	fcall	_OLED_send
  3236                           
  3237                           ;oled.c: 69:  OLED_waitForReady();
  3238  0174  2EE6               	ljmp	l4370
  3239  0175                     __end_of_OLED_command:	
  3240  0175                     __ptext56:	
  3241 ;; *************** function _checkSensor *****************
  3242 ;; Defined at:
  3243 ;;		line 59 in file "main.c"
  3244 ;; Parameters:    Size  Location     Type
  3245 ;;  data            1    wreg     PTR struct .
  3246 ;;		 -> data(33), 
  3247 ;; Auto vars:     Size  Location     Type
  3248 ;;  data            1   56[BANK0 ] PTR struct .
  3249 ;;		 -> data(33), 
  3250 ;;  dp              1   55[BANK0 ] PTR struct .
  3251 ;;		 -> dataPacket(15), 
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  1    wreg      void 
  3254 ;; Registers used:
  3255 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 3F/0
  3258 ;;		On exit  : 3D/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3262 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3263 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3264 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3265 ;;Total ram usage:        6 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    5
  3268 ;; This function calls:
  3269 ;;		___flge
  3270 ;;		___xxtofl
  3271 ;;		_getDataPacket
  3272 ;;		_timeNow
  3273 ;;		_timeSince
  3274 ;;		_uartIsDataReady
  3275 ;;		_uartSendByte
  3276 ;; This function is called by:
  3277 ;;		_main
  3278 ;; This function uses a non-reentrant model
  3279 ;;
  3280                           
  3281                           
  3282                           ;psect for function _checkSensor
  3283  0175                     _checkSensor:	
  3284                           
  3285                           ;incstack = 0
  3286                           ; Regs used in _checkSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  3287                           ;checkSensor@data stored from wreg
  3288  0175  00D8               	movwf	checkSensor@data
  3289                           
  3290                           ;main.c: 59: void checkSensor(t_globalData *data);main.c: 60: {;main.c: 61:  t_dataPacke
      +                          t *dp;;main.c: 62:  static uint32_t sensorUpdateInterval = 0;;main.c: 63:  static uint32
      +                          _t sensorTimeout = 0;;main.c: 64:  static uint8_t state = 0;;main.c: 67:  if ((data->tem
      +                          pAux < -30) || (data->tempAux > 100)) {
  3291  0176  27BA               	fcall	PL142	;call to abstracted procedure
  3292  0177  00C7               	movwf	___flge@ff1
  3293  0178  3F41               	moviw [1]fsr1
  3294  0179  00C8               	movwf	___flge@ff1+1
  3295  017A  3F42               	moviw [2]fsr1
  3296  017B  00C9               	movwf	___flge@ff1+2
  3297  017C  3F43               	moviw [3]fsr1
  3298  017D  00CA               	movwf	___flge@ff1+3
  3299  017E  30C1               	movlw	193
  3300  017F  00CE               	movwf	___flge@ff2+3
  3301  0180  30F0               	movlw	240
  3302  0181  00CD               	movwf	___flge@ff2+2
  3303  0182  01CC               	clrf	___flge@ff2+1
  3304  0183  01CB               	clrf	___flge@ff2
  3305  0184  318C  24CA  3180   	fcall	___flge
  3306  0187  1C03               	btfss	3,0
  3307  0188  299D               	goto	l5462
  3308  0189  3042               	movlw	66
  3309  018A  00CA               	movwf	___flge@ff1+3
  3310  018B  30C8               	movlw	200
  3311  018C  00C9               	movwf	___flge@ff1+2
  3312  018D  01C8               	clrf	___flge@ff1+1
  3313  018E  01C7               	clrf	___flge@ff1
  3314  018F  0858               	movf	checkSensor@data,w
  3315  0190  27BA               	fcall	PL142	;call to abstracted procedure
  3316  0191  00CB               	movwf	___flge@ff2
  3317  0192  3F41               	moviw [1]fsr1
  3318  0193  00CC               	movwf	___flge@ff2+1
  3319  0194  3F42               	moviw [2]fsr1
  3320  0195  00CD               	movwf	___flge@ff2+2
  3321  0196  3F43               	moviw [3]fsr1
  3322  0197  00CE               	movwf	___flge@ff2+3
  3323  0198  318C  24CA  3180   	fcall	___flge
  3324  019B  1803               	btfsc	3,0
  3325  019C  29A1               	goto	l5464
  3326  019D                     l5462:	
  3327                           
  3328                           ;main.c: 68:   data->status.AUX_SENSOR_OK = 0;
  3329  019D  27A7  3180         	fcall	PL120	;call to abstracted procedure
  3330  019F  1101               	bcf	1,2
  3331                           
  3332                           ;main.c: 69:  } else
  3333  01A0  2A58               	goto	l5500
  3334  01A1                     l5464:	
  3335                           
  3336                           ;main.c: 70:   data->status.AUX_SENSOR_OK = 1;
  3337  01A1  27A7  3180         	fcall	PL120	;call to abstracted procedure
  3338  01A3  1501               	bsf	1,2
  3339  01A4  2A58               	goto	l5500
  3340  01A5                     l5466:	
  3341                           
  3342                           ;main.c: 75:    if (timeSince(sensorUpdateInterval) >= 50) {
  3343  01A5  0143               	movlb	3	; select bank3
  3344  01A6  0833               	movf	(checkSensor@sensorUpdateInterval+3)^(0+384),w
  3345  01A7  0140               	movlb	0	; select bank0
  3346  01A8  00A7               	movwf	timeSince@since+3
  3347  01A9  0143               	movlb	3	; select bank3
  3348  01AA  0832               	movf	(checkSensor@sensorUpdateInterval+2)^(0+384),w
  3349  01AB  0140               	movlb	0	; select bank0
  3350  01AC  00A6               	movwf	timeSince@since+2
  3351  01AD  0143               	movlb	3	; select bank3
  3352  01AE  0831               	movf	(checkSensor@sensorUpdateInterval+1)^(0+384),w
  3353  01AF  0140               	movlb	0	; select bank0
  3354  01B0  00A5               	movwf	timeSince@since+1
  3355  01B1  0143               	movlb	3	; select bank3
  3356  01B2  0830               	movf	checkSensor@sensorUpdateInterval^(0+384),w
  3357  01B3  0140               	movlb	0	; select bank0
  3358  01B4  00A4               	movwf	timeSince@since
  3359  01B5  226B  3180         	fcall	_timeSince
  3360  01B7  0827               	movf	?_timeSince+3,w
  3361  01B8  1D03               	btfss	3,2
  3362  01B9  29C4               	goto	l5468
  3363  01BA  0826               	movf	?_timeSince+2,w
  3364  01BB  1D03               	btfss	3,2
  3365  01BC  29C4               	goto	l5468
  3366  01BD  0825               	movf	?_timeSince+1,w
  3367  01BE  1D03               	btfss	3,2
  3368  01BF  29C4               	goto	l5468
  3369  01C0  3032               	movlw	50
  3370  01C1  0224               	subwf	?_timeSince,w
  3371  01C2  1C03               	btfss	3,0
  3372  01C3  0008               	return
  3373  01C4                     l5468:	
  3374                           
  3375                           ;main.c: 76:     sensorUpdateInterval = sensorTimeout = timeNow();
  3376  01C4  22B0  3180         	fcall	_timeNow
  3377  01C6  0823               	movf	?_timeNow+3,w
  3378  01C7  0143               	movlb	3	; select bank3
  3379  01C8  00AF               	movwf	(checkSensor@sensorTimeout+3)^(0+384)
  3380  01C9  0140               	movlb	0	; select bank0
  3381  01CA  0822               	movf	?_timeNow+2,w
  3382  01CB  0143               	movlb	3	; select bank3
  3383  01CC  00AE               	movwf	(checkSensor@sensorTimeout+2)^(0+384)
  3384  01CD  0140               	movlb	0	; select bank0
  3385  01CE  0821               	movf	?_timeNow+1,w
  3386  01CF  0143               	movlb	3	; select bank3
  3387  01D0  00AD               	movwf	(checkSensor@sensorTimeout+1)^(0+384)
  3388  01D1  0140               	movlb	0	; select bank0
  3389  01D2  0820               	movf	?_timeNow,w
  3390  01D3  0143               	movlb	3	; select bank3
  3391  01D4  00AC               	movwf	checkSensor@sensorTimeout^(0+384)
  3392  01D5  082F               	movf	(checkSensor@sensorTimeout+3)^(0+384),w
  3393  01D6  00B3               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+384)
  3394  01D7  082E               	movf	(checkSensor@sensorTimeout+2)^(0+384),w
  3395  01D8  00B2               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+384)
  3396  01D9  082D               	movf	(checkSensor@sensorTimeout+1)^(0+384),w
  3397  01DA  00B1               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+384)
  3398  01DB  082C               	movf	checkSensor@sensorTimeout^(0+384),w
  3399  01DC  00B0               	movwf	checkSensor@sensorUpdateInterval^(0+384)
  3400                           
  3401                           ;main.c: 77:     uartSendByte('?');
  3402  01DD  303F               	movlw	63
  3403  01DE  2702               	fcall	_uartSendByte
  3404                           
  3405                           ;main.c: 78:     state = 1;
  3406  01DF  0142               	movlb	2	; select bank2
  3407  01E0  01ED               	clrf	checkSensor@state^(0+256)
  3408  01E1  0AED               	incf	checkSensor@state^(0+256),f
  3409  01E2  0008               	return
  3410  01E3                     l5474:	
  3411                           
  3412                           ;main.c: 83:    if (timeSince(sensorTimeout) > 20) {
  3413  01E3  0143               	movlb	3	; select bank3
  3414  01E4  082F               	movf	(checkSensor@sensorTimeout+3)^(0+384),w
  3415  01E5  0140               	movlb	0	; select bank0
  3416  01E6  00A7               	movwf	timeSince@since+3
  3417  01E7  0143               	movlb	3	; select bank3
  3418  01E8  082E               	movf	(checkSensor@sensorTimeout+2)^(0+384),w
  3419  01E9  0140               	movlb	0	; select bank0
  3420  01EA  00A6               	movwf	timeSince@since+2
  3421  01EB  0143               	movlb	3	; select bank3
  3422  01EC  082D               	movf	(checkSensor@sensorTimeout+1)^(0+384),w
  3423  01ED  0140               	movlb	0	; select bank0
  3424  01EE  00A5               	movwf	timeSince@since+1
  3425  01EF  0143               	movlb	3	; select bank3
  3426  01F0  082C               	movf	checkSensor@sensorTimeout^(0+384),w
  3427  01F1  0140               	movlb	0	; select bank0
  3428  01F2  00A4               	movwf	timeSince@since
  3429  01F3  226B  3180         	fcall	_timeSince
  3430  01F5  0827               	movf	?_timeSince+3,w
  3431  01F6  1D03               	btfss	3,2
  3432  01F7  2A54               	goto	l5494
  3433  01F8  0826               	movf	?_timeSince+2,w
  3434  01F9  1D03               	btfss	3,2
  3435  01FA  2A54               	goto	l5494
  3436  01FB  0825               	movf	?_timeSince+1,w
  3437  01FC  1D03               	btfss	3,2
  3438  01FD  2A54               	goto	l5494
  3439  01FE  3015               	movlw	21
  3440  01FF  0224               	subwf	?_timeSince,w
  3441  0200  1C03               	btfss	3,0
  3442  0201  2A45               	goto	l5480
  3443  0202  2A54               	goto	l5494
  3444  0203                     l5486:	
  3445                           ;main.c: 84:     data->status.SENSOR_OK = 0;
  3446                           
  3447  0203  0857               	movf	checkSensor@dp,w
  3448  0204  3E02               	addlw	2
  3449  0205  0086               	movwf	6
  3450  0206  3001               	movlw	1	; select bank2/3
  3451  0207  0087               	movwf	7
  3452  0208  0B01               	decfsz	1,w
  3453  0209  2A54               	goto	l5494
  3454                           
  3455                           ;main.c: 89:      data->tempC = dp->tempC;
  3456  020A  0857               	movf	checkSensor@dp,w
  3457  020B  3E03               	addlw	3
  3458  020C  0086               	movwf	6
  3459  020D  273D  3180         	fcall	PL54	;call to abstracted procedure
  3460  020F  270C  3180         	fcall	PL42	;call to abstracted procedure
  3461                           
  3462                           ;main.c: 90:      data->relHum = dp->relHum;
  3463  0211  0857               	movf	checkSensor@dp,w
  3464  0212  3E07               	addlw	7
  3465  0213  0086               	movwf	6
  3466  0214  3001               	movlw	1	; select bank2/3
  3467  0215  0087               	movwf	7
  3468  0216  273D  3180         	fcall	PL54	;call to abstracted procedure
  3469  0218  3E04               	addlw	4
  3470  0219  270C  3180         	fcall	PL42	;call to abstracted procedure
  3471                           
  3472                           ;main.c: 91:      data->dewPointC = dp->dewPointC;
  3473  021B  0857               	movf	checkSensor@dp,w
  3474  021C  3E0B               	addlw	11
  3475  021D  0086               	movwf	6
  3476  021E  3001               	movlw	1	; select bank2/3
  3477  021F  0087               	movwf	7
  3478  0220  273D  3180         	fcall	PL54	;call to abstracted procedure
  3479  0222  3E08               	addlw	8
  3480  0223  270C  3180         	fcall	PL42	;call to abstracted procedure
  3481                           
  3482                           ;main.c: 92:      data->sensorVersion = dp->version;
  3483  0225  0A57               	incf	checkSensor@dp,w
  3484  0226  0086               	movwf	6
  3485  0227  3001               	movlw	1	; select bank2/3
  3486  0228  0087               	movwf	7
  3487  0229  0801               	movf	1,w
  3488  022A  00A0               	movwf	___xxtofl@val
  3489  022B  3000               	movlw	0
  3490  022C  01A1               	clrf	___xxtofl@val+1
  3491  022D  01A2               	clrf	___xxtofl@val+2
  3492  022E  01A3               	clrf	___xxtofl@val+3
  3493  022F  2542               	fcall	___xxtofl
  3494  0230  0858               	movf	checkSensor@data,w
  3495  0231  3E0C               	addlw	12
  3496  0232  0086               	movwf	6
  3497  0233  3002               	movlw	2	; select bank4/5
  3498  0234  0087               	movwf	7
  3499  0235  0820               	movf	?___xxtofl,w
  3500  0236  3FC0               	movwi [0]fsr1
  3501  0237  0821               	movf	?___xxtofl+1,w
  3502  0238  3FC1               	movwi [1]fsr1
  3503  0239  0822               	movf	?___xxtofl+2,w
  3504  023A  3FC2               	movwi [2]fsr1
  3505  023B  0823               	movf	?___xxtofl+3,w
  3506  023C  3FC3               	movwi [3]fsr1
  3507                           
  3508                           ;main.c: 93:      data->status.SENSOR_OK = 1;
  3509  023D  0858               	movf	checkSensor@data,w
  3510  023E  3E20               	addlw	32
  3511  023F  0086               	movwf	6
  3512  0240  3002               	movlw	2	; select bank4/5
  3513  0241  1481               	bsf	1,1
  3514  0242                     l5478:	
  3515                           ;main.c: 94:     } else {
  3516                           
  3517                           
  3518                           ;main.c: 85:     state = 0;
  3519  0242  0142               	movlb	2	; select bank2
  3520  0243  01ED               	clrf	checkSensor@state^(0+256)
  3521                           
  3522                           ;main.c: 86:    } else if (uartIsDataReady()) {
  3523  0244  0008               	return
  3524  0245                     l5480:	
  3525  0245  22CF  3180         	fcall	_uartIsDataReady
  3526  0247  3A00               	xorlw	0
  3527  0248  1903               	skipnz
  3528  0249  0008               	return
  3529                           
  3530                           ;main.c: 87:     dp = getDataPacket();
  3531  024A  22CE  3180         	fcall	_getDataPacket
  3532  024C  00D7               	movwf	checkSensor@dp
  3533                           
  3534                           ;main.c: 88:     if ((dp->header == 0xAA) && (dp->status == 1)) {
  3535  024D  0086               	movwf	6
  3536  024E  3001               	movlw	1	; select bank2/3
  3537  024F  0087               	movwf	7
  3538  0250  30AA               	movlw	170
  3539  0251  0601               	xorwf	1,w
  3540  0252  1903               	btfsc	3,2
  3541  0253  2A03               	goto	l5486
  3542  0254                     l5494:	
  3543                           
  3544                           ;main.c: 96:      data->status.SENSOR_OK = 0;
  3545  0254  27A7  3180         	fcall	PL120	;call to abstracted procedure
  3546  0256  1081               	bcf	1,1
  3547  0257  2A42               	goto	l5478
  3548  0258                     l5500:	
  3549  0258  0142               	movlb	2	; select bank2
  3550  0259  086D               	movf	checkSensor@state^(0+256),w
  3551  025A  0140               	movlb	0	; select bank0
  3552  025B  00D3               	movwf	??_checkSensor
  3553  025C  01D4               	clrf	??_checkSensor+1
  3554                           
  3555                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3556                           ; Switch size 1, requested type "space"
  3557                           ; Number of cases is 1, Range of values is 0 to 0
  3558                           ; switch strategies available:
  3559                           ; Name         Instructions Cycles
  3560                           ; simple_byte            4     3 (average)
  3561                           ; direct_byte            8     6 (fixed)
  3562                           ; jumptable            260     6 (fixed)
  3563                           ;	Chosen strategy is simple_byte
  3564  025D  0854               	movf	??_checkSensor+1,w
  3565  025E  3A00               	xorlw	0	; case 0
  3566  025F  1903               	skipnz
  3567  0260  2A62               	goto	l6036
  3568  0261  2A42               	goto	l5478
  3569  0262                     l6036:	
  3570                           
  3571                           ; Switch size 1, requested type "space"
  3572                           ; Number of cases is 2, Range of values is 0 to 1
  3573                           ; switch strategies available:
  3574                           ; Name         Instructions Cycles
  3575                           ; simple_byte            7     4 (average)
  3576                           ; direct_byte           10     6 (fixed)
  3577                           ; jumptable            260     6 (fixed)
  3578                           ;	Chosen strategy is simple_byte
  3579  0262  0853               	movf	??_checkSensor,w
  3580  0263  3A00               	xorlw	0	; case 0
  3581  0264  1903               	skipnz
  3582  0265  29A5               	goto	l5466
  3583  0266  3A01               	xorlw	1	; case 1
  3584  0267  1903               	skipnz
  3585  0268  29E3               	goto	l5474
  3586  0269  2A42               	goto	l5478
  3587  026A  0008               	return
  3588  026B                     __end_of_checkSensor:	
  3589  026B                     __ptext59:	
  3590 ;; *************** function _timeSince *****************
  3591 ;; Defined at:
  3592 ;;		line 21 in file "interrupt.c"
  3593 ;; Parameters:    Size  Location     Type
  3594 ;;  since           4    4[BANK0 ] unsigned long 
  3595 ;; Auto vars:     Size  Location     Type
  3596 ;;  now             4   16[BANK0 ] unsigned long 
  3597 ;; Return value:  Size  Location     Type
  3598 ;;                  4    4[BANK0 ] unsigned long 
  3599 ;; Registers used:
  3600 ;;		wreg, pclath, cstack
  3601 ;; Tracked objects:
  3602 ;;		On entry : 3F/0
  3603 ;;		On exit  : 3F/0
  3604 ;;		Unchanged: 0/0
  3605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3606 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3607 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3608 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3609 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3610 ;;Total ram usage:       16 bytes
  3611 ;; Hardware stack levels used:    1
  3612 ;; Hardware stack levels required when called:    4
  3613 ;; This function calls:
  3614 ;;		_timeNow
  3615 ;; This function is called by:
  3616 ;;		_checkSensor
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619                           
  3620                           
  3621                           ;psect for function _timeSince
  3622  026B                     _timeSince:	
  3623                           
  3624                           ;incstack = 0
  3625                           ; Regs used in _timeSince: [wreg+pclath+cstack]
  3626  026B  22B0  3180         	fcall	_timeNow
  3627  026D  0823               	movf	?_timeNow+3,w
  3628  026E  00B3               	movwf	timeSince@now+3
  3629  026F  0822               	movf	?_timeNow+2,w
  3630  0270  00B2               	movwf	timeSince@now+2
  3631  0271  0821               	movf	?_timeNow+1,w
  3632  0272  00B1               	movwf	timeSince@now+1
  3633  0273  0820               	movf	?_timeNow,w
  3634  0274  00B0               	movwf	timeSince@now
  3635  0275  0827               	movf	timeSince@since+3,w
  3636  0276  0233               	subwf	timeSince@now+3,w
  3637  0277  1D03               	skipz
  3638  0278  2A83               	goto	u6365
  3639  0279  0826               	movf	timeSince@since+2,w
  3640  027A  0232               	subwf	timeSince@now+2,w
  3641  027B  1D03               	skipz
  3642  027C  2A83               	goto	u6365
  3643  027D  0825               	movf	timeSince@since+1,w
  3644  027E  0231               	subwf	timeSince@now+1,w
  3645  027F  1D03               	skipz
  3646  0280  2A83               	goto	u6365
  3647  0281  0824               	movf	timeSince@since,w
  3648  0282  0230               	subwf	timeSince@now,w
  3649  0283                     u6365:	
  3650  0283  1C03               	skipc
  3651  0284  2A92               	goto	l5130
  3652  0285  0824               	movf	timeSince@since,w
  3653  0286  0230               	subwf	timeSince@now,w
  3654  0287  00A8               	movwf	??_timeSince
  3655  0288  0825               	movf	timeSince@since+1,w
  3656  0289  3B31               	subwfb	timeSince@now+1,w
  3657  028A  00A9               	movwf	??_timeSince+1
  3658  028B  0826               	movf	timeSince@since+2,w
  3659  028C  3B32               	subwfb	timeSince@now+2,w
  3660  028D  00AA               	movwf	??_timeSince+2
  3661  028E  0827               	movf	timeSince@since+3,w
  3662  028F  3B33               	subwfb	timeSince@now+3,w
  3663  0290  00AB               	movwf	??_timeSince+3
  3664  0291  2F8F               	ljmp	PL96	;call to abstracted procedure
  3665  0292                     l5130:	
  3666  0292  3001               	movlw	1
  3667  0293  00A8               	movwf	??_timeSince
  3668  0294  30CA               	movlw	202
  3669  0295  00A9               	movwf	??_timeSince+1
  3670  0296  309A               	movlw	154
  3671  0297  00AA               	movwf	??_timeSince+2
  3672  0298  303B               	movlw	59
  3673  0299  00AB               	movwf	??_timeSince+3
  3674  029A  0824               	movf	timeSince@since,w
  3675  029B  0230               	subwf	timeSince@now,w
  3676  029C  00AC               	movwf	??_timeSince+4
  3677  029D  0825               	movf	timeSince@since+1,w
  3678  029E  3B31               	subwfb	timeSince@now+1,w
  3679  029F  00AD               	movwf	??_timeSince+5
  3680  02A0  0826               	movf	timeSince@since+2,w
  3681  02A1  3B32               	subwfb	timeSince@now+2,w
  3682  02A2  00AE               	movwf	??_timeSince+6
  3683  02A3  0827               	movf	timeSince@since+3,w
  3684  02A4  3B33               	subwfb	timeSince@now+3,w
  3685  02A5  00AF               	movwf	??_timeSince+7
  3686  02A6  082C               	movf	??_timeSince+4,w
  3687  02A7  07A8               	addwf	??_timeSince,f
  3688  02A8  082D               	movf	??_timeSince+5,w
  3689  02A9  3DA9               	addwfc	??_timeSince+1,f
  3690  02AA  082E               	movf	??_timeSince+6,w
  3691  02AB  3DAA               	addwfc	??_timeSince+2,f
  3692  02AC  082F               	movf	??_timeSince+7,w
  3693  02AD  3DAB               	addwfc	??_timeSince+3,f
  3694  02AE  082B               	movf	??_timeSince+3,w
  3695  02AF  2F8F               	ljmp	PL96	;call to abstracted procedure
  3696  02B0                     __end_of_timeSince:	
  3697  02B0                     __ptext60:	
  3698 ;; *************** function _timeNow *****************
  3699 ;; Defined at:
  3700 ;;		line 13 in file "interrupt.c"
  3701 ;; Parameters:    Size  Location     Type
  3702 ;;		None
  3703 ;; Auto vars:     Size  Location     Type
  3704 ;;		None
  3705 ;; Return value:  Size  Location     Type
  3706 ;;                  4    0[BANK0 ] unsigned long 
  3707 ;; Registers used:
  3708 ;;		wreg
  3709 ;; Tracked objects:
  3710 ;;		On entry : 3F/0
  3711 ;;		On exit  : 3F/0
  3712 ;;		Unchanged: 0/0
  3713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3714 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3717 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3718 ;;Total ram usage:        4 bytes
  3719 ;; Hardware stack levels used:    1
  3720 ;; Hardware stack levels required when called:    3
  3721 ;; This function calls:
  3722 ;;		Nothing
  3723 ;; This function is called by:
  3724 ;;		_checkSensor
  3725 ;;		_timeSince
  3726 ;; This function uses a non-reentrant model
  3727 ;;
  3728                           
  3729                           
  3730                           ;psect for function _timeNow
  3731  02B0                     _timeNow:	
  3732                           
  3733                           ;incstack = 0
  3734                           ; Regs used in _timeNow: [wreg]
  3735  02B0  0143               	movlb	3	; select bank3
  3736  02B1  082B               	movf	(_tick100ms+3)^(0+384),w	;volatile
  3737  02B2  0140               	movlb	0	; select bank0
  3738  02B3  00A3               	movwf	?_timeNow+3
  3739  02B4  0143               	movlb	3	; select bank3
  3740  02B5  082A               	movf	(_tick100ms+2)^(0+384),w	;volatile
  3741  02B6  0140               	movlb	0	; select bank0
  3742  02B7  00A2               	movwf	?_timeNow+2
  3743  02B8  0143               	movlb	3	; select bank3
  3744  02B9  0829               	movf	(_tick100ms+1)^(0+384),w	;volatile
  3745  02BA  0140               	movlb	0	; select bank0
  3746  02BB  00A1               	movwf	?_timeNow+1
  3747  02BC  0143               	movlb	3	; select bank3
  3748  02BD  0828               	movf	_tick100ms^(0+384),w	;volatile
  3749  02BE  0140               	movlb	0	; select bank0
  3750  02BF  00A0               	movwf	?_timeNow
  3751  02C0  0008               	return
  3752  02C1                     __end_of_timeNow:	
  3753  02C1                     __ptext68:	
  3754 ;; *************** function _OLED_send *****************
  3755 ;; Defined at:
  3756 ;;		line 30 in file "oled.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  value           1    wreg     unsigned char 
  3759 ;;  mode            1    3[BANK0 ] unsigned char 
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  value           1    4[BANK0 ] unsigned char 
  3762 ;; Return value:  Size  Location     Type
  3763 ;;                  1    wreg      void 
  3764 ;; Registers used:
  3765 ;;		wreg, status,2, status,0, pclath, cstack
  3766 ;; Tracked objects:
  3767 ;;		On entry : 3F/0
  3768 ;;		On exit  : 3F/0
  3769 ;;		Unchanged: 0/0
  3770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3771 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3772 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3773 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3774 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3775 ;;Total ram usage:        2 bytes
  3776 ;; Hardware stack levels used:    1
  3777 ;; Hardware stack levels required when called:    5
  3778 ;; This function calls:
  3779 ;;		_OLED_write4bits
  3780 ;; This function is called by:
  3781 ;;		_OLED_command
  3782 ;;		_OLED_write
  3783 ;; This function uses a non-reentrant model
  3784 ;;
  3785                           
  3786                           
  3787                           ;psect for function _OLED_send
  3788  02C1                     _OLED_send:	
  3789                           
  3790                           ;incstack = 0
  3791                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
  3792                           ;OLED_send@value stored from wreg
  3793  02C1  00A4               	movwf	OLED_send@value
  3794                           
  3795                           ;oled.c: 30: void OLED_send(uint8_t value, uint8_t mode);oled.c: 31: {;oled.c: 32:  LATB
      +                          bits.LATB4 = mode;
  3796  02C2  0C23               	rrf	OLED_send@mode,w
  3797  02C3  1C03               	skipc
  3798  02C4  1219               	bcf	25,4	;volatile
  3799  02C5  1803               	skipnc
  3800  02C6  1619               	bsf	25,4	;volatile
  3801                           
  3802                           ;oled.c: 33:  LATBbits.LATB3 = 0;
  3803  02C7  1199               	bcf	25,3	;volatile
  3804                           
  3805                           ;oled.c: 35:  OLED_write4bits(value >> 4);
  3806  02C8  0E24               	swapf	OLED_send@value,w
  3807  02C9  390F               	andlw	15
  3808  02CA  2140  3180         	fcall	_OLED_write4bits
  3809                           
  3810                           ;oled.c: 36:  OLED_write4bits(value);
  3811  02CC  0824               	movf	OLED_send@value,w
  3812  02CD  2940               	ljmp	_OLED_write4bits
  3813  02CE                     __end_of_OLED_send:	
  3814  02CE                     __ptext61:	
  3815 ;; *************** function _getDataPacket *****************
  3816 ;; Defined at:
  3817 ;;		line 18 in file "uart.c"
  3818 ;; Parameters:    Size  Location     Type
  3819 ;;		None
  3820 ;; Auto vars:     Size  Location     Type
  3821 ;;		None
  3822 ;; Return value:  Size  Location     Type
  3823 ;;                  1    wreg      PTR struct .
  3824 ;; Registers used:
  3825 ;;		wreg
  3826 ;; Tracked objects:
  3827 ;;		On entry : 3F/0
  3828 ;;		On exit  : 3F/0
  3829 ;;		Unchanged: 3F/0
  3830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3831 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3832 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3833 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3834 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3835 ;;Total ram usage:        0 bytes
  3836 ;; Hardware stack levels used:    1
  3837 ;; Hardware stack levels required when called:    3
  3838 ;; This function calls:
  3839 ;;		Nothing
  3840 ;; This function is called by:
  3841 ;;		_checkSensor
  3842 ;; This function uses a non-reentrant model
  3843 ;;
  3844                           
  3845                           
  3846                           ;psect for function _getDataPacket
  3847  02CE                     _getDataPacket:	
  3848                           
  3849                           ;uart.c: 20:  return &dataPacket;
  3850                           
  3851                           ;incstack = 0
  3852                           ; Regs used in _getDataPacket: [wreg]
  3853  02CE  34BC               	retlw	(low (_dataPacket| (0+256)))& (0+255)
  3854  02CF                     __end_of_getDataPacket:	
  3855  02CF                     __ptext58:	
  3856 ;; *************** function _uartIsDataReady *****************
  3857 ;; Defined at:
  3858 ;;		line 11 in file "uart.c"
  3859 ;; Parameters:    Size  Location     Type
  3860 ;;		None
  3861 ;; Auto vars:     Size  Location     Type
  3862 ;;  ret             1    0[BANK0 ] unsigned char 
  3863 ;; Return value:  Size  Location     Type
  3864 ;;                  1    wreg      unsigned char 
  3865 ;; Registers used:
  3866 ;;		wreg, status,2
  3867 ;; Tracked objects:
  3868 ;;		On entry : 3F/0
  3869 ;;		On exit  : 3F/0
  3870 ;;		Unchanged: 0/0
  3871 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3875 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3876 ;;Total ram usage:        1 bytes
  3877 ;; Hardware stack levels used:    1
  3878 ;; Hardware stack levels required when called:    3
  3879 ;; This function calls:
  3880 ;;		Nothing
  3881 ;; This function is called by:
  3882 ;;		_checkSensor
  3883 ;; This function uses a non-reentrant model
  3884 ;;
  3885                           
  3886                           
  3887                           ;psect for function _uartIsDataReady
  3888  02CF                     _uartIsDataReady:	
  3889                           
  3890                           ;uart.c: 13:  uint8_t ret = dataReadyFlag;
  3891                           
  3892                           ;incstack = 0
  3893                           ; Regs used in _uartIsDataReady: [wreg+status,2]
  3894  02CF  0142               	movlb	2	; select bank2
  3895  02D0  0868               	movf	_dataReadyFlag^(0+256),w	;volatile
  3896  02D1  0140               	movlb	0	; select bank0
  3897  02D2  00A0               	movwf	uartIsDataReady@ret
  3898                           
  3899                           ;uart.c: 14:  dataReadyFlag = 0;
  3900  02D3  0142               	movlb	2	; select bank2
  3901  02D4  01E8               	clrf	_dataReadyFlag^(0+256)	;volatile
  3902                           
  3903                           ;uart.c: 15:  return ret;
  3904  02D5  0140               	movlb	0	; select bank0
  3905  02D6  0820               	movf	uartIsDataReady@ret,w
  3906  02D7  0008               	return
  3907  02D8                     __end_of_uartIsDataReady:	
  3908  02D8                     __ptext47:	
  3909 ;; *************** function _initialize *****************
  3910 ;; Defined at:
  3911 ;;		line 150 in file "main.c"
  3912 ;; Parameters:    Size  Location     Type
  3913 ;;		None
  3914 ;; Auto vars:     Size  Location     Type
  3915 ;;		None
  3916 ;; Return value:  Size  Location     Type
  3917 ;;                  1    wreg      void 
  3918 ;; Registers used:
  3919 ;;		wreg, status,2, status,0
  3920 ;; Tracked objects:
  3921 ;;		On entry : B3F/0
  3922 ;;		On exit  : B3F/2
  3923 ;;		Unchanged: B00/0
  3924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  3925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3926 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3928 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  3929 ;;Total ram usage:        0 bytes
  3930 ;; Hardware stack levels used:    1
  3931 ;; Hardware stack levels required when called:    3
  3932 ;; This function calls:
  3933 ;;		Nothing
  3934 ;; This function is called by:
  3935 ;;		_main
  3936 ;; This function uses a non-reentrant model
  3937 ;;
  3938                           
  3939                           
  3940                           ;psect for function _initialize
  3941  02D8                     _initialize:	
  3942                           
  3943                           ;main.c: 152:  OSCFRQ = 0b00000010;
  3944                           
  3945                           ;incstack = 0
  3946                           ; Regs used in _initialize: [wreg+status,2+status,0]
  3947  02D8  3002               	movlw	2
  3948  02D9  0151               	movlb	17	; select bank17
  3949  02DA  0093               	movwf	19	;volatile
  3950                           
  3951                           ;main.c: 153:  OSCCON1 = 0b01100000;
  3952  02DB  3060               	movlw	96
  3953  02DC  008D               	movwf	13	;volatile
  3954  02DD                     l151:	
  3955                           ;main.c: 154:  while (!OSCCON3bits.ORDY);
  3956                           
  3957  02DD  1E0F               	btfss	15,4	;volatile
  3958  02DE  2ADD               	goto	l151
  3959                           
  3960                           ;main.c: 157:  RX1DTPPSbits.RX1DTPPS = 0x17;
  3961  02DF  017D               	movlb	61	; select bank61
  3962  02E0  084B               	movf	75,w	;volatile
  3963  02E1  39C0               	andlw	-64
  3964  02E2  3817               	iorlw	23
  3965  02E3  00CB               	movwf	75	;volatile
  3966                           
  3967                           ;main.c: 158:  RC6PPS = 0x0F;
  3968  02E4  300F               	movlw	15
  3969  02E5  017E               	movlb	62	; select bank62
  3970  02E6  00A6               	movwf	38	;volatile
  3971                           
  3972                           ;main.c: 161:  ANSELA = 0b01000000;
  3973  02E7  3040               	movlw	64
  3974  02E8  00B8               	movwf	56	;volatile
  3975                           
  3976                           ;main.c: 162:  ANSELB = 0b00000000;
  3977  02E9  01C3               	clrf	67	;volatile
  3978                           
  3979                           ;main.c: 163:  ANSELC = 0b00000011;
  3980  02EA  3003               	movlw	3
  3981  02EB  00CE               	movwf	78	;volatile
  3982                           
  3983                           ;main.c: 166:  TRISA = 0b11110000;
  3984  02EC  30F0               	movlw	240
  3985  02ED  0140               	movlb	0	; select bank0
  3986  02EE  0092               	movwf	18	;volatile
  3987                           
  3988                           ;main.c: 167:  TRISB = 0b00000000;
  3989  02EF  0193               	clrf	19	;volatile
  3990                           
  3991                           ;main.c: 168:  TRISC = 0b10000111;
  3992  02F0  3087               	movlw	135
  3993  02F1  0094               	movwf	20	;volatile
  3994                           
  3995                           ;main.c: 171:  ADCON0bits.ADON = 1;
  3996  02F2  0141               	movlb	1	; select bank1
  3997  02F3  141D               	bsf	29,0	;volatile
  3998                           
  3999                           ;main.c: 172:  ADCON1 = 0b11100000;
  4000  02F4  30E0               	movlw	224
  4001  02F5  009E               	movwf	30	;volatile
  4002                           
  4003                           ;main.c: 175:  T0CON0 = 0b10000000;
  4004  02F6  3080               	movlw	128
  4005  02F7  014B               	movlb	11	; select bank11
  4006  02F8  009E               	movwf	30	;volatile
  4007                           
  4008                           ;main.c: 176:  T0CON1 = 0b01000111;
  4009  02F9  3047               	movlw	71
  4010  02FA  009F               	movwf	31	;volatile
  4011                           
  4012                           ;main.c: 177:  TMR0 = 178;
  4013  02FB  30B2               	movlw	178
  4014  02FC  009C               	movwf	28	;volatile
  4015                           
  4016                           ;main.c: 180:  T1CON = 0b00110011;
  4017  02FD  3033               	movlw	51
  4018  02FE  0144               	movlb	4	; select bank4
  4019  02FF  008E               	movwf	14	;volatile
  4020                           
  4021                           ;main.c: 181:  T1CLK = 0b00000001;
  4022  0300  3001               	movlw	1
  4023  0301  0091               	movwf	17	;volatile
  4024                           
  4025                           ;main.c: 182:  TMR1 = 53035;
  4026  0302  30CF               	movlw	207
  4027  0303  008D               	movwf	13	;volatile
  4028  0304  302B               	movlw	43
  4029  0305  008C               	movwf	12	;volatile
  4030                           
  4031                           ;main.c: 185:  PIE0 = 0b00110000;
  4032  0306  3030               	movlw	48
  4033  0307  014E               	movlb	14	; select bank14
  4034  0308  0096               	movwf	22	;volatile
  4035                           
  4036                           ;main.c: 186:  PIE3 = 0b00100000;
  4037  0309  3020               	movlw	32
  4038  030A  0099               	movwf	25	;volatile
  4039                           
  4040                           ;main.c: 187:  PIE4 = 0b00000001;
  4041  030B  3001               	movlw	1
  4042  030C  009A               	movwf	26	;volatile
  4043                           
  4044                           ;main.c: 188:  INTCON = 0b11000000;
  4045  030D  30C0               	movlw	192
  4046  030E  008B               	movwf	11	;volatile
  4047                           
  4048                           ;main.c: 191:  IOCAP = 0b10110000;
  4049  030F  30B0               	movlw	176
  4050  0310  017E               	movlb	62	; select bank62
  4051  0311  00BD               	movwf	61	;volatile
  4052                           
  4053                           ;main.c: 192:  IOCAN = 0b10110000;
  4054  0312  00BE               	movwf	62	;volatile
  4055                           
  4056                           ;main.c: 193:  IOCCN = 0b00000100;
  4057  0313  3004               	movlw	4
  4058  0314  00D4               	movwf	84	;volatile
  4059                           
  4060                           ;main.c: 197:  BAUD1CON = 0b00001000;
  4061  0315  3008               	movlw	8
  4062  0316  0142               	movlb	2	; select bank2
  4063  0317  009F               	movwf	31	;volatile
  4064                           
  4065                           ;main.c: 198:  SPBRGL = 25;
  4066  0318  3019               	movlw	25
  4067  0319  009B               	movwf	27	;volatile
  4068                           
  4069                           ;main.c: 199:  RC1STA = 0b10010000;
  4070  031A  3090               	movlw	144
  4071  031B  009D               	movwf	29	;volatile
  4072                           
  4073                           ;main.c: 200:  TX1STA = 0b00100000;
  4074  031C  3020               	movlw	32
  4075  031D  009E               	movwf	30	;volatile
  4076  031E  0008               	return
  4077  031F                     __end_of_initialize:	
  4078  031F                     __ptext48:	
  4079 ;; *************** function _convertAnalogValues *****************
  4080 ;; Defined at:
  4081 ;;		line 129 in file "main.c"
  4082 ;; Parameters:    Size  Location     Type
  4083 ;;  data            1    wreg     PTR struct .
  4084 ;;		 -> data(33), 
  4085 ;; Auto vars:     Size  Location     Type
  4086 ;;  data            1   70[BANK0 ] PTR struct .
  4087 ;;		 -> data(33), 
  4088 ;;  f               4    0        float 
  4089 ;;  adc             2   68[BANK0 ] unsigned short 
  4090 ;; Return value:  Size  Location     Type
  4091 ;;                  1    wreg      void 
  4092 ;; Registers used:
  4093 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4094 ;; Tracked objects:
  4095 ;;		On entry : 0/0
  4096 ;;		On exit  : 3F/0
  4097 ;;		Unchanged: 0/0
  4098 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4100 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4102 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4103 ;;Total ram usage:        7 bytes
  4104 ;; Hardware stack levels used:    1
  4105 ;; Hardware stack levels required when called:    5
  4106 ;; This function calls:
  4107 ;;		___fladd
  4108 ;;		___fldiv
  4109 ;;		___flmul
  4110 ;;		___xxtofl
  4111 ;;		_adcGetConversion
  4112 ;;		_ema
  4113 ;; This function is called by:
  4114 ;;		_main
  4115 ;; This function uses a non-reentrant model
  4116 ;;
  4117                           
  4118                           
  4119                           ;psect for function _convertAnalogValues
  4120  031F                     _convertAnalogValues:	
  4121                           
  4122                           ;incstack = 0
  4123                           ; Regs used in _convertAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4124                           ;convertAnalogValues@data stored from wreg
  4125  031F  0140               	movlb	0	; select bank0
  4126  0320  00E6               	movwf	convertAnalogValues@data
  4127                           
  4128                           ;main.c: 129: void convertAnalogValues(t_globalData *data);main.c: 130: {;main.c: 131:  
      +                          static uint16_t avgT, avgV, avgI;;main.c: 132:  uint16_t adc;;main.c: 133:  float f;;mai
      +                          n.c: 135:  adc = adcGetConversion(0b000110);
  4129  0321  3006               	movlw	6
  4130  0322  25AB  3180         	fcall	_adcGetConversion
  4131                           
  4132                           ;main.c: 136:  avgT = ema(adc, avgT, ( (uint32_t)(0.65 * 65535) ));
  4133  0324  2733  3180         	fcall	PL52	;call to abstracted procedure
  4134  0326  083B               	movf	(convertAnalogValues@avgT+1)^(0+384),w
  4135  0327  0140               	movlb	0	; select bank0
  4136  0328  00AF               	movwf	ema@average+1
  4137  0329  0143               	movlb	3	; select bank3
  4138  032A  083A               	movf	convertAnalogValues@avgT^(0+384),w
  4139  032B  2764  3180         	fcall	PL66	;call to abstracted procedure
  4140  032D  25CA  3180         	fcall	_ema
  4141  032F  082D               	movf	?_ema+1,w
  4142  0330  0143               	movlb	3	; select bank3
  4143  0331  00BB               	movwf	(convertAnalogValues@avgT+1)^(0+384)
  4144  0332  0140               	movlb	0	; select bank0
  4145  0333  082C               	movf	?_ema,w
  4146  0334  0143               	movlb	3	; select bank3
  4147  0335  00BA               	movwf	convertAnalogValues@avgT^(0+384)
  4148                           
  4149                           ;main.c: 137:  adc = adcGetConversion(0b010000);
  4150  0336  3010               	movlw	16
  4151  0337  25AB  3180         	fcall	_adcGetConversion
  4152                           
  4153                           ;main.c: 138:  avgV = ema(adc, avgV, ( (uint32_t)(0.65 * 65535) ));
  4154  0339  2733  3180         	fcall	PL52	;call to abstracted procedure
  4155  033B  0839               	movf	(convertAnalogValues@avgV+1)^(0+384),w
  4156  033C  0140               	movlb	0	; select bank0
  4157  033D  00AF               	movwf	ema@average+1
  4158  033E  0143               	movlb	3	; select bank3
  4159  033F  0838               	movf	convertAnalogValues@avgV^(0+384),w
  4160  0340  2764  3180         	fcall	PL66	;call to abstracted procedure
  4161  0342  25CA  3180         	fcall	_ema
  4162  0344  082D               	movf	?_ema+1,w
  4163  0345  0143               	movlb	3	; select bank3
  4164  0346  00B9               	movwf	(convertAnalogValues@avgV+1)^(0+384)
  4165  0347  0140               	movlb	0	; select bank0
  4166  0348  082C               	movf	?_ema,w
  4167  0349  0143               	movlb	3	; select bank3
  4168  034A  00B8               	movwf	convertAnalogValues@avgV^(0+384)
  4169                           
  4170                           ;main.c: 139:  adc = adcGetConversion(0b010001);
  4171  034B  3011               	movlw	17
  4172  034C  25AB  3180         	fcall	_adcGetConversion
  4173                           
  4174                           ;main.c: 140:  avgI = ema(adc, avgI, ( (uint32_t)(0.65 * 65535) ));
  4175  034E  2733  3180         	fcall	PL52	;call to abstracted procedure
  4176  0350  0837               	movf	(convertAnalogValues@avgI+1)^(0+384),w
  4177  0351  0140               	movlb	0	; select bank0
  4178  0352  00AF               	movwf	ema@average+1
  4179  0353  0143               	movlb	3	; select bank3
  4180  0354  0836               	movf	convertAnalogValues@avgI^(0+384),w
  4181  0355  2764  3180         	fcall	PL66	;call to abstracted procedure
  4182  0357  25CA  3180         	fcall	_ema
  4183  0359  082D               	movf	?_ema+1,w
  4184  035A  0143               	movlb	3	; select bank3
  4185  035B  00B7               	movwf	(convertAnalogValues@avgI+1)^(0+384)
  4186  035C  0140               	movlb	0	; select bank0
  4187  035D  082C               	movf	?_ema,w
  4188  035E  0143               	movlb	3	; select bank3
  4189  035F  00B6               	movwf	convertAnalogValues@avgI^(0+384)
  4190                           
  4191                           ;main.c: 141:  data->tempAux = (avgT * 0.1191) - 34.512;
  4192  0360  30C2               	movlw	194
  4193  0361  0140               	movlb	0	; select bank0
  4194  0362  00CA               	movwf	___fladd@b+3
  4195  0363  300A               	movlw	10
  4196  0364  00C9               	movwf	___fladd@b+2
  4197  0365  300C               	movlw	12
  4198  0366  00C8               	movwf	___fladd@b+1
  4199  0367  304A               	movlw	74
  4200  0368  00C7               	movwf	___fladd@b
  4201  0369  303D               	movlw	61
  4202  036A  00B1               	movwf	___flmul@b+3
  4203  036B  30F3               	movlw	243
  4204  036C  00B0               	movwf	___flmul@b+2
  4205  036D  30EA               	movlw	234
  4206  036E  00AF               	movwf	___flmul@b+1
  4207  036F  30B3               	movlw	179
  4208  0370  00AE               	movwf	___flmul@b
  4209  0371  0143               	movlb	3	; select bank3
  4210  0372  083A               	movf	convertAnalogValues@avgT^(0+384),w
  4211  0373  0140               	movlb	0	; select bank0
  4212  0374  00A0               	movwf	___xxtofl@val
  4213  0375  0143               	movlb	3	; select bank3
  4214  0376  083B               	movf	(convertAnalogValues@avgT+1)^(0+384),w
  4215  0377  27AD  3180         	fcall	PL124	;call to abstracted procedure
  4216  0379  2542  3180         	fcall	___xxtofl
  4217  037B  275B  3180         	fcall	PL62	;call to abstracted procedure
  4218  037D  2411               	fcall	___flmul
  4219  037E  0831               	movf	?___flmul+3,w
  4220  037F  00CE               	movwf	___fladd@a+3
  4221  0380  0830               	movf	?___flmul+2,w
  4222  0381  00CD               	movwf	___fladd@a+2
  4223  0382  082F               	movf	?___flmul+1,w
  4224  0383  00CC               	movwf	___fladd@a+1
  4225  0384  082E               	movf	?___flmul,w
  4226  0385  00CB               	movwf	___fladd@a
  4227  0386  319C  24E1  3180   	fcall	___fladd
  4228  0389  0866               	movf	convertAnalogValues@data,w
  4229  038A  3E10               	addlw	16
  4230  038B  0086               	movwf	6
  4231  038C  3002               	movlw	2	; select bank4/5
  4232  038D  0087               	movwf	7
  4233  038E  0847               	movf	?___fladd,w
  4234  038F  3FC0               	movwi [0]fsr1
  4235  0390  0848               	movf	?___fladd+1,w
  4236  0391  3FC1               	movwi [1]fsr1
  4237  0392  0849               	movf	?___fladd+2,w
  4238  0393  3FC2               	movwi [2]fsr1
  4239  0394  084A               	movf	?___fladd+3,w
  4240  0395  3FC3               	movwi [3]fsr1
  4241                           
  4242                           ;main.c: 142:  data->voltage = ((float)avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0);
  4243  0396  3040               	movlw	64
  4244  0397  27A0  3180         	fcall	PL114	;call to abstracted procedure
  4245  0399  0838               	movf	convertAnalogValues@avgV^(0+384),w
  4246  039A  0140               	movlb	0	; select bank0
  4247  039B  00A0               	movwf	___xxtofl@val
  4248  039C  0143               	movlb	3	; select bank3
  4249  039D  0839               	movf	(convertAnalogValues@avgV+1)^(0+384),w
  4250  039E  27AD  3180         	fcall	PL124	;call to abstracted procedure
  4251  03A0  2542  3180         	fcall	___xxtofl
  4252  03A2  275B  3180         	fcall	PL62	;call to abstracted procedure
  4253  03A4  2411  3180         	fcall	___flmul
  4254  03A6  0831               	movf	?___flmul+3,w
  4255  03A7  00E3               	movwf	_convertAnalogValues$1790+3
  4256  03A8  0830               	movf	?___flmul+2,w
  4257  03A9  00E2               	movwf	_convertAnalogValues$1790+2
  4258  03AA  082F               	movf	?___flmul+1,w
  4259  03AB  00E1               	movwf	_convertAnalogValues$1790+1
  4260  03AC  082E               	movf	?___flmul,w
  4261  03AD  00E0               	movwf	_convertAnalogValues$1790
  4262                           
  4263                           ;main.c: 142:  data->voltage = ((float)avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0);
  4264  03AE  3047               	movlw	71
  4265  03AF  00CA               	movwf	___fldiv@a+3
  4266  03B0  303B               	movlw	59
  4267  03B1  00C9               	movwf	___fldiv@a+2
  4268  03B2  30D1               	movlw	209
  4269  03B3  00C8               	movwf	___fldiv@a+1
  4270  03B4  3043               	movlw	67
  4271  03B5  01C7               	clrf	___fldiv@a
  4272  03B6  00B1               	movwf	___flmul@b+3
  4273  03B7  3045               	movlw	69
  4274  03B8  00B0               	movwf	___flmul@b+2
  4275  03B9  01AF               	clrf	___flmul@b+1
  4276  03BA  01AE               	clrf	___flmul@b
  4277  03BB  0863               	movf	_convertAnalogValues$1790+3,w
  4278  03BC  00B5               	movwf	___flmul@a+3
  4279  03BD  0862               	movf	_convertAnalogValues$1790+2,w
  4280  03BE  00B4               	movwf	___flmul@a+2
  4281  03BF  0861               	movf	_convertAnalogValues$1790+1,w
  4282  03C0  00B3               	movwf	___flmul@a+1
  4283  03C1  0860               	movf	_convertAnalogValues$1790,w
  4284  03C2  00B2               	movwf	___flmul@a
  4285  03C3  2411  3180         	fcall	___flmul
  4286  03C5  2786               	fcall	PL86	;call to abstracted procedure
  4287  03C6  318B  23CC  3180   	fcall	___fldiv
  4288  03C9  0866               	movf	convertAnalogValues@data,w
  4289  03CA  3E14               	addlw	20
  4290  03CB  277A  3180         	fcall	PL72	;call to abstracted procedure
  4291                           
  4292                           ;main.c: 143:  data->current = (avgI * 5.0) / (1023.0 * 0.05 * 50.0);
  4293  03CD  3045               	movlw	69
  4294  03CE  00CA               	movwf	___fldiv@a+3
  4295  03CF  301F               	movlw	31
  4296  03D0  00C9               	movwf	___fldiv@a+2
  4297  03D1  30D8               	movlw	216
  4298  03D2  00C8               	movwf	___fldiv@a+1
  4299  03D3  3040               	movlw	64
  4300  03D4  01C7               	clrf	___fldiv@a
  4301  03D5  27A0  3180         	fcall	PL114	;call to abstracted procedure
  4302  03D7  0836               	movf	convertAnalogValues@avgI^(0+384),w
  4303  03D8  0140               	movlb	0	; select bank0
  4304  03D9  00A0               	movwf	___xxtofl@val
  4305  03DA  0143               	movlb	3	; select bank3
  4306  03DB  0837               	movf	(convertAnalogValues@avgI+1)^(0+384),w
  4307  03DC  27AD  3180         	fcall	PL124	;call to abstracted procedure
  4308  03DE  2542  3180         	fcall	___xxtofl
  4309  03E0  275B  3180         	fcall	PL62	;call to abstracted procedure
  4310  03E2  2411  3180         	fcall	___flmul
  4311  03E4  2786               	fcall	PL86	;call to abstracted procedure
  4312  03E5  318B  23CC  3180   	fcall	___fldiv
  4313  03E8  0866               	movf	convertAnalogValues@data,w
  4314  03E9  3E18               	addlw	24
  4315  03EA  277A  3180         	fcall	PL72	;call to abstracted procedure
  4316                           
  4317                           ;main.c: 144:  data->power = data->voltage * data->current;
  4318  03EC  0866               	movf	convertAnalogValues@data,w
  4319  03ED  3E18               	addlw	24
  4320  03EE  0086               	movwf	6
  4321  03EF  3F40               	moviw [0]fsr1
  4322  03F0  00AE               	movwf	___flmul@b
  4323  03F1  3F41               	moviw [1]fsr1
  4324  03F2  00AF               	movwf	___flmul@b+1
  4325  03F3  3F42               	moviw [2]fsr1
  4326  03F4  00B0               	movwf	___flmul@b+2
  4327  03F5  3F43               	moviw [3]fsr1
  4328  03F6  00B1               	movwf	___flmul@b+3
  4329  03F7  0866               	movf	convertAnalogValues@data,w
  4330  03F8  3E14               	addlw	20
  4331  03F9  0086               	movwf	6
  4332  03FA  3F40               	moviw [0]fsr1
  4333  03FB  00B2               	movwf	___flmul@a
  4334  03FC  3F41               	moviw [1]fsr1
  4335  03FD  00B3               	movwf	___flmul@a+1
  4336  03FE  3F42               	moviw [2]fsr1
  4337  03FF  00B4               	movwf	___flmul@a+2
  4338  0400  3F43               	moviw [3]fsr1
  4339  0401  00B5               	movwf	___flmul@a+3
  4340  0402  2411               	fcall	___flmul
  4341  0403  0866               	movf	convertAnalogValues@data,w
  4342  0404  3E1C               	addlw	28
  4343  0405  0086               	movwf	6
  4344  0406  3002               	movlw	2	; select bank4/5
  4345  0407  0087               	movwf	7
  4346  0408  082E               	movf	?___flmul,w
  4347  0409  3FC0               	movwi [0]fsr1
  4348  040A  082F               	movf	?___flmul+1,w
  4349  040B  3FC1               	movwi [1]fsr1
  4350  040C  0830               	movf	?___flmul+2,w
  4351  040D  3FC2               	movwi [2]fsr1
  4352  040E  0831               	movf	?___flmul+3,w
  4353  040F  3FC3               	movwi [3]fsr1
  4354  0410  0008               	return
  4355  0411                     __end_of_convertAnalogValues:	
  4356  0411                     __ptext52:	
  4357 ;; *************** function ___flmul *****************
  4358 ;; Defined at:
  4359 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\sprcmul.c"
  4360 ;; Parameters:    Size  Location     Type
  4361 ;;  b               4   14[BANK0 ] unsigned short 
  4362 ;;  a               4   18[BANK0 ] unsigned short 
  4363 ;; Auto vars:     Size  Location     Type
  4364 ;;  prod            4   33[BANK0 ] struct .
  4365 ;;  grs             4   28[BANK0 ] unsigned long 
  4366 ;;  temp            2   37[BANK0 ] struct .
  4367 ;;  bexp            1   32[BANK0 ] unsigned char 
  4368 ;;  aexp            1   27[BANK0 ] unsigned char 
  4369 ;;  sign            1   26[BANK0 ] unsigned char 
  4370 ;; Return value:  Size  Location     Type
  4371 ;;                  4   14[BANK0 ] unsigned char 
  4372 ;; Registers used:
  4373 ;;		wreg, status,2, status,0, pclath, cstack
  4374 ;; Tracked objects:
  4375 ;;		On entry : 3F/0
  4376 ;;		On exit  : 3F/0
  4377 ;;		Unchanged: 0/0
  4378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4379 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4380 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4381 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4382 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4383 ;;Total ram usage:       25 bytes
  4384 ;; Hardware stack levels used:    1
  4385 ;; Hardware stack levels required when called:    4
  4386 ;; This function calls:
  4387 ;;		__Umul8_16
  4388 ;; This function is called by:
  4389 ;;		_convertAnalogValues
  4390 ;;		_efgtoa
  4391 ;; This function uses a non-reentrant model
  4392 ;;
  4393                           
  4394                           
  4395                           ;psect for function ___flmul
  4396  0411                     ___flmul:	
  4397                           
  4398                           ;incstack = 0
  4399                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
  4400  0411  0831               	movf	___flmul@b+3,w
  4401  0412  00BA               	movwf	___flmul@sign
  4402  0413  3080               	movlw	128
  4403  0414  05BA               	andwf	___flmul@sign,f
  4404  0415  3531               	lslf	___flmul@b+3,w
  4405  0416  00C0               	movwf	___flmul@bexp
  4406  0417  1BB0               	btfsc	___flmul@b+2,7
  4407  0418  1440               	bsf	___flmul@bexp,0
  4408  0419  0840               	movf	___flmul@bexp,w
  4409  041A  1903               	btfsc	3,2
  4410  041B  2C22               	goto	l1092
  4411  041C  0F40               	incfsz	___flmul@bexp,w
  4412  041D  2C20               	goto	l1093
  4413  041E  27CB  3180         	fcall	PL162	;call to abstracted procedure
  4414  0420                     l1093:	
  4415  0420  17B0               	bsf	___flmul@b+2,7
  4416  0421  2C24               	goto	l4244
  4417  0422                     l1092:	
  4418  0422  27CB  3180         	fcall	PL162	;call to abstracted procedure
  4419  0424                     l4244:	
  4420  0424  0835               	movf	___flmul@a+3,w
  4421  0425  3980               	andlw	128
  4422  0426  06BA               	xorwf	___flmul@sign,f
  4423  0427  3535               	lslf	___flmul@a+3,w
  4424  0428  00BB               	movwf	___flmul@aexp
  4425  0429  1BB4               	btfsc	___flmul@a+2,7
  4426  042A  143B               	bsf	___flmul@aexp,0
  4427  042B  083B               	movf	___flmul@aexp,w
  4428  042C  1903               	btfsc	3,2
  4429  042D  2C34               	goto	l1096
  4430  042E  0F3B               	incfsz	___flmul@aexp,w
  4431  042F  2C32               	goto	l1097
  4432  0430  27C6  3180         	fcall	PL160	;call to abstracted procedure
  4433  0432                     l1097:	
  4434  0432  17B4               	bsf	___flmul@a+2,7
  4435  0433  2C36               	goto	l4256
  4436  0434                     l1096:	
  4437  0434  27C6  3180         	fcall	PL160	;call to abstracted procedure
  4438  0436                     l4256:	
  4439  0436  083B               	movf	___flmul@aexp,w
  4440  0437  1D03               	btfss	3,2
  4441  0438  0840               	movf	___flmul@bexp,w
  4442  0439  1D03               	btfss	3,2
  4443  043A  2C40               	goto	l4260
  4444  043B  01AE               	clrf	?___flmul
  4445  043C  01AF               	clrf	?___flmul+1
  4446  043D  01B0               	clrf	?___flmul+2
  4447  043E  01B1               	clrf	?___flmul+3
  4448  043F  0008               	return
  4449  0440                     l4260:	
  4450  0440  082E               	movf	___flmul@b,w
  4451  0441  00A0               	movwf	__Umul8_16@multiplicand
  4452  0442  0834               	movf	___flmul@a+2,w
  4453  0443  252B  3180         	fcall	__Umul8_16
  4454  0445  0821               	movf	?__Umul8_16+1,w
  4455  0446  00C6               	movwf	___flmul@temp+1
  4456  0447  0820               	movf	?__Umul8_16,w
  4457  0448  00C5               	movwf	___flmul@temp
  4458  0449  00BC               	movwf	___flmul@grs
  4459  044A  01BD               	clrf	___flmul@grs+1
  4460  044B  01BE               	clrf	___flmul@grs+2
  4461  044C  01BF               	clrf	___flmul@grs+3
  4462  044D  0846               	movf	___flmul@temp+1,w
  4463  044E  00C1               	movwf	___flmul@prod
  4464  044F  01C2               	clrf	___flmul@prod+1
  4465  0450  01C3               	clrf	___flmul@prod+2
  4466  0451  01C4               	clrf	___flmul@prod+3
  4467  0452  082F               	movf	___flmul@b+1,w
  4468  0453  00A0               	movwf	__Umul8_16@multiplicand
  4469  0454  0833               	movf	___flmul@a+1,w
  4470  0455  252B  3180         	fcall	__Umul8_16
  4471  0457  0821               	movf	?__Umul8_16+1,w
  4472  0458  2747  3180         	fcall	PL58	;call to abstracted procedure
  4473  045A  07C1               	addwf	___flmul@prod,f
  4474  045B  3001               	movlw	1
  4475  045C  1803               	skipnc
  4476  045D  07C2               	addwf	___flmul@prod+1,f
  4477  045E  1803               	skipnc
  4478  045F  07C3               	addwf	___flmul@prod+2,f
  4479  0460  1803               	skipnc
  4480  0461  07C4               	addwf	___flmul@prod+3,f
  4481  0462  0830               	movf	___flmul@b+2,w
  4482  0463  00A0               	movwf	__Umul8_16@multiplicand
  4483  0464  0832               	movf	___flmul@a,w
  4484  0465  252B  3180         	fcall	__Umul8_16
  4485  0467  0821               	movf	?__Umul8_16+1,w
  4486  0468  2747  3180         	fcall	PL58	;call to abstracted procedure
  4487  046A  2723  3180         	fcall	PL50	;call to abstracted procedure
  4488  046C  082F               	movf	___flmul@b+1,w
  4489  046D  00A0               	movwf	__Umul8_16@multiplicand
  4490  046E  0832               	movf	___flmul@a,w
  4491  046F  252B  3180         	fcall	__Umul8_16
  4492  0471  2718  3180         	fcall	PL46	;call to abstracted procedure
  4493  0473  082E               	movf	___flmul@b,w
  4494  0474  00A0               	movwf	__Umul8_16@multiplicand
  4495  0475  0833               	movf	___flmul@a+1,w
  4496  0476  252B  3180         	fcall	__Umul8_16
  4497  0478  2718  3180         	fcall	PL46	;call to abstracted procedure
  4498  047A  083E               	movf	___flmul@grs+2,w
  4499  047B  00BF               	movwf	___flmul@grs+3
  4500  047C  083D               	movf	___flmul@grs+1,w
  4501  047D  00BE               	movwf	___flmul@grs+2
  4502  047E  083C               	movf	___flmul@grs,w
  4503  047F  00BD               	movwf	___flmul@grs+1
  4504  0480  01BC               	clrf	___flmul@grs
  4505  0481  082E               	movf	___flmul@b,w
  4506  0482  00A0               	movwf	__Umul8_16@multiplicand
  4507  0483  0832               	movf	___flmul@a,w
  4508  0484  252B  3180         	fcall	__Umul8_16
  4509  0486  2718  3180         	fcall	PL46	;call to abstracted procedure
  4510  0488  082F               	movf	___flmul@b+1,w
  4511  0489  00A0               	movwf	__Umul8_16@multiplicand
  4512  048A  0834               	movf	___flmul@a+2,w
  4513  048B  252B  3180         	fcall	__Umul8_16
  4514  048D  276D  3180         	fcall	PL68	;call to abstracted procedure
  4515  048F  0833               	movf	___flmul@a+1,w
  4516  0490  252B  3180         	fcall	__Umul8_16
  4517  0492  276D  3180         	fcall	PL68	;call to abstracted procedure
  4518  0494  0834               	movf	___flmul@a+2,w
  4519  0495  252B  3180         	fcall	__Umul8_16
  4520  0497  0821               	movf	?__Umul8_16+1,w
  4521  0498  00C6               	movwf	___flmul@temp+1
  4522  0499  0820               	movf	?__Umul8_16,w
  4523  049A  00C5               	movwf	___flmul@temp
  4524  049B  00B6               	movwf	??___flmul
  4525  049C  0846               	movf	___flmul@temp+1,w
  4526  049D  00B7               	movwf	??___flmul+1
  4527  049E  01B8               	clrf	??___flmul+2
  4528  049F  01B9               	clrf	??___flmul+3
  4529  04A0  0838               	movf	??___flmul+2,w
  4530  04A1  00B9               	movwf	??___flmul+3
  4531  04A2  0837               	movf	??___flmul+1,w
  4532  04A3  00B8               	movwf	??___flmul+2
  4533  04A4  0836               	movf	??___flmul,w
  4534  04A5  00B7               	movwf	??___flmul+1
  4535  04A6  01B6               	clrf	??___flmul
  4536  04A7  0836               	movf	??___flmul,w
  4537  04A8  07C1               	addwf	___flmul@prod,f
  4538  04A9  0837               	movf	??___flmul+1,w
  4539  04AA  3DC2               	addwfc	___flmul@prod+1,f
  4540  04AB  0838               	movf	??___flmul+2,w
  4541  04AC  3DC3               	addwfc	___flmul@prod+2,f
  4542  04AD  0839               	movf	??___flmul+3,w
  4543  04AE  3DC4               	addwfc	___flmul@prod+3,f
  4544  04AF  083F               	movf	___flmul@grs+3,w
  4545  04B0  2723  3180         	fcall	PL50	;call to abstracted procedure
  4546  04B2  0840               	movf	___flmul@bexp,w
  4547  04B3  00C5               	movwf	___flmul@temp
  4548  04B4  01C6               	clrf	___flmul@temp+1
  4549  04B5  083B               	movf	___flmul@aexp,w
  4550  04B6  07C5               	addwf	___flmul@temp,f
  4551  04B7  1803               	skipnc
  4552  04B8  0AC6               	incf	___flmul@temp+1,f
  4553  04B9  3082               	movlw	-126
  4554  04BA                     L16:	
  4555  04BA  07C5               	addwf	___flmul@temp,f
  4556  04BB  1C03               	skipc
  4557  04BC  03C6               	decf	___flmul@temp+1,f
  4558  04BD  1BC3               	btfsc	___flmul@prod+2,7
  4559  04BE  2CCB               	goto	l4308
  4560  04BF  35C1               	lslf	___flmul@prod,f
  4561  04C0  0DC2               	rlf	___flmul@prod+1,f
  4562  04C1  0DC3               	rlf	___flmul@prod+2,f
  4563  04C2  0DC4               	rlf	___flmul@prod+3,f
  4564  04C3  1BBF               	btfsc	___flmul@grs+3,7
  4565  04C4  1441               	bsf	___flmul@prod,0
  4566  04C5  30FF               	movlw	-1
  4567  04C6  35BC               	lslf	___flmul@grs,f
  4568  04C7  0DBD               	rlf	___flmul@grs+1,f
  4569  04C8  0DBE               	rlf	___flmul@grs+2,f
  4570  04C9  0DBF               	rlf	___flmul@grs+3,f
  4571  04CA  2CBA               	goto	L16
  4572  04CB                     l4308:	
  4573  04CB  01BB               	clrf	___flmul@aexp
  4574  04CC  1FBF               	btfss	___flmul@grs+3,7
  4575  04CD  2CE0               	goto	l4318
  4576  04CE  083C               	movf	___flmul@grs,w
  4577  04CF  00B6               	movwf	??___flmul
  4578  04D0  083D               	movf	___flmul@grs+1,w
  4579  04D1  00B7               	movwf	??___flmul+1
  4580  04D2  083E               	movf	___flmul@grs+2,w
  4581  04D3  00B8               	movwf	??___flmul+2
  4582  04D4  307F               	movlw	127
  4583  04D5  053F               	andwf	___flmul@grs+3,w
  4584  04D6  00B9               	movwf	??___flmul+3
  4585  04D7  0438               	iorwf	??___flmul+2,w
  4586  04D8  0437               	iorwf	??___flmul+1,w
  4587  04D9  0436               	iorwf	??___flmul,w
  4588  04DA  1903               	skipnz
  4589  04DB  1841               	btfsc	___flmul@prod,0
  4590  04DC  2CDE               	goto	l4314
  4591  04DD  2CE0               	goto	l4318
  4592  04DE                     l4314:	
  4593  04DE  01BB               	clrf	___flmul@aexp
  4594  04DF  0ABB               	incf	___flmul@aexp,f
  4595  04E0                     l4318:	
  4596  04E0  083B               	movf	___flmul@aexp,w
  4597  04E1  1903               	btfsc	3,2
  4598  04E2  2CF2               	goto	l4328
  4599  04E3  3001               	movlw	1
  4600  04E4  07C1               	addwf	___flmul@prod,f
  4601  04E5  3000               	movlw	0
  4602  04E6  3DC2               	addwfc	___flmul@prod+1,f
  4603  04E7  3DC3               	addwfc	___flmul@prod+2,f
  4604  04E8  3DC4               	addwfc	___flmul@prod+3,f
  4605  04E9  1C44               	btfss	___flmul@prod+3,0
  4606  04EA  2CF2               	goto	l4328
  4607  04EB  37C4               	asrf	___flmul@prod+3,f
  4608  04EC  0CC3               	rrf	___flmul@prod+2,f
  4609  04ED  0CC2               	rrf	___flmul@prod+1,f
  4610  04EE  0CC1               	rrf	___flmul@prod,f
  4611  04EF  0AC5               	incf	___flmul@temp,f
  4612  04F0  1903               	skipnz
  4613  04F1  0AC6               	incf	___flmul@temp+1,f
  4614  04F2                     l4328:	
  4615  04F2  27C0  3180         	fcall	PL156	;call to abstracted procedure
  4616  04F4  1D03               	skipz
  4617  04F5  2CF8               	goto	u5085
  4618  04F6  30FF               	movlw	255
  4619  04F7  0245               	subwf	___flmul@temp,w
  4620  04F8                     u5085:	
  4621  04F8  1C03               	skipc
  4622  04F9  2D02               	goto	l4332
  4623  04FA  307F               	movlw	127
  4624  04FB  0140               	movlb	0	; select bank0
  4625  04FC  00C4               	movwf	___flmul@prod+3
  4626  04FD  3080               	movlw	128
  4627  04FE  00C3               	movwf	___flmul@prod+2
  4628  04FF  01C2               	clrf	___flmul@prod+1
  4629  0500  01C1               	clrf	___flmul@prod
  4630  0501  2D20               	goto	l1114
  4631  0502                     l4332:	
  4632  0502  0140               	movlb	0	; select bank0
  4633  0503  27C0  3180         	fcall	PL156	;call to abstracted procedure
  4634  0505  1D03               	skipz
  4635  0506  2D09               	goto	u5095
  4636  0507  3001               	movlw	1
  4637  0508  0245               	subwf	___flmul@temp,w
  4638  0509                     u5095:	
  4639  0509  1803               	skipnc
  4640  050A  2D12               	goto	l4338
  4641  050B  0140               	movlb	0	; select bank0
  4642  050C  01C1               	clrf	___flmul@prod
  4643  050D  01C2               	clrf	___flmul@prod+1
  4644  050E  01C3               	clrf	___flmul@prod+2
  4645  050F  01C4               	clrf	___flmul@prod+3
  4646  0510  01BA               	clrf	___flmul@sign
  4647  0511  2D20               	goto	l1114
  4648  0512                     l4338:	
  4649  0512  0140               	movlb	0	; select bank0
  4650  0513  0845               	movf	___flmul@temp,w
  4651  0514  00C0               	movwf	___flmul@bexp
  4652  0515  30FF               	movlw	255
  4653  0516  05C1               	andwf	___flmul@prod,f
  4654  0517  05C2               	andwf	___flmul@prod+1,f
  4655  0518  307F               	movlw	127
  4656  0519  05C3               	andwf	___flmul@prod+2,f
  4657  051A  3000               	movlw	0
  4658  051B  01C4               	clrf	___flmul@prod+3
  4659  051C  1840               	btfsc	___flmul@bexp,0
  4660  051D  17C3               	bsf	___flmul@prod+2,7
  4661  051E  3640               	lsrf	___flmul@bexp,w
  4662  051F  00C4               	movwf	___flmul@prod+3
  4663  0520                     l1114:	
  4664  0520  083A               	movf	___flmul@sign,w
  4665  0521  04C4               	iorwf	___flmul@prod+3,f
  4666  0522  0844               	movf	___flmul@prod+3,w
  4667  0523  00B1               	movwf	?___flmul+3
  4668  0524  0843               	movf	___flmul@prod+2,w
  4669  0525  00B0               	movwf	?___flmul+2
  4670  0526  0842               	movf	___flmul@prod+1,w
  4671  0527  00AF               	movwf	?___flmul+1
  4672  0528  0841               	movf	___flmul@prod,w
  4673  0529  00AE               	movwf	?___flmul
  4674  052A  0008               	return
  4675  052B                     __end_of___flmul:	
  4676  052B                     __ptext53:	
  4677 ;; *************** function __Umul8_16 *****************
  4678 ;; Defined at:
  4679 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul8_16.c"
  4680 ;; Parameters:    Size  Location     Type
  4681 ;;  multiplier      1    wreg     unsigned char 
  4682 ;;  multiplicand    1    0[BANK0 ] unsigned char 
  4683 ;; Auto vars:     Size  Location     Type
  4684 ;;  multiplier      1    7[BANK0 ] unsigned char 
  4685 ;;  word_mpld       2    5[BANK0 ] unsigned int 
  4686 ;;  product         2    3[BANK0 ] unsigned int 
  4687 ;; Return value:  Size  Location     Type
  4688 ;;                  2    0[BANK0 ] unsigned int 
  4689 ;; Registers used:
  4690 ;;		wreg, status,2, status,0
  4691 ;; Tracked objects:
  4692 ;;		On entry : 3F/0
  4693 ;;		On exit  : 3F/0
  4694 ;;		Unchanged: 0/0
  4695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4696 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4697 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4698 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4699 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4700 ;;Total ram usage:        8 bytes
  4701 ;; Hardware stack levels used:    1
  4702 ;; Hardware stack levels required when called:    3
  4703 ;; This function calls:
  4704 ;;		Nothing
  4705 ;; This function is called by:
  4706 ;;		___flmul
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           
  4711                           ;psect for function __Umul8_16
  4712  052B                     __Umul8_16:	
  4713                           
  4714                           ;incstack = 0
  4715                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
  4716                           ;__Umul8_16@multiplier stored from wreg
  4717  052B  00A7               	movwf	__Umul8_16@multiplier
  4718  052C  01A3               	clrf	__Umul8_16@product
  4719  052D  01A4               	clrf	__Umul8_16@product+1
  4720  052E  0820               	movf	__Umul8_16@multiplicand,w
  4721  052F  00A5               	movwf	__Umul8_16@word_mpld
  4722  0530  01A6               	clrf	__Umul8_16@word_mpld+1
  4723  0531                     l3718:	
  4724  0531  1C27               	btfss	__Umul8_16@multiplier,0
  4725  0532  2D37               	goto	l3722
  4726  0533  0825               	movf	__Umul8_16@word_mpld,w
  4727  0534  07A3               	addwf	__Umul8_16@product,f
  4728  0535  0826               	movf	__Umul8_16@word_mpld+1,w
  4729  0536  3DA4               	addwfc	__Umul8_16@product+1,f
  4730  0537                     l3722:	
  4731  0537  35A5               	lslf	__Umul8_16@word_mpld,f
  4732  0538  0DA6               	rlf	__Umul8_16@word_mpld+1,f
  4733  0539  36A7               	lsrf	__Umul8_16@multiplier,f
  4734  053A  0827               	movf	__Umul8_16@multiplier,w
  4735  053B  1D03               	btfss	3,2
  4736  053C  2D31               	goto	l3718
  4737  053D  0824               	movf	__Umul8_16@product+1,w
  4738  053E  00A1               	movwf	?__Umul8_16+1
  4739  053F  0823               	movf	__Umul8_16@product,w
  4740  0540  00A0               	movwf	?__Umul8_16
  4741  0541  0008               	return
  4742  0542                     __end_of__Umul8_16:	
  4743  0542                     __ptext62:	
  4744 ;; *************** function ___xxtofl *****************
  4745 ;; Defined at:
  4746 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\xxtofl.c"
  4747 ;; Parameters:    Size  Location     Type
  4748 ;;  sign            1    wreg     unsigned char 
  4749 ;;  val             4    0[BANK0 ] long 
  4750 ;; Auto vars:     Size  Location     Type
  4751 ;;  sign            1    8[BANK0 ] unsigned char 
  4752 ;;  arg             4   10[BANK0 ] unsigned long 
  4753 ;;  exp             1    9[BANK0 ] unsigned char 
  4754 ;; Return value:  Size  Location     Type
  4755 ;;                  4    0[BANK0 ] unsigned char 
  4756 ;; Registers used:
  4757 ;;		wreg, status,2, status,0
  4758 ;; Tracked objects:
  4759 ;;		On entry : 3F/0
  4760 ;;		On exit  : 3F/0
  4761 ;;		Unchanged: 0/0
  4762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4763 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4764 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4765 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4766 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4767 ;;Total ram usage:       14 bytes
  4768 ;; Hardware stack levels used:    1
  4769 ;; Hardware stack levels required when called:    3
  4770 ;; This function calls:
  4771 ;;		Nothing
  4772 ;; This function is called by:
  4773 ;;		_checkSensor
  4774 ;;		_convertAnalogValues
  4775 ;; This function uses a non-reentrant model
  4776 ;;
  4777                           
  4778                           
  4779                           ;psect for function ___xxtofl
  4780  0542                     ___xxtofl:	
  4781                           
  4782                           ;incstack = 0
  4783                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
  4784                           ;___xxtofl@sign stored from wreg
  4785  0542  00A8               	movwf	___xxtofl@sign
  4786  0543  0828               	movf	___xxtofl@sign,w
  4787  0544  1D03               	btfss	3,2
  4788  0545  1FA3               	btfss	___xxtofl@val+3,7
  4789  0546  2D57               	goto	l5316
  4790  0547  0920               	comf	___xxtofl@val,w
  4791  0548  00AA               	movwf	___xxtofl@arg
  4792  0549  0921               	comf	___xxtofl@val+1,w
  4793  054A  00AB               	movwf	___xxtofl@arg+1
  4794  054B  0922               	comf	___xxtofl@val+2,w
  4795  054C  00AC               	movwf	___xxtofl@arg+2
  4796  054D  0923               	comf	___xxtofl@val+3,w
  4797  054E  00AD               	movwf	___xxtofl@arg+3
  4798  054F  0AAA               	incf	___xxtofl@arg,f
  4799  0550  1903               	skipnz
  4800  0551  0AAB               	incf	___xxtofl@arg+1,f
  4801  0552  1903               	skipnz
  4802  0553  0AAC               	incf	___xxtofl@arg+2,f
  4803  0554  1903               	skipnz
  4804  0555  0AAD               	incf	___xxtofl@arg+3,f
  4805  0556  2D5F               	goto	l1121
  4806  0557                     l5316:	
  4807  0557  0823               	movf	___xxtofl@val+3,w
  4808  0558  00AD               	movwf	___xxtofl@arg+3
  4809  0559  0822               	movf	___xxtofl@val+2,w
  4810  055A  00AC               	movwf	___xxtofl@arg+2
  4811  055B  0821               	movf	___xxtofl@val+1,w
  4812  055C  00AB               	movwf	___xxtofl@arg+1
  4813  055D  0820               	movf	___xxtofl@val,w
  4814  055E  00AA               	movwf	___xxtofl@arg
  4815  055F                     l1121:	
  4816  055F  0823               	movf	___xxtofl@val+3,w
  4817  0560  0422               	iorwf	___xxtofl@val+2,w
  4818  0561  0421               	iorwf	___xxtofl@val+1,w
  4819  0562  0420               	iorwf	___xxtofl@val,w
  4820  0563  1D03               	skipz
  4821  0564  2D6A               	goto	l5320
  4822  0565  01A0               	clrf	?___xxtofl
  4823  0566  01A1               	clrf	?___xxtofl+1
  4824  0567  01A2               	clrf	?___xxtofl+2
  4825  0568  01A3               	clrf	?___xxtofl+3
  4826  0569  0008               	return
  4827  056A                     l5320:	
  4828  056A  3096               	movlw	150
  4829  056B  00A9               	movwf	___xxtofl@exp
  4830  056C                     l5324:	
  4831  056C  30FE               	movlw	254
  4832  056D  052D               	andwf	___xxtofl@arg+3,w
  4833  056E  1903               	btfsc	3,2
  4834  056F  2D7D               	goto	l5332
  4835  0570  0AA9               	incf	___xxtofl@exp,f
  4836  0571  27D0  3180         	fcall	PL166	;call to abstracted procedure
  4837  0573  2D6C               	goto	l5324
  4838  0574                     l5326:	
  4839  0574  3001               	movlw	1
  4840  0575  0AA9               	incf	___xxtofl@exp,f
  4841  0576  07AA               	addwf	___xxtofl@arg,f
  4842  0577  3000               	movlw	0
  4843  0578  3DAB               	addwfc	___xxtofl@arg+1,f
  4844  0579  3DAC               	addwfc	___xxtofl@arg+2,f
  4845  057A  3DAD               	addwfc	___xxtofl@arg+3,f
  4846  057B  27D0  3180         	fcall	PL166	;call to abstracted procedure
  4847  057D                     l5332:	
  4848  057D  30FF               	movlw	255
  4849  057E  052D               	andwf	___xxtofl@arg+3,w
  4850  057F  1903               	btfsc	3,2
  4851  0580  2D8B               	goto	l5336
  4852  0581  2D74               	goto	l5326
  4853  0582                     l5338:	
  4854  0582  3002               	movlw	2
  4855  0583  0229               	subwf	___xxtofl@exp,w
  4856  0584  1C03               	btfss	3,0
  4857  0585  2D8D               	goto	l1134
  4858  0586  03A9               	decf	___xxtofl@exp,f
  4859  0587  35AA               	lslf	___xxtofl@arg,f
  4860  0588  0DAB               	rlf	___xxtofl@arg+1,f
  4861  0589  0DAC               	rlf	___xxtofl@arg+2,f
  4862  058A  0DAD               	rlf	___xxtofl@arg+3,f
  4863  058B                     l5336:	
  4864  058B  1FAC               	btfss	___xxtofl@arg+2,7
  4865  058C  2D82               	goto	l5338
  4866  058D                     l1134:	
  4867  058D  1C29               	btfss	___xxtofl@exp,0
  4868  058E  13AC               	bcf	___xxtofl@arg+2,7
  4869  058F  36A9               	lsrf	___xxtofl@exp,f
  4870  0590  0829               	movf	___xxtofl@exp,w
  4871  0591  00A7               	movwf	??___xxtofl+3
  4872  0592  01A6               	clrf	??___xxtofl+2
  4873  0593  01A5               	clrf	??___xxtofl+1
  4874  0594  01A4               	clrf	??___xxtofl
  4875  0595  0824               	movf	??___xxtofl,w
  4876  0596  04AA               	iorwf	___xxtofl@arg,f
  4877  0597  0825               	movf	??___xxtofl+1,w
  4878  0598  04AB               	iorwf	___xxtofl@arg+1,f
  4879  0599  0826               	movf	??___xxtofl+2,w
  4880  059A  04AC               	iorwf	___xxtofl@arg+2,f
  4881  059B  0827               	movf	??___xxtofl+3,w
  4882  059C  04AD               	iorwf	___xxtofl@arg+3,f
  4883  059D  0828               	movf	___xxtofl@sign,w
  4884  059E  1D03               	btfss	3,2
  4885  059F  1FA3               	btfss	___xxtofl@val+3,7
  4886  05A0  2DA2               	goto	l5350
  4887  05A1  17AD               	bsf	___xxtofl@arg+3,7
  4888  05A2                     l5350:	
  4889  05A2  082D               	movf	___xxtofl@arg+3,w
  4890  05A3  00A3               	movwf	?___xxtofl+3
  4891  05A4  082C               	movf	___xxtofl@arg+2,w
  4892  05A5  00A2               	movwf	?___xxtofl+2
  4893  05A6  082B               	movf	___xxtofl@arg+1,w
  4894  05A7  00A1               	movwf	?___xxtofl+1
  4895  05A8  082A               	movf	___xxtofl@arg,w
  4896  05A9  00A0               	movwf	?___xxtofl
  4897  05AA  0008               	return
  4898  05AB                     __end_of___xxtofl:	
  4899  05AB                     __ptext51:	
  4900 ;; *************** function _adcGetConversion *****************
  4901 ;; Defined at:
  4902 ;;		line 118 in file "main.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  channel         1    wreg     unsigned char 
  4905 ;; Auto vars:     Size  Location     Type
  4906 ;;  channel         1    3[BANK0 ] unsigned char 
  4907 ;; Return value:  Size  Location     Type
  4908 ;;                  2    0[BANK0 ] unsigned short 
  4909 ;; Registers used:
  4910 ;;		wreg, status,2, status,0
  4911 ;; Tracked objects:
  4912 ;;		On entry : 3C/0
  4913 ;;		On exit  : 3F/0
  4914 ;;		Unchanged: 0/0
  4915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4916 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4917 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4918 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4919 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  4920 ;;Total ram usage:        4 bytes
  4921 ;; Hardware stack levels used:    1
  4922 ;; Hardware stack levels required when called:    3
  4923 ;; This function calls:
  4924 ;;		Nothing
  4925 ;; This function is called by:
  4926 ;;		_convertAnalogValues
  4927 ;; This function uses a non-reentrant model
  4928 ;;
  4929                           
  4930                           
  4931                           ;psect for function _adcGetConversion
  4932  05AB                     _adcGetConversion:	
  4933                           
  4934                           ;incstack = 0
  4935                           ; Regs used in _adcGetConversion: [wreg+status,2+status,0]
  4936                           ;adcGetConversion@channel stored from wreg
  4937  05AB  0140               	movlb	0	; select bank0
  4938  05AC  00A3               	movwf	adcGetConversion@channel
  4939                           
  4940                           ;main.c: 118: uint16_t adcGetConversion(uint8_t channel);main.c: 119: {;main.c: 120:  AD
      +                          CON0bits.CHS = channel;
  4941  05AD  00A2               	movwf	??_adcGetConversion
  4942  05AE  0DA2               	rlf	??_adcGetConversion,f
  4943  05AF  0DA2               	rlf	??_adcGetConversion,f
  4944  05B0  0141               	movlb	1	; select bank1
  4945  05B1  081D               	movf	29,w	;volatile
  4946  05B2  0140               	movlb	0	; select bank0
  4947  05B3  0622               	xorwf	??_adcGetConversion,w
  4948  05B4  3903               	andlw	-253
  4949  05B5  0622               	xorwf	??_adcGetConversion,w
  4950  05B6  0141               	movlb	1	; select bank1
  4951  05B7  009D               	movwf	29	;volatile
  4952                           
  4953                           ;main.c: 121:  _delay((unsigned long)((5)*(4000000/4000000.0)));
  4954  05B8  3200               	nop2	;2 cycle nop
  4955  05B9  3200               	nop2	;2 cycle nop
  4956  05BA  0000               	nop
  4957                           
  4958                           ;main.c: 122:  ADCON0bits.GO = 1;
  4959  05BB  0141               	movlb	1	; select bank1
  4960  05BC  149D               	bsf	29,1	;volatile
  4961  05BD                     l136:	
  4962                           ;main.c: 123:  while (ADCON0bits.GO);
  4963                           
  4964  05BD  189D               	btfsc	29,1	;volatile
  4965  05BE  2DBD               	goto	l136
  4966                           
  4967                           ;main.c: 124:  return (uint16_t)((ADRESH << 8) + ADRESL);
  4968  05BF  081C               	movf	28,w	;volatile
  4969  05C0  0140               	movlb	0	; select bank0
  4970  05C1  00A1               	movwf	?_adcGetConversion+1
  4971  05C2  01A0               	clrf	?_adcGetConversion
  4972  05C3  0141               	movlb	1	; select bank1
  4973  05C4  081B               	movf	27,w	;volatile
  4974  05C5  0140               	movlb	0	; select bank0
  4975  05C6  07A0               	addwf	?_adcGetConversion,f
  4976  05C7  1803               	skipnc
  4977  05C8  0AA1               	incf	?_adcGetConversion+1,f
  4978  05C9  0008               	return
  4979  05CA                     __end_of_adcGetConversion:	
  4980  05CA                     __ptext49:	
  4981 ;; *************** function _ema *****************
  4982 ;; Defined at:
  4983 ;;		line 109 in file "main.c"
  4984 ;; Parameters:    Size  Location     Type
  4985 ;;  in              2   12[BANK0 ] unsigned short 
  4986 ;;  average         2   14[BANK0 ] unsigned short 
  4987 ;;  alpha           4   16[BANK0 ] unsigned long 
  4988 ;; Auto vars:     Size  Location     Type
  4989 ;;  tmp             4   24[BANK0 ] unsigned long 
  4990 ;; Return value:  Size  Location     Type
  4991 ;;                  2   12[BANK0 ] unsigned short 
  4992 ;; Registers used:
  4993 ;;		wreg, status,2, status,0, pclath, cstack
  4994 ;; Tracked objects:
  4995 ;;		On entry : 3F/0
  4996 ;;		On exit  : 3F/0
  4997 ;;		Unchanged: 0/0
  4998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  4999 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5000 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5001 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5002 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5003 ;;Total ram usage:       16 bytes
  5004 ;; Hardware stack levels used:    1
  5005 ;; Hardware stack levels required when called:    4
  5006 ;; This function calls:
  5007 ;;		___lmul
  5008 ;; This function is called by:
  5009 ;;		_convertAnalogValues
  5010 ;; This function uses a non-reentrant model
  5011 ;;
  5012                           
  5013                           
  5014                           ;psect for function _ema
  5015  05CA                     _ema:	
  5016                           
  5017                           ;main.c: 109: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);main.c: 110: {
      +                          ;main.c: 111:   uint32_t tmp;;main.c: 112:   tmp = in * alpha + average * (65536 - alpha
      +                          );
  5018                           
  5019                           ;incstack = 0
  5020                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
  5021  05CA  082C               	movf	ema@in,w
  5022  05CB  00A0               	movwf	___lmul@multiplier
  5023  05CC  082D               	movf	ema@in+1,w
  5024  05CD  00A1               	movwf	___lmul@multiplier+1
  5025  05CE  01A2               	clrf	___lmul@multiplier+2
  5026  05CF  01A3               	clrf	___lmul@multiplier+3
  5027  05D0  0833               	movf	ema@alpha+3,w
  5028  05D1  00A7               	movwf	___lmul@multiplicand+3
  5029  05D2  0832               	movf	ema@alpha+2,w
  5030  05D3  00A6               	movwf	___lmul@multiplicand+2
  5031  05D4  0831               	movf	ema@alpha+1,w
  5032  05D5  00A5               	movwf	___lmul@multiplicand+1
  5033  05D6  0830               	movf	ema@alpha,w
  5034  05D7  00A4               	movwf	___lmul@multiplicand
  5035  05D8  2615  3180         	fcall	___lmul
  5036  05DA  0823               	movf	?___lmul+3,w
  5037  05DB  00BB               	movwf	ema@tmp+3
  5038  05DC  0822               	movf	?___lmul+2,w
  5039  05DD  00BA               	movwf	ema@tmp+2
  5040  05DE  0821               	movf	?___lmul+1,w
  5041  05DF  00B9               	movwf	ema@tmp+1
  5042  05E0  0820               	movf	?___lmul,w
  5043  05E1  00B8               	movwf	ema@tmp
  5044  05E2  3001               	movlw	1
  5045  05E3  01A7               	clrf	___lmul@multiplicand+3
  5046  05E4  00A6               	movwf	___lmul@multiplicand+2
  5047  05E5  01A5               	clrf	___lmul@multiplicand+1
  5048  05E6  01A4               	clrf	___lmul@multiplicand
  5049  05E7  0830               	movf	ema@alpha,w
  5050  05E8  02A4               	subwf	___lmul@multiplicand,f
  5051  05E9  0831               	movf	ema@alpha+1,w
  5052  05EA  3BA5               	subwfb	___lmul@multiplicand+1,f
  5053  05EB  0832               	movf	ema@alpha+2,w
  5054  05EC  3BA6               	subwfb	___lmul@multiplicand+2,f
  5055  05ED  0833               	movf	ema@alpha+3,w
  5056  05EE  3BA7               	subwfb	___lmul@multiplicand+3,f
  5057  05EF  082E               	movf	ema@average,w
  5058  05F0  00A0               	movwf	___lmul@multiplier
  5059  05F1  082F               	movf	ema@average+1,w
  5060  05F2  00A1               	movwf	___lmul@multiplier+1
  5061  05F3  01A2               	clrf	___lmul@multiplier+2
  5062  05F4  01A3               	clrf	___lmul@multiplier+3
  5063  05F5  2615               	fcall	___lmul
  5064  05F6  0820               	movf	?___lmul,w
  5065  05F7  07B8               	addwf	ema@tmp,f
  5066  05F8  0821               	movf	?___lmul+1,w
  5067  05F9  3DB9               	addwfc	ema@tmp+1,f
  5068  05FA  0822               	movf	?___lmul+2,w
  5069  05FB  3DBA               	addwfc	ema@tmp+2,f
  5070  05FC  0823               	movf	?___lmul+3,w
  5071  05FD  3DBB               	addwfc	ema@tmp+3,f
  5072                           
  5073                           ;main.c: 113:   return (tmp + 32768) / 65536;
  5074  05FE  3080               	movlw	128
  5075  05FF  01B4               	clrf	??_ema
  5076  0600  00B5               	movwf	??_ema+1
  5077  0601  01B6               	clrf	??_ema+2
  5078  0602  01B7               	clrf	??_ema+3
  5079  0603  0838               	movf	ema@tmp,w
  5080  0604  07B4               	addwf	??_ema,f
  5081  0605  0839               	movf	ema@tmp+1,w
  5082  0606  3DB5               	addwfc	??_ema+1,f
  5083  0607  083A               	movf	ema@tmp+2,w
  5084  0608  3DB6               	addwfc	??_ema+2,f
  5085  0609  083B               	movf	ema@tmp+3,w
  5086  060A  3DB7               	addwfc	??_ema+3,f
  5087  060B  0836               	movf	??_ema+2,w
  5088  060C  00B4               	movwf	??_ema
  5089  060D  0837               	movf	??_ema+3,w
  5090  060E  00B5               	movwf	??_ema+1
  5091  060F  01B6               	clrf	??_ema+2
  5092  0610  01B7               	clrf	??_ema+3
  5093  0611  00AD               	movwf	?_ema+1
  5094  0612  0834               	movf	??_ema,w
  5095  0613  00AC               	movwf	?_ema
  5096  0614  0008               	return
  5097  0615                     __end_of_ema:	
  5098  0615                     __ptext50:	
  5099 ;; *************** function ___lmul *****************
  5100 ;; Defined at:
  5101 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul32.c"
  5102 ;; Parameters:    Size  Location     Type
  5103 ;;  multiplier      4    0[BANK0 ] unsigned long 
  5104 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  5105 ;; Auto vars:     Size  Location     Type
  5106 ;;  product         4    8[BANK0 ] unsigned long 
  5107 ;; Return value:  Size  Location     Type
  5108 ;;                  4    0[BANK0 ] unsigned long 
  5109 ;; Registers used:
  5110 ;;		wreg, status,2, status,0
  5111 ;; Tracked objects:
  5112 ;;		On entry : 3F/0
  5113 ;;		On exit  : 3F/0
  5114 ;;		Unchanged: 0/0
  5115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5116 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5117 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5118 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5119 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5120 ;;Total ram usage:       12 bytes
  5121 ;; Hardware stack levels used:    1
  5122 ;; Hardware stack levels required when called:    3
  5123 ;; This function calls:
  5124 ;;		Nothing
  5125 ;; This function is called by:
  5126 ;;		_ema
  5127 ;; This function uses a non-reentrant model
  5128 ;;
  5129                           
  5130                           
  5131                           ;psect for function ___lmul
  5132  0615                     ___lmul:	
  5133                           
  5134                           ;incstack = 0
  5135                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5136  0615  01A8               	clrf	___lmul@product
  5137  0616  01A9               	clrf	___lmul@product+1
  5138  0617  01AA               	clrf	___lmul@product+2
  5139  0618  01AB               	clrf	___lmul@product+3
  5140  0619                     l716:	
  5141  0619  1C20               	btfss	___lmul@multiplier,0
  5142  061A  2E23               	goto	l5114
  5143  061B  0824               	movf	___lmul@multiplicand,w
  5144  061C  07A8               	addwf	___lmul@product,f
  5145  061D  0825               	movf	___lmul@multiplicand+1,w
  5146  061E  3DA9               	addwfc	___lmul@product+1,f
  5147  061F  0826               	movf	___lmul@multiplicand+2,w
  5148  0620  3DAA               	addwfc	___lmul@product+2,f
  5149  0621  0827               	movf	___lmul@multiplicand+3,w
  5150  0622  3DAB               	addwfc	___lmul@product+3,f
  5151  0623                     l5114:	
  5152  0623  35A4               	lslf	___lmul@multiplicand,f
  5153  0624  0DA5               	rlf	___lmul@multiplicand+1,f
  5154  0625  0DA6               	rlf	___lmul@multiplicand+2,f
  5155  0626  0DA7               	rlf	___lmul@multiplicand+3,f
  5156  0627  36A3               	lsrf	___lmul@multiplier+3,f
  5157  0628  0CA2               	rrf	___lmul@multiplier+2,f
  5158  0629  0CA1               	rrf	___lmul@multiplier+1,f
  5159  062A  0CA0               	rrf	___lmul@multiplier,f
  5160  062B  0823               	movf	___lmul@multiplier+3,w
  5161  062C  0422               	iorwf	___lmul@multiplier+2,w
  5162  062D  0421               	iorwf	___lmul@multiplier+1,w
  5163  062E  0420               	iorwf	___lmul@multiplier,w
  5164  062F  1D03               	skipz
  5165  0630  2E19               	goto	l716
  5166  0631  082B               	movf	___lmul@product+3,w
  5167  0632  00A3               	movwf	?___lmul+3
  5168  0633  082A               	movf	___lmul@product+2,w
  5169  0634  00A2               	movwf	?___lmul+2
  5170  0635  0829               	movf	___lmul@product+1,w
  5171  0636  00A1               	movwf	?___lmul+1
  5172  0637  0828               	movf	___lmul@product,w
  5173  0638  00A0               	movwf	?___lmul
  5174  0639  0008               	return
  5175  063A                     __end_of___lmul:	
  5176  063A                     __ptext7:	
  5177 ;; *************** function _OLED_returnHome *****************
  5178 ;; Defined at:
  5179 ;;		line 160 in file "oled.c"
  5180 ;; Parameters:    Size  Location     Type
  5181 ;;		None
  5182 ;; Auto vars:     Size  Location     Type
  5183 ;;		None
  5184 ;; Return value:  Size  Location     Type
  5185 ;;                  1    wreg      void 
  5186 ;; Registers used:
  5187 ;;		wreg, status,2, status,0, pclath, cstack
  5188 ;; Tracked objects:
  5189 ;;		On entry : 0/0
  5190 ;;		On exit  : 3F/0
  5191 ;;		Unchanged: 0/0
  5192 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5196 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5197 ;;Total ram usage:        0 bytes
  5198 ;; Hardware stack levels used:    1
  5199 ;; Hardware stack levels required when called:    7
  5200 ;; This function calls:
  5201 ;;		_OLED_command
  5202 ;; This function is called by:
  5203 ;;		_main
  5204 ;;		_statusView
  5205 ;; This function uses a non-reentrant model
  5206 ;;
  5207                           
  5208                           
  5209                           ;psect for function _OLED_returnHome
  5210  063A                     _OLED_returnHome:	
  5211                           
  5212                           ;oled.c: 162:  OLED_command(0x02);
  5213                           
  5214                           ;incstack = 0
  5215                           ; Regs used in _OLED_returnHome: [wreg+status,2+status,0+pclath+cstack]
  5216  063A  3002               	movlw	2
  5217  063B  296E               	ljmp	_OLED_command
  5218  063C                     __end_of_OLED_returnHome:	
  5219  063C                     __ptext1:	
  5220 ;; *************** function _menu *****************
  5221 ;; Defined at:
  5222 ;;		line 59 in file "menu.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  data            1    wreg     PTR struct .
  5225 ;;		 -> data(33), 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;  data            1   55[BANK2 ] PTR struct .
  5228 ;;		 -> data(33), 
  5229 ;;  nextState       1   58[BANK2 ] char 
  5230 ;;  pb              1   57[BANK2 ] enum E7854
  5231 ;;  page            1   56[BANK2 ] char 
  5232 ;; Return value:  Size  Location     Type
  5233 ;;                  1    wreg      void 
  5234 ;; Registers used:
  5235 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5236 ;; Tracked objects:
  5237 ;;		On entry : 3D/0
  5238 ;;		On exit  : 3F/2
  5239 ;;		Unchanged: 0/0
  5240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5242 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5243 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5244 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5245 ;;Total ram usage:        8 bytes
  5246 ;; Hardware stack levels used:    1
  5247 ;; Hardware stack levels required when called:   12
  5248 ;; This function calls:
  5249 ;;		_channelSetup
  5250 ;;		_channelView
  5251 ;;		_getNextState
  5252 ;;		_getPB
  5253 ;;		_setLensDia
  5254 ;;		_setOutputPower
  5255 ;;		_statusView
  5256 ;; This function is called by:
  5257 ;;		_main
  5258 ;; This function uses a non-reentrant model
  5259 ;;
  5260                           
  5261                           
  5262                           ;psect for function _menu
  5263  063C                     _menu:	
  5264                           
  5265                           ;incstack = 0
  5266                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5267                           ;menu@data stored from wreg
  5268  063C  0142               	movlb	2	; select bank2
  5269  063D  00D7               	movwf	menu@data^(0+256)
  5270                           
  5271                           ;menu.c: 59: void menu(t_globalData *data);menu.c: 60: {;menu.c: 61:  static uint8_t sta
      +                          te = 0;;menu.c: 62:  int8_t page, nextState;;menu.c: 63:  enum e_buttonPress pb;;menu.c:
      +                           65:  page = (p_fct[state])(data);
  5272  063E  00D2               	movwf	setLensDia@data^(0+256)
  5273  063F  3565               	lslf	menu@state^(0+256),w
  5274  0640  3ED8               	addlw	(low (_p_fct| (0+256)))& (0+255)
  5275  0641  0086               	movwf	6
  5276  0642  3001               	movlw	1	; select bank3/4
  5277  0643  0087               	movwf	7
  5278  0644  3F41               	moviw [1]fsr1
  5279  0645  008A               	movwf	10
  5280  0646  3F40               	moviw [0]fsr1
  5281  0647  000A               	callw
  5282  0648  3180               	pagesel	$
  5283  0649  0142               	movlb	2	; select bank2
  5284  064A  00D8               	movwf	menu@page^(0+256)
  5285                           
  5286                           ;menu.c: 66:  updateScreen = 0;
  5287  064B  01EE               	clrf	_updateScreen^(0+256)
  5288                           
  5289                           ;menu.c: 67:  pb = getPB();
  5290  064C  26D5  3180         	fcall	_getPB
  5291  064E  0142               	movlb	2	; select bank2
  5292  064F  00D9               	movwf	menu@pb^(0+256)
  5293                           
  5294                           ;menu.c: 68:  nextState = getNextState(state, page, pb);
  5295  0650  0858               	movf	menu@page^(0+256),w
  5296  0651  0140               	movlb	0	; select bank0
  5297  0652  00A6               	movwf	getNextState@page
  5298  0653  0142               	movlb	2	; select bank2
  5299  0654  0859               	movf	menu@pb^(0+256),w
  5300  0655  0140               	movlb	0	; select bank0
  5301  0656  00A7               	movwf	getNextState@pb
  5302  0657  0142               	movlb	2	; select bank2
  5303  0658  0865               	movf	menu@state^(0+256),w
  5304  0659  2673  3180         	fcall	_getNextState
  5305  065B  0142               	movlb	2	; select bank2
  5306  065C  00DA               	movwf	menu@nextState^(0+256)
  5307                           
  5308                           ;menu.c: 69:  if (nextState > -1) {
  5309  065D  1BDA               	btfsc	menu@nextState^(0+256),7
  5310  065E  0008               	return
  5311                           
  5312                           ;menu.c: 70:   if (state != nextState) {
  5313  065F  00D3               	movwf	??_menu^(0+256)
  5314  0660  01D4               	clrf	(??_menu^(0+256)+1)
  5315  0661  1BD3               	btfsc	??_menu^(0+256),7
  5316  0662  03D4               	decf	(??_menu^(0+256)+1),f
  5317  0663  0865               	movf	menu@state^(0+256),w
  5318  0664  00D5               	movwf	(??_menu+2)^(0+256)
  5319  0665  01D6               	clrf	((??_menu+2)^(0+256)+1)
  5320  0666  0854               	movf	(??_menu+1)^(0+256),w
  5321  0667  0656               	xorwf	(??_menu+3)^(0+256),w
  5322  0668  1D03               	skipz
  5323  0669  2E6C               	goto	u7305
  5324  066A  0853               	movf	??_menu^(0+256),w
  5325  066B  0655               	xorwf	(??_menu+2)^(0+256),w
  5326  066C                     u7305:	
  5327  066C  1903               	skipnz
  5328  066D  0008               	return
  5329                           
  5330                           ;menu.c: 71:    updateScreen = 1;
  5331  066E  01EE               	clrf	_updateScreen^(0+256)
  5332  066F  0AEE               	incf	_updateScreen^(0+256),f
  5333                           
  5334                           ;menu.c: 72:    state = nextState;
  5335  0670  085A               	movf	menu@nextState^(0+256),w
  5336  0671  00E5               	movwf	menu@state^(0+256)
  5337  0672  0008               	return
  5338  0673                     __end_of_menu:	
  5339  0673                     __ptext9:	
  5340 ;; *************** function _getNextState *****************
  5341 ;; Defined at:
  5342 ;;		line 77 in file "menu.c"
  5343 ;; Parameters:    Size  Location     Type
  5344 ;;  state           1    wreg     unsigned char 
  5345 ;;  page            1    6[BANK0 ] unsigned char 
  5346 ;;  pb              1    7[BANK0 ] enum E7854
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;  state           1    9[BANK0 ] unsigned char 
  5349 ;;  n               1   10[BANK0 ] unsigned char 
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      char 
  5352 ;; Registers used:
  5353 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 3F/2
  5356 ;;		On exit  : 3F/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5359 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5360 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5361 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5362 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5363 ;;Total ram usage:        5 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    4
  5366 ;; This function calls:
  5367 ;;		___wmul
  5368 ;; This function is called by:
  5369 ;;		_menu
  5370 ;; This function uses a non-reentrant model
  5371 ;;
  5372                           
  5373                           
  5374                           ;psect for function _getNextState
  5375  0673                     _getNextState:	
  5376                           
  5377                           ;incstack = 0
  5378                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5379                           ;getNextState@state stored from wreg
  5380  0673  0140               	movlb	0	; select bank0
  5381  0674  00A9               	movwf	getNextState@state
  5382                           
  5383                           ;menu.c: 77: static int8_t getNextState(uint8_t state, uint8_t page, enum e_buttonPress 
      +                          pb);menu.c: 78: {;menu.c: 79:  uint8_t n;;menu.c: 81:  for(n = 0; n < sizeof(nextStateTb
      +                          l)/sizeof(t_nextState); n++) {
  5384  0675  01AA               	clrf	getNextState@n
  5385  0676                     l5202:	
  5386                           
  5387                           ;menu.c: 82:   if ((nextStateTbl[n].state == state)) {
  5388  0676  2754  3180         	fcall	PL60	;call to abstracted procedure
  5389  0678  26C0  3180         	fcall	___wmul
  5390  067A  0821               	movf	?___wmul+1,w
  5391  067B  0085               	movwf	5
  5392  067C  0820               	movf	?___wmul,w
  5393  067D  0084               	movwf	4
  5394  067E  30A8               	movlw	low (_nextStateTbl| (0+32768))
  5395  067F  0784               	addwf	4,f
  5396  0680  30A0               	movlw	high (_nextStateTbl| (0+32768))
  5397  0681  3D85               	addwfc	5,f
  5398  0682  0800               	movf	0,w	;code access
  5399  0683  0629               	xorwf	getNextState@state,w
  5400  0684  1D03               	skipz
  5401  0685  2EBA               	goto	l5222
  5402                           
  5403                           ;menu.c: 83:    if ((nextStateTbl[n].page == page) ||
  5404  0686  2754  3180         	fcall	PL60	;call to abstracted procedure
  5405  0688  26C0  3180         	fcall	___wmul
  5406  068A  2797  3180         	fcall	PL98	;call to abstracted procedure
  5407  068C  0800               	movf	0,w	;code access
  5408  068D  0626               	xorwf	getNextState@page,w
  5409  068E  1903               	skipnz
  5410  068F  2E9A               	goto	l5208
  5411  0690  2754  3180         	fcall	PL60	;call to abstracted procedure
  5412  0692  26C0  3180         	fcall	___wmul
  5413  0694  2797  3180         	fcall	PL98	;call to abstracted procedure
  5414  0696  0012               	moviw fsr0++
  5415  0697  3AFF               	xorlw	255
  5416  0698  1D03               	btfss	3,2
  5417  0699  2EBA               	goto	l5222
  5418  069A                     l5208:	
  5419                           
  5420                           ;menu.c: 84:     (nextStateTbl[n].page == 255)) {;menu.c: 85:     if (pb == PB_SHORT)
  5421  069A  0B27               	decfsz	getNextState@pb,w
  5422  069B  2EA9               	goto	l5216
  5423                           
  5424                           ;menu.c: 86:      return nextStateTbl[n].pbShort;
  5425  069C  2754  3180         	fcall	PL60	;call to abstracted procedure
  5426  069E  26C0               	fcall	___wmul
  5427  069F  0821               	movf	?___wmul+1,w
  5428  06A0  0085               	movwf	5
  5429  06A1  0820               	movf	?___wmul,w
  5430  06A2  0084               	movwf	4
  5431  06A3  30AA               	movlw	low ((_nextStateTbl+2)| (0+32768))
  5432  06A4  0784               	addwf	4,f
  5433  06A5  30A0               	movlw	high ((_nextStateTbl+2)| (0+32768))
  5434  06A6  3D85               	addwfc	5,f
  5435  06A7  0800               	movf	0,w	;code access
  5436  06A8  0008               	return
  5437  06A9                     l5216:	
  5438  06A9  3002               	movlw	2
  5439  06AA  0627               	xorwf	getNextState@pb,w
  5440  06AB  1D03               	btfss	3,2
  5441  06AC  2EBA               	goto	l5222
  5442                           
  5443                           ;menu.c: 88:      return nextStateTbl[n].pbLong;
  5444  06AD  2754  3180         	fcall	PL60	;call to abstracted procedure
  5445  06AF  26C0               	fcall	___wmul
  5446  06B0  0821               	movf	?___wmul+1,w
  5447  06B1  0085               	movwf	5
  5448  06B2  0820               	movf	?___wmul,w
  5449  06B3  0084               	movwf	4
  5450  06B4  30AB               	movlw	low ((_nextStateTbl+3)| (0+32768))
  5451  06B5  0784               	addwf	4,f
  5452  06B6  30A0               	movlw	high ((_nextStateTbl+3)| (0+32768))
  5453  06B7  3D85               	addwfc	5,f
  5454  06B8  0800               	movf	0,w	;code access
  5455  06B9  0008               	return
  5456  06BA                     l5222:	
  5457                           ;menu.c: 89:    }
  5458                           
  5459  06BA  3006               	movlw	6
  5460                           
  5461                           ;menu.c: 91:  }
  5462  06BB  0AAA               	incf	getNextState@n,f
  5463  06BC  022A               	subwf	getNextState@n,w
  5464  06BD  1803               	btfsc	3,0
  5465                           
  5466                           ;menu.c: 92:  return -1;
  5467  06BE  34FF               	retlw	255
  5468  06BF  2E76               	goto	l5202
  5469  06C0                     __end_of_getNextState:	
  5470  06C0                     __ptext40:	
  5471 ;; *************** function ___wmul *****************
  5472 ;; Defined at:
  5473 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\Umul16.c"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;  multiplier      2    0[BANK0 ] unsigned int 
  5476 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  5477 ;; Auto vars:     Size  Location     Type
  5478 ;;  product         2    4[BANK0 ] unsigned int 
  5479 ;; Return value:  Size  Location     Type
  5480 ;;                  2    0[BANK0 ] unsigned int 
  5481 ;; Registers used:
  5482 ;;		wreg, status,2, status,0
  5483 ;; Tracked objects:
  5484 ;;		On entry : 3F/0
  5485 ;;		On exit  : 3F/0
  5486 ;;		Unchanged: 0/0
  5487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5488 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5489 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5491 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5492 ;;Total ram usage:        6 bytes
  5493 ;; Hardware stack levels used:    1
  5494 ;; Hardware stack levels required when called:    3
  5495 ;; This function calls:
  5496 ;;		Nothing
  5497 ;; This function is called by:
  5498 ;;		_getNextState
  5499 ;;		_returnToPage
  5500 ;;		_atoi
  5501 ;; This function uses a non-reentrant model
  5502 ;;
  5503                           
  5504                           
  5505                           ;psect for function ___wmul
  5506  06C0                     ___wmul:	
  5507                           
  5508                           ;incstack = 0
  5509                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  5510  06C0  01A4               	clrf	___wmul@product
  5511  06C1  01A5               	clrf	___wmul@product+1
  5512  06C2                     l3840:	
  5513  06C2  1C20               	btfss	___wmul@multiplier,0
  5514  06C3  2EC8               	goto	l3844
  5515  06C4  0822               	movf	___wmul@multiplicand,w
  5516  06C5  07A4               	addwf	___wmul@product,f
  5517  06C6  0823               	movf	___wmul@multiplicand+1,w
  5518  06C7  3DA5               	addwfc	___wmul@product+1,f
  5519  06C8                     l3844:	
  5520  06C8  35A2               	lslf	___wmul@multiplicand,f
  5521  06C9  0DA3               	rlf	___wmul@multiplicand+1,f
  5522  06CA  36A1               	lsrf	___wmul@multiplier+1,f
  5523  06CB  0CA0               	rrf	___wmul@multiplier,f
  5524  06CC  0820               	movf	___wmul@multiplier,w
  5525  06CD  0421               	iorwf	___wmul@multiplier+1,w
  5526  06CE  1D03               	btfss	3,2
  5527  06CF  2EC2               	goto	l3840
  5528  06D0  0825               	movf	___wmul@product+1,w
  5529  06D1  00A1               	movwf	?___wmul+1
  5530  06D2  0824               	movf	___wmul@product,w
  5531  06D3  00A0               	movwf	?___wmul
  5532  06D4  0008               	return
  5533  06D5                     __end_of___wmul:	
  5534  06D5                     __ptext8:	
  5535 ;; *************** function _getPB *****************
  5536 ;; Defined at:
  5537 ;;		line 65 in file "inputs.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;		None
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;  ret             1    0[BANK0 ] enum E7827
  5542 ;; Return value:  Size  Location     Type
  5543 ;;                  1    wreg      enum E7827
  5544 ;; Registers used:
  5545 ;;		wreg, status,2
  5546 ;; Tracked objects:
  5547 ;;		On entry : 3F/2
  5548 ;;		On exit  : 3F/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5553 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5554 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5555 ;;Total ram usage:        1 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; Hardware stack levels required when called:    3
  5558 ;; This function calls:
  5559 ;;		Nothing
  5560 ;; This function is called by:
  5561 ;;		_menu
  5562 ;; This function uses a non-reentrant model
  5563 ;;
  5564                           
  5565                           
  5566                           ;psect for function _getPB
  5567  06D5                     _getPB:	
  5568                           
  5569                           ;incstack = 0
  5570                           ; Regs used in _getPB: [wreg+status,2]
  5571  06D5  086B               	movf	_g_pbState^(0+256),w	;volatile
  5572  06D6  0140               	movlb	0	; select bank0
  5573  06D7  00A0               	movwf	getPB@ret
  5574  06D8  0142               	movlb	2	; select bank2
  5575  06D9  01EB               	clrf	_g_pbState^(0+256)	;volatile
  5576  06DA  0140               	movlb	0	; select bank0
  5577  06DB  0820               	movf	getPB@ret,w
  5578  06DC  0008               	return
  5579  06DD                     __end_of_getPB:	
  5580  06DD                     __ptext70:	
  5581 ;; *************** function _OLED_pulseEnable *****************
  5582 ;; Defined at:
  5583 ;;		line 12 in file "oled.c"
  5584 ;; Parameters:    Size  Location     Type
  5585 ;;		None
  5586 ;; Auto vars:     Size  Location     Type
  5587 ;;		None
  5588 ;; Return value:  Size  Location     Type
  5589 ;;                  1    wreg      void 
  5590 ;; Registers used:
  5591 ;;		wreg
  5592 ;; Tracked objects:
  5593 ;;		On entry : 0/0
  5594 ;;		On exit  : 3F/0
  5595 ;;		Unchanged: 0/0
  5596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5599 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5600 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5601 ;;Total ram usage:        0 bytes
  5602 ;; Hardware stack levels used:    1
  5603 ;; Hardware stack levels required when called:    3
  5604 ;; This function calls:
  5605 ;;		Nothing
  5606 ;; This function is called by:
  5607 ;;		_OLED_write4bits
  5608 ;;		_OLED_waitForReady
  5609 ;; This function uses a non-reentrant model
  5610 ;;
  5611                           
  5612                           
  5613                           ;psect for function _OLED_pulseEnable
  5614  06DD                     _OLED_pulseEnable:	
  5615  06DD                     l3508:	
  5616                           ;incstack = 0
  5617                           ; Regs used in _OLED_pulseEnable: [wreg]
  5618                           
  5619                           
  5620                           ;oled.c: 14:  LATBbits.LATB2 = 1;
  5621  06DD  0140               	movlb	0	; select bank0
  5622  06DE  1519               	bsf	25,2	;volatile
  5623                           
  5624                           ;oled.c: 15:  _delay((unsigned long)((50)*(4000000/4000000.0)));
  5625  06DF  3010               	movlw	16
  5626  06E0                     u7487:	
  5627  06E0  0B89               	decfsz	9,f
  5628  06E1  2EE0               	goto	u7487
  5629  06E2  3200               	nop2
  5630                           
  5631                           ;oled.c: 16:  LATBbits.LATB2 = 0;
  5632  06E3  0140               	movlb	0	; select bank0
  5633  06E4  1119               	bcf	25,2	;volatile
  5634  06E5  0008               	return
  5635  06E6                     __end_of_OLED_pulseEnable:	
  5636  06E6                     __ptext67:	
  5637 ;; *************** function _OLED_waitForReady *****************
  5638 ;; Defined at:
  5639 ;;		line 41 in file "oled.c"
  5640 ;; Parameters:    Size  Location     Type
  5641 ;;		None
  5642 ;; Auto vars:     Size  Location     Type
  5643 ;;  busy            1    0[BANK0 ] unsigned char 
  5644 ;; Return value:  Size  Location     Type
  5645 ;;                  1    wreg      void 
  5646 ;; Registers used:
  5647 ;;		wreg, status,2, status,0, pclath, cstack
  5648 ;; Tracked objects:
  5649 ;;		On entry : 3F/0
  5650 ;;		On exit  : 3F/0
  5651 ;;		Unchanged: 0/0
  5652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5653 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5654 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5655 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5656 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5657 ;;Total ram usage:        1 bytes
  5658 ;; Hardware stack levels used:    1
  5659 ;; Hardware stack levels required when called:    4
  5660 ;; This function calls:
  5661 ;;		_OLED_pulseEnable
  5662 ;; This function is called by:
  5663 ;;		_OLED_command
  5664 ;;		_OLED_write
  5665 ;; This function uses a non-reentrant model
  5666 ;;
  5667                           
  5668                           
  5669                           ;psect for function _OLED_waitForReady
  5670  06E6                     _OLED_waitForReady:	
  5671  06E6                     l4370:	
  5672                           ;incstack = 0
  5673                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0+pclath+cstack]
  5674                           
  5675                           
  5676                           ;oled.c: 45:  TRISCbits.TRISC4 = 1;
  5677  06E6  1614               	bsf	20,4	;volatile
  5678                           
  5679                           ;oled.c: 46:  LATBbits.LATB4 = 0;
  5680  06E7  1219               	bcf	25,4	;volatile
  5681                           
  5682                           ;oled.c: 47:  LATBbits.LATB3 = 1;
  5683  06E8  1599               	bsf	25,3	;volatile
  5684  06E9                     l176:	
  5685                           ;oled.c: 49:  do {
  5686                           
  5687                           
  5688                           ;oled.c: 50:   LATBbits.LATB2 = 0;
  5689  06E9  1119               	bcf	25,2	;volatile
  5690                           
  5691                           ;oled.c: 51:   _delay((unsigned long)((10)*(4000000/4000000.0)));
  5692  06EA  3003               	movlw	3
  5693  06EB                     u7457:	
  5694  06EB  0B89               	decfsz	9,f
  5695  06EC  2EEB               	goto	u7457
  5696  06ED  0000               	nop
  5697                           
  5698                           ;oled.c: 52:   LATBbits.LATB2 = 1;
  5699  06EE  0140               	movlb	0	; select bank0
  5700  06EF  1519               	bsf	25,2	;volatile
  5701                           
  5702                           ;oled.c: 54:   _delay((unsigned long)((10)*(4000000/4000000.0)));
  5703  06F0  3003               	movlw	3
  5704  06F1                     u7467:	
  5705  06F1  0B89               	decfsz	9,f
  5706  06F2  2EF1               	goto	u7467
  5707  06F3  0000               	nop
  5708                           
  5709                           ;oled.c: 55:   busy = PORTCbits.RC4;
  5710  06F4  3000               	movlw	0
  5711  06F5  0140               	movlb	0	; select bank0
  5712  06F6  1A0E               	btfsc	14,4	;volatile
  5713  06F7  3001               	movlw	1
  5714  06F8  00A0               	movwf	OLED_waitForReady@busy
  5715                           
  5716                           ;oled.c: 57:   LATBbits.LATB2 = 0;
  5717  06F9  1119               	bcf	25,2	;volatile
  5718                           
  5719                           ;oled.c: 59:   OLED_pulseEnable();
  5720  06FA  26DD  3180         	fcall	_OLED_pulseEnable
  5721                           
  5722                           ;oled.c: 60:  } while (busy);
  5723  06FC  0820               	movf	OLED_waitForReady@busy,w
  5724  06FD  1D03               	btfss	3,2
  5725  06FE  2EE9               	goto	l176
  5726                           
  5727                           ;oled.c: 62:  TRISCbits.TRISC4 = 0;
  5728  06FF  1214               	bcf	20,4	;volatile
  5729                           
  5730                           ;oled.c: 63:  LATBbits.LATB3 = 0;
  5731  0700  1199               	bcf	25,3	;volatile
  5732  0701  0008               	return
  5733  0702                     __end_of_OLED_waitForReady:	
  5734  0702                     __ptext57:	
  5735 ;; *************** function _uartSendByte *****************
  5736 ;; Defined at:
  5737 ;;		line 25 in file "uart.c"
  5738 ;; Parameters:    Size  Location     Type
  5739 ;;  s               1    wreg     unsigned char 
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;  s               1    0[BANK0 ] unsigned char 
  5742 ;; Return value:  Size  Location     Type
  5743 ;;                  1    wreg      void 
  5744 ;; Registers used:
  5745 ;;		wreg
  5746 ;; Tracked objects:
  5747 ;;		On entry : 3F/3
  5748 ;;		On exit  : 3F/E
  5749 ;;		Unchanged: 0/0
  5750 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5752 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5754 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5755 ;;Total ram usage:        1 bytes
  5756 ;; Hardware stack levels used:    1
  5757 ;; Hardware stack levels required when called:    3
  5758 ;; This function calls:
  5759 ;;		Nothing
  5760 ;; This function is called by:
  5761 ;;		_checkSensor
  5762 ;; This function uses a non-reentrant model
  5763 ;;
  5764                           
  5765                           
  5766                           ;psect for function _uartSendByte
  5767  0702                     _uartSendByte:	
  5768                           
  5769                           ;incstack = 0
  5770                           ; Regs used in _uartSendByte: [wreg]
  5771                           ;uartSendByte@s stored from wreg
  5772  0702  0140               	movlb	0	; select bank0
  5773  0703  00A0               	movwf	uartSendByte@s
  5774                           
  5775                           ;uart.c: 25: void uartSendByte(char s);uart.c: 26: {;uart.c: 27:  TX1REG = s;
  5776  0704  0820               	movf	uartSendByte@s,w
  5777  0705  0142               	movlb	2	; select bank2
  5778  0706  009A               	movwf	26	;volatile
  5779                           
  5780                           ;uart.c: 28:  __nop();
  5781  0707  0000               	nop
  5782  0708                     l341:	
  5783                           ;uart.c: 29:  while (!PIR3bits.TX1IF);
  5784                           
  5785  0708  014E               	movlb	14	; select bank14
  5786  0709  1A0F               	btfsc	15,4	;volatile
  5787  070A  0008               	return
  5788  070B  2F08               	goto	l341
  5789  070C                     __end_of_uartSendByte:	
  5790  070C                     PL42:	
  5791  070C  0086               	movwf	6
  5792  070D  3002               	movlw	2	; select bank4/5
  5793  070E  0087               	movwf	7
  5794  070F  0853               	movf	??_checkSensor,w
  5795  0710  3FC0               	movwi [0]fsr1
  5796  0711  0854               	movf	??_checkSensor+1,w
  5797  0712  3FC1               	movwi [1]fsr1
  5798  0713  0855               	movf	??_checkSensor+2,w
  5799  0714  3FC2               	movwi [2]fsr1
  5800  0715  0856               	movf	??_checkSensor+3,w
  5801  0716  3FC3               	movwi [3]fsr1
  5802  0717  0008               	return
  5803  0718                     __end_ofPL42:	
  5804  0718                     PL46:	
  5805  0718  0821               	movf	?__Umul8_16+1,w
  5806  0719  00C6               	movwf	___flmul@temp+1
  5807  071A  0820               	movf	?__Umul8_16,w
  5808  071B  00C5               	movwf	___flmul@temp
  5809  071C  07BC               	addwf	___flmul@grs,f
  5810  071D  0846               	movf	___flmul@temp+1,w
  5811  071E  3DBD               	addwfc	___flmul@grs+1,f
  5812  071F  3000               	movlw	0
  5813  0720  3DBE               	addwfc	___flmul@grs+2,f
  5814  0721  3DBF               	addwfc	___flmul@grs+3,f
  5815  0722  0008               	return
  5816  0723                     __end_ofPL46:	
  5817  0723                     PL50:	
  5818  0723  07C1               	addwf	___flmul@prod,f
  5819  0724  3001               	movlw	1
  5820  0725  1803               	skipnc
  5821  0726  07C2               	addwf	___flmul@prod+1,f
  5822  0727  1803               	skipnc
  5823  0728  07C3               	addwf	___flmul@prod+2,f
  5824  0729  1803               	skipnc
  5825  072A  07C4               	addwf	___flmul@prod+3,f
  5826  072B  083E               	movf	___flmul@grs+2,w
  5827  072C  00BF               	movwf	___flmul@grs+3
  5828  072D  083D               	movf	___flmul@grs+1,w
  5829  072E  00BE               	movwf	___flmul@grs+2
  5830  072F  083C               	movf	___flmul@grs,w
  5831  0730  00BD               	movwf	___flmul@grs+1
  5832  0731  01BC               	clrf	___flmul@grs
  5833  0732  0008               	return
  5834  0733                     __end_ofPL50:	
  5835  0733                     PL52:	
  5836  0733  0821               	movf	?_adcGetConversion+1,w
  5837  0734  00E5               	movwf	convertAnalogValues@adc+1
  5838  0735  0820               	movf	?_adcGetConversion,w
  5839  0736  00E4               	movwf	convertAnalogValues@adc
  5840  0737  0865               	movf	convertAnalogValues@adc+1,w
  5841  0738  00AD               	movwf	ema@in+1
  5842  0739  0864               	movf	convertAnalogValues@adc,w
  5843  073A  00AC               	movwf	ema@in
  5844  073B  0143               	movlb	3	; select bank3
  5845  073C  0008               	return
  5846  073D                     __end_ofPL52:	
  5847  073D                     PL54:	
  5848  073D  3F40               	moviw [0]fsr1
  5849  073E  00D3               	movwf	??_checkSensor
  5850  073F  3F41               	moviw [1]fsr1
  5851  0740  00D4               	movwf	??_checkSensor+1
  5852  0741  3F42               	moviw [2]fsr1
  5853  0742  00D5               	movwf	??_checkSensor+2
  5854  0743  3F43               	moviw [3]fsr1
  5855  0744  00D6               	movwf	??_checkSensor+3
  5856  0745  0858               	movf	checkSensor@data,w
  5857  0746  0008               	return
  5858  0747                     __end_ofPL54:	
  5859  0747                     PL58:	
  5860  0747  00C6               	movwf	___flmul@temp+1
  5861  0748  0820               	movf	?__Umul8_16,w
  5862  0749  00C5               	movwf	___flmul@temp
  5863  074A  07BC               	addwf	___flmul@grs,f
  5864  074B  3001               	movlw	1
  5865  074C  1803               	skipnc
  5866  074D  07BD               	addwf	___flmul@grs+1,f
  5867  074E  1803               	skipnc
  5868  074F  07BE               	addwf	___flmul@grs+2,f
  5869  0750  1803               	skipnc
  5870  0751  07BF               	addwf	___flmul@grs+3,f
  5871  0752  0846               	movf	___flmul@temp+1,w
  5872  0753  0008               	return
  5873  0754                     __end_ofPL58:	
  5874  0754                     PL60:	
  5875  0754  082A               	movf	getNextState@n,w
  5876  0755  00A0               	movwf	___wmul@multiplier
  5877  0756  3005               	movlw	5
  5878  0757  01A1               	clrf	___wmul@multiplier+1
  5879  0758  00A2               	movwf	___wmul@multiplicand
  5880  0759  01A3               	clrf	___wmul@multiplicand+1
  5881  075A  0008               	return
  5882  075B                     __end_ofPL60:	
  5883  075B                     PL62:	
  5884  075B  0823               	movf	?___xxtofl+3,w
  5885  075C  00B5               	movwf	___flmul@a+3
  5886  075D  0822               	movf	?___xxtofl+2,w
  5887  075E  00B4               	movwf	___flmul@a+2
  5888  075F  0821               	movf	?___xxtofl+1,w
  5889  0760  00B3               	movwf	___flmul@a+1
  5890  0761  0820               	movf	?___xxtofl,w
  5891  0762  00B2               	movwf	___flmul@a
  5892  0763  0008               	return
  5893  0764                     __end_ofPL62:	
  5894  0764                     PL66:	
  5895  0764  0140               	movlb	0	; select bank0
  5896  0765  00AE               	movwf	ema@average
  5897  0766  30A6               	movlw	166
  5898  0767  01B3               	clrf	ema@alpha+3
  5899  0768  01B2               	clrf	ema@alpha+2
  5900  0769  00B1               	movwf	ema@alpha+1
  5901  076A  3065               	movlw	101
  5902  076B  00B0               	movwf	ema@alpha
  5903  076C  0008               	return
  5904  076D                     __end_ofPL66:	
  5905  076D                     PL68:	
  5906  076D  0821               	movf	?__Umul8_16+1,w
  5907  076E  00C6               	movwf	___flmul@temp+1
  5908  076F  0820               	movf	?__Umul8_16,w
  5909  0770  00C5               	movwf	___flmul@temp
  5910  0771  07C1               	addwf	___flmul@prod,f
  5911  0772  0846               	movf	___flmul@temp+1,w
  5912  0773  3DC2               	addwfc	___flmul@prod+1,f
  5913  0774  3000               	movlw	0
  5914  0775  3DC3               	addwfc	___flmul@prod+2,f
  5915  0776  3DC4               	addwfc	___flmul@prod+3,f
  5916  0777  0830               	movf	___flmul@b+2,w
  5917  0778  00A0               	movwf	__Umul8_16@multiplicand
  5918  0779  0008               	return
  5919  077A                     __end_ofPL68:	
  5920  077A                     PL72:	
  5921  077A  0086               	movwf	6
  5922  077B  3002               	movlw	2	; select bank4/5
  5923  077C  0087               	movwf	7
  5924  077D  0847               	movf	?___fldiv,w
  5925  077E  3FC0               	movwi [0]fsr1
  5926  077F  0848               	movf	?___fldiv+1,w
  5927  0780  3FC1               	movwi [1]fsr1
  5928  0781  0849               	movf	?___fldiv+2,w
  5929  0782  3FC2               	movwi [2]fsr1
  5930  0783  084A               	movf	?___fldiv+3,w
  5931  0784  3FC3               	movwi [3]fsr1
  5932  0785  0008               	return
  5933  0786                     __end_ofPL72:	
  5934  0786                     PL86:	
  5935  0786  0831               	movf	?___flmul+3,w
  5936  0787  00CE               	movwf	___fldiv@b+3
  5937  0788  0830               	movf	?___flmul+2,w
  5938  0789  00CD               	movwf	___fldiv@b+2
  5939  078A  082F               	movf	?___flmul+1,w
  5940  078B  00CC               	movwf	___fldiv@b+1
  5941  078C  082E               	movf	?___flmul,w
  5942  078D  00CB               	movwf	___fldiv@b
  5943  078E  0008               	return
  5944  078F                     __end_ofPL86:	
  5945  078F                     PL96:	
  5946  078F  00A7               	movwf	?_timeSince+3
  5947  0790  082A               	movf	??_timeSince+2,w
  5948  0791  00A6               	movwf	?_timeSince+2
  5949  0792  0829               	movf	??_timeSince+1,w
  5950  0793  00A5               	movwf	?_timeSince+1
  5951  0794  0828               	movf	??_timeSince,w
  5952  0795  00A4               	movwf	?_timeSince
  5953  0796  0008               	return
  5954  0797                     __end_ofPL96:	
  5955  0797                     PL98:	
  5956  0797  0821               	movf	?___wmul+1,w
  5957  0798  0085               	movwf	5
  5958  0799  0820               	movf	?___wmul,w
  5959  079A  0084               	movwf	4
  5960  079B  30A9               	movlw	low ((_nextStateTbl+1)| (0+32768))
  5961  079C  0784               	addwf	4,f
  5962  079D  30A0               	movlw	high ((_nextStateTbl+1)| (0+32768))
  5963  079E  3D85               	addwfc	5,f
  5964  079F  0008               	return
  5965  07A0                     __end_ofPL98:	
  5966  07A0                     PL114:	
  5967  07A0  00B1               	movwf	___flmul@b+3
  5968  07A1  30A0               	movlw	160
  5969  07A2  00B0               	movwf	___flmul@b+2
  5970  07A3  01AF               	clrf	___flmul@b+1
  5971  07A4  01AE               	clrf	___flmul@b
  5972  07A5  0143               	movlb	3	; select bank3
  5973  07A6  0008               	return
  5974  07A7                     __end_ofPL114:	
  5975  07A7                     PL120:	
  5976  07A7  0858               	movf	checkSensor@data,w
  5977  07A8  3E20               	addlw	32
  5978  07A9  0086               	movwf	6
  5979  07AA  3002               	movlw	2	; select bank4/5
  5980  07AB  0087               	movwf	7
  5981  07AC  0008               	return
  5982  07AD                     __end_ofPL120:	
  5983  07AD                     PL124:	
  5984  07AD  0140               	movlb	0	; select bank0
  5985  07AE  00A1               	movwf	___xxtofl@val+1
  5986  07AF  3000               	movlw	0
  5987  07B0  01A2               	clrf	___xxtofl@val+2
  5988  07B1  01A3               	clrf	___xxtofl@val+3
  5989  07B2  0008               	return
  5990  07B3                     __end_ofPL124:	
  5991  07B3                     PL134:	
  5992  07B3  36A0               	lsrf	??_OLED_write4bits,f
  5993  07B4  36A0               	lsrf	??_OLED_write4bits,f
  5994  07B5  0820               	movf	??_OLED_write4bits,w
  5995  07B6  3901               	andlw	1
  5996  07B7  00A1               	movwf	??_OLED_write4bits+1
  5997  07B8  0EA1               	swapf	??_OLED_write4bits+1,f
  5998  07B9  0008               	return
  5999  07BA                     __end_ofPL134:	
  6000  07BA                     PL142:	
  6001  07BA  3E10               	addlw	16
  6002  07BB  0086               	movwf	6
  6003  07BC  3002               	movlw	2	; select bank4/5
  6004  07BD  0087               	movwf	7
  6005  07BE  3F40               	moviw [0]fsr1
  6006  07BF  0008               	return
  6007  07C0                     __end_ofPL142:	
  6008  07C0                     PL156:	
  6009  07C0  0846               	movf	___flmul@temp+1,w
  6010  07C1  3A80               	xorlw	128
  6011  07C2  00B6               	movwf	??___flmul
  6012  07C3  3080               	movlw	128
  6013  07C4  0236               	subwf	??___flmul,w
  6014  07C5  0008               	return
  6015  07C6                     __end_ofPL156:	
  6016  07C6                     PL160:	
  6017  07C6  01B2               	clrf	___flmul@a
  6018  07C7  01B3               	clrf	___flmul@a+1
  6019  07C8  01B4               	clrf	___flmul@a+2
  6020  07C9  01B5               	clrf	___flmul@a+3
  6021  07CA  0008               	return
  6022  07CB                     __end_ofPL160:	
  6023  07CB                     PL162:	
  6024  07CB  01AE               	clrf	___flmul@b
  6025  07CC  01AF               	clrf	___flmul@b+1
  6026  07CD  01B0               	clrf	___flmul@b+2
  6027  07CE  01B1               	clrf	___flmul@b+3
  6028  07CF  0008               	return
  6029  07D0                     __end_ofPL162:	
  6030  07D0                     PL166:	
  6031  07D0  36AD               	lsrf	___xxtofl@arg+3,f
  6032  07D1  0CAC               	rrf	___xxtofl@arg+2,f
  6033  07D2  0CAB               	rrf	___xxtofl@arg+1,f
  6034  07D3  0CAA               	rrf	___xxtofl@arg,f
  6035  07D4  0008               	return
  6036  07D5                     __end_ofPL166:	
  6037                           
  6038                           	psect	bssCOMMON
  6039  007B                     __pbssCOMMON:	
  6040  007B                     uartReceiveISR@rxCount:	
  6041  007B                     	ds	1
  6042  007C                     _g_curRotState:	
  6043  007C                     	ds	1
  6044  007D                     _tick10ms:	
  6045  007D                     	ds	1
  6046                           
  6047                           	psect	bssBANK2
  6048  015C                     __pbssBANK2:	
  6049  015C                     _width:	
  6050  015C                     	ds	2
  6051  015E                     _prec:	
  6052  015E                     	ds	2
  6053  0160                     _flags:	
  6054  0160                     	ds	2
  6055  0162                     channelSetup@page:	
  6056  0162                     	ds	1
  6057  0163                     channelView@page:	
  6058  0163                     	ds	1
  6059  0164                     statusView@page:	
  6060  0164                     	ds	1
  6061  0165                     menu@state:	
  6062  0165                     	ds	1
  6063  0166                     _selectedChannel:	
  6064  0166                     	ds	1
  6065  0167                     uartReceiveISR@checksum:	
  6066  0167                     	ds	1
  6067  0168                     _dataReadyFlag:	
  6068  0168                     	ds	1
  6069  0169                     _rxOErrCount:	
  6070  0169                     	ds	1
  6071  016A                     _rxFErrCount:	
  6072  016A                     	ds	1
  6073  016B                     _g_pbState:	
  6074  016B                     	ds	1
  6075  016C                     _g_rotDir:	
  6076  016C                     	ds	1
  6077  016D                     checkSensor@state:	
  6078  016D                     	ds	1
  6079                           
  6080                           	psect	dataBANK2
  6081  016E                     __pdataBANK2:	
  6082  016E                     _updateScreen:	
  6083  016E                     	ds	1
  6084                           
  6085                           	psect	bssBANK3
  6086  01A0                     __pbssBANK3:	
  6087  01A0                     floorf@F514:	
  6088  01A0                     	ds	4
  6089  01A4                     ___fpclassifyf@F453:	
  6090  01A4                     	ds	4
  6091  01A8                     _tick100ms:	
  6092  01A8                     	ds	4
  6093  01AC                     checkSensor@sensorTimeout:	
  6094  01AC                     	ds	4
  6095  01B0                     checkSensor@sensorUpdateInterval:	
  6096  01B0                     	ds	4
  6097  01B4                     _nout:	
  6098  01B4                     	ds	2
  6099  01B6                     convertAnalogValues@avgI:	
  6100  01B6                     	ds	2
  6101  01B8                     convertAnalogValues@avgV:	
  6102  01B8                     	ds	2
  6103  01BA                     convertAnalogValues@avgT:	
  6104  01BA                     	ds	2
  6105  01BC                     _dataPacket:	
  6106  01BC                     	ds	15
  6107  01CB                     _s12:	
  6108  01CB                     	ds	13
  6109                           
  6110                           	psect	dataBANK3
  6111  01D8                     __pdataBANK3:	
  6112  01D8                     _p_fct:	
  6113  01D8                     	ds	10
  6114  01E2                     stoa@F1151:	
  6115  01E2                     	ds	7
  6116  01E9                     OLED_print_xy@F7874:	
  6117  01E9                     	ds	4
  6118                           
  6119                           	psect	bssBANK4
  6120  0220                     __pbssBANK4:	
  6121  0220                     _data:	
  6122  0220                     	ds	33
  6123  0241                     uartReceiveISR@buffer:	
  6124  0241                     	ds	20
  6125                           
  6126                           	psect	bssBANK5
  6127  02A0                     __pbssBANK5:	
  6128  02A0                     _dbuf:	
  6129  02A0                     	ds	80
  6130                           
  6131                           	psect	bssBANK6
  6132  0320                     __pbssBANK6:	
  6133  0320                     _s:	
  6134  0320                     	ds	61
  6135                           
  6136                           	psect	inittext
  6137  080D                     init_ram:	
  6138  080D  00FE               	movwf	126
  6139  080E                     initloop:	
  6140  080E  0012               	moviw fsr0++
  6141  080F  001E               	movwi fsr1++
  6142  0810  0BFE               	decfsz	126,f
  6143  0811  280E               	goto	initloop
  6144  0812  3400               	retlw	0
  6145                           
  6146                           	psect	clrtext
  6147  0807                     clear_ram0:	
  6148                           ;	Called with FSR0 containing the base address, and
  6149                           ;	WREG with the size to clear
  6150                           
  6151  0807  0064               	clrwdt	;clear the watchdog before getting into this loop
  6152  0808                     clrloop0:	
  6153  0808  0180               	clrf	0	;clear RAM location pointed to by FSR
  6154  0809  3101               	addfsr 0,1
  6155  080A  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  6156  080B  2808               	goto	clrloop0	;have we reached the end yet?
  6157  080C  3400               	retlw	0	;all done for this memory range, return
  6158                           
  6159                           	psect	cstackBANK2
  6160  0120                     __pcstackBANK2:	
  6161  0120                     vfpfcnvrt@ll:	
  6162                           
  6163                           ; 4 bytes @ 0x0
  6164  0120                     	ds	4
  6165  0124                     vfpfcnvrt@cp:	
  6166                           
  6167                           ; 1 bytes @ 0x4
  6168  0124                     	ds	1
  6169  0125                     _vfpfcnvrt$1167:	
  6170                           
  6171                           ; 2 bytes @ 0x5
  6172  0125                     	ds	2
  6173  0127                     _vfpfcnvrt$1168:	
  6174                           
  6175                           ; 2 bytes @ 0x7
  6176  0127                     	ds	2
  6177  0129                     _vfpfcnvrt$1173:	
  6178                           
  6179                           ; 2 bytes @ 0x9
  6180  0129                     	ds	2
  6181  012B                     vfpfcnvrt@ct:	
  6182                           
  6183                           ; 3 bytes @ 0xB
  6184  012B                     	ds	3
  6185  012E                     vfpfcnvrt@f:	
  6186                           
  6187                           ; 4 bytes @ 0xE
  6188  012E                     	ds	4
  6189  0132                     vfpfcnvrt@c:	
  6190                           
  6191                           ; 1 bytes @ 0x12
  6192  0132                     	ds	1
  6193  0133                     vfpfcnvrt@fp:	
  6194                           
  6195                           ; 1 bytes @ 0x13
  6196  0133                     	ds	1
  6197  0134                     ?_sprintf:	
  6198  0134                     sprintf@s:	
  6199                           ; 2 bytes @ 0x14
  6200                           
  6201                           
  6202                           ; 2 bytes @ 0x14
  6203  0134                     	ds	2
  6204  0136                     sprintf@fmt:	
  6205                           
  6206                           ; 2 bytes @ 0x16
  6207  0136                     	ds	21
  6208  014B                     sprintf@ap:	
  6209                           
  6210                           ; 1 bytes @ 0x2B
  6211  014B                     	ds	1
  6212  014C                     sprintf@f:	
  6213                           
  6214                           ; 6 bytes @ 0x2C
  6215  014C                     	ds	6
  6216  0152                     ?_statusView:	
  6217  0152                     ?_channelView:	
  6218                           ; 1 bytes @ 0x32
  6219                           
  6220  0152                     ?_channelSetup:	
  6221                           ; 1 bytes @ 0x32
  6222                           
  6223  0152                     ?_setOutputPower:	
  6224                           ; 1 bytes @ 0x32
  6225                           
  6226  0152                     ?_setLensDia:	
  6227                           ; 1 bytes @ 0x32
  6228                           
  6229  0152                     statusView@data:	
  6230                           ; 1 bytes @ 0x32
  6231                           
  6232  0152                     channelView@data:	
  6233                           ; 1 bytes @ 0x32
  6234                           
  6235  0152                     channelSetup@data:	
  6236                           ; 1 bytes @ 0x32
  6237                           
  6238  0152                     setOutputPower@data:	
  6239                           ; 1 bytes @ 0x32
  6240                           
  6241  0152                     setLensDia@data:	
  6242                           ; 1 bytes @ 0x32
  6243                           
  6244                           
  6245                           ; 1 bytes @ 0x32
  6246  0152                     	ds	1
  6247  0153                     ??_menu:	
  6248                           
  6249                           ; 1 bytes @ 0x33
  6250  0153                     	ds	4
  6251  0157                     menu@data:	
  6252                           
  6253                           ; 1 bytes @ 0x37
  6254  0157                     	ds	1
  6255  0158                     menu@page:	
  6256                           
  6257                           ; 1 bytes @ 0x38
  6258  0158                     	ds	1
  6259  0159                     menu@pb:	
  6260                           
  6261                           ; 1 bytes @ 0x39
  6262  0159                     	ds	1
  6263  015A                     menu@nextState:	
  6264                           
  6265                           ; 1 bytes @ 0x3A
  6266  015A                     	ds	1
  6267  015B                     ??_main:	
  6268                           
  6269                           ; 1 bytes @ 0x3B
  6270  015B                     	ds	1
  6271                           
  6272                           	psect	cstackBANK1
  6273  00A0                     __pcstackBANK1:	
  6274  00A0                     floorf@m:	
  6275                           
  6276                           ; 4 bytes @ 0x0
  6277  00A0                     	ds	4
  6278  00A4                     floorf@e:	
  6279                           
  6280                           ; 2 bytes @ 0x4
  6281  00A4                     	ds	2
  6282  00A6                     floorf@u:	
  6283                           
  6284                           ; 4 bytes @ 0x6
  6285  00A6                     	ds	4
  6286  00AA                     efgtoa@ou:	
  6287                           
  6288                           ; 4 bytes @ 0xA
  6289  00AA                     	ds	4
  6290  00AE                     _efgtoa$1132:	
  6291                           
  6292                           ; 2 bytes @ 0xE
  6293  00AE                     	ds	2
  6294  00B0                     _efgtoa$1133:	
  6295                           
  6296                           ; 2 bytes @ 0x10
  6297  00B0                     	ds	2
  6298  00B2                     _efgtoa$1137:	
  6299                           
  6300                           ; 2 bytes @ 0x12
  6301  00B2                     	ds	2
  6302  00B4                     _efgtoa$1141:	
  6303                           
  6304                           ; 2 bytes @ 0x14
  6305  00B4                     	ds	2
  6306  00B6                     _efgtoa$1142:	
  6307                           
  6308                           ; 2 bytes @ 0x16
  6309  00B6                     	ds	2
  6310  00B8                     _efgtoa$1143:	
  6311                           
  6312                           ; 2 bytes @ 0x18
  6313  00B8                     	ds	2
  6314  00BA                     efgtoa@t:	
  6315                           
  6316                           ; 2 bytes @ 0x1A
  6317  00BA                     	ds	2
  6318  00BC                     efgtoa@pp:	
  6319                           
  6320                           ; 2 bytes @ 0x1C
  6321  00BC                     	ds	2
  6322  00BE                     efgtoa@m:	
  6323                           
  6324                           ; 2 bytes @ 0x1E
  6325  00BE                     	ds	2
  6326  00C0                     efgtoa@ne:	
  6327                           
  6328                           ; 2 bytes @ 0x20
  6329  00C0                     	ds	2
  6330  00C2                     efgtoa@d:	
  6331                           
  6332                           ; 2 bytes @ 0x22
  6333  00C2                     	ds	2
  6334  00C4                     efgtoa@sign:	
  6335                           
  6336                           ; 2 bytes @ 0x24
  6337  00C4                     	ds	2
  6338  00C6                     efgtoa@fp:	
  6339                           
  6340                           ; 1 bytes @ 0x26
  6341  00C6                     	ds	1
  6342  00C7                     efgtoa@p:	
  6343                           
  6344                           ; 2 bytes @ 0x27
  6345  00C7                     	ds	2
  6346  00C9                     efgtoa@nmode:	
  6347                           
  6348                           ; 1 bytes @ 0x29
  6349  00C9                     	ds	1
  6350  00CA                     efgtoa@w:	
  6351                           
  6352                           ; 2 bytes @ 0x2A
  6353  00CA                     	ds	2
  6354  00CC                     efgtoa@mode:	
  6355                           
  6356                           ; 1 bytes @ 0x2C
  6357  00CC                     	ds	1
  6358  00CD                     efgtoa@h:	
  6359                           
  6360                           ; 4 bytes @ 0x2D
  6361  00CD                     	ds	4
  6362  00D1                     efgtoa@l:	
  6363                           
  6364                           ; 4 bytes @ 0x31
  6365  00D1                     	ds	4
  6366  00D5                     efgtoa@i:	
  6367                           
  6368                           ; 2 bytes @ 0x35
  6369  00D5                     	ds	2
  6370  00D7                     efgtoa@g:	
  6371                           
  6372                           ; 4 bytes @ 0x37
  6373  00D7                     	ds	4
  6374  00DB                     efgtoa@e:	
  6375                           
  6376                           ; 2 bytes @ 0x3B
  6377  00DB                     	ds	2
  6378  00DD                     efgtoa@n:	
  6379                           
  6380                           ; 2 bytes @ 0x3D
  6381  00DD                     	ds	2
  6382  00DF                     efgtoa@u:	
  6383                           
  6384                           ; 4 bytes @ 0x3F
  6385  00DF                     	ds	4
  6386  00E3                     ?_vfpfcnvrt:	
  6387  00E3                     vfpfcnvrt@fmt:	
  6388                           ; 2 bytes @ 0x43
  6389                           
  6390                           
  6391                           ; 1 bytes @ 0x43
  6392  00E3                     	ds	1
  6393  00E4                     vfpfcnvrt@ap:	
  6394                           
  6395                           ; 1 bytes @ 0x44
  6396  00E4                     	ds	1
  6397  00E5                     ??_vfpfcnvrt:	
  6398                           
  6399                           ; 1 bytes @ 0x45
  6400  00E5                     	ds	4
  6401  00E9                     ?_vfprintf:	
  6402  00E9                     vfprintf@fmt:	
  6403                           ; 2 bytes @ 0x49
  6404                           
  6405                           
  6406                           ; 2 bytes @ 0x49
  6407  00E9                     	ds	2
  6408  00EB                     vfprintf@ap:	
  6409                           
  6410                           ; 1 bytes @ 0x4B
  6411  00EB                     	ds	1
  6412  00EC                     ??_vfprintf:	
  6413                           
  6414                           ; 1 bytes @ 0x4C
  6415  00EC                     	ds	1
  6416  00ED                     vfprintf@fp:	
  6417                           
  6418                           ; 1 bytes @ 0x4D
  6419  00ED                     	ds	1
  6420  00EE                     vfprintf@cfmt:	
  6421                           
  6422                           ; 2 bytes @ 0x4E
  6423  00EE                     	ds	2
  6424                           
  6425                           	psect	cstackCOMMON
  6426  0070                     __pcstackCOMMON:	
  6427  0070                     ?_initialize:	
  6428  0070                     ?_OLED_init:	
  6429                           ; 1 bytes @ 0x0
  6430                           
  6431  0070                     ?_OLED_returnHome:	
  6432                           ; 1 bytes @ 0x0
  6433                           
  6434  0070                     ?_OLED_clearDisplay:	
  6435                           ; 1 bytes @ 0x0
  6436                           
  6437  0070                     ?_convertAnalogValues:	
  6438                           ; 1 bytes @ 0x0
  6439                           
  6440  0070                     ?_checkSensor:	
  6441                           ; 1 bytes @ 0x0
  6442                           
  6443  0070                     ?_menu:	
  6444                           ; 1 bytes @ 0x0
  6445                           
  6446  0070                     ?_uartSendByte:	
  6447                           ; 1 bytes @ 0x0
  6448                           
  6449  0070                     ?_uartIsDataReady:	
  6450                           ; 1 bytes @ 0x0
  6451                           
  6452  0070                     ?_getDataPacket:	
  6453                           ; 1 bytes @ 0x0
  6454                           
  6455  0070                     ?_pushButtonISR:	
  6456                           ; 1 bytes @ 0x0
  6457                           
  6458  0070                     ??_pushButtonISR:	
  6459                           ; 1 bytes @ 0x0
  6460                           
  6461  0070                     ?_rotISR:	
  6462                           ; 1 bytes @ 0x0
  6463                           
  6464  0070                     ??_rotISR:	
  6465                           ; 1 bytes @ 0x0
  6466                           
  6467  0070                     ?_uartReceiveISR:	
  6468                           ; 1 bytes @ 0x0
  6469                           
  6470  0070                     ?_strncpy:	
  6471                           ; 1 bytes @ 0x0
  6472                           
  6473  0070                     ?_returnToPage:	
  6474                           ; 1 bytes @ 0x0
  6475                           
  6476  0070                     ?_putch:	
  6477                           ; 1 bytes @ 0x0
  6478                           
  6479  0070                     ?_main:	
  6480                           ; 1 bytes @ 0x0
  6481                           
  6482  0070                     ?_OLED_pulseEnable:	
  6483                           ; 1 bytes @ 0x0
  6484                           
  6485  0070                     ?_OLED_write4bits:	
  6486                           ; 1 bytes @ 0x0
  6487                           
  6488  0070                     ?_OLED_waitForReady:	
  6489                           ; 1 bytes @ 0x0
  6490                           
  6491  0070                     ?_OLED_command:	
  6492                           ; 1 bytes @ 0x0
  6493                           
  6494  0070                     ?_OLED_write:	
  6495                           ; 1 bytes @ 0x0
  6496                           
  6497  0070                     ?_OLED_scrollDisplayLeft:	
  6498                           ; 1 bytes @ 0x0
  6499                           
  6500  0070                     ?_OLED_scrollDisplayRight:	
  6501                           ; 1 bytes @ 0x0
  6502                           
  6503  0070                     ?_get10msTick:	
  6504                           ; 1 bytes @ 0x0
  6505                           
  6506  0070                     ??_get10msTick:	
  6507                           ; 1 bytes @ 0x0
  6508                           
  6509  0070                     ?_reset10msTick:	
  6510                           ; 1 bytes @ 0x0
  6511                           
  6512  0070                     ??_reset10msTick:	
  6513                           ; 1 bytes @ 0x0
  6514                           
  6515  0070                     ?_ISR:	
  6516                           ; 1 bytes @ 0x0
  6517                           
  6518  0070                     ?_getRotDir:	
  6519                           ; 1 bytes @ 0x0
  6520                           
  6521  0070                     ?_getPB:	
  6522                           ; 1 bytes @ 0x0
  6523                           
  6524  0070                     pushButtonISR@time:	
  6525                           ; 1 bytes @ 0x0
  6526                           
  6527  0070                     putch@c:	
  6528                           ; 1 bytes @ 0x0
  6529                           
  6530  0070                     strncpy@s:	
  6531                           ; 1 bytes @ 0x0
  6532                           
  6533                           
  6534                           ; 1 bytes @ 0x0
  6535  0070                     	ds	1
  6536  0071                     strncpy@n:	
  6537                           
  6538                           ; 2 bytes @ 0x1
  6539  0071                     	ds	2
  6540  0073                     ??_strncpy:	
  6541  0073                     strncpy@d:	
  6542                           ; 1 bytes @ 0x3
  6543                           
  6544                           
  6545                           ; 1 bytes @ 0x3
  6546  0073                     	ds	1
  6547  0074                     strncpy@cp:	
  6548                           
  6549                           ; 1 bytes @ 0x4
  6550  0074                     	ds	1
  6551  0075                     ??_uartReceiveISR:	
  6552                           
  6553                           ; 1 bytes @ 0x5
  6554  0075                     	ds	1
  6555  0076                     rotISR@input:	
  6556                           
  6557                           ; 1 bytes @ 0x6
  6558  0076                     	ds	1
  6559  0077                     ??_ISR:	
  6560                           
  6561                           ; 1 bytes @ 0x7
  6562  0077                     	ds	4
  6563                           
  6564                           	psect	cstackBANK0
  6565  0020                     __pcstackBANK0:	
  6566  0020                     ?___fleq:	
  6567  0020                     ??_initialize:	
  6568                           ; 1 bit 
  6569                           
  6570  0020                     ??_uartSendByte:	
  6571                           ; 1 bytes @ 0x0
  6572                           
  6573  0020                     ??_uartIsDataReady:	
  6574                           ; 1 bytes @ 0x0
  6575                           
  6576  0020                     ??_getDataPacket:	
  6577                           ; 1 bytes @ 0x0
  6578                           
  6579  0020                     ?_strcpy:	
  6580                           ; 1 bytes @ 0x0
  6581                           
  6582  0020                     ??_putch:	
  6583                           ; 1 bytes @ 0x0
  6584                           
  6585  0020                     ??_OLED_pulseEnable:	
  6586                           ; 1 bytes @ 0x0
  6587                           
  6588  0020                     ??_OLED_write4bits:	
  6589                           ; 1 bytes @ 0x0
  6590                           
  6591  0020                     ??_OLED_waitForReady:	
  6592                           ; 1 bytes @ 0x0
  6593                           
  6594  0020                     ??_getRotDir:	
  6595                           ; 1 bytes @ 0x0
  6596                           
  6597  0020                     ??_getPB:	
  6598                           ; 1 bytes @ 0x0
  6599                           
  6600  0020                     ?_fputc:	
  6601                           ; 1 bytes @ 0x0
  6602                           
  6603  0020                     ?_strlen:	
  6604                           ; 2 bytes @ 0x0
  6605                           
  6606  0020                     ?___fpclassifyf:	
  6607                           ; 2 bytes @ 0x0
  6608                           
  6609  0020                     ?_isupper:	
  6610                           ; 2 bytes @ 0x0
  6611                           
  6612  0020                     ?_isdigit:	
  6613                           ; 2 bytes @ 0x0
  6614                           
  6615  0020                     ?_strncmp:	
  6616                           ; 2 bytes @ 0x0
  6617                           
  6618  0020                     ?__Umul8_16:	
  6619                           ; 2 bytes @ 0x0
  6620                           
  6621  0020                     ?_isspace:	
  6622                           ; 2 bytes @ 0x0
  6623                           
  6624  0020                     ?_adcGetConversion:	
  6625                           ; 2 bytes @ 0x0
  6626                           
  6627  0020                     ?___wmul:	
  6628                           ; 2 bytes @ 0x0
  6629                           
  6630  0020                     ?___awdiv:	
  6631                           ; 2 bytes @ 0x0
  6632                           
  6633  0020                     ?___awmod:	
  6634                           ; 2 bytes @ 0x0
  6635                           
  6636  0020                     ?_timeNow:	
  6637                           ; 2 bytes @ 0x0
  6638                           
  6639  0020                     ?___lmul:	
  6640                           ; 4 bytes @ 0x0
  6641                           
  6642  0020                     ?___aldiv:	
  6643                           ; 4 bytes @ 0x0
  6644                           
  6645  0020                     ?___almod:	
  6646                           ; 4 bytes @ 0x0
  6647                           
  6648  0020                     ?___flneg:	
  6649                           ; 4 bytes @ 0x0
  6650                           
  6651  0020                     ?___fltol:	
  6652                           ; 4 bytes @ 0x0
  6653                           
  6654  0020                     ?___xxtofl:	
  6655                           ; 4 bytes @ 0x0
  6656                           
  6657  0020                     OLED_waitForReady@busy:	
  6658                           ; 4 bytes @ 0x0
  6659                           
  6660  0020                     getRotDir@ret:	
  6661                           ; 1 bytes @ 0x0
  6662                           
  6663  0020                     getPB@ret:	
  6664                           ; 1 bytes @ 0x0
  6665                           
  6666  0020                     uartIsDataReady@ret:	
  6667                           ; 1 bytes @ 0x0
  6668                           
  6669  0020                     uartSendByte@s:	
  6670                           ; 1 bytes @ 0x0
  6671                           
  6672  0020                     __Umul8_16@multiplicand:	
  6673                           ; 1 bytes @ 0x0
  6674                           
  6675  0020                     ___wmul@multiplier:	
  6676                           ; 1 bytes @ 0x0
  6677                           
  6678  0020                     ___awdiv@divisor:	
  6679                           ; 2 bytes @ 0x0
  6680                           
  6681  0020                     ___awmod@divisor:	
  6682                           ; 2 bytes @ 0x0
  6683                           
  6684  0020                     isdigit@c:	
  6685                           ; 2 bytes @ 0x0
  6686                           
  6687  0020                     isspace@c:	
  6688                           ; 2 bytes @ 0x0
  6689                           
  6690  0020                     isupper@c:	
  6691                           ; 2 bytes @ 0x0
  6692                           
  6693  0020                     fputc@c:	
  6694                           ; 2 bytes @ 0x0
  6695                           
  6696  0020                     strcpy@src:	
  6697                           ; 2 bytes @ 0x0
  6698                           
  6699  0020                     strlen@s:	
  6700                           ; 2 bytes @ 0x0
  6701                           
  6702  0020                     strncmp@_r:	
  6703                           ; 2 bytes @ 0x0
  6704                           
  6705  0020                     ___lmul@multiplier:	
  6706                           ; 2 bytes @ 0x0
  6707                           
  6708  0020                     ___aldiv@divisor:	
  6709                           ; 4 bytes @ 0x0
  6710                           
  6711  0020                     ___almod@divisor:	
  6712                           ; 4 bytes @ 0x0
  6713                           
  6714  0020                     ___fleq@ff1:	
  6715                           ; 4 bytes @ 0x0
  6716                           
  6717  0020                     ___flneg@f1:	
  6718                           ; 4 bytes @ 0x0
  6719                           
  6720  0020                     ___fltol@f1:	
  6721                           ; 4 bytes @ 0x0
  6722                           
  6723  0020                     ___xxtofl@val:	
  6724                           ; 4 bytes @ 0x0
  6725                           
  6726  0020                     ___fpclassifyf@x:	
  6727                           ; 4 bytes @ 0x0
  6728                           
  6729                           
  6730                           ; 4 bytes @ 0x0
  6731  0020                     	ds	2
  6732  0022                     ??_strlen:	
  6733  0022                     ??_isupper:	
  6734                           ; 1 bytes @ 0x2
  6735                           
  6736  0022                     ??_strcpy:	
  6737                           ; 1 bytes @ 0x2
  6738                           
  6739  0022                     ??_isdigit:	
  6740                           ; 1 bytes @ 0x2
  6741                           
  6742  0022                     ??_isspace:	
  6743                           ; 1 bytes @ 0x2
  6744                           
  6745  0022                     ??_adcGetConversion:	
  6746                           ; 1 bytes @ 0x2
  6747                           
  6748  0022                     OLED_write4bits@value:	
  6749                           ; 1 bytes @ 0x2
  6750                           
  6751  0022                     fputc@fp:	
  6752                           ; 1 bytes @ 0x2
  6753                           
  6754  0022                     ___wmul@multiplicand:	
  6755                           ; 1 bytes @ 0x2
  6756                           
  6757  0022                     ___awdiv@dividend:	
  6758                           ; 2 bytes @ 0x2
  6759                           
  6760  0022                     ___awmod@dividend:	
  6761                           ; 2 bytes @ 0x2
  6762                           
  6763  0022                     strlen@a:	
  6764                           ; 2 bytes @ 0x2
  6765                           
  6766  0022                     strncmp@n:	
  6767                           ; 2 bytes @ 0x2
  6768                           
  6769                           
  6770                           ; 2 bytes @ 0x2
  6771  0022                     	ds	1
  6772  0023                     ??_fputc:	
  6773  0023                     ??__Umul8_16:	
  6774                           ; 1 bytes @ 0x3
  6775                           
  6776  0023                     ?_OLED_send:	
  6777                           ; 1 bytes @ 0x3
  6778                           
  6779  0023                     adcGetConversion@channel:	
  6780                           ; 1 bytes @ 0x3
  6781                           
  6782  0023                     OLED_send@mode:	
  6783                           ; 1 bytes @ 0x3
  6784                           
  6785  0023                     __Umul8_16@product:	
  6786                           ; 1 bytes @ 0x3
  6787                           
  6788                           
  6789                           ; 2 bytes @ 0x3
  6790  0023                     	ds	1
  6791  0024                     ??_timeNow:	
  6792  0024                     ??___fpclassifyf:	
  6793                           ; 1 bytes @ 0x4
  6794                           
  6795  0024                     ??_strncmp:	
  6796                           ; 1 bytes @ 0x4
  6797                           
  6798  0024                     ??_OLED_send:	
  6799                           ; 1 bytes @ 0x4
  6800                           
  6801  0024                     ??___wmul:	
  6802                           ; 1 bytes @ 0x4
  6803                           
  6804  0024                     ??___awdiv:	
  6805                           ; 1 bytes @ 0x4
  6806                           
  6807  0024                     ??___awmod:	
  6808                           ; 1 bytes @ 0x4
  6809                           
  6810  0024                     ??___flneg:	
  6811                           ; 1 bytes @ 0x4
  6812                           
  6813  0024                     ??___fltol:	
  6814                           ; 1 bytes @ 0x4
  6815                           
  6816  0024                     ??___xxtofl:	
  6817                           ; 1 bytes @ 0x4
  6818                           
  6819  0024                     ?_tolower:	
  6820                           ; 1 bytes @ 0x4
  6821                           
  6822  0024                     ?_timeSince:	
  6823                           ; 2 bytes @ 0x4
  6824                           
  6825  0024                     OLED_send@value:	
  6826                           ; 4 bytes @ 0x4
  6827                           
  6828  0024                     ___awdiv@counter:	
  6829                           ; 1 bytes @ 0x4
  6830                           
  6831  0024                     ___awmod@counter:	
  6832                           ; 1 bytes @ 0x4
  6833                           
  6834  0024                     _isspace$1511:	
  6835                           ; 1 bytes @ 0x4
  6836                           
  6837  0024                     ___wmul@product:	
  6838                           ; 1 bytes @ 0x4
  6839                           
  6840  0024                     strcpy@s:	
  6841                           ; 2 bytes @ 0x4
  6842                           
  6843  0024                     tolower@c:	
  6844                           ; 2 bytes @ 0x4
  6845                           
  6846  0024                     timeSince@since:	
  6847                           ; 2 bytes @ 0x4
  6848                           
  6849  0024                     ___lmul@multiplicand:	
  6850                           ; 4 bytes @ 0x4
  6851                           
  6852  0024                     ___aldiv@dividend:	
  6853                           ; 4 bytes @ 0x4
  6854                           
  6855  0024                     ___almod@dividend:	
  6856                           ; 4 bytes @ 0x4
  6857                           
  6858  0024                     ___fleq@ff2:	
  6859                           ; 4 bytes @ 0x4
  6860                           
  6861                           
  6862                           ; 4 bytes @ 0x4
  6863  0024                     	ds	1
  6864  0025                     ??_OLED_command:	
  6865  0025                     ??_OLED_write:	
  6866                           ; 1 bytes @ 0x5
  6867                           
  6868  0025                     OLED_command@value:	
  6869                           ; 1 bytes @ 0x5
  6870                           
  6871  0025                     OLED_write@value:	
  6872                           ; 1 bytes @ 0x5
  6873                           
  6874  0025                     ___awdiv@sign:	
  6875                           ; 1 bytes @ 0x5
  6876                           
  6877  0025                     ___awmod@sign:	
  6878                           ; 1 bytes @ 0x5
  6879                           
  6880  0025                     strncmp@_l:	
  6881                           ; 1 bytes @ 0x5
  6882                           
  6883  0025                     __Umul8_16@word_mpld:	
  6884                           ; 1 bytes @ 0x5
  6885                           
  6886                           
  6887                           ; 2 bytes @ 0x5
  6888  0025                     	ds	1
  6889  0026                     ??_OLED_init:	
  6890  0026                     ??_OLED_returnHome:	
  6891                           ; 1 bytes @ 0x6
  6892                           
  6893  0026                     ??_OLED_clearDisplay:	
  6894                           ; 1 bytes @ 0x6
  6895                           
  6896  0026                     ?_getNextState:	
  6897                           ; 1 bytes @ 0x6
  6898                           
  6899  0026                     ??_returnToPage:	
  6900                           ; 1 bytes @ 0x6
  6901                           
  6902  0026                     ?_paging:	
  6903                           ; 1 bytes @ 0x6
  6904                           
  6905  0026                     ??_tolower:	
  6906                           ; 1 bytes @ 0x6
  6907                           
  6908  0026                     ??_OLED_scrollDisplayLeft:	
  6909                           ; 1 bytes @ 0x6
  6910                           
  6911  0026                     ??_OLED_scrollDisplayRight:	
  6912                           ; 1 bytes @ 0x6
  6913                           
  6914  0026                     ?_OLED_print_xy:	
  6915                           ; 1 bytes @ 0x6
  6916                           
  6917  0026                     ?_atoi:	
  6918                           ; 1 bytes @ 0x6
  6919                           
  6920  0026                     OLED_print_xy@row:	
  6921                           ; 2 bytes @ 0x6
  6922                           
  6923  0026                     getNextState@page:	
  6924                           ; 1 bytes @ 0x6
  6925                           
  6926  0026                     paging@lastPage:	
  6927                           ; 1 bytes @ 0x6
  6928                           
  6929  0026                     returnToPage@page:	
  6930                           ; 1 bytes @ 0x6
  6931                           
  6932  0026                     strcpy@d:	
  6933                           ; 1 bytes @ 0x6
  6934                           
  6935  0026                     ___awdiv@quotient:	
  6936                           ; 1 bytes @ 0x6
  6937                           
  6938  0026                     atoi@s:	
  6939                           ; 2 bytes @ 0x6
  6940                           
  6941  0026                     strncmp@r:	
  6942                           ; 2 bytes @ 0x6
  6943                           
  6944                           
  6945                           ; 2 bytes @ 0x6
  6946  0026                     	ds	1
  6947  0027                     ??_paging:	
  6948  0027                     getNextState@pb:	
  6949                           ; 1 bytes @ 0x7
  6950                           
  6951  0027                     returnToPage@n:	
  6952                           ; 1 bytes @ 0x7
  6953                           
  6954  0027                     strcpy@dest:	
  6955                           ; 1 bytes @ 0x7
  6956                           
  6957  0027                     __Umul8_16@multiplier:	
  6958                           ; 1 bytes @ 0x7
  6959                           
  6960  0027                     OLED_print_xy@s:	
  6961                           ; 1 bytes @ 0x7
  6962                           
  6963                           
  6964                           ; 2 bytes @ 0x7
  6965  0027                     	ds	1
  6966  0028                     ??_timeSince:	
  6967  0028                     ??_getNextState:	
  6968                           ; 1 bytes @ 0x8
  6969                           
  6970  0028                     ??_atoi:	
  6971                           ; 1 bytes @ 0x8
  6972                           
  6973  0028                     ??___lmul:	
  6974                           ; 1 bytes @ 0x8
  6975                           
  6976  0028                     ??___aldiv:	
  6977                           ; 1 bytes @ 0x8
  6978                           
  6979  0028                     ??___almod:	
  6980                           ; 1 bytes @ 0x8
  6981                           
  6982  0028                     ??___fleq:	
  6983                           ; 1 bytes @ 0x8
  6984                           
  6985  0028                     ?_fputs:	
  6986                           ; 1 bytes @ 0x8
  6987                           
  6988  0028                     ?_stoa:	
  6989                           ; 2 bytes @ 0x8
  6990                           
  6991  0028                     stoa@s:	
  6992                           ; 2 bytes @ 0x8
  6993                           
  6994  0028                     ___aldiv@counter:	
  6995                           ; 1 bytes @ 0x8
  6996                           
  6997  0028                     ___almod@counter:	
  6998                           ; 1 bytes @ 0x8
  6999                           
  7000  0028                     ___fltol@sign1:	
  7001                           ; 1 bytes @ 0x8
  7002                           
  7003  0028                     ___xxtofl@sign:	
  7004                           ; 1 bytes @ 0x8
  7005                           
  7006  0028                     fputs@fp:	
  7007                           ; 1 bytes @ 0x8
  7008                           
  7009  0028                     strncmp@l:	
  7010                           ; 1 bytes @ 0x8
  7011                           
  7012  0028                     ___fpclassifyf@e:	
  7013                           ; 1 bytes @ 0x8
  7014                           
  7015  0028                     _tolower$1602:	
  7016                           ; 2 bytes @ 0x8
  7017                           
  7018  0028                     ___lmul@product:	
  7019                           ; 2 bytes @ 0x8
  7020                           
  7021                           
  7022                           ; 4 bytes @ 0x8
  7023  0028                     	ds	1
  7024  0029                     ??_fputs:	
  7025  0029                     ??_OLED_print_xy:	
  7026                           ; 1 bytes @ 0x9
  7027                           
  7028  0029                     getNextState@state:	
  7029                           ; 1 bytes @ 0x9
  7030                           
  7031  0029                     paging@dir:	
  7032                           ; 1 bytes @ 0x9
  7033                           
  7034  0029                     ___aldiv@sign:	
  7035                           ; 1 bytes @ 0x9
  7036                           
  7037  0029                     ___almod@sign:	
  7038                           ; 1 bytes @ 0x9
  7039                           
  7040  0029                     ___fltol@exp1:	
  7041                           ; 1 bytes @ 0x9
  7042                           
  7043  0029                     ___xxtofl@exp:	
  7044                           ; 1 bytes @ 0x9
  7045                           
  7046                           
  7047                           ; 1 bytes @ 0x9
  7048  0029                     	ds	1
  7049  002A                     ??_stoa:	
  7050  002A                     ?_abs:	
  7051                           ; 1 bytes @ 0xA
  7052                           
  7053  002A                     getNextState@n:	
  7054                           ; 2 bytes @ 0xA
  7055                           
  7056  002A                     paging@currentPage:	
  7057                           ; 1 bytes @ 0xA
  7058                           
  7059  002A                     fputs@c:	
  7060                           ; 1 bytes @ 0xA
  7061                           
  7062  002A                     abs@a:	
  7063                           ; 1 bytes @ 0xA
  7064                           
  7065  002A                     OLED_print_xy@row_offsets:	
  7066                           ; 2 bytes @ 0xA
  7067                           
  7068  002A                     ___aldiv@quotient:	
  7069                           ; 4 bytes @ 0xA
  7070                           
  7071  002A                     ___xxtofl@arg:	
  7072                           ; 4 bytes @ 0xA
  7073                           
  7074  002A                     ___fpclassifyf@u:	
  7075                           ; 4 bytes @ 0xA
  7076                           
  7077                           
  7078                           ; 4 bytes @ 0xA
  7079  002A                     	ds	1
  7080  002B                     paging@n:	
  7081  002B                     atoi@neg:	
  7082                           ; 1 bytes @ 0xB
  7083                           
  7084  002B                     fputs@i:	
  7085                           ; 2 bytes @ 0xB
  7086                           
  7087  002B                     stoa@nuls:	
  7088                           ; 2 bytes @ 0xB
  7089                           
  7090                           
  7091                           ; 7 bytes @ 0xB
  7092  002B                     	ds	1
  7093  002C                     ??_abs:	
  7094  002C                     ?_ema:	
  7095                           ; 1 bytes @ 0xC
  7096                           
  7097  002C                     ema@in:	
  7098                           ; 2 bytes @ 0xC
  7099                           
  7100                           
  7101                           ; 2 bytes @ 0xC
  7102  002C                     	ds	1
  7103  002D                     fputs@s:	
  7104  002D                     _atoi$1480:	
  7105                           ; 1 bytes @ 0xD
  7106                           
  7107                           
  7108                           ; 2 bytes @ 0xD
  7109  002D                     	ds	1
  7110  002E                     ?_pad:	
  7111  002E                     ?___flmul:	
  7112                           ; 2 bytes @ 0xE
  7113                           
  7114  002E                     OLED_print_xy@col:	
  7115                           ; 4 bytes @ 0xE
  7116                           
  7117  002E                     pad@buf:	
  7118                           ; 1 bytes @ 0xE
  7119                           
  7120  002E                     ema@average:	
  7121                           ; 1 bytes @ 0xE
  7122                           
  7123  002E                     ___flmul@b:	
  7124                           ; 2 bytes @ 0xE
  7125                           
  7126                           
  7127                           ; 4 bytes @ 0xE
  7128  002E                     	ds	1
  7129  002F                     pad@p:	
  7130  002F                     _atoi$1482:	
  7131                           ; 2 bytes @ 0xF
  7132                           
  7133                           
  7134                           ; 2 bytes @ 0xF
  7135  002F                     	ds	1
  7136  0030                     ema@alpha:	
  7137  0030                     timeSince@now:	
  7138                           ; 4 bytes @ 0x10
  7139                           
  7140                           
  7141                           ; 4 bytes @ 0x10
  7142  0030                     	ds	1
  7143  0031                     ??_pad:	
  7144  0031                     _atoi$1481:	
  7145                           ; 1 bytes @ 0x11
  7146                           
  7147                           
  7148                           ; 1 bytes @ 0x11
  7149  0031                     	ds	1
  7150  0032                     pad@i:	
  7151  0032                     stoa@i:	
  7152                           ; 2 bytes @ 0x12
  7153                           
  7154  0032                     atoi@n:	
  7155                           ; 2 bytes @ 0x12
  7156                           
  7157  0032                     ___flmul@a:	
  7158                           ; 2 bytes @ 0x12
  7159                           
  7160                           
  7161                           ; 4 bytes @ 0x12
  7162  0032                     	ds	2
  7163  0034                     ??_ema:	
  7164  0034                     pad@w:	
  7165                           ; 1 bytes @ 0x14
  7166                           
  7167  0034                     stoa@w:	
  7168                           ; 2 bytes @ 0x14
  7169                           
  7170                           
  7171                           ; 2 bytes @ 0x14
  7172  0034                     	ds	2
  7173  0036                     ??___flmul:	
  7174  0036                     pad@fp:	
  7175                           ; 1 bytes @ 0x16
  7176                           
  7177  0036                     stoa@fp:	
  7178                           ; 1 bytes @ 0x16
  7179                           
  7180                           
  7181                           ; 1 bytes @ 0x16
  7182  0036                     	ds	1
  7183  0037                     ?_dtoa:	
  7184  0037                     stoa@cp:	
  7185                           ; 2 bytes @ 0x17
  7186                           
  7187  0037                     dtoa@d:	
  7188                           ; 2 bytes @ 0x17
  7189                           
  7190                           
  7191                           ; 4 bytes @ 0x17
  7192  0037                     	ds	1
  7193  0038                     ema@tmp:	
  7194                           
  7195                           ; 4 bytes @ 0x18
  7196  0038                     	ds	1
  7197  0039                     stoa@p:	
  7198                           
  7199                           ; 2 bytes @ 0x19
  7200  0039                     	ds	1
  7201  003A                     ___flmul@sign:	
  7202                           
  7203                           ; 1 bytes @ 0x1A
  7204  003A                     	ds	1
  7205  003B                     ??_dtoa:	
  7206  003B                     ___flmul@aexp:	
  7207                           ; 1 bytes @ 0x1B
  7208                           
  7209  003B                     stoa@l:	
  7210                           ; 1 bytes @ 0x1B
  7211                           
  7212                           
  7213                           ; 2 bytes @ 0x1B
  7214  003B                     	ds	1
  7215  003C                     _dtoa$1108:	
  7216  003C                     ___flmul@grs:	
  7217                           ; 2 bytes @ 0x1C
  7218                           
  7219                           
  7220                           ; 4 bytes @ 0x1C
  7221  003C                     	ds	2
  7222  003E                     dtoa@fp:	
  7223                           
  7224                           ; 1 bytes @ 0x1E
  7225  003E                     	ds	1
  7226  003F                     dtoa@p:	
  7227                           
  7228                           ; 2 bytes @ 0x1F
  7229  003F                     	ds	1
  7230  0040                     ___flmul@bexp:	
  7231                           
  7232                           ; 1 bytes @ 0x20
  7233  0040                     	ds	1
  7234  0041                     dtoa@w:	
  7235  0041                     ___flmul@prod:	
  7236                           ; 2 bytes @ 0x21
  7237                           
  7238                           
  7239                           ; 4 bytes @ 0x21
  7240  0041                     	ds	2
  7241  0043                     dtoa@s:	
  7242                           
  7243                           ; 2 bytes @ 0x23
  7244  0043                     	ds	2
  7245  0045                     ___flmul@temp:	
  7246  0045                     dtoa@n:	
  7247                           ; 2 bytes @ 0x25
  7248                           
  7249                           
  7250                           ; 4 bytes @ 0x25
  7251  0045                     	ds	2
  7252  0047                     ?___flge:	
  7253  0047                     ?___fladd:	
  7254                           ; 1 bit 
  7255                           
  7256  0047                     ?___fldiv:	
  7257                           ; 4 bytes @ 0x27
  7258                           
  7259  0047                     ___flge@ff1:	
  7260                           ; 4 bytes @ 0x27
  7261                           
  7262  0047                     ___fladd@b:	
  7263                           ; 4 bytes @ 0x27
  7264                           
  7265  0047                     ___fldiv@a:	
  7266                           ; 4 bytes @ 0x27
  7267                           
  7268                           
  7269                           ; 4 bytes @ 0x27
  7270  0047                     	ds	2
  7271  0049                     dtoa@i:	
  7272                           
  7273                           ; 2 bytes @ 0x29
  7274  0049                     	ds	2
  7275  004B                     ___flge@ff2:	
  7276  004B                     ___fladd@a:	
  7277                           ; 4 bytes @ 0x2B
  7278                           
  7279  004B                     ___fldiv@b:	
  7280                           ; 4 bytes @ 0x2B
  7281                           
  7282                           
  7283                           ; 4 bytes @ 0x2B
  7284  004B                     	ds	4
  7285  004F                     ??___flge:	
  7286  004F                     ??___fladd:	
  7287                           ; 1 bytes @ 0x2F
  7288                           
  7289  004F                     ??___fldiv:	
  7290                           ; 1 bytes @ 0x2F
  7291                           
  7292                           
  7293                           ; 1 bytes @ 0x2F
  7294  004F                     	ds	4
  7295  0053                     ??_checkSensor:	
  7296  0053                     ___fldiv@rem:	
  7297                           ; 1 bytes @ 0x33
  7298                           
  7299                           
  7300                           ; 4 bytes @ 0x33
  7301  0053                     	ds	4
  7302  0057                     checkSensor@dp:	
  7303  0057                     ___fladd@signs:	
  7304                           ; 1 bytes @ 0x37
  7305                           
  7306  0057                     ___fldiv@sign:	
  7307                           ; 1 bytes @ 0x37
  7308                           
  7309                           
  7310                           ; 1 bytes @ 0x37
  7311  0057                     	ds	1
  7312  0058                     checkSensor@data:	
  7313  0058                     ___fladd@aexp:	
  7314                           ; 1 bytes @ 0x38
  7315                           
  7316  0058                     ___fldiv@new_exp:	
  7317                           ; 1 bytes @ 0x38
  7318                           
  7319                           
  7320                           ; 2 bytes @ 0x38
  7321  0058                     	ds	1
  7322  0059                     ___fladd@bexp:	
  7323                           
  7324                           ; 1 bytes @ 0x39
  7325  0059                     	ds	1
  7326  005A                     ___fladd@grs:	
  7327  005A                     ___fldiv@grs:	
  7328                           ; 1 bytes @ 0x3A
  7329                           
  7330                           
  7331                           ; 4 bytes @ 0x3A
  7332  005A                     	ds	1
  7333  005B                     ?___flsub:	
  7334  005B                     ___flsub@a:	
  7335                           ; 4 bytes @ 0x3B
  7336                           
  7337                           
  7338                           ; 4 bytes @ 0x3B
  7339  005B                     	ds	3
  7340  005E                     ___fldiv@bexp:	
  7341                           
  7342                           ; 1 bytes @ 0x3E
  7343  005E                     	ds	1
  7344  005F                     ___fldiv@aexp:	
  7345  005F                     ___flsub@b:	
  7346                           ; 1 bytes @ 0x3F
  7347                           
  7348                           
  7349                           ; 4 bytes @ 0x3F
  7350  005F                     	ds	1
  7351  0060                     ??_convertAnalogValues:	
  7352  0060                     ?_floorf:	
  7353                           ; 1 bytes @ 0x40
  7354                           
  7355  0060                     floorf@x:	
  7356                           ; 4 bytes @ 0x40
  7357                           
  7358  0060                     _convertAnalogValues$1790:	
  7359                           ; 4 bytes @ 0x40
  7360                           
  7361                           
  7362                           ; 4 bytes @ 0x40
  7363  0060                     	ds	3
  7364  0063                     ??___flsub:	
  7365                           
  7366                           ; 1 bytes @ 0x43
  7367  0063                     	ds	1
  7368  0064                     ??_floorf:	
  7369  0064                     convertAnalogValues@adc:	
  7370                           ; 1 bytes @ 0x44
  7371                           
  7372                           
  7373                           ; 2 bytes @ 0x44
  7374  0064                     	ds	2
  7375  0066                     convertAnalogValues@data:	
  7376                           
  7377                           ; 1 bytes @ 0x46
  7378  0066                     	ds	2
  7379  0068                     ?_efgtoa:	
  7380  0068                     efgtoa@f:	
  7381                           ; 2 bytes @ 0x48
  7382                           
  7383                           
  7384                           ; 4 bytes @ 0x48
  7385  0068                     	ds	4
  7386  006C                     efgtoa@c:	
  7387                           
  7388                           ; 1 bytes @ 0x4C
  7389  006C                     	ds	1
  7390  006D                     ??_efgtoa:	
  7391                           
  7392                           ; 1 bytes @ 0x4D
  7393  006D                     	ds	3
  7394  0070                     ??_statusView:	
  7395  0070                     ??_channelView:	
  7396                           ; 1 bytes @ 0x50
  7397                           
  7398  0070                     ??_channelSetup:	
  7399                           ; 1 bytes @ 0x50
  7400                           
  7401  0070                     ??_setOutputPower:	
  7402                           ; 1 bytes @ 0x50
  7403                           
  7404  0070                     ??_setLensDia:	
  7405                           ; 1 bytes @ 0x50
  7406                           
  7407  0070                     ??_sprintf:	
  7408                           ; 1 bytes @ 0x50
  7409                           
  7410                           
  7411                           	psect	text15
  7412  082C                     __ptext15:	
  7413 ;; *************** function _efgtoa *****************
  7414 ;; Defined at:
  7415 ;;		line 319 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
  7416 ;; Parameters:    Size  Location     Type
  7417 ;;  fp              1    wreg     PTR struct _IO_FILE
  7418 ;;		 -> sprintf@f(6), 
  7419 ;;  f               4   72[BANK0 ] PTR struct _IO_FILE
  7420 ;;  c               1   76[BANK0 ] unsigned char 
  7421 ;; Auto vars:     Size  Location     Type
  7422 ;;  fp              1   38[BANK1 ] PTR struct _IO_FILE
  7423 ;;		 -> sprintf@f(6), 
  7424 ;;  u               4   63[BANK1 ] PTR struct _IO_FILE
  7425 ;;  g               4   55[BANK1 ] PTR struct _IO_FILE
  7426 ;;  l               4   49[BANK1 ] PTR struct _IO_FILE
  7427 ;;  h               4   45[BANK1 ] PTR struct _IO_FILE
  7428 ;;  ou              4   10[BANK1 ] PTR struct _IO_FILE
  7429 ;;  n               2   61[BANK1 ] int 
  7430 ;;  e               2   59[BANK1 ] int 
  7431 ;;  i               2   53[BANK1 ] int 
  7432 ;;  w               2   42[BANK1 ] int 
  7433 ;;  p               2   39[BANK1 ] int 
  7434 ;;  sign            2   36[BANK1 ] int 
  7435 ;;  d               2   34[BANK1 ] int 
  7436 ;;  ne              2   32[BANK1 ] int 
  7437 ;;  m               2   30[BANK1 ] int 
  7438 ;;  pp              2   28[BANK1 ] int 
  7439 ;;  t               2   26[BANK1 ] int 
  7440 ;;  mode            1   44[BANK1 ] unsigned char 
  7441 ;;  nmode           1   41[BANK1 ] unsigned char 
  7442 ;; Return value:  Size  Location     Type
  7443 ;;                  2   72[BANK0 ] int 
  7444 ;; Registers used:
  7445 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7446 ;; Tracked objects:
  7447 ;;		On entry : 3F/2
  7448 ;;		On exit  : 3F/0
  7449 ;;		Unchanged: 0/0
  7450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7451 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7452 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7453 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7454 ;;      Totals:         0       8      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7455 ;;Total ram usage:       65 bytes
  7456 ;; Hardware stack levels used:    1
  7457 ;; Hardware stack levels required when called:    7
  7458 ;; This function calls:
  7459 ;;		___awdiv
  7460 ;;		___awmod
  7461 ;;		___fladd
  7462 ;;		___fldiv
  7463 ;;		___fleq
  7464 ;;		___flge
  7465 ;;		___flmul
  7466 ;;		___flneg
  7467 ;;		___flsub
  7468 ;;		___fltol
  7469 ;;		___fpclassifyf
  7470 ;;		_floorf
  7471 ;;		_isupper
  7472 ;;		_pad
  7473 ;;		_strcpy
  7474 ;;		_tolower
  7475 ;; This function is called by:
  7476 ;;		_vfpfcnvrt
  7477 ;; This function uses a non-reentrant model
  7478 ;;
  7479                           
  7480                           
  7481                           ;psect for function _efgtoa
  7482  082C                     _efgtoa:	
  7483                           
  7484                           ;incstack = 0
  7485                           ; Regs used in _efgtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7486                           ;efgtoa@fp stored from wreg
  7487  082C  0141               	movlb	1	; select bank1
  7488  082D  00C6               	movwf	efgtoa@fp^(0+128)
  7489                           
  7490                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 319: static
      +                           int efgtoa(FILE *fp, long double f, char c);C:\Program Files (x86)\Microchip\xc8\v2.00\
      +                          pic\sources\c99\common\doprnt.c: 320: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\s
      +                          ources\c99\common\doprnt.c: 321:     char mode, nmode;;C:\Program Files (x86)\Microchip\
      +                          xc8\v2.00\pic\sources\c99\common\doprnt.c: 322:     int d, e, i, m, n, ne, p, pp, sign, 
      +                          t, w;;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 323:  
      +                             long double g, h, l, ou, u;
  7491  082E  01C4               	clrf	efgtoa@sign^(0+128)
  7492  082F  01C5               	clrf	(efgtoa@sign+1)^(0+128)
  7493                           
  7494                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 327:     g 
      +                          = f;
  7495  0830  0140               	movlb	0	; select bank0
  7496  0831  086B               	movf	efgtoa@f+3,w
  7497  0832  0141               	movlb	1	; select bank1
  7498  0833  00DA               	movwf	(efgtoa@g+3)^(0+128)
  7499  0834  0140               	movlb	0	; select bank0
  7500  0835  086A               	movf	efgtoa@f+2,w
  7501  0836  0141               	movlb	1	; select bank1
  7502  0837  00D9               	movwf	(efgtoa@g+2)^(0+128)
  7503  0838  0140               	movlb	0	; select bank0
  7504  0839  0869               	movf	efgtoa@f+1,w
  7505  083A  0141               	movlb	1	; select bank1
  7506  083B  00D8               	movwf	(efgtoa@g+1)^(0+128)
  7507  083C  0140               	movlb	0	; select bank0
  7508  083D  0868               	movf	efgtoa@f,w
  7509  083E  0141               	movlb	1	; select bank1
  7510  083F  00D7               	movwf	efgtoa@g^(0+128)
  7511                           
  7512                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 328:     if
      +                           (g < 0.0) {
  7513  0840  2626  3188         	fcall	PL32	;call to abstracted procedure
  7514  0842  26CB  3188         	fcall	PL172	;call to abstracted procedure
  7515  0844  24CA  3188         	fcall	___flge
  7516  0846  1803               	btfsc	3,0
  7517  0847  286C               	goto	l4454
  7518                           
  7519                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 329:       
      +                            sign = 1;
  7520  0848  0141               	movlb	1	; select bank1
  7521  0849  01C4               	clrf	efgtoa@sign^(0+128)
  7522  084A  0AC4               	incf	efgtoa@sign^(0+128),f
  7523  084B  01C5               	clrf	(efgtoa@sign+1)^(0+128)
  7524                           
  7525                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 330:       
      +                            g = -g;
  7526  084C  085A               	movf	(efgtoa@g+3)^(0+128),w
  7527  084D  0140               	movlb	0	; select bank0
  7528  084E  00A3               	movwf	___flneg@f1+3
  7529  084F  0141               	movlb	1	; select bank1
  7530  0850  0859               	movf	(efgtoa@g+2)^(0+128),w
  7531  0851  0140               	movlb	0	; select bank0
  7532  0852  00A2               	movwf	___flneg@f1+2
  7533  0853  0141               	movlb	1	; select bank1
  7534  0854  0858               	movf	(efgtoa@g+1)^(0+128),w
  7535  0855  0140               	movlb	0	; select bank0
  7536  0856  00A1               	movwf	___flneg@f1+1
  7537  0857  0141               	movlb	1	; select bank1
  7538  0858  0857               	movf	efgtoa@g^(0+128),w
  7539  0859  0140               	movlb	0	; select bank0
  7540  085A  00A0               	movwf	___flneg@f1
  7541  085B  255E  3188         	fcall	___flneg
  7542  085D  0823               	movf	?___flneg+3,w
  7543  085E  0141               	movlb	1	; select bank1
  7544  085F  00DA               	movwf	(efgtoa@g+3)^(0+128)
  7545  0860  0140               	movlb	0	; select bank0
  7546  0861  0822               	movf	?___flneg+2,w
  7547  0862  0141               	movlb	1	; select bank1
  7548  0863  00D9               	movwf	(efgtoa@g+2)^(0+128)
  7549  0864  0140               	movlb	0	; select bank0
  7550  0865  0821               	movf	?___flneg+1,w
  7551  0866  0141               	movlb	1	; select bank1
  7552  0867  00D8               	movwf	(efgtoa@g+1)^(0+128)
  7553  0868  0140               	movlb	0	; select bank0
  7554  0869  0820               	movf	?___flneg,w
  7555  086A  0141               	movlb	1	; select bank1
  7556  086B  00D7               	movwf	efgtoa@g^(0+128)
  7557  086C                     l4454:	
  7558                           
  7559                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 334:     n 
      +                          = 0;
  7560  086C  0141               	movlb	1	; select bank1
  7561  086D  01DD               	clrf	efgtoa@n^(0+128)
  7562  086E  01DE               	clrf	(efgtoa@n+1)^(0+128)
  7563                           
  7564                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 335:     w 
      +                          = width;
  7565  086F  0142               	movlb	2	; select bank2
  7566  0870  085D               	movf	(_width+1)^(0+256),w
  7567  0871  0141               	movlb	1	; select bank1
  7568  0872  00CB               	movwf	(efgtoa@w+1)^(0+128)
  7569  0873  0142               	movlb	2	; select bank2
  7570  0874  085C               	movf	_width^(0+256),w
  7571  0875  0141               	movlb	1	; select bank1
  7572  0876  00CA               	movwf	efgtoa@w^(0+128)
  7573                           
  7574                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 336:     if
      +                           (sign || (flags & (1 << 2))) {
  7575  0877  0844               	movf	efgtoa@sign^(0+128),w
  7576  0878  0445               	iorwf	(efgtoa@sign+1)^(0+128),w
  7577  0879  1D03               	btfss	3,2
  7578  087A  287E               	goto	l4462
  7579  087B  0142               	movlb	2	; select bank2
  7580  087C  1D60               	btfss	_flags^(0+256),2
  7581  087D  2892               	goto	l4474
  7582  087E                     l4462:	
  7583                           
  7584                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 337:       
      +                            dbuf[n] = sign ? '-' : '+';
  7585  087E  0141               	movlb	1	; select bank1
  7586  087F  0844               	movf	efgtoa@sign^(0+128),w
  7587  0880  0445               	iorwf	(efgtoa@sign+1)^(0+128),w
  7588  0881  1D03               	btfss	3,2
  7589  0882  2885               	goto	l4466
  7590  0883  302B               	movlw	43
  7591  0884  2886               	goto	L4
  7592  0885                     l4466:	
  7593  0885  302D               	movlw	45
  7594  0886                     L4:	
  7595  0886  00AE               	movwf	_efgtoa$1132^(0+128)
  7596  0887  01AF               	clrf	(_efgtoa$1132+1)^(0+128)
  7597  0888  0145               	movlb	5	; select bank5
  7598  0889  00A0               	movwf	_dbuf^(0+640)
  7599                           
  7600                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 338:       
      +                            ++n;
  7601  088A  0141               	movlb	1	; select bank1
  7602  088B  0ADD               	incf	efgtoa@n^(0+128),f
  7603  088C  1903               	skipnz
  7604  088D  0ADE               	incf	(efgtoa@n+1)^(0+128),f
  7605                           
  7606                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 339:       
      +                            --w;
  7607  088E  30FF               	movlw	-1
  7608  088F  07CA               	addwf	efgtoa@w^(0+128),f
  7609  0890  1C03               	skipc
  7610  0891  03CB               	decf	(efgtoa@w+1)^(0+128),f
  7611  0892                     l4474:	
  7612                           
  7613                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 344:       
      +                            if ((0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26)) {
  7614  0892  265D  3188         	fcall	PL48	;call to abstracted procedure
  7615  0894  2759  3188         	fcall	___fpclassifyf
  7616  0896  0320               	decf	?___fpclassifyf,w
  7617  0897  0421               	iorwf	?___fpclassifyf+1,w
  7618  0898  1D03               	btfss	3,2
  7619  0899  28B8               	goto	l4492
  7620  089A  25A2  3188         	fcall	PL14	;call to abstracted procedure
  7621  089C  00B0               	movwf	_efgtoa$1133^(0+128)
  7622  089D  01B1               	clrf	(_efgtoa$1133+1)^(0+128)
  7623  089E  0431               	iorwf	(_efgtoa$1133+1)^(0+128),w
  7624  089F  1903               	btfsc	3,2
  7625  08A0  28A6               	goto	l4484
  7626                           
  7627                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 345:       
      +                                strcpy(&dbuf[n], "INF");
  7628  08A1  3037               	movlw	low (STR_14| (0+32768))
  7629  08A2  0140               	movlb	0	; select bank0
  7630  08A3  00A0               	movwf	strcpy@src
  7631  08A4  30A1               	movlw	high (STR_14| (0+32768))
  7632  08A5  28AA               	goto	L5
  7633  08A6                     l4484:	
  7634                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 346:       
      +                            } else {
  7635                           
  7636                           
  7637                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 347:       
      +                                strcpy(&dbuf[n], "inf");
  7638  08A6  303F               	movlw	low (STR_15| (0+32768))
  7639  08A7  0140               	movlb	0	; select bank0
  7640  08A8  00A0               	movwf	strcpy@src
  7641  08A9  30A1               	movlw	high (STR_15| (0+32768))
  7642  08AA                     L5:	
  7643  08AA  26C6  3188         	fcall	PL158	;call to abstracted procedure
  7644  08AC  2524  3188         	fcall	_strcpy
  7645                           
  7646                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 349:       
      +                            w -= ((sizeof("inf")/sizeof("inf"[0]))-1);
  7647  08AE  30FD               	movlw	-3
  7648  08AF  0141               	movlb	1	; select bank1
  7649  08B0  07CA               	addwf	efgtoa@w^(0+128),f
  7650  08B1  1C03               	skipc
  7651  08B2  03CB               	decf	(efgtoa@w+1)^(0+128),f
  7652                           
  7653                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 350:       
      +                            return pad(fp, &dbuf[0], w);
  7654  08B3  264F               	fcall	PL36	;call to abstracted procedure
  7655  08B4  3191  2139  3188   	fcall	_pad
  7656  08B7  2EA9               	ljmp	PL116	;call to abstracted procedure
  7657  08B8                     l4492:	
  7658                           
  7659                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 353:       
      +                            if ((0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26)) {
  7660  08B8  265D  3188         	fcall	PL48	;call to abstracted procedure
  7661  08BA  2759  3188         	fcall	___fpclassifyf
  7662  08BC  0820               	movf	?___fpclassifyf,w
  7663  08BD  0421               	iorwf	?___fpclassifyf+1,w
  7664  08BE  1D03               	btfss	3,2
  7665  08BF  28DE               	goto	l4510
  7666  08C0  25A2  3188         	fcall	PL14	;call to abstracted procedure
  7667  08C2  00B2               	movwf	_efgtoa$1137^(0+128)
  7668  08C3  01B3               	clrf	(_efgtoa$1137+1)^(0+128)
  7669  08C4  0433               	iorwf	(_efgtoa$1137+1)^(0+128),w
  7670  08C5  1903               	btfsc	3,2
  7671  08C6  28CC               	goto	l4502
  7672                           
  7673                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 354:       
      +                                strcpy(&dbuf[n], "NAN");
  7674  08C7  303B               	movlw	low (STR_18| (0+32768))
  7675  08C8  0140               	movlb	0	; select bank0
  7676  08C9  00A0               	movwf	strcpy@src
  7677  08CA  30A1               	movlw	high (STR_18| (0+32768))
  7678  08CB  28D0               	goto	L6
  7679  08CC                     l4502:	
  7680                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 355:       
      +                            } else {
  7681                           
  7682                           
  7683                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 356:       
      +                                strcpy(&dbuf[n], "nan");
  7684  08CC  3043               	movlw	low (STR_19| (0+32768))
  7685  08CD  0140               	movlb	0	; select bank0
  7686  08CE  00A0               	movwf	strcpy@src
  7687  08CF  30A1               	movlw	high (STR_19| (0+32768))
  7688  08D0                     L6:	
  7689  08D0  26C6  3188         	fcall	PL158	;call to abstracted procedure
  7690  08D2  2524  3188         	fcall	_strcpy
  7691                           
  7692                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 358:       
      +                            w -= ((sizeof("inf")/sizeof("inf"[0]))-1);
  7693  08D4  30FD               	movlw	-3
  7694  08D5  0141               	movlb	1	; select bank1
  7695  08D6  07CA               	addwf	efgtoa@w^(0+128),f
  7696  08D7  1C03               	skipc
  7697  08D8  03CB               	decf	(efgtoa@w+1)^(0+128),f
  7698                           
  7699                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 359:       
      +                            return pad(fp, &dbuf[0], w);
  7700  08D9  264F               	fcall	PL36	;call to abstracted procedure
  7701  08DA  3191  2139  3188   	fcall	_pad
  7702  08DD  2EA9               	ljmp	PL116	;call to abstracted procedure
  7703  08DE                     l4510:	
  7704                           
  7705                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 363:     u 
      +                          = 1.0;
  7706  08DE  303F               	movlw	63
  7707  08DF  0141               	movlb	1	; select bank1
  7708                           
  7709                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 364:     e 
      +                          = 0;
  7710  08E0  2693  3188         	fcall	PL104	;call to abstracted procedure
  7711                           
  7712                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 365:     if
      +                           (!(g == 0.0)) {
  7713  08E2  085A               	movf	(efgtoa@g+3)^(0+128),w
  7714  08E3  0140               	movlb	0	; select bank0
  7715  08E4  00A3               	movwf	___fleq@ff1+3
  7716  08E5  0141               	movlb	1	; select bank1
  7717  08E6  0859               	movf	(efgtoa@g+2)^(0+128),w
  7718  08E7  0140               	movlb	0	; select bank0
  7719  08E8  00A2               	movwf	___fleq@ff1+2
  7720  08E9  0141               	movlb	1	; select bank1
  7721  08EA  0858               	movf	(efgtoa@g+1)^(0+128),w
  7722  08EB  0140               	movlb	0	; select bank0
  7723  08EC  00A1               	movwf	___fleq@ff1+1
  7724  08ED  0141               	movlb	1	; select bank1
  7725  08EE  0857               	movf	efgtoa@g^(0+128),w
  7726  08EF  0140               	movlb	0	; select bank0
  7727  08F0  00A0               	movwf	___fleq@ff1
  7728  08F1  2704  3188         	fcall	PL168	;call to abstracted procedure
  7729  08F3  26D0  3188         	fcall	___fleq
  7730  08F5  1C03               	btfss	3,0
  7731  08F6  2911               	goto	l4522
  7732  08F7  294A               	goto	l4530
  7733  08F8                     l4518:	
  7734                           
  7735                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 367:       
      +                                u = u*10.0;
  7736  08F8  3041               	movlw	65
  7737  08F9  00B1               	movwf	___flmul@b+3
  7738  08FA  3020               	movlw	32
  7739  08FB  258E               	fcall	PL12	;call to abstracted procedure
  7740  08FC  3184  2411  3188   	fcall	___flmul
  7741  08FF  0831               	movf	?___flmul+3,w
  7742  0900  0141               	movlb	1	; select bank1
  7743  0901  00E2               	movwf	(efgtoa@u+3)^(0+128)
  7744  0902  0140               	movlb	0	; select bank0
  7745  0903  0830               	movf	?___flmul+2,w
  7746  0904  0141               	movlb	1	; select bank1
  7747  0905  00E1               	movwf	(efgtoa@u+2)^(0+128)
  7748  0906  0140               	movlb	0	; select bank0
  7749  0907  082F               	movf	?___flmul+1,w
  7750  0908  0141               	movlb	1	; select bank1
  7751  0909  00E0               	movwf	(efgtoa@u+1)^(0+128)
  7752  090A  0140               	movlb	0	; select bank0
  7753  090B  082E               	movf	?___flmul,w
  7754  090C  0141               	movlb	1	; select bank1
  7755  090D  00DF               	movwf	efgtoa@u^(0+128)
  7756                           
  7757                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 368:       
      +                                ++e;
  7758  090E  0ADB               	incf	efgtoa@e^(0+128),f
  7759  090F  1903               	skipnz
  7760  0910  0ADC               	incf	(efgtoa@e+1)^(0+128),f
  7761  0911                     l4522:	
  7762                           
  7763                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 366:       
      +                            while (!(g < (u*10.0))) {
  7764  0911  0141               	movlb	1	; select bank1
  7765  0912  2626  3188         	fcall	PL32	;call to abstracted procedure
  7766  0914  3041               	movlw	65
  7767  0915  00B1               	movwf	___flmul@b+3
  7768  0916  3020               	movlw	32
  7769  0917  258E               	fcall	PL12	;call to abstracted procedure
  7770  0918  3184  2411  3188   	fcall	___flmul
  7771  091B  0831               	movf	?___flmul+3,w
  7772  091C  00CE               	movwf	___flge@ff2+3
  7773  091D  0830               	movf	?___flmul+2,w
  7774  091E  00CD               	movwf	___flge@ff2+2
  7775  091F  082F               	movf	?___flmul+1,w
  7776  0920  00CC               	movwf	___flge@ff2+1
  7777  0921  082E               	movf	?___flmul,w
  7778  0922  00CB               	movwf	___flge@ff2
  7779  0923  24CA  3188         	fcall	___flge
  7780  0925  1C03               	btfss	3,0
  7781  0926  2933               	goto	l4528
  7782  0927  28F8               	goto	l4518
  7783  0928                     l4524:	
  7784                           
  7785                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 371:       
      +                                u = u/10.0;
  7786  0928  3041               	movlw	65
  7787  0929  2567  3188         	fcall	PL6	;call to abstracted procedure
  7788  092B  23CC  3188         	fcall	___fldiv
  7789  092D  2616  3188         	fcall	PL30	;call to abstracted procedure
  7790                           
  7791                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 372:       
      +                                --e;
  7792  092F  30FF               	movlw	-1
  7793  0930  07DB               	addwf	efgtoa@e^(0+128),f
  7794  0931  1C03               	skipc
  7795  0932  03DC               	decf	(efgtoa@e+1)^(0+128),f
  7796  0933                     l4528:	
  7797                           
  7798                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 370:       
      +                            while (g < u) {
  7799  0933  0141               	movlb	1	; select bank1
  7800  0934  2626  3188         	fcall	PL32	;call to abstracted procedure
  7801  0936  0141               	movlb	1	; select bank1
  7802  0937  0862               	movf	(efgtoa@u+3)^(0+128),w
  7803  0938  0140               	movlb	0	; select bank0
  7804  0939  00CE               	movwf	___flge@ff2+3
  7805  093A  0141               	movlb	1	; select bank1
  7806  093B  0861               	movf	(efgtoa@u+2)^(0+128),w
  7807  093C  0140               	movlb	0	; select bank0
  7808  093D  00CD               	movwf	___flge@ff2+2
  7809  093E  0141               	movlb	1	; select bank1
  7810  093F  0860               	movf	(efgtoa@u+1)^(0+128),w
  7811  0940  0140               	movlb	0	; select bank0
  7812  0941  00CC               	movwf	___flge@ff2+1
  7813  0942  0141               	movlb	1	; select bank1
  7814  0943  085F               	movf	efgtoa@u^(0+128),w
  7815  0944  0140               	movlb	0	; select bank0
  7816  0945  00CB               	movwf	___flge@ff2
  7817  0946  24CA  3188         	fcall	___flge
  7818  0948  1C03               	btfss	3,0
  7819  0949  2928               	goto	l4524
  7820  094A                     l4530:	
  7821                           
  7822                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 377:     mo
      +                          de = tolower((int)c);
  7823  094A  086C               	movf	efgtoa@c,w
  7824  094B  00A4               	movwf	tolower@c
  7825  094C  01A5               	clrf	tolower@c+1
  7826  094D  3195  253A  3188   	fcall	_tolower
  7827  0950  0824               	movf	?_tolower,w
  7828  0951  0141               	movlb	1	; select bank1
  7829  0952  00CC               	movwf	efgtoa@mode^(0+128)
  7830                           
  7831                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 378:     nm
      +                          ode = mode;
  7832  0953  00C9               	movwf	efgtoa@nmode^(0+128)
  7833                           
  7834                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 379:     if
      +                           (mode == 'g') {
  7835  0954  3067               	movlw	103
  7836  0955  064C               	xorwf	efgtoa@mode^(0+128),w
  7837  0956  1D03               	btfss	3,2
  7838  0957  296F               	goto	l575
  7839                           
  7840                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 380:   if (
      +                          prec == 0) {
  7841  0958  0142               	movlb	2	; select bank2
  7842  0959  085E               	movf	_prec^(0+256),w
  7843  095A  045F               	iorwf	(_prec+1)^(0+256),w
  7844  095B  1D03               	btfss	3,2
  7845  095C  2960               	goto	l4540
  7846                           
  7847                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 381:    pre
      +                          c = 1;
  7848  095D  01DE               	clrf	_prec^(0+256)
  7849  095E  0ADE               	incf	_prec^(0+256),f
  7850  095F  01DF               	clrf	(_prec+1)^(0+256)
  7851  0960                     l4540:	
  7852                           
  7853                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 383:       
      +                            p = (0 < prec) ? prec : 6;
  7854  0960  085F               	movf	(_prec+1)^(0+256),w
  7855  0961  26A3  3188         	fcall	PL112	;call to abstracted procedure
  7856  0963  1D03               	skipz
  7857  0964  2968               	goto	u5465
  7858  0965  3001               	movlw	1
  7859  0966  0142               	movlb	2	; select bank2
  7860  0967  025E               	subwf	_prec^(0+256),w
  7861  0968                     u5465:	
  7862  0968  1803               	skipnc
  7863  0969  2972               	goto	l4544
  7864  096A                     l4542:	
  7865  096A  3006               	movlw	6
  7866  096B  0141               	movlb	1	; select bank1
  7867  096C  00C7               	movwf	efgtoa@p^(0+128)
  7868  096D  01C8               	clrf	(efgtoa@p+1)^(0+128)
  7869  096E  297A               	goto	l4550
  7870  096F                     l575:	
  7871                           
  7872                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 385:       
      +                            p = (prec < 0) ? 6 : prec;
  7873  096F  0142               	movlb	2	; select bank2
  7874  0970  1BDF               	btfsc	(_prec+1)^(0+256),7
  7875  0971  296A               	goto	l4542
  7876  0972                     l4544:	
  7877  0972  0142               	movlb	2	; select bank2
  7878  0973  085F               	movf	(_prec+1)^(0+256),w
  7879  0974  0141               	movlb	1	; select bank1
  7880  0975  00C8               	movwf	(efgtoa@p+1)^(0+128)
  7881  0976  0142               	movlb	2	; select bank2
  7882  0977  085E               	movf	_prec^(0+256),w
  7883  0978  0141               	movlb	1	; select bank1
  7884  0979  00C7               	movwf	efgtoa@p^(0+128)
  7885  097A                     l4550:	
  7886                           
  7887                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 389:     if
      +                           (mode == 'g') {
  7888  097A  3067               	movlw	103
  7889  097B  064C               	xorwf	efgtoa@mode^(0+128),w
  7890  097C  1D03               	btfss	3,2
  7891  097D  29A9               	goto	l586
  7892                           
  7893                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 390:       
      +                            if (!(e < -4) && !((p - 1) < e)) {
  7894  097E  085C               	movf	(efgtoa@e+1)^(0+128),w
  7895  097F  3A80               	xorlw	128
  7896  0980  0140               	movlb	0	; select bank0
  7897  0981  00ED               	movwf	??_efgtoa
  7898  0982  307F               	movlw	127
  7899  0983  026D               	subwf	??_efgtoa,w
  7900  0984  1D03               	skipz
  7901  0985  2989               	goto	u5495
  7902  0986  30FC               	movlw	252
  7903  0987  0141               	movlb	1	; select bank1
  7904  0988  025B               	subwf	efgtoa@e^(0+128),w
  7905  0989                     u5495:	
  7906  0989  1C03               	skipc
  7907  098A  29A6               	goto	l4558
  7908  098B  0141               	movlb	1	; select bank1
  7909  098C  0847               	movf	efgtoa@p^(0+128),w
  7910  098D  3EFF               	addlw	255
  7911  098E  0140               	movlb	0	; select bank0
  7912  098F  00ED               	movwf	??_efgtoa
  7913  0990  30FF               	movlw	255
  7914  0991  0141               	movlb	1	; select bank1
  7915  0992  3D48               	addwfc	(efgtoa@p+1)^(0+128),w
  7916  0993  0140               	movlb	0	; select bank0
  7917  0994  00EE               	movwf	??_efgtoa+1
  7918  0995  3A80               	xorlw	128
  7919  0996  00EF               	movwf	??_efgtoa+2
  7920  0997  0141               	movlb	1	; select bank1
  7921  0998  085C               	movf	(efgtoa@e+1)^(0+128),w
  7922  0999  3A80               	xorlw	128
  7923  099A  0140               	movlb	0	; select bank0
  7924  099B  026F               	subwf	??_efgtoa+2,w
  7925  099C  1D03               	skipz
  7926  099D  29A2               	goto	u5505
  7927  099E  0141               	movlb	1	; select bank1
  7928  099F  085B               	movf	efgtoa@e^(0+128),w
  7929  09A0  0140               	movlb	0	; select bank0
  7930  09A1  026D               	subwf	??_efgtoa,w
  7931  09A2                     u5505:	
  7932  09A2  1C03               	skipc
  7933  09A3  29A6               	goto	l4558
  7934                           
  7935                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 391:       
      +                                nmode = 'f';
  7936  09A4  3066               	movlw	102
  7937  09A5  29A7               	goto	L7
  7938  09A6                     l4558:	
  7939                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 392:       
      +                            } else {
  7940                           
  7941                           
  7942                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 393:       
      +                                nmode = 'e';
  7943  09A6  3065               	movlw	101
  7944  09A7                     L7:	
  7945  09A7  0141               	movlb	1	; select bank1
  7946  09A8  00C9               	movwf	efgtoa@nmode^(0+128)
  7947  09A9                     l586:	
  7948                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 395:     }
  7949                           
  7950                           
  7951                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 398:     m 
      +                          = p;
  7952  09A9  0848               	movf	(efgtoa@p+1)^(0+128),w
  7953  09AA  00BF               	movwf	(efgtoa@m+1)^(0+128)
  7954  09AB  0847               	movf	efgtoa@p^(0+128),w
  7955  09AC  00BE               	movwf	efgtoa@m^(0+128)
  7956                           
  7957                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 399:     if
      +                           (!(mode == 'g') || ((nmode == 'f') && (e < 0))) {
  7958  09AD  3067               	movlw	103
  7959  09AE  064C               	xorwf	efgtoa@mode^(0+128),w
  7960  09AF  1D03               	btfss	3,2
  7961  09B0  29B6               	goto	l4566
  7962  09B1  3066               	movlw	102
  7963  09B2  0649               	xorwf	efgtoa@nmode^(0+128),w
  7964  09B3  1903               	btfsc	3,2
  7965  09B4  1FDC               	btfss	(efgtoa@e+1)^(0+128),7
  7966  09B5  29B9               	goto	l4568
  7967  09B6                     l4566:	
  7968                           
  7969                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 400:       
      +                            ++m;
  7970  09B6  0ABE               	incf	efgtoa@m^(0+128),f
  7971  09B7  1903               	skipnz
  7972  09B8  0ABF               	incf	(efgtoa@m+1)^(0+128),f
  7973  09B9                     l4568:	
  7974                           
  7975                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 404:     if
      +                           (nmode == 'f') {
  7976  09B9  3066               	movlw	102
  7977  09BA  0649               	xorwf	efgtoa@nmode^(0+128),w
  7978  09BB  1D03               	btfss	3,2
  7979  09BC  29CA               	goto	l4580
  7980                           
  7981                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 405:       
      +                            if (e < 0) {
  7982  09BD  1FDC               	btfss	(efgtoa@e+1)^(0+128),7
  7983  09BE  29C2               	goto	l4576
  7984                           
  7985                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 406:       
      +                                u = 1.0;
  7986  09BF  303F               	movlw	63
  7987                           
  7988                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 407:       
      +                                e = 0;
  7989  09C0  2693  3188         	fcall	PL104	;call to abstracted procedure
  7990  09C2                     l4576:	
  7991                           
  7992                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 409:       
      +                            if (!(mode == 'g')) {
  7993  09C2  3067               	movlw	103
  7994  09C3  064C               	xorwf	efgtoa@mode^(0+128),w
  7995  09C4  1903               	btfsc	3,2
  7996  09C5  29CA               	goto	l4580
  7997                           
  7998                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 410:       
      +                                m += e;
  7999  09C6  085B               	movf	efgtoa@e^(0+128),w
  8000  09C7  07BE               	addwf	efgtoa@m^(0+128),f
  8001  09C8  085C               	movf	(efgtoa@e+1)^(0+128),w
  8002  09C9  3DBF               	addwfc	(efgtoa@m+1)^(0+128),f
  8003  09CA                     l4580:	
  8004                           
  8005                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 415:     i 
      +                          = 0;
  8006  09CA  01D5               	clrf	efgtoa@i^(0+128)
  8007  09CB  01D6               	clrf	(efgtoa@i+1)^(0+128)
  8008                           
  8009                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 416:     h 
      +                          = g;
  8010  09CC  085A               	movf	(efgtoa@g+3)^(0+128),w
  8011  09CD  00D0               	movwf	(efgtoa@h+3)^(0+128)
  8012  09CE  0859               	movf	(efgtoa@g+2)^(0+128),w
  8013  09CF  00CF               	movwf	(efgtoa@h+2)^(0+128)
  8014  09D0  0858               	movf	(efgtoa@g+1)^(0+128),w
  8015  09D1  00CE               	movwf	(efgtoa@h+1)^(0+128)
  8016  09D2  0857               	movf	efgtoa@g^(0+128),w
  8017  09D3  00CD               	movwf	efgtoa@h^(0+128)
  8018                           
  8019                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 417:     ou
      +                           = u;
  8020  09D4  0862               	movf	(efgtoa@u+3)^(0+128),w
  8021  09D5  00AD               	movwf	(efgtoa@ou+3)^(0+128)
  8022  09D6  0861               	movf	(efgtoa@u+2)^(0+128),w
  8023  09D7  00AC               	movwf	(efgtoa@ou+2)^(0+128)
  8024  09D8  0860               	movf	(efgtoa@u+1)^(0+128),w
  8025  09D9  00AB               	movwf	(efgtoa@ou+1)^(0+128)
  8026  09DA  085F               	movf	efgtoa@u^(0+128),w
  8027  09DB  00AA               	movwf	efgtoa@ou^(0+128)
  8028  09DC                     l4590:	
  8029                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 418:     wh
      +                          ile (i < m) {
  8030                           
  8031                           
  8032                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 418:     wh
      +                          ile (i < m) {
  8033  09DC  266E  3188         	fcall	PL56	;call to abstracted procedure
  8034  09DE  1803               	btfsc	3,0
  8035  09DF  2A02               	goto	l4592
  8036                           
  8037                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 419:       
      +                            l = floorf(h/u);
  8038  09E0  25B5  3188         	fcall	PL16	;call to abstracted procedure
  8039  09E2  23CC  3188         	fcall	___fldiv
  8040  09E4  268A               	fcall	PL94	;call to abstracted procedure
  8041  09E5  3190  203D  3188   	fcall	_floorf
  8042                           
  8043                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 420:       
      +                            d = (int)l;
  8044  09E8  25F6  3188         	fcall	PL20	;call to abstracted procedure
  8045  09EA  2709  3188         	fcall	___fltol
  8046  09EC  269B  3188         	fcall	PL110	;call to abstracted procedure
  8047                           
  8048                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 421:       
      +                            h -= l*u;
  8049  09EE  25D6               	fcall	PL18	;call to abstracted procedure
  8050  09EF  3184  2411  3188   	fcall	___flmul
  8051  09F2  2636  3188         	fcall	PL34	;call to abstracted procedure
  8052  09F4  2541  3188         	fcall	___flsub
  8053                           
  8054                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 422:       
      +                            u = u/10.0;
  8055  09F6  257D  3188         	fcall	PL8	;call to abstracted procedure
  8056  09F8  2567  3188         	fcall	PL6	;call to abstracted procedure
  8057  09FA  23CC  3188         	fcall	___fldiv
  8058  09FC  2616  3188         	fcall	PL30	;call to abstracted procedure
  8059                           
  8060                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 423:       
      +                            ++i;
  8061  09FE  0AD5               	incf	efgtoa@i^(0+128),f
  8062  09FF  1903               	skipnz
  8063  0A00  0AD6               	incf	(efgtoa@i+1)^(0+128),f
  8064  0A01  29DC               	goto	l4590
  8065  0A02                     l4592:	
  8066                           
  8067                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 427:     l 
      +                          = u*5.0;
  8068  0A02  3040               	movlw	64
  8069  0A03  0140               	movlb	0	; select bank0
  8070  0A04  00B1               	movwf	___flmul@b+3
  8071  0A05  30A0               	movlw	160
  8072  0A06  258E               	fcall	PL12	;call to abstracted procedure
  8073  0A07  3184  2411  3188   	fcall	___flmul
  8074  0A0A  0831               	movf	?___flmul+3,w
  8075  0A0B  0141               	movlb	1	; select bank1
  8076  0A0C  00D4               	movwf	(efgtoa@l+3)^(0+128)
  8077  0A0D  0140               	movlb	0	; select bank0
  8078  0A0E  0830               	movf	?___flmul+2,w
  8079  0A0F  0141               	movlb	1	; select bank1
  8080  0A10  00D3               	movwf	(efgtoa@l+2)^(0+128)
  8081  0A11  0140               	movlb	0	; select bank0
  8082  0A12  082F               	movf	?___flmul+1,w
  8083  0A13  0141               	movlb	1	; select bank1
  8084  0A14  00D2               	movwf	(efgtoa@l+1)^(0+128)
  8085  0A15  0140               	movlb	0	; select bank0
  8086  0A16  082E               	movf	?___flmul,w
  8087  0A17  0141               	movlb	1	; select bank1
  8088  0A18  00D1               	movwf	efgtoa@l^(0+128)
  8089                           
  8090                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 428:     if
      +                           (h < l) {
  8091  0A19  0850               	movf	(efgtoa@h+3)^(0+128),w
  8092  0A1A  0140               	movlb	0	; select bank0
  8093  0A1B  00CA               	movwf	___flge@ff1+3
  8094  0A1C  0141               	movlb	1	; select bank1
  8095  0A1D  084F               	movf	(efgtoa@h+2)^(0+128),w
  8096  0A1E  0140               	movlb	0	; select bank0
  8097  0A1F  00C9               	movwf	___flge@ff1+2
  8098  0A20  0141               	movlb	1	; select bank1
  8099  0A21  084E               	movf	(efgtoa@h+1)^(0+128),w
  8100  0A22  0140               	movlb	0	; select bank0
  8101  0A23  00C8               	movwf	___flge@ff1+1
  8102  0A24  0141               	movlb	1	; select bank1
  8103  0A25  084D               	movf	efgtoa@h^(0+128),w
  8104  0A26  0140               	movlb	0	; select bank0
  8105  0A27  00C7               	movwf	___flge@ff1
  8106  0A28  0141               	movlb	1	; select bank1
  8107  0A29  0854               	movf	(efgtoa@l+3)^(0+128),w
  8108  0A2A  0140               	movlb	0	; select bank0
  8109  0A2B  00CE               	movwf	___flge@ff2+3
  8110  0A2C  0141               	movlb	1	; select bank1
  8111  0A2D  0853               	movf	(efgtoa@l+2)^(0+128),w
  8112  0A2E  0140               	movlb	0	; select bank0
  8113  0A2F  00CD               	movwf	___flge@ff2+2
  8114  0A30  0141               	movlb	1	; select bank1
  8115  0A31  0852               	movf	(efgtoa@l+1)^(0+128),w
  8116  0A32  0140               	movlb	0	; select bank0
  8117  0A33  00CC               	movwf	___flge@ff2+1
  8118  0A34  0141               	movlb	1	; select bank1
  8119  0A35  0851               	movf	efgtoa@l^(0+128),w
  8120  0A36  0140               	movlb	0	; select bank0
  8121  0A37  00CB               	movwf	___flge@ff2
  8122  0A38  24CA  3188         	fcall	___flge
  8123  0A3A  1803               	btfsc	3,0
  8124  0A3B  2A3E               	goto	l4596
  8125                           
  8126                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 429:       
      +                            l = 0.0;
  8127  0A3C  0141               	movlb	1	; select bank1
  8128  0A3D  2A65               	goto	l4600
  8129  0A3E                     l4596:	
  8130                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 430:     } 
      +                          else {
  8131                           
  8132                           
  8133                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 432:       
      +                            if ((h == l) && !(d % 2)) {
  8134  0A3E  0141               	movlb	1	; select bank1
  8135  0A3F  0850               	movf	(efgtoa@h+3)^(0+128),w
  8136  0A40  0140               	movlb	0	; select bank0
  8137  0A41  00A3               	movwf	___fleq@ff1+3
  8138  0A42  0141               	movlb	1	; select bank1
  8139  0A43  084F               	movf	(efgtoa@h+2)^(0+128),w
  8140  0A44  0140               	movlb	0	; select bank0
  8141  0A45  00A2               	movwf	___fleq@ff1+2
  8142  0A46  0141               	movlb	1	; select bank1
  8143  0A47  084E               	movf	(efgtoa@h+1)^(0+128),w
  8144  0A48  0140               	movlb	0	; select bank0
  8145  0A49  00A1               	movwf	___fleq@ff1+1
  8146  0A4A  0141               	movlb	1	; select bank1
  8147  0A4B  084D               	movf	efgtoa@h^(0+128),w
  8148  0A4C  0140               	movlb	0	; select bank0
  8149  0A4D  00A0               	movwf	___fleq@ff1
  8150  0A4E  0141               	movlb	1	; select bank1
  8151  0A4F  0854               	movf	(efgtoa@l+3)^(0+128),w
  8152  0A50  0140               	movlb	0	; select bank0
  8153  0A51  00A7               	movwf	___fleq@ff2+3
  8154  0A52  0141               	movlb	1	; select bank1
  8155  0A53  0853               	movf	(efgtoa@l+2)^(0+128),w
  8156  0A54  0140               	movlb	0	; select bank0
  8157  0A55  00A6               	movwf	___fleq@ff2+2
  8158  0A56  0141               	movlb	1	; select bank1
  8159  0A57  0852               	movf	(efgtoa@l+1)^(0+128),w
  8160  0A58  0140               	movlb	0	; select bank0
  8161  0A59  00A5               	movwf	___fleq@ff2+1
  8162  0A5A  0141               	movlb	1	; select bank1
  8163  0A5B  0851               	movf	efgtoa@l^(0+128),w
  8164  0A5C  0140               	movlb	0	; select bank0
  8165  0A5D  00A4               	movwf	___fleq@ff2
  8166  0A5E  26D0  3188         	fcall	___fleq
  8167  0A60  1C03               	btfss	3,0
  8168  0A61  2A69               	goto	l4602
  8169  0A62  0141               	movlb	1	; select bank1
  8170  0A63  1842               	btfsc	efgtoa@d^(0+128),0
  8171  0A64  2A69               	goto	l4602
  8172  0A65                     l4600:	
  8173                           
  8174                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 433:       
      +                                l = 0.0;
  8175  0A65  01D1               	clrf	efgtoa@l^(0+128)
  8176  0A66  01D2               	clrf	(efgtoa@l+1)^(0+128)
  8177  0A67  01D3               	clrf	(efgtoa@l+2)^(0+128)
  8178  0A68  01D4               	clrf	(efgtoa@l+3)^(0+128)
  8179  0A69                     l4602:	
  8180                           
  8181                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 438:     h 
      +                          = g + l;
  8182  0A69  0141               	movlb	1	; select bank1
  8183  0A6A  0854               	movf	(efgtoa@l+3)^(0+128),w
  8184  0A6B  0140               	movlb	0	; select bank0
  8185  0A6C  00CA               	movwf	___fladd@b+3
  8186  0A6D  0141               	movlb	1	; select bank1
  8187  0A6E  0853               	movf	(efgtoa@l+2)^(0+128),w
  8188  0A6F  0140               	movlb	0	; select bank0
  8189  0A70  00C9               	movwf	___fladd@b+2
  8190  0A71  0141               	movlb	1	; select bank1
  8191  0A72  0852               	movf	(efgtoa@l+1)^(0+128),w
  8192  0A73  0140               	movlb	0	; select bank0
  8193  0A74  00C8               	movwf	___fladd@b+1
  8194  0A75  0141               	movlb	1	; select bank1
  8195  0A76  0851               	movf	efgtoa@l^(0+128),w
  8196  0A77  0140               	movlb	0	; select bank0
  8197  0A78  00C7               	movwf	___fladd@b
  8198  0A79  0141               	movlb	1	; select bank1
  8199  0A7A  085A               	movf	(efgtoa@g+3)^(0+128),w
  8200  0A7B  0140               	movlb	0	; select bank0
  8201  0A7C  00CE               	movwf	___fladd@a+3
  8202  0A7D  0141               	movlb	1	; select bank1
  8203  0A7E  0859               	movf	(efgtoa@g+2)^(0+128),w
  8204  0A7F  0140               	movlb	0	; select bank0
  8205  0A80  00CD               	movwf	___fladd@a+2
  8206  0A81  0141               	movlb	1	; select bank1
  8207  0A82  0858               	movf	(efgtoa@g+1)^(0+128),w
  8208  0A83  0140               	movlb	0	; select bank0
  8209  0A84  00CC               	movwf	___fladd@a+1
  8210  0A85  0141               	movlb	1	; select bank1
  8211  0A86  0857               	movf	efgtoa@g^(0+128),w
  8212  0A87  0140               	movlb	0	; select bank0
  8213  0A88  00CB               	movwf	___fladd@a
  8214  0A89  319C  24E1  3188   	fcall	___fladd
  8215  0A8C  084A               	movf	?___fladd+3,w
  8216  0A8D  0141               	movlb	1	; select bank1
  8217  0A8E  00D0               	movwf	(efgtoa@h+3)^(0+128)
  8218  0A8F  0140               	movlb	0	; select bank0
  8219  0A90  0849               	movf	?___fladd+2,w
  8220  0A91  0141               	movlb	1	; select bank1
  8221  0A92  00CF               	movwf	(efgtoa@h+2)^(0+128)
  8222  0A93  0140               	movlb	0	; select bank0
  8223  0A94  0848               	movf	?___fladd+1,w
  8224  0A95  0141               	movlb	1	; select bank1
  8225  0A96  00CE               	movwf	(efgtoa@h+1)^(0+128)
  8226  0A97  0140               	movlb	0	; select bank0
  8227  0A98  0847               	movf	?___fladd,w
  8228  0A99  0141               	movlb	1	; select bank1
  8229  0A9A  00CD               	movwf	efgtoa@h^(0+128)
  8230                           
  8231                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 441:     u 
      +                          = ou;
  8232  0A9B  082D               	movf	(efgtoa@ou+3)^(0+128),w
  8233  0A9C  00E2               	movwf	(efgtoa@u+3)^(0+128)
  8234  0A9D  082C               	movf	(efgtoa@ou+2)^(0+128),w
  8235  0A9E  00E1               	movwf	(efgtoa@u+2)^(0+128)
  8236  0A9F  082B               	movf	(efgtoa@ou+1)^(0+128),w
  8237  0AA0  00E0               	movwf	(efgtoa@u+1)^(0+128)
  8238  0AA1  082A               	movf	efgtoa@ou^(0+128),w
  8239  0AA2  00DF               	movwf	efgtoa@u^(0+128)
  8240                           
  8241                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 442:     ne
      +                           = (nmode == 'e') ? 0 : e;
  8242  0AA3  3065               	movlw	101
  8243  0AA4  0649               	xorwf	efgtoa@nmode^(0+128),w
  8244  0AA5  1903               	btfsc	3,2
  8245  0AA6  2AAC               	goto	l4610
  8246  0AA7  085C               	movf	(efgtoa@e+1)^(0+128),w
  8247  0AA8  00C1               	movwf	(efgtoa@ne+1)^(0+128)
  8248  0AA9  085B               	movf	efgtoa@e^(0+128),w
  8249  0AAA  00C0               	movwf	efgtoa@ne^(0+128)
  8250  0AAB  2AAE               	goto	l604
  8251  0AAC                     l4610:	
  8252  0AAC  01C0               	clrf	efgtoa@ne^(0+128)
  8253  0AAD  01C1               	clrf	(efgtoa@ne+1)^(0+128)
  8254  0AAE                     l604:	
  8255                           
  8256                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 443:     pp
      +                           = 0;
  8257  0AAE  01BC               	clrf	efgtoa@pp^(0+128)
  8258  0AAF  01BD               	clrf	(efgtoa@pp+1)^(0+128)
  8259                           
  8260                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 444:     t 
      +                          = 0;
  8261  0AB0  01BA               	clrf	efgtoa@t^(0+128)
  8262  0AB1  01BB               	clrf	(efgtoa@t+1)^(0+128)
  8263                           
  8264                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 445:     i 
      +                          = 0;
  8265  0AB2  01D5               	clrf	efgtoa@i^(0+128)
  8266  0AB3  01D6               	clrf	(efgtoa@i+1)^(0+128)
  8267                           
  8268                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 446:     wh
      +                          ile ((i < m) && (n < (80 - 5))) {
  8269  0AB4  2B12               	goto	l4660
  8270  0AB5                     l4612:	
  8271                           
  8272                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 447:       
      +                            l = floorf(h/u);
  8273  0AB5  25B5  3188         	fcall	PL16	;call to abstracted procedure
  8274  0AB7  23CC  3188         	fcall	___fldiv
  8275  0AB9  268A               	fcall	PL94	;call to abstracted procedure
  8276  0ABA  3190  203D  3188   	fcall	_floorf
  8277                           
  8278                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 448:       
      +                            d = (int)l;
  8279  0ABD  25F6  3188         	fcall	PL20	;call to abstracted procedure
  8280  0ABF  2709  3188         	fcall	___fltol
  8281  0AC1  269B  3188         	fcall	PL110	;call to abstracted procedure
  8282                           
  8283                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 449:       
      +                            if (!(flags & (1 << 4)) && !d && (mode == 'g') && (ne < 0)) {
  8284  0AC3  0142               	movlb	2	; select bank2
  8285  0AC4  1A60               	btfsc	_flags^(0+256),4
  8286  0AC5  2AD4               	goto	l4624
  8287  0AC6  0141               	movlb	1	; select bank1
  8288  0AC7  0842               	movf	efgtoa@d^(0+128),w
  8289  0AC8  0443               	iorwf	(efgtoa@d+1)^(0+128),w
  8290  0AC9  1D03               	btfss	3,2
  8291  0ACA  2AD4               	goto	l4624
  8292  0ACB  3067               	movlw	103
  8293  0ACC  064C               	xorwf	efgtoa@mode^(0+128),w
  8294  0ACD  1903               	btfsc	3,2
  8295  0ACE  1FC1               	btfss	(efgtoa@ne+1)^(0+128),7
  8296  0ACF  2AD4               	goto	l4624
  8297                           
  8298                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 450:       
      +                                ++t;
  8299  0AD0  0ABA               	incf	efgtoa@t^(0+128),f
  8300  0AD1  1903               	skipnz
  8301  0AD2  0ABB               	incf	(efgtoa@t+1)^(0+128),f
  8302                           
  8303                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 451:       
      +                            } else {
  8304  0AD3  2AFB               	goto	l4652
  8305  0AD4                     l4624:	
  8306                           
  8307                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 452:       
      +                                if (!pp && (ne < 0)) {
  8308  0AD4  0141               	movlb	1	; select bank1
  8309  0AD5  083C               	movf	efgtoa@pp^(0+128),w
  8310  0AD6  043D               	iorwf	(efgtoa@pp+1)^(0+128),w
  8311  0AD7  1903               	btfsc	3,2
  8312  0AD8  1FC1               	btfss	(efgtoa@ne+1)^(0+128),7
  8313  0AD9  2AE4               	goto	l4644
  8314                           
  8315                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 453:       
      +                                    dbuf[n++] = '.';
  8316  0ADA  267D  3188         	fcall	PL80	;call to abstracted procedure
  8317  0ADC  302E               	movlw	46
  8318                           
  8319                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 454:       
      +                                    --w;
  8320  0ADD  2683  3188         	fcall	PL84	;call to abstracted procedure
  8321  0ADF  1C03               	skipc
  8322  0AE0  03CB               	decf	(efgtoa@w+1)^(0+128),f
  8323                           
  8324                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 455:       
      +                                    pp = 1;
  8325  0AE1  01BC               	clrf	efgtoa@pp^(0+128)
  8326  0AE2  0ABC               	incf	efgtoa@pp^(0+128),f
  8327  0AE3  01BD               	clrf	(efgtoa@pp+1)^(0+128)
  8328  0AE4                     l4644:	
  8329                           
  8330                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 457:       
      +                                while (t) {
  8331  0AE4  083A               	movf	efgtoa@t^(0+128),w
  8332  0AE5  043B               	iorwf	(efgtoa@t+1)^(0+128),w
  8333  0AE6  1903               	btfsc	3,2
  8334  0AE7  2AF3               	goto	l4646
  8335                           
  8336                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 458:       
      +                                    dbuf[n++] = '0';
  8337  0AE8  267D  3188         	fcall	PL80	;call to abstracted procedure
  8338  0AEA  3030               	movlw	48
  8339                           
  8340                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 459:       
      +                                    --w;
  8341  0AEB  2683  3188         	fcall	PL84	;call to abstracted procedure
  8342  0AED  1C03               	skipc
  8343  0AEE  03CB               	decf	(efgtoa@w+1)^(0+128),f
  8344                           
  8345                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 460:       
      +                                    --t;
  8346  0AEF  07BA               	addwf	efgtoa@t^(0+128),f
  8347  0AF0  1C03               	skipc
  8348  0AF1  03BB               	decf	(efgtoa@t+1)^(0+128),f
  8349  0AF2  2AE4               	goto	l4644
  8350  0AF3                     l4646:	
  8351                           
  8352                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 462:       
      +                                dbuf[n++] = '0' + d;
  8353  0AF3  267D  3188         	fcall	PL80	;call to abstracted procedure
  8354  0AF5  0842               	movf	efgtoa@d^(0+128),w
  8355  0AF6  3E30               	addlw	48
  8356                           
  8357                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 463:       
      +                                --w;
  8358  0AF7  2683  3188         	fcall	PL84	;call to abstracted procedure
  8359  0AF9  1C03               	skipc
  8360  0AFA  03CB               	decf	(efgtoa@w+1)^(0+128),f
  8361  0AFB                     l4652:	
  8362                           
  8363                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 465:       
      +                            h -= l*u;
  8364  0AFB  25D6               	fcall	PL18	;call to abstracted procedure
  8365  0AFC  3184  2411  3188   	fcall	___flmul
  8366  0AFF  2636  3188         	fcall	PL34	;call to abstracted procedure
  8367  0B01  2541  3188         	fcall	___flsub
  8368                           
  8369                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 466:       
      +                            u = u/10.0;
  8370  0B03  257D  3188         	fcall	PL8	;call to abstracted procedure
  8371  0B05  2567  3188         	fcall	PL6	;call to abstracted procedure
  8372  0B07  23CC  3188         	fcall	___fldiv
  8373  0B09  2616  3188         	fcall	PL30	;call to abstracted procedure
  8374                           
  8375                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 467:       
      +                            --ne;
  8376  0B0B  30FF               	movlw	-1
  8377  0B0C  07C0               	addwf	efgtoa@ne^(0+128),f
  8378  0B0D  1C03               	skipc
  8379  0B0E  03C1               	decf	(efgtoa@ne+1)^(0+128),f
  8380                           
  8381                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 468:       
      +                            ++i;
  8382  0B0F  0AD5               	incf	efgtoa@i^(0+128),f
  8383  0B10  1903               	skipnz
  8384  0B11  0AD6               	incf	(efgtoa@i+1)^(0+128),f
  8385  0B12                     l4660:	
  8386                           
  8387                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 446:     wh
      +                          ile ((i < m) && (n < (80 - 5))) {
  8388  0B12  266E  3188         	fcall	PL56	;call to abstracted procedure
  8389  0B14  1803               	skipnc
  8390  0B15  2B21               	goto	l4664
  8391  0B16  0141               	movlb	1	; select bank1
  8392  0B17  085E               	movf	(efgtoa@n+1)^(0+128),w
  8393  0B18  26A3  3188         	fcall	PL112	;call to abstracted procedure
  8394  0B1A  1D03               	skipz
  8395  0B1B  2B1F               	goto	u5705
  8396  0B1C  304B               	movlw	75
  8397  0B1D  0141               	movlb	1	; select bank1
  8398  0B1E  025D               	subwf	efgtoa@n^(0+128),w
  8399  0B1F                     u5705:	
  8400  0B1F  1C03               	skipc
  8401  0B20  2AB5               	goto	l4612
  8402  0B21                     l4664:	
  8403                           
  8404                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 470:     if
      +                           (!pp && (flags & (1 << 4))) {
  8405  0B21  0141               	movlb	1	; select bank1
  8406  0B22  083C               	movf	efgtoa@pp^(0+128),w
  8407  0B23  043D               	iorwf	(efgtoa@pp+1)^(0+128),w
  8408  0B24  1D03               	btfss	3,2
  8409  0B25  2B31               	goto	l4672
  8410  0B26  0142               	movlb	2	; select bank2
  8411  0B27  1E60               	btfss	_flags^(0+256),4
  8412  0B28  2B31               	goto	l4672
  8413                           
  8414                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 471:       
      +                            dbuf[n++] = '.';
  8415  0B29  0141               	movlb	1	; select bank1
  8416  0B2A  267D  3188         	fcall	PL80	;call to abstracted procedure
  8417  0B2C  302E               	movlw	46
  8418  0B2D  0081               	movwf	1
  8419  0B2E  0ADD               	incf	efgtoa@n^(0+128),f
  8420  0B2F  1903               	skipnz
  8421  0B30  0ADE               	incf	(efgtoa@n+1)^(0+128),f
  8422  0B31                     l4672:	
  8423                           
  8424                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 473:     db
      +                          uf[n] = '\0';
  8425  0B31  0141               	movlb	1	; select bank1
  8426  0B32  267D  3188         	fcall	PL80	;call to abstracted procedure
  8427  0B34  3065               	movlw	101
  8428  0B35  0181               	clrf	1
  8429                           
  8430                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 476:     if
      +                           (nmode == 'e') {
  8431  0B36  0649               	xorwf	efgtoa@nmode^(0+128),w
  8432  0B37  1D03               	btfss	3,2
  8433  0B38  2BC7               	goto	l4730
  8434                           
  8435                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 477:       
      +                            i = sizeof(dbuf) - 1;
  8436  0B39  304F               	movlw	79
  8437  0B3A  00D5               	movwf	efgtoa@i^(0+128)
  8438  0B3B  01D6               	clrf	(efgtoa@i+1)^(0+128)
  8439                           
  8440                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 478:       
      +                            dbuf[i] = '\0';
  8441  0B3C  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  8442  0B3D  0086               	movwf	6
  8443  0B3E  0181               	clrf	1
  8444                           
  8445                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 479:       
      +                            sign = 0;
  8446  0B3F  01C4               	clrf	efgtoa@sign^(0+128)
  8447  0B40  01C5               	clrf	(efgtoa@sign+1)^(0+128)
  8448                           
  8449                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 480:       
      +                            if (e < 0) {
  8450  0B41  1FDC               	btfss	(efgtoa@e+1)^(0+128),7
  8451  0B42  2B4B               	goto	l4686
  8452                           
  8453                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 481:       
      +                                sign = 1;
  8454  0B43  01C4               	clrf	efgtoa@sign^(0+128)
  8455  0B44  0AC4               	incf	efgtoa@sign^(0+128),f
  8456  0B45  01C5               	clrf	(efgtoa@sign+1)^(0+128)
  8457                           
  8458                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 482:       
      +                                e = -e;
  8459  0B46  09DB               	comf	efgtoa@e^(0+128),f
  8460  0B47  09DC               	comf	(efgtoa@e+1)^(0+128),f
  8461  0B48  0ADB               	incf	efgtoa@e^(0+128),f
  8462  0B49  1903               	skipnz
  8463  0B4A  0ADC               	incf	(efgtoa@e+1)^(0+128),f
  8464  0B4B                     l4686:	
  8465                           
  8466                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 484:       
      +                            p = 2;
  8467  0B4B  3002               	movlw	2
  8468  0B4C  00C7               	movwf	efgtoa@p^(0+128)
  8469  0B4D  01C8               	clrf	(efgtoa@p+1)^(0+128)
  8470  0B4E                     l4698:	
  8471                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 485:       
      +                            while (e || (0 < p)) {
  8472                           
  8473                           
  8474                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 485:       
      +                            while (e || (0 < p)) {
  8475  0B4E  085B               	movf	efgtoa@e^(0+128),w
  8476  0B4F  045C               	iorwf	(efgtoa@e+1)^(0+128),w
  8477  0B50  1903               	btfsc	3,2
  8478  0B51  2B86               	goto	l4700
  8479                           
  8480                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 486:       
      +                                --i;
  8481  0B52  30FF               	movlw	-1
  8482  0B53                     L10:	
  8483  0B53  0141               	movlb	1	; select bank1
  8484  0B54  07D5               	addwf	efgtoa@i^(0+128),f
  8485  0B55  1C03               	skipc
  8486  0B56  03D6               	decf	(efgtoa@i+1)^(0+128),f
  8487                           
  8488                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 487:       
      +                                dbuf[i] = '0' + (e % 10);
  8489  0B57  26AE               	fcall	PL122	;call to abstracted procedure
  8490  0B58  300A               	movlw	10
  8491  0B59  0140               	movlb	0	; select bank0
  8492  0B5A  00A0               	movwf	___awmod@divisor
  8493  0B5B  01A1               	clrf	___awmod@divisor+1
  8494  0B5C  0141               	movlb	1	; select bank1
  8495  0B5D  085C               	movf	(efgtoa@e+1)^(0+128),w
  8496  0B5E  0140               	movlb	0	; select bank0
  8497  0B5F  00A3               	movwf	___awmod@dividend+1
  8498  0B60  0141               	movlb	1	; select bank1
  8499  0B61  085B               	movf	efgtoa@e^(0+128),w
  8500  0B62  0140               	movlb	0	; select bank0
  8501  0B63  00A2               	movwf	___awmod@dividend
  8502  0B64  3190  2004  3188   	fcall	___awmod
  8503  0B67  0820               	movf	?___awmod,w
  8504  0B68  3E30               	addlw	48
  8505  0B69  0081               	movwf	1
  8506                           
  8507                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 488:       
      +                                e = e / 10;
  8508  0B6A  300A               	movlw	10
  8509  0B6B  00A0               	movwf	___awdiv@divisor
  8510  0B6C  01A1               	clrf	___awdiv@divisor+1
  8511  0B6D  0141               	movlb	1	; select bank1
  8512  0B6E  085C               	movf	(efgtoa@e+1)^(0+128),w
  8513  0B6F  0140               	movlb	0	; select bank0
  8514  0B70  00A3               	movwf	___awdiv@dividend+1
  8515  0B71  0141               	movlb	1	; select bank1
  8516  0B72  085B               	movf	efgtoa@e^(0+128),w
  8517  0B73  0140               	movlb	0	; select bank0
  8518  0B74  00A2               	movwf	___awdiv@dividend
  8519  0B75  27C0  3188         	fcall	___awdiv
  8520  0B77  0821               	movf	?___awdiv+1,w
  8521  0B78  0141               	movlb	1	; select bank1
  8522  0B79  00DC               	movwf	(efgtoa@e+1)^(0+128)
  8523  0B7A  0140               	movlb	0	; select bank0
  8524  0B7B  0820               	movf	?___awdiv,w
  8525  0B7C  0141               	movlb	1	; select bank1
  8526  0B7D  00DB               	movwf	efgtoa@e^(0+128)
  8527                           
  8528                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 489:       
      +                                --p;
  8529  0B7E  30FF               	movlw	-1
  8530  0B7F  07C7               	addwf	efgtoa@p^(0+128),f
  8531  0B80  1C03               	skipc
  8532  0B81  03C8               	decf	(efgtoa@p+1)^(0+128),f
  8533                           
  8534                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 490:       
      +                                --w;
  8535  0B82  07CA               	addwf	efgtoa@w^(0+128),f
  8536  0B83  1C03               	skipc
  8537  0B84  03CB               	decf	(efgtoa@w+1)^(0+128),f
  8538  0B85  2B4E               	goto	l4698
  8539  0B86                     l4700:	
  8540  0B86  0848               	movf	(efgtoa@p+1)^(0+128),w
  8541  0B87  26A3  3188         	fcall	PL112	;call to abstracted procedure
  8542  0B89  1D03               	skipz
  8543  0B8A  2B8E               	goto	u5765
  8544  0B8B  3001               	movlw	1
  8545  0B8C  0141               	movlb	1	; select bank1
  8546  0B8D  0247               	subwf	efgtoa@p^(0+128),w
  8547  0B8E                     u5765:	
  8548                           
  8549                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 492:       
      +                            --i;
  8550  0B8E  30FF               	movlw	-1
  8551  0B8F  1803               	skipnc
  8552  0B90  2B53               	goto	L10
  8553  0B91  0141               	movlb	1	; select bank1
  8554  0B92  07D5               	addwf	efgtoa@i^(0+128),f
  8555  0B93  1C03               	skipc
  8556  0B94  03D6               	decf	(efgtoa@i+1)^(0+128),f
  8557                           
  8558                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 493:       
      +                            dbuf[i] = sign ? '-' : '+';
  8559  0B95  0844               	movf	efgtoa@sign^(0+128),w
  8560  0B96  0445               	iorwf	(efgtoa@sign+1)^(0+128),w
  8561  0B97  1D03               	btfss	3,2
  8562  0B98  2B9B               	goto	l4706
  8563  0B99  302B               	movlw	43
  8564  0B9A  2B9C               	goto	L8
  8565  0B9B                     l4706:	
  8566  0B9B  302D               	movlw	45
  8567  0B9C                     L8:	
  8568  0B9C  00B4               	movwf	_efgtoa$1141^(0+128)
  8569  0B9D  01B5               	clrf	(_efgtoa$1141+1)^(0+128)
  8570  0B9E  26AE  3188         	fcall	PL122	;call to abstracted procedure
  8571  0BA0  0834               	movf	_efgtoa$1141^(0+128),w
  8572  0BA1  0081               	movwf	1
  8573                           
  8574                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 494:       
      +                            --w;
  8575  0BA2  30FF               	movlw	-1
  8576  0BA3  07CA               	addwf	efgtoa@w^(0+128),f
  8577  0BA4  1C03               	skipc
  8578  0BA5  03CB               	decf	(efgtoa@w+1)^(0+128),f
  8579                           
  8580                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 496:       
      +                            dbuf[i] = (0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26) ? 'E' : 'e';
  8581  0BA6  07D5               	addwf	efgtoa@i^(0+128),f
  8582  0BA7  1C03               	skipc
  8583  0BA8  03D6               	decf	(efgtoa@i+1)^(0+128),f
  8584  0BA9  0140               	movlb	0	; select bank0
  8585  0BAA  25A2  3188         	fcall	PL14	;call to abstracted procedure
  8586  0BAC  00B8               	movwf	_efgtoa$1143^(0+128)
  8587  0BAD  01B9               	clrf	(_efgtoa$1143+1)^(0+128)
  8588  0BAE  0439               	iorwf	(_efgtoa$1143+1)^(0+128),w
  8589  0BAF  1D03               	btfss	3,2
  8590  0BB0  2BB3               	goto	l4722
  8591  0BB1  3065               	movlw	101
  8592  0BB2  2BB4               	goto	L9
  8593  0BB3                     l4722:	
  8594  0BB3  3045               	movlw	69
  8595  0BB4                     L9:	
  8596  0BB4  00B6               	movwf	_efgtoa$1142^(0+128)
  8597  0BB5  01B7               	clrf	(_efgtoa$1142+1)^(0+128)
  8598  0BB6  26AE  3188         	fcall	PL122	;call to abstracted procedure
  8599  0BB8  0836               	movf	_efgtoa$1142^(0+128),w
  8600  0BB9  0081               	movwf	1
  8601                           
  8602                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 497:       
      +                            --w;
  8603  0BBA  30FF               	movlw	-1
  8604  0BBB  07CA               	addwf	efgtoa@w^(0+128),f
  8605  0BBC  1C03               	skipc
  8606  0BBD  03CB               	decf	(efgtoa@w+1)^(0+128),f
  8607                           
  8608                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 498:       
      +                            strcpy(&dbuf[n], &dbuf[i]);
  8609  0BBE  0855               	movf	efgtoa@i^(0+128),w
  8610  0BBF  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  8611  0BC0  0140               	movlb	0	; select bank0
  8612  0BC1  00A0               	movwf	strcpy@src
  8613  0BC2  3002               	movlw	2
  8614  0BC3  26C6  3188         	fcall	PL158	;call to abstracted procedure
  8615  0BC5  2524  3188         	fcall	_strcpy
  8616  0BC7                     l4730:	
  8617                           
  8618                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 502:     re
      +                          turn pad(fp, &dbuf[0], w);
  8619  0BC7  264F               	fcall	PL36	;call to abstracted procedure
  8620  0BC8  3191  2139  3188   	fcall	_pad
  8621  0BCB  2EA9               	ljmp	PL116	;call to abstracted procedure
  8622  0BCC                     __end_of_efgtoa:	
  8623  0BCC                     __ptext54:	
  8624 ;; *************** function ___fldiv *****************
  8625 ;; Defined at:
  8626 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\sprcdiv.c"
  8627 ;; Parameters:    Size  Location     Type
  8628 ;;  a               4   39[BANK0 ] unsigned int 
  8629 ;;  b               4   43[BANK0 ] unsigned int 
  8630 ;; Auto vars:     Size  Location     Type
  8631 ;;  grs             4   58[BANK0 ] unsigned long 
  8632 ;;  rem             4   51[BANK0 ] unsigned long 
  8633 ;;  new_exp         2   56[BANK0 ] int 
  8634 ;;  aexp            1   63[BANK0 ] unsigned char 
  8635 ;;  bexp            1   62[BANK0 ] unsigned char 
  8636 ;;  sign            1   55[BANK0 ] unsigned char 
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  4   39[BANK0 ] unsigned char 
  8639 ;; Registers used:
  8640 ;;		wreg, status,2, status,0
  8641 ;; Tracked objects:
  8642 ;;		On entry : 3F/0
  8643 ;;		On exit  : 3F/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8646 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8647 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8648 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8649 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8650 ;;Total ram usage:       25 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    3
  8653 ;; This function calls:
  8654 ;;		Nothing
  8655 ;; This function is called by:
  8656 ;;		_convertAnalogValues
  8657 ;;		_efgtoa
  8658 ;; This function uses a non-reentrant model
  8659 ;;
  8660                           
  8661                           
  8662                           ;psect for function ___fldiv
  8663  0BCC                     ___fldiv:	
  8664                           
  8665                           ;incstack = 0
  8666                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
  8667  0BCC  084E               	movf	___fldiv@b+3,w
  8668  0BCD  00D7               	movwf	___fldiv@sign
  8669  0BCE  3080               	movlw	128
  8670  0BCF  05D7               	andwf	___fldiv@sign,f
  8671  0BD0  354E               	lslf	___fldiv@b+3,w
  8672  0BD1  00DE               	movwf	___fldiv@bexp
  8673  0BD2  1BCD               	btfsc	___fldiv@b+2,7
  8674  0BD3  145E               	bsf	___fldiv@bexp,0
  8675  0BD4  085E               	movf	___fldiv@bexp,w
  8676  0BD5  1903               	btfsc	3,2
  8677  0BD6  2BDF               	goto	l1056
  8678  0BD7  0F5E               	incfsz	___fldiv@bexp,w
  8679  0BD8  2BDD               	goto	l1057
  8680  0BD9  01CB               	clrf	___fldiv@b
  8681  0BDA  01CC               	clrf	___fldiv@b+1
  8682  0BDB  01CD               	clrf	___fldiv@b+2
  8683  0BDC  01CE               	clrf	___fldiv@b+3
  8684  0BDD                     l1057:	
  8685  0BDD  17CD               	bsf	___fldiv@b+2,7
  8686  0BDE  2BE2               	goto	L17
  8687  0BDF                     l1056:	
  8688  0BDF  01CB               	clrf	___fldiv@b
  8689  0BE0  01CC               	clrf	___fldiv@b+1
  8690  0BE1  01CD               	clrf	___fldiv@b+2
  8691  0BE2                     L17:	
  8692  0BE2  01CE               	clrf	___fldiv@b+3
  8693  0BE3  084A               	movf	___fldiv@a+3,w
  8694  0BE4  3980               	andlw	128
  8695  0BE5  06D7               	xorwf	___fldiv@sign,f
  8696  0BE6  354A               	lslf	___fldiv@a+3,w
  8697  0BE7  00DF               	movwf	___fldiv@aexp
  8698  0BE8  1BC9               	btfsc	___fldiv@a+2,7
  8699  0BE9  145F               	bsf	___fldiv@aexp,0
  8700  0BEA  085F               	movf	___fldiv@aexp,w
  8701  0BEB  1903               	btfsc	3,2
  8702  0BEC  2BF5               	goto	l1060
  8703  0BED  0F5F               	incfsz	___fldiv@aexp,w
  8704  0BEE  2BF3               	goto	l1061
  8705  0BEF  01C7               	clrf	___fldiv@a
  8706  0BF0  01C8               	clrf	___fldiv@a+1
  8707  0BF1  01C9               	clrf	___fldiv@a+2
  8708  0BF2  01CA               	clrf	___fldiv@a+3
  8709  0BF3                     l1061:	
  8710  0BF3  17C9               	bsf	___fldiv@a+2,7
  8711  0BF4  2BF8               	goto	L18
  8712  0BF5                     l1060:	
  8713  0BF5  01C7               	clrf	___fldiv@a
  8714  0BF6  01C8               	clrf	___fldiv@a+1
  8715  0BF7  01C9               	clrf	___fldiv@a+2
  8716  0BF8                     L18:	
  8717  0BF8  01CA               	clrf	___fldiv@a+3
  8718  0BF9  084A               	movf	___fldiv@a+3,w
  8719  0BFA  0449               	iorwf	___fldiv@a+2,w
  8720  0BFB  0448               	iorwf	___fldiv@a+1,w
  8721  0BFC  0447               	iorwf	___fldiv@a,w
  8722  0BFD  1D03               	skipz
  8723  0BFE  2C12               	goto	l4134
  8724  0BFF  3080               	movlw	128
  8725  0C00  01CB               	clrf	___fldiv@b
  8726  0C01  01CC               	clrf	___fldiv@b+1
  8727  0C02  01CD               	clrf	___fldiv@b+2
  8728  0C03  01CE               	clrf	___fldiv@b+3
  8729  0C04  04CD               	iorwf	___fldiv@b+2,f
  8730  0C05  307F               	movlw	127
  8731  0C06  04CE               	iorwf	___fldiv@b+3,f
  8732  0C07                     L19:	
  8733  0C07  0857               	movf	___fldiv@sign,w
  8734  0C08  04CE               	iorwf	___fldiv@b+3,f
  8735  0C09  084E               	movf	___fldiv@b+3,w
  8736  0C0A  00CA               	movwf	?___fldiv+3
  8737  0C0B  084D               	movf	___fldiv@b+2,w
  8738  0C0C  00C9               	movwf	?___fldiv+2
  8739  0C0D  084C               	movf	___fldiv@b+1,w
  8740  0C0E  00C8               	movwf	?___fldiv+1
  8741  0C0F  084B               	movf	___fldiv@b,w
  8742  0C10  00C7               	movwf	?___fldiv
  8743  0C11  0008               	return
  8744  0C12                     l4134:	
  8745  0C12  085E               	movf	___fldiv@bexp,w
  8746  0C13  1D03               	btfss	3,2
  8747  0C14  2C1A               	goto	l4142
  8748  0C15  01C7               	clrf	?___fldiv
  8749  0C16  01C8               	clrf	?___fldiv+1
  8750  0C17  01C9               	clrf	?___fldiv+2
  8751  0C18  01CA               	clrf	?___fldiv+3
  8752  0C19  0008               	return
  8753  0C1A                     l4142:	
  8754  0C1A  085E               	movf	___fldiv@bexp,w
  8755  0C1B  00D8               	movwf	___fldiv@new_exp
  8756  0C1C  01D9               	clrf	___fldiv@new_exp+1
  8757  0C1D  085F               	movf	___fldiv@aexp,w
  8758  0C1E  02D8               	subwf	___fldiv@new_exp,f
  8759  0C1F  1C03               	skipc
  8760  0C20  03D9               	decf	___fldiv@new_exp+1,f
  8761  0C21  307F               	movlw	127
  8762  0C22  07D8               	addwf	___fldiv@new_exp,f
  8763  0C23  1803               	skipnc
  8764  0C24  0AD9               	incf	___fldiv@new_exp+1,f
  8765  0C25  084E               	movf	___fldiv@b+3,w
  8766  0C26  00D6               	movwf	___fldiv@rem+3
  8767  0C27  084D               	movf	___fldiv@b+2,w
  8768  0C28  00D5               	movwf	___fldiv@rem+2
  8769  0C29  084C               	movf	___fldiv@b+1,w
  8770  0C2A  00D4               	movwf	___fldiv@rem+1
  8771  0C2B  084B               	movf	___fldiv@b,w
  8772  0C2C  00D3               	movwf	___fldiv@rem
  8773  0C2D  01CB               	clrf	___fldiv@b
  8774  0C2E  01CC               	clrf	___fldiv@b+1
  8775  0C2F  01CD               	clrf	___fldiv@b+2
  8776  0C30  01CE               	clrf	___fldiv@b+3
  8777  0C31  01DA               	clrf	___fldiv@grs
  8778  0C32  01DB               	clrf	___fldiv@grs+1
  8779  0C33  01DC               	clrf	___fldiv@grs+2
  8780  0C34  01DD               	clrf	___fldiv@grs+3
  8781  0C35  01DF               	clrf	___fldiv@aexp
  8782  0C36                     l4168:	
  8783  0C36  301A               	movlw	26
  8784  0C37  025F               	subwf	___fldiv@aexp,w
  8785  0C38  1803               	btfsc	3,0
  8786  0C39  2C66               	goto	l4170
  8787  0C3A  085F               	movf	___fldiv@aexp,w
  8788  0C3B  1903               	btfsc	3,2
  8789  0C3C  2C4B               	goto	l4160
  8790  0C3D  35D3               	lslf	___fldiv@rem,f
  8791  0C3E  0DD4               	rlf	___fldiv@rem+1,f
  8792  0C3F  0DD5               	rlf	___fldiv@rem+2,f
  8793  0C40  0DD6               	rlf	___fldiv@rem+3,f
  8794  0C41  35CB               	lslf	___fldiv@b,f
  8795  0C42  0DCC               	rlf	___fldiv@b+1,f
  8796  0C43  0DCD               	rlf	___fldiv@b+2,f
  8797  0C44  0DCE               	rlf	___fldiv@b+3,f
  8798  0C45  1BDD               	btfsc	___fldiv@grs+3,7
  8799  0C46  144B               	bsf	___fldiv@b,0
  8800  0C47  35DA               	lslf	___fldiv@grs,f
  8801  0C48  0DDB               	rlf	___fldiv@grs+1,f
  8802  0C49  0DDC               	rlf	___fldiv@grs+2,f
  8803  0C4A  0DDD               	rlf	___fldiv@grs+3,f
  8804  0C4B                     l4160:	
  8805  0C4B  084A               	movf	___fldiv@a+3,w
  8806  0C4C  0256               	subwf	___fldiv@rem+3,w
  8807  0C4D  1D03               	skipz
  8808  0C4E  2C59               	goto	u4805
  8809  0C4F  0849               	movf	___fldiv@a+2,w
  8810  0C50  0255               	subwf	___fldiv@rem+2,w
  8811  0C51  1D03               	skipz
  8812  0C52  2C59               	goto	u4805
  8813  0C53  0848               	movf	___fldiv@a+1,w
  8814  0C54  0254               	subwf	___fldiv@rem+1,w
  8815  0C55  1D03               	skipz
  8816  0C56  2C59               	goto	u4805
  8817  0C57  0847               	movf	___fldiv@a,w
  8818  0C58  0253               	subwf	___fldiv@rem,w
  8819  0C59                     u4805:	
  8820  0C59  1C03               	skipc
  8821  0C5A  2C64               	goto	l4166
  8822  0C5B  175D               	bsf	___fldiv@grs+3,6
  8823  0C5C  0847               	movf	___fldiv@a,w
  8824  0C5D  02D3               	subwf	___fldiv@rem,f
  8825  0C5E  0848               	movf	___fldiv@a+1,w
  8826  0C5F  3BD4               	subwfb	___fldiv@rem+1,f
  8827  0C60  0849               	movf	___fldiv@a+2,w
  8828  0C61  3BD5               	subwfb	___fldiv@rem+2,f
  8829  0C62  084A               	movf	___fldiv@a+3,w
  8830  0C63  3BD6               	subwfb	___fldiv@rem+3,f
  8831  0C64                     l4166:	
  8832  0C64  0ADF               	incf	___fldiv@aexp,f
  8833  0C65  2C36               	goto	l4168
  8834  0C66                     l4170:	
  8835  0C66  0856               	movf	___fldiv@rem+3,w
  8836  0C67  0455               	iorwf	___fldiv@rem+2,w
  8837  0C68  0454               	iorwf	___fldiv@rem+1,w
  8838  0C69  0453               	iorwf	___fldiv@rem,w
  8839  0C6A  1D03               	btfss	3,2
  8840  0C6B  145A               	bsf	___fldiv@grs,0
  8841  0C6C                     l4184:	
  8842  0C6C  1BCD               	btfsc	___fldiv@b+2,7
  8843  0C6D  2C7D               	goto	l4186
  8844  0C6E  35CB               	lslf	___fldiv@b,f
  8845  0C6F  0DCC               	rlf	___fldiv@b+1,f
  8846  0C70  0DCD               	rlf	___fldiv@b+2,f
  8847  0C71  0DCE               	rlf	___fldiv@b+3,f
  8848  0C72  1BDD               	btfsc	___fldiv@grs+3,7
  8849  0C73  144B               	bsf	___fldiv@b,0
  8850  0C74  30FF               	movlw	-1
  8851  0C75  35DA               	lslf	___fldiv@grs,f
  8852  0C76  0DDB               	rlf	___fldiv@grs+1,f
  8853  0C77  0DDC               	rlf	___fldiv@grs+2,f
  8854  0C78  0DDD               	rlf	___fldiv@grs+3,f
  8855  0C79  07D8               	addwf	___fldiv@new_exp,f
  8856  0C7A  1C03               	skipc
  8857  0C7B  03D9               	decf	___fldiv@new_exp+1,f
  8858  0C7C  2C6C               	goto	l4184
  8859  0C7D                     l4186:	
  8860  0C7D  01DF               	clrf	___fldiv@aexp
  8861  0C7E  1FDD               	btfss	___fldiv@grs+3,7
  8862  0C7F  2C92               	goto	l4196
  8863  0C80  085A               	movf	___fldiv@grs,w
  8864  0C81  00CF               	movwf	??___fldiv
  8865  0C82  085B               	movf	___fldiv@grs+1,w
  8866  0C83  00D0               	movwf	??___fldiv+1
  8867  0C84  085C               	movf	___fldiv@grs+2,w
  8868  0C85  00D1               	movwf	??___fldiv+2
  8869  0C86  307F               	movlw	127
  8870  0C87  055D               	andwf	___fldiv@grs+3,w
  8871  0C88  00D2               	movwf	??___fldiv+3
  8872  0C89  0451               	iorwf	??___fldiv+2,w
  8873  0C8A  0450               	iorwf	??___fldiv+1,w
  8874  0C8B  044F               	iorwf	??___fldiv,w
  8875  0C8C  1903               	skipnz
  8876  0C8D  184B               	btfsc	___fldiv@b,0
  8877  0C8E  2C90               	goto	l4192
  8878  0C8F  2C92               	goto	l4196
  8879  0C90                     l4192:	
  8880  0C90  01DF               	clrf	___fldiv@aexp
  8881  0C91  0ADF               	incf	___fldiv@aexp,f
  8882  0C92                     l4196:	
  8883  0C92  085F               	movf	___fldiv@aexp,w
  8884  0C93  1903               	btfsc	3,2
  8885  0C94  2CA4               	goto	l4206
  8886  0C95  3001               	movlw	1
  8887  0C96  07CB               	addwf	___fldiv@b,f
  8888  0C97  3000               	movlw	0
  8889  0C98  3DCC               	addwfc	___fldiv@b+1,f
  8890  0C99  3DCD               	addwfc	___fldiv@b+2,f
  8891  0C9A  3DCE               	addwfc	___fldiv@b+3,f
  8892  0C9B  1C4E               	btfss	___fldiv@b+3,0
  8893  0C9C  2CA4               	goto	l4206
  8894  0C9D  37CE               	asrf	___fldiv@b+3,f
  8895  0C9E  0CCD               	rrf	___fldiv@b+2,f
  8896  0C9F  0CCC               	rrf	___fldiv@b+1,f
  8897  0CA0  0CCB               	rrf	___fldiv@b,f
  8898  0CA1  0AD8               	incf	___fldiv@new_exp,f
  8899  0CA2  1903               	skipnz
  8900  0CA3  0AD9               	incf	___fldiv@new_exp+1,f
  8901  0CA4                     l4206:	
  8902  0CA4  26BA  3188         	fcall	PL138	;call to abstracted procedure
  8903  0CA6  1D03               	skipz
  8904  0CA7  2CAA               	goto	u4905
  8905  0CA8  30FF               	movlw	255
  8906  0CA9  0258               	subwf	___fldiv@new_exp,w
  8907  0CAA                     u4905:	
  8908  0CAA  1C03               	skipc
  8909  0CAB  2CB1               	goto	l1083
  8910  0CAC  30FF               	movlw	255
  8911  0CAD  0140               	movlb	0	; select bank0
  8912  0CAE  00D8               	movwf	___fldiv@new_exp
  8913  0CAF  26B4  3188         	fcall	PL136	;call to abstracted procedure
  8914  0CB1                     l1083:	
  8915  0CB1  0140               	movlb	0	; select bank0
  8916  0CB2  26BA  3188         	fcall	PL138	;call to abstracted procedure
  8917  0CB4  1D03               	skipz
  8918  0CB5  2CB8               	goto	u4915
  8919  0CB6  3001               	movlw	1
  8920  0CB7  0258               	subwf	___fldiv@new_exp,w
  8921  0CB8                     u4915:	
  8922  0CB8  1803               	skipnc
  8923  0CB9  2CBF               	goto	l4216
  8924  0CBA  0140               	movlb	0	; select bank0
  8925  0CBB  01D8               	clrf	___fldiv@new_exp
  8926  0CBC  26B4  3188         	fcall	PL136	;call to abstracted procedure
  8927  0CBE  01D7               	clrf	___fldiv@sign
  8928  0CBF                     l4216:	
  8929  0CBF  0140               	movlb	0	; select bank0
  8930  0CC0  0858               	movf	___fldiv@new_exp,w
  8931  0CC1  00DE               	movwf	___fldiv@bexp
  8932  0CC2  1C5E               	btfss	___fldiv@bexp,0
  8933  0CC3  2CC6               	goto	l1085
  8934  0CC4  17CD               	bsf	___fldiv@b+2,7
  8935  0CC5  2CC7               	goto	l4222
  8936  0CC6                     l1085:	
  8937  0CC6  13CD               	bcf	___fldiv@b+2,7
  8938  0CC7                     l4222:	
  8939  0CC7  365E               	lsrf	___fldiv@bexp,w
  8940  0CC8  00CE               	movwf	___fldiv@b+3
  8941  0CC9  2C07               	goto	L19
  8942  0CCA                     __end_of___fldiv:	
  8943  0CCA                     __ptext63:	
  8944 ;; *************** function ___flge *****************
  8945 ;; Defined at:
  8946 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\flge.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;  ff1             4   39[BANK0 ] unsigned char 
  8949 ;;  ff2             4   43[BANK0 ] unsigned char 
  8950 ;; Auto vars:     Size  Location     Type
  8951 ;;		None
  8952 ;; Return value:  Size  Location     Type
  8953 ;;		None               void
  8954 ;; Registers used:
  8955 ;;		wreg, status,2, status,0
  8956 ;; Tracked objects:
  8957 ;;		On entry : 3F/0
  8958 ;;		On exit  : 3F/0
  8959 ;;		Unchanged: 0/0
  8960 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8961 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8963 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8964 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8965 ;;Total ram usage:       12 bytes
  8966 ;; Hardware stack levels used:    1
  8967 ;; Hardware stack levels required when called:    3
  8968 ;; This function calls:
  8969 ;;		Nothing
  8970 ;; This function is called by:
  8971 ;;		_checkSensor
  8972 ;;		_efgtoa
  8973 ;; This function uses a non-reentrant model
  8974 ;;
  8975                           
  8976                           
  8977                           ;psect for function ___flge
  8978  0CCA                     ___flge:	
  8979                           
  8980                           ;incstack = 0
  8981                           ; Regs used in ___flge: [wreg+status,2+status,0]
  8982  0CCA  3080               	movlw	128
  8983  0CCB  01CF               	clrf	??___flge
  8984  0CCC  01D0               	clrf	??___flge+1
  8985  0CCD  0549               	andwf	___flge@ff1+2,w
  8986  0CCE  00D1               	movwf	??___flge+2
  8987  0CCF  307F               	movlw	127
  8988  0CD0  054A               	andwf	___flge@ff1+3,w
  8989  0CD1  00D2               	movwf	??___flge+3
  8990  0CD2  0451               	iorwf	??___flge+2,w
  8991  0CD3  0450               	iorwf	??___flge+1,w
  8992  0CD4  044F               	iorwf	??___flge,w
  8993  0CD5  1D03               	skipz
  8994  0CD6  2CDB               	goto	l4026
  8995  0CD7  01C7               	clrf	___flge@ff1
  8996  0CD8  01C8               	clrf	___flge@ff1+1
  8997  0CD9  01C9               	clrf	___flge@ff1+2
  8998  0CDA  01CA               	clrf	___flge@ff1+3
  8999  0CDB                     l4026:	
  9000  0CDB  3080               	movlw	128
  9001  0CDC  01CF               	clrf	??___flge
  9002  0CDD  01D0               	clrf	??___flge+1
  9003  0CDE  054D               	andwf	___flge@ff2+2,w
  9004  0CDF  00D1               	movwf	??___flge+2
  9005  0CE0  307F               	movlw	127
  9006  0CE1  054E               	andwf	___flge@ff2+3,w
  9007  0CE2  00D2               	movwf	??___flge+3
  9008  0CE3  0451               	iorwf	??___flge+2,w
  9009  0CE4  0450               	iorwf	??___flge+1,w
  9010  0CE5  044F               	iorwf	??___flge,w
  9011  0CE6  1D03               	skipz
  9012  0CE7  2CEA               	goto	l884
  9013  0CE8  26CB  3188         	fcall	PL172	;call to abstracted procedure
  9014  0CEA                     l884:	
  9015  0CEA  1FCA               	btfss	___flge@ff1+3,7
  9016  0CEB  2CFE               	goto	l4032
  9017  0CEC  26C0  3188         	fcall	PL146	;call to abstracted procedure
  9018  0CEE  0847               	movf	___flge@ff1,w
  9019  0CEF  02CF               	subwf	??___flge,f
  9020  0CF0  0848               	movf	___flge@ff1+1,w
  9021  0CF1  3BD0               	subwfb	??___flge+1,f
  9022  0CF2  0849               	movf	___flge@ff1+2,w
  9023  0CF3  3BD1               	subwfb	??___flge+2,f
  9024  0CF4  084A               	movf	___flge@ff1+3,w
  9025  0CF5  3BD2               	subwfb	??___flge+3,f
  9026  0CF6  0852               	movf	??___flge+3,w
  9027  0CF7  00CA               	movwf	___flge@ff1+3
  9028  0CF8  0851               	movf	??___flge+2,w
  9029  0CF9  00C9               	movwf	___flge@ff1+2
  9030  0CFA  0850               	movf	??___flge+1,w
  9031  0CFB  00C8               	movwf	___flge@ff1+1
  9032  0CFC  084F               	movf	??___flge,w
  9033  0CFD  00C7               	movwf	___flge@ff1
  9034  0CFE                     l4032:	
  9035  0CFE  1FCE               	btfss	___flge@ff2+3,7
  9036  0CFF  2D12               	goto	l886
  9037  0D00  26C0  3188         	fcall	PL146	;call to abstracted procedure
  9038  0D02  084B               	movf	___flge@ff2,w
  9039  0D03  02CF               	subwf	??___flge,f
  9040  0D04  084C               	movf	___flge@ff2+1,w
  9041  0D05  3BD0               	subwfb	??___flge+1,f
  9042  0D06  084D               	movf	___flge@ff2+2,w
  9043  0D07  3BD1               	subwfb	??___flge+2,f
  9044  0D08  084E               	movf	___flge@ff2+3,w
  9045  0D09  3BD2               	subwfb	??___flge+3,f
  9046  0D0A  0852               	movf	??___flge+3,w
  9047  0D0B  00CE               	movwf	___flge@ff2+3
  9048  0D0C  0851               	movf	??___flge+2,w
  9049  0D0D  00CD               	movwf	___flge@ff2+2
  9050  0D0E  0850               	movf	??___flge+1,w
  9051  0D0F  00CC               	movwf	___flge@ff2+1
  9052  0D10  084F               	movf	??___flge,w
  9053  0D11  00CB               	movwf	___flge@ff2
  9054  0D12                     l886:	
  9055  0D12  3080               	movlw	128
  9056  0D13  06CA               	xorwf	___flge@ff1+3,f
  9057  0D14  06CE               	xorwf	___flge@ff2+3,f
  9058  0D15  084E               	movf	___flge@ff2+3,w
  9059  0D16  024A               	subwf	___flge@ff1+3,w
  9060  0D17  1D03               	skipz
  9061  0D18  0008               	return
  9062  0D19  084D               	movf	___flge@ff2+2,w
  9063  0D1A  0249               	subwf	___flge@ff1+2,w
  9064  0D1B  1D03               	skipz
  9065  0D1C  0008               	return
  9066  0D1D  084C               	movf	___flge@ff2+1,w
  9067  0D1E  0248               	subwf	___flge@ff1+1,w
  9068  0D1F  1D03               	skipz
  9069  0D20  0008               	return
  9070  0D21  084B               	movf	___flge@ff2,w
  9071  0D22  0247               	subwf	___flge@ff1,w
  9072  0D23  0008               	return
  9073  0D24                     __end_of___flge:	
  9074  0D24                     __ptext18:	
  9075 ;; *************** function _strcpy *****************
  9076 ;; Defined at:
  9077 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\strcpy.c"
  9078 ;; Parameters:    Size  Location     Type
  9079 ;;  dest            1    wreg     PTR unsigned char 
  9080 ;;		 -> dbuf(80), 
  9081 ;;  src             2    0[BANK0 ] PTR const unsigned char 
  9082 ;;		 -> STR_19(4), STR_18(4), STR_15(4), STR_14(4), 
  9083 ;;		 -> dbuf(80), 
  9084 ;; Auto vars:     Size  Location     Type
  9085 ;;  dest            1    7[BANK0 ] PTR unsigned char 
  9086 ;;		 -> dbuf(80), 
  9087 ;;  s               2    4[BANK0 ] PTR const unsigned char 
  9088 ;;		 -> STR_19(4), STR_18(4), STR_15(4), STR_14(4), 
  9089 ;;		 -> dbuf(80), 
  9090 ;;  d               1    6[BANK0 ] PTR unsigned char 
  9091 ;;		 -> dbuf(80), 
  9092 ;; Return value:  Size  Location     Type
  9093 ;;                  1    wreg      PTR unsigned char 
  9094 ;; Registers used:
  9095 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
  9096 ;; Tracked objects:
  9097 ;;		On entry : 3F/1
  9098 ;;		On exit  : 3F/0
  9099 ;;		Unchanged: 0/0
  9100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9101 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9102 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9103 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9104 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9105 ;;Total ram usage:        8 bytes
  9106 ;; Hardware stack levels used:    1
  9107 ;; Hardware stack levels required when called:    3
  9108 ;; This function calls:
  9109 ;;		Nothing
  9110 ;; This function is called by:
  9111 ;;		_efgtoa
  9112 ;; This function uses a non-reentrant model
  9113 ;;
  9114                           
  9115                           
  9116                           ;psect for function _strcpy
  9117  0D24                     _strcpy:	
  9118                           
  9119                           ;incstack = 0
  9120                           ; Regs used in _strcpy: [wreg-fsr1h+status,2+status,0+pclath]
  9121                           ;strcpy@dest stored from wreg
  9122  0D24  0140               	movlb	0	; select bank0
  9123  0D25  00A7               	movwf	strcpy@dest
  9124  0D26  0821               	movf	strcpy@src+1,w
  9125  0D27  00A5               	movwf	strcpy@s+1
  9126  0D28  0820               	movf	strcpy@src,w
  9127  0D29  00A4               	movwf	strcpy@s
  9128  0D2A  0827               	movf	strcpy@dest,w
  9129  0D2B  00A6               	movwf	strcpy@d
  9130  0D2C                     l3790:	
  9131  0D2C  0826               	movf	strcpy@d,w
  9132  0D2D  0086               	movwf	6
  9133  0D2E  3002               	movlw	2	; select bank4/5
  9134  0D2F  0087               	movwf	7
  9135  0D30  0AA6               	incf	strcpy@d,f
  9136  0D31  0825               	movf	strcpy@s+1,w
  9137  0D32  00A3               	movwf	??_strcpy+1
  9138  0D33  0824               	movf	strcpy@s,w
  9139  0D34  00A2               	movwf	??_strcpy
  9140  0D35  0AA4               	incf	strcpy@s,f
  9141  0D36  1903               	skipnz
  9142  0D37  0AA5               	incf	strcpy@s+1,f
  9143  0D38  0084               	movwf	4
  9144  0D39  0823               	movf	??_strcpy+1,w
  9145  0D3A  0085               	movwf	5
  9146  0D3B  0800               	movf	0,w	;code access
  9147  0D3C  3FC0               	movwi [0]fsr1
  9148  0D3D  0889               	movf	9,f
  9149  0D3E  1903               	btfsc	3,2
  9150  0D3F  0008               	return
  9151  0D40  2D2C               	goto	l3790
  9152  0D41                     __end_of_strcpy:	
  9153  0D41                     __ptext22:	
  9154 ;; *************** function ___flsub *****************
  9155 ;; Defined at:
  9156 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\sprcadd.c"
  9157 ;; Parameters:    Size  Location     Type
  9158 ;;  a               4   59[BANK0 ] long 
  9159 ;;  b               4   63[BANK0 ] long 
  9160 ;; Auto vars:     Size  Location     Type
  9161 ;;		None
  9162 ;; Return value:  Size  Location     Type
  9163 ;;                  4   59[BANK0 ] long 
  9164 ;; Registers used:
  9165 ;;		wreg, status,2, status,0, pclath, cstack
  9166 ;; Tracked objects:
  9167 ;;		On entry : 3F/0
  9168 ;;		On exit  : 3F/0
  9169 ;;		Unchanged: 0/0
  9170 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9171 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9174 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9175 ;;Total ram usage:        8 bytes
  9176 ;; Hardware stack levels used:    1
  9177 ;; Hardware stack levels required when called:    4
  9178 ;; This function calls:
  9179 ;;		___fladd
  9180 ;; This function is called by:
  9181 ;;		_efgtoa
  9182 ;; This function uses a non-reentrant model
  9183 ;;
  9184                           
  9185                           
  9186                           ;psect for function ___flsub
  9187  0D41                     ___flsub:	
  9188                           
  9189                           ;incstack = 0
  9190                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
  9191  0D41  3080               	movlw	128
  9192  0D42  06DE               	xorwf	___flsub@a+3,f
  9193  0D43  0862               	movf	___flsub@b+3,w
  9194  0D44  00CA               	movwf	___fladd@b+3
  9195  0D45  0861               	movf	___flsub@b+2,w
  9196  0D46  00C9               	movwf	___fladd@b+2
  9197  0D47  0860               	movf	___flsub@b+1,w
  9198  0D48  00C8               	movwf	___fladd@b+1
  9199  0D49  085F               	movf	___flsub@b,w
  9200  0D4A  00C7               	movwf	___fladd@b
  9201  0D4B  085E               	movf	___flsub@a+3,w
  9202  0D4C  00CE               	movwf	___fladd@a+3
  9203  0D4D  085D               	movf	___flsub@a+2,w
  9204  0D4E  00CD               	movwf	___fladd@a+2
  9205  0D4F  085C               	movf	___flsub@a+1,w
  9206  0D50  00CC               	movwf	___fladd@a+1
  9207  0D51  085B               	movf	___flsub@a,w
  9208  0D52  00CB               	movwf	___fladd@a
  9209  0D53  319C  24E1         	fcall	___fladd
  9210  0D55  084A               	movf	?___fladd+3,w
  9211  0D56  00DE               	movwf	?___flsub+3
  9212  0D57  0849               	movf	?___fladd+2,w
  9213  0D58  00DD               	movwf	?___flsub+2
  9214  0D59  0848               	movf	?___fladd+1,w
  9215  0D5A  00DC               	movwf	?___flsub+1
  9216  0D5B  0847               	movf	?___fladd,w
  9217  0D5C  00DB               	movwf	?___flsub
  9218  0D5D  0008               	return
  9219  0D5E                     __end_of___flsub:	
  9220  0D5E                     __ptext23:	
  9221 ;; *************** function ___flneg *****************
  9222 ;; Defined at:
  9223 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\flneg.c"
  9224 ;; Parameters:    Size  Location     Type
  9225 ;;  f1              4    0[BANK0 ] long 
  9226 ;; Auto vars:     Size  Location     Type
  9227 ;;		None
  9228 ;; Return value:  Size  Location     Type
  9229 ;;                  4    0[BANK0 ] long 
  9230 ;; Registers used:
  9231 ;;		wreg
  9232 ;; Tracked objects:
  9233 ;;		On entry : 3F/0
  9234 ;;		On exit  : 3F/0
  9235 ;;		Unchanged: 0/0
  9236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9237 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9240 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9241 ;;Total ram usage:        4 bytes
  9242 ;; Hardware stack levels used:    1
  9243 ;; Hardware stack levels required when called:    3
  9244 ;; This function calls:
  9245 ;;		Nothing
  9246 ;; This function is called by:
  9247 ;;		_efgtoa
  9248 ;; This function uses a non-reentrant model
  9249 ;;
  9250                           
  9251                           
  9252                           ;psect for function ___flneg
  9253  0D5E                     ___flneg:	
  9254                           
  9255                           ;incstack = 0
  9256                           ; Regs used in ___flneg: [wreg]
  9257  0D5E  0823               	movf	___flneg@f1+3,w
  9258  0D5F  0422               	iorwf	___flneg@f1+2,w
  9259  0D60  0421               	iorwf	___flneg@f1+1,w
  9260  0D61  0420               	iorwf	___flneg@f1,w
  9261  0D62  1903               	skipnz
  9262  0D63  0008               	return
  9263  0D64  3080               	movlw	128
  9264  0D65  06A3               	xorwf	___flneg@f1+3,f
  9265  0D66  0008               	return
  9266  0D67                     __end_of___flneg:	
  9267  0D67                     PL6:	
  9268  0D67  00CA               	movwf	___fldiv@a+3
  9269  0D68  3020               	movlw	32
  9270  0D69  00C9               	movwf	___fldiv@a+2
  9271  0D6A  01C8               	clrf	___fldiv@a+1
  9272  0D6B  01C7               	clrf	___fldiv@a
  9273  0D6C  0141               	movlb	1	; select bank1
  9274  0D6D  0862               	movf	(efgtoa@u+3)^(0+128),w
  9275  0D6E  0140               	movlb	0	; select bank0
  9276  0D6F  00CE               	movwf	___fldiv@b+3
  9277  0D70  0141               	movlb	1	; select bank1
  9278  0D71  0861               	movf	(efgtoa@u+2)^(0+128),w
  9279  0D72  0140               	movlb	0	; select bank0
  9280  0D73  00CD               	movwf	___fldiv@b+2
  9281  0D74  0141               	movlb	1	; select bank1
  9282  0D75  0860               	movf	(efgtoa@u+1)^(0+128),w
  9283  0D76  0140               	movlb	0	; select bank0
  9284  0D77  00CC               	movwf	___fldiv@b+1
  9285  0D78  0141               	movlb	1	; select bank1
  9286  0D79  085F               	movf	efgtoa@u^(0+128),w
  9287  0D7A  0140               	movlb	0	; select bank0
  9288  0D7B  00CB               	movwf	___fldiv@b
  9289  0D7C  0008               	return
  9290  0D7D                     __end_ofPL6:	
  9291  0D7D                     PL8:	
  9292  0D7D  085E               	movf	?___flsub+3,w
  9293  0D7E  0141               	movlb	1	; select bank1
  9294  0D7F  00D0               	movwf	(efgtoa@h+3)^(0+128)
  9295  0D80  0140               	movlb	0	; select bank0
  9296  0D81  085D               	movf	?___flsub+2,w
  9297  0D82  0141               	movlb	1	; select bank1
  9298  0D83  00CF               	movwf	(efgtoa@h+2)^(0+128)
  9299  0D84  0140               	movlb	0	; select bank0
  9300  0D85  085C               	movf	?___flsub+1,w
  9301  0D86  0141               	movlb	1	; select bank1
  9302  0D87  00CE               	movwf	(efgtoa@h+1)^(0+128)
  9303  0D88  0140               	movlb	0	; select bank0
  9304  0D89  085B               	movf	?___flsub,w
  9305  0D8A  0141               	movlb	1	; select bank1
  9306  0D8B  00CD               	movwf	efgtoa@h^(0+128)
  9307  0D8C  0140               	movlb	0	; select bank0
  9308  0D8D  3441               	retlw	65
  9309  0D8E                     __end_ofPL8:	
  9310  0D8E                     PL12:	
  9311  0D8E  00B0               	movwf	___flmul@b+2
  9312  0D8F  01AF               	clrf	___flmul@b+1
  9313  0D90  01AE               	clrf	___flmul@b
  9314  0D91  0141               	movlb	1	; select bank1
  9315  0D92  0862               	movf	(efgtoa@u+3)^(0+128),w
  9316  0D93  0140               	movlb	0	; select bank0
  9317  0D94  00B5               	movwf	___flmul@a+3
  9318  0D95  0141               	movlb	1	; select bank1
  9319  0D96  0861               	movf	(efgtoa@u+2)^(0+128),w
  9320  0D97  0140               	movlb	0	; select bank0
  9321  0D98  00B4               	movwf	___flmul@a+2
  9322  0D99  0141               	movlb	1	; select bank1
  9323  0D9A  0860               	movf	(efgtoa@u+1)^(0+128),w
  9324  0D9B  0140               	movlb	0	; select bank0
  9325  0D9C  00B3               	movwf	___flmul@a+1
  9326  0D9D  0141               	movlb	1	; select bank1
  9327  0D9E  085F               	movf	efgtoa@u^(0+128),w
  9328  0D9F  0140               	movlb	0	; select bank0
  9329  0DA0  00B2               	movwf	___flmul@a
  9330  0DA1  0008               	return
  9331  0DA2                     __end_ofPL12:	
  9332  0DA2                     PL14:	
  9333  0DA2  086C               	movf	efgtoa@c,w
  9334  0DA3  3EBF               	addlw	191
  9335  0DA4  00ED               	movwf	??_efgtoa
  9336  0DA5  30FF               	movlw	255
  9337  0DA6  1803               	skipnc
  9338  0DA7  3000               	movlw	0
  9339  0DA8  00EE               	movwf	??_efgtoa+1
  9340  0DA9  3000               	movlw	0
  9341  0DAA  026E               	subwf	??_efgtoa+1,w
  9342  0DAB  301A               	movlw	26
  9343  0DAC  1903               	skipnz
  9344  0DAD  026D               	subwf	??_efgtoa,w
  9345  0DAE  1803               	btfsc	3,0
  9346  0DAF  2DB2               	goto	u5340
  9347  0DB0  3001               	movlw	1
  9348  0DB1  2DB3               	goto	u5350
  9349  0DB2                     u5340:	
  9350  0DB2  3000               	movlw	0
  9351  0DB3                     u5350:	
  9352  0DB3  0141               	movlb	1	; select bank1
  9353  0DB4  0008               	return
  9354  0DB5                     __end_ofPL14:	
  9355  0DB5                     PL16:	
  9356  0DB5  0141               	movlb	1	; select bank1
  9357  0DB6  0862               	movf	(efgtoa@u+3)^(0+128),w
  9358  0DB7  0140               	movlb	0	; select bank0
  9359  0DB8  00CA               	movwf	___fldiv@a+3
  9360  0DB9  0141               	movlb	1	; select bank1
  9361  0DBA  0861               	movf	(efgtoa@u+2)^(0+128),w
  9362  0DBB  0140               	movlb	0	; select bank0
  9363  0DBC  00C9               	movwf	___fldiv@a+2
  9364  0DBD  0141               	movlb	1	; select bank1
  9365  0DBE  0860               	movf	(efgtoa@u+1)^(0+128),w
  9366  0DBF  0140               	movlb	0	; select bank0
  9367  0DC0  00C8               	movwf	___fldiv@a+1
  9368  0DC1  0141               	movlb	1	; select bank1
  9369  0DC2  085F               	movf	efgtoa@u^(0+128),w
  9370  0DC3  0140               	movlb	0	; select bank0
  9371  0DC4  00C7               	movwf	___fldiv@a
  9372  0DC5  0141               	movlb	1	; select bank1
  9373  0DC6  0850               	movf	(efgtoa@h+3)^(0+128),w
  9374  0DC7  0140               	movlb	0	; select bank0
  9375  0DC8  00CE               	movwf	___fldiv@b+3
  9376  0DC9  0141               	movlb	1	; select bank1
  9377  0DCA  084F               	movf	(efgtoa@h+2)^(0+128),w
  9378  0DCB  0140               	movlb	0	; select bank0
  9379  0DCC  00CD               	movwf	___fldiv@b+2
  9380  0DCD  0141               	movlb	1	; select bank1
  9381  0DCE  084E               	movf	(efgtoa@h+1)^(0+128),w
  9382  0DCF  0140               	movlb	0	; select bank0
  9383  0DD0  00CC               	movwf	___fldiv@b+1
  9384  0DD1  0141               	movlb	1	; select bank1
  9385  0DD2  084D               	movf	efgtoa@h^(0+128),w
  9386  0DD3  0140               	movlb	0	; select bank0
  9387  0DD4  00CB               	movwf	___fldiv@b
  9388  0DD5  0008               	return
  9389  0DD6                     __end_ofPL16:	
  9390  0DD6                     PL18:	
  9391  0DD6  0854               	movf	(efgtoa@l+3)^(0+128),w
  9392  0DD7  0140               	movlb	0	; select bank0
  9393  0DD8  00B5               	movwf	___flmul@a+3
  9394  0DD9  0141               	movlb	1	; select bank1
  9395  0DDA  0853               	movf	(efgtoa@l+2)^(0+128),w
  9396  0DDB  0140               	movlb	0	; select bank0
  9397  0DDC  00B4               	movwf	___flmul@a+2
  9398  0DDD  0141               	movlb	1	; select bank1
  9399  0DDE  0852               	movf	(efgtoa@l+1)^(0+128),w
  9400  0DDF  0140               	movlb	0	; select bank0
  9401  0DE0  00B3               	movwf	___flmul@a+1
  9402  0DE1  0141               	movlb	1	; select bank1
  9403  0DE2  0851               	movf	efgtoa@l^(0+128),w
  9404  0DE3  0140               	movlb	0	; select bank0
  9405  0DE4  00B2               	movwf	___flmul@a
  9406  0DE5  0141               	movlb	1	; select bank1
  9407  0DE6  0862               	movf	(efgtoa@u+3)^(0+128),w
  9408  0DE7  0140               	movlb	0	; select bank0
  9409  0DE8  00B1               	movwf	___flmul@b+3
  9410  0DE9  0141               	movlb	1	; select bank1
  9411  0DEA  0861               	movf	(efgtoa@u+2)^(0+128),w
  9412  0DEB  0140               	movlb	0	; select bank0
  9413  0DEC  00B0               	movwf	___flmul@b+2
  9414  0DED  0141               	movlb	1	; select bank1
  9415  0DEE  0860               	movf	(efgtoa@u+1)^(0+128),w
  9416  0DEF  0140               	movlb	0	; select bank0
  9417  0DF0  00AF               	movwf	___flmul@b+1
  9418  0DF1  0141               	movlb	1	; select bank1
  9419  0DF2  085F               	movf	efgtoa@u^(0+128),w
  9420  0DF3  0140               	movlb	0	; select bank0
  9421  0DF4  00AE               	movwf	___flmul@b
  9422  0DF5  0008               	return
  9423  0DF6                     __end_ofPL18:	
  9424  0DF6                     PL20:	
  9425  0DF6  0140               	movlb	0	; select bank0
  9426  0DF7  0863               	movf	?_floorf+3,w
  9427  0DF8  0141               	movlb	1	; select bank1
  9428  0DF9  00D4               	movwf	(efgtoa@l+3)^(0+128)
  9429  0DFA  0140               	movlb	0	; select bank0
  9430  0DFB  0862               	movf	?_floorf+2,w
  9431  0DFC  0141               	movlb	1	; select bank1
  9432  0DFD  00D3               	movwf	(efgtoa@l+2)^(0+128)
  9433  0DFE  0140               	movlb	0	; select bank0
  9434  0DFF  0861               	movf	?_floorf+1,w
  9435  0E00  0141               	movlb	1	; select bank1
  9436  0E01  00D2               	movwf	(efgtoa@l+1)^(0+128)
  9437  0E02  0140               	movlb	0	; select bank0
  9438  0E03  0860               	movf	?_floorf,w
  9439  0E04  0141               	movlb	1	; select bank1
  9440  0E05  00D1               	movwf	efgtoa@l^(0+128)
  9441  0E06  0854               	movf	(efgtoa@l+3)^(0+128),w
  9442  0E07  0140               	movlb	0	; select bank0
  9443  0E08  00A3               	movwf	___fltol@f1+3
  9444  0E09  0141               	movlb	1	; select bank1
  9445  0E0A  0853               	movf	(efgtoa@l+2)^(0+128),w
  9446  0E0B  0140               	movlb	0	; select bank0
  9447  0E0C  00A2               	movwf	___fltol@f1+2
  9448  0E0D  0141               	movlb	1	; select bank1
  9449  0E0E  0852               	movf	(efgtoa@l+1)^(0+128),w
  9450  0E0F  0140               	movlb	0	; select bank0
  9451  0E10  00A1               	movwf	___fltol@f1+1
  9452  0E11  0141               	movlb	1	; select bank1
  9453  0E12  0851               	movf	efgtoa@l^(0+128),w
  9454  0E13  0140               	movlb	0	; select bank0
  9455  0E14  00A0               	movwf	___fltol@f1
  9456  0E15  0008               	return
  9457  0E16                     __end_ofPL20:	
  9458  0E16                     PL30:	
  9459  0E16  084A               	movf	?___fldiv+3,w
  9460  0E17  0141               	movlb	1	; select bank1
  9461  0E18  00E2               	movwf	(efgtoa@u+3)^(0+128)
  9462  0E19  0140               	movlb	0	; select bank0
  9463  0E1A  0849               	movf	?___fldiv+2,w
  9464  0E1B  0141               	movlb	1	; select bank1
  9465  0E1C  00E1               	movwf	(efgtoa@u+2)^(0+128)
  9466  0E1D  0140               	movlb	0	; select bank0
  9467  0E1E  0848               	movf	?___fldiv+1,w
  9468  0E1F  0141               	movlb	1	; select bank1
  9469  0E20  00E0               	movwf	(efgtoa@u+1)^(0+128)
  9470  0E21  0140               	movlb	0	; select bank0
  9471  0E22  0847               	movf	?___fldiv,w
  9472  0E23  0141               	movlb	1	; select bank1
  9473  0E24  00DF               	movwf	efgtoa@u^(0+128)
  9474  0E25  0008               	return
  9475  0E26                     __end_ofPL30:	
  9476  0E26                     PL32:	
  9477  0E26  085A               	movf	(efgtoa@g+3)^(0+128),w
  9478  0E27  0140               	movlb	0	; select bank0
  9479  0E28  00CA               	movwf	___flge@ff1+3
  9480  0E29  0141               	movlb	1	; select bank1
  9481  0E2A  0859               	movf	(efgtoa@g+2)^(0+128),w
  9482  0E2B  0140               	movlb	0	; select bank0
  9483  0E2C  00C9               	movwf	___flge@ff1+2
  9484  0E2D  0141               	movlb	1	; select bank1
  9485  0E2E  0858               	movf	(efgtoa@g+1)^(0+128),w
  9486  0E2F  0140               	movlb	0	; select bank0
  9487  0E30  00C8               	movwf	___flge@ff1+1
  9488  0E31  0141               	movlb	1	; select bank1
  9489  0E32  0857               	movf	efgtoa@g^(0+128),w
  9490  0E33  0140               	movlb	0	; select bank0
  9491  0E34  00C7               	movwf	___flge@ff1
  9492  0E35  0008               	return
  9493  0E36                     __end_ofPL32:	
  9494  0E36                     PL34:	
  9495  0E36  0831               	movf	?___flmul+3,w
  9496  0E37  00DE               	movwf	___flsub@a+3
  9497  0E38  0830               	movf	?___flmul+2,w
  9498  0E39  00DD               	movwf	___flsub@a+2
  9499  0E3A  082F               	movf	?___flmul+1,w
  9500  0E3B  00DC               	movwf	___flsub@a+1
  9501  0E3C  082E               	movf	?___flmul,w
  9502  0E3D  00DB               	movwf	___flsub@a
  9503  0E3E  0141               	movlb	1	; select bank1
  9504  0E3F  0850               	movf	(efgtoa@h+3)^(0+128),w
  9505  0E40  0140               	movlb	0	; select bank0
  9506  0E41  00E2               	movwf	___flsub@b+3
  9507  0E42  0141               	movlb	1	; select bank1
  9508  0E43  084F               	movf	(efgtoa@h+2)^(0+128),w
  9509  0E44  0140               	movlb	0	; select bank0
  9510  0E45  00E1               	movwf	___flsub@b+2
  9511  0E46  0141               	movlb	1	; select bank1
  9512  0E47  084E               	movf	(efgtoa@h+1)^(0+128),w
  9513  0E48  0140               	movlb	0	; select bank0
  9514  0E49  00E0               	movwf	___flsub@b+1
  9515  0E4A  0141               	movlb	1	; select bank1
  9516  0E4B  084D               	movf	efgtoa@h^(0+128),w
  9517  0E4C  0140               	movlb	0	; select bank0
  9518  0E4D  00DF               	movwf	___flsub@b
  9519  0E4E  0008               	return
  9520  0E4F                     __end_ofPL34:	
  9521  0E4F                     PL36:	
  9522  0E4F  30A0               	movlw	(low (_dbuf| (0+512)))& (0+255)
  9523  0E50  0140               	movlb	0	; select bank0
  9524  0E51  00AE               	movwf	pad@buf
  9525  0E52  0141               	movlb	1	; select bank1
  9526  0E53  084B               	movf	(efgtoa@w+1)^(0+128),w
  9527  0E54  0140               	movlb	0	; select bank0
  9528  0E55  00B0               	movwf	pad@p+1
  9529  0E56  0141               	movlb	1	; select bank1
  9530  0E57  084A               	movf	efgtoa@w^(0+128),w
  9531  0E58  0140               	movlb	0	; select bank0
  9532  0E59  00AF               	movwf	pad@p
  9533  0E5A  0141               	movlb	1	; select bank1
  9534  0E5B  0846               	movf	efgtoa@fp^(0+128),w
  9535  0E5C  0008               	return
  9536  0E5D                     __end_ofPL36:	
  9537  0E5D                     PL48:	
  9538  0E5D  0141               	movlb	1	; select bank1
  9539  0E5E  085A               	movf	(efgtoa@g+3)^(0+128),w
  9540  0E5F  0140               	movlb	0	; select bank0
  9541  0E60  00A3               	movwf	___fpclassifyf@x+3
  9542  0E61  0141               	movlb	1	; select bank1
  9543  0E62  0859               	movf	(efgtoa@g+2)^(0+128),w
  9544  0E63  0140               	movlb	0	; select bank0
  9545  0E64  00A2               	movwf	___fpclassifyf@x+2
  9546  0E65  0141               	movlb	1	; select bank1
  9547  0E66  0858               	movf	(efgtoa@g+1)^(0+128),w
  9548  0E67  0140               	movlb	0	; select bank0
  9549  0E68  00A1               	movwf	___fpclassifyf@x+1
  9550  0E69  0141               	movlb	1	; select bank1
  9551  0E6A  0857               	movf	efgtoa@g^(0+128),w
  9552  0E6B  0140               	movlb	0	; select bank0
  9553  0E6C  00A0               	movwf	___fpclassifyf@x
  9554  0E6D  0008               	return
  9555  0E6E                     __end_ofPL48:	
  9556  0E6E                     PL56:	
  9557  0E6E  0856               	movf	(efgtoa@i+1)^(0+128),w
  9558  0E6F  3A80               	xorlw	128
  9559  0E70  0140               	movlb	0	; select bank0
  9560  0E71  00ED               	movwf	??_efgtoa
  9561  0E72  0141               	movlb	1	; select bank1
  9562  0E73  083F               	movf	(efgtoa@m+1)^(0+128),w
  9563  0E74  3A80               	xorlw	128
  9564  0E75  0140               	movlb	0	; select bank0
  9565  0E76  026D               	subwf	??_efgtoa,w
  9566  0E77  1D03               	skipz
  9567  0E78  0008               	return
  9568  0E79  0141               	movlb	1	; select bank1
  9569  0E7A  083E               	movf	efgtoa@m^(0+128),w
  9570  0E7B  0255               	subwf	efgtoa@i^(0+128),w
  9571  0E7C  0008               	return
  9572  0E7D                     __end_ofPL56:	
  9573  0E7D                     PL80:	
  9574  0E7D  085D               	movf	efgtoa@n^(0+128),w
  9575  0E7E  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  9576  0E7F  0086               	movwf	6
  9577  0E80  3002               	movlw	2	; select bank5/6
  9578  0E81  0087               	movwf	7
  9579  0E82  0008               	return
  9580  0E83                     __end_ofPL80:	
  9581  0E83                     PL84:	
  9582  0E83  0081               	movwf	1
  9583  0E84  0ADD               	incf	efgtoa@n^(0+128),f
  9584  0E85  1903               	skipnz
  9585  0E86  0ADE               	incf	(efgtoa@n+1)^(0+128),f
  9586  0E87  30FF               	movlw	-1
  9587  0E88  07CA               	addwf	efgtoa@w^(0+128),f
  9588  0E89  0008               	return
  9589  0E8A                     __end_ofPL84:	
  9590  0E8A                     PL94:	
  9591  0E8A  084A               	movf	?___fldiv+3,w
  9592  0E8B  00E3               	movwf	floorf@x+3
  9593  0E8C  0849               	movf	?___fldiv+2,w
  9594  0E8D  00E2               	movwf	floorf@x+2
  9595  0E8E  0848               	movf	?___fldiv+1,w
  9596  0E8F  00E1               	movwf	floorf@x+1
  9597  0E90  0847               	movf	?___fldiv,w
  9598  0E91  00E0               	movwf	floorf@x
  9599  0E92  0008               	return
  9600  0E93                     __end_ofPL94:	
  9601  0E93                     PL104:	
  9602  0E93  00E2               	movwf	(efgtoa@u+3)^(0+128)
  9603  0E94  3080               	movlw	128
  9604  0E95  00E1               	movwf	(efgtoa@u+2)^(0+128)
  9605  0E96  01E0               	clrf	(efgtoa@u+1)^(0+128)
  9606  0E97  01DF               	clrf	efgtoa@u^(0+128)
  9607  0E98  01DB               	clrf	efgtoa@e^(0+128)
  9608  0E99  01DC               	clrf	(efgtoa@e+1)^(0+128)
  9609  0E9A  0008               	return
  9610  0E9B                     __end_ofPL104:	
  9611  0E9B                     PL110:	
  9612  0E9B  0821               	movf	?___fltol+1,w
  9613  0E9C  0141               	movlb	1	; select bank1
  9614  0E9D  00C3               	movwf	(efgtoa@d+1)^(0+128)
  9615  0E9E  0140               	movlb	0	; select bank0
  9616  0E9F  0820               	movf	?___fltol,w
  9617  0EA0  0141               	movlb	1	; select bank1
  9618  0EA1  00C2               	movwf	efgtoa@d^(0+128)
  9619  0EA2  0008               	return
  9620  0EA3                     __end_ofPL110:	
  9621  0EA3                     PL112:	
  9622  0EA3  3A80               	xorlw	128
  9623  0EA4  0140               	movlb	0	; select bank0
  9624  0EA5  00ED               	movwf	??_efgtoa
  9625  0EA6  3080               	movlw	128
  9626  0EA7  026D               	subwf	??_efgtoa,w
  9627  0EA8  0008               	return
  9628  0EA9                     __end_ofPL112:	
  9629  0EA9                     PL116:	
  9630  0EA9  082F               	movf	?_pad+1,w
  9631  0EAA  00E9               	movwf	?_efgtoa+1
  9632  0EAB  082E               	movf	?_pad,w
  9633  0EAC  00E8               	movwf	?_efgtoa
  9634  0EAD  0008               	return
  9635  0EAE                     __end_ofPL116:	
  9636  0EAE                     PL122:	
  9637  0EAE  0855               	movf	efgtoa@i^(0+128),w
  9638  0EAF  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  9639  0EB0  0086               	movwf	6
  9640  0EB1  3002               	movlw	2	; select bank5/6
  9641  0EB2  0087               	movwf	7
  9642  0EB3  0008               	return
  9643  0EB4                     __end_ofPL122:	
  9644  0EB4                     PL136:	
  9645  0EB4  01D9               	clrf	___fldiv@new_exp+1
  9646  0EB5  01CB               	clrf	___fldiv@b
  9647  0EB6  01CC               	clrf	___fldiv@b+1
  9648  0EB7  01CD               	clrf	___fldiv@b+2
  9649  0EB8  01CE               	clrf	___fldiv@b+3
  9650  0EB9  0008               	return
  9651  0EBA                     __end_ofPL136:	
  9652  0EBA                     PL138:	
  9653  0EBA  0859               	movf	___fldiv@new_exp+1,w
  9654  0EBB  3A80               	xorlw	128
  9655  0EBC  00CF               	movwf	??___fldiv
  9656  0EBD  3080               	movlw	128
  9657  0EBE  024F               	subwf	??___fldiv,w
  9658  0EBF  0008               	return
  9659  0EC0                     __end_ofPL138:	
  9660  0EC0                     PL146:	
  9661  0EC0  3080               	movlw	128
  9662  0EC1  01CF               	clrf	??___flge
  9663  0EC2  01D0               	clrf	??___flge+1
  9664  0EC3  01D1               	clrf	??___flge+2
  9665  0EC4  00D2               	movwf	??___flge+3
  9666  0EC5  0008               	return
  9667  0EC6                     __end_ofPL146:	
  9668  0EC6                     PL158:	
  9669  0EC6  00A1               	movwf	strcpy@src+1
  9670  0EC7  0141               	movlb	1	; select bank1
  9671  0EC8  085D               	movf	efgtoa@n^(0+128),w
  9672  0EC9  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
  9673  0ECA  0008               	return
  9674  0ECB                     __end_ofPL158:	
  9675  0ECB                     PL172:	
  9676  0ECB  01CB               	clrf	___flge@ff2
  9677  0ECC  01CC               	clrf	___flge@ff2+1
  9678  0ECD  01CD               	clrf	___flge@ff2+2
  9679  0ECE  01CE               	clrf	___flge@ff2+3
  9680  0ECF  0008               	return
  9681  0ED0                     __end_ofPL172:	
  9682  0ED0                     __ptext24:	
  9683 ;; *************** function ___fleq *****************
  9684 ;; Defined at:
  9685 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\fleq.c"
  9686 ;; Parameters:    Size  Location     Type
  9687 ;;  ff1             4    0[BANK0 ] long 
  9688 ;;  ff2             4    4[BANK0 ] long 
  9689 ;; Auto vars:     Size  Location     Type
  9690 ;;		None
  9691 ;; Return value:  Size  Location     Type
  9692 ;;		None               void
  9693 ;; Registers used:
  9694 ;;		wreg, status,2, status,0
  9695 ;; Tracked objects:
  9696 ;;		On entry : 3F/0
  9697 ;;		On exit  : 3F/0
  9698 ;;		Unchanged: 0/0
  9699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9700 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9702 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9703 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9704 ;;Total ram usage:       12 bytes
  9705 ;; Hardware stack levels used:    1
  9706 ;; Hardware stack levels required when called:    3
  9707 ;; This function calls:
  9708 ;;		Nothing
  9709 ;; This function is called by:
  9710 ;;		_efgtoa
  9711 ;; This function uses a non-reentrant model
  9712 ;;
  9713                           
  9714                           
  9715                           ;psect for function ___fleq
  9716  0ED0                     ___fleq:	
  9717                           
  9718                           ;incstack = 0
  9719                           ; Regs used in ___fleq: [wreg+status,2+status,0]
  9720  0ED0  3080               	movlw	128
  9721  0ED1  01A8               	clrf	??___fleq
  9722  0ED2  01A9               	clrf	??___fleq+1
  9723  0ED3  0522               	andwf	___fleq@ff1+2,w
  9724  0ED4  00AA               	movwf	??___fleq+2
  9725  0ED5  307F               	movlw	127
  9726  0ED6  0523               	andwf	___fleq@ff1+3,w
  9727  0ED7  00AB               	movwf	??___fleq+3
  9728  0ED8  042A               	iorwf	??___fleq+2,w
  9729  0ED9  0429               	iorwf	??___fleq+1,w
  9730  0EDA  0428               	iorwf	??___fleq,w
  9731  0EDB  1D03               	skipz
  9732  0EDC  2EE1               	goto	l4010
  9733  0EDD  01A0               	clrf	___fleq@ff1
  9734  0EDE  01A1               	clrf	___fleq@ff1+1
  9735  0EDF  01A2               	clrf	___fleq@ff1+2
  9736  0EE0  01A3               	clrf	___fleq@ff1+3
  9737  0EE1                     l4010:	
  9738  0EE1  3080               	movlw	128
  9739  0EE2  01A8               	clrf	??___fleq
  9740  0EE3  01A9               	clrf	??___fleq+1
  9741  0EE4  0526               	andwf	___fleq@ff2+2,w
  9742  0EE5  00AA               	movwf	??___fleq+2
  9743  0EE6  307F               	movlw	127
  9744  0EE7  0527               	andwf	___fleq@ff2+3,w
  9745  0EE8  00AB               	movwf	??___fleq+3
  9746  0EE9  042A               	iorwf	??___fleq+2,w
  9747  0EEA  0429               	iorwf	??___fleq+1,w
  9748  0EEB  0428               	iorwf	??___fleq,w
  9749  0EEC  1D03               	skipz
  9750  0EED  2EF0               	goto	l4014
  9751  0EEE  2704  3188         	fcall	PL168	;call to abstracted procedure
  9752  0EF0                     l4014:	
  9753  0EF0  0827               	movf	___fleq@ff2+3,w
  9754  0EF1  0623               	xorwf	___fleq@ff1+3,w
  9755  0EF2  1D03               	skipz
  9756  0EF3  2EFE               	goto	u4555
  9757  0EF4  0826               	movf	___fleq@ff2+2,w
  9758  0EF5  0622               	xorwf	___fleq@ff1+2,w
  9759  0EF6  1D03               	skipz
  9760  0EF7  2EFE               	goto	u4555
  9761  0EF8  0825               	movf	___fleq@ff2+1,w
  9762  0EF9  0621               	xorwf	___fleq@ff1+1,w
  9763  0EFA  1D03               	skipz
  9764  0EFB  2EFE               	goto	u4555
  9765  0EFC  0824               	movf	___fleq@ff2,w
  9766  0EFD  0620               	xorwf	___fleq@ff1,w
  9767  0EFE                     u4555:	
  9768  0EFE  1903               	skipnz
  9769  0EFF  2F02               	goto	l4018
  9770  0F00  1003               	clrc
  9771  0F01  0008               	return
  9772  0F02                     l4018:	
  9773  0F02  1403               	setc
  9774  0F03  0008               	return
  9775  0F04                     __end_of___fleq:	
  9776  0F04                     PL168:	
  9777  0F04  01A4               	clrf	___fleq@ff2
  9778  0F05  01A5               	clrf	___fleq@ff2+1
  9779  0F06  01A6               	clrf	___fleq@ff2+2
  9780  0F07  01A7               	clrf	___fleq@ff2+3
  9781  0F08  0008               	return
  9782  0F09                     __end_ofPL168:	
  9783  0F09                     __ptext21:	
  9784 ;; *************** function ___fltol *****************
  9785 ;; Defined at:
  9786 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\fltol.c"
  9787 ;; Parameters:    Size  Location     Type
  9788 ;;  f1              4    0[BANK0 ] int 
  9789 ;; Auto vars:     Size  Location     Type
  9790 ;;  exp1            1    9[BANK0 ] unsigned char 
  9791 ;;  sign1           1    8[BANK0 ] unsigned char 
  9792 ;; Return value:  Size  Location     Type
  9793 ;;                  4    0[BANK0 ] long 
  9794 ;; Registers used:
  9795 ;;		wreg, status,2, status,0
  9796 ;; Tracked objects:
  9797 ;;		On entry : 3F/0
  9798 ;;		On exit  : 3F/0
  9799 ;;		Unchanged: 0/0
  9800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9801 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9802 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9803 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9804 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9805 ;;Total ram usage:       10 bytes
  9806 ;; Hardware stack levels used:    1
  9807 ;; Hardware stack levels required when called:    3
  9808 ;; This function calls:
  9809 ;;		Nothing
  9810 ;; This function is called by:
  9811 ;;		_efgtoa
  9812 ;; This function uses a non-reentrant model
  9813 ;;
  9814                           
  9815                           
  9816                           ;psect for function ___fltol
  9817  0F09                     ___fltol:	
  9818                           
  9819                           ;incstack = 0
  9820                           ; Regs used in ___fltol: [wreg+status,2+status,0]
  9821  0F09  2750  3188         	fcall	PL88	;call to abstracted procedure
  9822  0F0B  1003               	clrc
  9823  0F0C  0D26               	rlf	??___fltol+2,w
  9824  0F0D  0D27               	rlf	??___fltol+3,w
  9825  0F0E  00A9               	movwf	___fltol@exp1
  9826  0F0F  0829               	movf	___fltol@exp1,w
  9827  0F10  1D03               	btfss	3,2
  9828  0F11  2F17               	goto	l4054
  9829  0F12                     l4052:	
  9830  0F12  01A0               	clrf	?___fltol
  9831  0F13  01A1               	clrf	?___fltol+1
  9832  0F14  01A2               	clrf	?___fltol+2
  9833  0F15  01A3               	clrf	?___fltol+3
  9834  0F16  0008               	return
  9835  0F17                     l4054:	
  9836  0F17  2750  3188         	fcall	PL88	;call to abstracted procedure
  9837  0F19  301F               	movlw	31
  9838  0F1A                     u4635:	
  9839  0F1A  36A7               	lsrf	??___fltol+3,f
  9840  0F1B  0CA6               	rrf	??___fltol+2,f
  9841  0F1C  0CA5               	rrf	??___fltol+1,f
  9842  0F1D  0CA4               	rrf	??___fltol,f
  9843  0F1E  0B89               	decfsz	9,f
  9844  0F1F  2F1A               	goto	u4635
  9845  0F20  0824               	movf	??___fltol,w
  9846  0F21  00A8               	movwf	___fltol@sign1
  9847  0F22  3096               	movlw	150
  9848  0F23  17A2               	bsf	___fltol@f1+2,7
  9849  0F24  01A3               	clrf	___fltol@f1+3
  9850  0F25  02A9               	subwf	___fltol@exp1,f
  9851  0F26  1FA9               	btfss	___fltol@exp1,7
  9852  0F27  2F34               	goto	l4072
  9853  0F28  0829               	movf	___fltol@exp1,w
  9854  0F29  3A80               	xorlw	128
  9855  0F2A  3E97               	addlw	151
  9856  0F2B  1C03               	btfss	3,0
  9857  0F2C  2F12               	goto	l4052
  9858  0F2D                     l4068:	
  9859  0F2D  36A3               	lsrf	___fltol@f1+3,f
  9860  0F2E  0CA2               	rrf	___fltol@f1+2,f
  9861  0F2F  0CA1               	rrf	___fltol@f1+1,f
  9862  0F30  0CA0               	rrf	___fltol@f1,f
  9863  0F31  0FA9               	incfsz	___fltol@exp1,f
  9864  0F32  2F2D               	goto	l4068
  9865  0F33  2F41               	goto	l4080
  9866  0F34                     l4072:	
  9867  0F34  3020               	movlw	32
  9868  0F35  0229               	subwf	___fltol@exp1,w
  9869  0F36  1803               	btfsc	3,0
  9870  0F37  2F12               	goto	l4052
  9871  0F38                     l4078:	
  9872  0F38  0829               	movf	___fltol@exp1,w
  9873  0F39  1903               	btfsc	3,2
  9874  0F3A  2F41               	goto	l4080
  9875  0F3B  35A0               	lslf	___fltol@f1,f
  9876  0F3C  0DA1               	rlf	___fltol@f1+1,f
  9877  0F3D  0DA2               	rlf	___fltol@f1+2,f
  9878  0F3E  0DA3               	rlf	___fltol@f1+3,f
  9879  0F3F  03A9               	decf	___fltol@exp1,f
  9880  0F40  2F38               	goto	l4078
  9881  0F41                     l4080:	
  9882  0F41  0828               	movf	___fltol@sign1,w
  9883  0F42  1903               	btfsc	3,2
  9884  0F43  0008               	return
  9885  0F44  09A0               	comf	___fltol@f1,f
  9886  0F45  09A1               	comf	___fltol@f1+1,f
  9887  0F46  09A2               	comf	___fltol@f1+2,f
  9888  0F47  09A3               	comf	___fltol@f1+3,f
  9889  0F48  0AA0               	incf	___fltol@f1,f
  9890  0F49  1903               	skipnz
  9891  0F4A  0AA1               	incf	___fltol@f1+1,f
  9892  0F4B  1903               	skipnz
  9893  0F4C  0AA2               	incf	___fltol@f1+2,f
  9894  0F4D  1903               	skipnz
  9895  0F4E  0AA3               	incf	___fltol@f1+3,f
  9896  0F4F  0008               	return
  9897  0F50                     __end_of___fltol:	
  9898  0F50                     PL88:	
  9899  0F50  0820               	movf	___fltol@f1,w
  9900  0F51  00A4               	movwf	??___fltol
  9901  0F52  0821               	movf	___fltol@f1+1,w
  9902  0F53  00A5               	movwf	??___fltol+1
  9903  0F54  0822               	movf	___fltol@f1+2,w
  9904  0F55  00A6               	movwf	??___fltol+2
  9905  0F56  0823               	movf	___fltol@f1+3,w
  9906  0F57  00A7               	movwf	??___fltol+3
  9907  0F58  0008               	return
  9908  0F59                     __end_ofPL88:	
  9909  0F59                     __ptext20:	
  9910 ;; *************** function ___fpclassifyf *****************
  9911 ;; Defined at:
  9912 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\__fpclassifyf.c"
  9913 ;; Parameters:    Size  Location     Type
  9914 ;;  x               4    0[BANK0 ] float 
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;  u               4   10[BANK0 ] struct .
  9917 ;;  e               2    8[BANK0 ] int 
  9918 ;; Return value:  Size  Location     Type
  9919 ;;                  2    0[BANK0 ] int 
  9920 ;; Registers used:
  9921 ;;		wreg, status,2, status,0
  9922 ;; Tracked objects:
  9923 ;;		On entry : 3F/0
  9924 ;;		On exit  : 3F/0
  9925 ;;		Unchanged: 0/0
  9926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9927 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9928 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9929 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9930 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9931 ;;Total ram usage:       14 bytes
  9932 ;; Hardware stack levels used:    1
  9933 ;; Hardware stack levels required when called:    3
  9934 ;; This function calls:
  9935 ;;		Nothing
  9936 ;; This function is called by:
  9937 ;;		_efgtoa
  9938 ;; This function uses a non-reentrant model
  9939 ;;
  9940                           
  9941                           
  9942                           ;psect for function ___fpclassifyf
  9943  0F59                     ___fpclassifyf:	
  9944                           
  9945                           ;incstack = 0
  9946                           ; Regs used in ___fpclassifyf: [wreg+status,2+status,0]
  9947  0F59  0143               	movlb	3	; select bank3
  9948  0F5A  0827               	movf	(___fpclassifyf@F453+3)^(0+384),w
  9949  0F5B  0140               	movlb	0	; select bank0
  9950  0F5C  00AD               	movwf	___fpclassifyf@u+3
  9951  0F5D  0143               	movlb	3	; select bank3
  9952  0F5E  0826               	movf	(___fpclassifyf@F453+2)^(0+384),w
  9953  0F5F  0140               	movlb	0	; select bank0
  9954  0F60  00AC               	movwf	___fpclassifyf@u+2
  9955  0F61  0143               	movlb	3	; select bank3
  9956  0F62  0825               	movf	(___fpclassifyf@F453+1)^(0+384),w
  9957  0F63  0140               	movlb	0	; select bank0
  9958  0F64  00AB               	movwf	___fpclassifyf@u+1
  9959  0F65  0143               	movlb	3	; select bank3
  9960  0F66  0824               	movf	___fpclassifyf@F453^(0+384),w
  9961  0F67  0140               	movlb	0	; select bank0
  9962  0F68  00AA               	movwf	___fpclassifyf@u
  9963  0F69  0823               	movf	___fpclassifyf@x+3,w
  9964  0F6A  00AD               	movwf	___fpclassifyf@u+3
  9965  0F6B  0822               	movf	___fpclassifyf@x+2,w
  9966  0F6C  00AC               	movwf	___fpclassifyf@u+2
  9967  0F6D  0821               	movf	___fpclassifyf@x+1,w
  9968  0F6E  00AB               	movwf	___fpclassifyf@u+1
  9969  0F6F  0820               	movf	___fpclassifyf@x,w
  9970  0F70  00AA               	movwf	___fpclassifyf@u
  9971  0F71  27B8  3188         	fcall	PL76	;call to abstracted procedure
  9972  0F73  0D26               	rlf	??___fpclassifyf+2,w
  9973  0F74  0D27               	rlf	??___fpclassifyf+3,w
  9974  0F75  00A4               	movwf	??___fpclassifyf
  9975  0F76  01A5               	clrf	??___fpclassifyf+1
  9976  0F77  01A6               	clrf	??___fpclassifyf+2
  9977  0F78  01A7               	clrf	??___fpclassifyf+3
  9978  0F79  0DA5               	rlf	??___fpclassifyf+1,f
  9979  0F7A  0825               	movf	??___fpclassifyf+1,w
  9980  0F7B  00A9               	movwf	___fpclassifyf@e+1
  9981  0F7C  0824               	movf	??___fpclassifyf,w
  9982  0F7D  00A8               	movwf	___fpclassifyf@e
  9983  0F7E  30FF               	movlw	255
  9984  0F7F  05A8               	andwf	___fpclassifyf@e,f
  9985  0F80  01A9               	clrf	___fpclassifyf@e+1
  9986  0F81  0828               	movf	___fpclassifyf@e,w
  9987  0F82  0429               	iorwf	___fpclassifyf@e+1,w
  9988  0F83  1D03               	btfss	3,2
  9989  0F84  2F9A               	goto	l3778
  9990  0F85  082A               	movf	___fpclassifyf@u,w
  9991  0F86  27B8  3188         	fcall	PL76	;call to abstracted procedure
  9992  0F88  35A4               	lslf	??___fpclassifyf,f
  9993  0F89  0DA5               	rlf	??___fpclassifyf+1,f
  9994  0F8A  0DA6               	rlf	??___fpclassifyf+2,f
  9995  0F8B  0DA7               	rlf	??___fpclassifyf+3,f
  9996  0F8C  0827               	movf	??___fpclassifyf+3,w
  9997  0F8D  0426               	iorwf	??___fpclassifyf+2,w
  9998  0F8E  0425               	iorwf	??___fpclassifyf+1,w
  9999  0F8F  0424               	iorwf	??___fpclassifyf,w
 10000  0F90  1D03               	skipz
 10001  0F91  2F96               	goto	l3774
 10002  0F92  3002               	movlw	2
 10003  0F93  00A0               	movwf	?___fpclassifyf
 10004  0F94  01A1               	clrf	?___fpclassifyf+1
 10005  0F95  0008               	return
 10006  0F96                     l3774:	
 10007  0F96  3003               	movlw	3
 10008  0F97  00A0               	movwf	?___fpclassifyf
 10009  0F98  01A1               	clrf	?___fpclassifyf+1
 10010  0F99  0008               	return
 10011  0F9A                     l3778:	
 10012  0F9A  0A28               	incf	___fpclassifyf@e,w
 10013  0F9B  0429               	iorwf	___fpclassifyf@e+1,w
 10014  0F9C  1D03               	btfss	3,2
 10015  0F9D  2FB4               	goto	l3784
 10016  0F9E  082A               	movf	___fpclassifyf@u,w
 10017  0F9F  27B8  3188         	fcall	PL76	;call to abstracted procedure
 10018  0FA1  3009               	movlw	9
 10019  0FA2                     u4055:	
 10020  0FA2  35A4               	lslf	??___fpclassifyf,f
 10021  0FA3  0DA5               	rlf	??___fpclassifyf+1,f
 10022  0FA4  0DA6               	rlf	??___fpclassifyf+2,f
 10023  0FA5  0DA7               	rlf	??___fpclassifyf+3,f
 10024  0FA6  0B89               	decfsz	9,f
 10025  0FA7  2FA2               	goto	u4055
 10026  0FA8  0827               	movf	??___fpclassifyf+3,w
 10027  0FA9  0426               	iorwf	??___fpclassifyf+2,w
 10028  0FAA  0425               	iorwf	??___fpclassifyf+1,w
 10029  0FAB  0424               	iorwf	??___fpclassifyf,w
 10030  0FAC  1D03               	btfss	3,2
 10031  0FAD  2FB0               	goto	u4060
 10032  0FAE  3001               	movlw	1
 10033  0FAF  2FB1               	goto	u4070
 10034  0FB0                     u4060:	
 10035  0FB0  3000               	movlw	0
 10036  0FB1                     u4070:	
 10037  0FB1  00A0               	movwf	?___fpclassifyf
 10038  0FB2  01A1               	clrf	?___fpclassifyf+1
 10039  0FB3  0008               	return
 10040  0FB4                     l3784:	
 10041  0FB4  3004               	movlw	4
 10042  0FB5  00A0               	movwf	?___fpclassifyf
 10043  0FB6  01A1               	clrf	?___fpclassifyf+1
 10044  0FB7  0008               	return
 10045  0FB8                     __end_of___fpclassifyf:	
 10046  0FB8                     PL76:	
 10047  0FB8  00A4               	movwf	??___fpclassifyf
 10048  0FB9  082B               	movf	___fpclassifyf@u+1,w
 10049  0FBA  00A5               	movwf	??___fpclassifyf+1
 10050  0FBB  082C               	movf	___fpclassifyf@u+2,w
 10051  0FBC  00A6               	movwf	??___fpclassifyf+2
 10052  0FBD  082D               	movf	___fpclassifyf@u+3,w
 10053  0FBE  00A7               	movwf	??___fpclassifyf+3
 10054  0FBF  0008               	return
 10055  0FC0                     __end_ofPL76:	
 10056  0FC0                     __ptext26:	
 10057 ;; *************** function ___awdiv *****************
 10058 ;; Defined at:
 10059 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awdiv.c"
 10060 ;; Parameters:    Size  Location     Type
 10061 ;;  divisor         2    0[BANK0 ] int 
 10062 ;;  dividend        2    2[BANK0 ] int 
 10063 ;; Auto vars:     Size  Location     Type
 10064 ;;  quotient        2    6[BANK0 ] int 
 10065 ;;  sign            1    5[BANK0 ] unsigned char 
 10066 ;;  counter         1    4[BANK0 ] unsigned char 
 10067 ;; Return value:  Size  Location     Type
 10068 ;;                  2    0[BANK0 ] int 
 10069 ;; Registers used:
 10070 ;;		wreg, status,2, status,0
 10071 ;; Tracked objects:
 10072 ;;		On entry : 3F/0
 10073 ;;		On exit  : 3F/0
 10074 ;;		Unchanged: 0/0
 10075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10076 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10077 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10079 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10080 ;;Total ram usage:        8 bytes
 10081 ;; Hardware stack levels used:    1
 10082 ;; Hardware stack levels required when called:    3
 10083 ;; This function calls:
 10084 ;;		Nothing
 10085 ;; This function is called by:
 10086 ;;		_efgtoa
 10087 ;; This function uses a non-reentrant model
 10088 ;;
 10089                           
 10090                           
 10091                           ;psect for function ___awdiv
 10092  0FC0                     ___awdiv:	
 10093                           
 10094                           ;incstack = 0
 10095                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 10096  0FC0  01A5               	clrf	___awdiv@sign
 10097  0FC1  1FA1               	btfss	___awdiv@divisor+1,7
 10098  0FC2  2FCA               	goto	l3934
 10099  0FC3  09A0               	comf	___awdiv@divisor,f
 10100  0FC4  09A1               	comf	___awdiv@divisor+1,f
 10101  0FC5  0AA0               	incf	___awdiv@divisor,f
 10102  0FC6  1903               	skipnz
 10103  0FC7  0AA1               	incf	___awdiv@divisor+1,f
 10104  0FC8  01A5               	clrf	___awdiv@sign
 10105  0FC9  0AA5               	incf	___awdiv@sign,f
 10106  0FCA                     l3934:	
 10107  0FCA  1FA3               	btfss	___awdiv@dividend+1,7
 10108  0FCB  2FD3               	goto	l3940
 10109  0FCC  09A2               	comf	___awdiv@dividend,f
 10110  0FCD  09A3               	comf	___awdiv@dividend+1,f
 10111  0FCE  0AA2               	incf	___awdiv@dividend,f
 10112  0FCF  1903               	skipnz
 10113  0FD0  0AA3               	incf	___awdiv@dividend+1,f
 10114  0FD1  3001               	movlw	1
 10115  0FD2  06A5               	xorwf	___awdiv@sign,f
 10116  0FD3                     l3940:	
 10117  0FD3  01A6               	clrf	___awdiv@quotient
 10118  0FD4  01A7               	clrf	___awdiv@quotient+1
 10119  0FD5  0820               	movf	___awdiv@divisor,w
 10120  0FD6  0421               	iorwf	___awdiv@divisor+1,w
 10121  0FD7  1903               	btfsc	3,2
 10122  0FD8  2FF3               	goto	l3962
 10123  0FD9  01A4               	clrf	___awdiv@counter
 10124  0FDA                     L12:	
 10125  0FDA  0AA4               	incf	___awdiv@counter,f
 10126  0FDB  1BA1               	btfsc	___awdiv@divisor+1,7
 10127  0FDC  2FE0               	goto	l3950
 10128  0FDD  35A0               	lslf	___awdiv@divisor,f
 10129  0FDE  0DA1               	rlf	___awdiv@divisor+1,f
 10130  0FDF  2FDA               	goto	L12
 10131  0FE0                     l3950:	
 10132  0FE0  35A6               	lslf	___awdiv@quotient,f
 10133  0FE1  0DA7               	rlf	___awdiv@quotient+1,f
 10134  0FE2  0821               	movf	___awdiv@divisor+1,w
 10135  0FE3  0223               	subwf	___awdiv@dividend+1,w
 10136  0FE4  1D03               	skipz
 10137  0FE5  2FE8               	goto	u4435
 10138  0FE6  0820               	movf	___awdiv@divisor,w
 10139  0FE7  0222               	subwf	___awdiv@dividend,w
 10140  0FE8                     u4435:	
 10141  0FE8  1C03               	skipc
 10142  0FE9  2FEF               	goto	l3958
 10143  0FEA  0820               	movf	___awdiv@divisor,w
 10144  0FEB  02A2               	subwf	___awdiv@dividend,f
 10145  0FEC  0821               	movf	___awdiv@divisor+1,w
 10146  0FED  3BA3               	subwfb	___awdiv@dividend+1,f
 10147  0FEE  1426               	bsf	___awdiv@quotient,0
 10148  0FEF                     l3958:	
 10149  0FEF  36A1               	lsrf	___awdiv@divisor+1,f
 10150  0FF0  0CA0               	rrf	___awdiv@divisor,f
 10151  0FF1  0BA4               	decfsz	___awdiv@counter,f
 10152  0FF2  2FE0               	goto	l3950
 10153  0FF3                     l3962:	
 10154  0FF3  0825               	movf	___awdiv@sign,w
 10155  0FF4  1903               	btfsc	3,2
 10156  0FF5  2FFB               	goto	l3966
 10157  0FF6  09A6               	comf	___awdiv@quotient,f
 10158  0FF7  09A7               	comf	___awdiv@quotient+1,f
 10159  0FF8  0AA6               	incf	___awdiv@quotient,f
 10160  0FF9  1903               	skipnz
 10161  0FFA  0AA7               	incf	___awdiv@quotient+1,f
 10162  0FFB                     l3966:	
 10163  0FFB  0827               	movf	___awdiv@quotient+1,w
 10164  0FFC  00A1               	movwf	?___awdiv+1
 10165  0FFD  0826               	movf	___awdiv@quotient,w
 10166  0FFE  00A0               	movwf	?___awdiv
 10167  0FFF  0008               	return
 10168  1000                     __end_of___awdiv:	
 10169                           
 10170                           	psect	text17
 10171  1C31                     __ptext17:	
 10172 ;; *************** function _isupper *****************
 10173 ;; Defined at:
 10174 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\isupper.c"
 10175 ;; Parameters:    Size  Location     Type
 10176 ;;  c               2    0[BANK0 ] int 
 10177 ;; Auto vars:     Size  Location     Type
 10178 ;;		None
 10179 ;; Return value:  Size  Location     Type
 10180 ;;                  2    0[BANK0 ] int 
 10181 ;; Registers used:
 10182 ;;		wreg, status,2, status,0
 10183 ;; Tracked objects:
 10184 ;;		On entry : 0/0
 10185 ;;		On exit  : 3F/0
 10186 ;;		Unchanged: 0/0
 10187 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10188 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10189 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10190 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10191 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10192 ;;Total ram usage:        4 bytes
 10193 ;; Hardware stack levels used:    1
 10194 ;; Hardware stack levels required when called:    3
 10195 ;; This function calls:
 10196 ;;		Nothing
 10197 ;; This function is called by:
 10198 ;;		_efgtoa
 10199 ;;		_vfpfcnvrt
 10200 ;;		_tolower
 10201 ;; This function uses a non-reentrant model
 10202 ;;
 10203                           
 10204                           
 10205                           ;psect for function _isupper
 10206  1C31                     _isupper:	
 10207                           
 10208                           ;incstack = 0
 10209                           ; Regs used in _isupper: [wreg+status,2+status,0]
 10210  1C31  0140               	movlb	0	; select bank0
 10211  1C32  0820               	movf	isupper@c,w
 10212  1C33  3EBF               	addlw	191
 10213  1C34  00A2               	movwf	??_isupper
 10214  1C35  30FF               	movlw	255
 10215  1C36  3D21               	addwfc	isupper@c+1,w
 10216  1C37  00A3               	movwf	??_isupper+1
 10217  1C38  3000               	movlw	0
 10218  1C39  0223               	subwf	??_isupper+1,w
 10219  1C3A  301A               	movlw	26
 10220  1C3B  1903               	skipnz
 10221  1C3C  0222               	subwf	??_isupper,w
 10222  1C3D  1803               	btfsc	3,0
 10223  1C3E  2C41               	goto	u3540
 10224  1C3F  3001               	movlw	1
 10225  1C40  2C42               	goto	u3550
 10226  1C41                     u3540:	
 10227  1C41  3000               	movlw	0
 10228  1C42                     u3550:	
 10229  1C42  00A0               	movwf	?_isupper
 10230  1C43  01A1               	clrf	?_isupper+1
 10231  1C44  0008               	return
 10232  1C45                     __end_of_isupper:	
 10233                           
 10234                           	psect	text19
 10235  103D                     __ptext19:	
 10236 ;; *************** function _floorf *****************
 10237 ;; Defined at:
 10238 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\floorf.c"
 10239 ;; Parameters:    Size  Location     Type
 10240 ;;  x               4   64[BANK0 ] float 
 10241 ;; Auto vars:     Size  Location     Type
 10242 ;;  u               4    6[BANK1 ] struct .
 10243 ;;  m               4    0[BANK1 ] unsigned long 
 10244 ;;  e               2    4[BANK1 ] int 
 10245 ;; Return value:  Size  Location     Type
 10246 ;;                  4   64[BANK0 ] float 
 10247 ;; Registers used:
 10248 ;;		wreg, status,2, status,0
 10249 ;; Tracked objects:
 10250 ;;		On entry : 3F/0
 10251 ;;		On exit  : 0/0
 10252 ;;		Unchanged: 0/0
 10253 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10254 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10255 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10256 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10257 ;;      Totals:         0       8      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10258 ;;Total ram usage:       18 bytes
 10259 ;; Hardware stack levels used:    1
 10260 ;; Hardware stack levels required when called:    3
 10261 ;; This function calls:
 10262 ;;		Nothing
 10263 ;; This function is called by:
 10264 ;;		_efgtoa
 10265 ;; This function uses a non-reentrant model
 10266 ;;
 10267                           
 10268                           
 10269                           ;psect for function _floorf
 10270  103D                     _floorf:	
 10271                           
 10272                           ;incstack = 0
 10273                           ; Regs used in _floorf: [wreg+status,2+status,0]
 10274  103D  0143               	movlb	3	; select bank3
 10275  103E  0823               	movf	(floorf@F514+3)^(0+384),w
 10276  103F  0141               	movlb	1	; select bank1
 10277  1040  00A9               	movwf	(floorf@u+3)^(0+128)
 10278  1041  0143               	movlb	3	; select bank3
 10279  1042  0822               	movf	(floorf@F514+2)^(0+384),w
 10280  1043  0141               	movlb	1	; select bank1
 10281  1044  00A8               	movwf	(floorf@u+2)^(0+128)
 10282  1045  0143               	movlb	3	; select bank3
 10283  1046  0821               	movf	(floorf@F514+1)^(0+384),w
 10284  1047  0141               	movlb	1	; select bank1
 10285  1048  00A7               	movwf	(floorf@u+1)^(0+128)
 10286  1049  0143               	movlb	3	; select bank3
 10287  104A  0820               	movf	floorf@F514^(0+384),w
 10288  104B  0141               	movlb	1	; select bank1
 10289  104C  00A6               	movwf	floorf@u^(0+128)
 10290  104D  0140               	movlb	0	; select bank0
 10291  104E  0863               	movf	floorf@x+3,w
 10292  104F  0141               	movlb	1	; select bank1
 10293  1050  00A9               	movwf	(floorf@u+3)^(0+128)
 10294  1051  0140               	movlb	0	; select bank0
 10295  1052  0862               	movf	floorf@x+2,w
 10296  1053  0141               	movlb	1	; select bank1
 10297  1054  00A8               	movwf	(floorf@u+2)^(0+128)
 10298  1055  0140               	movlb	0	; select bank0
 10299  1056  0861               	movf	floorf@x+1,w
 10300  1057  0141               	movlb	1	; select bank1
 10301  1058  00A7               	movwf	(floorf@u+1)^(0+128)
 10302  1059  0140               	movlb	0	; select bank0
 10303  105A  0860               	movf	floorf@x,w
 10304  105B  0141               	movlb	1	; select bank1
 10305  105C  00A6               	movwf	floorf@u^(0+128)
 10306  105D  2125  3190         	fcall	PL10	;call to abstracted procedure
 10307  105F  0D66               	rlf	??_floorf+2,w
 10308  1060  0D67               	rlf	??_floorf+3,w
 10309  1061  00E4               	movwf	??_floorf
 10310  1062  01E5               	clrf	??_floorf+1
 10311  1063  01E6               	clrf	??_floorf+2
 10312  1064  01E7               	clrf	??_floorf+3
 10313  1065  0DE5               	rlf	??_floorf+1,f
 10314  1066  0865               	movf	??_floorf+1,w
 10315  1067  0141               	movlb	1	; select bank1
 10316  1068  00A5               	movwf	(floorf@e+1)^(0+128)
 10317  1069  0140               	movlb	0	; select bank0
 10318  106A  0864               	movf	??_floorf,w
 10319  106B  0141               	movlb	1	; select bank1
 10320  106C  00A4               	movwf	floorf@e^(0+128)
 10321  106D  3081               	movlw	-127
 10322  106E  01A5               	clrf	(floorf@e+1)^(0+128)
 10323  106F  07A4               	addwf	floorf@e^(0+128),f
 10324  1070  1C03               	skipc
 10325  1071  03A5               	decf	(floorf@e+1)^(0+128),f
 10326  1072  0825               	movf	(floorf@e+1)^(0+128),w
 10327  1073  3A80               	xorlw	128
 10328  1074  0140               	movlb	0	; select bank0
 10329  1075  00E4               	movwf	??_floorf
 10330  1076  3080               	movlw	128
 10331  1077  0264               	subwf	??_floorf,w
 10332  1078  1D03               	skipz
 10333  1079  287D               	goto	u4125
 10334  107A  3017               	movlw	23
 10335  107B  0141               	movlb	1	; select bank1
 10336  107C  0224               	subwf	floorf@e^(0+128),w
 10337  107D                     u4125:	
 10338  107D  1803               	btfsc	3,0
 10339  107E  0008               	return
 10340  107F  0141               	movlb	1	; select bank1
 10341  1080  1BA5               	btfsc	(floorf@e+1)^(0+128),7
 10342  1081  28EE               	goto	l3824
 10343  1082  30FF               	movlw	255
 10344  1083  0140               	movlb	0	; select bank0
 10345  1084  00E4               	movwf	??_floorf
 10346  1085  00E5               	movwf	??_floorf+1
 10347  1086  307F               	movlw	127
 10348  1087  00E6               	movwf	??_floorf+2
 10349  1088  01E7               	clrf	??_floorf+3
 10350  1089  0141               	movlb	1	; select bank1
 10351  108A  0A24               	incf	floorf@e^(0+128),w
 10352  108B  0140               	movlb	0	; select bank0
 10353  108C  2891               	goto	u4140
 10354  108D                     u4145:	
 10355  108D  37E7               	asrf	??_floorf+3,f
 10356  108E  0CE6               	rrf	??_floorf+2,f
 10357  108F  0CE5               	rrf	??_floorf+1,f
 10358  1090  0CE4               	rrf	??_floorf,f
 10359  1091                     u4140:	
 10360  1091  0B89               	decfsz	9,f
 10361  1092  288D               	goto	u4145
 10362  1093  0867               	movf	??_floorf+3,w
 10363  1094  0141               	movlb	1	; select bank1
 10364  1095  00A3               	movwf	(floorf@m+3)^(0+128)
 10365  1096  0140               	movlb	0	; select bank0
 10366  1097  0866               	movf	??_floorf+2,w
 10367  1098  0141               	movlb	1	; select bank1
 10368  1099  00A2               	movwf	(floorf@m+2)^(0+128)
 10369  109A  0140               	movlb	0	; select bank0
 10370  109B  0865               	movf	??_floorf+1,w
 10371  109C  0141               	movlb	1	; select bank1
 10372  109D  00A1               	movwf	(floorf@m+1)^(0+128)
 10373  109E  0140               	movlb	0	; select bank0
 10374  109F  0864               	movf	??_floorf,w
 10375  10A0  0141               	movlb	1	; select bank1
 10376  10A1  00A0               	movwf	floorf@m^(0+128)
 10377  10A2  0526               	andwf	floorf@u^(0+128),w
 10378  10A3  0140               	movlb	0	; select bank0
 10379  10A4  00E4               	movwf	??_floorf
 10380  10A5  0141               	movlb	1	; select bank1
 10381  10A6  0827               	movf	(floorf@u+1)^(0+128),w
 10382  10A7  0521               	andwf	(floorf@m+1)^(0+128),w
 10383  10A8  0140               	movlb	0	; select bank0
 10384  10A9  00E5               	movwf	??_floorf+1
 10385  10AA  0141               	movlb	1	; select bank1
 10386  10AB  0828               	movf	(floorf@u+2)^(0+128),w
 10387  10AC  0522               	andwf	(floorf@m+2)^(0+128),w
 10388  10AD  0140               	movlb	0	; select bank0
 10389  10AE  00E6               	movwf	??_floorf+2
 10390  10AF  0141               	movlb	1	; select bank1
 10391  10B0  0829               	movf	(floorf@u+3)^(0+128),w
 10392  10B1  0523               	andwf	(floorf@m+3)^(0+128),w
 10393  10B2  0140               	movlb	0	; select bank0
 10394  10B3  00E7               	movwf	??_floorf+3
 10395  10B4  0466               	iorwf	??_floorf+2,w
 10396  10B5  0465               	iorwf	??_floorf+1,w
 10397  10B6  0464               	iorwf	??_floorf,w
 10398  10B7  1903               	btfsc	3,2
 10399  10B8  0008               	return
 10400  10B9  0141               	movlb	1	; select bank1
 10401  10BA  0826               	movf	floorf@u^(0+128),w
 10402  10BB  2125  3190         	fcall	PL10	;call to abstracted procedure
 10403  10BD  301F               	movlw	31
 10404  10BE                     u4165:	
 10405  10BE  2134  3190         	fcall	PL174	;call to abstracted procedure
 10406  10C0  0B89               	decfsz	9,f
 10407  10C1  28BE               	goto	u4165
 10408  10C2  0864               	movf	??_floorf,w
 10409  10C3  1903               	btfsc	3,2
 10410  10C4  28CE               	goto	l3822
 10411  10C5  0141               	movlb	1	; select bank1
 10412  10C6  0820               	movf	floorf@m^(0+128),w
 10413  10C7  07A6               	addwf	floorf@u^(0+128),f
 10414  10C8  0821               	movf	(floorf@m+1)^(0+128),w
 10415  10C9  3DA7               	addwfc	(floorf@u+1)^(0+128),f
 10416  10CA  0822               	movf	(floorf@m+2)^(0+128),w
 10417  10CB  3DA8               	addwfc	(floorf@u+2)^(0+128),f
 10418  10CC  0823               	movf	(floorf@m+3)^(0+128),w
 10419  10CD  3DA9               	addwfc	(floorf@u+3)^(0+128),f
 10420  10CE                     l3822:	
 10421  10CE  0141               	movlb	1	; select bank1
 10422  10CF  0920               	comf	floorf@m^(0+128),w
 10423  10D0  0140               	movlb	0	; select bank0
 10424  10D1  00E4               	movwf	??_floorf
 10425  10D2  0141               	movlb	1	; select bank1
 10426  10D3  0921               	comf	(floorf@m+1)^(0+128),w
 10427  10D4  0140               	movlb	0	; select bank0
 10428  10D5  00E5               	movwf	??_floorf+1
 10429  10D6  0141               	movlb	1	; select bank1
 10430  10D7  0922               	comf	(floorf@m+2)^(0+128),w
 10431  10D8  0140               	movlb	0	; select bank0
 10432  10D9  00E6               	movwf	??_floorf+2
 10433  10DA  0141               	movlb	1	; select bank1
 10434  10DB  0923               	comf	(floorf@m+3)^(0+128),w
 10435  10DC  0140               	movlb	0	; select bank0
 10436  10DD  00E7               	movwf	??_floorf+3
 10437  10DE  0864               	movf	??_floorf,w
 10438  10DF  0141               	movlb	1	; select bank1
 10439  10E0  05A6               	andwf	floorf@u^(0+128),f
 10440  10E1  0140               	movlb	0	; select bank0
 10441  10E2  0865               	movf	??_floorf+1,w
 10442  10E3  0141               	movlb	1	; select bank1
 10443  10E4  05A7               	andwf	(floorf@u+1)^(0+128),f
 10444  10E5  0140               	movlb	0	; select bank0
 10445  10E6  0866               	movf	??_floorf+2,w
 10446  10E7  0141               	movlb	1	; select bank1
 10447  10E8  05A8               	andwf	(floorf@u+2)^(0+128),f
 10448  10E9  0140               	movlb	0	; select bank0
 10449  10EA  0867               	movf	??_floorf+3,w
 10450  10EB  0141               	movlb	1	; select bank1
 10451  10EC  05A9               	andwf	(floorf@u+3)^(0+128),f
 10452  10ED  2914               	goto	l1195
 10453  10EE                     l3824:	
 10454  10EE  0826               	movf	floorf@u^(0+128),w
 10455  10EF  2125  3190         	fcall	PL10	;call to abstracted procedure
 10456  10F1  301F               	movlw	31
 10457  10F2                     u4185:	
 10458  10F2  2134  3190         	fcall	PL174	;call to abstracted procedure
 10459  10F4  0B89               	decfsz	9,f
 10460  10F5  28F2               	goto	u4185
 10461  10F6  0864               	movf	??_floorf,w
 10462  10F7  1D03               	btfss	3,2
 10463  10F8  28FF               	goto	l3828
 10464  10F9  0141               	movlb	1	; select bank1
 10465  10FA  01A6               	clrf	floorf@u^(0+128)
 10466  10FB  01A7               	clrf	(floorf@u+1)^(0+128)
 10467  10FC  01A8               	clrf	(floorf@u+2)^(0+128)
 10468  10FD  01A9               	clrf	(floorf@u+3)^(0+128)
 10469  10FE  2914               	goto	l1195
 10470  10FF                     l3828:	
 10471  10FF  0141               	movlb	1	; select bank1
 10472  1100  0826               	movf	floorf@u^(0+128),w
 10473  1101  2125  3190         	fcall	PL10	;call to abstracted procedure
 10474  1103  35E4               	lslf	??_floorf,f
 10475  1104  0DE5               	rlf	??_floorf+1,f
 10476  1105  0DE6               	rlf	??_floorf+2,f
 10477  1106  0DE7               	rlf	??_floorf+3,f
 10478  1107  0867               	movf	??_floorf+3,w
 10479  1108  0466               	iorwf	??_floorf+2,w
 10480  1109  0465               	iorwf	??_floorf+1,w
 10481  110A  0464               	iorwf	??_floorf,w
 10482  110B  1903               	skipnz
 10483  110C  2914               	goto	l1195
 10484  110D  30BF               	movlw	191
 10485  110E  0141               	movlb	1	; select bank1
 10486  110F  00A9               	movwf	(floorf@u+3)^(0+128)
 10487  1110  3080               	movlw	128
 10488  1111  00A8               	movwf	(floorf@u+2)^(0+128)
 10489  1112  01A7               	clrf	(floorf@u+1)^(0+128)
 10490  1113  01A6               	clrf	floorf@u^(0+128)
 10491  1114                     l1195:	
 10492  1114  0141               	movlb	1	; select bank1
 10493  1115  0829               	movf	(floorf@u+3)^(0+128),w
 10494  1116  0140               	movlb	0	; select bank0
 10495  1117  00E3               	movwf	?_floorf+3
 10496  1118  0141               	movlb	1	; select bank1
 10497  1119  0828               	movf	(floorf@u+2)^(0+128),w
 10498  111A  0140               	movlb	0	; select bank0
 10499  111B  00E2               	movwf	?_floorf+2
 10500  111C  0141               	movlb	1	; select bank1
 10501  111D  0827               	movf	(floorf@u+1)^(0+128),w
 10502  111E  0140               	movlb	0	; select bank0
 10503  111F  00E1               	movwf	?_floorf+1
 10504  1120  0141               	movlb	1	; select bank1
 10505  1121  0826               	movf	floorf@u^(0+128),w
 10506  1122  0140               	movlb	0	; select bank0
 10507  1123  00E0               	movwf	?_floorf
 10508  1124  0008               	return
 10509  1125                     __end_of_floorf:	
 10510  1125                     PL10:	
 10511  1125  0140               	movlb	0	; select bank0
 10512  1126  00E4               	movwf	??_floorf
 10513  1127  0141               	movlb	1	; select bank1
 10514  1128  0827               	movf	(floorf@u+1)^(0+128),w
 10515  1129  0140               	movlb	0	; select bank0
 10516  112A  00E5               	movwf	??_floorf+1
 10517  112B  0141               	movlb	1	; select bank1
 10518  112C  0828               	movf	(floorf@u+2)^(0+128),w
 10519  112D  0140               	movlb	0	; select bank0
 10520  112E  00E6               	movwf	??_floorf+2
 10521  112F  0141               	movlb	1	; select bank1
 10522  1130  0829               	movf	(floorf@u+3)^(0+128),w
 10523  1131  0140               	movlb	0	; select bank0
 10524  1132  00E7               	movwf	??_floorf+3
 10525  1133  0008               	return
 10526  1134                     __end_ofPL10:	
 10527  1134                     PL174:	
 10528  1134  36E7               	lsrf	??_floorf+3,f
 10529  1135  0CE6               	rrf	??_floorf+2,f
 10530  1136  0CE5               	rrf	??_floorf+1,f
 10531  1137  0CE4               	rrf	??_floorf,f
 10532  1138  0008               	return
 10533  1139                     __end_ofPL174:	
 10534                           
 10535                           	psect	text25
 10536  1004                     __ptext25:	
 10537 ;; *************** function ___awmod *****************
 10538 ;; Defined at:
 10539 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\awmod.c"
 10540 ;; Parameters:    Size  Location     Type
 10541 ;;  divisor         2    0[BANK0 ] int 
 10542 ;;  dividend        2    2[BANK0 ] int 
 10543 ;; Auto vars:     Size  Location     Type
 10544 ;;  sign            1    5[BANK0 ] unsigned char 
 10545 ;;  counter         1    4[BANK0 ] unsigned char 
 10546 ;; Return value:  Size  Location     Type
 10547 ;;                  2    0[BANK0 ] int 
 10548 ;; Registers used:
 10549 ;;		wreg, status,2, status,0
 10550 ;; Tracked objects:
 10551 ;;		On entry : 3F/0
 10552 ;;		On exit  : 3F/0
 10553 ;;		Unchanged: 0/0
 10554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10555 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10556 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10558 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10559 ;;Total ram usage:        6 bytes
 10560 ;; Hardware stack levels used:    1
 10561 ;; Hardware stack levels required when called:    3
 10562 ;; This function calls:
 10563 ;;		Nothing
 10564 ;; This function is called by:
 10565 ;;		_efgtoa
 10566 ;; This function uses a non-reentrant model
 10567 ;;
 10568                           
 10569                           
 10570                           ;psect for function ___awmod
 10571  1004                     ___awmod:	
 10572                           
 10573                           ;incstack = 0
 10574                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 10575  1004  01A5               	clrf	___awmod@sign
 10576  1005  1FA3               	btfss	___awmod@dividend+1,7
 10577  1006  280E               	goto	l3978
 10578  1007  09A2               	comf	___awmod@dividend,f
 10579  1008  09A3               	comf	___awmod@dividend+1,f
 10580  1009  0AA2               	incf	___awmod@dividend,f
 10581  100A  1903               	skipnz
 10582  100B  0AA3               	incf	___awmod@dividend+1,f
 10583  100C  01A5               	clrf	___awmod@sign
 10584  100D  0AA5               	incf	___awmod@sign,f
 10585  100E                     l3978:	
 10586  100E  1FA1               	btfss	___awmod@divisor+1,7
 10587  100F  2815               	goto	l3982
 10588  1010  09A0               	comf	___awmod@divisor,f
 10589  1011  09A1               	comf	___awmod@divisor+1,f
 10590  1012  0AA0               	incf	___awmod@divisor,f
 10591  1013  1903               	skipnz
 10592  1014  0AA1               	incf	___awmod@divisor+1,f
 10593  1015                     l3982:	
 10594  1015  0820               	movf	___awmod@divisor,w
 10595  1016  0421               	iorwf	___awmod@divisor+1,w
 10596  1017  1903               	btfsc	3,2
 10597  1018  2830               	goto	l3998
 10598  1019  01A4               	clrf	___awmod@counter
 10599  101A                     L11:	
 10600  101A  0AA4               	incf	___awmod@counter,f
 10601  101B  1BA1               	btfsc	___awmod@divisor+1,7
 10602  101C  2820               	goto	l3990
 10603  101D  35A0               	lslf	___awmod@divisor,f
 10604  101E  0DA1               	rlf	___awmod@divisor+1,f
 10605  101F  281A               	goto	L11
 10606  1020                     l3990:	
 10607  1020  0821               	movf	___awmod@divisor+1,w
 10608  1021  0223               	subwf	___awmod@dividend+1,w
 10609  1022  1D03               	skipz
 10610  1023  2826               	goto	u4505
 10611  1024  0820               	movf	___awmod@divisor,w
 10612  1025  0222               	subwf	___awmod@dividend,w
 10613  1026                     u4505:	
 10614  1026  1C03               	skipc
 10615  1027  282C               	goto	l3994
 10616  1028  0820               	movf	___awmod@divisor,w
 10617  1029  02A2               	subwf	___awmod@dividend,f
 10618  102A  0821               	movf	___awmod@divisor+1,w
 10619  102B  3BA3               	subwfb	___awmod@dividend+1,f
 10620  102C                     l3994:	
 10621  102C  36A1               	lsrf	___awmod@divisor+1,f
 10622  102D  0CA0               	rrf	___awmod@divisor,f
 10623  102E  0BA4               	decfsz	___awmod@counter,f
 10624  102F  2820               	goto	l3990
 10625  1030                     l3998:	
 10626  1030  0825               	movf	___awmod@sign,w
 10627  1031  1903               	btfsc	3,2
 10628  1032  2838               	goto	l4002
 10629  1033  09A2               	comf	___awmod@dividend,f
 10630  1034  09A3               	comf	___awmod@dividend+1,f
 10631  1035  0AA2               	incf	___awmod@dividend,f
 10632  1036  1903               	skipnz
 10633  1037  0AA3               	incf	___awmod@dividend+1,f
 10634  1038                     l4002:	
 10635  1038  0823               	movf	___awmod@dividend+1,w
 10636  1039  00A1               	movwf	?___awmod+1
 10637  103A  0822               	movf	___awmod@dividend,w
 10638  103B  00A0               	movwf	?___awmod
 10639  103C  0008               	return
 10640  103D                     __end_of___awmod:	
 10641                           
 10642                           	psect	text27
 10643  1E2B                     __ptext27:	
 10644 ;; *************** function _dtoa *****************
 10645 ;; Defined at:
 10646 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
 10647 ;; Parameters:    Size  Location     Type
 10648 ;;  fp              1    wreg     PTR struct _IO_FILE
 10649 ;;		 -> sprintf@f(6), 
 10650 ;;  d               4   23[BANK0 ] long 
 10651 ;; Auto vars:     Size  Location     Type
 10652 ;;  fp              1   30[BANK0 ] PTR struct _IO_FILE
 10653 ;;		 -> sprintf@f(6), 
 10654 ;;  n               4   37[BANK0 ] long 
 10655 ;;  i               2   41[BANK0 ] int 
 10656 ;;  s               2   35[BANK0 ] int 
 10657 ;;  w               2   33[BANK0 ] int 
 10658 ;;  p               2   31[BANK0 ] int 
 10659 ;; Return value:  Size  Location     Type
 10660 ;;                  2   23[BANK0 ] int 
 10661 ;; Registers used:
 10662 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10663 ;; Tracked objects:
 10664 ;;		On entry : 3F/2
 10665 ;;		On exit  : 3F/0
 10666 ;;		Unchanged: 0/0
 10667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10668 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10669 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10670 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10671 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10672 ;;Total ram usage:       20 bytes
 10673 ;; Hardware stack levels used:    1
 10674 ;; Hardware stack levels required when called:    7
 10675 ;; This function calls:
 10676 ;;		___aldiv
 10677 ;;		___almod
 10678 ;;		_abs
 10679 ;;		_pad
 10680 ;; This function is called by:
 10681 ;;		_vfpfcnvrt
 10682 ;; This function uses a non-reentrant model
 10683 ;;
 10684                           
 10685                           
 10686                           ;psect for function _dtoa
 10687  1E2B                     _dtoa:	
 10688                           
 10689                           ;incstack = 0
 10690                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10691                           ;dtoa@fp stored from wreg
 10692  1E2B  0140               	movlb	0	; select bank0
 10693  1E2C  00BE               	movwf	dtoa@fp
 10694                           
 10695                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.00\pic\sources\c99\common\doprnt.c: 280:     n = d;
 10696  1E2D  083A               	movf	dtoa@d+3,w
 10697  1E2E  00C8               	movwf	dtoa@n+3
 10698  1E2F  0839               	movf	dtoa@d+2,w
 10699  1E30  00C7               	movwf	dtoa@n+2
 10700  1E31  0838               	movf	dtoa@d+1,w
 10701  1E32  00C6               	movwf	dtoa@n+1
 10702  1E33  0837               	movf	dtoa@d,w
 10703  1E34  00C5               	movwf	dtoa@n
 10704                           
 10705                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
 10706  1E35  1FC8               	btfss	dtoa@n+3,7
 10707  1E36  2E39               	goto	u5140
 10708  1E37  3001               	movlw	1
 10709  1E38  2E3A               	goto	u5150
 10710  1E39                     u5140:	
 10711  1E39  3000               	movlw	0
 10712  1E3A                     u5150:	
 10713  1E3A  00C3               	movwf	dtoa@s
 10714  1E3B  01C4               	clrf	dtoa@s+1
 10715                           
 10716                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
 10717  1E3C  0444               	iorwf	dtoa@s+1,w
 10718  1E3D  1903               	btfsc	3,2
 10719  1E3E  2E4A               	goto	l519
 10720                           
 10721                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
 10722  1E3F  09C5               	comf	dtoa@n,f
 10723  1E40  09C6               	comf	dtoa@n+1,f
 10724  1E41  09C7               	comf	dtoa@n+2,f
 10725  1E42  09C8               	comf	dtoa@n+3,f
 10726  1E43  0AC5               	incf	dtoa@n,f
 10727  1E44  1903               	skipnz
 10728  1E45  0AC6               	incf	dtoa@n+1,f
 10729  1E46  1903               	skipnz
 10730  1E47  0AC7               	incf	dtoa@n+2,f
 10731  1E48  1903               	skipnz
 10732  1E49  0AC8               	incf	dtoa@n+3,f
 10733  1E4A                     l519:	
 10734                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 284:     }
 10735                           
 10736                           
 10737                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
 10738  1E4A  0142               	movlb	2	; select bank2
 10739  1E4B  1FDF               	btfss	(_prec+1)^(0+256),7
 10740                           
 10741                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
 10742  1E4C  10E0               	bcf	_flags^(0+256),1
 10743                           
 10744                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
 10745  1E4D  085F               	movf	(_prec+1)^(0+256),w
 10746  1E4E  3A80               	xorlw	128
 10747  1E4F  0140               	movlb	0	; select bank0
 10748  1E50  00BB               	movwf	??_dtoa
 10749  1E51  3080               	movlw	128
 10750  1E52  023B               	subwf	??_dtoa,w
 10751  1E53  1D03               	skipz
 10752  1E54  2E58               	goto	u5185
 10753  1E55  3001               	movlw	1
 10754  1E56  0142               	movlb	2	; select bank2
 10755  1E57  025E               	subwf	_prec^(0+256),w
 10756  1E58                     u5185:	
 10757  1E58  1803               	skipnc
 10758  1E59  2E5F               	goto	l4396
 10759  1E5A  0140               	movlb	0	; select bank0
 10760  1E5B  01BF               	clrf	dtoa@p
 10761  1E5C  0ABF               	incf	dtoa@p,f
 10762  1E5D  01C0               	clrf	dtoa@p+1
 10763  1E5E  2E67               	goto	l524
 10764  1E5F                     l4396:	
 10765  1E5F  0142               	movlb	2	; select bank2
 10766  1E60  085F               	movf	(_prec+1)^(0+256),w
 10767  1E61  0140               	movlb	0	; select bank0
 10768  1E62  00C0               	movwf	dtoa@p+1
 10769  1E63  0142               	movlb	2	; select bank2
 10770  1E64  085E               	movf	_prec^(0+256),w
 10771  1E65  0140               	movlb	0	; select bank0
 10772  1E66  00BF               	movwf	dtoa@p
 10773  1E67                     l524:	
 10774                           
 10775                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
 10776  1E67  0142               	movlb	2	; select bank2
 10777  1E68  085D               	movf	(_width+1)^(0+256),w
 10778  1E69  0140               	movlb	0	; select bank0
 10779  1E6A  00C2               	movwf	dtoa@w+1
 10780  1E6B  0142               	movlb	2	; select bank2
 10781  1E6C  085C               	movf	_width^(0+256),w
 10782  1E6D  0140               	movlb	0	; select bank0
 10783  1E6E  00C1               	movwf	dtoa@w
 10784                           
 10785                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
 10786  1E6F  0843               	movf	dtoa@s,w
 10787  1E70  0444               	iorwf	dtoa@s+1,w
 10788  1E71  1D03               	btfss	3,2
 10789  1E72  2E76               	goto	l4402
 10790  1E73  0142               	movlb	2	; select bank2
 10791  1E74  1D60               	btfss	_flags^(0+256),2
 10792  1E75  2E7B               	goto	l4404
 10793  1E76                     l4402:	
 10794                           
 10795                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
 10796  1E76  30FF               	movlw	-1
 10797  1E77  0140               	movlb	0	; select bank0
 10798  1E78  07C1               	addwf	dtoa@w,f
 10799  1E79  1C03               	skipc
 10800  1E7A  03C2               	decf	dtoa@w+1,f
 10801  1E7B                     l4404:	
 10802                           
 10803                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
 10804  1E7B  304F               	movlw	79
 10805  1E7C  0140               	movlb	0	; select bank0
 10806  1E7D  00C9               	movwf	dtoa@i
 10807  1E7E  01CA               	clrf	dtoa@i+1
 10808                           
 10809                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
 10810  1E7F  0145               	movlb	5	; select bank5
 10811  1E80  01EF               	clrf	(_dbuf^(0+640)+79)
 10812                           
 10813                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10814  1E81  2EE1               	goto	l4418
 10815  1E82                     l4420:	
 10816  1E82  0140               	movlb	0	; select bank0
 10817  1E83  0848               	movf	dtoa@n+3,w
 10818  1E84  0447               	iorwf	dtoa@n+2,w
 10819  1E85  0446               	iorwf	dtoa@n+1,w
 10820  1E86  0445               	iorwf	dtoa@n,w
 10821  1E87  1D03               	skipz
 10822  1E88  2EA3               	goto	l4408
 10823  1E89  0840               	movf	dtoa@p+1,w
 10824  1E8A  3A80               	xorlw	128
 10825  1E8B  00BB               	movwf	??_dtoa
 10826  1E8C  3080               	movlw	128
 10827  1E8D  023B               	subwf	??_dtoa,w
 10828  1E8E  1D03               	skipz
 10829  1E8F  2E92               	goto	u5235
 10830  1E90  3001               	movlw	1
 10831  1E91  023F               	subwf	dtoa@p,w
 10832  1E92                     u5235:	
 10833  1E92  1803               	skipnc
 10834  1E93  2EA3               	goto	l4408
 10835  1E94  0140               	movlb	0	; select bank0
 10836  1E95  0842               	movf	dtoa@w+1,w
 10837  1E96  3A80               	xorlw	128
 10838  1E97  00BB               	movwf	??_dtoa
 10839  1E98  3080               	movlw	128
 10840  1E99  023B               	subwf	??_dtoa,w
 10841  1E9A  1D03               	skipz
 10842  1E9B  2E9E               	goto	u5245
 10843  1E9C  3001               	movlw	1
 10844  1E9D  0241               	subwf	dtoa@w,w
 10845  1E9E                     u5245:	
 10846  1E9E  1C03               	skipc
 10847  1E9F  2EED               	goto	l4428
 10848  1EA0  0142               	movlb	2	; select bank2
 10849  1EA1  1CE0               	btfss	_flags^(0+256),1
 10850  1EA2  2EED               	goto	l4428
 10851  1EA3                     l4408:	
 10852                           
 10853                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
 10854  1EA3  30FF               	movlw	-1
 10855  1EA4  0140               	movlb	0	; select bank0
 10856  1EA5  07C9               	addwf	dtoa@i,f
 10857  1EA6  1C03               	skipc
 10858  1EA7  03CA               	decf	dtoa@i+1,f
 10859                           
 10860                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
 10861  1EA8  27F4  319E         	fcall	PL140	;call to abstracted procedure
 10862  1EAA  300A               	movlw	10
 10863  1EAB  00A0               	movwf	___almod@divisor
 10864  1EAC  01A1               	clrf	___almod@divisor+1
 10865  1EAD  01A2               	clrf	___almod@divisor+2
 10866  1EAE  01A3               	clrf	___almod@divisor+3
 10867  1EAF  0848               	movf	dtoa@n+3,w
 10868  1EB0  00A7               	movwf	___almod@dividend+3
 10869  1EB1  0847               	movf	dtoa@n+2,w
 10870  1EB2  00A6               	movwf	___almod@dividend+2
 10871  1EB3  0846               	movf	dtoa@n+1,w
 10872  1EB4  00A5               	movwf	___almod@dividend+1
 10873  1EB5  0845               	movf	dtoa@n,w
 10874  1EB6  00A4               	movwf	___almod@dividend
 10875  1EB7  2782  319E         	fcall	___almod
 10876  1EB9  0821               	movf	?___almod+1,w
 10877  1EBA  00AB               	movwf	abs@a+1
 10878  1EBB  0820               	movf	?___almod,w
 10879  1EBC  00AA               	movwf	abs@a
 10880  1EBD  27DC  319E         	fcall	_abs
 10881  1EBF  0140               	movlb	0	; select bank0
 10882  1EC0  082A               	movf	?_abs,w
 10883  1EC1  3E30               	addlw	48
 10884  1EC2  0081               	movwf	1
 10885                           
 10886                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
 10887  1EC3  30FF               	movlw	-1
 10888  1EC4  07BF               	addwf	dtoa@p,f
 10889  1EC5  1C03               	skipc
 10890  1EC6  03C0               	decf	dtoa@p+1,f
 10891                           
 10892                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
 10893  1EC7  07C1               	addwf	dtoa@w,f
 10894  1EC8  1C03               	skipc
 10895  1EC9  03C2               	decf	dtoa@w+1,f
 10896                           
 10897                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
 10898  1ECA  300A               	movlw	10
 10899  1ECB  00A0               	movwf	___aldiv@divisor
 10900  1ECC  01A1               	clrf	___aldiv@divisor+1
 10901  1ECD  01A2               	clrf	___aldiv@divisor+2
 10902  1ECE  01A3               	clrf	___aldiv@divisor+3
 10903  1ECF  0848               	movf	dtoa@n+3,w
 10904  1ED0  00A7               	movwf	___aldiv@dividend+3
 10905  1ED1  0847               	movf	dtoa@n+2,w
 10906  1ED2  00A6               	movwf	___aldiv@dividend+2
 10907  1ED3  0846               	movf	dtoa@n+1,w
 10908  1ED4  00A5               	movwf	___aldiv@dividend+1
 10909  1ED5  0845               	movf	dtoa@n,w
 10910  1ED6  00A4               	movwf	___aldiv@dividend
 10911  1ED7  2716  319E         	fcall	___aldiv
 10912  1ED9  0823               	movf	?___aldiv+3,w
 10913  1EDA  00C8               	movwf	dtoa@n+3
 10914  1EDB  0822               	movf	?___aldiv+2,w
 10915  1EDC  00C7               	movwf	dtoa@n+2
 10916  1EDD  0821               	movf	?___aldiv+1,w
 10917  1EDE  00C6               	movwf	dtoa@n+1
 10918  1EDF  0820               	movf	?___aldiv,w
 10919  1EE0  00C5               	movwf	dtoa@n
 10920  1EE1                     l4418:	
 10921                           
 10922                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 10923  1EE1  0140               	movlb	0	; select bank0
 10924  1EE2  084A               	movf	dtoa@i+1,w
 10925  1EE3  3A80               	xorlw	128
 10926  1EE4  00BB               	movwf	??_dtoa
 10927  1EE5  3080               	movlw	128
 10928  1EE6  023B               	subwf	??_dtoa,w
 10929  1EE7  1D03               	skipz
 10930  1EE8  2EEB               	goto	u5215
 10931  1EE9  3001               	movlw	1
 10932  1EEA  0249               	subwf	dtoa@i,w
 10933  1EEB                     u5215:	
 10934  1EEB  1803               	btfsc	3,0
 10935  1EEC  2E82               	goto	l4420
 10936  1EED                     l4428:	
 10937                           
 10938                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
 10939  1EED  0140               	movlb	0	; select bank0
 10940  1EEE  0843               	movf	dtoa@s,w
 10941  1EEF  0444               	iorwf	dtoa@s+1,w
 10942  1EF0  1D03               	btfss	3,2
 10943  1EF1  2EF5               	goto	l4432
 10944  1EF2  0142               	movlb	2	; select bank2
 10945  1EF3  1D60               	btfss	_flags^(0+256),2
 10946  1EF4  2F06               	goto	l4440
 10947  1EF5                     l4432:	
 10948                           
 10949                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
 10950  1EF5  30FF               	movlw	-1
 10951  1EF6  0140               	movlb	0	; select bank0
 10952  1EF7  07C9               	addwf	dtoa@i,f
 10953  1EF8  1C03               	skipc
 10954  1EF9  03CA               	decf	dtoa@i+1,f
 10955                           
 10956                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
 10957  1EFA  0843               	movf	dtoa@s,w
 10958  1EFB  0444               	iorwf	dtoa@s+1,w
 10959  1EFC  1D03               	btfss	3,2
 10960  1EFD  2F00               	goto	l4436
 10961  1EFE  302B               	movlw	43
 10962  1EFF  2F01               	goto	L13
 10963  1F00                     l4436:	
 10964  1F00  302D               	movlw	45
 10965  1F01                     L13:	
 10966  1F01  00BC               	movwf	_dtoa$1108
 10967  1F02  01BD               	clrf	_dtoa$1108+1
 10968  1F03  27F4               	fcall	PL140	;call to abstracted procedure
 10969  1F04  083C               	movf	_dtoa$1108,w
 10970  1F05  0081               	movwf	1
 10971  1F06                     l4440:	
 10972                           
 10973                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
 10974  1F06  0140               	movlb	0	; select bank0
 10975  1F07  0849               	movf	dtoa@i,w
 10976  1F08  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
 10977  1F09  00AE               	movwf	pad@buf
 10978  1F0A  0842               	movf	dtoa@w+1,w
 10979  1F0B  00B0               	movwf	pad@p+1
 10980  1F0C  0841               	movf	dtoa@w,w
 10981  1F0D  00AF               	movwf	pad@p
 10982  1F0E  083E               	movf	dtoa@fp,w
 10983  1F0F  3191  2139         	fcall	_pad
 10984  1F11  082F               	movf	?_pad+1,w
 10985  1F12  00B8               	movwf	?_dtoa+1
 10986  1F13  082E               	movf	?_pad,w
 10987  1F14  00B7               	movwf	?_dtoa
 10988  1F15  0008               	return
 10989  1F16                     __end_of_dtoa:	
 10990  1F16                     __ptext35:	
 10991 ;; *************** function ___aldiv *****************
 10992 ;; Defined at:
 10993 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\aldiv.c"
 10994 ;; Parameters:    Size  Location     Type
 10995 ;;  divisor         4    0[BANK0 ] long 
 10996 ;;  dividend        4    4[BANK0 ] long 
 10997 ;; Auto vars:     Size  Location     Type
 10998 ;;  quotient        4   10[BANK0 ] long 
 10999 ;;  sign            1    9[BANK0 ] unsigned char 
 11000 ;;  counter         1    8[BANK0 ] unsigned char 
 11001 ;; Return value:  Size  Location     Type
 11002 ;;                  4    0[BANK0 ] long 
 11003 ;; Registers used:
 11004 ;;		wreg, status,2, status,0
 11005 ;; Tracked objects:
 11006 ;;		On entry : 3F/0
 11007 ;;		On exit  : 3F/0
 11008 ;;		Unchanged: 0/0
 11009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11010 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11011 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11013 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11014 ;;Total ram usage:       14 bytes
 11015 ;; Hardware stack levels used:    1
 11016 ;; Hardware stack levels required when called:    3
 11017 ;; This function calls:
 11018 ;;		Nothing
 11019 ;; This function is called by:
 11020 ;;		_dtoa
 11021 ;; This function uses a non-reentrant model
 11022 ;;
 11023                           
 11024                           
 11025                           ;psect for function ___aldiv
 11026  1F16                     ___aldiv:	
 11027                           
 11028                           ;incstack = 0
 11029                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
 11030  1F16  01A9               	clrf	___aldiv@sign
 11031  1F17  1FA3               	btfss	___aldiv@divisor+3,7
 11032  1F18  2F26               	goto	l770
 11033  1F19  09A0               	comf	___aldiv@divisor,f
 11034  1F1A  09A1               	comf	___aldiv@divisor+1,f
 11035  1F1B  09A2               	comf	___aldiv@divisor+2,f
 11036  1F1C  09A3               	comf	___aldiv@divisor+3,f
 11037  1F1D  0AA0               	incf	___aldiv@divisor,f
 11038  1F1E  1903               	skipnz
 11039  1F1F  0AA1               	incf	___aldiv@divisor+1,f
 11040  1F20  1903               	skipnz
 11041  1F21  0AA2               	incf	___aldiv@divisor+2,f
 11042  1F22  1903               	skipnz
 11043  1F23  0AA3               	incf	___aldiv@divisor+3,f
 11044  1F24  01A9               	clrf	___aldiv@sign
 11045  1F25  0AA9               	incf	___aldiv@sign,f
 11046  1F26                     l770:	
 11047  1F26  1FA7               	btfss	___aldiv@dividend+3,7
 11048  1F27  2F35               	goto	l3864
 11049  1F28  09A4               	comf	___aldiv@dividend,f
 11050  1F29  09A5               	comf	___aldiv@dividend+1,f
 11051  1F2A  09A6               	comf	___aldiv@dividend+2,f
 11052  1F2B  09A7               	comf	___aldiv@dividend+3,f
 11053  1F2C  0AA4               	incf	___aldiv@dividend,f
 11054  1F2D  1903               	skipnz
 11055  1F2E  0AA5               	incf	___aldiv@dividend+1,f
 11056  1F2F  1903               	skipnz
 11057  1F30  0AA6               	incf	___aldiv@dividend+2,f
 11058  1F31  1903               	skipnz
 11059  1F32  0AA7               	incf	___aldiv@dividend+3,f
 11060  1F33  3001               	movlw	1
 11061  1F34  06A9               	xorwf	___aldiv@sign,f
 11062  1F35                     l3864:	
 11063  1F35  01AA               	clrf	___aldiv@quotient
 11064  1F36  01AB               	clrf	___aldiv@quotient+1
 11065  1F37  01AC               	clrf	___aldiv@quotient+2
 11066  1F38  01AD               	clrf	___aldiv@quotient+3
 11067  1F39  0823               	movf	___aldiv@divisor+3,w
 11068  1F3A  0422               	iorwf	___aldiv@divisor+2,w
 11069  1F3B  0421               	iorwf	___aldiv@divisor+1,w
 11070  1F3C  0420               	iorwf	___aldiv@divisor,w
 11071  1F3D  1903               	skipnz
 11072  1F3E  2F6B               	goto	l3886
 11073  1F3F  01A8               	clrf	___aldiv@counter
 11074  1F40                     L15:	
 11075  1F40  0AA8               	incf	___aldiv@counter,f
 11076  1F41  1BA3               	btfsc	___aldiv@divisor+3,7
 11077  1F42  2F48               	goto	l3874
 11078  1F43  35A0               	lslf	___aldiv@divisor,f
 11079  1F44  0DA1               	rlf	___aldiv@divisor+1,f
 11080  1F45  0DA2               	rlf	___aldiv@divisor+2,f
 11081  1F46  0DA3               	rlf	___aldiv@divisor+3,f
 11082  1F47  2F40               	goto	L15
 11083  1F48                     l3874:	
 11084  1F48  35AA               	lslf	___aldiv@quotient,f
 11085  1F49  0DAB               	rlf	___aldiv@quotient+1,f
 11086  1F4A  0DAC               	rlf	___aldiv@quotient+2,f
 11087  1F4B  0DAD               	rlf	___aldiv@quotient+3,f
 11088  1F4C  0823               	movf	___aldiv@divisor+3,w
 11089  1F4D  0227               	subwf	___aldiv@dividend+3,w
 11090  1F4E  1D03               	skipz
 11091  1F4F  2F5A               	goto	u4295
 11092  1F50  0822               	movf	___aldiv@divisor+2,w
 11093  1F51  0226               	subwf	___aldiv@dividend+2,w
 11094  1F52  1D03               	skipz
 11095  1F53  2F5A               	goto	u4295
 11096  1F54  0821               	movf	___aldiv@divisor+1,w
 11097  1F55  0225               	subwf	___aldiv@dividend+1,w
 11098  1F56  1D03               	skipz
 11099  1F57  2F5A               	goto	u4295
 11100  1F58  0820               	movf	___aldiv@divisor,w
 11101  1F59  0224               	subwf	___aldiv@dividend,w
 11102  1F5A                     u4295:	
 11103  1F5A  1C03               	skipc
 11104  1F5B  2F65               	goto	l3882
 11105  1F5C  0820               	movf	___aldiv@divisor,w
 11106  1F5D  02A4               	subwf	___aldiv@dividend,f
 11107  1F5E  0821               	movf	___aldiv@divisor+1,w
 11108  1F5F  3BA5               	subwfb	___aldiv@dividend+1,f
 11109  1F60  0822               	movf	___aldiv@divisor+2,w
 11110  1F61  3BA6               	subwfb	___aldiv@dividend+2,f
 11111  1F62  0823               	movf	___aldiv@divisor+3,w
 11112  1F63  3BA7               	subwfb	___aldiv@dividend+3,f
 11113  1F64  142A               	bsf	___aldiv@quotient,0
 11114  1F65                     l3882:	
 11115  1F65  36A3               	lsrf	___aldiv@divisor+3,f
 11116  1F66  0CA2               	rrf	___aldiv@divisor+2,f
 11117  1F67  0CA1               	rrf	___aldiv@divisor+1,f
 11118  1F68  0CA0               	rrf	___aldiv@divisor,f
 11119  1F69  0BA8               	decfsz	___aldiv@counter,f
 11120  1F6A  2F48               	goto	l3874
 11121  1F6B                     l3886:	
 11122  1F6B  0829               	movf	___aldiv@sign,w
 11123  1F6C  1903               	btfsc	3,2
 11124  1F6D  2F79               	goto	l3890
 11125  1F6E  09AA               	comf	___aldiv@quotient,f
 11126  1F6F  09AB               	comf	___aldiv@quotient+1,f
 11127  1F70  09AC               	comf	___aldiv@quotient+2,f
 11128  1F71  09AD               	comf	___aldiv@quotient+3,f
 11129  1F72  0AAA               	incf	___aldiv@quotient,f
 11130  1F73  1903               	skipnz
 11131  1F74  0AAB               	incf	___aldiv@quotient+1,f
 11132  1F75  1903               	skipnz
 11133  1F76  0AAC               	incf	___aldiv@quotient+2,f
 11134  1F77  1903               	skipnz
 11135  1F78  0AAD               	incf	___aldiv@quotient+3,f
 11136  1F79                     l3890:	
 11137  1F79  082D               	movf	___aldiv@quotient+3,w
 11138  1F7A  00A3               	movwf	?___aldiv+3
 11139  1F7B  082C               	movf	___aldiv@quotient+2,w
 11140  1F7C  00A2               	movwf	?___aldiv+2
 11141  1F7D  082B               	movf	___aldiv@quotient+1,w
 11142  1F7E  00A1               	movwf	?___aldiv+1
 11143  1F7F  082A               	movf	___aldiv@quotient,w
 11144  1F80  00A0               	movwf	?___aldiv
 11145  1F81  0008               	return
 11146  1F82                     __end_of___aldiv:	
 11147  1F82                     __ptext34:	
 11148 ;; *************** function ___almod *****************
 11149 ;; Defined at:
 11150 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\almod.c"
 11151 ;; Parameters:    Size  Location     Type
 11152 ;;  divisor         4    0[BANK0 ] long 
 11153 ;;  dividend        4    4[BANK0 ] long 
 11154 ;; Auto vars:     Size  Location     Type
 11155 ;;  sign            1    9[BANK0 ] unsigned char 
 11156 ;;  counter         1    8[BANK0 ] unsigned char 
 11157 ;; Return value:  Size  Location     Type
 11158 ;;                  4    0[BANK0 ] long 
 11159 ;; Registers used:
 11160 ;;		wreg, status,2, status,0
 11161 ;; Tracked objects:
 11162 ;;		On entry : 3F/0
 11163 ;;		On exit  : 3F/0
 11164 ;;		Unchanged: 0/0
 11165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11166 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11167 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11169 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11170 ;;Total ram usage:       10 bytes
 11171 ;; Hardware stack levels used:    1
 11172 ;; Hardware stack levels required when called:    3
 11173 ;; This function calls:
 11174 ;;		Nothing
 11175 ;; This function is called by:
 11176 ;;		_dtoa
 11177 ;; This function uses a non-reentrant model
 11178 ;;
 11179                           
 11180                           
 11181                           ;psect for function ___almod
 11182  1F82                     ___almod:	
 11183                           
 11184                           ;incstack = 0
 11185                           ; Regs used in ___almod: [wreg+status,2+status,0]
 11186  1F82  01A9               	clrf	___almod@sign
 11187  1F83  1FA7               	btfss	___almod@dividend+3,7
 11188  1F84  2F8F               	goto	l783
 11189  1F85  27FA  319E         	fcall	PL150	;call to abstracted procedure
 11190  1F87  1903               	skipnz
 11191  1F88  0AA5               	incf	___almod@dividend+1,f
 11192  1F89  1903               	skipnz
 11193  1F8A  0AA6               	incf	___almod@dividend+2,f
 11194  1F8B  1903               	skipnz
 11195  1F8C  0AA7               	incf	___almod@dividend+3,f
 11196  1F8D  01A9               	clrf	___almod@sign
 11197  1F8E  0AA9               	incf	___almod@sign,f
 11198  1F8F                     l783:	
 11199  1F8F  1FA3               	btfss	___almod@divisor+3,7
 11200  1F90  2F9C               	goto	l3902
 11201  1F91  09A0               	comf	___almod@divisor,f
 11202  1F92  09A1               	comf	___almod@divisor+1,f
 11203  1F93  09A2               	comf	___almod@divisor+2,f
 11204  1F94  09A3               	comf	___almod@divisor+3,f
 11205  1F95  0AA0               	incf	___almod@divisor,f
 11206  1F96  1903               	skipnz
 11207  1F97  0AA1               	incf	___almod@divisor+1,f
 11208  1F98  1903               	skipnz
 11209  1F99  0AA2               	incf	___almod@divisor+2,f
 11210  1F9A  1903               	skipnz
 11211  1F9B  0AA3               	incf	___almod@divisor+3,f
 11212  1F9C                     l3902:	
 11213  1F9C  0823               	movf	___almod@divisor+3,w
 11214  1F9D  0422               	iorwf	___almod@divisor+2,w
 11215  1F9E  0421               	iorwf	___almod@divisor+1,w
 11216  1F9F  0420               	iorwf	___almod@divisor,w
 11217  1FA0  1903               	skipnz
 11218  1FA1  2FC9               	goto	l3918
 11219  1FA2  01A8               	clrf	___almod@counter
 11220  1FA3                     L14:	
 11221  1FA3  0AA8               	incf	___almod@counter,f
 11222  1FA4  1BA3               	btfsc	___almod@divisor+3,7
 11223  1FA5  2FAB               	goto	l3910
 11224  1FA6  35A0               	lslf	___almod@divisor,f
 11225  1FA7  0DA1               	rlf	___almod@divisor+1,f
 11226  1FA8  0DA2               	rlf	___almod@divisor+2,f
 11227  1FA9  0DA3               	rlf	___almod@divisor+3,f
 11228  1FAA  2FA3               	goto	L14
 11229  1FAB                     l3910:	
 11230  1FAB  0823               	movf	___almod@divisor+3,w
 11231  1FAC  0227               	subwf	___almod@dividend+3,w
 11232  1FAD  1D03               	skipz
 11233  1FAE  2FB9               	goto	u4365
 11234  1FAF  0822               	movf	___almod@divisor+2,w
 11235  1FB0  0226               	subwf	___almod@dividend+2,w
 11236  1FB1  1D03               	skipz
 11237  1FB2  2FB9               	goto	u4365
 11238  1FB3  0821               	movf	___almod@divisor+1,w
 11239  1FB4  0225               	subwf	___almod@dividend+1,w
 11240  1FB5  1D03               	skipz
 11241  1FB6  2FB9               	goto	u4365
 11242  1FB7  0820               	movf	___almod@divisor,w
 11243  1FB8  0224               	subwf	___almod@dividend,w
 11244  1FB9                     u4365:	
 11245  1FB9  1C03               	skipc
 11246  1FBA  2FC3               	goto	l3914
 11247  1FBB  0820               	movf	___almod@divisor,w
 11248  1FBC  02A4               	subwf	___almod@dividend,f
 11249  1FBD  0821               	movf	___almod@divisor+1,w
 11250  1FBE  3BA5               	subwfb	___almod@dividend+1,f
 11251  1FBF  0822               	movf	___almod@divisor+2,w
 11252  1FC0  3BA6               	subwfb	___almod@dividend+2,f
 11253  1FC1  0823               	movf	___almod@divisor+3,w
 11254  1FC2  3BA7               	subwfb	___almod@dividend+3,f
 11255  1FC3                     l3914:	
 11256  1FC3  36A3               	lsrf	___almod@divisor+3,f
 11257  1FC4  0CA2               	rrf	___almod@divisor+2,f
 11258  1FC5  0CA1               	rrf	___almod@divisor+1,f
 11259  1FC6  0CA0               	rrf	___almod@divisor,f
 11260  1FC7  0BA8               	decfsz	___almod@counter,f
 11261  1FC8  2FAB               	goto	l3910
 11262  1FC9                     l3918:	
 11263  1FC9  0829               	movf	___almod@sign,w
 11264  1FCA  1903               	btfsc	3,2
 11265  1FCB  2FD3               	goto	l3922
 11266  1FCC  27FA               	fcall	PL150	;call to abstracted procedure
 11267  1FCD  1903               	skipnz
 11268  1FCE  0AA5               	incf	___almod@dividend+1,f
 11269  1FCF  1903               	skipnz
 11270  1FD0  0AA6               	incf	___almod@dividend+2,f
 11271  1FD1  1903               	skipnz
 11272  1FD2  0AA7               	incf	___almod@dividend+3,f
 11273  1FD3                     l3922:	
 11274  1FD3  0827               	movf	___almod@dividend+3,w
 11275  1FD4  00A3               	movwf	?___almod+3
 11276  1FD5  0826               	movf	___almod@dividend+2,w
 11277  1FD6  00A2               	movwf	?___almod+2
 11278  1FD7  0825               	movf	___almod@dividend+1,w
 11279  1FD8  00A1               	movwf	?___almod+1
 11280  1FD9  0824               	movf	___almod@dividend,w
 11281  1FDA  00A0               	movwf	?___almod
 11282  1FDB  0008               	return
 11283  1FDC                     __end_of___almod:	
 11284  1FDC                     __ptext33:	
 11285 ;; *************** function _abs *****************
 11286 ;; Defined at:
 11287 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\abs.c"
 11288 ;; Parameters:    Size  Location     Type
 11289 ;;  a               2   10[BANK0 ] int 
 11290 ;; Auto vars:     Size  Location     Type
 11291 ;;		None
 11292 ;; Return value:  Size  Location     Type
 11293 ;;                  2   10[BANK0 ] int 
 11294 ;; Registers used:
 11295 ;;		wreg, status,2, status,0
 11296 ;; Tracked objects:
 11297 ;;		On entry : 3F/0
 11298 ;;		On exit  : 0/0
 11299 ;;		Unchanged: 0/0
 11300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11301 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11302 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11303 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11304 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11305 ;;Total ram usage:        4 bytes
 11306 ;; Hardware stack levels used:    1
 11307 ;; Hardware stack levels required when called:    3
 11308 ;; This function calls:
 11309 ;;		Nothing
 11310 ;; This function is called by:
 11311 ;;		_dtoa
 11312 ;; This function uses a non-reentrant model
 11313 ;;
 11314                           
 11315                           
 11316                           ;psect for function _abs
 11317  1FDC                     _abs:	
 11318                           
 11319                           ;incstack = 0
 11320                           ; Regs used in _abs: [wreg+status,2+status,0]
 11321  1FDC  082B               	movf	abs@a+1,w
 11322  1FDD  3A80               	xorlw	128
 11323  1FDE  00AC               	movwf	??_abs
 11324  1FDF  3080               	movlw	128
 11325  1FE0  022C               	subwf	??_abs,w
 11326  1FE1  1D03               	skipz
 11327  1FE2  2FE5               	goto	u4015
 11328  1FE3  3001               	movlw	1
 11329  1FE4  022A               	subwf	abs@a,w
 11330  1FE5                     u4015:	
 11331  1FE5  1803               	skipnc
 11332  1FE6  0008               	return
 11333  1FE7  0140               	movlb	0	; select bank0
 11334  1FE8  092A               	comf	abs@a,w
 11335  1FE9  00AC               	movwf	??_abs
 11336  1FEA  092B               	comf	abs@a+1,w
 11337  1FEB  00AD               	movwf	??_abs+1
 11338  1FEC  0AAC               	incf	??_abs,f
 11339  1FED  1903               	skipnz
 11340  1FEE  0AAD               	incf	??_abs+1,f
 11341  1FEF  082C               	movf	??_abs,w
 11342  1FF0  00AA               	movwf	?_abs
 11343  1FF1  082D               	movf	??_abs+1,w
 11344  1FF2  00AB               	movwf	?_abs+1
 11345  1FF3  0008               	return
 11346  1FF4                     __end_of_abs:	
 11347  1FF4                     PL140:	
 11348  1FF4  0849               	movf	dtoa@i,w
 11349  1FF5  3EA0               	addlw	(low (_dbuf| (0+512)))& (0+255)
 11350  1FF6  0086               	movwf	6
 11351  1FF7  3002               	movlw	2	; select bank5/6
 11352  1FF8  0087               	movwf	7
 11353  1FF9  0008               	return
 11354  1FFA                     __end_ofPL140:	
 11355  1FFA                     PL150:	
 11356  1FFA  09A4               	comf	___almod@dividend,f
 11357  1FFB  09A5               	comf	___almod@dividend+1,f
 11358  1FFC  09A6               	comf	___almod@dividend+2,f
 11359  1FFD  09A7               	comf	___almod@dividend+3,f
 11360  1FFE  0AA4               	incf	___almod@dividend,f
 11361  1FFF  0008               	return
 11362  2000                     __end_ofPL150:	
 11363                           
 11364                           	psect	text28
 11365  1139                     __ptext28:	
 11366 ;; *************** function _pad *****************
 11367 ;; Defined at:
 11368 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
 11369 ;; Parameters:    Size  Location     Type
 11370 ;;  fp              1    wreg     PTR struct _IO_FILE
 11371 ;;		 -> sprintf@f(6), 
 11372 ;;  buf             1   14[BANK0 ] PTR unsigned char 
 11373 ;;		 -> dbuf(80), 
 11374 ;;  p               2   15[BANK0 ] int 
 11375 ;; Auto vars:     Size  Location     Type
 11376 ;;  fp              1   22[BANK0 ] PTR struct _IO_FILE
 11377 ;;		 -> sprintf@f(6), 
 11378 ;;  w               2   20[BANK0 ] int 
 11379 ;;  i               2   18[BANK0 ] int 
 11380 ;; Return value:  Size  Location     Type
 11381 ;;                  2   14[BANK0 ] int 
 11382 ;; Registers used:
 11383 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11384 ;; Tracked objects:
 11385 ;;		On entry : 3E/1
 11386 ;;		On exit  : 3F/0
 11387 ;;		Unchanged: 0/0
 11388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11389 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11390 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11391 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11392 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11393 ;;Total ram usage:        9 bytes
 11394 ;; Hardware stack levels used:    1
 11395 ;; Hardware stack levels required when called:    6
 11396 ;; This function calls:
 11397 ;;		_fputc
 11398 ;;		_fputs
 11399 ;;		_strlen
 11400 ;; This function is called by:
 11401 ;;		_dtoa
 11402 ;;		_efgtoa
 11403 ;; This function uses a non-reentrant model
 11404 ;;
 11405                           
 11406                           
 11407                           ;psect for function _pad
 11408  1139                     _pad:	
 11409                           
 11410                           ;incstack = 0
 11411                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11412                           ;pad@fp stored from wreg
 11413  1139  0140               	movlb	0	; select bank0
 11414  113A  00B6               	movwf	pad@fp
 11415                           
 11416                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 11417  113B  0142               	movlb	2	; select bank2
 11418  113C  1C60               	btfss	_flags^(0+256),0
 11419  113D  2942               	goto	l3740
 11420                           
 11421                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 11422  113E  27FB  3191         	fcall	PL176	;call to abstracted procedure
 11423  1140  217D  3191         	fcall	_fputs
 11424  1142                     l3740:	
 11425                           
 11426                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 11427  1142  0140               	movlb	0	; select bank0
 11428  1143  1BB0               	btfsc	pad@p+1,7
 11429  1144  294A               	goto	l3744
 11430  1145  0830               	movf	pad@p+1,w
 11431  1146  00B5               	movwf	pad@w+1
 11432  1147  082F               	movf	pad@p,w
 11433  1148  00B4               	movwf	pad@w
 11434  1149  294C               	goto	l511
 11435  114A                     l3744:	
 11436  114A  01B4               	clrf	pad@w
 11437  114B  01B5               	clrf	pad@w+1
 11438  114C                     l511:	
 11439                           
 11440                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 11441  114C  01B2               	clrf	pad@i
 11442  114D  01B3               	clrf	pad@i+1
 11443  114E                     l3750:	
 11444                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 11445                           
 11446                           
 11447                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 11448  114E  0833               	movf	pad@i+1,w
 11449  114F  3A80               	xorlw	128
 11450  1150  00B1               	movwf	??_pad
 11451  1151  0835               	movf	pad@w+1,w
 11452  1152  3A80               	xorlw	128
 11453  1153  0231               	subwf	??_pad,w
 11454  1154  1D03               	skipz
 11455  1155  2958               	goto	u3995
 11456  1156  0834               	movf	pad@w,w
 11457  1157  0232               	subwf	pad@i,w
 11458  1158                     u3995:	
 11459  1158  1803               	btfsc	3,0
 11460  1159  2967               	goto	l514
 11461                           
 11462                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 11463  115A  3020               	movlw	32
 11464  115B  0140               	movlb	0	; select bank0
 11465  115C  00A0               	movwf	fputc@c
 11466  115D  01A1               	clrf	fputc@c+1
 11467  115E  0836               	movf	pad@fp,w
 11468  115F  00A2               	movwf	fputc@fp
 11469  1160  2664  3191         	fcall	_fputc
 11470                           
 11471                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 11472  1162  0140               	movlb	0	; select bank0
 11473  1163  0AB2               	incf	pad@i,f
 11474  1164  1903               	skipnz
 11475  1165  0AB3               	incf	pad@i+1,f
 11476  1166  294E               	goto	l3750
 11477  1167                     l514:	
 11478                           
 11479                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 11480  1167  0142               	movlb	2	; select bank2
 11481  1168  1860               	btfsc	_flags^(0+256),0
 11482  1169  296E               	goto	l3754
 11483                           
 11484                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 11485  116A  27FB  3191         	fcall	PL176	;call to abstracted procedure
 11486  116C  217D  3191         	fcall	_fputs
 11487  116E                     l3754:	
 11488                           
 11489                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 11490  116E  0140               	movlb	0	; select bank0
 11491  116F  082E               	movf	pad@buf,w
 11492  1170  00A0               	movwf	strlen@s
 11493  1171  3002               	movlw	2
 11494  1172  00A1               	movwf	strlen@s+1
 11495  1173  26AA               	fcall	_strlen
 11496  1174  0821               	movf	?_strlen+1,w
 11497  1175  00AF               	movwf	?_pad+1
 11498  1176  0820               	movf	?_strlen,w
 11499  1177  00AE               	movwf	?_pad
 11500  1178  0834               	movf	pad@w,w
 11501  1179  07AE               	addwf	?_pad,f
 11502  117A  0835               	movf	pad@w+1,w
 11503  117B  3DAF               	addwfc	?_pad+1,f
 11504  117C  0008               	return
 11505  117D                     __end_of_pad:	
 11506  117D                     __ptext30:	
 11507 ;; *************** function _fputs *****************
 11508 ;; Defined at:
 11509 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\nf_fputs.c"
 11510 ;; Parameters:    Size  Location     Type
 11511 ;;  s               1    wreg     PTR const unsigned char 
 11512 ;;		 -> dbuf(80), 
 11513 ;;  fp              1    8[BANK0 ] PTR struct _IO_FILE
 11514 ;;		 -> sprintf@f(6), 
 11515 ;; Auto vars:     Size  Location     Type
 11516 ;;  s               1   13[BANK0 ] PTR const unsigned char 
 11517 ;;		 -> dbuf(80), 
 11518 ;;  i               2   11[BANK0 ] int 
 11519 ;;  c               1   10[BANK0 ] unsigned char 
 11520 ;; Return value:  Size  Location     Type
 11521 ;;                  2    8[BANK0 ] int 
 11522 ;; Registers used:
 11523 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11524 ;; Tracked objects:
 11525 ;;		On entry : 3F/0
 11526 ;;		On exit  : 3F/0
 11527 ;;		Unchanged: 0/0
 11528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11529 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11530 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11531 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11532 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11533 ;;Total ram usage:        6 bytes
 11534 ;; Hardware stack levels used:    1
 11535 ;; Hardware stack levels required when called:    5
 11536 ;; This function calls:
 11537 ;;		_fputc
 11538 ;; This function is called by:
 11539 ;;		_pad
 11540 ;; This function uses a non-reentrant model
 11541 ;;
 11542                           
 11543                           
 11544                           ;psect for function _fputs
 11545  117D                     _fputs:	
 11546                           
 11547                           ;incstack = 0
 11548                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11549                           ;fputs@s stored from wreg
 11550  117D  00AD               	movwf	fputs@s
 11551  117E  01AB               	clrf	fputs@i
 11552  117F  01AC               	clrf	fputs@i+1
 11553  1180                     l3520:	
 11554  1180  082B               	movf	fputs@i,w
 11555  1181  072D               	addwf	fputs@s,w
 11556  1182  00A9               	movwf	??_fputs
 11557  1183  0086               	movwf	6
 11558  1184  3002               	movlw	2	; select bank4/5
 11559  1185  0087               	movwf	7
 11560  1186  0801               	movf	1,w
 11561  1187  00AA               	movwf	fputs@c
 11562  1188  082A               	movf	fputs@c,w
 11563  1189  1903               	btfsc	3,2
 11564  118A  0008               	return
 11565  118B  00A0               	movwf	fputc@c
 11566  118C  01A1               	clrf	fputc@c+1
 11567  118D  0828               	movf	fputs@fp,w
 11568  118E  00A2               	movwf	fputc@fp
 11569  118F  2664  3191         	fcall	_fputc
 11570  1191  0140               	movlb	0	; select bank0
 11571  1192  0AAB               	incf	fputs@i,f
 11572  1193  1903               	skipnz
 11573  1194  0AAC               	incf	fputs@i+1,f
 11574  1195  2980               	goto	l3520
 11575  1196                     __end_of_fputs:	
 11576  1196                     __ptext5:	
 11577 ;; *************** function _channelView *****************
 11578 ;; Defined at:
 11579 ;;		line 120 in file "menu.c"
 11580 ;; Parameters:    Size  Location     Type
 11581 ;;  data            1   50[BANK2 ] PTR struct .
 11582 ;;		 -> data(33), 
 11583 ;; Auto vars:     Size  Location     Type
 11584 ;;		None
 11585 ;; Return value:  Size  Location     Type
 11586 ;;                  1    wreg      unsigned char 
 11587 ;; Registers used:
 11588 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11589 ;; Tracked objects:
 11590 ;;		On entry : 3F/2
 11591 ;;		On exit  : 3F/2
 11592 ;;		Unchanged: 0/0
 11593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11594 ;;      Params:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11596 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11597 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11598 ;;Total ram usage:        1 bytes
 11599 ;; Hardware stack levels used:    1
 11600 ;; Hardware stack levels required when called:    9
 11601 ;; This function calls:
 11602 ;;		_OLED_print_xy
 11603 ;;		_paging
 11604 ;;		_returnToPage
 11605 ;; This function is called by:
 11606 ;;		_menu
 11607 ;; This function uses a non-reentrant model
 11608 ;;
 11609                           
 11610                           
 11611                           ;psect for function _channelView
 11612  1196                     _channelView:	
 11613                           
 11614                           ;menu.c: 120: static uint8_t channelView(t_globalData *data);menu.c: 121: {;menu.c: 122:
      +                            static uint8_t page = 0;;menu.c: 124:  returnToPage(page);
 11615                           
 11616                           ;incstack = 0
 11617                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11618  1196  0863               	movf	channelView@page^(0+256),w
 11619  1197  22ED  3191         	fcall	_returnToPage
 11620                           
 11621                           ;menu.c: 125:  if (updateScreen)
 11622  1199  0142               	movlb	2	; select bank2
 11623  119A  086E               	movf	_updateScreen^(0+256),w
 11624  119B  1903               	btfsc	3,2
 11625  119C  29A6               	goto	l5264
 11626                           
 11627                           ;menu.c: 126:   OLED_print_xy(0, 0, "Ch1: xx inchCh2: xx inchCh3: xx inchCh4: xx inch");
 11628  119D  0140               	movlb	0	; select bank0
 11629  119E  301C               	movlw	low (STR_7| (0+32768))
 11630  119F  01A6               	clrf	OLED_print_xy@row
 11631  11A0  00A7               	movwf	OLED_print_xy@s
 11632  11A1  30A0               	movlw	high (STR_7| (0+32768))
 11633  11A2  00A8               	movwf	OLED_print_xy@s+1
 11634  11A3  3000               	movlw	0
 11635  11A4  229E  3191         	fcall	_OLED_print_xy
 11636  11A6                     l5264:	
 11637                           
 11638                           ;menu.c: 127:  page = paging(page, 4);
 11639  11A6  3004               	movlw	4
 11640  11A7  0140               	movlb	0	; select bank0
 11641  11A8  00A6               	movwf	paging@lastPage
 11642  11A9  0142               	movlb	2	; select bank2
 11643  11AA  0863               	movf	channelView@page^(0+256),w
 11644  11AB  2310               	fcall	_paging
 11645  11AC  0142               	movlb	2	; select bank2
 11646  11AD  00E3               	movwf	channelView@page^(0+256)
 11647                           
 11648                           ;menu.c: 128:  selectedChannel = page;
 11649  11AE  00E6               	movwf	_selectedChannel^(0+256)
 11650                           
 11651                           ;menu.c: 129:  return page;
 11652  11AF  0863               	movf	channelView@page^(0+256),w
 11653  11B0  0008               	return
 11654  11B1                     __end_of_channelView:	
 11655  11B1                     __ptext2:	
 11656 ;; *************** function _setLensDia *****************
 11657 ;; Defined at:
 11658 ;;		line 155 in file "menu.c"
 11659 ;; Parameters:    Size  Location     Type
 11660 ;;  data            1   50[BANK2 ] PTR struct .
 11661 ;;		 -> data(33), 
 11662 ;; Auto vars:     Size  Location     Type
 11663 ;;		None
 11664 ;; Return value:  Size  Location     Type
 11665 ;;                  1    wreg      unsigned char 
 11666 ;; Registers used:
 11667 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11668 ;; Tracked objects:
 11669 ;;		On entry : 3F/2
 11670 ;;		On exit  : 3F/0
 11671 ;;		Unchanged: 0/0
 11672 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11673 ;;      Params:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11676 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11677 ;;Total ram usage:        1 bytes
 11678 ;; Hardware stack levels used:    1
 11679 ;; Hardware stack levels required when called:   11
 11680 ;; This function calls:
 11681 ;;		_OLED_print_xy
 11682 ;;		_returnToPage
 11683 ;;		_sprintf
 11684 ;; This function is called by:
 11685 ;;		_menu
 11686 ;; This function uses a non-reentrant model
 11687 ;;
 11688                           
 11689                           
 11690                           ;psect for function _setLensDia
 11691  11B1                     _setLensDia:	
 11692                           
 11693                           ;menu.c: 155: static uint8_t setLensDia(t_globalData *data);menu.c: 156: {;menu.c: 157: 
      +                           returnToPage(0);
 11694                           
 11695                           ;incstack = 0
 11696                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11697  11B1  3000               	movlw	0
 11698  11B2  22ED  3191         	fcall	_returnToPage
 11699                           
 11700                           ;menu.c: 158:  OLED_print_xy(0, 0, "Set lens   ");
 11701  11B4  0140               	movlb	0	; select bank0
 11702  11B5  302B               	movlw	low (STR_12| (0+32768))
 11703  11B6  01A6               	clrf	OLED_print_xy@row
 11704  11B7  00A7               	movwf	OLED_print_xy@s
 11705  11B8  30A1               	movlw	high (STR_12| (0+32768))
 11706  11B9  00A8               	movwf	OLED_print_xy@s+1
 11707  11BA  3000               	movlw	0
 11708  11BB  229E  3191         	fcall	_OLED_print_xy
 11709                           
 11710                           ;menu.c: 159:  sprintf(s, "%1d          ", selectedChannel);
 11711  11BD  3020               	movlw	low _s
 11712  11BE  2781  3191         	fcall	PL74	;call to abstracted procedure
 11713  11C0  22CB  3191         	fcall	_sprintf
 11714                           
 11715                           ;menu.c: 160:  OLED_print_xy(0,1,s);
 11716  11C2  273C  3191         	fcall	PL38	;call to abstracted procedure
 11717  11C4  229E               	fcall	_OLED_print_xy
 11718                           
 11719                           ;menu.c: 162:  return 0;
 11720  11C5  3400               	retlw	0
 11721  11C6                     __end_of_setLensDia:	
 11722  11C6                     __ptext3:	
 11723 ;; *************** function _setOutputPower *****************
 11724 ;; Defined at:
 11725 ;;		line 145 in file "menu.c"
 11726 ;; Parameters:    Size  Location     Type
 11727 ;;  data            1   50[BANK2 ] PTR struct .
 11728 ;;		 -> data(33), 
 11729 ;; Auto vars:     Size  Location     Type
 11730 ;;		None
 11731 ;; Return value:  Size  Location     Type
 11732 ;;                  1    wreg      unsigned char 
 11733 ;; Registers used:
 11734 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11735 ;; Tracked objects:
 11736 ;;		On entry : 3F/2
 11737 ;;		On exit  : 3F/0
 11738 ;;		Unchanged: 0/0
 11739 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11740 ;;      Params:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11741 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11742 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11743 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11744 ;;Total ram usage:        1 bytes
 11745 ;; Hardware stack levels used:    1
 11746 ;; Hardware stack levels required when called:   11
 11747 ;; This function calls:
 11748 ;;		_OLED_print_xy
 11749 ;;		_returnToPage
 11750 ;;		_sprintf
 11751 ;; This function is called by:
 11752 ;;		_menu
 11753 ;; This function uses a non-reentrant model
 11754 ;;
 11755                           
 11756                           
 11757                           ;psect for function _setOutputPower
 11758  11C6                     _setOutputPower:	
 11759                           
 11760                           ;menu.c: 145: static uint8_t setOutputPower(t_globalData *data);menu.c: 146: {;menu.c: 1
      +                          47:  returnToPage(0);
 11761                           
 11762                           ;incstack = 0
 11763                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11764  11C6  3000               	movlw	0
 11765  11C7  22ED  3191         	fcall	_returnToPage
 11766                           
 11767                           ;menu.c: 148:  OLED_print_xy(0, 0, "Set outp    ");
 11768  11C9  0140               	movlb	0	; select bank0
 11769  11CA  301E               	movlw	low (STR_10| (0+32768))
 11770  11CB  01A6               	clrf	OLED_print_xy@row
 11771  11CC  00A7               	movwf	OLED_print_xy@s
 11772  11CD  30A1               	movlw	high (STR_10| (0+32768))
 11773  11CE  00A8               	movwf	OLED_print_xy@s+1
 11774  11CF  3000               	movlw	0
 11775  11D0  229E  3191         	fcall	_OLED_print_xy
 11776                           
 11777                           ;menu.c: 149:  sprintf(s, "%1d          ", selectedChannel);
 11778  11D2  3020               	movlw	low _s
 11779  11D3  2781  3191         	fcall	PL74	;call to abstracted procedure
 11780  11D5  22CB  3191         	fcall	_sprintf
 11781                           
 11782                           ;menu.c: 150:  OLED_print_xy(0,1,s);
 11783  11D7  273C  3191         	fcall	PL38	;call to abstracted procedure
 11784  11D9  229E               	fcall	_OLED_print_xy
 11785                           
 11786                           ;menu.c: 152:  return 0;
 11787  11DA  3400               	retlw	0
 11788  11DB                     __end_of_setOutputPower:	
 11789  11DB                     __ptext4:	
 11790 ;; *************** function _channelSetup *****************
 11791 ;; Defined at:
 11792 ;;		line 132 in file "menu.c"
 11793 ;; Parameters:    Size  Location     Type
 11794 ;;  data            1   50[BANK2 ] PTR struct .
 11795 ;;		 -> data(33), 
 11796 ;; Auto vars:     Size  Location     Type
 11797 ;;		None
 11798 ;; Return value:  Size  Location     Type
 11799 ;;                  1    wreg      unsigned char 
 11800 ;; Registers used:
 11801 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11802 ;; Tracked objects:
 11803 ;;		On entry : 3F/2
 11804 ;;		On exit  : 3F/2
 11805 ;;		Unchanged: 0/0
 11806 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11807 ;;      Params:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11810 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11811 ;;Total ram usage:        1 bytes
 11812 ;; Hardware stack levels used:    1
 11813 ;; Hardware stack levels required when called:   11
 11814 ;; This function calls:
 11815 ;;		_OLED_print_xy
 11816 ;;		_paging
 11817 ;;		_returnToPage
 11818 ;;		_sprintf
 11819 ;; This function is called by:
 11820 ;;		_menu
 11821 ;; This function uses a non-reentrant model
 11822 ;;
 11823                           
 11824                           
 11825                           ;psect for function _channelSetup
 11826  11DB                     _channelSetup:	
 11827                           
 11828                           ;menu.c: 132: static uint8_t channelSetup(t_globalData *data);menu.c: 133: {;menu.c: 134
      +                          :  static uint8_t page = 0;;menu.c: 136:  returnToPage(page);
 11829                           
 11830                           ;incstack = 0
 11831                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11832  11DB  0862               	movf	channelSetup@page^(0+256),w
 11833  11DC  22ED  3191         	fcall	_returnToPage
 11834                           
 11835                           ;menu.c: 137:  OLED_print_xy(0, 0, "Output power Lens diam. ");
 11836  11DE  0140               	movlb	0	; select bank0
 11837  11DF  30C6               	movlw	low (STR_8| (0+32768))
 11838  11E0  01A6               	clrf	OLED_print_xy@row
 11839  11E1  00A7               	movwf	OLED_print_xy@s
 11840  11E2  30A0               	movlw	high (STR_8| (0+32768))
 11841  11E3  00A8               	movwf	OLED_print_xy@s+1
 11842  11E4  3000               	movlw	0
 11843  11E5  229E  3191         	fcall	_OLED_print_xy
 11844                           
 11845                           ;menu.c: 138:  sprintf(s, "%1d            %1d", selectedChannel, selectedChannel);
 11846  11E7  279F  3191         	fcall	PL90	;call to abstracted procedure
 11847  11E9  30DF               	movlw	low (STR_9| (0+32768))
 11848  11EA  00B6               	movwf	sprintf@fmt^(0+256)
 11849  11EB  30A0               	movlw	high (STR_9| (0+32768))
 11850  11EC  00B7               	movwf	(sprintf@fmt^(0+256)+1)
 11851  11ED  0866               	movf	_selectedChannel^(0+256),w
 11852  11EE  00B8               	movwf	(?_sprintf^(0+256)+4)
 11853  11EF  01B9               	clrf	((?_sprintf+1)^(0+256)+4)
 11854  11F0  0866               	movf	_selectedChannel^(0+256),w
 11855  11F1  00BA               	movwf	(?_sprintf^(0+256)+6)
 11856  11F2  01BB               	clrf	((?_sprintf+1)^(0+256)+6)
 11857  11F3  22CB  3191         	fcall	_sprintf
 11858                           
 11859                           ;menu.c: 139:  OLED_print_xy(0,1,s);
 11860  11F5  273C  3191         	fcall	PL38	;call to abstracted procedure
 11861  11F7  229E  3191         	fcall	_OLED_print_xy
 11862                           
 11863                           ;menu.c: 141:  page = paging(page, 2);
 11864  11F9  3002               	movlw	2
 11865  11FA  00A6               	movwf	paging@lastPage
 11866  11FB  0142               	movlb	2	; select bank2
 11867  11FC  0862               	movf	channelSetup@page^(0+256),w
 11868  11FD  2310               	fcall	_paging
 11869  11FE  0142               	movlb	2	; select bank2
 11870  11FF  00E2               	movwf	channelSetup@page^(0+256)
 11871                           
 11872                           ;menu.c: 142:  return page;
 11873  1200  0008               	return
 11874  1201                     __end_of_channelSetup:	
 11875  1201                     __ptext6:	
 11876 ;; *************** function _statusView *****************
 11877 ;; Defined at:
 11878 ;;		line 95 in file "menu.c"
 11879 ;; Parameters:    Size  Location     Type
 11880 ;;  data            1   50[BANK2 ] PTR struct .
 11881 ;;		 -> data(33), 
 11882 ;; Auto vars:     Size  Location     Type
 11883 ;;		None
 11884 ;; Return value:  Size  Location     Type
 11885 ;;                  1    wreg      unsigned char 
 11886 ;; Registers used:
 11887 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 11888 ;; Tracked objects:
 11889 ;;		On entry : 3F/2
 11890 ;;		On exit  : 3F/2
 11891 ;;		Unchanged: 0/0
 11892 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 11893 ;;      Params:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11894 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11895 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11896 ;;      Totals:         0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 11897 ;;Total ram usage:        1 bytes
 11898 ;; Hardware stack levels used:    1
 11899 ;; Hardware stack levels required when called:   11
 11900 ;; This function calls:
 11901 ;;		_OLED_print_xy
 11902 ;;		_OLED_returnHome
 11903 ;;		_paging
 11904 ;;		_returnToPage
 11905 ;;		_sprintf
 11906 ;; This function is called by:
 11907 ;;		_menu
 11908 ;; This function uses a non-reentrant model
 11909 ;;
 11910                           
 11911                           
 11912                           ;psect for function _statusView
 11913  1201                     _statusView:	
 11914                           
 11915                           ;menu.c: 95: static uint8_t statusView(t_globalData *data);menu.c: 96: {;menu.c: 97:  st
      +                          atic uint8_t page = 0;;menu.c: 99:  returnToPage(page);
 11916                           
 11917                           ;incstack = 0
 11918                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 11919  1201  0864               	movf	statusView@page^(0+256),w
 11920  1202  22ED  3191         	fcall	_returnToPage
 11921                           
 11922                           ;menu.c: 100:  if (data->status.SENSOR_OK) {
 11923  1204  27D8  3191         	fcall	PL132	;call to abstracted procedure
 11924  1206  1C81               	btfss	1,1
 11925  1207  2A79               	goto	l5910
 11926                           
 11927                           ;menu.c: 101:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   Power");
 11928  1208  0140               	movlb	0	; select bank0
 11929  1209  304D               	movlw	low (STR_1| (0+32768))
 11930  120A  01A6               	clrf	OLED_print_xy@row
 11931  120B  00A7               	movwf	OLED_print_xy@s
 11932  120C  30A0               	movlw	high (STR_1| (0+32768))
 11933  120D  00A8               	movwf	OLED_print_xy@s+1
 11934  120E  3000               	movlw	0
 11935  120F  229E  3191         	fcall	_OLED_print_xy
 11936                           
 11937                           ;menu.c: 102:   if (data->status.AUX_SENSOR_OK)
 11938  1211  27D8  3191         	fcall	PL132	;call to abstracted procedure
 11939                           
 11940                           ;menu.c: 103:    sprintf(s12, "%3.0f | %3.0f \337C", data->tempC, data->tempAux);
 11941  1213  30CB               	movlw	low _s12
 11942  1214  00B4               	movwf	sprintf@s^(0+256)
 11943  1215  3001               	movlw	high _s12
 11944  1216  00B5               	movwf	(sprintf@s+1)^(0+256)
 11945  1217  1D01               	btfss	1,2
 11946  1218  2A26               	goto	L2
 11947  1219  30F2               	movlw	low (STR_2| (0+32768))
 11948  121A  00B6               	movwf	sprintf@fmt^(0+256)
 11949  121B  30A0               	movlw	high (STR_2| (0+32768))
 11950  121C  00B7               	movwf	(sprintf@fmt^(0+256)+1)
 11951  121D  0852               	movf	statusView@data^(0+256),w
 11952  121E  0086               	movwf	6
 11953  121F  276C  3191         	fcall	PL64	;call to abstracted procedure
 11954  1221  0852               	movf	statusView@data^(0+256),w
 11955  1222  3E10               	addlw	16
 11956  1223  2795  3191         	fcall	PL82	;call to abstracted procedure
 11957  1225  2A30               	goto	L1
 11958  1226                     L2:	
 11959                           ;menu.c: 105:    sprintf(s12, "%5.1f \337C    ", data->tempC);
 11960                           
 11961  1226  3011               	movlw	low (STR_3| (0+32768))
 11962  1227  00B6               	movwf	sprintf@fmt^(0+256)
 11963  1228  30A1               	movlw	high (STR_3| (0+32768))
 11964  1229  00B7               	movwf	(sprintf@fmt^(0+256)+1)
 11965  122A  0852               	movf	statusView@data^(0+256),w
 11966  122B  0086               	movwf	6
 11967  122C  3002               	movlw	2	; select bank4/5
 11968  122D  0087               	movwf	7
 11969  122E  276C  3191         	fcall	PL64	;call to abstracted procedure
 11970  1230                     L1:	
 11971  1230  22CB  3191         	fcall	_sprintf
 11972                           
 11973                           ;menu.c: 106:   sprintf(s, "%s%5.1f %%     %5.1f \337C    %4.1fV  %4.1fW",
 11974  1232  3020               	movlw	low _s
 11975  1233  00B4               	movwf	sprintf@s^(0+256)
 11976  1234  3003               	movlw	high _s
 11977  1235  00B5               	movwf	(sprintf@s+1)^(0+256)
 11978  1236  307E               	movlw	low (STR_4| (0+32768))
 11979  1237  00B6               	movwf	sprintf@fmt^(0+256)
 11980  1238  30A0               	movlw	high (STR_4| (0+32768))
 11981  1239  00B7               	movwf	(sprintf@fmt^(0+256)+1)
 11982  123A  30CB               	movlw	(low (_s12| (0+256)))& (0+255)
 11983  123B  00B8               	movwf	(low ((?_sprintf| (0+256)+4)))^0
 11984  123C  0852               	movf	statusView@data^(0+256),w
 11985  123D  3E04               	addlw	4
 11986  123E  0086               	movwf	6
 11987  123F  3002               	movlw	2	; select bank4/5
 11988  1240  0087               	movwf	7
 11989  1241  3F40               	moviw [0]fsr1
 11990  1242  00B9               	movwf	(?_sprintf^(0+256)+5)
 11991  1243  3F41               	moviw [1]fsr1
 11992  1244  00BA               	movwf	((?_sprintf+1)^(0+256)+5)
 11993  1245  3F42               	moviw [2]fsr1
 11994  1246  00BB               	movwf	((?_sprintf+2)^(0+256)+5)
 11995  1247  3F43               	moviw [3]fsr1
 11996  1248  00BC               	movwf	((?_sprintf+3)^(0+256)+5)
 11997  1249  0852               	movf	statusView@data^(0+256),w
 11998  124A  3E08               	addlw	8
 11999  124B  0086               	movwf	6
 12000  124C  3F40               	moviw [0]fsr1
 12001  124D  00BD               	movwf	(?_sprintf^(0+256)+9)
 12002  124E  3F41               	moviw [1]fsr1
 12003  124F  00BE               	movwf	((?_sprintf+1)^(0+256)+9)
 12004  1250  3F42               	moviw [2]fsr1
 12005  1251  00BF               	movwf	((?_sprintf+2)^(0+256)+9)
 12006  1252  3F43               	moviw [3]fsr1
 12007  1253  00C0               	movwf	((?_sprintf+3)^(0+256)+9)
 12008  1254  0852               	movf	statusView@data^(0+256),w
 12009  1255  3E14               	addlw	20
 12010  1256  0086               	movwf	6
 12011  1257  3F40               	moviw [0]fsr1
 12012  1258  00C1               	movwf	(?_sprintf^(0+256)+13)
 12013  1259  3F41               	moviw [1]fsr1
 12014  125A  00C2               	movwf	((?_sprintf+1)^(0+256)+13)
 12015  125B  3F42               	moviw [2]fsr1
 12016  125C  00C3               	movwf	((?_sprintf+2)^(0+256)+13)
 12017  125D  3F43               	moviw [3]fsr1
 12018  125E  00C4               	movwf	((?_sprintf+3)^(0+256)+13)
 12019  125F  0852               	movf	statusView@data^(0+256),w
 12020  1260  3E1C               	addlw	28
 12021  1261  0086               	movwf	6
 12022  1262  3F40               	moviw [0]fsr1
 12023  1263  00C5               	movwf	(?_sprintf^(0+256)+17)
 12024  1264  3F41               	moviw [1]fsr1
 12025  1265  00C6               	movwf	((?_sprintf+1)^(0+256)+17)
 12026  1266  3F42               	moviw [2]fsr1
 12027  1267  00C7               	movwf	((?_sprintf+2)^(0+256)+17)
 12028  1268  3F43               	moviw [3]fsr1
 12029  1269  00C8               	movwf	((?_sprintf+3)^(0+256)+17)
 12030  126A  22CB  3191         	fcall	_sprintf
 12031                           
 12032                           ;menu.c: 108:   OLED_print_xy(0, 1, s);
 12033  126C  273C  3191         	fcall	PL38	;call to abstracted procedure
 12034  126E  229E  3191         	fcall	_OLED_print_xy
 12035                           
 12036                           ;menu.c: 109:   page = paging(page, 4);
 12037  1270  3004               	movlw	4
 12038  1271  00A6               	movwf	paging@lastPage
 12039  1272  0142               	movlb	2	; select bank2
 12040  1273  0864               	movf	statusView@page^(0+256),w
 12041  1274  2310  3191         	fcall	_paging
 12042  1276  0142               	movlb	2	; select bank2
 12043  1277  00E4               	movwf	statusView@page^(0+256)
 12044                           
 12045                           ;menu.c: 110:  } else {
 12046  1278  2A9B               	goto	l5920
 12047  1279                     l5910:	
 12048                           
 12049                           ;menu.c: 111:   page = 0;
 12050  1279  01E4               	clrf	statusView@page^(0+256)
 12051                           
 12052                           ;menu.c: 112:   OLED_returnHome();
 12053  127A  3186  263A  3191   	fcall	_OLED_returnHome
 12054  127D  3071               	movlw	low ((STR_1+36)| (0+32768))
 12055                           
 12056                           ;menu.c: 113:   OLED_print_xy(0, 0, "Bat.   Power");
 12057  127E  01A6               	clrf	OLED_print_xy@row
 12058  127F  00A7               	movwf	OLED_print_xy@s
 12059  1280  30A0               	movlw	high ((STR_1+36)| (0+32768))
 12060  1281  00A8               	movwf	OLED_print_xy@s+1
 12061  1282  3000               	movlw	0
 12062  1283  229E  3191         	fcall	_OLED_print_xy
 12063                           
 12064                           ;menu.c: 114:   sprintf(s, "%4.1fV  %4.1fW", data->voltage, data->power);
 12065  1285  279F  3191         	fcall	PL90	;call to abstracted procedure
 12066  1287  3099               	movlw	low ((STR_4+27)| (0+32768))
 12067  1288  00B6               	movwf	sprintf@fmt^(0+256)
 12068  1289  30A0               	movlw	high ((STR_4+27)| (0+32768))
 12069  128A  00B7               	movwf	(sprintf@fmt^(0+256)+1)
 12070  128B  0852               	movf	statusView@data^(0+256),w
 12071  128C  3E14               	addlw	20
 12072  128D  0086               	movwf	6
 12073  128E  3002               	movlw	2	; select bank4/5
 12074  128F  0087               	movwf	7
 12075  1290  276C  3191         	fcall	PL64	;call to abstracted procedure
 12076  1292  0852               	movf	statusView@data^(0+256),w
 12077  1293  3E1C               	addlw	28
 12078  1294  2795  3191         	fcall	PL82	;call to abstracted procedure
 12079  1296  22CB  3191         	fcall	_sprintf
 12080                           
 12081                           ;menu.c: 115:   OLED_print_xy(0, 1, s);
 12082  1298  273C  3191         	fcall	PL38	;call to abstracted procedure
 12083  129A  229E               	fcall	_OLED_print_xy
 12084  129B                     l5920:	
 12085                           
 12086                           ;menu.c: 117:  return page;
 12087  129B  0142               	movlb	2	; select bank2
 12088  129C  0864               	movf	statusView@page^(0+256),w
 12089  129D  0008               	return
 12090  129E                     __end_of_statusView:	
 12091  129E                     __ptext45:	
 12092 ;; *************** function _OLED_print_xy *****************
 12093 ;; Defined at:
 12094 ;;		line 150 in file "oled.c"
 12095 ;; Parameters:    Size  Location     Type
 12096 ;;  col             1    wreg     unsigned char 
 12097 ;;  row             1    6[BANK0 ] unsigned char 
 12098 ;;  s               2    7[BANK0 ] PTR unsigned char 
 12099 ;;		 -> STR_12(12), STR_10(13), STR_8(25), STR_7(49), 
 12100 ;;		 -> STR_5(13), s(61), STR_1(49), 
 12101 ;; Auto vars:     Size  Location     Type
 12102 ;;  col             1   14[BANK0 ] unsigned char 
 12103 ;;  row_offsets     4   10[BANK0 ] unsigned char [4]
 12104 ;; Return value:  Size  Location     Type
 12105 ;;                  1    wreg      void 
 12106 ;; Registers used:
 12107 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12108 ;; Tracked objects:
 12109 ;;		On entry : 3F/0
 12110 ;;		On exit  : 3F/0
 12111 ;;		Unchanged: 0/0
 12112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12113 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12114 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12115 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12116 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12117 ;;Total ram usage:        9 bytes
 12118 ;; Hardware stack levels used:    1
 12119 ;; Hardware stack levels required when called:    7
 12120 ;; This function calls:
 12121 ;;		_OLED_command
 12122 ;;		_OLED_write
 12123 ;; This function is called by:
 12124 ;;		_statusView
 12125 ;;		_channelView
 12126 ;;		_channelSetup
 12127 ;;		_setOutputPower
 12128 ;;		_setLensDia
 12129 ;; This function uses a non-reentrant model
 12130 ;;
 12131                           
 12132                           
 12133                           ;psect for function _OLED_print_xy
 12134  129E                     _OLED_print_xy:	
 12135                           
 12136                           ;incstack = 0
 12137                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12138                           ;OLED_print_xy@col stored from wreg
 12139  129E  00AE               	movwf	OLED_print_xy@col
 12140                           
 12141                           ;oled.c: 150: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 151: {;oled.
      +                          c: 152:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 12142  129F  0143               	movlb	3	; select bank3
 12143  12A0  086C               	movf	(OLED_print_xy@F7874+3)^(0+384),w
 12144  12A1  0140               	movlb	0	; select bank0
 12145  12A2  00AD               	movwf	OLED_print_xy@row_offsets+3
 12146  12A3  0143               	movlb	3	; select bank3
 12147  12A4  086B               	movf	(OLED_print_xy@F7874+2)^(0+384),w
 12148  12A5  0140               	movlb	0	; select bank0
 12149  12A6  00AC               	movwf	OLED_print_xy@row_offsets+2
 12150  12A7  0143               	movlb	3	; select bank3
 12151  12A8  086A               	movf	(OLED_print_xy@F7874+1)^(0+384),w
 12152  12A9  0140               	movlb	0	; select bank0
 12153  12AA  00AB               	movwf	OLED_print_xy@row_offsets+1
 12154  12AB  0143               	movlb	3	; select bank3
 12155  12AC  0869               	movf	OLED_print_xy@F7874^(0+384),w
 12156  12AD  0140               	movlb	0	; select bank0
 12157  12AE  00AA               	movwf	OLED_print_xy@row_offsets
 12158                           
 12159                           ;oled.c: 154:  OLED_command(0x80 | (col + row_offsets[row]));
 12160  12AF  0826               	movf	OLED_print_xy@row,w
 12161  12B0  3E2A               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 12162  12B1  0086               	movwf	6
 12163  12B2  0187               	clrf	7
 12164  12B3  0801               	movf	1,w
 12165  12B4  072E               	addwf	OLED_print_xy@col,w
 12166  12B5  3880               	iorlw	128
 12167  12B6  3181  216E  3191   	fcall	_OLED_command
 12168  12B9                     l5034:	
 12169                           ;oled.c: 155:  while (*s != (char) ((void*)0)) {
 12170                           
 12171                           
 12172                           ;oled.c: 155:  while (*s != (char) ((void*)0)) {
 12173  12B9  0827               	movf	OLED_print_xy@s,w
 12174  12BA  0084               	movwf	4
 12175  12BB  0828               	movf	OLED_print_xy@s+1,w
 12176  12BC  0085               	movwf	5
 12177  12BD  0012               	moviw fsr0++
 12178  12BE  1903               	btfsc	3,2
 12179  12BF  0008               	return
 12180                           
 12181                           ;oled.c: 156:   OLED_write(*s++);
 12182  12C0  0827               	movf	OLED_print_xy@s,w
 12183  12C1  0084               	movwf	4
 12184  12C2  0828               	movf	OLED_print_xy@s+1,w
 12185  12C3  0085               	movwf	5
 12186  12C4  0800               	movf	0,w	;code access
 12187  12C5  2359  3191         	fcall	_OLED_write
 12188  12C7  0AA7               	incf	OLED_print_xy@s,f
 12189  12C8  1903               	skipnz
 12190  12C9  0AA8               	incf	OLED_print_xy@s+1,f
 12191  12CA  2AB9               	goto	l5034
 12192  12CB                     __end_of_OLED_print_xy:	
 12193  12CB                     __ptext10:	
 12194 ;; *************** function _sprintf *****************
 12195 ;; Defined at:
 12196 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\nf_sprintf.c"
 12197 ;; Parameters:    Size  Location     Type
 12198 ;;  s               2   20[BANK2 ] PTR unsigned char 
 12199 ;;		 -> s(61), s12(13), 
 12200 ;;  fmt             2   22[BANK2 ] PTR const unsigned char 
 12201 ;;		 -> STR_13(14), STR_11(14), STR_9(19), STR_6(15), 
 12202 ;;		 -> STR_4(42), STR_3(13), STR_2(17), 
 12203 ;; Auto vars:     Size  Location     Type
 12204 ;;  f               6   44[BANK2 ] struct _IO_FILE
 12205 ;;  ret             2    0        int 
 12206 ;;  ap              1   43[BANK2 ] PTR void [1]
 12207 ;;		 -> ?_sprintf(2), 
 12208 ;; Return value:  Size  Location     Type
 12209 ;;                  2   20[BANK2 ] int 
 12210 ;; Registers used:
 12211 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12212 ;; Tracked objects:
 12213 ;;		On entry : 3F/2
 12214 ;;		On exit  : 3F/2
 12215 ;;		Unchanged: 0/0
 12216 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12217 ;;      Params:         0       0       0      21       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12218 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12220 ;;      Totals:         0       0       0      30       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12221 ;;Total ram usage:       30 bytes
 12222 ;; Hardware stack levels used:    1
 12223 ;; Hardware stack levels required when called:   10
 12224 ;; This function calls:
 12225 ;;		_vfprintf
 12226 ;; This function is called by:
 12227 ;;		_statusView
 12228 ;;		_channelSetup
 12229 ;;		_setOutputPower
 12230 ;;		_setLensDia
 12231 ;; This function uses a non-reentrant model
 12232 ;;
 12233                           
 12234                           
 12235                           ;psect for function _sprintf
 12236  12CB                     _sprintf:	
 12237                           
 12238                           ;incstack = 0
 12239                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12240  12CB  3038               	movlw	(low ((?_sprintf| (0+256)+4)))& (0+255)
 12241  12CC  00CB               	movwf	sprintf@ap^(0+256)
 12242  12CD  0835               	movf	(sprintf@s+1)^(0+256),w
 12243  12CE  00CD               	movwf	(sprintf@f+1)^(0+256)
 12244  12CF  0834               	movf	sprintf@s^(0+256),w
 12245  12D0  00CC               	movwf	sprintf@f^(0+256)
 12246  12D1  01CE               	clrf	(sprintf@f^(0+256)+2)
 12247  12D2  01CF               	clrf	((sprintf@f+1)^(0+256)+2)
 12248  12D3  01D0               	clrf	(sprintf@f^(0+256)+4)
 12249  12D4  01D1               	clrf	((sprintf@f+1)^(0+256)+4)
 12250  12D5  0837               	movf	(sprintf@fmt+1)^(0+256),w
 12251  12D6  0141               	movlb	1	; select bank1
 12252  12D7  00EA               	movwf	(vfprintf@fmt+1)^(0+128)
 12253  12D8  0142               	movlb	2	; select bank2
 12254  12D9  0836               	movf	sprintf@fmt^(0+256),w
 12255  12DA  0141               	movlb	1	; select bank1
 12256  12DB  00E9               	movwf	vfprintf@fmt^(0+128)
 12257  12DC  304B               	movlw	(low (sprintf@ap| (0+256)))& (0+255)
 12258  12DD  00EB               	movwf	vfprintf@ap^(0+128)
 12259  12DE  304C               	movlw	(low (sprintf@f| (0+256)))& (0+255)
 12260  12DF  2370               	fcall	_vfprintf
 12261  12E0  304E               	movlw	((low (sprintf@f| (0+256)))& (0+255)+2)
 12262  12E1  0086               	movwf	6
 12263  12E2  3001               	movlw	1	; select bank2/3
 12264  12E3  0087               	movwf	7
 12265  12E4  3F40               	moviw [0]fsr1
 12266  12E5  0142               	movlb	2	; select bank2
 12267  12E6  0734               	addwf	sprintf@s^(0+256),w
 12268  12E7  0084               	movwf	4
 12269  12E8  3F41               	moviw [1]fsr1
 12270  12E9  3D35               	addwfc	(sprintf@s+1)^(0+256),w
 12271  12EA  0085               	movwf	5
 12272  12EB  0180               	clrf	0
 12273  12EC  0008               	return
 12274  12ED                     __end_of_sprintf:	
 12275  12ED                     __ptext39:	
 12276 ;; *************** function _returnToPage *****************
 12277 ;; Defined at:
 12278 ;;		line 191 in file "menu.c"
 12279 ;; Parameters:    Size  Location     Type
 12280 ;;  page            1    wreg     unsigned char 
 12281 ;; Auto vars:     Size  Location     Type
 12282 ;;  page            1    6[BANK0 ] unsigned char 
 12283 ;;  n               1    7[BANK0 ] unsigned char 
 12284 ;; Return value:  Size  Location     Type
 12285 ;;                  1    wreg      void 
 12286 ;; Registers used:
 12287 ;;		wreg, status,2, status,0, pclath, cstack
 12288 ;; Tracked objects:
 12289 ;;		On entry : 3F/2
 12290 ;;		On exit  : 0/0
 12291 ;;		Unchanged: 0/0
 12292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12293 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12294 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12295 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12296 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12297 ;;Total ram usage:        2 bytes
 12298 ;; Hardware stack levels used:    1
 12299 ;; Hardware stack levels required when called:    7
 12300 ;; This function calls:
 12301 ;;		_OLED_command
 12302 ;;		___wmul
 12303 ;; This function is called by:
 12304 ;;		_statusView
 12305 ;;		_channelView
 12306 ;;		_channelSetup
 12307 ;;		_setOutputPower
 12308 ;;		_setLensDia
 12309 ;; This function uses a non-reentrant model
 12310 ;;
 12311                           
 12312                           
 12313                           ;psect for function _returnToPage
 12314  12ED                     _returnToPage:	
 12315                           
 12316                           ;incstack = 0
 12317                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 12318                           ;returnToPage@page stored from wreg
 12319  12ED  0140               	movlb	0	; select bank0
 12320  12EE  00A6               	movwf	returnToPage@page
 12321                           
 12322                           ;menu.c: 191: static void returnToPage(uint8_t page);menu.c: 192: {;menu.c: 193:  uint8_
      +                          t n;;menu.c: 194:  if (! updateScreen)
 12323  12EF  0142               	movlb	2	; select bank2
 12324  12F0  086E               	movf	_updateScreen^(0+256),w
 12325  12F1  1903               	btfsc	3,2
 12326  12F2  0008               	return
 12327                           
 12328                           ;menu.c: 196:  OLED_command(0x02);
 12329  12F3  3002               	movlw	2
 12330  12F4  3181  216E  3191   	fcall	_OLED_command
 12331                           
 12332                           ;menu.c: 197:  for(n = 0; n < 12 * page; n++) {
 12333  12F7  01A7               	clrf	returnToPage@n
 12334  12F8                     l5048:	
 12335  12F8  0826               	movf	returnToPage@page,w
 12336  12F9  00A0               	movwf	___wmul@multiplier
 12337  12FA  300C               	movlw	12
 12338  12FB  01A1               	clrf	___wmul@multiplier+1
 12339  12FC  00A2               	movwf	___wmul@multiplicand
 12340  12FD  01A3               	clrf	___wmul@multiplicand+1
 12341  12FE  3186  26C0  3191   	fcall	___wmul
 12342  1301  0821               	movf	?___wmul+1,w
 12343  1302  3A80               	xorlw	128
 12344  1303  3C80               	sublw	128
 12345  1304  1D03               	skipz
 12346  1305  2B08               	goto	u6275
 12347  1306  0820               	movf	?___wmul,w
 12348  1307  0227               	subwf	returnToPage@n,w
 12349  1308                     u6275:	
 12350  1308  1803               	btfsc	3,0
 12351  1309  0008               	return
 12352                           
 12353                           ;menu.c: 198:   OLED_command(0x10 | 0x08 | 0x00);
 12354  130A  3018               	movlw	24
 12355  130B  3181  216E  3191   	fcall	_OLED_command
 12356                           
 12357                           ;menu.c: 199:  }
 12358  130E  0AA7               	incf	returnToPage@n,f
 12359  130F  2AF8               	goto	l5048
 12360  1310                     __end_of_returnToPage:	
 12361  1310                     __ptext41:	
 12362 ;; *************** function _paging *****************
 12363 ;; Defined at:
 12364 ;;		line 165 in file "menu.c"
 12365 ;; Parameters:    Size  Location     Type
 12366 ;;  currentPage     1    wreg     unsigned char 
 12367 ;;  lastPage        1    6[BANK0 ] const unsigned char 
 12368 ;; Auto vars:     Size  Location     Type
 12369 ;;  currentPage     1   10[BANK0 ] unsigned char 
 12370 ;;  n               1   11[BANK0 ] unsigned char 
 12371 ;;  dir             1    9[BANK0 ] enum E7850
 12372 ;; Return value:  Size  Location     Type
 12373 ;;                  1    wreg      unsigned char 
 12374 ;; Registers used:
 12375 ;;		wreg, status,2, status,0, pclath, cstack
 12376 ;; Tracked objects:
 12377 ;;		On entry : 3F/2
 12378 ;;		On exit  : 3F/0
 12379 ;;		Unchanged: 0/0
 12380 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12381 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12382 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12383 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12384 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12385 ;;Total ram usage:        6 bytes
 12386 ;; Hardware stack levels used:    1
 12387 ;; Hardware stack levels required when called:    8
 12388 ;; This function calls:
 12389 ;;		_OLED_scrollDisplayLeft
 12390 ;;		_OLED_scrollDisplayRight
 12391 ;;		_getRotDir
 12392 ;; This function is called by:
 12393 ;;		_statusView
 12394 ;;		_channelView
 12395 ;;		_channelSetup
 12396 ;; This function uses a non-reentrant model
 12397 ;;
 12398                           
 12399                           
 12400                           ;psect for function _paging
 12401  1310                     _paging:	
 12402                           
 12403                           ;incstack = 0
 12404                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 12405                           ;paging@currentPage stored from wreg
 12406  1310  0140               	movlb	0	; select bank0
 12407  1311  00AA               	movwf	paging@currentPage
 12408                           
 12409                           ;menu.c: 165: static uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menu.c:
      +                           166: {;menu.c: 167:  uint8_t n;;menu.c: 168:  enum e_direction dir;;menu.c: 170:  PIE0b
      +                          its.IOCIE = 0;
 12410  1312  014E               	movlb	14	; select bank14
 12411  1313  1216               	bcf	22,4	;volatile
 12412                           
 12413                           ;menu.c: 171:  dir = getRotDir();
 12414  1314  2367  3191         	fcall	_getRotDir
 12415  1316  00A9               	movwf	paging@dir
 12416                           
 12417                           ;menu.c: 173:  if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 12418  1317  0B29               	decfsz	paging@dir,w
 12419  1318  2B3B               	goto	l5086
 12420  1319  0826               	movf	paging@lastPage,w
 12421  131A  3EFF               	addlw	255
 12422  131B  00A7               	movwf	??_paging
 12423  131C  30FF               	movlw	255
 12424  131D  1803               	skipnc
 12425  131E  3000               	movlw	0
 12426  131F  00A8               	movwf	??_paging+1
 12427  1320  3A80               	xorlw	128
 12428  1321  3C80               	sublw	128
 12429  1322  1D03               	skipz
 12430  1323  2B26               	goto	u6295
 12431  1324  0827               	movf	??_paging,w
 12432  1325  022A               	subwf	paging@currentPage,w
 12433  1326                     u6295:	
 12434  1326  1803               	skipnc
 12435  1327  2B3B               	goto	l5086
 12436                           
 12437                           ;menu.c: 174:   currentPage++;
 12438  1328  0140               	movlb	0	; select bank0
 12439  1329  0AAA               	incf	paging@currentPage,f
 12440                           
 12441                           ;menu.c: 175:   for(n = 0; n < 12; n++) {
 12442  132A  01AB               	clrf	paging@n
 12443  132B                     l5078:	
 12444                           
 12445                           ;menu.c: 176:    OLED_scrollDisplayLeft();
 12446  132B  2361  3191         	fcall	_OLED_scrollDisplayLeft
 12447                           
 12448                           ;menu.c: 177:    _delay((unsigned long)((20)*(4000000/4000.0)));
 12449  132D  301A               	movlw	26
 12450  132E  0140               	movlb	0	; select bank0
 12451  132F  00A7               	movwf	??_paging
 12452  1330  30F8               	movlw	248
 12453  1331                     u7327:	
 12454  1331  0B89               	decfsz	9,f
 12455  1332  2B31               	goto	u7327
 12456  1333  0BA7               	decfsz	??_paging,f
 12457  1334  2B31               	goto	u7327
 12458  1335  0000               	nop
 12459                           
 12460                           ;menu.c: 178:   }
 12461  1336  27F1  3191         	fcall	PL164	;call to abstracted procedure
 12462  1338  1803               	btfsc	3,0
 12463  1339  2B54               	goto	l457
 12464  133A  2B2B               	goto	l5078
 12465  133B                     l5086:	
 12466  133B  3002               	movlw	2
 12467  133C  0140               	movlb	0	; select bank0
 12468  133D  0629               	xorwf	paging@dir,w
 12469  133E  1D03               	btfss	3,2
 12470  133F  2B54               	goto	l457
 12471  1340  082A               	movf	paging@currentPage,w
 12472  1341  1903               	btfsc	3,2
 12473  1342  2B54               	goto	l457
 12474                           
 12475                           ;menu.c: 181:   currentPage--;
 12476  1343  03AA               	decf	paging@currentPage,f
 12477                           
 12478                           ;menu.c: 182:   for(n = 0; n < 12; n++) {
 12479  1344  01AB               	clrf	paging@n
 12480  1345                     l5098:	
 12481                           
 12482                           ;menu.c: 183:    OLED_scrollDisplayRight();
 12483  1345  2364  3191         	fcall	_OLED_scrollDisplayRight
 12484                           
 12485                           ;menu.c: 184:    _delay((unsigned long)((20)*(4000000/4000.0)));
 12486  1347  301A               	movlw	26
 12487  1348  0140               	movlb	0	; select bank0
 12488  1349  00A7               	movwf	??_paging
 12489  134A  30F8               	movlw	248
 12490  134B                     u7337:	
 12491  134B  0B89               	decfsz	9,f
 12492  134C  2B4B               	goto	u7337
 12493  134D  0BA7               	decfsz	??_paging,f
 12494  134E  2B4B               	goto	u7337
 12495  134F  0000               	nop
 12496                           
 12497                           ;menu.c: 185:   }
 12498  1350  27F1  3191         	fcall	PL164	;call to abstracted procedure
 12499  1352  1C03               	skipc
 12500  1353  2B45               	goto	l5098
 12501  1354                     l457:	
 12502                           
 12503                           ;menu.c: 187:  PIE0bits.IOCIE = 1;
 12504  1354  014E               	movlb	14	; select bank14
 12505  1355  1616               	bsf	22,4	;volatile
 12506                           
 12507                           ;menu.c: 188:  return currentPage;
 12508  1356  0140               	movlb	0	; select bank0
 12509  1357  082A               	movf	paging@currentPage,w
 12510  1358  0008               	return
 12511  1359                     __end_of_paging:	
 12512  1359                     __ptext46:	
 12513 ;; *************** function _OLED_write *****************
 12514 ;; Defined at:
 12515 ;;		line 72 in file "oled.c"
 12516 ;; Parameters:    Size  Location     Type
 12517 ;;  value           1    wreg     unsigned char 
 12518 ;; Auto vars:     Size  Location     Type
 12519 ;;  value           1    5[BANK0 ] unsigned char 
 12520 ;; Return value:  Size  Location     Type
 12521 ;;                  1    wreg      void 
 12522 ;; Registers used:
 12523 ;;		wreg, status,2, status,0, pclath, cstack
 12524 ;; Tracked objects:
 12525 ;;		On entry : 3F/0
 12526 ;;		On exit  : 3F/0
 12527 ;;		Unchanged: 0/0
 12528 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12530 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12532 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12533 ;;Total ram usage:        1 bytes
 12534 ;; Hardware stack levels used:    1
 12535 ;; Hardware stack levels required when called:    6
 12536 ;; This function calls:
 12537 ;;		_OLED_send
 12538 ;;		_OLED_waitForReady
 12539 ;; This function is called by:
 12540 ;;		_OLED_print_xy
 12541 ;; This function uses a non-reentrant model
 12542 ;;
 12543                           
 12544                           
 12545                           ;psect for function _OLED_write
 12546  1359                     _OLED_write:	
 12547                           
 12548                           ;incstack = 0
 12549                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 12550                           ;OLED_write@value stored from wreg
 12551  1359  00A5               	movwf	OLED_write@value
 12552                           
 12553                           ;oled.c: 72: void OLED_write(uint8_t value);oled.c: 73: {;oled.c: 74:  OLED_send(value, 
      +                          1);
 12554  135A  01A3               	clrf	OLED_send@mode
 12555  135B  0AA3               	incf	OLED_send@mode,f
 12556  135C  0825               	movf	OLED_write@value,w
 12557  135D  3182  22C1         	fcall	_OLED_send
 12558                           
 12559                           ;oled.c: 75:  OLED_waitForReady();
 12560  135F  3186  2EE6         	ljmp	l4370
 12561  1361                     __end_of_OLED_write:	
 12562  1361                     __ptext44:	
 12563 ;; *************** function _OLED_scrollDisplayLeft *****************
 12564 ;; Defined at:
 12565 ;;		line 126 in file "oled.c"
 12566 ;; Parameters:    Size  Location     Type
 12567 ;;		None
 12568 ;; Auto vars:     Size  Location     Type
 12569 ;;		None
 12570 ;; Return value:  Size  Location     Type
 12571 ;;                  1    wreg      void 
 12572 ;; Registers used:
 12573 ;;		wreg, status,2, status,0, pclath, cstack
 12574 ;; Tracked objects:
 12575 ;;		On entry : 3F/0
 12576 ;;		On exit  : 3F/0
 12577 ;;		Unchanged: 0/0
 12578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12579 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12580 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12582 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12583 ;;Total ram usage:        0 bytes
 12584 ;; Hardware stack levels used:    1
 12585 ;; Hardware stack levels required when called:    7
 12586 ;; This function calls:
 12587 ;;		_OLED_command
 12588 ;; This function is called by:
 12589 ;;		_paging
 12590 ;; This function uses a non-reentrant model
 12591 ;;
 12592                           
 12593                           
 12594                           ;psect for function _OLED_scrollDisplayLeft
 12595  1361                     _OLED_scrollDisplayLeft:	
 12596                           
 12597                           ;oled.c: 128:  OLED_command(0x10 | 0x08 | 0x00);
 12598                           
 12599                           ;incstack = 0
 12600                           ; Regs used in _OLED_scrollDisplayLeft: [wreg+status,2+status,0+pclath+cstack]
 12601  1361  3018               	movlw	24
 12602  1362  3181  296E         	ljmp	_OLED_command
 12603  1364                     __end_of_OLED_scrollDisplayLeft:	
 12604  1364                     __ptext43:	
 12605 ;; *************** function _OLED_scrollDisplayRight *****************
 12606 ;; Defined at:
 12607 ;;		line 131 in file "oled.c"
 12608 ;; Parameters:    Size  Location     Type
 12609 ;;		None
 12610 ;; Auto vars:     Size  Location     Type
 12611 ;;		None
 12612 ;; Return value:  Size  Location     Type
 12613 ;;                  1    wreg      void 
 12614 ;; Registers used:
 12615 ;;		wreg, status,2, status,0, pclath, cstack
 12616 ;; Tracked objects:
 12617 ;;		On entry : 3F/0
 12618 ;;		On exit  : 3F/0
 12619 ;;		Unchanged: 0/0
 12620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12625 ;;Total ram usage:        0 bytes
 12626 ;; Hardware stack levels used:    1
 12627 ;; Hardware stack levels required when called:    7
 12628 ;; This function calls:
 12629 ;;		_OLED_command
 12630 ;; This function is called by:
 12631 ;;		_paging
 12632 ;; This function uses a non-reentrant model
 12633 ;;
 12634                           
 12635                           
 12636                           ;psect for function _OLED_scrollDisplayRight
 12637  1364                     _OLED_scrollDisplayRight:	
 12638                           
 12639                           ;oled.c: 133:  OLED_command(0x10 | 0x08 | 0x04);
 12640                           
 12641                           ;incstack = 0
 12642                           ; Regs used in _OLED_scrollDisplayRight: [wreg+status,2+status,0+pclath+cstack]
 12643  1364  301C               	movlw	28
 12644  1365  3181  296E         	ljmp	_OLED_command
 12645  1367                     __end_of_OLED_scrollDisplayRight:	
 12646  1367                     __ptext42:	
 12647 ;; *************** function _getRotDir *****************
 12648 ;; Defined at:
 12649 ;;		line 58 in file "inputs.c"
 12650 ;; Parameters:    Size  Location     Type
 12651 ;;		None
 12652 ;; Auto vars:     Size  Location     Type
 12653 ;;  ret             1    0[BANK0 ] enum E7823
 12654 ;; Return value:  Size  Location     Type
 12655 ;;                  1    wreg      enum E7823
 12656 ;; Registers used:
 12657 ;;		wreg, status,2
 12658 ;; Tracked objects:
 12659 ;;		On entry : 3F/E
 12660 ;;		On exit  : 3F/0
 12661 ;;		Unchanged: 0/0
 12662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12666 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12667 ;;Total ram usage:        1 bytes
 12668 ;; Hardware stack levels used:    1
 12669 ;; Hardware stack levels required when called:    3
 12670 ;; This function calls:
 12671 ;;		Nothing
 12672 ;; This function is called by:
 12673 ;;		_paging
 12674 ;; This function uses a non-reentrant model
 12675 ;;
 12676                           
 12677                           
 12678                           ;psect for function _getRotDir
 12679  1367                     _getRotDir:	
 12680                           
 12681                           ;incstack = 0
 12682                           ; Regs used in _getRotDir: [wreg+status,2]
 12683  1367  0142               	movlb	2	; select bank2
 12684  1368  086C               	movf	_g_rotDir^(0+256),w	;volatile
 12685  1369  0140               	movlb	0	; select bank0
 12686  136A  00A0               	movwf	getRotDir@ret
 12687  136B  0142               	movlb	2	; select bank2
 12688  136C  01EC               	clrf	_g_rotDir^(0+256)	;volatile
 12689  136D  0140               	movlb	0	; select bank0
 12690  136E  0820               	movf	getRotDir@ret,w
 12691  136F  0008               	return
 12692  1370                     __end_of_getRotDir:	
 12693  1370                     __ptext11:	
 12694 ;; *************** function _vfprintf *****************
 12695 ;; Defined at:
 12696 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
 12697 ;; Parameters:    Size  Location     Type
 12698 ;;  fp              1    wreg     PTR struct _IO_FILE
 12699 ;;		 -> sprintf@f(6), 
 12700 ;;  fmt             2   73[BANK1 ] PTR const unsigned char 
 12701 ;;		 -> STR_13(14), STR_11(14), STR_9(19), STR_6(15), 
 12702 ;;		 -> STR_4(42), STR_3(13), STR_2(17), 
 12703 ;;  ap              1   75[BANK1 ] PTR PTR void 
 12704 ;;		 -> sprintf@ap(1), 
 12705 ;; Auto vars:     Size  Location     Type
 12706 ;;  fp              1   77[BANK1 ] PTR struct _IO_FILE
 12707 ;;		 -> sprintf@f(6), 
 12708 ;;  cfmt            2   78[BANK1 ] PTR unsigned char 
 12709 ;;		 -> STR_13(14), STR_11(14), STR_9(19), STR_6(15), 
 12710 ;;		 -> STR_4(42), STR_3(13), STR_2(17), 
 12711 ;; Return value:  Size  Location     Type
 12712 ;;                  2   73[BANK1 ] int 
 12713 ;; Registers used:
 12714 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12715 ;; Tracked objects:
 12716 ;;		On entry : 3F/1
 12717 ;;		On exit  : 3F/1
 12718 ;;		Unchanged: 0/0
 12719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12720 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12721 ;;      Locals:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12722 ;;      Temps:          0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12723 ;;      Totals:         0       0       7       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12724 ;;Total ram usage:        7 bytes
 12725 ;; Hardware stack levels used:    1
 12726 ;; Hardware stack levels required when called:    9
 12727 ;; This function calls:
 12728 ;;		_vfpfcnvrt
 12729 ;; This function is called by:
 12730 ;;		_sprintf
 12731 ;; This function uses a non-reentrant model
 12732 ;;
 12733                           
 12734                           
 12735                           ;psect for function _vfprintf
 12736  1370                     _vfprintf:	
 12737                           
 12738                           ;incstack = 0
 12739                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12740                           ;vfprintf@fp stored from wreg
 12741  1370  00ED               	movwf	vfprintf@fp^(0+128)
 12742                           
 12743                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.0
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.00\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
 12744  1371  086A               	movf	(vfprintf@fmt+1)^(0+128),w
 12745  1372  00EF               	movwf	(vfprintf@cfmt+1)^(0+128)
 12746  1373  0869               	movf	vfprintf@fmt^(0+128),w
 12747  1374  00EE               	movwf	vfprintf@cfmt^(0+128)
 12748                           
 12749                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
 12750  1375  0143               	movlb	3	; select bank3
 12751  1376  01B4               	clrf	_nout^(0+384)
 12752  1377  01B5               	clrf	(_nout+1)^(0+384)
 12753  1378                     l5878:	
 12754                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 12755                           
 12756                           
 12757                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
 12758  1378  0141               	movlb	1	; select bank1
 12759  1379  086E               	movf	vfprintf@cfmt^(0+128),w
 12760  137A  0084               	movwf	4
 12761  137B  086F               	movf	(vfprintf@cfmt+1)^(0+128),w
 12762  137C  0085               	movwf	5
 12763  137D  0012               	moviw fsr0++
 12764  137E  1903               	btfsc	3,2
 12765  137F  2B8F               	goto	l5880
 12766                           
 12767                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
 12768  1380  30EE               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
 12769  1381  00E3               	movwf	vfpfcnvrt@fmt^(0+128)
 12770  1382  086B               	movf	vfprintf@ap^(0+128),w
 12771  1383  00E4               	movwf	vfpfcnvrt@ap^(0+128)
 12772  1384  086D               	movf	vfprintf@fp^(0+128),w
 12773  1385  2398  3191         	fcall	_vfpfcnvrt
 12774  1387  0863               	movf	?_vfpfcnvrt^(0+128),w
 12775  1388  0143               	movlb	3	; select bank3
 12776  1389  07B4               	addwf	_nout^(0+384),f
 12777  138A  0141               	movlb	1	; select bank1
 12778  138B  0864               	movf	(?_vfpfcnvrt+1)^(0+128),w
 12779  138C  0143               	movlb	3	; select bank3
 12780  138D  3DB5               	addwfc	(_nout+1)^(0+384),f
 12781  138E  2B78               	goto	l5878
 12782  138F                     l5880:	
 12783                           
 12784                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
 12785  138F  0143               	movlb	3	; select bank3
 12786  1390  0835               	movf	(_nout+1)^(0+384),w
 12787  1391  0141               	movlb	1	; select bank1
 12788  1392  00EA               	movwf	(?_vfprintf+1)^(0+128)
 12789  1393  0143               	movlb	3	; select bank3
 12790  1394  0834               	movf	_nout^(0+384),w
 12791  1395  0141               	movlb	1	; select bank1
 12792  1396  00E9               	movwf	?_vfprintf^(0+128)
 12793  1397  0008               	return
 12794  1398                     __end_of_vfprintf:	
 12795  1398                     __ptext12:	
 12796 ;; *************** function _vfpfcnvrt *****************
 12797 ;; Defined at:
 12798 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
 12799 ;; Parameters:    Size  Location     Type
 12800 ;;  fp              1    wreg     PTR struct _IO_FILE
 12801 ;;		 -> sprintf@f(6), 
 12802 ;;  fmt             1   67[BANK1 ] PTR PTR unsigned char 
 12803 ;;		 -> vfprintf@cfmt(2), 
 12804 ;;  ap              1   68[BANK1 ] PTR PTR void 
 12805 ;;		 -> sprintf@ap(1), 
 12806 ;; Auto vars:     Size  Location     Type
 12807 ;;  fp              1   19[BANK2 ] PTR struct _IO_FILE
 12808 ;;		 -> sprintf@f(6), 
 12809 ;;  f               4   14[BANK2 ] PTR struct _IO_FILE
 12810 ;;  ll              4    0[BANK2 ] long 
 12811 ;;  llu             4    0        unsigned long 
 12812 ;;  ct              3   11[BANK2 ] unsigned char [3]
 12813 ;;  vp              2    0        PTR void 
 12814 ;;  i               2    0        int 
 12815 ;;  done            2    0        int 
 12816 ;;  c               1   18[BANK2 ] unsigned char 
 12817 ;;  cp              1    4[BANK2 ] PTR unsigned char 
 12818 ;;		 -> ?_sprintf(2), s12(13), 
 12819 ;; Return value:  Size  Location     Type
 12820 ;;                  2   67[BANK1 ] int 
 12821 ;; Registers used:
 12822 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 12823 ;; Tracked objects:
 12824 ;;		On entry : 3F/1
 12825 ;;		On exit  : 3F/1
 12826 ;;		Unchanged: 0/0
 12827 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12828 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12829 ;;      Locals:         0       0       0      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12830 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12831 ;;      Totals:         0       0       6      20       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12832 ;;Total ram usage:       26 bytes
 12833 ;; Hardware stack levels used:    1
 12834 ;; Hardware stack levels required when called:    8
 12835 ;; This function calls:
 12836 ;;		_atoi
 12837 ;;		_dtoa
 12838 ;;		_efgtoa
 12839 ;;		_fputc
 12840 ;;		_isdigit
 12841 ;;		_isupper
 12842 ;;		_stoa
 12843 ;;		_strncmp
 12844 ;;		_tolower
 12845 ;; This function is called by:
 12846 ;;		_vfprintf
 12847 ;; This function uses a non-reentrant model
 12848 ;;
 12849                           
 12850                           
 12851                           ;psect for function _vfpfcnvrt
 12852  1398                     _vfpfcnvrt:	
 12853                           
 12854                           ;incstack = 0
 12855                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 12856                           ;vfpfcnvrt@fp stored from wreg
 12857  1398  0142               	movlb	2	; select bank2
 12858  1399  00B3               	movwf	vfpfcnvrt@fp^(0+256)
 12859                           
 12860                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.00\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.00\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 674:     long long ll;
 12861  139A  0141               	movlb	1	; select bank1
 12862  139B  26F6  3191         	fcall	PL2	;call to abstracted procedure
 12863  139D  0012               	moviw fsr0++
 12864  139E  3A25               	xorlw	37
 12865  139F  1D03               	btfss	3,2
 12866  13A0  2D2B               	goto	l5864
 12867                           
 12868                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
 12869  13A1  2724  3191         	fcall	PL26	;call to abstracted procedure
 12870  13A3  1803               	skipnc
 12871  13A4  0A81               	incf	1,f
 12872                           
 12873                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
 12874  13A5  0142               	movlb	2	; select bank2
 12875  13A6  30FF               	movlw	255
 12876  13A7  01DC               	clrf	_width^(0+256)
 12877  13A8  01DD               	clrf	(_width+1)^(0+256)
 12878  13A9  01E0               	clrf	_flags^(0+256)
 12879  13AA  01E1               	clrf	(_flags+1)^(0+256)
 12880                           
 12881                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
 12882  13AB  00DE               	movwf	_prec^(0+256)
 12883  13AC  00DF               	movwf	(_prec^(0+256)+1)
 12884                           
 12885                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
 12886  13AD  0141               	movlb	1	; select bank1
 12887  13AE  26F6  3191         	fcall	PL2	;call to abstracted procedure
 12888  13B0  0012               	moviw fsr0++
 12889  13B1  3A2A               	xorlw	42
 12890  13B2  1D03               	btfss	3,2
 12891  13B3  2BC5               	goto	l5754
 12892                           
 12893                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
 12894  13B4  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 12895  13B5  0086               	movwf	6
 12896                           
 12897                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
 12898  13B6  2709  3191         	fcall	PL22	;call to abstracted procedure
 12899  13B8  0142               	movlb	2	; select bank2
 12900  13B9  00DC               	movwf	_width^(0+256)
 12901  13BA  3F01               	moviw [1]fsr0
 12902  13BB  00DD               	movwf	(_width+1)^(0+256)
 12903                           
 12904                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
 12905  13BC  1FDD               	btfss	(_width+1)^(0+256),7
 12906  13BD  2BE0               	goto	l5764
 12907                           
 12908                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
 12909  13BE  1460               	bsf	_flags^(0+256),0
 12910                           
 12911                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
 12912  13BF  09DC               	comf	_width^(0+256),f
 12913  13C0  09DD               	comf	(_width+1)^(0+256),f
 12914  13C1  0ADC               	incf	_width^(0+256),f
 12915  13C2  1903               	skipnz
 12916  13C3  0ADD               	incf	(_width+1)^(0+256),f
 12917  13C4  2BE0               	goto	l5764
 12918  13C5                     l5754:	
 12919                           
 12920                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
 12921  13C5  27AB  3191         	fcall	PL100	;call to abstracted procedure
 12922  13C7  2555  3191         	fcall	_atoi
 12923  13C9  0827               	movf	?_atoi+1,w
 12924  13CA  0142               	movlb	2	; select bank2
 12925  13CB  00DD               	movwf	(_width+1)^(0+256)
 12926  13CC  0140               	movlb	0	; select bank0
 12927  13CD  0826               	movf	?_atoi,w
 12928  13CE  0142               	movlb	2	; select bank2
 12929  13CF  00DC               	movwf	_width^(0+256)
 12930                           
 12931                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
 12932  13D0  2BD6               	goto	l5758
 12933  13D1                     l5756:	
 12934                           
 12935                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
 12936  13D1  0141               	movlb	1	; select bank1
 12937  13D2  2724  3191         	fcall	PL26	;call to abstracted procedure
 12938  13D4  1803               	skipnc
 12939  13D5  0A81               	incf	1,f
 12940  13D6                     l5758:	
 12941  13D6  0141               	movlb	1	; select bank1
 12942  13D7  26F6  3191         	fcall	PL2	;call to abstracted procedure
 12943  13D9  2759  3191         	fcall	PL44	;call to abstracted procedure
 12944  13DB  00A5               	movwf	_vfpfcnvrt$1167^(0+256)
 12945  13DC  01A6               	clrf	(_vfpfcnvrt$1167+1)^(0+256)
 12946  13DD  0426               	iorwf	(_vfpfcnvrt$1167+1)^(0+256),w
 12947  13DE  1D03               	btfss	3,2
 12948  13DF  2BD1               	goto	l5756
 12949  13E0                     l5764:	
 12950                           
 12951                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 740:       
      +                            if ((*fmt)[0] == '.') {
 12952  13E0  0141               	movlb	1	; select bank1
 12953  13E1  26F6  3191         	fcall	PL2	;call to abstracted procedure
 12954  13E3  0012               	moviw fsr0++
 12955  13E4  3A2E               	xorlw	46
 12956  13E5  1D03               	btfss	3,2
 12957  13E6  2C19               	goto	l5786
 12958                           
 12959                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 741:       
      +                                prec = 0;
 12960  13E7  0142               	movlb	2	; select bank2
 12961  13E8  01DE               	clrf	_prec^(0+256)
 12962  13E9  01DF               	clrf	(_prec+1)^(0+256)
 12963                           
 12964                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 742:       
      +                                ++*fmt;
 12965  13EA  0141               	movlb	1	; select bank1
 12966  13EB  2724  3191         	fcall	PL26	;call to abstracted procedure
 12967  13ED  1803               	skipnc
 12968  13EE  0A81               	incf	1,f
 12969                           
 12970                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 743:       
      +                                if ((*fmt)[0] == '*') {
 12971  13EF  26F6  3191         	fcall	PL2	;call to abstracted procedure
 12972  13F1  0012               	moviw fsr0++
 12973  13F2  3A2A               	xorlw	42
 12974  13F3  1D03               	btfss	3,2
 12975  13F4  2BFE               	goto	l5776
 12976                           
 12977                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 744:       
      +                                    ++*fmt;
 12978  13F5  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 12979  13F6  0086               	movwf	6
 12980                           
 12981                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 745:       
      +                                    prec = (*(int *)__va_arg(*(int **)ap, (int)0));
 12982  13F7  2709  3191         	fcall	PL22	;call to abstracted procedure
 12983  13F9  0142               	movlb	2	; select bank2
 12984  13FA  00DE               	movwf	_prec^(0+256)
 12985  13FB  3F01               	moviw [1]fsr0
 12986  13FC  00DF               	movwf	(_prec+1)^(0+256)
 12987                           
 12988                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 746:       
      +                                } else {
 12989  13FD  2C19               	goto	l5786
 12990  13FE                     l5776:	
 12991                           
 12992                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 747:       
      +                                    prec = atoi(*fmt);
 12993  13FE  27AB  3191         	fcall	PL100	;call to abstracted procedure
 12994  1400  2555  3191         	fcall	_atoi
 12995  1402  0827               	movf	?_atoi+1,w
 12996  1403  0142               	movlb	2	; select bank2
 12997  1404  00DF               	movwf	(_prec+1)^(0+256)
 12998  1405  0140               	movlb	0	; select bank0
 12999  1406  0826               	movf	?_atoi,w
 13000  1407  0142               	movlb	2	; select bank2
 13001  1408  00DE               	movwf	_prec^(0+256)
 13002                           
 13003                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 748:       
      +                                    while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
 13004  1409  2C0F               	goto	l5780
 13005  140A                     l5778:	
 13006                           
 13007                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 749:       
      +                                        ++*fmt;
 13008  140A  0141               	movlb	1	; select bank1
 13009  140B  2724  3191         	fcall	PL26	;call to abstracted procedure
 13010  140D  1803               	skipnc
 13011  140E  0A81               	incf	1,f
 13012  140F                     l5780:	
 13013  140F  0141               	movlb	1	; select bank1
 13014  1410  26F6  3191         	fcall	PL2	;call to abstracted procedure
 13015  1412  2759  3191         	fcall	PL44	;call to abstracted procedure
 13016  1414  00A7               	movwf	_vfpfcnvrt$1168^(0+256)
 13017  1415  01A8               	clrf	(_vfpfcnvrt$1168+1)^(0+256)
 13018  1416  0428               	iorwf	(_vfpfcnvrt$1168+1)^(0+256),w
 13019  1417  1D03               	btfss	3,2
 13020  1418  2C0A               	goto	l5778
 13021  1419                     l5786:	
 13022                           
 13023                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 757:       
      +                            ct[0] = tolower((int)(*fmt)[0]);
 13024  1419  0141               	movlb	1	; select bank1
 13025  141A  26F6  3191         	fcall	PL2	;call to abstracted procedure
 13026  141C  0800               	movf	0,w	;code access
 13027  141D  0140               	movlb	0	; select bank0
 13028  141E  00A4               	movwf	tolower@c
 13029  141F  01A5               	clrf	tolower@c+1
 13030  1420  253A  3191         	fcall	_tolower
 13031  1422  0824               	movf	?_tolower,w
 13032  1423  0142               	movlb	2	; select bank2
 13033  1424  00AB               	movwf	vfpfcnvrt@ct^(0+256)
 13034                           
 13035                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 758:       
      +                            if (ct[0]) {
 13036  1425  082B               	movf	vfpfcnvrt@ct^(0+256),w
 13037  1426  1903               	btfsc	3,2
 13038  1427  2C49               	goto	l5796
 13039                           
 13040                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 759:       
      +                                ct[1] = tolower((int)(*fmt)[1]);
 13041  1428  0141               	movlb	1	; select bank1
 13042  1429  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 13043  142A  2702  3191         	fcall	PL4	;call to abstracted procedure
 13044  142C  3001               	movlw	1
 13045  142D  278D  3191         	fcall	PL78	;call to abstracted procedure
 13046  142F  0140               	movlb	0	; select bank0
 13047  1430  00A4               	movwf	tolower@c
 13048  1431  01A5               	clrf	tolower@c+1
 13049  1432  253A  3191         	fcall	_tolower
 13050  1434  0824               	movf	?_tolower,w
 13051  1435  0142               	movlb	2	; select bank2
 13052  1436  00AC               	movwf	(vfpfcnvrt@ct^(0+256)+1)
 13053                           
 13054                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 760:       
      +                                if (ct[1]) {
 13055  1437  082C               	movf	(vfpfcnvrt@ct^(0+256)+1),w
 13056  1438  1903               	btfsc	3,2
 13057  1439  2C49               	goto	l5796
 13058                           
 13059                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 761:       
      +                                    ct[2] = tolower((int)(*fmt)[2]);
 13060  143A  0141               	movlb	1	; select bank1
 13061  143B  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 13062  143C  2702  3191         	fcall	PL4	;call to abstracted procedure
 13063  143E  3002               	movlw	2
 13064  143F  278D  3191         	fcall	PL78	;call to abstracted procedure
 13065  1441  0140               	movlb	0	; select bank0
 13066  1442  00A4               	movwf	tolower@c
 13067  1443  01A5               	clrf	tolower@c+1
 13068  1444  253A  3191         	fcall	_tolower
 13069  1446  0824               	movf	?_tolower,w
 13070  1447  0142               	movlb	2	; select bank2
 13071  1448  00AD               	movwf	(vfpfcnvrt@ct^(0+256)+2)
 13072  1449                     l5796:	
 13073                           
 13074                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
 13075  1449  0141               	movlb	1	; select bank1
 13076  144A  26F6  3191         	fcall	PL2	;call to abstracted procedure
 13077  144C  0012               	moviw fsr0++
 13078  144D  3A64               	xorlw	100
 13079  144E  1903               	btfsc	3,2
 13080  144F  2C56               	goto	l5800
 13081  1450  26F6  3191         	fcall	PL2	;call to abstracted procedure
 13082  1452  0012               	moviw fsr0++
 13083  1453  3A69               	xorlw	105
 13084  1454  1D03               	btfss	3,2
 13085  1455  2C82               	goto	l5808
 13086  1456                     l5800:	
 13087                           
 13088                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
 13089  1456  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 13090  1457  0086               	movwf	6
 13091                           
 13092                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
 13093  1458  2709               	fcall	PL22	;call to abstracted procedure
 13094  1459  00E5               	movwf	??_vfpfcnvrt^(0+128)
 13095  145A  3F01               	moviw [1]fsr0
 13096  145B  00E6               	movwf	(??_vfpfcnvrt^(0+128)+1)
 13097  145C  0865               	movf	??_vfpfcnvrt^(0+128),w
 13098  145D  0142               	movlb	2	; select bank2
 13099  145E  00A0               	movwf	vfpfcnvrt@ll^(0+256)
 13100  145F  0141               	movlb	1	; select bank1
 13101  1460  0866               	movf	(??_vfpfcnvrt+1)^(0+128),w
 13102  1461  0142               	movlb	2	; select bank2
 13103  1462  00A1               	movwf	(vfpfcnvrt@ll+1)^(0+256)
 13104  1463  0D89               	rlf	9,f
 13105  1464  3B89               	subwfb	9,f
 13106  1465  0989               	comf	9,f
 13107  1466  00A2               	movwf	(vfpfcnvrt@ll+2)^(0+256)
 13108  1467  00A3               	movwf	(vfpfcnvrt@ll+3)^(0+256)
 13109                           
 13110                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
 13111  1468  0140               	movlb	0	; select bank0
 13112  1469  00BA               	movwf	dtoa@d+3
 13113  146A  0142               	movlb	2	; select bank2
 13114  146B  0822               	movf	(vfpfcnvrt@ll+2)^(0+256),w
 13115  146C  0140               	movlb	0	; select bank0
 13116  146D  00B9               	movwf	dtoa@d+2
 13117  146E  0142               	movlb	2	; select bank2
 13118  146F  0821               	movf	(vfpfcnvrt@ll+1)^(0+256),w
 13119  1470  0140               	movlb	0	; select bank0
 13120  1471  00B8               	movwf	dtoa@d+1
 13121  1472  0142               	movlb	2	; select bank2
 13122  1473  0820               	movf	vfpfcnvrt@ll^(0+256),w
 13123  1474  0140               	movlb	0	; select bank0
 13124  1475  00B7               	movwf	dtoa@d
 13125  1476  0142               	movlb	2	; select bank2
 13126  1477  0833               	movf	vfpfcnvrt@fp^(0+256),w
 13127  1478  319E  262B         	fcall	_dtoa
 13128  147A  0838               	movf	?_dtoa+1,w
 13129  147B  0141               	movlb	1	; select bank1
 13130  147C  00E4               	movwf	(?_vfpfcnvrt+1)^(0+128)
 13131  147D  0140               	movlb	0	; select bank0
 13132  147E  0837               	movf	?_dtoa,w
 13133  147F  0141               	movlb	1	; select bank1
 13134  1480  00E3               	movwf	?_vfpfcnvrt^(0+128)
 13135  1481  0008               	return
 13136  1482                     l5808:	
 13137                           
 13138                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 920:       
      +                            if (ct[0] == 'f') {
 13139  1482  3066               	movlw	102
 13140  1483  0142               	movlb	2	; select bank2
 13141  1484  062B               	xorwf	vfpfcnvrt@ct^(0+256),w
 13142  1485  1D03               	btfss	3,2
 13143  1486  2CA4               	goto	l5820
 13144                           
 13145                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 922:       
      +                                c = (*fmt)[0];
 13146  1487  0141               	movlb	1	; select bank1
 13147  1488  26F6  3191         	fcall	PL2	;call to abstracted procedure
 13148  148A  0800               	movf	0,w	;code access
 13149                           
 13150                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 923:       
      +                                ++*fmt;
 13151  148B  27EB  3191         	fcall	PL154	;call to abstracted procedure
 13152  148D  3001               	movlw	1
 13153                           
 13154                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 924:       
      +                                f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
 13155  148E  271B  3191         	fcall	PL24	;call to abstracted procedure
 13156  1490  0801               	movf	1,w
 13157  1491  0084               	movwf	4
 13158  1492  3001               	movlw	1	; select bank2/3
 13159  1493  0085               	movwf	5
 13160  1494  3004               	movlw	4
 13161  1495  0781               	addwf	1,f
 13162  1496  3F00               	moviw [0]fsr0
 13163  1497  0142               	movlb	2	; select bank2
 13164  1498  00AE               	movwf	vfpfcnvrt@f^(0+256)
 13165  1499  3F01               	moviw [1]fsr0
 13166  149A  00AF               	movwf	(vfpfcnvrt@f+1)^(0+256)
 13167  149B  3F02               	moviw [2]fsr0
 13168  149C  00B0               	movwf	(vfpfcnvrt@f+2)^(0+256)
 13169  149D  3F03               	moviw [3]fsr0
 13170  149E  00B1               	movwf	(vfpfcnvrt@f+3)^(0+256)
 13171                           
 13172                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 926:       
      +                                return efgtoa(fp, f, c);
 13173  149F  2744               	fcall	PL40	;call to abstracted procedure
 13174  14A0  3188  202C  3191   	fcall	_efgtoa
 13175  14A3  2FB4               	ljmp	PL102	;call to abstracted procedure
 13176  14A4                     l5820:	
 13177                           
 13178                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 928:       
      +                            if (!strncmp(ct, "lf", ((sizeof("lf")/sizeof("lf"[0]))-1))) {
 13179  14A4  3047               	movlw	low (STR_22| (0+32768))
 13180  14A5  0140               	movlb	0	; select bank0
 13181  14A6  00A0               	movwf	strncmp@_r
 13182  14A7  30A1               	movlw	high (STR_22| (0+32768))
 13183  14A8  00A1               	movwf	strncmp@_r+1
 13184  14A9  3002               	movlw	2
 13185  14AA  00A2               	movwf	strncmp@n
 13186  14AB  302B               	movlw	(low (vfpfcnvrt@ct| (0+256)))& (0+255)
 13187  14AC  01A3               	clrf	strncmp@n+1
 13188  14AD  26C0  3191         	fcall	_strncmp
 13189  14AF  0820               	movf	?_strncmp,w
 13190  14B0  0421               	iorwf	?_strncmp+1,w
 13191  14B1  1D03               	btfss	3,2
 13192  14B2  2CEE               	goto	l5838
 13193                           
 13194                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 931:       
      +                                if ((0 ? isupper((int)(*fmt)[0]) : ((unsigned)((int)(*fmt)[0])-'A') < 26)) {
 13195  14B3  0141               	movlb	1	; select bank1
 13196  14B4  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 13197  14B5  2702  3191         	fcall	PL4	;call to abstracted procedure
 13198  14B7  3001               	movlw	1
 13199  14B8  278D  3191         	fcall	PL78	;call to abstracted procedure
 13200  14BA  27EB  3191         	fcall	PL154	;call to abstracted procedure
 13201  14BC  3F40               	moviw [0]fsr1
 13202  14BD  00E5               	movwf	??_vfpfcnvrt^(0+128)
 13203  14BE  3F41               	moviw [1]fsr1
 13204  14BF  00E6               	movwf	(??_vfpfcnvrt^(0+128)+1)
 13205  14C0  0865               	movf	??_vfpfcnvrt^(0+128),w
 13206  14C1  0084               	movwf	4
 13207  14C2  0866               	movf	(??_vfpfcnvrt+1)^(0+128),w
 13208  14C3  0085               	movwf	5
 13209  14C4  0800               	movf	0,w	;code access
 13210  14C5  3EBF               	addlw	191
 13211  14C6  00E7               	movwf	(??_vfpfcnvrt+2)^(0+128)
 13212  14C7  30FF               	movlw	255
 13213  14C8  1803               	skipnc
 13214  14C9  3000               	movlw	0
 13215  14CA  00E8               	movwf	((??_vfpfcnvrt+2)^(0+128)+1)
 13216  14CB  3000               	movlw	0
 13217  14CC  0268               	subwf	(??_vfpfcnvrt+3)^(0+128),w
 13218  14CD  301A               	movlw	26
 13219  14CE  1903               	skipnz
 13220  14CF  0267               	subwf	(??_vfpfcnvrt+2)^(0+128),w
 13221  14D0  1803               	btfsc	3,0
 13222  14D1  2CD4               	goto	u7210
 13223  14D2  3001               	movlw	1
 13224  14D3  2CD5               	goto	u7220
 13225  14D4                     u7210:	
 13226  14D4  3000               	movlw	0
 13227  14D5                     u7220:	
 13228  14D5  0142               	movlb	2	; select bank2
 13229  14D6  00A9               	movwf	_vfpfcnvrt$1173^(0+256)
 13230  14D7  01AA               	clrf	(_vfpfcnvrt$1173+1)^(0+256)
 13231                           
 13232                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 934:       
      +                                    f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
 13233                           
 13234                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 933:       
      +                                } else {
 13235                           
 13236                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 932:       
      +                                    f = (*(long double *)__va_arg(*(long double **)ap, (long double)0));
 13237  14D8  0141               	movlb	1	; select bank1
 13238  14D9  0864               	movf	vfpfcnvrt@ap^(0+128),w
 13239  14DA  0086               	movwf	6
 13240  14DB  272B  3191         	fcall	PL28	;call to abstracted procedure
 13241  14DD  00B1               	movwf	(vfpfcnvrt@f+3)^(0+256)
 13242                           
 13243                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 936:       
      +                                *fmt += ((sizeof("lf")/sizeof("lf"[0]))-1);
 13244  14DE  0141               	movlb	1	; select bank1
 13245  14DF  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 13246  14E0  0086               	movwf	6
 13247  14E1  3002               	movlw	2
 13248  14E2  0187               	clrf	7
 13249  14E3  0781               	addwf	1,f
 13250  14E4  3141               	addfsr 1,1
 13251  14E5  1803               	skipnc
 13252  14E6  0A81               	incf	1,f
 13253                           
 13254                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 938:       
      +                                return efgtoa(fp, f, c);
 13255  14E7  0142               	movlb	2	; select bank2
 13256  14E8  0831               	movf	(vfpfcnvrt@f+3)^(0+256),w
 13257  14E9  2744               	fcall	PL40	;call to abstracted procedure
 13258  14EA  3188  202C  3191   	fcall	_efgtoa
 13259  14ED  2FB4               	ljmp	PL102	;call to abstracted procedure
 13260  14EE                     l5838:	
 13261                           
 13262                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1149:      
      +                             if (*fmt[0] == 's') {
 13263  14EE  0141               	movlb	1	; select bank1
 13264  14EF  26F6  3191         	fcall	PL2	;call to abstracted procedure
 13265  14F1  0012               	moviw fsr0++
 13266  14F2  3A73               	xorlw	115
 13267  14F3  1D03               	btfss	3,2
 13268  14F4  2D10               	goto	l5848
 13269                           
 13270                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1151:      
      +                                 ++*fmt;
 13271  14F5  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 13272  14F6  0086               	movwf	6
 13273  14F7  3001               	movlw	1
 13274  14F8  0187               	clrf	7
 13275                           
 13276                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1152:      
      +                                 cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
 13277  14F9  271B  3191         	fcall	PL24	;call to abstracted procedure
 13278  14FB  3F40               	moviw [0]fsr1
 13279  14FC  0084               	movwf	4
 13280  14FD  3001               	movlw	1	; select bank2/3
 13281  14FE  0085               	movwf	5
 13282  14FF  0A81               	incf	1,f
 13283  1500  0800               	movf	0,w
 13284  1501  0142               	movlb	2	; select bank2
 13285  1502  00A4               	movwf	vfpfcnvrt@cp^(0+256)
 13286                           
 13287                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1154:      
      +                                 return stoa(fp, cp);
 13288  1503  0140               	movlb	0	; select bank0
 13289  1504  00A8               	movwf	stoa@s
 13290  1505  0142               	movlb	2	; select bank2
 13291  1506  0833               	movf	vfpfcnvrt@fp^(0+256),w
 13292  1507  25CE               	fcall	_stoa
 13293  1508  0829               	movf	?_stoa+1,w
 13294  1509  0141               	movlb	1	; select bank1
 13295  150A  00E4               	movwf	(?_vfpfcnvrt+1)^(0+128)
 13296  150B  0140               	movlb	0	; select bank0
 13297  150C  0828               	movf	?_stoa,w
 13298  150D  0141               	movlb	1	; select bank1
 13299  150E  00E3               	movwf	?_vfpfcnvrt^(0+128)
 13300  150F  0008               	return
 13301  1510                     l5848:	
 13302                           
 13303                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 13304  1510  26F6  3191         	fcall	PL2	;call to abstracted procedure
 13305  1512  0012               	moviw fsr0++
 13306  1513  3A25               	xorlw	37
 13307  1514  1D03               	btfss	3,2
 13308  1515  2D25               	goto	l5858
 13309                           
 13310                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 13311  1516  2724  3191         	fcall	PL26	;call to abstracted procedure
 13312  1518  1803               	skipnc
 13313  1519  0A81               	incf	1,f
 13314                           
 13315                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 13316  151A  3025               	movlw	37
 13317  151B  0140               	movlb	0	; select bank0
 13318  151C  00A0               	movwf	fputc@c
 13319  151D  27DF  3191         	fcall	PL148	;call to abstracted procedure
 13320  151F  2664               	fcall	_fputc
 13321  1520                     l5854:	
 13322                           
 13323                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 13324  1520  0141               	movlb	1	; select bank1
 13325  1521  01E3               	clrf	?_vfpfcnvrt^(0+128)
 13326  1522  0AE3               	incf	?_vfpfcnvrt^(0+128),f
 13327  1523  01E4               	clrf	(?_vfpfcnvrt+1)^(0+128)
 13328  1524  0008               	return
 13329  1525                     l5858:	
 13330                           
 13331                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 13332  1525  2724               	fcall	PL26	;call to abstracted procedure
 13333  1526  1803               	skipnc
 13334  1527  0A81               	incf	1,f
 13335                           
 13336                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 13337  1528  01E3               	clrf	?_vfpfcnvrt^(0+128)
 13338  1529  01E4               	clrf	(?_vfpfcnvrt+1)^(0+128)
 13339  152A  0008               	return
 13340  152B                     l5864:	
 13341                           
 13342                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 13343  152B  26F6  3191         	fcall	PL2	;call to abstracted procedure
 13344  152D  0800               	movf	0,w	;code access
 13345  152E  0140               	movlb	0	; select bank0
 13346  152F  00A0               	movwf	fputc@c
 13347  1530  27DF  3191         	fcall	PL148	;call to abstracted procedure
 13348  1532  2664  3191         	fcall	_fputc
 13349                           
 13350                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 13351  1534  0141               	movlb	1	; select bank1
 13352  1535  2724  3191         	fcall	PL26	;call to abstracted procedure
 13353  1537  1803               	skipnc
 13354  1538  0A81               	incf	1,f
 13355  1539  2D20               	goto	l5854
 13356  153A                     __end_of_vfpfcnvrt:	
 13357  153A                     __ptext16:	
 13358 ;; *************** function _tolower *****************
 13359 ;; Defined at:
 13360 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\tolower.c"
 13361 ;; Parameters:    Size  Location     Type
 13362 ;;  c               2    4[BANK0 ] int 
 13363 ;; Auto vars:     Size  Location     Type
 13364 ;;		None
 13365 ;; Return value:  Size  Location     Type
 13366 ;;                  2    4[BANK0 ] int 
 13367 ;; Registers used:
 13368 ;;		wreg, status,2, status,0
 13369 ;; Tracked objects:
 13370 ;;		On entry : 3F/0
 13371 ;;		On exit  : 3F/0
 13372 ;;		Unchanged: 0/0
 13373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13374 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13375 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13376 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13377 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13378 ;;Total ram usage:        6 bytes
 13379 ;; Hardware stack levels used:    1
 13380 ;; Hardware stack levels required when called:    4
 13381 ;; This function calls:
 13382 ;;		_isupper
 13383 ;; This function is called by:
 13384 ;;		_efgtoa
 13385 ;;		_vfpfcnvrt
 13386 ;; This function uses a non-reentrant model
 13387 ;;
 13388                           
 13389                           
 13390                           ;psect for function _tolower
 13391  153A                     _tolower:	
 13392                           
 13393                           ;incstack = 0
 13394                           ; Regs used in _tolower: [wreg+status,2+status,0]
 13395  153A  0824               	movf	tolower@c,w
 13396  153B  3EBF               	addlw	191
 13397  153C  00A6               	movwf	??_tolower
 13398  153D  30FF               	movlw	255
 13399  153E  3D25               	addwfc	tolower@c+1,w
 13400  153F  00A7               	movwf	??_tolower+1
 13401  1540  3000               	movlw	0
 13402  1541  0227               	subwf	??_tolower+1,w
 13403  1542  301A               	movlw	26
 13404  1543  1903               	skipnz
 13405  1544  0226               	subwf	??_tolower,w
 13406  1545  1803               	btfsc	3,0
 13407  1546  2D49               	goto	u4090
 13408  1547  3001               	movlw	1
 13409  1548  2D4A               	goto	u4100
 13410  1549                     u4090:	
 13411  1549  3000               	movlw	0
 13412  154A                     u4100:	
 13413  154A  00A8               	movwf	_tolower$1602
 13414  154B  01A9               	clrf	_tolower$1602+1
 13415  154C  0429               	iorwf	_tolower$1602+1,w
 13416  154D  1903               	btfsc	3,2
 13417  154E  0008               	return
 13418  154F  3020               	movlw	32
 13419  1550  0424               	iorwf	tolower@c,w
 13420  1551  00A4               	movwf	?_tolower
 13421  1552  0825               	movf	tolower@c+1,w
 13422  1553  00A5               	movwf	?_tolower+1
 13423  1554  0008               	return
 13424  1555                     __end_of_tolower:	
 13425  1555                     __ptext36:	
 13426 ;; *************** function _atoi *****************
 13427 ;; Defined at:
 13428 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\atoi.c"
 13429 ;; Parameters:    Size  Location     Type
 13430 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 13431 ;;		 -> STR_13(14), STR_11(14), STR_9(19), STR_6(15), 
 13432 ;;		 -> STR_4(42), STR_3(13), STR_2(17), 
 13433 ;; Auto vars:     Size  Location     Type
 13434 ;;  n               2   18[BANK0 ] int 
 13435 ;;  neg             2   11[BANK0 ] int 
 13436 ;; Return value:  Size  Location     Type
 13437 ;;                  2    6[BANK0 ] int 
 13438 ;; Registers used:
 13439 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 13440 ;; Tracked objects:
 13441 ;;		On entry : 3F/0
 13442 ;;		On exit  : 3F/0
 13443 ;;		Unchanged: 0/0
 13444 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13445 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13446 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13447 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13448 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13449 ;;Total ram usage:       14 bytes
 13450 ;; Hardware stack levels used:    1
 13451 ;; Hardware stack levels required when called:    4
 13452 ;; This function calls:
 13453 ;;		___wmul
 13454 ;;		_isdigit
 13455 ;;		_isspace
 13456 ;; This function is called by:
 13457 ;;		_vfpfcnvrt
 13458 ;; This function uses a non-reentrant model
 13459 ;;
 13460                           
 13461                           
 13462                           ;psect for function _atoi
 13463  1555                     _atoi:	
 13464                           
 13465                           ;incstack = 0
 13466                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 13467  1555  01B2               	clrf	atoi@n
 13468  1556  01B3               	clrf	atoi@n+1
 13469  1557  01AB               	clrf	atoi@neg
 13470  1558  01AC               	clrf	atoi@neg+1
 13471  1559                     l4788:	
 13472  1559  01B1               	clrf	_atoi$1481
 13473  155A  0AB1               	incf	_atoi$1481,f
 13474  155B  0826               	movf	atoi@s,w
 13475  155C  0084               	movwf	4
 13476  155D  0827               	movf	atoi@s+1,w
 13477  155E  0085               	movwf	5
 13478  155F  0012               	moviw fsr0++
 13479  1560  3A20               	xorlw	32
 13480  1561  1903               	btfsc	3,2
 13481  1562  2D6D               	goto	l4796
 13482  1563  27A5  3191         	fcall	PL92	;call to abstracted procedure
 13483  1565  3EF7               	addlw	247
 13484  1566  27BC  3191         	fcall	PL106	;call to abstracted procedure
 13485  1568  3005               	movlw	5
 13486  1569  1903               	skipnz
 13487  156A  0228               	subwf	??_atoi,w
 13488  156B  1803               	btfsc	3,0
 13489  156C  01B1               	clrf	_atoi$1481
 13490  156D                     l4796:	
 13491  156D  0831               	movf	_atoi$1481,w
 13492  156E  00AD               	movwf	_atoi$1480
 13493  156F  01AE               	clrf	_atoi$1480+1
 13494  1570  042E               	iorwf	_atoi$1480+1,w
 13495  1571  1903               	btfsc	3,2
 13496  1572  2D7B               	goto	l4804
 13497  1573  0AA6               	incf	atoi@s,f
 13498  1574  1903               	skipnz
 13499  1575  0AA7               	incf	atoi@s+1,f
 13500  1576  2D59               	goto	l4788
 13501  1577                     l4802:	
 13502  1577  01AB               	clrf	atoi@neg
 13503  1578  0AAB               	incf	atoi@neg,f
 13504  1579  01AC               	clrf	atoi@neg+1
 13505  157A  2DA4               	goto	l1172
 13506  157B                     l4804:	
 13507  157B  27A5  3191         	fcall	PL92	;call to abstracted procedure
 13508  157D  00A8               	movwf	??_atoi
 13509  157E  01A9               	clrf	??_atoi+1
 13510                           
 13511                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 13512                           ; Switch size 1, requested type "space"
 13513                           ; Number of cases is 1, Range of values is 0 to 0
 13514                           ; switch strategies available:
 13515                           ; Name         Instructions Cycles
 13516                           ; simple_byte            4     3 (average)
 13517                           ; direct_byte            8     6 (fixed)
 13518                           ; jumptable            260     6 (fixed)
 13519                           ;	Chosen strategy is simple_byte
 13520  157F  0829               	movf	??_atoi+1,w
 13521  1580  3A00               	xorlw	0	; case 0
 13522  1581  1903               	skipnz
 13523  1582  2D84               	goto	l6034
 13524  1583  2DA7               	goto	l4810
 13525  1584                     l6034:	
 13526                           
 13527                           ; Switch size 1, requested type "space"
 13528                           ; Number of cases is 2, Range of values is 43 to 45
 13529                           ; switch strategies available:
 13530                           ; Name         Instructions Cycles
 13531                           ; simple_byte            7     4 (average)
 13532                           ; direct_byte           15     9 (fixed)
 13533                           ; jumptable            263     9 (fixed)
 13534                           ;	Chosen strategy is simple_byte
 13535  1584  0828               	movf	??_atoi,w
 13536  1585  3A2B               	xorlw	43	; case 43
 13537  1586  1903               	skipnz
 13538  1587  2DA4               	goto	l1172
 13539  1588  3A06               	xorlw	6	; case 45
 13540  1589  1903               	skipnz
 13541  158A  2D77               	goto	l4802
 13542  158B  2DA7               	goto	l4810
 13543  158C                     l4806:	
 13544  158C  27A5               	fcall	PL92	;call to abstracted procedure
 13545  158D  00A8               	movwf	??_atoi
 13546  158E  0833               	movf	atoi@n+1,w
 13547  158F  00A1               	movwf	___wmul@multiplier+1
 13548  1590  0832               	movf	atoi@n,w
 13549  1591  00A0               	movwf	___wmul@multiplier
 13550  1592  300A               	movlw	10
 13551  1593  00A2               	movwf	___wmul@multiplicand
 13552  1594  01A3               	clrf	___wmul@multiplicand+1
 13553  1595  3186  26C0  3191   	fcall	___wmul
 13554  1598  0821               	movf	?___wmul+1,w
 13555  1599  00AA               	movwf	??_atoi+2
 13556  159A  0828               	movf	??_atoi,w
 13557  159B  0220               	subwf	?___wmul,w
 13558  159C  00A9               	movwf	??_atoi+1
 13559  159D  1C03               	skipc
 13560  159E  03AA               	decf	??_atoi+2,f
 13561  159F  3E30               	addlw	48
 13562  15A0  00B2               	movwf	atoi@n
 13563  15A1  3000               	movlw	0
 13564  15A2  3D2A               	addwfc	??_atoi+2,w
 13565  15A3  00B3               	movwf	atoi@n+1
 13566  15A4                     l1172:	
 13567  15A4  0AA6               	incf	atoi@s,f
 13568  15A5  1903               	skipnz
 13569  15A6  0AA7               	incf	atoi@s+1,f
 13570  15A7                     l4810:	
 13571  15A7  27A5  3191         	fcall	PL92	;call to abstracted procedure
 13572  15A9  3ED0               	addlw	208
 13573  15AA  27BC  3191         	fcall	PL106	;call to abstracted procedure
 13574  15AC  300A               	movlw	10
 13575  15AD  1903               	skipnz
 13576  15AE  0228               	subwf	??_atoi,w
 13577  15AF  1803               	btfsc	3,0
 13578  15B0  2DB3               	goto	u5930
 13579  15B1  3001               	movlw	1
 13580  15B2  2DB4               	goto	u5940
 13581  15B3                     u5930:	
 13582  15B3  3000               	movlw	0
 13583  15B4                     u5940:	
 13584  15B4  00AF               	movwf	_atoi$1482
 13585  15B5  01B0               	clrf	_atoi$1482+1
 13586  15B6  0430               	iorwf	_atoi$1482+1,w
 13587  15B7  1D03               	btfss	3,2
 13588  15B8  2D8C               	goto	l4806
 13589  15B9  082B               	movf	atoi@neg,w
 13590  15BA  042C               	iorwf	atoi@neg+1,w
 13591  15BB  1D03               	btfss	3,2
 13592  15BC  2DC9               	goto	l4820
 13593  15BD  0932               	comf	atoi@n,w
 13594  15BE  00A8               	movwf	??_atoi
 13595  15BF  0933               	comf	atoi@n+1,w
 13596  15C0  00A9               	movwf	??_atoi+1
 13597  15C1  0AA8               	incf	??_atoi,f
 13598  15C2  1903               	skipnz
 13599  15C3  0AA9               	incf	??_atoi+1,f
 13600  15C4  0828               	movf	??_atoi,w
 13601  15C5  00A6               	movwf	?_atoi
 13602  15C6  0829               	movf	??_atoi+1,w
 13603  15C7  00A7               	movwf	?_atoi+1
 13604  15C8  0008               	return
 13605  15C9                     l4820:	
 13606  15C9  0833               	movf	atoi@n+1,w
 13607  15CA  00A7               	movwf	?_atoi+1
 13608  15CB  0832               	movf	atoi@n,w
 13609  15CC  00A6               	movwf	?_atoi
 13610  15CD  0008               	return
 13611  15CE                     __end_of_atoi:	
 13612  15CE                     __ptext14:	
 13613 ;; *************** function _stoa *****************
 13614 ;; Defined at:
 13615 ;;		line 546 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c"
 13616 ;; Parameters:    Size  Location     Type
 13617 ;;  fp              1    wreg     PTR struct _IO_FILE
 13618 ;;		 -> sprintf@f(6), 
 13619 ;;  s               1    8[BANK0 ] PTR unsigned char 
 13620 ;;		 -> ?_sprintf(2), s12(13), 
 13621 ;; Auto vars:     Size  Location     Type
 13622 ;;  fp              1   22[BANK0 ] PTR struct _IO_FILE
 13623 ;;		 -> sprintf@f(6), 
 13624 ;;  nuls            7   11[BANK0 ] unsigned char [7]
 13625 ;;  l               2   27[BANK0 ] int 
 13626 ;;  p               2   25[BANK0 ] int 
 13627 ;;  cp              2   23[BANK0 ] PTR unsigned char 
 13628 ;;		 -> ?_sprintf(2), stoa@nuls(7), s12(13), 
 13629 ;;  w               2   20[BANK0 ] int 
 13630 ;;  i               2   18[BANK0 ] int 
 13631 ;; Return value:  Size  Location     Type
 13632 ;;                  2    8[BANK0 ] int 
 13633 ;; Registers used:
 13634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13635 ;; Tracked objects:
 13636 ;;		On entry : 3F/2
 13637 ;;		On exit  : 3F/0
 13638 ;;		Unchanged: 0/0
 13639 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13640 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13641 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13642 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13643 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13644 ;;Total ram usage:       21 bytes
 13645 ;; Hardware stack levels used:    1
 13646 ;; Hardware stack levels required when called:    5
 13647 ;; This function calls:
 13648 ;;		_fputc
 13649 ;;		_strlen
 13650 ;; This function is called by:
 13651 ;;		_vfpfcnvrt
 13652 ;; This function uses a non-reentrant model
 13653 ;;
 13654                           
 13655                           
 13656                           ;psect for function _stoa
 13657  15CE                     _stoa:	
 13658                           
 13659                           ;incstack = 0
 13660                           ; Regs used in _stoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13661                           ;stoa@fp stored from wreg
 13662  15CE  0140               	movlb	0	; select bank0
 13663  15CF  00B6               	movwf	stoa@fp
 13664                           
 13665                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 546: static
      +                           int stoa(FILE *fp, char *s);C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\
      +                          common\doprnt.c: 547: {;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\commo
      +                          n\doprnt.c: 548:     char *cp, nuls[] = "(null)";
 13666  15D0  30E2               	movlw	low stoa@F1151
 13667  15D1  0086               	movwf	6
 13668  15D2  3001               	movlw	high stoa@F1151
 13669  15D3  0087               	movwf	7
 13670  15D4  302B               	movlw	low stoa@nuls
 13671  15D5  0084               	movwf	4
 13672  15D6  3000               	movlw	high stoa@nuls
 13673  15D7  0085               	movwf	5
 13674  15D8  3007               	movlw	7
 13675  15D9  00AA               	movwf	??_stoa
 13676  15DA                     u6950:	
 13677  15DA  0016               	moviw fsr1++
 13678  15DB  001A               	movwi fsr0++
 13679  15DC  0BAA               	decfsz	??_stoa,f
 13680  15DD  2DDA               	goto	u6950
 13681                           
 13682                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 549:     in
      +                          t i, l, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c
      +                          : 552:     cp = s;
 13683  15DE  0828               	movf	stoa@s,w
 13684  15DF  00B7               	movwf	stoa@cp
 13685  15E0  3001               	movlw	1
 13686  15E1  00B8               	movwf	stoa@cp+1
 13687                           
 13688                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 553:     if
      +                           (!cp) {
 13689  15E2  0437               	iorwf	stoa@cp,w
 13690  15E3  1D03               	btfss	3,2
 13691  15E4  2DE9               	goto	l5692
 13692                           
 13693                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 554:       
      +                            cp = nuls;
 13694  15E5  302B               	movlw	low stoa@nuls
 13695  15E6  00B7               	movwf	stoa@cp
 13696  15E7  3000               	movlw	high stoa@nuls
 13697  15E8  00B8               	movwf	stoa@cp+1
 13698  15E9                     l5692:	
 13699                           
 13700                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 558:     l 
      +                          = strlen(cp);
 13701  15E9  0838               	movf	stoa@cp+1,w
 13702  15EA  00A1               	movwf	strlen@s+1
 13703  15EB  0837               	movf	stoa@cp,w
 13704  15EC  00A0               	movwf	strlen@s
 13705  15ED  26AA  3191         	fcall	_strlen
 13706  15EF  0821               	movf	?_strlen+1,w
 13707  15F0  00BC               	movwf	stoa@l+1
 13708  15F1  0820               	movf	?_strlen,w
 13709  15F2  00BB               	movwf	stoa@l
 13710                           
 13711                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 559:     p 
      +                          = prec;
 13712  15F3  0142               	movlb	2	; select bank2
 13713  15F4  085F               	movf	(_prec+1)^(0+256),w
 13714  15F5  0140               	movlb	0	; select bank0
 13715  15F6  00BA               	movwf	stoa@p+1
 13716  15F7  0142               	movlb	2	; select bank2
 13717  15F8  085E               	movf	_prec^(0+256),w
 13718  15F9  0140               	movlb	0	; select bank0
 13719  15FA  00B9               	movwf	stoa@p
 13720                           
 13721                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 560:     l 
      +                          = (!(p < 0) && (p < l)) ? p : l;
 13722  15FB  1BBA               	btfsc	stoa@p+1,7
 13723  15FC  2E0E               	goto	l642
 13724  15FD  083A               	movf	stoa@p+1,w
 13725  15FE  3A80               	xorlw	128
 13726  15FF  00AA               	movwf	??_stoa
 13727  1600  083C               	movf	stoa@l+1,w
 13728  1601  3A80               	xorlw	128
 13729  1602  022A               	subwf	??_stoa,w
 13730  1603  1D03               	skipz
 13731  1604  2E07               	goto	u6985
 13732  1605  083B               	movf	stoa@l,w
 13733  1606  0239               	subwf	stoa@p,w
 13734  1607                     u6985:	
 13735  1607  1803               	btfsc	3,0
 13736  1608  2E0E               	goto	l642
 13737  1609  0140               	movlb	0	; select bank0
 13738  160A  083A               	movf	stoa@p+1,w
 13739  160B  00BC               	movwf	stoa@l+1
 13740  160C  0839               	movf	stoa@p,w
 13741  160D  00BB               	movwf	stoa@l
 13742  160E                     l642:	
 13743                           
 13744                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 561:     p 
      +                          = l;
 13745  160E  0140               	movlb	0	; select bank0
 13746  160F  083C               	movf	stoa@l+1,w
 13747  1610  00BA               	movwf	stoa@p+1
 13748  1611  083B               	movf	stoa@l,w
 13749  1612  00B9               	movwf	stoa@p
 13750                           
 13751                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 562:     w 
      +                          = width;
 13752  1613  0142               	movlb	2	; select bank2
 13753  1614  085D               	movf	(_width+1)^(0+256),w
 13754  1615  0140               	movlb	0	; select bank0
 13755  1616  00B5               	movwf	stoa@w+1
 13756  1617  0142               	movlb	2	; select bank2
 13757  1618  085C               	movf	_width^(0+256),w
 13758  1619  0140               	movlb	0	; select bank0
 13759  161A  00B4               	movwf	stoa@w
 13760                           
 13761                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 565:     if
      +                           (!(flags & (1 << 0))) {
 13762  161B  0142               	movlb	2	; select bank2
 13763  161C  1C60               	btfss	_flags^(0+256),0
 13764  161D  2E27               	goto	l5710
 13765  161E  2E2B               	goto	l5712
 13766  161F                     l5706:	
 13767                           
 13768                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 567:       
      +                                fputc(' ', fp);
 13769  161F  27D1  3191         	fcall	PL130	;call to abstracted procedure
 13770  1621  2664  3191         	fcall	_fputc
 13771                           
 13772                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 568:       
      +                                ++l;
 13773  1623  0140               	movlb	0	; select bank0
 13774  1624  0ABB               	incf	stoa@l,f
 13775  1625  1903               	skipnz
 13776  1626  0ABC               	incf	stoa@l+1,f
 13777  1627                     l5710:	
 13778                           
 13779                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 566:       
      +                            while (l < w) {
 13780  1627  2775  3191         	fcall	PL70	;call to abstracted procedure
 13781  1629  1C03               	skipc
 13782  162A  2E1F               	goto	l5706
 13783  162B                     l5712:	
 13784                           
 13785                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 573:     i 
      +                          = 0;
 13786  162B  0140               	movlb	0	; select bank0
 13787  162C  01B2               	clrf	stoa@i
 13788  162D  01B3               	clrf	stoa@i+1
 13789  162E                     l5720:	
 13790                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
 13791                           
 13792                           
 13793                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
 13794  162E  0833               	movf	stoa@i+1,w
 13795  162F  3A80               	xorlw	128
 13796  1630  00AA               	movwf	??_stoa
 13797  1631  083A               	movf	stoa@p+1,w
 13798  1632  3A80               	xorlw	128
 13799  1633  022A               	subwf	??_stoa,w
 13800  1634  1D03               	skipz
 13801  1635  2E38               	goto	u7015
 13802  1636  0839               	movf	stoa@p,w
 13803  1637  0232               	subwf	stoa@i,w
 13804  1638                     u7015:	
 13805  1638  1803               	btfsc	3,0
 13806  1639  2E4E               	goto	l651
 13807                           
 13808                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 575:       
      +                            fputc(*cp, fp);
 13809  163A  0140               	movlb	0	; select bank0
 13810  163B  0837               	movf	stoa@cp,w
 13811  163C  0086               	movwf	6
 13812  163D  0838               	movf	stoa@cp+1,w
 13813  163E  0087               	movwf	7
 13814  163F  0801               	movf	1,w
 13815  1640  00A0               	movwf	fputc@c
 13816  1641  01A1               	clrf	fputc@c+1
 13817  1642  0836               	movf	stoa@fp,w
 13818  1643  00A2               	movwf	fputc@fp
 13819  1644  2664  3191         	fcall	_fputc
 13820                           
 13821                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 576:       
      +                            ++cp;
 13822  1646  0140               	movlb	0	; select bank0
 13823  1647  0AB7               	incf	stoa@cp,f
 13824  1648  1903               	skipnz
 13825  1649  0AB8               	incf	stoa@cp+1,f
 13826                           
 13827                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 577:       
      +                            ++i;
 13828  164A  0AB2               	incf	stoa@i,f
 13829  164B  1903               	skipnz
 13830  164C  0AB3               	incf	stoa@i+1,f
 13831  164D  2E2E               	goto	l5720
 13832  164E                     l651:	
 13833                           
 13834                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 581:     if
      +                           (flags & (1 << 0)) {
 13835  164E  0142               	movlb	2	; select bank2
 13836  164F  1860               	btfsc	_flags^(0+256),0
 13837  1650  2E5A               	goto	l5728
 13838  1651  2E5E               	goto	l5730
 13839  1652                     l5724:	
 13840                           
 13841                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 583:       
      +                                fputc(' ', fp);
 13842  1652  27D1  3191         	fcall	PL130	;call to abstracted procedure
 13843  1654  2664  3191         	fcall	_fputc
 13844                           
 13845                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 584:       
      +                                ++l;
 13846  1656  0140               	movlb	0	; select bank0
 13847  1657  0ABB               	incf	stoa@l,f
 13848  1658  1903               	skipnz
 13849  1659  0ABC               	incf	stoa@l+1,f
 13850  165A                     l5728:	
 13851                           
 13852                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 582:       
      +                            while (l < w) {
 13853  165A  2775  3191         	fcall	PL70	;call to abstracted procedure
 13854  165C  1C03               	skipc
 13855  165D  2E52               	goto	l5724
 13856  165E                     l5730:	
 13857                           
 13858                           ;C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\doprnt.c: 588:     re
      +                          turn l;
 13859  165E  0140               	movlb	0	; select bank0
 13860  165F  083C               	movf	stoa@l+1,w
 13861  1660  00A9               	movwf	?_stoa+1
 13862  1661  083B               	movf	stoa@l,w
 13863  1662  00A8               	movwf	?_stoa
 13864  1663  0008               	return
 13865  1664                     __end_of_stoa:	
 13866  1664                     __ptext31:	
 13867 ;; *************** function _fputc *****************
 13868 ;; Defined at:
 13869 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\nf_fputc.c"
 13870 ;; Parameters:    Size  Location     Type
 13871 ;;  c               2    0[BANK0 ] int 
 13872 ;;  fp              1    2[BANK0 ] PTR struct _IO_FILE
 13873 ;;		 -> sprintf@f(6), 
 13874 ;; Auto vars:     Size  Location     Type
 13875 ;;		None
 13876 ;; Return value:  Size  Location     Type
 13877 ;;                  2    0[BANK0 ] int 
 13878 ;; Registers used:
 13879 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 13880 ;; Tracked objects:
 13881 ;;		On entry : 3F/0
 13882 ;;		On exit  : 0/0
 13883 ;;		Unchanged: 0/0
 13884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13885 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13886 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13887 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13888 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13889 ;;Total ram usage:        8 bytes
 13890 ;; Hardware stack levels used:    1
 13891 ;; Hardware stack levels required when called:    4
 13892 ;; This function calls:
 13893 ;;		_putch
 13894 ;; This function is called by:
 13895 ;;		_pad
 13896 ;;		_stoa
 13897 ;;		_vfpfcnvrt
 13898 ;;		_fputs
 13899 ;; This function uses a non-reentrant model
 13900 ;;
 13901                           
 13902                           
 13903                           ;psect for function _fputc
 13904  1664                     _fputc:	
 13905                           
 13906                           ;incstack = 0
 13907                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 13908  1664  0822               	movf	fputc@fp,w
 13909  1665  1D03               	btfss	3,2
 13910  1666  0822               	movf	fputc@fp,w
 13911  1667  1D03               	btfss	3,2
 13912  1668  2E6B               	goto	l3498
 13913  1669  0820               	movf	fputc@c,w
 13914  166A  2EF5               	ljmp	l1248
 13915  166B                     l3498:	
 13916  166B  27E5  3191         	fcall	PL152	;call to abstracted procedure
 13917  166D  0016               	moviw fsr1++
 13918  166E  0401               	iorwf	1,w
 13919  166F  1903               	btfsc	3,2
 13920  1670  2E89               	goto	l3502
 13921  1671  27E5  3191         	fcall	PL152	;call to abstracted procedure
 13922  1673  3F40               	moviw [0]fsr1
 13923  1674  00A3               	movwf	??_fputc
 13924  1675  3F41               	moviw [1]fsr1
 13925  1676  00A4               	movwf	??_fputc+1
 13926  1677  0822               	movf	fputc@fp,w
 13927  1678  3E02               	addlw	2
 13928  1679  0086               	movwf	6
 13929  167A  3F40               	moviw [0]fsr1
 13930  167B  00A5               	movwf	??_fputc+2
 13931  167C  3F41               	moviw [1]fsr1
 13932  167D  00A6               	movwf	??_fputc+3
 13933  167E  3A80               	xorlw	128
 13934  167F  00A7               	movwf	??_fputc+4
 13935  1680  0824               	movf	??_fputc+1,w
 13936  1681  3A80               	xorlw	128
 13937  1682  0227               	subwf	??_fputc+4,w
 13938  1683  1D03               	skipz
 13939  1684  2E87               	goto	u3515
 13940  1685  0823               	movf	??_fputc,w
 13941  1686  0225               	subwf	??_fputc+2,w
 13942  1687                     u3515:	
 13943  1687  1803               	skipnc
 13944  1688  0008               	return
 13945  1689                     l3502:	
 13946  1689  0140               	movlb	0	; select bank0
 13947  168A  0822               	movf	fputc@fp,w
 13948  168B  3E02               	addlw	2
 13949  168C  0086               	movwf	6
 13950  168D  3001               	movlw	1	; select bank2/3
 13951  168E  0087               	movwf	7
 13952  168F  0822               	movf	fputc@fp,w
 13953  1690  0084               	movwf	4
 13954  1691  3001               	movlw	1	; select bank2/3
 13955  1692  0085               	movwf	5
 13956  1693  3F40               	moviw [0]fsr1
 13957  1694  0700               	addwf	0,w
 13958  1695  00A3               	movwf	??_fputc
 13959  1696  3101               	addfsr 0,1
 13960  1697  3F41               	moviw [1]fsr1
 13961  1698  3D00               	addwfc	0,w
 13962  1699  00A4               	movwf	??_fputc+1
 13963  169A  0823               	movf	??_fputc,w
 13964  169B  0086               	movwf	6
 13965  169C  0824               	movf	??_fputc+1,w
 13966  169D  0087               	movwf	7
 13967  169E  0820               	movf	fputc@c,w
 13968  169F  0081               	movwf	1
 13969  16A0  0822               	movf	fputc@fp,w
 13970  16A1  3E02               	addlw	2
 13971  16A2  0086               	movwf	6
 13972  16A3  3001               	movlw	1	; select bank2/3
 13973  16A4  0087               	movwf	7
 13974  16A5  0781               	addwf	1,f
 13975  16A6  3141               	addfsr 1,1
 13976  16A7  1803               	skipnc
 13977  16A8  0A81               	incf	1,f
 13978  16A9  0008               	return
 13979  16AA                     __end_of_fputc:	
 13980  16AA                     __ptext29:	
 13981 ;; *************** function _strlen *****************
 13982 ;; Defined at:
 13983 ;;		line 12 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\strlen.c"
 13984 ;; Parameters:    Size  Location     Type
 13985 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 13986 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(80), s12(13), 
 13987 ;; Auto vars:     Size  Location     Type
 13988 ;;  a               2    2[BANK0 ] PTR const unsigned char 
 13989 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(80), s12(13), 
 13990 ;; Return value:  Size  Location     Type
 13991 ;;                  2    0[BANK0 ] unsigned int 
 13992 ;; Registers used:
 13993 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 13994 ;; Tracked objects:
 13995 ;;		On entry : 3F/0
 13996 ;;		On exit  : 3F/0
 13997 ;;		Unchanged: 0/0
 13998 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13999 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14000 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14001 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14002 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14003 ;;Total ram usage:        4 bytes
 14004 ;; Hardware stack levels used:    1
 14005 ;; Hardware stack levels required when called:    3
 14006 ;; This function calls:
 14007 ;;		Nothing
 14008 ;; This function is called by:
 14009 ;;		_pad
 14010 ;;		_stoa
 14011 ;; This function uses a non-reentrant model
 14012 ;;
 14013                           
 14014                           
 14015                           ;psect for function _strlen
 14016  16AA                     _strlen:	
 14017                           
 14018                           ;incstack = 0
 14019                           ; Regs used in _strlen: [wreg+fsr1l+fsr1h+status,2+status,0]
 14020  16AA  0821               	movf	strlen@s+1,w
 14021  16AB  00A3               	movwf	strlen@a+1
 14022  16AC  0820               	movf	strlen@s,w
 14023  16AD  00A2               	movwf	strlen@a
 14024  16AE                     l3526:	
 14025  16AE  0820               	movf	strlen@s,w
 14026  16AF  0086               	movwf	6
 14027  16B0  0821               	movf	strlen@s+1,w
 14028  16B1  0087               	movwf	7
 14029  16B2  0801               	movf	1,w
 14030  16B3  1903               	btfsc	3,2
 14031  16B4  2EB9               	goto	l3528
 14032  16B5  0AA0               	incf	strlen@s,f
 14033  16B6  1903               	skipnz
 14034  16B7  0AA1               	incf	strlen@s+1,f
 14035  16B8  2EAE               	goto	l3526
 14036  16B9                     l3528:	
 14037  16B9  0822               	movf	strlen@a,w
 14038  16BA  0220               	subwf	strlen@s,w
 14039  16BB  00A0               	movwf	?_strlen
 14040  16BC  0823               	movf	strlen@a+1,w
 14041  16BD  3B21               	subwfb	strlen@s+1,w
 14042  16BE  00A1               	movwf	?_strlen+1
 14043  16BF  0008               	return
 14044  16C0                     __end_of_strlen:	
 14045  16C0                     __ptext13:	
 14046 ;; *************** function _strncmp *****************
 14047 ;; Defined at:
 14048 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\strncmp.c"
 14049 ;; Parameters:    Size  Location     Type
 14050 ;;  _l              1    wreg     PTR const unsigned char 
 14051 ;;		 -> vfpfcnvrt@ct(3), 
 14052 ;;  _r              2    0[BANK0 ] PTR const unsigned char 
 14053 ;;		 -> STR_24(3), 
 14054 ;;  n               2    2[BANK0 ] unsigned int 
 14055 ;; Auto vars:     Size  Location     Type
 14056 ;;  _l              1    5[BANK0 ] PTR const unsigned char 
 14057 ;;		 -> vfpfcnvrt@ct(3), 
 14058 ;;  r               2    6[BANK0 ] PTR const unsigned char 
 14059 ;;		 -> STR_24(3), 
 14060 ;;  l               1    8[BANK0 ] PTR const unsigned char 
 14061 ;;		 -> vfpfcnvrt@ct(3), 
 14062 ;; Return value:  Size  Location     Type
 14063 ;;                  2    0[BANK0 ] int 
 14064 ;; Registers used:
 14065 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 14066 ;; Tracked objects:
 14067 ;;		On entry : 3F/0
 14068 ;;		On exit  : 3F/0
 14069 ;;		Unchanged: 0/0
 14070 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14071 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14072 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14073 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14074 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14075 ;;Total ram usage:        9 bytes
 14076 ;; Hardware stack levels used:    1
 14077 ;; Hardware stack levels required when called:    3
 14078 ;; This function calls:
 14079 ;;		Nothing
 14080 ;; This function is called by:
 14081 ;;		_vfpfcnvrt
 14082 ;; This function uses a non-reentrant model
 14083 ;;
 14084                           
 14085                           
 14086                           ;psect for function _strncmp
 14087  16C0                     _strncmp:	
 14088                           
 14089                           ;incstack = 0
 14090                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
 14091                           ;strncmp@_l stored from wreg
 14092  16C0  00A5               	movwf	strncmp@_l
 14093  16C1  00A8               	movwf	strncmp@l
 14094  16C2  0821               	movf	strncmp@_r+1,w
 14095  16C3  00A7               	movwf	strncmp@r+1
 14096  16C4  0820               	movf	strncmp@_r,w
 14097  16C5  00A6               	movwf	strncmp@r
 14098  16C6  27F6  3191         	fcall	PL170	;call to abstracted procedure
 14099  16C8  0F22               	incfsz	strncmp@n,w
 14100  16C9  2EE8               	goto	l4840
 14101  16CA  0A23               	incf	strncmp@n+1,w
 14102  16CB  1D03               	btfss	3,2
 14103  16CC  2EE8               	goto	l4840
 14104  16CD  01A0               	clrf	?_strncmp
 14105  16CE  01A1               	clrf	?_strncmp+1
 14106  16CF  0008               	return
 14107  16D0                     l4842:	
 14108  16D0  0826               	movf	strncmp@r,w
 14109  16D1  0084               	movwf	4
 14110  16D2  0827               	movf	strncmp@r+1,w
 14111  16D3  0085               	movwf	5
 14112  16D4  0012               	moviw fsr0++
 14113  16D5  1903               	btfsc	3,2
 14114  16D6  2EEC               	goto	l4848
 14115  16D7  0822               	movf	strncmp@n,w
 14116  16D8  0423               	iorwf	strncmp@n+1,w
 14117  16D9  1903               	btfsc	3,2
 14118  16DA  2EEC               	goto	l4848
 14119  16DB  27CA  3191         	fcall	PL128	;call to abstracted procedure
 14120  16DD  27C4  3191         	fcall	PL118	;call to abstracted procedure
 14121  16DF  0624               	xorwf	??_strncmp,w
 14122  16E0  1D03               	btfss	3,2
 14123  16E1  2EEC               	goto	l4848
 14124  16E2  0AA8               	incf	strncmp@l,f
 14125  16E3  0AA6               	incf	strncmp@r,f
 14126  16E4  1903               	skipnz
 14127  16E5  0AA7               	incf	strncmp@r+1,f
 14128  16E6  27F6  3191         	fcall	PL170	;call to abstracted procedure
 14129  16E8                     l4840:	
 14130  16E8  27C4  3191         	fcall	PL118	;call to abstracted procedure
 14131  16EA  1D03               	btfss	3,2
 14132  16EB  2ED0               	goto	l4842
 14133  16EC                     l4848:	
 14134  16EC  27C4  3191         	fcall	PL118	;call to abstracted procedure
 14135  16EE  00A0               	movwf	?_strncmp
 14136  16EF  01A1               	clrf	?_strncmp+1
 14137  16F0  27CA               	fcall	PL128	;call to abstracted procedure
 14138  16F1  02A0               	subwf	?_strncmp,f
 14139  16F2  1C03               	skipc
 14140  16F3  03A1               	decf	?_strncmp+1,f
 14141  16F4  0008               	return
 14142  16F5                     __end_of_strncmp:	
 14143  16F5                     __ptext32:	
 14144 ;; *************** function _putch *****************
 14145 ;; Defined at:
 14146 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\putch.c"
 14147 ;; Parameters:    Size  Location     Type
 14148 ;;  c               1    wreg     unsigned char 
 14149 ;; Auto vars:     Size  Location     Type
 14150 ;;  c               1    0[COMMON] unsigned char 
 14151 ;; Return value:  Size  Location     Type
 14152 ;;                  1    wreg      void 
 14153 ;; Registers used:
 14154 ;;		wreg
 14155 ;; Tracked objects:
 14156 ;;		On entry : 3F/0
 14157 ;;		On exit  : 3F/0
 14158 ;;		Unchanged: 3F/0
 14159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14161 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14163 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14164 ;;Total ram usage:        0 bytes
 14165 ;; Hardware stack levels used:    1
 14166 ;; Hardware stack levels required when called:    3
 14167 ;; This function calls:
 14168 ;;		Nothing
 14169 ;; This function is called by:
 14170 ;;		_fputc
 14171 ;; This function uses a non-reentrant model
 14172 ;;
 14173                           
 14174                           
 14175                           ;psect for function _putch
 14176  16F5                     _putch:	
 14177  16F5                     l1248:	
 14178                           ;incstack = 0
 14179                           ; Regs used in _putch: [wreg]
 14180                           
 14181  16F5  0008               	return
 14182  16F6                     __end_of_putch:	
 14183  16F6                     PL2:	
 14184  16F6  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 14185  16F7  0086               	movwf	6
 14186  16F8  0187               	clrf	7
 14187  16F9  3F40               	moviw [0]fsr1
 14188  16FA  00E5               	movwf	??_vfpfcnvrt^(0+128)
 14189  16FB  3F41               	moviw [1]fsr1
 14190  16FC  00E6               	movwf	(??_vfpfcnvrt^(0+128)+1)
 14191  16FD  0865               	movf	??_vfpfcnvrt^(0+128),w
 14192  16FE  0084               	movwf	4
 14193  16FF  0866               	movf	(??_vfpfcnvrt+1)^(0+128),w
 14194  1700  0085               	movwf	5
 14195  1701  0008               	return
 14196  1702                     __end_ofPL2:	
 14197  1702                     PL4:	
 14198  1702  0086               	movwf	6
 14199  1703  0187               	clrf	7
 14200  1704  3F40               	moviw [0]fsr1
 14201  1705  00E5               	movwf	??_vfpfcnvrt^(0+128)
 14202  1706  3F41               	moviw [1]fsr1
 14203  1707  00E6               	movwf	(??_vfpfcnvrt^(0+128)+1)
 14204  1708  0008               	return
 14205  1709                     __end_ofPL4:	
 14206  1709                     PL22:	
 14207  1709  3001               	movlw	1
 14208  170A  0187               	clrf	7
 14209  170B  0781               	addwf	1,f
 14210  170C  3141               	addfsr 1,1
 14211  170D  1803               	skipnc
 14212  170E  0A81               	incf	1,f
 14213  170F  0864               	movf	vfpfcnvrt@ap^(0+128),w
 14214  1710  0086               	movwf	6
 14215  1711  3001               	movlw	1	; select bank2/3
 14216  1712  0087               	movwf	7
 14217  1713  0801               	movf	1,w
 14218  1714  0084               	movwf	4
 14219  1715  3001               	movlw	1	; select bank2/3
 14220  1716  0085               	movwf	5
 14221  1717  3002               	movlw	2
 14222  1718  0781               	addwf	1,f
 14223  1719  3F00               	moviw [0]fsr0
 14224  171A  0008               	return
 14225  171B                     __end_ofPL22:	
 14226  171B                     PL24:	
 14227  171B  0781               	addwf	1,f
 14228  171C  3141               	addfsr 1,1
 14229  171D  1803               	skipnc
 14230  171E  0A81               	incf	1,f
 14231  171F  0864               	movf	vfpfcnvrt@ap^(0+128),w
 14232  1720  0086               	movwf	6
 14233  1721  3001               	movlw	1	; select bank2/3
 14234  1722  0087               	movwf	7
 14235  1723  0008               	return
 14236  1724                     __end_ofPL24:	
 14237  1724                     PL26:	
 14238  1724  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 14239  1725  0086               	movwf	6
 14240  1726  3001               	movlw	1
 14241  1727  0187               	clrf	7
 14242  1728  0781               	addwf	1,f
 14243  1729  3141               	addfsr 1,1
 14244  172A  0008               	return
 14245  172B                     __end_ofPL26:	
 14246  172B                     PL28:	
 14247  172B  3001               	movlw	1	; select bank2/3
 14248  172C  0087               	movwf	7
 14249  172D  0801               	movf	1,w
 14250  172E  0084               	movwf	4
 14251  172F  3001               	movlw	1	; select bank2/3
 14252  1730  0085               	movwf	5
 14253  1731  3004               	movlw	4
 14254  1732  0781               	addwf	1,f
 14255  1733  3F00               	moviw [0]fsr0
 14256  1734  0142               	movlb	2	; select bank2
 14257  1735  00AE               	movwf	vfpfcnvrt@f^(0+256)
 14258  1736  3F01               	moviw [1]fsr0
 14259  1737  00AF               	movwf	(vfpfcnvrt@f+1)^(0+256)
 14260  1738  3F02               	moviw [2]fsr0
 14261  1739  00B0               	movwf	(vfpfcnvrt@f+2)^(0+256)
 14262  173A  3F03               	moviw [3]fsr0
 14263  173B  0008               	return
 14264  173C                     __end_ofPL28:	
 14265  173C                     PL38:	
 14266  173C  0140               	movlb	0	; select bank0
 14267  173D  3020               	movlw	low _s
 14268  173E  01A6               	clrf	OLED_print_xy@row
 14269  173F  0AA6               	incf	OLED_print_xy@row,f
 14270  1740  00A7               	movwf	OLED_print_xy@s
 14271  1741  3003               	movlw	high _s
 14272  1742  00A8               	movwf	OLED_print_xy@s+1
 14273  1743  3400               	retlw	0
 14274  1744                     __end_ofPL38:	
 14275  1744                     PL40:	
 14276  1744  0140               	movlb	0	; select bank0
 14277  1745  00EB               	movwf	efgtoa@f+3
 14278  1746  0142               	movlb	2	; select bank2
 14279  1747  0830               	movf	(vfpfcnvrt@f+2)^(0+256),w
 14280  1748  0140               	movlb	0	; select bank0
 14281  1749  00EA               	movwf	efgtoa@f+2
 14282  174A  0142               	movlb	2	; select bank2
 14283  174B  082F               	movf	(vfpfcnvrt@f+1)^(0+256),w
 14284  174C  0140               	movlb	0	; select bank0
 14285  174D  00E9               	movwf	efgtoa@f+1
 14286  174E  0142               	movlb	2	; select bank2
 14287  174F  082E               	movf	vfpfcnvrt@f^(0+256),w
 14288  1750  0140               	movlb	0	; select bank0
 14289  1751  00E8               	movwf	efgtoa@f
 14290  1752  0142               	movlb	2	; select bank2
 14291  1753  0832               	movf	vfpfcnvrt@c^(0+256),w
 14292  1754  0140               	movlb	0	; select bank0
 14293  1755  00EC               	movwf	efgtoa@c
 14294  1756  0142               	movlb	2	; select bank2
 14295  1757  0833               	movf	vfpfcnvrt@fp^(0+256),w
 14296  1758  0008               	return
 14297  1759                     __end_ofPL40:	
 14298  1759                     PL44:	
 14299  1759  0800               	movf	0,w	;code access
 14300  175A  3ED0               	addlw	208
 14301  175B  00E7               	movwf	(??_vfpfcnvrt+2)^(0+128)
 14302  175C  30FF               	movlw	255
 14303  175D  1803               	skipnc
 14304  175E  3000               	movlw	0
 14305  175F  00E8               	movwf	((??_vfpfcnvrt+2)^(0+128)+1)
 14306  1760  3000               	movlw	0
 14307  1761  0268               	subwf	(??_vfpfcnvrt+3)^(0+128),w
 14308  1762  300A               	movlw	10
 14309  1763  1903               	skipnz
 14310  1764  0267               	subwf	(??_vfpfcnvrt+2)^(0+128),w
 14311  1765  1803               	btfsc	3,0
 14312  1766  2F69               	goto	u7070
 14313  1767  3001               	movlw	1
 14314  1768  2F6A               	goto	u7080
 14315  1769                     u7070:	
 14316  1769  3000               	movlw	0
 14317  176A                     u7080:	
 14318  176A  0142               	movlb	2	; select bank2
 14319  176B  0008               	return
 14320  176C                     __end_ofPL44:	
 14321  176C                     PL64:	
 14322  176C  3F40               	moviw [0]fsr1
 14323  176D  00B8               	movwf	(?_sprintf^(0+256)+4)
 14324  176E  3F41               	moviw [1]fsr1
 14325  176F  00B9               	movwf	((?_sprintf+1)^(0+256)+4)
 14326  1770  3F42               	moviw [2]fsr1
 14327  1771  00BA               	movwf	((?_sprintf+2)^(0+256)+4)
 14328  1772  3F43               	moviw [3]fsr1
 14329  1773  00BB               	movwf	((?_sprintf+3)^(0+256)+4)
 14330  1774  0008               	return
 14331  1775                     __end_ofPL64:	
 14332  1775                     PL70:	
 14333  1775  0140               	movlb	0	; select bank0
 14334  1776  083C               	movf	stoa@l+1,w
 14335  1777  3A80               	xorlw	128
 14336  1778  00AA               	movwf	??_stoa
 14337  1779  0835               	movf	stoa@w+1,w
 14338  177A  3A80               	xorlw	128
 14339  177B  022A               	subwf	??_stoa,w
 14340  177C  1D03               	skipz
 14341  177D  0008               	return
 14342  177E  0834               	movf	stoa@w,w
 14343  177F  023B               	subwf	stoa@l,w
 14344  1780  0008               	return
 14345  1781                     __end_ofPL70:	
 14346  1781                     PL74:	
 14347  1781  0142               	movlb	2	; select bank2
 14348  1782  00B4               	movwf	sprintf@s^(0+256)
 14349  1783  3003               	movlw	high _s
 14350  1784  00B5               	movwf	(sprintf@s+1)^(0+256)
 14351  1785  3003               	movlw	low (STR_11| (0+32768))
 14352  1786  00B6               	movwf	sprintf@fmt^(0+256)
 14353  1787  30A1               	movlw	high (STR_11| (0+32768))
 14354  1788  00B7               	movwf	(sprintf@fmt^(0+256)+1)
 14355  1789  0866               	movf	_selectedChannel^(0+256),w
 14356  178A  00B8               	movwf	(?_sprintf^(0+256)+4)
 14357  178B  01B9               	clrf	((?_sprintf+1)^(0+256)+4)
 14358  178C  0008               	return
 14359  178D                     __end_ofPL74:	
 14360  178D                     PL78:	
 14361  178D  0765               	addwf	??_vfpfcnvrt^(0+128),w
 14362  178E  0084               	movwf	4
 14363  178F  0866               	movf	(??_vfpfcnvrt^(0+128)+1),w
 14364  1790  1803               	skipnc
 14365  1791  0A66               	incf	(??_vfpfcnvrt^(0+128)+1),w
 14366  1792  0085               	movwf	5
 14367  1793  0800               	movf	0,w	;code access
 14368  1794  0008               	return
 14369  1795                     __end_ofPL78:	
 14370  1795                     PL82:	
 14371  1795  0086               	movwf	6
 14372  1796  3F40               	moviw [0]fsr1
 14373  1797  00BC               	movwf	(?_sprintf^(0+256)+8)
 14374  1798  3F41               	moviw [1]fsr1
 14375  1799  00BD               	movwf	((?_sprintf+1)^(0+256)+8)
 14376  179A  3F42               	moviw [2]fsr1
 14377  179B  00BE               	movwf	((?_sprintf+2)^(0+256)+8)
 14378  179C  3F43               	moviw [3]fsr1
 14379  179D  00BF               	movwf	((?_sprintf+3)^(0+256)+8)
 14380  179E  0008               	return
 14381  179F                     __end_ofPL82:	
 14382  179F                     PL90:	
 14383  179F  3020               	movlw	low _s
 14384  17A0  0142               	movlb	2	; select bank2
 14385  17A1  00B4               	movwf	sprintf@s^(0+256)
 14386  17A2  3003               	movlw	high _s
 14387  17A3  00B5               	movwf	(sprintf@s+1)^(0+256)
 14388  17A4  0008               	return
 14389  17A5                     __end_ofPL90:	
 14390  17A5                     PL92:	
 14391  17A5  0826               	movf	atoi@s,w
 14392  17A6  0084               	movwf	4
 14393  17A7  0827               	movf	atoi@s+1,w
 14394  17A8  0085               	movwf	5
 14395  17A9  0800               	movf	0,w	;code access
 14396  17AA  0008               	return
 14397  17AB                     __end_ofPL92:	
 14398  17AB                     PL100:	
 14399  17AB  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 14400  17AC  0086               	movwf	6
 14401  17AD  0187               	clrf	7
 14402  17AE  3F40               	moviw [0]fsr1
 14403  17AF  0140               	movlb	0	; select bank0
 14404  17B0  00A6               	movwf	atoi@s
 14405  17B1  3F41               	moviw [1]fsr1
 14406  17B2  00A7               	movwf	atoi@s+1
 14407  17B3  0008               	return
 14408  17B4                     __end_ofPL100:	
 14409  17B4                     PL102:	
 14410  17B4  0869               	movf	?_efgtoa+1,w
 14411  17B5  0141               	movlb	1	; select bank1
 14412  17B6  00E4               	movwf	(?_vfpfcnvrt+1)^(0+128)
 14413  17B7  0140               	movlb	0	; select bank0
 14414  17B8  0868               	movf	?_efgtoa,w
 14415  17B9  0141               	movlb	1	; select bank1
 14416  17BA  00E3               	movwf	?_vfpfcnvrt^(0+128)
 14417  17BB  0008               	return
 14418  17BC                     __end_ofPL102:	
 14419  17BC                     PL106:	
 14420  17BC  00A8               	movwf	??_atoi
 14421  17BD  30FF               	movlw	255
 14422  17BE  1803               	skipnc
 14423  17BF  3000               	movlw	0
 14424  17C0  00A9               	movwf	??_atoi+1
 14425  17C1  3000               	movlw	0
 14426  17C2  0229               	subwf	??_atoi+1,w
 14427  17C3  0008               	return
 14428  17C4                     __end_ofPL106:	
 14429  17C4                     PL118:	
 14430  17C4  0828               	movf	strncmp@l,w
 14431  17C5  0086               	movwf	6
 14432  17C6  3001               	movlw	1	; select bank2/3
 14433  17C7  0087               	movwf	7
 14434  17C8  0801               	movf	1,w
 14435  17C9  0008               	return
 14436  17CA                     __end_ofPL118:	
 14437  17CA                     PL128:	
 14438  17CA  0826               	movf	strncmp@r,w
 14439  17CB  0084               	movwf	4
 14440  17CC  0827               	movf	strncmp@r+1,w
 14441  17CD  0085               	movwf	5
 14442  17CE  0800               	movf	0,w	;code access
 14443  17CF  00A4               	movwf	??_strncmp
 14444  17D0  0008               	return
 14445  17D1                     __end_ofPL128:	
 14446  17D1                     PL130:	
 14447  17D1  3020               	movlw	32
 14448  17D2  0140               	movlb	0	; select bank0
 14449  17D3  00A0               	movwf	fputc@c
 14450  17D4  01A1               	clrf	fputc@c+1
 14451  17D5  0836               	movf	stoa@fp,w
 14452  17D6  00A2               	movwf	fputc@fp
 14453  17D7  0008               	return
 14454  17D8                     __end_ofPL130:	
 14455  17D8                     PL132:	
 14456  17D8  0142               	movlb	2	; select bank2
 14457  17D9  0852               	movf	statusView@data^(0+256),w
 14458  17DA  3E20               	addlw	32
 14459  17DB  0086               	movwf	6
 14460  17DC  3002               	movlw	2	; select bank4/5
 14461  17DD  0087               	movwf	7
 14462  17DE  0008               	return
 14463  17DF                     __end_ofPL132:	
 14464  17DF                     PL148:	
 14465  17DF  01A1               	clrf	fputc@c+1
 14466  17E0  0142               	movlb	2	; select bank2
 14467  17E1  0833               	movf	vfpfcnvrt@fp^(0+256),w
 14468  17E2  0140               	movlb	0	; select bank0
 14469  17E3  00A2               	movwf	fputc@fp
 14470  17E4  0008               	return
 14471  17E5                     __end_ofPL148:	
 14472  17E5                     PL152:	
 14473  17E5  0822               	movf	fputc@fp,w
 14474  17E6  3E04               	addlw	4
 14475  17E7  0086               	movwf	6
 14476  17E8  3001               	movlw	1	; select bank2/3
 14477  17E9  0087               	movwf	7
 14478  17EA  0008               	return
 14479  17EB                     __end_ofPL152:	
 14480  17EB                     PL154:	
 14481  17EB  0142               	movlb	2	; select bank2
 14482  17EC  00B2               	movwf	vfpfcnvrt@c^(0+256)
 14483  17ED  0141               	movlb	1	; select bank1
 14484  17EE  0863               	movf	vfpfcnvrt@fmt^(0+128),w
 14485  17EF  0086               	movwf	6
 14486  17F0  0008               	return
 14487  17F1                     __end_ofPL154:	
 14488  17F1                     PL164:	
 14489  17F1  0140               	movlb	0	; select bank0
 14490  17F2  300C               	movlw	12
 14491  17F3  0AAB               	incf	paging@n,f
 14492  17F4  022B               	subwf	paging@n,w
 14493  17F5  0008               	return
 14494  17F6                     __end_ofPL164:	
 14495  17F6                     PL170:	
 14496  17F6  3001               	movlw	1
 14497  17F7  02A2               	subwf	strncmp@n,f
 14498  17F8  3000               	movlw	0
 14499  17F9  3BA3               	subwfb	strncmp@n+1,f
 14500  17FA  0008               	return
 14501  17FB                     __end_ofPL170:	
 14502  17FB                     PL176:	
 14503  17FB  0140               	movlb	0	; select bank0
 14504  17FC  0836               	movf	pad@fp,w
 14505  17FD  00A8               	movwf	fputs@fp
 14506  17FE  082E               	movf	pad@buf,w
 14507  17FF  0008               	return
 14508  1800                     __end_ofPL176:	
 14509                           
 14510                           	psect	text37
 14511  0813                     __ptext37:	
 14512 ;; *************** function _isspace *****************
 14513 ;; Defined at:
 14514 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\isspace.c"
 14515 ;; Parameters:    Size  Location     Type
 14516 ;;  c               2    0[BANK0 ] int 
 14517 ;; Auto vars:     Size  Location     Type
 14518 ;;		None
 14519 ;; Return value:  Size  Location     Type
 14520 ;;                  2    0[BANK0 ] int 
 14521 ;; Registers used:
 14522 ;;		wreg, status,2, status,0
 14523 ;; Tracked objects:
 14524 ;;		On entry : 0/0
 14525 ;;		On exit  : 3F/0
 14526 ;;		Unchanged: 0/0
 14527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14528 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14529 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14530 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14531 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14532 ;;Total ram usage:        5 bytes
 14533 ;; Hardware stack levels used:    1
 14534 ;; Hardware stack levels required when called:    3
 14535 ;; This function calls:
 14536 ;;		Nothing
 14537 ;; This function is called by:
 14538 ;;		_atoi
 14539 ;; This function uses a non-reentrant model
 14540 ;;
 14541                           
 14542                           
 14543                           ;psect for function _isspace
 14544  0813                     _isspace:	
 14545                           
 14546                           ;incstack = 0
 14547                           ; Regs used in _isspace: [wreg+status,2+status,0]
 14548  0813  0140               	movlb	0	; select bank0
 14549  0814  3020               	movlw	32
 14550  0815  01A4               	clrf	_isspace$1511
 14551  0816  0AA4               	incf	_isspace$1511,f
 14552  0817  0620               	xorwf	isspace@c,w
 14553  0818  0421               	iorwf	isspace@c+1,w
 14554  0819  1903               	btfsc	3,2
 14555  081A  2828               	goto	l4358
 14556  081B  0820               	movf	isspace@c,w
 14557  081C  3EF7               	addlw	247
 14558  081D  00A2               	movwf	??_isspace
 14559  081E  30FF               	movlw	255
 14560  081F  3D21               	addwfc	isspace@c+1,w
 14561  0820  00A3               	movwf	??_isspace+1
 14562  0821  3000               	movlw	0
 14563  0822  0223               	subwf	??_isspace+1,w
 14564  0823  3005               	movlw	5
 14565  0824  1903               	skipnz
 14566  0825  0222               	subwf	??_isspace,w
 14567  0826  1803               	btfsc	3,0
 14568  0827  01A4               	clrf	_isspace$1511
 14569  0828                     l4358:	
 14570  0828  0824               	movf	_isspace$1511,w
 14571  0829  00A0               	movwf	?_isspace
 14572  082A  01A1               	clrf	?_isspace+1
 14573  082B  0008               	return
 14574  082C                     __end_of_isspace:	
 14575                           
 14576                           	psect	text38
 14577  1C1D                     __ptext38:	
 14578 ;; *************** function _isdigit *****************
 14579 ;; Defined at:
 14580 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\isdigit.c"
 14581 ;; Parameters:    Size  Location     Type
 14582 ;;  c               2    0[BANK0 ] int 
 14583 ;; Auto vars:     Size  Location     Type
 14584 ;;		None
 14585 ;; Return value:  Size  Location     Type
 14586 ;;                  2    0[BANK0 ] int 
 14587 ;; Registers used:
 14588 ;;		wreg, status,2, status,0
 14589 ;; Tracked objects:
 14590 ;;		On entry : 0/0
 14591 ;;		On exit  : 3F/0
 14592 ;;		Unchanged: 0/0
 14593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14594 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14595 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14596 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14597 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14598 ;;Total ram usage:        4 bytes
 14599 ;; Hardware stack levels used:    1
 14600 ;; Hardware stack levels required when called:    3
 14601 ;; This function calls:
 14602 ;;		Nothing
 14603 ;; This function is called by:
 14604 ;;		_vfpfcnvrt
 14605 ;;		_atoi
 14606 ;; This function uses a non-reentrant model
 14607 ;;
 14608                           
 14609                           
 14610                           ;psect for function _isdigit
 14611  1C1D                     _isdigit:	
 14612                           
 14613                           ;incstack = 0
 14614                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 14615  1C1D  0140               	movlb	0	; select bank0
 14616  1C1E  0820               	movf	isdigit@c,w
 14617  1C1F  3ED0               	addlw	208
 14618  1C20  00A2               	movwf	??_isdigit
 14619  1C21  30FF               	movlw	255
 14620  1C22  3D21               	addwfc	isdigit@c+1,w
 14621  1C23  00A3               	movwf	??_isdigit+1
 14622  1C24  3000               	movlw	0
 14623  1C25  0223               	subwf	??_isdigit+1,w
 14624  1C26  300A               	movlw	10
 14625  1C27  1903               	skipnz
 14626  1C28  0222               	subwf	??_isdigit,w
 14627  1C29  1803               	btfsc	3,0
 14628  1C2A  2C2D               	goto	u4210
 14629  1C2B  3001               	movlw	1
 14630  1C2C  2C2E               	goto	u4220
 14631  1C2D                     u4210:	
 14632  1C2D  3000               	movlw	0
 14633  1C2E                     u4220:	
 14634  1C2E  00A0               	movwf	?_isdigit
 14635  1C2F  01A1               	clrf	?_isdigit+1
 14636  1C30  0008               	return
 14637  1C31                     __end_of_isdigit:	
 14638                           
 14639                           	psect	text55
 14640  1CE1                     __ptext55:	
 14641 ;; *************** function ___fladd *****************
 14642 ;; Defined at:
 14643 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\sprcadd.c"
 14644 ;; Parameters:    Size  Location     Type
 14645 ;;  b               4   39[BANK0 ] unsigned char 
 14646 ;;  a               4   43[BANK0 ] unsigned char 
 14647 ;; Auto vars:     Size  Location     Type
 14648 ;;  grs             1   58[BANK0 ] unsigned char 
 14649 ;;  bexp            1   57[BANK0 ] unsigned char 
 14650 ;;  aexp            1   56[BANK0 ] unsigned char 
 14651 ;;  signs           1   55[BANK0 ] unsigned char 
 14652 ;; Return value:  Size  Location     Type
 14653 ;;                  4   39[BANK0 ] unsigned char 
 14654 ;; Registers used:
 14655 ;;		wreg, status,2, status,0
 14656 ;; Tracked objects:
 14657 ;;		On entry : 3F/0
 14658 ;;		On exit  : 3F/0
 14659 ;;		Unchanged: 0/0
 14660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14661 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14662 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14663 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14664 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14665 ;;Total ram usage:       20 bytes
 14666 ;; Hardware stack levels used:    1
 14667 ;; Hardware stack levels required when called:    3
 14668 ;; This function calls:
 14669 ;;		Nothing
 14670 ;; This function is called by:
 14671 ;;		_convertAnalogValues
 14672 ;;		_efgtoa
 14673 ;;		___flsub
 14674 ;; This function uses a non-reentrant model
 14675 ;;
 14676                           
 14677                           
 14678                           ;psect for function ___fladd
 14679  1CE1                     ___fladd:	
 14680                           
 14681                           ;incstack = 0
 14682                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 14683  1CE1  084A               	movf	___fladd@b+3,w
 14684  1CE2  00D7               	movwf	___fladd@signs
 14685  1CE3  3080               	movlw	128
 14686  1CE4  05D7               	andwf	___fladd@signs,f
 14687  1CE5  354A               	lslf	___fladd@b+3,w
 14688  1CE6  00D9               	movwf	___fladd@bexp
 14689  1CE7  1BC9               	btfsc	___fladd@b+2,7
 14690  1CE8  1459               	bsf	___fladd@bexp,0
 14691  1CE9  0859               	movf	___fladd@bexp,w
 14692  1CEA  1903               	btfsc	3,2
 14693  1CEB  2CF4               	goto	l999
 14694  1CEC  0F59               	incfsz	___fladd@bexp,w
 14695  1CED  2CF2               	goto	l1000
 14696  1CEE  01C7               	clrf	___fladd@b
 14697  1CEF  01C8               	clrf	___fladd@b+1
 14698  1CF0  01C9               	clrf	___fladd@b+2
 14699  1CF1  01CA               	clrf	___fladd@b+3
 14700  1CF2                     l1000:	
 14701  1CF2  17C9               	bsf	___fladd@b+2,7
 14702  1CF3  2CF7               	goto	L20
 14703  1CF4                     l999:	
 14704  1CF4  01C7               	clrf	___fladd@b
 14705  1CF5  01C8               	clrf	___fladd@b+1
 14706  1CF6  01C9               	clrf	___fladd@b+2
 14707  1CF7                     L20:	
 14708  1CF7  01CA               	clrf	___fladd@b+3
 14709  1CF8  084E               	movf	___fladd@a+3,w
 14710  1CF9  00D8               	movwf	___fladd@aexp
 14711  1CFA  3080               	movlw	128
 14712  1CFB  05D8               	andwf	___fladd@aexp,f
 14713  1CFC  0858               	movf	___fladd@aexp,w
 14714  1CFD  0657               	xorwf	___fladd@signs,w
 14715  1CFE  1D03               	btfss	3,2
 14716  1CFF  1757               	bsf	___fladd@signs,6
 14717  1D00  354E               	lslf	___fladd@a+3,w
 14718  1D01  00D8               	movwf	___fladd@aexp
 14719  1D02  1BCD               	btfsc	___fladd@a+2,7
 14720  1D03  1458               	bsf	___fladd@aexp,0
 14721  1D04  0858               	movf	___fladd@aexp,w
 14722  1D05  1903               	btfsc	3,2
 14723  1D06  2D0F               	goto	l1004
 14724  1D07  0F58               	incfsz	___fladd@aexp,w
 14725  1D08  2D0D               	goto	l1005
 14726  1D09  01CB               	clrf	___fladd@a
 14727  1D0A  01CC               	clrf	___fladd@a+1
 14728  1D0B  01CD               	clrf	___fladd@a+2
 14729  1D0C  01CE               	clrf	___fladd@a+3
 14730  1D0D                     l1005:	
 14731  1D0D  17CD               	bsf	___fladd@a+2,7
 14732  1D0E  2D12               	goto	L21
 14733  1D0F                     l1004:	
 14734  1D0F  01CB               	clrf	___fladd@a
 14735  1D10  01CC               	clrf	___fladd@a+1
 14736  1D11  01CD               	clrf	___fladd@a+2
 14737  1D12                     L21:	
 14738  1D12  01CE               	clrf	___fladd@a+3
 14739  1D13  0859               	movf	___fladd@bexp,w
 14740  1D14  0258               	subwf	___fladd@aexp,w
 14741  1D15  1803               	skipnc
 14742  1D16  2D39               	goto	l3612
 14743  1D17  1F57               	btfss	___fladd@signs,6
 14744  1D18  2D1B               	goto	l3582
 14745  1D19  3080               	movlw	128
 14746  1D1A  06D7               	xorwf	___fladd@signs,f
 14747  1D1B                     l3582:	
 14748  1D1B  0859               	movf	___fladd@bexp,w
 14749  1D1C  00DA               	movwf	___fladd@grs
 14750  1D1D  0858               	movf	___fladd@aexp,w
 14751  1D1E  00D9               	movwf	___fladd@bexp
 14752  1D1F  085A               	movf	___fladd@grs,w
 14753  1D20  00D8               	movwf	___fladd@aexp
 14754  1D21  0847               	movf	___fladd@b,w
 14755  1D22  00DA               	movwf	___fladd@grs
 14756  1D23  084B               	movf	___fladd@a,w
 14757  1D24  00C7               	movwf	___fladd@b
 14758  1D25  085A               	movf	___fladd@grs,w
 14759  1D26  00CB               	movwf	___fladd@a
 14760  1D27  0848               	movf	___fladd@b+1,w
 14761  1D28  00DA               	movwf	___fladd@grs
 14762  1D29  084C               	movf	___fladd@a+1,w
 14763  1D2A  00C8               	movwf	___fladd@b+1
 14764  1D2B  085A               	movf	___fladd@grs,w
 14765  1D2C  00CC               	movwf	___fladd@a+1
 14766  1D2D  0849               	movf	___fladd@b+2,w
 14767  1D2E  00DA               	movwf	___fladd@grs
 14768  1D2F  084D               	movf	___fladd@a+2,w
 14769  1D30  00C9               	movwf	___fladd@b+2
 14770  1D31  085A               	movf	___fladd@grs,w
 14771  1D32  00CD               	movwf	___fladd@a+2
 14772  1D33  084A               	movf	___fladd@b+3,w
 14773  1D34  00DA               	movwf	___fladd@grs
 14774  1D35  084E               	movf	___fladd@a+3,w
 14775  1D36  00CA               	movwf	___fladd@b+3
 14776  1D37  085A               	movf	___fladd@grs,w
 14777  1D38  00CE               	movwf	___fladd@a+3
 14778  1D39                     l3612:	
 14779  1D39  01DA               	clrf	___fladd@grs
 14780  1D3A  0858               	movf	___fladd@aexp,w
 14781  1D3B  00CF               	movwf	??___fladd
 14782  1D3C  01D0               	clrf	??___fladd+1
 14783  1D3D  0850               	movf	??___fladd+1,w
 14784  1D3E  00D2               	movwf	??___fladd+3
 14785  1D3F  0859               	movf	___fladd@bexp,w
 14786  1D40  024F               	subwf	??___fladd,w
 14787  1D41  00D1               	movwf	??___fladd+2
 14788  1D42  1C03               	skipc
 14789  1D43  03D2               	decf	??___fladd+3,f
 14790  1D44  0852               	movf	??___fladd+3,w
 14791  1D45  3A80               	xorlw	128
 14792  1D46  00D3               	movwf	??___fladd+4
 14793  1D47  3080               	movlw	128
 14794  1D48  0253               	subwf	??___fladd+4,w
 14795  1D49  1D03               	skipz
 14796  1D4A  2D4D               	goto	u3655
 14797  1D4B  301A               	movlw	26
 14798  1D4C  0251               	subwf	??___fladd+2,w
 14799  1D4D                     u3655:	
 14800  1D4D  1C03               	skipc
 14801  1D4E  2D6A               	goto	l3626
 14802  1D4F  0140               	movlb	0	; select bank0
 14803  1D50  084A               	movf	___fladd@b+3,w
 14804  1D51  0449               	iorwf	___fladd@b+2,w
 14805  1D52  0448               	iorwf	___fladd@b+1,w
 14806  1D53  0447               	iorwf	___fladd@b,w
 14807  1D54  1903               	btfsc	3,2
 14808  1D55  2D58               	goto	u3660
 14809  1D56  3001               	movlw	1
 14810  1D57  2D59               	goto	u3670
 14811  1D58                     u3660:	
 14812  1D58  3000               	movlw	0
 14813  1D59                     u3670:	
 14814  1D59  00DA               	movwf	___fladd@grs
 14815  1D5A  01C7               	clrf	___fladd@b
 14816  1D5B  01C8               	clrf	___fladd@b+1
 14817  1D5C  01C9               	clrf	___fladd@b+2
 14818  1D5D  01CA               	clrf	___fladd@b+3
 14819  1D5E  0858               	movf	___fladd@aexp,w
 14820  1D5F  00D9               	movwf	___fladd@bexp
 14821  1D60  2D6F               	goto	l1010
 14822  1D61                     l1012:	
 14823  1D61  1C5A               	btfss	___fladd@grs,0
 14824  1D62  2D67               	goto	l1013
 14825  1D63  365A               	lsrf	___fladd@grs,w
 14826  1D64  3801               	iorlw	1
 14827  1D65  00DA               	movwf	___fladd@grs
 14828  1D66  2D68               	goto	l1014
 14829  1D67                     l1013:	
 14830  1D67  36DA               	lsrf	___fladd@grs,f
 14831  1D68                     l1014:	
 14832  1D68  2617  319C         	fcall	PL108	;call to abstracted procedure
 14833  1D6A                     l3626:	
 14834  1D6A  0140               	movlb	0	; select bank0
 14835  1D6B  0858               	movf	___fladd@aexp,w
 14836  1D6C  0259               	subwf	___fladd@bexp,w
 14837  1D6D  1C03               	skipc
 14838  1D6E  2D61               	goto	l1012
 14839  1D6F                     l1010:	
 14840  1D6F  1B57               	btfsc	___fladd@signs,6
 14841  1D70  2D89               	goto	l3644
 14842  1D71  0859               	movf	___fladd@bexp,w
 14843  1D72  1D03               	btfss	3,2
 14844  1D73  2D75               	goto	l3632
 14845  1D74  2E26               	ljmp	PL144	;call to abstracted procedure
 14846  1D75                     l3632:	
 14847  1D75  084B               	movf	___fladd@a,w
 14848  1D76  07C7               	addwf	___fladd@b,f
 14849  1D77  084C               	movf	___fladd@a+1,w
 14850  1D78  3DC8               	addwfc	___fladd@b+1,f
 14851  1D79  084D               	movf	___fladd@a+2,w
 14852  1D7A  3DC9               	addwfc	___fladd@b+2,f
 14853  1D7B  084E               	movf	___fladd@a+3,w
 14854  1D7C  3DCA               	addwfc	___fladd@b+3,f
 14855  1D7D  1C4A               	btfss	___fladd@b+3,0
 14856  1D7E  2DE9               	goto	l3674
 14857  1D7F  1C5A               	btfss	___fladd@grs,0
 14858  1D80  2D85               	goto	l1021
 14859  1D81  365A               	lsrf	___fladd@grs,w
 14860  1D82  3801               	iorlw	1
 14861  1D83  00DA               	movwf	___fladd@grs
 14862  1D84  2D86               	goto	l1022
 14863  1D85                     l1021:	
 14864  1D85  36DA               	lsrf	___fladd@grs,f
 14865  1D86                     l1022:	
 14866  1D86  2617  319C         	fcall	PL108	;call to abstracted procedure
 14867  1D88  2DE9               	goto	l3674
 14868  1D89                     l3644:	
 14869  1D89  084A               	movf	___fladd@b+3,w
 14870  1D8A  3A80               	xorlw	128
 14871  1D8B  00CF               	movwf	??___fladd
 14872  1D8C  084E               	movf	___fladd@a+3,w
 14873  1D8D  3A80               	xorlw	128
 14874  1D8E  024F               	subwf	??___fladd,w
 14875  1D8F  1D03               	skipz
 14876  1D90  2D9B               	goto	u3763
 14877  1D91  084D               	movf	___fladd@a+2,w
 14878  1D92  0249               	subwf	___fladd@b+2,w
 14879  1D93  1D03               	skipz
 14880  1D94  2D9B               	goto	u3763
 14881  1D95  084C               	movf	___fladd@a+1,w
 14882  1D96  0248               	subwf	___fladd@b+1,w
 14883  1D97  1D03               	skipz
 14884  1D98  2D9B               	goto	u3763
 14885  1D99  084B               	movf	___fladd@a,w
 14886  1D9A  0247               	subwf	___fladd@b,w
 14887  1D9B                     u3763:	
 14888  1D9B  1803               	skipnc
 14889  1D9C  2DC6               	goto	l3654
 14890  1D9D  30FF               	movlw	255
 14891  1D9E  00CF               	movwf	??___fladd
 14892  1D9F  00D0               	movwf	??___fladd+1
 14893  1DA0  00D1               	movwf	??___fladd+2
 14894  1DA1  00D2               	movwf	??___fladd+3
 14895  1DA2  0847               	movf	___fladd@b,w
 14896  1DA3  024B               	subwf	___fladd@a,w
 14897  1DA4  00D3               	movwf	??___fladd+4
 14898  1DA5  0848               	movf	___fladd@b+1,w
 14899  1DA6  3B4C               	subwfb	___fladd@a+1,w
 14900  1DA7  00D4               	movwf	??___fladd+5
 14901  1DA8  0849               	movf	___fladd@b+2,w
 14902  1DA9  3B4D               	subwfb	___fladd@a+2,w
 14903  1DAA  00D5               	movwf	??___fladd+6
 14904  1DAB  084A               	movf	___fladd@b+3,w
 14905  1DAC  3B4E               	subwfb	___fladd@a+3,w
 14906  1DAD  00D6               	movwf	??___fladd+7
 14907  1DAE  0853               	movf	??___fladd+4,w
 14908  1DAF  07CF               	addwf	??___fladd,f
 14909  1DB0  0854               	movf	??___fladd+5,w
 14910  1DB1  3DD0               	addwfc	??___fladd+1,f
 14911  1DB2  0855               	movf	??___fladd+6,w
 14912  1DB3  3DD1               	addwfc	??___fladd+2,f
 14913  1DB4  0856               	movf	??___fladd+7,w
 14914  1DB5  3DD2               	addwfc	??___fladd+3,f
 14915  1DB6  0852               	movf	??___fladd+3,w
 14916  1DB7  00CA               	movwf	___fladd@b+3
 14917  1DB8  0851               	movf	??___fladd+2,w
 14918  1DB9  00C9               	movwf	___fladd@b+2
 14919  1DBA  0850               	movf	??___fladd+1,w
 14920  1DBB  00C8               	movwf	___fladd@b+1
 14921  1DBC  084F               	movf	??___fladd,w
 14922  1DBD  00C7               	movwf	___fladd@b
 14923  1DBE  3080               	movlw	128
 14924  1DBF  06D7               	xorwf	___fladd@signs,f
 14925  1DC0  09DA               	comf	___fladd@grs,f
 14926  1DC1  0FDA               	incfsz	___fladd@grs,f
 14927  1DC2  2DCE               	goto	l1027
 14928  1DC3  261F  319C         	fcall	PL126	;call to abstracted procedure
 14929  1DC5  2DCE               	goto	l1027
 14930  1DC6                     l3654:	
 14931  1DC6  084B               	movf	___fladd@a,w
 14932  1DC7  02C7               	subwf	___fladd@b,f
 14933  1DC8  084C               	movf	___fladd@a+1,w
 14934  1DC9  3BC8               	subwfb	___fladd@b+1,f
 14935  1DCA  084D               	movf	___fladd@a+2,w
 14936  1DCB  3BC9               	subwfb	___fladd@b+2,f
 14937  1DCC  084E               	movf	___fladd@a+3,w
 14938  1DCD  3BCA               	subwfb	___fladd@b+3,f
 14939  1DCE                     l1027:	
 14940  1DCE  084A               	movf	___fladd@b+3,w
 14941  1DCF  0449               	iorwf	___fladd@b+2,w
 14942  1DD0  0448               	iorwf	___fladd@b+1,w
 14943  1DD1  0447               	iorwf	___fladd@b,w
 14944  1DD2  1D03               	skipz
 14945  1DD3  2DE7               	goto	l3672
 14946  1DD4  085A               	movf	___fladd@grs,w
 14947  1DD5  1D03               	btfss	3,2
 14948  1DD6  2DE7               	goto	l3672
 14949  1DD7  2E26               	ljmp	PL144	;call to abstracted procedure
 14950  1DD8                     l3660:	
 14951  1DD8  35C7               	lslf	___fladd@b,f
 14952  1DD9  0DC8               	rlf	___fladd@b+1,f
 14953  1DDA  0DC9               	rlf	___fladd@b+2,f
 14954  1DDB  0DCA               	rlf	___fladd@b+3,f
 14955  1DDC  1BDA               	btfsc	___fladd@grs,7
 14956  1DDD  1447               	bsf	___fladd@b,0
 14957  1DDE  1C5A               	btfss	___fladd@grs,0
 14958  1DDF  2DE3               	goto	l1032
 14959  1DE0  1403               	setc
 14960  1DE1  0DDA               	rlf	___fladd@grs,f
 14961  1DE2  2DE4               	goto	l3668
 14962  1DE3                     l1032:	
 14963  1DE3  35DA               	lslf	___fladd@grs,f
 14964  1DE4                     l3668:	
 14965  1DE4  0859               	movf	___fladd@bexp,w
 14966  1DE5  1D03               	btfss	3,2
 14967  1DE6  03D9               	decf	___fladd@bexp,f
 14968  1DE7                     l3672:	
 14969  1DE7  1FC9               	btfss	___fladd@b+2,7
 14970  1DE8  2DD8               	goto	l3660
 14971  1DE9                     l3674:	
 14972  1DE9  01D8               	clrf	___fladd@aexp
 14973  1DEA  1FDA               	btfss	___fladd@grs,7
 14974  1DEB  2DF4               	goto	l3684
 14975  1DEC  085A               	movf	___fladd@grs,w
 14976  1DED  397F               	andlw	127
 14977  1DEE  1903               	btfsc	3,2
 14978  1DEF  1847               	btfsc	___fladd@b,0
 14979  1DF0  2DF2               	goto	l3680
 14980  1DF1  2DF4               	goto	l3684
 14981  1DF2                     l3680:	
 14982  1DF2  01D8               	clrf	___fladd@aexp
 14983  1DF3  0AD8               	incf	___fladd@aexp,f
 14984  1DF4                     l3684:	
 14985  1DF4  0858               	movf	___fladd@aexp,w
 14986  1DF5  1903               	btfsc	3,2
 14987  1DF6  2E01               	goto	l3696
 14988  1DF7  261F  319C         	fcall	PL126	;call to abstracted procedure
 14989  1DF9  1C4A               	btfss	___fladd@b+3,0
 14990  1DFA  2E01               	goto	l3696
 14991  1DFB  37CA               	asrf	___fladd@b+3,f
 14992  1DFC  0CC9               	rrf	___fladd@b+2,f
 14993  1DFD  0CC8               	rrf	___fladd@b+1,f
 14994  1DFE  0CC7               	rrf	___fladd@b,f
 14995  1DFF  0F59               	incfsz	___fladd@bexp,w
 14996  1E00  0AD9               	incf	___fladd@bexp,f
 14997  1E01                     l3696:	
 14998  1E01  0A59               	incf	___fladd@bexp,w
 14999  1E02  1D03               	btfss	3,2
 15000  1E03  0859               	movf	___fladd@bexp,w
 15001  1E04  1D03               	btfss	3,2
 15002  1E05  2E0D               	goto	l3704
 15003  1E06  01C7               	clrf	___fladd@b
 15004  1E07  01C8               	clrf	___fladd@b+1
 15005  1E08  01C9               	clrf	___fladd@b+2
 15006  1E09  01CA               	clrf	___fladd@b+3
 15007  1E0A  0859               	movf	___fladd@bexp,w
 15008  1E0B  1903               	btfsc	3,2
 15009  1E0C  01D7               	clrf	___fladd@signs
 15010  1E0D                     l3704:	
 15011  1E0D  1C59               	btfss	___fladd@bexp,0
 15012  1E0E  2E11               	goto	l1047
 15013  1E0F  17C9               	bsf	___fladd@b+2,7
 15014  1E10  2E12               	goto	l3708
 15015  1E11                     l1047:	
 15016  1E11  13C9               	bcf	___fladd@b+2,7
 15017  1E12                     l3708:	
 15018  1E12  3659               	lsrf	___fladd@bexp,w
 15019  1E13  00CA               	movwf	___fladd@b+3
 15020  1E14  1BD7               	btfsc	___fladd@signs,7
 15021  1E15  17CA               	bsf	___fladd@b+3,7
 15022  1E16  0008               	return
 15023  1E17                     __end_of___fladd:	
 15024  1E17                     PL108:	
 15025  1E17  1847               	btfsc	___fladd@b,0
 15026  1E18  17DA               	bsf	___fladd@grs,7
 15027  1E19  37CA               	asrf	___fladd@b+3,f
 15028  1E1A  0CC9               	rrf	___fladd@b+2,f
 15029  1E1B  0CC8               	rrf	___fladd@b+1,f
 15030  1E1C  0CC7               	rrf	___fladd@b,f
 15031  1E1D  0AD9               	incf	___fladd@bexp,f
 15032  1E1E  0008               	return
 15033  1E1F                     __end_ofPL108:	
 15034  1E1F                     PL126:	
 15035  1E1F  3001               	movlw	1
 15036  1E20  07C7               	addwf	___fladd@b,f
 15037  1E21  3000               	movlw	0
 15038  1E22  3DC8               	addwfc	___fladd@b+1,f
 15039  1E23  3DC9               	addwfc	___fladd@b+2,f
 15040  1E24  3DCA               	addwfc	___fladd@b+3,f
 15041  1E25  0008               	return
 15042  1E26                     __end_ofPL126:	
 15043  1E26                     PL144:	
 15044  1E26  01C7               	clrf	?___fladd
 15045  1E27  01C8               	clrf	?___fladd+1
 15046  1E28  01C9               	clrf	?___fladd+2
 15047  1E29  01CA               	clrf	?___fladd+3
 15048  1E2A  0008               	return
 15049  1E2B                     __end_ofPL144:	
 15050                           
 15051                           	psect	intentry
 15052  0004                     __pintentry:	
 15053 ;; *************** function _ISR *****************
 15054 ;; Defined at:
 15055 ;;		line 48 in file "interrupt.c"
 15056 ;; Parameters:    Size  Location     Type
 15057 ;;		None
 15058 ;; Auto vars:     Size  Location     Type
 15059 ;;		None
 15060 ;; Return value:  Size  Location     Type
 15061 ;;                  1    wreg      void 
 15062 ;; Registers used:
 15063 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15064 ;; Tracked objects:
 15065 ;;		On entry : 0/0
 15066 ;;		On exit  : 3F/E
 15067 ;;		Unchanged: 0/0
 15068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15071 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15072 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15073 ;;Total ram usage:        4 bytes
 15074 ;; Hardware stack levels used:    1
 15075 ;; Hardware stack levels required when called:    2
 15076 ;; This function calls:
 15077 ;;		_pushButtonISR
 15078 ;;		_rotISR
 15079 ;;		_uartReceiveISR
 15080 ;; This function is called by:
 15081 ;;		Interrupt level 1
 15082 ;; This function uses a non-reentrant model
 15083 ;;
 15084                           
 15085  0004                     _ISR:	
 15086                           
 15087                           ;incstack = 0
 15088  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 15089                           
 15090                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15091  0005  3180               	pagesel	$
 15092  0006  014E               	movlb	14	; select bank14
 15093  0007  1A96               	btfsc	22,5	;volatile
 15094  0008  1E8C               	btfss	12,5	;volatile
 15095  0009  2811               	goto	i1l266
 15096  000A  0AFD               	incf	_tick10ms,f	;volatile
 15097  000B  30B2               	movlw	178
 15098  000C  014B               	movlb	11	; select bank11
 15099  000D  009C               	movwf	28	;volatile
 15100  000E  014E               	movlb	14	; select bank14
 15101  000F  128C               	bcf	12,5	;volatile
 15102  0010  285D               	goto	i1l278
 15103  0011                     i1l266:	
 15104  0011  1A16               	btfsc	22,4	;volatile
 15105  0012  1E0C               	btfss	12,4	;volatile
 15106  0013  282D               	goto	i1l268
 15107  0014  017E               	movlb	62	; select bank62
 15108  0015  1FBF               	btfss	63,7	;volatile
 15109  0016  281C               	goto	i1l5616
 15110  0017  3187  27D5  3180   	fcall	_pushButtonISR
 15111  001A  017E               	movlb	62	; select bank62
 15112  001B  13BF               	bcf	63,7	;volatile
 15113  001C                     i1l5616:	
 15114  001C  1E3F               	btfss	63,4	;volatile
 15115  001D  2823               	goto	i1l5622
 15116  001E  319C  245A  3180   	fcall	_rotISR
 15117  0021  017E               	movlb	62	; select bank62
 15118  0022  123F               	bcf	63,4	;volatile
 15119  0023                     i1l5622:	
 15120  0023  1EBF               	btfss	63,5	;volatile
 15121  0024  282A               	goto	i1l5628
 15122  0025  319C  245A  3180   	fcall	_rotISR
 15123  0028  017E               	movlb	62	; select bank62
 15124  0029  12BF               	bcf	63,5	;volatile
 15125  002A                     i1l5628:	
 15126  002A  014E               	movlb	14	; select bank14
 15127  002B  120C               	bcf	12,4	;volatile
 15128  002C  285D               	goto	i1l278
 15129  002D                     i1l268:	
 15130  002D  1F0B               	btfss	11,6	;volatile
 15131  002E  285D               	goto	i1l278
 15132  002F  181A               	btfsc	26,0	;volatile
 15133  0030  1C10               	btfss	16,0	;volatile
 15134  0031  2856               	goto	i1l274
 15135  0032  0143               	movlb	3	; select bank3
 15136  0033  082B               	movf	(_tick100ms+3)^(0+384),w	;volatile
 15137  0034  00FA               	movwf	??_ISR+3
 15138  0035  082A               	movf	(_tick100ms+2)^(0+384),w	;volatile
 15139  0036  00F9               	movwf	??_ISR+2
 15140  0037  0829               	movf	(_tick100ms+1)^(0+384),w	;volatile
 15141  0038  00F8               	movwf	??_ISR+1
 15142  0039  0828               	movf	_tick100ms^(0+384),w	;volatile
 15143  003A  00F7               	movwf	??_ISR
 15144  003B  3001               	movlw	1
 15145  003C  07A8               	addwf	_tick100ms^(0+384),f	;volatile
 15146  003D  3000               	movlw	0
 15147  003E  3DA9               	addwfc	(_tick100ms+1)^(0+384),f	;volatile
 15148  003F  3DAA               	addwfc	(_tick100ms+2)^(0+384),f	;volatile
 15149  0040  3DAB               	addwfc	(_tick100ms+3)^(0+384),f	;volatile
 15150  0041  0277               	subwf	??_ISR,w
 15151  0042  30CA               	movlw	202
 15152  0043  3B78               	subwfb	??_ISR+1,w
 15153  0044  309A               	movlw	154
 15154  0045  3B79               	subwfb	??_ISR+2,w
 15155  0046  303B               	movlw	59
 15156  0047  3B7A               	subwfb	??_ISR+3,w
 15157  0048  1C03               	btfss	3,0
 15158  0049  284E               	goto	i1l275
 15159  004A  01A8               	clrf	_tick100ms^(0+384)	;volatile
 15160  004B  01A9               	clrf	(_tick100ms+1)^(0+384)	;volatile
 15161  004C  01AA               	clrf	(_tick100ms+2)^(0+384)	;volatile
 15162  004D  01AB               	clrf	(_tick100ms+3)^(0+384)	;volatile
 15163  004E                     i1l275:	
 15164  004E  30CF               	movlw	207
 15165  004F  0144               	movlb	4	; select bank4
 15166  0050  008D               	movwf	13	;volatile
 15167  0051  302B               	movlw	43
 15168  0052  008C               	movwf	12	;volatile
 15169  0053  014E               	movlb	14	; select bank14
 15170  0054  1010               	bcf	16,0	;volatile
 15171  0055  285D               	goto	i1l278
 15172  0056                     i1l274:	
 15173  0056  1A99               	btfsc	25,5	;volatile
 15174  0057  1E8F               	btfss	15,5	;volatile
 15175  0058  285D               	goto	i1l278
 15176  0059  319C  248A         	fcall	_uartReceiveISR
 15177  005B  014E               	movlb	14	; select bank14
 15178  005C  128F               	bcf	15,5	;volatile
 15179  005D                     i1l278:	
 15180  005D  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 15181  005E  0009               	retfie
 15182  005F                     __end_of_ISR:	
 15183                           
 15184                           	psect	text72
 15185  1C8A                     __ptext72:	
 15186 ;; *************** function _uartReceiveISR *****************
 15187 ;; Defined at:
 15188 ;;		line 35 in file "uart.c"
 15189 ;; Parameters:    Size  Location     Type
 15190 ;;		None
 15191 ;; Auto vars:     Size  Location     Type
 15192 ;;		None
 15193 ;; Return value:  Size  Location     Type
 15194 ;;                  1    wreg      void 
 15195 ;; Registers used:
 15196 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15197 ;; Tracked objects:
 15198 ;;		On entry : 3F/E
 15199 ;;		On exit  : 3F/2
 15200 ;;		Unchanged: 0/0
 15201 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15202 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15203 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15204 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15205 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15206 ;;Total ram usage:        0 bytes
 15207 ;; Hardware stack levels used:    1
 15208 ;; Hardware stack levels required when called:    1
 15209 ;; This function calls:
 15210 ;;		_strncpy
 15211 ;; This function is called by:
 15212 ;;		_ISR
 15213 ;; This function uses a non-reentrant model
 15214 ;;
 15215                           
 15216                           
 15217                           ;psect for function _uartReceiveISR
 15218  1C8A                     _uartReceiveISR:	
 15219                           
 15220                           ;uart.c: 37:  static char buffer[20];;uart.c: 38:  static uint8_t rxCount = 0;;uart.c: 3
      +                          9:  static uint8_t checksum = 0;;uart.c: 41:  if (RC1STAbits.OERR)
 15221                           
 15222                           ;incstack = 0
 15223                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15224  1C8A  0142               	movlb	2	; select bank2
 15225  1C8B  1C9D               	btfss	29,1	;volatile
 15226  1C8C  2C90               	goto	i1l5560
 15227                           
 15228                           ;uart.c: 42:  {;uart.c: 43:   RC1STAbits.CREN = 0;
 15229  1C8D  121D               	bcf	29,4	;volatile
 15230                           
 15231                           ;uart.c: 44:   RC1STAbits.CREN = 1;
 15232  1C8E  161D               	bsf	29,4	;volatile
 15233                           
 15234                           ;uart.c: 45:   rxOErrCount++;
 15235  1C8F  0AE9               	incf	_rxOErrCount^(0+256),f	;volatile
 15236  1C90                     i1l5560:	
 15237                           
 15238                           ;uart.c: 47:  if (RC1STAbits.FERR)
 15239  1C90  1D1D               	btfss	29,2	;volatile
 15240  1C91  2C95               	goto	i1l5566
 15241                           
 15242                           ;uart.c: 48:  {;uart.c: 49:   RC1STAbits.SPEN = 0;
 15243  1C92  139D               	bcf	29,7	;volatile
 15244                           
 15245                           ;uart.c: 50:   RC1STAbits.SPEN = 1;
 15246  1C93  179D               	bsf	29,7	;volatile
 15247                           
 15248                           ;uart.c: 51:   rxFErrCount++;
 15249  1C94  0AEA               	incf	_rxFErrCount^(0+256),f	;volatile
 15250  1C95                     i1l5566:	
 15251                           
 15252                           ;uart.c: 55:  if (rxCount < sizeof(dataPacket)) {
 15253  1C95  300F               	movlw	15
 15254  1C96  027B               	subwf	uartReceiveISR@rxCount,w
 15255  1C97  1803               	skipnc
 15256  1C98  2CA7               	goto	i1l5572
 15257                           
 15258                           ;uart.c: 56:   buffer[rxCount] = RC1REG;
 15259  1C99  087B               	movf	uartReceiveISR@rxCount,w
 15260  1C9A  3E41               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 15261  1C9B  0086               	movwf	6
 15262  1C9C  3002               	movlw	2	; select bank4/5
 15263  1C9D  0087               	movwf	7
 15264  1C9E  0819               	movf	25,w	;volatile
 15265  1C9F  0081               	movwf	1
 15266                           
 15267                           ;uart.c: 57:   checksum ^= buffer[rxCount];
 15268  1CA0  087B               	movf	uartReceiveISR@rxCount,w
 15269  1CA1  3E41               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 15270  1CA2  0086               	movwf	6
 15271  1CA3  0801               	movf	1,w
 15272  1CA4  06E7               	xorwf	uartReceiveISR@checksum^(0+256),f
 15273                           
 15274                           ;uart.c: 58:   rxCount++;
 15275  1CA5  0AFB               	incf	uartReceiveISR@rxCount,f
 15276                           
 15277                           ;uart.c: 59:  } else {
 15278  1CA6  0008               	return
 15279  1CA7                     i1l5572:	
 15280                           
 15281                           ;uart.c: 61:   if (RC1REG == checksum) {
 15282  1CA7  0819               	movf	25,w	;volatile
 15283  1CA8  0667               	xorwf	uartReceiveISR@checksum^(0+256),w
 15284  1CA9  1D03               	skipz
 15285  1CAA  2CB4               	goto	i1l5578
 15286                           
 15287                           ;uart.c: 63:    dataReadyFlag = 1;
 15288  1CAB  3001               	movlw	1
 15289  1CAC  00E8               	movwf	_dataReadyFlag^(0+256)	;volatile
 15290                           
 15291                           ;uart.c: 64:    strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 15292  1CAD  3041               	movlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 15293  1CAE  00F0               	movwf	strncpy@s
 15294  1CAF  300F               	movlw	15
 15295  1CB0  00F1               	movwf	strncpy@n
 15296  1CB1  30BC               	movlw	(low (_dataPacket| (0+256)))& (0+255)
 15297  1CB2  01F2               	clrf	strncpy@n+1
 15298  1CB3  24B7               	fcall	_strncpy
 15299  1CB4                     i1l5578:	
 15300                           
 15301                           ;uart.c: 66:   checksum = 0;
 15302  1CB4  01E7               	clrf	uartReceiveISR@checksum^(0+256)
 15303                           
 15304                           ;uart.c: 67:   rxCount = 0;
 15305  1CB5  01FB               	clrf	uartReceiveISR@rxCount
 15306  1CB6  0008               	return
 15307  1CB7                     __end_of_uartReceiveISR:	
 15308  1CB7                     __ptext73:	
 15309 ;; *************** function _strncpy *****************
 15310 ;; Defined at:
 15311 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.00\pic\sources\c99\common\strncpy.c"
 15312 ;; Parameters:    Size  Location     Type
 15313 ;;  d               1    wreg     PTR unsigned char 
 15314 ;;		 -> dataPacket(15), 
 15315 ;;  s               1    0[COMMON] PTR const unsigned char 
 15316 ;;		 -> uartReceiveISR@buffer(20), 
 15317 ;;  n               2    1[COMMON] unsigned int 
 15318 ;; Auto vars:     Size  Location     Type
 15319 ;;  d               1    3[COMMON] PTR unsigned char 
 15320 ;;		 -> dataPacket(15), 
 15321 ;;  cp              1    4[COMMON] PTR unsigned char 
 15322 ;;		 -> dataPacket(15), 
 15323 ;; Return value:  Size  Location     Type
 15324 ;;                  1    wreg      PTR unsigned char 
 15325 ;; Registers used:
 15326 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 15327 ;; Tracked objects:
 15328 ;;		On entry : 3F/2
 15329 ;;		On exit  : 3F/2
 15330 ;;		Unchanged: 3F/0
 15331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15332 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15333 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15335 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15336 ;;Total ram usage:        5 bytes
 15337 ;; Hardware stack levels used:    1
 15338 ;; This function calls:
 15339 ;;		Nothing
 15340 ;; This function is called by:
 15341 ;;		_uartReceiveISR
 15342 ;; This function uses a non-reentrant model
 15343 ;;
 15344                           
 15345                           
 15346                           ;psect for function _strncpy
 15347  1CB7                     _strncpy:	
 15348                           
 15349                           ;incstack = 0
 15350                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 15351                           ;strncpy@d stored from wreg
 15352  1CB7  00F3               	movwf	strncpy@d
 15353  1CB8  00F4               	movwf	strncpy@cp
 15354  1CB9                     i1l5188:	
 15355  1CB9  0871               	movf	strncpy@n,w
 15356  1CBA  0472               	iorwf	strncpy@n+1,w
 15357  1CBB  3001               	movlw	1
 15358  1CBC  1903               	btfsc	3,2
 15359  1CBD  2CD8               	goto	L23
 15360  1CBE  02F1               	subwf	strncpy@n,f
 15361  1CBF  3000               	movlw	0
 15362  1CC0  3BF2               	subwfb	strncpy@n+1,f
 15363  1CC1  0874               	movf	strncpy@cp,w
 15364  1CC2  0086               	movwf	6
 15365  1CC3  3001               	movlw	1	; select bank2/3
 15366  1CC4  0087               	movwf	7
 15367  1CC5  0AF4               	incf	strncpy@cp,f
 15368  1CC6  0870               	movf	strncpy@s,w
 15369  1CC7  0084               	movwf	4
 15370  1CC8  3002               	movlw	2	; select bank4/5
 15371  1CC9  0085               	movwf	5
 15372  1CCA  0AF0               	incf	strncpy@s,f
 15373  1CCB  0800               	movf	0,w
 15374  1CCC  3FC0               	movwi [0]fsr1
 15375  1CCD  0889               	movf	9,f
 15376  1CCE  1903               	btfsc	3,2
 15377  1CCF  2CD7               	goto	i1l5194
 15378  1CD0  2CB9               	goto	i1l5188
 15379  1CD1                     i1l5190:	
 15380  1CD1  0874               	movf	strncpy@cp,w
 15381  1CD2  0086               	movwf	6
 15382  1CD3  3001               	movlw	1	; select bank2/3
 15383  1CD4  0087               	movwf	7
 15384  1CD5  0181               	clrf	1
 15385  1CD6  0AF4               	incf	strncpy@cp,f
 15386  1CD7                     i1l5194:	
 15387  1CD7  3001               	movlw	1
 15388  1CD8                     L23:	
 15389  1CD8  02F1               	subwf	strncpy@n,f
 15390  1CD9  3000               	movlw	0
 15391  1CDA  3BF2               	subwfb	strncpy@n+1,f
 15392  1CDB  0F71               	incfsz	strncpy@n,w
 15393  1CDC  2CD1               	goto	i1l5190
 15394  1CDD  0A72               	incf	strncpy@n+1,w
 15395  1CDE  1903               	btfsc	3,2
 15396  1CDF  0008               	return
 15397  1CE0  2CD1               	goto	i1l5190
 15398  1CE1                     __end_of_strncpy:	
 15399                           
 15400                           	psect	text74
 15401  1C5A                     __ptext74:	
 15402 ;; *************** function _rotISR *****************
 15403 ;; Defined at:
 15404 ;;		line 24 in file "inputs.c"
 15405 ;; Parameters:    Size  Location     Type
 15406 ;;		None
 15407 ;; Auto vars:     Size  Location     Type
 15408 ;;  input           1    6[COMMON] unsigned char 
 15409 ;; Return value:  Size  Location     Type
 15410 ;;                  1    wreg      void 
 15411 ;; Registers used:
 15412 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 15413 ;; Tracked objects:
 15414 ;;		On entry : 3F/3E
 15415 ;;		On exit  : 3D/0
 15416 ;;		Unchanged: 0/0
 15417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15418 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15419 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15420 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15421 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15422 ;;Total ram usage:        7 bytes
 15423 ;; Hardware stack levels used:    1
 15424 ;; This function calls:
 15425 ;;		Nothing
 15426 ;; This function is called by:
 15427 ;;		_ISR
 15428 ;; This function uses a non-reentrant model
 15429 ;;
 15430                           
 15431                           
 15432                           ;psect for function _rotISR
 15433  1C5A                     _rotISR:	
 15434                           
 15435                           ;incstack = 0
 15436                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 15437  1C5A  0140               	movlb	0	; select bank0
 15438  1C5B  0E0C               	swapf	12,w	;volatile
 15439  1C5C  3901               	andlw	1
 15440  1C5D  00F0               	movwf	??_rotISR
 15441  1C5E  0E0C               	swapf	12,w	;volatile
 15442  1C5F  0C89               	rrf	9,f
 15443  1C60  3901               	andlw	1
 15444  1C61  0709               	addwf	9,w
 15445  1C62  0470               	iorwf	??_rotISR,w
 15446  1C63  00F6               	movwf	rotISR@input
 15447  1C64  087C               	movf	_g_curRotState,w	;volatile
 15448  1C65  3907               	andlw	7
 15449  1C66  00F0               	movwf	??_rotISR
 15450  1C67  3000               	movlw	low (_transition_table| (0+32768))
 15451  1C68  01F1               	clrf	??_rotISR+1
 15452  1C69  35F0               	lslf	??_rotISR,f
 15453  1C6A  0DF1               	rlf	??_rotISR+1,f
 15454  1C6B  35F0               	lslf	??_rotISR,f
 15455  1C6C  0DF1               	rlf	??_rotISR+1,f
 15456  1C6D  00F2               	movwf	??_rotISR+2
 15457  1C6E  30A0               	movlw	high (_transition_table| (0+32768))
 15458  1C6F  00F3               	movwf	??_rotISR+3
 15459  1C70  0870               	movf	??_rotISR,w
 15460  1C71  0772               	addwf	??_rotISR+2,w
 15461  1C72  00F4               	movwf	??_rotISR+4
 15462  1C73  0871               	movf	??_rotISR+1,w
 15463  1C74  3D73               	addwfc	??_rotISR+3,w
 15464  1C75  00F5               	movwf	??_rotISR+5
 15465  1C76  0876               	movf	rotISR@input,w
 15466  1C77  0774               	addwf	??_rotISR+4,w
 15467  1C78  0084               	movwf	4
 15468  1C79  0875               	movf	??_rotISR+5,w
 15469  1C7A  1803               	skipnc
 15470  1C7B  0A75               	incf	??_rotISR+5,w
 15471  1C7C  0085               	movwf	5
 15472  1C7D  0800               	movf	0,w	;code access
 15473  1C7E  00FC               	movwf	_g_curRotState	;volatile
 15474  1C7F  1FFC               	btfss	_g_curRotState,7	;volatile
 15475  1C80  2C84               	goto	i1l5550
 15476  1C81  3001               	movlw	1
 15477  1C82  0142               	movlb	2	; select bank2
 15478  1C83  00EC               	movwf	_g_rotDir^(0+256)	;volatile
 15479  1C84                     i1l5550:	
 15480  1C84  1F7C               	btfss	_g_curRotState,6	;volatile
 15481  1C85  0008               	return
 15482  1C86  3002               	movlw	2
 15483  1C87  0142               	movlb	2	; select bank2
 15484  1C88  00EC               	movwf	_g_rotDir^(0+256)	;volatile
 15485  1C89  0008               	return
 15486  1C8A                     __end_of_rotISR:	
 15487                           
 15488                           	psect	text75
 15489  07D5                     __ptext75:	
 15490 ;; *************** function _pushButtonISR *****************
 15491 ;; Defined at:
 15492 ;;		line 38 in file "inputs.c"
 15493 ;; Parameters:    Size  Location     Type
 15494 ;;		None
 15495 ;; Auto vars:     Size  Location     Type
 15496 ;;  time            1    0[COMMON] unsigned char 
 15497 ;; Return value:  Size  Location     Type
 15498 ;;                  1    wreg      void 
 15499 ;; Registers used:
 15500 ;;		wreg, status,2, status,0, pclath, cstack
 15501 ;; Tracked objects:
 15502 ;;		On entry : 3F/3E
 15503 ;;		On exit  : 3D/0
 15504 ;;		Unchanged: 0/0
 15505 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15506 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15507 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15508 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15509 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15510 ;;Total ram usage:        1 bytes
 15511 ;; Hardware stack levels used:    1
 15512 ;; Hardware stack levels required when called:    1
 15513 ;; This function calls:
 15514 ;;		_get10msTick
 15515 ;;		_reset10msTick
 15516 ;; This function is called by:
 15517 ;;		_ISR
 15518 ;; This function uses a non-reentrant model
 15519 ;;
 15520                           
 15521                           
 15522                           ;psect for function _pushButtonISR
 15523  07D5                     _pushButtonISR:	
 15524                           
 15525                           ;incstack = 0
 15526                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0+pclath+cstack]
 15527  07D5  0140               	movlb	0	; select bank0
 15528  07D6  1B8C               	btfsc	12,7	;volatile
 15529  07D7  2FD9               	goto	i1l5526
 15530  07D8  2FFA               	ljmp	i1l5170
 15531  07D9                     i1l5526:	
 15532  07D9  27F8  3187         	fcall	_get10msTick
 15533  07DB  00F0               	movwf	pushButtonISR@time
 15534  07DC  3006               	movlw	6
 15535  07DD  0270               	subwf	pushButtonISR@time,w
 15536  07DE  3033               	movlw	51
 15537  07DF  1C03               	skipc
 15538  07E0  2FE9               	goto	L24
 15539  07E1  0270               	subwf	pushButtonISR@time,w
 15540  07E2  1803               	skipnc
 15541  07E3  2FE8               	goto	i1l5534
 15542  07E4  3001               	movlw	1
 15543  07E5  0142               	movlb	2	; select bank2
 15544  07E6  00EB               	movwf	_g_pbState^(0+256)	;volatile
 15545  07E7  0008               	return
 15546  07E8                     i1l5534:	
 15547  07E8  3033               	movlw	51
 15548  07E9                     L24:	
 15549  07E9  0270               	subwf	pushButtonISR@time,w
 15550  07EA  1C03               	skipc
 15551  07EB  2FF4               	goto	i1l5540
 15552  07EC  3097               	movlw	151
 15553  07ED  0270               	subwf	pushButtonISR@time,w
 15554  07EE  1803               	skipnc
 15555  07EF  2FF4               	goto	i1l5540
 15556  07F0  3002               	movlw	2
 15557  07F1  0142               	movlb	2	; select bank2
 15558  07F2  00EB               	movwf	_g_pbState^(0+256)	;volatile
 15559  07F3  0008               	return
 15560  07F4                     i1l5540:	
 15561  07F4  3003               	movlw	3
 15562  07F5  0142               	movlb	2	; select bank2
 15563  07F6  00EB               	movwf	_g_pbState^(0+256)	;volatile
 15564  07F7  0008               	return
 15565  07F8                     __end_of_pushButtonISR:	
 15566  07F8                     __ptext77:	
 15567 ;; *************** function _get10msTick *****************
 15568 ;; Defined at:
 15569 ;;		line 33 in file "interrupt.c"
 15570 ;; Parameters:    Size  Location     Type
 15571 ;;		None
 15572 ;; Auto vars:     Size  Location     Type
 15573 ;;		None
 15574 ;; Return value:  Size  Location     Type
 15575 ;;                  1    wreg      unsigned char 
 15576 ;; Registers used:
 15577 ;;		wreg
 15578 ;; Tracked objects:
 15579 ;;		On entry : 3F/0
 15580 ;;		On exit  : 3F/0
 15581 ;;		Unchanged: 3F/0
 15582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15587 ;;Total ram usage:        0 bytes
 15588 ;; Hardware stack levels used:    1
 15589 ;; This function calls:
 15590 ;;		Nothing
 15591 ;; This function is called by:
 15592 ;;		_pushButtonISR
 15593 ;; This function uses a non-reentrant model
 15594 ;;
 15595                           
 15596                           
 15597                           ;psect for function _get10msTick
 15598  07F8                     _get10msTick:	
 15599                           
 15600                           ;incstack = 0
 15601                           ; Regs used in _get10msTick: [wreg]
 15602  07F8  087D               	movf	_tick10ms,w	;volatile
 15603  07F9  0008               	return
 15604  07FA                     __end_of_get10msTick:	
 15605  007E                     btemp	set	126	;btemp
 15606  007E                     int$flags	set	126
 15607  007E                     wtemp0	set	126
 15608  07FA                     __ptext76:	
 15609 ;; *************** function _reset10msTick *****************
 15610 ;; Defined at:
 15611 ;;		line 41 in file "interrupt.c"
 15612 ;; Parameters:    Size  Location     Type
 15613 ;;		None
 15614 ;; Auto vars:     Size  Location     Type
 15615 ;;		None
 15616 ;; Return value:  Size  Location     Type
 15617 ;;                  1    wreg      void 
 15618 ;; Registers used:
 15619 ;;		status,2
 15620 ;; Tracked objects:
 15621 ;;		On entry : 3F/0
 15622 ;;		On exit  : 3F/0
 15623 ;;		Unchanged: 3F/0
 15624 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15625 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15626 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15627 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15628 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15629 ;;Total ram usage:        0 bytes
 15630 ;; Hardware stack levels used:    1
 15631 ;; This function calls:
 15632 ;;		Nothing
 15633 ;; This function is called by:
 15634 ;;		_pushButtonISR
 15635 ;; This function uses a non-reentrant model
 15636 ;;
 15637                           
 15638                           
 15639                           ;psect for function _reset10msTick
 15640  07FA                     _reset10msTick:	
 15641  07FA                     i1l5170:	
 15642                           ;incstack = 0
 15643                           ; Regs used in _reset10msTick: [status,2]
 15644                           
 15645  07FA  01FD               	clrf	_tick10ms	;volatile
 15646  07FB  0008               	return
 15647  07FC                     __end_of_reset10msTick:	


Data Sizes:
    Strings     272
    Constant    58
    Data        22
    BSS         271
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     11      14
    BANK0            80     80      80
    BANK1            80     80      80
    BANK2            80     60      79
    BANK3            80      0      77
    BANK4            80      0      53
    BANK5            80      0      80
    BANK6            80      0      61
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           80      0       0
    BANK24           80      0       0
    BANK25           32      0       0

Pointer List with Targets:

    menu$1791$0	PTR struct . size(1) Largest target is 33
		 -> data(BANK4[33]), 

    menu$1791	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    channelView@data	PTR struct . size(1) Largest target is 33
		 -> data(BANK4[33]), 

    channelSetup@data	PTR struct . size(1) Largest target is 33
		 -> data(BANK4[33]), 

    setOutputPower@data	PTR struct . size(1) Largest target is 33
		 -> data(BANK4[33]), 

    setLensDia@data	PTR struct . size(1) Largest target is 33
		 -> data(BANK4[33]), 

    p_fct$0	PTR struct . size(1) Largest target is 33
		 -> data(BANK4[33]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK4[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK3[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK3[15]), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_24(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_24(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 3
		 -> vfpfcnvrt@ct(BANK2[3]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 3
		 -> vfpfcnvrt@ct(BANK2[3]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> ?_sprintf(BANK2[2]), stoa@nuls(BANK0[7]), dbuf(BANK5[80]), s12(BANK3[13]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 80
		 -> ?_sprintf(BANK2[2]), stoa@nuls(BANK0[7]), dbuf(BANK5[80]), s12(BANK3[13]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_19(CODE[4]), STR_18(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> dbuf(BANK5[80]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_19(CODE[4]), STR_18(CODE[4]), STR_15(CODE[4]), STR_14(CODE[4]), 
		 -> dbuf(BANK5[80]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_13(CODE[14]), STR_11(CODE[14]), STR_9(CODE[19]), STR_6(CODE[15]), 
		 -> STR_4(CODE[42]), STR_3(CODE[13]), STR_2(CODE[17]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 61
		 -> s(BANK6[61]), s12(BANK3[13]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK2[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 61
		 -> s(BANK6[61]), s12(BANK3[13]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    S1524_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 61
		 -> s(BANK6[61]), s12(BANK3[13]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 61
		 -> s(BANK6[61]), s12(BANK3[13]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_13(CODE[14]), STR_11(CODE[14]), STR_9(CODE[19]), STR_6(CODE[15]), 
		 -> STR_4(CODE[42]), STR_3(CODE[13]), STR_2(CODE[17]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK2[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 42
		 -> STR_13(CODE[14]), STR_11(CODE[14]), STR_9(CODE[19]), STR_6(CODE[15]), 
		 -> STR_4(CODE[42]), STR_3(CODE[13]), STR_2(CODE[17]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 42
		 -> STR_13(CODE[14]), STR_11(CODE[14]), STR_9(CODE[19]), STR_6(CODE[15]), 
		 -> STR_4(CODE[42]), STR_3(CODE[13]), STR_2(CODE[17]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 13
		 -> ?_sprintf(BANK2[2]), s12(BANK3[13]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK2[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK1[2]), 

    stoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    stoa@s	PTR unsigned char  size(1) Largest target is 13
		 -> ?_sprintf(BANK2[2]), s12(BANK3[13]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 13
		 -> ?_sprintf(BANK2[2]), stoa@nuls(BANK0[7]), s12(BANK3[13]), 

    efgtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK5[80]), 

    statusView@data	PTR struct . size(1) Largest target is 33
		 -> data(BANK4[33]), 

    menu@data	PTR struct . size(1) Largest target is 33
		 -> data(BANK4[33]), 

    p_fct	PTR FTN(PTR struct .,)unsigned char [5] size(2) Largest target is 1
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK3[15]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 61
		 -> STR_12(CODE[12]), STR_10(CODE[13]), STR_8(CODE[25]), STR_7(CODE[49]), 
		 -> STR_5(CODE[13]), s(BANK6[61]), STR_1(CODE[49]), 

    convertAnalogValues@data	PTR struct . size(1) Largest target is 33
		 -> data(BANK4[33]), 

    sp__getDataPacket	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK3[15]), 

    checkSensor@dp	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK3[15]), 

    checkSensor@data	PTR struct . size(1) Largest target is 33
		 -> data(BANK4[33]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->_strncpy

Critical Paths under _main in BANK0

    _OLED_returnHome->_OLED_command
    _getNextState->___wmul
    _vfpfcnvrt->_efgtoa
    _stoa->_fputc
    _efgtoa->_floorf
    _tolower->_isupper
    _floorf->___fldiv
    ___flsub->___fladd
    _dtoa->_pad
    _pad->_fputs
    _fputs->_fputc
    _abs->___almod
    _atoi->___wmul
    _returnToPage->_OLED_command
    _returnToPage->___wmul
    _OLED_scrollDisplayRight->_OLED_command
    _OLED_scrollDisplayLeft->_OLED_command
    _OLED_print_xy->_OLED_command
    _OLED_print_xy->_OLED_write
    _OLED_write->_OLED_send
    _convertAnalogValues->___fldiv
    _ema->___lmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    ___fladd->___flmul
    _checkSensor->___flge
    _timeSince->_timeNow
    ___flge->___flmul
    _OLED_init->_OLED_command
    _OLED_clearDisplay->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_menu
    _menu->_channelSetup
    _menu->_channelView
    _menu->_setLensDia
    _menu->_setOutputPower
    _menu->_statusView
    _statusView->_sprintf
    _setOutputPower->_sprintf
    _setLensDia->_sprintf
    _channelSetup->_sprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0  206435
                                             59 BANK2      1     1      0
                  _OLED_clearDisplay
                          _OLED_init
                    _OLED_returnHome
                        _checkSensor
                _convertAnalogValues
                         _initialize
                               _menu
 ---------------------------------------------------------------------------------
 (1) _menu                                                 8     8      0  192361
                                             51 BANK2      8     8      0
                       _channelSetup *
                        _channelView *
                       _getNextState
                              _getPB
                         _setLensDia *
                     _setOutputPower *
                         _statusView *
 ---------------------------------------------------------------------------------
 (2) _statusView                                           1     0      1   47377
                                             50 BANK2      1     0      1
                      _OLED_print_xy
                    _OLED_returnHome
                             _paging
                       _returnToPage
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _OLED_returnHome                                      0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       1     0      1   45502
                                             50 BANK2      1     0      1
                      _OLED_print_xy
                       _returnToPage
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                           1     0      1   45567
                                             50 BANK2      1     0      1
                      _OLED_print_xy
                       _returnToPage
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _getPB                                                1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         5     3      2    1652
                                              6 BANK0      5     3      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                          1     0      1    5325
                                             50 BANK2      1     0      1
                      _OLED_print_xy
                             _paging
                       _returnToPage
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         1     0      1   46684
                                             50 BANK2      1     0      1
                      _OLED_print_xy
                             _paging
                       _returnToPage
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             30     9     21   41359
                                             20 BANK2     30     9     21
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             7     4      3   40107
                                             73 BANK1      7     4      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           36    34      2   39589
                                             67 BANK1      6     4      2
                                              0 BANK2     20    20      0
                               _atoi
                               _dtoa
                             _efgtoa
                              _fputc
                            _isdigit
                            _isupper
                               _stoa
                            _strncmp
                            _tolower
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              9     5      4     410
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (6) _stoa                                                21    19      2    2245
                                              8 BANK0     21    19      2
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _efgtoa                                              65    60      5   23787
                                             72 BANK0      8     3      5
                                             10 BANK1     57    57      0
                            ___awdiv
                            ___awmod
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                            _isupper
                                _pad
                             _strcpy
                            _tolower
 ---------------------------------------------------------------------------------
 (6) _tolower                                              6     4      2     944
                                              4 BANK0      6     4      2
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              4     2      2     465
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (7) _strcpy                                               8     6      2     641
                                              0 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (7) _floorf                                              18    14      4     492
                                             64 BANK0      8     4      4
                                              0 BANK1     10    10      0
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___fpclassifyf                                       14    10      4     288
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (7) ___fltol                                             10     6      4     381
                                              0 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (7) ___flsub                                              8     0      8    2769
                                             59 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___flneg                                              4     0      4     121
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (7) ___fleq                                              12     4      8     394
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              6     2      4     448
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     452
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _dtoa                                                20    16      4    5651
                                             23 BANK0     20    16      4
                            ___aldiv
                            ___almod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (7) _pad                                                  9     6      3    4045
                                             14 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               4     2      2     164
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (8) _fputs                                                6     5      1    1605
                                              8 BANK0      6     5      1
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3    1290
                                              0 BANK0      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     142
                                             10 BANK0      4     2      2
                            ___almod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___almod                                             10     2      8     448
                                              0 BANK0     10     2      8
 ---------------------------------------------------------------------------------
 (7) ___aldiv                                             14     6      8     452
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (6) _atoi                                                14    12      2    2249
                                              6 BANK0     14    12      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (7) _isspace                                              5     3      2     207
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              4     2      2     313
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         2     2      0    1654
                                              6 BANK0      2     2      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    1256
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1182
                                              6 BANK0      6     5      1
             _OLED_scrollDisplayLeft
            _OLED_scrollDisplayRight
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayRight                              0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayLeft                               0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (3) _OLED_print_xy                                        9     6      3    2489
                                              6 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (4) _OLED_write                                           1     1      0     352
                                              5 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _convertAnalogValues                                 11    11      0   10472
                                             64 BANK0      7     7      0
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                   _adcGetConversion
                                _ema
 ---------------------------------------------------------------------------------
 (2) _ema                                                 16     8      8    1214
                                             12 BANK0     16     8      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     418
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _adcGetConversion                                     4     2      2      22
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (7) ___flmul                                             25    17      8    3767
                                             14 BANK0     25    17      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (8) __Umul8_16                                            8     5      3     799
                                              0 BANK0      8     5      3
 ---------------------------------------------------------------------------------
 (7) ___fldiv                                             25    17      8    2166
                                             39 BANK0     25    17      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (8) ___fladd                                             20    12      8    2420
                                             39 BANK0     20    12      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          6     6      0    2458
                                             51 BANK0      6     6      0
                             ___flge
                           ___xxtofl
                      _getDataPacket
                            _timeNow
                          _timeSince
                    _uartIsDataReady
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartIsDataReady                                      1     1      0      23
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _timeSince                                           16    12      4     285
                                              4 BANK0     16    12      4
                            _timeNow
 ---------------------------------------------------------------------------------
 (3) _timeNow                                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _getDataPacket                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     626
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (7) ___flge                                              12     4      8    1094
                                             39 BANK0     12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     440
                                              6 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (1) _OLED_clearDisplay                                    0     0      0     352
                       _OLED_command
 ---------------------------------------------------------------------------------
 (4) _OLED_command                                         1     1      0     352
                                              5 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (5) _OLED_waitForReady                                    1     1      0      24
                                              0 BANK0      1     1      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (5) _OLED_send                                            2     1      1     306
                                              3 BANK0      2     1      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (6) _OLED_write4bits                                      3     3      0      88
                                              0 BANK0      3     3      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (6) _OLED_pulseEnable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 4     4      0     438
                                              7 COMMON     4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (12) _uartReceiveISR                                      0     0      0     326
                            _strncpy
 ---------------------------------------------------------------------------------
 (13) _strncpy                                             5     2      3     326
                                              0 COMMON     5     2      3
 ---------------------------------------------------------------------------------
 (12) _rotISR                                              7     7      0      23
                                              0 COMMON     7     7      0
 ---------------------------------------------------------------------------------
 (12) _pushButtonISR                                       1     1      0      89
                                              0 COMMON     1     1      0
                        _get10msTick
                      _reset10msTick
 ---------------------------------------------------------------------------------
 (13) _reset10msTick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _get10msTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_clearDisplay
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write4bits
       _OLED_pulseEnable
   _OLED_returnHome
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _checkSensor
     ___flge
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
     ___xxtofl
     _getDataPacket
     _timeNow
     _timeSince
       _timeNow
     _uartIsDataReady
     _uartSendByte
   _convertAnalogValues
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___xxtofl
     _adcGetConversion
     _ema
       ___lmul
   _initialize
   _menu
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aldiv
               ___almod
               _abs
                 ___almod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
     _getNextState *
       ___wmul
     _getPB *
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aldiv
               ___almod
               _abs
                 ___almod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aldiv
               ___almod
               _abs
                 ___almod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _OLED_returnHome
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aldiv
               ___almod
               _abs
                 ___almod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper

 _ISR (ROOT)
   _pushButtonISR
     _get10msTick
     _reset10msTick
   _rotISR
   _uartReceiveISR
     _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      B       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     20C       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     3C      4F      10       98.8%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      4D      12       96.3%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      0      35      14       66.3%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      50      16      100.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      3D      18       76.3%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              50      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BANK24              50      0       0      54        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BANK25              20      0       0      56        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     20C      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.00 build -1524193055 
Symbol Table                                                                                   Sat Jan 25 14:02:59 2020

                   _pushButtonISR 07D5                     returnToPage@n 0027          __end_of_transition_table 201C  
                    ___fldiv@aexp 005F                      ___fldiv@bexp 005E                                 _s 0320  
                    ___fldiv@sign 0057                       __CFG_CP$OFF 0000                                PL2 16F6  
                              PL4 1702                                PL6 0D67                                PL8 0D7D  
                    ___awdiv@sign 0025               ___wmul@multiplicand 0022               __Umul8_16@word_mpld 0025  
                             PL10 1125                               PL20 0DF6                               PL12 0D8E  
                             PL30 0E16                               PL22 1709                               PL14 0DA2  
                             PL40 1744                               PL32 0E26                               PL24 171B  
                             PL16 0DB5                               PL50 0723                               PL42 070C  
                             PL34 0E36                               PL26 1724                               PL18 0DD6  
                             PL60 0754                               PL52 0733                               PL44 1759  
                             PL36 0E4F                               PL28 172B                               PL70 1775  
                             PL62 075B                               PL54 073D                               PL46 0718  
                             PL38 173C                       __CFG_LVP$ON 0000                               PL80 0E7D  
                             PL72 077A                               PL64 176C                               PL56 0E6E  
                             PL48 0E5D                               PL90 179F                               PL82 1795  
                             PL74 1781                               PL66 0764                               PL58 0747  
                             PL92 17A5                               PL84 0E83                               PL76 0FB8  
                             PL68 076D                               PL94 0E8A                               PL86 0786  
                             PL78 178D                               PL96 078F                               PL88 0F50  
                             PL98 0797                               l103 00AA                               l151 02DD  
                             l136 05BD                               l341 0708                               l511 114C  
                             l176 06E9                               l514 1167                               l524 1E67  
                             l604 0AAE                               l519 1E4A                               l457 1354  
                             l642 160E                               l651 164E                               l716 0619  
                             l575 096F                               l770 1F26                               l586 09A9  
                             l783 1F8F                               l884 0CEA                               l886 0D12  
                             l999 1CF4                               _ISR 0004                               _s12 01CB  
                             _abs 1FDC                               _ema 05CA                               _pad 1139  
                    ___awmod@sign 0025                      __CFG_BORV$LO 0000                               wreg 0009  
                returnToPage@page 0026                      ___flmul@aexp 003B                      ___flmul@bexp 0040  
                    ___flmul@sign 003A                      ___flmul@temp 0045                      ___flmul@prod 0041  
                   __CFG_BBEN$OFF 0000                              PL100 17AB                              PL110 0E9B  
                            PL102 17B4                              PL120 07A7                              PL112 0EA3  
                            PL104 0E93                              PL130 17D1                              PL122 0EAE  
                            PL114 07A0                              PL106 17BC                              PL140 1FF4  
                            PL132 17D8                              PL124 07AD                              PL116 0EA9  
                            PL108 1E17                              PL150 1FFA                              PL142 07BA  
                            PL134 07B3                              PL126 1E1F                              PL118 17C4  
                            PL160 07C6                              PL152 17E5                              PL144 1E26  
                            PL136 0EB4                              PL128 17CA                              PL170 17F6  
                            PL162 07CB                              PL154 17EB                              PL146 0EC0  
                            PL138 0EBA                              PL172 0ECB                              PL164 17F1  
                            PL156 07C0                              PL148 17DF                              PL174 1134  
                            PL166 07D0                              PL158 0EC6                              PL176 17FB  
                            PL168 0F04                              ?_ISR 0070                      __CFG_ZCD$OFF 0000  
                    ___fltol@exp1 0029                              l1000 1CF2                              l1010 1D6F  
                            l1012 1D61                              l1004 1D0F                              l1021 1D85  
                            l1013 1D67                              l1005 1D0D                              l1022 1D86  
                            l1014 1D68                              l1032 1DE3                              l1121 055F  
                            l1114 0520                              l1027 1DCE                              ?_abs 002A  
                            l1060 0BF5                              l1061 0BF3                              l1134 058D  
                            l1047 1E11                              l1056 0BDF                              l1057 0BDD  
                            l1083 0CB1                              l1092 0422                              l1172 15A4  
                            l1085 0CC6                              l1093 0420                              l1096 0434  
                            l1248 16F5                              l1097 0432                              l4002 1038  
                            l4010 0EE1                              l1195 1114                              l4014 0EF0  
                            ?_ema 002C                              l4032 0CFE                              l4026 0CDB  
                            l4018 0F02              __end_of_channelSetup 1201                              l4052 0F12  
                            l4222 0CC7                              l4206 0CA4                              l4142 0C1A  
                            l4134 0C12                              l3502 1689                              l4054 0F17  
                            l4216 0CBF                              l4160 0C4B                              l3520 1180  
                            l4080 0F41                              l4072 0F34                              l5130 0292  
                            l4170 0C66                              l4314 04DE                              l5114 0623  
                            l5034 12B9                              l4402 1E76                              l5202 0676  
                            l3508 06DD                              l3612 1D39                              l4332 0502  
                            l4308 04CB                              l4260 0440                              l4244 0424  
                            l4420 1E82                              l4404 1E7B                              l4068 0F2D  
                            l4166 0C64                              l4318 04E0                              l3526 16AE  
                            l4078 0F38                              l4502 08CC                              l4510 08DE  
                            l5222 06BA                              l5320 056A                              l3704 1E0D  
                            l3632 1D75                              l4192 0C90                              l4184 0C6C  
                            l4168 0C36                              l4328 04F2                              l4256 0436  
                            l5048 12F8                              l3528 16B9                              l4440 1F06  
                            l4432 1EF5                              l4408 1EA3                              l4600 0A65  
                            l5216 06A9                              l5208 069A                              l4370 06E6  
                            l3626 1D6A                              l4186 0C7D                              l3722 0537  
                            l4338 0512                              l6034 1584                              l4418 1EE1  
                            l4610 0AAC                              l4602 0A69                              l4522 0911  
                            l4530 094A                              l5332 057D                              l5324 056C  
                            l5316 0557                              l6036 0262                              l5500 0258  
                            l3708 1E12                              l3660 1DD8                              l3644 1D89  
                            l4196 0C92                              l3740 1142                              l4436 1F00  
                            l4428 1EED                              l4700 0B86                              l4612 0AB5  
                            l4540 0960                              l4524 0928                              l5350 05A2  
                            l5326 0574                              l3654 1DC6                              l3582 1D1B  
                            l3718 0531                              l5078 132B                              l5086 133B  
                            l4358 0828                              l3910 1FAB                              l3902 1F9C  
                            l3750 114E                              l3822 10CE                              l4550 097A  
                            l4542 096A                              l4518 08F8                              l4462 087E  
                            l4454 086C                              ?_pad 002E                              l5336 058B  
                            l3680 1DF2                              l3672 1DE7                              l3840 06C2  
                            l3744 114A                              l3824 10EE                              l4624 0AD4  
                            l4544 0972                              l4528 0933                              l5264 11A6  
                            l5338 0582                              l3674 1DE9                              l5098 1345  
                            l4810 15A7                              l4802 1577                              l3922 1FD3  
                            l3914 1FC3                              l3498 166B                              l3754 116E  
                            l4722 0BB3                              l4706 0B9B                              l4730 0BC7  
                            l4466 0885                              l4474 0892                              l3684 1DF4  
                            l3668 1DE4                              l3844 06C8                              l4820 15C9  
                            l4804 157B                              l4396 1E5F                              l3940 0FD3  
                            l3828 10FF                              l4644 0AE4                              l4652 0AFB  
                            l4660 0B12                              l4580 09CA                              l4484 08A6  
                            l4492 08B8                              l5462 019D                              l4806 158C  
                            l3918 1FC9                              l3950 0FE0                              l3934 0FCA  
                            l3774 0F96                              l3790 0D2C                              l4646 0AF3  
                            l4590 09DC                              l4566 09B6                              l4558 09A6  
                            l5710 1627                              l5480 0245                              l5464 01A1  
                            l3696 1E01                              l3864 1F35                              l3784 0FB4  
                            l4672 0B31                              l4664 0B21                              l4592 0A02  
                            l4576 09C2                              l4568 09B9                              l5720 162E  
                            l5712 162B                              l4840 16E8                              l5800 1456  
                            l5474 01E3                              l5466 01A5                              l3890 1F79  
                            l3882 1F65                              l3874 1F48                              l3962 0FF3  
                            l3778 0F9A                              l5730 165E                              l5706 161F  
                            l4842 16D0                              l5468 01C4                              l4596 0A3E  
                            l5724 1652                              l5820 14A4                              l5486 0203  
                            l5494 0254                              l5478 0242                              l3886 1F6B  
                            l3966 0FFB                              l3958 0FEF                              l3990 1020  
                            l3982 1015                              l4686 0B4B                              l5910 1279  
                            l5728 165A                              l4848 16EC                              l5808 1482  
                            l5920 129B                              l3994 102C                              l3978 100E  
                            l4698 0B4E                              l5754 13C5                              l4796 156D  
                            l4788 1559                              l5692 15E9                              l5780 140F  
                            l5756 13D1                              l5764 13E0                              l3998 1030  
                            l5854 1520                              l5838 14EE                              l5758 13D6  
                            l5848 1510                              l5776 13FE                              l5864 152B  
                            l5880 138F                              l5858 1525                              l5778 140A  
                            l5786 1419                              l5796 1449                              l5878 1378  
                            STR_1 204D                              STR_2 20F2                              STR_3 2111  
                            STR_4 207E                              STR_5 2071                              STR_6 2099  
                            STR_7 201C                              STR_8 20C6                              STR_9 20DF  
                            u4100 154A                              u4015 1FE5                              u4210 1C2D  
                            u4220 1C2E                              u4060 0FB0                              u4140 1091  
                            u4125 107D                              u4070 0FB1                              _PIE0 0716  
                            u4055 0FA2                              u4145 108D                              _PIE3 0719  
                            u4090 1549                              _PIE4 071A                              u3515 1687  
                            u5140 1E39                              u3540 1C41                              u4165 10BE  
                            u5150 1E3A                              u3550 1C42                              u5215 1EEB  
                            u4505 1026                              u4185 10F2                              u5235 1E92  
                            u4435 0FE8                              u3660 1D58                              u5340 0DB2  
                            u5085 04F8                              u4365 1FB9                              u5245 1E9E  
                            u3670 1D59                              u5350 0DB3                              u3655 1D4D  
                            u5095 0509                              u4295 1F5A                              u7015 1638  
                            u5185 1E58                              u5505 09A2                              u7210 14D4  
                            u3763 1D9B                              u4555 0EFE                              u4635 0F1A  
                            u7220 14D5                              u4805 0C59                              u7070 1769  
                            u7080 176A                              u4905 0CAA                              u5705 0B1F  
                            u5465 0968                              u7305 066C                              u4915 0CB8  
                            u6275 1308                              u6365 0283                              u7317 00B8  
                            u7407 010F                              u7327 1331                              u6295 1326  
                            u5495 0989                              u7417 011A                              u7337 134B  
                            u5930 15B3                              u7427 0125                              u7347 00C7  
                            u3995 1158                              u5940 15B4                              u7437 0130  
                            u7357 00D8                              u5765 0B8E                              u7447 013B  
                            u7367 00E3                              u7457 06EB                              u7377 00EE  
                            u7467 06F1                              u7387 00F9                              u7477 016A  
                            u7397 0104                              u6950 15DA                              u7487 06E0  
                            u6985 1607                              _TMR0 059C                              _TMR1 020C  
       __size_of_OLED_pulseEnable 0009              __size_of_get10msTick 0002                     __CFG_FCMEN$ON 0000  
                   OLED_send@mode 0023                              abs@a 002A                              _data 0220  
                            _dbuf 02A0                              _atoi 1555                              _main 009E  
                            _dtoa 1E2B                              _menu 063C                  channelSetup@data 0152  
                            _prec 015E                              _nout 01B4                              pad@i 0032  
                            pad@p 002F                              fsr0h 0005                              fsr1h 0007  
                            indf0 0000                              fsr0l 0004                              indf1 0001  
                            fsr1l 0006                              pad@w 0034                              _stoa 15CE  
                channelSetup@page 0162                              btemp 007E                     __CFG_BOREN$ON 0000  
                   ___fpclassifyf 0F59                              start 005F                       ?_OLED_write 0070  
                 ___fldiv@new_exp 0058                    ?_pushButtonISR 0070                      _tolower$1602 0028  
                   __CFG_CSWEN$ON 0000                     __CFG_MCLRE$ON 0000                             ??_ISR 0077  
                           ??_abs 002C                             ??_ema 0034                             ??_pad 0031  
              __size_of_OLED_init 0080                __size_of_OLED_send 000D                     ___fltol@sign1 0028  
                 __end_of___aldiv 1F82                             ?_atoi 0026                   __end_of___almod 1FDC  
                 __end_of___fladd 1E17                             ?_main 0070                             ?_dtoa 0037  
                           ?_menu 0070                   __end_of___fldiv 0CCA                   __end_of___awdiv 1000  
                 __end_of___flneg 0D67                             STR_10 211E                             STR_11 2103  
                           STR_12 212B                             STR_13 2103                             STR_22 2147  
                           STR_14 2137                             STR_15 213F                             STR_24 2147  
                   __CFG_WDTE$OFF 0000                             STR_18 213B                             STR_19 2143  
                 __end_of___awmod 103D                   __end_of___flmul 052B   checkSensor@sensorUpdateInterval 01B0  
                 __end_of___flsub 0D5E                   __end_of___fltol 0F50                             ?_stoa 0028  
                           _T1CLK 0211                   ___awdiv@divisor 0020                             _T1CON 020E  
                           _IOCAN 1F3E                             _IOCAP 1F3D                             _IOCCN 1F54  
                           i1l274 0056                             i1l266 0011                             i1l275 004E  
                           i1l268 002D                             i1l278 005D                   ___awdiv@counter 0024  
                    vfpfcnvrt@fmt 00E3             __end_of_reset10msTick 07FC                             _TRISA 0012  
                           _TRISB 0013                             _TRISC 0014            uartReceiveISR@checksum 0167  
             ___lmul@multiplicand 0024              __size_of_checkSensor 00F6                     __CFG_WRTB$OFF 0000  
                   __CFG_WRTC$OFF 0000                    OLED_send@value 0024                             _getPB 06D5  
                  statusView@data 0152                             _flags 0160                    statusView@page 0164  
                           _p_fct 01D8                             ema@in 002C                  ?_uartIsDataReady 0070  
                           _fputc 1664                             _fputs 117D                   __end_of_isdigit 1C31  
                           atoi@n 0032                             pad@fp 0036                             atoi@s 0026  
                           _width 015C                             _putch 16F5                             dtoa@d 0037  
                           dtoa@i 0049                             dtoa@n 0045                             dtoa@p 003F  
                           dtoa@s 0043                             dtoa@w 0041                   __end_of_isspace 082C  
                 __end_of_isupper 1C45                             pclath 000A                   __end_of_timeNow 02C1  
            __size_of_channelView 001B                             stoa@i 0032                             stoa@l 003B  
                           stoa@p 0039                             stoa@s 0028                             stoa@w 0034  
                           status 0003                             wtemp0 007E                   __end_of_sprintf 12ED  
                  ?___fpclassifyf 0020                   __end_of_tolower 1555                   __end_of_strncmp 16F5  
                 __end_of_strncpy 1CE1                      __end_ofPL100 17B4                      __end_ofPL110 0EA3  
                    __end_ofPL102 17BC                      __end_ofPL120 07AD                      __end_ofPL112 0EA9  
                    __end_ofPL104 0E9B                      __end_ofPL130 17D8                      __end_ofPL122 0EB4  
                    __end_ofPL114 07A7                      __end_ofPL106 17C4                      __end_ofPL140 1FFA  
                    __end_ofPL132 17DF                      __end_ofPL124 07B3                      __end_ofPL116 0EAE  
                    __end_ofPL108 1E1F                      __end_ofPL150 2000                      __end_ofPL142 07C0  
                    __end_ofPL134 07BA                      __end_ofPL126 1E26                      __end_ofPL118 17CA  
                    __end_ofPL160 07CB                      __end_ofPL152 17EB                      __end_ofPL144 1E2B  
                    __end_ofPL136 0EBA                      __end_ofPL128 17D1                      __end_ofPL170 17FB  
                    __end_ofPL162 07D0                      __end_ofPL154 17F1                      __end_ofPL146 0EC6  
                    __end_ofPL138 0EC0                      __end_ofPL172 0ED0                      __end_ofPL164 17F6  
                    __end_ofPL156 07C6                      __end_ofPL148 17E5                      __end_ofPL174 1139  
                    __end_ofPL166 07D5                      __end_ofPL158 0ECB                      __end_ofPL176 1800  
                    __end_ofPL168 0F09                   __initialization 0061                      __end_of_atoi 15CE  
                    __end_of_main 00BE                      __end_of_dtoa 1F16                      __end_of_menu 0673  
                    __end_of_stoa 1664                    __CFG_SAFEN$OFF 0000                            ??_atoi 0028  
                          ??_main 015B                            ??_dtoa 003B                            ??_menu 0153  
                          ??_stoa 002A                 ?_adcGetConversion 0020                    OLED_print_xy@s 0027  
            __end_of_getNextState 06C0           __size_of_setOutputPower 0015                ??_adcGetConversion 0022  
    __size_of_convertAnalogValues 00F2               __size_of_OLED_write 0008                setOutputPower@data 0152  
                          ?_getPB 0070           _OLED_scrollDisplayRight 1364                            _ADCON1 009E  
                          ?_fputc 0020                            ?_fputs 0028                            _ADRESH 009C  
                          _ADRESL 009B                  ___awdiv@dividend 0022                            _ANSELA 1F38  
                          ?_putch 0070                            _ANSELB 1F43                            _ANSELC 1F4E  
              __CFG_RSTOSC$HFINT1 0000                            _T0CON0 059E                            _T0CON1 059F  
                          _RC1REG 0119                            _RC1STA 011D                            _RC6PPS 1F26  
                          i1l5170 07FA                            i1l5190 1CD1                    __CFG_WDTCCS$SC 0000  
                          i1l5194 1CD7                            i1l5540 07F4                            i1l5188 1CB9  
                          i1l5534 07E8                            i1l5526 07D9                            i1l5550 1C84  
                          i1l5622 0023                            i1l5560 1C90                            i1l5616 001C  
                          i1l5572 1CA7                            i1l5628 002A                            i1l5566 1C95  
                          i1l5578 1CB4             __end_of_getDataPacket 02CF                            _INTCON 000B  
               __end_of_OLED_init 0140                 __end_of_OLED_send 02CE                            _OSCFRQ 0893  
                          _SPBRGL 011B                            _TX1REG 011A                            _TX1STA 011E  
                __end_of___xxtofl 05AB                   ??_pushButtonISR 0070                    __CFG_PWRTE$OFF 0000  
                    vfprintf@cfmt 00EE                            ___flge 0CCA                            ___fleq 0ED0  
                          ___lmul 0615                         ??___aldiv 0028                         ??___almod 0028  
                       ??___fladd 004F                            ___wmul 06C0                         ??___fldiv 004F  
                       ??___awdiv 0024                         ??___flneg 0024                    __CFG_STVREN$ON 0000  
                       ??___awmod 0024                         ??___flmul 0036                         ??___flsub 0063  
                       ??___fltol 0024                            _efgtoa 082C          __size_of_OLED_returnHome 0002  
                          _floorf 103D                            _paging 1310                            ema@tmp 0038  
                ___awdiv@quotient 0026                   ___awmod@divisor 0020                            _rotISR 1C5A  
                   ?_OLED_command 0070                   ___awmod@counter 0024                            pad@buf 002E  
                          dtoa@fp 003E                            _strcpy 0D24                            _strlen 16AA  
                          menu@pb 0159                            fputc@c 0020                            fputs@c 002A  
                          fputs@i 002B                            fputs@s 002D                         ??_isdigit 0022  
              __size_of__Umul8_16 0017             __size_of_channelSetup 0026                   ___fpclassifyf@e 0028  
                 ___fpclassifyf@u 002A                   ___fpclassifyf@x 0020           adcGetConversion@channel 0023  
           OLED_waitForReady@busy 0020                         ??_isspace 0022                         ??_isupper 0022  
                       ??_timeNow 0024                 OLED_command@value 0025                            stoa@cp 0037  
                          stoa@fp 0036                            putch@c 0070                  __end_of_vfprintf 1398  
                       ??_sprintf 0070                         ??_tolower 0026                         ??_strncmp 0024  
                       ??_strncpy 0073                  _OLED_pulseEnable 06DD                        ___flge@ff1 0047  
                      ___flge@ff2 004B                   ??___fpclassifyf 0024                     checkSensor@dp 0057  
                    ___xxtofl@arg 002A                      ___xxtofl@exp 0029                      ___xxtofl@val 0020  
                      ___fleq@ff1 0020                        ___fleq@ff2 0024           __end_of__initialization 009B  
                      ___flneg@f1 0020                        ___fltol@f1 0020          __size_of_OLED_write4bits 002E  
                  __pcstackCOMMON 0070                      __pidataBANK2 0000                      __pidataBANK3 1C45  
                   __end_of_getPB 06DD           convertAnalogValues@data 0066           convertAnalogValues@avgI 01B6  
         convertAnalogValues@avgT 01BA           convertAnalogValues@avgV 01B8              uartReceiveISR@buffer 0241  
                   __end_of_fputc 16AA                     __end_of_fputs 1196                      _channelSetup 11DB  
                   __end_of_putch 16F6                    ??_OLED_command 0025                        __end_ofPL2 1702  
                      __end_ofPL4 1709                        __end_ofPL6 0D7D                        __end_ofPL8 0D8E  
              __size_of_getRotDir 0009         ??_OLED_scrollDisplayRight 0026                           ??_getPB 0020  
          __size_of_OLED_print_xy 002D                           ??_fputc 0023                           ??_fputs 0029  
                      _dataPacket 01BC                           ??_putch 0020                        __pbssBANK2 015C  
                      __pbssBANK3 01A0                        __pbssBANK4 0220                        __pbssBANK5 02A0  
                      __pbssBANK6 0320                uartIsDataReady@ret 0020           __size_of_uartReceiveISR 002D  
                    ??_OLED_write 0025                 __end_of__Umul8_16 0542                        __pmaintext 009E  
                         ?___flge 0047                           ?___fleq 0020                           ?___lmul 0020  
                         ?___wmul 0020                   __CFG_PPS1WAY$ON 0000                        __pintentry 0004  
                         ?_efgtoa 0068             __size_of_getNextState 004D                           ?_floorf 0060  
                         ?_paging 0026                 _OLED_waitForReady 06E6                    ___lmul@product 0028  
                         ?_rotISR 0070          ??_OLED_scrollDisplayLeft 0026                           ?_strcpy 0020  
                         ?_strlen 0020                __size_of_timeSince 0045                ?_OLED_waitForReady 0070  
                  _setOutputPower 11C6                 ??_OLED_returnHome 0026                         ?___xxtofl 0020  
                         _OSCCON1 088D                __size_of_vfpfcnvrt 01A2                __end_of_OLED_write 1361  
                   ??_get10msTick 0070               ??_OLED_waitForReady 0020                 pushButtonISR@time 0070  
                     rotISR@input 0076                      _getNextState 0673                 __end_of_getRotDir 1370  
             _convertAnalogValues 031F                        ema@average 002E                     _OLED_print_xy 129E  
       __end_of_OLED_waitForReady 0702                           ___aldiv 1F16                   __size_of___flge 005A  
                 __size_of___fleq 0034                           ___almod 1F82                           ___fladd 1CE1  
                         ___fldiv 0BCC                           ___awdiv 0FC0                           ___flneg 0D5E  
                 __size_of___lmul 0025                           ___awmod 1004                           ___flmul 0411  
                         ___flsub 0D41                           ___fltol 0F09                   __size_of___wmul 0015  
                 OLED_write@value 0025                         ?_vfprintf 00E9                   __size_of_efgtoa 03A0  
                   ?_uartSendByte 0070                   __size_of_floorf 00E8                   __size_of_paging 0049  
               ??_OLED_write4bits 0020                        _initialize 02D8                   __size_of_rotISR 0030  
          __end_of_setOutputPower 11DB                           __ptext1 063C                           __ptext2 11B1  
                         __ptext3 11C6                           __ptext4 11DB                           __ptext5 1196  
                         __ptext6 1201                           __ptext7 063A                           __ptext8 06D5  
                         __ptext9 0673                     ??_checkSensor 0053                   __CFG_WRTAPP$OFF 0000  
                 __size_of_strcpy 001D                   __size_of_strlen 0016                      __size_of_ISR 005B  
                    __size_of_abs 0018                      __size_of_ema 004B                      __size_of_pad 0044  
                         _isdigit 1C1D                        ??___xxtofl 0024                  ___awmod@dividend 0022  
            ?_convertAnalogValues 0070                  ___aldiv@dividend 0024                           _isspace 0813  
                       _IOCAFbits 1F3F                   __CFG_WRTSAF$OFF 0000                           _isupper 1C31  
                         efgtoa@c 006C                           efgtoa@d 00C2                           efgtoa@e 00DB  
                         efgtoa@f 0068                           efgtoa@g 00D7                           efgtoa@h 00CD  
                         efgtoa@i 00D5                           efgtoa@l 00D1                           efgtoa@m 00BE  
                         efgtoa@n 00DD                           efgtoa@p 00C7                           efgtoa@t 00BA  
                         efgtoa@u 00DF                           efgtoa@w 00CA                           _timeNow 02B0  
                   ??_channelView 0070                           atoi@neg 002B                           _sprintf 12CB  
                         _tolower 153A                           clrloop0 0808                           _strncmp 16C0  
                         _strncpy 1CB7              end_of_initialization 009B                        _setLensDia 11B1  
                         floorf@e 00A4                           floorf@m 00A0                           floorf@u 00A6  
                         floorf@x 0060                           paging@n 002B                    paging@lastPage 0026  
            __end_of_OLED_command 0175                           fputc@fp 0022                           init_ram 080D  
       __size_of_adcGetConversion 001F                           fputs@fp 0028                           initloop 080E  
             __end_of_get10msTick 07FA                 __end_of_timeSince 02B0          __size_of_uartIsDataReady 0009  
                       _OLED_init 00C0                         _OLED_send 02C1            __size_of_reset10msTick 0002  
                   ?_returnToPage 0070                    ?_OLED_print_xy 0026                OLED_print_xy@F7874 01E9  
               __end_of_vfpfcnvrt 153A                        efgtoa@mode 00CC                        efgtoa@sign 00C4  
                ___aldiv@quotient 002A                     _dataReadyFlag 0168                    ??_uartSendByte 0020  
                      ??_vfprintf 00EC             __CFG_WDTCPS$WDTCPS_31 0000          __end_of_OLED_pulseEnable 06E6  
                         strcpy@d 0026                           strlen@a 0022                           strcpy@s 0024  
                         strlen@s 0020                         _PORTAbits 000C                         _PORTCbits 000E  
                 ?_setOutputPower 0152   __size_of_OLED_scrollDisplayLeft 0003                   _selectedChannel 0166  
                     ___fladd@grs 005A             ??_convertAnalogValues 0060                     ___xxtofl@sign 0028  
                       _TRISCbits 0014                       ___fldiv@grs 005A                       ___fldiv@rem 0053  
             __end_of_checkSensor 026B                  __CFG_FEXTOSC$OFF 0000                    _uartReceiveISR 1C8A  
                     ___flmul@grs 003C                        _statusView 1201               __end_of_channelView 11B1  
                 channelView@data 0152                 getNextState@state 0029                   channelView@page 0163  
                      ?_OLED_init 0070                    ??_returnToPage 0026                        ?_OLED_send 0023  
           __end_of_pushButtonISR 07F8        __size_of_OLED_waitForReady 001C                    __end_of___flge 0D24  
            __end_of_nextStateTbl 20C6                    __end_of___fleq 0F04                    __end_of___lmul 063A  
                     vfpfcnvrt@ap 00E4                       vfpfcnvrt@cp 0124                       vfpfcnvrt@ct 012B  
                     vfpfcnvrt@fp 0133                       vfpfcnvrt@ll 0120                    __end_of___wmul 06D5  
                  __end_of_efgtoa 0BCC                       ?_initialize 0070                    __end_of_floorf 1125  
          __size_of_getDataPacket 0001                    __end_of_paging 1359                        floorf@F514 01A0  
                  __end_of_rotISR 1C8A                    __end_of_strcpy 0D41                    __end_of_strlen 16C0  
                     __end_ofPL10 1134                       __end_ofPL20 0E16                       __end_ofPL12 0DA2  
                     __end_ofPL30 0E26                       __end_ofPL22 171B                       __end_ofPL14 0DB5  
                     __end_ofPL40 1759                       __end_ofPL32 0E36                       __end_ofPL24 1724  
                     __end_ofPL16 0DD6                       __end_ofPL50 0733                       __end_ofPL42 0718  
                     __end_ofPL34 0E4F                       __end_ofPL26 172B                       __end_ofPL18 0DF6  
                     __end_ofPL60 075B                       __end_ofPL52 073D                       __end_ofPL44 176C  
                     __end_ofPL36 0E5D                       __end_ofPL28 173C                       __end_ofPL70 1781  
                     __end_ofPL62 0764                       __end_ofPL54 0747                       __end_ofPL46 0723  
                     __end_ofPL38 1744                       __end_ofPL80 0E83                       __end_ofPL72 0786  
                     __end_ofPL64 1775                       __end_ofPL56 0E7D                       __end_ofPL48 0E6E  
                     __end_ofPL90 17A5                       __end_ofPL82 179F                       __end_ofPL74 178D  
                     __end_ofPL66 076D                       __end_ofPL58 0754                       __end_ofPL92 17AB  
                     __end_ofPL84 0E8A                       __end_ofPL76 0FC0                       __end_ofPL68 077A  
                     __end_ofPL94 0E93                       __end_ofPL86 078F                       __end_ofPL78 1795  
                     __end_ofPL96 0797                       __end_ofPL88 0F59                       __end_ofPL98 07A0  
             start_initialization 0061                     _reset10msTick 07FA             uartReceiveISR@rxCount 007B  
                     __end_of_ISR 005F                       __end_of_abs 1FF4                       __end_of_ema 0615  
                     __end_of_pad 117D          OLED_print_xy@row_offsets 002A            __end_of_uartReceiveISR 1CB7  
                     _get10msTick 07F8                       ?_setLensDia 0152            _OLED_scrollDisplayLeft 1361  
           __end_of___fpclassifyf 0FB8                   ??_OLED_print_xy 0029                  __CFG_LPBOREN$OFF 0000  
                     vfprintf@fmt 00E9                          ??___flge 004F                          ??___fleq 0028  
                  timeSince@since 0024                          ??___lmul 0028                   _OLED_returnHome 063A  
                        ??___wmul 0024                     _g_curRotState 007C                          ??_efgtoa 006D  
                       __Umul8_16 052B                 ??_uartIsDataReady 0020                       __pdataBANK2 016E  
                     __pdataBANK3 01D8                          ??_floorf 0064                          ??_paging 0027  
                        ??_rotISR 0070                          ??_strcpy 0022                          ??_strlen 0022  
                OLED_print_xy@col 002E                       _checkSensor 0175                         ___fladd@a 004B  
                       ___fladd@b 0047                  OLED_print_xy@row 0026                         ___fldiv@a 0047  
                       ___fldiv@b 004B                    ?_reset10msTick 0070                         ___flmul@a 0032  
                       ___flmul@b 002E                       __pbssCOMMON 007B                         ___flsub@a 005B  
                       ___flsub@b 005F                         ___latbits 0003                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                     __pcstackBANK2 0120             __size_of_OLED_command 0007  
          convertAnalogValues@adc 0064                 __size_of___xxtofl 0069                 paging@currentPage 002A  
                     _channelView 1196                   ?_uartReceiveISR 0070              __end_of_uartSendByte 070C  
                     ?_statusView 0152                     _getDataPacket 02CE                  _adcGetConversion 05AB  
             __size_of_initialize 0047                         _atoi$1480 002D                         _atoi$1481 0031  
                       _atoi$1482 002F                   _OLED_write4bits 0140                       ??_OLED_init 0026  
                     ??_OLED_send 0024                         _g_pbState 016B                       _efgtoa$1132 00AE  
                     _efgtoa$1141 00B4                       _efgtoa$1133 00B0                       _efgtoa$1142 00B6  
                     _efgtoa$1143 00B8                       _efgtoa$1137 00B2                         _dtoa$1108 003C  
                        ?___aldiv 0020                          ?___almod 0020                          ?___fladd 0047  
                        ?___fldiv 0047                          ?___awdiv 0020                          ?___flneg 0020  
                        ?___awmod 0020                          ?___flmul 002E                          ?___flsub 005B  
                        ?___fltol 0020                         _getRotDir 1367                        ?__Umul8_16 0020  
             __size_of_setLensDia 0015          ?_OLED_scrollDisplayRight 0070                  ___almod@dividend 0024  
                    _OLED_command 016E                 __size_of_vfprintf 0028                          _BAUD1CON 011F  
                  getNextState@pb 0027          _convertAnalogValues$1790 0060                          ?_isdigit 0020  
                        ?_isspace 0020              __end_of_returnToPage 1310                          ?_isupper 0020  
                        ?_timeNow 0020                    __size_of_getPB 0008                          ?_sprintf 0134  
                        ?_tolower 0024                    __size_of_fputc 0046                         _tick100ms 01A8  
                  __size_of_fputs 0019                          ?_strncmp 0020                          ?_strncpy 0070  
                  __size_of_putch 0001                    ?_getDataPacket 0070                   ___aldiv@divisor 0020  
                 ___aldiv@counter 0028                    ___wmul@product 0024                          _LATAbits 0018  
                        _LATBbits 0019                          _LATCbits 001A           __end_of_OLED_returnHome 063C  
                       clear_ram0 0807                          _PIE0bits 0716                          _PIE3bits 0719  
                        _PIE4bits 071A                    setLensDia@data 0152                          _PIR0bits 070C  
                        _PIR3bits 070F                          _PIR4bits 0710                         _timeSince 026B  
               __CFG_BBSIZE$BB512 0000                  ??_setOutputPower 0070                        ?_getRotDir 0070  
                       _vfpfcnvrt 1398                 ?_OLED_pulseEnable 0070                   ??_reset10msTick 0070  
                      _ADCON0bits 009D                 ___wmul@multiplier 0020                      _RX1DTPPSbits 1ECB  
             __size_of_statusView 009D                ??_OLED_pulseEnable 0020                  getNextState@page 0026  
                   menu@nextState 015A              OLED_write4bits@value 0022                      _isspace$1511 0024  
                _transition_table 2000                        vfpfcnvrt@c 0132                        vfpfcnvrt@f 012E  
               ___lmul@multiplier 0020           __end_of_OLED_write4bits 016E                      _nextStateTbl 20A8  
                       paging@dir 0029                 _OLED_clearDisplay 00BE                     uartSendByte@s 0020  
                       menu@state 0165                        vfprintf@ap 00EB                        vfprintf@fp 00ED  
                      ?_timeSince 0024   __end_of_OLED_scrollDisplayRight 1367                ?_OLED_clearDisplay 0070  
                     ??__Umul8_16 0023                     ?_channelSetup 0152                  __size_of___aldiv 006C  
                __size_of___almod 005A                  __size_of___fladd 0136                  __size_of___fldiv 00FE  
                __size_of___awdiv 0040                  __size_of___flneg 0009       __end_of_convertAnalogValues 0411  
                __size_of___awmod 0039                  __size_of___flmul 011A                  __size_of___flsub 001D  
                __size_of___fltol 0047                        ?_vfpfcnvrt 00E3                      ??_initialize 0020  
             ??_OLED_clearDisplay 0026                ___fpclassifyf@F453 01A4                        sprintf@fmt 0136  
                        ___xxtofl 0542                  __size_of_isdigit 0014                       _rxFErrCount 016A  
           __size_of_uartSendByte 000A          checkSensor@sensorTimeout 01AC                  __size_of_isspace 0019  
                        _g_rotDir 016C                          __ptext10 12CB                          __ptext11 1370  
                        __ptext20 0F59                          __ptext12 1398                          __ptext21 0F09  
                        __ptext13 16C0                          __ptext30 117D                          __ptext22 0D41  
                        __ptext14 15CE                          __ptext31 1664                          __ptext23 0D5E  
                        __ptext15 082C                          __ptext40 06C0                          __ptext32 16F5  
                        __ptext24 0ED0                          __ptext16 153A                          __ptext41 1310  
                        __ptext33 1FDC                          __ptext25 1004                          __ptext17 1C31  
                        __ptext50 0615                          __ptext42 1367                          __ptext34 1F82  
                        __ptext26 0FC0                          __ptext18 0D24                          __ptext51 05AB  
                        __ptext43 1364                          __ptext35 1F16                          __ptext27 1E2B  
                        __ptext19 103D                          __ptext60 02B0                          __ptext52 0411  
                        __ptext44 1361                          __ptext36 1555                          __ptext28 1139  
                        __ptext61 02CE                          __ptext53 052B                          __ptext45 129E  
                        __ptext37 0813                          __ptext29 16AA                          __ptext70 06DD  
                        __ptext62 0542                          __ptext54 0BCC                          __ptext46 1359  
                        __ptext38 1C1D                          __ptext63 0CCA                          __ptext55 1CE1  
                        __ptext47 02D8                          __ptext39 12ED                          __ptext72 1C8A  
                        __ptext64 00C0                          __ptext56 0175                          __ptext48 031F  
                        __ptext73 1CB7                          __ptext65 00BE                          __ptext57 0702  
                        __ptext49 05CA                          __ptext74 1C5A                          __ptext66 016E  
                        __ptext58 02CF                          __ptext75 07D5                          __ptext67 06E6  
                        __ptext59 026B                          __ptext76 07FA                          __ptext68 02C1  
                        __ptext77 07F8                          __ptext69 0140                  __size_of_isupper 0014  
                    ?_get10msTick 0070                  __size_of_timeNow 0011                   ??_getDataPacket 0020  
         ?_OLED_scrollDisplayLeft 0070                      ??_setLensDia 0070                   ___almod@divisor 0020  
                __size_of_sprintf 0022                  __size_of_tolower 001B                     getNextState@n 002A  
                 ___almod@counter 0028                       _OSCCON3bits 088F                        strcpy@dest 0027  
                __size_of_strncmp 0035                  __size_of_strncpy 002A                          ema@alpha 0030  
                   __size_of_atoi 0079                     __size_of_main 0020                     __size_of_dtoa 00EB  
       __end_of_OLED_clearDisplay 00C0                     __size_of_menu 0037                   _uartIsDataReady 02CF  
                        getPB@ret 0020                     __size_of_stoa 0096                          _tick10ms 007D  
                ?_OLED_returnHome 0070                __end_of_initialize 031F              __CFG_WDTCWS$WDTCWS_7 0000  
                      _RC1STAbits 011D                          efgtoa@fp 00C6                          efgtoa@ne 00C0  
                        efgtoa@pp 00BC                          efgtoa@ou 00AA                         stoa@F1151 01E2  
                     _rxOErrCount 0169                    ??_channelSetup 0070                          int$flags 007E  
                     ??_getRotDir 0020                          _vfprintf 1370                      _uartSendByte 0702  
           __size_of_returnToPage 0023                __end_of_setLensDia 11C6          __end_of_adcGetConversion 05CA  
                    ?_checkSensor 0070                  ??_uartReceiveISR 0075                    _vfpfcnvrt$1173 0129  
                  _vfpfcnvrt$1167 0125                    _vfpfcnvrt$1168 0127                        _INTCONbits 000B  
                        menu@data 0157                          menu@page 0158    __end_of_OLED_scrollDisplayLeft 1364  
                    timeSince@now 0030                    __pstringtext10 211E                    __pstringtext11 212B  
                  __pstringtext12 2137                    __pstringtext13 213B                    __pstringtext14 213F  
                  __pstringtext15 2143                    __pstringtext16 2147                    __pstringtext17 0000  
          __size_of_pushButtonISR 0023                          isdigit@c 0020                      ?_channelView 0152  
                ?_OLED_write4bits 0070                          intlevel1 0000                         sprintf@ap 014B  
                    ??_statusView 0070                          isspace@c 0020                 __CFG_CLKOUTEN$OFF 0000  
                       strcpy@src 0020                     ?_getNextState 0026                          isupper@c 0020  
                      _OLED_write 1359                         strncmp@_l 0025                         strncmp@_r 0020  
                       strncpy@cp 0074             __end_of_OLED_print_xy 12CB                      _returnToPage 12ED  
                     ??_timeSince 0028                       efgtoa@nmode 00C9                       ??_vfpfcnvrt 00E5  
                    getRotDir@ret 0020                          stoa@nuls 002B                     __pstringtext1 20A8  
                   __pstringtext2 2000                     __pstringtext3 204D                     __pstringtext4 207E  
                   __pstringtext5 20C6                     __pstringtext6 20DF                     __pstringtext7 20F2  
                   __pstringtext8 2103                     __pstringtext9 2111            __Umul8_16@multiplicand 0020  
                        sprintf@f 014C                          tolower@c 0024                          sprintf@s 0134  
          __size_of___fpclassifyf 005F                __end_of_statusView 129E                          strncmp@l 0028  
                        strncmp@n 0022                          strncmp@r 0026                          strncpy@d 0073  
                        strncpy@n 0071                          strncpy@s 0070                      ___aldiv@sign 0029  
         __end_of_uartIsDataReady 02D8                     ___fladd@signs 0057  __size_of_OLED_scrollDisplayRight 0003  
                checkSensor@state 016D                      ___almod@sign 0029                      ___fladd@aexp 0058  
                    ___fladd@bexp 0059        __size_of_OLED_clearDisplay 0002                   checkSensor@data 0058  
                  ??_getNextState 0028              __Umul8_16@multiplier 0027                      _updateScreen 016E  
               __Umul8_16@product 0023  
