

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Mon Jan 27 13:28:05 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F15356
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK3,global,class=CODE,delta=2
     5                           	psect	idataBANK4,global,class=CODE,delta=2
     6                           	psect	idataBANK5,global,class=CODE,delta=2
     7                           	psect	stringtext1,global,class=STRCODE,delta=2
     8                           	psect	stringtext2,global,class=STRCODE,delta=2
     9                           	psect	stringtext3,global,class=STRCODE,delta=2
    10                           	psect	stringtext4,global,class=STRCODE,delta=2
    11                           	psect	stringtext5,global,class=STRCODE,delta=2
    12                           	psect	stringtext6,global,class=STRCODE,delta=2
    13                           	psect	stringtext7,global,class=STRCODE,delta=2
    14                           	psect	stringtext8,global,class=STRCODE,delta=2
    15                           	psect	stringtext9,global,class=STRCODE,delta=2
    16                           	psect	stringtext10,global,class=STRCODE,delta=2
    17                           	psect	stringtext11,global,class=STRCODE,delta=2
    18                           	psect	stringtext12,global,class=STRCODE,delta=2
    19                           	psect	stringtext13,global,class=STRCODE,delta=2
    20                           	psect	stringtext14,global,class=STRCODE,delta=2
    21                           	psect	stringtext15,global,class=STRCODE,delta=2
    22                           	psect	stringtext16,global,class=STRCODE,delta=2
    23                           	psect	stringtext17,global,class=STRCODE,delta=2
    24                           	psect	stringtext18,global,class=STRCODE,delta=2
    25                           	psect	stringtext19,global,class=STRCODE,delta=2
    26                           	psect	stringtext20,global,class=STRCODE,delta=2
    27                           	psect	stringtext21,global,class=STRCODE,delta=2
    28                           	psect	stringtext22,global,class=STRCODE,delta=2
    29                           	psect	stringtext23,global,class=STRCODE,delta=2
    30                           	psect	stringtext24,global,class=STRCODE,delta=2
    31                           	psect	stringtext25,global,class=STRCODE,delta=2
    32                           	psect	stringtext26,global,class=STRCODE,delta=2
    33                           	psect	stringtext27,global,class=STRCODE,delta=2
    34                           	psect	stringtext28,global,class=STRCODE,delta=2
    35                           	psect	stringtext29,global,class=STRCODE,delta=2
    36                           	psect	stringtext30,global,class=STRCODE,delta=2
    37                           	psect	stringtext31,global,class=STRCODE,delta=2
    38                           	psect	stringtext32,global,class=STRCODE,delta=2
    39                           	psect	stringtext33,global,class=STRCODE,delta=2
    40                           	psect	stringtext34,global,class=STRCODE,delta=2
    41                           	psect	stringtext35,global,class=STRCODE,delta=2
    42                           	psect	stringtext36,global,class=STRCODE,delta=2
    43                           	psect	stringtext37,global,class=STRCODE,delta=2
    44                           	psect	cinit,global,class=CODE,merge=1,delta=2
    45                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    46                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    47                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1
    48                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1
    49                           	psect	dataBANK4,global,class=BANK4,space=1,delta=1
    50                           	psect	bssBANK5,global,class=BANK5,space=1,delta=1
    51                           	psect	dataBANK5,global,class=BANK5,space=1,delta=1
    52                           	psect	bssBANK6,global,class=BANK6,space=1,delta=1
    53                           	psect	inittext,global,class=CODE,delta=2
    54                           	psect	clrtext,global,class=CODE,delta=2
    55                           	psect	cstackBANK4,global,class=BANK4,space=1,delta=1
    56                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1
    57                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    58                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    59                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    60                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    61                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    62                           	psect	text1,local,class=CODE,merge=1,delta=2
    63                           	psect	text2,local,class=CODE,merge=1,delta=2
    64                           	psect	text3,local,class=CODE,merge=1,delta=2
    65                           	psect	text4,local,class=CODE,merge=1,delta=2
    66                           	psect	text5,local,class=CODE,merge=1,delta=2
    67                           	psect	text6,local,class=CODE,merge=1,delta=2
    68                           	psect	text7,local,class=CODE,merge=1,delta=2
    69                           	psect	text8,local,class=CODE,merge=1,delta=2
    70                           	psect	text9,local,class=CODE,merge=1,delta=2
    71                           	psect	text10,local,class=CODE,merge=1,delta=2
    72                           	psect	text11,local,class=CODE,merge=1,delta=2
    73                           	psect	text12,local,class=CODE,merge=1,delta=2
    74                           	psect	text13,local,class=CODE,merge=1,delta=2
    75                           	psect	text14,local,class=CODE,merge=1,delta=2
    76                           	psect	text15,local,class=CODE,merge=1,delta=2
    77                           	psect	text16,local,class=CODE,merge=1,delta=2
    78                           	psect	text17,local,class=CODE,merge=1,delta=2
    79                           	psect	text18,local,class=CODE,merge=1,delta=2,group=2
    80                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    81                           	psect	text20,local,class=CODE,merge=1,delta=2
    82                           	psect	text21,local,class=CODE,merge=1,delta=2
    83                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    84                           	psect	text23,local,class=CODE,merge=1,delta=2
    85                           	psect	text24,local,class=CODE,merge=1,delta=2
    86                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    87                           	psect	text26,local,class=CODE,merge=1,delta=2,group=2
    88                           	psect	text27,local,class=CODE,merge=1,delta=2,group=2
    89                           	psect	text28,local,class=CODE,merge=1,delta=2,group=2
    90                           	psect	text29,local,class=CODE,merge=1,delta=2,group=2
    91                           	psect	text30,local,class=CODE,merge=1,delta=2,group=1
    92                           	psect	text31,local,class=CODE,merge=1,delta=2,group=1
    93                           	psect	text32,local,class=CODE,merge=1,delta=2,group=1
    94                           	psect	text33,local,class=CODE,merge=1,delta=2,group=1
    95                           	psect	text34,local,class=CODE,merge=1,delta=2,group=1
    96                           	psect	text35,local,class=CODE,merge=1,delta=2,group=1
    97                           	psect	text36,local,class=CODE,merge=1,delta=2
    98                           	psect	text37,local,class=CODE,merge=1,delta=2
    99                           	psect	text38,local,class=CODE,merge=1,delta=2,group=2
   100                           	psect	text39,local,class=CODE,merge=1,delta=2,group=2
   101                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
   102                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
   103                           	psect	text42,local,class=CODE,merge=1,delta=2,group=2
   104                           	psect	text43,local,class=CODE,merge=1,delta=2,group=1
   105                           	psect	text44,local,class=CODE,merge=1,delta=2,group=1
   106                           	psect	text45,local,class=CODE,merge=1,delta=2,group=2
   107                           	psect	text46,local,class=CODE,merge=1,delta=2,group=2
   108                           	psect	text47,local,class=CODE,merge=1,delta=2,group=2
   109                           	psect	text48,local,class=CODE,merge=1,delta=2
   110                           	psect	text49,local,class=CODE,merge=1,delta=2
   111                           	psect	text50,local,class=CODE,merge=1,delta=2
   112                           	psect	text51,local,class=CODE,merge=1,delta=2
   113                           	psect	text52,local,class=CODE,merge=1,delta=2
   114                           	psect	text53,local,class=CODE,merge=1,delta=2
   115                           	psect	text54,local,class=CODE,merge=1,delta=2
   116                           	psect	text55,local,class=CODE,merge=1,delta=2
   117                           	psect	text56,local,class=CODE,merge=1,delta=2,group=1
   118                           	psect	text57,local,class=CODE,merge=1,delta=2
   119                           	psect	text58,local,class=CODE,merge=1,delta=2
   120                           	psect	text59,local,class=CODE,merge=1,delta=2,group=1
   121                           	psect	text60,local,class=CODE,merge=1,delta=2
   122                           	psect	text61,local,class=CODE,merge=1,delta=2,group=1
   123                           	psect	text62,local,class=CODE,merge=1,delta=2,group=1
   124                           	psect	text63,local,class=CODE,merge=1,delta=2,group=1
   125                           	psect	text64,local,class=CODE,merge=1,delta=2,group=1
   126                           	psect	text65,local,class=CODE,merge=1,delta=2
   127                           	psect	text66,local,class=CODE,merge=1,delta=2
   128                           	psect	text67,local,class=CODE,merge=1,delta=2
   129                           	psect	text68,local,class=CODE,merge=1,delta=2
   130                           	psect	text69,local,class=CODE,merge=1,delta=2
   131                           	psect	text70,local,class=CODE,merge=1,delta=2
   132                           	psect	text71,local,class=CODE,merge=1,delta=2,group=1
   133                           	psect	text72,local,class=CODE,merge=1,delta=2,group=1
   134                           	psect	text73,local,class=CODE,merge=1,delta=2
   135                           	psect	text74,local,class=CODE,merge=1,delta=2
   136                           	psect	text75,local,class=CODE,merge=1,delta=2
   137                           	psect	text76,local,class=CODE,merge=1,delta=2
   138                           	psect	text77,local,class=CODE,merge=1,delta=2
   139                           	psect	text78,local,class=CODE,merge=1,delta=2
   140                           	psect	text79,local,class=CODE,merge=1,delta=2
   141                           	psect	text80,local,class=CODE,merge=1,delta=2
   142                           	psect	intentry,global,class=CODE,delta=2
   143                           	psect	text82,local,class=CODE,merge=1,delta=2
   144                           	psect	text83,local,class=CODE,merge=1,delta=2,group=2
   145                           	psect	text84,local,class=CODE,merge=1,delta=2
   146                           	psect	text85,local,class=CODE,merge=1,delta=2
   147                           	psect	text86,local,class=CODE,merge=1,delta=2
   148                           	psect	text87,local,class=CODE,merge=1,delta=2
   149                           	dabs	1,0xCA0,32
   150                           	dabs	1,0xC20,80
   151                           	dabs	1,0xBC3,45
   152                           	dabs	1,0x2753,0,_data
   153                           	dabs	1,0x7E,2
   154  0000                     
   155                           ; Version 2.10
   156                           ; Generated 31/07/2019 GMT
   157                           ; 
   158                           ; Copyright © 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
   159                           ; All rights reserved.
   160                           ; 
   161                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   162                           ; 
   163                           ; Redistribution and use in source and binary forms, with or without modification, are
   164                           ; permitted provided that the following conditions are met:
   165                           ; 
   166                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   167                           ;        conditions and the following disclaimer.
   168                           ; 
   169                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   170                           ;        of conditions and the following disclaimer in the documentation and/or other
   171                           ;        materials provided with the distribution.
   172                           ; 
   173                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   174                           ;        software without specific prior written permission.
   175                           ; 
   176                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   177                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   178                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   179                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   180                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   181                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   182                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   183                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   184                           ; 
   185                           ; 
   186                           ; Code-generator required, PIC16F15356 Definitions
   187                           ; 
   188                           ; SFR Addresses
   189  0000                     	;# 
   190  0001                     	;# 
   191  0002                     	;# 
   192  0003                     	;# 
   193  0004                     	;# 
   194  0005                     	;# 
   195  0006                     	;# 
   196  0007                     	;# 
   197  0008                     	;# 
   198  0009                     	;# 
   199  000A                     	;# 
   200  000B                     	;# 
   201  000C                     	;# 
   202  000D                     	;# 
   203  000E                     	;# 
   204  0010                     	;# 
   205  0012                     	;# 
   206  0013                     	;# 
   207  0014                     	;# 
   208  0016                     	;# 
   209  0018                     	;# 
   210  0019                     	;# 
   211  001A                     	;# 
   212  009B                     	;# 
   213  009B                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  0119                     	;# 
   219  0119                     	;# 
   220  0119                     	;# 
   221  011A                     	;# 
   222  011A                     	;# 
   223  011A                     	;# 
   224  011B                     	;# 
   225  011B                     	;# 
   226  011B                     	;# 
   227  011B                     	;# 
   228  011B                     	;# 
   229  011C                     	;# 
   230  011C                     	;# 
   231  011C                     	;# 
   232  011D                     	;# 
   233  011D                     	;# 
   234  011D                     	;# 
   235  011E                     	;# 
   236  011E                     	;# 
   237  011E                     	;# 
   238  011F                     	;# 
   239  011F                     	;# 
   240  011F                     	;# 
   241  011F                     	;# 
   242  011F                     	;# 
   243  018C                     	;# 
   244  018D                     	;# 
   245  018E                     	;# 
   246  018F                     	;# 
   247  0190                     	;# 
   248  0191                     	;# 
   249  0192                     	;# 
   250  0196                     	;# 
   251  0197                     	;# 
   252  0198                     	;# 
   253  0199                     	;# 
   254  019A                     	;# 
   255  019B                     	;# 
   256  019C                     	;# 
   257  020C                     	;# 
   258  020C                     	;# 
   259  020D                     	;# 
   260  020E                     	;# 
   261  020F                     	;# 
   262  020F                     	;# 
   263  0210                     	;# 
   264  0210                     	;# 
   265  0211                     	;# 
   266  0211                     	;# 
   267  028C                     	;# 
   268  028C                     	;# 
   269  028D                     	;# 
   270  028D                     	;# 
   271  028E                     	;# 
   272  028F                     	;# 
   273  0290                     	;# 
   274  0291                     	;# 
   275  030C                     	;# 
   276  030C                     	;# 
   277  030D                     	;# 
   278  030E                     	;# 
   279  030F                     	;# 
   280  0310                     	;# 
   281  0310                     	;# 
   282  0311                     	;# 
   283  0312                     	;# 
   284  0313                     	;# 
   285  0314                     	;# 
   286  0314                     	;# 
   287  0315                     	;# 
   288  0316                     	;# 
   289  0318                     	;# 
   290  0318                     	;# 
   291  0319                     	;# 
   292  031A                     	;# 
   293  031C                     	;# 
   294  031C                     	;# 
   295  031D                     	;# 
   296  031E                     	;# 
   297  038C                     	;# 
   298  038C                     	;# 
   299  038D                     	;# 
   300  038E                     	;# 
   301  058C                     	;# 
   302  058C                     	;# 
   303  058D                     	;# 
   304  058E                     	;# 
   305  058F                     	;# 
   306  058F                     	;# 
   307  0590                     	;# 
   308  0591                     	;# 
   309  0592                     	;# 
   310  0593                     	;# 
   311  059C                     	;# 
   312  059C                     	;# 
   313  059D                     	;# 
   314  059D                     	;# 
   315  059E                     	;# 
   316  059F                     	;# 
   317  060C                     	;# 
   318  060D                     	;# 
   319  060E                     	;# 
   320  060F                     	;# 
   321  0610                     	;# 
   322  0611                     	;# 
   323  0612                     	;# 
   324  0613                     	;# 
   325  0614                     	;# 
   326  070C                     	;# 
   327  070D                     	;# 
   328  070E                     	;# 
   329  070F                     	;# 
   330  0710                     	;# 
   331  0711                     	;# 
   332  0712                     	;# 
   333  0713                     	;# 
   334  0716                     	;# 
   335  0717                     	;# 
   336  0718                     	;# 
   337  0719                     	;# 
   338  071A                     	;# 
   339  071B                     	;# 
   340  071C                     	;# 
   341  071D                     	;# 
   342  0796                     	;# 
   343  0797                     	;# 
   344  0798                     	;# 
   345  0799                     	;# 
   346  079A                     	;# 
   347  079B                     	;# 
   348  080C                     	;# 
   349  080D                     	;# 
   350  080E                     	;# 
   351  080F                     	;# 
   352  0810                     	;# 
   353  0811                     	;# 
   354  0812                     	;# 
   355  0813                     	;# 
   356  0814                     	;# 
   357  081A                     	;# 
   358  081A                     	;# 
   359  081B                     	;# 
   360  081C                     	;# 
   361  081C                     	;# 
   362  081D                     	;# 
   363  081E                     	;# 
   364  081F                     	;# 
   365  088C                     	;# 
   366  088D                     	;# 
   367  088E                     	;# 
   368  088F                     	;# 
   369  0890                     	;# 
   370  0891                     	;# 
   371  0892                     	;# 
   372  0893                     	;# 
   373  0895                     	;# 
   374  0896                     	;# 
   375  090C                     	;# 
   376  090E                     	;# 
   377  090F                     	;# 
   378  091F                     	;# 
   379  098F                     	;# 
   380  098F                     	;# 
   381  0990                     	;# 
   382  0991                     	;# 
   383  0992                     	;# 
   384  0993                     	;# 
   385  0994                     	;# 
   386  0995                     	;# 
   387  0996                     	;# 
   388  0997                     	;# 
   389  0A19                     	;# 
   390  0A19                     	;# 
   391  0A1A                     	;# 
   392  0A1A                     	;# 
   393  0A1B                     	;# 
   394  0A1B                     	;# 
   395  0A1B                     	;# 
   396  0A1C                     	;# 
   397  0A1C                     	;# 
   398  0A1D                     	;# 
   399  0A1D                     	;# 
   400  0A1E                     	;# 
   401  0A1E                     	;# 
   402  0A1F                     	;# 
   403  0A1F                     	;# 
   404  0A1F                     	;# 
   405  1E0F                     	;# 
   406  1E10                     	;# 
   407  1E11                     	;# 
   408  1E12                     	;# 
   409  1E13                     	;# 
   410  1E14                     	;# 
   411  1E15                     	;# 
   412  1E16                     	;# 
   413  1E17                     	;# 
   414  1E18                     	;# 
   415  1E19                     	;# 
   416  1E1A                     	;# 
   417  1E1B                     	;# 
   418  1E1C                     	;# 
   419  1E1D                     	;# 
   420  1E1E                     	;# 
   421  1E1F                     	;# 
   422  1E20                     	;# 
   423  1E21                     	;# 
   424  1E22                     	;# 
   425  1E23                     	;# 
   426  1E24                     	;# 
   427  1E25                     	;# 
   428  1E26                     	;# 
   429  1E27                     	;# 
   430  1E28                     	;# 
   431  1E29                     	;# 
   432  1E2A                     	;# 
   433  1E2B                     	;# 
   434  1E2C                     	;# 
   435  1E2D                     	;# 
   436  1E2E                     	;# 
   437  1E2F                     	;# 
   438  1E30                     	;# 
   439  1E31                     	;# 
   440  1E32                     	;# 
   441  1E33                     	;# 
   442  1E34                     	;# 
   443  1E35                     	;# 
   444  1E36                     	;# 
   445  1E37                     	;# 
   446  1E8F                     	;# 
   447  1E90                     	;# 
   448  1E91                     	;# 
   449  1E92                     	;# 
   450  1E93                     	;# 
   451  1E9C                     	;# 
   452  1EA1                     	;# 
   453  1EA2                     	;# 
   454  1EB1                     	;# 
   455  1EBB                     	;# 
   456  1EBC                     	;# 
   457  1EBD                     	;# 
   458  1EBE                     	;# 
   459  1EC3                     	;# 
   460  1EC5                     	;# 
   461  1EC6                     	;# 
   462  1EC7                     	;# 
   463  1EC8                     	;# 
   464  1EC9                     	;# 
   465  1ECA                     	;# 
   466  1ECB                     	;# 
   467  1ECC                     	;# 
   468  1ECD                     	;# 
   469  1ECE                     	;# 
   470  1F10                     	;# 
   471  1F11                     	;# 
   472  1F12                     	;# 
   473  1F13                     	;# 
   474  1F14                     	;# 
   475  1F15                     	;# 
   476  1F16                     	;# 
   477  1F17                     	;# 
   478  1F18                     	;# 
   479  1F19                     	;# 
   480  1F1A                     	;# 
   481  1F1B                     	;# 
   482  1F1C                     	;# 
   483  1F1D                     	;# 
   484  1F1E                     	;# 
   485  1F1F                     	;# 
   486  1F20                     	;# 
   487  1F21                     	;# 
   488  1F22                     	;# 
   489  1F23                     	;# 
   490  1F24                     	;# 
   491  1F25                     	;# 
   492  1F26                     	;# 
   493  1F27                     	;# 
   494  1F38                     	;# 
   495  1F39                     	;# 
   496  1F3A                     	;# 
   497  1F3B                     	;# 
   498  1F3C                     	;# 
   499  1F3D                     	;# 
   500  1F3E                     	;# 
   501  1F3F                     	;# 
   502  1F43                     	;# 
   503  1F44                     	;# 
   504  1F45                     	;# 
   505  1F46                     	;# 
   506  1F47                     	;# 
   507  1F48                     	;# 
   508  1F49                     	;# 
   509  1F4A                     	;# 
   510  1F4E                     	;# 
   511  1F4F                     	;# 
   512  1F50                     	;# 
   513  1F51                     	;# 
   514  1F52                     	;# 
   515  1F53                     	;# 
   516  1F54                     	;# 
   517  1F55                     	;# 
   518  1F65                     	;# 
   519  1F68                     	;# 
   520  1F69                     	;# 
   521  1F6A                     	;# 
   522  1F6B                     	;# 
   523  1FE4                     	;# 
   524  1FE5                     	;# 
   525  1FE6                     	;# 
   526  1FE7                     	;# 
   527  1FE8                     	;# 
   528  1FE8                     	;# 
   529  1FE9                     	;# 
   530  1FEA                     	;# 
   531  1FEB                     	;# 
   532  1FED                     	;# 
   533  1FEE                     	;# 
   534  1FEF                     	;# 
   535  0000                     	;# 
   536  0001                     	;# 
   537  0002                     	;# 
   538  0003                     	;# 
   539  0004                     	;# 
   540  0005                     	;# 
   541  0006                     	;# 
   542  0007                     	;# 
   543  0008                     	;# 
   544  0009                     	;# 
   545  000A                     	;# 
   546  000B                     	;# 
   547  000C                     	;# 
   548  000D                     	;# 
   549  000E                     	;# 
   550  0010                     	;# 
   551  0012                     	;# 
   552  0013                     	;# 
   553  0014                     	;# 
   554  0016                     	;# 
   555  0018                     	;# 
   556  0019                     	;# 
   557  001A                     	;# 
   558  009B                     	;# 
   559  009B                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  009F                     	;# 
   564  0119                     	;# 
   565  0119                     	;# 
   566  0119                     	;# 
   567  011A                     	;# 
   568  011A                     	;# 
   569  011A                     	;# 
   570  011B                     	;# 
   571  011B                     	;# 
   572  011B                     	;# 
   573  011B                     	;# 
   574  011B                     	;# 
   575  011C                     	;# 
   576  011C                     	;# 
   577  011C                     	;# 
   578  011D                     	;# 
   579  011D                     	;# 
   580  011D                     	;# 
   581  011E                     	;# 
   582  011E                     	;# 
   583  011E                     	;# 
   584  011F                     	;# 
   585  011F                     	;# 
   586  011F                     	;# 
   587  011F                     	;# 
   588  011F                     	;# 
   589  018C                     	;# 
   590  018D                     	;# 
   591  018E                     	;# 
   592  018F                     	;# 
   593  0190                     	;# 
   594  0191                     	;# 
   595  0192                     	;# 
   596  0196                     	;# 
   597  0197                     	;# 
   598  0198                     	;# 
   599  0199                     	;# 
   600  019A                     	;# 
   601  019B                     	;# 
   602  019C                     	;# 
   603  020C                     	;# 
   604  020C                     	;# 
   605  020D                     	;# 
   606  020E                     	;# 
   607  020F                     	;# 
   608  020F                     	;# 
   609  0210                     	;# 
   610  0210                     	;# 
   611  0211                     	;# 
   612  0211                     	;# 
   613  028C                     	;# 
   614  028C                     	;# 
   615  028D                     	;# 
   616  028D                     	;# 
   617  028E                     	;# 
   618  028F                     	;# 
   619  0290                     	;# 
   620  0291                     	;# 
   621  030C                     	;# 
   622  030C                     	;# 
   623  030D                     	;# 
   624  030E                     	;# 
   625  030F                     	;# 
   626  0310                     	;# 
   627  0310                     	;# 
   628  0311                     	;# 
   629  0312                     	;# 
   630  0313                     	;# 
   631  0314                     	;# 
   632  0314                     	;# 
   633  0315                     	;# 
   634  0316                     	;# 
   635  0318                     	;# 
   636  0318                     	;# 
   637  0319                     	;# 
   638  031A                     	;# 
   639  031C                     	;# 
   640  031C                     	;# 
   641  031D                     	;# 
   642  031E                     	;# 
   643  038C                     	;# 
   644  038C                     	;# 
   645  038D                     	;# 
   646  038E                     	;# 
   647  058C                     	;# 
   648  058C                     	;# 
   649  058D                     	;# 
   650  058E                     	;# 
   651  058F                     	;# 
   652  058F                     	;# 
   653  0590                     	;# 
   654  0591                     	;# 
   655  0592                     	;# 
   656  0593                     	;# 
   657  059C                     	;# 
   658  059C                     	;# 
   659  059D                     	;# 
   660  059D                     	;# 
   661  059E                     	;# 
   662  059F                     	;# 
   663  060C                     	;# 
   664  060D                     	;# 
   665  060E                     	;# 
   666  060F                     	;# 
   667  0610                     	;# 
   668  0611                     	;# 
   669  0612                     	;# 
   670  0613                     	;# 
   671  0614                     	;# 
   672  070C                     	;# 
   673  070D                     	;# 
   674  070E                     	;# 
   675  070F                     	;# 
   676  0710                     	;# 
   677  0711                     	;# 
   678  0712                     	;# 
   679  0713                     	;# 
   680  0716                     	;# 
   681  0717                     	;# 
   682  0718                     	;# 
   683  0719                     	;# 
   684  071A                     	;# 
   685  071B                     	;# 
   686  071C                     	;# 
   687  071D                     	;# 
   688  0796                     	;# 
   689  0797                     	;# 
   690  0798                     	;# 
   691  0799                     	;# 
   692  079A                     	;# 
   693  079B                     	;# 
   694  080C                     	;# 
   695  080D                     	;# 
   696  080E                     	;# 
   697  080F                     	;# 
   698  0810                     	;# 
   699  0811                     	;# 
   700  0812                     	;# 
   701  0813                     	;# 
   702  0814                     	;# 
   703  081A                     	;# 
   704  081A                     	;# 
   705  081B                     	;# 
   706  081C                     	;# 
   707  081C                     	;# 
   708  081D                     	;# 
   709  081E                     	;# 
   710  081F                     	;# 
   711  088C                     	;# 
   712  088D                     	;# 
   713  088E                     	;# 
   714  088F                     	;# 
   715  0890                     	;# 
   716  0891                     	;# 
   717  0892                     	;# 
   718  0893                     	;# 
   719  0895                     	;# 
   720  0896                     	;# 
   721  090C                     	;# 
   722  090E                     	;# 
   723  090F                     	;# 
   724  091F                     	;# 
   725  098F                     	;# 
   726  098F                     	;# 
   727  0990                     	;# 
   728  0991                     	;# 
   729  0992                     	;# 
   730  0993                     	;# 
   731  0994                     	;# 
   732  0995                     	;# 
   733  0996                     	;# 
   734  0997                     	;# 
   735  0A19                     	;# 
   736  0A19                     	;# 
   737  0A1A                     	;# 
   738  0A1A                     	;# 
   739  0A1B                     	;# 
   740  0A1B                     	;# 
   741  0A1B                     	;# 
   742  0A1C                     	;# 
   743  0A1C                     	;# 
   744  0A1D                     	;# 
   745  0A1D                     	;# 
   746  0A1E                     	;# 
   747  0A1E                     	;# 
   748  0A1F                     	;# 
   749  0A1F                     	;# 
   750  0A1F                     	;# 
   751  1E0F                     	;# 
   752  1E10                     	;# 
   753  1E11                     	;# 
   754  1E12                     	;# 
   755  1E13                     	;# 
   756  1E14                     	;# 
   757  1E15                     	;# 
   758  1E16                     	;# 
   759  1E17                     	;# 
   760  1E18                     	;# 
   761  1E19                     	;# 
   762  1E1A                     	;# 
   763  1E1B                     	;# 
   764  1E1C                     	;# 
   765  1E1D                     	;# 
   766  1E1E                     	;# 
   767  1E1F                     	;# 
   768  1E20                     	;# 
   769  1E21                     	;# 
   770  1E22                     	;# 
   771  1E23                     	;# 
   772  1E24                     	;# 
   773  1E25                     	;# 
   774  1E26                     	;# 
   775  1E27                     	;# 
   776  1E28                     	;# 
   777  1E29                     	;# 
   778  1E2A                     	;# 
   779  1E2B                     	;# 
   780  1E2C                     	;# 
   781  1E2D                     	;# 
   782  1E2E                     	;# 
   783  1E2F                     	;# 
   784  1E30                     	;# 
   785  1E31                     	;# 
   786  1E32                     	;# 
   787  1E33                     	;# 
   788  1E34                     	;# 
   789  1E35                     	;# 
   790  1E36                     	;# 
   791  1E37                     	;# 
   792  1E8F                     	;# 
   793  1E90                     	;# 
   794  1E91                     	;# 
   795  1E92                     	;# 
   796  1E93                     	;# 
   797  1E9C                     	;# 
   798  1EA1                     	;# 
   799  1EA2                     	;# 
   800  1EB1                     	;# 
   801  1EBB                     	;# 
   802  1EBC                     	;# 
   803  1EBD                     	;# 
   804  1EBE                     	;# 
   805  1EC3                     	;# 
   806  1EC5                     	;# 
   807  1EC6                     	;# 
   808  1EC7                     	;# 
   809  1EC8                     	;# 
   810  1EC9                     	;# 
   811  1ECA                     	;# 
   812  1ECB                     	;# 
   813  1ECC                     	;# 
   814  1ECD                     	;# 
   815  1ECE                     	;# 
   816  1F10                     	;# 
   817  1F11                     	;# 
   818  1F12                     	;# 
   819  1F13                     	;# 
   820  1F14                     	;# 
   821  1F15                     	;# 
   822  1F16                     	;# 
   823  1F17                     	;# 
   824  1F18                     	;# 
   825  1F19                     	;# 
   826  1F1A                     	;# 
   827  1F1B                     	;# 
   828  1F1C                     	;# 
   829  1F1D                     	;# 
   830  1F1E                     	;# 
   831  1F1F                     	;# 
   832  1F20                     	;# 
   833  1F21                     	;# 
   834  1F22                     	;# 
   835  1F23                     	;# 
   836  1F24                     	;# 
   837  1F25                     	;# 
   838  1F26                     	;# 
   839  1F27                     	;# 
   840  1F38                     	;# 
   841  1F39                     	;# 
   842  1F3A                     	;# 
   843  1F3B                     	;# 
   844  1F3C                     	;# 
   845  1F3D                     	;# 
   846  1F3E                     	;# 
   847  1F3F                     	;# 
   848  1F43                     	;# 
   849  1F44                     	;# 
   850  1F45                     	;# 
   851  1F46                     	;# 
   852  1F47                     	;# 
   853  1F48                     	;# 
   854  1F49                     	;# 
   855  1F4A                     	;# 
   856  1F4E                     	;# 
   857  1F4F                     	;# 
   858  1F50                     	;# 
   859  1F51                     	;# 
   860  1F52                     	;# 
   861  1F53                     	;# 
   862  1F54                     	;# 
   863  1F55                     	;# 
   864  1F65                     	;# 
   865  1F68                     	;# 
   866  1F69                     	;# 
   867  1F6A                     	;# 
   868  1F6B                     	;# 
   869  1FE4                     	;# 
   870  1FE5                     	;# 
   871  1FE6                     	;# 
   872  1FE7                     	;# 
   873  1FE8                     	;# 
   874  1FE8                     	;# 
   875  1FE9                     	;# 
   876  1FEA                     	;# 
   877  1FEB                     	;# 
   878  1FED                     	;# 
   879  1FEE                     	;# 
   880  1FEF                     	;# 
   881  0000                     	;# 
   882  0001                     	;# 
   883  0002                     	;# 
   884  0003                     	;# 
   885  0004                     	;# 
   886  0005                     	;# 
   887  0006                     	;# 
   888  0007                     	;# 
   889  0008                     	;# 
   890  0009                     	;# 
   891  000A                     	;# 
   892  000B                     	;# 
   893  000C                     	;# 
   894  000D                     	;# 
   895  000E                     	;# 
   896  0010                     	;# 
   897  0012                     	;# 
   898  0013                     	;# 
   899  0014                     	;# 
   900  0016                     	;# 
   901  0018                     	;# 
   902  0019                     	;# 
   903  001A                     	;# 
   904  009B                     	;# 
   905  009B                     	;# 
   906  009C                     	;# 
   907  009D                     	;# 
   908  009E                     	;# 
   909  009F                     	;# 
   910  0119                     	;# 
   911  0119                     	;# 
   912  0119                     	;# 
   913  011A                     	;# 
   914  011A                     	;# 
   915  011A                     	;# 
   916  011B                     	;# 
   917  011B                     	;# 
   918  011B                     	;# 
   919  011B                     	;# 
   920  011B                     	;# 
   921  011C                     	;# 
   922  011C                     	;# 
   923  011C                     	;# 
   924  011D                     	;# 
   925  011D                     	;# 
   926  011D                     	;# 
   927  011E                     	;# 
   928  011E                     	;# 
   929  011E                     	;# 
   930  011F                     	;# 
   931  011F                     	;# 
   932  011F                     	;# 
   933  011F                     	;# 
   934  011F                     	;# 
   935  018C                     	;# 
   936  018D                     	;# 
   937  018E                     	;# 
   938  018F                     	;# 
   939  0190                     	;# 
   940  0191                     	;# 
   941  0192                     	;# 
   942  0196                     	;# 
   943  0197                     	;# 
   944  0198                     	;# 
   945  0199                     	;# 
   946  019A                     	;# 
   947  019B                     	;# 
   948  019C                     	;# 
   949  020C                     	;# 
   950  020C                     	;# 
   951  020D                     	;# 
   952  020E                     	;# 
   953  020F                     	;# 
   954  020F                     	;# 
   955  0210                     	;# 
   956  0210                     	;# 
   957  0211                     	;# 
   958  0211                     	;# 
   959  028C                     	;# 
   960  028C                     	;# 
   961  028D                     	;# 
   962  028D                     	;# 
   963  028E                     	;# 
   964  028F                     	;# 
   965  0290                     	;# 
   966  0291                     	;# 
   967  030C                     	;# 
   968  030C                     	;# 
   969  030D                     	;# 
   970  030E                     	;# 
   971  030F                     	;# 
   972  0310                     	;# 
   973  0310                     	;# 
   974  0311                     	;# 
   975  0312                     	;# 
   976  0313                     	;# 
   977  0314                     	;# 
   978  0314                     	;# 
   979  0315                     	;# 
   980  0316                     	;# 
   981  0318                     	;# 
   982  0318                     	;# 
   983  0319                     	;# 
   984  031A                     	;# 
   985  031C                     	;# 
   986  031C                     	;# 
   987  031D                     	;# 
   988  031E                     	;# 
   989  038C                     	;# 
   990  038C                     	;# 
   991  038D                     	;# 
   992  038E                     	;# 
   993  058C                     	;# 
   994  058C                     	;# 
   995  058D                     	;# 
   996  058E                     	;# 
   997  058F                     	;# 
   998  058F                     	;# 
   999  0590                     	;# 
  1000  0591                     	;# 
  1001  0592                     	;# 
  1002  0593                     	;# 
  1003  059C                     	;# 
  1004  059C                     	;# 
  1005  059D                     	;# 
  1006  059D                     	;# 
  1007  059E                     	;# 
  1008  059F                     	;# 
  1009  060C                     	;# 
  1010  060D                     	;# 
  1011  060E                     	;# 
  1012  060F                     	;# 
  1013  0610                     	;# 
  1014  0611                     	;# 
  1015  0612                     	;# 
  1016  0613                     	;# 
  1017  0614                     	;# 
  1018  070C                     	;# 
  1019  070D                     	;# 
  1020  070E                     	;# 
  1021  070F                     	;# 
  1022  0710                     	;# 
  1023  0711                     	;# 
  1024  0712                     	;# 
  1025  0713                     	;# 
  1026  0716                     	;# 
  1027  0717                     	;# 
  1028  0718                     	;# 
  1029  0719                     	;# 
  1030  071A                     	;# 
  1031  071B                     	;# 
  1032  071C                     	;# 
  1033  071D                     	;# 
  1034  0796                     	;# 
  1035  0797                     	;# 
  1036  0798                     	;# 
  1037  0799                     	;# 
  1038  079A                     	;# 
  1039  079B                     	;# 
  1040  080C                     	;# 
  1041  080D                     	;# 
  1042  080E                     	;# 
  1043  080F                     	;# 
  1044  0810                     	;# 
  1045  0811                     	;# 
  1046  0812                     	;# 
  1047  0813                     	;# 
  1048  0814                     	;# 
  1049  081A                     	;# 
  1050  081A                     	;# 
  1051  081B                     	;# 
  1052  081C                     	;# 
  1053  081C                     	;# 
  1054  081D                     	;# 
  1055  081E                     	;# 
  1056  081F                     	;# 
  1057  088C                     	;# 
  1058  088D                     	;# 
  1059  088E                     	;# 
  1060  088F                     	;# 
  1061  0890                     	;# 
  1062  0891                     	;# 
  1063  0892                     	;# 
  1064  0893                     	;# 
  1065  0895                     	;# 
  1066  0896                     	;# 
  1067  090C                     	;# 
  1068  090E                     	;# 
  1069  090F                     	;# 
  1070  091F                     	;# 
  1071  098F                     	;# 
  1072  098F                     	;# 
  1073  0990                     	;# 
  1074  0991                     	;# 
  1075  0992                     	;# 
  1076  0993                     	;# 
  1077  0994                     	;# 
  1078  0995                     	;# 
  1079  0996                     	;# 
  1080  0997                     	;# 
  1081  0A19                     	;# 
  1082  0A19                     	;# 
  1083  0A1A                     	;# 
  1084  0A1A                     	;# 
  1085  0A1B                     	;# 
  1086  0A1B                     	;# 
  1087  0A1B                     	;# 
  1088  0A1C                     	;# 
  1089  0A1C                     	;# 
  1090  0A1D                     	;# 
  1091  0A1D                     	;# 
  1092  0A1E                     	;# 
  1093  0A1E                     	;# 
  1094  0A1F                     	;# 
  1095  0A1F                     	;# 
  1096  0A1F                     	;# 
  1097  1E0F                     	;# 
  1098  1E10                     	;# 
  1099  1E11                     	;# 
  1100  1E12                     	;# 
  1101  1E13                     	;# 
  1102  1E14                     	;# 
  1103  1E15                     	;# 
  1104  1E16                     	;# 
  1105  1E17                     	;# 
  1106  1E18                     	;# 
  1107  1E19                     	;# 
  1108  1E1A                     	;# 
  1109  1E1B                     	;# 
  1110  1E1C                     	;# 
  1111  1E1D                     	;# 
  1112  1E1E                     	;# 
  1113  1E1F                     	;# 
  1114  1E20                     	;# 
  1115  1E21                     	;# 
  1116  1E22                     	;# 
  1117  1E23                     	;# 
  1118  1E24                     	;# 
  1119  1E25                     	;# 
  1120  1E26                     	;# 
  1121  1E27                     	;# 
  1122  1E28                     	;# 
  1123  1E29                     	;# 
  1124  1E2A                     	;# 
  1125  1E2B                     	;# 
  1126  1E2C                     	;# 
  1127  1E2D                     	;# 
  1128  1E2E                     	;# 
  1129  1E2F                     	;# 
  1130  1E30                     	;# 
  1131  1E31                     	;# 
  1132  1E32                     	;# 
  1133  1E33                     	;# 
  1134  1E34                     	;# 
  1135  1E35                     	;# 
  1136  1E36                     	;# 
  1137  1E37                     	;# 
  1138  1E8F                     	;# 
  1139  1E90                     	;# 
  1140  1E91                     	;# 
  1141  1E92                     	;# 
  1142  1E93                     	;# 
  1143  1E9C                     	;# 
  1144  1EA1                     	;# 
  1145  1EA2                     	;# 
  1146  1EB1                     	;# 
  1147  1EBB                     	;# 
  1148  1EBC                     	;# 
  1149  1EBD                     	;# 
  1150  1EBE                     	;# 
  1151  1EC3                     	;# 
  1152  1EC5                     	;# 
  1153  1EC6                     	;# 
  1154  1EC7                     	;# 
  1155  1EC8                     	;# 
  1156  1EC9                     	;# 
  1157  1ECA                     	;# 
  1158  1ECB                     	;# 
  1159  1ECC                     	;# 
  1160  1ECD                     	;# 
  1161  1ECE                     	;# 
  1162  1F10                     	;# 
  1163  1F11                     	;# 
  1164  1F12                     	;# 
  1165  1F13                     	;# 
  1166  1F14                     	;# 
  1167  1F15                     	;# 
  1168  1F16                     	;# 
  1169  1F17                     	;# 
  1170  1F18                     	;# 
  1171  1F19                     	;# 
  1172  1F1A                     	;# 
  1173  1F1B                     	;# 
  1174  1F1C                     	;# 
  1175  1F1D                     	;# 
  1176  1F1E                     	;# 
  1177  1F1F                     	;# 
  1178  1F20                     	;# 
  1179  1F21                     	;# 
  1180  1F22                     	;# 
  1181  1F23                     	;# 
  1182  1F24                     	;# 
  1183  1F25                     	;# 
  1184  1F26                     	;# 
  1185  1F27                     	;# 
  1186  1F38                     	;# 
  1187  1F39                     	;# 
  1188  1F3A                     	;# 
  1189  1F3B                     	;# 
  1190  1F3C                     	;# 
  1191  1F3D                     	;# 
  1192  1F3E                     	;# 
  1193  1F3F                     	;# 
  1194  1F43                     	;# 
  1195  1F44                     	;# 
  1196  1F45                     	;# 
  1197  1F46                     	;# 
  1198  1F47                     	;# 
  1199  1F48                     	;# 
  1200  1F49                     	;# 
  1201  1F4A                     	;# 
  1202  1F4E                     	;# 
  1203  1F4F                     	;# 
  1204  1F50                     	;# 
  1205  1F51                     	;# 
  1206  1F52                     	;# 
  1207  1F53                     	;# 
  1208  1F54                     	;# 
  1209  1F55                     	;# 
  1210  1F65                     	;# 
  1211  1F68                     	;# 
  1212  1F69                     	;# 
  1213  1F6A                     	;# 
  1214  1F6B                     	;# 
  1215  1FE4                     	;# 
  1216  1FE5                     	;# 
  1217  1FE6                     	;# 
  1218  1FE7                     	;# 
  1219  1FE8                     	;# 
  1220  1FE8                     	;# 
  1221  1FE9                     	;# 
  1222  1FEA                     	;# 
  1223  1FEB                     	;# 
  1224  1FED                     	;# 
  1225  1FEE                     	;# 
  1226  1FEF                     	;# 
  1227  0000                     	;# 
  1228  0001                     	;# 
  1229  0002                     	;# 
  1230  0003                     	;# 
  1231  0004                     	;# 
  1232  0005                     	;# 
  1233  0006                     	;# 
  1234  0007                     	;# 
  1235  0008                     	;# 
  1236  0009                     	;# 
  1237  000A                     	;# 
  1238  000B                     	;# 
  1239  000C                     	;# 
  1240  000D                     	;# 
  1241  000E                     	;# 
  1242  0010                     	;# 
  1243  0012                     	;# 
  1244  0013                     	;# 
  1245  0014                     	;# 
  1246  0016                     	;# 
  1247  0018                     	;# 
  1248  0019                     	;# 
  1249  001A                     	;# 
  1250  009B                     	;# 
  1251  009B                     	;# 
  1252  009C                     	;# 
  1253  009D                     	;# 
  1254  009E                     	;# 
  1255  009F                     	;# 
  1256  0119                     	;# 
  1257  0119                     	;# 
  1258  0119                     	;# 
  1259  011A                     	;# 
  1260  011A                     	;# 
  1261  011A                     	;# 
  1262  011B                     	;# 
  1263  011B                     	;# 
  1264  011B                     	;# 
  1265  011B                     	;# 
  1266  011B                     	;# 
  1267  011C                     	;# 
  1268  011C                     	;# 
  1269  011C                     	;# 
  1270  011D                     	;# 
  1271  011D                     	;# 
  1272  011D                     	;# 
  1273  011E                     	;# 
  1274  011E                     	;# 
  1275  011E                     	;# 
  1276  011F                     	;# 
  1277  011F                     	;# 
  1278  011F                     	;# 
  1279  011F                     	;# 
  1280  011F                     	;# 
  1281  018C                     	;# 
  1282  018D                     	;# 
  1283  018E                     	;# 
  1284  018F                     	;# 
  1285  0190                     	;# 
  1286  0191                     	;# 
  1287  0192                     	;# 
  1288  0196                     	;# 
  1289  0197                     	;# 
  1290  0198                     	;# 
  1291  0199                     	;# 
  1292  019A                     	;# 
  1293  019B                     	;# 
  1294  019C                     	;# 
  1295  020C                     	;# 
  1296  020C                     	;# 
  1297  020D                     	;# 
  1298  020E                     	;# 
  1299  020F                     	;# 
  1300  020F                     	;# 
  1301  0210                     	;# 
  1302  0210                     	;# 
  1303  0211                     	;# 
  1304  0211                     	;# 
  1305  028C                     	;# 
  1306  028C                     	;# 
  1307  028D                     	;# 
  1308  028D                     	;# 
  1309  028E                     	;# 
  1310  028F                     	;# 
  1311  0290                     	;# 
  1312  0291                     	;# 
  1313  030C                     	;# 
  1314  030C                     	;# 
  1315  030D                     	;# 
  1316  030E                     	;# 
  1317  030F                     	;# 
  1318  0310                     	;# 
  1319  0310                     	;# 
  1320  0311                     	;# 
  1321  0312                     	;# 
  1322  0313                     	;# 
  1323  0314                     	;# 
  1324  0314                     	;# 
  1325  0315                     	;# 
  1326  0316                     	;# 
  1327  0318                     	;# 
  1328  0318                     	;# 
  1329  0319                     	;# 
  1330  031A                     	;# 
  1331  031C                     	;# 
  1332  031C                     	;# 
  1333  031D                     	;# 
  1334  031E                     	;# 
  1335  038C                     	;# 
  1336  038C                     	;# 
  1337  038D                     	;# 
  1338  038E                     	;# 
  1339  058C                     	;# 
  1340  058C                     	;# 
  1341  058D                     	;# 
  1342  058E                     	;# 
  1343  058F                     	;# 
  1344  058F                     	;# 
  1345  0590                     	;# 
  1346  0591                     	;# 
  1347  0592                     	;# 
  1348  0593                     	;# 
  1349  059C                     	;# 
  1350  059C                     	;# 
  1351  059D                     	;# 
  1352  059D                     	;# 
  1353  059E                     	;# 
  1354  059F                     	;# 
  1355  060C                     	;# 
  1356  060D                     	;# 
  1357  060E                     	;# 
  1358  060F                     	;# 
  1359  0610                     	;# 
  1360  0611                     	;# 
  1361  0612                     	;# 
  1362  0613                     	;# 
  1363  0614                     	;# 
  1364  070C                     	;# 
  1365  070D                     	;# 
  1366  070E                     	;# 
  1367  070F                     	;# 
  1368  0710                     	;# 
  1369  0711                     	;# 
  1370  0712                     	;# 
  1371  0713                     	;# 
  1372  0716                     	;# 
  1373  0717                     	;# 
  1374  0718                     	;# 
  1375  0719                     	;# 
  1376  071A                     	;# 
  1377  071B                     	;# 
  1378  071C                     	;# 
  1379  071D                     	;# 
  1380  0796                     	;# 
  1381  0797                     	;# 
  1382  0798                     	;# 
  1383  0799                     	;# 
  1384  079A                     	;# 
  1385  079B                     	;# 
  1386  080C                     	;# 
  1387  080D                     	;# 
  1388  080E                     	;# 
  1389  080F                     	;# 
  1390  0810                     	;# 
  1391  0811                     	;# 
  1392  0812                     	;# 
  1393  0813                     	;# 
  1394  0814                     	;# 
  1395  081A                     	;# 
  1396  081A                     	;# 
  1397  081B                     	;# 
  1398  081C                     	;# 
  1399  081C                     	;# 
  1400  081D                     	;# 
  1401  081E                     	;# 
  1402  081F                     	;# 
  1403  088C                     	;# 
  1404  088D                     	;# 
  1405  088E                     	;# 
  1406  088F                     	;# 
  1407  0890                     	;# 
  1408  0891                     	;# 
  1409  0892                     	;# 
  1410  0893                     	;# 
  1411  0895                     	;# 
  1412  0896                     	;# 
  1413  090C                     	;# 
  1414  090E                     	;# 
  1415  090F                     	;# 
  1416  091F                     	;# 
  1417  098F                     	;# 
  1418  098F                     	;# 
  1419  0990                     	;# 
  1420  0991                     	;# 
  1421  0992                     	;# 
  1422  0993                     	;# 
  1423  0994                     	;# 
  1424  0995                     	;# 
  1425  0996                     	;# 
  1426  0997                     	;# 
  1427  0A19                     	;# 
  1428  0A19                     	;# 
  1429  0A1A                     	;# 
  1430  0A1A                     	;# 
  1431  0A1B                     	;# 
  1432  0A1B                     	;# 
  1433  0A1B                     	;# 
  1434  0A1C                     	;# 
  1435  0A1C                     	;# 
  1436  0A1D                     	;# 
  1437  0A1D                     	;# 
  1438  0A1E                     	;# 
  1439  0A1E                     	;# 
  1440  0A1F                     	;# 
  1441  0A1F                     	;# 
  1442  0A1F                     	;# 
  1443  1E0F                     	;# 
  1444  1E10                     	;# 
  1445  1E11                     	;# 
  1446  1E12                     	;# 
  1447  1E13                     	;# 
  1448  1E14                     	;# 
  1449  1E15                     	;# 
  1450  1E16                     	;# 
  1451  1E17                     	;# 
  1452  1E18                     	;# 
  1453  1E19                     	;# 
  1454  1E1A                     	;# 
  1455  1E1B                     	;# 
  1456  1E1C                     	;# 
  1457  1E1D                     	;# 
  1458  1E1E                     	;# 
  1459  1E1F                     	;# 
  1460  1E20                     	;# 
  1461  1E21                     	;# 
  1462  1E22                     	;# 
  1463  1E23                     	;# 
  1464  1E24                     	;# 
  1465  1E25                     	;# 
  1466  1E26                     	;# 
  1467  1E27                     	;# 
  1468  1E28                     	;# 
  1469  1E29                     	;# 
  1470  1E2A                     	;# 
  1471  1E2B                     	;# 
  1472  1E2C                     	;# 
  1473  1E2D                     	;# 
  1474  1E2E                     	;# 
  1475  1E2F                     	;# 
  1476  1E30                     	;# 
  1477  1E31                     	;# 
  1478  1E32                     	;# 
  1479  1E33                     	;# 
  1480  1E34                     	;# 
  1481  1E35                     	;# 
  1482  1E36                     	;# 
  1483  1E37                     	;# 
  1484  1E8F                     	;# 
  1485  1E90                     	;# 
  1486  1E91                     	;# 
  1487  1E92                     	;# 
  1488  1E93                     	;# 
  1489  1E9C                     	;# 
  1490  1EA1                     	;# 
  1491  1EA2                     	;# 
  1492  1EB1                     	;# 
  1493  1EBB                     	;# 
  1494  1EBC                     	;# 
  1495  1EBD                     	;# 
  1496  1EBE                     	;# 
  1497  1EC3                     	;# 
  1498  1EC5                     	;# 
  1499  1EC6                     	;# 
  1500  1EC7                     	;# 
  1501  1EC8                     	;# 
  1502  1EC9                     	;# 
  1503  1ECA                     	;# 
  1504  1ECB                     	;# 
  1505  1ECC                     	;# 
  1506  1ECD                     	;# 
  1507  1ECE                     	;# 
  1508  1F10                     	;# 
  1509  1F11                     	;# 
  1510  1F12                     	;# 
  1511  1F13                     	;# 
  1512  1F14                     	;# 
  1513  1F15                     	;# 
  1514  1F16                     	;# 
  1515  1F17                     	;# 
  1516  1F18                     	;# 
  1517  1F19                     	;# 
  1518  1F1A                     	;# 
  1519  1F1B                     	;# 
  1520  1F1C                     	;# 
  1521  1F1D                     	;# 
  1522  1F1E                     	;# 
  1523  1F1F                     	;# 
  1524  1F20                     	;# 
  1525  1F21                     	;# 
  1526  1F22                     	;# 
  1527  1F23                     	;# 
  1528  1F24                     	;# 
  1529  1F25                     	;# 
  1530  1F26                     	;# 
  1531  1F27                     	;# 
  1532  1F38                     	;# 
  1533  1F39                     	;# 
  1534  1F3A                     	;# 
  1535  1F3B                     	;# 
  1536  1F3C                     	;# 
  1537  1F3D                     	;# 
  1538  1F3E                     	;# 
  1539  1F3F                     	;# 
  1540  1F43                     	;# 
  1541  1F44                     	;# 
  1542  1F45                     	;# 
  1543  1F46                     	;# 
  1544  1F47                     	;# 
  1545  1F48                     	;# 
  1546  1F49                     	;# 
  1547  1F4A                     	;# 
  1548  1F4E                     	;# 
  1549  1F4F                     	;# 
  1550  1F50                     	;# 
  1551  1F51                     	;# 
  1552  1F52                     	;# 
  1553  1F53                     	;# 
  1554  1F54                     	;# 
  1555  1F55                     	;# 
  1556  1F65                     	;# 
  1557  1F68                     	;# 
  1558  1F69                     	;# 
  1559  1F6A                     	;# 
  1560  1F6B                     	;# 
  1561  1FE4                     	;# 
  1562  1FE5                     	;# 
  1563  1FE6                     	;# 
  1564  1FE7                     	;# 
  1565  1FE8                     	;# 
  1566  1FE8                     	;# 
  1567  1FE9                     	;# 
  1568  1FEA                     	;# 
  1569  1FEB                     	;# 
  1570  1FED                     	;# 
  1571  1FEE                     	;# 
  1572  1FEF                     	;# 
  1573  0000                     	;# 
  1574  0001                     	;# 
  1575  0002                     	;# 
  1576  0003                     	;# 
  1577  0004                     	;# 
  1578  0005                     	;# 
  1579  0006                     	;# 
  1580  0007                     	;# 
  1581  0008                     	;# 
  1582  0009                     	;# 
  1583  000A                     	;# 
  1584  000B                     	;# 
  1585  000C                     	;# 
  1586  000D                     	;# 
  1587  000E                     	;# 
  1588  0010                     	;# 
  1589  0012                     	;# 
  1590  0013                     	;# 
  1591  0014                     	;# 
  1592  0016                     	;# 
  1593  0018                     	;# 
  1594  0019                     	;# 
  1595  001A                     	;# 
  1596  009B                     	;# 
  1597  009B                     	;# 
  1598  009C                     	;# 
  1599  009D                     	;# 
  1600  009E                     	;# 
  1601  009F                     	;# 
  1602  0119                     	;# 
  1603  0119                     	;# 
  1604  0119                     	;# 
  1605  011A                     	;# 
  1606  011A                     	;# 
  1607  011A                     	;# 
  1608  011B                     	;# 
  1609  011B                     	;# 
  1610  011B                     	;# 
  1611  011B                     	;# 
  1612  011B                     	;# 
  1613  011C                     	;# 
  1614  011C                     	;# 
  1615  011C                     	;# 
  1616  011D                     	;# 
  1617  011D                     	;# 
  1618  011D                     	;# 
  1619  011E                     	;# 
  1620  011E                     	;# 
  1621  011E                     	;# 
  1622  011F                     	;# 
  1623  011F                     	;# 
  1624  011F                     	;# 
  1625  011F                     	;# 
  1626  011F                     	;# 
  1627  018C                     	;# 
  1628  018D                     	;# 
  1629  018E                     	;# 
  1630  018F                     	;# 
  1631  0190                     	;# 
  1632  0191                     	;# 
  1633  0192                     	;# 
  1634  0196                     	;# 
  1635  0197                     	;# 
  1636  0198                     	;# 
  1637  0199                     	;# 
  1638  019A                     	;# 
  1639  019B                     	;# 
  1640  019C                     	;# 
  1641  020C                     	;# 
  1642  020C                     	;# 
  1643  020D                     	;# 
  1644  020E                     	;# 
  1645  020F                     	;# 
  1646  020F                     	;# 
  1647  0210                     	;# 
  1648  0210                     	;# 
  1649  0211                     	;# 
  1650  0211                     	;# 
  1651  028C                     	;# 
  1652  028C                     	;# 
  1653  028D                     	;# 
  1654  028D                     	;# 
  1655  028E                     	;# 
  1656  028F                     	;# 
  1657  0290                     	;# 
  1658  0291                     	;# 
  1659  030C                     	;# 
  1660  030C                     	;# 
  1661  030D                     	;# 
  1662  030E                     	;# 
  1663  030F                     	;# 
  1664  0310                     	;# 
  1665  0310                     	;# 
  1666  0311                     	;# 
  1667  0312                     	;# 
  1668  0313                     	;# 
  1669  0314                     	;# 
  1670  0314                     	;# 
  1671  0315                     	;# 
  1672  0316                     	;# 
  1673  0318                     	;# 
  1674  0318                     	;# 
  1675  0319                     	;# 
  1676  031A                     	;# 
  1677  031C                     	;# 
  1678  031C                     	;# 
  1679  031D                     	;# 
  1680  031E                     	;# 
  1681  038C                     	;# 
  1682  038C                     	;# 
  1683  038D                     	;# 
  1684  038E                     	;# 
  1685  058C                     	;# 
  1686  058C                     	;# 
  1687  058D                     	;# 
  1688  058E                     	;# 
  1689  058F                     	;# 
  1690  058F                     	;# 
  1691  0590                     	;# 
  1692  0591                     	;# 
  1693  0592                     	;# 
  1694  0593                     	;# 
  1695  059C                     	;# 
  1696  059C                     	;# 
  1697  059D                     	;# 
  1698  059D                     	;# 
  1699  059E                     	;# 
  1700  059F                     	;# 
  1701  060C                     	;# 
  1702  060D                     	;# 
  1703  060E                     	;# 
  1704  060F                     	;# 
  1705  0610                     	;# 
  1706  0611                     	;# 
  1707  0612                     	;# 
  1708  0613                     	;# 
  1709  0614                     	;# 
  1710  070C                     	;# 
  1711  070D                     	;# 
  1712  070E                     	;# 
  1713  070F                     	;# 
  1714  0710                     	;# 
  1715  0711                     	;# 
  1716  0712                     	;# 
  1717  0713                     	;# 
  1718  0716                     	;# 
  1719  0717                     	;# 
  1720  0718                     	;# 
  1721  0719                     	;# 
  1722  071A                     	;# 
  1723  071B                     	;# 
  1724  071C                     	;# 
  1725  071D                     	;# 
  1726  0796                     	;# 
  1727  0797                     	;# 
  1728  0798                     	;# 
  1729  0799                     	;# 
  1730  079A                     	;# 
  1731  079B                     	;# 
  1732  080C                     	;# 
  1733  080D                     	;# 
  1734  080E                     	;# 
  1735  080F                     	;# 
  1736  0810                     	;# 
  1737  0811                     	;# 
  1738  0812                     	;# 
  1739  0813                     	;# 
  1740  0814                     	;# 
  1741  081A                     	;# 
  1742  081A                     	;# 
  1743  081B                     	;# 
  1744  081C                     	;# 
  1745  081C                     	;# 
  1746  081D                     	;# 
  1747  081E                     	;# 
  1748  081F                     	;# 
  1749  088C                     	;# 
  1750  088D                     	;# 
  1751  088E                     	;# 
  1752  088F                     	;# 
  1753  0890                     	;# 
  1754  0891                     	;# 
  1755  0892                     	;# 
  1756  0893                     	;# 
  1757  0895                     	;# 
  1758  0896                     	;# 
  1759  090C                     	;# 
  1760  090E                     	;# 
  1761  090F                     	;# 
  1762  091F                     	;# 
  1763  098F                     	;# 
  1764  098F                     	;# 
  1765  0990                     	;# 
  1766  0991                     	;# 
  1767  0992                     	;# 
  1768  0993                     	;# 
  1769  0994                     	;# 
  1770  0995                     	;# 
  1771  0996                     	;# 
  1772  0997                     	;# 
  1773  0A19                     	;# 
  1774  0A19                     	;# 
  1775  0A1A                     	;# 
  1776  0A1A                     	;# 
  1777  0A1B                     	;# 
  1778  0A1B                     	;# 
  1779  0A1B                     	;# 
  1780  0A1C                     	;# 
  1781  0A1C                     	;# 
  1782  0A1D                     	;# 
  1783  0A1D                     	;# 
  1784  0A1E                     	;# 
  1785  0A1E                     	;# 
  1786  0A1F                     	;# 
  1787  0A1F                     	;# 
  1788  0A1F                     	;# 
  1789  1E0F                     	;# 
  1790  1E10                     	;# 
  1791  1E11                     	;# 
  1792  1E12                     	;# 
  1793  1E13                     	;# 
  1794  1E14                     	;# 
  1795  1E15                     	;# 
  1796  1E16                     	;# 
  1797  1E17                     	;# 
  1798  1E18                     	;# 
  1799  1E19                     	;# 
  1800  1E1A                     	;# 
  1801  1E1B                     	;# 
  1802  1E1C                     	;# 
  1803  1E1D                     	;# 
  1804  1E1E                     	;# 
  1805  1E1F                     	;# 
  1806  1E20                     	;# 
  1807  1E21                     	;# 
  1808  1E22                     	;# 
  1809  1E23                     	;# 
  1810  1E24                     	;# 
  1811  1E25                     	;# 
  1812  1E26                     	;# 
  1813  1E27                     	;# 
  1814  1E28                     	;# 
  1815  1E29                     	;# 
  1816  1E2A                     	;# 
  1817  1E2B                     	;# 
  1818  1E2C                     	;# 
  1819  1E2D                     	;# 
  1820  1E2E                     	;# 
  1821  1E2F                     	;# 
  1822  1E30                     	;# 
  1823  1E31                     	;# 
  1824  1E32                     	;# 
  1825  1E33                     	;# 
  1826  1E34                     	;# 
  1827  1E35                     	;# 
  1828  1E36                     	;# 
  1829  1E37                     	;# 
  1830  1E8F                     	;# 
  1831  1E90                     	;# 
  1832  1E91                     	;# 
  1833  1E92                     	;# 
  1834  1E93                     	;# 
  1835  1E9C                     	;# 
  1836  1EA1                     	;# 
  1837  1EA2                     	;# 
  1838  1EB1                     	;# 
  1839  1EBB                     	;# 
  1840  1EBC                     	;# 
  1841  1EBD                     	;# 
  1842  1EBE                     	;# 
  1843  1EC3                     	;# 
  1844  1EC5                     	;# 
  1845  1EC6                     	;# 
  1846  1EC7                     	;# 
  1847  1EC8                     	;# 
  1848  1EC9                     	;# 
  1849  1ECA                     	;# 
  1850  1ECB                     	;# 
  1851  1ECC                     	;# 
  1852  1ECD                     	;# 
  1853  1ECE                     	;# 
  1854  1F10                     	;# 
  1855  1F11                     	;# 
  1856  1F12                     	;# 
  1857  1F13                     	;# 
  1858  1F14                     	;# 
  1859  1F15                     	;# 
  1860  1F16                     	;# 
  1861  1F17                     	;# 
  1862  1F18                     	;# 
  1863  1F19                     	;# 
  1864  1F1A                     	;# 
  1865  1F1B                     	;# 
  1866  1F1C                     	;# 
  1867  1F1D                     	;# 
  1868  1F1E                     	;# 
  1869  1F1F                     	;# 
  1870  1F20                     	;# 
  1871  1F21                     	;# 
  1872  1F22                     	;# 
  1873  1F23                     	;# 
  1874  1F24                     	;# 
  1875  1F25                     	;# 
  1876  1F26                     	;# 
  1877  1F27                     	;# 
  1878  1F38                     	;# 
  1879  1F39                     	;# 
  1880  1F3A                     	;# 
  1881  1F3B                     	;# 
  1882  1F3C                     	;# 
  1883  1F3D                     	;# 
  1884  1F3E                     	;# 
  1885  1F3F                     	;# 
  1886  1F43                     	;# 
  1887  1F44                     	;# 
  1888  1F45                     	;# 
  1889  1F46                     	;# 
  1890  1F47                     	;# 
  1891  1F48                     	;# 
  1892  1F49                     	;# 
  1893  1F4A                     	;# 
  1894  1F4E                     	;# 
  1895  1F4F                     	;# 
  1896  1F50                     	;# 
  1897  1F51                     	;# 
  1898  1F52                     	;# 
  1899  1F53                     	;# 
  1900  1F54                     	;# 
  1901  1F55                     	;# 
  1902  1F65                     	;# 
  1903  1F68                     	;# 
  1904  1F69                     	;# 
  1905  1F6A                     	;# 
  1906  1F6B                     	;# 
  1907  1FE4                     	;# 
  1908  1FE5                     	;# 
  1909  1FE6                     	;# 
  1910  1FE7                     	;# 
  1911  1FE8                     	;# 
  1912  1FE8                     	;# 
  1913  1FE9                     	;# 
  1914  1FEA                     	;# 
  1915  1FEB                     	;# 
  1916  1FED                     	;# 
  1917  1FEE                     	;# 
  1918  1FEF                     	;# 
  1919  0000                     	;# 
  1920  0001                     	;# 
  1921  0002                     	;# 
  1922  0003                     	;# 
  1923  0004                     	;# 
  1924  0005                     	;# 
  1925  0006                     	;# 
  1926  0007                     	;# 
  1927  0008                     	;# 
  1928  0009                     	;# 
  1929  000A                     	;# 
  1930  000B                     	;# 
  1931  000C                     	;# 
  1932  000D                     	;# 
  1933  000E                     	;# 
  1934  0010                     	;# 
  1935  0012                     	;# 
  1936  0013                     	;# 
  1937  0014                     	;# 
  1938  0016                     	;# 
  1939  0018                     	;# 
  1940  0019                     	;# 
  1941  001A                     	;# 
  1942  009B                     	;# 
  1943  009B                     	;# 
  1944  009C                     	;# 
  1945  009D                     	;# 
  1946  009E                     	;# 
  1947  009F                     	;# 
  1948  0119                     	;# 
  1949  0119                     	;# 
  1950  0119                     	;# 
  1951  011A                     	;# 
  1952  011A                     	;# 
  1953  011A                     	;# 
  1954  011B                     	;# 
  1955  011B                     	;# 
  1956  011B                     	;# 
  1957  011B                     	;# 
  1958  011B                     	;# 
  1959  011C                     	;# 
  1960  011C                     	;# 
  1961  011C                     	;# 
  1962  011D                     	;# 
  1963  011D                     	;# 
  1964  011D                     	;# 
  1965  011E                     	;# 
  1966  011E                     	;# 
  1967  011E                     	;# 
  1968  011F                     	;# 
  1969  011F                     	;# 
  1970  011F                     	;# 
  1971  011F                     	;# 
  1972  011F                     	;# 
  1973  018C                     	;# 
  1974  018D                     	;# 
  1975  018E                     	;# 
  1976  018F                     	;# 
  1977  0190                     	;# 
  1978  0191                     	;# 
  1979  0192                     	;# 
  1980  0196                     	;# 
  1981  0197                     	;# 
  1982  0198                     	;# 
  1983  0199                     	;# 
  1984  019A                     	;# 
  1985  019B                     	;# 
  1986  019C                     	;# 
  1987  020C                     	;# 
  1988  020C                     	;# 
  1989  020D                     	;# 
  1990  020E                     	;# 
  1991  020F                     	;# 
  1992  020F                     	;# 
  1993  0210                     	;# 
  1994  0210                     	;# 
  1995  0211                     	;# 
  1996  0211                     	;# 
  1997  028C                     	;# 
  1998  028C                     	;# 
  1999  028D                     	;# 
  2000  028D                     	;# 
  2001  028E                     	;# 
  2002  028F                     	;# 
  2003  0290                     	;# 
  2004  0291                     	;# 
  2005  030C                     	;# 
  2006  030C                     	;# 
  2007  030D                     	;# 
  2008  030E                     	;# 
  2009  030F                     	;# 
  2010  0310                     	;# 
  2011  0310                     	;# 
  2012  0311                     	;# 
  2013  0312                     	;# 
  2014  0313                     	;# 
  2015  0314                     	;# 
  2016  0314                     	;# 
  2017  0315                     	;# 
  2018  0316                     	;# 
  2019  0318                     	;# 
  2020  0318                     	;# 
  2021  0319                     	;# 
  2022  031A                     	;# 
  2023  031C                     	;# 
  2024  031C                     	;# 
  2025  031D                     	;# 
  2026  031E                     	;# 
  2027  038C                     	;# 
  2028  038C                     	;# 
  2029  038D                     	;# 
  2030  038E                     	;# 
  2031  058C                     	;# 
  2032  058C                     	;# 
  2033  058D                     	;# 
  2034  058E                     	;# 
  2035  058F                     	;# 
  2036  058F                     	;# 
  2037  0590                     	;# 
  2038  0591                     	;# 
  2039  0592                     	;# 
  2040  0593                     	;# 
  2041  059C                     	;# 
  2042  059C                     	;# 
  2043  059D                     	;# 
  2044  059D                     	;# 
  2045  059E                     	;# 
  2046  059F                     	;# 
  2047  060C                     	;# 
  2048  060D                     	;# 
  2049  060E                     	;# 
  2050  060F                     	;# 
  2051  0610                     	;# 
  2052  0611                     	;# 
  2053  0612                     	;# 
  2054  0613                     	;# 
  2055  0614                     	;# 
  2056  070C                     	;# 
  2057  070D                     	;# 
  2058  070E                     	;# 
  2059  070F                     	;# 
  2060  0710                     	;# 
  2061  0711                     	;# 
  2062  0712                     	;# 
  2063  0713                     	;# 
  2064  0716                     	;# 
  2065  0717                     	;# 
  2066  0718                     	;# 
  2067  0719                     	;# 
  2068  071A                     	;# 
  2069  071B                     	;# 
  2070  071C                     	;# 
  2071  071D                     	;# 
  2072  0796                     	;# 
  2073  0797                     	;# 
  2074  0798                     	;# 
  2075  0799                     	;# 
  2076  079A                     	;# 
  2077  079B                     	;# 
  2078  080C                     	;# 
  2079  080D                     	;# 
  2080  080E                     	;# 
  2081  080F                     	;# 
  2082  0810                     	;# 
  2083  0811                     	;# 
  2084  0812                     	;# 
  2085  0813                     	;# 
  2086  0814                     	;# 
  2087  081A                     	;# 
  2088  081A                     	;# 
  2089  081B                     	;# 
  2090  081C                     	;# 
  2091  081C                     	;# 
  2092  081D                     	;# 
  2093  081E                     	;# 
  2094  081F                     	;# 
  2095  088C                     	;# 
  2096  088D                     	;# 
  2097  088E                     	;# 
  2098  088F                     	;# 
  2099  0890                     	;# 
  2100  0891                     	;# 
  2101  0892                     	;# 
  2102  0893                     	;# 
  2103  0895                     	;# 
  2104  0896                     	;# 
  2105  090C                     	;# 
  2106  090E                     	;# 
  2107  090F                     	;# 
  2108  091F                     	;# 
  2109  098F                     	;# 
  2110  098F                     	;# 
  2111  0990                     	;# 
  2112  0991                     	;# 
  2113  0992                     	;# 
  2114  0993                     	;# 
  2115  0994                     	;# 
  2116  0995                     	;# 
  2117  0996                     	;# 
  2118  0997                     	;# 
  2119  0A19                     	;# 
  2120  0A19                     	;# 
  2121  0A1A                     	;# 
  2122  0A1A                     	;# 
  2123  0A1B                     	;# 
  2124  0A1B                     	;# 
  2125  0A1B                     	;# 
  2126  0A1C                     	;# 
  2127  0A1C                     	;# 
  2128  0A1D                     	;# 
  2129  0A1D                     	;# 
  2130  0A1E                     	;# 
  2131  0A1E                     	;# 
  2132  0A1F                     	;# 
  2133  0A1F                     	;# 
  2134  0A1F                     	;# 
  2135  1E0F                     	;# 
  2136  1E10                     	;# 
  2137  1E11                     	;# 
  2138  1E12                     	;# 
  2139  1E13                     	;# 
  2140  1E14                     	;# 
  2141  1E15                     	;# 
  2142  1E16                     	;# 
  2143  1E17                     	;# 
  2144  1E18                     	;# 
  2145  1E19                     	;# 
  2146  1E1A                     	;# 
  2147  1E1B                     	;# 
  2148  1E1C                     	;# 
  2149  1E1D                     	;# 
  2150  1E1E                     	;# 
  2151  1E1F                     	;# 
  2152  1E20                     	;# 
  2153  1E21                     	;# 
  2154  1E22                     	;# 
  2155  1E23                     	;# 
  2156  1E24                     	;# 
  2157  1E25                     	;# 
  2158  1E26                     	;# 
  2159  1E27                     	;# 
  2160  1E28                     	;# 
  2161  1E29                     	;# 
  2162  1E2A                     	;# 
  2163  1E2B                     	;# 
  2164  1E2C                     	;# 
  2165  1E2D                     	;# 
  2166  1E2E                     	;# 
  2167  1E2F                     	;# 
  2168  1E30                     	;# 
  2169  1E31                     	;# 
  2170  1E32                     	;# 
  2171  1E33                     	;# 
  2172  1E34                     	;# 
  2173  1E35                     	;# 
  2174  1E36                     	;# 
  2175  1E37                     	;# 
  2176  1E8F                     	;# 
  2177  1E90                     	;# 
  2178  1E91                     	;# 
  2179  1E92                     	;# 
  2180  1E93                     	;# 
  2181  1E9C                     	;# 
  2182  1EA1                     	;# 
  2183  1EA2                     	;# 
  2184  1EB1                     	;# 
  2185  1EBB                     	;# 
  2186  1EBC                     	;# 
  2187  1EBD                     	;# 
  2188  1EBE                     	;# 
  2189  1EC3                     	;# 
  2190  1EC5                     	;# 
  2191  1EC6                     	;# 
  2192  1EC7                     	;# 
  2193  1EC8                     	;# 
  2194  1EC9                     	;# 
  2195  1ECA                     	;# 
  2196  1ECB                     	;# 
  2197  1ECC                     	;# 
  2198  1ECD                     	;# 
  2199  1ECE                     	;# 
  2200  1F10                     	;# 
  2201  1F11                     	;# 
  2202  1F12                     	;# 
  2203  1F13                     	;# 
  2204  1F14                     	;# 
  2205  1F15                     	;# 
  2206  1F16                     	;# 
  2207  1F17                     	;# 
  2208  1F18                     	;# 
  2209  1F19                     	;# 
  2210  1F1A                     	;# 
  2211  1F1B                     	;# 
  2212  1F1C                     	;# 
  2213  1F1D                     	;# 
  2214  1F1E                     	;# 
  2215  1F1F                     	;# 
  2216  1F20                     	;# 
  2217  1F21                     	;# 
  2218  1F22                     	;# 
  2219  1F23                     	;# 
  2220  1F24                     	;# 
  2221  1F25                     	;# 
  2222  1F26                     	;# 
  2223  1F27                     	;# 
  2224  1F38                     	;# 
  2225  1F39                     	;# 
  2226  1F3A                     	;# 
  2227  1F3B                     	;# 
  2228  1F3C                     	;# 
  2229  1F3D                     	;# 
  2230  1F3E                     	;# 
  2231  1F3F                     	;# 
  2232  1F43                     	;# 
  2233  1F44                     	;# 
  2234  1F45                     	;# 
  2235  1F46                     	;# 
  2236  1F47                     	;# 
  2237  1F48                     	;# 
  2238  1F49                     	;# 
  2239  1F4A                     	;# 
  2240  1F4E                     	;# 
  2241  1F4F                     	;# 
  2242  1F50                     	;# 
  2243  1F51                     	;# 
  2244  1F52                     	;# 
  2245  1F53                     	;# 
  2246  1F54                     	;# 
  2247  1F55                     	;# 
  2248  1F65                     	;# 
  2249  1F68                     	;# 
  2250  1F69                     	;# 
  2251  1F6A                     	;# 
  2252  1F6B                     	;# 
  2253  1FE4                     	;# 
  2254  1FE5                     	;# 
  2255  1FE6                     	;# 
  2256  1FE7                     	;# 
  2257  1FE8                     	;# 
  2258  1FE8                     	;# 
  2259  1FE9                     	;# 
  2260  1FEA                     	;# 
  2261  1FEB                     	;# 
  2262  1FED                     	;# 
  2263  1FEE                     	;# 
  2264  1FEF                     	;# 
  2265  0000                     	;# 
  2266  0001                     	;# 
  2267  0002                     	;# 
  2268  0003                     	;# 
  2269  0004                     	;# 
  2270  0005                     	;# 
  2271  0006                     	;# 
  2272  0007                     	;# 
  2273  0008                     	;# 
  2274  0009                     	;# 
  2275  000A                     	;# 
  2276  000B                     	;# 
  2277  000C                     	;# 
  2278  000D                     	;# 
  2279  000E                     	;# 
  2280  0010                     	;# 
  2281  0012                     	;# 
  2282  0013                     	;# 
  2283  0014                     	;# 
  2284  0016                     	;# 
  2285  0018                     	;# 
  2286  0019                     	;# 
  2287  001A                     	;# 
  2288  009B                     	;# 
  2289  009B                     	;# 
  2290  009C                     	;# 
  2291  009D                     	;# 
  2292  009E                     	;# 
  2293  009F                     	;# 
  2294  0119                     	;# 
  2295  0119                     	;# 
  2296  0119                     	;# 
  2297  011A                     	;# 
  2298  011A                     	;# 
  2299  011A                     	;# 
  2300  011B                     	;# 
  2301  011B                     	;# 
  2302  011B                     	;# 
  2303  011B                     	;# 
  2304  011B                     	;# 
  2305  011C                     	;# 
  2306  011C                     	;# 
  2307  011C                     	;# 
  2308  011D                     	;# 
  2309  011D                     	;# 
  2310  011D                     	;# 
  2311  011E                     	;# 
  2312  011E                     	;# 
  2313  011E                     	;# 
  2314  011F                     	;# 
  2315  011F                     	;# 
  2316  011F                     	;# 
  2317  011F                     	;# 
  2318  011F                     	;# 
  2319  018C                     	;# 
  2320  018D                     	;# 
  2321  018E                     	;# 
  2322  018F                     	;# 
  2323  0190                     	;# 
  2324  0191                     	;# 
  2325  0192                     	;# 
  2326  0196                     	;# 
  2327  0197                     	;# 
  2328  0198                     	;# 
  2329  0199                     	;# 
  2330  019A                     	;# 
  2331  019B                     	;# 
  2332  019C                     	;# 
  2333  020C                     	;# 
  2334  020C                     	;# 
  2335  020D                     	;# 
  2336  020E                     	;# 
  2337  020F                     	;# 
  2338  020F                     	;# 
  2339  0210                     	;# 
  2340  0210                     	;# 
  2341  0211                     	;# 
  2342  0211                     	;# 
  2343  028C                     	;# 
  2344  028C                     	;# 
  2345  028D                     	;# 
  2346  028D                     	;# 
  2347  028E                     	;# 
  2348  028F                     	;# 
  2349  0290                     	;# 
  2350  0291                     	;# 
  2351  030C                     	;# 
  2352  030C                     	;# 
  2353  030D                     	;# 
  2354  030E                     	;# 
  2355  030F                     	;# 
  2356  0310                     	;# 
  2357  0310                     	;# 
  2358  0311                     	;# 
  2359  0312                     	;# 
  2360  0313                     	;# 
  2361  0314                     	;# 
  2362  0314                     	;# 
  2363  0315                     	;# 
  2364  0316                     	;# 
  2365  0318                     	;# 
  2366  0318                     	;# 
  2367  0319                     	;# 
  2368  031A                     	;# 
  2369  031C                     	;# 
  2370  031C                     	;# 
  2371  031D                     	;# 
  2372  031E                     	;# 
  2373  038C                     	;# 
  2374  038C                     	;# 
  2375  038D                     	;# 
  2376  038E                     	;# 
  2377  058C                     	;# 
  2378  058C                     	;# 
  2379  058D                     	;# 
  2380  058E                     	;# 
  2381  058F                     	;# 
  2382  058F                     	;# 
  2383  0590                     	;# 
  2384  0591                     	;# 
  2385  0592                     	;# 
  2386  0593                     	;# 
  2387  059C                     	;# 
  2388  059C                     	;# 
  2389  059D                     	;# 
  2390  059D                     	;# 
  2391  059E                     	;# 
  2392  059F                     	;# 
  2393  060C                     	;# 
  2394  060D                     	;# 
  2395  060E                     	;# 
  2396  060F                     	;# 
  2397  0610                     	;# 
  2398  0611                     	;# 
  2399  0612                     	;# 
  2400  0613                     	;# 
  2401  0614                     	;# 
  2402  070C                     	;# 
  2403  070D                     	;# 
  2404  070E                     	;# 
  2405  070F                     	;# 
  2406  0710                     	;# 
  2407  0711                     	;# 
  2408  0712                     	;# 
  2409  0713                     	;# 
  2410  0716                     	;# 
  2411  0717                     	;# 
  2412  0718                     	;# 
  2413  0719                     	;# 
  2414  071A                     	;# 
  2415  071B                     	;# 
  2416  071C                     	;# 
  2417  071D                     	;# 
  2418  0796                     	;# 
  2419  0797                     	;# 
  2420  0798                     	;# 
  2421  0799                     	;# 
  2422  079A                     	;# 
  2423  079B                     	;# 
  2424  080C                     	;# 
  2425  080D                     	;# 
  2426  080E                     	;# 
  2427  080F                     	;# 
  2428  0810                     	;# 
  2429  0811                     	;# 
  2430  0812                     	;# 
  2431  0813                     	;# 
  2432  0814                     	;# 
  2433  081A                     	;# 
  2434  081A                     	;# 
  2435  081B                     	;# 
  2436  081C                     	;# 
  2437  081C                     	;# 
  2438  081D                     	;# 
  2439  081E                     	;# 
  2440  081F                     	;# 
  2441  088C                     	;# 
  2442  088D                     	;# 
  2443  088E                     	;# 
  2444  088F                     	;# 
  2445  0890                     	;# 
  2446  0891                     	;# 
  2447  0892                     	;# 
  2448  0893                     	;# 
  2449  0895                     	;# 
  2450  0896                     	;# 
  2451  090C                     	;# 
  2452  090E                     	;# 
  2453  090F                     	;# 
  2454  091F                     	;# 
  2455  098F                     	;# 
  2456  098F                     	;# 
  2457  0990                     	;# 
  2458  0991                     	;# 
  2459  0992                     	;# 
  2460  0993                     	;# 
  2461  0994                     	;# 
  2462  0995                     	;# 
  2463  0996                     	;# 
  2464  0997                     	;# 
  2465  0A19                     	;# 
  2466  0A19                     	;# 
  2467  0A1A                     	;# 
  2468  0A1A                     	;# 
  2469  0A1B                     	;# 
  2470  0A1B                     	;# 
  2471  0A1B                     	;# 
  2472  0A1C                     	;# 
  2473  0A1C                     	;# 
  2474  0A1D                     	;# 
  2475  0A1D                     	;# 
  2476  0A1E                     	;# 
  2477  0A1E                     	;# 
  2478  0A1F                     	;# 
  2479  0A1F                     	;# 
  2480  0A1F                     	;# 
  2481  1E0F                     	;# 
  2482  1E10                     	;# 
  2483  1E11                     	;# 
  2484  1E12                     	;# 
  2485  1E13                     	;# 
  2486  1E14                     	;# 
  2487  1E15                     	;# 
  2488  1E16                     	;# 
  2489  1E17                     	;# 
  2490  1E18                     	;# 
  2491  1E19                     	;# 
  2492  1E1A                     	;# 
  2493  1E1B                     	;# 
  2494  1E1C                     	;# 
  2495  1E1D                     	;# 
  2496  1E1E                     	;# 
  2497  1E1F                     	;# 
  2498  1E20                     	;# 
  2499  1E21                     	;# 
  2500  1E22                     	;# 
  2501  1E23                     	;# 
  2502  1E24                     	;# 
  2503  1E25                     	;# 
  2504  1E26                     	;# 
  2505  1E27                     	;# 
  2506  1E28                     	;# 
  2507  1E29                     	;# 
  2508  1E2A                     	;# 
  2509  1E2B                     	;# 
  2510  1E2C                     	;# 
  2511  1E2D                     	;# 
  2512  1E2E                     	;# 
  2513  1E2F                     	;# 
  2514  1E30                     	;# 
  2515  1E31                     	;# 
  2516  1E32                     	;# 
  2517  1E33                     	;# 
  2518  1E34                     	;# 
  2519  1E35                     	;# 
  2520  1E36                     	;# 
  2521  1E37                     	;# 
  2522  1E8F                     	;# 
  2523  1E90                     	;# 
  2524  1E91                     	;# 
  2525  1E92                     	;# 
  2526  1E93                     	;# 
  2527  1E9C                     	;# 
  2528  1EA1                     	;# 
  2529  1EA2                     	;# 
  2530  1EB1                     	;# 
  2531  1EBB                     	;# 
  2532  1EBC                     	;# 
  2533  1EBD                     	;# 
  2534  1EBE                     	;# 
  2535  1EC3                     	;# 
  2536  1EC5                     	;# 
  2537  1EC6                     	;# 
  2538  1EC7                     	;# 
  2539  1EC8                     	;# 
  2540  1EC9                     	;# 
  2541  1ECA                     	;# 
  2542  1ECB                     	;# 
  2543  1ECC                     	;# 
  2544  1ECD                     	;# 
  2545  1ECE                     	;# 
  2546  1F10                     	;# 
  2547  1F11                     	;# 
  2548  1F12                     	;# 
  2549  1F13                     	;# 
  2550  1F14                     	;# 
  2551  1F15                     	;# 
  2552  1F16                     	;# 
  2553  1F17                     	;# 
  2554  1F18                     	;# 
  2555  1F19                     	;# 
  2556  1F1A                     	;# 
  2557  1F1B                     	;# 
  2558  1F1C                     	;# 
  2559  1F1D                     	;# 
  2560  1F1E                     	;# 
  2561  1F1F                     	;# 
  2562  1F20                     	;# 
  2563  1F21                     	;# 
  2564  1F22                     	;# 
  2565  1F23                     	;# 
  2566  1F24                     	;# 
  2567  1F25                     	;# 
  2568  1F26                     	;# 
  2569  1F27                     	;# 
  2570  1F38                     	;# 
  2571  1F39                     	;# 
  2572  1F3A                     	;# 
  2573  1F3B                     	;# 
  2574  1F3C                     	;# 
  2575  1F3D                     	;# 
  2576  1F3E                     	;# 
  2577  1F3F                     	;# 
  2578  1F43                     	;# 
  2579  1F44                     	;# 
  2580  1F45                     	;# 
  2581  1F46                     	;# 
  2582  1F47                     	;# 
  2583  1F48                     	;# 
  2584  1F49                     	;# 
  2585  1F4A                     	;# 
  2586  1F4E                     	;# 
  2587  1F4F                     	;# 
  2588  1F50                     	;# 
  2589  1F51                     	;# 
  2590  1F52                     	;# 
  2591  1F53                     	;# 
  2592  1F54                     	;# 
  2593  1F55                     	;# 
  2594  1F65                     	;# 
  2595  1F68                     	;# 
  2596  1F69                     	;# 
  2597  1F6A                     	;# 
  2598  1F6B                     	;# 
  2599  1FE4                     	;# 
  2600  1FE5                     	;# 
  2601  1FE6                     	;# 
  2602  1FE7                     	;# 
  2603  1FE8                     	;# 
  2604  1FE8                     	;# 
  2605  1FE9                     	;# 
  2606  1FEA                     	;# 
  2607  1FEB                     	;# 
  2608  1FED                     	;# 
  2609  1FEE                     	;# 
  2610  1FEF                     	;# 
  2611  0000                     	;# 
  2612  0001                     	;# 
  2613  0002                     	;# 
  2614  0003                     	;# 
  2615  0004                     	;# 
  2616  0005                     	;# 
  2617  0006                     	;# 
  2618  0007                     	;# 
  2619  0008                     	;# 
  2620  0009                     	;# 
  2621  000A                     	;# 
  2622  000B                     	;# 
  2623  000C                     	;# 
  2624  000D                     	;# 
  2625  000E                     	;# 
  2626  0010                     	;# 
  2627  0012                     	;# 
  2628  0013                     	;# 
  2629  0014                     	;# 
  2630  0016                     	;# 
  2631  0018                     	;# 
  2632  0019                     	;# 
  2633  001A                     	;# 
  2634  009B                     	;# 
  2635  009B                     	;# 
  2636  009C                     	;# 
  2637  009D                     	;# 
  2638  009E                     	;# 
  2639  009F                     	;# 
  2640  0119                     	;# 
  2641  0119                     	;# 
  2642  0119                     	;# 
  2643  011A                     	;# 
  2644  011A                     	;# 
  2645  011A                     	;# 
  2646  011B                     	;# 
  2647  011B                     	;# 
  2648  011B                     	;# 
  2649  011B                     	;# 
  2650  011B                     	;# 
  2651  011C                     	;# 
  2652  011C                     	;# 
  2653  011C                     	;# 
  2654  011D                     	;# 
  2655  011D                     	;# 
  2656  011D                     	;# 
  2657  011E                     	;# 
  2658  011E                     	;# 
  2659  011E                     	;# 
  2660  011F                     	;# 
  2661  011F                     	;# 
  2662  011F                     	;# 
  2663  011F                     	;# 
  2664  011F                     	;# 
  2665  018C                     	;# 
  2666  018D                     	;# 
  2667  018E                     	;# 
  2668  018F                     	;# 
  2669  0190                     	;# 
  2670  0191                     	;# 
  2671  0192                     	;# 
  2672  0196                     	;# 
  2673  0197                     	;# 
  2674  0198                     	;# 
  2675  0199                     	;# 
  2676  019A                     	;# 
  2677  019B                     	;# 
  2678  019C                     	;# 
  2679  020C                     	;# 
  2680  020C                     	;# 
  2681  020D                     	;# 
  2682  020E                     	;# 
  2683  020F                     	;# 
  2684  020F                     	;# 
  2685  0210                     	;# 
  2686  0210                     	;# 
  2687  0211                     	;# 
  2688  0211                     	;# 
  2689  028C                     	;# 
  2690  028C                     	;# 
  2691  028D                     	;# 
  2692  028D                     	;# 
  2693  028E                     	;# 
  2694  028F                     	;# 
  2695  0290                     	;# 
  2696  0291                     	;# 
  2697  030C                     	;# 
  2698  030C                     	;# 
  2699  030D                     	;# 
  2700  030E                     	;# 
  2701  030F                     	;# 
  2702  0310                     	;# 
  2703  0310                     	;# 
  2704  0311                     	;# 
  2705  0312                     	;# 
  2706  0313                     	;# 
  2707  0314                     	;# 
  2708  0314                     	;# 
  2709  0315                     	;# 
  2710  0316                     	;# 
  2711  0318                     	;# 
  2712  0318                     	;# 
  2713  0319                     	;# 
  2714  031A                     	;# 
  2715  031C                     	;# 
  2716  031C                     	;# 
  2717  031D                     	;# 
  2718  031E                     	;# 
  2719  038C                     	;# 
  2720  038C                     	;# 
  2721  038D                     	;# 
  2722  038E                     	;# 
  2723  058C                     	;# 
  2724  058C                     	;# 
  2725  058D                     	;# 
  2726  058E                     	;# 
  2727  058F                     	;# 
  2728  058F                     	;# 
  2729  0590                     	;# 
  2730  0591                     	;# 
  2731  0592                     	;# 
  2732  0593                     	;# 
  2733  059C                     	;# 
  2734  059C                     	;# 
  2735  059D                     	;# 
  2736  059D                     	;# 
  2737  059E                     	;# 
  2738  059F                     	;# 
  2739  060C                     	;# 
  2740  060D                     	;# 
  2741  060E                     	;# 
  2742  060F                     	;# 
  2743  0610                     	;# 
  2744  0611                     	;# 
  2745  0612                     	;# 
  2746  0613                     	;# 
  2747  0614                     	;# 
  2748  070C                     	;# 
  2749  070D                     	;# 
  2750  070E                     	;# 
  2751  070F                     	;# 
  2752  0710                     	;# 
  2753  0711                     	;# 
  2754  0712                     	;# 
  2755  0713                     	;# 
  2756  0716                     	;# 
  2757  0717                     	;# 
  2758  0718                     	;# 
  2759  0719                     	;# 
  2760  071A                     	;# 
  2761  071B                     	;# 
  2762  071C                     	;# 
  2763  071D                     	;# 
  2764  0796                     	;# 
  2765  0797                     	;# 
  2766  0798                     	;# 
  2767  0799                     	;# 
  2768  079A                     	;# 
  2769  079B                     	;# 
  2770  080C                     	;# 
  2771  080D                     	;# 
  2772  080E                     	;# 
  2773  080F                     	;# 
  2774  0810                     	;# 
  2775  0811                     	;# 
  2776  0812                     	;# 
  2777  0813                     	;# 
  2778  0814                     	;# 
  2779  081A                     	;# 
  2780  081A                     	;# 
  2781  081B                     	;# 
  2782  081C                     	;# 
  2783  081C                     	;# 
  2784  081D                     	;# 
  2785  081E                     	;# 
  2786  081F                     	;# 
  2787  088C                     	;# 
  2788  088D                     	;# 
  2789  088E                     	;# 
  2790  088F                     	;# 
  2791  0890                     	;# 
  2792  0891                     	;# 
  2793  0892                     	;# 
  2794  0893                     	;# 
  2795  0895                     	;# 
  2796  0896                     	;# 
  2797  090C                     	;# 
  2798  090E                     	;# 
  2799  090F                     	;# 
  2800  091F                     	;# 
  2801  098F                     	;# 
  2802  098F                     	;# 
  2803  0990                     	;# 
  2804  0991                     	;# 
  2805  0992                     	;# 
  2806  0993                     	;# 
  2807  0994                     	;# 
  2808  0995                     	;# 
  2809  0996                     	;# 
  2810  0997                     	;# 
  2811  0A19                     	;# 
  2812  0A19                     	;# 
  2813  0A1A                     	;# 
  2814  0A1A                     	;# 
  2815  0A1B                     	;# 
  2816  0A1B                     	;# 
  2817  0A1B                     	;# 
  2818  0A1C                     	;# 
  2819  0A1C                     	;# 
  2820  0A1D                     	;# 
  2821  0A1D                     	;# 
  2822  0A1E                     	;# 
  2823  0A1E                     	;# 
  2824  0A1F                     	;# 
  2825  0A1F                     	;# 
  2826  0A1F                     	;# 
  2827  1E0F                     	;# 
  2828  1E10                     	;# 
  2829  1E11                     	;# 
  2830  1E12                     	;# 
  2831  1E13                     	;# 
  2832  1E14                     	;# 
  2833  1E15                     	;# 
  2834  1E16                     	;# 
  2835  1E17                     	;# 
  2836  1E18                     	;# 
  2837  1E19                     	;# 
  2838  1E1A                     	;# 
  2839  1E1B                     	;# 
  2840  1E1C                     	;# 
  2841  1E1D                     	;# 
  2842  1E1E                     	;# 
  2843  1E1F                     	;# 
  2844  1E20                     	;# 
  2845  1E21                     	;# 
  2846  1E22                     	;# 
  2847  1E23                     	;# 
  2848  1E24                     	;# 
  2849  1E25                     	;# 
  2850  1E26                     	;# 
  2851  1E27                     	;# 
  2852  1E28                     	;# 
  2853  1E29                     	;# 
  2854  1E2A                     	;# 
  2855  1E2B                     	;# 
  2856  1E2C                     	;# 
  2857  1E2D                     	;# 
  2858  1E2E                     	;# 
  2859  1E2F                     	;# 
  2860  1E30                     	;# 
  2861  1E31                     	;# 
  2862  1E32                     	;# 
  2863  1E33                     	;# 
  2864  1E34                     	;# 
  2865  1E35                     	;# 
  2866  1E36                     	;# 
  2867  1E37                     	;# 
  2868  1E8F                     	;# 
  2869  1E90                     	;# 
  2870  1E91                     	;# 
  2871  1E92                     	;# 
  2872  1E93                     	;# 
  2873  1E9C                     	;# 
  2874  1EA1                     	;# 
  2875  1EA2                     	;# 
  2876  1EB1                     	;# 
  2877  1EBB                     	;# 
  2878  1EBC                     	;# 
  2879  1EBD                     	;# 
  2880  1EBE                     	;# 
  2881  1EC3                     	;# 
  2882  1EC5                     	;# 
  2883  1EC6                     	;# 
  2884  1EC7                     	;# 
  2885  1EC8                     	;# 
  2886  1EC9                     	;# 
  2887  1ECA                     	;# 
  2888  1ECB                     	;# 
  2889  1ECC                     	;# 
  2890  1ECD                     	;# 
  2891  1ECE                     	;# 
  2892  1F10                     	;# 
  2893  1F11                     	;# 
  2894  1F12                     	;# 
  2895  1F13                     	;# 
  2896  1F14                     	;# 
  2897  1F15                     	;# 
  2898  1F16                     	;# 
  2899  1F17                     	;# 
  2900  1F18                     	;# 
  2901  1F19                     	;# 
  2902  1F1A                     	;# 
  2903  1F1B                     	;# 
  2904  1F1C                     	;# 
  2905  1F1D                     	;# 
  2906  1F1E                     	;# 
  2907  1F1F                     	;# 
  2908  1F20                     	;# 
  2909  1F21                     	;# 
  2910  1F22                     	;# 
  2911  1F23                     	;# 
  2912  1F24                     	;# 
  2913  1F25                     	;# 
  2914  1F26                     	;# 
  2915  1F27                     	;# 
  2916  1F38                     	;# 
  2917  1F39                     	;# 
  2918  1F3A                     	;# 
  2919  1F3B                     	;# 
  2920  1F3C                     	;# 
  2921  1F3D                     	;# 
  2922  1F3E                     	;# 
  2923  1F3F                     	;# 
  2924  1F43                     	;# 
  2925  1F44                     	;# 
  2926  1F45                     	;# 
  2927  1F46                     	;# 
  2928  1F47                     	;# 
  2929  1F48                     	;# 
  2930  1F49                     	;# 
  2931  1F4A                     	;# 
  2932  1F4E                     	;# 
  2933  1F4F                     	;# 
  2934  1F50                     	;# 
  2935  1F51                     	;# 
  2936  1F52                     	;# 
  2937  1F53                     	;# 
  2938  1F54                     	;# 
  2939  1F55                     	;# 
  2940  1F65                     	;# 
  2941  1F68                     	;# 
  2942  1F69                     	;# 
  2943  1F6A                     	;# 
  2944  1F6B                     	;# 
  2945  1FE4                     	;# 
  2946  1FE5                     	;# 
  2947  1FE6                     	;# 
  2948  1FE7                     	;# 
  2949  1FE8                     	;# 
  2950  1FE8                     	;# 
  2951  1FE9                     	;# 
  2952  1FEA                     	;# 
  2953  1FEB                     	;# 
  2954  1FED                     	;# 
  2955  1FEE                     	;# 
  2956  1FEF                     	;_data
  2957                           
  2958                           	psect	idataBANK3
  2959  07FF                     __pidataBANK3:	
  2960                           
  2961                           ;initializer for _g_updateScreen
  2962  07FF  3401               	retlw	1
  2963                           
  2964                           	psect	idataBANK4
  2965  2B58                     __pidataBANK4:	
  2966                           
  2967                           ;initializer for _p_fct
  2968  2B58  34A0               	retlw	low _statusView
  2969  2B59  341B               	retlw	high _statusView
  2970  2B5A  345E               	retlw	low _channelView
  2971  2B5B  3416               	retlw	high _channelView
  2972  2B5C  34BB               	retlw	low _channelSetup
  2973  2B5D  341A               	retlw	high _channelSetup
  2974  2B5E  34FF               	retlw	low _setOutputPower
  2975  2B5F  3418               	retlw	high _setOutputPower
  2976  2B60  3413               	retlw	low _setLensDia
  2977  2B61  3426               	retlw	high _setLensDia
  2978  2B62  34BD               	retlw	low _setup
  2979  2B63  3421               	retlw	high _setup
  2980  2B64  3458               	retlw	low _setDPOffset
  2981  2B65  3420               	retlw	high _setDPOffset
  2982  2B66  34B1               	retlw	low _setSkyTemp
  2983  2B67  3420               	retlw	high _setSkyTemp
  2984  2B68  340A               	retlw	low _setFudgeFactor
  2985  2B69  3421               	retlw	high _setFudgeFactor
  2986                           
  2987                           ;initializer for stoa@F1161
  2988  2B6A  3428               	retlw	40
  2989  2B6B  346E               	retlw	110
  2990  2B6C  3475               	retlw	117
  2991  2B6D  346C               	retlw	108
  2992  2B6E  346C               	retlw	108
  2993  2B6F  3429               	retlw	41
  2994  2B70  3400               	retlw	0
  2995                           
  2996                           ;initializer for OLED_print_xy@F7925
  2997  2B71  3400               	retlw	0
  2998  2B72  3440               	retlw	64
  2999  2B73  3414               	retlw	20
  3000  2B74  3454               	retlw	84
  3001                           
  3002                           ;initializer for OLED_setCursor@F7917
  3003  2B75  3400               	retlw	0
  3004  2B76  3440               	retlw	64
  3005  2B77  3414               	retlw	20
  3006  2B78  3454               	retlw	84
  3007                           
  3008                           	psect	idataBANK5
  3009  2A76                     __pidataBANK5:	
  3010                           
  3011                           ;initializer for OLED_loadSpecialChars@F7930
  3012  2A76  3418               	retlw	24
  3013  2A77  3418               	retlw	24
  3014  2A78  3403               	retlw	3
  3015  2A79  3404               	retlw	4
  3016  2A7A  3404               	retlw	4
  3017  2A7B  3404               	retlw	4
  3018  2A7C  3403               	retlw	3
  3019  2A7D  3400               	retlw	0
  3020  2A7E  3400               	retlw	0
  3021  2A7F  3400               	retlw	0
  3022  2A80  3400               	retlw	0
  3023  2A81  3404               	retlw	4
  3024  2A82  3400               	retlw	0
  3025  2A83  3400               	retlw	0
  3026  2A84  3400               	retlw	0
  3027  2A85  3400               	retlw	0
  3028  2A86  3401               	retlw	1
  3029  2A87  3401               	retlw	1
  3030  2A88  3405               	retlw	5
  3031  2A89  3409               	retlw	9
  3032  2A8A  341F               	retlw	31
  3033  2A8B  3408               	retlw	8
  3034  2A8C  3404               	retlw	4
  3035  2A8D  3400               	retlw	0
  3036                           
  3037                           	psect	stringtext1
  3038  3050                     __pstringtext1:	
  3039  3050                     _nextStateTbl:	
  3040  3050  3400               	retlw	0
  3041  3051  34FF               	retlw	255
  3042  3052  3401               	retlw	1
  3043  3053  3405               	retlw	5
  3044  3054  3400               	retlw	0
  3045  3055  3401               	retlw	1
  3046  3056  34FF               	retlw	255
  3047  3057  3400               	retlw	0
  3048  3058  3402               	retlw	2
  3049  3059  3401               	retlw	1
  3050  305A  3402               	retlw	2
  3051  305B  3400               	retlw	0
  3052  305C  3403               	retlw	3
  3053  305D  3401               	retlw	1
  3054  305E  3401               	retlw	1
  3055  305F  3402               	retlw	2
  3056  3060  3401               	retlw	1
  3057  3061  3404               	retlw	4
  3058  3062  3401               	retlw	1
  3059  3063  3401               	retlw	1
  3060  3064  3403               	retlw	3
  3061  3065  3400               	retlw	0
  3062  3066  3402               	retlw	2
  3063  3067  3402               	retlw	2
  3064  3068  3402               	retlw	2
  3065  3069  3404               	retlw	4
  3066  306A  3400               	retlw	0
  3067  306B  3402               	retlw	2
  3068  306C  3402               	retlw	2
  3069  306D  3402               	retlw	2
  3070  306E  3405               	retlw	5
  3071  306F  3400               	retlw	0
  3072  3070  3406               	retlw	6
  3073  3071  3400               	retlw	0
  3074  3072  3400               	retlw	0
  3075  3073  3405               	retlw	5
  3076  3074  3401               	retlw	1
  3077  3075  3407               	retlw	7
  3078  3076  3400               	retlw	0
  3079  3077  3400               	retlw	0
  3080  3078  3405               	retlw	5
  3081  3079  3402               	retlw	2
  3082  307A  3408               	retlw	8
  3083  307B  3400               	retlw	0
  3084  307C  3400               	retlw	0
  3085  307D  3406               	retlw	6
  3086  307E  3400               	retlw	0
  3087  307F  3405               	retlw	5
  3088  3080  3405               	retlw	5
  3089  3081  3405               	retlw	5
  3090  3082  3407               	retlw	7
  3091  3083  3400               	retlw	0
  3092  3084  3405               	retlw	5
  3093  3085  3405               	retlw	5
  3094  3086  3405               	retlw	5
  3095  3087  3408               	retlw	8
  3096  3088  3400               	retlw	0
  3097  3089  3405               	retlw	5
  3098  308A  3405               	retlw	5
  3099  308B  3405               	retlw	5
  3100  308C                     __end_of_nextStateTbl:	
  3101                           
  3102                           	psect	stringtext2
  3103  3110                     __pstringtext2:	
  3104  3110                     _transition_table:	
  3105  3110  3400               	retlw	0
  3106  3111  3404               	retlw	4
  3107  3112  3401               	retlw	1
  3108  3113  3400               	retlw	0
  3109  3114  3482               	retlw	130
  3110  3115  3400               	retlw	0
  3111  3116  3401               	retlw	1
  3112  3117  3400               	retlw	0
  3113  3118  3402               	retlw	2
  3114  3119  3403               	retlw	3
  3115  311A  3401               	retlw	1
  3116  311B  3400               	retlw	0
  3117  311C  3402               	retlw	2
  3118  311D  3403               	retlw	3
  3119  311E  3400               	retlw	0
  3120  311F  3480               	retlw	128
  3121  3120  3445               	retlw	69
  3122  3121  3404               	retlw	4
  3123  3122  3400               	retlw	0
  3124  3123  3400               	retlw	0
  3125  3124  3405               	retlw	5
  3126  3125  3404               	retlw	4
  3127  3126  3406               	retlw	6
  3128  3127  3400               	retlw	0
  3129  3128  3405               	retlw	5
  3130  3129  3400               	retlw	0
  3131  312A  3406               	retlw	6
  3132  312B  3440               	retlw	64
  3133  312C                     __end_of_transition_table:	
  3134                           
  3135                           	psect	stringtext3
  3136  3000                     __pstringtext3:	
  3137  3000                     _stateFuncTbl:	
  3138  3000  3400               	retlw	0
  3139  3001  34A0               	retlw	low _statusView
  3140  3002  341B               	retlw	high _statusView
  3141  3003  3401               	retlw	1
  3142  3004  345E               	retlw	low _channelView
  3143  3005  3416               	retlw	high _channelView
  3144  3006  3402               	retlw	2
  3145  3007  34BB               	retlw	low _channelSetup
  3146  3008  341A               	retlw	high _channelSetup
  3147  3009  3403               	retlw	3
  3148  300A  34FF               	retlw	low _setOutputPower
  3149  300B  3418               	retlw	high _setOutputPower
  3150  300C  3404               	retlw	4
  3151  300D  3413               	retlw	low _setLensDia
  3152  300E  3426               	retlw	high _setLensDia
  3153  300F  3405               	retlw	5
  3154  3010  34BD               	retlw	low _setup
  3155  3011  3421               	retlw	high _setup
  3156  3012  3406               	retlw	6
  3157  3013  3458               	retlw	low _setDPOffset
  3158  3014  3420               	retlw	high _setDPOffset
  3159  3015  3407               	retlw	7
  3160  3016  34B1               	retlw	low _setSkyTemp
  3161  3017  3420               	retlw	high _setSkyTemp
  3162  3018  3408               	retlw	8
  3163  3019  340A               	retlw	low _setFudgeFactor
  3164  301A  3421               	retlw	high _setFudgeFactor
  3165  301B                     __end_of_stateFuncTbl:	
  3166  000C                     _PORTAbits	set	12
  3167  000B                     _INTCONbits	set	11
  3168  0014                     _TRISCbits	set	20
  3169  0014                     _TRISC	set	20
  3170  0013                     _TRISB	set	19
  3171  0012                     _TRISA	set	18
  3172  000E                     _PORTCbits	set	14
  3173  000B                     _INTCON	set	11
  3174  0018                     _LATAbits	set	24
  3175  001A                     _LATCbits	set	26
  3176  0019                     _LATBbits	set	25
  3177  009E                     _ADCON1	set	158
  3178  009B                     _ADRESL	set	155
  3179  009C                     _ADRESH	set	156
  3180  009D                     _ADCON0bits	set	157
  3181  0119                     _RC1REG	set	281
  3182  011D                     _RC1STAbits	set	285
  3183  011A                     _TX1REG	set	282
  3184  011E                     _TX1STA	set	286
  3185  011D                     _RC1STA	set	285
  3186  011B                     _SPBRGL	set	283
  3187  011F                     _BAUD1CON	set	287
  3188  020C                     _TMR1	set	524
  3189  0211                     _T1CLK	set	529
  3190  020E                     _T1CON	set	526
  3191  059C                     _TMR0	set	1436
  3192  059F                     _T0CON1	set	1439
  3193  059E                     _T0CON0	set	1438
  3194  070F                     _PIR3bits	set	1807
  3195  0719                     _PIE3bits	set	1817
  3196  0710                     _PIR4bits	set	1808
  3197  071A                     _PIE4bits	set	1818
  3198  070C                     _PIR0bits	set	1804
  3199  0716                     _PIE0bits	set	1814
  3200  071A                     _PIE4	set	1818
  3201  0719                     _PIE3	set	1817
  3202  0716                     _PIE0	set	1814
  3203  088F                     _OSCCON3bits	set	2191
  3204  088D                     _OSCCON1	set	2189
  3205  0893                     _OSCFRQ	set	2195
  3206  1ECB                     _RX1DTPPSbits	set	7883
  3207  1F3F                     _IOCAFbits	set	7999
  3208  1F54                     _IOCCN	set	8020
  3209  1F3E                     _IOCAN	set	7998
  3210  1F3D                     _IOCAP	set	7997
  3211  1F4E                     _ANSELC	set	8014
  3212  1F43                     _ANSELB	set	8003
  3213  1F38                     _ANSELA	set	7992
  3214  1F26                     _RC6PPS	set	7974
  3215  301B                     STR_29:	
  3216  301B  3474               	retlw	116	;'t'
  3217  301C  3465               	retlw	101	;'e'
  3218  301D  346D               	retlw	109	;'m'
  3219  301E  3470               	retlw	112	;'p'
  3220  301F  342E               	retlw	46	;'.'
  3221  3020  3420               	retlw	32	;' '
  3222  3021  342B               	retlw	43	;'+'
  3223  3022  3433               	retlw	51	;'3'
  3224  3023  342E               	retlw	46	;'.'
  3225  3024  3431               	retlw	49	;'1'
  3226  3025  3466               	retlw	102	;'f'
  3227  3026  3401               	retlw	1
  3228  3027  3425               	retlw	37	;'%'
  3229  3028  3433               	retlw	51	;'3'
  3230  3029  342E               	retlw	46	;'.'
  3231  302A  3430               	retlw	48	;'0'
  3232  302B  3466               	retlw	102	;'f'
  3233  302C  3401               	retlw	1
  3234  302D  3420               	retlw	32	;' '
  3235  302E  3420               	retlw	32	;' '
  3236  302F  3420               	retlw	32	;' '
  3237  3030  3420               	retlw	32	;' '
  3238  3031  3420               	retlw	32	;' '
  3239  3032  3420               	retlw	32	;' '
  3240  3033  3420               	retlw	32	;' '
  3241  3034  3420               	retlw	32	;' '
  3242  3035  3425               	retlw	37	;'%'
  3243  3036  3433               	retlw	51	;'3'
  3244  3037  342E               	retlw	46	;'.'
  3245  3038  3431               	retlw	49	;'1'
  3246  3039  3466               	retlw	102	;'f'
  3247  303A  3420               	retlw	32	;' '
  3248  303B  3420               	retlw	32	;' '
  3249  303C  3420               	retlw	32	;' '
  3250  303D  3420               	retlw	32	;' '
  3251  303E  3420               	retlw	32	;' '
  3252  303F  3420               	retlw	32	;' '
  3253  3040  3420               	retlw	32	;' '
  3254  3041  3420               	retlw	32	;' '
  3255  3042  3420               	retlw	32	;' '
  3256  3043  3403               	retlw	3
  3257  3044  3420               	retlw	32	;' '
  3258  3045  3420               	retlw	32	;' '
  3259  3046  3420               	retlw	32	;' '
  3260  3047  3420               	retlw	32	;' '
  3261  3048  3420               	retlw	32	;' '
  3262  3049  3420               	retlw	32	;' '
  3263  304A  3420               	retlw	32	;' '
  3264  304B  3420               	retlw	32	;' '
  3265  304C  3420               	retlw	32	;' '
  3266  304D  3420               	retlw	32	;' '
  3267  304E  3420               	retlw	32	;' '
  3268  304F  3400               	retlw	0
  3269                           
  3270                           	psect	stringtext4
  3271  308C                     __pstringtext4:	
  3272  308C                     STR_2:	
  3273  308C  3454               	retlw	84	;'T'
  3274  308D  3465               	retlw	101	;'e'
  3275  308E  346D               	retlw	109	;'m'
  3276  308F  3470               	retlw	112	;'p'
  3277  3090  3465               	retlw	101	;'e'
  3278  3091  3472               	retlw	114	;'r'
  3279  3092  3461               	retlw	97	;'a'
  3280  3093  3474               	retlw	116	;'t'
  3281  3094  3475               	retlw	117	;'u'
  3282  3095  3472               	retlw	114	;'r'
  3283  3096  3465               	retlw	101	;'e'
  3284  3097  3420               	retlw	32	;' '
  3285  3098  3452               	retlw	82	;'R'
  3286  3099  3465               	retlw	101	;'e'
  3287  309A  346C               	retlw	108	;'l'
  3288  309B  342E               	retlw	46	;'.'
  3289  309C  3468               	retlw	104	;'h'
  3290  309D  3475               	retlw	117	;'u'
  3291  309E  346D               	retlw	109	;'m'
  3292  309F  3469               	retlw	105	;'i'
  3293  30A0  3464               	retlw	100	;'d'
  3294  30A1  3469               	retlw	105	;'i'
  3295  30A2  3474               	retlw	116	;'t'
  3296  30A3  3479               	retlw	121	;'y'
  3297  30A4  3444               	retlw	68	;'D'
  3298  30A5  3465               	retlw	101	;'e'
  3299  30A6  3477               	retlw	119	;'w'
  3300  30A7  3470               	retlw	112	;'p'
  3301  30A8  346F               	retlw	111	;'o'
  3302  30A9  3469               	retlw	105	;'i'
  3303  30AA  346E               	retlw	110	;'n'
  3304  30AB  3474               	retlw	116	;'t'
  3305  30AC  3420               	retlw	32	;' '
  3306  30AD  3420               	retlw	32	;' '
  3307  30AE  3420               	retlw	32	;' '
  3308  30AF  3420               	retlw	32	;' '
  3309  30B0  3442               	retlw	66	;'B'
  3310  30B1  3461               	retlw	97	;'a'
  3311  30B2  3474               	retlw	116	;'t'
  3312  30B3  342E               	retlw	46	;'.'
  3313  30B4  3420               	retlw	32	;' '
  3314  30B5  3420               	retlw	32	;' '
  3315  30B6  3420               	retlw	32	;' '
  3316  30B7  3450               	retlw	80	;'P'
  3317  30B8  346F               	retlw	111	;'o'
  3318  30B9  3477               	retlw	119	;'w'
  3319  30BA  3465               	retlw	101	;'e'
  3320  30BB  3472               	retlw	114	;'r'
  3321  30BC  3400               	retlw	0
  3322                           
  3323                           	psect	stringtext5
  3324  30BD                     __pstringtext5:	
  3325  30BD                     STR_5:	
  3326  30BD  3425               	retlw	37	;'%'
  3327  30BE  3473               	retlw	115	;'s'
  3328  30BF  3425               	retlw	37	;'%'
  3329  30C0  3435               	retlw	53	;'5'
  3330  30C1  342E               	retlw	46	;'.'
  3331  30C2  3431               	retlw	49	;'1'
  3332  30C3  3466               	retlw	102	;'f'
  3333  30C4  3420               	retlw	32	;' '
  3334  30C5  3425               	retlw	37	;'%'
  3335  30C6  3425               	retlw	37	;'%'
  3336  30C7  3420               	retlw	32	;' '
  3337  30C8  3420               	retlw	32	;' '
  3338  30C9  3420               	retlw	32	;' '
  3339  30CA  3420               	retlw	32	;' '
  3340  30CB  3420               	retlw	32	;' '
  3341  30CC  3425               	retlw	37	;'%'
  3342  30CD  3435               	retlw	53	;'5'
  3343  30CE  342E               	retlw	46	;'.'
  3344  30CF  3431               	retlw	49	;'1'
  3345  30D0  3466               	retlw	102	;'f'
  3346  30D1  3401               	retlw	1
  3347  30D2  3420               	retlw	32	;' '
  3348  30D3  3420               	retlw	32	;' '
  3349  30D4  3420               	retlw	32	;' '
  3350  30D5  3420               	retlw	32	;' '
  3351  30D6  3420               	retlw	32	;' '
  3352  30D7  3420               	retlw	32	;' '
  3353  30D8  3425               	retlw	37	;'%'
  3354  30D9  3434               	retlw	52	;'4'
  3355  30DA  342E               	retlw	46	;'.'
  3356  30DB  3431               	retlw	49	;'1'
  3357  30DC  3466               	retlw	102	;'f'
  3358  30DD  3456               	retlw	86	;'V'
  3359  30DE  3420               	retlw	32	;' '
  3360  30DF  3420               	retlw	32	;' '
  3361  30E0  3425               	retlw	37	;'%'
  3362  30E1  3434               	retlw	52	;'4'
  3363  30E2  342E               	retlw	46	;'.'
  3364  30E3  3431               	retlw	49	;'1'
  3365  30E4  3466               	retlw	102	;'f'
  3366  30E5  3457               	retlw	87	;'W'
  3367  30E6  3400               	retlw	0
  3368                           
  3369                           	psect	stringtext6
  3370  30E7                     __pstringtext6:	
  3371  30E7                     STR_28:	
  3372  30E7  3444               	retlw	68	;'D'
  3373  30E8  3450               	retlw	80	;'P'
  3374  30E9  3420               	retlw	32	;' '
  3375  30EA  346F               	retlw	111	;'o'
  3376  30EB  3466               	retlw	102	;'f'
  3377  30EC  3466               	retlw	102	;'f'
  3378  30ED  3473               	retlw	115	;'s'
  3379  30EE  3465               	retlw	101	;'e'
  3380  30EF  3474               	retlw	116	;'t'
  3381  30F0  3420               	retlw	32	;' '
  3382  30F1  3420               	retlw	32	;' '
  3383  30F2  3420               	retlw	32	;' '
  3384  30F3  3453               	retlw	83	;'S'
  3385  30F4  346B               	retlw	107	;'k'
  3386  30F5  3479               	retlw	121	;'y'
  3387  30F6  3420               	retlw	32	;' '
  3388  30F7  3474               	retlw	116	;'t'
  3389  30F8  3465               	retlw	101	;'e'
  3390  30F9  346D               	retlw	109	;'m'
  3391  30FA  3470               	retlw	112	;'p'
  3392  30FB  342E               	retlw	46	;'.'
  3393  30FC  3420               	retlw	32	;' '
  3394  30FD  3420               	retlw	32	;' '
  3395  30FE  3420               	retlw	32	;' '
  3396  30FF  3446               	retlw	70	;'F'
  3397  3100  3475               	retlw	117	;'u'
  3398  3101  3464               	retlw	100	;'d'
  3399  3102  3467               	retlw	103	;'g'
  3400  3103  3465               	retlw	101	;'e'
  3401  3104  3420               	retlw	32	;' '
  3402  3105  3466               	retlw	102	;'f'
  3403  3106  3461               	retlw	97	;'a'
  3404  3107  3463               	retlw	99	;'c'
  3405  3108  3474               	retlw	116	;'t'
  3406  3109  346F               	retlw	111	;'o'
  3407  310A  3472               	retlw	114	;'r'
  3408  310B  3442               	retlw	66	;'B'
  3409  310C  3461               	retlw	97	;'a'
  3410  310D  3463               	retlw	99	;'c'
  3411  310E  346B               	retlw	107	;'k'
  3412  310F  3400               	retlw	0
  3413                           
  3414                           	psect	stringtext7
  3415  312C                     __pstringtext7:	
  3416  312C                     STR_17:	
  3417  312C  344F               	retlw	79	;'O'
  3418  312D  3475               	retlw	117	;'u'
  3419  312E  3474               	retlw	116	;'t'
  3420  312F  3470               	retlw	112	;'p'
  3421  3130  3475               	retlw	117	;'u'
  3422  3131  3474               	retlw	116	;'t'
  3423  3132  3420               	retlw	32	;' '
  3424  3133  3470               	retlw	112	;'p'
  3425  3134  346F               	retlw	111	;'o'
  3426  3135  3477               	retlw	119	;'w'
  3427  3136  3465               	retlw	101	;'e'
  3428  3137  3472               	retlw	114	;'r'
  3429  3138  344C               	retlw	76	;'L'
  3430  3139  3465               	retlw	101	;'e'
  3431  313A  346E               	retlw	110	;'n'
  3432  313B  3473               	retlw	115	;'s'
  3433  313C  3420               	retlw	32	;' '
  3434  313D  3464               	retlw	100	;'d'
  3435  313E  3469               	retlw	105	;'i'
  3436  313F  3461               	retlw	97	;'a'
  3437  3140  346D               	retlw	109	;'m'
  3438  3141  342E               	retlw	46	;'.'
  3439  3142  3420               	retlw	32	;' '
  3440  3143  3420               	retlw	32	;' '
  3441  3144  3400               	retlw	0
  3442                           
  3443                           	psect	stringtext8
  3444  3145                     __pstringtext8:	
  3445  3145                     STR_8:	
  3446  3145  3443               	retlw	67	;'C'
  3447  3146  3468               	retlw	104	;'h'
  3448  3147  3420               	retlw	32	;' '
  3449  3148  3425               	retlw	37	;'%'
  3450  3149  3431               	retlw	49	;'1'
  3451  314A  3464               	retlw	100	;'d'
  3452  314B  343A               	retlw	58	;':'
  3453  314C  3420               	retlw	32	;' '
  3454  314D  3425               	retlw	37	;'%'
  3455  314E  3434               	retlw	52	;'4'
  3456  314F  342E               	retlw	46	;'.'
  3457  3150  3431               	retlw	49	;'1'
  3458  3151  3466               	retlw	102	;'f'
  3459  3152  3422               	retlw	34	;'"'
  3460  3153  3420               	retlw	32	;' '
  3461  3154  3400               	retlw	0
  3462                           
  3463                           	psect	stringtext9
  3464  3155                     __pstringtext9:	
  3465  3155                     STR_33:	
  3466  3155  3425               	retlw	37	;'%'
  3467  3156  3433               	retlw	51	;'3'
  3468  3157  342E               	retlw	46	;'.'
  3469  3158  3430               	retlw	48	;'0'
  3470  3159  3466               	retlw	102	;'f'
  3471  315A  3401               	retlw	1
  3472  315B  3420               	retlw	32	;' '
  3473  315C  3420               	retlw	32	;' '
  3474  315D  3420               	retlw	32	;' '
  3475  315E  3420               	retlw	32	;' '
  3476  315F  3420               	retlw	32	;' '
  3477  3160  3420               	retlw	32	;' '
  3478  3161  3420               	retlw	32	;' '
  3479  3162  3420               	retlw	32	;' '
  3480  3163  3400               	retlw	0
  3481                           
  3482                           	psect	stringtext10
  3483  3164                     __pstringtext10:	
  3484  3164                     STR_35:	
  3485  3164  3425               	retlw	37	;'%'
  3486  3165  3433               	retlw	51	;'3'
  3487  3166  342E               	retlw	46	;'.'
  3488  3167  3431               	retlw	49	;'1'
  3489  3168  3466               	retlw	102	;'f'
  3490  3169  3420               	retlw	32	;' '
  3491  316A  3420               	retlw	32	;' '
  3492  316B  3420               	retlw	32	;' '
  3493  316C  3420               	retlw	32	;' '
  3494  316D  3420               	retlw	32	;' '
  3495  316E  3420               	retlw	32	;' '
  3496  316F  3420               	retlw	32	;' '
  3497  3170  3420               	retlw	32	;' '
  3498  3171  3420               	retlw	32	;' '
  3499  3172  3400               	retlw	0
  3500                           
  3501                           	psect	stringtext11
  3502  3173                     __pstringtext11:	
  3503  3173                     STR_18:	
  3504  3173  3443               	retlw	67	;'C'
  3505  3174  3468               	retlw	104	;'h'
  3506  3175  342E               	retlw	46	;'.'
  3507  3176  3420               	retlw	32	;' '
  3508  3177  3425               	retlw	37	;'%'
  3509  3178  3431               	retlw	49	;'1'
  3510  3179  3464               	retlw	100	;'d'
  3511  317A  3420               	retlw	32	;' '
  3512  317B  346F               	retlw	111	;'o'
  3513  317C  3466               	retlw	102	;'f'
  3514  317D  3466               	retlw	102	;'f'
  3515  317E  3420               	retlw	32	;' '
  3516  317F  3420               	retlw	32	;' '
  3517  3180  3420               	retlw	32	;' '
  3518  3181  3400               	retlw	0
  3519                           
  3520                           	psect	stringtext12
  3521  3182                     __pstringtext12:	
  3522  3182                     STR_19:	
  3523  3182  3443               	retlw	67	;'C'
  3524  3183  3468               	retlw	104	;'h'
  3525  3184  342E               	retlw	46	;'.'
  3526  3185  3420               	retlw	32	;' '
  3527  3186  3425               	retlw	37	;'%'
  3528  3187  3431               	retlw	49	;'1'
  3529  3188  3464               	retlw	100	;'d'
  3530  3189  3420               	retlw	32	;' '
  3531  318A  3461               	retlw	97	;'a'
  3532  318B  3475               	retlw	117	;'u'
  3533  318C  3474               	retlw	116	;'t'
  3534  318D  346F               	retlw	111	;'o'
  3535  318E  3420               	retlw	32	;' '
  3536  318F  3420               	retlw	32	;' '
  3537  3190  3400               	retlw	0
  3538                           
  3539                           	psect	stringtext13
  3540  3191                     __pstringtext13:	
  3541  3191                     STR_3:	
  3542  3191  3425               	retlw	37	;'%'
  3543  3192  3433               	retlw	51	;'3'
  3544  3193  342E               	retlw	46	;'.'
  3545  3194  3431               	retlw	49	;'1'
  3546  3195  3466               	retlw	102	;'f'
  3547  3196  3401               	retlw	1
  3548  3197  3402               	retlw	2
  3549  3198  3425               	retlw	37	;'%'
  3550  3199  3433               	retlw	51	;'3'
  3551  319A  342E               	retlw	46	;'.'
  3552  319B  3431               	retlw	49	;'1'
  3553  319C  3466               	retlw	102	;'f'
  3554  319D  3401               	retlw	1
  3555  319E  3400               	retlw	0
  3556                           
  3557                           	psect	stringtext14
  3558  319F                     __pstringtext14:	
  3559  319F                     STR_21:	
  3560  319F  3425               	retlw	37	;'%'
  3561  31A0  3434               	retlw	52	;'4'
  3562  31A1  342E               	retlw	46	;'.'
  3563  31A2  3431               	retlw	49	;'1'
  3564  31A3  3466               	retlw	102	;'f'
  3565  31A4  3420               	retlw	32	;' '
  3566  31A5  3469               	retlw	105	;'i'
  3567  31A6  346E               	retlw	110	;'n'
  3568  31A7  3463               	retlw	99	;'c'
  3569  31A8  3468               	retlw	104	;'h'
  3570  31A9  3420               	retlw	32	;' '
  3571  31AA  3420               	retlw	32	;' '
  3572  31AB  3420               	retlw	32	;' '
  3573  31AC  3400               	retlw	0
  3574                           
  3575                           	psect	stringtext15
  3576  31AD                     __pstringtext15:	
  3577  31AD                     STR_25:	
  3578  31AD  3425               	retlw	37	;'%'
  3579  31AE  3434               	retlw	52	;'4'
  3580  31AF  342E               	retlw	46	;'.'
  3581  31B0  3431               	retlw	49	;'1'
  3582  31B1  3466               	retlw	102	;'f'
  3583  31B2  3457               	retlw	87	;'W'
  3584  31B3  3420               	retlw	32	;' '
  3585  31B4  346D               	retlw	109	;'m'
  3586  31B5  3461               	retlw	97	;'a'
  3587  31B6  346E               	retlw	110	;'n'
  3588  31B7  3475               	retlw	117	;'u'
  3589  31B8  3461               	retlw	97	;'a'
  3590  31B9  346C               	retlw	108	;'l'
  3591  31BA  3400               	retlw	0
  3592                           
  3593                           	psect	stringtext16
  3594  31BB                     __pstringtext16:	
  3595  31BB                     STR_31:	
  3596  31BB  3474               	retlw	116	;'t'
  3597  31BC  3465               	retlw	101	;'e'
  3598  31BD  346D               	retlw	109	;'m'
  3599  31BE  3470               	retlw	112	;'p'
  3600  31BF  342E               	retlw	46	;'.'
  3601  31C0  3420               	retlw	32	;' '
  3602  31C1  342B               	retlw	43	;'+'
  3603  31C2  3433               	retlw	51	;'3'
  3604  31C3  342E               	retlw	46	;'.'
  3605  31C4  3431               	retlw	49	;'1'
  3606  31C5  3466               	retlw	102	;'f'
  3607  31C6  3401               	retlw	1
  3608  31C7  3400               	retlw	0
  3609                           
  3610                           	psect	stringtext17
  3611  31C8                     __pstringtext17:	
  3612  31C8                     STR_4:	
  3613  31C8  3425               	retlw	37	;'%'
  3614  31C9  3435               	retlw	53	;'5'
  3615  31CA  342E               	retlw	46	;'.'
  3616  31CB  3431               	retlw	49	;'1'
  3617  31CC  3466               	retlw	102	;'f'
  3618  31CD  3401               	retlw	1
  3619  31CE  3420               	retlw	32	;' '
  3620  31CF  3420               	retlw	32	;' '
  3621  31D0  3420               	retlw	32	;' '
  3622  31D1  3420               	retlw	32	;' '
  3623  31D2  3420               	retlw	32	;' '
  3624  31D3  3420               	retlw	32	;' '
  3625  31D4  3400               	retlw	0
  3626                           
  3627                           	psect	stringtext18
  3628  31D5                     __pstringtext18:	
  3629  31D5                     STR_9:	
  3630  31D5  344F               	retlw	79	;'O'
  3631  31D6  3466               	retlw	102	;'f'
  3632  31D7  3466               	retlw	102	;'f'
  3633  31D8  3420               	retlw	32	;' '
  3634  31D9  3420               	retlw	32	;' '
  3635  31DA  3420               	retlw	32	;' '
  3636  31DB  3420               	retlw	32	;' '
  3637  31DC  3420               	retlw	32	;' '
  3638  31DD  3420               	retlw	32	;' '
  3639  31DE  3420               	retlw	32	;' '
  3640  31DF  3420               	retlw	32	;' '
  3641  31E0  3420               	retlw	32	;' '
  3642  31E1  3400               	retlw	0
  3643                           
  3644                           	psect	stringtext19
  3645  31E2                     __pstringtext19:	
  3646  31E2                     STR_14:	
  3647  31E2  3453               	retlw	83	;'S'
  3648  31E3  3468               	retlw	104	;'h'
  3649  31E4  346F               	retlw	111	;'o'
  3650  31E5  3472               	retlw	114	;'r'
  3651  31E6  3474               	retlw	116	;'t'
  3652  31E7  3465               	retlw	101	;'e'
  3653  31E8  3464               	retlw	100	;'d'
  3654  31E9  3421               	retlw	33	;'!'
  3655  31EA  3420               	retlw	32	;' '
  3656  31EB  3420               	retlw	32	;' '
  3657  31EC  3420               	retlw	32	;' '
  3658  31ED  3420               	retlw	32	;' '
  3659  31EE  3400               	retlw	0
  3660                           
  3661                           	psect	stringtext20
  3662  31EF                     __pstringtext20:	
  3663  31EF                     STR_32:	
  3664  31EF  3453               	retlw	83	;'S'
  3665  31F0  346B               	retlw	107	;'k'
  3666  31F1  3479               	retlw	121	;'y'
  3667  31F2  3420               	retlw	32	;' '
  3668  31F3  3474               	retlw	116	;'t'
  3669  31F4  3465               	retlw	101	;'e'
  3670  31F5  346D               	retlw	109	;'m'
  3671  31F6  3470               	retlw	112	;'p'
  3672  31F7  342E               	retlw	46	;'.'
  3673  31F8  3420               	retlw	32	;' '
  3674  31F9  3420               	retlw	32	;' '
  3675  31FA  3420               	retlw	32	;' '
  3676  31FB  3400               	retlw	0
  3677                           
  3678                           	psect	stringtext21
  3679  31FC                     __pstringtext21:	
  3680  31FC                     STR_30:	
  3681  31FC  3444               	retlw	68	;'D'
  3682  31FD  3450               	retlw	80	;'P'
  3683  31FE  3420               	retlw	32	;' '
  3684  31FF  346F               	retlw	111	;'o'
  3685  3200  3466               	retlw	102	;'f'
  3686  3201  3466               	retlw	102	;'f'
  3687  3202  3473               	retlw	115	;'s'
  3688  3203  3465               	retlw	101	;'e'
  3689  3204  3474               	retlw	116	;'t'
  3690  3205  3420               	retlw	32	;' '
  3691  3206  3420               	retlw	32	;' '
  3692  3207  3420               	retlw	32	;' '
  3693  3208  3400               	retlw	0
  3694                           
  3695                           	psect	stringtext22
  3696  3209                     __pstringtext22:	
  3697  3209                     STR_15:	
  3698  3209  344F               	retlw	79	;'O'
  3699  320A  3476               	retlw	118	;'v'
  3700  320B  3465               	retlw	101	;'e'
  3701  320C  3472               	retlw	114	;'r'
  3702  320D  3463               	retlw	99	;'c'
  3703  320E  3475               	retlw	117	;'u'
  3704  320F  3472               	retlw	114	;'r'
  3705  3210  3472               	retlw	114	;'r'
  3706  3211  3465               	retlw	101	;'e'
  3707  3212  346E               	retlw	110	;'n'
  3708  3213  3474               	retlw	116	;'t'
  3709  3214  3421               	retlw	33	;'!'
  3710  3215  3400               	retlw	0
  3711                           
  3712                           	psect	stringtext23
  3713  3216                     __pstringtext23:	
  3714  3216                     STR_13:	
  3715  3216  3444               	retlw	68	;'D'
  3716  3217  3469               	retlw	105	;'i'
  3717  3218  3473               	retlw	115	;'s'
  3718  3219  3463               	retlw	99	;'c'
  3719  321A  346F               	retlw	111	;'o'
  3720  321B  346E               	retlw	110	;'n'
  3721  321C  346E               	retlw	110	;'n'
  3722  321D  3465               	retlw	101	;'e'
  3723  321E  3463               	retlw	99	;'c'
  3724  321F  3474               	retlw	116	;'t'
  3725  3220  3465               	retlw	101	;'e'
  3726  3221  3464               	retlw	100	;'d'
  3727  3222  3400               	retlw	0
  3728                           
  3729                           	psect	stringtext24
  3730  3223                     __pstringtext24:	
  3731  3223                     STR_16:	
  3732  3223  344F               	retlw	79	;'O'
  3733  3224  346E               	retlw	110	;'n'
  3734  3225  3464               	retlw	100	;'d'
  3735  3226  3472               	retlw	114	;'r'
  3736  3227  3465               	retlw	101	;'e'
  3737  3228  3453               	retlw	83	;'S'
  3738  3229  3470               	retlw	112	;'p'
  3739  322A  3465               	retlw	101	;'e'
  3740  322B  3463               	retlw	99	;'c'
  3741  322C  3469               	retlw	105	;'i'
  3742  322D  3461               	retlw	97	;'a'
  3743  322E  346C               	retlw	108	;'l'
  3744  322F  3400               	retlw	0
  3745                           
  3746                           	psect	stringtext25
  3747  3230                     __pstringtext25:	
  3748  3230                     STR_20:	
  3749  3230  3425               	retlw	37	;'%'
  3750  3231  3434               	retlw	52	;'4'
  3751  3232  342E               	retlw	46	;'.'
  3752  3233  3466               	retlw	102	;'f'
  3753  3234  3457               	retlw	87	;'W'
  3754  3235  3420               	retlw	32	;' '
  3755  3236  346D               	retlw	109	;'m'
  3756  3237  3461               	retlw	97	;'a'
  3757  3238  346E               	retlw	110	;'n'
  3758  3239  3475               	retlw	117	;'u'
  3759  323A  3461               	retlw	97	;'a'
  3760  323B  346C               	retlw	108	;'l'
  3761  323C  3400               	retlw	0
  3762                           
  3763                           	psect	stringtext26
  3764  323D                     __pstringtext26:	
  3765  323D                     STR_22:	
  3766  323D  344F               	retlw	79	;'O'
  3767  323E  3475               	retlw	117	;'u'
  3768  323F  3474               	retlw	116	;'t'
  3769  3240  3470               	retlw	112	;'p'
  3770  3241  3475               	retlw	117	;'u'
  3771  3242  3474               	retlw	116	;'t'
  3772  3243  3420               	retlw	32	;' '
  3773  3244  3470               	retlw	112	;'p'
  3774  3245  346F               	retlw	111	;'o'
  3775  3246  3477               	retlw	119	;'w'
  3776  3247  3465               	retlw	101	;'e'
  3777  3248  3472               	retlw	114	;'r'
  3778  3249  3400               	retlw	0
  3779                           
  3780                           	psect	stringtext27
  3781  324A                     __pstringtext27:	
  3782  324A                     STR_34:	
  3783  324A  3446               	retlw	70	;'F'
  3784  324B  3475               	retlw	117	;'u'
  3785  324C  3464               	retlw	100	;'d'
  3786  324D  3467               	retlw	103	;'g'
  3787  324E  3465               	retlw	101	;'e'
  3788  324F  3420               	retlw	32	;' '
  3789  3250  3466               	retlw	102	;'f'
  3790  3251  3461               	retlw	97	;'a'
  3791  3252  3463               	retlw	99	;'c'
  3792  3253  3474               	retlw	116	;'t'
  3793  3254  346F               	retlw	111	;'o'
  3794  3255  3472               	retlw	114	;'r'
  3795  3256  3400               	retlw	0
  3796                           
  3797                           	psect	stringtext28
  3798  3257                     __pstringtext28:	
  3799  3257                     STR_36:	
  3800  3257  344D               	retlw	77	;'M'
  3801  3258  3465               	retlw	101	;'e'
  3802  3259  346E               	retlw	110	;'n'
  3803  325A  3475               	retlw	117	;'u'
  3804  325B  3420               	retlw	32	;' '
  3805  325C  3465               	retlw	101	;'e'
  3806  325D  3472               	retlw	114	;'r'
  3807  325E  3472               	retlw	114	;'r'
  3808  325F  346F               	retlw	111	;'o'
  3809  3260  3472               	retlw	114	;'r'
  3810  3261  3400               	retlw	0
  3811                           
  3812                           	psect	stringtext29
  3813  3262                     __pstringtext29:	
  3814  3262                     STR_10:	
  3815  3262  3425               	retlw	37	;'%'
  3816  3263  3434               	retlw	52	;'4'
  3817  3264  342E               	retlw	46	;'.'
  3818  3265  3431               	retlw	49	;'1'
  3819  3266  3466               	retlw	102	;'f'
  3820  3267  3457               	retlw	87	;'W'
  3821  3268  3420               	retlw	32	;' '
  3822  3269  3425               	retlw	37	;'%'
  3823  326A  3473               	retlw	115	;'s'
  3824  326B  3400               	retlw	0
  3825                           
  3826                           	psect	stringtext30
  3827  326C                     __pstringtext30:	
  3828  326C                     STR_1:	
  3829  326C  3454               	retlw	84	;'T'
  3830  326D  3455               	retlw	85	;'U'
  3831  326E  3452               	retlw	82	;'R'
  3832  326F  344E               	retlw	78	;'N'
  3833  3270  3420               	retlw	32	;' '
  3834  3271  344F               	retlw	79	;'O'
  3835  3272  3446               	retlw	70	;'F'
  3836  3273  3446               	retlw	70	;'F'
  3837  3274  3400               	retlw	0
  3838                           
  3839                           	psect	stringtext31
  3840  3275                     __pstringtext31:	
  3841  3275                     STR_7:	
  3842  3275  3425               	retlw	37	;'%'
  3843  3276  3434               	retlw	52	;'4'
  3844  3277  342E               	retlw	46	;'.'
  3845  3278  3431               	retlw	49	;'1'
  3846  3279  3466               	retlw	102	;'f'
  3847  327A  3456               	retlw	86	;'V'
  3848  327B  3400               	retlw	0
  3849                           
  3850                           	psect	stringtext32
  3851  327C                     __pstringtext32:	
  3852  327C                     STR_37:	
  3853  327C  3449               	retlw	73	;'I'
  3854  327D  344E               	retlw	78	;'N'
  3855  327E  3446               	retlw	70	;'F'
  3856  327F  3400               	retlw	0
  3857                           
  3858                           	psect	stringtext33
  3859  3280                     __pstringtext33:	
  3860  3280                     STR_41:	
  3861  3280  344E               	retlw	78	;'N'
  3862  3281  3441               	retlw	65	;'A'
  3863  3282  344E               	retlw	78	;'N'
  3864  3283  3400               	retlw	0
  3865                           
  3866                           	psect	stringtext34
  3867  3284                     __pstringtext34:	
  3868  3284                     STR_38:	
  3869  3284  3469               	retlw	105	;'i'
  3870  3285  346E               	retlw	110	;'n'
  3871  3286  3466               	retlw	102	;'f'
  3872  3287  3400               	retlw	0
  3873                           
  3874                           	psect	stringtext35
  3875  3288                     __pstringtext35:	
  3876  3288                     STR_42:	
  3877  3288  346E               	retlw	110	;'n'
  3878  3289  3461               	retlw	97	;'a'
  3879  328A  346E               	retlw	110	;'n'
  3880  328B  3400               	retlw	0
  3881                           
  3882                           	psect	stringtext36
  3883  328C                     __pstringtext36:	
  3884  328C                     STR_45:	
  3885  328C  346C               	retlw	108	;'l'
  3886  328D  3466               	retlw	102	;'f'
  3887  328E  3400               	retlw	0
  3888                           
  3889                           	psect	stringtext37
  3890  0000                     __pstringtext37:	
  3891  3173                     
  3892                           ; #config settings
  3893  0000                     
  3894                           	psect	cinit
  3895  006A                     start_initialization:	
  3896  006A                     __initialization:		;BIGRAM
  3897                           
  3898                           ; Initialize objects allocated to BANK3
  3899  006A  0143               	movlb	3	; select bank3
  3900  006B  3187  27FF  3180   	fcall	__pidataBANK3	;fetch initializer
  3901  006E  00EF               	movwf	__pdataBANK3& (0+127)
  3902                           
  3903                           ; Initialize objects allocated to BANK4
  3904  006F  3058               	movlw	low __pidataBANK4
  3905  0070  0084               	movwf	4
  3906  0071  30AB               	movlw	(high __pidataBANK4)| (0+128)
  3907  0072  0085               	movwf	5
  3908  0073  304B               	movlw	low __pdataBANK4
  3909  0074  0086               	movwf	6
  3910  0075  3002               	movlw	high __pdataBANK4
  3911  0076  0087               	movwf	7
  3912  0077  3000               	movlw	0
  3913  0078  00FF               	movwf	btemp+1
  3914  0079  3021               	movlw	33
  3915  007A  31A9  21E9  3180   	fcall	init_ram
  3916                           
  3917                           ; Initialize objects allocated to BANK5
  3918  007D  3076               	movlw	low __pidataBANK5
  3919  007E  0084               	movwf	4
  3920  007F  30AA               	movlw	(high __pidataBANK5)| (0+128)
  3921  0080  0085               	movwf	5
  3922  0081  30D1               	movlw	low __pdataBANK5
  3923  0082  0086               	movwf	6
  3924  0083  3002               	movlw	high __pdataBANK5
  3925  0084  0087               	movwf	7
  3926  0085  3000               	movlw	0
  3927  0086  00FF               	movwf	btemp+1
  3928  0087  3018               	movlw	24
  3929  0088  31A9  21E9  3180   	fcall	init_ram
  3930                           
  3931                           ; Clear objects allocated to BIGRAM
  3932  008B  3053               	movlw	low (0+10067)
  3933  008C  0084               	movwf	4
  3934  008D  3027               	movlw	high (0+10067)
  3935  008E  0085               	movwf	5
  3936  008F  309D               	movlw	157
  3937  0090  00FE               	movwf	btemp
  3938  0091  3000               	movlw	0
  3939  0092  00FF               	movwf	btemp+1
  3940  0093  31A9  21DD  3180   	fcall	clear_ram0
  3941                           
  3942                           ; Clear objects allocated to COMMON
  3943  0096  01FC               	clrf	__pbssCOMMON& (0+127)
  3944  0097  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
  3945                           
  3946                           ; Clear objects allocated to BANK3
  3947  0098  30A0               	movlw	low __pbssBANK3
  3948  0099  0084               	movwf	4
  3949  009A  3001               	movlw	high __pbssBANK3
  3950  009B  0085               	movwf	5
  3951  009C  303B               	movlw	59
  3952  009D  00FE               	movwf	btemp
  3953  009E  3000               	movlw	0
  3954  009F  00FF               	movwf	btemp+1
  3955  00A0  31A9  21DD  3180   	fcall	clear_ram0
  3956                           
  3957                           ; Clear objects allocated to BANK4
  3958  00A3  3020               	movlw	low __pbssBANK4
  3959  00A4  0084               	movwf	4
  3960  00A5  3002               	movlw	high __pbssBANK4
  3961  00A6  0085               	movwf	5
  3962  00A7  302B               	movlw	43
  3963  00A8  00FE               	movwf	btemp
  3964  00A9  3000               	movlw	0
  3965  00AA  00FF               	movwf	btemp+1
  3966  00AB  31A9  21DD  3180   	fcall	clear_ram0
  3967                           
  3968                           ; Clear objects allocated to BANK5
  3969  00AE  30A0               	movlw	low __pbssBANK5
  3970  00AF  0084               	movwf	4
  3971  00B0  3002               	movlw	high __pbssBANK5
  3972  00B1  0085               	movwf	5
  3973  00B2  3031               	movlw	49
  3974  00B3  00FE               	movwf	btemp
  3975  00B4  3000               	movlw	0
  3976  00B5  00FF               	movwf	btemp+1
  3977  00B6  31A9  21DD  3180   	fcall	clear_ram0
  3978                           
  3979                           ; Clear objects allocated to BANK6
  3980  00B9  3020               	movlw	low __pbssBANK6
  3981  00BA  0084               	movwf	4
  3982  00BB  3003               	movlw	high __pbssBANK6
  3983  00BC  0085               	movwf	5
  3984  00BD  3050               	movlw	80
  3985  00BE  00FE               	movwf	btemp
  3986  00BF  3000               	movlw	0
  3987  00C0  00FF               	movwf	btemp+1
  3988  00C1  31A9  21DD         	fcall	clear_ram0
  3989  00C3                     end_of_initialization:	
  3990                           ;End of C runtime variable initialization code
  3991                           
  3992  00C3                     __end_of__initialization:	
  3993  00C3  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  3994  00C4  0140               	movlb	0
  3995  00C5  31A3  2BE1         	ljmp	_main	;jump to C main() function
  3996                           
  3997                           	psect	bssCOMMON
  3998  007C                     __pbssCOMMON:	
  3999  007C                     _curRotState:	
  4000  007C                     	ds	1
  4001  007D                     getAvgChannelCurrents@channel:	
  4002  007D                     	ds	1
  4003                           
  4004                           	psect	bssBANK3
  4005  01A0                     __pbssBANK3:	
  4006  01A0                     _tick100ms:	
  4007  01A0                     	ds	4
  4008  01A4                     checkSensor@sensorTimeout:	
  4009  01A4                     	ds	4
  4010  01A8                     checkSensor@sensorUpdateInterval:	
  4011  01A8                     	ds	4
  4012  01AC                     _nout:	
  4013  01AC                     	ds	2
  4014  01AE                     _width:	
  4015  01AE                     	ds	2
  4016  01B0                     _prec:	
  4017  01B0                     	ds	2
  4018  01B2                     _flags:	
  4019  01B2                     	ds	2
  4020  01B4                     convertAnalogValues@avgI:	
  4021  01B4                     	ds	2
  4022  01B6                     convertAnalogValues@avgV:	
  4023  01B6                     	ds	2
  4024  01B8                     convertAnalogValues@avgT:	
  4025  01B8                     	ds	2
  4026  01BA                     getAvgChannelCurrents@avg:	
  4027  01BA                     	ds	2
  4028  01BC                     paging@lastDir:	
  4029  01BC                     	ds	1
  4030  01BD                     menu@state:	
  4031  01BD                     	ds	1
  4032  01BE                     setup@page:	
  4033  01BE                     	ds	1
  4034  01BF                     channelSetup@page:	
  4035  01BF                     	ds	1
  4036  01C0                     channelView@page:	
  4037  01C0                     	ds	1
  4038  01C1                     statusView@page:	
  4039  01C1                     	ds	1
  4040  01C2                     _selectedChannel:	
  4041  01C2                     	ds	1
  4042  01C3                     uartReceiveISR@checksum:	
  4043  01C3                     	ds	1
  4044  01C4                     uartReceiveISR@rxCount:	
  4045  01C4                     	ds	1
  4046  01C5                     _dataReadyFlag:	
  4047  01C5                     	ds	1
  4048  01C6                     _rxOErrCount:	
  4049  01C6                     	ds	1
  4050  01C7                     _rxFErrCount:	
  4051  01C7                     	ds	1
  4052  01C8                     _pbState:	
  4053  01C8                     	ds	1
  4054  01C9                     _rotDir:	
  4055  01C9                     	ds	1
  4056  01CA                     _tick10ms:	
  4057  01CA                     	ds	1
  4058  01CB                     getAvgChannelCurrents@busy:	
  4059  01CB                     	ds	1
  4060  01CC                     getAvgChannelCurrents@samples:	
  4061  01CC                     	ds	1
  4062  01CD                     checkSensor@state:	
  4063  01CD                     	ds	1
  4064  01CE                     _sBuf:	
  4065  01CE                     	ds	13
  4066                           
  4067                           	psect	dataBANK3
  4068  01EF                     __pdataBANK3:	
  4069  01EF                     _g_updateScreen:	
  4070  01EF                     	ds	1
  4071                           
  4072                           	psect	bssBANK4
  4073  0220                     __pbssBANK4:	
  4074  0220                     floorf@F524:	
  4075  0220                     	ds	4
  4076  0224                     ___fpclassifyf@F463:	
  4077  0224                     	ds	4
  4078  0228                     uartReceiveISR@buffer:	
  4079  0228                     	ds	20
  4080  023C                     _dataPacket:	
  4081  023C                     	ds	15
  4082                           
  4083                           	psect	dataBANK4
  4084  024B                     __pdataBANK4:	
  4085  024B                     _p_fct:	
  4086  024B                     	ds	18
  4087  025D                     stoa@F1161:	
  4088  025D                     	ds	7
  4089  0264                     OLED_print_xy@F7925:	
  4090  0264                     	ds	4
  4091  0268                     OLED_setCursor@F7917:	
  4092  0268                     	ds	4
  4093                           
  4094                           	psect	bssBANK5
  4095  02A0                     __pbssBANK5:	
  4096  02A0                     _lBuf:	
  4097  02A0                     	ds	49
  4098                           
  4099                           	psect	dataBANK5
  4100  02D1                     __pdataBANK5:	
  4101  02D1                     OLED_loadSpecialChars@F7930:	
  4102  02D1                     	ds	24
  4103                           
  4104                           	psect	bssBANK6
  4105  0320                     __pbssBANK6:	
  4106  0320                     _dbuf:	
  4107  0320                     	ds	80
  4108                           
  4109                           	psect	inittext
  4110  29E9                     init_ram:	
  4111  29E9  00FE               	movwf	126
  4112  29EA                     initloop:	
  4113  29EA  0012               	moviw fsr0++
  4114  29EB  001E               	movwi fsr1++
  4115  29EC  3001               	movlw	1
  4116  29ED  02FE               	subwf	126,f
  4117  29EE  3000               	movlw	0
  4118  29EF  3BFF               	subwfb	127,f
  4119  29F0  087F               	movf	127,w
  4120  29F1  047E               	iorwf	126,w
  4121  29F2  1903               	btfsc	3,2
  4122  29F3  3400               	retlw	0
  4123  29F4  29EA               	goto	initloop
  4124                           
  4125                           	psect	clrtext
  4126  29DD                     clear_ram0:	
  4127                           ;	Called with FSR0 containing the base address, and
  4128                           ;	btemp/btemp+1 has the size to clear
  4129                           
  4130  29DD  0064               	clrwdt	;clear the watchdog before getting into this loop
  4131  29DE                     clrloop0:	
  4132  29DE  0180               	clrf	0	;clear RAM location pointed to by FSR
  4133  29DF  3101               	addfsr 0,1
  4134  29E0  3001               	movlw	1
  4135  29E1  02FE               	subwf	126,f
  4136  29E2  3000               	movlw	0
  4137  29E3  3BFF               	subwfb	127,f
  4138  29E4  087F               	movf	127,w
  4139  29E5  047E               	iorwf	126,w
  4140  29E6  1903               	btfsc	3,2
  4141  29E7  3400               	retlw	0	;all done for this memory range, return
  4142  29E8  29DE               	goto	clrloop0	;have we reached the end yet?
  4143                           
  4144                           	psect	cstackBANK4
  4145  026C                     __pcstackBANK4:	
  4146  026C                     main@checkInt:	
  4147                           
  4148                           ; 4 bytes @ 0x0
  4149  026C                     	ds	4
  4150                           
  4151                           	psect	cstackBANK3
  4152  01DB                     __pcstackBANK3:	
  4153  01DB                     channelView@tmp0:	
  4154                           
  4155                           ; 4 bytes @ 0x0
  4156  01DB                     	ds	4
  4157  01DF                     _channelView$2425:	
  4158                           
  4159                           ; 4 bytes @ 0x4
  4160  01DF                     	ds	4
  4161  01E3                     _channelView$1190:	
  4162                           
  4163                           ; 2 bytes @ 0x8
  4164  01E3                     	ds	2
  4165  01E5                     channelView@n:	
  4166                           
  4167                           ; 1 bytes @ 0xA
  4168  01E5                     	ds	1
  4169  01E6                     ??_menu:	
  4170                           
  4171                           ; 1 bytes @ 0xB
  4172  01E6                     	ds	4
  4173  01EA                     menu@page:	
  4174                           
  4175                           ; 1 bytes @ 0xF
  4176  01EA                     	ds	1
  4177  01EB                     menu@pb:	
  4178                           
  4179                           ; 1 bytes @ 0x10
  4180  01EB                     	ds	1
  4181  01EC                     menu@func:	
  4182                           
  4183                           ; 2 bytes @ 0x11
  4184  01EC                     	ds	2
  4185  01EE                     menu@nextState:	
  4186                           
  4187                           ; 1 bytes @ 0x13
  4188  01EE                     	ds	1
  4189                           
  4190                           	psect	cstackBANK2
  4191  0120                     __pcstackBANK2:	
  4192  0120                     vfpfcnvrt@ll:	
  4193                           
  4194                           ; 8 bytes @ 0x0
  4195  0120                     	ds	8
  4196  0128                     vfpfcnvrt@cp:	
  4197                           
  4198                           ; 2 bytes @ 0x8
  4199  0128                     	ds	2
  4200  012A                     _vfpfcnvrt$1740:	
  4201                           
  4202                           ; 2 bytes @ 0xA
  4203  012A                     	ds	2
  4204  012C                     _vfpfcnvrt$1741:	
  4205                           
  4206                           ; 2 bytes @ 0xC
  4207  012C                     	ds	2
  4208  012E                     _vfpfcnvrt$1746:	
  4209                           
  4210                           ; 2 bytes @ 0xE
  4211  012E                     	ds	2
  4212  0130                     vfpfcnvrt@f:	
  4213                           
  4214                           ; 4 bytes @ 0x10
  4215  0130                     	ds	4
  4216  0134                     vfpfcnvrt@ct:	
  4217                           
  4218                           ; 3 bytes @ 0x14
  4219  0134                     	ds	3
  4220  0137                     vfpfcnvrt@c:	
  4221                           
  4222                           ; 1 bytes @ 0x17
  4223  0137                     	ds	1
  4224  0138                     vfpfcnvrt@fp:	
  4225                           
  4226                           ; 1 bytes @ 0x18
  4227  0138                     	ds	1
  4228  0139                     ?_vfprintf:	
  4229  0139                     vfprintf@fmt:	
  4230                           ; 2 bytes @ 0x19
  4231                           
  4232                           
  4233                           ; 2 bytes @ 0x19
  4234  0139                     	ds	2
  4235  013B                     vfprintf@ap:	
  4236                           
  4237                           ; 1 bytes @ 0x1B
  4238  013B                     	ds	1
  4239  013C                     ??_vfprintf:	
  4240                           
  4241                           ; 1 bytes @ 0x1C
  4242  013C                     	ds	2
  4243  013E                     vfprintf@fp:	
  4244                           
  4245                           ; 1 bytes @ 0x1E
  4246  013E                     	ds	1
  4247  013F                     vfprintf@cfmt:	
  4248                           
  4249                           ; 2 bytes @ 0x1F
  4250  013F                     	ds	2
  4251  0141                     ?_sprintf:	
  4252  0141                     sprintf@s:	
  4253                           ; 2 bytes @ 0x21
  4254                           
  4255                           
  4256                           ; 2 bytes @ 0x21
  4257  0141                     	ds	2
  4258  0143                     sprintf@fmt:	
  4259                           
  4260                           ; 2 bytes @ 0x23
  4261  0143                     	ds	20
  4262  0157                     ??_sprintf:	
  4263                           
  4264                           ; 1 bytes @ 0x37
  4265  0157                     	ds	3
  4266  015A                     sprintf@ap:	
  4267                           
  4268                           ; 1 bytes @ 0x3A
  4269  015A                     	ds	1
  4270  015B                     sprintf@f:	
  4271                           
  4272                           ; 6 bytes @ 0x3B
  4273  015B                     	ds	6
  4274  0161                     ?_statusView:	
  4275  0161                     ?_channelView:	
  4276                           ; 1 bytes @ 0x41
  4277                           
  4278  0161                     ?_channelSetup:	
  4279                           ; 1 bytes @ 0x41
  4280                           
  4281  0161                     ?_setOutputPower:	
  4282                           ; 1 bytes @ 0x41
  4283                           
  4284  0161                     ?_setLensDia:	
  4285                           ; 1 bytes @ 0x41
  4286                           
  4287  0161                     ?_setup:	
  4288                           ; 1 bytes @ 0x41
  4289                           
  4290  0161                     ?_setDPOffset:	
  4291                           ; 1 bytes @ 0x41
  4292                           
  4293  0161                     ?_setSkyTemp:	
  4294                           ; 1 bytes @ 0x41
  4295                           
  4296  0161                     ?_setFudgeFactor:	
  4297                           ; 1 bytes @ 0x41
  4298                           
  4299  0161                     statusView@data:	
  4300                           ; 1 bytes @ 0x41
  4301                           
  4302  0161                     channelView@data:	
  4303                           ; 2 bytes @ 0x41
  4304                           
  4305  0161                     channelSetup@data:	
  4306                           ; 2 bytes @ 0x41
  4307                           
  4308  0161                     setOutputPower@data:	
  4309                           ; 2 bytes @ 0x41
  4310                           
  4311  0161                     setLensDia@data:	
  4312                           ; 2 bytes @ 0x41
  4313                           
  4314  0161                     setup@data:	
  4315                           ; 2 bytes @ 0x41
  4316                           
  4317  0161                     setDPOffset@data:	
  4318                           ; 2 bytes @ 0x41
  4319                           
  4320  0161                     setSkyTemp@data:	
  4321                           ; 2 bytes @ 0x41
  4322                           
  4323  0161                     setFudgeFactor@data:	
  4324                           ; 2 bytes @ 0x41
  4325                           
  4326                           
  4327                           ; 2 bytes @ 0x41
  4328  0161                     	ds	2
  4329  0163                     ??_statusView:	
  4330  0163                     ??_channelView:	
  4331                           ; 1 bytes @ 0x43
  4332                           
  4333  0163                     ??_channelSetup:	
  4334                           ; 1 bytes @ 0x43
  4335                           
  4336  0163                     ??_setOutputPower:	
  4337                           ; 1 bytes @ 0x43
  4338                           
  4339  0163                     ??_setLensDia:	
  4340                           ; 1 bytes @ 0x43
  4341                           
  4342  0163                     ??_setup:	
  4343                           ; 1 bytes @ 0x43
  4344                           
  4345                           
  4346                           ; 1 bytes @ 0x43
  4347  0163                     	ds	4
  4348  0167                     channelSetup@chData:	
  4349  0167                     setOutputPower@chData:	
  4350                           ; 2 bytes @ 0x47
  4351                           
  4352  0167                     _setLensDia$2426:	
  4353                           ; 2 bytes @ 0x47
  4354                           
  4355                           
  4356                           ; 4 bytes @ 0x47
  4357  0167                     	ds	4
  4358  016B                     ?_menu:	
  4359  016B                     menu@data:	
  4360                           ; 1 bytes @ 0x4B
  4361                           
  4362                           
  4363                           ; 2 bytes @ 0x4B
  4364  016B                     	ds	2
  4365  016D                     ??_main:	
  4366                           
  4367                           ; 1 bytes @ 0x4D
  4368  016D                     	ds	1
  4369                           
  4370                           	psect	cstackBANK1
  4371  00A0                     __pcstackBANK1:	
  4372  00A0                     ?_spinInput:	
  4373  00A0                     spinInput@input:	
  4374                           ; 1 bytes @ 0x0
  4375                           
  4376  00A0                     floorf@m:	
  4377                           ; 2 bytes @ 0x0
  4378                           
  4379                           
  4380                           ; 4 bytes @ 0x0
  4381  00A0                     	ds	2
  4382  00A2                     spinInput@min:	
  4383                           
  4384                           ; 4 bytes @ 0x2
  4385  00A2                     	ds	2
  4386  00A4                     floorf@e:	
  4387                           
  4388                           ; 2 bytes @ 0x4
  4389  00A4                     	ds	2
  4390  00A6                     spinInput@max:	
  4391  00A6                     floorf@u:	
  4392                           ; 4 bytes @ 0x6
  4393                           
  4394                           
  4395                           ; 4 bytes @ 0x6
  4396  00A6                     	ds	4
  4397  00AA                     ?_efgtoa:	
  4398  00AA                     spinInput@step:	
  4399                           ; 2 bytes @ 0xA
  4400                           
  4401  00AA                     efgtoa@f:	
  4402                           ; 4 bytes @ 0xA
  4403                           
  4404                           
  4405                           ; 4 bytes @ 0xA
  4406  00AA                     	ds	4
  4407  00AE                     efgtoa@c:	
  4408                           
  4409                           ; 1 bytes @ 0xE
  4410  00AE                     	ds	1
  4411  00AF                     efgtoa@ou:	
  4412                           
  4413                           ; 4 bytes @ 0xF
  4414  00AF                     	ds	4
  4415  00B3                     _efgtoa$1705:	
  4416                           
  4417                           ; 2 bytes @ 0x13
  4418  00B3                     	ds	2
  4419  00B5                     _efgtoa$1706:	
  4420                           
  4421                           ; 2 bytes @ 0x15
  4422  00B5                     	ds	2
  4423  00B7                     _efgtoa$1710:	
  4424                           
  4425                           ; 2 bytes @ 0x17
  4426  00B7                     	ds	2
  4427  00B9                     _efgtoa$1714:	
  4428                           
  4429                           ; 2 bytes @ 0x19
  4430  00B9                     	ds	2
  4431  00BB                     _efgtoa$1715:	
  4432                           
  4433                           ; 2 bytes @ 0x1B
  4434  00BB                     	ds	2
  4435  00BD                     _efgtoa$1716:	
  4436                           
  4437                           ; 2 bytes @ 0x1D
  4438  00BD                     	ds	2
  4439  00BF                     efgtoa@t:	
  4440                           
  4441                           ; 2 bytes @ 0x1F
  4442  00BF                     	ds	2
  4443  00C1                     efgtoa@pp:	
  4444                           
  4445                           ; 2 bytes @ 0x21
  4446  00C1                     	ds	2
  4447  00C3                     efgtoa@m:	
  4448                           
  4449                           ; 2 bytes @ 0x23
  4450  00C3                     	ds	2
  4451  00C5                     efgtoa@ne:	
  4452                           
  4453                           ; 2 bytes @ 0x25
  4454  00C5                     	ds	2
  4455  00C7                     efgtoa@d:	
  4456                           
  4457                           ; 2 bytes @ 0x27
  4458  00C7                     	ds	2
  4459  00C9                     efgtoa@fp:	
  4460                           
  4461                           ; 1 bytes @ 0x29
  4462  00C9                     	ds	1
  4463  00CA                     efgtoa@sign:	
  4464                           
  4465                           ; 2 bytes @ 0x2A
  4466  00CA                     	ds	2
  4467  00CC                     efgtoa@p:	
  4468                           
  4469                           ; 2 bytes @ 0x2C
  4470  00CC                     	ds	2
  4471  00CE                     efgtoa@nmode:	
  4472                           
  4473                           ; 1 bytes @ 0x2E
  4474  00CE                     	ds	1
  4475  00CF                     efgtoa@w:	
  4476                           
  4477                           ; 2 bytes @ 0x2F
  4478  00CF                     	ds	2
  4479  00D1                     efgtoa@mode:	
  4480                           
  4481                           ; 1 bytes @ 0x31
  4482  00D1                     	ds	1
  4483  00D2                     efgtoa@h:	
  4484                           
  4485                           ; 4 bytes @ 0x32
  4486  00D2                     	ds	4
  4487  00D6                     efgtoa@l:	
  4488                           
  4489                           ; 4 bytes @ 0x36
  4490  00D6                     	ds	4
  4491  00DA                     efgtoa@i:	
  4492                           
  4493                           ; 2 bytes @ 0x3A
  4494  00DA                     	ds	2
  4495  00DC                     efgtoa@g:	
  4496                           
  4497                           ; 4 bytes @ 0x3C
  4498  00DC                     	ds	4
  4499  00E0                     efgtoa@e:	
  4500                           
  4501                           ; 2 bytes @ 0x40
  4502  00E0                     	ds	2
  4503  00E2                     efgtoa@n:	
  4504                           
  4505                           ; 2 bytes @ 0x42
  4506  00E2                     	ds	2
  4507  00E4                     efgtoa@u:	
  4508                           
  4509                           ; 4 bytes @ 0x44
  4510  00E4                     	ds	4
  4511  00E8                     ?_vfpfcnvrt:	
  4512  00E8                     vfpfcnvrt@fmt:	
  4513                           ; 2 bytes @ 0x48
  4514                           
  4515                           
  4516                           ; 1 bytes @ 0x48
  4517  00E8                     	ds	1
  4518  00E9                     vfpfcnvrt@ap:	
  4519                           
  4520                           ; 1 bytes @ 0x49
  4521  00E9                     	ds	1
  4522  00EA                     ??_vfpfcnvrt:	
  4523                           
  4524                           ; 1 bytes @ 0x4A
  4525  00EA                     	ds	6
  4526                           
  4527                           	psect	cstackCOMMON
  4528  0070                     __pcstackCOMMON:	
  4529  0070                     ?_initialize:	
  4530  0070                     ?_OLED_init:	
  4531                           ; 1 bytes @ 0x0
  4532                           
  4533  0070                     ?_OLED_loadSpecialChars:	
  4534                           ; 1 bytes @ 0x0
  4535                           
  4536  0070                     ?_OLED_returnHome:	
  4537                           ; 1 bytes @ 0x0
  4538                           
  4539  0070                     ?_OLED_clearDisplay:	
  4540                           ; 1 bytes @ 0x0
  4541                           
  4542  0070                     ?_uartSendByte:	
  4543                           ; 1 bytes @ 0x0
  4544                           
  4545  0070                     ?_uartIsDataReady:	
  4546                           ; 1 bytes @ 0x0
  4547                           
  4548  0070                     ?_getDataPacket:	
  4549                           ; 1 bytes @ 0x0
  4550                           
  4551  0070                     ?_OLED_command:	
  4552                           ; 1 bytes @ 0x0
  4553                           
  4554  0070                     ?_pushButtonISR:	
  4555                           ; 1 bytes @ 0x0
  4556                           
  4557  0070                     ??_pushButtonISR:	
  4558                           ; 1 bytes @ 0x0
  4559                           
  4560  0070                     ?_rotISR:	
  4561                           ; 1 bytes @ 0x0
  4562                           
  4563  0070                     ??_rotISR:	
  4564                           ; 1 bytes @ 0x0
  4565                           
  4566  0070                     ?_uartReceiveISR:	
  4567                           ; 1 bytes @ 0x0
  4568                           
  4569  0070                     ?_strncpy:	
  4570                           ; 1 bytes @ 0x0
  4571                           
  4572  0070                     ?_returnToPage:	
  4573                           ; 1 bytes @ 0x0
  4574                           
  4575  0070                     ?_menuError:	
  4576                           ; 1 bytes @ 0x0
  4577                           
  4578  0070                     ?_putch:	
  4579                           ; 1 bytes @ 0x0
  4580                           
  4581  0070                     ?_main:	
  4582                           ; 1 bytes @ 0x0
  4583                           
  4584  0070                     ?_OLED_pulseEnable:	
  4585                           ; 1 bytes @ 0x0
  4586                           
  4587  0070                     ?_OLED_write4bits:	
  4588                           ; 1 bytes @ 0x0
  4589                           
  4590  0070                     ?_OLED_waitForReady:	
  4591                           ; 1 bytes @ 0x0
  4592                           
  4593  0070                     ?_OLED_write:	
  4594                           ; 1 bytes @ 0x0
  4595                           
  4596  0070                     ?_OLED_scrollDisplayLeft:	
  4597                           ; 1 bytes @ 0x0
  4598                           
  4599  0070                     ?_OLED_scrollDisplayRight:	
  4600                           ; 1 bytes @ 0x0
  4601                           
  4602  0070                     ?_get10msTick:	
  4603                           ; 1 bytes @ 0x0
  4604                           
  4605  0070                     ??_get10msTick:	
  4606                           ; 1 bytes @ 0x0
  4607                           
  4608  0070                     ?_reset10msTick:	
  4609                           ; 1 bytes @ 0x0
  4610                           
  4611  0070                     ??_reset10msTick:	
  4612                           ; 1 bytes @ 0x0
  4613                           
  4614  0070                     ?_ISR:	
  4615                           ; 1 bytes @ 0x0
  4616                           
  4617  0070                     ?_getRotDir:	
  4618                           ; 1 bytes @ 0x0
  4619                           
  4620  0070                     ?_getPB:	
  4621                           ; 1 bytes @ 0x0
  4622                           
  4623  0070                     putch@c:	
  4624                           ; 1 bytes @ 0x0
  4625                           
  4626  0070                     strncpy@s:	
  4627                           ; 1 bytes @ 0x0
  4628                           
  4629                           
  4630                           ; 1 bytes @ 0x0
  4631  0070                     	ds	1
  4632  0071                     pushButtonISR@time:	
  4633  0071                     strncpy@n:	
  4634                           ; 1 bytes @ 0x1
  4635                           
  4636                           
  4637                           ; 2 bytes @ 0x1
  4638  0071                     	ds	2
  4639  0073                     ??_strncpy:	
  4640                           
  4641                           ; 1 bytes @ 0x3
  4642  0073                     	ds	1
  4643  0074                     strncpy@d:	
  4644                           
  4645                           ; 1 bytes @ 0x4
  4646  0074                     	ds	1
  4647  0075                     strncpy@cp:	
  4648                           
  4649                           ; 1 bytes @ 0x5
  4650  0075                     	ds	1
  4651  0076                     ??_uartReceiveISR:	
  4652                           
  4653                           ; 1 bytes @ 0x6
  4654  0076                     	ds	1
  4655  0077                     rotISR@input:	
  4656                           
  4657                           ; 1 bytes @ 0x7
  4658  0077                     	ds	1
  4659  0078                     ??_ISR:	
  4660                           
  4661                           ; 1 bytes @ 0x8
  4662  0078                     	ds	4
  4663                           
  4664                           	psect	cstackBANK0
  4665  0020                     __pcstackBANK0:	
  4666  0020                     ?___fleq:	
  4667  0020                     ??_initialize:	
  4668                           ; 1 bit 
  4669                           
  4670  0020                     ??_uartSendByte:	
  4671                           ; 1 bytes @ 0x0
  4672                           
  4673  0020                     ??_uartIsDataReady:	
  4674                           ; 1 bytes @ 0x0
  4675                           
  4676  0020                     ??_getDataPacket:	
  4677                           ; 1 bytes @ 0x0
  4678                           
  4679  0020                     ??_putch:	
  4680                           ; 1 bytes @ 0x0
  4681                           
  4682  0020                     ??_OLED_pulseEnable:	
  4683                           ; 1 bytes @ 0x0
  4684                           
  4685  0020                     ??_OLED_write4bits:	
  4686                           ; 1 bytes @ 0x0
  4687                           
  4688  0020                     ??_OLED_waitForReady:	
  4689                           ; 1 bytes @ 0x0
  4690                           
  4691  0020                     ??_getRotDir:	
  4692                           ; 1 bytes @ 0x0
  4693                           
  4694  0020                     ??_getPB:	
  4695                           ; 1 bytes @ 0x0
  4696                           
  4697  0020                     ?_fputc:	
  4698                           ; 1 bytes @ 0x0
  4699                           
  4700  0020                     ?_strlen:	
  4701                           ; 2 bytes @ 0x0
  4702                           
  4703  0020                     ?___fpclassifyf:	
  4704                           ; 2 bytes @ 0x0
  4705                           
  4706  0020                     ?_isupper:	
  4707                           ; 2 bytes @ 0x0
  4708                           
  4709  0020                     ?_isdigit:	
  4710                           ; 2 bytes @ 0x0
  4711                           
  4712  0020                     ?_strncmp:	
  4713                           ; 2 bytes @ 0x0
  4714                           
  4715  0020                     ?__Umul8_16:	
  4716                           ; 2 bytes @ 0x0
  4717                           
  4718  0020                     ?_isspace:	
  4719                           ; 2 bytes @ 0x0
  4720                           
  4721  0020                     ?_adcGetConversion:	
  4722                           ; 2 bytes @ 0x0
  4723                           
  4724  0020                     ?___wmul:	
  4725                           ; 2 bytes @ 0x0
  4726                           
  4727  0020                     ?___awdiv:	
  4728                           ; 2 bytes @ 0x0
  4729                           
  4730  0020                     ?___awmod:	
  4731                           ; 2 bytes @ 0x0
  4732                           
  4733  0020                     ?_timeNow:	
  4734                           ; 2 bytes @ 0x0
  4735                           
  4736  0020                     ?___lmul:	
  4737                           ; 4 bytes @ 0x0
  4738                           
  4739  0020                     ?___flneg:	
  4740                           ; 4 bytes @ 0x0
  4741                           
  4742  0020                     ?___fltol:	
  4743                           ; 4 bytes @ 0x0
  4744                           
  4745  0020                     ?___xxtofl:	
  4746                           ; 4 bytes @ 0x0
  4747                           
  4748  0020                     ?___aodiv:	
  4749                           ; 4 bytes @ 0x0
  4750                           
  4751  0020                     ?___aomod:	
  4752                           ; 8 bytes @ 0x0
  4753                           
  4754  0020                     OLED_waitForReady@busy:	
  4755                           ; 8 bytes @ 0x0
  4756                           
  4757  0020                     uartSendByte@s:	
  4758                           ; 1 bytes @ 0x0
  4759                           
  4760  0020                     __Umul8_16@multiplicand:	
  4761                           ; 1 bytes @ 0x0
  4762                           
  4763  0020                     ___wmul@multiplier:	
  4764                           ; 1 bytes @ 0x0
  4765                           
  4766  0020                     ___awdiv@divisor:	
  4767                           ; 2 bytes @ 0x0
  4768                           
  4769  0020                     ___awmod@divisor:	
  4770                           ; 2 bytes @ 0x0
  4771                           
  4772  0020                     isdigit@c:	
  4773                           ; 2 bytes @ 0x0
  4774                           
  4775  0020                     isspace@c:	
  4776                           ; 2 bytes @ 0x0
  4777                           
  4778  0020                     isupper@c:	
  4779                           ; 2 bytes @ 0x0
  4780                           
  4781  0020                     fputc@c:	
  4782                           ; 2 bytes @ 0x0
  4783                           
  4784  0020                     strlen@s:	
  4785                           ; 2 bytes @ 0x0
  4786                           
  4787  0020                     strncmp@_r:	
  4788                           ; 2 bytes @ 0x0
  4789                           
  4790  0020                     ___lmul@multiplier:	
  4791                           ; 2 bytes @ 0x0
  4792                           
  4793  0020                     ___fleq@ff1:	
  4794                           ; 4 bytes @ 0x0
  4795                           
  4796  0020                     ___flneg@f1:	
  4797                           ; 4 bytes @ 0x0
  4798                           
  4799  0020                     ___fltol@f1:	
  4800                           ; 4 bytes @ 0x0
  4801                           
  4802  0020                     ___xxtofl@val:	
  4803                           ; 4 bytes @ 0x0
  4804                           
  4805  0020                     ___fpclassifyf@x:	
  4806                           ; 4 bytes @ 0x0
  4807                           
  4808  0020                     ___aodiv@divisor:	
  4809                           ; 4 bytes @ 0x0
  4810                           
  4811  0020                     ___aomod@divisor:	
  4812                           ; 8 bytes @ 0x0
  4813                           
  4814                           
  4815                           ; 8 bytes @ 0x0
  4816  0020                     	ds	1
  4817  0021                     getRotDir@ret:	
  4818  0021                     getPB@ret:	
  4819                           ; 1 bytes @ 0x1
  4820                           
  4821  0021                     uartIsDataReady@ret:	
  4822                           ; 1 bytes @ 0x1
  4823                           
  4824                           
  4825                           ; 1 bytes @ 0x1
  4826  0021                     	ds	1
  4827  0022                     ??_strlen:	
  4828  0022                     ??_isupper:	
  4829                           ; 1 bytes @ 0x2
  4830                           
  4831  0022                     ??_isdigit:	
  4832                           ; 1 bytes @ 0x2
  4833                           
  4834  0022                     ??__Umul8_16:	
  4835                           ; 1 bytes @ 0x2
  4836                           
  4837  0022                     ??_isspace:	
  4838                           ; 1 bytes @ 0x2
  4839                           
  4840  0022                     ??_adcGetConversion:	
  4841                           ; 1 bytes @ 0x2
  4842                           
  4843  0022                     OLED_write4bits@value:	
  4844                           ; 1 bytes @ 0x2
  4845                           
  4846  0022                     fputc@fp:	
  4847                           ; 1 bytes @ 0x2
  4848                           
  4849  0022                     ___wmul@multiplicand:	
  4850                           ; 1 bytes @ 0x2
  4851                           
  4852  0022                     ___awdiv@dividend:	
  4853                           ; 2 bytes @ 0x2
  4854                           
  4855  0022                     ___awmod@dividend:	
  4856                           ; 2 bytes @ 0x2
  4857                           
  4858  0022                     strncmp@n:	
  4859                           ; 2 bytes @ 0x2
  4860                           
  4861                           
  4862                           ; 2 bytes @ 0x2
  4863  0022                     	ds	1
  4864  0023                     ??_fputc:	
  4865  0023                     ?_OLED_send:	
  4866                           ; 1 bytes @ 0x3
  4867                           
  4868  0023                     adcGetConversion@channel:	
  4869                           ; 1 bytes @ 0x3
  4870                           
  4871  0023                     OLED_send@mode:	
  4872                           ; 1 bytes @ 0x3
  4873                           
  4874  0023                     strlen@a:	
  4875                           ; 1 bytes @ 0x3
  4876                           
  4877                           
  4878                           ; 2 bytes @ 0x3
  4879  0023                     	ds	1
  4880  0024                     ??_timeNow:	
  4881  0024                     ??___fpclassifyf:	
  4882                           ; 1 bytes @ 0x4
  4883                           
  4884  0024                     ??_strncmp:	
  4885                           ; 1 bytes @ 0x4
  4886                           
  4887  0024                     ??_OLED_send:	
  4888                           ; 1 bytes @ 0x4
  4889                           
  4890  0024                     ??___wmul:	
  4891                           ; 1 bytes @ 0x4
  4892                           
  4893  0024                     ??___awdiv:	
  4894                           ; 1 bytes @ 0x4
  4895                           
  4896  0024                     ??___awmod:	
  4897                           ; 1 bytes @ 0x4
  4898                           
  4899  0024                     ??___flneg:	
  4900                           ; 1 bytes @ 0x4
  4901                           
  4902  0024                     ??___fltol:	
  4903                           ; 1 bytes @ 0x4
  4904                           
  4905  0024                     ??___xxtofl:	
  4906                           ; 1 bytes @ 0x4
  4907                           
  4908  0024                     ?_timeSince:	
  4909                           ; 1 bytes @ 0x4
  4910                           
  4911  0024                     _isspace$2089:	
  4912                           ; 4 bytes @ 0x4
  4913                           
  4914  0024                     ___wmul@product:	
  4915                           ; 1 bytes @ 0x4
  4916                           
  4917  0024                     __Umul8_16@product:	
  4918                           ; 2 bytes @ 0x4
  4919                           
  4920  0024                     timeSince@since:	
  4921                           ; 2 bytes @ 0x4
  4922                           
  4923  0024                     ___lmul@multiplicand:	
  4924                           ; 4 bytes @ 0x4
  4925                           
  4926  0024                     ___fleq@ff2:	
  4927                           ; 4 bytes @ 0x4
  4928                           
  4929                           
  4930                           ; 4 bytes @ 0x4
  4931  0024                     	ds	1
  4932  0025                     ?_strcpy:	
  4933  0025                     OLED_send@value:	
  4934                           ; 2 bytes @ 0x5
  4935                           
  4936  0025                     ___awdiv@counter:	
  4937                           ; 1 bytes @ 0x5
  4938                           
  4939  0025                     ___awmod@counter:	
  4940                           ; 1 bytes @ 0x5
  4941                           
  4942  0025                     strncmp@_l:	
  4943                           ; 1 bytes @ 0x5
  4944                           
  4945  0025                     strcpy@dest:	
  4946                           ; 1 bytes @ 0x5
  4947                           
  4948                           
  4949                           ; 2 bytes @ 0x5
  4950  0025                     	ds	1
  4951  0026                     ?_initGlobalData:	
  4952  0026                     ??_OLED_command:	
  4953                           ; 1 bytes @ 0x6
  4954                           
  4955  0026                     ?_getNextState:	
  4956                           ; 1 bytes @ 0x6
  4957                           
  4958  0026                     ??_OLED_write:	
  4959                           ; 1 bytes @ 0x6
  4960                           
  4961  0026                     ?_getStateFunc:	
  4962                           ; 1 bytes @ 0x6
  4963                           
  4964  0026                     ?_tolower:	
  4965                           ; 2 bytes @ 0x6
  4966                           
  4967  0026                     ?_atoi:	
  4968                           ; 2 bytes @ 0x6
  4969                           
  4970  0026                     OLED_command@value:	
  4971                           ; 2 bytes @ 0x6
  4972                           
  4973  0026                     OLED_write@value:	
  4974                           ; 1 bytes @ 0x6
  4975                           
  4976  0026                     getNextState@page:	
  4977                           ; 1 bytes @ 0x6
  4978                           
  4979  0026                     ___awdiv@sign:	
  4980                           ; 1 bytes @ 0x6
  4981                           
  4982  0026                     ___awmod@sign:	
  4983                           ; 1 bytes @ 0x6
  4984                           
  4985  0026                     initGlobalData@data:	
  4986                           ; 1 bytes @ 0x6
  4987                           
  4988  0026                     atoi@s:	
  4989                           ; 2 bytes @ 0x6
  4990                           
  4991  0026                     strncmp@r:	
  4992                           ; 2 bytes @ 0x6
  4993                           
  4994  0026                     tolower@c:	
  4995                           ; 2 bytes @ 0x6
  4996                           
  4997  0026                     __Umul8_16@word_mpld:	
  4998                           ; 2 bytes @ 0x6
  4999                           
  5000                           
  5001                           ; 2 bytes @ 0x6
  5002  0026                     	ds	1
  5003  0027                     ??_OLED_init:	
  5004  0027                     ??_OLED_loadSpecialChars:	
  5005                           ; 1 bytes @ 0x7
  5006                           
  5007  0027                     ??_OLED_returnHome:	
  5008                           ; 1 bytes @ 0x7
  5009                           
  5010  0027                     ??_OLED_clearDisplay:	
  5011                           ; 1 bytes @ 0x7
  5012                           
  5013  0027                     ?_OLED_print_xy:	
  5014                           ; 1 bytes @ 0x7
  5015                           
  5016  0027                     ??_returnToPage:	
  5017                           ; 1 bytes @ 0x7
  5018                           
  5019  0027                     ?_paging:	
  5020                           ; 1 bytes @ 0x7
  5021                           
  5022  0027                     ??_OLED_scrollDisplayLeft:	
  5023                           ; 1 bytes @ 0x7
  5024                           
  5025  0027                     ??_OLED_scrollDisplayRight:	
  5026                           ; 1 bytes @ 0x7
  5027                           
  5028  0027                     OLED_print_xy@row:	
  5029                           ; 1 bytes @ 0x7
  5030                           
  5031  0027                     getNextState@pb:	
  5032                           ; 1 bytes @ 0x7
  5033                           
  5034  0027                     paging@lastPage:	
  5035                           ; 1 bytes @ 0x7
  5036                           
  5037  0027                     ___awdiv@quotient:	
  5038                           ; 1 bytes @ 0x7
  5039                           
  5040  0027                     strcpy@src:	
  5041                           ; 2 bytes @ 0x7
  5042                           
  5043                           
  5044                           ; 2 bytes @ 0x7
  5045  0027                     	ds	1
  5046  0028                     ??_initGlobalData:	
  5047  0028                     ??_timeSince:	
  5048                           ; 1 bytes @ 0x8
  5049                           
  5050  0028                     ??_paging:	
  5051                           ; 1 bytes @ 0x8
  5052                           
  5053  0028                     ??_getStateFunc:	
  5054                           ; 1 bytes @ 0x8
  5055                           
  5056  0028                     ??_getNextState:	
  5057                           ; 1 bytes @ 0x8
  5058                           
  5059  0028                     ??_tolower:	
  5060                           ; 1 bytes @ 0x8
  5061                           
  5062  0028                     ??_atoi:	
  5063                           ; 1 bytes @ 0x8
  5064                           
  5065  0028                     ??___lmul:	
  5066                           ; 1 bytes @ 0x8
  5067                           
  5068  0028                     ??___fleq:	
  5069                           ; 1 bytes @ 0x8
  5070                           
  5071  0028                     ?_fputs:	
  5072                           ; 1 bytes @ 0x8
  5073                           
  5074  0028                     ?_stoa:	
  5075                           ; 2 bytes @ 0x8
  5076                           
  5077  0028                     ___xxtofl@sign:	
  5078                           ; 2 bytes @ 0x8
  5079                           
  5080  0028                     fputs@fp:	
  5081                           ; 1 bytes @ 0x8
  5082                           
  5083  0028                     strncmp@l:	
  5084                           ; 1 bytes @ 0x8
  5085                           
  5086  0028                     __Umul8_16@multiplier:	
  5087                           ; 1 bytes @ 0x8
  5088                           
  5089  0028                     OLED_print_xy@s:	
  5090                           ; 1 bytes @ 0x8
  5091                           
  5092  0028                     stoa@s:	
  5093                           ; 2 bytes @ 0x8
  5094                           
  5095  0028                     ___lmul@product:	
  5096                           ; 2 bytes @ 0x8
  5097                           
  5098  0028                     ___aodiv@dividend:	
  5099                           ; 4 bytes @ 0x8
  5100                           
  5101  0028                     ___aomod@dividend:	
  5102                           ; 8 bytes @ 0x8
  5103                           
  5104  0028                     OLED_loadSpecialChars@special:	
  5105                           ; 8 bytes @ 0x8
  5106                           
  5107                           
  5108                           ; 24 bytes @ 0x8
  5109  0028                     	ds	1
  5110  0029                     ??_strcpy:	
  5111  0029                     ??_fputs:	
  5112                           ; 1 bytes @ 0x9
  5113                           
  5114  0029                     returnToPage@page:	
  5115                           ; 1 bytes @ 0x9
  5116                           
  5117  0029                     ___fltol@sign1:	
  5118                           ; 1 bytes @ 0x9
  5119                           
  5120  0029                     ___xxtofl@exp:	
  5121                           ; 1 bytes @ 0x9
  5122                           
  5123                           
  5124                           ; 1 bytes @ 0x9
  5125  0029                     	ds	1
  5126  002A                     ??_OLED_print_xy:	
  5127  002A                     ??_stoa:	
  5128                           ; 1 bytes @ 0xA
  5129                           
  5130  002A                     paging@currentPage:	
  5131                           ; 1 bytes @ 0xA
  5132                           
  5133  002A                     returnToPage@n:	
  5134                           ; 1 bytes @ 0xA
  5135                           
  5136  002A                     ___fltol@exp1:	
  5137                           ; 1 bytes @ 0xA
  5138                           
  5139  002A                     ___fpclassifyf@e:	
  5140                           ; 1 bytes @ 0xA
  5141                           
  5142  002A                     ___xxtofl@arg:	
  5143                           ; 2 bytes @ 0xA
  5144                           
  5145                           
  5146                           ; 4 bytes @ 0xA
  5147  002A                     	ds	1
  5148  002B                     getStateFunc@state:	
  5149  002B                     getNextState@state:	
  5150                           ; 1 bytes @ 0xB
  5151                           
  5152  002B                     paging@dir:	
  5153                           ; 1 bytes @ 0xB
  5154                           
  5155  002B                     OLED_print_xy@row_offsets:	
  5156                           ; 1 bytes @ 0xB
  5157                           
  5158                           
  5159                           ; 4 bytes @ 0xB
  5160  002B                     	ds	1
  5161  002C                     ?_ema:	
  5162  002C                     getStateFunc@n:	
  5163                           ; 2 bytes @ 0xC
  5164                           
  5165  002C                     getNextState@n:	
  5166                           ; 1 bytes @ 0xC
  5167                           
  5168  002C                     paging@n:	
  5169                           ; 1 bytes @ 0xC
  5170                           
  5171  002C                     fputs@c:	
  5172                           ; 1 bytes @ 0xC
  5173                           
  5174  002C                     ema@in:	
  5175                           ; 1 bytes @ 0xC
  5176                           
  5177  002C                     atoi@neg:	
  5178                           ; 2 bytes @ 0xC
  5179                           
  5180  002C                     _tolower$2187:	
  5181                           ; 2 bytes @ 0xC
  5182                           
  5183  002C                     ___fpclassifyf@u:	
  5184                           ; 2 bytes @ 0xC
  5185                           
  5186                           
  5187                           ; 4 bytes @ 0xC
  5188  002C                     	ds	1
  5189  002D                     fputs@i:	
  5190  002D                     strcpy@s:	
  5191                           ; 2 bytes @ 0xD
  5192                           
  5193  002D                     stoa@nuls:	
  5194                           ; 2 bytes @ 0xD
  5195                           
  5196                           
  5197                           ; 7 bytes @ 0xD
  5198  002D                     	ds	1
  5199  002E                     ?___flmul:	
  5200  002E                     initGlobalData@n:	
  5201                           ; 4 bytes @ 0xE
  5202                           
  5203  002E                     ema@average:	
  5204                           ; 1 bytes @ 0xE
  5205                           
  5206  002E                     _atoi$2058:	
  5207                           ; 2 bytes @ 0xE
  5208                           
  5209  002E                     ___flmul@b:	
  5210                           ; 2 bytes @ 0xE
  5211                           
  5212                           
  5213                           ; 4 bytes @ 0xE
  5214  002E                     	ds	1
  5215  002F                     OLED_print_xy@col:	
  5216  002F                     fputs@s:	
  5217                           ; 1 bytes @ 0xF
  5218                           
  5219  002F                     strcpy@d:	
  5220                           ; 1 bytes @ 0xF
  5221                           
  5222                           
  5223                           ; 2 bytes @ 0xF
  5224  002F                     	ds	1
  5225  0030                     ??_menuError:	
  5226  0030                     ??___aodiv:	
  5227                           ; 1 bytes @ 0x10
  5228                           
  5229  0030                     ??___aomod:	
  5230                           ; 1 bytes @ 0x10
  5231                           
  5232  0030                     ?_pad:	
  5233                           ; 1 bytes @ 0x10
  5234                           
  5235  0030                     pad@buf:	
  5236                           ; 2 bytes @ 0x10
  5237                           
  5238  0030                     _atoi$2060:	
  5239                           ; 1 bytes @ 0x10
  5240                           
  5241  0030                     ema@alpha:	
  5242                           ; 2 bytes @ 0x10
  5243                           
  5244  0030                     timeSince@now:	
  5245                           ; 4 bytes @ 0x10
  5246                           
  5247                           
  5248                           ; 4 bytes @ 0x10
  5249  0030                     	ds	1
  5250  0031                     ?_strcat:	
  5251  0031                     ___aodiv@counter:	
  5252                           ; 1 bytes @ 0x11
  5253                           
  5254  0031                     ___aomod@counter:	
  5255                           ; 1 bytes @ 0x11
  5256                           
  5257  0031                     strcat@src:	
  5258                           ; 1 bytes @ 0x11
  5259                           
  5260  0031                     pad@p:	
  5261                           ; 1 bytes @ 0x11
  5262                           
  5263                           
  5264                           ; 2 bytes @ 0x11
  5265  0031                     	ds	1
  5266  0032                     ??_strcat:	
  5267  0032                     ___aodiv@sign:	
  5268                           ; 1 bytes @ 0x12
  5269                           
  5270  0032                     ___aomod@sign:	
  5271                           ; 1 bytes @ 0x12
  5272                           
  5273  0032                     _atoi$2059:	
  5274                           ; 1 bytes @ 0x12
  5275                           
  5276  0032                     ___flmul@a:	
  5277                           ; 1 bytes @ 0x12
  5278                           
  5279                           
  5280                           ; 4 bytes @ 0x12
  5281  0032                     	ds	1
  5282  0033                     ??_pad:	
  5283  0033                     ?_abs:	
  5284                           ; 1 bytes @ 0x13
  5285                           
  5286  0033                     abs@a:	
  5287                           ; 2 bytes @ 0x13
  5288                           
  5289  0033                     atoi@n:	
  5290                           ; 2 bytes @ 0x13
  5291                           
  5292  0033                     ___aodiv@quotient:	
  5293                           ; 2 bytes @ 0x13
  5294                           
  5295                           
  5296                           ; 8 bytes @ 0x13
  5297  0033                     	ds	1
  5298  0034                     ??_ema:	
  5299  0034                     strcat@dest:	
  5300                           ; 1 bytes @ 0x14
  5301                           
  5302  0034                     pad@i:	
  5303                           ; 1 bytes @ 0x14
  5304                           
  5305  0034                     stoa@i:	
  5306                           ; 2 bytes @ 0x14
  5307                           
  5308                           
  5309                           ; 2 bytes @ 0x14
  5310  0034                     	ds	1
  5311  0035                     ??_abs:	
  5312                           
  5313                           ; 1 bytes @ 0x15
  5314  0035                     	ds	1
  5315  0036                     ??___flmul:	
  5316  0036                     pad@w:	
  5317                           ; 1 bytes @ 0x16
  5318                           
  5319  0036                     stoa@w:	
  5320                           ; 2 bytes @ 0x16
  5321                           
  5322                           
  5323                           ; 2 bytes @ 0x16
  5324  0036                     	ds	2
  5325  0038                     pad@fp:	
  5326  0038                     stoa@fp:	
  5327                           ; 1 bytes @ 0x18
  5328                           
  5329                           
  5330                           ; 1 bytes @ 0x18
  5331  0038                     	ds	1
  5332  0039                     stoa@cp:	
  5333                           
  5334                           ; 2 bytes @ 0x19
  5335  0039                     	ds	2
  5336  003B                     ?_dtoa:	
  5337  003B                     ___flmul@sign:	
  5338                           ; 2 bytes @ 0x1B
  5339                           
  5340  003B                     stoa@p:	
  5341                           ; 1 bytes @ 0x1B
  5342                           
  5343  003B                     dtoa@d:	
  5344                           ; 2 bytes @ 0x1B
  5345                           
  5346                           
  5347                           ; 8 bytes @ 0x1B
  5348  003B                     	ds	1
  5349  003C                     ___flmul@aexp:	
  5350  003C                     ema@tmp0:	
  5351                           ; 1 bytes @ 0x1C
  5352                           
  5353                           
  5354                           ; 4 bytes @ 0x1C
  5355  003C                     	ds	1
  5356  003D                     stoa@l:	
  5357  003D                     ___flmul@grs:	
  5358                           ; 2 bytes @ 0x1D
  5359                           
  5360                           
  5361                           ; 4 bytes @ 0x1D
  5362  003D                     	ds	3
  5363  0040                     OLED_loadSpecialChars@n:	
  5364                           
  5365                           ; 1 bytes @ 0x20
  5366  0040                     	ds	1
  5367  0041                     ___flmul@bexp:	
  5368                           
  5369                           ; 1 bytes @ 0x21
  5370  0041                     	ds	1
  5371  0042                     ___flmul@prod:	
  5372                           
  5373                           ; 4 bytes @ 0x22
  5374  0042                     	ds	1
  5375  0043                     ??_dtoa:	
  5376                           
  5377                           ; 1 bytes @ 0x23
  5378  0043                     	ds	3
  5379  0046                     dtoa@fp:	
  5380  0046                     ___flmul@temp:	
  5381                           ; 1 bytes @ 0x26
  5382                           
  5383                           
  5384                           ; 2 bytes @ 0x26
  5385  0046                     	ds	1
  5386  0047                     _dtoa$1681:	
  5387                           
  5388                           ; 2 bytes @ 0x27
  5389  0047                     	ds	1
  5390  0048                     ?___flge:	
  5391  0048                     ?___fladd:	
  5392                           ; 1 bit 
  5393                           
  5394  0048                     ?___fldiv:	
  5395                           ; 4 bytes @ 0x28
  5396                           
  5397  0048                     ___flge@ff1:	
  5398                           ; 4 bytes @ 0x28
  5399                           
  5400  0048                     ___fladd@b:	
  5401                           ; 4 bytes @ 0x28
  5402                           
  5403  0048                     ___fldiv@a:	
  5404                           ; 4 bytes @ 0x28
  5405                           
  5406                           
  5407                           ; 4 bytes @ 0x28
  5408  0048                     	ds	1
  5409  0049                     dtoa@p:	
  5410                           
  5411                           ; 2 bytes @ 0x29
  5412  0049                     	ds	2
  5413  004B                     dtoa@w:	
  5414                           
  5415                           ; 2 bytes @ 0x2B
  5416  004B                     	ds	1
  5417  004C                     ___flge@ff2:	
  5418  004C                     ___fladd@a:	
  5419                           ; 4 bytes @ 0x2C
  5420                           
  5421  004C                     ___fldiv@b:	
  5422                           ; 4 bytes @ 0x2C
  5423                           
  5424                           
  5425                           ; 4 bytes @ 0x2C
  5426  004C                     	ds	1
  5427  004D                     dtoa@s:	
  5428                           
  5429                           ; 2 bytes @ 0x2D
  5430  004D                     	ds	2
  5431  004F                     dtoa@n:	
  5432                           
  5433                           ; 8 bytes @ 0x2F
  5434  004F                     	ds	1
  5435  0050                     ??___flge:	
  5436  0050                     ??___fladd:	
  5437                           ; 1 bytes @ 0x30
  5438                           
  5439  0050                     ??___fldiv:	
  5440                           ; 1 bytes @ 0x30
  5441                           
  5442                           
  5443                           ; 1 bytes @ 0x30
  5444  0050                     	ds	4
  5445  0054                     ?_checkSensor:	
  5446  0054                     checkSensor@data:	
  5447                           ; 1 bytes @ 0x34
  5448                           
  5449                           
  5450                           ; 2 bytes @ 0x34
  5451  0054                     	ds	1
  5452  0055                     ___fldiv@rem:	
  5453                           
  5454                           ; 4 bytes @ 0x35
  5455  0055                     	ds	1
  5456  0056                     ??_checkSensor:	
  5457                           
  5458                           ; 1 bytes @ 0x36
  5459  0056                     	ds	1
  5460  0057                     dtoa@i:	
  5461                           
  5462                           ; 2 bytes @ 0x37
  5463  0057                     	ds	1
  5464  0058                     ___fladd@signs:	
  5465                           
  5466                           ; 1 bytes @ 0x38
  5467  0058                     	ds	1
  5468  0059                     ___fladd@aexp:	
  5469  0059                     ___fldiv@sign:	
  5470                           ; 1 bytes @ 0x39
  5471                           
  5472                           
  5473                           ; 1 bytes @ 0x39
  5474  0059                     	ds	1
  5475  005A                     checkSensor@dp:	
  5476  005A                     ___fladd@bexp:	
  5477                           ; 1 bytes @ 0x3A
  5478                           
  5479  005A                     ___fldiv@new_exp:	
  5480                           ; 1 bytes @ 0x3A
  5481                           
  5482                           
  5483                           ; 2 bytes @ 0x3A
  5484  005A                     	ds	1
  5485  005B                     ___fladd@grs:	
  5486                           
  5487                           ; 1 bytes @ 0x3B
  5488  005B                     	ds	1
  5489  005C                     ?___flsub:	
  5490  005C                     ___flsub@a:	
  5491                           ; 4 bytes @ 0x3C
  5492                           
  5493  005C                     ___fldiv@grs:	
  5494                           ; 4 bytes @ 0x3C
  5495                           
  5496                           
  5497                           ; 4 bytes @ 0x3C
  5498  005C                     	ds	4
  5499  0060                     ___fldiv@bexp:	
  5500  0060                     ___flsub@b:	
  5501                           ; 1 bytes @ 0x40
  5502                           
  5503                           
  5504                           ; 4 bytes @ 0x40
  5505  0060                     	ds	1
  5506  0061                     ___fldiv@aexp:	
  5507                           
  5508                           ; 1 bytes @ 0x41
  5509  0061                     	ds	1
  5510  0062                     ?_convertAnalogValues:	
  5511  0062                     ?_floorf:	
  5512                           ; 1 bytes @ 0x42
  5513                           
  5514  0062                     convertAnalogValues@data:	
  5515                           ; 4 bytes @ 0x42
  5516                           
  5517  0062                     floorf@x:	
  5518                           ; 2 bytes @ 0x42
  5519                           
  5520                           
  5521                           ; 4 bytes @ 0x42
  5522  0062                     	ds	2
  5523  0064                     ??_convertAnalogValues:	
  5524  0064                     ??_spinInput:	
  5525                           ; 1 bytes @ 0x44
  5526                           
  5527  0064                     ??___flsub:	
  5528                           ; 1 bytes @ 0x44
  5529                           
  5530  0064                     _convertAnalogValues$2424:	
  5531                           ; 1 bytes @ 0x44
  5532                           
  5533                           
  5534                           ; 4 bytes @ 0x44
  5535  0064                     	ds	1
  5536  0065                     spinInput@dir:	
  5537                           
  5538                           ; 1 bytes @ 0x45
  5539  0065                     	ds	1
  5540  0066                     ??_floorf:	
  5541                           
  5542                           ; 1 bytes @ 0x46
  5543  0066                     	ds	2
  5544  0068                     convertAnalogValues@adc:	
  5545                           
  5546                           ; 2 bytes @ 0x48
  5547  0068                     	ds	4
  5548  006C                     ??_efgtoa:	
  5549                           
  5550                           ; 1 bytes @ 0x4C
  5551  006C                     	ds	4
  5552  0070                     ??_setDPOffset:	
  5553  0070                     ??_setSkyTemp:	
  5554                           ; 1 bytes @ 0x50
  5555                           
  5556  0070                     ??_setFudgeFactor:	
  5557                           ; 1 bytes @ 0x50
  5558                           
  5559                           
  5560                           	psect	maintext
  5561  23E1                     __pmaintext:	
  5562                           ; 1 bytes @ 0x50
  5563 ;;
  5564 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  5565 ;;
  5566 ;; *************** function _main *****************
  5567 ;; Defined at:
  5568 ;;		line 61 in file "main.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;		None
  5571 ;; Auto vars:     Size  Location     Type
  5572 ;;  checkInt        4    0[BANK4 ] unsigned long 
  5573 ;; Return value:  Size  Location     Type
  5574 ;;                  1    wreg      void 
  5575 ;; Registers used:
  5576 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5577 ;; Tracked objects:
  5578 ;;		On entry : B3F/0
  5579 ;;		On exit  : 0/0
  5580 ;;		Unchanged: 0/0
  5581 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5583 ;;      Locals:         0       0       0       0       0       4       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5584 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5585 ;;      Totals:         0       0       0       1       0       4       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5586 ;;Total ram usage:        5 bytes
  5587 ;; Hardware stack levels required when called:   13
  5588 ;; This function calls:
  5589 ;;		_OLED_clearDisplay
  5590 ;;		_OLED_init
  5591 ;;		_OLED_loadSpecialChars
  5592 ;;		_OLED_returnHome
  5593 ;;		_checkSensor
  5594 ;;		_convertAnalogValues
  5595 ;;		_initGlobalData
  5596 ;;		_initialize
  5597 ;;		_menu
  5598 ;;		_timeNow
  5599 ;;		_timeSince
  5600 ;; This function is called by:
  5601 ;;		Startup code after reset
  5602 ;; This function uses a non-reentrant model
  5603 ;;
  5604                           
  5605                           
  5606                           ;psect for function _main
  5607  23E1                     _main:	
  5608                           
  5609                           ;main.c: 63:  uint32_t checkInt = 0;
  5610                           
  5611                           ;incstack = 0
  5612                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5613  23E1  3000               	movlw	0
  5614  23E2  0144               	movlb	4	; select bank4
  5615  23E3  00EF               	movwf	(main@checkInt+3)^(0+512)
  5616  23E4  3000               	movlw	0
  5617  23E5  00EE               	movwf	(main@checkInt+2)^(0+512)
  5618  23E6  3000               	movlw	0
  5619  23E7  00ED               	movwf	(main@checkInt+1)^(0+512)
  5620  23E8  3000               	movlw	0
  5621  23E9  00EC               	movwf	main@checkInt^(0+512)
  5622                           
  5623                           ;main.c: 65:  initialize();
  5624  23EA  31AD  25DA  31A3   	fcall	_initialize
  5625                           
  5626                           ;main.c: 66:  LATBbits.LATB5 = 1;
  5627  23ED  0140               	movlb	0	; select bank0
  5628  23EE  1699               	bsf	25,5	;volatile
  5629                           
  5630                           ;main.c: 67:  OLED_init();
  5631  23EF  31A4  245D  31A3   	fcall	_OLED_init
  5632                           
  5633                           ;main.c: 68:  OLED_loadSpecialChars();
  5634  23F2  31AC  240C  31A3   	fcall	_OLED_loadSpecialChars
  5635                           
  5636                           ;main.c: 69:  OLED_returnHome();
  5637  23F5  3190  2003  31A3   	fcall	_OLED_returnHome
  5638                           
  5639                           ;main.c: 70:  OLED_clearDisplay();
  5640  23F8  31A9  2186  31A3   	fcall	_OLED_clearDisplay
  5641                           
  5642                           ;main.c: 71:  initGlobalData(&data);
  5643  23FB  3053               	movlw	83
  5644  23FC  0140               	movlb	0	; select bank0
  5645  23FD  00A6               	movwf	initGlobalData@data
  5646  23FE  3027               	movlw	39
  5647  23FF  00A7               	movwf	initGlobalData@data+1
  5648  2400  3193  234A  31A3   	fcall	_initGlobalData
  5649                           
  5650                           ;main.c: 73:  LATCbits.LATC3 = 1;
  5651  2403  0140               	movlb	0	; select bank0
  5652  2404  159A               	bsf	26,3	;volatile
  5653                           
  5654                           ;main.c: 74:  LATAbits.LATA0 = 1;
  5655  2405  1418               	bsf	24,0	;volatile
  5656  2406                     l115:	
  5657                           ;main.c: 76:  while (1) {
  5658                           
  5659  2406  0064               	clrwdt	;# 
  5660                           
  5661                           ;main.c: 78:   convertAnalogValues(&data);
  5662  2407  3053               	movlw	83
  5663  2408  0140               	movlb	0	; select bank0
  5664  2409  00E2               	movwf	convertAnalogValues@data
  5665  240A  3027               	movlw	39
  5666  240B  00E3               	movwf	convertAnalogValues@data+1
  5667  240C  3194  24D2  31A3   	fcall	_convertAnalogValues
  5668                           
  5669                           ;main.c: 79:   checkSensor(&data);
  5670  240F  3053               	movlw	83
  5671  2410  0140               	movlb	0	; select bank0
  5672  2411  00D4               	movwf	checkSensor@data
  5673  2412  3027               	movlw	39
  5674  2413  00D5               	movwf	checkSensor@data+1
  5675  2414  3190  2072  31A3   	fcall	_checkSensor
  5676                           
  5677                           ;main.c: 80:   if (timeSince(checkInt) > 10) {
  5678  2417  0144               	movlb	4	; select bank4
  5679  2418  086F               	movf	(main@checkInt+3)^(0+512),w
  5680  2419  0140               	movlb	0	; select bank0
  5681  241A  00A7               	movwf	timeSince@since+3
  5682  241B  0144               	movlb	4	; select bank4
  5683  241C  086E               	movf	(main@checkInt+2)^(0+512),w
  5684  241D  0140               	movlb	0	; select bank0
  5685  241E  00A6               	movwf	timeSince@since+2
  5686  241F  0144               	movlb	4	; select bank4
  5687  2420  086D               	movf	(main@checkInt+1)^(0+512),w
  5688  2421  0140               	movlb	0	; select bank0
  5689  2422  00A5               	movwf	timeSince@since+1
  5690  2423  0144               	movlb	4	; select bank4
  5691  2424  086C               	movf	main@checkInt^(0+512),w
  5692  2425  0140               	movlb	0	; select bank0
  5693  2426  00A4               	movwf	timeSince@since
  5694  2427  31A0  2002  31A3   	fcall	_timeSince
  5695  242A  0140               	movlb	0	; select bank0
  5696  242B  0827               	movf	?_timeSince+3,w
  5697  242C  1D03               	btfss	3,2
  5698  242D  2C38               	goto	l9124
  5699  242E  0826               	movf	?_timeSince+2,w
  5700  242F  1D03               	btfss	3,2
  5701  2430  2C38               	goto	l9124
  5702  2431  0825               	movf	?_timeSince+1,w
  5703  2432  1D03               	btfss	3,2
  5704  2433  2C38               	goto	l9124
  5705  2434  300B               	movlw	11
  5706  2435  0224               	subwf	?_timeSince,w
  5707  2436  1C03               	btfss	3,0
  5708  2437  2C4B               	goto	l9126
  5709  2438                     l9124:	
  5710                           
  5711                           ;main.c: 81:    checkInt = timeNow();
  5712  2438  31A9  21F5  31A3   	fcall	_timeNow
  5713  243B  0140               	movlb	0	; select bank0
  5714  243C  0823               	movf	?_timeNow+3,w
  5715  243D  0144               	movlb	4	; select bank4
  5716  243E  00EF               	movwf	(main@checkInt+3)^(0+512)
  5717  243F  0140               	movlb	0	; select bank0
  5718  2440  0822               	movf	?_timeNow+2,w
  5719  2441  0144               	movlb	4	; select bank4
  5720  2442  00EE               	movwf	(main@checkInt+2)^(0+512)
  5721  2443  0140               	movlb	0	; select bank0
  5722  2444  0821               	movf	?_timeNow+1,w
  5723  2445  0144               	movlb	4	; select bank4
  5724  2446  00ED               	movwf	(main@checkInt+1)^(0+512)
  5725  2447  0140               	movlb	0	; select bank0
  5726  2448  0820               	movf	?_timeNow,w
  5727  2449  0144               	movlb	4	; select bank4
  5728  244A  00EC               	movwf	main@checkInt^(0+512)
  5729  244B                     l9126:	
  5730                           
  5731                           ;main.c: 86:   menu(&data);
  5732  244B  3053               	movlw	83
  5733  244C  0142               	movlb	2	; select bank2
  5734  244D  00EB               	movwf	menu@data^(0+256)
  5735  244E  3027               	movlw	39
  5736  244F  00EC               	movwf	(menu@data^(0+256)+1)
  5737  2450  31A1  2163  31A3   	fcall	_menu
  5738                           
  5739                           ;main.c: 87:   _delay((unsigned long)((10)*(4000000/4000.0)));
  5740  2453  300D               	movlw	13
  5741  2454  0142               	movlb	2	; select bank2
  5742  2455  00ED               	movwf	??_main^(0+256)
  5743  2456  30FB               	movlw	251
  5744  2457                     u12667:	
  5745  2457  0B89               	decfsz	9,f
  5746  2458  2C57               	goto	u12667
  5747  2459  0BED               	decfsz	??_main^(0+256),f
  5748  245A  2C57               	goto	u12667
  5749  245B  3200               	nop2
  5750  245C  2C06               	goto	l115
  5751  245D                     __end_of_main:	
  5752                           
  5753                           	psect	text1
  5754  2163                     __ptext1:	
  5755 ;; *************** function _menu *****************
  5756 ;; Defined at:
  5757 ;;		line 93 in file "menuhelper.c"
  5758 ;; Parameters:    Size  Location     Type
  5759 ;;  data            2   75[BANK2 ] PTR struct .
  5760 ;;		 -> data(157), 
  5761 ;; Auto vars:     Size  Location     Type
  5762 ;;  func            2   17[BANK3 ] PTR FTN(PTR struct .,)un
  5763 ;;		 -> setFudgeFactor(1), setSkyTemp(1), setDPOffset(1), setup(1), 
  5764 ;;		 -> setLensDia(1), setOutputPower(1), channelSetup(1), channelView(1), 
  5765 ;;		 -> statusView(1), NULL(0), 
  5766 ;;  nextState       1   19[BANK3 ] char 
  5767 ;;  pb              1   16[BANK3 ] enum E7928
  5768 ;;  page            1   15[BANK3 ] char 
  5769 ;; Return value:  Size  Location     Type
  5770 ;;                  1    wreg      void 
  5771 ;; Registers used:
  5772 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5773 ;; Tracked objects:
  5774 ;;		On entry : 0/0
  5775 ;;		On exit  : 0/0
  5776 ;;		Unchanged: 0/0
  5777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5778 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5779 ;;      Locals:         0       0       0       0       5       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5780 ;;      Temps:          0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5781 ;;      Totals:         0       0       0       2       9       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5782 ;;Total ram usage:       11 bytes
  5783 ;; Hardware stack levels used:    1
  5784 ;; Hardware stack levels required when called:   12
  5785 ;; This function calls:
  5786 ;;		_channelSetup
  5787 ;;		_channelView
  5788 ;;		_getNextState
  5789 ;;		_getPB
  5790 ;;		_getStateFunc
  5791 ;;		_menuError
  5792 ;;		_setDPOffset
  5793 ;;		_setFudgeFactor
  5794 ;;		_setLensDia
  5795 ;;		_setOutputPower
  5796 ;;		_setSkyTemp
  5797 ;;		_setup
  5798 ;;		_statusView
  5799 ;; This function is called by:
  5800 ;;		_main
  5801 ;; This function uses a non-reentrant model
  5802 ;;
  5803                           
  5804                           
  5805                           ;psect for function _menu
  5806  2163                     _menu:	
  5807                           
  5808                           ;menuhelper.c: 93: void menu(t_globalData *data);menuhelper.c: 94: {;menuhelper.c: 95:  
      +                          static uint8_t state = ST_STATUS_VIEW;;menuhelper.c: 96:  int8_t page, nextState;;menuhe
      +                          lper.c: 97:  enum e_buttonPress pb;;menuhelper.c: 98:  t_stateFuncPtr func;;menuhelper.c
      +                          : 101:  func = getStateFunc(state);
  5809                           
  5810                           ;incstack = 0
  5811                           ; Regs used in _menu: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5812  2163  0143               	movlb	3	; select bank3
  5813  2164  083D               	movf	menu@state^(0+384),w
  5814  2165  3188  2001  31A1   	fcall	_getStateFunc
  5815  2168  0140               	movlb	0	; select bank0
  5816  2169  0827               	movf	?_getStateFunc+1,w
  5817  216A  0143               	movlb	3	; select bank3
  5818  216B  00ED               	movwf	(menu@func+1)^(0+384)
  5819  216C  0140               	movlb	0	; select bank0
  5820  216D  0826               	movf	?_getStateFunc,w
  5821  216E  0143               	movlb	3	; select bank3
  5822  216F  00EC               	movwf	menu@func^(0+384)
  5823                           
  5824                           ;menuhelper.c: 102:  if (func)
  5825  2170  086C               	movf	menu@func^(0+384),w
  5826  2171  046D               	iorwf	(menu@func+1)^(0+384),w
  5827  2172  1903               	btfsc	3,2
  5828  2173  2984               	goto	l9082
  5829                           
  5830                           ;menuhelper.c: 103:   page = (*func)(data);
  5831  2174  0142               	movlb	2	; select bank2
  5832  2175  086C               	movf	(menu@data+1)^(0+256),w
  5833  2176  00E2               	movwf	(setFudgeFactor@data+1)^(0+256)
  5834  2177  086B               	movf	menu@data^(0+256),w
  5835  2178  00E1               	movwf	setFudgeFactor@data^(0+256)
  5836  2179  0143               	movlb	3	; select bank3
  5837  217A  086D               	movf	(menu@func+1)^(0+384),w
  5838  217B  008A               	movwf	10
  5839  217C  086C               	movf	menu@func^(0+384),w
  5840  217D  000A               	callw
  5841  217E  31A1               	pagesel	$
  5842  217F  0143               	movlb	3	; select bank3
  5843  2180  00E6               	movwf	??_menu^(0+384)
  5844  2181  0866               	movf	??_menu^(0+384),w
  5845  2182  00EA               	movwf	menu@page^(0+384)
  5846  2183  2987               	goto	l9084
  5847  2184                     l9082:	
  5848                           
  5849                           ;menuhelper.c: 105:   menuError();
  5850  2184  31AA  2206  31A1   	fcall	_menuError
  5851  2187                     l9084:	
  5852                           
  5853                           ;menuhelper.c: 107:  g_updateScreen = 0;
  5854  2187  0143               	movlb	3	; select bank3
  5855  2188  01EF               	clrf	_g_updateScreen^(0+384)
  5856                           
  5857                           ;menuhelper.c: 108:  pb = getPB();
  5858  2189  31A9  21D2  31A1   	fcall	_getPB
  5859  218C  0143               	movlb	3	; select bank3
  5860  218D  00E6               	movwf	??_menu^(0+384)
  5861  218E  0866               	movf	??_menu^(0+384),w
  5862  218F  00EB               	movwf	menu@pb^(0+384)
  5863                           
  5864                           ;menuhelper.c: 110:  nextState = getNextState(state, page, pb);
  5865  2190  086A               	movf	menu@page^(0+384),w
  5866  2191  00E6               	movwf	??_menu^(0+384)
  5867  2192  0866               	movf	??_menu^(0+384),w
  5868  2193  0140               	movlb	0	; select bank0
  5869  2194  00A6               	movwf	getNextState@page
  5870  2195  0143               	movlb	3	; select bank3
  5871  2196  086B               	movf	menu@pb^(0+384),w
  5872  2197  00E7               	movwf	(??_menu+1)^(0+384)
  5873  2198  0867               	movf	(??_menu+1)^(0+384),w
  5874  2199  0140               	movlb	0	; select bank0
  5875  219A  00A7               	movwf	getNextState@pb
  5876  219B  0143               	movlb	3	; select bank3
  5877  219C  083D               	movf	menu@state^(0+384),w
  5878  219D  31A4  24E8  31A1   	fcall	_getNextState
  5879  21A0  0143               	movlb	3	; select bank3
  5880  21A1  00E8               	movwf	(??_menu+2)^(0+384)
  5881  21A2  0868               	movf	(??_menu+2)^(0+384),w
  5882  21A3  00EE               	movwf	menu@nextState^(0+384)
  5883                           
  5884                           ;menuhelper.c: 112:  if (nextState > -1) {
  5885  21A4  1BEE               	btfsc	menu@nextState^(0+384),7
  5886  21A5  0008               	return
  5887                           
  5888                           ;menuhelper.c: 114:   if (state != nextState) {
  5889  21A6  086E               	movf	menu@nextState^(0+384),w
  5890  21A7  00E6               	movwf	??_menu^(0+384)
  5891  21A8  01E7               	clrf	(??_menu^(0+384)+1)
  5892  21A9  1BE6               	btfsc	??_menu^(0+384),7
  5893  21AA  03E7               	decf	(??_menu^(0+384)+1),f
  5894  21AB  083D               	movf	menu@state^(0+384),w
  5895  21AC  00E8               	movwf	(??_menu+2)^(0+384)
  5896  21AD  01E9               	clrf	((??_menu+2)^(0+384)+1)
  5897  21AE  0867               	movf	(??_menu+1)^(0+384),w
  5898  21AF  0669               	xorwf	(??_menu+3)^(0+384),w
  5899  21B0  1D03               	skipz
  5900  21B1  29B4               	goto	u12515
  5901  21B2  0866               	movf	??_menu^(0+384),w
  5902  21B3  0668               	xorwf	(??_menu+2)^(0+384),w
  5903  21B4                     u12515:	
  5904  21B4  1903               	skipnz
  5905  21B5  0008               	return
  5906                           
  5907                           ;menuhelper.c: 115:    g_updateScreen = 1;
  5908  21B6  01EF               	clrf	_g_updateScreen^(0+384)
  5909  21B7  0AEF               	incf	_g_updateScreen^(0+384),f
  5910                           
  5911                           ;menuhelper.c: 116:    state = nextState;
  5912  21B8  086E               	movf	menu@nextState^(0+384),w
  5913  21B9  00E6               	movwf	??_menu^(0+384)
  5914  21BA  0866               	movf	??_menu^(0+384),w
  5915  21BB  00BD               	movwf	menu@state^(0+384)
  5916  21BC  0008               	return
  5917  21BD                     __end_of_menu:	
  5918                           
  5919                           	psect	text2
  5920  210A                     __ptext2:	
  5921 ;; *************** function _setFudgeFactor *****************
  5922 ;; Defined at:
  5923 ;;		line 202 in file "menu.c"
  5924 ;; Parameters:    Size  Location     Type
  5925 ;;  data            2   65[BANK2 ] PTR struct .
  5926 ;;		 -> data(157), 
  5927 ;; Auto vars:     Size  Location     Type
  5928 ;;		None
  5929 ;; Return value:  Size  Location     Type
  5930 ;;                  1    wreg      unsigned char 
  5931 ;; Registers used:
  5932 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5933 ;; Tracked objects:
  5934 ;;		On entry : 0/0
  5935 ;;		On exit  : 0/0
  5936 ;;		Unchanged: 0/0
  5937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  5938 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5941 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  5942 ;;Total ram usage:        2 bytes
  5943 ;; Hardware stack levels used:    1
  5944 ;; Hardware stack levels required when called:   11
  5945 ;; This function calls:
  5946 ;;		_OLED_print_xy
  5947 ;;		_returnToPage
  5948 ;;		_spinInput
  5949 ;;		_sprintf
  5950 ;; This function is called by:
  5951 ;;		_menu
  5952 ;; This function uses a non-reentrant model
  5953 ;;
  5954                           
  5955                           
  5956                           ;psect for function _setFudgeFactor
  5957  210A                     _setFudgeFactor:	
  5958                           
  5959                           ;menu.c: 202: uint8_t setFudgeFactor(t_globalData *data);menu.c: 203: {;menu.c: 204:  re
      +                          turnToPage(0);
  5960                           
  5961                           ;incstack = 0
  5962                           ; Regs used in _setFudgeFactor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5963  210A  3000               	movlw	0
  5964  210B  31AC  2461  31A1   	fcall	_returnToPage
  5965                           
  5966                           ;menu.c: 205:  OLED_print_xy(0, 0, "Fudge factor");
  5967  210E  0140               	movlb	0	; select bank0
  5968  210F  01A7               	clrf	OLED_print_xy@row
  5969  2110  304A               	movlw	low (STR_34| (0+32768))
  5970  2111  00A8               	movwf	OLED_print_xy@s
  5971  2112  30B2               	movlw	high (STR_34| (0+32768))
  5972  2113  00A9               	movwf	OLED_print_xy@s+1
  5973  2114  3000               	movlw	0
  5974  2115  31AC  24F0  31A1   	fcall	_OLED_print_xy
  5975                           
  5976                           ;menu.c: 206:  spinInput(&data->fudgeFactor, 0.1, 5, 0.1);
  5977  2118  0142               	movlb	2	; select bank2
  5978  2119  0861               	movf	setFudgeFactor@data^(0+256),w
  5979  211A  3E28               	addlw	40
  5980  211B  0141               	movlb	1	; select bank1
  5981  211C  00A0               	movwf	spinInput@input^(0+128)
  5982  211D  3000               	movlw	0
  5983  211E  0142               	movlb	2	; select bank2
  5984  211F  3D62               	addwfc	(setFudgeFactor@data+1)^(0+256),w
  5985  2120  0141               	movlb	1	; select bank1
  5986  2121  00A1               	movwf	(spinInput@input+1)^(0+128)
  5987  2122  303D               	movlw	61
  5988  2123  00A5               	movwf	(spinInput@min+3)^(0+128)
  5989  2124  30CC               	movlw	204
  5990  2125  00A4               	movwf	(spinInput@min+2)^(0+128)
  5991  2126  30CC               	movlw	204
  5992  2127  00A3               	movwf	(spinInput@min+1)^(0+128)
  5993  2128  30CD               	movlw	205
  5994  2129  00A2               	movwf	spinInput@min^(0+128)
  5995  212A  3040               	movlw	64
  5996  212B  00A9               	movwf	(spinInput@max+3)^(0+128)
  5997  212C  30A0               	movlw	160
  5998  212D  00A8               	movwf	(spinInput@max+2)^(0+128)
  5999  212E  3000               	movlw	0
  6000  212F  00A7               	movwf	(spinInput@max+1)^(0+128)
  6001  2130  3000               	movlw	0
  6002  2131  00A6               	movwf	spinInput@max^(0+128)
  6003  2132  303D               	movlw	61
  6004  2133  00AD               	movwf	(spinInput@step+3)^(0+128)
  6005  2134  30CC               	movlw	204
  6006  2135  00AC               	movwf	(spinInput@step+2)^(0+128)
  6007  2136  30CC               	movlw	204
  6008  2137  00AB               	movwf	(spinInput@step+1)^(0+128)
  6009  2138  30CD               	movlw	205
  6010  2139  00AA               	movwf	spinInput@step^(0+128)
  6011  213A  31A7  274D  31A1   	fcall	_spinInput
  6012                           
  6013                           ;menu.c: 207:  sprintf(sBuf, "%3.1f         ", data->fudgeFactor);
  6014  213D  30CE               	movlw	low _sBuf
  6015  213E  0142               	movlb	2	; select bank2
  6016  213F  00C1               	movwf	sprintf@s^(0+256)
  6017  2140  3001               	movlw	high _sBuf
  6018  2141  00C2               	movwf	(sprintf@s+1)^(0+256)
  6019  2142  3064               	movlw	low (STR_35| (0+32768))
  6020  2143  00C3               	movwf	sprintf@fmt^(0+256)
  6021  2144  30B1               	movlw	high (STR_35| (0+32768))
  6022  2145  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  6023  2146  0861               	movf	setFudgeFactor@data^(0+256),w
  6024  2147  3E28               	addlw	40
  6025  2148  0086               	movwf	6
  6026  2149  3000               	movlw	0
  6027  214A  3D62               	addwfc	(setFudgeFactor@data+1)^(0+256),w
  6028  214B  0087               	movwf	7
  6029  214C  3F40               	moviw [0]fsr1
  6030  214D  00C5               	movwf	(?_sprintf^(0+256)+4)
  6031  214E  3F41               	moviw [1]fsr1
  6032  214F  00C6               	movwf	((?_sprintf+1)^(0+256)+4)
  6033  2150  3F42               	moviw [2]fsr1
  6034  2151  00C7               	movwf	((?_sprintf+2)^(0+256)+4)
  6035  2152  3F43               	moviw [3]fsr1
  6036  2153  00C8               	movwf	((?_sprintf+3)^(0+256)+4)
  6037  2154  31AB  23E6  31A1   	fcall	_sprintf
  6038                           
  6039                           ;menu.c: 208:  OLED_print_xy(0,1,sBuf);
  6040  2157  0140               	movlb	0	; select bank0
  6041  2158  01A7               	clrf	OLED_print_xy@row
  6042  2159  0AA7               	incf	OLED_print_xy@row,f
  6043  215A  30CE               	movlw	low _sBuf
  6044  215B  00A8               	movwf	OLED_print_xy@s
  6045  215C  3001               	movlw	high _sBuf
  6046  215D  00A9               	movwf	OLED_print_xy@s+1
  6047  215E  3000               	movlw	0
  6048  215F  31AC  24F0         	fcall	_OLED_print_xy
  6049                           
  6050                           ;menu.c: 209:  return 0;
  6051  2161  3000               	movlw	0
  6052  2162  0008               	return
  6053  2163                     __end_of_setFudgeFactor:	
  6054                           
  6055                           	psect	text3
  6056  20B1                     __ptext3:	
  6057 ;; *************** function _setSkyTemp *****************
  6058 ;; Defined at:
  6059 ;;		line 189 in file "menu.c"
  6060 ;; Parameters:    Size  Location     Type
  6061 ;;  data            2   65[BANK2 ] PTR struct .
  6062 ;;		 -> data(157), 
  6063 ;; Auto vars:     Size  Location     Type
  6064 ;;		None
  6065 ;; Return value:  Size  Location     Type
  6066 ;;                  1    wreg      unsigned char 
  6067 ;; Registers used:
  6068 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6069 ;; Tracked objects:
  6070 ;;		On entry : 0/0
  6071 ;;		On exit  : 0/0
  6072 ;;		Unchanged: 0/0
  6073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6074 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6077 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6078 ;;Total ram usage:        2 bytes
  6079 ;; Hardware stack levels used:    1
  6080 ;; Hardware stack levels required when called:   11
  6081 ;; This function calls:
  6082 ;;		_OLED_print_xy
  6083 ;;		_returnToPage
  6084 ;;		_spinInput
  6085 ;;		_sprintf
  6086 ;; This function is called by:
  6087 ;;		_menu
  6088 ;; This function uses a non-reentrant model
  6089 ;;
  6090                           
  6091                           
  6092                           ;psect for function _setSkyTemp
  6093  20B1                     _setSkyTemp:	
  6094                           
  6095                           ;menu.c: 189: uint8_t setSkyTemp(t_globalData *data);menu.c: 190: {;menu.c: 191:  return
      +                          ToPage(0);
  6096                           
  6097                           ;incstack = 0
  6098                           ; Regs used in _setSkyTemp: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6099  20B1  3000               	movlw	0
  6100  20B2  31AC  2461  31A0   	fcall	_returnToPage
  6101                           
  6102                           ;menu.c: 192:  OLED_print_xy(0, 0, "Sky temp.   ");
  6103  20B5  0140               	movlb	0	; select bank0
  6104  20B6  01A7               	clrf	OLED_print_xy@row
  6105  20B7  30EF               	movlw	low (STR_32| (0+32768))
  6106  20B8  00A8               	movwf	OLED_print_xy@s
  6107  20B9  30B1               	movlw	high (STR_32| (0+32768))
  6108  20BA  00A9               	movwf	OLED_print_xy@s+1
  6109  20BB  3000               	movlw	0
  6110  20BC  31AC  24F0  31A0   	fcall	_OLED_print_xy
  6111                           
  6112                           ;menu.c: 193:  spinInput(&data->skyTemp, -50, -20, 1);
  6113  20BF  0142               	movlb	2	; select bank2
  6114  20C0  0861               	movf	setSkyTemp@data^(0+256),w
  6115  20C1  3E24               	addlw	36
  6116  20C2  0141               	movlb	1	; select bank1
  6117  20C3  00A0               	movwf	spinInput@input^(0+128)
  6118  20C4  3000               	movlw	0
  6119  20C5  0142               	movlb	2	; select bank2
  6120  20C6  3D62               	addwfc	(setSkyTemp@data+1)^(0+256),w
  6121  20C7  0141               	movlb	1	; select bank1
  6122  20C8  00A1               	movwf	(spinInput@input+1)^(0+128)
  6123  20C9  30C2               	movlw	194
  6124  20CA  00A5               	movwf	(spinInput@min+3)^(0+128)
  6125  20CB  3048               	movlw	72
  6126  20CC  00A4               	movwf	(spinInput@min+2)^(0+128)
  6127  20CD  3000               	movlw	0
  6128  20CE  00A3               	movwf	(spinInput@min+1)^(0+128)
  6129  20CF  3000               	movlw	0
  6130  20D0  00A2               	movwf	spinInput@min^(0+128)
  6131  20D1  30C1               	movlw	193
  6132  20D2  00A9               	movwf	(spinInput@max+3)^(0+128)
  6133  20D3  30A0               	movlw	160
  6134  20D4  00A8               	movwf	(spinInput@max+2)^(0+128)
  6135  20D5  3000               	movlw	0
  6136  20D6  00A7               	movwf	(spinInput@max+1)^(0+128)
  6137  20D7  3000               	movlw	0
  6138  20D8  00A6               	movwf	spinInput@max^(0+128)
  6139  20D9  303F               	movlw	63
  6140  20DA  00AD               	movwf	(spinInput@step+3)^(0+128)
  6141  20DB  3080               	movlw	128
  6142  20DC  00AC               	movwf	(spinInput@step+2)^(0+128)
  6143  20DD  3000               	movlw	0
  6144  20DE  00AB               	movwf	(spinInput@step+1)^(0+128)
  6145  20DF  3000               	movlw	0
  6146  20E0  00AA               	movwf	spinInput@step^(0+128)
  6147  20E1  31A7  274D  31A0   	fcall	_spinInput
  6148                           
  6149                           ;menu.c: 194:  sprintf(sBuf, "%3.0f\001        ", data->skyTemp);
  6150  20E4  30CE               	movlw	low _sBuf
  6151  20E5  0142               	movlb	2	; select bank2
  6152  20E6  00C1               	movwf	sprintf@s^(0+256)
  6153  20E7  3001               	movlw	high _sBuf
  6154  20E8  00C2               	movwf	(sprintf@s+1)^(0+256)
  6155  20E9  3055               	movlw	low (STR_33| (0+32768))
  6156  20EA  00C3               	movwf	sprintf@fmt^(0+256)
  6157  20EB  30B1               	movlw	high (STR_33| (0+32768))
  6158  20EC  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  6159  20ED  0861               	movf	setSkyTemp@data^(0+256),w
  6160  20EE  3E24               	addlw	36
  6161  20EF  0086               	movwf	6
  6162  20F0  3000               	movlw	0
  6163  20F1  3D62               	addwfc	(setSkyTemp@data+1)^(0+256),w
  6164  20F2  0087               	movwf	7
  6165  20F3  3F40               	moviw [0]fsr1
  6166  20F4  00C5               	movwf	(?_sprintf^(0+256)+4)
  6167  20F5  3F41               	moviw [1]fsr1
  6168  20F6  00C6               	movwf	((?_sprintf+1)^(0+256)+4)
  6169  20F7  3F42               	moviw [2]fsr1
  6170  20F8  00C7               	movwf	((?_sprintf+2)^(0+256)+4)
  6171  20F9  3F43               	moviw [3]fsr1
  6172  20FA  00C8               	movwf	((?_sprintf+3)^(0+256)+4)
  6173  20FB  31AB  23E6  31A0   	fcall	_sprintf
  6174                           
  6175                           ;menu.c: 195:  OLED_print_xy(0,1,sBuf);
  6176  20FE  0140               	movlb	0	; select bank0
  6177  20FF  01A7               	clrf	OLED_print_xy@row
  6178  2100  0AA7               	incf	OLED_print_xy@row,f
  6179  2101  30CE               	movlw	low _sBuf
  6180  2102  00A8               	movwf	OLED_print_xy@s
  6181  2103  3001               	movlw	high _sBuf
  6182  2104  00A9               	movwf	OLED_print_xy@s+1
  6183  2105  3000               	movlw	0
  6184  2106  31AC  24F0         	fcall	_OLED_print_xy
  6185                           
  6186                           ;menu.c: 196:  return 0;
  6187  2108  3000               	movlw	0
  6188  2109  0008               	return
  6189  210A                     __end_of_setSkyTemp:	
  6190                           
  6191                           	psect	text4
  6192  2058                     __ptext4:	
  6193 ;; *************** function _setDPOffset *****************
  6194 ;; Defined at:
  6195 ;;		line 176 in file "menu.c"
  6196 ;; Parameters:    Size  Location     Type
  6197 ;;  data            2   65[BANK2 ] PTR struct .
  6198 ;;		 -> data(157), 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;		None
  6201 ;; Return value:  Size  Location     Type
  6202 ;;                  1    wreg      unsigned char 
  6203 ;; Registers used:
  6204 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6210 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6211 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6212 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6213 ;;      Totals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6214 ;;Total ram usage:        2 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:   11
  6217 ;; This function calls:
  6218 ;;		_OLED_print_xy
  6219 ;;		_returnToPage
  6220 ;;		_spinInput
  6221 ;;		_sprintf
  6222 ;; This function is called by:
  6223 ;;		_menu
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           
  6228                           ;psect for function _setDPOffset
  6229  2058                     _setDPOffset:	
  6230                           
  6231                           ;menu.c: 176: uint8_t setDPOffset(t_globalData *data);menu.c: 177: {;menu.c: 178:  retur
      +                          nToPage(0);
  6232                           
  6233                           ;incstack = 0
  6234                           ; Regs used in _setDPOffset: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6235  2058  3000               	movlw	0
  6236  2059  31AC  2461  31A0   	fcall	_returnToPage
  6237                           
  6238                           ;menu.c: 179:  OLED_print_xy(0, 0, "DP offset   ");
  6239  205C  0140               	movlb	0	; select bank0
  6240  205D  01A7               	clrf	OLED_print_xy@row
  6241  205E  30FC               	movlw	low (STR_30| (0+32768))
  6242  205F  00A8               	movwf	OLED_print_xy@s
  6243  2060  30B1               	movlw	high (STR_30| (0+32768))
  6244  2061  00A9               	movwf	OLED_print_xy@s+1
  6245  2062  3000               	movlw	0
  6246  2063  31AC  24F0  31A0   	fcall	_OLED_print_xy
  6247                           
  6248                           ;menu.c: 180:  spinInput(&data->dpOffset, 0, 10, 0.5);
  6249  2066  0142               	movlb	2	; select bank2
  6250  2067  0861               	movf	setDPOffset@data^(0+256),w
  6251  2068  3E20               	addlw	32
  6252  2069  0141               	movlb	1	; select bank1
  6253  206A  00A0               	movwf	spinInput@input^(0+128)
  6254  206B  3000               	movlw	0
  6255  206C  0142               	movlb	2	; select bank2
  6256  206D  3D62               	addwfc	(setDPOffset@data+1)^(0+256),w
  6257  206E  0141               	movlb	1	; select bank1
  6258  206F  00A1               	movwf	(spinInput@input+1)^(0+128)
  6259  2070  3000               	movlw	0
  6260  2071  00A5               	movwf	(spinInput@min+3)^(0+128)
  6261  2072  3000               	movlw	0
  6262  2073  00A4               	movwf	(spinInput@min+2)^(0+128)
  6263  2074  3000               	movlw	0
  6264  2075  00A3               	movwf	(spinInput@min+1)^(0+128)
  6265  2076  3000               	movlw	0
  6266  2077  00A2               	movwf	spinInput@min^(0+128)
  6267  2078  3041               	movlw	65
  6268  2079  00A9               	movwf	(spinInput@max+3)^(0+128)
  6269  207A  3020               	movlw	32
  6270  207B  00A8               	movwf	(spinInput@max+2)^(0+128)
  6271  207C  3000               	movlw	0
  6272  207D  00A7               	movwf	(spinInput@max+1)^(0+128)
  6273  207E  3000               	movlw	0
  6274  207F  00A6               	movwf	spinInput@max^(0+128)
  6275  2080  303F               	movlw	63
  6276  2081  00AD               	movwf	(spinInput@step+3)^(0+128)
  6277  2082  3000               	movlw	0
  6278  2083  00AC               	movwf	(spinInput@step+2)^(0+128)
  6279  2084  3000               	movlw	0
  6280  2085  00AB               	movwf	(spinInput@step+1)^(0+128)
  6281  2086  3000               	movlw	0
  6282  2087  00AA               	movwf	spinInput@step^(0+128)
  6283  2088  31A7  274D  31A0   	fcall	_spinInput
  6284                           
  6285                           ;menu.c: 181:  sprintf(sBuf, "temp. +3.1f\001", data->dpOffset);
  6286  208B  30CE               	movlw	low _sBuf
  6287  208C  0142               	movlb	2	; select bank2
  6288  208D  00C1               	movwf	sprintf@s^(0+256)
  6289  208E  3001               	movlw	high _sBuf
  6290  208F  00C2               	movwf	(sprintf@s+1)^(0+256)
  6291  2090  30BB               	movlw	low (STR_31| (0+32768))
  6292  2091  00C3               	movwf	sprintf@fmt^(0+256)
  6293  2092  30B1               	movlw	high (STR_31| (0+32768))
  6294  2093  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  6295  2094  0861               	movf	setDPOffset@data^(0+256),w
  6296  2095  3E20               	addlw	32
  6297  2096  0086               	movwf	6
  6298  2097  3000               	movlw	0
  6299  2098  3D62               	addwfc	(setDPOffset@data+1)^(0+256),w
  6300  2099  0087               	movwf	7
  6301  209A  3F40               	moviw [0]fsr1
  6302  209B  00C5               	movwf	(?_sprintf^(0+256)+4)
  6303  209C  3F41               	moviw [1]fsr1
  6304  209D  00C6               	movwf	((?_sprintf+1)^(0+256)+4)
  6305  209E  3F42               	moviw [2]fsr1
  6306  209F  00C7               	movwf	((?_sprintf+2)^(0+256)+4)
  6307  20A0  3F43               	moviw [3]fsr1
  6308  20A1  00C8               	movwf	((?_sprintf+3)^(0+256)+4)
  6309  20A2  31AB  23E6  31A0   	fcall	_sprintf
  6310                           
  6311                           ;menu.c: 182:  OLED_print_xy(0,1,sBuf);
  6312  20A5  0140               	movlb	0	; select bank0
  6313  20A6  01A7               	clrf	OLED_print_xy@row
  6314  20A7  0AA7               	incf	OLED_print_xy@row,f
  6315  20A8  30CE               	movlw	low _sBuf
  6316  20A9  00A8               	movwf	OLED_print_xy@s
  6317  20AA  3001               	movlw	high _sBuf
  6318  20AB  00A9               	movwf	OLED_print_xy@s+1
  6319  20AC  3000               	movlw	0
  6320  20AD  31AC  24F0         	fcall	_OLED_print_xy
  6321                           
  6322                           ;menu.c: 183:  return 0;
  6323  20AF  3000               	movlw	0
  6324  20B0  0008               	return
  6325  20B1                     __end_of_setDPOffset:	
  6326                           
  6327                           	psect	text5
  6328  21BD                     __ptext5:	
  6329 ;; *************** function _setup *****************
  6330 ;; Defined at:
  6331 ;;		line 160 in file "menu.c"
  6332 ;; Parameters:    Size  Location     Type
  6333 ;;  data            2   65[BANK2 ] PTR struct .
  6334 ;;		 -> data(157), 
  6335 ;; Auto vars:     Size  Location     Type
  6336 ;;		None
  6337 ;; Return value:  Size  Location     Type
  6338 ;;                  1    wreg      unsigned char 
  6339 ;; Registers used:
  6340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6341 ;; Tracked objects:
  6342 ;;		On entry : 0/0
  6343 ;;		On exit  : 0/0
  6344 ;;		Unchanged: 0/0
  6345 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6346 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6348 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6349 ;;      Totals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6350 ;;Total ram usage:        4 bytes
  6351 ;; Hardware stack levels used:    1
  6352 ;; Hardware stack levels required when called:   11
  6353 ;; This function calls:
  6354 ;;		_OLED_print_xy
  6355 ;;		_paging
  6356 ;;		_returnToPage
  6357 ;;		_sprintf
  6358 ;; This function is called by:
  6359 ;;		_menu
  6360 ;; This function uses a non-reentrant model
  6361 ;;
  6362                           
  6363                           
  6364                           ;psect for function _setup
  6365  21BD                     _setup:	
  6366                           
  6367                           ;menu.c: 160: uint8_t setup(t_globalData *data);menu.c: 161: {;menu.c: 162:  static uint
      +                          8_t page = 0;;menu.c: 164:  returnToPage(page);
  6368                           
  6369                           ;incstack = 0
  6370                           ; Regs used in _setup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6371  21BD  0143               	movlb	3	; select bank3
  6372  21BE  083E               	movf	setup@page^(0+384),w
  6373  21BF  31AC  2461  31A1   	fcall	_returnToPage
  6374                           
  6375                           ;menu.c: 165:  OLED_print_xy(0, 0, "DP offset   Sky temp.   Fudge factorBack");
  6376  21C2  0140               	movlb	0	; select bank0
  6377  21C3  01A7               	clrf	OLED_print_xy@row
  6378  21C4  30E7               	movlw	low (STR_28| (0+32768))
  6379  21C5  00A8               	movwf	OLED_print_xy@s
  6380  21C6  30B0               	movlw	high (STR_28| (0+32768))
  6381  21C7  00A9               	movwf	OLED_print_xy@s+1
  6382  21C8  3000               	movlw	0
  6383  21C9  31AC  24F0  31A1   	fcall	_OLED_print_xy
  6384                           
  6385                           ;menu.c: 166:  sprintf(lBuf, "temp. +3.1f\001%3.0f\001        %3.1f         \003        
      +                             ",
  6386  21CC  30A0               	movlw	low _lBuf
  6387  21CD  0142               	movlb	2	; select bank2
  6388  21CE  00C1               	movwf	sprintf@s^(0+256)
  6389  21CF  3002               	movlw	high _lBuf
  6390  21D0  00C2               	movwf	(sprintf@s+1)^(0+256)
  6391  21D1  301B               	movlw	low (STR_29| (0+32768))
  6392  21D2  00C3               	movwf	sprintf@fmt^(0+256)
  6393  21D3  30B0               	movlw	high (STR_29| (0+32768))
  6394  21D4  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  6395  21D5  0861               	movf	setup@data^(0+256),w
  6396  21D6  3E20               	addlw	32
  6397  21D7  0086               	movwf	6
  6398  21D8  3000               	movlw	0
  6399  21D9  3D62               	addwfc	(setup@data+1)^(0+256),w
  6400  21DA  0087               	movwf	7
  6401  21DB  3F40               	moviw [0]fsr1
  6402  21DC  00C5               	movwf	(?_sprintf^(0+256)+4)
  6403  21DD  3F41               	moviw [1]fsr1
  6404  21DE  00C6               	movwf	((?_sprintf+1)^(0+256)+4)
  6405  21DF  3F42               	moviw [2]fsr1
  6406  21E0  00C7               	movwf	((?_sprintf+2)^(0+256)+4)
  6407  21E1  3F43               	moviw [3]fsr1
  6408  21E2  00C8               	movwf	((?_sprintf+3)^(0+256)+4)
  6409  21E3  0861               	movf	setup@data^(0+256),w
  6410  21E4  3E24               	addlw	36
  6411  21E5  0086               	movwf	6
  6412  21E6  3000               	movlw	0
  6413  21E7  3D62               	addwfc	(setup@data+1)^(0+256),w
  6414  21E8  0087               	movwf	7
  6415  21E9  3F40               	moviw [0]fsr1
  6416  21EA  00C9               	movwf	(?_sprintf^(0+256)+8)
  6417  21EB  3F41               	moviw [1]fsr1
  6418  21EC  00CA               	movwf	((?_sprintf+1)^(0+256)+8)
  6419  21ED  3F42               	moviw [2]fsr1
  6420  21EE  00CB               	movwf	((?_sprintf+2)^(0+256)+8)
  6421  21EF  3F43               	moviw [3]fsr1
  6422  21F0  00CC               	movwf	((?_sprintf+3)^(0+256)+8)
  6423  21F1  0861               	movf	setup@data^(0+256),w
  6424  21F2  3E28               	addlw	40
  6425  21F3  0086               	movwf	6
  6426  21F4  3000               	movlw	0
  6427  21F5  3D62               	addwfc	(setup@data+1)^(0+256),w
  6428  21F6  0087               	movwf	7
  6429  21F7  3F40               	moviw [0]fsr1
  6430  21F8  00CD               	movwf	(?_sprintf^(0+256)+12)
  6431  21F9  3F41               	moviw [1]fsr1
  6432  21FA  00CE               	movwf	((?_sprintf+1)^(0+256)+12)
  6433  21FB  3F42               	moviw [2]fsr1
  6434  21FC  00CF               	movwf	((?_sprintf+2)^(0+256)+12)
  6435  21FD  3F43               	moviw [3]fsr1
  6436  21FE  00D0               	movwf	((?_sprintf+3)^(0+256)+12)
  6437  21FF  31AB  23E6  31A1   	fcall	_sprintf
  6438                           
  6439                           ;menu.c: 168:  OLED_print_xy(0, 1, lBuf);
  6440  2202  0140               	movlb	0	; select bank0
  6441  2203  01A7               	clrf	OLED_print_xy@row
  6442  2204  0AA7               	incf	OLED_print_xy@row,f
  6443  2205  30A0               	movlw	low _lBuf
  6444  2206  00A8               	movwf	OLED_print_xy@s
  6445  2207  3002               	movlw	high _lBuf
  6446  2208  00A9               	movwf	OLED_print_xy@s+1
  6447  2209  3000               	movlw	0
  6448  220A  31AC  24F0  31A1   	fcall	_OLED_print_xy
  6449                           
  6450                           ;menu.c: 169:  page = paging(page, 4);
  6451  220D  3004               	movlw	4
  6452  220E  0142               	movlb	2	; select bank2
  6453  220F  00E3               	movwf	??_setup^(0+256)
  6454  2210  0863               	movf	??_setup^(0+256),w
  6455  2211  0140               	movlb	0	; select bank0
  6456  2212  00A7               	movwf	paging@lastPage
  6457  2213  0143               	movlb	3	; select bank3
  6458  2214  083E               	movf	setup@page^(0+384),w
  6459  2215  3190  2007         	fcall	_paging
  6460  2217  0142               	movlb	2	; select bank2
  6461  2218  00E4               	movwf	(??_setup+1)^(0+256)
  6462  2219  0864               	movf	(??_setup+1)^(0+256),w
  6463  221A  0143               	movlb	3	; select bank3
  6464  221B  00BE               	movwf	setup@page^(0+384)
  6465                           
  6466                           ;menu.c: 170:  return page;
  6467  221C  083E               	movf	setup@page^(0+384),w
  6468  221D  0008               	return
  6469  221E                     __end_of_setup:	
  6470                           
  6471                           	psect	text6
  6472  2613                     __ptext6:	
  6473 ;; *************** function _setLensDia *****************
  6474 ;; Defined at:
  6475 ;;		line 147 in file "menu.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  data            2   65[BANK2 ] PTR struct .
  6478 ;;		 -> data(157), 
  6479 ;; Auto vars:     Size  Location     Type
  6480 ;;		None
  6481 ;; Return value:  Size  Location     Type
  6482 ;;                  1    wreg      unsigned char 
  6483 ;; Registers used:
  6484 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6485 ;; Tracked objects:
  6486 ;;		On entry : 0/0
  6487 ;;		On exit  : 0/0
  6488 ;;		Unchanged: 0/0
  6489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6490 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6491 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6492 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6493 ;;      Totals:         0       0       0      10       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6494 ;;Total ram usage:       10 bytes
  6495 ;; Hardware stack levels used:    1
  6496 ;; Hardware stack levels required when called:   11
  6497 ;; This function calls:
  6498 ;;		_OLED_print_xy
  6499 ;;		___wmul
  6500 ;;		_returnToPage
  6501 ;;		_spinInput
  6502 ;;		_sprintf
  6503 ;; This function is called by:
  6504 ;;		_menu
  6505 ;; This function uses a non-reentrant model
  6506 ;;
  6507                           
  6508                           
  6509                           ;psect for function _setLensDia
  6510  2613                     _setLensDia:	
  6511                           
  6512                           ;menu.c: 147: uint8_t setLensDia(t_globalData *data);menu.c: 148: {;menu.c: 149:  return
      +                          ToPage(0);
  6513                           
  6514                           ;incstack = 0
  6515                           ; Regs used in _setLensDia: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6516  2613  3000               	movlw	0
  6517  2614  31AC  2461  31A6   	fcall	_returnToPage
  6518                           
  6519                           ;menu.c: 150:  OLED_print_xy(0, 0, "Lens diam.  ");
  6520  2617  0140               	movlb	0	; select bank0
  6521  2618  01A7               	clrf	OLED_print_xy@row
  6522  2619  3038               	movlw	low ((STR_17+12)| (0+32768))
  6523  261A  00A8               	movwf	OLED_print_xy@s
  6524  261B  30B1               	movlw	high ((STR_17+12)| (0+32768))
  6525  261C  00A9               	movwf	OLED_print_xy@s+1
  6526  261D  3000               	movlw	0
  6527  261E  31AC  24F0  31A6   	fcall	_OLED_print_xy
  6528                           
  6529                           ;menu.c: 151:  spinInput(&data->chData[selectedChannel].lensDia, 1, 16, 0.5);
  6530  2621  0143               	movlb	3	; select bank3
  6531  2622  0842               	movf	_selectedChannel^(0+384),w
  6532  2623  0142               	movlb	2	; select bank2
  6533  2624  00E3               	movwf	??_setLensDia^(0+256)
  6534  2625  01E4               	clrf	(??_setLensDia^(0+256)+1)
  6535  2626  0863               	movf	??_setLensDia^(0+256),w
  6536  2627  0140               	movlb	0	; select bank0
  6537  2628  00A0               	movwf	___wmul@multiplier
  6538  2629  0142               	movlb	2	; select bank2
  6539  262A  0864               	movf	(??_setLensDia+1)^(0+256),w
  6540  262B  0140               	movlb	0	; select bank0
  6541  262C  00A1               	movwf	___wmul@multiplier+1
  6542  262D  301C               	movlw	28
  6543  262E  00A2               	movwf	___wmul@multiplicand
  6544  262F  3000               	movlw	0
  6545  2630  00A3               	movwf	___wmul@multiplicand+1
  6546  2631  31AA  22C1  31A6   	fcall	___wmul
  6547  2634  0140               	movlb	0	; select bank0
  6548  2635  0820               	movf	?___wmul,w
  6549  2636  0142               	movlb	2	; select bank2
  6550  2637  0761               	addwf	setLensDia@data^(0+256),w
  6551  2638  00E5               	movwf	(??_setLensDia+2)^(0+256)
  6552  2639  0140               	movlb	0	; select bank0
  6553  263A  0821               	movf	?___wmul+1,w
  6554  263B  0142               	movlb	2	; select bank2
  6555  263C  3D62               	addwfc	(setLensDia@data+1)^(0+256),w
  6556  263D  00E6               	movwf	(??_setLensDia+3)^(0+256)
  6557  263E  0865               	movf	(??_setLensDia+2)^(0+256),w
  6558  263F  3E3F               	addlw	63
  6559  2640  0141               	movlb	1	; select bank1
  6560  2641  00A0               	movwf	spinInput@input^(0+128)
  6561  2642  3000               	movlw	0
  6562  2643  0142               	movlb	2	; select bank2
  6563  2644  3D66               	addwfc	(??_setLensDia+3)^(0+256),w
  6564  2645  0141               	movlb	1	; select bank1
  6565  2646  00A1               	movwf	(spinInput@input+1)^(0+128)
  6566  2647  303F               	movlw	63
  6567  2648  00A5               	movwf	(spinInput@min+3)^(0+128)
  6568  2649  3080               	movlw	128
  6569  264A  00A4               	movwf	(spinInput@min+2)^(0+128)
  6570  264B  3000               	movlw	0
  6571  264C  00A3               	movwf	(spinInput@min+1)^(0+128)
  6572  264D  3000               	movlw	0
  6573  264E  00A2               	movwf	spinInput@min^(0+128)
  6574  264F  3041               	movlw	65
  6575  2650  00A9               	movwf	(spinInput@max+3)^(0+128)
  6576  2651  3080               	movlw	128
  6577  2652  00A8               	movwf	(spinInput@max+2)^(0+128)
  6578  2653  3000               	movlw	0
  6579  2654  00A7               	movwf	(spinInput@max+1)^(0+128)
  6580  2655  3000               	movlw	0
  6581  2656  00A6               	movwf	spinInput@max^(0+128)
  6582  2657  303F               	movlw	63
  6583  2658  00AD               	movwf	(spinInput@step+3)^(0+128)
  6584  2659  3000               	movlw	0
  6585  265A  00AC               	movwf	(spinInput@step+2)^(0+128)
  6586  265B  3000               	movlw	0
  6587  265C  00AB               	movwf	(spinInput@step+1)^(0+128)
  6588  265D  3000               	movlw	0
  6589  265E  00AA               	movwf	spinInput@step^(0+128)
  6590  265F  31A7  274D  31A6   	fcall	_spinInput
  6591                           
  6592                           ;menu.c: 152:  sprintf(sBuf, "%4.1f inch   ", data->chData[selectedChannel].lensDia);
  6593  2662  0143               	movlb	3	; select bank3
  6594  2663  0842               	movf	_selectedChannel^(0+384),w
  6595  2664  0142               	movlb	2	; select bank2
  6596  2665  00E3               	movwf	??_setLensDia^(0+256)
  6597  2666  01E4               	clrf	(??_setLensDia^(0+256)+1)
  6598  2667  0863               	movf	??_setLensDia^(0+256),w
  6599  2668  0140               	movlb	0	; select bank0
  6600  2669  00A0               	movwf	___wmul@multiplier
  6601  266A  0142               	movlb	2	; select bank2
  6602  266B  0864               	movf	(??_setLensDia+1)^(0+256),w
  6603  266C  0140               	movlb	0	; select bank0
  6604  266D  00A1               	movwf	___wmul@multiplier+1
  6605  266E  301C               	movlw	28
  6606  266F  00A2               	movwf	___wmul@multiplicand
  6607  2670  3000               	movlw	0
  6608  2671  00A3               	movwf	___wmul@multiplicand+1
  6609  2672  31AA  22C1  31A6   	fcall	___wmul
  6610  2675  0140               	movlb	0	; select bank0
  6611  2676  0820               	movf	?___wmul,w
  6612  2677  0142               	movlb	2	; select bank2
  6613  2678  0761               	addwf	setLensDia@data^(0+256),w
  6614  2679  00E5               	movwf	(??_setLensDia+2)^(0+256)
  6615  267A  0140               	movlb	0	; select bank0
  6616  267B  0821               	movf	?___wmul+1,w
  6617  267C  0142               	movlb	2	; select bank2
  6618  267D  3D62               	addwfc	(setLensDia@data+1)^(0+256),w
  6619  267E  00E6               	movwf	(??_setLensDia+3)^(0+256)
  6620  267F  0865               	movf	(??_setLensDia+2)^(0+256),w
  6621  2680  3E3F               	addlw	63
  6622  2681  0086               	movwf	6
  6623  2682  3000               	movlw	0
  6624  2683  3D66               	addwfc	(??_setLensDia+3)^(0+256),w
  6625  2684  0087               	movwf	7
  6626  2685  3F40               	moviw [0]fsr1
  6627  2686  00E7               	movwf	_setLensDia$2426^(0+256)
  6628  2687  3F41               	moviw [1]fsr1
  6629  2688  00E8               	movwf	(_setLensDia$2426+1)^(0+256)
  6630  2689  3F42               	moviw [2]fsr1
  6631  268A  00E9               	movwf	(_setLensDia$2426+2)^(0+256)
  6632  268B  3F43               	moviw [3]fsr1
  6633  268C  00EA               	movwf	(_setLensDia$2426+3)^(0+256)
  6634                           
  6635                           ;menu.c: 152:  sprintf(sBuf, "%4.1f inch   ", data->chData[selectedChannel].lensDia);
  6636  268D  30CE               	movlw	low _sBuf
  6637  268E  00C1               	movwf	sprintf@s^(0+256)
  6638  268F  3001               	movlw	high _sBuf
  6639  2690  00C2               	movwf	(sprintf@s+1)^(0+256)
  6640  2691  309F               	movlw	low (STR_21| (0+32768))
  6641  2692  00C3               	movwf	sprintf@fmt^(0+256)
  6642  2693  30B1               	movlw	high (STR_21| (0+32768))
  6643  2694  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  6644  2695  086A               	movf	(_setLensDia$2426+3)^(0+256),w
  6645  2696  00C8               	movwf	((?_sprintf+3)^(0+256)+4)
  6646  2697  0869               	movf	(_setLensDia$2426+2)^(0+256),w
  6647  2698  00C7               	movwf	((?_sprintf+2)^(0+256)+4)
  6648  2699  0868               	movf	(_setLensDia$2426+1)^(0+256),w
  6649  269A  00C6               	movwf	((?_sprintf+1)^(0+256)+4)
  6650  269B  0867               	movf	_setLensDia$2426^(0+256),w
  6651  269C  00C5               	movwf	(?_sprintf^(0+256)+4)
  6652  269D  31AB  23E6  31A6   	fcall	_sprintf
  6653                           
  6654                           ;menu.c: 153:  OLED_print_xy(0, 1, sBuf);
  6655  26A0  0140               	movlb	0	; select bank0
  6656  26A1  01A7               	clrf	OLED_print_xy@row
  6657  26A2  0AA7               	incf	OLED_print_xy@row,f
  6658  26A3  30CE               	movlw	low _sBuf
  6659  26A4  00A8               	movwf	OLED_print_xy@s
  6660  26A5  3001               	movlw	high _sBuf
  6661  26A6  00A9               	movwf	OLED_print_xy@s+1
  6662  26A7  3000               	movlw	0
  6663  26A8  31AC  24F0         	fcall	_OLED_print_xy
  6664                           
  6665                           ;menu.c: 154:  return 0;
  6666  26AA  3000               	movlw	0
  6667  26AB  0008               	return
  6668  26AC                     __end_of_setLensDia:	
  6669                           
  6670                           	psect	text7
  6671  18FF                     __ptext7:	
  6672 ;; *************** function _setOutputPower *****************
  6673 ;; Defined at:
  6674 ;;		line 127 in file "menu.c"
  6675 ;; Parameters:    Size  Location     Type
  6676 ;;  data            2   65[BANK2 ] PTR struct .
  6677 ;;		 -> data(157), 
  6678 ;; Auto vars:     Size  Location     Type
  6679 ;;  chData          2   71[BANK2 ] PTR struct .
  6680 ;;		 -> data.chData(112), data(157), 
  6681 ;; Return value:  Size  Location     Type
  6682 ;;                  1    wreg      unsigned char 
  6683 ;; Registers used:
  6684 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6685 ;; Tracked objects:
  6686 ;;		On entry : 0/0
  6687 ;;		On exit  : 0/0
  6688 ;;		Unchanged: 0/0
  6689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6690 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6691 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6692 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6693 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6694 ;;Total ram usage:        8 bytes
  6695 ;; Hardware stack levels used:    1
  6696 ;; Hardware stack levels required when called:   11
  6697 ;; This function calls:
  6698 ;;		_OLED_print_xy
  6699 ;;		___fleq
  6700 ;;		___wmul
  6701 ;;		_returnToPage
  6702 ;;		_spinInput
  6703 ;;		_sprintf
  6704 ;; This function is called by:
  6705 ;;		_menu
  6706 ;; This function uses a non-reentrant model
  6707 ;;
  6708                           
  6709                           
  6710                           ;psect for function _setOutputPower
  6711  18FF                     _setOutputPower:	
  6712                           
  6713                           ;menu.c: 127: uint8_t setOutputPower(t_globalData *data);menu.c: 128: {;menu.c: 129:  t_
      +                          channelData *chData = &data->chData[selectedChannel];
  6714                           
  6715                           ;incstack = 0
  6716                           ; Regs used in _setOutputPower: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6717  18FF  0143               	movlb	3	; select bank3
  6718  1900  0842               	movf	_selectedChannel^(0+384),w
  6719  1901  0142               	movlb	2	; select bank2
  6720  1902  00E3               	movwf	??_setOutputPower^(0+256)
  6721  1903  01E4               	clrf	(??_setOutputPower^(0+256)+1)
  6722  1904  0863               	movf	??_setOutputPower^(0+256),w
  6723  1905  0140               	movlb	0	; select bank0
  6724  1906  00A0               	movwf	___wmul@multiplier
  6725  1907  0142               	movlb	2	; select bank2
  6726  1908  0864               	movf	(??_setOutputPower+1)^(0+256),w
  6727  1909  0140               	movlb	0	; select bank0
  6728  190A  00A1               	movwf	___wmul@multiplier+1
  6729  190B  301C               	movlw	28
  6730  190C  00A2               	movwf	___wmul@multiplicand
  6731  190D  3000               	movlw	0
  6732  190E  00A3               	movwf	___wmul@multiplicand+1
  6733  190F  31AA  22C1  3198   	fcall	___wmul
  6734  1912  0140               	movlb	0	; select bank0
  6735  1913  0820               	movf	?___wmul,w
  6736  1914  0142               	movlb	2	; select bank2
  6737  1915  0761               	addwf	setOutputPower@data^(0+256),w
  6738  1916  00E5               	movwf	(??_setOutputPower+2)^(0+256)
  6739  1917  0140               	movlb	0	; select bank0
  6740  1918  0821               	movf	?___wmul+1,w
  6741  1919  0142               	movlb	2	; select bank2
  6742  191A  3D62               	addwfc	(setOutputPower@data+1)^(0+256),w
  6743  191B  00E6               	movwf	(??_setOutputPower+3)^(0+256)
  6744  191C  0865               	movf	(??_setOutputPower+2)^(0+256),w
  6745  191D  3E2D               	addlw	45
  6746  191E  00E7               	movwf	setOutputPower@chData^(0+256)
  6747  191F  3000               	movlw	0
  6748  1920  3D66               	addwfc	(??_setOutputPower+3)^(0+256),w
  6749  1921  00E8               	movwf	(setOutputPower@chData+1)^(0+256)
  6750                           
  6751                           ;menu.c: 131:  returnToPage(0);
  6752  1922  3000               	movlw	0
  6753  1923  31AC  2461  3198   	fcall	_returnToPage
  6754                           
  6755                           ;menu.c: 132:  OLED_print_xy(0, 0, "Output power");
  6756  1926  0140               	movlb	0	; select bank0
  6757  1927  01A7               	clrf	OLED_print_xy@row
  6758  1928  303D               	movlw	low (STR_22| (0+32768))
  6759  1929  00A8               	movwf	OLED_print_xy@s
  6760  192A  30B2               	movlw	high (STR_22| (0+32768))
  6761  192B  00A9               	movwf	OLED_print_xy@s+1
  6762  192C  3000               	movlw	0
  6763  192D  31AC  24F0  3198   	fcall	_OLED_print_xy
  6764                           
  6765                           ;menu.c: 133:  spinInput(&chData->Preq, 0, chData->Pmax, 0.25);
  6766  1930  0142               	movlb	2	; select bank2
  6767  1931  0867               	movf	setOutputPower@chData^(0+256),w
  6768  1932  3E08               	addlw	8
  6769  1933  0141               	movlb	1	; select bank1
  6770  1934  00A0               	movwf	spinInput@input^(0+128)
  6771  1935  3000               	movlw	0
  6772  1936  0142               	movlb	2	; select bank2
  6773  1937  3D68               	addwfc	(setOutputPower@chData+1)^(0+256),w
  6774  1938  0141               	movlb	1	; select bank1
  6775  1939  00A1               	movwf	(spinInput@input+1)^(0+128)
  6776  193A  3000               	movlw	0
  6777  193B  00A5               	movwf	(spinInput@min+3)^(0+128)
  6778  193C  3000               	movlw	0
  6779  193D  00A4               	movwf	(spinInput@min+2)^(0+128)
  6780  193E  3000               	movlw	0
  6781  193F  00A3               	movwf	(spinInput@min+1)^(0+128)
  6782  1940  3000               	movlw	0
  6783  1941  00A2               	movwf	spinInput@min^(0+128)
  6784  1942  0142               	movlb	2	; select bank2
  6785  1943  0867               	movf	setOutputPower@chData^(0+256),w
  6786  1944  0086               	movwf	6
  6787  1945  0868               	movf	(setOutputPower@chData+1)^(0+256),w
  6788  1946  0087               	movwf	7
  6789  1947  3144               	addfsr 1,4
  6790  1948  3F40               	moviw [0]fsr1
  6791  1949  0141               	movlb	1	; select bank1
  6792  194A  00A6               	movwf	spinInput@max^(0+128)
  6793  194B  3F41               	moviw [1]fsr1
  6794  194C  00A7               	movwf	(spinInput@max+1)^(0+128)
  6795  194D  3F42               	moviw [2]fsr1
  6796  194E  00A8               	movwf	(spinInput@max+2)^(0+128)
  6797  194F  3F43               	moviw [3]fsr1
  6798  1950  00A9               	movwf	(spinInput@max+3)^(0+128)
  6799  1951  303E               	movlw	62
  6800  1952  00AD               	movwf	(spinInput@step+3)^(0+128)
  6801  1953  3080               	movlw	128
  6802  1954  00AC               	movwf	(spinInput@step+2)^(0+128)
  6803  1955  3000               	movlw	0
  6804  1956  00AB               	movwf	(spinInput@step+1)^(0+128)
  6805  1957  3000               	movlw	0
  6806  1958  00AA               	movwf	spinInput@step^(0+128)
  6807  1959  31A7  274D  3198   	fcall	_spinInput
  6808                           
  6809                           ;menu.c: 134:  if (chData->Preq == 0)
  6810  195C  0142               	movlb	2	; select bank2
  6811  195D  0867               	movf	setOutputPower@chData^(0+256),w
  6812  195E  0086               	movwf	6
  6813  195F  0868               	movf	(setOutputPower@chData+1)^(0+256),w
  6814  1960  0087               	movwf	7
  6815  1961  3148               	addfsr 1,8
  6816  1962  3F40               	moviw [0]fsr1
  6817  1963  0140               	movlb	0	; select bank0
  6818  1964  00A0               	movwf	___fleq@ff1
  6819  1965  3F41               	moviw [1]fsr1
  6820  1966  00A1               	movwf	___fleq@ff1+1
  6821  1967  3F42               	moviw [2]fsr1
  6822  1968  00A2               	movwf	___fleq@ff1+2
  6823  1969  3F43               	moviw [3]fsr1
  6824  196A  00A3               	movwf	___fleq@ff1+3
  6825  196B  3000               	movlw	0
  6826  196C  00A7               	movwf	___fleq@ff2+3
  6827  196D  3000               	movlw	0
  6828  196E  00A6               	movwf	___fleq@ff2+2
  6829  196F  3000               	movlw	0
  6830  1970  00A5               	movwf	___fleq@ff2+1
  6831  1971  3000               	movlw	0
  6832  1972  00A4               	movwf	___fleq@ff2
  6833  1973  31AE  2622  3198   	fcall	___fleq
  6834  1976  1C03               	btfss	3,0
  6835  1977  2981               	goto	l8712
  6836                           
  6837                           ;menu.c: 135:   sprintf(sBuf, "Ch. %1d off   ", selectedChannel + 1);
  6838  1978  30CE               	movlw	low _sBuf
  6839  1979  0142               	movlb	2	; select bank2
  6840  197A  00C1               	movwf	sprintf@s^(0+256)
  6841  197B  3001               	movlw	high _sBuf
  6842  197C  00C2               	movwf	(sprintf@s+1)^(0+256)
  6843  197D  3073               	movlw	low (STR_18| (0+32768))
  6844  197E  00C3               	movwf	sprintf@fmt^(0+256)
  6845  197F  30B1               	movlw	high (STR_18| (0+32768))
  6846  1980  29AC               	goto	L2
  6847  1981                     l8712:	
  6848  1981  0142               	movlb	2	; select bank2
  6849  1982  0867               	movf	setOutputPower@chData^(0+256),w
  6850  1983  0086               	movwf	6
  6851  1984  0868               	movf	(setOutputPower@chData+1)^(0+256),w
  6852  1985  0087               	movwf	7
  6853  1986  3148               	addfsr 1,8
  6854  1987  3F40               	moviw [0]fsr1
  6855  1988  0140               	movlb	0	; select bank0
  6856  1989  00A0               	movwf	___fleq@ff1
  6857  198A  3F41               	moviw [1]fsr1
  6858  198B  00A1               	movwf	___fleq@ff1+1
  6859  198C  3F42               	moviw [2]fsr1
  6860  198D  00A2               	movwf	___fleq@ff1+2
  6861  198E  3F43               	moviw [3]fsr1
  6862  198F  00A3               	movwf	___fleq@ff1+3
  6863  1990  0142               	movlb	2	; select bank2
  6864  1991  0867               	movf	setOutputPower@chData^(0+256),w
  6865  1992  0086               	movwf	6
  6866  1993  0868               	movf	(setOutputPower@chData+1)^(0+256),w
  6867  1994  0087               	movwf	7
  6868  1995  3144               	addfsr 1,4
  6869  1996  3F40               	moviw [0]fsr1
  6870  1997  0140               	movlb	0	; select bank0
  6871  1998  00A4               	movwf	___fleq@ff2
  6872  1999  3F41               	moviw [1]fsr1
  6873  199A  00A5               	movwf	___fleq@ff2+1
  6874  199B  3F42               	moviw [2]fsr1
  6875  199C  00A6               	movwf	___fleq@ff2+2
  6876  199D  3F43               	moviw [3]fsr1
  6877  199E  00A7               	movwf	___fleq@ff2+3
  6878  199F  31AE  2622  3198   	fcall	___fleq
  6879  19A2  1C03               	btfss	3,0
  6880  19A3  29B7               	goto	l8716
  6881                           
  6882                           ;menu.c: 137:   sprintf(sBuf, "Ch. %1d auto  ", selectedChannel + 1);
  6883  19A4  30CE               	movlw	low _sBuf
  6884  19A5  0142               	movlb	2	; select bank2
  6885  19A6  00C1               	movwf	sprintf@s^(0+256)
  6886  19A7  3001               	movlw	high _sBuf
  6887  19A8  00C2               	movwf	(sprintf@s+1)^(0+256)
  6888  19A9  3082               	movlw	low (STR_19| (0+32768))
  6889  19AA  00C3               	movwf	sprintf@fmt^(0+256)
  6890  19AB  30B1               	movlw	high (STR_19| (0+32768))
  6891  19AC                     L2:	
  6892  19AC  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  6893  19AD  0143               	movlb	3	; select bank3
  6894  19AE  0842               	movf	_selectedChannel^(0+384),w
  6895  19AF  3E01               	addlw	1
  6896  19B0  0142               	movlb	2	; select bank2
  6897  19B1  00C5               	movwf	(?_sprintf^(0+256)+4)
  6898  19B2  3000               	movlw	0
  6899  19B3  1803               	skipnc
  6900  19B4  3001               	movlw	1
  6901  19B5  00C6               	movwf	(?_sprintf^(0+256)+5)
  6902  19B6  29CD               	goto	L1
  6903  19B7                     l8716:	
  6904                           
  6905                           ;menu.c: 139:   sprintf(sBuf, "%4.1fW manual", chData->Preq);
  6906  19B7  30CE               	movlw	low _sBuf
  6907  19B8  0142               	movlb	2	; select bank2
  6908  19B9  00C1               	movwf	sprintf@s^(0+256)
  6909  19BA  3001               	movlw	high _sBuf
  6910  19BB  00C2               	movwf	(sprintf@s+1)^(0+256)
  6911  19BC  30AD               	movlw	low (STR_25| (0+32768))
  6912  19BD  00C3               	movwf	sprintf@fmt^(0+256)
  6913  19BE  30B1               	movlw	high (STR_25| (0+32768))
  6914  19BF  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  6915  19C0  0867               	movf	setOutputPower@chData^(0+256),w
  6916  19C1  0086               	movwf	6
  6917  19C2  0868               	movf	(setOutputPower@chData+1)^(0+256),w
  6918  19C3  0087               	movwf	7
  6919  19C4  3148               	addfsr 1,8
  6920  19C5  3F40               	moviw [0]fsr1
  6921  19C6  00C5               	movwf	(?_sprintf^(0+256)+4)
  6922  19C7  3F41               	moviw [1]fsr1
  6923  19C8  00C6               	movwf	((?_sprintf+1)^(0+256)+4)
  6924  19C9  3F42               	moviw [2]fsr1
  6925  19CA  00C7               	movwf	((?_sprintf+2)^(0+256)+4)
  6926  19CB  3F43               	moviw [3]fsr1
  6927  19CC  00C8               	movwf	((?_sprintf+3)^(0+256)+4)
  6928  19CD                     L1:	
  6929  19CD  31AB  23E6  3198   	fcall	_sprintf
  6930                           
  6931                           ;menu.c: 140:  OLED_print_xy(0,1,sBuf);
  6932  19D0  0140               	movlb	0	; select bank0
  6933  19D1  01A7               	clrf	OLED_print_xy@row
  6934  19D2  0AA7               	incf	OLED_print_xy@row,f
  6935  19D3  30CE               	movlw	low _sBuf
  6936  19D4  00A8               	movwf	OLED_print_xy@s
  6937  19D5  3001               	movlw	high _sBuf
  6938  19D6  00A9               	movwf	OLED_print_xy@s+1
  6939  19D7  3000               	movlw	0
  6940  19D8  31AC  24F0         	fcall	_OLED_print_xy
  6941                           
  6942                           ;menu.c: 141:  return 0;
  6943  19DA  3000               	movlw	0
  6944  19DB  0008               	return
  6945  19DC                     __end_of_setOutputPower:	
  6946                           
  6947                           	psect	text8
  6948  1ABB                     __ptext8:	
  6949 ;; *************** function _channelSetup *****************
  6950 ;; Defined at:
  6951 ;;		line 100 in file "menu.c"
  6952 ;; Parameters:    Size  Location     Type
  6953 ;;  data            2   65[BANK2 ] PTR struct .
  6954 ;;		 -> data(157), 
  6955 ;; Auto vars:     Size  Location     Type
  6956 ;;  chData          2   71[BANK2 ] PTR struct .
  6957 ;;		 -> data.chData(112), data(157), 
  6958 ;; Return value:  Size  Location     Type
  6959 ;;                  1    wreg      unsigned char 
  6960 ;; Registers used:
  6961 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6962 ;; Tracked objects:
  6963 ;;		On entry : 0/0
  6964 ;;		On exit  : 0/0
  6965 ;;		Unchanged: 0/0
  6966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  6967 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6968 ;;      Locals:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6969 ;;      Temps:          0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6970 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  6971 ;;Total ram usage:        8 bytes
  6972 ;; Hardware stack levels used:    1
  6973 ;; Hardware stack levels required when called:   11
  6974 ;; This function calls:
  6975 ;;		_OLED_print_xy
  6976 ;;		___fleq
  6977 ;;		___wmul
  6978 ;;		_paging
  6979 ;;		_returnToPage
  6980 ;;		_sprintf
  6981 ;;		_strcat
  6982 ;; This function is called by:
  6983 ;;		_menu
  6984 ;; This function uses a non-reentrant model
  6985 ;;
  6986                           
  6987                           
  6988                           ;psect for function _channelSetup
  6989  1ABB                     _channelSetup:	
  6990                           
  6991                           ;menu.c: 100: uint8_t channelSetup(t_globalData *data);menu.c: 101: {;menu.c: 102:  stat
      +                          ic uint8_t page = 0;;menu.c: 103:  t_channelData *chData = &data->chData[selectedChannel
      +                          ];
  6992                           
  6993                           ;incstack = 0
  6994                           ; Regs used in _channelSetup: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6995  1ABB  0143               	movlb	3	; select bank3
  6996  1ABC  0842               	movf	_selectedChannel^(0+384),w
  6997  1ABD  0142               	movlb	2	; select bank2
  6998  1ABE  00E3               	movwf	??_channelSetup^(0+256)
  6999  1ABF  01E4               	clrf	(??_channelSetup^(0+256)+1)
  7000  1AC0  0863               	movf	??_channelSetup^(0+256),w
  7001  1AC1  0140               	movlb	0	; select bank0
  7002  1AC2  00A0               	movwf	___wmul@multiplier
  7003  1AC3  0142               	movlb	2	; select bank2
  7004  1AC4  0864               	movf	(??_channelSetup+1)^(0+256),w
  7005  1AC5  0140               	movlb	0	; select bank0
  7006  1AC6  00A1               	movwf	___wmul@multiplier+1
  7007  1AC7  301C               	movlw	28
  7008  1AC8  00A2               	movwf	___wmul@multiplicand
  7009  1AC9  3000               	movlw	0
  7010  1ACA  00A3               	movwf	___wmul@multiplicand+1
  7011  1ACB  31AA  22C1  319A   	fcall	___wmul
  7012  1ACE  0140               	movlb	0	; select bank0
  7013  1ACF  0820               	movf	?___wmul,w
  7014  1AD0  0142               	movlb	2	; select bank2
  7015  1AD1  0761               	addwf	channelSetup@data^(0+256),w
  7016  1AD2  00E5               	movwf	(??_channelSetup+2)^(0+256)
  7017  1AD3  0140               	movlb	0	; select bank0
  7018  1AD4  0821               	movf	?___wmul+1,w
  7019  1AD5  0142               	movlb	2	; select bank2
  7020  1AD6  3D62               	addwfc	(channelSetup@data+1)^(0+256),w
  7021  1AD7  00E6               	movwf	(??_channelSetup+3)^(0+256)
  7022  1AD8  0865               	movf	(??_channelSetup+2)^(0+256),w
  7023  1AD9  3E2D               	addlw	45
  7024  1ADA  00E7               	movwf	channelSetup@chData^(0+256)
  7025  1ADB  3000               	movlw	0
  7026  1ADC  3D66               	addwfc	(??_channelSetup+3)^(0+256),w
  7027  1ADD  00E8               	movwf	(channelSetup@chData+1)^(0+256)
  7028                           
  7029                           ;menu.c: 105:  returnToPage(page);
  7030  1ADE  0143               	movlb	3	; select bank3
  7031  1ADF  083F               	movf	channelSetup@page^(0+384),w
  7032  1AE0  31AC  2461  319A   	fcall	_returnToPage
  7033                           
  7034                           ;menu.c: 106:  OLED_print_xy(0, 0, "Output powerLens diam.  ");
  7035  1AE3  0140               	movlb	0	; select bank0
  7036  1AE4  01A7               	clrf	OLED_print_xy@row
  7037  1AE5  302C               	movlw	low (STR_17| (0+32768))
  7038  1AE6  00A8               	movwf	OLED_print_xy@s
  7039  1AE7  30B1               	movlw	high (STR_17| (0+32768))
  7040  1AE8  00A9               	movwf	OLED_print_xy@s+1
  7041  1AE9  3000               	movlw	0
  7042  1AEA  31AC  24F0  319A   	fcall	_OLED_print_xy
  7043                           
  7044                           ;menu.c: 108:  if (chData->Preq == 0)
  7045  1AED  0142               	movlb	2	; select bank2
  7046  1AEE  0867               	movf	channelSetup@chData^(0+256),w
  7047  1AEF  0086               	movwf	6
  7048  1AF0  0868               	movf	(channelSetup@chData+1)^(0+256),w
  7049  1AF1  0087               	movwf	7
  7050  1AF2  3148               	addfsr 1,8
  7051  1AF3  3F40               	moviw [0]fsr1
  7052  1AF4  0140               	movlb	0	; select bank0
  7053  1AF5  00A0               	movwf	___fleq@ff1
  7054  1AF6  3F41               	moviw [1]fsr1
  7055  1AF7  00A1               	movwf	___fleq@ff1+1
  7056  1AF8  3F42               	moviw [2]fsr1
  7057  1AF9  00A2               	movwf	___fleq@ff1+2
  7058  1AFA  3F43               	moviw [3]fsr1
  7059  1AFB  00A3               	movwf	___fleq@ff1+3
  7060  1AFC  3000               	movlw	0
  7061  1AFD  00A7               	movwf	___fleq@ff2+3
  7062  1AFE  3000               	movlw	0
  7063  1AFF  00A6               	movwf	___fleq@ff2+2
  7064  1B00  3000               	movlw	0
  7065  1B01  00A5               	movwf	___fleq@ff2+1
  7066  1B02  3000               	movlw	0
  7067  1B03  00A4               	movwf	___fleq@ff2
  7068  1B04  31AE  2622  319A   	fcall	___fleq
  7069  1B07  1C03               	btfss	3,0
  7070  1B08  2B12               	goto	l8690
  7071                           
  7072                           ;menu.c: 109:   sprintf(lBuf, "Ch. %1d off   ", selectedChannel + 1);
  7073  1B09  30A0               	movlw	low _lBuf
  7074  1B0A  0142               	movlb	2	; select bank2
  7075  1B0B  00C1               	movwf	sprintf@s^(0+256)
  7076  1B0C  3002               	movlw	high _lBuf
  7077  1B0D  00C2               	movwf	(sprintf@s+1)^(0+256)
  7078  1B0E  3073               	movlw	low (STR_18| (0+32768))
  7079  1B0F  00C3               	movwf	sprintf@fmt^(0+256)
  7080  1B10  30B1               	movlw	high (STR_18| (0+32768))
  7081  1B11  2B3D               	goto	L4
  7082  1B12                     l8690:	
  7083  1B12  0142               	movlb	2	; select bank2
  7084  1B13  0867               	movf	channelSetup@chData^(0+256),w
  7085  1B14  0086               	movwf	6
  7086  1B15  0868               	movf	(channelSetup@chData+1)^(0+256),w
  7087  1B16  0087               	movwf	7
  7088  1B17  3148               	addfsr 1,8
  7089  1B18  3F40               	moviw [0]fsr1
  7090  1B19  0140               	movlb	0	; select bank0
  7091  1B1A  00A0               	movwf	___fleq@ff1
  7092  1B1B  3F41               	moviw [1]fsr1
  7093  1B1C  00A1               	movwf	___fleq@ff1+1
  7094  1B1D  3F42               	moviw [2]fsr1
  7095  1B1E  00A2               	movwf	___fleq@ff1+2
  7096  1B1F  3F43               	moviw [3]fsr1
  7097  1B20  00A3               	movwf	___fleq@ff1+3
  7098  1B21  0142               	movlb	2	; select bank2
  7099  1B22  0867               	movf	channelSetup@chData^(0+256),w
  7100  1B23  0086               	movwf	6
  7101  1B24  0868               	movf	(channelSetup@chData+1)^(0+256),w
  7102  1B25  0087               	movwf	7
  7103  1B26  3144               	addfsr 1,4
  7104  1B27  3F40               	moviw [0]fsr1
  7105  1B28  0140               	movlb	0	; select bank0
  7106  1B29  00A4               	movwf	___fleq@ff2
  7107  1B2A  3F41               	moviw [1]fsr1
  7108  1B2B  00A5               	movwf	___fleq@ff2+1
  7109  1B2C  3F42               	moviw [2]fsr1
  7110  1B2D  00A6               	movwf	___fleq@ff2+2
  7111  1B2E  3F43               	moviw [3]fsr1
  7112  1B2F  00A7               	movwf	___fleq@ff2+3
  7113  1B30  31AE  2622  319A   	fcall	___fleq
  7114  1B33  1C03               	btfss	3,0
  7115  1B34  2B48               	goto	l8694
  7116                           
  7117                           ;menu.c: 111:   sprintf(lBuf, "Ch. %1d auto  ", selectedChannel + 1);
  7118  1B35  30A0               	movlw	low _lBuf
  7119  1B36  0142               	movlb	2	; select bank2
  7120  1B37  00C1               	movwf	sprintf@s^(0+256)
  7121  1B38  3002               	movlw	high _lBuf
  7122  1B39  00C2               	movwf	(sprintf@s+1)^(0+256)
  7123  1B3A  3082               	movlw	low (STR_19| (0+32768))
  7124  1B3B  00C3               	movwf	sprintf@fmt^(0+256)
  7125  1B3C  30B1               	movlw	high (STR_19| (0+32768))
  7126  1B3D                     L4:	
  7127  1B3D  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  7128  1B3E  0143               	movlb	3	; select bank3
  7129  1B3F  0842               	movf	_selectedChannel^(0+384),w
  7130  1B40  3E01               	addlw	1
  7131  1B41  0142               	movlb	2	; select bank2
  7132  1B42  00C5               	movwf	(?_sprintf^(0+256)+4)
  7133  1B43  3000               	movlw	0
  7134  1B44  1803               	skipnc
  7135  1B45  3001               	movlw	1
  7136  1B46  00C6               	movwf	(?_sprintf^(0+256)+5)
  7137  1B47  2B5E               	goto	L3
  7138  1B48                     l8694:	
  7139                           
  7140                           ;menu.c: 113:   sprintf(lBuf, "%4.fW manual", chData->Preq);
  7141  1B48  30A0               	movlw	low _lBuf
  7142  1B49  0142               	movlb	2	; select bank2
  7143  1B4A  00C1               	movwf	sprintf@s^(0+256)
  7144  1B4B  3002               	movlw	high _lBuf
  7145  1B4C  00C2               	movwf	(sprintf@s+1)^(0+256)
  7146  1B4D  3030               	movlw	low (STR_20| (0+32768))
  7147  1B4E  00C3               	movwf	sprintf@fmt^(0+256)
  7148  1B4F  30B2               	movlw	high (STR_20| (0+32768))
  7149  1B50  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  7150  1B51  0867               	movf	channelSetup@chData^(0+256),w
  7151  1B52  0086               	movwf	6
  7152  1B53  0868               	movf	(channelSetup@chData+1)^(0+256),w
  7153  1B54  0087               	movwf	7
  7154  1B55  3148               	addfsr 1,8
  7155  1B56  3F40               	moviw [0]fsr1
  7156  1B57  00C5               	movwf	(?_sprintf^(0+256)+4)
  7157  1B58  3F41               	moviw [1]fsr1
  7158  1B59  00C6               	movwf	((?_sprintf+1)^(0+256)+4)
  7159  1B5A  3F42               	moviw [2]fsr1
  7160  1B5B  00C7               	movwf	((?_sprintf+2)^(0+256)+4)
  7161  1B5C  3F43               	moviw [3]fsr1
  7162  1B5D  00C8               	movwf	((?_sprintf+3)^(0+256)+4)
  7163  1B5E                     L3:	
  7164  1B5E  31AB  23E6  319A   	fcall	_sprintf
  7165                           
  7166                           ;menu.c: 115:  sprintf(sBuf, "%4.1f inch   ", chData->lensDia);
  7167  1B61  30CE               	movlw	low _sBuf
  7168  1B62  0142               	movlb	2	; select bank2
  7169  1B63  00C1               	movwf	sprintf@s^(0+256)
  7170  1B64  3001               	movlw	high _sBuf
  7171  1B65  00C2               	movwf	(sprintf@s+1)^(0+256)
  7172  1B66  309F               	movlw	low (STR_21| (0+32768))
  7173  1B67  00C3               	movwf	sprintf@fmt^(0+256)
  7174  1B68  30B1               	movlw	high (STR_21| (0+32768))
  7175  1B69  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  7176  1B6A  0867               	movf	channelSetup@chData^(0+256),w
  7177  1B6B  0086               	movwf	6
  7178  1B6C  0868               	movf	(channelSetup@chData+1)^(0+256),w
  7179  1B6D  0087               	movwf	7
  7180  1B6E  3152               	addfsr 1,18
  7181  1B6F  3F40               	moviw [0]fsr1
  7182  1B70  00C5               	movwf	(?_sprintf^(0+256)+4)
  7183  1B71  3F41               	moviw [1]fsr1
  7184  1B72  00C6               	movwf	((?_sprintf+1)^(0+256)+4)
  7185  1B73  3F42               	moviw [2]fsr1
  7186  1B74  00C7               	movwf	((?_sprintf+2)^(0+256)+4)
  7187  1B75  3F43               	moviw [3]fsr1
  7188  1B76  00C8               	movwf	((?_sprintf+3)^(0+256)+4)
  7189  1B77  31AB  23E6  319A   	fcall	_sprintf
  7190                           
  7191                           ;menu.c: 116:  strcat(lBuf, sBuf);
  7192  1B7A  30CE               	movlw	(low (_sBuf| (0+256)))& (0+255)
  7193  1B7B  0142               	movlb	2	; select bank2
  7194  1B7C  00E3               	movwf	??_channelSetup^(0+256)
  7195  1B7D  0863               	movf	??_channelSetup^(0+256),w
  7196  1B7E  0140               	movlb	0	; select bank0
  7197  1B7F  00B1               	movwf	strcat@src
  7198  1B80  30A0               	movlw	(low (_lBuf| (0+512)))& (0+255)
  7199  1B81  31AA  22A7  319A   	fcall	_strcat
  7200                           
  7201                           ;menu.c: 118:  OLED_print_xy(0, 1, lBuf);
  7202  1B84  0140               	movlb	0	; select bank0
  7203  1B85  01A7               	clrf	OLED_print_xy@row
  7204  1B86  0AA7               	incf	OLED_print_xy@row,f
  7205  1B87  30A0               	movlw	low _lBuf
  7206  1B88  00A8               	movwf	OLED_print_xy@s
  7207  1B89  3002               	movlw	high _lBuf
  7208  1B8A  00A9               	movwf	OLED_print_xy@s+1
  7209  1B8B  3000               	movlw	0
  7210  1B8C  31AC  24F0  319A   	fcall	_OLED_print_xy
  7211                           
  7212                           ;menu.c: 120:  page = paging(page, 2);
  7213  1B8F  3002               	movlw	2
  7214  1B90  0142               	movlb	2	; select bank2
  7215  1B91  00E3               	movwf	??_channelSetup^(0+256)
  7216  1B92  0863               	movf	??_channelSetup^(0+256),w
  7217  1B93  0140               	movlb	0	; select bank0
  7218  1B94  00A7               	movwf	paging@lastPage
  7219  1B95  0143               	movlb	3	; select bank3
  7220  1B96  083F               	movf	channelSetup@page^(0+384),w
  7221  1B97  3190  2007         	fcall	_paging
  7222  1B99  0142               	movlb	2	; select bank2
  7223  1B9A  00E4               	movwf	(??_channelSetup+1)^(0+256)
  7224  1B9B  0864               	movf	(??_channelSetup+1)^(0+256),w
  7225  1B9C  0143               	movlb	3	; select bank3
  7226  1B9D  00BF               	movwf	channelSetup@page^(0+384)
  7227                           
  7228                           ;menu.c: 121:  return page;
  7229  1B9E  083F               	movf	channelSetup@page^(0+384),w
  7230  1B9F  0008               	return
  7231  1BA0                     __end_of_channelSetup:	
  7232                           
  7233                           	psect	text9
  7234  165E                     __ptext9:	
  7235 ;; *************** function _channelView *****************
  7236 ;; Defined at:
  7237 ;;		line 48 in file "menu.c"
  7238 ;; Parameters:    Size  Location     Type
  7239 ;;  data            2   65[BANK2 ] PTR struct .
  7240 ;;		 -> data(157), 
  7241 ;; Auto vars:     Size  Location     Type
  7242 ;;  tmp0            4    0[BANK3 ] float 
  7243 ;;  n               1   10[BANK3 ] unsigned char 
  7244 ;; Return value:  Size  Location     Type
  7245 ;;                  1    wreg      unsigned char 
  7246 ;; Registers used:
  7247 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7248 ;; Tracked objects:
  7249 ;;		On entry : 0/0
  7250 ;;		On exit  : 0/0
  7251 ;;		Unchanged: 0/0
  7252 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7253 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7254 ;;      Locals:         0       0       0       0      11       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7255 ;;      Temps:          0       0       0       6       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7256 ;;      Totals:         0       0       0       8      11       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7257 ;;Total ram usage:       19 bytes
  7258 ;; Hardware stack levels used:    1
  7259 ;; Hardware stack levels required when called:   11
  7260 ;; This function calls:
  7261 ;;		_OLED_print_xy
  7262 ;;		___wmul
  7263 ;;		_paging
  7264 ;;		_returnToPage
  7265 ;;		_sprintf
  7266 ;;		_strcat
  7267 ;;		_strcpy
  7268 ;; This function is called by:
  7269 ;;		_menu
  7270 ;; This function uses a non-reentrant model
  7271 ;;
  7272                           
  7273                           
  7274                           ;psect for function _channelView
  7275  165E                     _channelView:	
  7276                           
  7277                           ;menu.c: 48: uint8_t channelView(t_globalData *data);menu.c: 49: {;menu.c: 50:  static u
      +                          int8_t page = 0;;menu.c: 51:  uint8_t n;;menu.c: 52:  float tmp0;;menu.c: 54:  returnToP
      +                          age(page);
  7278                           
  7279                           ;incstack = 0
  7280                           ; Regs used in _channelView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7281  165E  0143               	movlb	3	; select bank3
  7282  165F  0840               	movf	channelView@page^(0+384),w
  7283  1660  31AC  2461  3196   	fcall	_returnToPage
  7284                           
  7285                           ;menu.c: 55:  if (g_updateScreen) {
  7286  1663  0143               	movlb	3	; select bank3
  7287  1664  086F               	movf	_g_updateScreen^(0+384),w
  7288  1665  1903               	btfsc	3,2
  7289  1666  2ED9               	goto	l8630
  7290                           
  7291                           ;menu.c: 56:   lBuf[0] = '\0';
  7292  1667  0145               	movlb	5	; select bank5
  7293  1668  01A0               	clrf	_lBuf^(0+640)
  7294                           
  7295                           ;menu.c: 57:   for(n = 0; n < 4; n++) {
  7296  1669  0143               	movlb	3	; select bank3
  7297  166A  01E5               	clrf	channelView@n^(0+384)
  7298  166B                     l8618:	
  7299                           
  7300                           ;menu.c: 58:    sprintf(sBuf, "Ch %1d: %4.1f\" ", n + 1, data->chData[n].lensDia);
  7301  166B  0865               	movf	channelView@n^(0+384),w
  7302  166C  0142               	movlb	2	; select bank2
  7303  166D  00E3               	movwf	??_channelView^(0+256)
  7304  166E  01E4               	clrf	(??_channelView^(0+256)+1)
  7305  166F  0863               	movf	??_channelView^(0+256),w
  7306  1670  0140               	movlb	0	; select bank0
  7307  1671  00A0               	movwf	___wmul@multiplier
  7308  1672  0142               	movlb	2	; select bank2
  7309  1673  0864               	movf	(??_channelView+1)^(0+256),w
  7310  1674  0140               	movlb	0	; select bank0
  7311  1675  00A1               	movwf	___wmul@multiplier+1
  7312  1676  301C               	movlw	28
  7313  1677  00A2               	movwf	___wmul@multiplicand
  7314  1678  3000               	movlw	0
  7315  1679  00A3               	movwf	___wmul@multiplicand+1
  7316  167A  31AA  22C1  3196   	fcall	___wmul
  7317  167D  0140               	movlb	0	; select bank0
  7318  167E  0820               	movf	?___wmul,w
  7319  167F  0142               	movlb	2	; select bank2
  7320  1680  0761               	addwf	channelView@data^(0+256),w
  7321  1681  00E5               	movwf	(??_channelView+2)^(0+256)
  7322  1682  0140               	movlb	0	; select bank0
  7323  1683  0821               	movf	?___wmul+1,w
  7324  1684  0142               	movlb	2	; select bank2
  7325  1685  3D62               	addwfc	(channelView@data+1)^(0+256),w
  7326  1686  00E6               	movwf	(??_channelView+3)^(0+256)
  7327  1687  0865               	movf	(??_channelView+2)^(0+256),w
  7328  1688  3E3F               	addlw	63
  7329  1689  0086               	movwf	6
  7330  168A  3000               	movlw	0
  7331  168B  3D66               	addwfc	(??_channelView+3)^(0+256),w
  7332  168C  0087               	movwf	7
  7333  168D  3F40               	moviw [0]fsr1
  7334  168E  0143               	movlb	3	; select bank3
  7335  168F  00DF               	movwf	_channelView$2425^(0+384)
  7336  1690  3F41               	moviw [1]fsr1
  7337  1691  00E0               	movwf	(_channelView$2425+1)^(0+384)
  7338  1692  3F42               	moviw [2]fsr1
  7339  1693  00E1               	movwf	(_channelView$2425+2)^(0+384)
  7340  1694  3F43               	moviw [3]fsr1
  7341  1695  00E2               	movwf	(_channelView$2425+3)^(0+384)
  7342                           
  7343                           ;menu.c: 58:    sprintf(sBuf, "Ch %1d: %4.1f\" ", n + 1, data->chData[n].lensDia);
  7344  1696  30CE               	movlw	low _sBuf
  7345  1697  0142               	movlb	2	; select bank2
  7346  1698  00C1               	movwf	sprintf@s^(0+256)
  7347  1699  3001               	movlw	high _sBuf
  7348  169A  00C2               	movwf	(sprintf@s+1)^(0+256)
  7349  169B  3045               	movlw	low (STR_8| (0+32768))
  7350  169C  00C3               	movwf	sprintf@fmt^(0+256)
  7351  169D  30B1               	movlw	high (STR_8| (0+32768))
  7352  169E  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  7353  169F  0143               	movlb	3	; select bank3
  7354  16A0  0865               	movf	channelView@n^(0+384),w
  7355  16A1  3E01               	addlw	1
  7356  16A2  0142               	movlb	2	; select bank2
  7357  16A3  00C5               	movwf	(?_sprintf^(0+256)+4)
  7358  16A4  3000               	movlw	0
  7359  16A5  1803               	skipnc
  7360  16A6  3001               	movlw	1
  7361  16A7  00C6               	movwf	(?_sprintf^(0+256)+5)
  7362  16A8  0143               	movlb	3	; select bank3
  7363  16A9  0862               	movf	(_channelView$2425+3)^(0+384),w
  7364  16AA  0142               	movlb	2	; select bank2
  7365  16AB  00CA               	movwf	((?_sprintf+3)^(0+256)+6)
  7366  16AC  0143               	movlb	3	; select bank3
  7367  16AD  0861               	movf	(_channelView$2425+2)^(0+384),w
  7368  16AE  0142               	movlb	2	; select bank2
  7369  16AF  00C9               	movwf	((?_sprintf+2)^(0+256)+6)
  7370  16B0  0143               	movlb	3	; select bank3
  7371  16B1  0860               	movf	(_channelView$2425+1)^(0+384),w
  7372  16B2  0142               	movlb	2	; select bank2
  7373  16B3  00C8               	movwf	((?_sprintf+1)^(0+256)+6)
  7374  16B4  0143               	movlb	3	; select bank3
  7375  16B5  085F               	movf	_channelView$2425^(0+384),w
  7376  16B6  0142               	movlb	2	; select bank2
  7377  16B7  00C7               	movwf	(?_sprintf^(0+256)+6)
  7378  16B8  31AB  23E6  3196   	fcall	_sprintf
  7379                           
  7380                           ;menu.c: 59:    strcat(lBuf,sBuf);
  7381  16BB  30CE               	movlw	(low (_sBuf| (0+256)))& (0+255)
  7382  16BC  0142               	movlb	2	; select bank2
  7383  16BD  00E3               	movwf	??_channelView^(0+256)
  7384  16BE  0863               	movf	??_channelView^(0+256),w
  7385  16BF  0140               	movlb	0	; select bank0
  7386  16C0  00B1               	movwf	strcat@src
  7387  16C1  30A0               	movlw	(low (_lBuf| (0+512)))& (0+255)
  7388  16C2  31AA  22A7  3196   	fcall	_strcat
  7389                           
  7390                           ;menu.c: 60:   }
  7391  16C5  3001               	movlw	1
  7392  16C6  0142               	movlb	2	; select bank2
  7393  16C7  00E3               	movwf	??_channelView^(0+256)
  7394  16C8  0863               	movf	??_channelView^(0+256),w
  7395  16C9  0143               	movlb	3	; select bank3
  7396  16CA  07E5               	addwf	channelView@n^(0+384),f
  7397  16CB  3004               	movlw	4
  7398  16CC  0265               	subwf	channelView@n^(0+384),w
  7399  16CD  1C03               	skipc
  7400  16CE  2E6B               	goto	l8618
  7401                           
  7402                           ;menu.c: 61:   OLED_print_xy(0, 0, lBuf);
  7403  16CF  0140               	movlb	0	; select bank0
  7404  16D0  01A7               	clrf	OLED_print_xy@row
  7405  16D1  30A0               	movlw	low _lBuf
  7406  16D2  00A8               	movwf	OLED_print_xy@s
  7407  16D3  3002               	movlw	high _lBuf
  7408  16D4  00A9               	movwf	OLED_print_xy@s+1
  7409  16D5  3000               	movlw	0
  7410  16D6  31AC  24F0  3196   	fcall	_OLED_print_xy
  7411  16D9                     l8630:	
  7412                           
  7413                           ;menu.c: 64:  lBuf[0] = '\0';
  7414  16D9  0145               	movlb	5	; select bank5
  7415  16DA  01A0               	clrf	_lBuf^(0+640)
  7416                           
  7417                           ;menu.c: 65:  for(n = 0; n < 4; n++) {
  7418  16DB  0143               	movlb	3	; select bank3
  7419  16DC  01E5               	clrf	channelView@n^(0+384)
  7420  16DD  2FA2               	goto	l8658
  7421  16DE                     l8638:	
  7422                           
  7423                           ;menu.c: 68:    strcpy(sBuf, "Off         ");
  7424  16DE  30CE               	movlw	low _sBuf
  7425  16DF  0140               	movlb	0	; select bank0
  7426  16E0  00A5               	movwf	strcpy@dest
  7427  16E1  3001               	movlw	high _sBuf
  7428  16E2  00A6               	movwf	strcpy@dest+1
  7429  16E3  30D5               	movlw	low (STR_9| (0+32768))
  7430  16E4  00A7               	movwf	strcpy@src
  7431  16E5  30B1               	movlw	high (STR_9| (0+32768))
  7432  16E6  2F8A               	goto	L6
  7433  16E7                     l8640:	
  7434                           ;menu.c: 69:    break;
  7435                           
  7436                           
  7437                           ;menu.c: 71:    tmp0 = data->chData[n].Patt;
  7438  16E7  0143               	movlb	3	; select bank3
  7439  16E8  0865               	movf	channelView@n^(0+384),w
  7440  16E9  0142               	movlb	2	; select bank2
  7441  16EA  00E3               	movwf	??_channelView^(0+256)
  7442  16EB  01E4               	clrf	(??_channelView^(0+256)+1)
  7443  16EC  0863               	movf	??_channelView^(0+256),w
  7444  16ED  0140               	movlb	0	; select bank0
  7445  16EE  00A0               	movwf	___wmul@multiplier
  7446  16EF  0142               	movlb	2	; select bank2
  7447  16F0  0864               	movf	(??_channelView+1)^(0+256),w
  7448  16F1  0140               	movlb	0	; select bank0
  7449  16F2  00A1               	movwf	___wmul@multiplier+1
  7450  16F3  301C               	movlw	28
  7451  16F4  00A2               	movwf	___wmul@multiplicand
  7452  16F5  3000               	movlw	0
  7453  16F6  00A3               	movwf	___wmul@multiplicand+1
  7454  16F7  31AA  22C1  3196   	fcall	___wmul
  7455  16FA  0140               	movlb	0	; select bank0
  7456  16FB  0820               	movf	?___wmul,w
  7457  16FC  0142               	movlb	2	; select bank2
  7458  16FD  0761               	addwf	channelView@data^(0+256),w
  7459  16FE  00E5               	movwf	(??_channelView+2)^(0+256)
  7460  16FF  0140               	movlb	0	; select bank0
  7461  1700  0821               	movf	?___wmul+1,w
  7462  1701  0142               	movlb	2	; select bank2
  7463  1702  3D62               	addwfc	(channelView@data+1)^(0+256),w
  7464  1703  00E6               	movwf	(??_channelView+3)^(0+256)
  7465  1704  0865               	movf	(??_channelView+2)^(0+256),w
  7466  1705  3E39               	addlw	57
  7467  1706  0086               	movwf	6
  7468  1707  3000               	movlw	0
  7469  1708  3D66               	addwfc	(??_channelView+3)^(0+256),w
  7470  1709  0087               	movwf	7
  7471  170A  3F40               	moviw [0]fsr1
  7472  170B  0143               	movlb	3	; select bank3
  7473  170C  00DB               	movwf	channelView@tmp0^(0+384)
  7474  170D  3F41               	moviw [1]fsr1
  7475  170E  00DC               	movwf	(channelView@tmp0+1)^(0+384)
  7476  170F  3F42               	moviw [2]fsr1
  7477  1710  00DD               	movwf	(channelView@tmp0+2)^(0+384)
  7478  1711  3F43               	moviw [3]fsr1
  7479  1712  00DE               	movwf	(channelView@tmp0+3)^(0+384)
  7480                           
  7481                           ;menu.c: 72:    sprintf(sBuf, "%4.1fW %s", tmp0, (data->chData[n].mode == MODE_AUTO ? "a
      +                          uto  " : "manual"));
  7482  1713  0865               	movf	channelView@n^(0+384),w
  7483  1714  0142               	movlb	2	; select bank2
  7484  1715  00E3               	movwf	??_channelView^(0+256)
  7485  1716  01E4               	clrf	(??_channelView^(0+256)+1)
  7486  1717  0863               	movf	??_channelView^(0+256),w
  7487  1718  0140               	movlb	0	; select bank0
  7488  1719  00A0               	movwf	___wmul@multiplier
  7489  171A  0142               	movlb	2	; select bank2
  7490  171B  0864               	movf	(??_channelView+1)^(0+256),w
  7491  171C  0140               	movlb	0	; select bank0
  7492  171D  00A1               	movwf	___wmul@multiplier+1
  7493  171E  301C               	movlw	28
  7494  171F  00A2               	movwf	___wmul@multiplicand
  7495  1720  3000               	movlw	0
  7496  1721  00A3               	movwf	___wmul@multiplicand+1
  7497  1722  31AA  22C1  3196   	fcall	___wmul
  7498  1725  0140               	movlb	0	; select bank0
  7499  1726  0820               	movf	?___wmul,w
  7500  1727  0142               	movlb	2	; select bank2
  7501  1728  0761               	addwf	channelView@data^(0+256),w
  7502  1729  00E5               	movwf	(??_channelView+2)^(0+256)
  7503  172A  0140               	movlb	0	; select bank0
  7504  172B  0821               	movf	?___wmul+1,w
  7505  172C  0142               	movlb	2	; select bank2
  7506  172D  3D62               	addwfc	(channelView@data+1)^(0+256),w
  7507  172E  00E6               	movwf	(??_channelView+3)^(0+256)
  7508  172F  0865               	movf	(??_channelView+2)^(0+256),w
  7509  1730  3E47               	addlw	71
  7510  1731  0086               	movwf	6
  7511  1732  3000               	movlw	0
  7512  1733  3D66               	addwfc	(??_channelView+3)^(0+256),w
  7513  1734  0087               	movwf	7
  7514  1735  0301               	decf	1,w
  7515  1736  1903               	btfsc	3,2
  7516  1737  2F3D               	goto	l8644
  7517  1738  3036               	movlw	low ((STR_20+6)| (0+32768))
  7518  1739  0143               	movlb	3	; select bank3
  7519  173A  00E3               	movwf	_channelView$1190^(0+384)
  7520  173B  30B2               	movlw	high ((STR_20+6)| (0+32768))
  7521  173C  2F41               	goto	L5
  7522  173D                     l8644:	
  7523  173D  308A               	movlw	low ((STR_19+8)| (0+32768))
  7524  173E  0143               	movlb	3	; select bank3
  7525  173F  00E3               	movwf	_channelView$1190^(0+384)
  7526  1740  30B1               	movlw	high ((STR_19+8)| (0+32768))
  7527  1741                     L5:	
  7528  1741  00E4               	movwf	(_channelView$1190^(0+384)+1)
  7529  1742  30CE               	movlw	low _sBuf
  7530  1743  0142               	movlb	2	; select bank2
  7531  1744  00C1               	movwf	sprintf@s^(0+256)
  7532  1745  3001               	movlw	high _sBuf
  7533  1746  00C2               	movwf	(sprintf@s+1)^(0+256)
  7534  1747  3062               	movlw	low (STR_10| (0+32768))
  7535  1748  00C3               	movwf	sprintf@fmt^(0+256)
  7536  1749  30B2               	movlw	high (STR_10| (0+32768))
  7537  174A  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  7538  174B  0143               	movlb	3	; select bank3
  7539  174C  085E               	movf	(channelView@tmp0+3)^(0+384),w
  7540  174D  0142               	movlb	2	; select bank2
  7541  174E  00C8               	movwf	((?_sprintf+3)^(0+256)+4)
  7542  174F  0143               	movlb	3	; select bank3
  7543  1750  085D               	movf	(channelView@tmp0+2)^(0+384),w
  7544  1751  0142               	movlb	2	; select bank2
  7545  1752  00C7               	movwf	((?_sprintf+2)^(0+256)+4)
  7546  1753  0143               	movlb	3	; select bank3
  7547  1754  085C               	movf	(channelView@tmp0+1)^(0+384),w
  7548  1755  0142               	movlb	2	; select bank2
  7549  1756  00C6               	movwf	((?_sprintf+1)^(0+256)+4)
  7550  1757  0143               	movlb	3	; select bank3
  7551  1758  085B               	movf	channelView@tmp0^(0+384),w
  7552  1759  0142               	movlb	2	; select bank2
  7553  175A  00C5               	movwf	(?_sprintf^(0+256)+4)
  7554  175B  0143               	movlb	3	; select bank3
  7555  175C  0864               	movf	(_channelView$1190+1)^(0+384),w
  7556  175D  0142               	movlb	2	; select bank2
  7557  175E  00CA               	movwf	((low ((?_sprintf| (0+256)+8))+1))^0
  7558  175F  0143               	movlb	3	; select bank3
  7559  1760  0863               	movf	_channelView$1190^(0+384),w
  7560  1761  0142               	movlb	2	; select bank2
  7561  1762  00C9               	movwf	(low ((?_sprintf| (0+256)+8)))^0
  7562  1763  31AB  23E6  3196   	fcall	_sprintf
  7563                           
  7564                           ;menu.c: 73:    break;
  7565  1766  2F8E               	goto	l8660
  7566  1767                     l8648:	
  7567                           
  7568                           ;menu.c: 75:    strcpy(sBuf, "Disconnected");
  7569  1767  30CE               	movlw	low _sBuf
  7570  1768  0140               	movlb	0	; select bank0
  7571  1769  00A5               	movwf	strcpy@dest
  7572  176A  3001               	movlw	high _sBuf
  7573  176B  00A6               	movwf	strcpy@dest+1
  7574  176C  3016               	movlw	low (STR_13| (0+32768))
  7575  176D  00A7               	movwf	strcpy@src
  7576  176E  30B2               	movlw	high (STR_13| (0+32768))
  7577  176F  2F8A               	goto	L6
  7578  1770                     l8650:	
  7579                           ;menu.c: 76:    break;
  7580                           
  7581                           
  7582                           ;menu.c: 78:    strcpy(sBuf, "Shorted!    ");
  7583  1770  30CE               	movlw	low _sBuf
  7584  1771  0140               	movlb	0	; select bank0
  7585  1772  00A5               	movwf	strcpy@dest
  7586  1773  3001               	movlw	high _sBuf
  7587  1774  00A6               	movwf	strcpy@dest+1
  7588  1775  30E2               	movlw	low (STR_14| (0+32768))
  7589  1776  00A7               	movwf	strcpy@src
  7590  1777  30B1               	movlw	high (STR_14| (0+32768))
  7591  1778  2F8A               	goto	L6
  7592  1779                     l8652:	
  7593                           ;menu.c: 79:    break;
  7594                           
  7595                           
  7596                           ;menu.c: 81:    strcpy(sBuf, "Overcurrent!");
  7597  1779  30CE               	movlw	low _sBuf
  7598  177A  0140               	movlb	0	; select bank0
  7599  177B  00A5               	movwf	strcpy@dest
  7600  177C  3001               	movlw	high _sBuf
  7601  177D  00A6               	movwf	strcpy@dest+1
  7602  177E  3009               	movlw	low (STR_15| (0+32768))
  7603  177F  00A7               	movwf	strcpy@src
  7604  1780  30B2               	movlw	high (STR_15| (0+32768))
  7605  1781  2F8A               	goto	L6
  7606  1782                     l8654:	
  7607                           ;menu.c: 82:    break;
  7608                           
  7609                           
  7610                           ;menu.c: 84:    strcpy(sBuf, "OndreSpecial");
  7611  1782  30CE               	movlw	low _sBuf
  7612  1783  0140               	movlb	0	; select bank0
  7613  1784  00A5               	movwf	strcpy@dest
  7614  1785  3001               	movlw	high _sBuf
  7615  1786  00A6               	movwf	strcpy@dest+1
  7616  1787  3023               	movlw	low (STR_16| (0+32768))
  7617  1788  00A7               	movwf	strcpy@src
  7618  1789  30B2               	movlw	high (STR_16| (0+32768))
  7619  178A                     L6:	
  7620  178A  00A8               	movwf	strcpy@src+1
  7621  178B  31AB  239B  3196   	fcall	_strcpy
  7622  178E                     l8660:	
  7623                           ;menu.c: 85:    break;
  7624                           
  7625                           
  7626                           ;menu.c: 87:   strcat(lBuf, sBuf);
  7627  178E  30CE               	movlw	(low (_sBuf| (0+256)))& (0+255)
  7628  178F  0142               	movlb	2	; select bank2
  7629  1790  00E3               	movwf	??_channelView^(0+256)
  7630  1791  0863               	movf	??_channelView^(0+256),w
  7631  1792  0140               	movlb	0	; select bank0
  7632  1793  00B1               	movwf	strcat@src
  7633  1794  30A0               	movlw	(low (_lBuf| (0+512)))& (0+255)
  7634  1795  31AA  22A7  3196   	fcall	_strcat
  7635                           
  7636                           ;menu.c: 88:  }
  7637  1798  3001               	movlw	1
  7638  1799  0142               	movlb	2	; select bank2
  7639  179A  00E3               	movwf	??_channelView^(0+256)
  7640  179B  0863               	movf	??_channelView^(0+256),w
  7641  179C  0143               	movlb	3	; select bank3
  7642  179D  07E5               	addwf	channelView@n^(0+384),f
  7643  179E  3004               	movlw	4
  7644  179F  0265               	subwf	channelView@n^(0+384),w
  7645  17A0  1803               	btfsc	3,0
  7646  17A1  2FDE               	goto	l8666
  7647  17A2                     l8658:	
  7648  17A2  0865               	movf	channelView@n^(0+384),w
  7649  17A3  0142               	movlb	2	; select bank2
  7650  17A4  00E3               	movwf	??_channelView^(0+256)
  7651  17A5  01E4               	clrf	(??_channelView^(0+256)+1)
  7652  17A6  0863               	movf	??_channelView^(0+256),w
  7653  17A7  0140               	movlb	0	; select bank0
  7654  17A8  00A0               	movwf	___wmul@multiplier
  7655  17A9  0142               	movlb	2	; select bank2
  7656  17AA  0864               	movf	(??_channelView+1)^(0+256),w
  7657  17AB  0140               	movlb	0	; select bank0
  7658  17AC  00A1               	movwf	___wmul@multiplier+1
  7659  17AD  301C               	movlw	28
  7660  17AE  00A2               	movwf	___wmul@multiplicand
  7661  17AF  3000               	movlw	0
  7662  17B0  00A3               	movwf	___wmul@multiplicand+1
  7663  17B1  31AA  22C1  3196   	fcall	___wmul
  7664  17B4  0140               	movlb	0	; select bank0
  7665  17B5  0820               	movf	?___wmul,w
  7666  17B6  0142               	movlb	2	; select bank2
  7667  17B7  0761               	addwf	channelView@data^(0+256),w
  7668  17B8  00E5               	movwf	(??_channelView+2)^(0+256)
  7669  17B9  0140               	movlb	0	; select bank0
  7670  17BA  0821               	movf	?___wmul+1,w
  7671  17BB  0142               	movlb	2	; select bank2
  7672  17BC  3D62               	addwfc	(channelView@data+1)^(0+256),w
  7673  17BD  00E6               	movwf	(??_channelView+3)^(0+256)
  7674  17BE  0865               	movf	(??_channelView+2)^(0+256),w
  7675  17BF  3E48               	addlw	72
  7676  17C0  0086               	movwf	6
  7677  17C1  3000               	movlw	0
  7678  17C2  3D66               	addwfc	(??_channelView+3)^(0+256),w
  7679  17C3  0087               	movwf	7
  7680  17C4  0801               	movf	1,w
  7681  17C5  00E7               	movwf	(??_channelView+4)^(0+256)
  7682  17C6  01E8               	clrf	((??_channelView+4)^(0+256)+1)
  7683                           
  7684                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7685                           ; Switch size 1, requested type "simple"
  7686                           ; Number of cases is 1, Range of values is 0 to 0
  7687                           ; switch strategies available:
  7688                           ; Name         Instructions Cycles
  7689                           ; simple_byte            4     3 (average)
  7690                           ; direct_byte            8     6 (fixed)
  7691                           ; jumptable            260     6 (fixed)
  7692                           ;	Chosen strategy is simple_byte
  7693  17C7  0868               	movf	(??_channelView+5)^(0+256),w
  7694  17C8  3A00               	xorlw	0	; case 0
  7695  17C9  1903               	skipnz
  7696  17CA  2FCC               	goto	l9324
  7697  17CB  2F82               	goto	l8654
  7698  17CC                     l9324:	
  7699                           
  7700                           ; Switch size 1, requested type "simple"
  7701                           ; Number of cases is 5, Range of values is 0 to 4
  7702                           ; switch strategies available:
  7703                           ; Name         Instructions Cycles
  7704                           ; direct_byte           16     6 (fixed)
  7705                           ; simple_byte           16     9 (average)
  7706                           ; jumptable            260     6 (fixed)
  7707                           ;	Chosen strategy is simple_byte
  7708  17CC  0867               	movf	(??_channelView+4)^(0+256),w
  7709  17CD  3A00               	xorlw	0	; case 0
  7710  17CE  1903               	skipnz
  7711  17CF  2EDE               	goto	l8638
  7712  17D0  3A01               	xorlw	1	; case 1
  7713  17D1  1903               	skipnz
  7714  17D2  2EE7               	goto	l8640
  7715  17D3  3A03               	xorlw	3	; case 2
  7716  17D4  1903               	skipnz
  7717  17D5  2F67               	goto	l8648
  7718  17D6  3A01               	xorlw	1	; case 3
  7719  17D7  1903               	skipnz
  7720  17D8  2F70               	goto	l8650
  7721  17D9  3A07               	xorlw	7	; case 4
  7722  17DA  1903               	skipnz
  7723  17DB  2F79               	goto	l8652
  7724  17DC  2F82               	goto	l8654
  7725  17DD  2F8E               	goto	l8660
  7726  17DE                     l8666:	
  7727                           
  7728                           ;menu.c: 89:  OLED_print_xy(0, 1, lBuf);
  7729  17DE  0140               	movlb	0	; select bank0
  7730  17DF  01A7               	clrf	OLED_print_xy@row
  7731  17E0  0AA7               	incf	OLED_print_xy@row,f
  7732  17E1  30A0               	movlw	low _lBuf
  7733  17E2  00A8               	movwf	OLED_print_xy@s
  7734  17E3  3002               	movlw	high _lBuf
  7735  17E4  00A9               	movwf	OLED_print_xy@s+1
  7736  17E5  3000               	movlw	0
  7737  17E6  31AC  24F0  3196   	fcall	_OLED_print_xy
  7738                           
  7739                           ;menu.c: 91:  page = paging(page, 4);
  7740  17E9  3004               	movlw	4
  7741  17EA  0142               	movlb	2	; select bank2
  7742  17EB  00E3               	movwf	??_channelView^(0+256)
  7743  17EC  0863               	movf	??_channelView^(0+256),w
  7744  17ED  0140               	movlb	0	; select bank0
  7745  17EE  00A7               	movwf	paging@lastPage
  7746  17EF  0143               	movlb	3	; select bank3
  7747  17F0  0840               	movf	channelView@page^(0+384),w
  7748  17F1  3190  2007         	fcall	_paging
  7749  17F3  0142               	movlb	2	; select bank2
  7750  17F4  00E4               	movwf	(??_channelView+1)^(0+256)
  7751  17F5  0864               	movf	(??_channelView+1)^(0+256),w
  7752  17F6  0143               	movlb	3	; select bank3
  7753  17F7  00C0               	movwf	channelView@page^(0+384)
  7754                           
  7755                           ;menu.c: 92:  selectedChannel = page;
  7756  17F8  0840               	movf	channelView@page^(0+384),w
  7757  17F9  0142               	movlb	2	; select bank2
  7758  17FA  00E3               	movwf	??_channelView^(0+256)
  7759  17FB  0863               	movf	??_channelView^(0+256),w
  7760  17FC  0143               	movlb	3	; select bank3
  7761  17FD  00C2               	movwf	_selectedChannel^(0+384)
  7762                           
  7763                           ;menu.c: 94:  return page;
  7764  17FE  0840               	movf	channelView@page^(0+384),w
  7765  17FF  0008               	return
  7766  1800                     __end_of_channelView:	
  7767                           
  7768                           	psect	text10
  7769  1BA0                     __ptext10:	
  7770 ;; *************** function _statusView *****************
  7771 ;; Defined at:
  7772 ;;		line 18 in file "menu.c"
  7773 ;; Parameters:    Size  Location     Type
  7774 ;;  data            2   65[BANK2 ] PTR struct .
  7775 ;;		 -> data(157), 
  7776 ;; Auto vars:     Size  Location     Type
  7777 ;;  f               4    0        float 
  7778 ;; Return value:  Size  Location     Type
  7779 ;;                  1    wreg      unsigned char 
  7780 ;; Registers used:
  7781 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7782 ;; Tracked objects:
  7783 ;;		On entry : 0/0
  7784 ;;		On exit  : 0/0
  7785 ;;		Unchanged: 0/0
  7786 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  7787 ;;      Params:         0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7788 ;;      Locals:         0       0       0       4       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7789 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7790 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  7791 ;;Total ram usage:        8 bytes
  7792 ;; Hardware stack levels used:    1
  7793 ;; Hardware stack levels required when called:   11
  7794 ;; This function calls:
  7795 ;;		_OLED_print_xy
  7796 ;;		_OLED_returnHome
  7797 ;;		_paging
  7798 ;;		_returnToPage
  7799 ;;		_sprintf
  7800 ;; This function is called by:
  7801 ;;		_menu
  7802 ;; This function uses a non-reentrant model
  7803 ;;
  7804                           
  7805                           
  7806                           ;psect for function _statusView
  7807  1BA0                     _statusView:	
  7808                           
  7809                           ;menu.c: 18: uint8_t statusView(t_globalData *data);menu.c: 19: {;menu.c: 20:  static ui
      +                          nt8_t page = 0;;menu.c: 21:  float f;;menu.c: 23:  returnToPage(page);
  7810                           
  7811                           ;incstack = 0
  7812                           ; Regs used in _statusView: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  7813  1BA0  0143               	movlb	3	; select bank3
  7814  1BA1  0841               	movf	statusView@page^(0+384),w
  7815  1BA2  31AC  2461  319B   	fcall	_returnToPage
  7816                           
  7817                           ;menu.c: 24:  if (data->status.SENSOR_OK) {
  7818  1BA5  0142               	movlb	2	; select bank2
  7819  1BA6  0861               	movf	statusView@data^(0+256),w
  7820  1BA7  3E2C               	addlw	44
  7821  1BA8  0086               	movwf	6
  7822  1BA9  3000               	movlw	0
  7823  1BAA  3D62               	addwfc	(statusView@data+1)^(0+256),w
  7824  1BAB  0087               	movwf	7
  7825  1BAC  1C81               	btfss	1,1
  7826  1BAD  2C5A               	goto	l8592
  7827                           
  7828                           ;menu.c: 25:   OLED_print_xy(0, 0, "Temperature Rel.humidityDewpoint    Bat.   Power");
  7829  1BAE  0140               	movlb	0	; select bank0
  7830  1BAF  01A7               	clrf	OLED_print_xy@row
  7831  1BB0  308C               	movlw	low (STR_2| (0+32768))
  7832  1BB1  00A8               	movwf	OLED_print_xy@s
  7833  1BB2  30B0               	movlw	high (STR_2| (0+32768))
  7834  1BB3  00A9               	movwf	OLED_print_xy@s+1
  7835  1BB4  3000               	movlw	0
  7836  1BB5  31AC  24F0  319B   	fcall	_OLED_print_xy
  7837                           
  7838                           ;menu.c: 26:   if (data->status.AUX_SENSOR_OK)
  7839  1BB8  0142               	movlb	2	; select bank2
  7840  1BB9  0861               	movf	statusView@data^(0+256),w
  7841  1BBA  3E2C               	addlw	44
  7842  1BBB  0086               	movwf	6
  7843  1BBC  3000               	movlw	0
  7844  1BBD  3D62               	addwfc	(statusView@data+1)^(0+256),w
  7845  1BBE  0087               	movwf	7
  7846  1BBF  1D01               	btfss	1,2
  7847  1BC0  2BE3               	goto	l8588
  7848                           
  7849                           ;menu.c: 27:    sprintf(sBuf, "%3.1f\001\002%3.1f\001", data->tempC, data->tempAux);
  7850  1BC1  30CE               	movlw	low _sBuf
  7851  1BC2  00C1               	movwf	sprintf@s^(0+256)
  7852  1BC3  3001               	movlw	high _sBuf
  7853  1BC4  00C2               	movwf	(sprintf@s+1)^(0+256)
  7854  1BC5  3091               	movlw	low (STR_3| (0+32768))
  7855  1BC6  00C3               	movwf	sprintf@fmt^(0+256)
  7856  1BC7  30B1               	movlw	high (STR_3| (0+32768))
  7857  1BC8  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  7858  1BC9  0861               	movf	statusView@data^(0+256),w
  7859  1BCA  0086               	movwf	6
  7860  1BCB  0862               	movf	(statusView@data+1)^(0+256),w
  7861  1BCC  0087               	movwf	7
  7862  1BCD  3F40               	moviw [0]fsr1
  7863  1BCE  00C5               	movwf	(?_sprintf^(0+256)+4)
  7864  1BCF  3F41               	moviw [1]fsr1
  7865  1BD0  00C6               	movwf	((?_sprintf+1)^(0+256)+4)
  7866  1BD1  3F42               	moviw [2]fsr1
  7867  1BD2  00C7               	movwf	((?_sprintf+2)^(0+256)+4)
  7868  1BD3  3F43               	moviw [3]fsr1
  7869  1BD4  00C8               	movwf	((?_sprintf+3)^(0+256)+4)
  7870  1BD5  0861               	movf	statusView@data^(0+256),w
  7871  1BD6  0086               	movwf	6
  7872  1BD7  0862               	movf	(statusView@data+1)^(0+256),w
  7873  1BD8  0087               	movwf	7
  7874  1BD9  3150               	addfsr 1,16
  7875  1BDA  3F40               	moviw [0]fsr1
  7876  1BDB  00C9               	movwf	(?_sprintf^(0+256)+8)
  7877  1BDC  3F41               	moviw [1]fsr1
  7878  1BDD  00CA               	movwf	((?_sprintf+1)^(0+256)+8)
  7879  1BDE  3F42               	moviw [2]fsr1
  7880  1BDF  00CB               	movwf	((?_sprintf+2)^(0+256)+8)
  7881  1BE0  3F43               	moviw [3]fsr1
  7882  1BE1  00CC               	movwf	((?_sprintf+3)^(0+256)+8)
  7883  1BE2  2BF7               	goto	L7
  7884  1BE3                     l8588:	
  7885                           
  7886                           ;menu.c: 29:    sprintf(sBuf, "%5.1f\001      ", data->tempC);
  7887  1BE3  30CE               	movlw	low _sBuf
  7888  1BE4  00C1               	movwf	sprintf@s^(0+256)
  7889  1BE5  3001               	movlw	high _sBuf
  7890  1BE6  00C2               	movwf	(sprintf@s+1)^(0+256)
  7891  1BE7  30C8               	movlw	low (STR_4| (0+32768))
  7892  1BE8  00C3               	movwf	sprintf@fmt^(0+256)
  7893  1BE9  30B1               	movlw	high (STR_4| (0+32768))
  7894  1BEA  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  7895  1BEB  0861               	movf	statusView@data^(0+256),w
  7896  1BEC  0086               	movwf	6
  7897  1BED  0862               	movf	(statusView@data+1)^(0+256),w
  7898  1BEE  0087               	movwf	7
  7899  1BEF  3F40               	moviw [0]fsr1
  7900  1BF0  00C5               	movwf	(?_sprintf^(0+256)+4)
  7901  1BF1  3F41               	moviw [1]fsr1
  7902  1BF2  00C6               	movwf	((?_sprintf+1)^(0+256)+4)
  7903  1BF3  3F42               	moviw [2]fsr1
  7904  1BF4  00C7               	movwf	((?_sprintf+2)^(0+256)+4)
  7905  1BF5  3F43               	moviw [3]fsr1
  7906  1BF6  00C8               	movwf	((?_sprintf+3)^(0+256)+4)
  7907  1BF7                     L7:	
  7908  1BF7  31AB  23E6  319B   	fcall	_sprintf
  7909                           
  7910                           ;menu.c: 30:   sprintf(lBuf, "%s%5.1f %%     %5.1f\001      %4.1fV  %4.1fW",
  7911  1BFA  30A0               	movlw	low _lBuf
  7912  1BFB  0142               	movlb	2	; select bank2
  7913  1BFC  00C1               	movwf	sprintf@s^(0+256)
  7914  1BFD  3002               	movlw	high _lBuf
  7915  1BFE  00C2               	movwf	(sprintf@s+1)^(0+256)
  7916  1BFF  30BD               	movlw	low (STR_5| (0+32768))
  7917  1C00  00C3               	movwf	sprintf@fmt^(0+256)
  7918  1C01  30B0               	movlw	high (STR_5| (0+32768))
  7919  1C02  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  7920  1C03  30CE               	movlw	low _sBuf
  7921  1C04  00C5               	movwf	(low ((?_sprintf| (0+256)+4)))^0
  7922  1C05  3001               	movlw	high _sBuf
  7923  1C06  00C6               	movwf	((low ((?_sprintf| (0+256)+4))+1))^0
  7924  1C07  0861               	movf	statusView@data^(0+256),w
  7925  1C08  0086               	movwf	6
  7926  1C09  0862               	movf	(statusView@data+1)^(0+256),w
  7927  1C0A  0087               	movwf	7
  7928  1C0B  3144               	addfsr 1,4
  7929  1C0C  3F40               	moviw [0]fsr1
  7930  1C0D  00C7               	movwf	(?_sprintf^(0+256)+6)
  7931  1C0E  3F41               	moviw [1]fsr1
  7932  1C0F  00C8               	movwf	((?_sprintf+1)^(0+256)+6)
  7933  1C10  3F42               	moviw [2]fsr1
  7934  1C11  00C9               	movwf	((?_sprintf+2)^(0+256)+6)
  7935  1C12  3F43               	moviw [3]fsr1
  7936  1C13  00CA               	movwf	((?_sprintf+3)^(0+256)+6)
  7937  1C14  0861               	movf	statusView@data^(0+256),w
  7938  1C15  0086               	movwf	6
  7939  1C16  0862               	movf	(statusView@data+1)^(0+256),w
  7940  1C17  0087               	movwf	7
  7941  1C18  3148               	addfsr 1,8
  7942  1C19  3F40               	moviw [0]fsr1
  7943  1C1A  00CB               	movwf	(?_sprintf^(0+256)+10)
  7944  1C1B  3F41               	moviw [1]fsr1
  7945  1C1C  00CC               	movwf	((?_sprintf+1)^(0+256)+10)
  7946  1C1D  3F42               	moviw [2]fsr1
  7947  1C1E  00CD               	movwf	((?_sprintf+2)^(0+256)+10)
  7948  1C1F  3F43               	moviw [3]fsr1
  7949  1C20  00CE               	movwf	((?_sprintf+3)^(0+256)+10)
  7950  1C21  0861               	movf	statusView@data^(0+256),w
  7951  1C22  0086               	movwf	6
  7952  1C23  0862               	movf	(statusView@data+1)^(0+256),w
  7953  1C24  0087               	movwf	7
  7954  1C25  3154               	addfsr 1,20
  7955  1C26  3F40               	moviw [0]fsr1
  7956  1C27  00CF               	movwf	(?_sprintf^(0+256)+14)
  7957  1C28  3F41               	moviw [1]fsr1
  7958  1C29  00D0               	movwf	((?_sprintf+1)^(0+256)+14)
  7959  1C2A  3F42               	moviw [2]fsr1
  7960  1C2B  00D1               	movwf	((?_sprintf+2)^(0+256)+14)
  7961  1C2C  3F43               	moviw [3]fsr1
  7962  1C2D  00D2               	movwf	((?_sprintf+3)^(0+256)+14)
  7963  1C2E  0861               	movf	statusView@data^(0+256),w
  7964  1C2F  0086               	movwf	6
  7965  1C30  0862               	movf	(statusView@data+1)^(0+256),w
  7966  1C31  0087               	movwf	7
  7967  1C32  315C               	addfsr 1,28
  7968  1C33  3F40               	moviw [0]fsr1
  7969  1C34  00D3               	movwf	(?_sprintf^(0+256)+18)
  7970  1C35  3F41               	moviw [1]fsr1
  7971  1C36  00D4               	movwf	((?_sprintf+1)^(0+256)+18)
  7972  1C37  3F42               	moviw [2]fsr1
  7973  1C38  00D5               	movwf	((?_sprintf+2)^(0+256)+18)
  7974  1C39  3F43               	moviw [3]fsr1
  7975  1C3A  00D6               	movwf	((?_sprintf+3)^(0+256)+18)
  7976  1C3B  31AB  23E6  319B   	fcall	_sprintf
  7977                           
  7978                           ;menu.c: 32:   OLED_print_xy(0, 1, lBuf);
  7979  1C3E  0140               	movlb	0	; select bank0
  7980  1C3F  01A7               	clrf	OLED_print_xy@row
  7981  1C40  0AA7               	incf	OLED_print_xy@row,f
  7982  1C41  30A0               	movlw	low _lBuf
  7983  1C42  00A8               	movwf	OLED_print_xy@s
  7984  1C43  3002               	movlw	high _lBuf
  7985  1C44  00A9               	movwf	OLED_print_xy@s+1
  7986  1C45  3000               	movlw	0
  7987  1C46  31AC  24F0  319B   	fcall	_OLED_print_xy
  7988                           
  7989                           ;menu.c: 33:   page = paging(page, 4);
  7990  1C49  3004               	movlw	4
  7991  1C4A  0142               	movlb	2	; select bank2
  7992  1C4B  00E3               	movwf	??_statusView^(0+256)
  7993  1C4C  0863               	movf	??_statusView^(0+256),w
  7994  1C4D  0140               	movlb	0	; select bank0
  7995  1C4E  00A7               	movwf	paging@lastPage
  7996  1C4F  0143               	movlb	3	; select bank3
  7997  1C50  0841               	movf	statusView@page^(0+384),w
  7998  1C51  3190  2007  319B   	fcall	_paging
  7999  1C54  0142               	movlb	2	; select bank2
  8000  1C55  00E4               	movwf	(??_statusView+1)^(0+256)
  8001  1C56  0864               	movf	(??_statusView+1)^(0+256),w
  8002  1C57  0143               	movlb	3	; select bank3
  8003  1C58  00C1               	movwf	statusView@page^(0+384)
  8004                           
  8005                           ;menu.c: 34:  } else {
  8006  1C59  2C87               	goto	l8604
  8007  1C5A                     l8592:	
  8008                           
  8009                           ;menu.c: 35:   page = 0;
  8010  1C5A  0143               	movlb	3	; select bank3
  8011  1C5B  01C1               	clrf	statusView@page^(0+384)
  8012                           
  8013                           ;menu.c: 36:   OLED_returnHome();
  8014  1C5C  3190  2003  319B   	fcall	_OLED_returnHome
  8015                           
  8016                           ;menu.c: 37:   OLED_print_xy(0, 0, "Bat.   Power");
  8017  1C5F  0140               	movlb	0	; select bank0
  8018  1C60  01A7               	clrf	OLED_print_xy@row
  8019  1C61  30B0               	movlw	low ((STR_2+36)| (0+32768))
  8020  1C62  00A8               	movwf	OLED_print_xy@s
  8021  1C63  30B0               	movlw	high ((STR_2+36)| (0+32768))
  8022  1C64  00A9               	movwf	OLED_print_xy@s+1
  8023  1C65  3000               	movlw	0
  8024  1C66  31AC  24F0  319B   	fcall	_OLED_print_xy
  8025                           
  8026                           ;menu.c: 39:   sprintf(sBuf, "%4.1fV", 9.997296);
  8027  1C69  30CE               	movlw	low _sBuf
  8028  1C6A  0142               	movlb	2	; select bank2
  8029  1C6B  00C1               	movwf	sprintf@s^(0+256)
  8030  1C6C  3001               	movlw	high _sBuf
  8031  1C6D  00C2               	movwf	(sprintf@s+1)^(0+256)
  8032  1C6E  3075               	movlw	low (STR_7| (0+32768))
  8033  1C6F  00C3               	movwf	sprintf@fmt^(0+256)
  8034  1C70  30B2               	movlw	high (STR_7| (0+32768))
  8035  1C71  00C4               	movwf	(sprintf@fmt^(0+256)+1)
  8036  1C72  3041               	movlw	65
  8037  1C73  00C8               	movwf	((?_sprintf+3)^(0+256)+4)
  8038  1C74  301F               	movlw	31
  8039  1C75  00C7               	movwf	((?_sprintf+2)^(0+256)+4)
  8040  1C76  30F4               	movlw	244
  8041  1C77  00C6               	movwf	((?_sprintf+1)^(0+256)+4)
  8042  1C78  30ED               	movlw	237
  8043  1C79  00C5               	movwf	(?_sprintf^(0+256)+4)
  8044  1C7A  31AB  23E6  319B   	fcall	_sprintf
  8045                           
  8046                           ;menu.c: 40:   OLED_print_xy(0, 1, sBuf);
  8047  1C7D  0140               	movlb	0	; select bank0
  8048  1C7E  01A7               	clrf	OLED_print_xy@row
  8049  1C7F  0AA7               	incf	OLED_print_xy@row,f
  8050  1C80  30CE               	movlw	low _sBuf
  8051  1C81  00A8               	movwf	OLED_print_xy@s
  8052  1C82  3001               	movlw	high _sBuf
  8053  1C83  00A9               	movwf	OLED_print_xy@s+1
  8054  1C84  3000               	movlw	0
  8055  1C85  31AC  24F0         	fcall	_OLED_print_xy
  8056  1C87                     l8604:	
  8057                           
  8058                           ;menu.c: 42:  return page;
  8059  1C87  0143               	movlb	3	; select bank3
  8060  1C88  0841               	movf	statusView@page^(0+384),w
  8061  1C89  0008               	return
  8062  1C8A                     __end_of_statusView:	
  8063                           
  8064                           	psect	text11
  8065  274D                     __ptext11:	
  8066 ;; *************** function _spinInput *****************
  8067 ;; Defined at:
  8068 ;;		line 96 in file "inputs.c"
  8069 ;; Parameters:    Size  Location     Type
  8070 ;;  input           2    0[BANK1 ] PTR float 
  8071 ;;		 -> data.chData(112), data(157), 
  8072 ;;  min             4    2[BANK1 ] float 
  8073 ;;  max             4    6[BANK1 ] float 
  8074 ;;  step            4   10[BANK1 ] float 
  8075 ;; Auto vars:     Size  Location     Type
  8076 ;;  dir             1   69[BANK0 ] enum E7871
  8077 ;; Return value:  Size  Location     Type
  8078 ;;                  1    wreg      void 
  8079 ;; Registers used:
  8080 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8081 ;; Tracked objects:
  8082 ;;		On entry : 0/0
  8083 ;;		On exit  : 0/0
  8084 ;;		Unchanged: 0/0
  8085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8086 ;;      Params:         0       0      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8087 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8088 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8089 ;;      Totals:         0       2      14       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8090 ;;Total ram usage:       16 bytes
  8091 ;; Hardware stack levels used:    1
  8092 ;; Hardware stack levels required when called:    5
  8093 ;; This function calls:
  8094 ;;		___fladd
  8095 ;;		___flge
  8096 ;;		___flsub
  8097 ;;		_getRotDir
  8098 ;; This function is called by:
  8099 ;;		_setOutputPower
  8100 ;;		_setLensDia
  8101 ;;		_setDPOffset
  8102 ;;		_setSkyTemp
  8103 ;;		_setFudgeFactor
  8104 ;; This function uses a non-reentrant model
  8105 ;;
  8106                           
  8107                           
  8108                           ;psect for function _spinInput
  8109  274D                     _spinInput:	
  8110                           
  8111                           ;inputs.c: 96: void spinInput(float *input, float min, float max, float step);inputs.c: 
      +                          97: {;inputs.c: 98:  enum e_direction dir = getRotDir();
  8112                           
  8113                           ;incstack = 0
  8114                           ; Regs used in _spinInput: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8115  274D  31A9  21C7  31A7   	fcall	_getRotDir
  8116  2750  0140               	movlb	0	; select bank0
  8117  2751  00E4               	movwf	??_spinInput
  8118  2752  0864               	movf	??_spinInput,w
  8119  2753  00E5               	movwf	spinInput@dir
  8120                           
  8121                           ;inputs.c: 100:  if ((dir == ROT_CCW) && (*input > min))
  8122  2754  3002               	movlw	2
  8123  2755  0665               	xorwf	spinInput@dir,w
  8124  2756  1D03               	btfss	3,2
  8125  2757  2FAA               	goto	l8424
  8126  2758  0141               	movlb	1	; select bank1
  8127  2759  0825               	movf	(spinInput@min+3)^(0+128),w
  8128  275A  0140               	movlb	0	; select bank0
  8129  275B  00CB               	movwf	___flge@ff1+3
  8130  275C  0141               	movlb	1	; select bank1
  8131  275D  0824               	movf	(spinInput@min+2)^(0+128),w
  8132  275E  0140               	movlb	0	; select bank0
  8133  275F  00CA               	movwf	___flge@ff1+2
  8134  2760  0141               	movlb	1	; select bank1
  8135  2761  0823               	movf	(spinInput@min+1)^(0+128),w
  8136  2762  0140               	movlb	0	; select bank0
  8137  2763  00C9               	movwf	___flge@ff1+1
  8138  2764  0141               	movlb	1	; select bank1
  8139  2765  0822               	movf	spinInput@min^(0+128),w
  8140  2766  0140               	movlb	0	; select bank0
  8141  2767  00C8               	movwf	___flge@ff1
  8142  2768  0141               	movlb	1	; select bank1
  8143  2769  0820               	movf	spinInput@input^(0+128),w
  8144  276A  0086               	movwf	6
  8145  276B  0821               	movf	(spinInput@input+1)^(0+128),w
  8146  276C  0087               	movwf	7
  8147  276D  3F40               	moviw [0]fsr1
  8148  276E  0140               	movlb	0	; select bank0
  8149  276F  00CC               	movwf	___flge@ff2
  8150  2770  3F41               	moviw [1]fsr1
  8151  2771  00CD               	movwf	___flge@ff2+1
  8152  2772  3F42               	moviw [2]fsr1
  8153  2773  00CE               	movwf	___flge@ff2+2
  8154  2774  3F43               	moviw [3]fsr1
  8155  2775  00CF               	movwf	___flge@ff2+3
  8156  2776  31A3  2365  31A7   	fcall	___flge
  8157  2779  1803               	btfsc	3,0
  8158  277A  2FAA               	goto	l8424
  8159                           
  8160                           ;inputs.c: 101:   *input -= step;
  8161  277B  0141               	movlb	1	; select bank1
  8162  277C  082D               	movf	(spinInput@step+3)^(0+128),w
  8163  277D  0140               	movlb	0	; select bank0
  8164  277E  00DF               	movwf	___flsub@a+3
  8165  277F  0141               	movlb	1	; select bank1
  8166  2780  082C               	movf	(spinInput@step+2)^(0+128),w
  8167  2781  0140               	movlb	0	; select bank0
  8168  2782  00DE               	movwf	___flsub@a+2
  8169  2783  0141               	movlb	1	; select bank1
  8170  2784  082B               	movf	(spinInput@step+1)^(0+128),w
  8171  2785  0140               	movlb	0	; select bank0
  8172  2786  00DD               	movwf	___flsub@a+1
  8173  2787  0141               	movlb	1	; select bank1
  8174  2788  082A               	movf	spinInput@step^(0+128),w
  8175  2789  0140               	movlb	0	; select bank0
  8176  278A  00DC               	movwf	___flsub@a
  8177  278B  0141               	movlb	1	; select bank1
  8178  278C  0820               	movf	spinInput@input^(0+128),w
  8179  278D  0086               	movwf	6
  8180  278E  0821               	movf	(spinInput@input+1)^(0+128),w
  8181  278F  0087               	movwf	7
  8182  2790  3F40               	moviw [0]fsr1
  8183  2791  0140               	movlb	0	; select bank0
  8184  2792  00E0               	movwf	___flsub@b
  8185  2793  3F41               	moviw [1]fsr1
  8186  2794  00E1               	movwf	___flsub@b+1
  8187  2795  3F42               	moviw [2]fsr1
  8188  2796  00E2               	movwf	___flsub@b+2
  8189  2797  3F43               	moviw [3]fsr1
  8190  2798  00E3               	movwf	___flsub@b+3
  8191  2799  31AB  2319         	fcall	___flsub
  8192  279B  0141               	movlb	1	; select bank1
  8193  279C  0820               	movf	spinInput@input^(0+128),w
  8194  279D  0086               	movwf	6
  8195  279E  0821               	movf	(spinInput@input+1)^(0+128),w
  8196  279F  0087               	movwf	7
  8197  27A0  0140               	movlb	0	; select bank0
  8198  27A1  085C               	movf	?___flsub,w
  8199  27A2  3FC0               	movwi [0]fsr1
  8200  27A3  085D               	movf	?___flsub+1,w
  8201  27A4  3FC1               	movwi [1]fsr1
  8202  27A5  085E               	movf	?___flsub+2,w
  8203  27A6  3FC2               	movwi [2]fsr1
  8204  27A7  085F               	movf	?___flsub+3,w
  8205  27A8  3FC3               	movwi [3]fsr1
  8206  27A9  0008               	return
  8207  27AA                     l8424:	
  8208  27AA  0140               	movlb	0	; select bank0
  8209  27AB  0365               	decf	spinInput@dir,w
  8210  27AC  1D03               	btfss	3,2
  8211  27AD  0008               	return
  8212  27AE  0141               	movlb	1	; select bank1
  8213  27AF  0820               	movf	spinInput@input^(0+128),w
  8214  27B0  0086               	movwf	6
  8215  27B1  0821               	movf	(spinInput@input+1)^(0+128),w
  8216  27B2  0087               	movwf	7
  8217  27B3  3F40               	moviw [0]fsr1
  8218  27B4  0140               	movlb	0	; select bank0
  8219  27B5  00C8               	movwf	___flge@ff1
  8220  27B6  3F41               	moviw [1]fsr1
  8221  27B7  00C9               	movwf	___flge@ff1+1
  8222  27B8  3F42               	moviw [2]fsr1
  8223  27B9  00CA               	movwf	___flge@ff1+2
  8224  27BA  3F43               	moviw [3]fsr1
  8225  27BB  00CB               	movwf	___flge@ff1+3
  8226  27BC  0141               	movlb	1	; select bank1
  8227  27BD  0829               	movf	(spinInput@max+3)^(0+128),w
  8228  27BE  0140               	movlb	0	; select bank0
  8229  27BF  00CF               	movwf	___flge@ff2+3
  8230  27C0  0141               	movlb	1	; select bank1
  8231  27C1  0828               	movf	(spinInput@max+2)^(0+128),w
  8232  27C2  0140               	movlb	0	; select bank0
  8233  27C3  00CE               	movwf	___flge@ff2+2
  8234  27C4  0141               	movlb	1	; select bank1
  8235  27C5  0827               	movf	(spinInput@max+1)^(0+128),w
  8236  27C6  0140               	movlb	0	; select bank0
  8237  27C7  00CD               	movwf	___flge@ff2+1
  8238  27C8  0141               	movlb	1	; select bank1
  8239  27C9  0826               	movf	spinInput@max^(0+128),w
  8240  27CA  0140               	movlb	0	; select bank0
  8241  27CB  00CC               	movwf	___flge@ff2
  8242  27CC  31A3  2365  31A7   	fcall	___flge
  8243  27CF  1803               	btfsc	3,0
  8244  27D0  0008               	return
  8245                           
  8246                           ;inputs.c: 103:   *input += step;
  8247  27D1  0141               	movlb	1	; select bank1
  8248  27D2  082D               	movf	(spinInput@step+3)^(0+128),w
  8249  27D3  0140               	movlb	0	; select bank0
  8250  27D4  00CB               	movwf	___fladd@b+3
  8251  27D5  0141               	movlb	1	; select bank1
  8252  27D6  082C               	movf	(spinInput@step+2)^(0+128),w
  8253  27D7  0140               	movlb	0	; select bank0
  8254  27D8  00CA               	movwf	___fladd@b+2
  8255  27D9  0141               	movlb	1	; select bank1
  8256  27DA  082B               	movf	(spinInput@step+1)^(0+128),w
  8257  27DB  0140               	movlb	0	; select bank0
  8258  27DC  00C9               	movwf	___fladd@b+1
  8259  27DD  0141               	movlb	1	; select bank1
  8260  27DE  082A               	movf	spinInput@step^(0+128),w
  8261  27DF  0140               	movlb	0	; select bank0
  8262  27E0  00C8               	movwf	___fladd@b
  8263  27E1  0141               	movlb	1	; select bank1
  8264  27E2  0820               	movf	spinInput@input^(0+128),w
  8265  27E3  0086               	movwf	6
  8266  27E4  0821               	movf	(spinInput@input+1)^(0+128),w
  8267  27E5  0087               	movwf	7
  8268  27E6  3F40               	moviw [0]fsr1
  8269  27E7  0140               	movlb	0	; select bank0
  8270  27E8  00CC               	movwf	___fladd@a
  8271  27E9  3F41               	moviw [1]fsr1
  8272  27EA  00CD               	movwf	___fladd@a+1
  8273  27EB  3F42               	moviw [2]fsr1
  8274  27EC  00CE               	movwf	___fladd@a+2
  8275  27ED  3F43               	moviw [3]fsr1
  8276  27EE  00CF               	movwf	___fladd@a+3
  8277  27EF  3188  2045         	fcall	___fladd
  8278  27F1  0141               	movlb	1	; select bank1
  8279  27F2  0820               	movf	spinInput@input^(0+128),w
  8280  27F3  0086               	movwf	6
  8281  27F4  0821               	movf	(spinInput@input+1)^(0+128),w
  8282  27F5  0087               	movwf	7
  8283  27F6  0140               	movlb	0	; select bank0
  8284  27F7  0848               	movf	?___fladd,w
  8285  27F8  3FC0               	movwi [0]fsr1
  8286  27F9  0849               	movf	?___fladd+1,w
  8287  27FA  3FC1               	movwi [1]fsr1
  8288  27FB  084A               	movf	?___fladd+2,w
  8289  27FC  3FC2               	movwi [2]fsr1
  8290  27FD  084B               	movf	?___fladd+3,w
  8291  27FE  3FC3               	movwi [3]fsr1
  8292  27FF  0008               	return
  8293  2800                     __end_of_spinInput:	
  8294                           
  8295                           	psect	text12
  8296  2A06                     __ptext12:	
  8297 ;; *************** function _menuError *****************
  8298 ;; Defined at:
  8299 ;;		line 126 in file "menuhelper.c"
  8300 ;; Parameters:    Size  Location     Type
  8301 ;;		None
  8302 ;; Auto vars:     Size  Location     Type
  8303 ;;		None
  8304 ;; Return value:  Size  Location     Type
  8305 ;;                  1    wreg      void 
  8306 ;; Registers used:
  8307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8308 ;; Tracked objects:
  8309 ;;		On entry : 0/0
  8310 ;;		On exit  : 0/0
  8311 ;;		Unchanged: 0/0
  8312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8317 ;;Total ram usage:        0 bytes
  8318 ;; Hardware stack levels used:    1
  8319 ;; Hardware stack levels required when called:    8
  8320 ;; This function calls:
  8321 ;;		_OLED_clearDisplay
  8322 ;;		_OLED_print_xy
  8323 ;;		_OLED_returnHome
  8324 ;; This function is called by:
  8325 ;;		_menu
  8326 ;; This function uses a non-reentrant model
  8327 ;;
  8328                           
  8329                           
  8330                           ;psect for function _menuError
  8331  2A06                     _menuError:	
  8332                           
  8333                           ;menuhelper.c: 128:  OLED_returnHome();
  8334                           
  8335                           ;incstack = 0
  8336                           ; Regs used in _menuError: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8337  2A06  3190  2003  31AA   	fcall	_OLED_returnHome
  8338                           
  8339                           ;menuhelper.c: 129:  OLED_clearDisplay();
  8340  2A09  31A9  2186  31AA   	fcall	_OLED_clearDisplay
  8341                           
  8342                           ;menuhelper.c: 130:  OLED_print_xy(0, 0, "Menu error");
  8343  2A0C  0140               	movlb	0	; select bank0
  8344  2A0D  01A7               	clrf	OLED_print_xy@row
  8345  2A0E  3057               	movlw	low (STR_36| (0+32768))
  8346  2A0F  00A8               	movwf	OLED_print_xy@s
  8347  2A10  30B2               	movlw	high (STR_36| (0+32768))
  8348  2A11  00A9               	movwf	OLED_print_xy@s+1
  8349  2A12  3000               	movlw	0
  8350  2A13  31AC  24F0  31AA   	fcall	_OLED_print_xy
  8351  2A16                     l597:	
  8352                           ;menuhelper.c: 131:  while(1);
  8353                           
  8354  2A16  2A16               	goto	l597
  8355  2A17                     __end_of_menuError:	
  8356                           
  8357                           	psect	text13
  8358  1003                     __ptext13:	
  8359 ;; *************** function _OLED_returnHome *****************
  8360 ;; Defined at:
  8361 ;;		line 167 in file "oled.c"
  8362 ;; Parameters:    Size  Location     Type
  8363 ;;		None
  8364 ;; Auto vars:     Size  Location     Type
  8365 ;;		None
  8366 ;; Return value:  Size  Location     Type
  8367 ;;                  1    wreg      void 
  8368 ;; Registers used:
  8369 ;;		wreg, status,2, status,0, pclath, cstack
  8370 ;; Tracked objects:
  8371 ;;		On entry : 0/0
  8372 ;;		On exit  : 0/0
  8373 ;;		Unchanged: 0/0
  8374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8375 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8378 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8379 ;;Total ram usage:        0 bytes
  8380 ;; Hardware stack levels used:    1
  8381 ;; Hardware stack levels required when called:    7
  8382 ;; This function calls:
  8383 ;;		_OLED_command
  8384 ;; This function is called by:
  8385 ;;		_main
  8386 ;;		_statusView
  8387 ;;		_menuError
  8388 ;; This function uses a non-reentrant model
  8389 ;;
  8390                           
  8391                           
  8392                           ;psect for function _OLED_returnHome
  8393  1003                     _OLED_returnHome:	
  8394                           
  8395                           ;oled.c: 169:  OLED_command(0x02);
  8396                           
  8397                           ;incstack = 0
  8398                           ; Regs used in _OLED_returnHome: [wreg+status,2+status,0+pclath+cstack]
  8399  1003  3002               	movlw	2
  8400  1004  31A9  2193         	fcall	_OLED_command
  8401  1006  0008               	return
  8402  1007                     __end_of_OLED_returnHome:	
  8403                           
  8404                           	psect	text14
  8405  2986                     __ptext14:	
  8406 ;; *************** function _OLED_clearDisplay *****************
  8407 ;; Defined at:
  8408 ;;		line 172 in file "oled.c"
  8409 ;; Parameters:    Size  Location     Type
  8410 ;;		None
  8411 ;; Auto vars:     Size  Location     Type
  8412 ;;		None
  8413 ;; Return value:  Size  Location     Type
  8414 ;;                  1    wreg      void 
  8415 ;; Registers used:
  8416 ;;		wreg, status,2, status,0, pclath, cstack
  8417 ;; Tracked objects:
  8418 ;;		On entry : 0/0
  8419 ;;		On exit  : 0/0
  8420 ;;		Unchanged: 0/0
  8421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8426 ;;Total ram usage:        0 bytes
  8427 ;; Hardware stack levels used:    1
  8428 ;; Hardware stack levels required when called:    7
  8429 ;; This function calls:
  8430 ;;		_OLED_command
  8431 ;; This function is called by:
  8432 ;;		_main
  8433 ;;		_menuError
  8434 ;; This function uses a non-reentrant model
  8435 ;;
  8436                           
  8437                           
  8438                           ;psect for function _OLED_clearDisplay
  8439  2986                     _OLED_clearDisplay:	
  8440                           
  8441                           ;oled.c: 174:  OLED_command(0x01);
  8442                           
  8443                           ;incstack = 0
  8444                           ; Regs used in _OLED_clearDisplay: [wreg+status,2+status,0+pclath+cstack]
  8445  2986  3001               	movlw	1
  8446  2987  31A9  2193         	fcall	_OLED_command
  8447  2989  0008               	return
  8448  298A                     __end_of_OLED_clearDisplay:	
  8449                           
  8450                           	psect	text15
  8451  0801                     __ptext15:	
  8452 ;; *************** function _getStateFunc *****************
  8453 ;; Defined at:
  8454 ;;		line 137 in file "menuhelper.c"
  8455 ;; Parameters:    Size  Location     Type
  8456 ;;  state           1    wreg     enum E7942
  8457 ;; Auto vars:     Size  Location     Type
  8458 ;;  state           1   11[BANK0 ] enum E7942
  8459 ;;  n               1   12[BANK0 ] unsigned char 
  8460 ;; Return value:  Size  Location     Type
  8461 ;;                  2    6[BANK0 ] PTR FTN(PTR struct .,)un
  8462 ;; Registers used:
  8463 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8464 ;; Tracked objects:
  8465 ;;		On entry : 0/0
  8466 ;;		On exit  : 0/0
  8467 ;;		Unchanged: 0/0
  8468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8469 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8470 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8471 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8472 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8473 ;;Total ram usage:        7 bytes
  8474 ;; Hardware stack levels used:    1
  8475 ;; Hardware stack levels required when called:    4
  8476 ;; This function calls:
  8477 ;;		___wmul
  8478 ;; This function is called by:
  8479 ;;		_menu
  8480 ;; This function uses a non-reentrant model
  8481 ;;
  8482                           
  8483                           
  8484                           ;psect for function _getStateFunc
  8485  0801                     _getStateFunc:	
  8486                           
  8487                           ;incstack = 0
  8488                           ; Regs used in _getStateFunc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8489                           ;getStateFunc@state stored from wreg
  8490  0801  0140               	movlb	0	; select bank0
  8491  0802  00AB               	movwf	getStateFunc@state
  8492                           
  8493                           ;menuhelper.c: 137: t_stateFuncPtr getStateFunc(enum e_menuStates state);menuhelper.c: 1
      +                          38: {;menuhelper.c: 139:  uint8_t n;;menuhelper.c: 142:  for(n = 0; n < sizeof(stateFunc
      +                          Tbl)/sizeof(stateFuncTbl[0]); n++) {
  8494  0803  01AC               	clrf	getStateFunc@n
  8495  0804                     l8800:	
  8496                           
  8497                           ;menuhelper.c: 143:   if ((stateFuncTbl[n].state == state))
  8498  0804  082C               	movf	getStateFunc@n,w
  8499  0805  00A8               	movwf	??_getStateFunc
  8500  0806  01A9               	clrf	??_getStateFunc+1
  8501  0807  0828               	movf	??_getStateFunc,w
  8502  0808  00A0               	movwf	___wmul@multiplier
  8503  0809  0829               	movf	??_getStateFunc+1,w
  8504  080A  00A1               	movwf	___wmul@multiplier+1
  8505  080B  3003               	movlw	3
  8506  080C  00A2               	movwf	___wmul@multiplicand
  8507  080D  3000               	movlw	0
  8508  080E  00A3               	movwf	___wmul@multiplicand+1
  8509  080F  31AA  22C1  3188   	fcall	___wmul
  8510  0812  0140               	movlb	0	; select bank0
  8511  0813  0821               	movf	?___wmul+1,w
  8512  0814  0085               	movwf	5
  8513  0815  0820               	movf	?___wmul,w
  8514  0816  0084               	movwf	4
  8515  0817  3000               	movlw	low (_stateFuncTbl| (0+32768))
  8516  0818  0784               	addwf	4,f
  8517  0819  30B0               	movlw	high (_stateFuncTbl| (0+32768))
  8518  081A  3D85               	addwfc	5,f
  8519  081B  0800               	movf	0,w	;code access
  8520  081C  062B               	xorwf	getStateFunc@state,w
  8521  081D  1D03               	skipz
  8522  081E  283A               	goto	l8806
  8523                           
  8524                           ;menuhelper.c: 144:    return stateFuncTbl[n].func;
  8525  081F  082C               	movf	getStateFunc@n,w
  8526  0820  00A8               	movwf	??_getStateFunc
  8527  0821  01A9               	clrf	??_getStateFunc+1
  8528  0822  0828               	movf	??_getStateFunc,w
  8529  0823  00A0               	movwf	___wmul@multiplier
  8530  0824  0829               	movf	??_getStateFunc+1,w
  8531  0825  00A1               	movwf	___wmul@multiplier+1
  8532  0826  3003               	movlw	3
  8533  0827  00A2               	movwf	___wmul@multiplicand
  8534  0828  3000               	movlw	0
  8535  0829  00A3               	movwf	___wmul@multiplicand+1
  8536  082A  31AA  22C1         	fcall	___wmul
  8537  082C  0140               	movlb	0	; select bank0
  8538  082D  0821               	movf	?___wmul+1,w
  8539  082E  0085               	movwf	5
  8540  082F  0820               	movf	?___wmul,w
  8541  0830  0084               	movwf	4
  8542  0831  3001               	movlw	low ((_stateFuncTbl+1)| (0+32768))
  8543  0832  0784               	addwf	4,f
  8544  0833  30B0               	movlw	high ((_stateFuncTbl+1)| (0+32768))
  8545  0834  3D85               	addwfc	5,f
  8546  0835  3F00               	moviw [0]fsr0
  8547  0836  00A6               	movwf	?_getStateFunc
  8548  0837  3F01               	moviw [1]fsr0
  8549  0838  00A7               	movwf	?_getStateFunc+1
  8550  0839  0008               	return
  8551  083A                     l8806:	
  8552                           
  8553                           ;menuhelper.c: 145:  }
  8554  083A  3001               	movlw	1
  8555  083B  00A8               	movwf	??_getStateFunc
  8556  083C  0828               	movf	??_getStateFunc,w
  8557  083D  07AC               	addwf	getStateFunc@n,f
  8558  083E  3009               	movlw	9
  8559  083F  022C               	subwf	getStateFunc@n,w
  8560  0840  1C03               	skipc
  8561  0841  2804               	goto	l8800
  8562                           
  8563                           ;menuhelper.c: 146:  return (t_stateFuncPtr)((void*)0);
  8564  0842  01A6               	clrf	?_getStateFunc
  8565  0843  01A7               	clrf	?_getStateFunc+1
  8566  0844  0008               	return
  8567  0845                     __end_of_getStateFunc:	
  8568                           
  8569                           	psect	text16
  8570  29D2                     __ptext16:	
  8571 ;; *************** function _getPB *****************
  8572 ;; Defined at:
  8573 ;;		line 86 in file "inputs.c"
  8574 ;; Parameters:    Size  Location     Type
  8575 ;;		None
  8576 ;; Auto vars:     Size  Location     Type
  8577 ;;  ret             1    1[BANK0 ] enum E7875
  8578 ;; Return value:  Size  Location     Type
  8579 ;;                  1    wreg      enum E7875
  8580 ;; Registers used:
  8581 ;;		wreg, status,2
  8582 ;; Tracked objects:
  8583 ;;		On entry : 0/0
  8584 ;;		On exit  : 0/0
  8585 ;;		Unchanged: 0/0
  8586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8588 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8589 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8590 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8591 ;;Total ram usage:        2 bytes
  8592 ;; Hardware stack levels used:    1
  8593 ;; Hardware stack levels required when called:    3
  8594 ;; This function calls:
  8595 ;;		Nothing
  8596 ;; This function is called by:
  8597 ;;		_menu
  8598 ;; This function uses a non-reentrant model
  8599 ;;
  8600                           
  8601                           
  8602                           ;psect for function _getPB
  8603  29D2                     _getPB:	
  8604                           
  8605                           ;inputs.c: 88:  enum e_buttonPress ret = pbState;
  8606                           
  8607                           ;incstack = 0
  8608                           ; Regs used in _getPB: [wreg+status,2]
  8609  29D2  0143               	movlb	3	; select bank3
  8610  29D3  0848               	movf	_pbState^(0+384),w	;volatile
  8611  29D4  0140               	movlb	0	; select bank0
  8612  29D5  00A0               	movwf	??_getPB
  8613  29D6  0820               	movf	??_getPB,w
  8614  29D7  00A1               	movwf	getPB@ret
  8615                           
  8616                           ;inputs.c: 89:  pbState = PB_NONE;
  8617  29D8  0143               	movlb	3	; select bank3
  8618  29D9  01C8               	clrf	_pbState^(0+384)	;volatile
  8619                           
  8620                           ;inputs.c: 90:  return ret;
  8621  29DA  0140               	movlb	0	; select bank0
  8622  29DB  0821               	movf	getPB@ret,w
  8623  29DC  0008               	return
  8624  29DD                     __end_of_getPB:	
  8625                           
  8626                           	psect	text17
  8627  24E8                     __ptext17:	
  8628 ;; *************** function _getNextState *****************
  8629 ;; Defined at:
  8630 ;;		line 152 in file "menuhelper.c"
  8631 ;; Parameters:    Size  Location     Type
  8632 ;;  state           1    wreg     enum E7942
  8633 ;;  page            1    6[BANK0 ] unsigned char 
  8634 ;;  pb              1    7[BANK0 ] enum E7928
  8635 ;; Auto vars:     Size  Location     Type
  8636 ;;  state           1   11[BANK0 ] enum E7942
  8637 ;;  n               1   12[BANK0 ] unsigned char 
  8638 ;; Return value:  Size  Location     Type
  8639 ;;                  1    wreg      char 
  8640 ;; Registers used:
  8641 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8642 ;; Tracked objects:
  8643 ;;		On entry : 0/0
  8644 ;;		On exit  : 0/0
  8645 ;;		Unchanged: 0/0
  8646 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8647 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8648 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8649 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8650 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8651 ;;Total ram usage:        7 bytes
  8652 ;; Hardware stack levels used:    1
  8653 ;; Hardware stack levels required when called:    4
  8654 ;; This function calls:
  8655 ;;		___wmul
  8656 ;; This function is called by:
  8657 ;;		_menu
  8658 ;; This function uses a non-reentrant model
  8659 ;;
  8660                           
  8661                           
  8662                           ;psect for function _getNextState
  8663  24E8                     _getNextState:	
  8664                           
  8665                           ;incstack = 0
  8666                           ; Regs used in _getNextState: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8667                           ;getNextState@state stored from wreg
  8668  24E8  0140               	movlb	0	; select bank0
  8669  24E9  00AB               	movwf	getNextState@state
  8670                           
  8671                           ;menuhelper.c: 152: int8_t getNextState(enum e_menuStates state, uint8_t page, enum e_bu
      +                          ttonPress pb);menuhelper.c: 153: {;menuhelper.c: 154:  uint8_t n;;menuhelper.c: 157:  fo
      +                          r(n = 0; n < sizeof(nextStateTbl)/sizeof(nextStateTbl[0]); n++) {
  8672  24EA  01AC               	clrf	getNextState@n
  8673  24EB                     l8824:	
  8674                           
  8675                           ;menuhelper.c: 158:   if ((nextStateTbl[n].state == state)) {
  8676  24EB  082C               	movf	getNextState@n,w
  8677  24EC  00A8               	movwf	??_getNextState
  8678  24ED  01A9               	clrf	??_getNextState+1
  8679  24EE  0828               	movf	??_getNextState,w
  8680  24EF  00A0               	movwf	___wmul@multiplier
  8681  24F0  0829               	movf	??_getNextState+1,w
  8682  24F1  00A1               	movwf	___wmul@multiplier+1
  8683  24F2  3005               	movlw	5
  8684  24F3  00A2               	movwf	___wmul@multiplicand
  8685  24F4  3000               	movlw	0
  8686  24F5  00A3               	movwf	___wmul@multiplicand+1
  8687  24F6  31AA  22C1  31A4   	fcall	___wmul
  8688  24F9  0140               	movlb	0	; select bank0
  8689  24FA  0821               	movf	?___wmul+1,w
  8690  24FB  0085               	movwf	5
  8691  24FC  0820               	movf	?___wmul,w
  8692  24FD  0084               	movwf	4
  8693  24FE  3050               	movlw	low (_nextStateTbl| (0+32768))
  8694  24FF  0784               	addwf	4,f
  8695  2500  30B0               	movlw	high (_nextStateTbl| (0+32768))
  8696  2501  3D85               	addwfc	5,f
  8697  2502  0800               	movf	0,w	;code access
  8698  2503  062B               	xorwf	getNextState@state,w
  8699  2504  1D03               	skipz
  8700  2505  2D73               	goto	l8844
  8701                           
  8702                           ;menuhelper.c: 160:    if ((nextStateTbl[n].page == page) ||
  8703  2506  082C               	movf	getNextState@n,w
  8704  2507  00A8               	movwf	??_getNextState
  8705  2508  01A9               	clrf	??_getNextState+1
  8706  2509  0828               	movf	??_getNextState,w
  8707  250A  00A0               	movwf	___wmul@multiplier
  8708  250B  0829               	movf	??_getNextState+1,w
  8709  250C  00A1               	movwf	___wmul@multiplier+1
  8710  250D  3005               	movlw	5
  8711  250E  00A2               	movwf	___wmul@multiplicand
  8712  250F  3000               	movlw	0
  8713  2510  00A3               	movwf	___wmul@multiplicand+1
  8714  2511  31AA  22C1  31A4   	fcall	___wmul
  8715  2514  0140               	movlb	0	; select bank0
  8716  2515  0821               	movf	?___wmul+1,w
  8717  2516  0085               	movwf	5
  8718  2517  0820               	movf	?___wmul,w
  8719  2518  0084               	movwf	4
  8720  2519  3051               	movlw	low ((_nextStateTbl+1)| (0+32768))
  8721  251A  0784               	addwf	4,f
  8722  251B  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
  8723  251C  3D85               	addwfc	5,f
  8724  251D  0800               	movf	0,w	;code access
  8725  251E  0626               	xorwf	getNextState@page,w
  8726  251F  1903               	skipnz
  8727  2520  2D3C               	goto	l8830
  8728  2521  082C               	movf	getNextState@n,w
  8729  2522  00A8               	movwf	??_getNextState
  8730  2523  01A9               	clrf	??_getNextState+1
  8731  2524  0828               	movf	??_getNextState,w
  8732  2525  00A0               	movwf	___wmul@multiplier
  8733  2526  0829               	movf	??_getNextState+1,w
  8734  2527  00A1               	movwf	___wmul@multiplier+1
  8735  2528  3005               	movlw	5
  8736  2529  00A2               	movwf	___wmul@multiplicand
  8737  252A  3000               	movlw	0
  8738  252B  00A3               	movwf	___wmul@multiplicand+1
  8739  252C  31AA  22C1  31A4   	fcall	___wmul
  8740  252F  0140               	movlb	0	; select bank0
  8741  2530  0821               	movf	?___wmul+1,w
  8742  2531  0085               	movwf	5
  8743  2532  0820               	movf	?___wmul,w
  8744  2533  0084               	movwf	4
  8745  2534  3051               	movlw	low ((_nextStateTbl+1)| (0+32768))
  8746  2535  0784               	addwf	4,f
  8747  2536  30B0               	movlw	high ((_nextStateTbl+1)| (0+32768))
  8748  2537  3D85               	addwfc	5,f
  8749  2538  0012               	moviw fsr0++
  8750  2539  3AFF               	xorlw	255
  8751  253A  1D03               	btfss	3,2
  8752  253B  2D73               	goto	l8844
  8753  253C                     l8830:	
  8754                           
  8755                           ;menuhelper.c: 161:     (nextStateTbl[n].page == 255)) {;menuhelper.c: 163:     if (pb =
      +                          = PB_SHORT)
  8756  253C  0327               	decf	getNextState@pb,w
  8757  253D  1D03               	btfss	3,2
  8758  253E  2D57               	goto	l8838
  8759                           
  8760                           ;menuhelper.c: 164:      return nextStateTbl[n].pbShort;
  8761  253F  082C               	movf	getNextState@n,w
  8762  2540  00A8               	movwf	??_getNextState
  8763  2541  01A9               	clrf	??_getNextState+1
  8764  2542  0828               	movf	??_getNextState,w
  8765  2543  00A0               	movwf	___wmul@multiplier
  8766  2544  0829               	movf	??_getNextState+1,w
  8767  2545  00A1               	movwf	___wmul@multiplier+1
  8768  2546  3005               	movlw	5
  8769  2547  00A2               	movwf	___wmul@multiplicand
  8770  2548  3000               	movlw	0
  8771  2549  00A3               	movwf	___wmul@multiplicand+1
  8772  254A  31AA  22C1         	fcall	___wmul
  8773  254C  0140               	movlb	0	; select bank0
  8774  254D  0821               	movf	?___wmul+1,w
  8775  254E  0085               	movwf	5
  8776  254F  0820               	movf	?___wmul,w
  8777  2550  0084               	movwf	4
  8778  2551  3052               	movlw	low ((_nextStateTbl+2)| (0+32768))
  8779  2552  0784               	addwf	4,f
  8780  2553  30B0               	movlw	high ((_nextStateTbl+2)| (0+32768))
  8781  2554  3D85               	addwfc	5,f
  8782  2555  0800               	movf	0,w	;code access
  8783  2556  0008               	return
  8784  2557                     l8838:	
  8785  2557  3002               	movlw	2
  8786  2558  0627               	xorwf	getNextState@pb,w
  8787  2559  1D03               	btfss	3,2
  8788  255A  2D73               	goto	l8844
  8789                           
  8790                           ;menuhelper.c: 166:      return nextStateTbl[n].pbLong;
  8791  255B  082C               	movf	getNextState@n,w
  8792  255C  00A8               	movwf	??_getNextState
  8793  255D  01A9               	clrf	??_getNextState+1
  8794  255E  0828               	movf	??_getNextState,w
  8795  255F  00A0               	movwf	___wmul@multiplier
  8796  2560  0829               	movf	??_getNextState+1,w
  8797  2561  00A1               	movwf	___wmul@multiplier+1
  8798  2562  3005               	movlw	5
  8799  2563  00A2               	movwf	___wmul@multiplicand
  8800  2564  3000               	movlw	0
  8801  2565  00A3               	movwf	___wmul@multiplicand+1
  8802  2566  31AA  22C1         	fcall	___wmul
  8803  2568  0140               	movlb	0	; select bank0
  8804  2569  0821               	movf	?___wmul+1,w
  8805  256A  0085               	movwf	5
  8806  256B  0820               	movf	?___wmul,w
  8807  256C  0084               	movwf	4
  8808  256D  3053               	movlw	low ((_nextStateTbl+3)| (0+32768))
  8809  256E  0784               	addwf	4,f
  8810  256F  30B0               	movlw	high ((_nextStateTbl+3)| (0+32768))
  8811  2570  3D85               	addwfc	5,f
  8812  2571  0800               	movf	0,w	;code access
  8813  2572  0008               	return
  8814  2573                     l8844:	
  8815                           ;menuhelper.c: 167:    }
  8816                           
  8817                           
  8818                           ;menuhelper.c: 169:  }
  8819  2573  3001               	movlw	1
  8820  2574  00A8               	movwf	??_getNextState
  8821  2575  0828               	movf	??_getNextState,w
  8822  2576  07AC               	addwf	getNextState@n,f
  8823  2577  300C               	movlw	12
  8824  2578  022C               	subwf	getNextState@n,w
  8825  2579  1C03               	skipc
  8826  257A  2CEB               	goto	l8824
  8827                           
  8828                           ;menuhelper.c: 170:  return -1;
  8829  257B  30FF               	movlw	255
  8830  257C  0008               	return
  8831  257D                     __end_of_getNextState:	
  8832                           
  8833                           	psect	text18
  8834  2AA7                     __ptext18:	
  8835 ;; *************** function _strcat *****************
  8836 ;; Defined at:
  8837 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strcat.c"
  8838 ;; Parameters:    Size  Location     Type
  8839 ;;  dest            1    wreg     PTR unsigned char 
  8840 ;;		 -> lBuf(49), 
  8841 ;;  src             1   17[BANK0 ] PTR const unsigned char 
  8842 ;;		 -> sBuf(13), 
  8843 ;; Auto vars:     Size  Location     Type
  8844 ;;  dest            1   20[BANK0 ] PTR unsigned char 
  8845 ;;		 -> lBuf(49), 
  8846 ;; Return value:  Size  Location     Type
  8847 ;;                  1    wreg      PTR unsigned char 
  8848 ;; Registers used:
  8849 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8850 ;; Tracked objects:
  8851 ;;		On entry : 0/0
  8852 ;;		On exit  : 0/0
  8853 ;;		Unchanged: 0/0
  8854 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8855 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8856 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8857 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8858 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8859 ;;Total ram usage:        4 bytes
  8860 ;; Hardware stack levels used:    1
  8861 ;; Hardware stack levels required when called:    4
  8862 ;; This function calls:
  8863 ;;		_strcpy
  8864 ;;		_strlen
  8865 ;; This function is called by:
  8866 ;;		_channelView
  8867 ;;		_channelSetup
  8868 ;; This function uses a non-reentrant model
  8869 ;;
  8870                           
  8871                           
  8872                           ;psect for function _strcat
  8873  2AA7                     _strcat:	
  8874                           
  8875                           ;incstack = 0
  8876                           ; Regs used in _strcat: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8877                           ;strcat@dest stored from wreg
  8878  2AA7  0140               	movlb	0	; select bank0
  8879  2AA8  00B4               	movwf	strcat@dest
  8880  2AA9  0834               	movf	strcat@dest,w
  8881  2AAA  00A0               	movwf	strlen@s
  8882  2AAB  3002               	movlw	2
  8883  2AAC  00A1               	movwf	strlen@s+1
  8884  2AAD  31AA  2246  31AA   	fcall	_strlen
  8885  2AB0  0140               	movlb	0	; select bank0
  8886  2AB1  0820               	movf	?_strlen,w
  8887  2AB2  00B2               	movwf	??_strcat
  8888  2AB3  0821               	movf	?_strlen+1,w
  8889  2AB4  00B3               	movwf	??_strcat+1
  8890  2AB5  0834               	movf	strcat@dest,w
  8891  2AB6  0732               	addwf	??_strcat,w
  8892  2AB7  00A5               	movwf	strcpy@dest
  8893  2AB8  3002               	movlw	2
  8894  2AB9  00A6               	movwf	strcpy@dest+1
  8895  2ABA  0831               	movf	strcat@src,w
  8896  2ABB  00A7               	movwf	strcpy@src
  8897  2ABC  3001               	movlw	1
  8898  2ABD  00A8               	movwf	strcpy@src+1
  8899  2ABE  31AB  239B         	fcall	_strcpy
  8900  2AC0  0008               	return
  8901  2AC1                     __end_of_strcat:	
  8902                           
  8903                           	psect	text19
  8904  2BE6                     __ptext19:	
  8905 ;; *************** function _sprintf *****************
  8906 ;; Defined at:
  8907 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_sprintf.c"
  8908 ;; Parameters:    Size  Location     Type
  8909 ;;  s               2   33[BANK2 ] PTR unsigned char 
  8910 ;;		 -> lBuf(49), sBuf(13), 
  8911 ;;  fmt             2   35[BANK2 ] PTR const unsigned char 
  8912 ;;		 -> STR_35(15), STR_33(15), STR_31(13), STR_29(53), 
  8913 ;;		 -> STR_27(14), STR_25(14), STR_24(15), STR_23(15), 
  8914 ;;		 -> STR_21(14), STR_20(13), STR_19(15), STR_18(15), 
  8915 ;;		 -> STR_10(10), STR_8(16), STR_7(7), STR_5(42), 
  8916 ;;		 -> STR_4(13), STR_3(14), 
  8917 ;; Auto vars:     Size  Location     Type
  8918 ;;  f               6   59[BANK2 ] struct _IO_FILE
  8919 ;;  ret             2    0        int 
  8920 ;;  ap              1   58[BANK2 ] PTR void [1]
  8921 ;;		 -> ?_sprintf(2), 
  8922 ;; Return value:  Size  Location     Type
  8923 ;;                  2   33[BANK2 ] int 
  8924 ;; Registers used:
  8925 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8926 ;; Tracked objects:
  8927 ;;		On entry : 0/0
  8928 ;;		On exit  : 0/0
  8929 ;;		Unchanged: 0/0
  8930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  8931 ;;      Params:         0       0       0      22       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8932 ;;      Locals:         0       0       0       9       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8933 ;;      Temps:          0       0       0       1       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8934 ;;      Totals:         0       0       0      32       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  8935 ;;Total ram usage:       32 bytes
  8936 ;; Hardware stack levels used:    1
  8937 ;; Hardware stack levels required when called:   10
  8938 ;; This function calls:
  8939 ;;		_vfprintf
  8940 ;; This function is called by:
  8941 ;;		_statusView
  8942 ;;		_channelView
  8943 ;;		_channelSetup
  8944 ;;		_setOutputPower
  8945 ;;		_setLensDia
  8946 ;;		_setup
  8947 ;;		_setDPOffset
  8948 ;;		_setSkyTemp
  8949 ;;		_setFudgeFactor
  8950 ;; This function uses a non-reentrant model
  8951 ;;
  8952                           
  8953                           
  8954                           ;psect for function _sprintf
  8955  2BE6                     _sprintf:	
  8956                           
  8957                           ;incstack = 0
  8958                           ; Regs used in _sprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  8959  2BE6  3045               	movlw	(low ((?_sprintf| (0+256)+4)))& (0+255)
  8960  2BE7  0142               	movlb	2	; select bank2
  8961  2BE8  00D7               	movwf	??_sprintf^(0+256)
  8962  2BE9  0857               	movf	??_sprintf^(0+256),w
  8963  2BEA  00DA               	movwf	sprintf@ap^(0+256)
  8964  2BEB  0842               	movf	(sprintf@s+1)^(0+256),w
  8965  2BEC  00DC               	movwf	(sprintf@f+1)^(0+256)
  8966  2BED  0841               	movf	sprintf@s^(0+256),w
  8967  2BEE  00DB               	movwf	sprintf@f^(0+256)
  8968  2BEF  01DD               	clrf	(sprintf@f^(0+256)+2)
  8969  2BF0  01DE               	clrf	((sprintf@f+1)^(0+256)+2)
  8970  2BF1  01DF               	clrf	(sprintf@f^(0+256)+4)
  8971  2BF2  01E0               	clrf	((sprintf@f+1)^(0+256)+4)
  8972  2BF3  0844               	movf	(sprintf@fmt+1)^(0+256),w
  8973  2BF4  00BA               	movwf	(vfprintf@fmt+1)^(0+256)
  8974  2BF5  0843               	movf	sprintf@fmt^(0+256),w
  8975  2BF6  00B9               	movwf	vfprintf@fmt^(0+256)
  8976  2BF7  305A               	movlw	(low (sprintf@ap| (0+256)))& (0+255)
  8977  2BF8  00D7               	movwf	??_sprintf^(0+256)
  8978  2BF9  0857               	movf	??_sprintf^(0+256),w
  8979  2BFA  00BB               	movwf	vfprintf@ap^(0+256)
  8980  2BFB  305B               	movlw	(low (sprintf@f| (0+256)))& (0+255)
  8981  2BFC  31AD  2522         	fcall	_vfprintf
  8982  2BFE  3002               	movlw	2
  8983  2BFF  3E5B               	addlw	(low (sprintf@f| (0+256)))& (0+255)
  8984  2C00  0086               	movwf	6
  8985  2C01  3001               	movlw	1	; select bank2/3
  8986  2C02  0087               	movwf	7
  8987  2C03  3F40               	moviw [0]fsr1
  8988  2C04  0142               	movlb	2	; select bank2
  8989  2C05  0741               	addwf	sprintf@s^(0+256),w
  8990  2C06  0084               	movwf	4
  8991  2C07  3F41               	moviw [1]fsr1
  8992  2C08  3D42               	addwfc	(sprintf@s+1)^(0+256),w
  8993  2C09  0085               	movwf	5
  8994  2C0A  0180               	clrf	0
  8995  2C0B  0008               	return
  8996  2C0C                     __end_of_sprintf:	
  8997                           
  8998                           	psect	text20
  8999  2D22                     __ptext20:	
  9000 ;; *************** function _vfprintf *****************
  9001 ;; Defined at:
  9002 ;;		line 1368 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  9003 ;; Parameters:    Size  Location     Type
  9004 ;;  fp              1    wreg     PTR struct _IO_FILE
  9005 ;;		 -> sprintf@f(6), 
  9006 ;;  fmt             2   25[BANK2 ] PTR const unsigned char 
  9007 ;;		 -> STR_35(15), STR_33(15), STR_31(13), STR_29(53), 
  9008 ;;		 -> STR_27(14), STR_25(14), STR_24(15), STR_23(15), 
  9009 ;;		 -> STR_21(14), STR_20(13), STR_19(15), STR_18(15), 
  9010 ;;		 -> STR_10(10), STR_8(16), STR_7(7), STR_5(42), 
  9011 ;;		 -> STR_4(13), STR_3(14), 
  9012 ;;  ap              1   27[BANK2 ] PTR PTR void 
  9013 ;;		 -> sprintf@ap(1), 
  9014 ;; Auto vars:     Size  Location     Type
  9015 ;;  fp              1   30[BANK2 ] PTR struct _IO_FILE
  9016 ;;		 -> sprintf@f(6), 
  9017 ;;  cfmt            2   31[BANK2 ] PTR unsigned char 
  9018 ;;		 -> STR_35(15), STR_33(15), STR_31(13), STR_29(53), 
  9019 ;;		 -> STR_27(14), STR_25(14), STR_24(15), STR_23(15), 
  9020 ;;		 -> STR_21(14), STR_20(13), STR_19(15), STR_18(15), 
  9021 ;;		 -> STR_10(10), STR_8(16), STR_7(7), STR_5(42), 
  9022 ;;		 -> STR_4(13), STR_3(14), 
  9023 ;; Return value:  Size  Location     Type
  9024 ;;                  2   25[BANK2 ] int 
  9025 ;; Registers used:
  9026 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9027 ;; Tracked objects:
  9028 ;;		On entry : 0/0
  9029 ;;		On exit  : 0/0
  9030 ;;		Unchanged: 0/0
  9031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9032 ;;      Params:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9033 ;;      Locals:         0       0       0       3       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9034 ;;      Temps:          0       0       0       2       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9035 ;;      Totals:         0       0       0       8       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9036 ;;Total ram usage:        8 bytes
  9037 ;; Hardware stack levels used:    1
  9038 ;; Hardware stack levels required when called:    9
  9039 ;; This function calls:
  9040 ;;		_vfpfcnvrt
  9041 ;; This function is called by:
  9042 ;;		_sprintf
  9043 ;; This function uses a non-reentrant model
  9044 ;;
  9045                           
  9046                           
  9047                           ;psect for function _vfprintf
  9048  2D22                     _vfprintf:	
  9049                           
  9050                           ;incstack = 0
  9051                           ; Regs used in _vfprintf: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9052                           ;vfprintf@fp stored from wreg
  9053  2D22  0142               	movlb	2	; select bank2
  9054  2D23  00BE               	movwf	vfprintf@fp^(0+256)
  9055                           
  9056                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1368: int v
      +                          fprintf(FILE *fp, const char *fmt, va_list ap);C:\Program Files (x86)\Microchip\xc8\v2.1
      +                          0\pic\sources\c99\common\doprnt.c: 1369: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pi
      +                          c\sources\c99\common\doprnt.c: 1371:     char *cfmt;;C:\Program Files (x86)\Microchip\xc
      +                          8\v2.10\pic\sources\c99\common\doprnt.c: 1373:     cfmt = (char *)fmt;
  9057  2D24  083A               	movf	(vfprintf@fmt+1)^(0+256),w
  9058  2D25  00C0               	movwf	(vfprintf@cfmt+1)^(0+256)
  9059  2D26  0839               	movf	vfprintf@fmt^(0+256),w
  9060  2D27  00BF               	movwf	vfprintf@cfmt^(0+256)
  9061                           
  9062                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1374:     n
      +                          out = 0;
  9063  2D28  0143               	movlb	3	; select bank3
  9064  2D29  01AC               	clrf	_nout^(0+384)
  9065  2D2A  01AD               	clrf	(_nout+1)^(0+384)
  9066  2D2B                     l8392:	
  9067                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  9068                           
  9069                           
  9070                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1375:     w
      +                          hile (*cfmt) {
  9071  2D2B  0142               	movlb	2	; select bank2
  9072  2D2C  083F               	movf	vfprintf@cfmt^(0+256),w
  9073  2D2D  0084               	movwf	4
  9074  2D2E  0840               	movf	(vfprintf@cfmt+1)^(0+256),w
  9075  2D2F  0085               	movwf	5
  9076  2D30  0012               	moviw fsr0++
  9077  2D31  1903               	btfsc	3,2
  9078  2D32  2D4C               	goto	l8394
  9079                           
  9080                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1376:      
      +                             nout += vfpfcnvrt(fp, &cfmt, ap);
  9081  2D33  303F               	movlw	(low (vfprintf@cfmt| (0+256)))& (0+255)
  9082  2D34  00BC               	movwf	??_vfprintf^(0+256)
  9083  2D35  083C               	movf	??_vfprintf^(0+256),w
  9084  2D36  0141               	movlb	1	; select bank1
  9085  2D37  00E8               	movwf	vfpfcnvrt@fmt^(0+128)
  9086  2D38  0142               	movlb	2	; select bank2
  9087  2D39  083B               	movf	vfprintf@ap^(0+256),w
  9088  2D3A  00BD               	movwf	(??_vfprintf+1)^(0+256)
  9089  2D3B  083D               	movf	(??_vfprintf+1)^(0+256),w
  9090  2D3C  0141               	movlb	1	; select bank1
  9091  2D3D  00E9               	movwf	vfpfcnvrt@ap^(0+128)
  9092  2D3E  0142               	movlb	2	; select bank2
  9093  2D3F  083E               	movf	vfprintf@fp^(0+256),w
  9094  2D40  318C  2453  31AD   	fcall	_vfpfcnvrt
  9095  2D43  0141               	movlb	1	; select bank1
  9096  2D44  0868               	movf	?_vfpfcnvrt^(0+128),w
  9097  2D45  0143               	movlb	3	; select bank3
  9098  2D46  07AC               	addwf	_nout^(0+384),f
  9099  2D47  0141               	movlb	1	; select bank1
  9100  2D48  0869               	movf	(?_vfpfcnvrt+1)^(0+128),w
  9101  2D49  0143               	movlb	3	; select bank3
  9102  2D4A  3DAD               	addwfc	(_nout+1)^(0+384),f
  9103  2D4B  2D2B               	goto	l8392
  9104  2D4C                     l8394:	
  9105                           
  9106                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1378:     r
      +                          eturn nout;
  9107  2D4C  0143               	movlb	3	; select bank3
  9108  2D4D  082D               	movf	(_nout+1)^(0+384),w
  9109  2D4E  0142               	movlb	2	; select bank2
  9110  2D4F  00BA               	movwf	(?_vfprintf+1)^(0+256)
  9111  2D50  0143               	movlb	3	; select bank3
  9112  2D51  082C               	movf	_nout^(0+384),w
  9113  2D52  0142               	movlb	2	; select bank2
  9114  2D53  00B9               	movwf	?_vfprintf^(0+256)
  9115  2D54  0008               	return
  9116  2D55                     __end_of_vfprintf:	
  9117                           
  9118                           	psect	text21
  9119  0C53                     __ptext21:	
  9120 ;; *************** function _vfpfcnvrt *****************
  9121 ;; Defined at:
  9122 ;;		line 670 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
  9123 ;; Parameters:    Size  Location     Type
  9124 ;;  fp              1    wreg     PTR struct _IO_FILE
  9125 ;;		 -> sprintf@f(6), 
  9126 ;;  fmt             1   72[BANK1 ] PTR PTR unsigned char 
  9127 ;;		 -> vfprintf@cfmt(2), 
  9128 ;;  ap              1   73[BANK1 ] PTR PTR void 
  9129 ;;		 -> sprintf@ap(1), 
  9130 ;; Auto vars:     Size  Location     Type
  9131 ;;  fp              1   24[BANK2 ] PTR struct _IO_FILE
  9132 ;;		 -> sprintf@f(6), 
  9133 ;;  ll              8    0[BANK2 ] long long 
  9134 ;;  llu             8    0        unsigned long long 
  9135 ;;  f               4   16[BANK2 ] unsigned long long 
  9136 ;;  ct              3   20[BANK2 ] unsigned char [3]
  9137 ;;  cp              2    8[BANK2 ] PTR unsigned char 
  9138 ;;		 -> ?_sprintf(2), STR_12(7), STR_11(7), sBuf(13), 
  9139 ;;  vp              2    0        PTR void 
  9140 ;;  i               2    0        int 
  9141 ;;  done            2    0        int 
  9142 ;;  c               1   23[BANK2 ] unsigned char 
  9143 ;; Return value:  Size  Location     Type
  9144 ;;                  2   72[BANK1 ] int 
  9145 ;; Registers used:
  9146 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9147 ;; Tracked objects:
  9148 ;;		On entry : 0/0
  9149 ;;		On exit  : 0/0
  9150 ;;		Unchanged: 0/0
  9151 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
  9152 ;;      Params:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9153 ;;      Locals:         0       0       0      25       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9154 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9155 ;;      Totals:         0       0       8      25       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
  9156 ;;Total ram usage:       33 bytes
  9157 ;; Hardware stack levels used:    1
  9158 ;; Hardware stack levels required when called:    8
  9159 ;; This function calls:
  9160 ;;		_atoi
  9161 ;;		_dtoa
  9162 ;;		_efgtoa
  9163 ;;		_fputc
  9164 ;;		_isdigit
  9165 ;;		_isupper
  9166 ;;		_stoa
  9167 ;;		_strncmp
  9168 ;;		_tolower
  9169 ;; This function is called by:
  9170 ;;		_vfprintf
  9171 ;; This function uses a non-reentrant model
  9172 ;;
  9173                           
  9174                           
  9175                           ;psect for function _vfpfcnvrt
  9176  0C53                     _vfpfcnvrt:	
  9177                           
  9178                           ;incstack = 0
  9179                           ; Regs used in _vfpfcnvrt: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  9180                           ;vfpfcnvrt@fp stored from wreg
  9181  0C53  0142               	movlb	2	; select bank2
  9182  0C54  00B8               	movwf	vfpfcnvrt@fp^(0+256)
  9183                           
  9184                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 670: static
      +                           int vfpfcnvrt(FILE *fp, char *fmt[], va_list ap);C:\Program Files (x86)\Microchip\xc8\v
      +                          2.10\pic\sources\c99\common\doprnt.c: 671: {;C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 672:     char c, *cp, ct[3];;C:\Program Files (x86)\Mic
      +                          rochip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 673:     int done, i;;C:\Program Files
      +                           (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 674:     long long ll;
  9185  0C55  0141               	movlb	1	; select bank1
  9186  0C56  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9187  0C57  0086               	movwf	6
  9188  0C58  3001               	movlw	1	; select bank2/3
  9189  0C59  0087               	movwf	7
  9190  0C5A  3F40               	moviw [0]fsr1
  9191  0C5B  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9192  0C5C  3F41               	moviw [1]fsr1
  9193  0C5D  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9194  0C5E  086A               	movf	??_vfpfcnvrt^(0+128),w
  9195  0C5F  0084               	movwf	4
  9196  0C60  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  9197  0C61  0085               	movwf	5
  9198  0C62  0012               	moviw fsr0++
  9199  0C63  3A25               	xorlw	37
  9200  0C64  1D03               	btfss	3,2
  9201  0C65  2FD5               	goto	l8364
  9202                           
  9203                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 681:       
      +                            ++*fmt;
  9204  0C66  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9205  0C67  0086               	movwf	6
  9206  0C68  3001               	movlw	1	; select bank2/3
  9207  0C69  0087               	movwf	7
  9208  0C6A  3001               	movlw	1
  9209  0C6B  0781               	addwf	1,f
  9210  0C6C  3141               	addfsr 1,1
  9211  0C6D  1803               	skipnc
  9212  0C6E  0A81               	incf	1,f
  9213                           
  9214                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 683:       
      +                            flags = width = 0;
  9215  0C6F  0143               	movlb	3	; select bank3
  9216  0C70  01AE               	clrf	_width^(0+384)
  9217  0C71  01AF               	clrf	(_width+1)^(0+384)
  9218  0C72  01B2               	clrf	_flags^(0+384)
  9219  0C73  01B3               	clrf	(_flags+1)^(0+384)
  9220                           
  9221                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 684:       
      +                            prec = -1;
  9222  0C74  30FF               	movlw	255
  9223  0C75  00B0               	movwf	_prec^(0+384)
  9224  0C76  30FF               	movlw	255
  9225  0C77  00B1               	movwf	(_prec^(0+384)+1)
  9226                           
  9227                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 723:       
      +                            if ((*fmt)[0] == '*') {
  9228  0C78  0141               	movlb	1	; select bank1
  9229  0C79  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9230  0C7A  0086               	movwf	6
  9231  0C7B  3001               	movlw	1	; select bank2/3
  9232  0C7C  0087               	movwf	7
  9233  0C7D  3F40               	moviw [0]fsr1
  9234  0C7E  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9235  0C7F  3F41               	moviw [1]fsr1
  9236  0C80  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9237  0C81  086A               	movf	??_vfpfcnvrt^(0+128),w
  9238  0C82  0084               	movwf	4
  9239  0C83  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  9240  0C84  0085               	movwf	5
  9241  0C85  0012               	moviw fsr0++
  9242  0C86  3A2A               	xorlw	42
  9243  0C87  1D03               	btfss	3,2
  9244  0C88  2CAA               	goto	l8254
  9245                           
  9246                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 724:       
      +                                ++*fmt;
  9247  0C89  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9248  0C8A  0086               	movwf	6
  9249  0C8B  3001               	movlw	1	; select bank2/3
  9250  0C8C  0087               	movwf	7
  9251  0C8D  3001               	movlw	1
  9252  0C8E  0781               	addwf	1,f
  9253  0C8F  3141               	addfsr 1,1
  9254  0C90  1803               	skipnc
  9255  0C91  0A81               	incf	1,f
  9256                           
  9257                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 725:       
      +                                width = (*(int *)__va_arg(*(int **)ap, (int)0));
  9258  0C92  0869               	movf	vfpfcnvrt@ap^(0+128),w
  9259  0C93  0086               	movwf	6
  9260  0C94  3001               	movlw	1	; select bank2/3
  9261  0C95  0087               	movwf	7
  9262  0C96  0801               	movf	1,w
  9263  0C97  0084               	movwf	4
  9264  0C98  3001               	movlw	1	; select bank2/3
  9265  0C99  0085               	movwf	5
  9266  0C9A  3002               	movlw	2
  9267  0C9B  0781               	addwf	1,f
  9268  0C9C  3F00               	moviw [0]fsr0
  9269  0C9D  0143               	movlb	3	; select bank3
  9270  0C9E  00AE               	movwf	_width^(0+384)
  9271  0C9F  3F01               	moviw [1]fsr0
  9272  0CA0  00AF               	movwf	(_width+1)^(0+384)
  9273                           
  9274                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 726:       
      +                                if (width < 0) {
  9275  0CA1  1FAF               	btfss	(_width+1)^(0+384),7
  9276  0CA2  2CF4               	goto	l8264
  9277                           
  9278                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 727:       
      +                                    flags |= (1 << 0);
  9279  0CA3  1432               	bsf	_flags^(0+384),0
  9280                           
  9281                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 728:       
      +                                    width = -width;
  9282  0CA4  09AE               	comf	_width^(0+384),f
  9283  0CA5  09AF               	comf	(_width+1)^(0+384),f
  9284  0CA6  0AAE               	incf	_width^(0+384),f
  9285  0CA7  1903               	skipnz
  9286  0CA8  0AAF               	incf	(_width+1)^(0+384),f
  9287  0CA9  2CF4               	goto	l8264
  9288  0CAA                     l8254:	
  9289                           
  9290                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 731:       
      +                                width = atoi(*fmt);
  9291  0CAA  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9292  0CAB  0086               	movwf	6
  9293  0CAC  3001               	movlw	1	; select bank2/3
  9294  0CAD  0087               	movwf	7
  9295  0CAE  3F40               	moviw [0]fsr1
  9296  0CAF  0140               	movlb	0	; select bank0
  9297  0CB0  00A6               	movwf	atoi@s
  9298  0CB1  3F41               	moviw [1]fsr1
  9299  0CB2  00A7               	movwf	atoi@s+1
  9300  0CB3  31A6  26AC  318C   	fcall	_atoi
  9301  0CB6  0140               	movlb	0	; select bank0
  9302  0CB7  0827               	movf	?_atoi+1,w
  9303  0CB8  0143               	movlb	3	; select bank3
  9304  0CB9  00AF               	movwf	(_width+1)^(0+384)
  9305  0CBA  0140               	movlb	0	; select bank0
  9306  0CBB  0826               	movf	?_atoi,w
  9307  0CBC  0143               	movlb	3	; select bank3
  9308  0CBD  00AE               	movwf	_width^(0+384)
  9309                           
  9310                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 732:       
      +                                while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  9311  0CBE  2CC9               	goto	l8258
  9312  0CBF                     l8256:	
  9313                           
  9314                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 733:       
      +                                    ++*fmt;
  9315  0CBF  0141               	movlb	1	; select bank1
  9316  0CC0  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9317  0CC1  0086               	movwf	6
  9318  0CC2  3001               	movlw	1	; select bank2/3
  9319  0CC3  0087               	movwf	7
  9320  0CC4  3001               	movlw	1
  9321  0CC5  0781               	addwf	1,f
  9322  0CC6  3141               	addfsr 1,1
  9323  0CC7  1803               	skipnc
  9324  0CC8  0A81               	incf	1,f
  9325  0CC9                     l8258:	
  9326  0CC9  0141               	movlb	1	; select bank1
  9327  0CCA  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9328  0CCB  0086               	movwf	6
  9329  0CCC  3001               	movlw	1	; select bank2/3
  9330  0CCD  0087               	movwf	7
  9331  0CCE  3F40               	moviw [0]fsr1
  9332  0CCF  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9333  0CD0  3F41               	moviw [1]fsr1
  9334  0CD1  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9335  0CD2  086A               	movf	??_vfpfcnvrt^(0+128),w
  9336  0CD3  0084               	movwf	4
  9337  0CD4  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  9338  0CD5  0085               	movwf	5
  9339  0CD6  0800               	movf	0,w	;code access
  9340  0CD7  3ED0               	addlw	208
  9341  0CD8  00EC               	movwf	(??_vfpfcnvrt+2)^(0+128)
  9342  0CD9  30FF               	movlw	255
  9343  0CDA  1803               	skipnc
  9344  0CDB  3000               	movlw	0
  9345  0CDC  00ED               	movwf	((??_vfpfcnvrt+2)^(0+128)+1)
  9346  0CDD  3000               	movlw	0
  9347  0CDE  026D               	subwf	(??_vfpfcnvrt+3)^(0+128),w
  9348  0CDF  300A               	movlw	10
  9349  0CE0  1903               	skipnz
  9350  0CE1  026C               	subwf	(??_vfpfcnvrt+2)^(0+128),w
  9351  0CE2  1803               	btfsc	3,0
  9352  0CE3  2CE6               	goto	u11640
  9353  0CE4  3001               	movlw	1
  9354  0CE5  2CE7               	goto	u11650
  9355  0CE6                     u11640:	
  9356  0CE6  3000               	movlw	0
  9357  0CE7                     u11650:	
  9358  0CE7  00EE               	movwf	(??_vfpfcnvrt+4)^(0+128)
  9359  0CE8  01EF               	clrf	((??_vfpfcnvrt+4)^(0+128)+1)
  9360  0CE9  086E               	movf	(??_vfpfcnvrt+4)^(0+128),w
  9361  0CEA  0142               	movlb	2	; select bank2
  9362  0CEB  00AA               	movwf	_vfpfcnvrt$1740^(0+256)
  9363  0CEC  0141               	movlb	1	; select bank1
  9364  0CED  086F               	movf	(??_vfpfcnvrt+5)^(0+128),w
  9365  0CEE  0142               	movlb	2	; select bank2
  9366  0CEF  00AB               	movwf	(_vfpfcnvrt$1740+1)^(0+256)
  9367  0CF0  082A               	movf	_vfpfcnvrt$1740^(0+256),w
  9368  0CF1  042B               	iorwf	(_vfpfcnvrt$1740+1)^(0+256),w
  9369  0CF2  1D03               	btfss	3,2
  9370  0CF3  2CBF               	goto	l8256
  9371  0CF4                     l8264:	
  9372                           
  9373                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 740:       
      +                            if ((*fmt)[0] == '.') {
  9374  0CF4  0141               	movlb	1	; select bank1
  9375  0CF5  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9376  0CF6  0086               	movwf	6
  9377  0CF7  3001               	movlw	1	; select bank2/3
  9378  0CF8  0087               	movwf	7
  9379  0CF9  3F40               	moviw [0]fsr1
  9380  0CFA  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9381  0CFB  3F41               	moviw [1]fsr1
  9382  0CFC  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9383  0CFD  086A               	movf	??_vfpfcnvrt^(0+128),w
  9384  0CFE  0084               	movwf	4
  9385  0CFF  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  9386  0D00  0085               	movwf	5
  9387  0D01  0012               	moviw fsr0++
  9388  0D02  3A2E               	xorlw	46
  9389  0D03  1D03               	btfss	3,2
  9390  0D04  2D85               	goto	l8286
  9391                           
  9392                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 741:       
      +                                prec = 0;
  9393  0D05  0143               	movlb	3	; select bank3
  9394  0D06  01B0               	clrf	_prec^(0+384)
  9395  0D07  01B1               	clrf	(_prec+1)^(0+384)
  9396                           
  9397                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 742:       
      +                                ++*fmt;
  9398  0D08  0141               	movlb	1	; select bank1
  9399  0D09  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9400  0D0A  0086               	movwf	6
  9401  0D0B  3001               	movlw	1	; select bank2/3
  9402  0D0C  0087               	movwf	7
  9403  0D0D  3001               	movlw	1
  9404  0D0E  0781               	addwf	1,f
  9405  0D0F  3141               	addfsr 1,1
  9406  0D10  1803               	skipnc
  9407  0D11  0A81               	incf	1,f
  9408                           
  9409                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 743:       
      +                                if ((*fmt)[0] == '*') {
  9410  0D12  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9411  0D13  0086               	movwf	6
  9412  0D14  3001               	movlw	1	; select bank2/3
  9413  0D15  0087               	movwf	7
  9414  0D16  3F40               	moviw [0]fsr1
  9415  0D17  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9416  0D18  3F41               	moviw [1]fsr1
  9417  0D19  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9418  0D1A  086A               	movf	??_vfpfcnvrt^(0+128),w
  9419  0D1B  0084               	movwf	4
  9420  0D1C  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  9421  0D1D  0085               	movwf	5
  9422  0D1E  0012               	moviw fsr0++
  9423  0D1F  3A2A               	xorlw	42
  9424  0D20  1D03               	btfss	3,2
  9425  0D21  2D3B               	goto	l8276
  9426                           
  9427                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 744:       
      +                                    ++*fmt;
  9428  0D22  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9429  0D23  0086               	movwf	6
  9430  0D24  3001               	movlw	1	; select bank2/3
  9431  0D25  0087               	movwf	7
  9432  0D26  3001               	movlw	1
  9433  0D27  0781               	addwf	1,f
  9434  0D28  3141               	addfsr 1,1
  9435  0D29  1803               	skipnc
  9436  0D2A  0A81               	incf	1,f
  9437                           
  9438                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 745:       
      +                                    prec = (*(int *)__va_arg(*(int **)ap, (int)0));
  9439  0D2B  0869               	movf	vfpfcnvrt@ap^(0+128),w
  9440  0D2C  0086               	movwf	6
  9441  0D2D  3001               	movlw	1	; select bank2/3
  9442  0D2E  0087               	movwf	7
  9443  0D2F  0801               	movf	1,w
  9444  0D30  0084               	movwf	4
  9445  0D31  3001               	movlw	1	; select bank2/3
  9446  0D32  0085               	movwf	5
  9447  0D33  3002               	movlw	2
  9448  0D34  0781               	addwf	1,f
  9449  0D35  3F00               	moviw [0]fsr0
  9450  0D36  0143               	movlb	3	; select bank3
  9451  0D37  00B0               	movwf	_prec^(0+384)
  9452  0D38  3F01               	moviw [1]fsr0
  9453  0D39  00B1               	movwf	(_prec+1)^(0+384)
  9454                           
  9455                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 746:       
      +                                } else {
  9456  0D3A  2D85               	goto	l8286
  9457  0D3B                     l8276:	
  9458                           
  9459                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 747:       
      +                                    prec = atoi(*fmt);
  9460  0D3B  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9461  0D3C  0086               	movwf	6
  9462  0D3D  3001               	movlw	1	; select bank2/3
  9463  0D3E  0087               	movwf	7
  9464  0D3F  3F40               	moviw [0]fsr1
  9465  0D40  0140               	movlb	0	; select bank0
  9466  0D41  00A6               	movwf	atoi@s
  9467  0D42  3F41               	moviw [1]fsr1
  9468  0D43  00A7               	movwf	atoi@s+1
  9469  0D44  31A6  26AC  318C   	fcall	_atoi
  9470  0D47  0140               	movlb	0	; select bank0
  9471  0D48  0827               	movf	?_atoi+1,w
  9472  0D49  0143               	movlb	3	; select bank3
  9473  0D4A  00B1               	movwf	(_prec+1)^(0+384)
  9474  0D4B  0140               	movlb	0	; select bank0
  9475  0D4C  0826               	movf	?_atoi,w
  9476  0D4D  0143               	movlb	3	; select bank3
  9477  0D4E  00B0               	movwf	_prec^(0+384)
  9478                           
  9479                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 748:       
      +                                    while ((0 ? isdigit((*fmt)[0]) : ((unsigned)((*fmt)[0])-'0') < 10)) {
  9480  0D4F  2D5A               	goto	l8280
  9481  0D50                     l8278:	
  9482                           
  9483                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 749:       
      +                                        ++*fmt;
  9484  0D50  0141               	movlb	1	; select bank1
  9485  0D51  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9486  0D52  0086               	movwf	6
  9487  0D53  3001               	movlw	1	; select bank2/3
  9488  0D54  0087               	movwf	7
  9489  0D55  3001               	movlw	1
  9490  0D56  0781               	addwf	1,f
  9491  0D57  3141               	addfsr 1,1
  9492  0D58  1803               	skipnc
  9493  0D59  0A81               	incf	1,f
  9494  0D5A                     l8280:	
  9495  0D5A  0141               	movlb	1	; select bank1
  9496  0D5B  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9497  0D5C  0086               	movwf	6
  9498  0D5D  3001               	movlw	1	; select bank2/3
  9499  0D5E  0087               	movwf	7
  9500  0D5F  3F40               	moviw [0]fsr1
  9501  0D60  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9502  0D61  3F41               	moviw [1]fsr1
  9503  0D62  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9504  0D63  086A               	movf	??_vfpfcnvrt^(0+128),w
  9505  0D64  0084               	movwf	4
  9506  0D65  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  9507  0D66  0085               	movwf	5
  9508  0D67  0800               	movf	0,w	;code access
  9509  0D68  3ED0               	addlw	208
  9510  0D69  00EC               	movwf	(??_vfpfcnvrt+2)^(0+128)
  9511  0D6A  30FF               	movlw	255
  9512  0D6B  1803               	skipnc
  9513  0D6C  3000               	movlw	0
  9514  0D6D  00ED               	movwf	((??_vfpfcnvrt+2)^(0+128)+1)
  9515  0D6E  3000               	movlw	0
  9516  0D6F  026D               	subwf	(??_vfpfcnvrt+3)^(0+128),w
  9517  0D70  300A               	movlw	10
  9518  0D71  1903               	skipnz
  9519  0D72  026C               	subwf	(??_vfpfcnvrt+2)^(0+128),w
  9520  0D73  1803               	btfsc	3,0
  9521  0D74  2D77               	goto	u11690
  9522  0D75  3001               	movlw	1
  9523  0D76  2D78               	goto	u11700
  9524  0D77                     u11690:	
  9525  0D77  3000               	movlw	0
  9526  0D78                     u11700:	
  9527  0D78  00EE               	movwf	(??_vfpfcnvrt+4)^(0+128)
  9528  0D79  01EF               	clrf	((??_vfpfcnvrt+4)^(0+128)+1)
  9529  0D7A  086E               	movf	(??_vfpfcnvrt+4)^(0+128),w
  9530  0D7B  0142               	movlb	2	; select bank2
  9531  0D7C  00AC               	movwf	_vfpfcnvrt$1741^(0+256)
  9532  0D7D  0141               	movlb	1	; select bank1
  9533  0D7E  086F               	movf	(??_vfpfcnvrt+5)^(0+128),w
  9534  0D7F  0142               	movlb	2	; select bank2
  9535  0D80  00AD               	movwf	(_vfpfcnvrt$1741+1)^(0+256)
  9536  0D81  082C               	movf	_vfpfcnvrt$1741^(0+256),w
  9537  0D82  042D               	iorwf	(_vfpfcnvrt$1741+1)^(0+256),w
  9538  0D83  1D03               	btfss	3,2
  9539  0D84  2D50               	goto	l8278
  9540  0D85                     l8286:	
  9541                           
  9542                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 757:       
      +                            ct[0] = tolower((int)(*fmt)[0]);
  9543  0D85  0141               	movlb	1	; select bank1
  9544  0D86  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9545  0D87  0086               	movwf	6
  9546  0D88  3001               	movlw	1	; select bank2/3
  9547  0D89  0087               	movwf	7
  9548  0D8A  3F40               	moviw [0]fsr1
  9549  0D8B  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9550  0D8C  3F41               	moviw [1]fsr1
  9551  0D8D  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9552  0D8E  086A               	movf	??_vfpfcnvrt^(0+128),w
  9553  0D8F  0084               	movwf	4
  9554  0D90  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  9555  0D91  0085               	movwf	5
  9556  0D92  0800               	movf	0,w	;code access
  9557  0D93  00EC               	movwf	(??_vfpfcnvrt+2)^(0+128)
  9558  0D94  01ED               	clrf	((??_vfpfcnvrt+2)^(0+128)+1)
  9559  0D95  086C               	movf	(??_vfpfcnvrt+2)^(0+128),w
  9560  0D96  0140               	movlb	0	; select bank0
  9561  0D97  00A6               	movwf	tolower@c
  9562  0D98  0141               	movlb	1	; select bank1
  9563  0D99  086D               	movf	(??_vfpfcnvrt+3)^(0+128),w
  9564  0D9A  0140               	movlb	0	; select bank0
  9565  0D9B  00A7               	movwf	tolower@c+1
  9566  0D9C  31AB  2379  318C   	fcall	_tolower
  9567  0D9F  0140               	movlb	0	; select bank0
  9568  0DA0  0826               	movf	?_tolower,w
  9569  0DA1  0141               	movlb	1	; select bank1
  9570  0DA2  00EE               	movwf	(??_vfpfcnvrt+4)^(0+128)
  9571  0DA3  086E               	movf	(??_vfpfcnvrt+4)^(0+128),w
  9572  0DA4  0142               	movlb	2	; select bank2
  9573  0DA5  00B4               	movwf	vfpfcnvrt@ct^(0+256)
  9574                           
  9575                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 758:       
      +                            if (ct[0]) {
  9576  0DA6  0834               	movf	vfpfcnvrt@ct^(0+256),w
  9577  0DA7  1903               	btfsc	3,2
  9578  0DA8  2DF4               	goto	l8296
  9579                           
  9580                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 759:       
      +                                ct[1] = tolower((int)(*fmt)[1]);
  9581  0DA9  0141               	movlb	1	; select bank1
  9582  0DAA  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9583  0DAB  0086               	movwf	6
  9584  0DAC  3001               	movlw	1	; select bank2/3
  9585  0DAD  0087               	movwf	7
  9586  0DAE  3F40               	moviw [0]fsr1
  9587  0DAF  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9588  0DB0  3F41               	moviw [1]fsr1
  9589  0DB1  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9590  0DB2  3001               	movlw	1
  9591  0DB3  076A               	addwf	??_vfpfcnvrt^(0+128),w
  9592  0DB4  0084               	movwf	4
  9593  0DB5  086B               	movf	(??_vfpfcnvrt^(0+128)+1),w
  9594  0DB6  1803               	skipnc
  9595  0DB7  0A6B               	incf	(??_vfpfcnvrt^(0+128)+1),w
  9596  0DB8  0085               	movwf	5
  9597  0DB9  0800               	movf	0,w	;code access
  9598  0DBA  00EC               	movwf	(??_vfpfcnvrt+2)^(0+128)
  9599  0DBB  01ED               	clrf	((??_vfpfcnvrt+2)^(0+128)+1)
  9600  0DBC  086C               	movf	(??_vfpfcnvrt+2)^(0+128),w
  9601  0DBD  0140               	movlb	0	; select bank0
  9602  0DBE  00A6               	movwf	tolower@c
  9603  0DBF  0141               	movlb	1	; select bank1
  9604  0DC0  086D               	movf	(??_vfpfcnvrt+3)^(0+128),w
  9605  0DC1  0140               	movlb	0	; select bank0
  9606  0DC2  00A7               	movwf	tolower@c+1
  9607  0DC3  31AB  2379  318C   	fcall	_tolower
  9608  0DC6  0140               	movlb	0	; select bank0
  9609  0DC7  0826               	movf	?_tolower,w
  9610  0DC8  0141               	movlb	1	; select bank1
  9611  0DC9  00EE               	movwf	(??_vfpfcnvrt+4)^(0+128)
  9612  0DCA  086E               	movf	(??_vfpfcnvrt+4)^(0+128),w
  9613  0DCB  0142               	movlb	2	; select bank2
  9614  0DCC  00B5               	movwf	(vfpfcnvrt@ct^(0+256)+1)
  9615                           
  9616                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 760:       
      +                                if (ct[1]) {
  9617  0DCD  0835               	movf	(vfpfcnvrt@ct^(0+256)+1),w
  9618  0DCE  1903               	btfsc	3,2
  9619  0DCF  2DF4               	goto	l8296
  9620                           
  9621                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 761:       
      +                                    ct[2] = tolower((int)(*fmt)[2]);
  9622  0DD0  0141               	movlb	1	; select bank1
  9623  0DD1  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9624  0DD2  0086               	movwf	6
  9625  0DD3  3001               	movlw	1	; select bank2/3
  9626  0DD4  0087               	movwf	7
  9627  0DD5  3F40               	moviw [0]fsr1
  9628  0DD6  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9629  0DD7  3F41               	moviw [1]fsr1
  9630  0DD8  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9631  0DD9  3002               	movlw	2
  9632  0DDA  076A               	addwf	??_vfpfcnvrt^(0+128),w
  9633  0DDB  0084               	movwf	4
  9634  0DDC  086B               	movf	(??_vfpfcnvrt^(0+128)+1),w
  9635  0DDD  1803               	skipnc
  9636  0DDE  0A6B               	incf	(??_vfpfcnvrt^(0+128)+1),w
  9637  0DDF  0085               	movwf	5
  9638  0DE0  0800               	movf	0,w	;code access
  9639  0DE1  00EC               	movwf	(??_vfpfcnvrt+2)^(0+128)
  9640  0DE2  01ED               	clrf	((??_vfpfcnvrt+2)^(0+128)+1)
  9641  0DE3  086C               	movf	(??_vfpfcnvrt+2)^(0+128),w
  9642  0DE4  0140               	movlb	0	; select bank0
  9643  0DE5  00A6               	movwf	tolower@c
  9644  0DE6  0141               	movlb	1	; select bank1
  9645  0DE7  086D               	movf	(??_vfpfcnvrt+3)^(0+128),w
  9646  0DE8  0140               	movlb	0	; select bank0
  9647  0DE9  00A7               	movwf	tolower@c+1
  9648  0DEA  31AB  2379  318C   	fcall	_tolower
  9649  0DED  0140               	movlb	0	; select bank0
  9650  0DEE  0826               	movf	?_tolower,w
  9651  0DEF  0141               	movlb	1	; select bank1
  9652  0DF0  00EE               	movwf	(??_vfpfcnvrt+4)^(0+128)
  9653  0DF1  086E               	movf	(??_vfpfcnvrt+4)^(0+128),w
  9654  0DF2  0142               	movlb	2	; select bank2
  9655  0DF3  00B6               	movwf	(vfpfcnvrt@ct^(0+256)+2)
  9656  0DF4                     l8296:	
  9657                           
  9658                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 825:       
      +                            if ((*fmt[0] == 'd') || (*fmt[0] == 'i')) {
  9659  0DF4  0141               	movlb	1	; select bank1
  9660  0DF5  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9661  0DF6  0086               	movwf	6
  9662  0DF7  3001               	movlw	1	; select bank2/3
  9663  0DF8  0087               	movwf	7
  9664  0DF9  3F40               	moviw [0]fsr1
  9665  0DFA  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9666  0DFB  3F41               	moviw [1]fsr1
  9667  0DFC  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9668  0DFD  086A               	movf	??_vfpfcnvrt^(0+128),w
  9669  0DFE  0084               	movwf	4
  9670  0DFF  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  9671  0E00  0085               	movwf	5
  9672  0E01  0012               	moviw fsr0++
  9673  0E02  3A64               	xorlw	100
  9674  0E03  1903               	btfsc	3,2
  9675  0E04  2E15               	goto	l8300
  9676  0E05  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9677  0E06  0086               	movwf	6
  9678  0E07  3001               	movlw	1	; select bank2/3
  9679  0E08  0087               	movwf	7
  9680  0E09  3F40               	moviw [0]fsr1
  9681  0E0A  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9682  0E0B  3F41               	moviw [1]fsr1
  9683  0E0C  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9684  0E0D  086A               	movf	??_vfpfcnvrt^(0+128),w
  9685  0E0E  0084               	movwf	4
  9686  0E0F  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  9687  0E10  0085               	movwf	5
  9688  0E11  0012               	moviw fsr0++
  9689  0E12  3A69               	xorlw	105
  9690  0E13  1D03               	btfss	3,2
  9691  0E14  2E68               	goto	l8308
  9692  0E15                     l8300:	
  9693                           
  9694                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 827:       
      +                                ++*fmt;
  9695  0E15  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9696  0E16  0086               	movwf	6
  9697  0E17  3001               	movlw	1	; select bank2/3
  9698  0E18  0087               	movwf	7
  9699  0E19  3001               	movlw	1
  9700  0E1A  0781               	addwf	1,f
  9701  0E1B  3141               	addfsr 1,1
  9702  0E1C  1803               	skipnc
  9703  0E1D  0A81               	incf	1,f
  9704                           
  9705                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 828:       
      +                                ll = (long long)(*(int *)__va_arg(*(int **)ap, (int)0));
  9706  0E1E  0869               	movf	vfpfcnvrt@ap^(0+128),w
  9707  0E1F  0086               	movwf	6
  9708  0E20  3001               	movlw	1	; select bank2/3
  9709  0E21  0087               	movwf	7
  9710  0E22  0801               	movf	1,w
  9711  0E23  0084               	movwf	4
  9712  0E24  3001               	movlw	1	; select bank2/3
  9713  0E25  0085               	movwf	5
  9714  0E26  3002               	movlw	2
  9715  0E27  0781               	addwf	1,f
  9716  0E28  3F00               	moviw [0]fsr0
  9717  0E29  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9718  0E2A  3F01               	moviw [1]fsr0
  9719  0E2B  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9720  0E2C  086A               	movf	??_vfpfcnvrt^(0+128),w
  9721  0E2D  0142               	movlb	2	; select bank2
  9722  0E2E  00A0               	movwf	vfpfcnvrt@ll^(0+256)
  9723  0E2F  0141               	movlb	1	; select bank1
  9724  0E30  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  9725  0E31  0142               	movlb	2	; select bank2
  9726  0E32  00A1               	movwf	(vfpfcnvrt@ll+1)^(0+256)
  9727  0E33  0D89               	rlf	9,f
  9728  0E34  3B89               	subwfb	9,f
  9729  0E35  0989               	comf	9,f
  9730  0E36  00A2               	movwf	(vfpfcnvrt@ll+2)^(0+256)
  9731  0E37  00A3               	movwf	(vfpfcnvrt@ll+3)^(0+256)
  9732  0E38  00A4               	movwf	(vfpfcnvrt@ll+4)^(0+256)
  9733  0E39  00A5               	movwf	(vfpfcnvrt@ll+5)^(0+256)
  9734  0E3A  00A6               	movwf	(vfpfcnvrt@ll+6)^(0+256)
  9735  0E3B  00A7               	movwf	(vfpfcnvrt@ll+7)^(0+256)
  9736                           
  9737                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 830:       
      +                                return dtoa(fp, ll);
  9738  0E3C  0820               	movf	vfpfcnvrt@ll^(0+256),w
  9739  0E3D  0140               	movlb	0	; select bank0
  9740  0E3E  00BB               	movwf	dtoa@d
  9741  0E3F  0142               	movlb	2	; select bank2
  9742  0E40  0821               	movf	(vfpfcnvrt@ll+1)^(0+256),w
  9743  0E41  0140               	movlb	0	; select bank0
  9744  0E42  00BC               	movwf	dtoa@d+1
  9745  0E43  0142               	movlb	2	; select bank2
  9746  0E44  0822               	movf	(vfpfcnvrt@ll+2)^(0+256),w
  9747  0E45  0140               	movlb	0	; select bank0
  9748  0E46  00BD               	movwf	dtoa@d+2
  9749  0E47  0142               	movlb	2	; select bank2
  9750  0E48  0823               	movf	(vfpfcnvrt@ll+3)^(0+256),w
  9751  0E49  0140               	movlb	0	; select bank0
  9752  0E4A  00BE               	movwf	dtoa@d+3
  9753  0E4B  0142               	movlb	2	; select bank2
  9754  0E4C  0824               	movf	(vfpfcnvrt@ll+4)^(0+256),w
  9755  0E4D  0140               	movlb	0	; select bank0
  9756  0E4E  00BF               	movwf	dtoa@d+4
  9757  0E4F  0142               	movlb	2	; select bank2
  9758  0E50  0825               	movf	(vfpfcnvrt@ll+5)^(0+256),w
  9759  0E51  0140               	movlb	0	; select bank0
  9760  0E52  00C0               	movwf	dtoa@d+5
  9761  0E53  0142               	movlb	2	; select bank2
  9762  0E54  0826               	movf	(vfpfcnvrt@ll+6)^(0+256),w
  9763  0E55  0140               	movlb	0	; select bank0
  9764  0E56  00C1               	movwf	dtoa@d+6
  9765  0E57  0142               	movlb	2	; select bank2
  9766  0E58  0827               	movf	(vfpfcnvrt@ll+7)^(0+256),w
  9767  0E59  0140               	movlb	0	; select bank0
  9768  0E5A  00C2               	movwf	dtoa@d+7
  9769  0E5B  0142               	movlb	2	; select bank2
  9770  0E5C  0838               	movf	vfpfcnvrt@fp^(0+256),w
  9771  0E5D  319E  26AF         	fcall	_dtoa
  9772  0E5F  0140               	movlb	0	; select bank0
  9773  0E60  083C               	movf	?_dtoa+1,w
  9774  0E61  0141               	movlb	1	; select bank1
  9775  0E62  00E9               	movwf	(?_vfpfcnvrt+1)^(0+128)
  9776  0E63  0140               	movlb	0	; select bank0
  9777  0E64  083B               	movf	?_dtoa,w
  9778  0E65  0141               	movlb	1	; select bank1
  9779  0E66  00E8               	movwf	?_vfpfcnvrt^(0+128)
  9780  0E67  0008               	return
  9781  0E68                     l8308:	
  9782                           
  9783                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 920:       
      +                            if (ct[0] == 'f') {
  9784  0E68  3066               	movlw	102
  9785  0E69  0142               	movlb	2	; select bank2
  9786  0E6A  0634               	xorwf	vfpfcnvrt@ct^(0+256),w
  9787  0E6B  1D03               	btfss	3,2
  9788  0E6C  2EBB               	goto	l8320
  9789                           
  9790                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 922:       
      +                                c = (*fmt)[0];
  9791  0E6D  0141               	movlb	1	; select bank1
  9792  0E6E  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9793  0E6F  0086               	movwf	6
  9794  0E70  3001               	movlw	1	; select bank2/3
  9795  0E71  0087               	movwf	7
  9796  0E72  3F40               	moviw [0]fsr1
  9797  0E73  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9798  0E74  3F41               	moviw [1]fsr1
  9799  0E75  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9800  0E76  086A               	movf	??_vfpfcnvrt^(0+128),w
  9801  0E77  0084               	movwf	4
  9802  0E78  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  9803  0E79  0085               	movwf	5
  9804  0E7A  0800               	movf	0,w	;code access
  9805  0E7B  00EC               	movwf	(??_vfpfcnvrt+2)^(0+128)
  9806  0E7C  086C               	movf	(??_vfpfcnvrt+2)^(0+128),w
  9807  0E7D  0142               	movlb	2	; select bank2
  9808  0E7E  00B7               	movwf	vfpfcnvrt@c^(0+256)
  9809                           
  9810                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 923:       
      +                                ++*fmt;
  9811  0E7F  0141               	movlb	1	; select bank1
  9812  0E80  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9813  0E81  0086               	movwf	6
  9814  0E82  3001               	movlw	1	; select bank2/3
  9815  0E83  0087               	movwf	7
  9816  0E84  3001               	movlw	1
  9817  0E85  0781               	addwf	1,f
  9818  0E86  3141               	addfsr 1,1
  9819  0E87  1803               	skipnc
  9820  0E88  0A81               	incf	1,f
  9821                           
  9822                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 924:       
      +                                f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  9823  0E89  0869               	movf	vfpfcnvrt@ap^(0+128),w
  9824  0E8A  0086               	movwf	6
  9825  0E8B  3001               	movlw	1	; select bank2/3
  9826  0E8C  0087               	movwf	7
  9827  0E8D  0801               	movf	1,w
  9828  0E8E  0084               	movwf	4
  9829  0E8F  3001               	movlw	1	; select bank2/3
  9830  0E90  0085               	movwf	5
  9831  0E91  3004               	movlw	4
  9832  0E92  0781               	addwf	1,f
  9833  0E93  3F00               	moviw [0]fsr0
  9834  0E94  0142               	movlb	2	; select bank2
  9835  0E95  00B0               	movwf	vfpfcnvrt@f^(0+256)
  9836  0E96  3F01               	moviw [1]fsr0
  9837  0E97  00B1               	movwf	(vfpfcnvrt@f+1)^(0+256)
  9838  0E98  3F02               	moviw [2]fsr0
  9839  0E99  00B2               	movwf	(vfpfcnvrt@f+2)^(0+256)
  9840  0E9A  3F03               	moviw [3]fsr0
  9841  0E9B  00B3               	movwf	(vfpfcnvrt@f+3)^(0+256)
  9842                           
  9843                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 926:       
      +                                return efgtoa(fp, f, c);
  9844  0E9C  0833               	movf	(vfpfcnvrt@f+3)^(0+256),w
  9845  0E9D  0141               	movlb	1	; select bank1
  9846  0E9E  00AD               	movwf	(efgtoa@f+3)^(0+128)
  9847  0E9F  0142               	movlb	2	; select bank2
  9848  0EA0  0832               	movf	(vfpfcnvrt@f+2)^(0+256),w
  9849  0EA1  0141               	movlb	1	; select bank1
  9850  0EA2  00AC               	movwf	(efgtoa@f+2)^(0+128)
  9851  0EA3  0142               	movlb	2	; select bank2
  9852  0EA4  0831               	movf	(vfpfcnvrt@f+1)^(0+256),w
  9853  0EA5  0141               	movlb	1	; select bank1
  9854  0EA6  00AB               	movwf	(efgtoa@f+1)^(0+128)
  9855  0EA7  0142               	movlb	2	; select bank2
  9856  0EA8  0830               	movf	vfpfcnvrt@f^(0+256),w
  9857  0EA9  0141               	movlb	1	; select bank1
  9858  0EAA  00AA               	movwf	efgtoa@f^(0+128)
  9859  0EAB  0142               	movlb	2	; select bank2
  9860  0EAC  0837               	movf	vfpfcnvrt@c^(0+256),w
  9861  0EAD  0141               	movlb	1	; select bank1
  9862  0EAE  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9863  0EAF  086A               	movf	??_vfpfcnvrt^(0+128),w
  9864  0EB0  00AE               	movwf	efgtoa@c^(0+128)
  9865  0EB1  0142               	movlb	2	; select bank2
  9866  0EB2  0838               	movf	vfpfcnvrt@fp^(0+256),w
  9867  0EB3  3180  20C7         	fcall	_efgtoa
  9868  0EB5  0141               	movlb	1	; select bank1
  9869  0EB6  082B               	movf	(?_efgtoa+1)^(0+128),w
  9870  0EB7  00E9               	movwf	(?_vfpfcnvrt+1)^(0+128)
  9871  0EB8  082A               	movf	?_efgtoa^(0+128),w
  9872  0EB9  00E8               	movwf	?_vfpfcnvrt^(0+128)
  9873  0EBA  0008               	return
  9874  0EBB                     l8320:	
  9875                           
  9876                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 928:       
      +                            if (!strncmp(ct, "lf", ((sizeof("lf")/sizeof("lf"[0]))-1))) {
  9877  0EBB  308C               	movlw	low (STR_45| (0+32768))
  9878  0EBC  0140               	movlb	0	; select bank0
  9879  0EBD  00A0               	movwf	strncmp@_r
  9880  0EBE  30B2               	movlw	high (STR_45| (0+32768))
  9881  0EBF  00A1               	movwf	strncmp@_r+1
  9882  0EC0  3002               	movlw	2
  9883  0EC1  00A2               	movwf	strncmp@n
  9884  0EC2  3000               	movlw	0
  9885  0EC3  00A3               	movwf	strncmp@n+1
  9886  0EC4  3034               	movlw	(low (vfpfcnvrt@ct| (0+256)))& (0+255)
  9887  0EC5  31AF  2708  318C   	fcall	_strncmp
  9888  0EC8  0140               	movlb	0	; select bank0
  9889  0EC9  0820               	movf	?_strncmp,w
  9890  0ECA  0421               	iorwf	?_strncmp+1,w
  9891  0ECB  1D03               	btfss	3,2
  9892  0ECC  2F5F               	goto	l8338
  9893                           
  9894                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 931:       
      +                                if ((0 ? isupper((int)(*fmt)[0]) : ((unsigned)((int)(*fmt)[0])-'A') < 26)) {
  9895  0ECD  0141               	movlb	1	; select bank1
  9896  0ECE  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9897  0ECF  0086               	movwf	6
  9898  0ED0  3001               	movlw	1	; select bank2/3
  9899  0ED1  0087               	movwf	7
  9900  0ED2  3F40               	moviw [0]fsr1
  9901  0ED3  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9902  0ED4  3F41               	moviw [1]fsr1
  9903  0ED5  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9904  0ED6  3001               	movlw	1
  9905  0ED7  076A               	addwf	??_vfpfcnvrt^(0+128),w
  9906  0ED8  0084               	movwf	4
  9907  0ED9  086B               	movf	(??_vfpfcnvrt^(0+128)+1),w
  9908  0EDA  1803               	skipnc
  9909  0EDB  0A6B               	incf	(??_vfpfcnvrt^(0+128)+1),w
  9910  0EDC  0085               	movwf	5
  9911  0EDD  0800               	movf	0,w	;code access
  9912  0EDE  00EC               	movwf	(??_vfpfcnvrt+2)^(0+128)
  9913  0EDF  086C               	movf	(??_vfpfcnvrt+2)^(0+128),w
  9914  0EE0  0142               	movlb	2	; select bank2
  9915  0EE1  00B7               	movwf	vfpfcnvrt@c^(0+256)
  9916  0EE2  0141               	movlb	1	; select bank1
  9917  0EE3  0868               	movf	vfpfcnvrt@fmt^(0+128),w
  9918  0EE4  0086               	movwf	6
  9919  0EE5  3001               	movlw	1	; select bank2/3
  9920  0EE6  0087               	movwf	7
  9921  0EE7  3F40               	moviw [0]fsr1
  9922  0EE8  00EA               	movwf	??_vfpfcnvrt^(0+128)
  9923  0EE9  3F41               	moviw [1]fsr1
  9924  0EEA  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
  9925  0EEB  086A               	movf	??_vfpfcnvrt^(0+128),w
  9926  0EEC  0084               	movwf	4
  9927  0EED  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
  9928  0EEE  0085               	movwf	5
  9929  0EEF  0800               	movf	0,w	;code access
  9930  0EF0  3EBF               	addlw	191
  9931  0EF1  00EC               	movwf	(??_vfpfcnvrt+2)^(0+128)
  9932  0EF2  30FF               	movlw	255
  9933  0EF3  1803               	skipnc
  9934  0EF4  3000               	movlw	0
  9935  0EF5  00ED               	movwf	((??_vfpfcnvrt+2)^(0+128)+1)
  9936  0EF6  3000               	movlw	0
  9937  0EF7  026D               	subwf	(??_vfpfcnvrt+3)^(0+128),w
  9938  0EF8  301A               	movlw	26
  9939  0EF9  1903               	skipnz
  9940  0EFA  026C               	subwf	(??_vfpfcnvrt+2)^(0+128),w
  9941  0EFB  1803               	btfsc	3,0
  9942  0EFC  2EFF               	goto	u11780
  9943  0EFD  3001               	movlw	1
  9944  0EFE  2F00               	goto	u11790
  9945  0EFF                     u11780:	
  9946  0EFF  3000               	movlw	0
  9947  0F00                     u11790:	
  9948  0F00  00EE               	movwf	(??_vfpfcnvrt+4)^(0+128)
  9949  0F01  01EF               	clrf	((??_vfpfcnvrt+4)^(0+128)+1)
  9950  0F02  086E               	movf	(??_vfpfcnvrt+4)^(0+128),w
  9951  0F03  0142               	movlb	2	; select bank2
  9952  0F04  00AE               	movwf	_vfpfcnvrt$1746^(0+256)
  9953  0F05  0141               	movlb	1	; select bank1
  9954  0F06  086F               	movf	(??_vfpfcnvrt+5)^(0+128),w
  9955  0F07  0142               	movlb	2	; select bank2
  9956  0F08  00AF               	movwf	(_vfpfcnvrt$1746+1)^(0+256)
  9957  0F09  082E               	movf	_vfpfcnvrt$1746^(0+256),w
  9958  0F0A  042F               	iorwf	(_vfpfcnvrt$1746+1)^(0+256),w
  9959  0F0B  1903               	btfsc	3,2
  9960  0F0C  2F21               	goto	l8330
  9961                           
  9962                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 932:       
      +                                    f = (*(long double *)__va_arg(*(long double **)ap, (long double)0));
  9963  0F0D  0141               	movlb	1	; select bank1
  9964  0F0E  0869               	movf	vfpfcnvrt@ap^(0+128),w
  9965  0F0F  0086               	movwf	6
  9966  0F10  3001               	movlw	1	; select bank2/3
  9967  0F11  0087               	movwf	7
  9968  0F12  0801               	movf	1,w
  9969  0F13  0084               	movwf	4
  9970  0F14  3001               	movlw	1	; select bank2/3
  9971  0F15  0085               	movwf	5
  9972  0F16  3004               	movlw	4
  9973  0F17  0781               	addwf	1,f
  9974  0F18  3F00               	moviw [0]fsr0
  9975  0F19  0142               	movlb	2	; select bank2
  9976  0F1A  00B0               	movwf	vfpfcnvrt@f^(0+256)
  9977  0F1B  3F01               	moviw [1]fsr0
  9978  0F1C  00B1               	movwf	(vfpfcnvrt@f+1)^(0+256)
  9979  0F1D  3F02               	moviw [2]fsr0
  9980  0F1E  00B2               	movwf	(vfpfcnvrt@f+2)^(0+256)
  9981  0F1F  3F03               	moviw [3]fsr0
  9982  0F20  2F34               	goto	L8
  9983  0F21                     l8330:	
  9984                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 933:       
      +                                } else {
  9985                           
  9986                           
  9987                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 934:       
      +                                    f = (long double)(*(double *)__va_arg(*(double **)ap, (double)0));
  9988  0F21  0141               	movlb	1	; select bank1
  9989  0F22  0869               	movf	vfpfcnvrt@ap^(0+128),w
  9990  0F23  0086               	movwf	6
  9991  0F24  3001               	movlw	1	; select bank2/3
  9992  0F25  0087               	movwf	7
  9993  0F26  0801               	movf	1,w
  9994  0F27  0084               	movwf	4
  9995  0F28  3001               	movlw	1	; select bank2/3
  9996  0F29  0085               	movwf	5
  9997  0F2A  3004               	movlw	4
  9998  0F2B  0781               	addwf	1,f
  9999  0F2C  3F00               	moviw [0]fsr0
 10000  0F2D  0142               	movlb	2	; select bank2
 10001  0F2E  00B0               	movwf	vfpfcnvrt@f^(0+256)
 10002  0F2F  3F01               	moviw [1]fsr0
 10003  0F30  00B1               	movwf	(vfpfcnvrt@f+1)^(0+256)
 10004  0F31  3F02               	moviw [2]fsr0
 10005  0F32  00B2               	movwf	(vfpfcnvrt@f+2)^(0+256)
 10006  0F33  3F03               	moviw [3]fsr0
 10007  0F34                     L8:	
 10008  0F34  00B3               	movwf	(vfpfcnvrt@f+3)^(0+256)
 10009                           
 10010                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 936:       
      +                                *fmt += ((sizeof("lf")/sizeof("lf"[0]))-1);
 10011  0F35  0141               	movlb	1	; select bank1
 10012  0F36  0868               	movf	vfpfcnvrt@fmt^(0+128),w
 10013  0F37  0086               	movwf	6
 10014  0F38  3001               	movlw	1	; select bank2/3
 10015  0F39  0087               	movwf	7
 10016  0F3A  3002               	movlw	2
 10017  0F3B  0781               	addwf	1,f
 10018  0F3C  3141               	addfsr 1,1
 10019  0F3D  1803               	skipnc
 10020  0F3E  0A81               	incf	1,f
 10021                           
 10022                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 938:       
      +                                return efgtoa(fp, f, c);
 10023  0F3F  0142               	movlb	2	; select bank2
 10024  0F40  0833               	movf	(vfpfcnvrt@f+3)^(0+256),w
 10025  0F41  0141               	movlb	1	; select bank1
 10026  0F42  00AD               	movwf	(efgtoa@f+3)^(0+128)
 10027  0F43  0142               	movlb	2	; select bank2
 10028  0F44  0832               	movf	(vfpfcnvrt@f+2)^(0+256),w
 10029  0F45  0141               	movlb	1	; select bank1
 10030  0F46  00AC               	movwf	(efgtoa@f+2)^(0+128)
 10031  0F47  0142               	movlb	2	; select bank2
 10032  0F48  0831               	movf	(vfpfcnvrt@f+1)^(0+256),w
 10033  0F49  0141               	movlb	1	; select bank1
 10034  0F4A  00AB               	movwf	(efgtoa@f+1)^(0+128)
 10035  0F4B  0142               	movlb	2	; select bank2
 10036  0F4C  0830               	movf	vfpfcnvrt@f^(0+256),w
 10037  0F4D  0141               	movlb	1	; select bank1
 10038  0F4E  00AA               	movwf	efgtoa@f^(0+128)
 10039  0F4F  0142               	movlb	2	; select bank2
 10040  0F50  0837               	movf	vfpfcnvrt@c^(0+256),w
 10041  0F51  0141               	movlb	1	; select bank1
 10042  0F52  00EA               	movwf	??_vfpfcnvrt^(0+128)
 10043  0F53  086A               	movf	??_vfpfcnvrt^(0+128),w
 10044  0F54  00AE               	movwf	efgtoa@c^(0+128)
 10045  0F55  0142               	movlb	2	; select bank2
 10046  0F56  0838               	movf	vfpfcnvrt@fp^(0+256),w
 10047  0F57  3180  20C7         	fcall	_efgtoa
 10048  0F59  0141               	movlb	1	; select bank1
 10049  0F5A  082B               	movf	(?_efgtoa+1)^(0+128),w
 10050  0F5B  00E9               	movwf	(?_vfpfcnvrt+1)^(0+128)
 10051  0F5C  082A               	movf	?_efgtoa^(0+128),w
 10052  0F5D  00E8               	movwf	?_vfpfcnvrt^(0+128)
 10053  0F5E  0008               	return
 10054  0F5F                     l8338:	
 10055                           
 10056                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1149:      
      +                             if (*fmt[0] == 's') {
 10057  0F5F  0141               	movlb	1	; select bank1
 10058  0F60  0868               	movf	vfpfcnvrt@fmt^(0+128),w
 10059  0F61  0086               	movwf	6
 10060  0F62  3001               	movlw	1	; select bank2/3
 10061  0F63  0087               	movwf	7
 10062  0F64  3F40               	moviw [0]fsr1
 10063  0F65  00EA               	movwf	??_vfpfcnvrt^(0+128)
 10064  0F66  3F41               	moviw [1]fsr1
 10065  0F67  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
 10066  0F68  086A               	movf	??_vfpfcnvrt^(0+128),w
 10067  0F69  0084               	movwf	4
 10068  0F6A  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
 10069  0F6B  0085               	movwf	5
 10070  0F6C  0012               	moviw fsr0++
 10071  0F6D  3A73               	xorlw	115
 10072  0F6E  1D03               	btfss	3,2
 10073  0F6F  2F9C               	goto	l8348
 10074                           
 10075                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1151:      
      +                                 ++*fmt;
 10076  0F70  0868               	movf	vfpfcnvrt@fmt^(0+128),w
 10077  0F71  0086               	movwf	6
 10078  0F72  3001               	movlw	1	; select bank2/3
 10079  0F73  0087               	movwf	7
 10080  0F74  3001               	movlw	1
 10081  0F75  0781               	addwf	1,f
 10082  0F76  3141               	addfsr 1,1
 10083  0F77  1803               	skipnc
 10084  0F78  0A81               	incf	1,f
 10085                           
 10086                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1152:      
      +                                 cp = (*(char * *)__va_arg(*(char * **)ap, (char *)0));
 10087  0F79  0869               	movf	vfpfcnvrt@ap^(0+128),w
 10088  0F7A  0086               	movwf	6
 10089  0F7B  3001               	movlw	1	; select bank2/3
 10090  0F7C  0087               	movwf	7
 10091  0F7D  0801               	movf	1,w
 10092  0F7E  0084               	movwf	4
 10093  0F7F  3001               	movlw	1	; select bank2/3
 10094  0F80  0085               	movwf	5
 10095  0F81  3002               	movlw	2
 10096  0F82  0781               	addwf	1,f
 10097  0F83  3F00               	moviw [0]fsr0
 10098  0F84  0142               	movlb	2	; select bank2
 10099  0F85  00A8               	movwf	vfpfcnvrt@cp^(0+256)
 10100  0F86  3F01               	moviw [1]fsr0
 10101  0F87  00A9               	movwf	(vfpfcnvrt@cp+1)^(0+256)
 10102                           
 10103                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1154:      
      +                                 return stoa(fp, cp);
 10104  0F88  0829               	movf	(vfpfcnvrt@cp+1)^(0+256),w
 10105  0F89  0140               	movlb	0	; select bank0
 10106  0F8A  00A9               	movwf	stoa@s+1
 10107  0F8B  0142               	movlb	2	; select bank2
 10108  0F8C  0828               	movf	vfpfcnvrt@cp^(0+256),w
 10109  0F8D  0140               	movlb	0	; select bank0
 10110  0F8E  00A8               	movwf	stoa@s
 10111  0F8F  0142               	movlb	2	; select bank2
 10112  0F90  0838               	movf	vfpfcnvrt@fp^(0+256),w
 10113  0F91  3198  2039         	fcall	_stoa
 10114  0F93  0140               	movlb	0	; select bank0
 10115  0F94  0829               	movf	?_stoa+1,w
 10116  0F95  0141               	movlb	1	; select bank1
 10117  0F96  00E9               	movwf	(?_vfpfcnvrt+1)^(0+128)
 10118  0F97  0140               	movlb	0	; select bank0
 10119  0F98  0828               	movf	?_stoa,w
 10120  0F99  0141               	movlb	1	; select bank1
 10121  0F9A  00E8               	movwf	?_vfpfcnvrt^(0+128)
 10122  0F9B  0008               	return
 10123  0F9C                     l8348:	
 10124                           
 10125                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1350:      
      +                             if ((*fmt)[0] == '%') {
 10126  0F9C  0868               	movf	vfpfcnvrt@fmt^(0+128),w
 10127  0F9D  0086               	movwf	6
 10128  0F9E  3001               	movlw	1	; select bank2/3
 10129  0F9F  0087               	movwf	7
 10130  0FA0  3F40               	moviw [0]fsr1
 10131  0FA1  00EA               	movwf	??_vfpfcnvrt^(0+128)
 10132  0FA2  3F41               	moviw [1]fsr1
 10133  0FA3  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
 10134  0FA4  086A               	movf	??_vfpfcnvrt^(0+128),w
 10135  0FA5  0084               	movwf	4
 10136  0FA6  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
 10137  0FA7  0085               	movwf	5
 10138  0FA8  0012               	moviw fsr0++
 10139  0FA9  3A25               	xorlw	37
 10140  0FAA  1D03               	btfss	3,2
 10141  0FAB  2FC9               	goto	l8358
 10142                           
 10143                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1351:      
      +                                 ++*fmt;
 10144  0FAC  0868               	movf	vfpfcnvrt@fmt^(0+128),w
 10145  0FAD  0086               	movwf	6
 10146  0FAE  3001               	movlw	1	; select bank2/3
 10147  0FAF  0087               	movwf	7
 10148  0FB0  3001               	movlw	1
 10149  0FB1  0781               	addwf	1,f
 10150  0FB2  3141               	addfsr 1,1
 10151  0FB3  1803               	skipnc
 10152  0FB4  0A81               	incf	1,f
 10153                           
 10154                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1352:      
      +                                 fputc((int)'%', fp);
 10155  0FB5  3025               	movlw	37
 10156  0FB6  0140               	movlb	0	; select bank0
 10157  0FB7  00A0               	movwf	fputc@c
 10158  0FB8  3000               	movlw	0
 10159  0FB9  00A1               	movwf	fputc@c+1
 10160  0FBA  0142               	movlb	2	; select bank2
 10161  0FBB  0838               	movf	vfpfcnvrt@fp^(0+256),w
 10162  0FBC  0141               	movlb	1	; select bank1
 10163  0FBD  00EA               	movwf	??_vfpfcnvrt^(0+128)
 10164  0FBE  086A               	movf	??_vfpfcnvrt^(0+128),w
 10165  0FBF  0140               	movlb	0	; select bank0
 10166  0FC0  00A2               	movwf	fputc@fp
 10167  0FC1  31AF  275A         	fcall	_fputc
 10168  0FC3                     l8354:	
 10169                           
 10170                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1353:      
      +                                 return 1;
 10171  0FC3  3001               	movlw	1
 10172  0FC4  0141               	movlb	1	; select bank1
 10173  0FC5  00E8               	movwf	?_vfpfcnvrt^(0+128)
 10174  0FC6  3000               	movlw	0
 10175  0FC7  00E9               	movwf	(?_vfpfcnvrt^(0+128)+1)
 10176  0FC8  0008               	return
 10177  0FC9                     l8358:	
 10178                           
 10179                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1357:      
      +                             ++*fmt;
 10180  0FC9  0868               	movf	vfpfcnvrt@fmt^(0+128),w
 10181  0FCA  0086               	movwf	6
 10182  0FCB  3001               	movlw	1	; select bank2/3
 10183  0FCC  0087               	movwf	7
 10184  0FCD  3001               	movlw	1
 10185  0FCE  0781               	addwf	1,f
 10186  0FCF  3141               	addfsr 1,1
 10187  0FD0  1803               	skipnc
 10188  0FD1  0A81               	incf	1,f
 10189                           
 10190                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1358:      
      +                             return 0;
 10191  0FD2  01E8               	clrf	?_vfpfcnvrt^(0+128)
 10192  0FD3  01E9               	clrf	(?_vfpfcnvrt+1)^(0+128)
 10193  0FD4  0008               	return
 10194  0FD5                     l8364:	
 10195                           
 10196                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1362:     f
      +                          putc((int)(*fmt)[0], fp);
 10197  0FD5  0868               	movf	vfpfcnvrt@fmt^(0+128),w
 10198  0FD6  0086               	movwf	6
 10199  0FD7  3001               	movlw	1	; select bank2/3
 10200  0FD8  0087               	movwf	7
 10201  0FD9  3F40               	moviw [0]fsr1
 10202  0FDA  00EA               	movwf	??_vfpfcnvrt^(0+128)
 10203  0FDB  3F41               	moviw [1]fsr1
 10204  0FDC  00EB               	movwf	(??_vfpfcnvrt^(0+128)+1)
 10205  0FDD  086A               	movf	??_vfpfcnvrt^(0+128),w
 10206  0FDE  0084               	movwf	4
 10207  0FDF  086B               	movf	(??_vfpfcnvrt+1)^(0+128),w
 10208  0FE0  0085               	movwf	5
 10209  0FE1  0800               	movf	0,w	;code access
 10210  0FE2  00EC               	movwf	(??_vfpfcnvrt+2)^(0+128)
 10211  0FE3  01ED               	clrf	((??_vfpfcnvrt+2)^(0+128)+1)
 10212  0FE4  086C               	movf	(??_vfpfcnvrt+2)^(0+128),w
 10213  0FE5  0140               	movlb	0	; select bank0
 10214  0FE6  00A0               	movwf	fputc@c
 10215  0FE7  0141               	movlb	1	; select bank1
 10216  0FE8  086D               	movf	(??_vfpfcnvrt+3)^(0+128),w
 10217  0FE9  0140               	movlb	0	; select bank0
 10218  0FEA  00A1               	movwf	fputc@c+1
 10219  0FEB  0142               	movlb	2	; select bank2
 10220  0FEC  0838               	movf	vfpfcnvrt@fp^(0+256),w
 10221  0FED  0141               	movlb	1	; select bank1
 10222  0FEE  00EE               	movwf	(??_vfpfcnvrt+4)^(0+128)
 10223  0FEF  086E               	movf	(??_vfpfcnvrt+4)^(0+128),w
 10224  0FF0  0140               	movlb	0	; select bank0
 10225  0FF1  00A2               	movwf	fputc@fp
 10226  0FF2  31AF  275A  318C   	fcall	_fputc
 10227                           
 10228                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 1363:     +
      +                          +*fmt;
 10229  0FF5  0141               	movlb	1	; select bank1
 10230  0FF6  0868               	movf	vfpfcnvrt@fmt^(0+128),w
 10231  0FF7  0086               	movwf	6
 10232  0FF8  3001               	movlw	1	; select bank2/3
 10233  0FF9  0087               	movwf	7
 10234  0FFA  3001               	movlw	1
 10235  0FFB  0781               	addwf	1,f
 10236  0FFC  3141               	addfsr 1,1
 10237  0FFD  1803               	skipnc
 10238  0FFE  0A81               	incf	1,f
 10239  0FFF  2FC3               	goto	l8354
 10240  1000                     __end_of_vfpfcnvrt:	
 10241                           
 10242                           	psect	text22
 10243  2F08                     __ptext22:	
 10244 ;; *************** function _strncmp *****************
 10245 ;; Defined at:
 10246 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncmp.c"
 10247 ;; Parameters:    Size  Location     Type
 10248 ;;  _l              1    wreg     PTR const unsigned char 
 10249 ;;		 -> vfpfcnvrt@ct(3), 
 10250 ;;  _r              2    0[BANK0 ] PTR const unsigned char 
 10251 ;;		 -> STR_47(3), 
 10252 ;;  n               2    2[BANK0 ] unsigned int 
 10253 ;; Auto vars:     Size  Location     Type
 10254 ;;  _l              1    5[BANK0 ] PTR const unsigned char 
 10255 ;;		 -> vfpfcnvrt@ct(3), 
 10256 ;;  r               2    6[BANK0 ] PTR const unsigned char 
 10257 ;;		 -> STR_47(3), 
 10258 ;;  l               1    8[BANK0 ] PTR const unsigned char 
 10259 ;;		 -> vfpfcnvrt@ct(3), 
 10260 ;; Return value:  Size  Location     Type
 10261 ;;                  2    0[BANK0 ] int 
 10262 ;; Registers used:
 10263 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath
 10264 ;; Tracked objects:
 10265 ;;		On entry : 0/0
 10266 ;;		On exit  : 0/0
 10267 ;;		Unchanged: 0/0
 10268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10269 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10270 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10271 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10272 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10273 ;;Total ram usage:        9 bytes
 10274 ;; Hardware stack levels used:    1
 10275 ;; Hardware stack levels required when called:    3
 10276 ;; This function calls:
 10277 ;;		Nothing
 10278 ;; This function is called by:
 10279 ;;		_vfpfcnvrt
 10280 ;; This function uses a non-reentrant model
 10281 ;;
 10282                           
 10283                           
 10284                           ;psect for function _strncmp
 10285  2F08                     _strncmp:	
 10286                           
 10287                           ;incstack = 0
 10288                           ; Regs used in _strncmp: [wreg-fsr1h+status,2+status,0+pclath]
 10289                           ;strncmp@_l stored from wreg
 10290  2F08  0140               	movlb	0	; select bank0
 10291  2F09  00A5               	movwf	strncmp@_l
 10292  2F0A  0825               	movf	strncmp@_l,w
 10293  2F0B  00A4               	movwf	??_strncmp
 10294  2F0C  0824               	movf	??_strncmp,w
 10295  2F0D  00A8               	movwf	strncmp@l
 10296  2F0E  0821               	movf	strncmp@_r+1,w
 10297  2F0F  00A7               	movwf	strncmp@r+1
 10298  2F10  0820               	movf	strncmp@_r,w
 10299  2F11  00A6               	movwf	strncmp@r
 10300  2F12  3001               	movlw	1
 10301  2F13  02A2               	subwf	strncmp@n,f
 10302  2F14  3000               	movlw	0
 10303  2F15  3BA3               	subwfb	strncmp@n+1,f
 10304  2F16  0A22               	incf	strncmp@n,w
 10305  2F17  1D03               	skipz
 10306  2F18  2F44               	goto	l8220
 10307  2F19  0A23               	incf	strncmp@n+1,w
 10308  2F1A  1D03               	btfss	3,2
 10309  2F1B  2F44               	goto	l8220
 10310  2F1C  01A0               	clrf	?_strncmp
 10311  2F1D  01A1               	clrf	?_strncmp+1
 10312  2F1E  0008               	return
 10313  2F1F                     l8222:	
 10314  2F1F  0826               	movf	strncmp@r,w
 10315  2F20  0084               	movwf	4
 10316  2F21  0827               	movf	strncmp@r+1,w
 10317  2F22  0085               	movwf	5
 10318  2F23  0012               	moviw fsr0++
 10319  2F24  1903               	btfsc	3,2
 10320  2F25  2F4B               	goto	l8228
 10321  2F26  0822               	movf	strncmp@n,w
 10322  2F27  0423               	iorwf	strncmp@n+1,w
 10323  2F28  1903               	btfsc	3,2
 10324  2F29  2F4B               	goto	l8228
 10325  2F2A  0826               	movf	strncmp@r,w
 10326  2F2B  0084               	movwf	4
 10327  2F2C  0827               	movf	strncmp@r+1,w
 10328  2F2D  0085               	movwf	5
 10329  2F2E  0800               	movf	0,w	;code access
 10330  2F2F  00A4               	movwf	??_strncmp
 10331  2F30  0828               	movf	strncmp@l,w
 10332  2F31  0086               	movwf	6
 10333  2F32  3001               	movlw	1	; select bank2/3
 10334  2F33  0087               	movwf	7
 10335  2F34  0801               	movf	1,w
 10336  2F35  0624               	xorwf	??_strncmp,w
 10337  2F36  1D03               	btfss	3,2
 10338  2F37  2F4B               	goto	l8228
 10339  2F38  3001               	movlw	1
 10340  2F39  00A4               	movwf	??_strncmp
 10341  2F3A  0824               	movf	??_strncmp,w
 10342  2F3B  07A8               	addwf	strncmp@l,f
 10343  2F3C  3001               	movlw	1
 10344  2F3D  07A6               	addwf	strncmp@r,f
 10345  2F3E  3000               	movlw	0
 10346  2F3F  3DA7               	addwfc	strncmp@r+1,f
 10347  2F40  3001               	movlw	1
 10348  2F41  02A2               	subwf	strncmp@n,f
 10349  2F42  3000               	movlw	0
 10350  2F43  3BA3               	subwfb	strncmp@n+1,f
 10351  2F44                     l8220:	
 10352  2F44  0828               	movf	strncmp@l,w
 10353  2F45  0086               	movwf	6
 10354  2F46  3001               	movlw	1	; select bank2/3
 10355  2F47  0087               	movwf	7
 10356  2F48  0801               	movf	1,w
 10357  2F49  1D03               	btfss	3,2
 10358  2F4A  2F1F               	goto	l8222
 10359  2F4B                     l8228:	
 10360  2F4B  0828               	movf	strncmp@l,w
 10361  2F4C  0086               	movwf	6
 10362  2F4D  3001               	movlw	1	; select bank2/3
 10363  2F4E  0087               	movwf	7
 10364  2F4F  0826               	movf	strncmp@r,w
 10365  2F50  0084               	movwf	4
 10366  2F51  0827               	movf	strncmp@r+1,w
 10367  2F52  0085               	movwf	5
 10368  2F53  0800               	movf	0,w	;code access
 10369  2F54  0201               	subwf	1,w
 10370  2F55  00A0               	movwf	?_strncmp
 10371  2F56  01A1               	clrf	?_strncmp+1
 10372  2F57  1C03               	skipc
 10373  2F58  03A1               	decf	?_strncmp+1,f
 10374  2F59  0008               	return
 10375  2F5A                     __end_of_strncmp:	
 10376                           
 10377                           	psect	text23
 10378  1839                     __ptext23:	
 10379 ;; *************** function _stoa *****************
 10380 ;; Defined at:
 10381 ;;		line 546 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
 10382 ;; Parameters:    Size  Location     Type
 10383 ;;  fp              1    wreg     PTR struct _IO_FILE
 10384 ;;		 -> sprintf@f(6), 
 10385 ;;  s               2    8[BANK0 ] PTR unsigned char 
 10386 ;;		 -> ?_sprintf(2), STR_12(7), STR_11(7), sBuf(13), 
 10387 ;; Auto vars:     Size  Location     Type
 10388 ;;  fp              1   24[BANK0 ] PTR struct _IO_FILE
 10389 ;;		 -> sprintf@f(6), 
 10390 ;;  nuls            7   13[BANK0 ] unsigned char [7]
 10391 ;;  l               2   29[BANK0 ] int 
 10392 ;;  p               2   27[BANK0 ] int 
 10393 ;;  cp              2   25[BANK0 ] PTR unsigned char 
 10394 ;;		 -> ?_sprintf(2), stoa@nuls(7), STR_12(7), STR_11(7), 
 10395 ;;		 -> sBuf(13), 
 10396 ;;  w               2   22[BANK0 ] int 
 10397 ;;  i               2   20[BANK0 ] int 
 10398 ;; Return value:  Size  Location     Type
 10399 ;;                  2    8[BANK0 ] int 
 10400 ;; Registers used:
 10401 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10402 ;; Tracked objects:
 10403 ;;		On entry : 0/0
 10404 ;;		On exit  : 0/0
 10405 ;;		Unchanged: 0/0
 10406 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10407 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10408 ;;      Locals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10409 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10410 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10411 ;;Total ram usage:       23 bytes
 10412 ;; Hardware stack levels used:    1
 10413 ;; Hardware stack levels required when called:    5
 10414 ;; This function calls:
 10415 ;;		_fputc
 10416 ;;		_strlen
 10417 ;; This function is called by:
 10418 ;;		_vfpfcnvrt
 10419 ;; This function uses a non-reentrant model
 10420 ;;
 10421                           
 10422                           
 10423                           ;psect for function _stoa
 10424  1839                     _stoa:	
 10425                           
 10426                           ;incstack = 0
 10427                           ; Regs used in _stoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10428                           ;stoa@fp stored from wreg
 10429  1839  0140               	movlb	0	; select bank0
 10430  183A  00B8               	movwf	stoa@fp
 10431                           
 10432                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 546: static
      +                           int stoa(FILE *fp, char *s);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\
      +                          common\doprnt.c: 547: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\commo
      +                          n\doprnt.c: 548:     char *cp, nuls[] = "(null)";
 10433  183B  305D               	movlw	low stoa@F1161
 10434  183C  0086               	movwf	6
 10435  183D  3002               	movlw	high stoa@F1161
 10436  183E  0087               	movwf	7
 10437  183F  302D               	movlw	low stoa@nuls
 10438  1840  0084               	movwf	4
 10439  1841  3000               	movlw	high stoa@nuls
 10440  1842  0085               	movwf	5
 10441  1843  3007               	movlw	7
 10442  1844  00AA               	movwf	??_stoa
 10443  1845                     u11400:	
 10444  1845  0016               	moviw fsr1++
 10445  1846  001A               	movwi fsr0++
 10446  1847  0BAA               	decfsz	??_stoa,f
 10447  1848  2845               	goto	u11400
 10448                           
 10449                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 549:     in
      +                          t i, l, p, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c
      +                          : 552:     cp = s;
 10450  1849  0829               	movf	stoa@s+1,w
 10451  184A  00BA               	movwf	stoa@cp+1
 10452  184B  0828               	movf	stoa@s,w
 10453  184C  00B9               	movwf	stoa@cp
 10454                           
 10455                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 553:     if
      +                           (!cp) {
 10456  184D  0839               	movf	stoa@cp,w
 10457  184E  043A               	iorwf	stoa@cp+1,w
 10458  184F  1D03               	btfss	3,2
 10459  1850  2855               	goto	l8120
 10460                           
 10461                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 554:       
      +                            cp = nuls;
 10462  1851  302D               	movlw	low stoa@nuls
 10463  1852  00B9               	movwf	stoa@cp
 10464  1853  3000               	movlw	high stoa@nuls
 10465  1854  00BA               	movwf	stoa@cp+1
 10466  1855                     l8120:	
 10467                           
 10468                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 558:     l 
      +                          = strlen(cp);
 10469  1855  083A               	movf	stoa@cp+1,w
 10470  1856  00A1               	movwf	strlen@s+1
 10471  1857  0839               	movf	stoa@cp,w
 10472  1858  00A0               	movwf	strlen@s
 10473  1859  31AA  2246  3198   	fcall	_strlen
 10474  185C  0140               	movlb	0	; select bank0
 10475  185D  0821               	movf	?_strlen+1,w
 10476  185E  00BE               	movwf	stoa@l+1
 10477  185F  0820               	movf	?_strlen,w
 10478  1860  00BD               	movwf	stoa@l
 10479                           
 10480                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 559:     p 
      +                          = prec;
 10481  1861  0143               	movlb	3	; select bank3
 10482  1862  0831               	movf	(_prec+1)^(0+384),w
 10483  1863  0140               	movlb	0	; select bank0
 10484  1864  00BC               	movwf	stoa@p+1
 10485  1865  0143               	movlb	3	; select bank3
 10486  1866  0830               	movf	_prec^(0+384),w
 10487  1867  0140               	movlb	0	; select bank0
 10488  1868  00BB               	movwf	stoa@p
 10489                           
 10490                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 560:     l 
      +                          = (!(p < 0) && (p < l)) ? p : l;
 10491  1869  1BBC               	btfsc	stoa@p+1,7
 10492  186A  287C               	goto	l876
 10493  186B  083C               	movf	stoa@p+1,w
 10494  186C  3A80               	xorlw	128
 10495  186D  00AA               	movwf	??_stoa
 10496  186E  083E               	movf	stoa@l+1,w
 10497  186F  3A80               	xorlw	128
 10498  1870  022A               	subwf	??_stoa,w
 10499  1871  1D03               	skipz
 10500  1872  2875               	goto	u11435
 10501  1873  083D               	movf	stoa@l,w
 10502  1874  023B               	subwf	stoa@p,w
 10503  1875                     u11435:	
 10504  1875  1803               	btfsc	3,0
 10505  1876  287C               	goto	l876
 10506  1877  0140               	movlb	0	; select bank0
 10507  1878  083C               	movf	stoa@p+1,w
 10508  1879  00BE               	movwf	stoa@l+1
 10509  187A  083B               	movf	stoa@p,w
 10510  187B  00BD               	movwf	stoa@l
 10511  187C                     l876:	
 10512                           
 10513                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 561:     p 
      +                          = l;
 10514  187C  0140               	movlb	0	; select bank0
 10515  187D  083E               	movf	stoa@l+1,w
 10516  187E  00BC               	movwf	stoa@p+1
 10517  187F  083D               	movf	stoa@l,w
 10518  1880  00BB               	movwf	stoa@p
 10519                           
 10520                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 562:     w 
      +                          = width;
 10521  1881  0143               	movlb	3	; select bank3
 10522  1882  082F               	movf	(_width+1)^(0+384),w
 10523  1883  0140               	movlb	0	; select bank0
 10524  1884  00B7               	movwf	stoa@w+1
 10525  1885  0143               	movlb	3	; select bank3
 10526  1886  082E               	movf	_width^(0+384),w
 10527  1887  0140               	movlb	0	; select bank0
 10528  1888  00B6               	movwf	stoa@w
 10529                           
 10530                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 565:     if
      +                           (!(flags & (1 << 0))) {
 10531  1889  0143               	movlb	3	; select bank3
 10532  188A  1C32               	btfss	_flags^(0+384),0
 10533  188B  289E               	goto	l8138
 10534  188C  28AB               	goto	l8140
 10535  188D                     l8134:	
 10536                           
 10537                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 567:       
      +                                fputc(' ', fp);
 10538  188D  3020               	movlw	32
 10539  188E  0140               	movlb	0	; select bank0
 10540  188F  00A0               	movwf	fputc@c
 10541  1890  3000               	movlw	0
 10542  1891  00A1               	movwf	fputc@c+1
 10543  1892  0838               	movf	stoa@fp,w
 10544  1893  00AA               	movwf	??_stoa
 10545  1894  082A               	movf	??_stoa,w
 10546  1895  00A2               	movwf	fputc@fp
 10547  1896  31AF  275A  3198   	fcall	_fputc
 10548                           
 10549                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 568:       
      +                                ++l;
 10550  1899  3001               	movlw	1
 10551  189A  0140               	movlb	0	; select bank0
 10552  189B  07BD               	addwf	stoa@l,f
 10553  189C  3000               	movlw	0
 10554  189D  3DBE               	addwfc	stoa@l+1,f
 10555  189E                     l8138:	
 10556                           
 10557                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 566:       
      +                            while (l < w) {
 10558  189E  0140               	movlb	0	; select bank0
 10559  189F  083E               	movf	stoa@l+1,w
 10560  18A0  3A80               	xorlw	128
 10561  18A1  00AA               	movwf	??_stoa
 10562  18A2  0837               	movf	stoa@w+1,w
 10563  18A3  3A80               	xorlw	128
 10564  18A4  022A               	subwf	??_stoa,w
 10565  18A5  1D03               	skipz
 10566  18A6  28A9               	goto	u11455
 10567  18A7  0836               	movf	stoa@w,w
 10568  18A8  023D               	subwf	stoa@l,w
 10569  18A9                     u11455:	
 10570  18A9  1C03               	skipc
 10571  18AA  288D               	goto	l8134
 10572  18AB                     l8140:	
 10573                           
 10574                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 573:     i 
      +                          = 0;
 10575  18AB  0140               	movlb	0	; select bank0
 10576  18AC  01B4               	clrf	stoa@i
 10577  18AD  01B5               	clrf	stoa@i+1
 10578  18AE                     l8148:	
 10579                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
 10580                           
 10581                           
 10582                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 574:     wh
      +                          ile (i < p) {
 10583  18AE  0835               	movf	stoa@i+1,w
 10584  18AF  3A80               	xorlw	128
 10585  18B0  00AA               	movwf	??_stoa
 10586  18B1  083C               	movf	stoa@p+1,w
 10587  18B2  3A80               	xorlw	128
 10588  18B3  022A               	subwf	??_stoa,w
 10589  18B4  1D03               	skipz
 10590  18B5  28B8               	goto	u11465
 10591  18B6  083B               	movf	stoa@p,w
 10592  18B7  0234               	subwf	stoa@i,w
 10593  18B8                     u11465:	
 10594  18B8  1803               	btfsc	3,0
 10595  18B9  28D7               	goto	l885
 10596                           
 10597                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 575:       
      +                            fputc(*cp, fp);
 10598  18BA  0140               	movlb	0	; select bank0
 10599  18BB  0839               	movf	stoa@cp,w
 10600  18BC  0084               	movwf	4
 10601  18BD  083A               	movf	stoa@cp+1,w
 10602  18BE  0085               	movwf	5
 10603  18BF  0800               	movf	0,w	;code access
 10604  18C0  00AA               	movwf	??_stoa
 10605  18C1  01AB               	clrf	??_stoa+1
 10606  18C2  082A               	movf	??_stoa,w
 10607  18C3  00A0               	movwf	fputc@c
 10608  18C4  082B               	movf	??_stoa+1,w
 10609  18C5  00A1               	movwf	fputc@c+1
 10610  18C6  0838               	movf	stoa@fp,w
 10611  18C7  00AC               	movwf	??_stoa+2
 10612  18C8  082C               	movf	??_stoa+2,w
 10613  18C9  00A2               	movwf	fputc@fp
 10614  18CA  31AF  275A  3198   	fcall	_fputc
 10615                           
 10616                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 576:       
      +                            ++cp;
 10617  18CD  3001               	movlw	1
 10618  18CE  0140               	movlb	0	; select bank0
 10619  18CF  07B9               	addwf	stoa@cp,f
 10620  18D0  3000               	movlw	0
 10621  18D1  3DBA               	addwfc	stoa@cp+1,f
 10622                           
 10623                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 577:       
      +                            ++i;
 10624  18D2  3001               	movlw	1
 10625  18D3  07B4               	addwf	stoa@i,f
 10626  18D4  3000               	movlw	0
 10627  18D5  3DB5               	addwfc	stoa@i+1,f
 10628  18D6  28AE               	goto	l8148
 10629  18D7                     l885:	
 10630                           
 10631                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 581:     if
      +                           (flags & (1 << 0)) {
 10632  18D7  0143               	movlb	3	; select bank3
 10633  18D8  1832               	btfsc	_flags^(0+384),0
 10634  18D9  28EC               	goto	l8156
 10635  18DA  28F9               	goto	l8158
 10636  18DB                     l8152:	
 10637                           
 10638                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 583:       
      +                                fputc(' ', fp);
 10639  18DB  3020               	movlw	32
 10640  18DC  0140               	movlb	0	; select bank0
 10641  18DD  00A0               	movwf	fputc@c
 10642  18DE  3000               	movlw	0
 10643  18DF  00A1               	movwf	fputc@c+1
 10644  18E0  0838               	movf	stoa@fp,w
 10645  18E1  00AA               	movwf	??_stoa
 10646  18E2  082A               	movf	??_stoa,w
 10647  18E3  00A2               	movwf	fputc@fp
 10648  18E4  31AF  275A  3198   	fcall	_fputc
 10649                           
 10650                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 584:       
      +                                ++l;
 10651  18E7  3001               	movlw	1
 10652  18E8  0140               	movlb	0	; select bank0
 10653  18E9  07BD               	addwf	stoa@l,f
 10654  18EA  3000               	movlw	0
 10655  18EB  3DBE               	addwfc	stoa@l+1,f
 10656  18EC                     l8156:	
 10657                           
 10658                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 582:       
      +                            while (l < w) {
 10659  18EC  0140               	movlb	0	; select bank0
 10660  18ED  083E               	movf	stoa@l+1,w
 10661  18EE  3A80               	xorlw	128
 10662  18EF  00AA               	movwf	??_stoa
 10663  18F0  0837               	movf	stoa@w+1,w
 10664  18F1  3A80               	xorlw	128
 10665  18F2  022A               	subwf	??_stoa,w
 10666  18F3  1D03               	skipz
 10667  18F4  28F7               	goto	u11485
 10668  18F5  0836               	movf	stoa@w,w
 10669  18F6  023D               	subwf	stoa@l,w
 10670  18F7                     u11485:	
 10671  18F7  1C03               	skipc
 10672  18F8  28DB               	goto	l8152
 10673  18F9                     l8158:	
 10674                           
 10675                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 588:     re
      +                          turn l;
 10676  18F9  0140               	movlb	0	; select bank0
 10677  18FA  083E               	movf	stoa@l+1,w
 10678  18FB  00A9               	movwf	?_stoa+1
 10679  18FC  083D               	movf	stoa@l,w
 10680  18FD  00A8               	movwf	?_stoa
 10681  18FE  0008               	return
 10682  18FF                     __end_of_stoa:	
 10683                           
 10684                           	psect	text24
 10685  00C7                     __ptext24:	
 10686 ;; *************** function _efgtoa *****************
 10687 ;; Defined at:
 10688 ;;		line 319 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
 10689 ;; Parameters:    Size  Location     Type
 10690 ;;  fp              1    wreg     PTR struct _IO_FILE
 10691 ;;		 -> sprintf@f(6), 
 10692 ;;  f               4   10[BANK1 ] PTR struct _IO_FILE
 10693 ;;  c               1   14[BANK1 ] unsigned char 
 10694 ;; Auto vars:     Size  Location     Type
 10695 ;;  fp              1   41[BANK1 ] PTR struct _IO_FILE
 10696 ;;		 -> sprintf@f(6), 
 10697 ;;  u               4   68[BANK1 ] PTR struct _IO_FILE
 10698 ;;  g               4   60[BANK1 ] PTR struct _IO_FILE
 10699 ;;  l               4   54[BANK1 ] PTR struct _IO_FILE
 10700 ;;  h               4   50[BANK1 ] PTR struct _IO_FILE
 10701 ;;  ou              4   15[BANK1 ] PTR struct _IO_FILE
 10702 ;;  n               2   66[BANK1 ] int 
 10703 ;;  e               2   64[BANK1 ] int 
 10704 ;;  i               2   58[BANK1 ] int 
 10705 ;;  w               2   47[BANK1 ] int 
 10706 ;;  p               2   44[BANK1 ] int 
 10707 ;;  sign            2   42[BANK1 ] int 
 10708 ;;  d               2   39[BANK1 ] int 
 10709 ;;  ne              2   37[BANK1 ] int 
 10710 ;;  m               2   35[BANK1 ] int 
 10711 ;;  pp              2   33[BANK1 ] int 
 10712 ;;  t               2   31[BANK1 ] int 
 10713 ;;  mode            1   49[BANK1 ] unsigned char 
 10714 ;;  nmode           1   46[BANK1 ] unsigned char 
 10715 ;; Return value:  Size  Location     Type
 10716 ;;                  2   10[BANK1 ] int 
 10717 ;; Registers used:
 10718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10719 ;; Tracked objects:
 10720 ;;		On entry : 0/0
 10721 ;;		On exit  : 0/0
 10722 ;;		Unchanged: 0/0
 10723 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 10724 ;;      Params:         0       0       5       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10725 ;;      Locals:         0       0      57       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10726 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10727 ;;      Totals:         0       4      62       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 10728 ;;Total ram usage:       66 bytes
 10729 ;; Hardware stack levels used:    1
 10730 ;; Hardware stack levels required when called:    7
 10731 ;; This function calls:
 10732 ;;		___awdiv
 10733 ;;		___awmod
 10734 ;;		___fladd
 10735 ;;		___fldiv
 10736 ;;		___fleq
 10737 ;;		___flge
 10738 ;;		___flmul
 10739 ;;		___flneg
 10740 ;;		___flsub
 10741 ;;		___fltol
 10742 ;;		___fpclassifyf
 10743 ;;		_floorf
 10744 ;;		_isupper
 10745 ;;		_pad
 10746 ;;		_strcpy
 10747 ;;		_tolower
 10748 ;; This function is called by:
 10749 ;;		_vfpfcnvrt
 10750 ;; This function uses a non-reentrant model
 10751 ;;
 10752                           
 10753                           
 10754                           ;psect for function _efgtoa
 10755  00C7                     _efgtoa:	
 10756                           
 10757                           ;incstack = 0
 10758                           ; Regs used in _efgtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10759                           ;efgtoa@fp stored from wreg
 10760  00C7  0141               	movlb	1	; select bank1
 10761  00C8  00C9               	movwf	efgtoa@fp^(0+128)
 10762                           
 10763                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 319: static
      +                           int efgtoa(FILE *fp, long double f, char c);C:\Program Files (x86)\Microchip\xc8\v2.10\
      +                          pic\sources\c99\common\doprnt.c: 320: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\s
      +                          ources\c99\common\doprnt.c: 321:     char mode, nmode;;C:\Program Files (x86)\Microchip\
      +                          xc8\v2.10\pic\sources\c99\common\doprnt.c: 322:     int d, e, i, m, n, ne, p, pp, sign, 
      +                          t, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 323:  
      +                             long double g, h, l, ou, u;
 10764  00C9  01CA               	clrf	efgtoa@sign^(0+128)
 10765  00CA  01CB               	clrf	(efgtoa@sign+1)^(0+128)
 10766                           
 10767                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 327:     g 
      +                          = f;
 10768  00CB  082D               	movf	(efgtoa@f+3)^(0+128),w
 10769  00CC  00DF               	movwf	(efgtoa@g+3)^(0+128)
 10770  00CD  082C               	movf	(efgtoa@f+2)^(0+128),w
 10771  00CE  00DE               	movwf	(efgtoa@g+2)^(0+128)
 10772  00CF  082B               	movf	(efgtoa@f+1)^(0+128),w
 10773  00D0  00DD               	movwf	(efgtoa@g+1)^(0+128)
 10774  00D1  082A               	movf	efgtoa@f^(0+128),w
 10775  00D2  00DC               	movwf	efgtoa@g^(0+128)
 10776                           
 10777                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 328:     if
      +                           (g < 0.0) {
 10778  00D3  085F               	movf	(efgtoa@g+3)^(0+128),w
 10779  00D4  0140               	movlb	0	; select bank0
 10780  00D5  00CB               	movwf	___flge@ff1+3
 10781  00D6  0141               	movlb	1	; select bank1
 10782  00D7  085E               	movf	(efgtoa@g+2)^(0+128),w
 10783  00D8  0140               	movlb	0	; select bank0
 10784  00D9  00CA               	movwf	___flge@ff1+2
 10785  00DA  0141               	movlb	1	; select bank1
 10786  00DB  085D               	movf	(efgtoa@g+1)^(0+128),w
 10787  00DC  0140               	movlb	0	; select bank0
 10788  00DD  00C9               	movwf	___flge@ff1+1
 10789  00DE  0141               	movlb	1	; select bank1
 10790  00DF  085C               	movf	efgtoa@g^(0+128),w
 10791  00E0  0140               	movlb	0	; select bank0
 10792  00E1  00C8               	movwf	___flge@ff1
 10793  00E2  3000               	movlw	0
 10794  00E3  00CF               	movwf	___flge@ff2+3
 10795  00E4  3000               	movlw	0
 10796  00E5  00CE               	movwf	___flge@ff2+2
 10797  00E6  3000               	movlw	0
 10798  00E7  00CD               	movwf	___flge@ff2+1
 10799  00E8  3000               	movlw	0
 10800  00E9  00CC               	movwf	___flge@ff2
 10801  00EA  31A3  2365  3180   	fcall	___flge
 10802  00ED  1803               	btfsc	3,0
 10803  00EE  2916               	goto	l7830
 10804                           
 10805                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 329:       
      +                            sign = 1;
 10806  00EF  3001               	movlw	1
 10807  00F0  0141               	movlb	1	; select bank1
 10808  00F1  00CA               	movwf	efgtoa@sign^(0+128)
 10809  00F2  3000               	movlw	0
 10810  00F3  00CB               	movwf	(efgtoa@sign^(0+128)+1)
 10811                           
 10812                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 330:       
      +                            g = -g;
 10813  00F4  085F               	movf	(efgtoa@g+3)^(0+128),w
 10814  00F5  0140               	movlb	0	; select bank0
 10815  00F6  00A3               	movwf	___flneg@f1+3
 10816  00F7  0141               	movlb	1	; select bank1
 10817  00F8  085E               	movf	(efgtoa@g+2)^(0+128),w
 10818  00F9  0140               	movlb	0	; select bank0
 10819  00FA  00A2               	movwf	___flneg@f1+2
 10820  00FB  0141               	movlb	1	; select bank1
 10821  00FC  085D               	movf	(efgtoa@g+1)^(0+128),w
 10822  00FD  0140               	movlb	0	; select bank0
 10823  00FE  00A1               	movwf	___flneg@f1+1
 10824  00FF  0141               	movlb	1	; select bank1
 10825  0100  085C               	movf	efgtoa@g^(0+128),w
 10826  0101  0140               	movlb	0	; select bank0
 10827  0102  00A0               	movwf	___flneg@f1
 10828  0103  31A9  21A7  3180   	fcall	___flneg
 10829  0106  0140               	movlb	0	; select bank0
 10830  0107  0823               	movf	?___flneg+3,w
 10831  0108  0141               	movlb	1	; select bank1
 10832  0109  00DF               	movwf	(efgtoa@g+3)^(0+128)
 10833  010A  0140               	movlb	0	; select bank0
 10834  010B  0822               	movf	?___flneg+2,w
 10835  010C  0141               	movlb	1	; select bank1
 10836  010D  00DE               	movwf	(efgtoa@g+2)^(0+128)
 10837  010E  0140               	movlb	0	; select bank0
 10838  010F  0821               	movf	?___flneg+1,w
 10839  0110  0141               	movlb	1	; select bank1
 10840  0111  00DD               	movwf	(efgtoa@g+1)^(0+128)
 10841  0112  0140               	movlb	0	; select bank0
 10842  0113  0820               	movf	?___flneg,w
 10843  0114  0141               	movlb	1	; select bank1
 10844  0115  00DC               	movwf	efgtoa@g^(0+128)
 10845  0116                     l7830:	
 10846                           
 10847                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 334:     n 
      +                          = 0;
 10848  0116  0141               	movlb	1	; select bank1
 10849  0117  01E2               	clrf	efgtoa@n^(0+128)
 10850  0118  01E3               	clrf	(efgtoa@n+1)^(0+128)
 10851                           
 10852                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 335:     w 
      +                          = width;
 10853  0119  0143               	movlb	3	; select bank3
 10854  011A  082F               	movf	(_width+1)^(0+384),w
 10855  011B  0141               	movlb	1	; select bank1
 10856  011C  00D0               	movwf	(efgtoa@w+1)^(0+128)
 10857  011D  0143               	movlb	3	; select bank3
 10858  011E  082E               	movf	_width^(0+384),w
 10859  011F  0141               	movlb	1	; select bank1
 10860  0120  00CF               	movwf	efgtoa@w^(0+128)
 10861                           
 10862                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 336:     if
      +                           (sign || (flags & (1 << 2))) {
 10863  0121  084A               	movf	efgtoa@sign^(0+128),w
 10864  0122  044B               	iorwf	(efgtoa@sign+1)^(0+128),w
 10865  0123  1D03               	btfss	3,2
 10866  0124  2928               	goto	l7838
 10867  0125  0143               	movlb	3	; select bank3
 10868  0126  1D32               	btfss	_flags^(0+384),2
 10869  0127  2942               	goto	l7850
 10870  0128                     l7838:	
 10871                           
 10872                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 337:       
      +                            dbuf[n] = sign ? '-' : '+';
 10873  0128  0141               	movlb	1	; select bank1
 10874  0129  084A               	movf	efgtoa@sign^(0+128),w
 10875  012A  044B               	iorwf	(efgtoa@sign+1)^(0+128),w
 10876  012B  1D03               	btfss	3,2
 10877  012C  292F               	goto	l7842
 10878  012D  302B               	movlw	43
 10879  012E  2930               	goto	L9
 10880  012F                     l7842:	
 10881  012F  302D               	movlw	45
 10882  0130                     L9:	
 10883  0130  00B3               	movwf	_efgtoa$1705^(0+128)
 10884  0131  3000               	movlw	0
 10885  0132  00B4               	movwf	(_efgtoa$1705^(0+128)+1)
 10886  0133  0833               	movf	_efgtoa$1705^(0+128),w
 10887  0134  0140               	movlb	0	; select bank0
 10888  0135  00EC               	movwf	??_efgtoa
 10889  0136  086C               	movf	??_efgtoa,w
 10890  0137  0146               	movlb	6	; select bank6
 10891  0138  00A0               	movwf	_dbuf^(0+768)
 10892                           
 10893                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 338:       
      +                            ++n;
 10894  0139  3001               	movlw	1
 10895  013A  0141               	movlb	1	; select bank1
 10896  013B  07E2               	addwf	efgtoa@n^(0+128),f
 10897  013C  3000               	movlw	0
 10898  013D  3DE3               	addwfc	(efgtoa@n+1)^(0+128),f
 10899                           
 10900                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 339:       
      +                            --w;
 10901  013E  30FF               	movlw	255
 10902  013F  07CF               	addwf	efgtoa@w^(0+128),f
 10903  0140  30FF               	movlw	255
 10904  0141  3DD0               	addwfc	(efgtoa@w+1)^(0+128),f
 10905  0142                     l7850:	
 10906                           
 10907                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 344:       
      +                            if ((0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26)) {
 10908  0142  0141               	movlb	1	; select bank1
 10909  0143  085F               	movf	(efgtoa@g+3)^(0+128),w
 10910  0144  0140               	movlb	0	; select bank0
 10911  0145  00A3               	movwf	___fpclassifyf@x+3
 10912  0146  0141               	movlb	1	; select bank1
 10913  0147  085E               	movf	(efgtoa@g+2)^(0+128),w
 10914  0148  0140               	movlb	0	; select bank0
 10915  0149  00A2               	movwf	___fpclassifyf@x+2
 10916  014A  0141               	movlb	1	; select bank1
 10917  014B  085D               	movf	(efgtoa@g+1)^(0+128),w
 10918  014C  0140               	movlb	0	; select bank0
 10919  014D  00A1               	movwf	___fpclassifyf@x+1
 10920  014E  0141               	movlb	1	; select bank1
 10921  014F  085C               	movf	efgtoa@g^(0+128),w
 10922  0150  0140               	movlb	0	; select bank0
 10923  0151  00A0               	movwf	___fpclassifyf@x
 10924  0152  31A2  22ED  3180   	fcall	___fpclassifyf
 10925  0155  0140               	movlb	0	; select bank0
 10926  0156  0320               	decf	?___fpclassifyf,w
 10927  0157  0421               	iorwf	?___fpclassifyf+1,w
 10928  0158  1D03               	btfss	3,2
 10929  0159  29B0               	goto	l7868
 10930  015A  0141               	movlb	1	; select bank1
 10931  015B  082E               	movf	efgtoa@c^(0+128),w
 10932  015C  3EBF               	addlw	191
 10933  015D  0140               	movlb	0	; select bank0
 10934  015E  00EC               	movwf	??_efgtoa
 10935  015F  30FF               	movlw	255
 10936  0160  1803               	skipnc
 10937  0161  3000               	movlw	0
 10938  0162  00ED               	movwf	??_efgtoa+1
 10939  0163  3000               	movlw	0
 10940  0164  026D               	subwf	??_efgtoa+1,w
 10941  0165  301A               	movlw	26
 10942  0166  1903               	skipnz
 10943  0167  026C               	subwf	??_efgtoa,w
 10944  0168  1803               	btfsc	3,0
 10945  0169  296C               	goto	u10930
 10946  016A  3001               	movlw	1
 10947  016B  296D               	goto	u10940
 10948  016C                     u10930:	
 10949  016C  3000               	movlw	0
 10950  016D                     u10940:	
 10951  016D  00EE               	movwf	??_efgtoa+2
 10952  016E  01EF               	clrf	??_efgtoa+3
 10953  016F  086E               	movf	??_efgtoa+2,w
 10954  0170  0141               	movlb	1	; select bank1
 10955  0171  00B5               	movwf	_efgtoa$1706^(0+128)
 10956  0172  0140               	movlb	0	; select bank0
 10957  0173  086F               	movf	??_efgtoa+3,w
 10958  0174  0141               	movlb	1	; select bank1
 10959  0175  00B6               	movwf	(_efgtoa$1706+1)^(0+128)
 10960  0176  0835               	movf	_efgtoa$1706^(0+128),w
 10961  0177  0436               	iorwf	(_efgtoa$1706+1)^(0+128),w
 10962  0178  1903               	btfsc	3,2
 10963  0179  2984               	goto	l7860
 10964                           
 10965                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 345:       
      +                                strcpy(&dbuf[n], "INF");
 10966  017A  0862               	movf	efgtoa@n^(0+128),w
 10967  017B  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 10968  017C  0140               	movlb	0	; select bank0
 10969  017D  00A5               	movwf	strcpy@dest
 10970  017E  3003               	movlw	3
 10971  017F  00A6               	movwf	strcpy@dest+1
 10972  0180  307C               	movlw	low (STR_37| (0+32768))
 10973  0181  00A7               	movwf	strcpy@src
 10974  0182  30B2               	movlw	high (STR_37| (0+32768))
 10975  0183  298D               	goto	L10
 10976  0184                     l7860:	
 10977                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 346:       
      +                            } else {
 10978                           
 10979                           
 10980                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 347:       
      +                                strcpy(&dbuf[n], "inf");
 10981  0184  0862               	movf	efgtoa@n^(0+128),w
 10982  0185  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 10983  0186  0140               	movlb	0	; select bank0
 10984  0187  00A5               	movwf	strcpy@dest
 10985  0188  3003               	movlw	3
 10986  0189  00A6               	movwf	strcpy@dest+1
 10987  018A  3084               	movlw	low (STR_38| (0+32768))
 10988  018B  00A7               	movwf	strcpy@src
 10989  018C  30B2               	movlw	high (STR_38| (0+32768))
 10990  018D                     L10:	
 10991  018D  00A8               	movwf	strcpy@src+1
 10992  018E  31AB  239B  3180   	fcall	_strcpy
 10993                           
 10994                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 349:       
      +                            w -= ((sizeof("inf")/sizeof("inf"[0]))-1);
 10995  0191  30FD               	movlw	253
 10996  0192  0141               	movlb	1	; select bank1
 10997  0193  07CF               	addwf	efgtoa@w^(0+128),f
 10998  0194  30FF               	movlw	255
 10999  0195  3DD0               	addwfc	(efgtoa@w+1)^(0+128),f
 11000                           
 11001                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 350:       
      +                            return pad(fp, &dbuf[0], w);
 11002  0196  3020               	movlw	(low (_dbuf| (0+768)))& (0+255)
 11003  0197  0140               	movlb	0	; select bank0
 11004  0198  00EC               	movwf	??_efgtoa
 11005  0199  086C               	movf	??_efgtoa,w
 11006  019A  00B0               	movwf	pad@buf
 11007  019B  0141               	movlb	1	; select bank1
 11008  019C  0850               	movf	(efgtoa@w+1)^(0+128),w
 11009  019D  0140               	movlb	0	; select bank0
 11010  019E  00B2               	movwf	pad@p+1
 11011  019F  0141               	movlb	1	; select bank1
 11012  01A0  084F               	movf	efgtoa@w^(0+128),w
 11013  01A1  0140               	movlb	0	; select bank0
 11014  01A2  00B1               	movwf	pad@p
 11015  01A3  0141               	movlb	1	; select bank1
 11016  01A4  0849               	movf	efgtoa@fp^(0+128),w
 11017  01A5  31AF  27AD         	fcall	_pad
 11018  01A7  0140               	movlb	0	; select bank0
 11019  01A8  0831               	movf	?_pad+1,w
 11020  01A9  0141               	movlb	1	; select bank1
 11021  01AA  00AB               	movwf	(?_efgtoa+1)^(0+128)
 11022  01AB  0140               	movlb	0	; select bank0
 11023  01AC  0830               	movf	?_pad,w
 11024  01AD  0141               	movlb	1	; select bank1
 11025  01AE  00AA               	movwf	?_efgtoa^(0+128)
 11026  01AF  0008               	return
 11027  01B0                     l7868:	
 11028                           
 11029                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 353:       
      +                            if ((0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26)) {
 11030  01B0  0141               	movlb	1	; select bank1
 11031  01B1  085F               	movf	(efgtoa@g+3)^(0+128),w
 11032  01B2  0140               	movlb	0	; select bank0
 11033  01B3  00A3               	movwf	___fpclassifyf@x+3
 11034  01B4  0141               	movlb	1	; select bank1
 11035  01B5  085E               	movf	(efgtoa@g+2)^(0+128),w
 11036  01B6  0140               	movlb	0	; select bank0
 11037  01B7  00A2               	movwf	___fpclassifyf@x+2
 11038  01B8  0141               	movlb	1	; select bank1
 11039  01B9  085D               	movf	(efgtoa@g+1)^(0+128),w
 11040  01BA  0140               	movlb	0	; select bank0
 11041  01BB  00A1               	movwf	___fpclassifyf@x+1
 11042  01BC  0141               	movlb	1	; select bank1
 11043  01BD  085C               	movf	efgtoa@g^(0+128),w
 11044  01BE  0140               	movlb	0	; select bank0
 11045  01BF  00A0               	movwf	___fpclassifyf@x
 11046  01C0  31A2  22ED  3180   	fcall	___fpclassifyf
 11047  01C3  0140               	movlb	0	; select bank0
 11048  01C4  0820               	movf	?___fpclassifyf,w
 11049  01C5  0421               	iorwf	?___fpclassifyf+1,w
 11050  01C6  1D03               	btfss	3,2
 11051  01C7  2A1E               	goto	l7886
 11052  01C8  0141               	movlb	1	; select bank1
 11053  01C9  082E               	movf	efgtoa@c^(0+128),w
 11054  01CA  3EBF               	addlw	191
 11055  01CB  0140               	movlb	0	; select bank0
 11056  01CC  00EC               	movwf	??_efgtoa
 11057  01CD  30FF               	movlw	255
 11058  01CE  1803               	skipnc
 11059  01CF  3000               	movlw	0
 11060  01D0  00ED               	movwf	??_efgtoa+1
 11061  01D1  3000               	movlw	0
 11062  01D2  026D               	subwf	??_efgtoa+1,w
 11063  01D3  301A               	movlw	26
 11064  01D4  1903               	skipnz
 11065  01D5  026C               	subwf	??_efgtoa,w
 11066  01D6  1803               	btfsc	3,0
 11067  01D7  29DA               	goto	u10970
 11068  01D8  3001               	movlw	1
 11069  01D9  29DB               	goto	u10980
 11070  01DA                     u10970:	
 11071  01DA  3000               	movlw	0
 11072  01DB                     u10980:	
 11073  01DB  00EE               	movwf	??_efgtoa+2
 11074  01DC  01EF               	clrf	??_efgtoa+3
 11075  01DD  086E               	movf	??_efgtoa+2,w
 11076  01DE  0141               	movlb	1	; select bank1
 11077  01DF  00B7               	movwf	_efgtoa$1710^(0+128)
 11078  01E0  0140               	movlb	0	; select bank0
 11079  01E1  086F               	movf	??_efgtoa+3,w
 11080  01E2  0141               	movlb	1	; select bank1
 11081  01E3  00B8               	movwf	(_efgtoa$1710+1)^(0+128)
 11082  01E4  0837               	movf	_efgtoa$1710^(0+128),w
 11083  01E5  0438               	iorwf	(_efgtoa$1710+1)^(0+128),w
 11084  01E6  1903               	btfsc	3,2
 11085  01E7  29F2               	goto	l7878
 11086                           
 11087                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 354:       
      +                                strcpy(&dbuf[n], "NAN");
 11088  01E8  0862               	movf	efgtoa@n^(0+128),w
 11089  01E9  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 11090  01EA  0140               	movlb	0	; select bank0
 11091  01EB  00A5               	movwf	strcpy@dest
 11092  01EC  3003               	movlw	3
 11093  01ED  00A6               	movwf	strcpy@dest+1
 11094  01EE  3080               	movlw	low (STR_41| (0+32768))
 11095  01EF  00A7               	movwf	strcpy@src
 11096  01F0  30B2               	movlw	high (STR_41| (0+32768))
 11097  01F1  29FB               	goto	L11
 11098  01F2                     l7878:	
 11099                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 355:       
      +                            } else {
 11100                           
 11101                           
 11102                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 356:       
      +                                strcpy(&dbuf[n], "nan");
 11103  01F2  0862               	movf	efgtoa@n^(0+128),w
 11104  01F3  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 11105  01F4  0140               	movlb	0	; select bank0
 11106  01F5  00A5               	movwf	strcpy@dest
 11107  01F6  3003               	movlw	3
 11108  01F7  00A6               	movwf	strcpy@dest+1
 11109  01F8  3088               	movlw	low (STR_42| (0+32768))
 11110  01F9  00A7               	movwf	strcpy@src
 11111  01FA  30B2               	movlw	high (STR_42| (0+32768))
 11112  01FB                     L11:	
 11113  01FB  00A8               	movwf	strcpy@src+1
 11114  01FC  31AB  239B  3180   	fcall	_strcpy
 11115                           
 11116                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 358:       
      +                            w -= ((sizeof("inf")/sizeof("inf"[0]))-1);
 11117  01FF  30FD               	movlw	253
 11118  0200  0141               	movlb	1	; select bank1
 11119  0201  07CF               	addwf	efgtoa@w^(0+128),f
 11120  0202  30FF               	movlw	255
 11121  0203  3DD0               	addwfc	(efgtoa@w+1)^(0+128),f
 11122                           
 11123                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 359:       
      +                            return pad(fp, &dbuf[0], w);
 11124  0204  3020               	movlw	(low (_dbuf| (0+768)))& (0+255)
 11125  0205  0140               	movlb	0	; select bank0
 11126  0206  00EC               	movwf	??_efgtoa
 11127  0207  086C               	movf	??_efgtoa,w
 11128  0208  00B0               	movwf	pad@buf
 11129  0209  0141               	movlb	1	; select bank1
 11130  020A  0850               	movf	(efgtoa@w+1)^(0+128),w
 11131  020B  0140               	movlb	0	; select bank0
 11132  020C  00B2               	movwf	pad@p+1
 11133  020D  0141               	movlb	1	; select bank1
 11134  020E  084F               	movf	efgtoa@w^(0+128),w
 11135  020F  0140               	movlb	0	; select bank0
 11136  0210  00B1               	movwf	pad@p
 11137  0211  0141               	movlb	1	; select bank1
 11138  0212  0849               	movf	efgtoa@fp^(0+128),w
 11139  0213  31AF  27AD         	fcall	_pad
 11140  0215  0140               	movlb	0	; select bank0
 11141  0216  0831               	movf	?_pad+1,w
 11142  0217  0141               	movlb	1	; select bank1
 11143  0218  00AB               	movwf	(?_efgtoa+1)^(0+128)
 11144  0219  0140               	movlb	0	; select bank0
 11145  021A  0830               	movf	?_pad,w
 11146  021B  0141               	movlb	1	; select bank1
 11147  021C  00AA               	movwf	?_efgtoa^(0+128)
 11148  021D  0008               	return
 11149  021E                     l7886:	
 11150                           
 11151                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 363:     u 
      +                          = 1.0;
 11152  021E  303F               	movlw	63
 11153  021F  0141               	movlb	1	; select bank1
 11154  0220  00E7               	movwf	(efgtoa@u+3)^(0+128)
 11155  0221  3080               	movlw	128
 11156  0222  00E6               	movwf	(efgtoa@u+2)^(0+128)
 11157  0223  3000               	movlw	0
 11158  0224  00E5               	movwf	(efgtoa@u+1)^(0+128)
 11159  0225  3000               	movlw	0
 11160  0226  00E4               	movwf	efgtoa@u^(0+128)
 11161                           
 11162                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 364:     e 
      +                          = 0;
 11163  0227  01E0               	clrf	efgtoa@e^(0+128)
 11164  0228  01E1               	clrf	(efgtoa@e+1)^(0+128)
 11165                           
 11166                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 365:     if
      +                           (!(g == 0.0)) {
 11167  0229  085F               	movf	(efgtoa@g+3)^(0+128),w
 11168  022A  0140               	movlb	0	; select bank0
 11169  022B  00A3               	movwf	___fleq@ff1+3
 11170  022C  0141               	movlb	1	; select bank1
 11171  022D  085E               	movf	(efgtoa@g+2)^(0+128),w
 11172  022E  0140               	movlb	0	; select bank0
 11173  022F  00A2               	movwf	___fleq@ff1+2
 11174  0230  0141               	movlb	1	; select bank1
 11175  0231  085D               	movf	(efgtoa@g+1)^(0+128),w
 11176  0232  0140               	movlb	0	; select bank0
 11177  0233  00A1               	movwf	___fleq@ff1+1
 11178  0234  0141               	movlb	1	; select bank1
 11179  0235  085C               	movf	efgtoa@g^(0+128),w
 11180  0236  0140               	movlb	0	; select bank0
 11181  0237  00A0               	movwf	___fleq@ff1
 11182  0238  3000               	movlw	0
 11183  0239  00A7               	movwf	___fleq@ff2+3
 11184  023A  3000               	movlw	0
 11185  023B  00A6               	movwf	___fleq@ff2+2
 11186  023C  3000               	movlw	0
 11187  023D  00A5               	movwf	___fleq@ff2+1
 11188  023E  3000               	movlw	0
 11189  023F  00A4               	movwf	___fleq@ff2
 11190  0240  31AE  2622  3180   	fcall	___fleq
 11191  0243  1C03               	btfss	3,0
 11192  0244  2A76               	goto	l7898
 11193  0245  2B05               	goto	l7906
 11194  0246                     l7894:	
 11195                           
 11196                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 367:       
      +                                u = u*10.0;
 11197  0246  3041               	movlw	65
 11198  0247  0140               	movlb	0	; select bank0
 11199  0248  00B1               	movwf	___flmul@b+3
 11200  0249  3020               	movlw	32
 11201  024A  00B0               	movwf	___flmul@b+2
 11202  024B  3000               	movlw	0
 11203  024C  00AF               	movwf	___flmul@b+1
 11204  024D  3000               	movlw	0
 11205  024E  00AE               	movwf	___flmul@b
 11206  024F  0141               	movlb	1	; select bank1
 11207  0250  0867               	movf	(efgtoa@u+3)^(0+128),w
 11208  0251  0140               	movlb	0	; select bank0
 11209  0252  00B5               	movwf	___flmul@a+3
 11210  0253  0141               	movlb	1	; select bank1
 11211  0254  0866               	movf	(efgtoa@u+2)^(0+128),w
 11212  0255  0140               	movlb	0	; select bank0
 11213  0256  00B4               	movwf	___flmul@a+2
 11214  0257  0141               	movlb	1	; select bank1
 11215  0258  0865               	movf	(efgtoa@u+1)^(0+128),w
 11216  0259  0140               	movlb	0	; select bank0
 11217  025A  00B3               	movwf	___flmul@a+1
 11218  025B  0141               	movlb	1	; select bank1
 11219  025C  0864               	movf	efgtoa@u^(0+128),w
 11220  025D  0140               	movlb	0	; select bank0
 11221  025E  00B2               	movwf	___flmul@a
 11222  025F  318A  2227  3180   	fcall	___flmul
 11223  0262  0140               	movlb	0	; select bank0
 11224  0263  0831               	movf	?___flmul+3,w
 11225  0264  0141               	movlb	1	; select bank1
 11226  0265  00E7               	movwf	(efgtoa@u+3)^(0+128)
 11227  0266  0140               	movlb	0	; select bank0
 11228  0267  0830               	movf	?___flmul+2,w
 11229  0268  0141               	movlb	1	; select bank1
 11230  0269  00E6               	movwf	(efgtoa@u+2)^(0+128)
 11231  026A  0140               	movlb	0	; select bank0
 11232  026B  082F               	movf	?___flmul+1,w
 11233  026C  0141               	movlb	1	; select bank1
 11234  026D  00E5               	movwf	(efgtoa@u+1)^(0+128)
 11235  026E  0140               	movlb	0	; select bank0
 11236  026F  082E               	movf	?___flmul,w
 11237  0270  0141               	movlb	1	; select bank1
 11238  0271  00E4               	movwf	efgtoa@u^(0+128)
 11239                           
 11240                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 368:       
      +                                ++e;
 11241  0272  3001               	movlw	1
 11242  0273  07E0               	addwf	efgtoa@e^(0+128),f
 11243  0274  3000               	movlw	0
 11244  0275  3DE1               	addwfc	(efgtoa@e+1)^(0+128),f
 11245  0276                     l7898:	
 11246                           
 11247                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 366:       
      +                            while (!(g < (u*10.0))) {
 11248  0276  0141               	movlb	1	; select bank1
 11249  0277  085F               	movf	(efgtoa@g+3)^(0+128),w
 11250  0278  0140               	movlb	0	; select bank0
 11251  0279  00CB               	movwf	___flge@ff1+3
 11252  027A  0141               	movlb	1	; select bank1
 11253  027B  085E               	movf	(efgtoa@g+2)^(0+128),w
 11254  027C  0140               	movlb	0	; select bank0
 11255  027D  00CA               	movwf	___flge@ff1+2
 11256  027E  0141               	movlb	1	; select bank1
 11257  027F  085D               	movf	(efgtoa@g+1)^(0+128),w
 11258  0280  0140               	movlb	0	; select bank0
 11259  0281  00C9               	movwf	___flge@ff1+1
 11260  0282  0141               	movlb	1	; select bank1
 11261  0283  085C               	movf	efgtoa@g^(0+128),w
 11262  0284  0140               	movlb	0	; select bank0
 11263  0285  00C8               	movwf	___flge@ff1
 11264  0286  3041               	movlw	65
 11265  0287  00B1               	movwf	___flmul@b+3
 11266  0288  3020               	movlw	32
 11267  0289  00B0               	movwf	___flmul@b+2
 11268  028A  3000               	movlw	0
 11269  028B  00AF               	movwf	___flmul@b+1
 11270  028C  3000               	movlw	0
 11271  028D  00AE               	movwf	___flmul@b
 11272  028E  0141               	movlb	1	; select bank1
 11273  028F  0867               	movf	(efgtoa@u+3)^(0+128),w
 11274  0290  0140               	movlb	0	; select bank0
 11275  0291  00B5               	movwf	___flmul@a+3
 11276  0292  0141               	movlb	1	; select bank1
 11277  0293  0866               	movf	(efgtoa@u+2)^(0+128),w
 11278  0294  0140               	movlb	0	; select bank0
 11279  0295  00B4               	movwf	___flmul@a+2
 11280  0296  0141               	movlb	1	; select bank1
 11281  0297  0865               	movf	(efgtoa@u+1)^(0+128),w
 11282  0298  0140               	movlb	0	; select bank0
 11283  0299  00B3               	movwf	___flmul@a+1
 11284  029A  0141               	movlb	1	; select bank1
 11285  029B  0864               	movf	efgtoa@u^(0+128),w
 11286  029C  0140               	movlb	0	; select bank0
 11287  029D  00B2               	movwf	___flmul@a
 11288  029E  318A  2227  3180   	fcall	___flmul
 11289  02A1  0140               	movlb	0	; select bank0
 11290  02A2  0831               	movf	?___flmul+3,w
 11291  02A3  00CF               	movwf	___flge@ff2+3
 11292  02A4  0830               	movf	?___flmul+2,w
 11293  02A5  00CE               	movwf	___flge@ff2+2
 11294  02A6  082F               	movf	?___flmul+1,w
 11295  02A7  00CD               	movwf	___flge@ff2+1
 11296  02A8  082E               	movf	?___flmul,w
 11297  02A9  00CC               	movwf	___flge@ff2
 11298  02AA  31A3  2365  3180   	fcall	___flge
 11299  02AD  1C03               	btfss	3,0
 11300  02AE  2AE0               	goto	l7904
 11301  02AF  2A46               	goto	l7894
 11302  02B0                     l7900:	
 11303                           
 11304                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 371:       
      +                                u = u/10.0;
 11305  02B0  3041               	movlw	65
 11306  02B1  0140               	movlb	0	; select bank0
 11307  02B2  00CB               	movwf	___fldiv@a+3
 11308  02B3  3020               	movlw	32
 11309  02B4  00CA               	movwf	___fldiv@a+2
 11310  02B5  3000               	movlw	0
 11311  02B6  00C9               	movwf	___fldiv@a+1
 11312  02B7  3000               	movlw	0
 11313  02B8  00C8               	movwf	___fldiv@a
 11314  02B9  0141               	movlb	1	; select bank1
 11315  02BA  0867               	movf	(efgtoa@u+3)^(0+128),w
 11316  02BB  0140               	movlb	0	; select bank0
 11317  02BC  00CF               	movwf	___fldiv@b+3
 11318  02BD  0141               	movlb	1	; select bank1
 11319  02BE  0866               	movf	(efgtoa@u+2)^(0+128),w
 11320  02BF  0140               	movlb	0	; select bank0
 11321  02C0  00CE               	movwf	___fldiv@b+2
 11322  02C1  0141               	movlb	1	; select bank1
 11323  02C2  0865               	movf	(efgtoa@u+1)^(0+128),w
 11324  02C3  0140               	movlb	0	; select bank0
 11325  02C4  00CD               	movwf	___fldiv@b+1
 11326  02C5  0141               	movlb	1	; select bank1
 11327  02C6  0864               	movf	efgtoa@u^(0+128),w
 11328  02C7  0140               	movlb	0	; select bank0
 11329  02C8  00CC               	movwf	___fldiv@b
 11330  02C9  3191  21D0  3180   	fcall	___fldiv
 11331  02CC  0140               	movlb	0	; select bank0
 11332  02CD  084B               	movf	?___fldiv+3,w
 11333  02CE  0141               	movlb	1	; select bank1
 11334  02CF  00E7               	movwf	(efgtoa@u+3)^(0+128)
 11335  02D0  0140               	movlb	0	; select bank0
 11336  02D1  084A               	movf	?___fldiv+2,w
 11337  02D2  0141               	movlb	1	; select bank1
 11338  02D3  00E6               	movwf	(efgtoa@u+2)^(0+128)
 11339  02D4  0140               	movlb	0	; select bank0
 11340  02D5  0849               	movf	?___fldiv+1,w
 11341  02D6  0141               	movlb	1	; select bank1
 11342  02D7  00E5               	movwf	(efgtoa@u+1)^(0+128)
 11343  02D8  0140               	movlb	0	; select bank0
 11344  02D9  0848               	movf	?___fldiv,w
 11345  02DA  0141               	movlb	1	; select bank1
 11346  02DB  00E4               	movwf	efgtoa@u^(0+128)
 11347                           
 11348                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 372:       
      +                                --e;
 11349  02DC  30FF               	movlw	255
 11350  02DD  07E0               	addwf	efgtoa@e^(0+128),f
 11351  02DE  30FF               	movlw	255
 11352  02DF  3DE1               	addwfc	(efgtoa@e+1)^(0+128),f
 11353  02E0                     l7904:	
 11354                           
 11355                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 370:       
      +                            while (g < u) {
 11356  02E0  0141               	movlb	1	; select bank1
 11357  02E1  085F               	movf	(efgtoa@g+3)^(0+128),w
 11358  02E2  0140               	movlb	0	; select bank0
 11359  02E3  00CB               	movwf	___flge@ff1+3
 11360  02E4  0141               	movlb	1	; select bank1
 11361  02E5  085E               	movf	(efgtoa@g+2)^(0+128),w
 11362  02E6  0140               	movlb	0	; select bank0
 11363  02E7  00CA               	movwf	___flge@ff1+2
 11364  02E8  0141               	movlb	1	; select bank1
 11365  02E9  085D               	movf	(efgtoa@g+1)^(0+128),w
 11366  02EA  0140               	movlb	0	; select bank0
 11367  02EB  00C9               	movwf	___flge@ff1+1
 11368  02EC  0141               	movlb	1	; select bank1
 11369  02ED  085C               	movf	efgtoa@g^(0+128),w
 11370  02EE  0140               	movlb	0	; select bank0
 11371  02EF  00C8               	movwf	___flge@ff1
 11372  02F0  0141               	movlb	1	; select bank1
 11373  02F1  0867               	movf	(efgtoa@u+3)^(0+128),w
 11374  02F2  0140               	movlb	0	; select bank0
 11375  02F3  00CF               	movwf	___flge@ff2+3
 11376  02F4  0141               	movlb	1	; select bank1
 11377  02F5  0866               	movf	(efgtoa@u+2)^(0+128),w
 11378  02F6  0140               	movlb	0	; select bank0
 11379  02F7  00CE               	movwf	___flge@ff2+2
 11380  02F8  0141               	movlb	1	; select bank1
 11381  02F9  0865               	movf	(efgtoa@u+1)^(0+128),w
 11382  02FA  0140               	movlb	0	; select bank0
 11383  02FB  00CD               	movwf	___flge@ff2+1
 11384  02FC  0141               	movlb	1	; select bank1
 11385  02FD  0864               	movf	efgtoa@u^(0+128),w
 11386  02FE  0140               	movlb	0	; select bank0
 11387  02FF  00CC               	movwf	___flge@ff2
 11388  0300  31A3  2365  3180   	fcall	___flge
 11389  0303  1C03               	btfss	3,0
 11390  0304  2AB0               	goto	l7900
 11391  0305                     l7906:	
 11392                           
 11393                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 377:     mo
      +                          de = tolower((int)c);
 11394  0305  0141               	movlb	1	; select bank1
 11395  0306  082E               	movf	efgtoa@c^(0+128),w
 11396  0307  0140               	movlb	0	; select bank0
 11397  0308  00EC               	movwf	??_efgtoa
 11398  0309  01ED               	clrf	??_efgtoa+1
 11399  030A  086C               	movf	??_efgtoa,w
 11400  030B  00A6               	movwf	tolower@c
 11401  030C  086D               	movf	??_efgtoa+1,w
 11402  030D  00A7               	movwf	tolower@c+1
 11403  030E  31AB  2379  3180   	fcall	_tolower
 11404  0311  0140               	movlb	0	; select bank0
 11405  0312  0826               	movf	?_tolower,w
 11406  0313  00EE               	movwf	??_efgtoa+2
 11407  0314  086E               	movf	??_efgtoa+2,w
 11408  0315  0141               	movlb	1	; select bank1
 11409  0316  00D1               	movwf	efgtoa@mode^(0+128)
 11410                           
 11411                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 378:     nm
      +                          ode = mode;
 11412  0317  0851               	movf	efgtoa@mode^(0+128),w
 11413  0318  0140               	movlb	0	; select bank0
 11414  0319  00EC               	movwf	??_efgtoa
 11415  031A  086C               	movf	??_efgtoa,w
 11416  031B  0141               	movlb	1	; select bank1
 11417  031C  00CE               	movwf	efgtoa@nmode^(0+128)
 11418                           
 11419                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 379:     if
      +                           (mode == 'g') {
 11420  031D  3067               	movlw	103
 11421  031E  0651               	xorwf	efgtoa@mode^(0+128),w
 11422  031F  1D03               	btfss	3,2
 11423  0320  2B3D               	goto	l809
 11424                           
 11425                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 380:   if (
      +                          prec == 0) {
 11426  0321  0143               	movlb	3	; select bank3
 11427  0322  0830               	movf	_prec^(0+384),w
 11428  0323  0431               	iorwf	(_prec+1)^(0+384),w
 11429  0324  1D03               	btfss	3,2
 11430  0325  2B2A               	goto	l810
 11431                           
 11432                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 381:    pre
      +                          c = 1;
 11433  0326  3001               	movlw	1
 11434  0327  00B0               	movwf	_prec^(0+384)
 11435  0328  3000               	movlw	0
 11436  0329  00B1               	movwf	(_prec^(0+384)+1)
 11437  032A                     l810:	
 11438                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 382:   }
 11439                           
 11440                           
 11441                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 383:       
      +                            p = (0 < prec) ? prec : 6;
 11442  032A  0831               	movf	(_prec+1)^(0+384),w
 11443  032B  3A80               	xorlw	128
 11444  032C  0140               	movlb	0	; select bank0
 11445  032D  00EC               	movwf	??_efgtoa
 11446  032E  3080               	movlw	128
 11447  032F  026C               	subwf	??_efgtoa,w
 11448  0330  1D03               	skipz
 11449  0331  2B35               	goto	u11055
 11450  0332  3001               	movlw	1
 11451  0333  0143               	movlb	3	; select bank3
 11452  0334  0230               	subwf	_prec^(0+384),w
 11453  0335                     u11055:	
 11454  0335  1803               	skipnc
 11455  0336  2B40               	goto	l7918
 11456  0337                     l7916:	
 11457  0337  3006               	movlw	6
 11458  0338  0141               	movlb	1	; select bank1
 11459  0339  00CC               	movwf	efgtoa@p^(0+128)
 11460  033A  3000               	movlw	0
 11461  033B  00CD               	movwf	(efgtoa@p^(0+128)+1)
 11462  033C  2B48               	goto	l7924
 11463  033D                     l809:	
 11464                           
 11465                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 385:       
      +                            p = (prec < 0) ? 6 : prec;
 11466  033D  0143               	movlb	3	; select bank3
 11467  033E  1BB1               	btfsc	(_prec+1)^(0+384),7
 11468  033F  2B37               	goto	l7916
 11469  0340                     l7918:	
 11470  0340  0143               	movlb	3	; select bank3
 11471  0341  0831               	movf	(_prec+1)^(0+384),w
 11472  0342  0141               	movlb	1	; select bank1
 11473  0343  00CD               	movwf	(efgtoa@p+1)^(0+128)
 11474  0344  0143               	movlb	3	; select bank3
 11475  0345  0830               	movf	_prec^(0+384),w
 11476  0346  0141               	movlb	1	; select bank1
 11477  0347  00CC               	movwf	efgtoa@p^(0+128)
 11478  0348                     l7924:	
 11479                           
 11480                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 389:     if
      +                           (mode == 'g') {
 11481  0348  3067               	movlw	103
 11482  0349  0651               	xorwf	efgtoa@mode^(0+128),w
 11483  034A  1D03               	btfss	3,2
 11484  034B  2B7B               	goto	l820
 11485                           
 11486                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 390:       
      +                            if (!(e < -4) && !((p - 1) < e)) {
 11487  034C  0861               	movf	(efgtoa@e+1)^(0+128),w
 11488  034D  3A80               	xorlw	128
 11489  034E  0140               	movlb	0	; select bank0
 11490  034F  00EC               	movwf	??_efgtoa
 11491  0350  307F               	movlw	127
 11492  0351  026C               	subwf	??_efgtoa,w
 11493  0352  1D03               	skipz
 11494  0353  2B57               	goto	u11085
 11495  0354  30FC               	movlw	252
 11496  0355  0141               	movlb	1	; select bank1
 11497  0356  0260               	subwf	efgtoa@e^(0+128),w
 11498  0357                     u11085:	
 11499  0357  1C03               	skipc
 11500  0358  2B75               	goto	l7932
 11501  0359  0141               	movlb	1	; select bank1
 11502  035A  084C               	movf	efgtoa@p^(0+128),w
 11503  035B  3EFF               	addlw	255
 11504  035C  0140               	movlb	0	; select bank0
 11505  035D  00EC               	movwf	??_efgtoa
 11506  035E  30FF               	movlw	255
 11507  035F  0141               	movlb	1	; select bank1
 11508  0360  3D4D               	addwfc	(efgtoa@p+1)^(0+128),w
 11509  0361  0140               	movlb	0	; select bank0
 11510  0362  00ED               	movwf	??_efgtoa+1
 11511  0363  086D               	movf	??_efgtoa+1,w
 11512  0364  3A80               	xorlw	128
 11513  0365  00EE               	movwf	??_efgtoa+2
 11514  0366  0141               	movlb	1	; select bank1
 11515  0367  0861               	movf	(efgtoa@e+1)^(0+128),w
 11516  0368  3A80               	xorlw	128
 11517  0369  0140               	movlb	0	; select bank0
 11518  036A  026E               	subwf	??_efgtoa+2,w
 11519  036B  1D03               	skipz
 11520  036C  2B71               	goto	u11095
 11521  036D  0141               	movlb	1	; select bank1
 11522  036E  0860               	movf	efgtoa@e^(0+128),w
 11523  036F  0140               	movlb	0	; select bank0
 11524  0370  026C               	subwf	??_efgtoa,w
 11525  0371                     u11095:	
 11526  0371  1C03               	skipc
 11527  0372  2B75               	goto	l7932
 11528                           
 11529                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 391:       
      +                                nmode = 'f';
 11530  0373  3066               	movlw	102
 11531  0374  2B76               	goto	L12
 11532  0375                     l7932:	
 11533                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 392:       
      +                            } else {
 11534                           
 11535                           
 11536                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 393:       
      +                                nmode = 'e';
 11537  0375  3065               	movlw	101
 11538  0376                     L12:	
 11539  0376  0140               	movlb	0	; select bank0
 11540  0377  00EC               	movwf	??_efgtoa
 11541  0378  086C               	movf	??_efgtoa,w
 11542  0379  0141               	movlb	1	; select bank1
 11543  037A  00CE               	movwf	efgtoa@nmode^(0+128)
 11544  037B                     l820:	
 11545                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 395:     }
 11546                           
 11547                           
 11548                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 398:     m 
      +                          = p;
 11549  037B  084D               	movf	(efgtoa@p+1)^(0+128),w
 11550  037C  00C4               	movwf	(efgtoa@m+1)^(0+128)
 11551  037D  084C               	movf	efgtoa@p^(0+128),w
 11552  037E  00C3               	movwf	efgtoa@m^(0+128)
 11553                           
 11554                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 399:     if
      +                           (!(mode == 'g') || ((nmode == 'f') && (e < 0))) {
 11555  037F  3067               	movlw	103
 11556  0380  0651               	xorwf	efgtoa@mode^(0+128),w
 11557  0381  1D03               	btfss	3,2
 11558  0382  2B88               	goto	l7940
 11559  0383  3066               	movlw	102
 11560  0384  064E               	xorwf	efgtoa@nmode^(0+128),w
 11561  0385  1903               	btfsc	3,2
 11562  0386  1FE1               	btfss	(efgtoa@e+1)^(0+128),7
 11563  0387  2B8C               	goto	l7942
 11564  0388                     l7940:	
 11565                           
 11566                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 400:       
      +                            ++m;
 11567  0388  3001               	movlw	1
 11568  0389  07C3               	addwf	efgtoa@m^(0+128),f
 11569  038A  3000               	movlw	0
 11570  038B  3DC4               	addwfc	(efgtoa@m+1)^(0+128),f
 11571  038C                     l7942:	
 11572                           
 11573                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 404:     if
      +                           (nmode == 'f') {
 11574  038C  3066               	movlw	102
 11575  038D  064E               	xorwf	efgtoa@nmode^(0+128),w
 11576  038E  1D03               	btfss	3,2
 11577  038F  2BA4               	goto	l7954
 11578                           
 11579                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 405:       
      +                            if (e < 0) {
 11580  0390  1FE1               	btfss	(efgtoa@e+1)^(0+128),7
 11581  0391  2B9C               	goto	l7950
 11582                           
 11583                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 406:       
      +                                u = 1.0;
 11584  0392  303F               	movlw	63
 11585  0393  00E7               	movwf	(efgtoa@u+3)^(0+128)
 11586  0394  3080               	movlw	128
 11587  0395  00E6               	movwf	(efgtoa@u+2)^(0+128)
 11588  0396  3000               	movlw	0
 11589  0397  00E5               	movwf	(efgtoa@u+1)^(0+128)
 11590  0398  3000               	movlw	0
 11591  0399  00E4               	movwf	efgtoa@u^(0+128)
 11592                           
 11593                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 407:       
      +                                e = 0;
 11594  039A  01E0               	clrf	efgtoa@e^(0+128)
 11595  039B  01E1               	clrf	(efgtoa@e+1)^(0+128)
 11596  039C                     l7950:	
 11597                           
 11598                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 409:       
      +                            if (!(mode == 'g')) {
 11599  039C  3067               	movlw	103
 11600  039D  0651               	xorwf	efgtoa@mode^(0+128),w
 11601  039E  1903               	btfsc	3,2
 11602  039F  2BA4               	goto	l7954
 11603                           
 11604                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 410:       
      +                                m += e;
 11605  03A0  0860               	movf	efgtoa@e^(0+128),w
 11606  03A1  07C3               	addwf	efgtoa@m^(0+128),f
 11607  03A2  0861               	movf	(efgtoa@e+1)^(0+128),w
 11608  03A3  3DC4               	addwfc	(efgtoa@m+1)^(0+128),f
 11609  03A4                     l7954:	
 11610                           
 11611                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 415:     i 
      +                          = 0;
 11612  03A4  01DA               	clrf	efgtoa@i^(0+128)
 11613  03A5  01DB               	clrf	(efgtoa@i+1)^(0+128)
 11614                           
 11615                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 416:     h 
      +                          = g;
 11616  03A6  085F               	movf	(efgtoa@g+3)^(0+128),w
 11617  03A7  00D5               	movwf	(efgtoa@h+3)^(0+128)
 11618  03A8  085E               	movf	(efgtoa@g+2)^(0+128),w
 11619  03A9  00D4               	movwf	(efgtoa@h+2)^(0+128)
 11620  03AA  085D               	movf	(efgtoa@g+1)^(0+128),w
 11621  03AB  00D3               	movwf	(efgtoa@h+1)^(0+128)
 11622  03AC  085C               	movf	efgtoa@g^(0+128),w
 11623  03AD  00D2               	movwf	efgtoa@h^(0+128)
 11624                           
 11625                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 417:     ou
      +                           = u;
 11626  03AE  0867               	movf	(efgtoa@u+3)^(0+128),w
 11627  03AF  00B2               	movwf	(efgtoa@ou+3)^(0+128)
 11628  03B0  0866               	movf	(efgtoa@u+2)^(0+128),w
 11629  03B1  00B1               	movwf	(efgtoa@ou+2)^(0+128)
 11630  03B2  0865               	movf	(efgtoa@u+1)^(0+128),w
 11631  03B3  00B0               	movwf	(efgtoa@ou+1)^(0+128)
 11632  03B4  0864               	movf	efgtoa@u^(0+128),w
 11633  03B5  00AF               	movwf	efgtoa@ou^(0+128)
 11634  03B6                     l7964:	
 11635                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 418:     wh
      +                          ile (i < m) {
 11636                           
 11637                           
 11638                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 418:     wh
      +                          ile (i < m) {
 11639  03B6  085B               	movf	(efgtoa@i+1)^(0+128),w
 11640  03B7  3A80               	xorlw	128
 11641  03B8  0140               	movlb	0	; select bank0
 11642  03B9  00EC               	movwf	??_efgtoa
 11643  03BA  0141               	movlb	1	; select bank1
 11644  03BB  0844               	movf	(efgtoa@m+1)^(0+128),w
 11645  03BC  3A80               	xorlw	128
 11646  03BD  0140               	movlb	0	; select bank0
 11647  03BE  026C               	subwf	??_efgtoa,w
 11648  03BF  1D03               	skipz
 11649  03C0  2BC4               	goto	u11165
 11650  03C1  0141               	movlb	1	; select bank1
 11651  03C2  0843               	movf	efgtoa@m^(0+128),w
 11652  03C3  025A               	subwf	efgtoa@i^(0+128),w
 11653  03C4                     u11165:	
 11654  03C4  1803               	btfsc	3,0
 11655  03C5  2C9E               	goto	l7966
 11656                           
 11657                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 419:       
      +                            l = floorf(h/u);
 11658  03C6  0141               	movlb	1	; select bank1
 11659  03C7  0867               	movf	(efgtoa@u+3)^(0+128),w
 11660  03C8  0140               	movlb	0	; select bank0
 11661  03C9  00CB               	movwf	___fldiv@a+3
 11662  03CA  0141               	movlb	1	; select bank1
 11663  03CB  0866               	movf	(efgtoa@u+2)^(0+128),w
 11664  03CC  0140               	movlb	0	; select bank0
 11665  03CD  00CA               	movwf	___fldiv@a+2
 11666  03CE  0141               	movlb	1	; select bank1
 11667  03CF  0865               	movf	(efgtoa@u+1)^(0+128),w
 11668  03D0  0140               	movlb	0	; select bank0
 11669  03D1  00C9               	movwf	___fldiv@a+1
 11670  03D2  0141               	movlb	1	; select bank1
 11671  03D3  0864               	movf	efgtoa@u^(0+128),w
 11672  03D4  0140               	movlb	0	; select bank0
 11673  03D5  00C8               	movwf	___fldiv@a
 11674  03D6  0141               	movlb	1	; select bank1
 11675  03D7  0855               	movf	(efgtoa@h+3)^(0+128),w
 11676  03D8  0140               	movlb	0	; select bank0
 11677  03D9  00CF               	movwf	___fldiv@b+3
 11678  03DA  0141               	movlb	1	; select bank1
 11679  03DB  0854               	movf	(efgtoa@h+2)^(0+128),w
 11680  03DC  0140               	movlb	0	; select bank0
 11681  03DD  00CE               	movwf	___fldiv@b+2
 11682  03DE  0141               	movlb	1	; select bank1
 11683  03DF  0853               	movf	(efgtoa@h+1)^(0+128),w
 11684  03E0  0140               	movlb	0	; select bank0
 11685  03E1  00CD               	movwf	___fldiv@b+1
 11686  03E2  0141               	movlb	1	; select bank1
 11687  03E3  0852               	movf	efgtoa@h^(0+128),w
 11688  03E4  0140               	movlb	0	; select bank0
 11689  03E5  00CC               	movwf	___fldiv@b
 11690  03E6  3191  21D0  3180   	fcall	___fldiv
 11691  03E9  0140               	movlb	0	; select bank0
 11692  03EA  084B               	movf	?___fldiv+3,w
 11693  03EB  00E5               	movwf	floorf@x+3
 11694  03EC  084A               	movf	?___fldiv+2,w
 11695  03ED  00E4               	movwf	floorf@x+2
 11696  03EE  0849               	movf	?___fldiv+1,w
 11697  03EF  00E3               	movwf	floorf@x+1
 11698  03F0  0848               	movf	?___fldiv,w
 11699  03F1  00E2               	movwf	floorf@x
 11700  03F2  319D  2581  3180   	fcall	_floorf
 11701  03F5  0140               	movlb	0	; select bank0
 11702  03F6  0865               	movf	?_floorf+3,w
 11703  03F7  0141               	movlb	1	; select bank1
 11704  03F8  00D9               	movwf	(efgtoa@l+3)^(0+128)
 11705  03F9  0140               	movlb	0	; select bank0
 11706  03FA  0864               	movf	?_floorf+2,w
 11707  03FB  0141               	movlb	1	; select bank1
 11708  03FC  00D8               	movwf	(efgtoa@l+2)^(0+128)
 11709  03FD  0140               	movlb	0	; select bank0
 11710  03FE  0863               	movf	?_floorf+1,w
 11711  03FF  0141               	movlb	1	; select bank1
 11712  0400  00D7               	movwf	(efgtoa@l+1)^(0+128)
 11713  0401  0140               	movlb	0	; select bank0
 11714  0402  0862               	movf	?_floorf,w
 11715  0403  0141               	movlb	1	; select bank1
 11716  0404  00D6               	movwf	efgtoa@l^(0+128)
 11717                           
 11718                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 420:       
      +                            d = (int)l;
 11719  0405  0859               	movf	(efgtoa@l+3)^(0+128),w
 11720  0406  0140               	movlb	0	; select bank0
 11721  0407  00A3               	movwf	___fltol@f1+3
 11722  0408  0141               	movlb	1	; select bank1
 11723  0409  0858               	movf	(efgtoa@l+2)^(0+128),w
 11724  040A  0140               	movlb	0	; select bank0
 11725  040B  00A2               	movwf	___fltol@f1+2
 11726  040C  0141               	movlb	1	; select bank1
 11727  040D  0857               	movf	(efgtoa@l+1)^(0+128),w
 11728  040E  0140               	movlb	0	; select bank0
 11729  040F  00A1               	movwf	___fltol@f1+1
 11730  0410  0141               	movlb	1	; select bank1
 11731  0411  0856               	movf	efgtoa@l^(0+128),w
 11732  0412  0140               	movlb	0	; select bank0
 11733  0413  00A0               	movwf	___fltol@f1
 11734  0414  31A2  221E  3180   	fcall	___fltol
 11735  0417  0140               	movlb	0	; select bank0
 11736  0418  0821               	movf	?___fltol+1,w
 11737  0419  0141               	movlb	1	; select bank1
 11738  041A  00C8               	movwf	(efgtoa@d+1)^(0+128)
 11739  041B  0140               	movlb	0	; select bank0
 11740  041C  0820               	movf	?___fltol,w
 11741  041D  0141               	movlb	1	; select bank1
 11742  041E  00C7               	movwf	efgtoa@d^(0+128)
 11743                           
 11744                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 421:       
      +                            h -= l*u;
 11745  041F  0859               	movf	(efgtoa@l+3)^(0+128),w
 11746  0420  0140               	movlb	0	; select bank0
 11747  0421  00B5               	movwf	___flmul@a+3
 11748  0422  0141               	movlb	1	; select bank1
 11749  0423  0858               	movf	(efgtoa@l+2)^(0+128),w
 11750  0424  0140               	movlb	0	; select bank0
 11751  0425  00B4               	movwf	___flmul@a+2
 11752  0426  0141               	movlb	1	; select bank1
 11753  0427  0857               	movf	(efgtoa@l+1)^(0+128),w
 11754  0428  0140               	movlb	0	; select bank0
 11755  0429  00B3               	movwf	___flmul@a+1
 11756  042A  0141               	movlb	1	; select bank1
 11757  042B  0856               	movf	efgtoa@l^(0+128),w
 11758  042C  0140               	movlb	0	; select bank0
 11759  042D  00B2               	movwf	___flmul@a
 11760  042E  0141               	movlb	1	; select bank1
 11761  042F  0867               	movf	(efgtoa@u+3)^(0+128),w
 11762  0430  0140               	movlb	0	; select bank0
 11763  0431  00B1               	movwf	___flmul@b+3
 11764  0432  0141               	movlb	1	; select bank1
 11765  0433  0866               	movf	(efgtoa@u+2)^(0+128),w
 11766  0434  0140               	movlb	0	; select bank0
 11767  0435  00B0               	movwf	___flmul@b+2
 11768  0436  0141               	movlb	1	; select bank1
 11769  0437  0865               	movf	(efgtoa@u+1)^(0+128),w
 11770  0438  0140               	movlb	0	; select bank0
 11771  0439  00AF               	movwf	___flmul@b+1
 11772  043A  0141               	movlb	1	; select bank1
 11773  043B  0864               	movf	efgtoa@u^(0+128),w
 11774  043C  0140               	movlb	0	; select bank0
 11775  043D  00AE               	movwf	___flmul@b
 11776  043E  318A  2227  3180   	fcall	___flmul
 11777  0441  0140               	movlb	0	; select bank0
 11778  0442  0831               	movf	?___flmul+3,w
 11779  0443  00DF               	movwf	___flsub@a+3
 11780  0444  0830               	movf	?___flmul+2,w
 11781  0445  00DE               	movwf	___flsub@a+2
 11782  0446  082F               	movf	?___flmul+1,w
 11783  0447  00DD               	movwf	___flsub@a+1
 11784  0448  082E               	movf	?___flmul,w
 11785  0449  00DC               	movwf	___flsub@a
 11786  044A  0141               	movlb	1	; select bank1
 11787  044B  0855               	movf	(efgtoa@h+3)^(0+128),w
 11788  044C  0140               	movlb	0	; select bank0
 11789  044D  00E3               	movwf	___flsub@b+3
 11790  044E  0141               	movlb	1	; select bank1
 11791  044F  0854               	movf	(efgtoa@h+2)^(0+128),w
 11792  0450  0140               	movlb	0	; select bank0
 11793  0451  00E2               	movwf	___flsub@b+2
 11794  0452  0141               	movlb	1	; select bank1
 11795  0453  0853               	movf	(efgtoa@h+1)^(0+128),w
 11796  0454  0140               	movlb	0	; select bank0
 11797  0455  00E1               	movwf	___flsub@b+1
 11798  0456  0141               	movlb	1	; select bank1
 11799  0457  0852               	movf	efgtoa@h^(0+128),w
 11800  0458  0140               	movlb	0	; select bank0
 11801  0459  00E0               	movwf	___flsub@b
 11802  045A  31AB  2319  3180   	fcall	___flsub
 11803  045D  0140               	movlb	0	; select bank0
 11804  045E  085F               	movf	?___flsub+3,w
 11805  045F  0141               	movlb	1	; select bank1
 11806  0460  00D5               	movwf	(efgtoa@h+3)^(0+128)
 11807  0461  0140               	movlb	0	; select bank0
 11808  0462  085E               	movf	?___flsub+2,w
 11809  0463  0141               	movlb	1	; select bank1
 11810  0464  00D4               	movwf	(efgtoa@h+2)^(0+128)
 11811  0465  0140               	movlb	0	; select bank0
 11812  0466  085D               	movf	?___flsub+1,w
 11813  0467  0141               	movlb	1	; select bank1
 11814  0468  00D3               	movwf	(efgtoa@h+1)^(0+128)
 11815  0469  0140               	movlb	0	; select bank0
 11816  046A  085C               	movf	?___flsub,w
 11817  046B  0141               	movlb	1	; select bank1
 11818  046C  00D2               	movwf	efgtoa@h^(0+128)
 11819                           
 11820                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 422:       
      +                            u = u/10.0;
 11821  046D  3041               	movlw	65
 11822  046E  0140               	movlb	0	; select bank0
 11823  046F  00CB               	movwf	___fldiv@a+3
 11824  0470  3020               	movlw	32
 11825  0471  00CA               	movwf	___fldiv@a+2
 11826  0472  3000               	movlw	0
 11827  0473  00C9               	movwf	___fldiv@a+1
 11828  0474  3000               	movlw	0
 11829  0475  00C8               	movwf	___fldiv@a
 11830  0476  0141               	movlb	1	; select bank1
 11831  0477  0867               	movf	(efgtoa@u+3)^(0+128),w
 11832  0478  0140               	movlb	0	; select bank0
 11833  0479  00CF               	movwf	___fldiv@b+3
 11834  047A  0141               	movlb	1	; select bank1
 11835  047B  0866               	movf	(efgtoa@u+2)^(0+128),w
 11836  047C  0140               	movlb	0	; select bank0
 11837  047D  00CE               	movwf	___fldiv@b+2
 11838  047E  0141               	movlb	1	; select bank1
 11839  047F  0865               	movf	(efgtoa@u+1)^(0+128),w
 11840  0480  0140               	movlb	0	; select bank0
 11841  0481  00CD               	movwf	___fldiv@b+1
 11842  0482  0141               	movlb	1	; select bank1
 11843  0483  0864               	movf	efgtoa@u^(0+128),w
 11844  0484  0140               	movlb	0	; select bank0
 11845  0485  00CC               	movwf	___fldiv@b
 11846  0486  3191  21D0  3180   	fcall	___fldiv
 11847  0489  0140               	movlb	0	; select bank0
 11848  048A  084B               	movf	?___fldiv+3,w
 11849  048B  0141               	movlb	1	; select bank1
 11850  048C  00E7               	movwf	(efgtoa@u+3)^(0+128)
 11851  048D  0140               	movlb	0	; select bank0
 11852  048E  084A               	movf	?___fldiv+2,w
 11853  048F  0141               	movlb	1	; select bank1
 11854  0490  00E6               	movwf	(efgtoa@u+2)^(0+128)
 11855  0491  0140               	movlb	0	; select bank0
 11856  0492  0849               	movf	?___fldiv+1,w
 11857  0493  0141               	movlb	1	; select bank1
 11858  0494  00E5               	movwf	(efgtoa@u+1)^(0+128)
 11859  0495  0140               	movlb	0	; select bank0
 11860  0496  0848               	movf	?___fldiv,w
 11861  0497  0141               	movlb	1	; select bank1
 11862  0498  00E4               	movwf	efgtoa@u^(0+128)
 11863                           
 11864                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 423:       
      +                            ++i;
 11865  0499  3001               	movlw	1
 11866  049A  07DA               	addwf	efgtoa@i^(0+128),f
 11867  049B  3000               	movlw	0
 11868  049C  3DDB               	addwfc	(efgtoa@i+1)^(0+128),f
 11869  049D  2BB6               	goto	l7964
 11870  049E                     l7966:	
 11871                           
 11872                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 427:     l 
      +                          = u*5.0;
 11873  049E  3040               	movlw	64
 11874  049F  0140               	movlb	0	; select bank0
 11875  04A0  00B1               	movwf	___flmul@b+3
 11876  04A1  30A0               	movlw	160
 11877  04A2  00B0               	movwf	___flmul@b+2
 11878  04A3  3000               	movlw	0
 11879  04A4  00AF               	movwf	___flmul@b+1
 11880  04A5  3000               	movlw	0
 11881  04A6  00AE               	movwf	___flmul@b
 11882  04A7  0141               	movlb	1	; select bank1
 11883  04A8  0867               	movf	(efgtoa@u+3)^(0+128),w
 11884  04A9  0140               	movlb	0	; select bank0
 11885  04AA  00B5               	movwf	___flmul@a+3
 11886  04AB  0141               	movlb	1	; select bank1
 11887  04AC  0866               	movf	(efgtoa@u+2)^(0+128),w
 11888  04AD  0140               	movlb	0	; select bank0
 11889  04AE  00B4               	movwf	___flmul@a+2
 11890  04AF  0141               	movlb	1	; select bank1
 11891  04B0  0865               	movf	(efgtoa@u+1)^(0+128),w
 11892  04B1  0140               	movlb	0	; select bank0
 11893  04B2  00B3               	movwf	___flmul@a+1
 11894  04B3  0141               	movlb	1	; select bank1
 11895  04B4  0864               	movf	efgtoa@u^(0+128),w
 11896  04B5  0140               	movlb	0	; select bank0
 11897  04B6  00B2               	movwf	___flmul@a
 11898  04B7  318A  2227  3180   	fcall	___flmul
 11899  04BA  0140               	movlb	0	; select bank0
 11900  04BB  0831               	movf	?___flmul+3,w
 11901  04BC  0141               	movlb	1	; select bank1
 11902  04BD  00D9               	movwf	(efgtoa@l+3)^(0+128)
 11903  04BE  0140               	movlb	0	; select bank0
 11904  04BF  0830               	movf	?___flmul+2,w
 11905  04C0  0141               	movlb	1	; select bank1
 11906  04C1  00D8               	movwf	(efgtoa@l+2)^(0+128)
 11907  04C2  0140               	movlb	0	; select bank0
 11908  04C3  082F               	movf	?___flmul+1,w
 11909  04C4  0141               	movlb	1	; select bank1
 11910  04C5  00D7               	movwf	(efgtoa@l+1)^(0+128)
 11911  04C6  0140               	movlb	0	; select bank0
 11912  04C7  082E               	movf	?___flmul,w
 11913  04C8  0141               	movlb	1	; select bank1
 11914  04C9  00D6               	movwf	efgtoa@l^(0+128)
 11915                           
 11916                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 428:     if
      +                           (h < l) {
 11917  04CA  0855               	movf	(efgtoa@h+3)^(0+128),w
 11918  04CB  0140               	movlb	0	; select bank0
 11919  04CC  00CB               	movwf	___flge@ff1+3
 11920  04CD  0141               	movlb	1	; select bank1
 11921  04CE  0854               	movf	(efgtoa@h+2)^(0+128),w
 11922  04CF  0140               	movlb	0	; select bank0
 11923  04D0  00CA               	movwf	___flge@ff1+2
 11924  04D1  0141               	movlb	1	; select bank1
 11925  04D2  0853               	movf	(efgtoa@h+1)^(0+128),w
 11926  04D3  0140               	movlb	0	; select bank0
 11927  04D4  00C9               	movwf	___flge@ff1+1
 11928  04D5  0141               	movlb	1	; select bank1
 11929  04D6  0852               	movf	efgtoa@h^(0+128),w
 11930  04D7  0140               	movlb	0	; select bank0
 11931  04D8  00C8               	movwf	___flge@ff1
 11932  04D9  0141               	movlb	1	; select bank1
 11933  04DA  0859               	movf	(efgtoa@l+3)^(0+128),w
 11934  04DB  0140               	movlb	0	; select bank0
 11935  04DC  00CF               	movwf	___flge@ff2+3
 11936  04DD  0141               	movlb	1	; select bank1
 11937  04DE  0858               	movf	(efgtoa@l+2)^(0+128),w
 11938  04DF  0140               	movlb	0	; select bank0
 11939  04E0  00CE               	movwf	___flge@ff2+2
 11940  04E1  0141               	movlb	1	; select bank1
 11941  04E2  0857               	movf	(efgtoa@l+1)^(0+128),w
 11942  04E3  0140               	movlb	0	; select bank0
 11943  04E4  00CD               	movwf	___flge@ff2+1
 11944  04E5  0141               	movlb	1	; select bank1
 11945  04E6  0856               	movf	efgtoa@l^(0+128),w
 11946  04E7  0140               	movlb	0	; select bank0
 11947  04E8  00CC               	movwf	___flge@ff2
 11948  04E9  31A3  2365  3180   	fcall	___flge
 11949  04EC  1803               	btfsc	3,0
 11950  04ED  2CF1               	goto	l7970
 11951                           
 11952                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 429:       
      +                            l = 0.0;
 11953  04EE  3000               	movlw	0
 11954  04EF  0141               	movlb	1	; select bank1
 11955  04F0  2D1A               	goto	L13
 11956  04F1                     l7970:	
 11957                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 430:     } 
      +                          else {
 11958                           
 11959                           
 11960                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 432:       
      +                            if ((h == l) && !(d % 2)) {
 11961  04F1  0141               	movlb	1	; select bank1
 11962  04F2  0855               	movf	(efgtoa@h+3)^(0+128),w
 11963  04F3  0140               	movlb	0	; select bank0
 11964  04F4  00A3               	movwf	___fleq@ff1+3
 11965  04F5  0141               	movlb	1	; select bank1
 11966  04F6  0854               	movf	(efgtoa@h+2)^(0+128),w
 11967  04F7  0140               	movlb	0	; select bank0
 11968  04F8  00A2               	movwf	___fleq@ff1+2
 11969  04F9  0141               	movlb	1	; select bank1
 11970  04FA  0853               	movf	(efgtoa@h+1)^(0+128),w
 11971  04FB  0140               	movlb	0	; select bank0
 11972  04FC  00A1               	movwf	___fleq@ff1+1
 11973  04FD  0141               	movlb	1	; select bank1
 11974  04FE  0852               	movf	efgtoa@h^(0+128),w
 11975  04FF  0140               	movlb	0	; select bank0
 11976  0500  00A0               	movwf	___fleq@ff1
 11977  0501  0141               	movlb	1	; select bank1
 11978  0502  0859               	movf	(efgtoa@l+3)^(0+128),w
 11979  0503  0140               	movlb	0	; select bank0
 11980  0504  00A7               	movwf	___fleq@ff2+3
 11981  0505  0141               	movlb	1	; select bank1
 11982  0506  0858               	movf	(efgtoa@l+2)^(0+128),w
 11983  0507  0140               	movlb	0	; select bank0
 11984  0508  00A6               	movwf	___fleq@ff2+2
 11985  0509  0141               	movlb	1	; select bank1
 11986  050A  0857               	movf	(efgtoa@l+1)^(0+128),w
 11987  050B  0140               	movlb	0	; select bank0
 11988  050C  00A5               	movwf	___fleq@ff2+1
 11989  050D  0141               	movlb	1	; select bank1
 11990  050E  0856               	movf	efgtoa@l^(0+128),w
 11991  050F  0140               	movlb	0	; select bank0
 11992  0510  00A4               	movwf	___fleq@ff2
 11993  0511  31AE  2622  3180   	fcall	___fleq
 11994  0514  1C03               	btfss	3,0
 11995  0515  2D21               	goto	l7976
 11996  0516  0141               	movlb	1	; select bank1
 11997  0517  1847               	btfsc	efgtoa@d^(0+128),0
 11998  0518  2D21               	goto	l7976
 11999                           
 12000                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 433:       
      +                                l = 0.0;
 12001  0519  3000               	movlw	0
 12002  051A                     L13:	
 12003  051A  00D9               	movwf	(efgtoa@l+3)^(0+128)
 12004  051B  3000               	movlw	0
 12005  051C  00D8               	movwf	(efgtoa@l+2)^(0+128)
 12006  051D  3000               	movlw	0
 12007  051E  00D7               	movwf	(efgtoa@l+1)^(0+128)
 12008  051F  3000               	movlw	0
 12009  0520  00D6               	movwf	efgtoa@l^(0+128)
 12010  0521                     l7976:	
 12011                           
 12012                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 438:     h 
      +                          = g + l;
 12013  0521  0141               	movlb	1	; select bank1
 12014  0522  0859               	movf	(efgtoa@l+3)^(0+128),w
 12015  0523  0140               	movlb	0	; select bank0
 12016  0524  00CB               	movwf	___fladd@b+3
 12017  0525  0141               	movlb	1	; select bank1
 12018  0526  0858               	movf	(efgtoa@l+2)^(0+128),w
 12019  0527  0140               	movlb	0	; select bank0
 12020  0528  00CA               	movwf	___fladd@b+2
 12021  0529  0141               	movlb	1	; select bank1
 12022  052A  0857               	movf	(efgtoa@l+1)^(0+128),w
 12023  052B  0140               	movlb	0	; select bank0
 12024  052C  00C9               	movwf	___fladd@b+1
 12025  052D  0141               	movlb	1	; select bank1
 12026  052E  0856               	movf	efgtoa@l^(0+128),w
 12027  052F  0140               	movlb	0	; select bank0
 12028  0530  00C8               	movwf	___fladd@b
 12029  0531  0141               	movlb	1	; select bank1
 12030  0532  085F               	movf	(efgtoa@g+3)^(0+128),w
 12031  0533  0140               	movlb	0	; select bank0
 12032  0534  00CF               	movwf	___fladd@a+3
 12033  0535  0141               	movlb	1	; select bank1
 12034  0536  085E               	movf	(efgtoa@g+2)^(0+128),w
 12035  0537  0140               	movlb	0	; select bank0
 12036  0538  00CE               	movwf	___fladd@a+2
 12037  0539  0141               	movlb	1	; select bank1
 12038  053A  085D               	movf	(efgtoa@g+1)^(0+128),w
 12039  053B  0140               	movlb	0	; select bank0
 12040  053C  00CD               	movwf	___fladd@a+1
 12041  053D  0141               	movlb	1	; select bank1
 12042  053E  085C               	movf	efgtoa@g^(0+128),w
 12043  053F  0140               	movlb	0	; select bank0
 12044  0540  00CC               	movwf	___fladd@a
 12045  0541  3188  2045  3180   	fcall	___fladd
 12046  0544  0140               	movlb	0	; select bank0
 12047  0545  084B               	movf	?___fladd+3,w
 12048  0546  0141               	movlb	1	; select bank1
 12049  0547  00D5               	movwf	(efgtoa@h+3)^(0+128)
 12050  0548  0140               	movlb	0	; select bank0
 12051  0549  084A               	movf	?___fladd+2,w
 12052  054A  0141               	movlb	1	; select bank1
 12053  054B  00D4               	movwf	(efgtoa@h+2)^(0+128)
 12054  054C  0140               	movlb	0	; select bank0
 12055  054D  0849               	movf	?___fladd+1,w
 12056  054E  0141               	movlb	1	; select bank1
 12057  054F  00D3               	movwf	(efgtoa@h+1)^(0+128)
 12058  0550  0140               	movlb	0	; select bank0
 12059  0551  0848               	movf	?___fladd,w
 12060  0552  0141               	movlb	1	; select bank1
 12061  0553  00D2               	movwf	efgtoa@h^(0+128)
 12062                           
 12063                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 441:     u 
      +                          = ou;
 12064  0554  0832               	movf	(efgtoa@ou+3)^(0+128),w
 12065  0555  00E7               	movwf	(efgtoa@u+3)^(0+128)
 12066  0556  0831               	movf	(efgtoa@ou+2)^(0+128),w
 12067  0557  00E6               	movwf	(efgtoa@u+2)^(0+128)
 12068  0558  0830               	movf	(efgtoa@ou+1)^(0+128),w
 12069  0559  00E5               	movwf	(efgtoa@u+1)^(0+128)
 12070  055A  082F               	movf	efgtoa@ou^(0+128),w
 12071  055B  00E4               	movwf	efgtoa@u^(0+128)
 12072                           
 12073                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 442:     ne
      +                           = (nmode == 'e') ? 0 : e;
 12074  055C  3065               	movlw	101
 12075  055D  064E               	xorwf	efgtoa@nmode^(0+128),w
 12076  055E  1903               	btfsc	3,2
 12077  055F  2D65               	goto	l7984
 12078  0560  0861               	movf	(efgtoa@e+1)^(0+128),w
 12079  0561  00C6               	movwf	(efgtoa@ne+1)^(0+128)
 12080  0562  0860               	movf	efgtoa@e^(0+128),w
 12081  0563  00C5               	movwf	efgtoa@ne^(0+128)
 12082  0564  2D67               	goto	l838
 12083  0565                     l7984:	
 12084  0565  01C5               	clrf	efgtoa@ne^(0+128)
 12085  0566  01C6               	clrf	(efgtoa@ne+1)^(0+128)
 12086  0567                     l838:	
 12087                           
 12088                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 443:     pp
      +                           = 0;
 12089  0567  01C1               	clrf	efgtoa@pp^(0+128)
 12090  0568  01C2               	clrf	(efgtoa@pp+1)^(0+128)
 12091                           
 12092                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 444:     t 
      +                          = 0;
 12093  0569  01BF               	clrf	efgtoa@t^(0+128)
 12094  056A  01C0               	clrf	(efgtoa@t+1)^(0+128)
 12095                           
 12096                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 445:     i 
      +                          = 0;
 12097  056B  01DA               	clrf	efgtoa@i^(0+128)
 12098  056C  01DB               	clrf	(efgtoa@i+1)^(0+128)
 12099                           
 12100                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 446:     wh
      +                          ile ((i < m) && (n < (80 - 5))) {
 12101  056D  2EAE               	goto	l8034
 12102  056E                     l7986:	
 12103                           
 12104                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 447:       
      +                            l = floorf(h/u);
 12105  056E  0141               	movlb	1	; select bank1
 12106  056F  0867               	movf	(efgtoa@u+3)^(0+128),w
 12107  0570  0140               	movlb	0	; select bank0
 12108  0571  00CB               	movwf	___fldiv@a+3
 12109  0572  0141               	movlb	1	; select bank1
 12110  0573  0866               	movf	(efgtoa@u+2)^(0+128),w
 12111  0574  0140               	movlb	0	; select bank0
 12112  0575  00CA               	movwf	___fldiv@a+2
 12113  0576  0141               	movlb	1	; select bank1
 12114  0577  0865               	movf	(efgtoa@u+1)^(0+128),w
 12115  0578  0140               	movlb	0	; select bank0
 12116  0579  00C9               	movwf	___fldiv@a+1
 12117  057A  0141               	movlb	1	; select bank1
 12118  057B  0864               	movf	efgtoa@u^(0+128),w
 12119  057C  0140               	movlb	0	; select bank0
 12120  057D  00C8               	movwf	___fldiv@a
 12121  057E  0141               	movlb	1	; select bank1
 12122  057F  0855               	movf	(efgtoa@h+3)^(0+128),w
 12123  0580  0140               	movlb	0	; select bank0
 12124  0581  00CF               	movwf	___fldiv@b+3
 12125  0582  0141               	movlb	1	; select bank1
 12126  0583  0854               	movf	(efgtoa@h+2)^(0+128),w
 12127  0584  0140               	movlb	0	; select bank0
 12128  0585  00CE               	movwf	___fldiv@b+2
 12129  0586  0141               	movlb	1	; select bank1
 12130  0587  0853               	movf	(efgtoa@h+1)^(0+128),w
 12131  0588  0140               	movlb	0	; select bank0
 12132  0589  00CD               	movwf	___fldiv@b+1
 12133  058A  0141               	movlb	1	; select bank1
 12134  058B  0852               	movf	efgtoa@h^(0+128),w
 12135  058C  0140               	movlb	0	; select bank0
 12136  058D  00CC               	movwf	___fldiv@b
 12137  058E  3191  21D0  3180   	fcall	___fldiv
 12138  0591  0140               	movlb	0	; select bank0
 12139  0592  084B               	movf	?___fldiv+3,w
 12140  0593  00E5               	movwf	floorf@x+3
 12141  0594  084A               	movf	?___fldiv+2,w
 12142  0595  00E4               	movwf	floorf@x+2
 12143  0596  0849               	movf	?___fldiv+1,w
 12144  0597  00E3               	movwf	floorf@x+1
 12145  0598  0848               	movf	?___fldiv,w
 12146  0599  00E2               	movwf	floorf@x
 12147  059A  319D  2581  3180   	fcall	_floorf
 12148  059D  0140               	movlb	0	; select bank0
 12149  059E  0865               	movf	?_floorf+3,w
 12150  059F  0141               	movlb	1	; select bank1
 12151  05A0  00D9               	movwf	(efgtoa@l+3)^(0+128)
 12152  05A1  0140               	movlb	0	; select bank0
 12153  05A2  0864               	movf	?_floorf+2,w
 12154  05A3  0141               	movlb	1	; select bank1
 12155  05A4  00D8               	movwf	(efgtoa@l+2)^(0+128)
 12156  05A5  0140               	movlb	0	; select bank0
 12157  05A6  0863               	movf	?_floorf+1,w
 12158  05A7  0141               	movlb	1	; select bank1
 12159  05A8  00D7               	movwf	(efgtoa@l+1)^(0+128)
 12160  05A9  0140               	movlb	0	; select bank0
 12161  05AA  0862               	movf	?_floorf,w
 12162  05AB  0141               	movlb	1	; select bank1
 12163  05AC  00D6               	movwf	efgtoa@l^(0+128)
 12164                           
 12165                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 448:       
      +                            d = (int)l;
 12166  05AD  0859               	movf	(efgtoa@l+3)^(0+128),w
 12167  05AE  0140               	movlb	0	; select bank0
 12168  05AF  00A3               	movwf	___fltol@f1+3
 12169  05B0  0141               	movlb	1	; select bank1
 12170  05B1  0858               	movf	(efgtoa@l+2)^(0+128),w
 12171  05B2  0140               	movlb	0	; select bank0
 12172  05B3  00A2               	movwf	___fltol@f1+2
 12173  05B4  0141               	movlb	1	; select bank1
 12174  05B5  0857               	movf	(efgtoa@l+1)^(0+128),w
 12175  05B6  0140               	movlb	0	; select bank0
 12176  05B7  00A1               	movwf	___fltol@f1+1
 12177  05B8  0141               	movlb	1	; select bank1
 12178  05B9  0856               	movf	efgtoa@l^(0+128),w
 12179  05BA  0140               	movlb	0	; select bank0
 12180  05BB  00A0               	movwf	___fltol@f1
 12181  05BC  31A2  221E  3180   	fcall	___fltol
 12182  05BF  0140               	movlb	0	; select bank0
 12183  05C0  0821               	movf	?___fltol+1,w
 12184  05C1  0141               	movlb	1	; select bank1
 12185  05C2  00C8               	movwf	(efgtoa@d+1)^(0+128)
 12186  05C3  0140               	movlb	0	; select bank0
 12187  05C4  0820               	movf	?___fltol,w
 12188  05C5  0141               	movlb	1	; select bank1
 12189  05C6  00C7               	movwf	efgtoa@d^(0+128)
 12190                           
 12191                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 449:       
      +                            if (!(flags & (1 << 4)) && !d && (mode == 'g') && (ne < 0)) {
 12192  05C7  0143               	movlb	3	; select bank3
 12193  05C8  1A32               	btfsc	_flags^(0+384),4
 12194  05C9  2DD9               	goto	l7998
 12195  05CA  0141               	movlb	1	; select bank1
 12196  05CB  0847               	movf	efgtoa@d^(0+128),w
 12197  05CC  0448               	iorwf	(efgtoa@d+1)^(0+128),w
 12198  05CD  1D03               	btfss	3,2
 12199  05CE  2DD9               	goto	l7998
 12200  05CF  3067               	movlw	103
 12201  05D0  0651               	xorwf	efgtoa@mode^(0+128),w
 12202  05D1  1903               	btfsc	3,2
 12203  05D2  1FC6               	btfss	(efgtoa@ne+1)^(0+128),7
 12204  05D3  2DD9               	goto	l7998
 12205                           
 12206                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 450:       
      +                                ++t;
 12207  05D4  3001               	movlw	1
 12208  05D5  07BF               	addwf	efgtoa@t^(0+128),f
 12209  05D6  3000               	movlw	0
 12210  05D7  3DC0               	addwfc	(efgtoa@t+1)^(0+128),f
 12211                           
 12212                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 451:       
      +                            } else {
 12213  05D8  2E2C               	goto	l8026
 12214  05D9                     l7998:	
 12215                           
 12216                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 452:       
      +                                if (!pp && (ne < 0)) {
 12217  05D9  0141               	movlb	1	; select bank1
 12218  05DA  0841               	movf	efgtoa@pp^(0+128),w
 12219  05DB  0442               	iorwf	(efgtoa@pp+1)^(0+128),w
 12220  05DC  1903               	btfsc	3,2
 12221  05DD  1FC6               	btfss	(efgtoa@ne+1)^(0+128),7
 12222  05DE  2DF8               	goto	l8018
 12223                           
 12224                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 453:       
      +                                    dbuf[n++] = '.';
 12225  05DF  302E               	movlw	46
 12226  05E0  0140               	movlb	0	; select bank0
 12227  05E1  00EC               	movwf	??_efgtoa
 12228  05E2  0141               	movlb	1	; select bank1
 12229  05E3  0862               	movf	efgtoa@n^(0+128),w
 12230  05E4  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 12231  05E5  0086               	movwf	6
 12232  05E6  3003               	movlw	3	; select bank6/7
 12233  05E7  0087               	movwf	7
 12234  05E8  0140               	movlb	0	; select bank0
 12235  05E9  086C               	movf	??_efgtoa,w
 12236  05EA  0081               	movwf	1
 12237  05EB  3001               	movlw	1
 12238  05EC  0141               	movlb	1	; select bank1
 12239  05ED  07E2               	addwf	efgtoa@n^(0+128),f
 12240  05EE  3000               	movlw	0
 12241  05EF  3DE3               	addwfc	(efgtoa@n+1)^(0+128),f
 12242                           
 12243                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 454:       
      +                                    --w;
 12244  05F0  30FF               	movlw	255
 12245  05F1  07CF               	addwf	efgtoa@w^(0+128),f
 12246  05F2  30FF               	movlw	255
 12247  05F3  3DD0               	addwfc	(efgtoa@w+1)^(0+128),f
 12248                           
 12249                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 455:       
      +                                    pp = 1;
 12250  05F4  3001               	movlw	1
 12251  05F5  00C1               	movwf	efgtoa@pp^(0+128)
 12252  05F6  3000               	movlw	0
 12253  05F7  00C2               	movwf	(efgtoa@pp^(0+128)+1)
 12254  05F8                     l8018:	
 12255                           
 12256                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 457:       
      +                                while (t) {
 12257  05F8  083F               	movf	efgtoa@t^(0+128),w
 12258  05F9  0440               	iorwf	(efgtoa@t+1)^(0+128),w
 12259  05FA  1903               	btfsc	3,2
 12260  05FB  2E16               	goto	l8020
 12261                           
 12262                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 458:       
      +                                    dbuf[n++] = '0';
 12263  05FC  3030               	movlw	48
 12264  05FD  0140               	movlb	0	; select bank0
 12265  05FE  00EC               	movwf	??_efgtoa
 12266  05FF  0141               	movlb	1	; select bank1
 12267  0600  0862               	movf	efgtoa@n^(0+128),w
 12268  0601  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 12269  0602  0086               	movwf	6
 12270  0603  3003               	movlw	3	; select bank6/7
 12271  0604  0087               	movwf	7
 12272  0605  0140               	movlb	0	; select bank0
 12273  0606  086C               	movf	??_efgtoa,w
 12274  0607  0081               	movwf	1
 12275  0608  3001               	movlw	1
 12276  0609  0141               	movlb	1	; select bank1
 12277  060A  07E2               	addwf	efgtoa@n^(0+128),f
 12278  060B  3000               	movlw	0
 12279  060C  3DE3               	addwfc	(efgtoa@n+1)^(0+128),f
 12280                           
 12281                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 459:       
      +                                    --w;
 12282  060D  30FF               	movlw	255
 12283  060E  07CF               	addwf	efgtoa@w^(0+128),f
 12284  060F  30FF               	movlw	255
 12285  0610  3DD0               	addwfc	(efgtoa@w+1)^(0+128),f
 12286                           
 12287                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 460:       
      +                                    --t;
 12288  0611  30FF               	movlw	255
 12289  0612  07BF               	addwf	efgtoa@t^(0+128),f
 12290  0613  30FF               	movlw	255
 12291  0614  3DC0               	addwfc	(efgtoa@t+1)^(0+128),f
 12292  0615  2DF8               	goto	l8018
 12293  0616                     l8020:	
 12294                           
 12295                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 462:       
      +                                dbuf[n++] = '0' + d;
 12296  0616  0847               	movf	efgtoa@d^(0+128),w
 12297  0617  3E30               	addlw	48
 12298  0618  0140               	movlb	0	; select bank0
 12299  0619  00EC               	movwf	??_efgtoa
 12300  061A  0141               	movlb	1	; select bank1
 12301  061B  0862               	movf	efgtoa@n^(0+128),w
 12302  061C  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 12303  061D  0086               	movwf	6
 12304  061E  3003               	movlw	3	; select bank6/7
 12305  061F  0087               	movwf	7
 12306  0620  0140               	movlb	0	; select bank0
 12307  0621  086C               	movf	??_efgtoa,w
 12308  0622  0081               	movwf	1
 12309  0623  3001               	movlw	1
 12310  0624  0141               	movlb	1	; select bank1
 12311  0625  07E2               	addwf	efgtoa@n^(0+128),f
 12312  0626  3000               	movlw	0
 12313  0627  3DE3               	addwfc	(efgtoa@n+1)^(0+128),f
 12314                           
 12315                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 463:       
      +                                --w;
 12316  0628  30FF               	movlw	255
 12317  0629  07CF               	addwf	efgtoa@w^(0+128),f
 12318  062A  30FF               	movlw	255
 12319  062B  3DD0               	addwfc	(efgtoa@w+1)^(0+128),f
 12320  062C                     l8026:	
 12321                           
 12322                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 465:       
      +                            h -= l*u;
 12323  062C  0859               	movf	(efgtoa@l+3)^(0+128),w
 12324  062D  0140               	movlb	0	; select bank0
 12325  062E  00B5               	movwf	___flmul@a+3
 12326  062F  0141               	movlb	1	; select bank1
 12327  0630  0858               	movf	(efgtoa@l+2)^(0+128),w
 12328  0631  0140               	movlb	0	; select bank0
 12329  0632  00B4               	movwf	___flmul@a+2
 12330  0633  0141               	movlb	1	; select bank1
 12331  0634  0857               	movf	(efgtoa@l+1)^(0+128),w
 12332  0635  0140               	movlb	0	; select bank0
 12333  0636  00B3               	movwf	___flmul@a+1
 12334  0637  0141               	movlb	1	; select bank1
 12335  0638  0856               	movf	efgtoa@l^(0+128),w
 12336  0639  0140               	movlb	0	; select bank0
 12337  063A  00B2               	movwf	___flmul@a
 12338  063B  0141               	movlb	1	; select bank1
 12339  063C  0867               	movf	(efgtoa@u+3)^(0+128),w
 12340  063D  0140               	movlb	0	; select bank0
 12341  063E  00B1               	movwf	___flmul@b+3
 12342  063F  0141               	movlb	1	; select bank1
 12343  0640  0866               	movf	(efgtoa@u+2)^(0+128),w
 12344  0641  0140               	movlb	0	; select bank0
 12345  0642  00B0               	movwf	___flmul@b+2
 12346  0643  0141               	movlb	1	; select bank1
 12347  0644  0865               	movf	(efgtoa@u+1)^(0+128),w
 12348  0645  0140               	movlb	0	; select bank0
 12349  0646  00AF               	movwf	___flmul@b+1
 12350  0647  0141               	movlb	1	; select bank1
 12351  0648  0864               	movf	efgtoa@u^(0+128),w
 12352  0649  0140               	movlb	0	; select bank0
 12353  064A  00AE               	movwf	___flmul@b
 12354  064B  318A  2227  3180   	fcall	___flmul
 12355  064E  0140               	movlb	0	; select bank0
 12356  064F  0831               	movf	?___flmul+3,w
 12357  0650  00DF               	movwf	___flsub@a+3
 12358  0651  0830               	movf	?___flmul+2,w
 12359  0652  00DE               	movwf	___flsub@a+2
 12360  0653  082F               	movf	?___flmul+1,w
 12361  0654  00DD               	movwf	___flsub@a+1
 12362  0655  082E               	movf	?___flmul,w
 12363  0656  00DC               	movwf	___flsub@a
 12364  0657  0141               	movlb	1	; select bank1
 12365  0658  0855               	movf	(efgtoa@h+3)^(0+128),w
 12366  0659  0140               	movlb	0	; select bank0
 12367  065A  00E3               	movwf	___flsub@b+3
 12368  065B  0141               	movlb	1	; select bank1
 12369  065C  0854               	movf	(efgtoa@h+2)^(0+128),w
 12370  065D  0140               	movlb	0	; select bank0
 12371  065E  00E2               	movwf	___flsub@b+2
 12372  065F  0141               	movlb	1	; select bank1
 12373  0660  0853               	movf	(efgtoa@h+1)^(0+128),w
 12374  0661  0140               	movlb	0	; select bank0
 12375  0662  00E1               	movwf	___flsub@b+1
 12376  0663  0141               	movlb	1	; select bank1
 12377  0664  0852               	movf	efgtoa@h^(0+128),w
 12378  0665  0140               	movlb	0	; select bank0
 12379  0666  00E0               	movwf	___flsub@b
 12380  0667  31AB  2319  3180   	fcall	___flsub
 12381  066A  0140               	movlb	0	; select bank0
 12382  066B  085F               	movf	?___flsub+3,w
 12383  066C  0141               	movlb	1	; select bank1
 12384  066D  00D5               	movwf	(efgtoa@h+3)^(0+128)
 12385  066E  0140               	movlb	0	; select bank0
 12386  066F  085E               	movf	?___flsub+2,w
 12387  0670  0141               	movlb	1	; select bank1
 12388  0671  00D4               	movwf	(efgtoa@h+2)^(0+128)
 12389  0672  0140               	movlb	0	; select bank0
 12390  0673  085D               	movf	?___flsub+1,w
 12391  0674  0141               	movlb	1	; select bank1
 12392  0675  00D3               	movwf	(efgtoa@h+1)^(0+128)
 12393  0676  0140               	movlb	0	; select bank0
 12394  0677  085C               	movf	?___flsub,w
 12395  0678  0141               	movlb	1	; select bank1
 12396  0679  00D2               	movwf	efgtoa@h^(0+128)
 12397                           
 12398                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 466:       
      +                            u = u/10.0;
 12399  067A  3041               	movlw	65
 12400  067B  0140               	movlb	0	; select bank0
 12401  067C  00CB               	movwf	___fldiv@a+3
 12402  067D  3020               	movlw	32
 12403  067E  00CA               	movwf	___fldiv@a+2
 12404  067F  3000               	movlw	0
 12405  0680  00C9               	movwf	___fldiv@a+1
 12406  0681  3000               	movlw	0
 12407  0682  00C8               	movwf	___fldiv@a
 12408  0683  0141               	movlb	1	; select bank1
 12409  0684  0867               	movf	(efgtoa@u+3)^(0+128),w
 12410  0685  0140               	movlb	0	; select bank0
 12411  0686  00CF               	movwf	___fldiv@b+3
 12412  0687  0141               	movlb	1	; select bank1
 12413  0688  0866               	movf	(efgtoa@u+2)^(0+128),w
 12414  0689  0140               	movlb	0	; select bank0
 12415  068A  00CE               	movwf	___fldiv@b+2
 12416  068B  0141               	movlb	1	; select bank1
 12417  068C  0865               	movf	(efgtoa@u+1)^(0+128),w
 12418  068D  0140               	movlb	0	; select bank0
 12419  068E  00CD               	movwf	___fldiv@b+1
 12420  068F  0141               	movlb	1	; select bank1
 12421  0690  0864               	movf	efgtoa@u^(0+128),w
 12422  0691  0140               	movlb	0	; select bank0
 12423  0692  00CC               	movwf	___fldiv@b
 12424  0693  3191  21D0  3180   	fcall	___fldiv
 12425  0696  0140               	movlb	0	; select bank0
 12426  0697  084B               	movf	?___fldiv+3,w
 12427  0698  0141               	movlb	1	; select bank1
 12428  0699  00E7               	movwf	(efgtoa@u+3)^(0+128)
 12429  069A  0140               	movlb	0	; select bank0
 12430  069B  084A               	movf	?___fldiv+2,w
 12431  069C  0141               	movlb	1	; select bank1
 12432  069D  00E6               	movwf	(efgtoa@u+2)^(0+128)
 12433  069E  0140               	movlb	0	; select bank0
 12434  069F  0849               	movf	?___fldiv+1,w
 12435  06A0  0141               	movlb	1	; select bank1
 12436  06A1  00E5               	movwf	(efgtoa@u+1)^(0+128)
 12437  06A2  0140               	movlb	0	; select bank0
 12438  06A3  0848               	movf	?___fldiv,w
 12439  06A4  0141               	movlb	1	; select bank1
 12440  06A5  00E4               	movwf	efgtoa@u^(0+128)
 12441                           
 12442                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 467:       
      +                            --ne;
 12443  06A6  30FF               	movlw	255
 12444  06A7  07C5               	addwf	efgtoa@ne^(0+128),f
 12445  06A8  30FF               	movlw	255
 12446  06A9  3DC6               	addwfc	(efgtoa@ne+1)^(0+128),f
 12447                           
 12448                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 468:       
      +                            ++i;
 12449  06AA  3001               	movlw	1
 12450  06AB  07DA               	addwf	efgtoa@i^(0+128),f
 12451  06AC  3000               	movlw	0
 12452  06AD  3DDB               	addwfc	(efgtoa@i+1)^(0+128),f
 12453  06AE                     l8034:	
 12454                           
 12455                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 446:     wh
      +                          ile ((i < m) && (n < (80 - 5))) {
 12456  06AE  085B               	movf	(efgtoa@i+1)^(0+128),w
 12457  06AF  3A80               	xorlw	128
 12458  06B0  0140               	movlb	0	; select bank0
 12459  06B1  00EC               	movwf	??_efgtoa
 12460  06B2  0141               	movlb	1	; select bank1
 12461  06B3  0844               	movf	(efgtoa@m+1)^(0+128),w
 12462  06B4  3A80               	xorlw	128
 12463  06B5  0140               	movlb	0	; select bank0
 12464  06B6  026C               	subwf	??_efgtoa,w
 12465  06B7  1D03               	skipz
 12466  06B8  2EBC               	goto	u11285
 12467  06B9  0141               	movlb	1	; select bank1
 12468  06BA  0843               	movf	efgtoa@m^(0+128),w
 12469  06BB  025A               	subwf	efgtoa@i^(0+128),w
 12470  06BC                     u11285:	
 12471  06BC  1803               	skipnc
 12472  06BD  2ECC               	goto	l8038
 12473  06BE  0141               	movlb	1	; select bank1
 12474  06BF  0863               	movf	(efgtoa@n+1)^(0+128),w
 12475  06C0  3A80               	xorlw	128
 12476  06C1  0140               	movlb	0	; select bank0
 12477  06C2  00EC               	movwf	??_efgtoa
 12478  06C3  3080               	movlw	128
 12479  06C4  026C               	subwf	??_efgtoa,w
 12480  06C5  1D03               	skipz
 12481  06C6  2ECA               	goto	u11295
 12482  06C7  304B               	movlw	75
 12483  06C8  0141               	movlb	1	; select bank1
 12484  06C9  0262               	subwf	efgtoa@n^(0+128),w
 12485  06CA                     u11295:	
 12486  06CA  1C03               	skipc
 12487  06CB  2D6E               	goto	l7986
 12488  06CC                     l8038:	
 12489                           
 12490                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 470:     if
      +                           (!pp && (flags & (1 << 4))) {
 12491  06CC  0141               	movlb	1	; select bank1
 12492  06CD  0841               	movf	efgtoa@pp^(0+128),w
 12493  06CE  0442               	iorwf	(efgtoa@pp+1)^(0+128),w
 12494  06CF  1D03               	btfss	3,2
 12495  06D0  2EE5               	goto	l8046
 12496  06D1  0143               	movlb	3	; select bank3
 12497  06D2  1E32               	btfss	_flags^(0+384),4
 12498  06D3  2EE5               	goto	l8046
 12499                           
 12500                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 471:       
      +                            dbuf[n++] = '.';
 12501  06D4  302E               	movlw	46
 12502  06D5  0140               	movlb	0	; select bank0
 12503  06D6  00EC               	movwf	??_efgtoa
 12504  06D7  0141               	movlb	1	; select bank1
 12505  06D8  0862               	movf	efgtoa@n^(0+128),w
 12506  06D9  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 12507  06DA  0086               	movwf	6
 12508  06DB  3003               	movlw	3	; select bank6/7
 12509  06DC  0087               	movwf	7
 12510  06DD  0140               	movlb	0	; select bank0
 12511  06DE  086C               	movf	??_efgtoa,w
 12512  06DF  0081               	movwf	1
 12513  06E0  3001               	movlw	1
 12514  06E1  0141               	movlb	1	; select bank1
 12515  06E2  07E2               	addwf	efgtoa@n^(0+128),f
 12516  06E3  3000               	movlw	0
 12517  06E4  3DE3               	addwfc	(efgtoa@n+1)^(0+128),f
 12518  06E5                     l8046:	
 12519                           
 12520                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 473:     db
      +                          uf[n] = '\0';
 12521  06E5  0141               	movlb	1	; select bank1
 12522  06E6  0862               	movf	efgtoa@n^(0+128),w
 12523  06E7  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 12524  06E8  0086               	movwf	6
 12525  06E9  3003               	movlw	3	; select bank6/7
 12526  06EA  0087               	movwf	7
 12527  06EB  0181               	clrf	1
 12528                           
 12529                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 476:     if
      +                           (nmode == 'e') {
 12530  06EC  3065               	movlw	101
 12531  06ED  064E               	xorwf	efgtoa@nmode^(0+128),w
 12532  06EE  1D03               	btfss	3,2
 12533  06EF  2FC8               	goto	l8108
 12534                           
 12535                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 477:       
      +                            i = sizeof(dbuf) - 1;
 12536  06F0  304F               	movlw	79
 12537  06F1  00DA               	movwf	efgtoa@i^(0+128)
 12538  06F2  3000               	movlw	0
 12539  06F3  00DB               	movwf	(efgtoa@i^(0+128)+1)
 12540                           
 12541                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 478:       
      +                            dbuf[i] = '\0';
 12542  06F4  085A               	movf	efgtoa@i^(0+128),w
 12543  06F5  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 12544  06F6  0086               	movwf	6
 12545  06F7  3003               	movlw	3	; select bank6/7
 12546  06F8  0087               	movwf	7
 12547  06F9  0181               	clrf	1
 12548                           
 12549                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 479:       
      +                            sign = 0;
 12550  06FA  01CA               	clrf	efgtoa@sign^(0+128)
 12551  06FB  01CB               	clrf	(efgtoa@sign+1)^(0+128)
 12552                           
 12553                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 480:       
      +                            if (e < 0) {
 12554  06FC  1FE1               	btfss	(efgtoa@e+1)^(0+128),7
 12555  06FD  2F07               	goto	l8062
 12556                           
 12557                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 481:       
      +                                sign = 1;
 12558  06FE  3001               	movlw	1
 12559  06FF  00CA               	movwf	efgtoa@sign^(0+128)
 12560  0700  3000               	movlw	0
 12561  0701  00CB               	movwf	(efgtoa@sign^(0+128)+1)
 12562                           
 12563                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 482:       
      +                                e = -e;
 12564  0702  09E0               	comf	efgtoa@e^(0+128),f
 12565  0703  09E1               	comf	(efgtoa@e+1)^(0+128),f
 12566  0704  0AE0               	incf	efgtoa@e^(0+128),f
 12567  0705  1903               	skipnz
 12568  0706  0AE1               	incf	(efgtoa@e+1)^(0+128),f
 12569  0707                     l8062:	
 12570                           
 12571                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 484:       
      +                            p = 2;
 12572  0707  3002               	movlw	2
 12573  0708  00CC               	movwf	efgtoa@p^(0+128)
 12574  0709  3000               	movlw	0
 12575  070A  00CD               	movwf	(efgtoa@p^(0+128)+1)
 12576  070B                     l8074:	
 12577                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 485:       
      +                            while (e || (0 < p)) {
 12578                           
 12579                           
 12580                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 485:       
      +                            while (e || (0 < p)) {
 12581  070B  0860               	movf	efgtoa@e^(0+128),w
 12582  070C  0461               	iorwf	(efgtoa@e+1)^(0+128),w
 12583  070D  1903               	btfsc	3,2
 12584  070E  2F51               	goto	l8076
 12585  070F                     l8064:	
 12586                           
 12587                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 486:       
      +                                --i;
 12588  070F  30FF               	movlw	255
 12589  0710  0141               	movlb	1	; select bank1
 12590  0711  07DA               	addwf	efgtoa@i^(0+128),f
 12591  0712  30FF               	movlw	255
 12592  0713  3DDB               	addwfc	(efgtoa@i+1)^(0+128),f
 12593                           
 12594                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 487:       
      +                                dbuf[i] = '0' + (e % 10);
 12595  0714  300A               	movlw	10
 12596  0715  0140               	movlb	0	; select bank0
 12597  0716  00A0               	movwf	___awmod@divisor
 12598  0717  3000               	movlw	0
 12599  0718  00A1               	movwf	___awmod@divisor+1
 12600  0719  0141               	movlb	1	; select bank1
 12601  071A  0861               	movf	(efgtoa@e+1)^(0+128),w
 12602  071B  0140               	movlb	0	; select bank0
 12603  071C  00A3               	movwf	___awmod@dividend+1
 12604  071D  0141               	movlb	1	; select bank1
 12605  071E  0860               	movf	efgtoa@e^(0+128),w
 12606  071F  0140               	movlb	0	; select bank0
 12607  0720  00A2               	movwf	___awmod@dividend
 12608  0721  31AD  2594  3180   	fcall	___awmod
 12609  0724  0140               	movlb	0	; select bank0
 12610  0725  0820               	movf	?___awmod,w
 12611  0726  3E30               	addlw	48
 12612  0727  00EC               	movwf	??_efgtoa
 12613  0728  0141               	movlb	1	; select bank1
 12614  0729  085A               	movf	efgtoa@i^(0+128),w
 12615  072A  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 12616  072B  0086               	movwf	6
 12617  072C  3003               	movlw	3	; select bank6/7
 12618  072D  0087               	movwf	7
 12619  072E  0140               	movlb	0	; select bank0
 12620  072F  086C               	movf	??_efgtoa,w
 12621  0730  0081               	movwf	1
 12622                           
 12623                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 488:       
      +                                e = e / 10;
 12624  0731  300A               	movlw	10
 12625  0732  00A0               	movwf	___awdiv@divisor
 12626  0733  3000               	movlw	0
 12627  0734  00A1               	movwf	___awdiv@divisor+1
 12628  0735  0141               	movlb	1	; select bank1
 12629  0736  0861               	movf	(efgtoa@e+1)^(0+128),w
 12630  0737  0140               	movlb	0	; select bank0
 12631  0738  00A3               	movwf	___awdiv@dividend+1
 12632  0739  0141               	movlb	1	; select bank1
 12633  073A  0860               	movf	efgtoa@e^(0+128),w
 12634  073B  0140               	movlb	0	; select bank0
 12635  073C  00A2               	movwf	___awdiv@dividend
 12636  073D  31AE  26B6  3180   	fcall	___awdiv
 12637  0740  0140               	movlb	0	; select bank0
 12638  0741  0821               	movf	?___awdiv+1,w
 12639  0742  0141               	movlb	1	; select bank1
 12640  0743  00E1               	movwf	(efgtoa@e+1)^(0+128)
 12641  0744  0140               	movlb	0	; select bank0
 12642  0745  0820               	movf	?___awdiv,w
 12643  0746  0141               	movlb	1	; select bank1
 12644  0747  00E0               	movwf	efgtoa@e^(0+128)
 12645                           
 12646                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 489:       
      +                                --p;
 12647  0748  30FF               	movlw	255
 12648  0749  07CC               	addwf	efgtoa@p^(0+128),f
 12649  074A  30FF               	movlw	255
 12650  074B  3DCD               	addwfc	(efgtoa@p+1)^(0+128),f
 12651                           
 12652                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 490:       
      +                                --w;
 12653  074C  30FF               	movlw	255
 12654  074D  07CF               	addwf	efgtoa@w^(0+128),f
 12655  074E  30FF               	movlw	255
 12656  074F  3DD0               	addwfc	(efgtoa@w+1)^(0+128),f
 12657  0750  2F0B               	goto	l8074
 12658  0751                     l8076:	
 12659  0751  084D               	movf	(efgtoa@p+1)^(0+128),w
 12660  0752  3A80               	xorlw	128
 12661  0753  0140               	movlb	0	; select bank0
 12662  0754  00EC               	movwf	??_efgtoa
 12663  0755  3080               	movlw	128
 12664  0756  026C               	subwf	??_efgtoa,w
 12665  0757  1D03               	skipz
 12666  0758  2F5C               	goto	u11355
 12667  0759  3001               	movlw	1
 12668  075A  0141               	movlb	1	; select bank1
 12669  075B  024C               	subwf	efgtoa@p^(0+128),w
 12670  075C                     u11355:	
 12671  075C  1803               	skipnc
 12672  075D  2F0F               	goto	l8064
 12673                           
 12674                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 492:       
      +                            --i;
 12675  075E  30FF               	movlw	255
 12676  075F  0141               	movlb	1	; select bank1
 12677  0760  07DA               	addwf	efgtoa@i^(0+128),f
 12678  0761  30FF               	movlw	255
 12679  0762  3DDB               	addwfc	(efgtoa@i+1)^(0+128),f
 12680                           
 12681                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 493:       
      +                            dbuf[i] = sign ? '-' : '+';
 12682  0763  084A               	movf	efgtoa@sign^(0+128),w
 12683  0764  044B               	iorwf	(efgtoa@sign+1)^(0+128),w
 12684  0765  1D03               	btfss	3,2
 12685  0766  2F69               	goto	l8084
 12686  0767  302B               	movlw	43
 12687  0768  2F6A               	goto	L14
 12688  0769                     l8084:	
 12689  0769  302D               	movlw	45
 12690  076A                     L14:	
 12691  076A  00B9               	movwf	_efgtoa$1714^(0+128)
 12692  076B  3000               	movlw	0
 12693  076C  00BA               	movwf	(_efgtoa$1714^(0+128)+1)
 12694  076D  0839               	movf	_efgtoa$1714^(0+128),w
 12695  076E  0140               	movlb	0	; select bank0
 12696  076F  00EC               	movwf	??_efgtoa
 12697  0770  0141               	movlb	1	; select bank1
 12698  0771  085A               	movf	efgtoa@i^(0+128),w
 12699  0772  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 12700  0773  0086               	movwf	6
 12701  0774  3003               	movlw	3	; select bank6/7
 12702  0775  0087               	movwf	7
 12703  0776  0140               	movlb	0	; select bank0
 12704  0777  086C               	movf	??_efgtoa,w
 12705  0778  0081               	movwf	1
 12706                           
 12707                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 494:       
      +                            --w;
 12708  0779  30FF               	movlw	255
 12709  077A  0141               	movlb	1	; select bank1
 12710  077B  07CF               	addwf	efgtoa@w^(0+128),f
 12711  077C  30FF               	movlw	255
 12712  077D  3DD0               	addwfc	(efgtoa@w+1)^(0+128),f
 12713                           
 12714                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 496:       
      +                            dbuf[i] = (0 ? isupper((int)c) : ((unsigned)((int)c)-'A') < 26) ? 'E' : 'e';
 12715  077E  30FF               	movlw	255
 12716  077F  07DA               	addwf	efgtoa@i^(0+128),f
 12717  0780  30FF               	movlw	255
 12718  0781  3DDB               	addwfc	(efgtoa@i+1)^(0+128),f
 12719  0782  082E               	movf	efgtoa@c^(0+128),w
 12720  0783  3EBF               	addlw	191
 12721  0784  0140               	movlb	0	; select bank0
 12722  0785  00EC               	movwf	??_efgtoa
 12723  0786  30FF               	movlw	255
 12724  0787  1803               	skipnc
 12725  0788  3000               	movlw	0
 12726  0789  00ED               	movwf	??_efgtoa+1
 12727  078A  3000               	movlw	0
 12728  078B  026D               	subwf	??_efgtoa+1,w
 12729  078C  301A               	movlw	26
 12730  078D  1903               	skipnz
 12731  078E  026C               	subwf	??_efgtoa,w
 12732  078F  1803               	btfsc	3,0
 12733  0790  2F93               	goto	u11370
 12734  0791  3001               	movlw	1
 12735  0792  2F94               	goto	u11380
 12736  0793                     u11370:	
 12737  0793  3000               	movlw	0
 12738  0794                     u11380:	
 12739  0794  00EE               	movwf	??_efgtoa+2
 12740  0795  01EF               	clrf	??_efgtoa+3
 12741  0796  086E               	movf	??_efgtoa+2,w
 12742  0797  0141               	movlb	1	; select bank1
 12743  0798  00BD               	movwf	_efgtoa$1716^(0+128)
 12744  0799  0140               	movlb	0	; select bank0
 12745  079A  086F               	movf	??_efgtoa+3,w
 12746  079B  0141               	movlb	1	; select bank1
 12747  079C  00BE               	movwf	(_efgtoa$1716+1)^(0+128)
 12748  079D  083D               	movf	_efgtoa$1716^(0+128),w
 12749  079E  043E               	iorwf	(_efgtoa$1716+1)^(0+128),w
 12750  079F  1D03               	btfss	3,2
 12751  07A0  2FA3               	goto	l8100
 12752  07A1  3065               	movlw	101
 12753  07A2  2FA4               	goto	L15
 12754  07A3                     l8100:	
 12755  07A3  3045               	movlw	69
 12756  07A4                     L15:	
 12757  07A4  00BB               	movwf	_efgtoa$1715^(0+128)
 12758  07A5  3000               	movlw	0
 12759  07A6  00BC               	movwf	(_efgtoa$1715^(0+128)+1)
 12760  07A7  083B               	movf	_efgtoa$1715^(0+128),w
 12761  07A8  0140               	movlb	0	; select bank0
 12762  07A9  00EC               	movwf	??_efgtoa
 12763  07AA  0141               	movlb	1	; select bank1
 12764  07AB  085A               	movf	efgtoa@i^(0+128),w
 12765  07AC  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 12766  07AD  0086               	movwf	6
 12767  07AE  3003               	movlw	3	; select bank6/7
 12768  07AF  0087               	movwf	7
 12769  07B0  0140               	movlb	0	; select bank0
 12770  07B1  086C               	movf	??_efgtoa,w
 12771  07B2  0081               	movwf	1
 12772                           
 12773                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 497:       
      +                            --w;
 12774  07B3  30FF               	movlw	255
 12775  07B4  0141               	movlb	1	; select bank1
 12776  07B5  07CF               	addwf	efgtoa@w^(0+128),f
 12777  07B6  30FF               	movlw	255
 12778  07B7  3DD0               	addwfc	(efgtoa@w+1)^(0+128),f
 12779                           
 12780                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 498:       
      +                            strcpy(&dbuf[n], &dbuf[i]);
 12781  07B8  0862               	movf	efgtoa@n^(0+128),w
 12782  07B9  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 12783  07BA  0140               	movlb	0	; select bank0
 12784  07BB  00A5               	movwf	strcpy@dest
 12785  07BC  3003               	movlw	3
 12786  07BD  00A6               	movwf	strcpy@dest+1
 12787  07BE  0141               	movlb	1	; select bank1
 12788  07BF  085A               	movf	efgtoa@i^(0+128),w
 12789  07C0  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 12790  07C1  0140               	movlb	0	; select bank0
 12791  07C2  00A7               	movwf	strcpy@src
 12792  07C3  3003               	movlw	3
 12793  07C4  00A8               	movwf	strcpy@src+1
 12794  07C5  31AB  239B  3180   	fcall	_strcpy
 12795  07C8                     l8108:	
 12796                           
 12797                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 502:     re
      +                          turn pad(fp, &dbuf[0], w);
 12798  07C8  3020               	movlw	(low (_dbuf| (0+768)))& (0+255)
 12799  07C9  0140               	movlb	0	; select bank0
 12800  07CA  00EC               	movwf	??_efgtoa
 12801  07CB  086C               	movf	??_efgtoa,w
 12802  07CC  00B0               	movwf	pad@buf
 12803  07CD  0141               	movlb	1	; select bank1
 12804  07CE  0850               	movf	(efgtoa@w+1)^(0+128),w
 12805  07CF  0140               	movlb	0	; select bank0
 12806  07D0  00B2               	movwf	pad@p+1
 12807  07D1  0141               	movlb	1	; select bank1
 12808  07D2  084F               	movf	efgtoa@w^(0+128),w
 12809  07D3  0140               	movlb	0	; select bank0
 12810  07D4  00B1               	movwf	pad@p
 12811  07D5  0141               	movlb	1	; select bank1
 12812  07D6  0849               	movf	efgtoa@fp^(0+128),w
 12813  07D7  31AF  27AD         	fcall	_pad
 12814  07D9  0140               	movlb	0	; select bank0
 12815  07DA  0831               	movf	?_pad+1,w
 12816  07DB  0141               	movlb	1	; select bank1
 12817  07DC  00AB               	movwf	(?_efgtoa+1)^(0+128)
 12818  07DD  0140               	movlb	0	; select bank0
 12819  07DE  0830               	movf	?_pad,w
 12820  07DF  0141               	movlb	1	; select bank1
 12821  07E0  00AA               	movwf	?_efgtoa^(0+128)
 12822  07E1  0008               	return
 12823  07E2                     __end_of_efgtoa:	
 12824                           
 12825                           	psect	text25
 12826  2B79                     __ptext25:	
 12827 ;; *************** function _tolower *****************
 12828 ;; Defined at:
 12829 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\tolower.c"
 12830 ;; Parameters:    Size  Location     Type
 12831 ;;  c               2    6[BANK0 ] int 
 12832 ;; Auto vars:     Size  Location     Type
 12833 ;;		None
 12834 ;; Return value:  Size  Location     Type
 12835 ;;                  2    6[BANK0 ] int 
 12836 ;; Registers used:
 12837 ;;		wreg, status,2, status,0
 12838 ;; Tracked objects:
 12839 ;;		On entry : 0/0
 12840 ;;		On exit  : 0/0
 12841 ;;		Unchanged: 0/0
 12842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12843 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12844 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12845 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12846 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12847 ;;Total ram usage:        8 bytes
 12848 ;; Hardware stack levels used:    1
 12849 ;; Hardware stack levels required when called:    4
 12850 ;; This function calls:
 12851 ;;		_isupper
 12852 ;; This function is called by:
 12853 ;;		_efgtoa
 12854 ;;		_vfpfcnvrt
 12855 ;; This function uses a non-reentrant model
 12856 ;;
 12857                           
 12858                           
 12859                           ;psect for function _tolower
 12860  2B79                     _tolower:	
 12861                           
 12862                           ;incstack = 0
 12863                           ; Regs used in _tolower: [wreg+status,2+status,0]
 12864  2B79  0140               	movlb	0	; select bank0
 12865  2B7A  0826               	movf	tolower@c,w
 12866  2B7B  3EBF               	addlw	191
 12867  2B7C  00A8               	movwf	??_tolower
 12868  2B7D  30FF               	movlw	255
 12869  2B7E  3D27               	addwfc	tolower@c+1,w
 12870  2B7F  00A9               	movwf	??_tolower+1
 12871  2B80  3000               	movlw	0
 12872  2B81  0229               	subwf	??_tolower+1,w
 12873  2B82  301A               	movlw	26
 12874  2B83  1903               	skipnz
 12875  2B84  0228               	subwf	??_tolower,w
 12876  2B85  1803               	btfsc	3,0
 12877  2B86  2B89               	goto	u9340
 12878  2B87  3001               	movlw	1
 12879  2B88  2B8A               	goto	u9350
 12880  2B89                     u9340:	
 12881  2B89  3000               	movlw	0
 12882  2B8A                     u9350:	
 12883  2B8A  00AA               	movwf	??_tolower+2
 12884  2B8B  01AB               	clrf	??_tolower+3
 12885  2B8C  082A               	movf	??_tolower+2,w
 12886  2B8D  00AC               	movwf	_tolower$2187
 12887  2B8E  082B               	movf	??_tolower+3,w
 12888  2B8F  00AD               	movwf	_tolower$2187+1
 12889  2B90  082C               	movf	_tolower$2187,w
 12890  2B91  042D               	iorwf	_tolower$2187+1,w
 12891  2B92  1903               	btfsc	3,2
 12892  2B93  0008               	return
 12893  2B94  3020               	movlw	32
 12894  2B95  0426               	iorwf	tolower@c,w
 12895  2B96  00A6               	movwf	?_tolower
 12896  2B97  3000               	movlw	0
 12897  2B98  0427               	iorwf	tolower@c+1,w
 12898  2B99  00A7               	movwf	?_tolower+1
 12899  2B9A  0008               	return
 12900  2B9B                     __end_of_tolower:	
 12901                           
 12902                           	psect	text26
 12903  2A5E                     __ptext26:	
 12904 ;; *************** function _isupper *****************
 12905 ;; Defined at:
 12906 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isupper.c"
 12907 ;; Parameters:    Size  Location     Type
 12908 ;;  c               2    0[BANK0 ] int 
 12909 ;; Auto vars:     Size  Location     Type
 12910 ;;		None
 12911 ;; Return value:  Size  Location     Type
 12912 ;;                  2    0[BANK0 ] int 
 12913 ;; Registers used:
 12914 ;;		wreg, status,2, status,0
 12915 ;; Tracked objects:
 12916 ;;		On entry : 0/0
 12917 ;;		On exit  : 0/0
 12918 ;;		Unchanged: 0/0
 12919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12920 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12921 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12922 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12923 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12924 ;;Total ram usage:        6 bytes
 12925 ;; Hardware stack levels used:    1
 12926 ;; Hardware stack levels required when called:    3
 12927 ;; This function calls:
 12928 ;;		Nothing
 12929 ;; This function is called by:
 12930 ;;		_efgtoa
 12931 ;;		_vfpfcnvrt
 12932 ;;		_tolower
 12933 ;; This function uses a non-reentrant model
 12934 ;;
 12935                           
 12936                           
 12937                           ;psect for function _isupper
 12938  2A5E                     _isupper:	
 12939                           
 12940                           ;incstack = 0
 12941                           ; Regs used in _isupper: [wreg+status,2+status,0]
 12942  2A5E  0140               	movlb	0	; select bank0
 12943  2A5F  0820               	movf	isupper@c,w
 12944  2A60  3EBF               	addlw	191
 12945  2A61  00A2               	movwf	??_isupper
 12946  2A62  30FF               	movlw	255
 12947  2A63  3D21               	addwfc	isupper@c+1,w
 12948  2A64  00A3               	movwf	??_isupper+1
 12949  2A65  3000               	movlw	0
 12950  2A66  0223               	subwf	??_isupper+1,w
 12951  2A67  301A               	movlw	26
 12952  2A68  1903               	skipnz
 12953  2A69  0222               	subwf	??_isupper,w
 12954  2A6A  1803               	btfsc	3,0
 12955  2A6B  2A6E               	goto	u8690
 12956  2A6C  3001               	movlw	1
 12957  2A6D  2A6F               	goto	u8700
 12958  2A6E                     u8690:	
 12959  2A6E  3000               	movlw	0
 12960  2A6F                     u8700:	
 12961  2A6F  00A4               	movwf	??_isupper+2
 12962  2A70  01A5               	clrf	??_isupper+3
 12963  2A71  0824               	movf	??_isupper+2,w
 12964  2A72  00A0               	movwf	?_isupper
 12965  2A73  0825               	movf	??_isupper+3,w
 12966  2A74  00A1               	movwf	?_isupper+1
 12967  2A75  0008               	return
 12968  2A76                     __end_of_isupper:	
 12969                           
 12970                           	psect	text27
 12971  2B9B                     __ptext27:	
 12972 ;; *************** function _strcpy *****************
 12973 ;; Defined at:
 12974 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strcpy.c"
 12975 ;; Parameters:    Size  Location     Type
 12976 ;;  dest            2    5[BANK0 ] PTR unsigned char 
 12977 ;;		 -> dbuf(80), lBuf(49), sBuf(13), 
 12978 ;;  src             2    7[BANK0 ] PTR const unsigned char 
 12979 ;;		 -> STR_42(4), STR_41(4), STR_38(4), STR_37(4), 
 12980 ;;		 -> dbuf(80), STR_16(13), STR_15(13), STR_14(13), 
 12981 ;;		 -> STR_13(13), STR_9(13), sBuf(13), 
 12982 ;; Auto vars:     Size  Location     Type
 12983 ;;  d               2   15[BANK0 ] PTR unsigned char 
 12984 ;;		 -> dbuf(80), lBuf(49), sBuf(13), 
 12985 ;;  s               2   13[BANK0 ] PTR const unsigned char 
 12986 ;;		 -> STR_42(4), STR_41(4), STR_38(4), STR_37(4), 
 12987 ;;		 -> dbuf(80), STR_16(13), STR_15(13), STR_14(13), 
 12988 ;;		 -> STR_13(13), STR_9(13), sBuf(13), 
 12989 ;; Return value:  Size  Location     Type
 12990 ;;                  2    5[BANK0 ] PTR unsigned char 
 12991 ;; Registers used:
 12992 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, pclath
 12993 ;; Tracked objects:
 12994 ;;		On entry : 0/0
 12995 ;;		On exit  : 0/0
 12996 ;;		Unchanged: 0/0
 12997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 12998 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 12999 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13000 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13001 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13002 ;;Total ram usage:       12 bytes
 13003 ;; Hardware stack levels used:    1
 13004 ;; Hardware stack levels required when called:    3
 13005 ;; This function calls:
 13006 ;;		Nothing
 13007 ;; This function is called by:
 13008 ;;		_channelView
 13009 ;;		_efgtoa
 13010 ;;		_strcat
 13011 ;; This function uses a non-reentrant model
 13012 ;;
 13013                           
 13014                           
 13015                           ;psect for function _strcpy
 13016  2B9B                     _strcpy:	
 13017                           
 13018                           ;incstack = 0
 13019                           ; Regs used in _strcpy: [wreg-fsr1h+pclath]
 13020  2B9B  0140               	movlb	0	; select bank0
 13021  2B9C  0828               	movf	strcpy@src+1,w
 13022  2B9D  00AE               	movwf	strcpy@s+1
 13023  2B9E  0827               	movf	strcpy@src,w
 13024  2B9F  00AD               	movwf	strcpy@s
 13025  2BA0  0826               	movf	strcpy@dest+1,w
 13026  2BA1  00B0               	movwf	strcpy@d+1
 13027  2BA2  0825               	movf	strcpy@dest,w
 13028  2BA3  00AF               	movwf	strcpy@d
 13029  2BA4                     l7106:	
 13030  2BA4  0830               	movf	strcpy@d+1,w
 13031  2BA5  00AA               	movwf	??_strcpy+1
 13032  2BA6  082F               	movf	strcpy@d,w
 13033  2BA7  00A9               	movwf	??_strcpy
 13034  2BA8  0AAF               	incf	strcpy@d,f
 13035  2BA9  1903               	skipnz
 13036  2BAA  0AB0               	incf	strcpy@d+1,f
 13037  2BAB  0829               	movf	??_strcpy,w
 13038  2BAC  0086               	movwf	6
 13039  2BAD  082A               	movf	??_strcpy+1,w
 13040  2BAE  0087               	movwf	7
 13041  2BAF  082E               	movf	strcpy@s+1,w
 13042  2BB0  00AC               	movwf	??_strcpy+3
 13043  2BB1  082D               	movf	strcpy@s,w
 13044  2BB2  00AB               	movwf	??_strcpy+2
 13045  2BB3  0AAD               	incf	strcpy@s,f
 13046  2BB4  1903               	skipnz
 13047  2BB5  0AAE               	incf	strcpy@s+1,f
 13048  2BB6  082B               	movf	??_strcpy+2,w
 13049  2BB7  0084               	movwf	4
 13050  2BB8  082C               	movf	??_strcpy+3,w
 13051  2BB9  0085               	movwf	5
 13052  2BBA  0800               	movf	0,w	;code access
 13053  2BBB  3FC0               	movwi [0]fsr1
 13054  2BBC  0889               	movf	9,f
 13055  2BBD  1903               	btfsc	3,2
 13056  2BBE  0008               	return
 13057  2BBF  2BA4               	goto	l7106
 13058  2BC0                     __end_of_strcpy:	
 13059                           
 13060                           	psect	text28
 13061  1D81                     __ptext28:	
 13062 ;; *************** function _floorf *****************
 13063 ;; Defined at:
 13064 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\floorf.c"
 13065 ;; Parameters:    Size  Location     Type
 13066 ;;  x               4   66[BANK0 ] float 
 13067 ;; Auto vars:     Size  Location     Type
 13068 ;;  u               4    6[BANK1 ] struct .
 13069 ;;  m               4    0[BANK1 ] unsigned long 
 13070 ;;  e               2    4[BANK1 ] int 
 13071 ;; Return value:  Size  Location     Type
 13072 ;;                  4   66[BANK0 ] float 
 13073 ;; Registers used:
 13074 ;;		wreg, status,2, status,0
 13075 ;; Tracked objects:
 13076 ;;		On entry : 0/0
 13077 ;;		On exit  : 0/0
 13078 ;;		Unchanged: 0/0
 13079 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13080 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13081 ;;      Locals:         0       0      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13082 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13083 ;;      Totals:         0      10      10       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13084 ;;Total ram usage:       20 bytes
 13085 ;; Hardware stack levels used:    1
 13086 ;; Hardware stack levels required when called:    3
 13087 ;; This function calls:
 13088 ;;		Nothing
 13089 ;; This function is called by:
 13090 ;;		_efgtoa
 13091 ;; This function uses a non-reentrant model
 13092 ;;
 13093                           
 13094                           
 13095                           ;psect for function _floorf
 13096  1D81                     _floorf:	
 13097                           
 13098                           ;incstack = 0
 13099                           ; Regs used in _floorf: [wreg+status,2+status,0]
 13100  1D81  0144               	movlb	4	; select bank4
 13101  1D82  0823               	movf	(floorf@F524+3)^(0+512),w
 13102  1D83  0141               	movlb	1	; select bank1
 13103  1D84  00A9               	movwf	(floorf@u+3)^(0+128)
 13104  1D85  0144               	movlb	4	; select bank4
 13105  1D86  0822               	movf	(floorf@F524+2)^(0+512),w
 13106  1D87  0141               	movlb	1	; select bank1
 13107  1D88  00A8               	movwf	(floorf@u+2)^(0+128)
 13108  1D89  0144               	movlb	4	; select bank4
 13109  1D8A  0821               	movf	(floorf@F524+1)^(0+512),w
 13110  1D8B  0141               	movlb	1	; select bank1
 13111  1D8C  00A7               	movwf	(floorf@u+1)^(0+128)
 13112  1D8D  0144               	movlb	4	; select bank4
 13113  1D8E  0820               	movf	floorf@F524^(0+512),w
 13114  1D8F  0141               	movlb	1	; select bank1
 13115  1D90  00A6               	movwf	floorf@u^(0+128)
 13116  1D91  0140               	movlb	0	; select bank0
 13117  1D92  0865               	movf	floorf@x+3,w
 13118  1D93  0141               	movlb	1	; select bank1
 13119  1D94  00A9               	movwf	(floorf@u+3)^(0+128)
 13120  1D95  0140               	movlb	0	; select bank0
 13121  1D96  0864               	movf	floorf@x+2,w
 13122  1D97  0141               	movlb	1	; select bank1
 13123  1D98  00A8               	movwf	(floorf@u+2)^(0+128)
 13124  1D99  0140               	movlb	0	; select bank0
 13125  1D9A  0863               	movf	floorf@x+1,w
 13126  1D9B  0141               	movlb	1	; select bank1
 13127  1D9C  00A7               	movwf	(floorf@u+1)^(0+128)
 13128  1D9D  0140               	movlb	0	; select bank0
 13129  1D9E  0862               	movf	floorf@x,w
 13130  1D9F  0141               	movlb	1	; select bank1
 13131  1DA0  00A6               	movwf	floorf@u^(0+128)
 13132  1DA1  0826               	movf	floorf@u^(0+128),w
 13133  1DA2  0140               	movlb	0	; select bank0
 13134  1DA3  00E6               	movwf	??_floorf
 13135  1DA4  0141               	movlb	1	; select bank1
 13136  1DA5  0827               	movf	(floorf@u+1)^(0+128),w
 13137  1DA6  0140               	movlb	0	; select bank0
 13138  1DA7  00E7               	movwf	??_floorf+1
 13139  1DA8  0141               	movlb	1	; select bank1
 13140  1DA9  0828               	movf	(floorf@u+2)^(0+128),w
 13141  1DAA  0140               	movlb	0	; select bank0
 13142  1DAB  00E8               	movwf	??_floorf+2
 13143  1DAC  0141               	movlb	1	; select bank1
 13144  1DAD  0829               	movf	(floorf@u+3)^(0+128),w
 13145  1DAE  0140               	movlb	0	; select bank0
 13146  1DAF  00E9               	movwf	??_floorf+3
 13147  1DB0  3017               	movlw	23
 13148  1DB1                     u9375:	
 13149  1DB1  36E9               	lsrf	??_floorf+3,f
 13150  1DB2  0CE8               	rrf	??_floorf+2,f
 13151  1DB3  0CE7               	rrf	??_floorf+1,f
 13152  1DB4  0CE6               	rrf	??_floorf,f
 13153  1DB5  0B89               	decfsz	9,f
 13154  1DB6  2DB1               	goto	u9375
 13155  1DB7  30FF               	movlw	255
 13156  1DB8  0566               	andwf	??_floorf,w
 13157  1DB9  00EA               	movwf	??_floorf+4
 13158  1DBA  3000               	movlw	0
 13159  1DBB  0567               	andwf	??_floorf+1,w
 13160  1DBC  00EB               	movwf	??_floorf+5
 13161  1DBD  086A               	movf	??_floorf+4,w
 13162  1DBE  3E81               	addlw	129
 13163  1DBF  0141               	movlb	1	; select bank1
 13164  1DC0  00A4               	movwf	floorf@e^(0+128)
 13165  1DC1  30FF               	movlw	255
 13166  1DC2  0140               	movlb	0	; select bank0
 13167  1DC3  3D6B               	addwfc	??_floorf+5,w
 13168  1DC4  0141               	movlb	1	; select bank1
 13169  1DC5  00A5               	movwf	(floorf@e+1)^(0+128)
 13170  1DC6  0825               	movf	(floorf@e+1)^(0+128),w
 13171  1DC7  3A80               	xorlw	128
 13172  1DC8  0140               	movlb	0	; select bank0
 13173  1DC9  00E6               	movwf	??_floorf
 13174  1DCA  3080               	movlw	128
 13175  1DCB  0266               	subwf	??_floorf,w
 13176  1DCC  1D03               	skipz
 13177  1DCD  2DD1               	goto	u9385
 13178  1DCE  3017               	movlw	23
 13179  1DCF  0141               	movlb	1	; select bank1
 13180  1DD0  0224               	subwf	floorf@e^(0+128),w
 13181  1DD1                     u9385:	
 13182  1DD1  1803               	btfsc	3,0
 13183  1DD2  0008               	return
 13184  1DD3  0141               	movlb	1	; select bank1
 13185  1DD4  1BA5               	btfsc	(floorf@e+1)^(0+128),7
 13186  1DD5  2E57               	goto	l7188
 13187  1DD6  30FF               	movlw	255
 13188  1DD7  0140               	movlb	0	; select bank0
 13189  1DD8  00E6               	movwf	??_floorf
 13190  1DD9  30FF               	movlw	255
 13191  1DDA  00E7               	movwf	??_floorf+1
 13192  1DDB  307F               	movlw	127
 13193  1DDC  00E8               	movwf	??_floorf+2
 13194  1DDD  3000               	movlw	0
 13195  1DDE  00E9               	movwf	??_floorf+3
 13196  1DDF  0141               	movlb	1	; select bank1
 13197  1DE0  0A24               	incf	floorf@e^(0+128),w
 13198  1DE1  0140               	movlb	0	; select bank0
 13199  1DE2  2DE7               	goto	u9400
 13200  1DE3                     u9405:	
 13201  1DE3  37E9               	asrf	??_floorf+3,f
 13202  1DE4  0CE8               	rrf	??_floorf+2,f
 13203  1DE5  0CE7               	rrf	??_floorf+1,f
 13204  1DE6  0CE6               	rrf	??_floorf,f
 13205  1DE7                     u9400:	
 13206  1DE7  0B89               	decfsz	9,f
 13207  1DE8  2DE3               	goto	u9405
 13208  1DE9  0869               	movf	??_floorf+3,w
 13209  1DEA  0141               	movlb	1	; select bank1
 13210  1DEB  00A3               	movwf	(floorf@m+3)^(0+128)
 13211  1DEC  0140               	movlb	0	; select bank0
 13212  1DED  0868               	movf	??_floorf+2,w
 13213  1DEE  0141               	movlb	1	; select bank1
 13214  1DEF  00A2               	movwf	(floorf@m+2)^(0+128)
 13215  1DF0  0140               	movlb	0	; select bank0
 13216  1DF1  0867               	movf	??_floorf+1,w
 13217  1DF2  0141               	movlb	1	; select bank1
 13218  1DF3  00A1               	movwf	(floorf@m+1)^(0+128)
 13219  1DF4  0140               	movlb	0	; select bank0
 13220  1DF5  0866               	movf	??_floorf,w
 13221  1DF6  0141               	movlb	1	; select bank1
 13222  1DF7  00A0               	movwf	floorf@m^(0+128)
 13223  1DF8  0826               	movf	floorf@u^(0+128),w
 13224  1DF9  0520               	andwf	floorf@m^(0+128),w
 13225  1DFA  0140               	movlb	0	; select bank0
 13226  1DFB  00E6               	movwf	??_floorf
 13227  1DFC  0141               	movlb	1	; select bank1
 13228  1DFD  0827               	movf	(floorf@u+1)^(0+128),w
 13229  1DFE  0521               	andwf	(floorf@m+1)^(0+128),w
 13230  1DFF  0140               	movlb	0	; select bank0
 13231  1E00  00E7               	movwf	??_floorf+1
 13232  1E01  0141               	movlb	1	; select bank1
 13233  1E02  0828               	movf	(floorf@u+2)^(0+128),w
 13234  1E03  0522               	andwf	(floorf@m+2)^(0+128),w
 13235  1E04  0140               	movlb	0	; select bank0
 13236  1E05  00E8               	movwf	??_floorf+2
 13237  1E06  0141               	movlb	1	; select bank1
 13238  1E07  0829               	movf	(floorf@u+3)^(0+128),w
 13239  1E08  0523               	andwf	(floorf@m+3)^(0+128),w
 13240  1E09  0140               	movlb	0	; select bank0
 13241  1E0A  00E9               	movwf	??_floorf+3
 13242  1E0B  0869               	movf	??_floorf+3,w
 13243  1E0C  0468               	iorwf	??_floorf+2,w
 13244  1E0D  0467               	iorwf	??_floorf+1,w
 13245  1E0E  0466               	iorwf	??_floorf,w
 13246  1E0F  1903               	btfsc	3,2
 13247  1E10  0008               	return
 13248  1E11  0141               	movlb	1	; select bank1
 13249  1E12  0826               	movf	floorf@u^(0+128),w
 13250  1E13  0140               	movlb	0	; select bank0
 13251  1E14  00E6               	movwf	??_floorf
 13252  1E15  0141               	movlb	1	; select bank1
 13253  1E16  0827               	movf	(floorf@u+1)^(0+128),w
 13254  1E17  0140               	movlb	0	; select bank0
 13255  1E18  00E7               	movwf	??_floorf+1
 13256  1E19  0141               	movlb	1	; select bank1
 13257  1E1A  0828               	movf	(floorf@u+2)^(0+128),w
 13258  1E1B  0140               	movlb	0	; select bank0
 13259  1E1C  00E8               	movwf	??_floorf+2
 13260  1E1D  0141               	movlb	1	; select bank1
 13261  1E1E  0829               	movf	(floorf@u+3)^(0+128),w
 13262  1E1F  0140               	movlb	0	; select bank0
 13263  1E20  00E9               	movwf	??_floorf+3
 13264  1E21  301F               	movlw	31
 13265  1E22                     u9425:	
 13266  1E22  36E9               	lsrf	??_floorf+3,f
 13267  1E23  0CE8               	rrf	??_floorf+2,f
 13268  1E24  0CE7               	rrf	??_floorf+1,f
 13269  1E25  0CE6               	rrf	??_floorf,f
 13270  1E26  0B89               	decfsz	9,f
 13271  1E27  2E22               	goto	u9425
 13272  1E28  0869               	movf	??_floorf+3,w
 13273  1E29  0468               	iorwf	??_floorf+2,w
 13274  1E2A  0467               	iorwf	??_floorf+1,w
 13275  1E2B  0466               	iorwf	??_floorf,w
 13276  1E2C  1903               	skipnz
 13277  1E2D  2E37               	goto	l7186
 13278  1E2E  0141               	movlb	1	; select bank1
 13279  1E2F  0820               	movf	floorf@m^(0+128),w
 13280  1E30  07A6               	addwf	floorf@u^(0+128),f
 13281  1E31  0821               	movf	(floorf@m+1)^(0+128),w
 13282  1E32  3DA7               	addwfc	(floorf@u+1)^(0+128),f
 13283  1E33  0822               	movf	(floorf@m+2)^(0+128),w
 13284  1E34  3DA8               	addwfc	(floorf@u+2)^(0+128),f
 13285  1E35  0823               	movf	(floorf@m+3)^(0+128),w
 13286  1E36  3DA9               	addwfc	(floorf@u+3)^(0+128),f
 13287  1E37                     l7186:	
 13288  1E37  0141               	movlb	1	; select bank1
 13289  1E38  0920               	comf	floorf@m^(0+128),w
 13290  1E39  0140               	movlb	0	; select bank0
 13291  1E3A  00E6               	movwf	??_floorf
 13292  1E3B  0141               	movlb	1	; select bank1
 13293  1E3C  0921               	comf	(floorf@m+1)^(0+128),w
 13294  1E3D  0140               	movlb	0	; select bank0
 13295  1E3E  00E7               	movwf	??_floorf+1
 13296  1E3F  0141               	movlb	1	; select bank1
 13297  1E40  0922               	comf	(floorf@m+2)^(0+128),w
 13298  1E41  0140               	movlb	0	; select bank0
 13299  1E42  00E8               	movwf	??_floorf+2
 13300  1E43  0141               	movlb	1	; select bank1
 13301  1E44  0923               	comf	(floorf@m+3)^(0+128),w
 13302  1E45  0140               	movlb	0	; select bank0
 13303  1E46  00E9               	movwf	??_floorf+3
 13304  1E47  0866               	movf	??_floorf,w
 13305  1E48  0141               	movlb	1	; select bank1
 13306  1E49  05A6               	andwf	floorf@u^(0+128),f
 13307  1E4A  0140               	movlb	0	; select bank0
 13308  1E4B  0867               	movf	??_floorf+1,w
 13309  1E4C  0141               	movlb	1	; select bank1
 13310  1E4D  05A7               	andwf	(floorf@u+1)^(0+128),f
 13311  1E4E  0140               	movlb	0	; select bank0
 13312  1E4F  0868               	movf	??_floorf+2,w
 13313  1E50  0141               	movlb	1	; select bank1
 13314  1E51  05A8               	andwf	(floorf@u+2)^(0+128),f
 13315  1E52  0140               	movlb	0	; select bank0
 13316  1E53  0869               	movf	??_floorf+3,w
 13317  1E54  0141               	movlb	1	; select bank1
 13318  1E55  05A9               	andwf	(floorf@u+3)^(0+128),f
 13319  1E56  2E9E               	goto	l1448
 13320  1E57                     l7188:	
 13321  1E57  0826               	movf	floorf@u^(0+128),w
 13322  1E58  0140               	movlb	0	; select bank0
 13323  1E59  00E6               	movwf	??_floorf
 13324  1E5A  0141               	movlb	1	; select bank1
 13325  1E5B  0827               	movf	(floorf@u+1)^(0+128),w
 13326  1E5C  0140               	movlb	0	; select bank0
 13327  1E5D  00E7               	movwf	??_floorf+1
 13328  1E5E  0141               	movlb	1	; select bank1
 13329  1E5F  0828               	movf	(floorf@u+2)^(0+128),w
 13330  1E60  0140               	movlb	0	; select bank0
 13331  1E61  00E8               	movwf	??_floorf+2
 13332  1E62  0141               	movlb	1	; select bank1
 13333  1E63  0829               	movf	(floorf@u+3)^(0+128),w
 13334  1E64  0140               	movlb	0	; select bank0
 13335  1E65  00E9               	movwf	??_floorf+3
 13336  1E66  301F               	movlw	31
 13337  1E67                     u9445:	
 13338  1E67  36E9               	lsrf	??_floorf+3,f
 13339  1E68  0CE8               	rrf	??_floorf+2,f
 13340  1E69  0CE7               	rrf	??_floorf+1,f
 13341  1E6A  0CE6               	rrf	??_floorf,f
 13342  1E6B  0B89               	decfsz	9,f
 13343  1E6C  2E67               	goto	u9445
 13344  1E6D  0869               	movf	??_floorf+3,w
 13345  1E6E  0468               	iorwf	??_floorf+2,w
 13346  1E6F  0467               	iorwf	??_floorf+1,w
 13347  1E70  0466               	iorwf	??_floorf,w
 13348  1E71  1D03               	skipz
 13349  1E72  2E78               	goto	l7192
 13350  1E73  3000               	movlw	0
 13351  1E74  0141               	movlb	1	; select bank1
 13352  1E75  00A9               	movwf	(floorf@u+3)^(0+128)
 13353  1E76  3000               	movlw	0
 13354  1E77  2E99               	goto	L16
 13355  1E78                     l7192:	
 13356  1E78  0141               	movlb	1	; select bank1
 13357  1E79  0826               	movf	floorf@u^(0+128),w
 13358  1E7A  0140               	movlb	0	; select bank0
 13359  1E7B  00E6               	movwf	??_floorf
 13360  1E7C  0141               	movlb	1	; select bank1
 13361  1E7D  0827               	movf	(floorf@u+1)^(0+128),w
 13362  1E7E  0140               	movlb	0	; select bank0
 13363  1E7F  00E7               	movwf	??_floorf+1
 13364  1E80  0141               	movlb	1	; select bank1
 13365  1E81  0828               	movf	(floorf@u+2)^(0+128),w
 13366  1E82  0140               	movlb	0	; select bank0
 13367  1E83  00E8               	movwf	??_floorf+2
 13368  1E84  0141               	movlb	1	; select bank1
 13369  1E85  0829               	movf	(floorf@u+3)^(0+128),w
 13370  1E86  0140               	movlb	0	; select bank0
 13371  1E87  00E9               	movwf	??_floorf+3
 13372  1E88  3001               	movlw	1
 13373  1E89                     u9465:	
 13374  1E89  35E6               	lslf	??_floorf,f
 13375  1E8A  0DE7               	rlf	??_floorf+1,f
 13376  1E8B  0DE8               	rlf	??_floorf+2,f
 13377  1E8C  0DE9               	rlf	??_floorf+3,f
 13378  1E8D  0B89               	decfsz	9,f
 13379  1E8E  2E89               	goto	u9465
 13380  1E8F  0869               	movf	??_floorf+3,w
 13381  1E90  0468               	iorwf	??_floorf+2,w
 13382  1E91  0467               	iorwf	??_floorf+1,w
 13383  1E92  0466               	iorwf	??_floorf,w
 13384  1E93  1903               	skipnz
 13385  1E94  2E9E               	goto	l1448
 13386  1E95  30BF               	movlw	191
 13387  1E96  0141               	movlb	1	; select bank1
 13388  1E97  00A9               	movwf	(floorf@u+3)^(0+128)
 13389  1E98  3080               	movlw	128
 13390  1E99                     L16:	
 13391  1E99  00A8               	movwf	(floorf@u+2)^(0+128)
 13392  1E9A  3000               	movlw	0
 13393  1E9B  00A7               	movwf	(floorf@u+1)^(0+128)
 13394  1E9C  3000               	movlw	0
 13395  1E9D  00A6               	movwf	floorf@u^(0+128)
 13396  1E9E                     l1448:	
 13397  1E9E  0141               	movlb	1	; select bank1
 13398  1E9F  0829               	movf	(floorf@u+3)^(0+128),w
 13399  1EA0  0140               	movlb	0	; select bank0
 13400  1EA1  00E5               	movwf	?_floorf+3
 13401  1EA2  0141               	movlb	1	; select bank1
 13402  1EA3  0828               	movf	(floorf@u+2)^(0+128),w
 13403  1EA4  0140               	movlb	0	; select bank0
 13404  1EA5  00E4               	movwf	?_floorf+2
 13405  1EA6  0141               	movlb	1	; select bank1
 13406  1EA7  0827               	movf	(floorf@u+1)^(0+128),w
 13407  1EA8  0140               	movlb	0	; select bank0
 13408  1EA9  00E3               	movwf	?_floorf+1
 13409  1EAA  0141               	movlb	1	; select bank1
 13410  1EAB  0826               	movf	floorf@u^(0+128),w
 13411  1EAC  0140               	movlb	0	; select bank0
 13412  1EAD  00E2               	movwf	?_floorf
 13413  1EAE  0008               	return
 13414  1EAF                     __end_of_floorf:	
 13415                           
 13416                           	psect	text29
 13417  22ED                     __ptext29:	
 13418 ;; *************** function ___fpclassifyf *****************
 13419 ;; Defined at:
 13420 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\__fpclassifyf.c"
 13421 ;; Parameters:    Size  Location     Type
 13422 ;;  x               4    0[BANK0 ] float 
 13423 ;; Auto vars:     Size  Location     Type
 13424 ;;  u               4   12[BANK0 ] struct .
 13425 ;;  e               2   10[BANK0 ] int 
 13426 ;; Return value:  Size  Location     Type
 13427 ;;                  2    0[BANK0 ] int 
 13428 ;; Registers used:
 13429 ;;		wreg, status,2, status,0
 13430 ;; Tracked objects:
 13431 ;;		On entry : 0/0
 13432 ;;		On exit  : 0/0
 13433 ;;		Unchanged: 0/0
 13434 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13435 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13436 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13437 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13438 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13439 ;;Total ram usage:       16 bytes
 13440 ;; Hardware stack levels used:    1
 13441 ;; Hardware stack levels required when called:    3
 13442 ;; This function calls:
 13443 ;;		Nothing
 13444 ;; This function is called by:
 13445 ;;		_efgtoa
 13446 ;; This function uses a non-reentrant model
 13447 ;;
 13448                           
 13449                           
 13450                           ;psect for function ___fpclassifyf
 13451  22ED                     ___fpclassifyf:	
 13452                           
 13453                           ;incstack = 0
 13454                           ; Regs used in ___fpclassifyf: [wreg+status,2+status,0]
 13455  22ED  0144               	movlb	4	; select bank4
 13456  22EE  0827               	movf	(___fpclassifyf@F463+3)^(0+512),w
 13457  22EF  0140               	movlb	0	; select bank0
 13458  22F0  00AF               	movwf	___fpclassifyf@u+3
 13459  22F1  0144               	movlb	4	; select bank4
 13460  22F2  0826               	movf	(___fpclassifyf@F463+2)^(0+512),w
 13461  22F3  0140               	movlb	0	; select bank0
 13462  22F4  00AE               	movwf	___fpclassifyf@u+2
 13463  22F5  0144               	movlb	4	; select bank4
 13464  22F6  0825               	movf	(___fpclassifyf@F463+1)^(0+512),w
 13465  22F7  0140               	movlb	0	; select bank0
 13466  22F8  00AD               	movwf	___fpclassifyf@u+1
 13467  22F9  0144               	movlb	4	; select bank4
 13468  22FA  0824               	movf	___fpclassifyf@F463^(0+512),w
 13469  22FB  0140               	movlb	0	; select bank0
 13470  22FC  00AC               	movwf	___fpclassifyf@u
 13471  22FD  0823               	movf	___fpclassifyf@x+3,w
 13472  22FE  00AF               	movwf	___fpclassifyf@u+3
 13473  22FF  0822               	movf	___fpclassifyf@x+2,w
 13474  2300  00AE               	movwf	___fpclassifyf@u+2
 13475  2301  0821               	movf	___fpclassifyf@x+1,w
 13476  2302  00AD               	movwf	___fpclassifyf@u+1
 13477  2303  0820               	movf	___fpclassifyf@x,w
 13478  2304  00AC               	movwf	___fpclassifyf@u
 13479  2305  082C               	movf	___fpclassifyf@u,w
 13480  2306  00A4               	movwf	??___fpclassifyf
 13481  2307  082D               	movf	___fpclassifyf@u+1,w
 13482  2308  00A5               	movwf	??___fpclassifyf+1
 13483  2309  082E               	movf	___fpclassifyf@u+2,w
 13484  230A  00A6               	movwf	??___fpclassifyf+2
 13485  230B  082F               	movf	___fpclassifyf@u+3,w
 13486  230C  00A7               	movwf	??___fpclassifyf+3
 13487  230D  3017               	movlw	23
 13488  230E                     u9265:	
 13489  230E  36A7               	lsrf	??___fpclassifyf+3,f
 13490  230F  0CA6               	rrf	??___fpclassifyf+2,f
 13491  2310  0CA5               	rrf	??___fpclassifyf+1,f
 13492  2311  0CA4               	rrf	??___fpclassifyf,f
 13493  2312  0B89               	decfsz	9,f
 13494  2313  2B0E               	goto	u9265
 13495  2314  30FF               	movlw	255
 13496  2315  0524               	andwf	??___fpclassifyf,w
 13497  2316  00AA               	movwf	___fpclassifyf@e
 13498  2317  3000               	movlw	0
 13499  2318  0525               	andwf	??___fpclassifyf+1,w
 13500  2319  00AB               	movwf	___fpclassifyf@e+1
 13501  231A  082A               	movf	___fpclassifyf@e,w
 13502  231B  042B               	iorwf	___fpclassifyf@e+1,w
 13503  231C  1D03               	btfss	3,2
 13504  231D  2B3D               	goto	l7148
 13505  231E  082C               	movf	___fpclassifyf@u,w
 13506  231F  00A4               	movwf	??___fpclassifyf
 13507  2320  082D               	movf	___fpclassifyf@u+1,w
 13508  2321  00A5               	movwf	??___fpclassifyf+1
 13509  2322  082E               	movf	___fpclassifyf@u+2,w
 13510  2323  00A6               	movwf	??___fpclassifyf+2
 13511  2324  082F               	movf	___fpclassifyf@u+3,w
 13512  2325  00A7               	movwf	??___fpclassifyf+3
 13513  2326  3001               	movlw	1
 13514  2327                     u9285:	
 13515  2327  35A4               	lslf	??___fpclassifyf,f
 13516  2328  0DA5               	rlf	??___fpclassifyf+1,f
 13517  2329  0DA6               	rlf	??___fpclassifyf+2,f
 13518  232A  0DA7               	rlf	??___fpclassifyf+3,f
 13519  232B  0B89               	decfsz	9,f
 13520  232C  2B27               	goto	u9285
 13521  232D  0827               	movf	??___fpclassifyf+3,w
 13522  232E  0426               	iorwf	??___fpclassifyf+2,w
 13523  232F  0425               	iorwf	??___fpclassifyf+1,w
 13524  2330  0424               	iorwf	??___fpclassifyf,w
 13525  2331  1D03               	skipz
 13526  2332  2B38               	goto	l7144
 13527  2333  3002               	movlw	2
 13528  2334  00A0               	movwf	?___fpclassifyf
 13529  2335  3000               	movlw	0
 13530  2336  00A1               	movwf	?___fpclassifyf+1
 13531  2337  0008               	return
 13532  2338                     l7144:	
 13533  2338  3003               	movlw	3
 13534  2339  00A0               	movwf	?___fpclassifyf
 13535  233A  3000               	movlw	0
 13536  233B  00A1               	movwf	?___fpclassifyf+1
 13537  233C  0008               	return
 13538  233D                     l7148:	
 13539  233D  0A2A               	incf	___fpclassifyf@e,w
 13540  233E  042B               	iorwf	___fpclassifyf@e+1,w
 13541  233F  1D03               	btfss	3,2
 13542  2340  2B60               	goto	l7154
 13543  2341  082C               	movf	___fpclassifyf@u,w
 13544  2342  00A4               	movwf	??___fpclassifyf
 13545  2343  082D               	movf	___fpclassifyf@u+1,w
 13546  2344  00A5               	movwf	??___fpclassifyf+1
 13547  2345  082E               	movf	___fpclassifyf@u+2,w
 13548  2346  00A6               	movwf	??___fpclassifyf+2
 13549  2347  082F               	movf	___fpclassifyf@u+3,w
 13550  2348  00A7               	movwf	??___fpclassifyf+3
 13551  2349  3009               	movlw	9
 13552  234A                     u9315:	
 13553  234A  35A4               	lslf	??___fpclassifyf,f
 13554  234B  0DA5               	rlf	??___fpclassifyf+1,f
 13555  234C  0DA6               	rlf	??___fpclassifyf+2,f
 13556  234D  0DA7               	rlf	??___fpclassifyf+3,f
 13557  234E  0B89               	decfsz	9,f
 13558  234F  2B4A               	goto	u9315
 13559  2350  0827               	movf	??___fpclassifyf+3,w
 13560  2351  0426               	iorwf	??___fpclassifyf+2,w
 13561  2352  0425               	iorwf	??___fpclassifyf+1,w
 13562  2353  0424               	iorwf	??___fpclassifyf,w
 13563  2354  1D03               	btfss	3,2
 13564  2355  2B58               	goto	u9320
 13565  2356  3001               	movlw	1
 13566  2357  2B59               	goto	u9330
 13567  2358                     u9320:	
 13568  2358  3000               	movlw	0
 13569  2359                     u9330:	
 13570  2359  00A8               	movwf	??___fpclassifyf+4
 13571  235A  01A9               	clrf	??___fpclassifyf+5
 13572  235B  0828               	movf	??___fpclassifyf+4,w
 13573  235C  00A0               	movwf	?___fpclassifyf
 13574  235D  0829               	movf	??___fpclassifyf+5,w
 13575  235E  00A1               	movwf	?___fpclassifyf+1
 13576  235F  0008               	return
 13577  2360                     l7154:	
 13578  2360  3004               	movlw	4
 13579  2361  00A0               	movwf	?___fpclassifyf
 13580  2362  3000               	movlw	0
 13581  2363  00A1               	movwf	?___fpclassifyf+1
 13582  2364  0008               	return
 13583  2365                     __end_of___fpclassifyf:	
 13584                           
 13585                           	psect	text30
 13586  221E                     __ptext30:	
 13587 ;; *************** function ___fltol *****************
 13588 ;; Defined at:
 13589 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fltol.c"
 13590 ;; Parameters:    Size  Location     Type
 13591 ;;  f1              4    0[BANK0 ] int 
 13592 ;; Auto vars:     Size  Location     Type
 13593 ;;  exp1            1   10[BANK0 ] unsigned char 
 13594 ;;  sign1           1    9[BANK0 ] unsigned char 
 13595 ;; Return value:  Size  Location     Type
 13596 ;;                  4    0[BANK0 ] long 
 13597 ;; Registers used:
 13598 ;;		wreg, status,2, status,0
 13599 ;; Tracked objects:
 13600 ;;		On entry : 0/0
 13601 ;;		On exit  : 0/0
 13602 ;;		Unchanged: 0/0
 13603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13604 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13605 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13606 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13607 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13608 ;;Total ram usage:       11 bytes
 13609 ;; Hardware stack levels used:    1
 13610 ;; Hardware stack levels required when called:    3
 13611 ;; This function calls:
 13612 ;;		Nothing
 13613 ;; This function is called by:
 13614 ;;		_efgtoa
 13615 ;;		_getAvgChannelCurrents
 13616 ;; This function uses a non-reentrant model
 13617 ;;
 13618                           
 13619                           
 13620                           ;psect for function ___fltol
 13621  221E                     ___fltol:	
 13622                           
 13623                           ;incstack = 0
 13624                           ; Regs used in ___fltol: [wreg+status,2+status,0]
 13625  221E  1003               	clrc
 13626  221F  0140               	movlb	0	; select bank0
 13627  2220  0D22               	rlf	___fltol@f1+2,w
 13628  2221  0D23               	rlf	___fltol@f1+3,w
 13629  2222  00A4               	movwf	??___fltol
 13630  2223  0824               	movf	??___fltol,w
 13631  2224  00AA               	movwf	___fltol@exp1
 13632  2225  082A               	movf	___fltol@exp1,w
 13633  2226  1D03               	btfss	3,2
 13634  2227  2A31               	goto	l7412
 13635  2228                     l7408:	
 13636  2228  3000               	movlw	0
 13637  2229  00A3               	movwf	?___fltol+3
 13638  222A  3000               	movlw	0
 13639  222B  00A2               	movwf	?___fltol+2
 13640  222C  3000               	movlw	0
 13641  222D  00A1               	movwf	?___fltol+1
 13642  222E  3000               	movlw	0
 13643  222F  00A0               	movwf	?___fltol
 13644  2230  0008               	return
 13645  2231                     l7412:	
 13646  2231  0820               	movf	___fltol@f1,w
 13647  2232  00A4               	movwf	??___fltol
 13648  2233  0821               	movf	___fltol@f1+1,w
 13649  2234  00A5               	movwf	??___fltol+1
 13650  2235  0822               	movf	___fltol@f1+2,w
 13651  2236  00A6               	movwf	??___fltol+2
 13652  2237  0823               	movf	___fltol@f1+3,w
 13653  2238  00A7               	movwf	??___fltol+3
 13654  2239  301F               	movlw	31
 13655  223A                     u10045:	
 13656  223A  36A7               	lsrf	??___fltol+3,f
 13657  223B  0CA6               	rrf	??___fltol+2,f
 13658  223C  0CA5               	rrf	??___fltol+1,f
 13659  223D  0CA4               	rrf	??___fltol,f
 13660  223E  0B89               	decfsz	9,f
 13661  223F  2A3A               	goto	u10045
 13662  2240  0824               	movf	??___fltol,w
 13663  2241  00A8               	movwf	??___fltol+4
 13664  2242  0828               	movf	??___fltol+4,w
 13665  2243  00A9               	movwf	___fltol@sign1
 13666  2244  17A2               	bsf	___fltol@f1+2,7
 13667  2245  30FF               	movlw	255
 13668  2246  05A0               	andwf	___fltol@f1,f
 13669  2247  30FF               	movlw	255
 13670  2248  05A1               	andwf	___fltol@f1+1,f
 13671  2249  30FF               	movlw	255
 13672  224A  05A2               	andwf	___fltol@f1+2,f
 13673  224B  3000               	movlw	0
 13674  224C  05A3               	andwf	___fltol@f1+3,f
 13675  224D  3096               	movlw	150
 13676  224E  02AA               	subwf	___fltol@exp1,f
 13677  224F  1FAA               	btfss	___fltol@exp1,7
 13678  2250  2A64               	goto	l7430
 13679  2251  082A               	movf	___fltol@exp1,w
 13680  2252  3A80               	xorlw	128
 13681  2253  3E97               	addlw	151
 13682  2254  1C03               	btfss	3,0
 13683  2255  2A28               	goto	l7408
 13684  2256                     l7428:	
 13685  2256  3001               	movlw	1
 13686  2257                     u10075:	
 13687  2257  36A3               	lsrf	___fltol@f1+3,f
 13688  2258  0CA2               	rrf	___fltol@f1+2,f
 13689  2259  0CA1               	rrf	___fltol@f1+1,f
 13690  225A  0CA0               	rrf	___fltol@f1,f
 13691  225B  0B89               	decfsz	9,f
 13692  225C  2A57               	goto	u10075
 13693  225D  3001               	movlw	1
 13694  225E  00A4               	movwf	??___fltol
 13695  225F  0824               	movf	??___fltol,w
 13696  2260  07AA               	addwf	___fltol@exp1,f
 13697  2261  1903               	btfsc	3,2
 13698  2262  2A75               	goto	l7438
 13699  2263  2A56               	goto	l7428
 13700  2264                     l7430:	
 13701  2264  3020               	movlw	32
 13702  2265  022A               	subwf	___fltol@exp1,w
 13703  2266  1803               	btfsc	3,0
 13704  2267  2A28               	goto	l7408
 13705  2268                     l1140:	
 13706  2268  082A               	movf	___fltol@exp1,w
 13707  2269  1903               	btfsc	3,2
 13708  226A  2A75               	goto	l7438
 13709  226B  3001               	movlw	1
 13710  226C                     u10105:	
 13711  226C  35A0               	lslf	___fltol@f1,f
 13712  226D  0DA1               	rlf	___fltol@f1+1,f
 13713  226E  0DA2               	rlf	___fltol@f1+2,f
 13714  226F  0DA3               	rlf	___fltol@f1+3,f
 13715  2270  0B89               	decfsz	9,f
 13716  2271  2A6C               	goto	u10105
 13717  2272  3001               	movlw	1
 13718  2273  02AA               	subwf	___fltol@exp1,f
 13719  2274  2A68               	goto	l1140
 13720  2275                     l7438:	
 13721  2275  0829               	movf	___fltol@sign1,w
 13722  2276  1903               	btfsc	3,2
 13723  2277  0008               	return
 13724  2278  09A0               	comf	___fltol@f1,f
 13725  2279  09A1               	comf	___fltol@f1+1,f
 13726  227A  09A2               	comf	___fltol@f1+2,f
 13727  227B  09A3               	comf	___fltol@f1+3,f
 13728  227C  0AA0               	incf	___fltol@f1,f
 13729  227D  1903               	skipnz
 13730  227E  0AA1               	incf	___fltol@f1+1,f
 13731  227F  1903               	skipnz
 13732  2280  0AA2               	incf	___fltol@f1+2,f
 13733  2281  1903               	skipnz
 13734  2282  0AA3               	incf	___fltol@f1+3,f
 13735  2283  0008               	return
 13736  2284                     __end_of___fltol:	
 13737                           
 13738                           	psect	text31
 13739  2B19                     __ptext31:	
 13740 ;; *************** function ___flsub *****************
 13741 ;; Defined at:
 13742 ;;		line 242 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 13743 ;; Parameters:    Size  Location     Type
 13744 ;;  a               4   60[BANK0 ] long 
 13745 ;;  b               4   64[BANK0 ] long 
 13746 ;; Auto vars:     Size  Location     Type
 13747 ;;		None
 13748 ;; Return value:  Size  Location     Type
 13749 ;;                  4   60[BANK0 ] long 
 13750 ;; Registers used:
 13751 ;;		wreg, status,2, status,0, pclath, cstack
 13752 ;; Tracked objects:
 13753 ;;		On entry : 0/0
 13754 ;;		On exit  : 0/0
 13755 ;;		Unchanged: 0/0
 13756 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13757 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13760 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13761 ;;Total ram usage:        8 bytes
 13762 ;; Hardware stack levels used:    1
 13763 ;; Hardware stack levels required when called:    4
 13764 ;; This function calls:
 13765 ;;		___fladd
 13766 ;; This function is called by:
 13767 ;;		_spinInput
 13768 ;;		_efgtoa
 13769 ;;		_calcRequiredPower
 13770 ;; This function uses a non-reentrant model
 13771 ;;
 13772                           
 13773                           
 13774                           ;psect for function ___flsub
 13775  2B19                     ___flsub:	
 13776                           
 13777                           ;incstack = 0
 13778                           ; Regs used in ___flsub: [wreg+status,2+status,0+pclath+cstack]
 13779  2B19  3080               	movlw	128
 13780  2B1A  0140               	movlb	0	; select bank0
 13781  2B1B  06DF               	xorwf	___flsub@a+3,f
 13782  2B1C  0863               	movf	___flsub@b+3,w
 13783  2B1D  00CB               	movwf	___fladd@b+3
 13784  2B1E  0862               	movf	___flsub@b+2,w
 13785  2B1F  00CA               	movwf	___fladd@b+2
 13786  2B20  0861               	movf	___flsub@b+1,w
 13787  2B21  00C9               	movwf	___fladd@b+1
 13788  2B22  0860               	movf	___flsub@b,w
 13789  2B23  00C8               	movwf	___fladd@b
 13790  2B24  085F               	movf	___flsub@a+3,w
 13791  2B25  00CF               	movwf	___fladd@a+3
 13792  2B26  085E               	movf	___flsub@a+2,w
 13793  2B27  00CE               	movwf	___fladd@a+2
 13794  2B28  085D               	movf	___flsub@a+1,w
 13795  2B29  00CD               	movwf	___fladd@a+1
 13796  2B2A  085C               	movf	___flsub@a,w
 13797  2B2B  00CC               	movwf	___fladd@a
 13798  2B2C  3188  2045         	fcall	___fladd
 13799  2B2E  0140               	movlb	0	; select bank0
 13800  2B2F  084B               	movf	?___fladd+3,w
 13801  2B30  00DF               	movwf	?___flsub+3
 13802  2B31  084A               	movf	?___fladd+2,w
 13803  2B32  00DE               	movwf	?___flsub+2
 13804  2B33  0849               	movf	?___fladd+1,w
 13805  2B34  00DD               	movwf	?___flsub+1
 13806  2B35  0848               	movf	?___fladd,w
 13807  2B36  00DC               	movwf	?___flsub
 13808  2B37  0008               	return
 13809  2B38                     __end_of___flsub:	
 13810                           
 13811                           	psect	text32
 13812  29A7                     __ptext32:	
 13813 ;; *************** function ___flneg *****************
 13814 ;; Defined at:
 13815 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flneg.c"
 13816 ;; Parameters:    Size  Location     Type
 13817 ;;  f1              4    0[BANK0 ] long 
 13818 ;; Auto vars:     Size  Location     Type
 13819 ;;		None
 13820 ;; Return value:  Size  Location     Type
 13821 ;;                  4    0[BANK0 ] long 
 13822 ;; Registers used:
 13823 ;;		wreg
 13824 ;; Tracked objects:
 13825 ;;		On entry : 0/0
 13826 ;;		On exit  : 0/0
 13827 ;;		Unchanged: 0/0
 13828 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13829 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13832 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13833 ;;Total ram usage:        4 bytes
 13834 ;; Hardware stack levels used:    1
 13835 ;; Hardware stack levels required when called:    3
 13836 ;; This function calls:
 13837 ;;		Nothing
 13838 ;; This function is called by:
 13839 ;;		_efgtoa
 13840 ;; This function uses a non-reentrant model
 13841 ;;
 13842                           
 13843                           
 13844                           ;psect for function ___flneg
 13845  29A7                     ___flneg:	
 13846                           
 13847                           ;incstack = 0
 13848                           ; Regs used in ___flneg: [wreg]
 13849  29A7  0140               	movlb	0	; select bank0
 13850  29A8  0823               	movf	___flneg@f1+3,w
 13851  29A9  0422               	iorwf	___flneg@f1+2,w
 13852  29AA  0421               	iorwf	___flneg@f1+1,w
 13853  29AB  0420               	iorwf	___flneg@f1,w
 13854  29AC  1903               	skipnz
 13855  29AD  0008               	return
 13856  29AE  3080               	movlw	128
 13857  29AF  06A3               	xorwf	___flneg@f1+3,f
 13858  29B0  0008               	return
 13859  29B1                     __end_of___flneg:	
 13860                           
 13861                           	psect	text33
 13862  2E22                     __ptext33:	
 13863 ;; *************** function ___fleq *****************
 13864 ;; Defined at:
 13865 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\fleq.c"
 13866 ;; Parameters:    Size  Location     Type
 13867 ;;  ff1             4    0[BANK0 ] long 
 13868 ;;  ff2             4    4[BANK0 ] long 
 13869 ;; Auto vars:     Size  Location     Type
 13870 ;;		None
 13871 ;; Return value:  Size  Location     Type
 13872 ;;		None               void
 13873 ;; Registers used:
 13874 ;;		wreg, status,2, status,0
 13875 ;; Tracked objects:
 13876 ;;		On entry : 0/0
 13877 ;;		On exit  : 0/0
 13878 ;;		Unchanged: 0/0
 13879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 13880 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13881 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13882 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13883 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 13884 ;;Total ram usage:       12 bytes
 13885 ;; Hardware stack levels used:    1
 13886 ;; Hardware stack levels required when called:    3
 13887 ;; This function calls:
 13888 ;;		Nothing
 13889 ;; This function is called by:
 13890 ;;		_channelSetup
 13891 ;;		_setOutputPower
 13892 ;;		_efgtoa
 13893 ;; This function uses a non-reentrant model
 13894 ;;
 13895                           
 13896                           
 13897                           ;psect for function ___fleq
 13898  2E22                     ___fleq:	
 13899                           
 13900                           ;incstack = 0
 13901                           ; Regs used in ___fleq: [wreg+status,2+status,0]
 13902  2E22  3000               	movlw	0
 13903  2E23  0140               	movlb	0	; select bank0
 13904  2E24  0520               	andwf	___fleq@ff1,w
 13905  2E25  00A8               	movwf	??___fleq
 13906  2E26  3000               	movlw	0
 13907  2E27  0521               	andwf	___fleq@ff1+1,w
 13908  2E28  00A9               	movwf	??___fleq+1
 13909  2E29  3080               	movlw	128
 13910  2E2A  0522               	andwf	___fleq@ff1+2,w
 13911  2E2B  00AA               	movwf	??___fleq+2
 13912  2E2C  307F               	movlw	127
 13913  2E2D  0523               	andwf	___fleq@ff1+3,w
 13914  2E2E  00AB               	movwf	??___fleq+3
 13915  2E2F  082B               	movf	??___fleq+3,w
 13916  2E30  042A               	iorwf	??___fleq+2,w
 13917  2E31  0429               	iorwf	??___fleq+1,w
 13918  2E32  0428               	iorwf	??___fleq,w
 13919  2E33  1D03               	skipz
 13920  2E34  2E3D               	goto	l1108
 13921  2E35  3000               	movlw	0
 13922  2E36  00A3               	movwf	___fleq@ff1+3
 13923  2E37  3000               	movlw	0
 13924  2E38  00A2               	movwf	___fleq@ff1+2
 13925  2E39  3000               	movlw	0
 13926  2E3A  00A1               	movwf	___fleq@ff1+1
 13927  2E3B  3000               	movlw	0
 13928  2E3C  00A0               	movwf	___fleq@ff1
 13929  2E3D                     l1108:	
 13930  2E3D  3000               	movlw	0
 13931  2E3E  0524               	andwf	___fleq@ff2,w
 13932  2E3F  00A8               	movwf	??___fleq
 13933  2E40  3000               	movlw	0
 13934  2E41  0525               	andwf	___fleq@ff2+1,w
 13935  2E42  00A9               	movwf	??___fleq+1
 13936  2E43  3080               	movlw	128
 13937  2E44  0526               	andwf	___fleq@ff2+2,w
 13938  2E45  00AA               	movwf	??___fleq+2
 13939  2E46  307F               	movlw	127
 13940  2E47  0527               	andwf	___fleq@ff2+3,w
 13941  2E48  00AB               	movwf	??___fleq+3
 13942  2E49  082B               	movf	??___fleq+3,w
 13943  2E4A  042A               	iorwf	??___fleq+2,w
 13944  2E4B  0429               	iorwf	??___fleq+1,w
 13945  2E4C  0428               	iorwf	??___fleq,w
 13946  2E4D  1D03               	skipz
 13947  2E4E  2E57               	goto	l1109
 13948  2E4F  3000               	movlw	0
 13949  2E50  00A7               	movwf	___fleq@ff2+3
 13950  2E51  3000               	movlw	0
 13951  2E52  00A6               	movwf	___fleq@ff2+2
 13952  2E53  3000               	movlw	0
 13953  2E54  00A5               	movwf	___fleq@ff2+1
 13954  2E55  3000               	movlw	0
 13955  2E56  00A4               	movwf	___fleq@ff2
 13956  2E57                     l1109:	
 13957  2E57  0827               	movf	___fleq@ff2+3,w
 13958  2E58  0623               	xorwf	___fleq@ff1+3,w
 13959  2E59  1D03               	skipz
 13960  2E5A  2E65               	goto	u9965
 13961  2E5B  0826               	movf	___fleq@ff2+2,w
 13962  2E5C  0622               	xorwf	___fleq@ff1+2,w
 13963  2E5D  1D03               	skipz
 13964  2E5E  2E65               	goto	u9965
 13965  2E5F  0825               	movf	___fleq@ff2+1,w
 13966  2E60  0621               	xorwf	___fleq@ff1+1,w
 13967  2E61  1D03               	skipz
 13968  2E62  2E65               	goto	u9965
 13969  2E63  0824               	movf	___fleq@ff2,w
 13970  2E64  0620               	xorwf	___fleq@ff1,w
 13971  2E65                     u9965:	
 13972  2E65  1903               	skipnz
 13973  2E66  2E69               	goto	l7374
 13974  2E67  1003               	clrc
 13975  2E68  0008               	return
 13976  2E69                     l7374:	
 13977  2E69  1403               	setc
 13978  2E6A  0008               	return
 13979  2E6B                     __end_of___fleq:	
 13980                           
 13981                           	psect	text34
 13982  2D94                     __ptext34:	
 13983 ;; *************** function ___awmod *****************
 13984 ;; Defined at:
 13985 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awmod.c"
 13986 ;; Parameters:    Size  Location     Type
 13987 ;;  divisor         2    0[BANK0 ] int 
 13988 ;;  dividend        2    2[BANK0 ] int 
 13989 ;; Auto vars:     Size  Location     Type
 13990 ;;  sign            1    6[BANK0 ] unsigned char 
 13991 ;;  counter         1    5[BANK0 ] unsigned char 
 13992 ;; Return value:  Size  Location     Type
 13993 ;;                  2    0[BANK0 ] int 
 13994 ;; Registers used:
 13995 ;;		wreg, status,2, status,0
 13996 ;; Tracked objects:
 13997 ;;		On entry : 0/0
 13998 ;;		On exit  : 0/0
 13999 ;;		Unchanged: 0/0
 14000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14001 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14002 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14003 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14004 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14005 ;;Total ram usage:        7 bytes
 14006 ;; Hardware stack levels used:    1
 14007 ;; Hardware stack levels required when called:    3
 14008 ;; This function calls:
 14009 ;;		Nothing
 14010 ;; This function is called by:
 14011 ;;		_efgtoa
 14012 ;; This function uses a non-reentrant model
 14013 ;;
 14014                           
 14015                           
 14016                           ;psect for function ___awmod
 14017  2D94                     ___awmod:	
 14018                           
 14019                           ;incstack = 0
 14020                           ; Regs used in ___awmod: [wreg+status,2+status,0]
 14021  2D94  0140               	movlb	0	; select bank0
 14022  2D95  01A6               	clrf	___awmod@sign
 14023  2D96  1FA3               	btfss	___awmod@dividend+1,7
 14024  2D97  2D9F               	goto	l7336
 14025  2D98  09A2               	comf	___awmod@dividend,f
 14026  2D99  09A3               	comf	___awmod@dividend+1,f
 14027  2D9A  0AA2               	incf	___awmod@dividend,f
 14028  2D9B  1903               	skipnz
 14029  2D9C  0AA3               	incf	___awmod@dividend+1,f
 14030  2D9D  01A6               	clrf	___awmod@sign
 14031  2D9E  0AA6               	incf	___awmod@sign,f
 14032  2D9F                     l7336:	
 14033  2D9F  1FA1               	btfss	___awmod@divisor+1,7
 14034  2DA0  2DA6               	goto	l7340
 14035  2DA1  09A0               	comf	___awmod@divisor,f
 14036  2DA2  09A1               	comf	___awmod@divisor+1,f
 14037  2DA3  0AA0               	incf	___awmod@divisor,f
 14038  2DA4  1903               	skipnz
 14039  2DA5  0AA1               	incf	___awmod@divisor+1,f
 14040  2DA6                     l7340:	
 14041  2DA6  0820               	movf	___awmod@divisor,w
 14042  2DA7  0421               	iorwf	___awmod@divisor+1,w
 14043  2DA8  1903               	btfsc	3,2
 14044  2DA9  2DCD               	goto	l7358
 14045  2DAA  01A5               	clrf	___awmod@counter
 14046  2DAB  0AA5               	incf	___awmod@counter,f
 14047  2DAC                     l7348:	
 14048  2DAC  1BA1               	btfsc	___awmod@divisor+1,7
 14049  2DAD  2DB8               	goto	l7350
 14050  2DAE  3001               	movlw	1
 14051  2DAF                     u9885:	
 14052  2DAF  35A0               	lslf	___awmod@divisor,f
 14053  2DB0  0DA1               	rlf	___awmod@divisor+1,f
 14054  2DB1  0B89               	decfsz	9,f
 14055  2DB2  2DAF               	goto	u9885
 14056  2DB3  3001               	movlw	1
 14057  2DB4  00A4               	movwf	??___awmod
 14058  2DB5  0824               	movf	??___awmod,w
 14059  2DB6  07A5               	addwf	___awmod@counter,f
 14060  2DB7  2DAC               	goto	l7348
 14061  2DB8                     l7350:	
 14062  2DB8  0821               	movf	___awmod@divisor+1,w
 14063  2DB9  0223               	subwf	___awmod@dividend+1,w
 14064  2DBA  1D03               	skipz
 14065  2DBB  2DBE               	goto	u9905
 14066  2DBC  0820               	movf	___awmod@divisor,w
 14067  2DBD  0222               	subwf	___awmod@dividend,w
 14068  2DBE                     u9905:	
 14069  2DBE  1C03               	skipc
 14070  2DBF  2DC4               	goto	l7354
 14071  2DC0  0820               	movf	___awmod@divisor,w
 14072  2DC1  02A2               	subwf	___awmod@dividend,f
 14073  2DC2  0821               	movf	___awmod@divisor+1,w
 14074  2DC3  3BA3               	subwfb	___awmod@dividend+1,f
 14075  2DC4                     l7354:	
 14076  2DC4  3001               	movlw	1
 14077  2DC5                     u9915:	
 14078  2DC5  36A1               	lsrf	___awmod@divisor+1,f
 14079  2DC6  0CA0               	rrf	___awmod@divisor,f
 14080  2DC7  0B89               	decfsz	9,f
 14081  2DC8  2DC5               	goto	u9915
 14082  2DC9  3001               	movlw	1
 14083  2DCA  02A5               	subwf	___awmod@counter,f
 14084  2DCB  1D03               	btfss	3,2
 14085  2DCC  2DB8               	goto	l7350
 14086  2DCD                     l7358:	
 14087  2DCD  0826               	movf	___awmod@sign,w
 14088  2DCE  1903               	btfsc	3,2
 14089  2DCF  2DD5               	goto	l7362
 14090  2DD0  09A2               	comf	___awmod@dividend,f
 14091  2DD1  09A3               	comf	___awmod@dividend+1,f
 14092  2DD2  0AA2               	incf	___awmod@dividend,f
 14093  2DD3  1903               	skipnz
 14094  2DD4  0AA3               	incf	___awmod@dividend+1,f
 14095  2DD5                     l7362:	
 14096  2DD5  0823               	movf	___awmod@dividend+1,w
 14097  2DD6  00A1               	movwf	?___awmod+1
 14098  2DD7  0822               	movf	___awmod@dividend,w
 14099  2DD8  00A0               	movwf	?___awmod
 14100  2DD9  0008               	return
 14101  2DDA                     __end_of___awmod:	
 14102                           
 14103                           	psect	text35
 14104  2EB6                     __ptext35:	
 14105 ;; *************** function ___awdiv *****************
 14106 ;; Defined at:
 14107 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\awdiv.c"
 14108 ;; Parameters:    Size  Location     Type
 14109 ;;  divisor         2    0[BANK0 ] int 
 14110 ;;  dividend        2    2[BANK0 ] int 
 14111 ;; Auto vars:     Size  Location     Type
 14112 ;;  quotient        2    7[BANK0 ] int 
 14113 ;;  sign            1    6[BANK0 ] unsigned char 
 14114 ;;  counter         1    5[BANK0 ] unsigned char 
 14115 ;; Return value:  Size  Location     Type
 14116 ;;                  2    0[BANK0 ] int 
 14117 ;; Registers used:
 14118 ;;		wreg, status,2, status,0
 14119 ;; Tracked objects:
 14120 ;;		On entry : 0/0
 14121 ;;		On exit  : 0/0
 14122 ;;		Unchanged: 0/0
 14123 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14124 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14125 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14126 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14127 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14128 ;;Total ram usage:        9 bytes
 14129 ;; Hardware stack levels used:    1
 14130 ;; Hardware stack levels required when called:    3
 14131 ;; This function calls:
 14132 ;;		Nothing
 14133 ;; This function is called by:
 14134 ;;		_efgtoa
 14135 ;; This function uses a non-reentrant model
 14136 ;;
 14137                           
 14138                           
 14139                           ;psect for function ___awdiv
 14140  2EB6                     ___awdiv:	
 14141                           
 14142                           ;incstack = 0
 14143                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
 14144  2EB6  0140               	movlb	0	; select bank0
 14145  2EB7  01A6               	clrf	___awdiv@sign
 14146  2EB8  1FA1               	btfss	___awdiv@divisor+1,7
 14147  2EB9  2EC1               	goto	l7292
 14148  2EBA  09A0               	comf	___awdiv@divisor,f
 14149  2EBB  09A1               	comf	___awdiv@divisor+1,f
 14150  2EBC  0AA0               	incf	___awdiv@divisor,f
 14151  2EBD  1903               	skipnz
 14152  2EBE  0AA1               	incf	___awdiv@divisor+1,f
 14153  2EBF  01A6               	clrf	___awdiv@sign
 14154  2EC0  0AA6               	incf	___awdiv@sign,f
 14155  2EC1                     l7292:	
 14156  2EC1  1FA3               	btfss	___awdiv@dividend+1,7
 14157  2EC2  2ECC               	goto	l7298
 14158  2EC3  09A2               	comf	___awdiv@dividend,f
 14159  2EC4  09A3               	comf	___awdiv@dividend+1,f
 14160  2EC5  0AA2               	incf	___awdiv@dividend,f
 14161  2EC6  1903               	skipnz
 14162  2EC7  0AA3               	incf	___awdiv@dividend+1,f
 14163  2EC8  3001               	movlw	1
 14164  2EC9  00A4               	movwf	??___awdiv
 14165  2ECA  0824               	movf	??___awdiv,w
 14166  2ECB  06A6               	xorwf	___awdiv@sign,f
 14167  2ECC                     l7298:	
 14168  2ECC  01A7               	clrf	___awdiv@quotient
 14169  2ECD  01A8               	clrf	___awdiv@quotient+1
 14170  2ECE  0820               	movf	___awdiv@divisor,w
 14171  2ECF  0421               	iorwf	___awdiv@divisor+1,w
 14172  2ED0  1903               	btfsc	3,2
 14173  2ED1  2EFB               	goto	l7320
 14174  2ED2  01A5               	clrf	___awdiv@counter
 14175  2ED3  0AA5               	incf	___awdiv@counter,f
 14176  2ED4                     l7308:	
 14177  2ED4  1BA1               	btfsc	___awdiv@divisor+1,7
 14178  2ED5  2EE0               	goto	l7310
 14179  2ED6  3001               	movlw	1
 14180  2ED7                     u9785:	
 14181  2ED7  35A0               	lslf	___awdiv@divisor,f
 14182  2ED8  0DA1               	rlf	___awdiv@divisor+1,f
 14183  2ED9  0B89               	decfsz	9,f
 14184  2EDA  2ED7               	goto	u9785
 14185  2EDB  3001               	movlw	1
 14186  2EDC  00A4               	movwf	??___awdiv
 14187  2EDD  0824               	movf	??___awdiv,w
 14188  2EDE  07A5               	addwf	___awdiv@counter,f
 14189  2EDF  2ED4               	goto	l7308
 14190  2EE0                     l7310:	
 14191  2EE0  3001               	movlw	1
 14192  2EE1                     u9805:	
 14193  2EE1  35A7               	lslf	___awdiv@quotient,f
 14194  2EE2  0DA8               	rlf	___awdiv@quotient+1,f
 14195  2EE3  0B89               	decfsz	9,f
 14196  2EE4  2EE1               	goto	u9805
 14197  2EE5  0821               	movf	___awdiv@divisor+1,w
 14198  2EE6  0223               	subwf	___awdiv@dividend+1,w
 14199  2EE7  1D03               	skipz
 14200  2EE8  2EEB               	goto	u9815
 14201  2EE9  0820               	movf	___awdiv@divisor,w
 14202  2EEA  0222               	subwf	___awdiv@dividend,w
 14203  2EEB                     u9815:	
 14204  2EEB  1C03               	skipc
 14205  2EEC  2EF2               	goto	l7316
 14206  2EED  0820               	movf	___awdiv@divisor,w
 14207  2EEE  02A2               	subwf	___awdiv@dividend,f
 14208  2EEF  0821               	movf	___awdiv@divisor+1,w
 14209  2EF0  3BA3               	subwfb	___awdiv@dividend+1,f
 14210  2EF1  1427               	bsf	___awdiv@quotient,0
 14211  2EF2                     l7316:	
 14212  2EF2  3001               	movlw	1
 14213  2EF3                     u9825:	
 14214  2EF3  36A1               	lsrf	___awdiv@divisor+1,f
 14215  2EF4  0CA0               	rrf	___awdiv@divisor,f
 14216  2EF5  0B89               	decfsz	9,f
 14217  2EF6  2EF3               	goto	u9825
 14218  2EF7  3001               	movlw	1
 14219  2EF8  02A5               	subwf	___awdiv@counter,f
 14220  2EF9  1D03               	btfss	3,2
 14221  2EFA  2EE0               	goto	l7310
 14222  2EFB                     l7320:	
 14223  2EFB  0826               	movf	___awdiv@sign,w
 14224  2EFC  1903               	btfsc	3,2
 14225  2EFD  2F03               	goto	l7324
 14226  2EFE  09A7               	comf	___awdiv@quotient,f
 14227  2EFF  09A8               	comf	___awdiv@quotient+1,f
 14228  2F00  0AA7               	incf	___awdiv@quotient,f
 14229  2F01  1903               	skipnz
 14230  2F02  0AA8               	incf	___awdiv@quotient+1,f
 14231  2F03                     l7324:	
 14232  2F03  0828               	movf	___awdiv@quotient+1,w
 14233  2F04  00A1               	movwf	?___awdiv+1
 14234  2F05  0827               	movf	___awdiv@quotient,w
 14235  2F06  00A0               	movwf	?___awdiv
 14236  2F07  0008               	return
 14237  2F08                     __end_of___awdiv:	
 14238                           
 14239                           	psect	text36
 14240  1EAF                     __ptext36:	
 14241 ;; *************** function _dtoa *****************
 14242 ;; Defined at:
 14243 ;;		line 274 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
 14244 ;; Parameters:    Size  Location     Type
 14245 ;;  fp              1    wreg     PTR struct _IO_FILE
 14246 ;;		 -> sprintf@f(6), 
 14247 ;;  d               8   27[BANK0 ] long long 
 14248 ;; Auto vars:     Size  Location     Type
 14249 ;;  fp              1   38[BANK0 ] PTR struct _IO_FILE
 14250 ;;		 -> sprintf@f(6), 
 14251 ;;  n               8   47[BANK0 ] long long 
 14252 ;;  i               2   55[BANK0 ] int 
 14253 ;;  s               2   45[BANK0 ] int 
 14254 ;;  w               2   43[BANK0 ] int 
 14255 ;;  p               2   41[BANK0 ] int 
 14256 ;; Return value:  Size  Location     Type
 14257 ;;                  2   27[BANK0 ] int 
 14258 ;; Registers used:
 14259 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14260 ;; Tracked objects:
 14261 ;;		On entry : 0/0
 14262 ;;		On exit  : 0/0
 14263 ;;		Unchanged: 0/0
 14264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14265 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14266 ;;      Locals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14267 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14268 ;;      Totals:         0      30       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14269 ;;Total ram usage:       30 bytes
 14270 ;; Hardware stack levels used:    1
 14271 ;; Hardware stack levels required when called:    7
 14272 ;; This function calls:
 14273 ;;		___aodiv
 14274 ;;		___aomod
 14275 ;;		_abs
 14276 ;;		_pad
 14277 ;; This function is called by:
 14278 ;;		_vfpfcnvrt
 14279 ;; This function uses a non-reentrant model
 14280 ;;
 14281                           
 14282                           
 14283                           ;psect for function _dtoa
 14284  1EAF                     _dtoa:	
 14285                           
 14286                           ;incstack = 0
 14287                           ; Regs used in _dtoa: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14288                           ;dtoa@fp stored from wreg
 14289  1EAF  0140               	movlb	0	; select bank0
 14290  1EB0  00C6               	movwf	dtoa@fp
 14291                           
 14292                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 274: static
      +                           int dtoa(FILE *fp, long long d);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\
      +                          c99\common\doprnt.c: 275: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\c
      +                          ommon\doprnt.c: 276:     int i, p, s, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\
      +                          sources\c99\common\doprnt.c: 277:     long long n;;C:\Program Files (x86)\Microchip\xc8\
      +                          v2.10\pic\sources\c99\common\doprnt.c: 280:     n = d;
 14293  1EB1  083B               	movf	dtoa@d,w
 14294  1EB2  00CF               	movwf	dtoa@n
 14295  1EB3  083C               	movf	dtoa@d+1,w
 14296  1EB4  00D0               	movwf	dtoa@n+1
 14297  1EB5  083D               	movf	dtoa@d+2,w
 14298  1EB6  00D1               	movwf	dtoa@n+2
 14299  1EB7  083E               	movf	dtoa@d+3,w
 14300  1EB8  00D2               	movwf	dtoa@n+3
 14301  1EB9  083F               	movf	dtoa@d+4,w
 14302  1EBA  00D3               	movwf	dtoa@n+4
 14303  1EBB  0840               	movf	dtoa@d+5,w
 14304  1EBC  00D4               	movwf	dtoa@n+5
 14305  1EBD  0841               	movf	dtoa@d+6,w
 14306  1EBE  00D5               	movwf	dtoa@n+6
 14307  1EBF  0842               	movf	dtoa@d+7,w
 14308  1EC0  00D6               	movwf	dtoa@n+7
 14309                           
 14310                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 281:     s 
      +                          = n < 0 ? 1 : 0;
 14311  1EC1  304F               	movlw	low dtoa@n
 14312  1EC2  0086               	movwf	6
 14313  1EC3  3000               	movlw	high dtoa@n
 14314  1EC4  0087               	movwf	7
 14315  1EC5  3F47               	moviw [7]fsr1
 14316  1EC6  00C3               	movwf	??_dtoa
 14317  1EC7  1FC3               	btfss	??_dtoa,7
 14318  1EC8  2ECB               	goto	u10720
 14319  1EC9  3001               	movlw	1
 14320  1ECA  2ECC               	goto	u10730
 14321  1ECB                     u10720:	
 14322  1ECB  3000               	movlw	0
 14323  1ECC                     u10730:	
 14324  1ECC  0140               	movlb	0	; select bank0
 14325  1ECD  00C4               	movwf	??_dtoa+1
 14326  1ECE  01C5               	clrf	??_dtoa+2
 14327  1ECF  0844               	movf	??_dtoa+1,w
 14328  1ED0  00CD               	movwf	dtoa@s
 14329  1ED1  0845               	movf	??_dtoa+2,w
 14330  1ED2  00CE               	movwf	dtoa@s+1
 14331                           
 14332                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 282:     if
      +                           (s) {
 14333  1ED3  084D               	movf	dtoa@s,w
 14334  1ED4  044E               	iorwf	dtoa@s+1,w
 14335  1ED5  1903               	btfsc	3,2
 14336  1ED6  2EF5               	goto	l753
 14337                           
 14338                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 283:       
      +                            n = -n;
 14339  1ED7  09CF               	comf	dtoa@n,f
 14340  1ED8  09D0               	comf	dtoa@n+1,f
 14341  1ED9  09D1               	comf	dtoa@n+2,f
 14342  1EDA  09D2               	comf	dtoa@n+3,f
 14343  1EDB  09D3               	comf	dtoa@n+4,f
 14344  1EDC  09D4               	comf	dtoa@n+5,f
 14345  1EDD  09D5               	comf	dtoa@n+6,f
 14346  1EDE  09D6               	comf	dtoa@n+7,f
 14347  1EDF  0ACF               	incf	dtoa@n,f
 14348  1EE0  1D03               	skipz
 14349  1EE1  2EF5               	goto	l753
 14350  1EE2  0AD0               	incf	dtoa@n+1,f
 14351  1EE3  1D03               	skipz
 14352  1EE4  2EF5               	goto	l753
 14353  1EE5  0AD1               	incf	dtoa@n+2,f
 14354  1EE6  1D03               	skipz
 14355  1EE7  2EF5               	goto	l753
 14356  1EE8  0AD2               	incf	dtoa@n+3,f
 14357  1EE9  1D03               	skipz
 14358  1EEA  2EF5               	goto	l753
 14359  1EEB  0AD3               	incf	dtoa@n+4,f
 14360  1EEC  1D03               	skipz
 14361  1EED  2EF5               	goto	l753
 14362  1EEE  0AD4               	incf	dtoa@n+5,f
 14363  1EEF  1D03               	skipz
 14364  1EF0  2EF5               	goto	l753
 14365  1EF1  0AD5               	incf	dtoa@n+6,f
 14366  1EF2  1D03               	skipz
 14367  1EF3  2EF5               	goto	l753
 14368  1EF4  0AD6               	incf	dtoa@n+7,f
 14369  1EF5                     l753:	
 14370                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 284:     }
 14371                           
 14372                           
 14373                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 287:     if
      +                           (!(prec < 0)) {
 14374  1EF5  0143               	movlb	3	; select bank3
 14375  1EF6  1BB1               	btfsc	(_prec+1)^(0+384),7
 14376  1EF7  2EFC               	goto	l754
 14377                           
 14378                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 288:       
      +                            flags &= ~(1 << 1);
 14379  1EF8  30FD               	movlw	253
 14380  1EF9  05B2               	andwf	_flags^(0+384),f
 14381  1EFA  30FF               	movlw	255
 14382  1EFB  05B3               	andwf	(_flags+1)^(0+384),f
 14383  1EFC                     l754:	
 14384                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 289:     }
 14385                           
 14386                           
 14387                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 290:     p 
      +                          = (0 < prec) ? prec : 1;
 14388  1EFC  0831               	movf	(_prec+1)^(0+384),w
 14389  1EFD  3A80               	xorlw	128
 14390  1EFE  0140               	movlb	0	; select bank0
 14391  1EFF  00C3               	movwf	??_dtoa
 14392  1F00  3080               	movlw	128
 14393  1F01  0243               	subwf	??_dtoa,w
 14394  1F02  1D03               	skipz
 14395  1F03  2F07               	goto	u10775
 14396  1F04  3001               	movlw	1
 14397  1F05  0143               	movlb	3	; select bank3
 14398  1F06  0230               	subwf	_prec^(0+384),w
 14399  1F07                     u10775:	
 14400  1F07  1803               	skipnc
 14401  1F08  2F0F               	goto	l7774
 14402  1F09  3001               	movlw	1
 14403  1F0A  0140               	movlb	0	; select bank0
 14404  1F0B  00C9               	movwf	dtoa@p
 14405  1F0C  3000               	movlw	0
 14406  1F0D  00CA               	movwf	dtoa@p+1
 14407  1F0E  2F17               	goto	l758
 14408  1F0F                     l7774:	
 14409  1F0F  0143               	movlb	3	; select bank3
 14410  1F10  0831               	movf	(_prec+1)^(0+384),w
 14411  1F11  0140               	movlb	0	; select bank0
 14412  1F12  00CA               	movwf	dtoa@p+1
 14413  1F13  0143               	movlb	3	; select bank3
 14414  1F14  0830               	movf	_prec^(0+384),w
 14415  1F15  0140               	movlb	0	; select bank0
 14416  1F16  00C9               	movwf	dtoa@p
 14417  1F17                     l758:	
 14418                           
 14419                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 291:     w 
      +                          = width;
 14420  1F17  0143               	movlb	3	; select bank3
 14421  1F18  082F               	movf	(_width+1)^(0+384),w
 14422  1F19  0140               	movlb	0	; select bank0
 14423  1F1A  00CC               	movwf	dtoa@w+1
 14424  1F1B  0143               	movlb	3	; select bank3
 14425  1F1C  082E               	movf	_width^(0+384),w
 14426  1F1D  0140               	movlb	0	; select bank0
 14427  1F1E  00CB               	movwf	dtoa@w
 14428                           
 14429                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 292:     if
      +                           (s || (flags & (1 << 2))) {
 14430  1F1F  084D               	movf	dtoa@s,w
 14431  1F20  044E               	iorwf	dtoa@s+1,w
 14432  1F21  1D03               	btfss	3,2
 14433  1F22  2F26               	goto	l7780
 14434  1F23  0143               	movlb	3	; select bank3
 14435  1F24  1D32               	btfss	_flags^(0+384),2
 14436  1F25  2F2B               	goto	l759
 14437  1F26                     l7780:	
 14438                           
 14439                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 293:       
      +                            --w;
 14440  1F26  30FF               	movlw	255
 14441  1F27  0140               	movlb	0	; select bank0
 14442  1F28  07CB               	addwf	dtoa@w,f
 14443  1F29  30FF               	movlw	255
 14444  1F2A  3DCC               	addwfc	dtoa@w+1,f
 14445  1F2B                     l759:	
 14446                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 294:     }
 14447                           
 14448                           
 14449                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 297:     i 
      +                          = sizeof(dbuf) - 1;
 14450  1F2B  304F               	movlw	79
 14451  1F2C  0140               	movlb	0	; select bank0
 14452  1F2D  00D7               	movwf	dtoa@i
 14453  1F2E  3000               	movlw	0
 14454  1F2F  00D8               	movwf	dtoa@i+1
 14455                           
 14456                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 298:     db
      +                          uf[i] = '\0';
 14457  1F30  0146               	movlb	6	; select bank6
 14458  1F31  01EF               	clrf	(_dbuf^(0+768)+79)
 14459                           
 14460                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 14461  1F32  2FC1               	goto	l762
 14462  1F33                     l7794:	
 14463  1F33  0140               	movlb	0	; select bank0
 14464  1F34  084F               	movf	dtoa@n,w
 14465  1F35  0450               	iorwf	dtoa@n+1,w
 14466  1F36  0451               	iorwf	dtoa@n+2,w
 14467  1F37  0452               	iorwf	dtoa@n+3,w
 14468  1F38  0453               	iorwf	dtoa@n+4,w
 14469  1F39  0454               	iorwf	dtoa@n+5,w
 14470  1F3A  0455               	iorwf	dtoa@n+6,w
 14471  1F3B  0456               	iorwf	dtoa@n+7,w
 14472  1F3C  1D03               	skipz
 14473  1F3D  2F58               	goto	l7784
 14474  1F3E  084A               	movf	dtoa@p+1,w
 14475  1F3F  3A80               	xorlw	128
 14476  1F40  00C3               	movwf	??_dtoa
 14477  1F41  3080               	movlw	128
 14478  1F42  0243               	subwf	??_dtoa,w
 14479  1F43  1D03               	skipz
 14480  1F44  2F47               	goto	u10825
 14481  1F45  3001               	movlw	1
 14482  1F46  0249               	subwf	dtoa@p,w
 14483  1F47                     u10825:	
 14484  1F47  1803               	skipnc
 14485  1F48  2F58               	goto	l7784
 14486  1F49  0140               	movlb	0	; select bank0
 14487  1F4A  084C               	movf	dtoa@w+1,w
 14488  1F4B  3A80               	xorlw	128
 14489  1F4C  00C3               	movwf	??_dtoa
 14490  1F4D  3080               	movlw	128
 14491  1F4E  0243               	subwf	??_dtoa,w
 14492  1F4F  1D03               	skipz
 14493  1F50  2F53               	goto	u10835
 14494  1F51  3001               	movlw	1
 14495  1F52  024B               	subwf	dtoa@w,w
 14496  1F53                     u10835:	
 14497  1F53  1C03               	skipc
 14498  1F54  2FCD               	goto	l7802
 14499  1F55  0143               	movlb	3	; select bank3
 14500  1F56  1CB2               	btfss	_flags^(0+384),1
 14501  1F57  2FCD               	goto	l7802
 14502  1F58                     l7784:	
 14503                           
 14504                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 300:       
      +                            --i;
 14505  1F58  30FF               	movlw	255
 14506  1F59  0140               	movlb	0	; select bank0
 14507  1F5A  07D7               	addwf	dtoa@i,f
 14508  1F5B  30FF               	movlw	255
 14509  1F5C  3DD8               	addwfc	dtoa@i+1,f
 14510                           
 14511                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 301:       
      +                            dbuf[i] = '0' + abs(n % 10);
 14512  1F5D  300A               	movlw	10
 14513  1F5E  00A0               	movwf	___aomod@divisor
 14514  1F5F  01A1               	clrf	___aomod@divisor+1
 14515  1F60  01A2               	clrf	___aomod@divisor+2
 14516  1F61  01A3               	clrf	___aomod@divisor+3
 14517  1F62  01A4               	clrf	___aomod@divisor+4
 14518  1F63  01A5               	clrf	___aomod@divisor+5
 14519  1F64  01A6               	clrf	___aomod@divisor+6
 14520  1F65  01A7               	clrf	___aomod@divisor+7
 14521  1F66  084F               	movf	dtoa@n,w
 14522  1F67  00A8               	movwf	___aomod@dividend
 14523  1F68  0850               	movf	dtoa@n+1,w
 14524  1F69  00A9               	movwf	___aomod@dividend+1
 14525  1F6A  0851               	movf	dtoa@n+2,w
 14526  1F6B  00AA               	movwf	___aomod@dividend+2
 14527  1F6C  0852               	movf	dtoa@n+3,w
 14528  1F6D  00AB               	movwf	___aomod@dividend+3
 14529  1F6E  0853               	movf	dtoa@n+4,w
 14530  1F6F  00AC               	movwf	___aomod@dividend+4
 14531  1F70  0854               	movf	dtoa@n+5,w
 14532  1F71  00AD               	movwf	___aomod@dividend+5
 14533  1F72  0855               	movf	dtoa@n+6,w
 14534  1F73  00AE               	movwf	___aomod@dividend+6
 14535  1F74  0856               	movf	dtoa@n+7,w
 14536  1F75  00AF               	movwf	___aomod@dividend+7
 14537  1F76  3199  21DC  319E   	fcall	___aomod
 14538  1F79  0140               	movlb	0	; select bank0
 14539  1F7A  0821               	movf	?___aomod+1,w
 14540  1F7B  00B4               	movwf	abs@a+1
 14541  1F7C  0820               	movf	?___aomod,w
 14542  1F7D  00B3               	movwf	abs@a
 14543  1F7E  31AA  228E  319E   	fcall	_abs
 14544  1F81  0140               	movlb	0	; select bank0
 14545  1F82  0833               	movf	?_abs,w
 14546  1F83  3E30               	addlw	48
 14547  1F84  00C3               	movwf	??_dtoa
 14548  1F85  0857               	movf	dtoa@i,w
 14549  1F86  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 14550  1F87  0086               	movwf	6
 14551  1F88  3003               	movlw	3	; select bank6/7
 14552  1F89  0087               	movwf	7
 14553  1F8A  0843               	movf	??_dtoa,w
 14554  1F8B  0081               	movwf	1
 14555                           
 14556                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 302:       
      +                            --p;
 14557  1F8C  30FF               	movlw	255
 14558  1F8D  07C9               	addwf	dtoa@p,f
 14559  1F8E  30FF               	movlw	255
 14560  1F8F  3DCA               	addwfc	dtoa@p+1,f
 14561                           
 14562                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 303:       
      +                            --w;
 14563  1F90  30FF               	movlw	255
 14564  1F91  07CB               	addwf	dtoa@w,f
 14565  1F92  30FF               	movlw	255
 14566  1F93  3DCC               	addwfc	dtoa@w+1,f
 14567                           
 14568                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 304:       
      +                            n = n / 10;
 14569  1F94  300A               	movlw	10
 14570  1F95  00A0               	movwf	___aodiv@divisor
 14571  1F96  01A1               	clrf	___aodiv@divisor+1
 14572  1F97  01A2               	clrf	___aodiv@divisor+2
 14573  1F98  01A3               	clrf	___aodiv@divisor+3
 14574  1F99  01A4               	clrf	___aodiv@divisor+4
 14575  1F9A  01A5               	clrf	___aodiv@divisor+5
 14576  1F9B  01A6               	clrf	___aodiv@divisor+6
 14577  1F9C  01A7               	clrf	___aodiv@divisor+7
 14578  1F9D  084F               	movf	dtoa@n,w
 14579  1F9E  00A8               	movwf	___aodiv@dividend
 14580  1F9F  0850               	movf	dtoa@n+1,w
 14581  1FA0  00A9               	movwf	___aodiv@dividend+1
 14582  1FA1  0851               	movf	dtoa@n+2,w
 14583  1FA2  00AA               	movwf	___aodiv@dividend+2
 14584  1FA3  0852               	movf	dtoa@n+3,w
 14585  1FA4  00AB               	movwf	___aodiv@dividend+3
 14586  1FA5  0853               	movf	dtoa@n+4,w
 14587  1FA6  00AC               	movwf	___aodiv@dividend+4
 14588  1FA7  0854               	movf	dtoa@n+5,w
 14589  1FA8  00AD               	movwf	___aodiv@dividend+5
 14590  1FA9  0855               	movf	dtoa@n+6,w
 14591  1FAA  00AE               	movwf	___aodiv@dividend+6
 14592  1FAB  0856               	movf	dtoa@n+7,w
 14593  1FAC  00AF               	movwf	___aodiv@dividend+7
 14594  1FAD  319C  248A  319E   	fcall	___aodiv
 14595  1FB0  0140               	movlb	0	; select bank0
 14596  1FB1  0820               	movf	?___aodiv,w
 14597  1FB2  00CF               	movwf	dtoa@n
 14598  1FB3  0821               	movf	?___aodiv+1,w
 14599  1FB4  00D0               	movwf	dtoa@n+1
 14600  1FB5  0822               	movf	?___aodiv+2,w
 14601  1FB6  00D1               	movwf	dtoa@n+2
 14602  1FB7  0823               	movf	?___aodiv+3,w
 14603  1FB8  00D2               	movwf	dtoa@n+3
 14604  1FB9  0824               	movf	?___aodiv+4,w
 14605  1FBA  00D3               	movwf	dtoa@n+4
 14606  1FBB  0825               	movf	?___aodiv+5,w
 14607  1FBC  00D4               	movwf	dtoa@n+5
 14608  1FBD  0826               	movf	?___aodiv+6,w
 14609  1FBE  00D5               	movwf	dtoa@n+6
 14610  1FBF  0827               	movf	?___aodiv+7,w
 14611  1FC0  00D6               	movwf	dtoa@n+7
 14612  1FC1                     l762:	
 14613                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 305:     }
 14614                           
 14615                           
 14616                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 299:     wh
      +                          ile (!(i < 1) && (n || (0 < p) || ((0 < w) && (flags & (1 << 1))))) {
 14617  1FC1  0140               	movlb	0	; select bank0
 14618  1FC2  0858               	movf	dtoa@i+1,w
 14619  1FC3  3A80               	xorlw	128
 14620  1FC4  00C3               	movwf	??_dtoa
 14621  1FC5  3080               	movlw	128
 14622  1FC6  0243               	subwf	??_dtoa,w
 14623  1FC7  1D03               	skipz
 14624  1FC8  2FCB               	goto	u10805
 14625  1FC9  3001               	movlw	1
 14626  1FCA  0257               	subwf	dtoa@i,w
 14627  1FCB                     u10805:	
 14628  1FCB  1803               	btfsc	3,0
 14629  1FCC  2F33               	goto	l7794
 14630  1FCD                     l7802:	
 14631                           
 14632                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 308:     if
      +                           (s || (flags & (1 << 2))) {
 14633  1FCD  0140               	movlb	0	; select bank0
 14634  1FCE  084D               	movf	dtoa@s,w
 14635  1FCF  044E               	iorwf	dtoa@s+1,w
 14636  1FD0  1D03               	btfss	3,2
 14637  1FD1  2FD5               	goto	l7806
 14638  1FD2  0143               	movlb	3	; select bank3
 14639  1FD3  1D32               	btfss	_flags^(0+384),2
 14640  1FD4  2FED               	goto	l7816
 14641  1FD5                     l7806:	
 14642                           
 14643                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 309:       
      +                            --i;
 14644  1FD5  30FF               	movlw	255
 14645  1FD6  0140               	movlb	0	; select bank0
 14646  1FD7  07D7               	addwf	dtoa@i,f
 14647  1FD8  30FF               	movlw	255
 14648  1FD9  3DD8               	addwfc	dtoa@i+1,f
 14649                           
 14650                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 310:       
      +                            dbuf[i] = s ? '-' : '+';
 14651  1FDA  084D               	movf	dtoa@s,w
 14652  1FDB  044E               	iorwf	dtoa@s+1,w
 14653  1FDC  1D03               	btfss	3,2
 14654  1FDD  2FE0               	goto	l7812
 14655  1FDE  302B               	movlw	43
 14656  1FDF  2FE1               	goto	L17
 14657  1FE0                     l7812:	
 14658  1FE0  302D               	movlw	45
 14659  1FE1                     L17:	
 14660  1FE1  00C7               	movwf	_dtoa$1681
 14661  1FE2  3000               	movlw	0
 14662  1FE3  00C8               	movwf	_dtoa$1681+1
 14663  1FE4  0847               	movf	_dtoa$1681,w
 14664  1FE5  00C3               	movwf	??_dtoa
 14665  1FE6  0857               	movf	dtoa@i,w
 14666  1FE7  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 14667  1FE8  0086               	movwf	6
 14668  1FE9  3003               	movlw	3	; select bank6/7
 14669  1FEA  0087               	movwf	7
 14670  1FEB  0843               	movf	??_dtoa,w
 14671  1FEC  0081               	movwf	1
 14672  1FED                     l7816:	
 14673                           
 14674                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 314:     re
      +                          turn pad(fp, &dbuf[i], w);
 14675  1FED  0140               	movlb	0	; select bank0
 14676  1FEE  0857               	movf	dtoa@i,w
 14677  1FEF  3E20               	addlw	(low (_dbuf| (0+768)))& (0+255)
 14678  1FF0  00C3               	movwf	??_dtoa
 14679  1FF1  0843               	movf	??_dtoa,w
 14680  1FF2  00B0               	movwf	pad@buf
 14681  1FF3  084C               	movf	dtoa@w+1,w
 14682  1FF4  00B2               	movwf	pad@p+1
 14683  1FF5  084B               	movf	dtoa@w,w
 14684  1FF6  00B1               	movwf	pad@p
 14685  1FF7  0846               	movf	dtoa@fp,w
 14686  1FF8  31AF  27AD         	fcall	_pad
 14687  1FFA  0140               	movlb	0	; select bank0
 14688  1FFB  0831               	movf	?_pad+1,w
 14689  1FFC  00BC               	movwf	?_dtoa+1
 14690  1FFD  0830               	movf	?_pad,w
 14691  1FFE  00BB               	movwf	?_dtoa
 14692  1FFF  0008               	return
 14693  2000                     __end_of_dtoa:	
 14694                           
 14695                           	psect	text37
 14696  2FAD                     __ptext37:	
 14697 ;; *************** function _pad *****************
 14698 ;; Defined at:
 14699 ;;		line 72 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c"
 14700 ;; Parameters:    Size  Location     Type
 14701 ;;  fp              1    wreg     PTR struct _IO_FILE
 14702 ;;		 -> sprintf@f(6), 
 14703 ;;  buf             1   16[BANK0 ] PTR unsigned char 
 14704 ;;		 -> dbuf(80), 
 14705 ;;  p               2   17[BANK0 ] int 
 14706 ;; Auto vars:     Size  Location     Type
 14707 ;;  fp              1   24[BANK0 ] PTR struct _IO_FILE
 14708 ;;		 -> sprintf@f(6), 
 14709 ;;  w               2   22[BANK0 ] int 
 14710 ;;  i               2   20[BANK0 ] int 
 14711 ;; Return value:  Size  Location     Type
 14712 ;;                  2   16[BANK0 ] int 
 14713 ;; Registers used:
 14714 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14715 ;; Tracked objects:
 14716 ;;		On entry : 0/0
 14717 ;;		On exit  : 0/0
 14718 ;;		Unchanged: 0/0
 14719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14720 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14721 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14722 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14723 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14724 ;;Total ram usage:        9 bytes
 14725 ;; Hardware stack levels used:    1
 14726 ;; Hardware stack levels required when called:    6
 14727 ;; This function calls:
 14728 ;;		_fputc
 14729 ;;		_fputs
 14730 ;;		_strlen
 14731 ;; This function is called by:
 14732 ;;		_dtoa
 14733 ;;		_efgtoa
 14734 ;; This function uses a non-reentrant model
 14735 ;;
 14736                           
 14737                           
 14738                           ;psect for function _pad
 14739  2FAD                     _pad:	
 14740                           
 14741                           ;incstack = 0
 14742                           ; Regs used in _pad: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14743                           ;pad@fp stored from wreg
 14744  2FAD  0140               	movlb	0	; select bank0
 14745  2FAE  00B8               	movwf	pad@fp
 14746                           
 14747                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 72: static 
      +                          int pad(FILE *fp, char *buf, int p);C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 73: {;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99
      +                          \common\doprnt.c: 74:     int i, w;;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sourc
      +                          es\c99\common\doprnt.c: 77:     if (flags & (1 << 0)) {
 14748  2FAF  0143               	movlb	3	; select bank3
 14749  2FB0  1C32               	btfss	_flags^(0+384),0
 14750  2FB1  2FBB               	goto	l7112
 14751                           
 14752                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 78:        
      +                           fputs((const char *)buf, fp);
 14753  2FB2  0140               	movlb	0	; select bank0
 14754  2FB3  0838               	movf	pad@fp,w
 14755  2FB4  00B3               	movwf	??_pad
 14756  2FB5  0833               	movf	??_pad,w
 14757  2FB6  00A8               	movwf	fputs@fp
 14758  2FB7  0830               	movf	pad@buf,w
 14759  2FB8  31AB  23C0  31AF   	fcall	_fputs
 14760  2FBB                     l7112:	
 14761                           
 14762                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 82:     w =
      +                           (p < 0) ? 0 : p;
 14763  2FBB  0140               	movlb	0	; select bank0
 14764  2FBC  1BB2               	btfsc	pad@p+1,7
 14765  2FBD  2FC3               	goto	l7116
 14766  2FBE  0832               	movf	pad@p+1,w
 14767  2FBF  00B7               	movwf	pad@w+1
 14768  2FC0  0831               	movf	pad@p,w
 14769  2FC1  00B6               	movwf	pad@w
 14770  2FC2  2FC5               	goto	l745
 14771  2FC3                     l7116:	
 14772  2FC3  01B6               	clrf	pad@w
 14773  2FC4  01B7               	clrf	pad@w+1
 14774  2FC5                     l745:	
 14775                           
 14776                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 83:     i =
      +                           0;
 14777  2FC5  01B4               	clrf	pad@i
 14778  2FC6  01B5               	clrf	pad@i+1
 14779  2FC7                     l7122:	
 14780                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 14781                           
 14782                           
 14783                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 84:     whi
      +                          le (i < w) {
 14784  2FC7  0835               	movf	pad@i+1,w
 14785  2FC8  3A80               	xorlw	128
 14786  2FC9  00B3               	movwf	??_pad
 14787  2FCA  0837               	movf	pad@w+1,w
 14788  2FCB  3A80               	xorlw	128
 14789  2FCC  0233               	subwf	??_pad,w
 14790  2FCD  1D03               	skipz
 14791  2FCE  2FD1               	goto	u9235
 14792  2FCF  0836               	movf	pad@w,w
 14793  2FD0  0234               	subwf	pad@i,w
 14794  2FD1                     u9235:	
 14795  2FD1  1803               	btfsc	3,0
 14796  2FD2  2FE5               	goto	l748
 14797                           
 14798                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 85:        
      +                           fputc(' ', fp);
 14799  2FD3  3020               	movlw	32
 14800  2FD4  0140               	movlb	0	; select bank0
 14801  2FD5  00A0               	movwf	fputc@c
 14802  2FD6  3000               	movlw	0
 14803  2FD7  00A1               	movwf	fputc@c+1
 14804  2FD8  0838               	movf	pad@fp,w
 14805  2FD9  00B3               	movwf	??_pad
 14806  2FDA  0833               	movf	??_pad,w
 14807  2FDB  00A2               	movwf	fputc@fp
 14808  2FDC  31AF  275A  31AF   	fcall	_fputc
 14809                           
 14810                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 86:        
      +                           ++i;
 14811  2FDF  3001               	movlw	1
 14812  2FE0  0140               	movlb	0	; select bank0
 14813  2FE1  07B4               	addwf	pad@i,f
 14814  2FE2  3000               	movlw	0
 14815  2FE3  3DB5               	addwfc	pad@i+1,f
 14816  2FE4  2FC7               	goto	l7122
 14817  2FE5                     l748:	
 14818                           
 14819                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 90:     if 
      +                          (!(flags & (1 << 0))) {
 14820  2FE5  0143               	movlb	3	; select bank3
 14821  2FE6  1832               	btfsc	_flags^(0+384),0
 14822  2FE7  2FF1               	goto	l7126
 14823                           
 14824                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 91:        
      +                           fputs((const char *)buf, fp);
 14825  2FE8  0140               	movlb	0	; select bank0
 14826  2FE9  0838               	movf	pad@fp,w
 14827  2FEA  00B3               	movwf	??_pad
 14828  2FEB  0833               	movf	??_pad,w
 14829  2FEC  00A8               	movwf	fputs@fp
 14830  2FED  0830               	movf	pad@buf,w
 14831  2FEE  31AB  23C0  31AF   	fcall	_fputs
 14832  2FF1                     l7126:	
 14833                           
 14834                           ;C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\doprnt.c: 94:     ret
      +                          urn strlen(buf) + w;
 14835  2FF1  0140               	movlb	0	; select bank0
 14836  2FF2  0830               	movf	pad@buf,w
 14837  2FF3  00A0               	movwf	strlen@s
 14838  2FF4  3003               	movlw	3
 14839  2FF5  00A1               	movwf	strlen@s+1
 14840  2FF6  31AA  2246         	fcall	_strlen
 14841  2FF8  0140               	movlb	0	; select bank0
 14842  2FF9  0836               	movf	pad@w,w
 14843  2FFA  0720               	addwf	?_strlen,w
 14844  2FFB  00B0               	movwf	?_pad
 14845  2FFC  0837               	movf	pad@w+1,w
 14846  2FFD  3D21               	addwfc	?_strlen+1,w
 14847  2FFE  00B1               	movwf	?_pad+1
 14848  2FFF  0008               	return
 14849  3000                     __end_of_pad:	
 14850                           
 14851                           	psect	text38
 14852  2A46                     __ptext38:	
 14853 ;; *************** function _strlen *****************
 14854 ;; Defined at:
 14855 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strlen.c"
 14856 ;; Parameters:    Size  Location     Type
 14857 ;;  s               2    0[BANK0 ] PTR const unsigned char 
 14858 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(80), STR_12(7), 
 14859 ;;		 -> STR_11(7), lBuf(49), sBuf(13), 
 14860 ;; Auto vars:     Size  Location     Type
 14861 ;;  a               2    3[BANK0 ] PTR const unsigned char 
 14862 ;;		 -> ?_sprintf(2), stoa@nuls(7), dbuf(80), STR_12(7), 
 14863 ;;		 -> STR_11(7), lBuf(49), sBuf(13), 
 14864 ;; Return value:  Size  Location     Type
 14865 ;;                  2    0[BANK0 ] unsigned int 
 14866 ;; Registers used:
 14867 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 14868 ;; Tracked objects:
 14869 ;;		On entry : 0/0
 14870 ;;		On exit  : 0/0
 14871 ;;		Unchanged: 0/0
 14872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14873 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14874 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14875 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14876 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14877 ;;Total ram usage:        5 bytes
 14878 ;; Hardware stack levels used:    1
 14879 ;; Hardware stack levels required when called:    3
 14880 ;; This function calls:
 14881 ;;		Nothing
 14882 ;; This function is called by:
 14883 ;;		_pad
 14884 ;;		_stoa
 14885 ;;		_strcat
 14886 ;; This function uses a non-reentrant model
 14887 ;;
 14888                           
 14889                           
 14890                           ;psect for function _strlen
 14891  2A46                     _strlen:	
 14892                           
 14893                           ;incstack = 0
 14894                           ; Regs used in _strlen: [wreg-fsr0h+status,2+status,0]
 14895  2A46  0140               	movlb	0	; select bank0
 14896  2A47  0821               	movf	strlen@s+1,w
 14897  2A48  00A4               	movwf	strlen@a+1
 14898  2A49  0820               	movf	strlen@s,w
 14899  2A4A  00A3               	movwf	strlen@a
 14900  2A4B                     l6880:	
 14901  2A4B  0820               	movf	strlen@s,w
 14902  2A4C  0084               	movwf	4
 14903  2A4D  0821               	movf	strlen@s+1,w
 14904  2A4E  0085               	movwf	5
 14905  2A4F  0012               	moviw fsr0++
 14906  2A50  1903               	btfsc	3,2
 14907  2A51  2A57               	goto	l6882
 14908  2A52  3001               	movlw	1
 14909  2A53  07A0               	addwf	strlen@s,f
 14910  2A54  3000               	movlw	0
 14911  2A55  3DA1               	addwfc	strlen@s+1,f
 14912  2A56  2A4B               	goto	l6880
 14913  2A57                     l6882:	
 14914  2A57  0823               	movf	strlen@a,w
 14915  2A58  0220               	subwf	strlen@s,w
 14916  2A59  00A0               	movwf	?_strlen
 14917  2A5A  0824               	movf	strlen@a+1,w
 14918  2A5B  3B21               	subwfb	strlen@s+1,w
 14919  2A5C  00A1               	movwf	?_strlen+1
 14920  2A5D  0008               	return
 14921  2A5E                     __end_of_strlen:	
 14922                           
 14923                           	psect	text39
 14924  2BC0                     __ptext39:	
 14925 ;; *************** function _fputs *****************
 14926 ;; Defined at:
 14927 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputs.c"
 14928 ;; Parameters:    Size  Location     Type
 14929 ;;  s               1    wreg     PTR const unsigned char 
 14930 ;;		 -> dbuf(80), 
 14931 ;;  fp              1    8[BANK0 ] PTR struct _IO_FILE
 14932 ;;		 -> sprintf@f(6), 
 14933 ;; Auto vars:     Size  Location     Type
 14934 ;;  s               1   15[BANK0 ] PTR const unsigned char 
 14935 ;;		 -> dbuf(80), 
 14936 ;;  i               2   13[BANK0 ] int 
 14937 ;;  c               1   12[BANK0 ] unsigned char 
 14938 ;; Return value:  Size  Location     Type
 14939 ;;                  2    8[BANK0 ] int 
 14940 ;; Registers used:
 14941 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 14942 ;; Tracked objects:
 14943 ;;		On entry : 0/0
 14944 ;;		On exit  : 0/0
 14945 ;;		Unchanged: 0/0
 14946 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 14947 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14948 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14949 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14950 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 14951 ;;Total ram usage:        8 bytes
 14952 ;; Hardware stack levels used:    1
 14953 ;; Hardware stack levels required when called:    5
 14954 ;; This function calls:
 14955 ;;		_fputc
 14956 ;; This function is called by:
 14957 ;;		_pad
 14958 ;; This function uses a non-reentrant model
 14959 ;;
 14960                           
 14961                           
 14962                           ;psect for function _fputs
 14963  2BC0                     _fputs:	
 14964                           
 14965                           ;incstack = 0
 14966                           ; Regs used in _fputs: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 14967                           ;fputs@s stored from wreg
 14968  2BC0  0140               	movlb	0	; select bank0
 14969  2BC1  00AF               	movwf	fputs@s
 14970  2BC2  01AD               	clrf	fputs@i
 14971  2BC3  01AE               	clrf	fputs@i+1
 14972  2BC4                     l6874:	
 14973  2BC4  082D               	movf	fputs@i,w
 14974  2BC5  072F               	addwf	fputs@s,w
 14975  2BC6  00A9               	movwf	??_fputs
 14976  2BC7  0829               	movf	??_fputs,w
 14977  2BC8  0086               	movwf	6
 14978  2BC9  3003               	movlw	3	; select bank6/7
 14979  2BCA  0087               	movwf	7
 14980  2BCB  0801               	movf	1,w
 14981  2BCC  00AA               	movwf	??_fputs+1
 14982  2BCD  082A               	movf	??_fputs+1,w
 14983  2BCE  00AC               	movwf	fputs@c
 14984  2BCF  082C               	movf	fputs@c,w
 14985  2BD0  1903               	btfsc	3,2
 14986  2BD1  0008               	return
 14987  2BD2  082C               	movf	fputs@c,w
 14988  2BD3  00A9               	movwf	??_fputs
 14989  2BD4  01AA               	clrf	??_fputs+1
 14990  2BD5  0829               	movf	??_fputs,w
 14991  2BD6  00A0               	movwf	fputc@c
 14992  2BD7  082A               	movf	??_fputs+1,w
 14993  2BD8  00A1               	movwf	fputc@c+1
 14994  2BD9  0828               	movf	fputs@fp,w
 14995  2BDA  00AB               	movwf	??_fputs+2
 14996  2BDB  082B               	movf	??_fputs+2,w
 14997  2BDC  00A2               	movwf	fputc@fp
 14998  2BDD  31AF  275A  31AB   	fcall	_fputc
 14999  2BE0  3001               	movlw	1
 15000  2BE1  0140               	movlb	0	; select bank0
 15001  2BE2  07AD               	addwf	fputs@i,f
 15002  2BE3  3000               	movlw	0
 15003  2BE4  3DAE               	addwfc	fputs@i+1,f
 15004  2BE5  2BC4               	goto	l6874
 15005  2BE6                     __end_of_fputs:	
 15006                           
 15007                           	psect	text40
 15008  2F5A                     __ptext40:	
 15009 ;; *************** function _fputc *****************
 15010 ;; Defined at:
 15011 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\nf_fputc.c"
 15012 ;; Parameters:    Size  Location     Type
 15013 ;;  c               2    0[BANK0 ] int 
 15014 ;;  fp              1    2[BANK0 ] PTR struct _IO_FILE
 15015 ;;		 -> sprintf@f(6), 
 15016 ;; Auto vars:     Size  Location     Type
 15017 ;;		None
 15018 ;; Return value:  Size  Location     Type
 15019 ;;                  2    0[BANK0 ] int 
 15020 ;; Registers used:
 15021 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 15022 ;; Tracked objects:
 15023 ;;		On entry : 0/0
 15024 ;;		On exit  : 0/0
 15025 ;;		Unchanged: 0/0
 15026 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15027 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15028 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15029 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15030 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15031 ;;Total ram usage:        8 bytes
 15032 ;; Hardware stack levels used:    1
 15033 ;; Hardware stack levels required when called:    4
 15034 ;; This function calls:
 15035 ;;		_putch
 15036 ;; This function is called by:
 15037 ;;		_pad
 15038 ;;		_stoa
 15039 ;;		_vfpfcnvrt
 15040 ;;		_fputs
 15041 ;; This function uses a non-reentrant model
 15042 ;;
 15043                           
 15044                           
 15045                           ;psect for function _fputc
 15046  2F5A                     _fputc:	
 15047                           
 15048                           ;incstack = 0
 15049                           ; Regs used in _fputc: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 15050  2F5A  0140               	movlb	0	; select bank0
 15051  2F5B  0822               	movf	fputc@fp,w
 15052  2F5C  1D03               	btfss	3,2
 15053  2F5D  0822               	movf	fputc@fp,w
 15054  2F5E  1D03               	btfss	3,2
 15055  2F5F  2F64               	goto	l6852
 15056  2F60  0820               	movf	fputc@c,w
 15057  2F61  3188  2000         	fcall	_putch
 15058  2F63  0008               	return
 15059  2F64                     l6852:	
 15060  2F64  0822               	movf	fputc@fp,w
 15061  2F65  3E04               	addlw	4
 15062  2F66  0086               	movwf	6
 15063  2F67  3001               	movlw	1	; select bank2/3
 15064  2F68  0087               	movwf	7
 15065  2F69  0016               	moviw fsr1++
 15066  2F6A  0401               	iorwf	1,w
 15067  2F6B  1903               	btfsc	3,2
 15068  2F6C  2F8B               	goto	l6856
 15069  2F6D  0822               	movf	fputc@fp,w
 15070  2F6E  3E04               	addlw	4
 15071  2F6F  0086               	movwf	6
 15072  2F70  3001               	movlw	1	; select bank2/3
 15073  2F71  0087               	movwf	7
 15074  2F72  3F40               	moviw [0]fsr1
 15075  2F73  00A3               	movwf	??_fputc
 15076  2F74  3F41               	moviw [1]fsr1
 15077  2F75  00A4               	movwf	??_fputc+1
 15078  2F76  0822               	movf	fputc@fp,w
 15079  2F77  3E02               	addlw	2
 15080  2F78  0086               	movwf	6
 15081  2F79  3001               	movlw	1	; select bank2/3
 15082  2F7A  0087               	movwf	7
 15083  2F7B  3F40               	moviw [0]fsr1
 15084  2F7C  00A5               	movwf	??_fputc+2
 15085  2F7D  3F41               	moviw [1]fsr1
 15086  2F7E  00A6               	movwf	??_fputc+3
 15087  2F7F  0826               	movf	??_fputc+3,w
 15088  2F80  3A80               	xorlw	128
 15089  2F81  00A7               	movwf	??_fputc+4
 15090  2F82  0824               	movf	??_fputc+1,w
 15091  2F83  3A80               	xorlw	128
 15092  2F84  0227               	subwf	??_fputc+4,w
 15093  2F85  1D03               	skipz
 15094  2F86  2F89               	goto	u8665
 15095  2F87  0823               	movf	??_fputc,w
 15096  2F88  0225               	subwf	??_fputc+2,w
 15097  2F89                     u8665:	
 15098  2F89  1803               	skipnc
 15099  2F8A  0008               	return
 15100  2F8B                     l6856:	
 15101  2F8B  0140               	movlb	0	; select bank0
 15102  2F8C  0822               	movf	fputc@fp,w
 15103  2F8D  3E02               	addlw	2
 15104  2F8E  0086               	movwf	6
 15105  2F8F  3001               	movlw	1	; select bank2/3
 15106  2F90  0087               	movwf	7
 15107  2F91  0822               	movf	fputc@fp,w
 15108  2F92  0084               	movwf	4
 15109  2F93  3001               	movlw	1	; select bank2/3
 15110  2F94  0085               	movwf	5
 15111  2F95  3F40               	moviw [0]fsr1
 15112  2F96  0700               	addwf	0,w
 15113  2F97  00A3               	movwf	??_fputc
 15114  2F98  3101               	addfsr 0,1
 15115  2F99  3F41               	moviw [1]fsr1
 15116  2F9A  3D00               	addwfc	0,w
 15117  2F9B  00A4               	movwf	??_fputc+1
 15118  2F9C  0823               	movf	??_fputc,w
 15119  2F9D  0086               	movwf	6
 15120  2F9E  0824               	movf	??_fputc+1,w
 15121  2F9F  0087               	movwf	7
 15122  2FA0  0820               	movf	fputc@c,w
 15123  2FA1  0081               	movwf	1
 15124  2FA2  0822               	movf	fputc@fp,w
 15125  2FA3  3E02               	addlw	2
 15126  2FA4  0086               	movwf	6
 15127  2FA5  3001               	movlw	1	; select bank2/3
 15128  2FA6  0087               	movwf	7
 15129  2FA7  3001               	movlw	1
 15130  2FA8  0781               	addwf	1,f
 15131  2FA9  3141               	addfsr 1,1
 15132  2FAA  1803               	skipnc
 15133  2FAB  0A81               	incf	1,f
 15134  2FAC  0008               	return
 15135  2FAD                     __end_of_fputc:	
 15136                           
 15137                           	psect	text41
 15138  0800                     __ptext41:	
 15139 ;; *************** function _putch *****************
 15140 ;; Defined at:
 15141 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\putch.c"
 15142 ;; Parameters:    Size  Location     Type
 15143 ;;  c               1    wreg     unsigned char 
 15144 ;; Auto vars:     Size  Location     Type
 15145 ;;  c               1    0[COMMON] unsigned char 
 15146 ;; Return value:  Size  Location     Type
 15147 ;;                  1    wreg      void 
 15148 ;; Registers used:
 15149 ;;		wreg
 15150 ;; Tracked objects:
 15151 ;;		On entry : 0/0
 15152 ;;		On exit  : 0/0
 15153 ;;		Unchanged: 0/0
 15154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15159 ;;Total ram usage:        0 bytes
 15160 ;; Hardware stack levels used:    1
 15161 ;; Hardware stack levels required when called:    3
 15162 ;; This function calls:
 15163 ;;		Nothing
 15164 ;; This function is called by:
 15165 ;;		_fputc
 15166 ;; This function uses a non-reentrant model
 15167 ;;
 15168                           
 15169                           
 15170                           ;psect for function _putch
 15171  0800                     _putch:	
 15172                           
 15173                           ;incstack = 0
 15174                           ; Regs used in _putch: [wreg]
 15175  0800  0008               	return
 15176  0801                     __end_of_putch:	
 15177                           
 15178                           	psect	text42
 15179  2A8E                     __ptext42:	
 15180 ;; *************** function _abs *****************
 15181 ;; Defined at:
 15182 ;;		line 1 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\abs.c"
 15183 ;; Parameters:    Size  Location     Type
 15184 ;;  a               2   19[BANK0 ] int 
 15185 ;; Auto vars:     Size  Location     Type
 15186 ;;		None
 15187 ;; Return value:  Size  Location     Type
 15188 ;;                  2   19[BANK0 ] int 
 15189 ;; Registers used:
 15190 ;;		wreg, status,2, status,0
 15191 ;; Tracked objects:
 15192 ;;		On entry : 0/0
 15193 ;;		On exit  : 0/0
 15194 ;;		Unchanged: 0/0
 15195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15196 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15197 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15198 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15199 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15200 ;;Total ram usage:        4 bytes
 15201 ;; Hardware stack levels used:    1
 15202 ;; Hardware stack levels required when called:    3
 15203 ;; This function calls:
 15204 ;;		Nothing
 15205 ;; This function is called by:
 15206 ;;		_dtoa
 15207 ;; This function uses a non-reentrant model
 15208 ;;
 15209                           
 15210                           
 15211                           ;psect for function _abs
 15212  2A8E                     _abs:	
 15213                           
 15214                           ;incstack = 0
 15215                           ; Regs used in _abs: [wreg+status,2+status,0]
 15216  2A8E  0140               	movlb	0	; select bank0
 15217  2A8F  0834               	movf	abs@a+1,w
 15218  2A90  3A80               	xorlw	128
 15219  2A91  00B5               	movwf	??_abs
 15220  2A92  3080               	movlw	128
 15221  2A93  0235               	subwf	??_abs,w
 15222  2A94  1D03               	skipz
 15223  2A95  2A98               	goto	u9255
 15224  2A96  3001               	movlw	1
 15225  2A97  0233               	subwf	abs@a,w
 15226  2A98                     u9255:	
 15227  2A98  1803               	skipnc
 15228  2A99  0008               	return
 15229  2A9A  0140               	movlb	0	; select bank0
 15230  2A9B  0933               	comf	abs@a,w
 15231  2A9C  00B5               	movwf	??_abs
 15232  2A9D  0934               	comf	abs@a+1,w
 15233  2A9E  00B6               	movwf	??_abs+1
 15234  2A9F  0AB5               	incf	??_abs,f
 15235  2AA0  1903               	skipnz
 15236  2AA1  0AB6               	incf	??_abs+1,f
 15237  2AA2  0835               	movf	??_abs,w
 15238  2AA3  00B3               	movwf	?_abs
 15239  2AA4  0836               	movf	??_abs+1,w
 15240  2AA5  00B4               	movwf	?_abs+1
 15241  2AA6  0008               	return
 15242  2AA7                     __end_of_abs:	
 15243                           
 15244                           	psect	text43
 15245  19DC                     __ptext43:	
 15246 ;; *************** function ___aomod *****************
 15247 ;; Defined at:
 15248 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aomod.c"
 15249 ;; Parameters:    Size  Location     Type
 15250 ;;  divisor         8    0[BANK0 ] long long 
 15251 ;;  dividend        8    8[BANK0 ] long long 
 15252 ;; Auto vars:     Size  Location     Type
 15253 ;;  sign            1   18[BANK0 ] unsigned char 
 15254 ;;  counter         1   17[BANK0 ] unsigned char 
 15255 ;; Return value:  Size  Location     Type
 15256 ;;                  8    0[BANK0 ] long long 
 15257 ;; Registers used:
 15258 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15259 ;; Tracked objects:
 15260 ;;		On entry : 0/0
 15261 ;;		On exit  : 0/0
 15262 ;;		Unchanged: 0/0
 15263 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15264 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15265 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15266 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15267 ;;      Totals:         0      19       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15268 ;;Total ram usage:       19 bytes
 15269 ;; Hardware stack levels used:    1
 15270 ;; Hardware stack levels required when called:    3
 15271 ;; This function calls:
 15272 ;;		Nothing
 15273 ;; This function is called by:
 15274 ;;		_dtoa
 15275 ;; This function uses a non-reentrant model
 15276 ;;
 15277                           
 15278                           
 15279                           ;psect for function ___aomod
 15280  19DC                     ___aomod:	
 15281                           
 15282                           ;incstack = 0
 15283                           ; Regs used in ___aomod: [wreg+fsr1l+fsr1h+status,2+status,0]
 15284  19DC  0140               	movlb	0	; select bank0
 15285  19DD  01B2               	clrf	___aomod@sign
 15286  19DE  3028               	movlw	low ___aomod@dividend
 15287  19DF  0086               	movwf	6
 15288  19E0  3000               	movlw	high ___aomod@dividend
 15289  19E1  0087               	movwf	7
 15290  19E2  3F47               	moviw [7]fsr1
 15291  19E3  00B0               	movwf	??___aomod
 15292  19E4  1FB0               	btfss	??___aomod,7
 15293  19E5  2A08               	goto	l7260
 15294  19E6  0140               	movlb	0	; select bank0
 15295  19E7  09A8               	comf	___aomod@dividend,f
 15296  19E8  09A9               	comf	___aomod@dividend+1,f
 15297  19E9  09AA               	comf	___aomod@dividend+2,f
 15298  19EA  09AB               	comf	___aomod@dividend+3,f
 15299  19EB  09AC               	comf	___aomod@dividend+4,f
 15300  19EC  09AD               	comf	___aomod@dividend+5,f
 15301  19ED  09AE               	comf	___aomod@dividend+6,f
 15302  19EE  09AF               	comf	___aomod@dividend+7,f
 15303  19EF  0AA8               	incf	___aomod@dividend,f
 15304  19F0  1D03               	skipz
 15305  19F1  2A05               	goto	u966lld
 15306  19F2  0AA9               	incf	___aomod@dividend+1,f
 15307  19F3  1D03               	skipz
 15308  19F4  2A05               	goto	u966lld
 15309  19F5  0AAA               	incf	___aomod@dividend+2,f
 15310  19F6  1D03               	skipz
 15311  19F7  2A05               	goto	u966lld
 15312  19F8  0AAB               	incf	___aomod@dividend+3,f
 15313  19F9  1D03               	skipz
 15314  19FA  2A05               	goto	u966lld
 15315  19FB  0AAC               	incf	___aomod@dividend+4,f
 15316  19FC  1D03               	skipz
 15317  19FD  2A05               	goto	u966lld
 15318  19FE  0AAD               	incf	___aomod@dividend+5,f
 15319  19FF  1D03               	skipz
 15320  1A00  2A05               	goto	u966lld
 15321  1A01  0AAE               	incf	___aomod@dividend+6,f
 15322  1A02  1D03               	skipz
 15323  1A03  2A05               	goto	u966lld
 15324  1A04  0AAF               	incf	___aomod@dividend+7,f
 15325  1A05                     u966lld:	
 15326  1A05  0140               	movlb	0	; select bank0
 15327  1A06  01B2               	clrf	___aomod@sign
 15328  1A07  0AB2               	incf	___aomod@sign,f
 15329  1A08                     l7260:	
 15330  1A08  3020               	movlw	low ___aomod@divisor
 15331  1A09  0086               	movwf	6
 15332  1A0A  3000               	movlw	high ___aomod@divisor
 15333  1A0B  0087               	movwf	7
 15334  1A0C  3F47               	moviw [7]fsr1
 15335  1A0D  0140               	movlb	0	; select bank0
 15336  1A0E  00B0               	movwf	??___aomod
 15337  1A0F  1FB0               	btfss	??___aomod,7
 15338  1A10  2A30               	goto	l7264
 15339  1A11  0140               	movlb	0	; select bank0
 15340  1A12  09A0               	comf	___aomod@divisor,f
 15341  1A13  09A1               	comf	___aomod@divisor+1,f
 15342  1A14  09A2               	comf	___aomod@divisor+2,f
 15343  1A15  09A3               	comf	___aomod@divisor+3,f
 15344  1A16  09A4               	comf	___aomod@divisor+4,f
 15345  1A17  09A5               	comf	___aomod@divisor+5,f
 15346  1A18  09A6               	comf	___aomod@divisor+6,f
 15347  1A19  09A7               	comf	___aomod@divisor+7,f
 15348  1A1A  0AA0               	incf	___aomod@divisor,f
 15349  1A1B  1D03               	skipz
 15350  1A1C  2A30               	goto	l7264
 15351  1A1D  0AA1               	incf	___aomod@divisor+1,f
 15352  1A1E  1D03               	skipz
 15353  1A1F  2A30               	goto	l7264
 15354  1A20  0AA2               	incf	___aomod@divisor+2,f
 15355  1A21  1D03               	skipz
 15356  1A22  2A30               	goto	l7264
 15357  1A23  0AA3               	incf	___aomod@divisor+3,f
 15358  1A24  1D03               	skipz
 15359  1A25  2A30               	goto	l7264
 15360  1A26  0AA4               	incf	___aomod@divisor+4,f
 15361  1A27  1D03               	skipz
 15362  1A28  2A30               	goto	l7264
 15363  1A29  0AA5               	incf	___aomod@divisor+5,f
 15364  1A2A  1D03               	skipz
 15365  1A2B  2A30               	goto	l7264
 15366  1A2C  0AA6               	incf	___aomod@divisor+6,f
 15367  1A2D  1D03               	skipz
 15368  1A2E  2A30               	goto	l7264
 15369  1A2F  0AA7               	incf	___aomod@divisor+7,f
 15370  1A30                     l7264:	
 15371  1A30  0140               	movlb	0	; select bank0
 15372  1A31  0820               	movf	___aomod@divisor,w
 15373  1A32  0421               	iorwf	___aomod@divisor+1,w
 15374  1A33  0422               	iorwf	___aomod@divisor+2,w
 15375  1A34  0423               	iorwf	___aomod@divisor+3,w
 15376  1A35  0424               	iorwf	___aomod@divisor+4,w
 15377  1A36  0425               	iorwf	___aomod@divisor+5,w
 15378  1A37  0426               	iorwf	___aomod@divisor+6,w
 15379  1A38  0427               	iorwf	___aomod@divisor+7,w
 15380  1A39  1903               	skipnz
 15381  1A3A  2A88               	goto	l7280
 15382  1A3B  01B1               	clrf	___aomod@counter
 15383  1A3C  0AB1               	incf	___aomod@counter,f
 15384  1A3D                     l7272:	
 15385  1A3D  1BA7               	btfsc	___aomod@divisor+7,7
 15386  1A3E  2A4C               	goto	l7274
 15387  1A3F  35A0               	lslf	___aomod@divisor,f
 15388  1A40  0DA1               	rlf	___aomod@divisor+1,f
 15389  1A41  0DA2               	rlf	___aomod@divisor+2,f
 15390  1A42  0DA3               	rlf	___aomod@divisor+3,f
 15391  1A43  0DA4               	rlf	___aomod@divisor+4,f
 15392  1A44  0DA5               	rlf	___aomod@divisor+5,f
 15393  1A45  0DA6               	rlf	___aomod@divisor+6,f
 15394  1A46  0DA7               	rlf	___aomod@divisor+7,f
 15395  1A47  3001               	movlw	1
 15396  1A48  00B0               	movwf	??___aomod
 15397  1A49  0830               	movf	??___aomod,w
 15398  1A4A  07B1               	addwf	___aomod@counter,f
 15399  1A4B  2A3D               	goto	l7272
 15400  1A4C                     l7274:	
 15401  1A4C  0827               	movf	___aomod@divisor+7,w
 15402  1A4D  022F               	subwf	___aomod@dividend+7,w
 15403  1A4E  1D03               	skipz
 15404  1A4F  2A6A               	goto	u9715
 15405  1A50  0826               	movf	___aomod@divisor+6,w
 15406  1A51  022E               	subwf	___aomod@dividend+6,w
 15407  1A52  1D03               	skipz
 15408  1A53  2A6A               	goto	u9715
 15409  1A54  0825               	movf	___aomod@divisor+5,w
 15410  1A55  022D               	subwf	___aomod@dividend+5,w
 15411  1A56  1D03               	skipz
 15412  1A57  2A6A               	goto	u9715
 15413  1A58  0824               	movf	___aomod@divisor+4,w
 15414  1A59  022C               	subwf	___aomod@dividend+4,w
 15415  1A5A  1D03               	skipz
 15416  1A5B  2A6A               	goto	u9715
 15417  1A5C  0823               	movf	___aomod@divisor+3,w
 15418  1A5D  022B               	subwf	___aomod@dividend+3,w
 15419  1A5E  1D03               	skipz
 15420  1A5F  2A6A               	goto	u9715
 15421  1A60  0822               	movf	___aomod@divisor+2,w
 15422  1A61  022A               	subwf	___aomod@dividend+2,w
 15423  1A62  1D03               	skipz
 15424  1A63  2A6A               	goto	u9715
 15425  1A64  0821               	movf	___aomod@divisor+1,w
 15426  1A65  0229               	subwf	___aomod@dividend+1,w
 15427  1A66  1D03               	skipz
 15428  1A67  2A6A               	goto	u9715
 15429  1A68  0820               	movf	___aomod@divisor,w
 15430  1A69  0228               	subwf	___aomod@dividend,w
 15431  1A6A                     u9715:	
 15432  1A6A  1C03               	skipc
 15433  1A6B  2A7C               	goto	l7278
 15434  1A6C  0820               	movf	___aomod@divisor,w
 15435  1A6D  02A8               	subwf	___aomod@dividend,f
 15436  1A6E  0821               	movf	___aomod@divisor+1,w
 15437  1A6F  3BA9               	subwfb	___aomod@dividend+1,f
 15438  1A70  0822               	movf	___aomod@divisor+2,w
 15439  1A71  3BAA               	subwfb	___aomod@dividend+2,f
 15440  1A72  0823               	movf	___aomod@divisor+3,w
 15441  1A73  3BAB               	subwfb	___aomod@dividend+3,f
 15442  1A74  0824               	movf	___aomod@divisor+4,w
 15443  1A75  3BAC               	subwfb	___aomod@dividend+4,f
 15444  1A76  0825               	movf	___aomod@divisor+5,w
 15445  1A77  3BAD               	subwfb	___aomod@dividend+5,f
 15446  1A78  0826               	movf	___aomod@divisor+6,w
 15447  1A79  3BAE               	subwfb	___aomod@dividend+6,f
 15448  1A7A  0827               	movf	___aomod@divisor+7,w
 15449  1A7B  3BAF               	subwfb	___aomod@dividend+7,f
 15450  1A7C                     l7278:	
 15451  1A7C  36A7               	lsrf	___aomod@divisor+7,f
 15452  1A7D  0CA6               	rrf	___aomod@divisor+6,f
 15453  1A7E  0CA5               	rrf	___aomod@divisor+5,f
 15454  1A7F  0CA4               	rrf	___aomod@divisor+4,f
 15455  1A80  0CA3               	rrf	___aomod@divisor+3,f
 15456  1A81  0CA2               	rrf	___aomod@divisor+2,f
 15457  1A82  0CA1               	rrf	___aomod@divisor+1,f
 15458  1A83  0CA0               	rrf	___aomod@divisor,f
 15459  1A84  3001               	movlw	1
 15460  1A85  02B1               	subwf	___aomod@counter,f
 15461  1A86  1D03               	btfss	3,2
 15462  1A87  2A4C               	goto	l7274
 15463  1A88                     l7280:	
 15464  1A88  0832               	movf	___aomod@sign,w
 15465  1A89  1903               	btfsc	3,2
 15466  1A8A  2AA9               	goto	l1052
 15467  1A8B  09A8               	comf	___aomod@dividend,f
 15468  1A8C  09A9               	comf	___aomod@dividend+1,f
 15469  1A8D  09AA               	comf	___aomod@dividend+2,f
 15470  1A8E  09AB               	comf	___aomod@dividend+3,f
 15471  1A8F  09AC               	comf	___aomod@dividend+4,f
 15472  1A90  09AD               	comf	___aomod@dividend+5,f
 15473  1A91  09AE               	comf	___aomod@dividend+6,f
 15474  1A92  09AF               	comf	___aomod@dividend+7,f
 15475  1A93  0AA8               	incf	___aomod@dividend,f
 15476  1A94  1D03               	skipz
 15477  1A95  2AA9               	goto	l1052
 15478  1A96  0AA9               	incf	___aomod@dividend+1,f
 15479  1A97  1D03               	skipz
 15480  1A98  2AA9               	goto	l1052
 15481  1A99  0AAA               	incf	___aomod@dividend+2,f
 15482  1A9A  1D03               	skipz
 15483  1A9B  2AA9               	goto	l1052
 15484  1A9C  0AAB               	incf	___aomod@dividend+3,f
 15485  1A9D  1D03               	skipz
 15486  1A9E  2AA9               	goto	l1052
 15487  1A9F  0AAC               	incf	___aomod@dividend+4,f
 15488  1AA0  1D03               	skipz
 15489  1AA1  2AA9               	goto	l1052
 15490  1AA2  0AAD               	incf	___aomod@dividend+5,f
 15491  1AA3  1D03               	skipz
 15492  1AA4  2AA9               	goto	l1052
 15493  1AA5  0AAE               	incf	___aomod@dividend+6,f
 15494  1AA6  1D03               	skipz
 15495  1AA7  2AA9               	goto	l1052
 15496  1AA8  0AAF               	incf	___aomod@dividend+7,f
 15497  1AA9                     l1052:	
 15498  1AA9  0140               	movlb	0	; select bank0
 15499  1AAA  0828               	movf	___aomod@dividend,w
 15500  1AAB  00A0               	movwf	?___aomod
 15501  1AAC  0829               	movf	___aomod@dividend+1,w
 15502  1AAD  00A1               	movwf	?___aomod+1
 15503  1AAE  082A               	movf	___aomod@dividend+2,w
 15504  1AAF  00A2               	movwf	?___aomod+2
 15505  1AB0  082B               	movf	___aomod@dividend+3,w
 15506  1AB1  00A3               	movwf	?___aomod+3
 15507  1AB2  082C               	movf	___aomod@dividend+4,w
 15508  1AB3  00A4               	movwf	?___aomod+4
 15509  1AB4  082D               	movf	___aomod@dividend+5,w
 15510  1AB5  00A5               	movwf	?___aomod+5
 15511  1AB6  082E               	movf	___aomod@dividend+6,w
 15512  1AB7  00A6               	movwf	?___aomod+6
 15513  1AB8  082F               	movf	___aomod@dividend+7,w
 15514  1AB9  00A7               	movwf	?___aomod+7
 15515  1ABA  0008               	return
 15516  1ABB                     __end_of___aomod:	
 15517                           
 15518                           	psect	text44
 15519  1C8A                     __ptext44:	
 15520 ;; *************** function ___aodiv *****************
 15521 ;; Defined at:
 15522 ;;		line 7 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\aodiv.c"
 15523 ;; Parameters:    Size  Location     Type
 15524 ;;  divisor         8    0[BANK0 ] long long 
 15525 ;;  dividend        8    8[BANK0 ] long long 
 15526 ;; Auto vars:     Size  Location     Type
 15527 ;;  quotient        8   19[BANK0 ] long long 
 15528 ;;  sign            1   18[BANK0 ] unsigned char 
 15529 ;;  counter         1   17[BANK0 ] unsigned char 
 15530 ;; Return value:  Size  Location     Type
 15531 ;;                  8    0[BANK0 ] long long 
 15532 ;; Registers used:
 15533 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 15534 ;; Tracked objects:
 15535 ;;		On entry : 0/0
 15536 ;;		On exit  : 0/0
 15537 ;;		Unchanged: 0/0
 15538 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15539 ;;      Params:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15540 ;;      Locals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15541 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15542 ;;      Totals:         0      27       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15543 ;;Total ram usage:       27 bytes
 15544 ;; Hardware stack levels used:    1
 15545 ;; Hardware stack levels required when called:    3
 15546 ;; This function calls:
 15547 ;;		Nothing
 15548 ;; This function is called by:
 15549 ;;		_dtoa
 15550 ;; This function uses a non-reentrant model
 15551 ;;
 15552                           
 15553                           
 15554                           ;psect for function ___aodiv
 15555  1C8A                     ___aodiv:	
 15556                           
 15557                           ;incstack = 0
 15558                           ; Regs used in ___aodiv: [wreg+fsr1l+fsr1h+status,2+status,0]
 15559  1C8A  0140               	movlb	0	; select bank0
 15560  1C8B  01B2               	clrf	___aodiv@sign
 15561  1C8C  3020               	movlw	low ___aodiv@divisor
 15562  1C8D  0086               	movwf	6
 15563  1C8E  3000               	movlw	high ___aodiv@divisor
 15564  1C8F  0087               	movwf	7
 15565  1C90  3F47               	moviw [7]fsr1
 15566  1C91  00B0               	movwf	??___aodiv
 15567  1C92  1FB0               	btfss	??___aodiv,7
 15568  1C93  2CB6               	goto	l7222
 15569  1C94  0140               	movlb	0	; select bank0
 15570  1C95  09A0               	comf	___aodiv@divisor,f
 15571  1C96  09A1               	comf	___aodiv@divisor+1,f
 15572  1C97  09A2               	comf	___aodiv@divisor+2,f
 15573  1C98  09A3               	comf	___aodiv@divisor+3,f
 15574  1C99  09A4               	comf	___aodiv@divisor+4,f
 15575  1C9A  09A5               	comf	___aodiv@divisor+5,f
 15576  1C9B  09A6               	comf	___aodiv@divisor+6,f
 15577  1C9C  09A7               	comf	___aodiv@divisor+7,f
 15578  1C9D  0AA0               	incf	___aodiv@divisor,f
 15579  1C9E  1D03               	skipz
 15580  1C9F  2CB3               	goto	u955lld
 15581  1CA0  0AA1               	incf	___aodiv@divisor+1,f
 15582  1CA1  1D03               	skipz
 15583  1CA2  2CB3               	goto	u955lld
 15584  1CA3  0AA2               	incf	___aodiv@divisor+2,f
 15585  1CA4  1D03               	skipz
 15586  1CA5  2CB3               	goto	u955lld
 15587  1CA6  0AA3               	incf	___aodiv@divisor+3,f
 15588  1CA7  1D03               	skipz
 15589  1CA8  2CB3               	goto	u955lld
 15590  1CA9  0AA4               	incf	___aodiv@divisor+4,f
 15591  1CAA  1D03               	skipz
 15592  1CAB  2CB3               	goto	u955lld
 15593  1CAC  0AA5               	incf	___aodiv@divisor+5,f
 15594  1CAD  1D03               	skipz
 15595  1CAE  2CB3               	goto	u955lld
 15596  1CAF  0AA6               	incf	___aodiv@divisor+6,f
 15597  1CB0  1D03               	skipz
 15598  1CB1  2CB3               	goto	u955lld
 15599  1CB2  0AA7               	incf	___aodiv@divisor+7,f
 15600  1CB3                     u955lld:	
 15601  1CB3  0140               	movlb	0	; select bank0
 15602  1CB4  01B2               	clrf	___aodiv@sign
 15603  1CB5  0AB2               	incf	___aodiv@sign,f
 15604  1CB6                     l7222:	
 15605  1CB6  3028               	movlw	low ___aodiv@dividend
 15606  1CB7  0086               	movwf	6
 15607  1CB8  3000               	movlw	high ___aodiv@dividend
 15608  1CB9  0087               	movwf	7
 15609  1CBA  3F47               	moviw [7]fsr1
 15610  1CBB  0140               	movlb	0	; select bank0
 15611  1CBC  00B0               	movwf	??___aodiv
 15612  1CBD  1FB0               	btfss	??___aodiv,7
 15613  1CBE  2CE3               	goto	l7228
 15614  1CBF  0140               	movlb	0	; select bank0
 15615  1CC0  09A8               	comf	___aodiv@dividend,f
 15616  1CC1  09A9               	comf	___aodiv@dividend+1,f
 15617  1CC2  09AA               	comf	___aodiv@dividend+2,f
 15618  1CC3  09AB               	comf	___aodiv@dividend+3,f
 15619  1CC4  09AC               	comf	___aodiv@dividend+4,f
 15620  1CC5  09AD               	comf	___aodiv@dividend+5,f
 15621  1CC6  09AE               	comf	___aodiv@dividend+6,f
 15622  1CC7  09AF               	comf	___aodiv@dividend+7,f
 15623  1CC8  0AA8               	incf	___aodiv@dividend,f
 15624  1CC9  1D03               	skipz
 15625  1CCA  2CDE               	goto	l7226
 15626  1CCB  0AA9               	incf	___aodiv@dividend+1,f
 15627  1CCC  1D03               	skipz
 15628  1CCD  2CDE               	goto	l7226
 15629  1CCE  0AAA               	incf	___aodiv@dividend+2,f
 15630  1CCF  1D03               	skipz
 15631  1CD0  2CDE               	goto	l7226
 15632  1CD1  0AAB               	incf	___aodiv@dividend+3,f
 15633  1CD2  1D03               	skipz
 15634  1CD3  2CDE               	goto	l7226
 15635  1CD4  0AAC               	incf	___aodiv@dividend+4,f
 15636  1CD5  1D03               	skipz
 15637  1CD6  2CDE               	goto	l7226
 15638  1CD7  0AAD               	incf	___aodiv@dividend+5,f
 15639  1CD8  1D03               	skipz
 15640  1CD9  2CDE               	goto	l7226
 15641  1CDA  0AAE               	incf	___aodiv@dividend+6,f
 15642  1CDB  1D03               	skipz
 15643  1CDC  2CDE               	goto	l7226
 15644  1CDD  0AAF               	incf	___aodiv@dividend+7,f
 15645  1CDE                     l7226:	
 15646  1CDE  3001               	movlw	1
 15647  1CDF  0140               	movlb	0	; select bank0
 15648  1CE0  00B0               	movwf	??___aodiv
 15649  1CE1  0830               	movf	??___aodiv,w
 15650  1CE2  06B2               	xorwf	___aodiv@sign,f
 15651  1CE3                     l7228:	
 15652  1CE3  3033               	movlw	low ___aodiv@quotient
 15653  1CE4  0086               	movwf	6
 15654  1CE5  3000               	movlw	high ___aodiv@quotient
 15655  1CE6  0087               	movwf	7
 15656  1CE7  3008               	movlw	8
 15657  1CE8  0140               	movlb	0	; select bank0
 15658  1CE9  00B0               	movwf	??___aodiv
 15659  1CEA  3000               	movlw	0
 15660  1CEB                     u9580:	
 15661  1CEB  001E               	movwi fsr1++
 15662  1CEC  0BB0               	decfsz	??___aodiv,f
 15663  1CED  2CEB               	goto	u9580
 15664  1CEE  0820               	movf	___aodiv@divisor,w
 15665  1CEF  0421               	iorwf	___aodiv@divisor+1,w
 15666  1CF0  0422               	iorwf	___aodiv@divisor+2,w
 15667  1CF1  0423               	iorwf	___aodiv@divisor+3,w
 15668  1CF2  0424               	iorwf	___aodiv@divisor+4,w
 15669  1CF3  0425               	iorwf	___aodiv@divisor+5,w
 15670  1CF4  0426               	iorwf	___aodiv@divisor+6,w
 15671  1CF5  0427               	iorwf	___aodiv@divisor+7,w
 15672  1CF6  1903               	skipnz
 15673  1CF7  2D4E               	goto	l7250
 15674  1CF8  01B1               	clrf	___aodiv@counter
 15675  1CF9  0AB1               	incf	___aodiv@counter,f
 15676  1CFA                     l7238:	
 15677  1CFA  1BA7               	btfsc	___aodiv@divisor+7,7
 15678  1CFB  2D09               	goto	l7240
 15679  1CFC  35A0               	lslf	___aodiv@divisor,f
 15680  1CFD  0DA1               	rlf	___aodiv@divisor+1,f
 15681  1CFE  0DA2               	rlf	___aodiv@divisor+2,f
 15682  1CFF  0DA3               	rlf	___aodiv@divisor+3,f
 15683  1D00  0DA4               	rlf	___aodiv@divisor+4,f
 15684  1D01  0DA5               	rlf	___aodiv@divisor+5,f
 15685  1D02  0DA6               	rlf	___aodiv@divisor+6,f
 15686  1D03  0DA7               	rlf	___aodiv@divisor+7,f
 15687  1D04  3001               	movlw	1
 15688  1D05  00B0               	movwf	??___aodiv
 15689  1D06  0830               	movf	??___aodiv,w
 15690  1D07  07B1               	addwf	___aodiv@counter,f
 15691  1D08  2CFA               	goto	l7238
 15692  1D09                     l7240:	
 15693  1D09  35B3               	lslf	___aodiv@quotient,f
 15694  1D0A  0DB4               	rlf	___aodiv@quotient+1,f
 15695  1D0B  0DB5               	rlf	___aodiv@quotient+2,f
 15696  1D0C  0DB6               	rlf	___aodiv@quotient+3,f
 15697  1D0D  0DB7               	rlf	___aodiv@quotient+4,f
 15698  1D0E  0DB8               	rlf	___aodiv@quotient+5,f
 15699  1D0F  0DB9               	rlf	___aodiv@quotient+6,f
 15700  1D10  0DBA               	rlf	___aodiv@quotient+7,f
 15701  1D11  0827               	movf	___aodiv@divisor+7,w
 15702  1D12  022F               	subwf	___aodiv@dividend+7,w
 15703  1D13  1D03               	skipz
 15704  1D14  2D2F               	goto	u9615
 15705  1D15  0826               	movf	___aodiv@divisor+6,w
 15706  1D16  022E               	subwf	___aodiv@dividend+6,w
 15707  1D17  1D03               	skipz
 15708  1D18  2D2F               	goto	u9615
 15709  1D19  0825               	movf	___aodiv@divisor+5,w
 15710  1D1A  022D               	subwf	___aodiv@dividend+5,w
 15711  1D1B  1D03               	skipz
 15712  1D1C  2D2F               	goto	u9615
 15713  1D1D  0824               	movf	___aodiv@divisor+4,w
 15714  1D1E  022C               	subwf	___aodiv@dividend+4,w
 15715  1D1F  1D03               	skipz
 15716  1D20  2D2F               	goto	u9615
 15717  1D21  0823               	movf	___aodiv@divisor+3,w
 15718  1D22  022B               	subwf	___aodiv@dividend+3,w
 15719  1D23  1D03               	skipz
 15720  1D24  2D2F               	goto	u9615
 15721  1D25  0822               	movf	___aodiv@divisor+2,w
 15722  1D26  022A               	subwf	___aodiv@dividend+2,w
 15723  1D27  1D03               	skipz
 15724  1D28  2D2F               	goto	u9615
 15725  1D29  0821               	movf	___aodiv@divisor+1,w
 15726  1D2A  0229               	subwf	___aodiv@dividend+1,w
 15727  1D2B  1D03               	skipz
 15728  1D2C  2D2F               	goto	u9615
 15729  1D2D  0820               	movf	___aodiv@divisor,w
 15730  1D2E  0228               	subwf	___aodiv@dividend,w
 15731  1D2F                     u9615:	
 15732  1D2F  1C03               	skipc
 15733  1D30  2D42               	goto	l7248
 15734  1D31  0820               	movf	___aodiv@divisor,w
 15735  1D32  02A8               	subwf	___aodiv@dividend,f
 15736  1D33  0821               	movf	___aodiv@divisor+1,w
 15737  1D34  3BA9               	subwfb	___aodiv@dividend+1,f
 15738  1D35  0822               	movf	___aodiv@divisor+2,w
 15739  1D36  3BAA               	subwfb	___aodiv@dividend+2,f
 15740  1D37  0823               	movf	___aodiv@divisor+3,w
 15741  1D38  3BAB               	subwfb	___aodiv@dividend+3,f
 15742  1D39  0824               	movf	___aodiv@divisor+4,w
 15743  1D3A  3BAC               	subwfb	___aodiv@dividend+4,f
 15744  1D3B  0825               	movf	___aodiv@divisor+5,w
 15745  1D3C  3BAD               	subwfb	___aodiv@dividend+5,f
 15746  1D3D  0826               	movf	___aodiv@divisor+6,w
 15747  1D3E  3BAE               	subwfb	___aodiv@dividend+6,f
 15748  1D3F  0827               	movf	___aodiv@divisor+7,w
 15749  1D40  3BAF               	subwfb	___aodiv@dividend+7,f
 15750  1D41  1433               	bsf	___aodiv@quotient,0
 15751  1D42                     l7248:	
 15752  1D42  36A7               	lsrf	___aodiv@divisor+7,f
 15753  1D43  0CA6               	rrf	___aodiv@divisor+6,f
 15754  1D44  0CA5               	rrf	___aodiv@divisor+5,f
 15755  1D45  0CA4               	rrf	___aodiv@divisor+4,f
 15756  1D46  0CA3               	rrf	___aodiv@divisor+3,f
 15757  1D47  0CA2               	rrf	___aodiv@divisor+2,f
 15758  1D48  0CA1               	rrf	___aodiv@divisor+1,f
 15759  1D49  0CA0               	rrf	___aodiv@divisor,f
 15760  1D4A  3001               	movlw	1
 15761  1D4B  02B1               	subwf	___aodiv@counter,f
 15762  1D4C  1D03               	btfss	3,2
 15763  1D4D  2D09               	goto	l7240
 15764  1D4E                     l7250:	
 15765  1D4E  0832               	movf	___aodiv@sign,w
 15766  1D4F  1903               	btfsc	3,2
 15767  1D50  2D6F               	goto	l1039
 15768  1D51  09B3               	comf	___aodiv@quotient,f
 15769  1D52  09B4               	comf	___aodiv@quotient+1,f
 15770  1D53  09B5               	comf	___aodiv@quotient+2,f
 15771  1D54  09B6               	comf	___aodiv@quotient+3,f
 15772  1D55  09B7               	comf	___aodiv@quotient+4,f
 15773  1D56  09B8               	comf	___aodiv@quotient+5,f
 15774  1D57  09B9               	comf	___aodiv@quotient+6,f
 15775  1D58  09BA               	comf	___aodiv@quotient+7,f
 15776  1D59  0AB3               	incf	___aodiv@quotient,f
 15777  1D5A  1D03               	skipz
 15778  1D5B  2D6F               	goto	l1039
 15779  1D5C  0AB4               	incf	___aodiv@quotient+1,f
 15780  1D5D  1D03               	skipz
 15781  1D5E  2D6F               	goto	l1039
 15782  1D5F  0AB5               	incf	___aodiv@quotient+2,f
 15783  1D60  1D03               	skipz
 15784  1D61  2D6F               	goto	l1039
 15785  1D62  0AB6               	incf	___aodiv@quotient+3,f
 15786  1D63  1D03               	skipz
 15787  1D64  2D6F               	goto	l1039
 15788  1D65  0AB7               	incf	___aodiv@quotient+4,f
 15789  1D66  1D03               	skipz
 15790  1D67  2D6F               	goto	l1039
 15791  1D68  0AB8               	incf	___aodiv@quotient+5,f
 15792  1D69  1D03               	skipz
 15793  1D6A  2D6F               	goto	l1039
 15794  1D6B  0AB9               	incf	___aodiv@quotient+6,f
 15795  1D6C  1D03               	skipz
 15796  1D6D  2D6F               	goto	l1039
 15797  1D6E  0ABA               	incf	___aodiv@quotient+7,f
 15798  1D6F                     l1039:	
 15799  1D6F  0140               	movlb	0	; select bank0
 15800  1D70  0833               	movf	___aodiv@quotient,w
 15801  1D71  00A0               	movwf	?___aodiv
 15802  1D72  0834               	movf	___aodiv@quotient+1,w
 15803  1D73  00A1               	movwf	?___aodiv+1
 15804  1D74  0835               	movf	___aodiv@quotient+2,w
 15805  1D75  00A2               	movwf	?___aodiv+2
 15806  1D76  0836               	movf	___aodiv@quotient+3,w
 15807  1D77  00A3               	movwf	?___aodiv+3
 15808  1D78  0837               	movf	___aodiv@quotient+4,w
 15809  1D79  00A4               	movwf	?___aodiv+4
 15810  1D7A  0838               	movf	___aodiv@quotient+5,w
 15811  1D7B  00A5               	movwf	?___aodiv+5
 15812  1D7C  0839               	movf	___aodiv@quotient+6,w
 15813  1D7D  00A6               	movwf	?___aodiv+6
 15814  1D7E  083A               	movf	___aodiv@quotient+7,w
 15815  1D7F  00A7               	movwf	?___aodiv+7
 15816  1D80  0008               	return
 15817  1D81                     __end_of___aodiv:	
 15818                           
 15819                           	psect	text45
 15820  26AC                     __ptext45:	
 15821 ;; *************** function _atoi *****************
 15822 ;; Defined at:
 15823 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\atoi.c"
 15824 ;; Parameters:    Size  Location     Type
 15825 ;;  s               2    6[BANK0 ] PTR const unsigned char 
 15826 ;;		 -> STR_35(15), STR_33(15), STR_31(13), STR_29(53), 
 15827 ;;		 -> STR_27(14), STR_25(14), STR_24(15), STR_23(15), 
 15828 ;;		 -> STR_21(14), STR_20(13), STR_19(15), STR_18(15), 
 15829 ;;		 -> STR_10(10), STR_8(16), STR_7(7), STR_5(42), 
 15830 ;;		 -> STR_4(13), STR_3(14), 
 15831 ;; Auto vars:     Size  Location     Type
 15832 ;;  n               2   19[BANK0 ] int 
 15833 ;;  neg             2   12[BANK0 ] int 
 15834 ;; Return value:  Size  Location     Type
 15835 ;;                  2    6[BANK0 ] int 
 15836 ;; Registers used:
 15837 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 15838 ;; Tracked objects:
 15839 ;;		On entry : 0/0
 15840 ;;		On exit  : 0/0
 15841 ;;		Unchanged: 0/0
 15842 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 15843 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15844 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15845 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15846 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 15847 ;;Total ram usage:       15 bytes
 15848 ;; Hardware stack levels used:    1
 15849 ;; Hardware stack levels required when called:    4
 15850 ;; This function calls:
 15851 ;;		___wmul
 15852 ;;		_isdigit
 15853 ;;		_isspace
 15854 ;; This function is called by:
 15855 ;;		_vfpfcnvrt
 15856 ;; This function uses a non-reentrant model
 15857 ;;
 15858                           
 15859                           
 15860                           ;psect for function _atoi
 15861  26AC                     _atoi:	
 15862                           
 15863                           ;incstack = 0
 15864                           ; Regs used in _atoi: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 15865  26AC  0140               	movlb	0	; select bank0
 15866  26AD  01B3               	clrf	atoi@n
 15867  26AE  01B4               	clrf	atoi@n+1
 15868  26AF  01AC               	clrf	atoi@neg
 15869  26B0  01AD               	clrf	atoi@neg+1
 15870  26B1                     l8166:	
 15871  26B1  01B2               	clrf	_atoi$2059
 15872  26B2  0AB2               	incf	_atoi$2059,f
 15873  26B3  0826               	movf	atoi@s,w
 15874  26B4  0084               	movwf	4
 15875  26B5  0827               	movf	atoi@s+1,w
 15876  26B6  0085               	movwf	5
 15877  26B7  0012               	moviw fsr0++
 15878  26B8  3A20               	xorlw	32
 15879  26B9  1903               	btfsc	3,2
 15880  26BA  2ECD               	goto	l8174
 15881  26BB  0826               	movf	atoi@s,w
 15882  26BC  0084               	movwf	4
 15883  26BD  0827               	movf	atoi@s+1,w
 15884  26BE  0085               	movwf	5
 15885  26BF  0800               	movf	0,w	;code access
 15886  26C0  3EF7               	addlw	247
 15887  26C1  00A8               	movwf	??_atoi
 15888  26C2  30FF               	movlw	255
 15889  26C3  1803               	skipnc
 15890  26C4  3000               	movlw	0
 15891  26C5  00A9               	movwf	??_atoi+1
 15892  26C6  3000               	movlw	0
 15893  26C7  0229               	subwf	??_atoi+1,w
 15894  26C8  3005               	movlw	5
 15895  26C9  1903               	skipnz
 15896  26CA  0228               	subwf	??_atoi,w
 15897  26CB  1803               	btfsc	3,0
 15898  26CC  01B2               	clrf	_atoi$2059
 15899  26CD                     l8174:	
 15900  26CD  0832               	movf	_atoi$2059,w
 15901  26CE  00A8               	movwf	??_atoi
 15902  26CF  01A9               	clrf	??_atoi+1
 15903  26D0  0828               	movf	??_atoi,w
 15904  26D1  00AE               	movwf	_atoi$2058
 15905  26D2  0829               	movf	??_atoi+1,w
 15906  26D3  00AF               	movwf	_atoi$2058+1
 15907  26D4  082E               	movf	_atoi$2058,w
 15908  26D5  042F               	iorwf	_atoi$2058+1,w
 15909  26D6  1903               	btfsc	3,2
 15910  26D7  2EE2               	goto	l8182
 15911  26D8  3001               	movlw	1
 15912  26D9  07A6               	addwf	atoi@s,f
 15913  26DA  3000               	movlw	0
 15914  26DB  3DA7               	addwfc	atoi@s+1,f
 15915  26DC  2EB1               	goto	l8166
 15916  26DD                     l8180:	
 15917  26DD  3001               	movlw	1
 15918  26DE  00AC               	movwf	atoi@neg
 15919  26DF  3000               	movlw	0
 15920  26E0  00AD               	movwf	atoi@neg+1
 15921  26E1  2F15               	goto	l1425
 15922  26E2                     l8182:	
 15923  26E2  0826               	movf	atoi@s,w
 15924  26E3  0084               	movwf	4
 15925  26E4  0827               	movf	atoi@s+1,w
 15926  26E5  0085               	movwf	5
 15927  26E6  0800               	movf	0,w	;code access
 15928  26E7  00A8               	movwf	??_atoi
 15929  26E8  01A9               	clrf	??_atoi+1
 15930                           
 15931                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 15932                           ; Switch size 1, requested type "simple"
 15933                           ; Number of cases is 1, Range of values is 0 to 0
 15934                           ; switch strategies available:
 15935                           ; Name         Instructions Cycles
 15936                           ; simple_byte            4     3 (average)
 15937                           ; direct_byte            8     6 (fixed)
 15938                           ; jumptable            260     6 (fixed)
 15939                           ;	Chosen strategy is simple_byte
 15940  26E9  0829               	movf	??_atoi+1,w
 15941  26EA  3A00               	xorlw	0	; case 0
 15942  26EB  1903               	skipnz
 15943  26EC  2EEE               	goto	l9326
 15944  26ED  2F19               	goto	l8188
 15945  26EE                     l9326:	
 15946                           
 15947                           ; Switch size 1, requested type "simple"
 15948                           ; Number of cases is 2, Range of values is 43 to 45
 15949                           ; switch strategies available:
 15950                           ; Name         Instructions Cycles
 15951                           ; simple_byte            7     4 (average)
 15952                           ; direct_byte           15     9 (fixed)
 15953                           ; jumptable            263     9 (fixed)
 15954                           ;	Chosen strategy is simple_byte
 15955  26EE  0828               	movf	??_atoi,w
 15956  26EF  3A2B               	xorlw	43	; case 43
 15957  26F0  1903               	skipnz
 15958  26F1  2F15               	goto	l1425
 15959  26F2  3A06               	xorlw	6	; case 45
 15960  26F3  1903               	skipnz
 15961  26F4  2EDD               	goto	l8180
 15962  26F5  2F19               	goto	l8188
 15963  26F6                     l8184:	
 15964  26F6  0826               	movf	atoi@s,w
 15965  26F7  0084               	movwf	4
 15966  26F8  0827               	movf	atoi@s+1,w
 15967  26F9  0085               	movwf	5
 15968  26FA  0800               	movf	0,w	;code access
 15969  26FB  00A8               	movwf	??_atoi
 15970  26FC  0834               	movf	atoi@n+1,w
 15971  26FD  00A1               	movwf	___wmul@multiplier+1
 15972  26FE  0833               	movf	atoi@n,w
 15973  26FF  00A0               	movwf	___wmul@multiplier
 15974  2700  300A               	movlw	10
 15975  2701  00A2               	movwf	___wmul@multiplicand
 15976  2702  3000               	movlw	0
 15977  2703  00A3               	movwf	___wmul@multiplicand+1
 15978  2704  31AA  22C1  31A6   	fcall	___wmul
 15979  2707  0140               	movlb	0	; select bank0
 15980  2708  0821               	movf	?___wmul+1,w
 15981  2709  00AA               	movwf	??_atoi+2
 15982  270A  0828               	movf	??_atoi,w
 15983  270B  0220               	subwf	?___wmul,w
 15984  270C  00A9               	movwf	??_atoi+1
 15985  270D  1C03               	skipc
 15986  270E  03AA               	decf	??_atoi+2,f
 15987  270F  0829               	movf	??_atoi+1,w
 15988  2710  3E30               	addlw	48
 15989  2711  00B3               	movwf	atoi@n
 15990  2712  3000               	movlw	0
 15991  2713  3D2A               	addwfc	??_atoi+2,w
 15992  2714  00B4               	movwf	atoi@n+1
 15993  2715                     l1425:	
 15994  2715  3001               	movlw	1
 15995  2716  07A6               	addwf	atoi@s,f
 15996  2717  3000               	movlw	0
 15997  2718  3DA7               	addwfc	atoi@s+1,f
 15998  2719                     l8188:	
 15999  2719  0826               	movf	atoi@s,w
 16000  271A  0084               	movwf	4
 16001  271B  0827               	movf	atoi@s+1,w
 16002  271C  0085               	movwf	5
 16003  271D  0800               	movf	0,w	;code access
 16004  271E  3ED0               	addlw	208
 16005  271F  00A8               	movwf	??_atoi
 16006  2720  30FF               	movlw	255
 16007  2721  1803               	skipnc
 16008  2722  3000               	movlw	0
 16009  2723  00A9               	movwf	??_atoi+1
 16010  2724  3000               	movlw	0
 16011  2725  0229               	subwf	??_atoi+1,w
 16012  2726  300A               	movlw	10
 16013  2727  1903               	skipnz
 16014  2728  0228               	subwf	??_atoi,w
 16015  2729  1803               	btfsc	3,0
 16016  272A  2F2D               	goto	u11520
 16017  272B  3001               	movlw	1
 16018  272C  2F2E               	goto	u11530
 16019  272D                     u11520:	
 16020  272D  3000               	movlw	0
 16021  272E                     u11530:	
 16022  272E  00AA               	movwf	??_atoi+2
 16023  272F  01AB               	clrf	??_atoi+3
 16024  2730  082A               	movf	??_atoi+2,w
 16025  2731  00B0               	movwf	_atoi$2060
 16026  2732  082B               	movf	??_atoi+3,w
 16027  2733  00B1               	movwf	_atoi$2060+1
 16028  2734  0830               	movf	_atoi$2060,w
 16029  2735  0431               	iorwf	_atoi$2060+1,w
 16030  2736  1D03               	btfss	3,2
 16031  2737  2EF6               	goto	l8184
 16032  2738  082C               	movf	atoi@neg,w
 16033  2739  042D               	iorwf	atoi@neg+1,w
 16034  273A  1D03               	btfss	3,2
 16035  273B  2F48               	goto	l8198
 16036  273C  0933               	comf	atoi@n,w
 16037  273D  00A8               	movwf	??_atoi
 16038  273E  0934               	comf	atoi@n+1,w
 16039  273F  00A9               	movwf	??_atoi+1
 16040  2740  0AA8               	incf	??_atoi,f
 16041  2741  1903               	skipnz
 16042  2742  0AA9               	incf	??_atoi+1,f
 16043  2743  0828               	movf	??_atoi,w
 16044  2744  00A6               	movwf	?_atoi
 16045  2745  0829               	movf	??_atoi+1,w
 16046  2746  00A7               	movwf	?_atoi+1
 16047  2747  0008               	return
 16048  2748                     l8198:	
 16049  2748  0834               	movf	atoi@n+1,w
 16050  2749  00A7               	movwf	?_atoi+1
 16051  274A  0833               	movf	atoi@n,w
 16052  274B  00A6               	movwf	?_atoi
 16053  274C  0008               	return
 16054  274D                     __end_of_atoi:	
 16055                           
 16056                           	psect	text46
 16057  07E2                     __ptext46:	
 16058 ;; *************** function _isspace *****************
 16059 ;; Defined at:
 16060 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isspace.c"
 16061 ;; Parameters:    Size  Location     Type
 16062 ;;  c               2    0[BANK0 ] int 
 16063 ;; Auto vars:     Size  Location     Type
 16064 ;;		None
 16065 ;; Return value:  Size  Location     Type
 16066 ;;                  2    0[BANK0 ] int 
 16067 ;; Registers used:
 16068 ;;		wreg, status,2, status,0
 16069 ;; Tracked objects:
 16070 ;;		On entry : 0/0
 16071 ;;		On exit  : 0/0
 16072 ;;		Unchanged: 0/0
 16073 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16074 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16075 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16076 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16077 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16078 ;;Total ram usage:        5 bytes
 16079 ;; Hardware stack levels used:    1
 16080 ;; Hardware stack levels required when called:    3
 16081 ;; This function calls:
 16082 ;;		Nothing
 16083 ;; This function is called by:
 16084 ;;		_atoi
 16085 ;; This function uses a non-reentrant model
 16086 ;;
 16087                           
 16088                           
 16089                           ;psect for function _isspace
 16090  07E2                     _isspace:	
 16091                           
 16092                           ;incstack = 0
 16093                           ; Regs used in _isspace: [wreg+status,2+status,0]
 16094  07E2  0140               	movlb	0	; select bank0
 16095  07E3  01A4               	clrf	_isspace$2089
 16096  07E4  0AA4               	incf	_isspace$2089,f
 16097  07E5  3020               	movlw	32
 16098  07E6  0620               	xorwf	isspace@c,w
 16099  07E7  0421               	iorwf	isspace@c+1,w
 16100  07E8  1903               	btfsc	3,2
 16101  07E9  2FF7               	goto	l7736
 16102  07EA  0820               	movf	isspace@c,w
 16103  07EB  3EF7               	addlw	247
 16104  07EC  00A2               	movwf	??_isspace
 16105  07ED  30FF               	movlw	255
 16106  07EE  3D21               	addwfc	isspace@c+1,w
 16107  07EF  00A3               	movwf	??_isspace+1
 16108  07F0  3000               	movlw	0
 16109  07F1  0223               	subwf	??_isspace+1,w
 16110  07F2  3005               	movlw	5
 16111  07F3  1903               	skipnz
 16112  07F4  0222               	subwf	??_isspace,w
 16113  07F5  1803               	btfsc	3,0
 16114  07F6  01A4               	clrf	_isspace$2089
 16115  07F7                     l7736:	
 16116  07F7  0824               	movf	_isspace$2089,w
 16117  07F8  00A2               	movwf	??_isspace
 16118  07F9  01A3               	clrf	??_isspace+1
 16119  07FA  0822               	movf	??_isspace,w
 16120  07FB  00A0               	movwf	?_isspace
 16121  07FC  0823               	movf	??_isspace+1,w
 16122  07FD  00A1               	movwf	?_isspace+1
 16123  07FE  0008               	return
 16124  07FF                     __end_of_isspace:	
 16125                           
 16126                           	psect	text47
 16127  2A2E                     __ptext47:	
 16128 ;; *************** function _isdigit *****************
 16129 ;; Defined at:
 16130 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\isdigit.c"
 16131 ;; Parameters:    Size  Location     Type
 16132 ;;  c               2    0[BANK0 ] int 
 16133 ;; Auto vars:     Size  Location     Type
 16134 ;;		None
 16135 ;; Return value:  Size  Location     Type
 16136 ;;                  2    0[BANK0 ] int 
 16137 ;; Registers used:
 16138 ;;		wreg, status,2, status,0
 16139 ;; Tracked objects:
 16140 ;;		On entry : 0/0
 16141 ;;		On exit  : 0/0
 16142 ;;		Unchanged: 0/0
 16143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16144 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16146 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16147 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16148 ;;Total ram usage:        6 bytes
 16149 ;; Hardware stack levels used:    1
 16150 ;; Hardware stack levels required when called:    3
 16151 ;; This function calls:
 16152 ;;		Nothing
 16153 ;; This function is called by:
 16154 ;;		_vfpfcnvrt
 16155 ;;		_atoi
 16156 ;; This function uses a non-reentrant model
 16157 ;;
 16158                           
 16159                           
 16160                           ;psect for function _isdigit
 16161  2A2E                     _isdigit:	
 16162                           
 16163                           ;incstack = 0
 16164                           ; Regs used in _isdigit: [wreg+status,2+status,0]
 16165  2A2E  0140               	movlb	0	; select bank0
 16166  2A2F  0820               	movf	isdigit@c,w
 16167  2A30  3ED0               	addlw	208
 16168  2A31  00A2               	movwf	??_isdigit
 16169  2A32  30FF               	movlw	255
 16170  2A33  3D21               	addwfc	isdigit@c+1,w
 16171  2A34  00A3               	movwf	??_isdigit+1
 16172  2A35  3000               	movlw	0
 16173  2A36  0223               	subwf	??_isdigit+1,w
 16174  2A37  300A               	movlw	10
 16175  2A38  1903               	skipnz
 16176  2A39  0222               	subwf	??_isdigit,w
 16177  2A3A  1803               	btfsc	3,0
 16178  2A3B  2A3E               	goto	u9480
 16179  2A3C  3001               	movlw	1
 16180  2A3D  2A3F               	goto	u9490
 16181  2A3E                     u9480:	
 16182  2A3E  3000               	movlw	0
 16183  2A3F                     u9490:	
 16184  2A3F  00A4               	movwf	??_isdigit+2
 16185  2A40  01A5               	clrf	??_isdigit+3
 16186  2A41  0824               	movf	??_isdigit+2,w
 16187  2A42  00A0               	movwf	?_isdigit
 16188  2A43  0825               	movf	??_isdigit+3,w
 16189  2A44  00A1               	movwf	?_isdigit+1
 16190  2A45  0008               	return
 16191  2A46                     __end_of_isdigit:	
 16192                           
 16193                           	psect	text48
 16194  2C61                     __ptext48:	
 16195 ;; *************** function _returnToPage *****************
 16196 ;; Defined at:
 16197 ;;		line 218 in file "menuhelper.c"
 16198 ;; Parameters:    Size  Location     Type
 16199 ;;  page            1    wreg     unsigned char 
 16200 ;; Auto vars:     Size  Location     Type
 16201 ;;  page            1    9[BANK0 ] unsigned char 
 16202 ;;  n               1   10[BANK0 ] unsigned char 
 16203 ;; Return value:  Size  Location     Type
 16204 ;;                  1    wreg      void 
 16205 ;; Registers used:
 16206 ;;		wreg, status,2, status,0, pclath, cstack
 16207 ;; Tracked objects:
 16208 ;;		On entry : 0/0
 16209 ;;		On exit  : 0/0
 16210 ;;		Unchanged: 0/0
 16211 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16213 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16214 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16215 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16216 ;;Total ram usage:        4 bytes
 16217 ;; Hardware stack levels used:    1
 16218 ;; Hardware stack levels required when called:    7
 16219 ;; This function calls:
 16220 ;;		_OLED_command
 16221 ;;		___wmul
 16222 ;; This function is called by:
 16223 ;;		_statusView
 16224 ;;		_channelView
 16225 ;;		_channelSetup
 16226 ;;		_setOutputPower
 16227 ;;		_setLensDia
 16228 ;;		_setup
 16229 ;;		_setDPOffset
 16230 ;;		_setSkyTemp
 16231 ;;		_setFudgeFactor
 16232 ;; This function uses a non-reentrant model
 16233 ;;
 16234                           
 16235                           
 16236                           ;psect for function _returnToPage
 16237  2C61                     _returnToPage:	
 16238                           
 16239                           ;incstack = 0
 16240                           ; Regs used in _returnToPage: [wreg+status,2+status,0+pclath+cstack]
 16241                           ;returnToPage@page stored from wreg
 16242  2C61  0140               	movlb	0	; select bank0
 16243  2C62  00A9               	movwf	returnToPage@page
 16244                           
 16245                           ;menuhelper.c: 218: void returnToPage(uint8_t page);menuhelper.c: 219: {;menuhelper.c: 2
      +                          20:  uint8_t n;;menuhelper.c: 222:  if (! g_updateScreen)
 16246  2C63  0143               	movlb	3	; select bank3
 16247  2C64  086F               	movf	_g_updateScreen^(0+384),w
 16248  2C65  1903               	btfsc	3,2
 16249  2C66  0008               	return
 16250                           
 16251                           ;menuhelper.c: 224:  OLED_command(0x02);
 16252  2C67  3002               	movlw	2
 16253  2C68  31A9  2193  31AC   	fcall	_OLED_command
 16254                           
 16255                           ;menuhelper.c: 225:  for(n = 0; n < 12 * page; n++) {
 16256  2C6B  0140               	movlb	0	; select bank0
 16257  2C6C  01AA               	clrf	returnToPage@n
 16258  2C6D                     l8442:	
 16259  2C6D  0829               	movf	returnToPage@page,w
 16260  2C6E  00A7               	movwf	??_returnToPage
 16261  2C6F  01A8               	clrf	??_returnToPage+1
 16262  2C70  0827               	movf	??_returnToPage,w
 16263  2C71  00A0               	movwf	___wmul@multiplier
 16264  2C72  0828               	movf	??_returnToPage+1,w
 16265  2C73  00A1               	movwf	___wmul@multiplier+1
 16266  2C74  300C               	movlw	12
 16267  2C75  00A2               	movwf	___wmul@multiplicand
 16268  2C76  3000               	movlw	0
 16269  2C77  00A3               	movwf	___wmul@multiplicand+1
 16270  2C78  31AA  22C1  31AC   	fcall	___wmul
 16271  2C7B  0140               	movlb	0	; select bank0
 16272  2C7C  0821               	movf	?___wmul+1,w
 16273  2C7D  3A80               	xorlw	128
 16274  2C7E  3C80               	sublw	128
 16275  2C7F  1D03               	skipz
 16276  2C80  2C83               	goto	u11905
 16277  2C81  0820               	movf	?___wmul,w
 16278  2C82  022A               	subwf	returnToPage@n,w
 16279  2C83                     u11905:	
 16280  2C83  1803               	btfsc	3,0
 16281  2C84  0008               	return
 16282                           
 16283                           ;menuhelper.c: 226:   OLED_command(0x10 | 0x08 | 0x00);
 16284  2C85  3018               	movlw	24
 16285  2C86  31A9  2193  31AC   	fcall	_OLED_command
 16286                           
 16287                           ;menuhelper.c: 227:  }
 16288  2C89  3001               	movlw	1
 16289  2C8A  0140               	movlb	0	; select bank0
 16290  2C8B  00A7               	movwf	??_returnToPage
 16291  2C8C  0827               	movf	??_returnToPage,w
 16292  2C8D  07AA               	addwf	returnToPage@n,f
 16293  2C8E  2C6D               	goto	l8442
 16294  2C8F                     __end_of_returnToPage:	
 16295                           
 16296                           	psect	text49
 16297  1007                     __ptext49:	
 16298 ;; *************** function _paging *****************
 16299 ;; Defined at:
 16300 ;;		line 177 in file "menuhelper.c"
 16301 ;; Parameters:    Size  Location     Type
 16302 ;;  currentPage     1    wreg     unsigned char 
 16303 ;;  lastPage        1    7[BANK0 ] const unsigned char 
 16304 ;; Auto vars:     Size  Location     Type
 16305 ;;  currentPage     1   10[BANK0 ] unsigned char 
 16306 ;;  n               1   12[BANK0 ] unsigned char 
 16307 ;;  dir             1   11[BANK0 ] enum E7924
 16308 ;; Return value:  Size  Location     Type
 16309 ;;                  1    wreg      unsigned char 
 16310 ;; Registers used:
 16311 ;;		wreg, status,2, status,0, pclath, cstack
 16312 ;; Tracked objects:
 16313 ;;		On entry : 0/0
 16314 ;;		On exit  : 0/0
 16315 ;;		Unchanged: 0/0
 16316 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16317 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16318 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16319 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16320 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16321 ;;Total ram usage:        6 bytes
 16322 ;; Hardware stack levels used:    1
 16323 ;; Hardware stack levels required when called:    8
 16324 ;; This function calls:
 16325 ;;		_OLED_scrollDisplayLeft
 16326 ;;		_OLED_scrollDisplayRight
 16327 ;;		_getRotDir
 16328 ;; This function is called by:
 16329 ;;		_statusView
 16330 ;;		_channelView
 16331 ;;		_channelSetup
 16332 ;;		_setup
 16333 ;; This function uses a non-reentrant model
 16334 ;;
 16335                           
 16336                           
 16337                           ;psect for function _paging
 16338  1007                     _paging:	
 16339                           
 16340                           ;incstack = 0
 16341                           ; Regs used in _paging: [wreg+status,2+status,0+pclath+cstack]
 16342                           ;paging@currentPage stored from wreg
 16343  1007  0140               	movlb	0	; select bank0
 16344  1008  00AA               	movwf	paging@currentPage
 16345                           
 16346                           ;menuhelper.c: 177: uint8_t paging(uint8_t currentPage, const uint8_t lastPage);menuhelp
      +                          er.c: 178: {;menuhelper.c: 179:  uint8_t n;;menuhelper.c: 180:  enum e_direction dir;;me
      +                          nuhelper.c: 181:  static enum e_direction lastDir = ROT_STOP;;menuhelper.c: 184:  PIE0bi
      +                          ts.IOCIE = 0;
 16347  1009  014E               	movlb	14	; select bank14
 16348  100A  1216               	bcf	22,4	;volatile
 16349                           
 16350                           ;menuhelper.c: 186:  dir = getRotDir();
 16351  100B  31A9  21C7  3190   	fcall	_getRotDir
 16352  100E  0140               	movlb	0	; select bank0
 16353  100F  00A8               	movwf	??_paging
 16354  1010  0828               	movf	??_paging,w
 16355  1011  00AB               	movwf	paging@dir
 16356                           
 16357                           ;menuhelper.c: 189:  if (dir == lastDir) {
 16358  1012  082B               	movf	paging@dir,w
 16359  1013  0143               	movlb	3	; select bank3
 16360  1014  063C               	xorwf	paging@lastDir^(0+384),w
 16361  1015  1D03               	skipz
 16362  1016  2867               	goto	l8502
 16363                           
 16364                           ;menuhelper.c: 191:   if ((dir == ROT_CW) && (currentPage < lastPage - 1)) {
 16365  1017  0140               	movlb	0	; select bank0
 16366  1018  032B               	decf	paging@dir,w
 16367  1019  1D03               	btfss	3,2
 16368  101A  2847               	goto	l8482
 16369  101B  0827               	movf	paging@lastPage,w
 16370  101C  3EFF               	addlw	255
 16371  101D  00A8               	movwf	??_paging
 16372  101E  30FF               	movlw	255
 16373  101F  1803               	skipnc
 16374  1020  3000               	movlw	0
 16375  1021  00A9               	movwf	??_paging+1
 16376  1022  0829               	movf	??_paging+1,w
 16377  1023  3A80               	xorlw	128
 16378  1024  3C80               	sublw	128
 16379  1025  1D03               	skipz
 16380  1026  2829               	goto	u11935
 16381  1027  0828               	movf	??_paging,w
 16382  1028  022A               	subwf	paging@currentPage,w
 16383  1029                     u11935:	
 16384  1029  1803               	skipnc
 16385  102A  2847               	goto	l8482
 16386                           
 16387                           ;menuhelper.c: 192:    currentPage++;
 16388  102B  3001               	movlw	1
 16389  102C  0140               	movlb	0	; select bank0
 16390  102D  00A8               	movwf	??_paging
 16391  102E  0828               	movf	??_paging,w
 16392  102F  07AA               	addwf	paging@currentPage,f
 16393                           
 16394                           ;menuhelper.c: 193:    for(n = 0; n < 12; n++) {
 16395  1030  01AC               	clrf	paging@n
 16396  1031                     l8474:	
 16397                           
 16398                           ;menuhelper.c: 194:     OLED_scrollDisplayLeft();
 16399  1031  31A9  217E  3190   	fcall	_OLED_scrollDisplayLeft
 16400                           
 16401                           ;menuhelper.c: 195:     _delay((unsigned long)((20)*(4000000/4000.0)));
 16402  1034  301A               	movlw	26
 16403  1035  0140               	movlb	0	; select bank0
 16404  1036  00A8               	movwf	??_paging
 16405  1037  30F8               	movlw	248
 16406  1038                     u12677:	
 16407  1038  0B89               	decfsz	9,f
 16408  1039  2838               	goto	u12677
 16409  103A  0BA8               	decfsz	??_paging,f
 16410  103B  2838               	goto	u12677
 16411  103C  0000               	nop
 16412                           
 16413                           ;menuhelper.c: 196:    }
 16414  103D  3001               	movlw	1
 16415  103E  0140               	movlb	0	; select bank0
 16416  103F  00A8               	movwf	??_paging
 16417  1040  0828               	movf	??_paging,w
 16418  1041  07AC               	addwf	paging@n,f
 16419  1042  300C               	movlw	12
 16420  1043  022C               	subwf	paging@n,w
 16421  1044  1803               	btfsc	3,0
 16422  1045  2867               	goto	l8502
 16423  1046  2831               	goto	l8474
 16424  1047                     l8482:	
 16425  1047  3002               	movlw	2
 16426  1048  0140               	movlb	0	; select bank0
 16427  1049  062B               	xorwf	paging@dir,w
 16428  104A  1D03               	btfss	3,2
 16429  104B  2867               	goto	l8502
 16430  104C  082A               	movf	paging@currentPage,w
 16431  104D  1903               	btfsc	3,2
 16432  104E  2867               	goto	l8502
 16433                           
 16434                           ;menuhelper.c: 200:    currentPage--;
 16435  104F  3001               	movlw	1
 16436  1050  02AA               	subwf	paging@currentPage,f
 16437                           
 16438                           ;menuhelper.c: 201:    for(n = 0; n < 12; n++) {
 16439  1051  01AC               	clrf	paging@n
 16440  1052                     l8494:	
 16441                           
 16442                           ;menuhelper.c: 202:     OLED_scrollDisplayRight();
 16443  1052  31A9  2182  3190   	fcall	_OLED_scrollDisplayRight
 16444                           
 16445                           ;menuhelper.c: 203:     _delay((unsigned long)((20)*(4000000/4000.0)));
 16446  1055  301A               	movlw	26
 16447  1056  0140               	movlb	0	; select bank0
 16448  1057  00A8               	movwf	??_paging
 16449  1058  30F8               	movlw	248
 16450  1059                     u12687:	
 16451  1059  0B89               	decfsz	9,f
 16452  105A  2859               	goto	u12687
 16453  105B  0BA8               	decfsz	??_paging,f
 16454  105C  2859               	goto	u12687
 16455  105D  0000               	nop
 16456                           
 16457                           ;menuhelper.c: 204:    }
 16458  105E  3001               	movlw	1
 16459  105F  0140               	movlb	0	; select bank0
 16460  1060  00A8               	movwf	??_paging
 16461  1061  0828               	movf	??_paging,w
 16462  1062  07AC               	addwf	paging@n,f
 16463  1063  300C               	movlw	12
 16464  1064  022C               	subwf	paging@n,w
 16465  1065  1C03               	skipc
 16466  1066  2852               	goto	l8494
 16467  1067                     l8502:	
 16468                           
 16469                           ;menuhelper.c: 208:  lastDir = dir;
 16470  1067  0140               	movlb	0	; select bank0
 16471  1068  082B               	movf	paging@dir,w
 16472  1069  00A8               	movwf	??_paging
 16473  106A  0828               	movf	??_paging,w
 16474  106B  0143               	movlb	3	; select bank3
 16475  106C  00BC               	movwf	paging@lastDir^(0+384)
 16476                           
 16477                           ;menuhelper.c: 209:  PIE0bits.IOCIE = 1;
 16478  106D  014E               	movlb	14	; select bank14
 16479  106E  1616               	bsf	22,4	;volatile
 16480                           
 16481                           ;menuhelper.c: 211:  return currentPage;
 16482  106F  0140               	movlb	0	; select bank0
 16483  1070  082A               	movf	paging@currentPage,w
 16484  1071  0008               	return
 16485  1072                     __end_of_paging:	
 16486                           
 16487                           	psect	text50
 16488  29C7                     __ptext50:	
 16489 ;; *************** function _getRotDir *****************
 16490 ;; Defined at:
 16491 ;;		line 76 in file "inputs.c"
 16492 ;; Parameters:    Size  Location     Type
 16493 ;;		None
 16494 ;; Auto vars:     Size  Location     Type
 16495 ;;  ret             1    1[BANK0 ] enum E7871
 16496 ;; Return value:  Size  Location     Type
 16497 ;;                  1    wreg      enum E7871
 16498 ;; Registers used:
 16499 ;;		wreg, status,2
 16500 ;; Tracked objects:
 16501 ;;		On entry : 0/0
 16502 ;;		On exit  : 0/0
 16503 ;;		Unchanged: 0/0
 16504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16505 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16506 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16507 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16508 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16509 ;;Total ram usage:        2 bytes
 16510 ;; Hardware stack levels used:    1
 16511 ;; Hardware stack levels required when called:    3
 16512 ;; This function calls:
 16513 ;;		Nothing
 16514 ;; This function is called by:
 16515 ;;		_spinInput
 16516 ;;		_paging
 16517 ;; This function uses a non-reentrant model
 16518 ;;
 16519                           
 16520                           
 16521                           ;psect for function _getRotDir
 16522  29C7                     _getRotDir:	
 16523                           
 16524                           ;inputs.c: 78:  enum e_direction ret = rotDir;
 16525                           
 16526                           ;incstack = 0
 16527                           ; Regs used in _getRotDir: [wreg+status,2]
 16528  29C7  0143               	movlb	3	; select bank3
 16529  29C8  0849               	movf	_rotDir^(0+384),w	;volatile
 16530  29C9  0140               	movlb	0	; select bank0
 16531  29CA  00A0               	movwf	??_getRotDir
 16532  29CB  0820               	movf	??_getRotDir,w
 16533  29CC  00A1               	movwf	getRotDir@ret
 16534                           
 16535                           ;inputs.c: 79:  rotDir = ROT_STOP;
 16536  29CD  0143               	movlb	3	; select bank3
 16537  29CE  01C9               	clrf	_rotDir^(0+384)	;volatile
 16538                           
 16539                           ;inputs.c: 80:  return ret;
 16540  29CF  0140               	movlb	0	; select bank0
 16541  29D0  0821               	movf	getRotDir@ret,w
 16542  29D1  0008               	return
 16543  29D2                     __end_of_getRotDir:	
 16544                           
 16545                           	psect	text51
 16546  2982                     __ptext51:	
 16547 ;; *************** function _OLED_scrollDisplayRight *****************
 16548 ;; Defined at:
 16549 ;;		line 138 in file "oled.c"
 16550 ;; Parameters:    Size  Location     Type
 16551 ;;		None
 16552 ;; Auto vars:     Size  Location     Type
 16553 ;;		None
 16554 ;; Return value:  Size  Location     Type
 16555 ;;                  1    wreg      void 
 16556 ;; Registers used:
 16557 ;;		wreg, status,2, status,0, pclath, cstack
 16558 ;; Tracked objects:
 16559 ;;		On entry : 0/0
 16560 ;;		On exit  : 0/0
 16561 ;;		Unchanged: 0/0
 16562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16563 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16564 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16565 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16566 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16567 ;;Total ram usage:        0 bytes
 16568 ;; Hardware stack levels used:    1
 16569 ;; Hardware stack levels required when called:    7
 16570 ;; This function calls:
 16571 ;;		_OLED_command
 16572 ;; This function is called by:
 16573 ;;		_paging
 16574 ;; This function uses a non-reentrant model
 16575 ;;
 16576                           
 16577                           
 16578                           ;psect for function _OLED_scrollDisplayRight
 16579  2982                     _OLED_scrollDisplayRight:	
 16580                           
 16581                           ;oled.c: 140:  OLED_command(0x10 | 0x08 | 0x04);
 16582                           
 16583                           ;incstack = 0
 16584                           ; Regs used in _OLED_scrollDisplayRight: [wreg+status,2+status,0+pclath+cstack]
 16585  2982  301C               	movlw	28
 16586  2983  31A9  2193         	fcall	_OLED_command
 16587  2985  0008               	return
 16588  2986                     __end_of_OLED_scrollDisplayRight:	
 16589                           
 16590                           	psect	text52
 16591  297E                     __ptext52:	
 16592 ;; *************** function _OLED_scrollDisplayLeft *****************
 16593 ;; Defined at:
 16594 ;;		line 133 in file "oled.c"
 16595 ;; Parameters:    Size  Location     Type
 16596 ;;		None
 16597 ;; Auto vars:     Size  Location     Type
 16598 ;;		None
 16599 ;; Return value:  Size  Location     Type
 16600 ;;                  1    wreg      void 
 16601 ;; Registers used:
 16602 ;;		wreg, status,2, status,0, pclath, cstack
 16603 ;; Tracked objects:
 16604 ;;		On entry : 0/0
 16605 ;;		On exit  : 0/0
 16606 ;;		Unchanged: 0/0
 16607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16612 ;;Total ram usage:        0 bytes
 16613 ;; Hardware stack levels used:    1
 16614 ;; Hardware stack levels required when called:    7
 16615 ;; This function calls:
 16616 ;;		_OLED_command
 16617 ;; This function is called by:
 16618 ;;		_paging
 16619 ;; This function uses a non-reentrant model
 16620 ;;
 16621                           
 16622                           
 16623                           ;psect for function _OLED_scrollDisplayLeft
 16624  297E                     _OLED_scrollDisplayLeft:	
 16625                           
 16626                           ;oled.c: 135:  OLED_command(0x10 | 0x08 | 0x00);
 16627                           
 16628                           ;incstack = 0
 16629                           ; Regs used in _OLED_scrollDisplayLeft: [wreg+status,2+status,0+pclath+cstack]
 16630  297E  3018               	movlw	24
 16631  297F  31A9  2193         	fcall	_OLED_command
 16632  2981  0008               	return
 16633  2982                     __end_of_OLED_scrollDisplayLeft:	
 16634                           
 16635                           	psect	text53
 16636  2CF0                     __ptext53:	
 16637 ;; *************** function _OLED_print_xy *****************
 16638 ;; Defined at:
 16639 ;;		line 157 in file "oled.c"
 16640 ;; Parameters:    Size  Location     Type
 16641 ;;  col             1    wreg     unsigned char 
 16642 ;;  row             1    7[BANK0 ] unsigned char 
 16643 ;;  s               2    8[BANK0 ] PTR unsigned char 
 16644 ;;		 -> STR_36(11), STR_34(13), STR_32(13), STR_30(13), 
 16645 ;;		 -> STR_28(41), STR_26(13), STR_22(13), STR_17(25), 
 16646 ;;		 -> STR_6(13), lBuf(49), sBuf(13), STR_2(49), 
 16647 ;;		 -> STR_1(9), 
 16648 ;; Auto vars:     Size  Location     Type
 16649 ;;  col             1   15[BANK0 ] unsigned char 
 16650 ;;  row_offsets     4   11[BANK0 ] unsigned char [4]
 16651 ;; Return value:  Size  Location     Type
 16652 ;;                  1    wreg      void 
 16653 ;; Registers used:
 16654 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16655 ;; Tracked objects:
 16656 ;;		On entry : 0/0
 16657 ;;		On exit  : 0/0
 16658 ;;		Unchanged: 0/0
 16659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16660 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16661 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16662 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16663 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16664 ;;Total ram usage:        9 bytes
 16665 ;; Hardware stack levels used:    1
 16666 ;; Hardware stack levels required when called:    7
 16667 ;; This function calls:
 16668 ;;		_OLED_command
 16669 ;;		_OLED_write
 16670 ;; This function is called by:
 16671 ;;		_statusView
 16672 ;;		_channelView
 16673 ;;		_channelSetup
 16674 ;;		_setOutputPower
 16675 ;;		_setLensDia
 16676 ;;		_setup
 16677 ;;		_setDPOffset
 16678 ;;		_setSkyTemp
 16679 ;;		_setFudgeFactor
 16680 ;;		_menuError
 16681 ;;		_systemCheck
 16682 ;; This function uses a non-reentrant model
 16683 ;;
 16684                           
 16685                           
 16686                           ;psect for function _OLED_print_xy
 16687  2CF0                     _OLED_print_xy:	
 16688                           
 16689                           ;incstack = 0
 16690                           ; Regs used in _OLED_print_xy: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 16691                           ;OLED_print_xy@col stored from wreg
 16692  2CF0  0140               	movlb	0	; select bank0
 16693  2CF1  00AF               	movwf	OLED_print_xy@col
 16694                           
 16695                           ;oled.c: 157: void OLED_print_xy(uint8_t col, uint8_t row, char *s);oled.c: 158: {;oled.
      +                          c: 159:  uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 16696  2CF2  0144               	movlb	4	; select bank4
 16697  2CF3  0867               	movf	(OLED_print_xy@F7925+3)^(0+512),w
 16698  2CF4  0140               	movlb	0	; select bank0
 16699  2CF5  00AE               	movwf	OLED_print_xy@row_offsets+3
 16700  2CF6  0144               	movlb	4	; select bank4
 16701  2CF7  0866               	movf	(OLED_print_xy@F7925+2)^(0+512),w
 16702  2CF8  0140               	movlb	0	; select bank0
 16703  2CF9  00AD               	movwf	OLED_print_xy@row_offsets+2
 16704  2CFA  0144               	movlb	4	; select bank4
 16705  2CFB  0865               	movf	(OLED_print_xy@F7925+1)^(0+512),w
 16706  2CFC  0140               	movlb	0	; select bank0
 16707  2CFD  00AC               	movwf	OLED_print_xy@row_offsets+1
 16708  2CFE  0144               	movlb	4	; select bank4
 16709  2CFF  0864               	movf	OLED_print_xy@F7925^(0+512),w
 16710  2D00  0140               	movlb	0	; select bank0
 16711  2D01  00AB               	movwf	OLED_print_xy@row_offsets
 16712                           
 16713                           ;oled.c: 161:  OLED_command(0x80 | (col + row_offsets[row]));
 16714  2D02  0827               	movf	OLED_print_xy@row,w
 16715  2D03  3E2B               	addlw	(low (OLED_print_xy@row_offsets| 0))& (0+255)
 16716  2D04  0086               	movwf	6
 16717  2D05  0187               	clrf	7
 16718  2D06  0801               	movf	1,w
 16719  2D07  072F               	addwf	OLED_print_xy@col,w
 16720  2D08  3880               	iorlw	128
 16721  2D09  31A9  2193  31AC   	fcall	_OLED_command
 16722  2D0C                     l8414:	
 16723                           ;oled.c: 162:  while (*s != (char) ((void*)0)) {
 16724                           
 16725                           
 16726                           ;oled.c: 162:  while (*s != (char) ((void*)0)) {
 16727  2D0C  0140               	movlb	0	; select bank0
 16728  2D0D  0828               	movf	OLED_print_xy@s,w
 16729  2D0E  0084               	movwf	4
 16730  2D0F  0829               	movf	OLED_print_xy@s+1,w
 16731  2D10  0085               	movwf	5
 16732  2D11  0012               	moviw fsr0++
 16733  2D12  1903               	btfsc	3,2
 16734  2D13  0008               	return
 16735                           
 16736                           ;oled.c: 163:   OLED_write(*s++);
 16737  2D14  0828               	movf	OLED_print_xy@s,w
 16738  2D15  0084               	movwf	4
 16739  2D16  0829               	movf	OLED_print_xy@s+1,w
 16740  2D17  0085               	movwf	5
 16741  2D18  0800               	movf	0,w	;code access
 16742  2D19  31A9  21B1  31AC   	fcall	_OLED_write
 16743  2D1C  3001               	movlw	1
 16744  2D1D  0140               	movlb	0	; select bank0
 16745  2D1E  07A8               	addwf	OLED_print_xy@s,f
 16746  2D1F  3000               	movlw	0
 16747  2D20  3DA9               	addwfc	OLED_print_xy@s+1,f
 16748  2D21  2D0C               	goto	l8414
 16749  2D22                     __end_of_OLED_print_xy:	
 16750                           
 16751                           	psect	text54
 16752  2DDA                     __ptext54:	
 16753 ;; *************** function _initialize *****************
 16754 ;; Defined at:
 16755 ;;		line 354 in file "main.c"
 16756 ;; Parameters:    Size  Location     Type
 16757 ;;		None
 16758 ;; Auto vars:     Size  Location     Type
 16759 ;;		None
 16760 ;; Return value:  Size  Location     Type
 16761 ;;                  1    wreg      void 
 16762 ;; Registers used:
 16763 ;;		wreg, status,2, status,0
 16764 ;; Tracked objects:
 16765 ;;		On entry : 0/0
 16766 ;;		On exit  : 0/0
 16767 ;;		Unchanged: 0/0
 16768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16773 ;;Total ram usage:        0 bytes
 16774 ;; Hardware stack levels used:    1
 16775 ;; Hardware stack levels required when called:    3
 16776 ;; This function calls:
 16777 ;;		Nothing
 16778 ;; This function is called by:
 16779 ;;		_main
 16780 ;; This function uses a non-reentrant model
 16781 ;;
 16782                           
 16783                           
 16784                           ;psect for function _initialize
 16785  2DDA                     _initialize:	
 16786                           
 16787                           ;main.c: 356:  OSCFRQ = 0b00000010;
 16788                           
 16789                           ;incstack = 0
 16790                           ; Regs used in _initialize: [wreg+status,2+status,0]
 16791  2DDA  3002               	movlw	2
 16792  2DDB  0151               	movlb	17	; select bank17
 16793  2DDC  0093               	movwf	19	;volatile
 16794                           
 16795                           ;main.c: 357:  OSCCON1 = 0b01100000;
 16796  2DDD  3060               	movlw	96
 16797  2DDE  008D               	movwf	13	;volatile
 16798  2DDF                     l216:	
 16799                           ;main.c: 358:  while (!OSCCON3bits.ORDY);
 16800                           
 16801  2DDF  1E0F               	btfss	15,4	;volatile
 16802  2DE0  2DDF               	goto	l216
 16803                           
 16804                           ;main.c: 361:  RX1DTPPSbits.RX1DTPPS = 0x17;
 16805  2DE1  017D               	movlb	61	; select bank61
 16806  2DE2  084B               	movf	75,w	;volatile
 16807  2DE3  39C0               	andlw	-64
 16808  2DE4  3817               	iorlw	23
 16809  2DE5  00CB               	movwf	75	;volatile
 16810                           
 16811                           ;main.c: 362:  RC6PPS = 0x0F;
 16812  2DE6  300F               	movlw	15
 16813  2DE7  017E               	movlb	62	; select bank62
 16814  2DE8  00A6               	movwf	38	;volatile
 16815                           
 16816                           ;main.c: 365:  ANSELA = 0b01000000;
 16817  2DE9  3040               	movlw	64
 16818  2DEA  00B8               	movwf	56	;volatile
 16819                           
 16820                           ;main.c: 366:  ANSELB = 0b00000000;
 16821  2DEB  01C3               	clrf	67	;volatile
 16822                           
 16823                           ;main.c: 367:  ANSELC = 0b00000011;
 16824  2DEC  3003               	movlw	3
 16825  2DED  00CE               	movwf	78	;volatile
 16826                           
 16827                           ;main.c: 370:  TRISA = 0b11110000;
 16828  2DEE  30F0               	movlw	240
 16829  2DEF  0140               	movlb	0	; select bank0
 16830  2DF0  0092               	movwf	18	;volatile
 16831                           
 16832                           ;main.c: 371:  TRISB = 0b00000000;
 16833  2DF1  0193               	clrf	19	;volatile
 16834                           
 16835                           ;main.c: 372:  TRISC = 0b10000111;
 16836  2DF2  3087               	movlw	135
 16837  2DF3  0094               	movwf	20	;volatile
 16838                           
 16839                           ;main.c: 375:  ADCON0bits.ADON = 1;
 16840  2DF4  0141               	movlb	1	; select bank1
 16841  2DF5  141D               	bsf	29,0	;volatile
 16842                           
 16843                           ;main.c: 376:  ADCON1 = 0b11100000;
 16844  2DF6  30E0               	movlw	224
 16845  2DF7  009E               	movwf	30	;volatile
 16846                           
 16847                           ;main.c: 379:  T0CON0 = 0b10000000;
 16848  2DF8  3080               	movlw	128
 16849  2DF9  014B               	movlb	11	; select bank11
 16850  2DFA  009E               	movwf	30	;volatile
 16851                           
 16852                           ;main.c: 380:  T0CON1 = 0b01000111;
 16853  2DFB  3047               	movlw	71
 16854  2DFC  009F               	movwf	31	;volatile
 16855                           
 16856                           ;main.c: 381:  TMR0 = 178;
 16857  2DFD  30B2               	movlw	178
 16858  2DFE  009C               	movwf	28	;volatile
 16859                           
 16860                           ;main.c: 384:  T1CON = 0b00110011;
 16861  2DFF  3033               	movlw	51
 16862  2E00  0144               	movlb	4	; select bank4
 16863  2E01  008E               	movwf	14	;volatile
 16864                           
 16865                           ;main.c: 385:  T1CLK = 0b00000001;
 16866  2E02  3001               	movlw	1
 16867  2E03  0091               	movwf	17	;volatile
 16868                           
 16869                           ;main.c: 386:  TMR1 = 53035;
 16870  2E04  30CF               	movlw	207
 16871  2E05  008D               	movwf	13	;volatile
 16872  2E06  302B               	movlw	43
 16873  2E07  008C               	movwf	12	;volatile
 16874                           
 16875                           ;main.c: 389:  PIE0 = 0b00110000;
 16876  2E08  3030               	movlw	48
 16877  2E09  014E               	movlb	14	; select bank14
 16878  2E0A  0096               	movwf	22	;volatile
 16879                           
 16880                           ;main.c: 390:  PIE3 = 0b00100000;
 16881  2E0B  3020               	movlw	32
 16882  2E0C  0099               	movwf	25	;volatile
 16883                           
 16884                           ;main.c: 391:  PIE4 = 0b00000001;
 16885  2E0D  3001               	movlw	1
 16886  2E0E  009A               	movwf	26	;volatile
 16887                           
 16888                           ;main.c: 392:  INTCON = 0b11000000;
 16889  2E0F  30C0               	movlw	192
 16890  2E10  008B               	movwf	11	;volatile
 16891                           
 16892                           ;main.c: 395:  IOCAP = 0b10110000;
 16893  2E11  30B0               	movlw	176
 16894  2E12  017E               	movlb	62	; select bank62
 16895  2E13  00BD               	movwf	61	;volatile
 16896                           
 16897                           ;main.c: 396:  IOCAN = 0b10110000;
 16898  2E14  30B0               	movlw	176
 16899  2E15  00BE               	movwf	62	;volatile
 16900                           
 16901                           ;main.c: 397:  IOCCN = 0b00000100;
 16902  2E16  3004               	movlw	4
 16903  2E17  00D4               	movwf	84	;volatile
 16904                           
 16905                           ;main.c: 401:  BAUD1CON = 0b00001000;
 16906  2E18  3008               	movlw	8
 16907  2E19  0142               	movlb	2	; select bank2
 16908  2E1A  009F               	movwf	31	;volatile
 16909                           
 16910                           ;main.c: 402:  SPBRGL = 25;
 16911  2E1B  3019               	movlw	25
 16912  2E1C  009B               	movwf	27	;volatile
 16913                           
 16914                           ;main.c: 403:  RC1STA = 0b10010000;
 16915  2E1D  3090               	movlw	144
 16916  2E1E  009D               	movwf	29	;volatile
 16917                           
 16918                           ;main.c: 404:  TX1STA = 0b00100000;
 16919  2E1F  3020               	movlw	32
 16920  2E20  009E               	movwf	30	;volatile
 16921  2E21  0008               	return
 16922  2E22                     __end_of_initialize:	
 16923                           
 16924                           	psect	text55
 16925  134A                     __ptext55:	
 16926 ;; *************** function _initGlobalData *****************
 16927 ;; Defined at:
 16928 ;;		line 91 in file "main.c"
 16929 ;; Parameters:    Size  Location     Type
 16930 ;;  data            2    6[BANK0 ] PTR struct .
 16931 ;;		 -> data(157), 
 16932 ;; Auto vars:     Size  Location     Type
 16933 ;;  n               1   14[BANK0 ] unsigned char 
 16934 ;; Return value:  Size  Location     Type
 16935 ;;                  1    wreg      void 
 16936 ;; Registers used:
 16937 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 16938 ;; Tracked objects:
 16939 ;;		On entry : 0/0
 16940 ;;		On exit  : 0/0
 16941 ;;		Unchanged: 0/0
 16942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 16943 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16944 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16945 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16946 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 16947 ;;Total ram usage:        9 bytes
 16948 ;; Hardware stack levels used:    1
 16949 ;; Hardware stack levels required when called:    4
 16950 ;; This function calls:
 16951 ;;		___wmul
 16952 ;; This function is called by:
 16953 ;;		_main
 16954 ;; This function uses a non-reentrant model
 16955 ;;
 16956                           
 16957                           
 16958                           ;psect for function _initGlobalData
 16959  134A                     _initGlobalData:	
 16960                           
 16961                           ;main.c: 91: void initGlobalData(t_globalData *data);main.c: 92: {;main.c: 93:  uint8_t 
      +                          n;;main.c: 95:  data->tempC = 0;
 16962                           
 16963                           ;incstack = 0
 16964                           ; Regs used in _initGlobalData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 16965  134A  0140               	movlb	0	; select bank0
 16966  134B  0826               	movf	initGlobalData@data,w
 16967  134C  0086               	movwf	6
 16968  134D  0827               	movf	initGlobalData@data+1,w
 16969  134E  0087               	movwf	7
 16970  134F  3000               	movlw	0
 16971  1350  3FC0               	movwi [0]fsr1
 16972  1351  3000               	movlw	0
 16973  1352  3FC1               	movwi [1]fsr1
 16974  1353  3000               	movlw	0
 16975  1354  3FC2               	movwi [2]fsr1
 16976  1355  3000               	movlw	0
 16977  1356  3FC3               	movwi [3]fsr1
 16978                           
 16979                           ;main.c: 96:  data->relHum = 0;
 16980  1357  0826               	movf	initGlobalData@data,w
 16981  1358  0086               	movwf	6
 16982  1359  0827               	movf	initGlobalData@data+1,w
 16983  135A  0087               	movwf	7
 16984  135B  3144               	addfsr 1,4
 16985  135C  3000               	movlw	0
 16986  135D  3FC0               	movwi [0]fsr1
 16987  135E  3000               	movlw	0
 16988  135F  3FC1               	movwi [1]fsr1
 16989  1360  3000               	movlw	0
 16990  1361  3FC2               	movwi [2]fsr1
 16991  1362  3000               	movlw	0
 16992  1363  3FC3               	movwi [3]fsr1
 16993                           
 16994                           ;main.c: 97:  data->dewPointC = 0;
 16995  1364  0826               	movf	initGlobalData@data,w
 16996  1365  0086               	movwf	6
 16997  1366  0827               	movf	initGlobalData@data+1,w
 16998  1367  0087               	movwf	7
 16999  1368  3148               	addfsr 1,8
 17000  1369  3000               	movlw	0
 17001  136A  3FC0               	movwi [0]fsr1
 17002  136B  3000               	movlw	0
 17003  136C  3FC1               	movwi [1]fsr1
 17004  136D  3000               	movlw	0
 17005  136E  3FC2               	movwi [2]fsr1
 17006  136F  3000               	movlw	0
 17007  1370  3FC3               	movwi [3]fsr1
 17008                           
 17009                           ;main.c: 98:  data->sensorVersion = 0;
 17010  1371  0826               	movf	initGlobalData@data,w
 17011  1372  0086               	movwf	6
 17012  1373  0827               	movf	initGlobalData@data+1,w
 17013  1374  0087               	movwf	7
 17014  1375  314C               	addfsr 1,12
 17015  1376  3000               	movlw	0
 17016  1377  3FC0               	movwi [0]fsr1
 17017  1378  3000               	movlw	0
 17018  1379  3FC1               	movwi [1]fsr1
 17019  137A  3000               	movlw	0
 17020  137B  3FC2               	movwi [2]fsr1
 17021  137C  3000               	movlw	0
 17022  137D  3FC3               	movwi [3]fsr1
 17023                           
 17024                           ;main.c: 99:  data->tempAux = 0;
 17025  137E  0826               	movf	initGlobalData@data,w
 17026  137F  0086               	movwf	6
 17027  1380  0827               	movf	initGlobalData@data+1,w
 17028  1381  0087               	movwf	7
 17029  1382  3150               	addfsr 1,16
 17030  1383  3000               	movlw	0
 17031  1384  3FC0               	movwi [0]fsr1
 17032  1385  3000               	movlw	0
 17033  1386  3FC1               	movwi [1]fsr1
 17034  1387  3000               	movlw	0
 17035  1388  3FC2               	movwi [2]fsr1
 17036  1389  3000               	movlw	0
 17037  138A  3FC3               	movwi [3]fsr1
 17038                           
 17039                           ;main.c: 100:  data->voltage = 0;
 17040  138B  0826               	movf	initGlobalData@data,w
 17041  138C  0086               	movwf	6
 17042  138D  0827               	movf	initGlobalData@data+1,w
 17043  138E  0087               	movwf	7
 17044  138F  3154               	addfsr 1,20
 17045  1390  3000               	movlw	0
 17046  1391  3FC0               	movwi [0]fsr1
 17047  1392  3000               	movlw	0
 17048  1393  3FC1               	movwi [1]fsr1
 17049  1394  3000               	movlw	0
 17050  1395  3FC2               	movwi [2]fsr1
 17051  1396  3000               	movlw	0
 17052  1397  3FC3               	movwi [3]fsr1
 17053                           
 17054                           ;main.c: 101:  data->current = 0;
 17055  1398  0826               	movf	initGlobalData@data,w
 17056  1399  0086               	movwf	6
 17057  139A  0827               	movf	initGlobalData@data+1,w
 17058  139B  0087               	movwf	7
 17059  139C  3158               	addfsr 1,24
 17060  139D  3000               	movlw	0
 17061  139E  3FC0               	movwi [0]fsr1
 17062  139F  3000               	movlw	0
 17063  13A0  3FC1               	movwi [1]fsr1
 17064  13A1  3000               	movlw	0
 17065  13A2  3FC2               	movwi [2]fsr1
 17066  13A3  3000               	movlw	0
 17067  13A4  3FC3               	movwi [3]fsr1
 17068                           
 17069                           ;main.c: 102:  data->power = 0;
 17070  13A5  0826               	movf	initGlobalData@data,w
 17071  13A6  0086               	movwf	6
 17072  13A7  0827               	movf	initGlobalData@data+1,w
 17073  13A8  0087               	movwf	7
 17074  13A9  315C               	addfsr 1,28
 17075  13AA  3000               	movlw	0
 17076  13AB  3FC0               	movwi [0]fsr1
 17077  13AC  3000               	movlw	0
 17078  13AD  3FC1               	movwi [1]fsr1
 17079  13AE  3000               	movlw	0
 17080  13AF  3FC2               	movwi [2]fsr1
 17081  13B0  3000               	movlw	0
 17082  13B1  3FC3               	movwi [3]fsr1
 17083                           
 17084                           ;main.c: 103:  data->dpOffset = 3.0;
 17085  13B2  0826               	movf	initGlobalData@data,w
 17086  13B3  3E20               	addlw	32
 17087  13B4  0086               	movwf	6
 17088  13B5  3000               	movlw	0
 17089  13B6  3D27               	addwfc	initGlobalData@data+1,w
 17090  13B7  0087               	movwf	7
 17091  13B8  3000               	movlw	0
 17092  13B9  3FC0               	movwi [0]fsr1
 17093  13BA  3000               	movlw	0
 17094  13BB  3FC1               	movwi [1]fsr1
 17095  13BC  3040               	movlw	64
 17096  13BD  3FC2               	movwi [2]fsr1
 17097  13BE  3040               	movlw	64
 17098  13BF  3FC3               	movwi [3]fsr1
 17099                           
 17100                           ;main.c: 104:  data->skyTemp = -40;
 17101  13C0  0826               	movf	initGlobalData@data,w
 17102  13C1  3E24               	addlw	36
 17103  13C2  0086               	movwf	6
 17104  13C3  3000               	movlw	0
 17105  13C4  3D27               	addwfc	initGlobalData@data+1,w
 17106  13C5  0087               	movwf	7
 17107  13C6  3000               	movlw	0
 17108  13C7  3FC0               	movwi [0]fsr1
 17109  13C8  3000               	movlw	0
 17110  13C9  3FC1               	movwi [1]fsr1
 17111  13CA  3020               	movlw	32
 17112  13CB  3FC2               	movwi [2]fsr1
 17113  13CC  30C2               	movlw	194
 17114  13CD  3FC3               	movwi [3]fsr1
 17115                           
 17116                           ;main.c: 105:  data->fudgeFactor = 1.0;
 17117  13CE  0826               	movf	initGlobalData@data,w
 17118  13CF  3E28               	addlw	40
 17119  13D0  0086               	movwf	6
 17120  13D1  3000               	movlw	0
 17121  13D2  3D27               	addwfc	initGlobalData@data+1,w
 17122  13D3  0087               	movwf	7
 17123  13D4  3000               	movlw	0
 17124  13D5  3FC0               	movwi [0]fsr1
 17125  13D6  3000               	movlw	0
 17126  13D7  3FC1               	movwi [1]fsr1
 17127  13D8  3080               	movlw	128
 17128  13D9  3FC2               	movwi [2]fsr1
 17129  13DA  303F               	movlw	63
 17130  13DB  3FC3               	movwi [3]fsr1
 17131                           
 17132                           ;main.c: 107:  for(n = 0; n < 4; n++) {
 17133  13DC  01AE               	clrf	initGlobalData@n
 17134  13DD                     l9016:	
 17135                           
 17136                           ;main.c: 108:   data->chData[n].lensDia = 4;
 17137  13DD  082E               	movf	initGlobalData@n,w
 17138  13DE  00A8               	movwf	??_initGlobalData
 17139  13DF  01A9               	clrf	??_initGlobalData+1
 17140  13E0  0828               	movf	??_initGlobalData,w
 17141  13E1  00A0               	movwf	___wmul@multiplier
 17142  13E2  0829               	movf	??_initGlobalData+1,w
 17143  13E3  00A1               	movwf	___wmul@multiplier+1
 17144  13E4  301C               	movlw	28
 17145  13E5  00A2               	movwf	___wmul@multiplicand
 17146  13E6  3000               	movlw	0
 17147  13E7  00A3               	movwf	___wmul@multiplicand+1
 17148  13E8  31AA  22C1  3193   	fcall	___wmul
 17149  13EB  0140               	movlb	0	; select bank0
 17150  13EC  0820               	movf	?___wmul,w
 17151  13ED  0726               	addwf	initGlobalData@data,w
 17152  13EE  00AA               	movwf	??_initGlobalData+2
 17153  13EF  0821               	movf	?___wmul+1,w
 17154  13F0  3D27               	addwfc	initGlobalData@data+1,w
 17155  13F1  00AB               	movwf	??_initGlobalData+3
 17156  13F2  082A               	movf	??_initGlobalData+2,w
 17157  13F3  3E3F               	addlw	63
 17158  13F4  0086               	movwf	6
 17159  13F5  3000               	movlw	0
 17160  13F6  3D2B               	addwfc	??_initGlobalData+3,w
 17161  13F7  0087               	movwf	7
 17162  13F8  3000               	movlw	0
 17163  13F9  3FC0               	movwi [0]fsr1
 17164  13FA  3000               	movlw	0
 17165  13FB  3FC1               	movwi [1]fsr1
 17166  13FC  3080               	movlw	128
 17167  13FD  3FC2               	movwi [2]fsr1
 17168  13FE  3040               	movlw	64
 17169  13FF  3FC3               	movwi [3]fsr1
 17170                           
 17171                           ;main.c: 109:   data->chData[n].status = CH_DISABLED;
 17172  1400  082E               	movf	initGlobalData@n,w
 17173  1401  00A8               	movwf	??_initGlobalData
 17174  1402  01A9               	clrf	??_initGlobalData+1
 17175  1403  0828               	movf	??_initGlobalData,w
 17176  1404  00A0               	movwf	___wmul@multiplier
 17177  1405  0829               	movf	??_initGlobalData+1,w
 17178  1406  00A1               	movwf	___wmul@multiplier+1
 17179  1407  301C               	movlw	28
 17180  1408  00A2               	movwf	___wmul@multiplicand
 17181  1409  3000               	movlw	0
 17182  140A  00A3               	movwf	___wmul@multiplicand+1
 17183  140B  31AA  22C1  3193   	fcall	___wmul
 17184  140E  0140               	movlb	0	; select bank0
 17185  140F  0820               	movf	?___wmul,w
 17186  1410  0726               	addwf	initGlobalData@data,w
 17187  1411  00AA               	movwf	??_initGlobalData+2
 17188  1412  0821               	movf	?___wmul+1,w
 17189  1413  3D27               	addwfc	initGlobalData@data+1,w
 17190  1414  00AB               	movwf	??_initGlobalData+3
 17191  1415  082A               	movf	??_initGlobalData+2,w
 17192  1416  3E48               	addlw	72
 17193  1417  0086               	movwf	6
 17194  1418  3000               	movlw	0
 17195  1419  3D2B               	addwfc	??_initGlobalData+3,w
 17196  141A  0087               	movwf	7
 17197  141B  0181               	clrf	1
 17198                           
 17199                           ;main.c: 110:   data->chData[n].mode = MODE_AUTO;
 17200  141C  082E               	movf	initGlobalData@n,w
 17201  141D  00A8               	movwf	??_initGlobalData
 17202  141E  01A9               	clrf	??_initGlobalData+1
 17203  141F  0828               	movf	??_initGlobalData,w
 17204  1420  00A0               	movwf	___wmul@multiplier
 17205  1421  0829               	movf	??_initGlobalData+1,w
 17206  1422  00A1               	movwf	___wmul@multiplier+1
 17207  1423  301C               	movlw	28
 17208  1424  00A2               	movwf	___wmul@multiplicand
 17209  1425  3000               	movlw	0
 17210  1426  00A3               	movwf	___wmul@multiplicand+1
 17211  1427  31AA  22C1  3193   	fcall	___wmul
 17212  142A  0140               	movlb	0	; select bank0
 17213  142B  0820               	movf	?___wmul,w
 17214  142C  0726               	addwf	initGlobalData@data,w
 17215  142D  00AA               	movwf	??_initGlobalData+2
 17216  142E  0821               	movf	?___wmul+1,w
 17217  142F  3D27               	addwfc	initGlobalData@data+1,w
 17218  1430  00AB               	movwf	??_initGlobalData+3
 17219  1431  082A               	movf	??_initGlobalData+2,w
 17220  1432  3E47               	addlw	71
 17221  1433  00AC               	movwf	??_initGlobalData+4
 17222  1434  3000               	movlw	0
 17223  1435  3D2B               	addwfc	??_initGlobalData+3,w
 17224  1436  00AD               	movwf	??_initGlobalData+5
 17225  1437  082C               	movf	??_initGlobalData+4,w
 17226  1438  0086               	movwf	6
 17227  1439  082D               	movf	??_initGlobalData+5,w
 17228  143A  0087               	movwf	7
 17229  143B  3001               	movlw	1
 17230  143C  0081               	movwf	1
 17231                           
 17232                           ;main.c: 111:   data->chData[n].Pmax = 10;
 17233  143D  082E               	movf	initGlobalData@n,w
 17234  143E  00A8               	movwf	??_initGlobalData
 17235  143F  01A9               	clrf	??_initGlobalData+1
 17236  1440  0828               	movf	??_initGlobalData,w
 17237  1441  00A0               	movwf	___wmul@multiplier
 17238  1442  0829               	movf	??_initGlobalData+1,w
 17239  1443  00A1               	movwf	___wmul@multiplier+1
 17240  1444  301C               	movlw	28
 17241  1445  00A2               	movwf	___wmul@multiplicand
 17242  1446  3000               	movlw	0
 17243  1447  00A3               	movwf	___wmul@multiplicand+1
 17244  1448  31AA  22C1  3193   	fcall	___wmul
 17245  144B  0140               	movlb	0	; select bank0
 17246  144C  0820               	movf	?___wmul,w
 17247  144D  0726               	addwf	initGlobalData@data,w
 17248  144E  00AA               	movwf	??_initGlobalData+2
 17249  144F  0821               	movf	?___wmul+1,w
 17250  1450  3D27               	addwfc	initGlobalData@data+1,w
 17251  1451  00AB               	movwf	??_initGlobalData+3
 17252  1452  082A               	movf	??_initGlobalData+2,w
 17253  1453  3E31               	addlw	49
 17254  1454  0086               	movwf	6
 17255  1455  3000               	movlw	0
 17256  1456  3D2B               	addwfc	??_initGlobalData+3,w
 17257  1457  0087               	movwf	7
 17258  1458  3000               	movlw	0
 17259  1459  3FC0               	movwi [0]fsr1
 17260  145A  3000               	movlw	0
 17261  145B  3FC1               	movwi [1]fsr1
 17262  145C  3020               	movlw	32
 17263  145D  3FC2               	movwi [2]fsr1
 17264  145E  3041               	movlw	65
 17265  145F  3FC3               	movwi [3]fsr1
 17266                           
 17267                           ;main.c: 112:   data->chData[n].Preq = 0;
 17268  1460  082E               	movf	initGlobalData@n,w
 17269  1461  00A8               	movwf	??_initGlobalData
 17270  1462  01A9               	clrf	??_initGlobalData+1
 17271  1463  0828               	movf	??_initGlobalData,w
 17272  1464  00A0               	movwf	___wmul@multiplier
 17273  1465  0829               	movf	??_initGlobalData+1,w
 17274  1466  00A1               	movwf	___wmul@multiplier+1
 17275  1467  301C               	movlw	28
 17276  1468  00A2               	movwf	___wmul@multiplicand
 17277  1469  3000               	movlw	0
 17278  146A  00A3               	movwf	___wmul@multiplicand+1
 17279  146B  31AA  22C1  3193   	fcall	___wmul
 17280  146E  0140               	movlb	0	; select bank0
 17281  146F  0820               	movf	?___wmul,w
 17282  1470  0726               	addwf	initGlobalData@data,w
 17283  1471  00AA               	movwf	??_initGlobalData+2
 17284  1472  0821               	movf	?___wmul+1,w
 17285  1473  3D27               	addwfc	initGlobalData@data+1,w
 17286  1474  00AB               	movwf	??_initGlobalData+3
 17287  1475  082A               	movf	??_initGlobalData+2,w
 17288  1476  3E35               	addlw	53
 17289  1477  0086               	movwf	6
 17290  1478  3000               	movlw	0
 17291  1479  3D2B               	addwfc	??_initGlobalData+3,w
 17292  147A  0087               	movwf	7
 17293  147B  3000               	movlw	0
 17294  147C  3FC0               	movwi [0]fsr1
 17295  147D  3000               	movlw	0
 17296  147E  3FC1               	movwi [1]fsr1
 17297  147F  3000               	movlw	0
 17298  1480  3FC2               	movwi [2]fsr1
 17299  1481  3000               	movlw	0
 17300  1482  3FC3               	movwi [3]fsr1
 17301                           
 17302                           ;main.c: 113:   data->chData[n].Patt = 0;
 17303  1483  082E               	movf	initGlobalData@n,w
 17304  1484  00A8               	movwf	??_initGlobalData
 17305  1485  01A9               	clrf	??_initGlobalData+1
 17306  1486  0828               	movf	??_initGlobalData,w
 17307  1487  00A0               	movwf	___wmul@multiplier
 17308  1488  0829               	movf	??_initGlobalData+1,w
 17309  1489  00A1               	movwf	___wmul@multiplier+1
 17310  148A  301C               	movlw	28
 17311  148B  00A2               	movwf	___wmul@multiplicand
 17312  148C  3000               	movlw	0
 17313  148D  00A3               	movwf	___wmul@multiplicand+1
 17314  148E  31AA  22C1  3193   	fcall	___wmul
 17315  1491  0140               	movlb	0	; select bank0
 17316  1492  0820               	movf	?___wmul,w
 17317  1493  0726               	addwf	initGlobalData@data,w
 17318  1494  00AA               	movwf	??_initGlobalData+2
 17319  1495  0821               	movf	?___wmul+1,w
 17320  1496  3D27               	addwfc	initGlobalData@data+1,w
 17321  1497  00AB               	movwf	??_initGlobalData+3
 17322  1498  082A               	movf	??_initGlobalData+2,w
 17323  1499  3E39               	addlw	57
 17324  149A  0086               	movwf	6
 17325  149B  3000               	movlw	0
 17326  149C  3D2B               	addwfc	??_initGlobalData+3,w
 17327  149D  0087               	movwf	7
 17328  149E  3000               	movlw	0
 17329  149F  3FC0               	movwi [0]fsr1
 17330  14A0  3000               	movlw	0
 17331  14A1  3FC1               	movwi [1]fsr1
 17332  14A2  3000               	movlw	0
 17333  14A3  3FC2               	movwi [2]fsr1
 17334  14A4  3000               	movlw	0
 17335  14A5  3FC3               	movwi [3]fsr1
 17336                           
 17337                           ;main.c: 114:   data->chData[n].current = 0;
 17338  14A6  082E               	movf	initGlobalData@n,w
 17339  14A7  00A8               	movwf	??_initGlobalData
 17340  14A8  01A9               	clrf	??_initGlobalData+1
 17341  14A9  0828               	movf	??_initGlobalData,w
 17342  14AA  00A0               	movwf	___wmul@multiplier
 17343  14AB  0829               	movf	??_initGlobalData+1,w
 17344  14AC  00A1               	movwf	___wmul@multiplier+1
 17345  14AD  301C               	movlw	28
 17346  14AE  00A2               	movwf	___wmul@multiplicand
 17347  14AF  3000               	movlw	0
 17348  14B0  00A3               	movwf	___wmul@multiplicand+1
 17349  14B1  31AA  22C1  3193   	fcall	___wmul
 17350  14B4  0140               	movlb	0	; select bank0
 17351  14B5  0820               	movf	?___wmul,w
 17352  14B6  0726               	addwf	initGlobalData@data,w
 17353  14B7  00AA               	movwf	??_initGlobalData+2
 17354  14B8  0821               	movf	?___wmul+1,w
 17355  14B9  3D27               	addwfc	initGlobalData@data+1,w
 17356  14BA  00AB               	movwf	??_initGlobalData+3
 17357  14BB  082A               	movf	??_initGlobalData+2,w
 17358  14BC  3E2D               	addlw	45
 17359  14BD  0086               	movwf	6
 17360  14BE  3000               	movlw	0
 17361  14BF  3D2B               	addwfc	??_initGlobalData+3,w
 17362  14C0  0087               	movwf	7
 17363  14C1  3000               	movlw	0
 17364  14C2  3FC0               	movwi [0]fsr1
 17365  14C3  3000               	movlw	0
 17366  14C4  3FC1               	movwi [1]fsr1
 17367  14C5  3000               	movlw	0
 17368  14C6  3FC2               	movwi [2]fsr1
 17369  14C7  3000               	movlw	0
 17370  14C8  3FC3               	movwi [3]fsr1
 17371                           
 17372                           ;main.c: 115:  }
 17373  14C9  3001               	movlw	1
 17374  14CA  00A8               	movwf	??_initGlobalData
 17375  14CB  0828               	movf	??_initGlobalData,w
 17376  14CC  07AE               	addwf	initGlobalData@n,f
 17377  14CD  3004               	movlw	4
 17378  14CE  022E               	subwf	initGlobalData@n,w
 17379  14CF  1803               	btfsc	3,0
 17380  14D0  0008               	return
 17381  14D1  2BDD               	goto	l9016
 17382  14D2                     __end_of_initGlobalData:	
 17383                           
 17384                           	psect	text56
 17385  2AC1                     __ptext56:	
 17386 ;; *************** function ___wmul *****************
 17387 ;; Defined at:
 17388 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul16.c"
 17389 ;; Parameters:    Size  Location     Type
 17390 ;;  multiplier      2    0[BANK0 ] unsigned int 
 17391 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 17392 ;; Auto vars:     Size  Location     Type
 17393 ;;  product         2    4[BANK0 ] unsigned int 
 17394 ;; Return value:  Size  Location     Type
 17395 ;;                  2    0[BANK0 ] unsigned int 
 17396 ;; Registers used:
 17397 ;;		wreg, status,2, status,0
 17398 ;; Tracked objects:
 17399 ;;		On entry : 0/0
 17400 ;;		On exit  : 0/0
 17401 ;;		Unchanged: 0/0
 17402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17403 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17404 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17405 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17406 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17407 ;;Total ram usage:        6 bytes
 17408 ;; Hardware stack levels used:    1
 17409 ;; Hardware stack levels required when called:    3
 17410 ;; This function calls:
 17411 ;;		Nothing
 17412 ;; This function is called by:
 17413 ;;		_initGlobalData
 17414 ;;		_channelView
 17415 ;;		_channelSetup
 17416 ;;		_setOutputPower
 17417 ;;		_setLensDia
 17418 ;;		_getStateFunc
 17419 ;;		_getNextState
 17420 ;;		_returnToPage
 17421 ;;		_atoi
 17422 ;; This function uses a non-reentrant model
 17423 ;;
 17424                           
 17425                           
 17426                           ;psect for function ___wmul
 17427  2AC1                     ___wmul:	
 17428                           
 17429                           ;incstack = 0
 17430                           ; Regs used in ___wmul: [wreg+status,2+status,0]
 17431  2AC1  0140               	movlb	0	; select bank0
 17432  2AC2  01A4               	clrf	___wmul@product
 17433  2AC3  01A5               	clrf	___wmul@product+1
 17434  2AC4                     l7204:	
 17435  2AC4  1C20               	btfss	___wmul@multiplier,0
 17436  2AC5  2ACA               	goto	l939
 17437  2AC6  0822               	movf	___wmul@multiplicand,w
 17438  2AC7  07A4               	addwf	___wmul@product,f
 17439  2AC8  0823               	movf	___wmul@multiplicand+1,w
 17440  2AC9  3DA5               	addwfc	___wmul@product+1,f
 17441  2ACA                     l939:	
 17442  2ACA  3001               	movlw	1
 17443  2ACB                     u9515:	
 17444  2ACB  35A2               	lslf	___wmul@multiplicand,f
 17445  2ACC  0DA3               	rlf	___wmul@multiplicand+1,f
 17446  2ACD  0B89               	decfsz	9,f
 17447  2ACE  2ACB               	goto	u9515
 17448  2ACF  3001               	movlw	1
 17449  2AD0                     u9525:	
 17450  2AD0  36A1               	lsrf	___wmul@multiplier+1,f
 17451  2AD1  0CA0               	rrf	___wmul@multiplier,f
 17452  2AD2  0B89               	decfsz	9,f
 17453  2AD3  2AD0               	goto	u9525
 17454  2AD4  0820               	movf	___wmul@multiplier,w
 17455  2AD5  0421               	iorwf	___wmul@multiplier+1,w
 17456  2AD6  1D03               	btfss	3,2
 17457  2AD7  2AC4               	goto	l7204
 17458  2AD8  0825               	movf	___wmul@product+1,w
 17459  2AD9  00A1               	movwf	?___wmul+1
 17460  2ADA  0824               	movf	___wmul@product,w
 17461  2ADB  00A0               	movwf	?___wmul
 17462  2ADC  0008               	return
 17463  2ADD                     __end_of___wmul:	
 17464                           
 17465                           	psect	text57
 17466  14D2                     __ptext57:	
 17467 ;; *************** function _convertAnalogValues *****************
 17468 ;; Defined at:
 17469 ;;		line 334 in file "main.c"
 17470 ;; Parameters:    Size  Location     Type
 17471 ;;  data            2   66[BANK0 ] PTR struct .
 17472 ;;		 -> data(157), 
 17473 ;; Auto vars:     Size  Location     Type
 17474 ;;  adc             2   72[BANK0 ] unsigned short 
 17475 ;; Return value:  Size  Location     Type
 17476 ;;                  1    wreg      void 
 17477 ;; Registers used:
 17478 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 17479 ;; Tracked objects:
 17480 ;;		On entry : 0/0
 17481 ;;		On exit  : 0/0
 17482 ;;		Unchanged: 0/0
 17483 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17484 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17485 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17487 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17488 ;;Total ram usage:        8 bytes
 17489 ;; Hardware stack levels used:    1
 17490 ;; Hardware stack levels required when called:    5
 17491 ;; This function calls:
 17492 ;;		___fladd
 17493 ;;		___fldiv
 17494 ;;		___flmul
 17495 ;;		___xxtofl
 17496 ;;		_adcGetConversion
 17497 ;;		_ema
 17498 ;; This function is called by:
 17499 ;;		_main
 17500 ;;		_systemCheck
 17501 ;; This function uses a non-reentrant model
 17502 ;;
 17503                           
 17504                           
 17505                           ;psect for function _convertAnalogValues
 17506  14D2                     _convertAnalogValues:	
 17507                           
 17508                           ;main.c: 334: void convertAnalogValues(t_globalData *data);main.c: 335: {;main.c: 336:  
      +                          static uint16_t avgT, avgV, avgI;;main.c: 337:  uint16_t adc;;main.c: 339:  adc = adcGet
      +                          Conversion(0b000110);
 17509                           
 17510                           ;incstack = 0
 17511                           ; Regs used in _convertAnalogValues: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
 17512  14D2  3006               	movlw	6
 17513  14D3  31AA  22DD  3194   	fcall	_adcGetConversion
 17514  14D6  0140               	movlb	0	; select bank0
 17515  14D7  0821               	movf	?_adcGetConversion+1,w
 17516  14D8  00E9               	movwf	convertAnalogValues@adc+1
 17517  14D9  0820               	movf	?_adcGetConversion,w
 17518  14DA  00E8               	movwf	convertAnalogValues@adc
 17519                           
 17520                           ;main.c: 340:  avgT = ema(adc, avgT, ( (uint32_t)(0.65 * 65535) ));
 17521  14DB  0869               	movf	convertAnalogValues@adc+1,w
 17522  14DC  00AD               	movwf	ema@in+1
 17523  14DD  0868               	movf	convertAnalogValues@adc,w
 17524  14DE  00AC               	movwf	ema@in
 17525  14DF  0143               	movlb	3	; select bank3
 17526  14E0  0839               	movf	(convertAnalogValues@avgT+1)^(0+384),w
 17527  14E1  0140               	movlb	0	; select bank0
 17528  14E2  00AF               	movwf	ema@average+1
 17529  14E3  0143               	movlb	3	; select bank3
 17530  14E4  0838               	movf	convertAnalogValues@avgT^(0+384),w
 17531  14E5  0140               	movlb	0	; select bank0
 17532  14E6  00AE               	movwf	ema@average
 17533  14E7  3000               	movlw	0
 17534  14E8  00B3               	movwf	ema@alpha+3
 17535  14E9  3000               	movlw	0
 17536  14EA  00B2               	movwf	ema@alpha+2
 17537  14EB  30A6               	movlw	166
 17538  14EC  00B1               	movwf	ema@alpha+1
 17539  14ED  3065               	movlw	101
 17540  14EE  00B0               	movwf	ema@alpha
 17541  14EF  31A2  2284  3194   	fcall	_ema
 17542  14F2  0140               	movlb	0	; select bank0
 17543  14F3  082D               	movf	?_ema+1,w
 17544  14F4  0143               	movlb	3	; select bank3
 17545  14F5  00B9               	movwf	(convertAnalogValues@avgT+1)^(0+384)
 17546  14F6  0140               	movlb	0	; select bank0
 17547  14F7  082C               	movf	?_ema,w
 17548  14F8  0143               	movlb	3	; select bank3
 17549  14F9  00B8               	movwf	convertAnalogValues@avgT^(0+384)
 17550                           
 17551                           ;main.c: 341:  adc = adcGetConversion(0b010000);
 17552  14FA  3010               	movlw	16
 17553  14FB  31AA  22DD  3194   	fcall	_adcGetConversion
 17554  14FE  0140               	movlb	0	; select bank0
 17555  14FF  0821               	movf	?_adcGetConversion+1,w
 17556  1500  00E9               	movwf	convertAnalogValues@adc+1
 17557  1501  0820               	movf	?_adcGetConversion,w
 17558  1502  00E8               	movwf	convertAnalogValues@adc
 17559                           
 17560                           ;main.c: 342:  avgV = ema(adc, avgV, ( (uint32_t)(0.65 * 65535) ));
 17561  1503  0869               	movf	convertAnalogValues@adc+1,w
 17562  1504  00AD               	movwf	ema@in+1
 17563  1505  0868               	movf	convertAnalogValues@adc,w
 17564  1506  00AC               	movwf	ema@in
 17565  1507  0143               	movlb	3	; select bank3
 17566  1508  0837               	movf	(convertAnalogValues@avgV+1)^(0+384),w
 17567  1509  0140               	movlb	0	; select bank0
 17568  150A  00AF               	movwf	ema@average+1
 17569  150B  0143               	movlb	3	; select bank3
 17570  150C  0836               	movf	convertAnalogValues@avgV^(0+384),w
 17571  150D  0140               	movlb	0	; select bank0
 17572  150E  00AE               	movwf	ema@average
 17573  150F  3000               	movlw	0
 17574  1510  00B3               	movwf	ema@alpha+3
 17575  1511  3000               	movlw	0
 17576  1512  00B2               	movwf	ema@alpha+2
 17577  1513  30A6               	movlw	166
 17578  1514  00B1               	movwf	ema@alpha+1
 17579  1515  3065               	movlw	101
 17580  1516  00B0               	movwf	ema@alpha
 17581  1517  31A2  2284  3194   	fcall	_ema
 17582  151A  0140               	movlb	0	; select bank0
 17583  151B  082D               	movf	?_ema+1,w
 17584  151C  0143               	movlb	3	; select bank3
 17585  151D  00B7               	movwf	(convertAnalogValues@avgV+1)^(0+384)
 17586  151E  0140               	movlb	0	; select bank0
 17587  151F  082C               	movf	?_ema,w
 17588  1520  0143               	movlb	3	; select bank3
 17589  1521  00B6               	movwf	convertAnalogValues@avgV^(0+384)
 17590                           
 17591                           ;main.c: 343:  adc = adcGetConversion(0b010001);
 17592  1522  3011               	movlw	17
 17593  1523  31AA  22DD  3194   	fcall	_adcGetConversion
 17594  1526  0140               	movlb	0	; select bank0
 17595  1527  0821               	movf	?_adcGetConversion+1,w
 17596  1528  00E9               	movwf	convertAnalogValues@adc+1
 17597  1529  0820               	movf	?_adcGetConversion,w
 17598  152A  00E8               	movwf	convertAnalogValues@adc
 17599                           
 17600                           ;main.c: 344:  avgI = ema(adc, avgI, ( (uint32_t)(0.65 * 65535) ));
 17601  152B  0869               	movf	convertAnalogValues@adc+1,w
 17602  152C  00AD               	movwf	ema@in+1
 17603  152D  0868               	movf	convertAnalogValues@adc,w
 17604  152E  00AC               	movwf	ema@in
 17605  152F  0143               	movlb	3	; select bank3
 17606  1530  0835               	movf	(convertAnalogValues@avgI+1)^(0+384),w
 17607  1531  0140               	movlb	0	; select bank0
 17608  1532  00AF               	movwf	ema@average+1
 17609  1533  0143               	movlb	3	; select bank3
 17610  1534  0834               	movf	convertAnalogValues@avgI^(0+384),w
 17611  1535  0140               	movlb	0	; select bank0
 17612  1536  00AE               	movwf	ema@average
 17613  1537  3000               	movlw	0
 17614  1538  00B3               	movwf	ema@alpha+3
 17615  1539  3000               	movlw	0
 17616  153A  00B2               	movwf	ema@alpha+2
 17617  153B  30A6               	movlw	166
 17618  153C  00B1               	movwf	ema@alpha+1
 17619  153D  3065               	movlw	101
 17620  153E  00B0               	movwf	ema@alpha
 17621  153F  31A2  2284  3194   	fcall	_ema
 17622  1542  0140               	movlb	0	; select bank0
 17623  1543  082D               	movf	?_ema+1,w
 17624  1544  0143               	movlb	3	; select bank3
 17625  1545  00B5               	movwf	(convertAnalogValues@avgI+1)^(0+384)
 17626  1546  0140               	movlb	0	; select bank0
 17627  1547  082C               	movf	?_ema,w
 17628  1548  0143               	movlb	3	; select bank3
 17629  1549  00B4               	movwf	convertAnalogValues@avgI^(0+384)
 17630                           
 17631                           ;main.c: 345:  data->tempAux = (avgT * 0.1191) - 34.512;
 17632  154A  30C2               	movlw	194
 17633  154B  0140               	movlb	0	; select bank0
 17634  154C  00CB               	movwf	___fladd@b+3
 17635  154D  300A               	movlw	10
 17636  154E  00CA               	movwf	___fladd@b+2
 17637  154F  300C               	movlw	12
 17638  1550  00C9               	movwf	___fladd@b+1
 17639  1551  304A               	movlw	74
 17640  1552  00C8               	movwf	___fladd@b
 17641  1553  303D               	movlw	61
 17642  1554  00B1               	movwf	___flmul@b+3
 17643  1555  30F3               	movlw	243
 17644  1556  00B0               	movwf	___flmul@b+2
 17645  1557  30EA               	movlw	234
 17646  1558  00AF               	movwf	___flmul@b+1
 17647  1559  30B3               	movlw	179
 17648  155A  00AE               	movwf	___flmul@b
 17649  155B  0143               	movlb	3	; select bank3
 17650  155C  0838               	movf	convertAnalogValues@avgT^(0+384),w
 17651  155D  0140               	movlb	0	; select bank0
 17652  155E  00A0               	movwf	___xxtofl@val
 17653  155F  0143               	movlb	3	; select bank3
 17654  1560  0839               	movf	(convertAnalogValues@avgT+1)^(0+384),w
 17655  1561  0140               	movlb	0	; select bank0
 17656  1562  00A1               	movwf	___xxtofl@val+1
 17657  1563  01A2               	clrf	___xxtofl@val+2
 17658  1564  01A3               	clrf	___xxtofl@val+3
 17659  1565  3000               	movlw	0
 17660  1566  31A5  257D  3194   	fcall	___xxtofl
 17661  1569  0140               	movlb	0	; select bank0
 17662  156A  0823               	movf	?___xxtofl+3,w
 17663  156B  00B5               	movwf	___flmul@a+3
 17664  156C  0822               	movf	?___xxtofl+2,w
 17665  156D  00B4               	movwf	___flmul@a+2
 17666  156E  0821               	movf	?___xxtofl+1,w
 17667  156F  00B3               	movwf	___flmul@a+1
 17668  1570  0820               	movf	?___xxtofl,w
 17669  1571  00B2               	movwf	___flmul@a
 17670  1572  318A  2227  3194   	fcall	___flmul
 17671  1575  0140               	movlb	0	; select bank0
 17672  1576  0831               	movf	?___flmul+3,w
 17673  1577  00CF               	movwf	___fladd@a+3
 17674  1578  0830               	movf	?___flmul+2,w
 17675  1579  00CE               	movwf	___fladd@a+2
 17676  157A  082F               	movf	?___flmul+1,w
 17677  157B  00CD               	movwf	___fladd@a+1
 17678  157C  082E               	movf	?___flmul,w
 17679  157D  00CC               	movwf	___fladd@a
 17680  157E  3188  2045  3194   	fcall	___fladd
 17681  1581  0140               	movlb	0	; select bank0
 17682  1582  0862               	movf	convertAnalogValues@data,w
 17683  1583  0086               	movwf	6
 17684  1584  0863               	movf	convertAnalogValues@data+1,w
 17685  1585  0087               	movwf	7
 17686  1586  3150               	addfsr 1,16
 17687  1587  0848               	movf	?___fladd,w
 17688  1588  3FC0               	movwi [0]fsr1
 17689  1589  0849               	movf	?___fladd+1,w
 17690  158A  3FC1               	movwi [1]fsr1
 17691  158B  084A               	movf	?___fladd+2,w
 17692  158C  3FC2               	movwi [2]fsr1
 17693  158D  084B               	movf	?___fladd+3,w
 17694  158E  3FC3               	movwi [3]fsr1
 17695                           
 17696                           ;main.c: 346:  data->voltage = ((float)avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0);
 17697  158F  3040               	movlw	64
 17698  1590  00B1               	movwf	___flmul@b+3
 17699  1591  30A0               	movlw	160
 17700  1592  00B0               	movwf	___flmul@b+2
 17701  1593  3000               	movlw	0
 17702  1594  00AF               	movwf	___flmul@b+1
 17703  1595  3000               	movlw	0
 17704  1596  00AE               	movwf	___flmul@b
 17705  1597  0143               	movlb	3	; select bank3
 17706  1598  0836               	movf	convertAnalogValues@avgV^(0+384),w
 17707  1599  0140               	movlb	0	; select bank0
 17708  159A  00A0               	movwf	___xxtofl@val
 17709  159B  0143               	movlb	3	; select bank3
 17710  159C  0837               	movf	(convertAnalogValues@avgV+1)^(0+384),w
 17711  159D  0140               	movlb	0	; select bank0
 17712  159E  00A1               	movwf	___xxtofl@val+1
 17713  159F  01A2               	clrf	___xxtofl@val+2
 17714  15A0  01A3               	clrf	___xxtofl@val+3
 17715  15A1  3000               	movlw	0
 17716  15A2  31A5  257D  3194   	fcall	___xxtofl
 17717  15A5  0140               	movlb	0	; select bank0
 17718  15A6  0823               	movf	?___xxtofl+3,w
 17719  15A7  00B5               	movwf	___flmul@a+3
 17720  15A8  0822               	movf	?___xxtofl+2,w
 17721  15A9  00B4               	movwf	___flmul@a+2
 17722  15AA  0821               	movf	?___xxtofl+1,w
 17723  15AB  00B3               	movwf	___flmul@a+1
 17724  15AC  0820               	movf	?___xxtofl,w
 17725  15AD  00B2               	movwf	___flmul@a
 17726  15AE  318A  2227  3194   	fcall	___flmul
 17727  15B1  0140               	movlb	0	; select bank0
 17728  15B2  0831               	movf	?___flmul+3,w
 17729  15B3  00E7               	movwf	_convertAnalogValues$2424+3
 17730  15B4  0830               	movf	?___flmul+2,w
 17731  15B5  00E6               	movwf	_convertAnalogValues$2424+2
 17732  15B6  082F               	movf	?___flmul+1,w
 17733  15B7  00E5               	movwf	_convertAnalogValues$2424+1
 17734  15B8  082E               	movf	?___flmul,w
 17735  15B9  00E4               	movwf	_convertAnalogValues$2424
 17736                           
 17737                           ;main.c: 346:  data->voltage = ((float)avgV * 5.0 * (150.0 + 47.0)) / (1023.0 * 47.0);
 17738  15BA  3047               	movlw	71
 17739  15BB  00CB               	movwf	___fldiv@a+3
 17740  15BC  303B               	movlw	59
 17741  15BD  00CA               	movwf	___fldiv@a+2
 17742  15BE  30D1               	movlw	209
 17743  15BF  00C9               	movwf	___fldiv@a+1
 17744  15C0  3000               	movlw	0
 17745  15C1  00C8               	movwf	___fldiv@a
 17746  15C2  3043               	movlw	67
 17747  15C3  00B1               	movwf	___flmul@b+3
 17748  15C4  3045               	movlw	69
 17749  15C5  00B0               	movwf	___flmul@b+2
 17750  15C6  3000               	movlw	0
 17751  15C7  00AF               	movwf	___flmul@b+1
 17752  15C8  3000               	movlw	0
 17753  15C9  00AE               	movwf	___flmul@b
 17754  15CA  0867               	movf	_convertAnalogValues$2424+3,w
 17755  15CB  00B5               	movwf	___flmul@a+3
 17756  15CC  0866               	movf	_convertAnalogValues$2424+2,w
 17757  15CD  00B4               	movwf	___flmul@a+2
 17758  15CE  0865               	movf	_convertAnalogValues$2424+1,w
 17759  15CF  00B3               	movwf	___flmul@a+1
 17760  15D0  0864               	movf	_convertAnalogValues$2424,w
 17761  15D1  00B2               	movwf	___flmul@a
 17762  15D2  318A  2227  3194   	fcall	___flmul
 17763  15D5  0140               	movlb	0	; select bank0
 17764  15D6  0831               	movf	?___flmul+3,w
 17765  15D7  00CF               	movwf	___fldiv@b+3
 17766  15D8  0830               	movf	?___flmul+2,w
 17767  15D9  00CE               	movwf	___fldiv@b+2
 17768  15DA  082F               	movf	?___flmul+1,w
 17769  15DB  00CD               	movwf	___fldiv@b+1
 17770  15DC  082E               	movf	?___flmul,w
 17771  15DD  00CC               	movwf	___fldiv@b
 17772  15DE  3191  21D0  3194   	fcall	___fldiv
 17773  15E1  0140               	movlb	0	; select bank0
 17774  15E2  0862               	movf	convertAnalogValues@data,w
 17775  15E3  0086               	movwf	6
 17776  15E4  0863               	movf	convertAnalogValues@data+1,w
 17777  15E5  0087               	movwf	7
 17778  15E6  3154               	addfsr 1,20
 17779  15E7  0848               	movf	?___fldiv,w
 17780  15E8  3FC0               	movwi [0]fsr1
 17781  15E9  0849               	movf	?___fldiv+1,w
 17782  15EA  3FC1               	movwi [1]fsr1
 17783  15EB  084A               	movf	?___fldiv+2,w
 17784  15EC  3FC2               	movwi [2]fsr1
 17785  15ED  084B               	movf	?___fldiv+3,w
 17786  15EE  3FC3               	movwi [3]fsr1
 17787                           
 17788                           ;main.c: 347:  data->current = (avgI * 5.0) / (1023.0 * 0.05 * 50.0);
 17789  15EF  3045               	movlw	69
 17790  15F0  00CB               	movwf	___fldiv@a+3
 17791  15F1  301F               	movlw	31
 17792  15F2  00CA               	movwf	___fldiv@a+2
 17793  15F3  30D8               	movlw	216
 17794  15F4  00C9               	movwf	___fldiv@a+1
 17795  15F5  3000               	movlw	0
 17796  15F6  00C8               	movwf	___fldiv@a
 17797  15F7  3040               	movlw	64
 17798  15F8  00B1               	movwf	___flmul@b+3
 17799  15F9  30A0               	movlw	160
 17800  15FA  00B0               	movwf	___flmul@b+2
 17801  15FB  3000               	movlw	0
 17802  15FC  00AF               	movwf	___flmul@b+1
 17803  15FD  3000               	movlw	0
 17804  15FE  00AE               	movwf	___flmul@b
 17805  15FF  0143               	movlb	3	; select bank3
 17806  1600  0834               	movf	convertAnalogValues@avgI^(0+384),w
 17807  1601  0140               	movlb	0	; select bank0
 17808  1602  00A0               	movwf	___xxtofl@val
 17809  1603  0143               	movlb	3	; select bank3
 17810  1604  0835               	movf	(convertAnalogValues@avgI+1)^(0+384),w
 17811  1605  0140               	movlb	0	; select bank0
 17812  1606  00A1               	movwf	___xxtofl@val+1
 17813  1607  01A2               	clrf	___xxtofl@val+2
 17814  1608  01A3               	clrf	___xxtofl@val+3
 17815  1609  3000               	movlw	0
 17816  160A  31A5  257D  3194   	fcall	___xxtofl
 17817  160D  0140               	movlb	0	; select bank0
 17818  160E  0823               	movf	?___xxtofl+3,w
 17819  160F  00B5               	movwf	___flmul@a+3
 17820  1610  0822               	movf	?___xxtofl+2,w
 17821  1611  00B4               	movwf	___flmul@a+2
 17822  1612  0821               	movf	?___xxtofl+1,w
 17823  1613  00B3               	movwf	___flmul@a+1
 17824  1614  0820               	movf	?___xxtofl,w
 17825  1615  00B2               	movwf	___flmul@a
 17826  1616  318A  2227  3194   	fcall	___flmul
 17827  1619  0140               	movlb	0	; select bank0
 17828  161A  0831               	movf	?___flmul+3,w
 17829  161B  00CF               	movwf	___fldiv@b+3
 17830  161C  0830               	movf	?___flmul+2,w
 17831  161D  00CE               	movwf	___fldiv@b+2
 17832  161E  082F               	movf	?___flmul+1,w
 17833  161F  00CD               	movwf	___fldiv@b+1
 17834  1620  082E               	movf	?___flmul,w
 17835  1621  00CC               	movwf	___fldiv@b
 17836  1622  3191  21D0  3194   	fcall	___fldiv
 17837  1625  0140               	movlb	0	; select bank0
 17838  1626  0862               	movf	convertAnalogValues@data,w
 17839  1627  0086               	movwf	6
 17840  1628  0863               	movf	convertAnalogValues@data+1,w
 17841  1629  0087               	movwf	7
 17842  162A  3158               	addfsr 1,24
 17843  162B  0848               	movf	?___fldiv,w
 17844  162C  3FC0               	movwi [0]fsr1
 17845  162D  0849               	movf	?___fldiv+1,w
 17846  162E  3FC1               	movwi [1]fsr1
 17847  162F  084A               	movf	?___fldiv+2,w
 17848  1630  3FC2               	movwi [2]fsr1
 17849  1631  084B               	movf	?___fldiv+3,w
 17850  1632  3FC3               	movwi [3]fsr1
 17851                           
 17852                           ;main.c: 348:  data->power = data->voltage * data->current;
 17853  1633  0862               	movf	convertAnalogValues@data,w
 17854  1634  0086               	movwf	6
 17855  1635  0863               	movf	convertAnalogValues@data+1,w
 17856  1636  0087               	movwf	7
 17857  1637  3158               	addfsr 1,24
 17858  1638  3F40               	moviw [0]fsr1
 17859  1639  00AE               	movwf	___flmul@b
 17860  163A  3F41               	moviw [1]fsr1
 17861  163B  00AF               	movwf	___flmul@b+1
 17862  163C  3F42               	moviw [2]fsr1
 17863  163D  00B0               	movwf	___flmul@b+2
 17864  163E  3F43               	moviw [3]fsr1
 17865  163F  00B1               	movwf	___flmul@b+3
 17866  1640  0862               	movf	convertAnalogValues@data,w
 17867  1641  0086               	movwf	6
 17868  1642  0863               	movf	convertAnalogValues@data+1,w
 17869  1643  0087               	movwf	7
 17870  1644  3154               	addfsr 1,20
 17871  1645  3F40               	moviw [0]fsr1
 17872  1646  00B2               	movwf	___flmul@a
 17873  1647  3F41               	moviw [1]fsr1
 17874  1648  00B3               	movwf	___flmul@a+1
 17875  1649  3F42               	moviw [2]fsr1
 17876  164A  00B4               	movwf	___flmul@a+2
 17877  164B  3F43               	moviw [3]fsr1
 17878  164C  00B5               	movwf	___flmul@a+3
 17879  164D  318A  2227         	fcall	___flmul
 17880  164F  0140               	movlb	0	; select bank0
 17881  1650  0862               	movf	convertAnalogValues@data,w
 17882  1651  0086               	movwf	6
 17883  1652  0863               	movf	convertAnalogValues@data+1,w
 17884  1653  0087               	movwf	7
 17885  1654  315C               	addfsr 1,28
 17886  1655  082E               	movf	?___flmul,w
 17887  1656  3FC0               	movwi [0]fsr1
 17888  1657  082F               	movf	?___flmul+1,w
 17889  1658  3FC1               	movwi [1]fsr1
 17890  1659  0830               	movf	?___flmul+2,w
 17891  165A  3FC2               	movwi [2]fsr1
 17892  165B  0831               	movf	?___flmul+3,w
 17893  165C  3FC3               	movwi [3]fsr1
 17894  165D  0008               	return
 17895  165E                     __end_of_convertAnalogValues:	
 17896                           
 17897                           	psect	text58
 17898  2284                     __ptext58:	
 17899 ;; *************** function _ema *****************
 17900 ;; Defined at:
 17901 ;;		line 256 in file "main.c"
 17902 ;; Parameters:    Size  Location     Type
 17903 ;;  in              2   12[BANK0 ] unsigned short 
 17904 ;;  average         2   14[BANK0 ] unsigned short 
 17905 ;;  alpha           4   16[BANK0 ] unsigned long 
 17906 ;; Auto vars:     Size  Location     Type
 17907 ;;  tmp0            4   28[BANK0 ] unsigned long 
 17908 ;; Return value:  Size  Location     Type
 17909 ;;                  2   12[BANK0 ] unsigned short 
 17910 ;; Registers used:
 17911 ;;		wreg, status,2, status,0, pclath, cstack
 17912 ;; Tracked objects:
 17913 ;;		On entry : 0/0
 17914 ;;		On exit  : 0/0
 17915 ;;		Unchanged: 0/0
 17916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 17917 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17918 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17919 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17920 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 17921 ;;Total ram usage:       20 bytes
 17922 ;; Hardware stack levels used:    1
 17923 ;; Hardware stack levels required when called:    4
 17924 ;; This function calls:
 17925 ;;		___lmul
 17926 ;; This function is called by:
 17927 ;;		_convertAnalogValues
 17928 ;;		_getAvgChannelCurrents
 17929 ;; This function uses a non-reentrant model
 17930 ;;
 17931                           
 17932                           
 17933                           ;psect for function _ema
 17934  2284                     _ema:	
 17935                           
 17936                           ;main.c: 256: uint16_t ema(uint16_t in, uint16_t average, uint32_t alpha);main.c: 257: {
      +                          ;main.c: 258:   uint32_t tmp0;;main.c: 259:   tmp0 = in * alpha + average * (65536 - alp
      +                          ha);
 17937                           
 17938                           ;incstack = 0
 17939                           ; Regs used in _ema: [wreg+status,2+status,0+pclath+cstack]
 17940  2284  0140               	movlb	0	; select bank0
 17941  2285  082E               	movf	ema@average,w
 17942  2286  00A0               	movwf	___lmul@multiplier
 17943  2287  082F               	movf	ema@average+1,w
 17944  2288  00A1               	movwf	___lmul@multiplier+1
 17945  2289  01A2               	clrf	___lmul@multiplier+2
 17946  228A  01A3               	clrf	___lmul@multiplier+3
 17947  228B  3000               	movlw	0
 17948  228C  00B4               	movwf	??_ema
 17949  228D  3000               	movlw	0
 17950  228E  00B5               	movwf	??_ema+1
 17951  228F  3001               	movlw	1
 17952  2290  00B6               	movwf	??_ema+2
 17953  2291  3000               	movlw	0
 17954  2292  00B7               	movwf	??_ema+3
 17955  2293  0830               	movf	ema@alpha,w
 17956  2294  02B4               	subwf	??_ema,f
 17957  2295  0831               	movf	ema@alpha+1,w
 17958  2296  3BB5               	subwfb	??_ema+1,f
 17959  2297  0832               	movf	ema@alpha+2,w
 17960  2298  3BB6               	subwfb	??_ema+2,f
 17961  2299  0833               	movf	ema@alpha+3,w
 17962  229A  3BB7               	subwfb	??_ema+3,f
 17963  229B  0837               	movf	??_ema+3,w
 17964  229C  00A7               	movwf	___lmul@multiplicand+3
 17965  229D  0836               	movf	??_ema+2,w
 17966  229E  00A6               	movwf	___lmul@multiplicand+2
 17967  229F  0835               	movf	??_ema+1,w
 17968  22A0  00A5               	movwf	___lmul@multiplicand+1
 17969  22A1  0834               	movf	??_ema,w
 17970  22A2  00A4               	movwf	___lmul@multiplicand
 17971  22A3  31AC  248F  31A2   	fcall	___lmul
 17972  22A6  0140               	movlb	0	; select bank0
 17973  22A7  0820               	movf	?___lmul,w
 17974  22A8  00B8               	movwf	??_ema+4
 17975  22A9  0821               	movf	?___lmul+1,w
 17976  22AA  00B9               	movwf	??_ema+5
 17977  22AB  0822               	movf	?___lmul+2,w
 17978  22AC  00BA               	movwf	??_ema+6
 17979  22AD  0823               	movf	?___lmul+3,w
 17980  22AE  00BB               	movwf	??_ema+7
 17981  22AF  082C               	movf	ema@in,w
 17982  22B0  00A0               	movwf	___lmul@multiplier
 17983  22B1  082D               	movf	ema@in+1,w
 17984  22B2  00A1               	movwf	___lmul@multiplier+1
 17985  22B3  01A2               	clrf	___lmul@multiplier+2
 17986  22B4  01A3               	clrf	___lmul@multiplier+3
 17987  22B5  0833               	movf	ema@alpha+3,w
 17988  22B6  00A7               	movwf	___lmul@multiplicand+3
 17989  22B7  0832               	movf	ema@alpha+2,w
 17990  22B8  00A6               	movwf	___lmul@multiplicand+2
 17991  22B9  0831               	movf	ema@alpha+1,w
 17992  22BA  00A5               	movwf	___lmul@multiplicand+1
 17993  22BB  0830               	movf	ema@alpha,w
 17994  22BC  00A4               	movwf	___lmul@multiplicand
 17995  22BD  31AC  248F  31A2   	fcall	___lmul
 17996  22C0  0140               	movlb	0	; select bank0
 17997  22C1  0820               	movf	?___lmul,w
 17998  22C2  07B8               	addwf	??_ema+4,f
 17999  22C3  0821               	movf	?___lmul+1,w
 18000  22C4  3DB9               	addwfc	??_ema+5,f
 18001  22C5  0822               	movf	?___lmul+2,w
 18002  22C6  3DBA               	addwfc	??_ema+6,f
 18003  22C7  0823               	movf	?___lmul+3,w
 18004  22C8  3DBB               	addwfc	??_ema+7,f
 18005  22C9  083B               	movf	??_ema+7,w
 18006  22CA  00BF               	movwf	ema@tmp0+3
 18007  22CB  083A               	movf	??_ema+6,w
 18008  22CC  00BE               	movwf	ema@tmp0+2
 18009  22CD  0839               	movf	??_ema+5,w
 18010  22CE  00BD               	movwf	ema@tmp0+1
 18011  22CF  0838               	movf	??_ema+4,w
 18012  22D0  00BC               	movwf	ema@tmp0
 18013                           
 18014                           ;main.c: 260:   return (tmp0 + 32768) / 65536;
 18015  22D1  3000               	movlw	0
 18016  22D2  00B4               	movwf	??_ema
 18017  22D3  3080               	movlw	128
 18018  22D4  00B5               	movwf	??_ema+1
 18019  22D5  3000               	movlw	0
 18020  22D6  00B6               	movwf	??_ema+2
 18021  22D7  3000               	movlw	0
 18022  22D8  00B7               	movwf	??_ema+3
 18023  22D9  083C               	movf	ema@tmp0,w
 18024  22DA  07B4               	addwf	??_ema,f
 18025  22DB  083D               	movf	ema@tmp0+1,w
 18026  22DC  3DB5               	addwfc	??_ema+1,f
 18027  22DD  083E               	movf	ema@tmp0+2,w
 18028  22DE  3DB6               	addwfc	??_ema+2,f
 18029  22DF  083F               	movf	ema@tmp0+3,w
 18030  22E0  3DB7               	addwfc	??_ema+3,f
 18031  22E1  3010               	movlw	16
 18032  22E2                     u12045:	
 18033  22E2  36B7               	lsrf	??_ema+3,f
 18034  22E3  0CB6               	rrf	??_ema+2,f
 18035  22E4  0CB5               	rrf	??_ema+1,f
 18036  22E5  0CB4               	rrf	??_ema,f
 18037  22E6  0B89               	decfsz	9,f
 18038  22E7  2AE2               	goto	u12045
 18039  22E8  0835               	movf	??_ema+1,w
 18040  22E9  00AD               	movwf	?_ema+1
 18041  22EA  0834               	movf	??_ema,w
 18042  22EB  00AC               	movwf	?_ema
 18043  22EC  0008               	return
 18044  22ED                     __end_of_ema:	
 18045                           
 18046                           	psect	text59
 18047  2C8F                     __ptext59:	
 18048 ;; *************** function ___lmul *****************
 18049 ;; Defined at:
 18050 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul32.c"
 18051 ;; Parameters:    Size  Location     Type
 18052 ;;  multiplier      4    0[BANK0 ] unsigned long 
 18053 ;;  multiplicand    4    4[BANK0 ] unsigned long 
 18054 ;; Auto vars:     Size  Location     Type
 18055 ;;  product         4    8[BANK0 ] unsigned long 
 18056 ;; Return value:  Size  Location     Type
 18057 ;;                  4    0[BANK0 ] unsigned long 
 18058 ;; Registers used:
 18059 ;;		wreg, status,2, status,0
 18060 ;; Tracked objects:
 18061 ;;		On entry : 0/0
 18062 ;;		On exit  : 0/0
 18063 ;;		Unchanged: 0/0
 18064 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18065 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18066 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18068 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18069 ;;Total ram usage:       12 bytes
 18070 ;; Hardware stack levels used:    1
 18071 ;; Hardware stack levels required when called:    3
 18072 ;; This function calls:
 18073 ;;		Nothing
 18074 ;; This function is called by:
 18075 ;;		_ema
 18076 ;; This function uses a non-reentrant model
 18077 ;;
 18078                           
 18079                           
 18080                           ;psect for function ___lmul
 18081  2C8F                     ___lmul:	
 18082                           
 18083                           ;incstack = 0
 18084                           ; Regs used in ___lmul: [wreg+status,2+status,0]
 18085  2C8F  3000               	movlw	0
 18086  2C90  0140               	movlb	0	; select bank0
 18087  2C91  00AB               	movwf	___lmul@product+3
 18088  2C92  3000               	movlw	0
 18089  2C93  00AA               	movwf	___lmul@product+2
 18090  2C94  3000               	movlw	0
 18091  2C95  00A9               	movwf	___lmul@product+1
 18092  2C96  3000               	movlw	0
 18093  2C97  00A8               	movwf	___lmul@product
 18094  2C98                     l8514:	
 18095  2C98  1C20               	btfss	___lmul@multiplier,0
 18096  2C99  2CA2               	goto	l8518
 18097  2C9A  0824               	movf	___lmul@multiplicand,w
 18098  2C9B  07A8               	addwf	___lmul@product,f
 18099  2C9C  0825               	movf	___lmul@multiplicand+1,w
 18100  2C9D  3DA9               	addwfc	___lmul@product+1,f
 18101  2C9E  0826               	movf	___lmul@multiplicand+2,w
 18102  2C9F  3DAA               	addwfc	___lmul@product+2,f
 18103  2CA0  0827               	movf	___lmul@multiplicand+3,w
 18104  2CA1  3DAB               	addwfc	___lmul@product+3,f
 18105  2CA2                     l8518:	
 18106  2CA2  3001               	movlw	1
 18107  2CA3                     u11995:	
 18108  2CA3  35A4               	lslf	___lmul@multiplicand,f
 18109  2CA4  0DA5               	rlf	___lmul@multiplicand+1,f
 18110  2CA5  0DA6               	rlf	___lmul@multiplicand+2,f
 18111  2CA6  0DA7               	rlf	___lmul@multiplicand+3,f
 18112  2CA7  0B89               	decfsz	9,f
 18113  2CA8  2CA3               	goto	u11995
 18114  2CA9  3001               	movlw	1
 18115  2CAA                     u12005:	
 18116  2CAA  36A3               	lsrf	___lmul@multiplier+3,f
 18117  2CAB  0CA2               	rrf	___lmul@multiplier+2,f
 18118  2CAC  0CA1               	rrf	___lmul@multiplier+1,f
 18119  2CAD  0CA0               	rrf	___lmul@multiplier,f
 18120  2CAE  0B89               	decfsz	9,f
 18121  2CAF  2CAA               	goto	u12005
 18122  2CB0  0823               	movf	___lmul@multiplier+3,w
 18123  2CB1  0422               	iorwf	___lmul@multiplier+2,w
 18124  2CB2  0421               	iorwf	___lmul@multiplier+1,w
 18125  2CB3  0420               	iorwf	___lmul@multiplier,w
 18126  2CB4  1D03               	skipz
 18127  2CB5  2C98               	goto	l8514
 18128  2CB6  082B               	movf	___lmul@product+3,w
 18129  2CB7  00A3               	movwf	?___lmul+3
 18130  2CB8  082A               	movf	___lmul@product+2,w
 18131  2CB9  00A2               	movwf	?___lmul+2
 18132  2CBA  0829               	movf	___lmul@product+1,w
 18133  2CBB  00A1               	movwf	?___lmul+1
 18134  2CBC  0828               	movf	___lmul@product,w
 18135  2CBD  00A0               	movwf	?___lmul
 18136  2CBE  0008               	return
 18137  2CBF                     __end_of___lmul:	
 18138                           
 18139                           	psect	text60
 18140  2ADD                     __ptext60:	
 18141 ;; *************** function _adcGetConversion *****************
 18142 ;; Defined at:
 18143 ;;		line 265 in file "main.c"
 18144 ;; Parameters:    Size  Location     Type
 18145 ;;  channel         1    wreg     unsigned char 
 18146 ;; Auto vars:     Size  Location     Type
 18147 ;;  channel         1    3[BANK0 ] unsigned char 
 18148 ;; Return value:  Size  Location     Type
 18149 ;;                  2    0[BANK0 ] unsigned short 
 18150 ;; Registers used:
 18151 ;;		wreg, status,2, status,0
 18152 ;; Tracked objects:
 18153 ;;		On entry : 0/0
 18154 ;;		On exit  : 0/0
 18155 ;;		Unchanged: 0/0
 18156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18157 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18158 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18159 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18160 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18161 ;;Total ram usage:        4 bytes
 18162 ;; Hardware stack levels used:    1
 18163 ;; Hardware stack levels required when called:    3
 18164 ;; This function calls:
 18165 ;;		Nothing
 18166 ;; This function is called by:
 18167 ;;		_convertAnalogValues
 18168 ;;		_getAvgChannelCurrents
 18169 ;; This function uses a non-reentrant model
 18170 ;;
 18171                           
 18172                           
 18173                           ;psect for function _adcGetConversion
 18174  2ADD                     _adcGetConversion:	
 18175                           
 18176                           ;incstack = 0
 18177                           ; Regs used in _adcGetConversion: [wreg+status,2+status,0]
 18178                           ;adcGetConversion@channel stored from wreg
 18179  2ADD  0140               	movlb	0	; select bank0
 18180  2ADE  00A3               	movwf	adcGetConversion@channel
 18181                           
 18182                           ;main.c: 265: uint16_t adcGetConversion(uint8_t channel);main.c: 266: {;main.c: 267:  AD
      +                          CON0bits.CHS = channel;
 18183  2ADF  0823               	movf	adcGetConversion@channel,w
 18184  2AE0  00A2               	movwf	??_adcGetConversion
 18185  2AE1  0DA2               	rlf	??_adcGetConversion,f
 18186  2AE2  0DA2               	rlf	??_adcGetConversion,f
 18187  2AE3  0141               	movlb	1	; select bank1
 18188  2AE4  081D               	movf	29,w	;volatile
 18189  2AE5  0140               	movlb	0	; select bank0
 18190  2AE6  0622               	xorwf	??_adcGetConversion,w
 18191  2AE7  3903               	andlw	-253
 18192  2AE8  0622               	xorwf	??_adcGetConversion,w
 18193  2AE9  0141               	movlb	1	; select bank1
 18194  2AEA  009D               	movwf	29	;volatile
 18195                           
 18196                           ;main.c: 268:  _delay((unsigned long)((5)*(4000000/4000000.0)));
 18197  2AEB  3200               	nop2	;2 cycle nop
 18198  2AEC  3200               	nop2	;2 cycle nop
 18199  2AED  0000               	nop
 18200                           
 18201                           ;main.c: 269:  ADCON0bits.GO = 1;
 18202  2AEE  0141               	movlb	1	; select bank1
 18203  2AEF  149D               	bsf	29,1	;volatile
 18204  2AF0                     l178:	
 18205                           ;main.c: 270:  while (ADCON0bits.GO);
 18206                           
 18207  2AF0  189D               	btfsc	29,1	;volatile
 18208  2AF1  2AF0               	goto	l178
 18209                           
 18210                           ;main.c: 271:  return (uint16_t)((ADRESH << 8) + ADRESL);
 18211  2AF2  081C               	movf	28,w	;volatile
 18212  2AF3  0140               	movlb	0	; select bank0
 18213  2AF4  00A1               	movwf	?_adcGetConversion+1
 18214  2AF5  0141               	movlb	1	; select bank1
 18215  2AF6  081B               	movf	27,w	;volatile
 18216  2AF7  0140               	movlb	0	; select bank0
 18217  2AF8  00A0               	movwf	?_adcGetConversion
 18218  2AF9  0008               	return
 18219  2AFA                     __end_of_adcGetConversion:	
 18220                           
 18221                           	psect	text61
 18222  0A27                     __ptext61:	
 18223 ;; *************** function ___flmul *****************
 18224 ;; Defined at:
 18225 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcmul.c"
 18226 ;; Parameters:    Size  Location     Type
 18227 ;;  b               4   14[BANK0 ] unsigned short 
 18228 ;;  a               4   18[BANK0 ] unsigned short 
 18229 ;; Auto vars:     Size  Location     Type
 18230 ;;  prod            4   34[BANK0 ] struct .
 18231 ;;  grs             4   29[BANK0 ] unsigned long 
 18232 ;;  temp            2   38[BANK0 ] struct .
 18233 ;;  bexp            1   33[BANK0 ] unsigned char 
 18234 ;;  aexp            1   28[BANK0 ] unsigned char 
 18235 ;;  sign            1   27[BANK0 ] unsigned char 
 18236 ;; Return value:  Size  Location     Type
 18237 ;;                  4   14[BANK0 ] unsigned char 
 18238 ;; Registers used:
 18239 ;;		wreg, status,2, status,0, pclath, cstack
 18240 ;; Tracked objects:
 18241 ;;		On entry : 0/0
 18242 ;;		On exit  : 0/0
 18243 ;;		Unchanged: 0/0
 18244 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18245 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18246 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18247 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18248 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18249 ;;Total ram usage:       26 bytes
 18250 ;; Hardware stack levels used:    1
 18251 ;; Hardware stack levels required when called:    4
 18252 ;; This function calls:
 18253 ;;		__Umul8_16
 18254 ;; This function is called by:
 18255 ;;		_convertAnalogValues
 18256 ;;		_efgtoa
 18257 ;;		_calcRequiredPower
 18258 ;;		_getAvgChannelCurrents
 18259 ;; This function uses a non-reentrant model
 18260 ;;
 18261                           
 18262                           
 18263                           ;psect for function ___flmul
 18264  0A27                     ___flmul:	
 18265                           
 18266                           ;incstack = 0
 18267                           ; Regs used in ___flmul: [wreg+status,2+status,0+pclath+cstack]
 18268  0A27  0140               	movlb	0	; select bank0
 18269  0A28  0831               	movf	___flmul@b+3,w
 18270  0A29  3980               	andlw	128
 18271  0A2A  00B6               	movwf	??___flmul
 18272  0A2B  0836               	movf	??___flmul,w
 18273  0A2C  00BB               	movwf	___flmul@sign
 18274  0A2D  3531               	lslf	___flmul@b+3,w
 18275  0A2E  00B6               	movwf	??___flmul
 18276  0A2F  0836               	movf	??___flmul,w
 18277  0A30  00C1               	movwf	___flmul@bexp
 18278  0A31  1BB0               	btfsc	___flmul@b+2,7
 18279  0A32  1441               	bsf	___flmul@bexp,0
 18280  0A33  0841               	movf	___flmul@bexp,w
 18281  0A34  1903               	btfsc	3,2
 18282  0A35  2A43               	goto	l7604
 18283  0A36  0A41               	incf	___flmul@bexp,w
 18284  0A37  1D03               	btfss	3,2
 18285  0A38  2A41               	goto	l7602
 18286  0A39  3000               	movlw	0
 18287  0A3A  00B1               	movwf	___flmul@b+3
 18288  0A3B  3000               	movlw	0
 18289  0A3C  00B0               	movwf	___flmul@b+2
 18290  0A3D  3000               	movlw	0
 18291  0A3E  00AF               	movwf	___flmul@b+1
 18292  0A3F  3000               	movlw	0
 18293  0A40  00AE               	movwf	___flmul@b
 18294  0A41                     l7602:	
 18295  0A41  17B0               	bsf	___flmul@b+2,7
 18296  0A42  2A4B               	goto	l7606
 18297  0A43                     l7604:	
 18298  0A43  3000               	movlw	0
 18299  0A44  00B1               	movwf	___flmul@b+3
 18300  0A45  3000               	movlw	0
 18301  0A46  00B0               	movwf	___flmul@b+2
 18302  0A47  3000               	movlw	0
 18303  0A48  00AF               	movwf	___flmul@b+1
 18304  0A49  3000               	movlw	0
 18305  0A4A  00AE               	movwf	___flmul@b
 18306  0A4B                     l7606:	
 18307  0A4B  0835               	movf	___flmul@a+3,w
 18308  0A4C  3980               	andlw	128
 18309  0A4D  00B6               	movwf	??___flmul
 18310  0A4E  0836               	movf	??___flmul,w
 18311  0A4F  06BB               	xorwf	___flmul@sign,f
 18312  0A50  3535               	lslf	___flmul@a+3,w
 18313  0A51  00B6               	movwf	??___flmul
 18314  0A52  0836               	movf	??___flmul,w
 18315  0A53  00BC               	movwf	___flmul@aexp
 18316  0A54  1BB4               	btfsc	___flmul@a+2,7
 18317  0A55  143C               	bsf	___flmul@aexp,0
 18318  0A56  083C               	movf	___flmul@aexp,w
 18319  0A57  1903               	btfsc	3,2
 18320  0A58  2A66               	goto	l7622
 18321  0A59  0A3C               	incf	___flmul@aexp,w
 18322  0A5A  1D03               	btfss	3,2
 18323  0A5B  2A64               	goto	l7620
 18324  0A5C  3000               	movlw	0
 18325  0A5D  00B5               	movwf	___flmul@a+3
 18326  0A5E  3000               	movlw	0
 18327  0A5F  00B4               	movwf	___flmul@a+2
 18328  0A60  3000               	movlw	0
 18329  0A61  00B3               	movwf	___flmul@a+1
 18330  0A62  3000               	movlw	0
 18331  0A63  00B2               	movwf	___flmul@a
 18332  0A64                     l7620:	
 18333  0A64  17B4               	bsf	___flmul@a+2,7
 18334  0A65  2A6E               	goto	l7624
 18335  0A66                     l7622:	
 18336  0A66  3000               	movlw	0
 18337  0A67  00B5               	movwf	___flmul@a+3
 18338  0A68  3000               	movlw	0
 18339  0A69  00B4               	movwf	___flmul@a+2
 18340  0A6A  3000               	movlw	0
 18341  0A6B  00B3               	movwf	___flmul@a+1
 18342  0A6C  3000               	movlw	0
 18343  0A6D  00B2               	movwf	___flmul@a
 18344  0A6E                     l7624:	
 18345  0A6E  083C               	movf	___flmul@aexp,w
 18346  0A6F  1D03               	btfss	3,2
 18347  0A70  0841               	movf	___flmul@bexp,w
 18348  0A71  1D03               	btfss	3,2
 18349  0A72  2A7C               	goto	l7632
 18350  0A73  3000               	movlw	0
 18351  0A74  00B1               	movwf	?___flmul+3
 18352  0A75  3000               	movlw	0
 18353  0A76  00B0               	movwf	?___flmul+2
 18354  0A77  3000               	movlw	0
 18355  0A78  00AF               	movwf	?___flmul+1
 18356  0A79  3000               	movlw	0
 18357  0A7A  00AE               	movwf	?___flmul
 18358  0A7B  0008               	return
 18359  0A7C                     l7632:	
 18360  0A7C  082E               	movf	___flmul@b,w
 18361  0A7D  00B6               	movwf	??___flmul
 18362  0A7E  0836               	movf	??___flmul,w
 18363  0A7F  00A0               	movwf	__Umul8_16@multiplicand
 18364  0A80  0834               	movf	___flmul@a+2,w
 18365  0A81  31AB  2338  318A   	fcall	__Umul8_16
 18366  0A84  0140               	movlb	0	; select bank0
 18367  0A85  0821               	movf	?__Umul8_16+1,w
 18368  0A86  00C7               	movwf	___flmul@temp+1
 18369  0A87  0820               	movf	?__Umul8_16,w
 18370  0A88  00C6               	movwf	___flmul@temp
 18371  0A89  0846               	movf	___flmul@temp,w
 18372  0A8A  00B6               	movwf	??___flmul
 18373  0A8B  01B7               	clrf	??___flmul+1
 18374  0A8C  01B8               	clrf	??___flmul+2
 18375  0A8D  01B9               	clrf	??___flmul+3
 18376  0A8E  0839               	movf	??___flmul+3,w
 18377  0A8F  00C0               	movwf	___flmul@grs+3
 18378  0A90  0838               	movf	??___flmul+2,w
 18379  0A91  00BF               	movwf	___flmul@grs+2
 18380  0A92  0837               	movf	??___flmul+1,w
 18381  0A93  00BE               	movwf	___flmul@grs+1
 18382  0A94  0836               	movf	??___flmul,w
 18383  0A95  00BD               	movwf	___flmul@grs
 18384  0A96  0847               	movf	___flmul@temp+1,w
 18385  0A97  00B6               	movwf	??___flmul
 18386  0A98  01B7               	clrf	??___flmul+1
 18387  0A99  01B8               	clrf	??___flmul+2
 18388  0A9A  01B9               	clrf	??___flmul+3
 18389  0A9B  0839               	movf	??___flmul+3,w
 18390  0A9C  00C5               	movwf	___flmul@prod+3
 18391  0A9D  0838               	movf	??___flmul+2,w
 18392  0A9E  00C4               	movwf	___flmul@prod+2
 18393  0A9F  0837               	movf	??___flmul+1,w
 18394  0AA0  00C3               	movwf	___flmul@prod+1
 18395  0AA1  0836               	movf	??___flmul,w
 18396  0AA2  00C2               	movwf	___flmul@prod
 18397  0AA3  082F               	movf	___flmul@b+1,w
 18398  0AA4  00B6               	movwf	??___flmul
 18399  0AA5  0836               	movf	??___flmul,w
 18400  0AA6  00A0               	movwf	__Umul8_16@multiplicand
 18401  0AA7  0833               	movf	___flmul@a+1,w
 18402  0AA8  31AB  2338  318A   	fcall	__Umul8_16
 18403  0AAB  0140               	movlb	0	; select bank0
 18404  0AAC  0821               	movf	?__Umul8_16+1,w
 18405  0AAD  00C7               	movwf	___flmul@temp+1
 18406  0AAE  0820               	movf	?__Umul8_16,w
 18407  0AAF  00C6               	movwf	___flmul@temp
 18408  0AB0  0846               	movf	___flmul@temp,w
 18409  0AB1  00B6               	movwf	??___flmul
 18410  0AB2  01B7               	clrf	??___flmul+1
 18411  0AB3  01B8               	clrf	??___flmul+2
 18412  0AB4  01B9               	clrf	??___flmul+3
 18413  0AB5  0836               	movf	??___flmul,w
 18414  0AB6  07BD               	addwf	___flmul@grs,f
 18415  0AB7  0837               	movf	??___flmul+1,w
 18416  0AB8  3DBE               	addwfc	___flmul@grs+1,f
 18417  0AB9  0838               	movf	??___flmul+2,w
 18418  0ABA  3DBF               	addwfc	___flmul@grs+2,f
 18419  0ABB  0839               	movf	??___flmul+3,w
 18420  0ABC  3DC0               	addwfc	___flmul@grs+3,f
 18421  0ABD  0847               	movf	___flmul@temp+1,w
 18422  0ABE  00B6               	movwf	??___flmul
 18423  0ABF  01B7               	clrf	??___flmul+1
 18424  0AC0  01B8               	clrf	??___flmul+2
 18425  0AC1  01B9               	clrf	??___flmul+3
 18426  0AC2  0836               	movf	??___flmul,w
 18427  0AC3  07C2               	addwf	___flmul@prod,f
 18428  0AC4  0837               	movf	??___flmul+1,w
 18429  0AC5  3DC3               	addwfc	___flmul@prod+1,f
 18430  0AC6  0838               	movf	??___flmul+2,w
 18431  0AC7  3DC4               	addwfc	___flmul@prod+2,f
 18432  0AC8  0839               	movf	??___flmul+3,w
 18433  0AC9  3DC5               	addwfc	___flmul@prod+3,f
 18434  0ACA  0830               	movf	___flmul@b+2,w
 18435  0ACB  00B6               	movwf	??___flmul
 18436  0ACC  0836               	movf	??___flmul,w
 18437  0ACD  00A0               	movwf	__Umul8_16@multiplicand
 18438  0ACE  0832               	movf	___flmul@a,w
 18439  0ACF  31AB  2338  318A   	fcall	__Umul8_16
 18440  0AD2  0140               	movlb	0	; select bank0
 18441  0AD3  0821               	movf	?__Umul8_16+1,w
 18442  0AD4  00C7               	movwf	___flmul@temp+1
 18443  0AD5  0820               	movf	?__Umul8_16,w
 18444  0AD6  00C6               	movwf	___flmul@temp
 18445  0AD7  0846               	movf	___flmul@temp,w
 18446  0AD8  00B6               	movwf	??___flmul
 18447  0AD9  01B7               	clrf	??___flmul+1
 18448  0ADA  01B8               	clrf	??___flmul+2
 18449  0ADB  01B9               	clrf	??___flmul+3
 18450  0ADC  0836               	movf	??___flmul,w
 18451  0ADD  07BD               	addwf	___flmul@grs,f
 18452  0ADE  0837               	movf	??___flmul+1,w
 18453  0ADF  3DBE               	addwfc	___flmul@grs+1,f
 18454  0AE0  0838               	movf	??___flmul+2,w
 18455  0AE1  3DBF               	addwfc	___flmul@grs+2,f
 18456  0AE2  0839               	movf	??___flmul+3,w
 18457  0AE3  3DC0               	addwfc	___flmul@grs+3,f
 18458  0AE4  0847               	movf	___flmul@temp+1,w
 18459  0AE5  00B6               	movwf	??___flmul
 18460  0AE6  01B7               	clrf	??___flmul+1
 18461  0AE7  01B8               	clrf	??___flmul+2
 18462  0AE8  01B9               	clrf	??___flmul+3
 18463  0AE9  0836               	movf	??___flmul,w
 18464  0AEA  07C2               	addwf	___flmul@prod,f
 18465  0AEB  0837               	movf	??___flmul+1,w
 18466  0AEC  3DC3               	addwfc	___flmul@prod+1,f
 18467  0AED  0838               	movf	??___flmul+2,w
 18468  0AEE  3DC4               	addwfc	___flmul@prod+2,f
 18469  0AEF  0839               	movf	??___flmul+3,w
 18470  0AF0  3DC5               	addwfc	___flmul@prod+3,f
 18471  0AF1  3008               	movlw	8
 18472  0AF2                     u10505:	
 18473  0AF2  35BD               	lslf	___flmul@grs,f
 18474  0AF3  0DBE               	rlf	___flmul@grs+1,f
 18475  0AF4  0DBF               	rlf	___flmul@grs+2,f
 18476  0AF5  0DC0               	rlf	___flmul@grs+3,f
 18477  0AF6  0B89               	decfsz	9,f
 18478  0AF7  2AF2               	goto	u10505
 18479  0AF8  082F               	movf	___flmul@b+1,w
 18480  0AF9  00B6               	movwf	??___flmul
 18481  0AFA  0836               	movf	??___flmul,w
 18482  0AFB  00A0               	movwf	__Umul8_16@multiplicand
 18483  0AFC  0832               	movf	___flmul@a,w
 18484  0AFD  31AB  2338  318A   	fcall	__Umul8_16
 18485  0B00  0140               	movlb	0	; select bank0
 18486  0B01  0821               	movf	?__Umul8_16+1,w
 18487  0B02  00C7               	movwf	___flmul@temp+1
 18488  0B03  0820               	movf	?__Umul8_16,w
 18489  0B04  00C6               	movwf	___flmul@temp
 18490  0B05  0846               	movf	___flmul@temp,w
 18491  0B06  07BD               	addwf	___flmul@grs,f
 18492  0B07  0847               	movf	___flmul@temp+1,w
 18493  0B08  3DBE               	addwfc	___flmul@grs+1,f
 18494  0B09  3000               	movlw	0
 18495  0B0A  3DBF               	addwfc	___flmul@grs+2,f
 18496  0B0B  3DC0               	addwfc	___flmul@grs+3,f
 18497  0B0C  082E               	movf	___flmul@b,w
 18498  0B0D  00B6               	movwf	??___flmul
 18499  0B0E  0836               	movf	??___flmul,w
 18500  0B0F  00A0               	movwf	__Umul8_16@multiplicand
 18501  0B10  0833               	movf	___flmul@a+1,w
 18502  0B11  31AB  2338  318A   	fcall	__Umul8_16
 18503  0B14  0140               	movlb	0	; select bank0
 18504  0B15  0821               	movf	?__Umul8_16+1,w
 18505  0B16  00C7               	movwf	___flmul@temp+1
 18506  0B17  0820               	movf	?__Umul8_16,w
 18507  0B18  00C6               	movwf	___flmul@temp
 18508  0B19  0846               	movf	___flmul@temp,w
 18509  0B1A  07BD               	addwf	___flmul@grs,f
 18510  0B1B  0847               	movf	___flmul@temp+1,w
 18511  0B1C  3DBE               	addwfc	___flmul@grs+1,f
 18512  0B1D  3000               	movlw	0
 18513  0B1E  3DBF               	addwfc	___flmul@grs+2,f
 18514  0B1F  3DC0               	addwfc	___flmul@grs+3,f
 18515  0B20  3008               	movlw	8
 18516  0B21                     u10515:	
 18517  0B21  35BD               	lslf	___flmul@grs,f
 18518  0B22  0DBE               	rlf	___flmul@grs+1,f
 18519  0B23  0DBF               	rlf	___flmul@grs+2,f
 18520  0B24  0DC0               	rlf	___flmul@grs+3,f
 18521  0B25  0B89               	decfsz	9,f
 18522  0B26  2B21               	goto	u10515
 18523  0B27  082E               	movf	___flmul@b,w
 18524  0B28  00B6               	movwf	??___flmul
 18525  0B29  0836               	movf	??___flmul,w
 18526  0B2A  00A0               	movwf	__Umul8_16@multiplicand
 18527  0B2B  0832               	movf	___flmul@a,w
 18528  0B2C  31AB  2338  318A   	fcall	__Umul8_16
 18529  0B2F  0140               	movlb	0	; select bank0
 18530  0B30  0821               	movf	?__Umul8_16+1,w
 18531  0B31  00C7               	movwf	___flmul@temp+1
 18532  0B32  0820               	movf	?__Umul8_16,w
 18533  0B33  00C6               	movwf	___flmul@temp
 18534  0B34  0846               	movf	___flmul@temp,w
 18535  0B35  07BD               	addwf	___flmul@grs,f
 18536  0B36  0847               	movf	___flmul@temp+1,w
 18537  0B37  3DBE               	addwfc	___flmul@grs+1,f
 18538  0B38  3000               	movlw	0
 18539  0B39  3DBF               	addwfc	___flmul@grs+2,f
 18540  0B3A  3DC0               	addwfc	___flmul@grs+3,f
 18541  0B3B  082F               	movf	___flmul@b+1,w
 18542  0B3C  00B6               	movwf	??___flmul
 18543  0B3D  0836               	movf	??___flmul,w
 18544  0B3E  00A0               	movwf	__Umul8_16@multiplicand
 18545  0B3F  0834               	movf	___flmul@a+2,w
 18546  0B40  31AB  2338  318A   	fcall	__Umul8_16
 18547  0B43  0140               	movlb	0	; select bank0
 18548  0B44  0821               	movf	?__Umul8_16+1,w
 18549  0B45  00C7               	movwf	___flmul@temp+1
 18550  0B46  0820               	movf	?__Umul8_16,w
 18551  0B47  00C6               	movwf	___flmul@temp
 18552  0B48  0846               	movf	___flmul@temp,w
 18553  0B49  07C2               	addwf	___flmul@prod,f
 18554  0B4A  0847               	movf	___flmul@temp+1,w
 18555  0B4B  3DC3               	addwfc	___flmul@prod+1,f
 18556  0B4C  3000               	movlw	0
 18557  0B4D  3DC4               	addwfc	___flmul@prod+2,f
 18558  0B4E  3DC5               	addwfc	___flmul@prod+3,f
 18559  0B4F  0830               	movf	___flmul@b+2,w
 18560  0B50  00B6               	movwf	??___flmul
 18561  0B51  0836               	movf	??___flmul,w
 18562  0B52  00A0               	movwf	__Umul8_16@multiplicand
 18563  0B53  0833               	movf	___flmul@a+1,w
 18564  0B54  31AB  2338  318A   	fcall	__Umul8_16
 18565  0B57  0140               	movlb	0	; select bank0
 18566  0B58  0821               	movf	?__Umul8_16+1,w
 18567  0B59  00C7               	movwf	___flmul@temp+1
 18568  0B5A  0820               	movf	?__Umul8_16,w
 18569  0B5B  00C6               	movwf	___flmul@temp
 18570  0B5C  0846               	movf	___flmul@temp,w
 18571  0B5D  07C2               	addwf	___flmul@prod,f
 18572  0B5E  0847               	movf	___flmul@temp+1,w
 18573  0B5F  3DC3               	addwfc	___flmul@prod+1,f
 18574  0B60  3000               	movlw	0
 18575  0B61  3DC4               	addwfc	___flmul@prod+2,f
 18576  0B62  3DC5               	addwfc	___flmul@prod+3,f
 18577  0B63  0830               	movf	___flmul@b+2,w
 18578  0B64  00B6               	movwf	??___flmul
 18579  0B65  0836               	movf	??___flmul,w
 18580  0B66  00A0               	movwf	__Umul8_16@multiplicand
 18581  0B67  0834               	movf	___flmul@a+2,w
 18582  0B68  31AB  2338  318A   	fcall	__Umul8_16
 18583  0B6B  0140               	movlb	0	; select bank0
 18584  0B6C  0821               	movf	?__Umul8_16+1,w
 18585  0B6D  00C7               	movwf	___flmul@temp+1
 18586  0B6E  0820               	movf	?__Umul8_16,w
 18587  0B6F  00C6               	movwf	___flmul@temp
 18588  0B70  0846               	movf	___flmul@temp,w
 18589  0B71  00B6               	movwf	??___flmul
 18590  0B72  0847               	movf	___flmul@temp+1,w
 18591  0B73  00B7               	movwf	??___flmul+1
 18592  0B74  01B8               	clrf	??___flmul+2
 18593  0B75  01B9               	clrf	??___flmul+3
 18594  0B76  3008               	movlw	8
 18595  0B77                     u10525:	
 18596  0B77  35B6               	lslf	??___flmul,f
 18597  0B78  0DB7               	rlf	??___flmul+1,f
 18598  0B79  0DB8               	rlf	??___flmul+2,f
 18599  0B7A  0DB9               	rlf	??___flmul+3,f
 18600  0B7B  0B89               	decfsz	9,f
 18601  0B7C  2B77               	goto	u10525
 18602  0B7D  0836               	movf	??___flmul,w
 18603  0B7E  07C2               	addwf	___flmul@prod,f
 18604  0B7F  0837               	movf	??___flmul+1,w
 18605  0B80  3DC3               	addwfc	___flmul@prod+1,f
 18606  0B81  0838               	movf	??___flmul+2,w
 18607  0B82  3DC4               	addwfc	___flmul@prod+2,f
 18608  0B83  0839               	movf	??___flmul+3,w
 18609  0B84  3DC5               	addwfc	___flmul@prod+3,f
 18610  0B85  083D               	movf	___flmul@grs,w
 18611  0B86  00B6               	movwf	??___flmul
 18612  0B87  083E               	movf	___flmul@grs+1,w
 18613  0B88  00B7               	movwf	??___flmul+1
 18614  0B89  083F               	movf	___flmul@grs+2,w
 18615  0B8A  00B8               	movwf	??___flmul+2
 18616  0B8B  0840               	movf	___flmul@grs+3,w
 18617  0B8C  00B9               	movwf	??___flmul+3
 18618  0B8D  3018               	movlw	24
 18619  0B8E                     u10535:	
 18620  0B8E  36B9               	lsrf	??___flmul+3,f
 18621  0B8F  0CB8               	rrf	??___flmul+2,f
 18622  0B90  0CB7               	rrf	??___flmul+1,f
 18623  0B91  0CB6               	rrf	??___flmul,f
 18624  0B92  0B89               	decfsz	9,f
 18625  0B93  2B8E               	goto	u10535
 18626  0B94  0836               	movf	??___flmul,w
 18627  0B95  07C2               	addwf	___flmul@prod,f
 18628  0B96  0837               	movf	??___flmul+1,w
 18629  0B97  3DC3               	addwfc	___flmul@prod+1,f
 18630  0B98  0838               	movf	??___flmul+2,w
 18631  0B99  3DC4               	addwfc	___flmul@prod+2,f
 18632  0B9A  0839               	movf	??___flmul+3,w
 18633  0B9B  3DC5               	addwfc	___flmul@prod+3,f
 18634  0B9C  3008               	movlw	8
 18635  0B9D                     u10545:	
 18636  0B9D  35BD               	lslf	___flmul@grs,f
 18637  0B9E  0DBE               	rlf	___flmul@grs+1,f
 18638  0B9F  0DBF               	rlf	___flmul@grs+2,f
 18639  0BA0  0DC0               	rlf	___flmul@grs+3,f
 18640  0BA1  0B89               	decfsz	9,f
 18641  0BA2  2B9D               	goto	u10545
 18642  0BA3  0841               	movf	___flmul@bexp,w
 18643  0BA4  073C               	addwf	___flmul@aexp,w
 18644  0BA5  00B6               	movwf	??___flmul
 18645  0BA6  01B7               	clrf	??___flmul+1
 18646  0BA7  0DB7               	rlf	??___flmul+1,f
 18647  0BA8  0836               	movf	??___flmul,w
 18648  0BA9  3E82               	addlw	130
 18649  0BAA  00C6               	movwf	___flmul@temp
 18650  0BAB  30FF               	movlw	255
 18651  0BAC  3D37               	addwfc	??___flmul+1,w
 18652  0BAD  00C7               	movwf	___flmul@temp+1
 18653  0BAE                     l7684:	
 18654  0BAE  1BC4               	btfsc	___flmul@prod+2,7
 18655  0BAF  2BC5               	goto	l7686
 18656  0BB0  3001               	movlw	1
 18657  0BB1                     u10555:	
 18658  0BB1  35C2               	lslf	___flmul@prod,f
 18659  0BB2  0DC3               	rlf	___flmul@prod+1,f
 18660  0BB3  0DC4               	rlf	___flmul@prod+2,f
 18661  0BB4  0DC5               	rlf	___flmul@prod+3,f
 18662  0BB5  0B89               	decfsz	9,f
 18663  0BB6  2BB1               	goto	u10555
 18664  0BB7  1BC0               	btfsc	___flmul@grs+3,7
 18665  0BB8  1442               	bsf	___flmul@prod,0
 18666  0BB9  3001               	movlw	1
 18667  0BBA                     u10575:	
 18668  0BBA  35BD               	lslf	___flmul@grs,f
 18669  0BBB  0DBE               	rlf	___flmul@grs+1,f
 18670  0BBC  0DBF               	rlf	___flmul@grs+2,f
 18671  0BBD  0DC0               	rlf	___flmul@grs+3,f
 18672  0BBE  0B89               	decfsz	9,f
 18673  0BBF  2BBA               	goto	u10575
 18674  0BC0  30FF               	movlw	255
 18675  0BC1  07C6               	addwf	___flmul@temp,f
 18676  0BC2  30FF               	movlw	255
 18677  0BC3  3DC7               	addwfc	___flmul@temp+1,f
 18678  0BC4  2BAE               	goto	l7684
 18679  0BC5                     l7686:	
 18680  0BC5  01BC               	clrf	___flmul@aexp
 18681  0BC6  1FC0               	btfss	___flmul@grs+3,7
 18682  0BC7  2BDE               	goto	l7696
 18683  0BC8  30FF               	movlw	255
 18684  0BC9  053D               	andwf	___flmul@grs,w
 18685  0BCA  00B6               	movwf	??___flmul
 18686  0BCB  30FF               	movlw	255
 18687  0BCC  053E               	andwf	___flmul@grs+1,w
 18688  0BCD  00B7               	movwf	??___flmul+1
 18689  0BCE  30FF               	movlw	255
 18690  0BCF  053F               	andwf	___flmul@grs+2,w
 18691  0BD0  00B8               	movwf	??___flmul+2
 18692  0BD1  307F               	movlw	127
 18693  0BD2  0540               	andwf	___flmul@grs+3,w
 18694  0BD3  00B9               	movwf	??___flmul+3
 18695  0BD4  0839               	movf	??___flmul+3,w
 18696  0BD5  0438               	iorwf	??___flmul+2,w
 18697  0BD6  0437               	iorwf	??___flmul+1,w
 18698  0BD7  0436               	iorwf	??___flmul,w
 18699  0BD8  1903               	skipnz
 18700  0BD9  1842               	btfsc	___flmul@prod,0
 18701  0BDA  2BDC               	goto	l7692
 18702  0BDB  2BDE               	goto	l7696
 18703  0BDC                     l7692:	
 18704  0BDC  01BC               	clrf	___flmul@aexp
 18705  0BDD  0ABC               	incf	___flmul@aexp,f
 18706  0BDE                     l7696:	
 18707  0BDE  083C               	movf	___flmul@aexp,w
 18708  0BDF  1903               	btfsc	3,2
 18709  0BE0  2C07               	goto	l7706
 18710  0BE1  3001               	movlw	1
 18711  0BE2  07C2               	addwf	___flmul@prod,f
 18712  0BE3  3000               	movlw	0
 18713  0BE4  3DC3               	addwfc	___flmul@prod+1,f
 18714  0BE5  3000               	movlw	0
 18715  0BE6  3DC4               	addwfc	___flmul@prod+2,f
 18716  0BE7  3000               	movlw	0
 18717  0BE8  3DC5               	addwfc	___flmul@prod+3,f
 18718  0BE9  1C45               	btfss	___flmul@prod+3,0
 18719  0BEA  2C07               	goto	l7706
 18720  0BEB  0842               	movf	___flmul@prod,w
 18721  0BEC  00B6               	movwf	??___flmul
 18722  0BED  0843               	movf	___flmul@prod+1,w
 18723  0BEE  00B7               	movwf	??___flmul+1
 18724  0BEF  0844               	movf	___flmul@prod+2,w
 18725  0BF0  00B8               	movwf	??___flmul+2
 18726  0BF1  0845               	movf	___flmul@prod+3,w
 18727  0BF2  00B9               	movwf	??___flmul+3
 18728  0BF3  3001               	movlw	1
 18729  0BF4  00BA               	movwf	??___flmul+4
 18730  0BF5                     u10645:	
 18731  0BF5  37B9               	asrf	??___flmul+3,f
 18732  0BF6  0CB8               	rrf	??___flmul+2,f
 18733  0BF7  0CB7               	rrf	??___flmul+1,f
 18734  0BF8  0CB6               	rrf	??___flmul,f
 18735  0BF9  0BBA               	decfsz	??___flmul+4,f
 18736  0BFA  2BF5               	goto	u10645
 18737  0BFB  0839               	movf	??___flmul+3,w
 18738  0BFC  00C5               	movwf	___flmul@prod+3
 18739  0BFD  0838               	movf	??___flmul+2,w
 18740  0BFE  00C4               	movwf	___flmul@prod+2
 18741  0BFF  0837               	movf	??___flmul+1,w
 18742  0C00  00C3               	movwf	___flmul@prod+1
 18743  0C01  0836               	movf	??___flmul,w
 18744  0C02  00C2               	movwf	___flmul@prod
 18745  0C03  3001               	movlw	1
 18746  0C04  07C6               	addwf	___flmul@temp,f
 18747  0C05  3000               	movlw	0
 18748  0C06  3DC7               	addwfc	___flmul@temp+1,f
 18749  0C07                     l7706:	
 18750  0C07  0847               	movf	___flmul@temp+1,w
 18751  0C08  3A80               	xorlw	128
 18752  0C09  00B6               	movwf	??___flmul
 18753  0C0A  3080               	movlw	128
 18754  0C0B  0236               	subwf	??___flmul,w
 18755  0C0C  1D03               	skipz
 18756  0C0D  2C10               	goto	u10655
 18757  0C0E  30FF               	movlw	255
 18758  0C0F  0246               	subwf	___flmul@temp,w
 18759  0C10                     u10655:	
 18760  0C10  1C03               	skipc
 18761  0C11  2C1C               	goto	l7710
 18762  0C12  307F               	movlw	127
 18763  0C13  0140               	movlb	0	; select bank0
 18764  0C14  00C5               	movwf	___flmul@prod+3
 18765  0C15  3080               	movlw	128
 18766  0C16  00C4               	movwf	___flmul@prod+2
 18767  0C17  3000               	movlw	0
 18768  0C18  00C3               	movwf	___flmul@prod+1
 18769  0C19  3000               	movlw	0
 18770  0C1A  00C2               	movwf	___flmul@prod
 18771  0C1B  2C46               	goto	l1348
 18772  0C1C                     l7710:	
 18773  0C1C  0140               	movlb	0	; select bank0
 18774  0C1D  0847               	movf	___flmul@temp+1,w
 18775  0C1E  3A80               	xorlw	128
 18776  0C1F  00B6               	movwf	??___flmul
 18777  0C20  3080               	movlw	128
 18778  0C21  0236               	subwf	??___flmul,w
 18779  0C22  1D03               	skipz
 18780  0C23  2C26               	goto	u10665
 18781  0C24  3001               	movlw	1
 18782  0C25  0246               	subwf	___flmul@temp,w
 18783  0C26                     u10665:	
 18784  0C26  1803               	skipnc
 18785  0C27  2C33               	goto	l7716
 18786  0C28  3000               	movlw	0
 18787  0C29  0140               	movlb	0	; select bank0
 18788  0C2A  00C5               	movwf	___flmul@prod+3
 18789  0C2B  3000               	movlw	0
 18790  0C2C  00C4               	movwf	___flmul@prod+2
 18791  0C2D  3000               	movlw	0
 18792  0C2E  00C3               	movwf	___flmul@prod+1
 18793  0C2F  3000               	movlw	0
 18794  0C30  00C2               	movwf	___flmul@prod
 18795  0C31  01BB               	clrf	___flmul@sign
 18796  0C32  2C46               	goto	l1348
 18797  0C33                     l7716:	
 18798  0C33  0140               	movlb	0	; select bank0
 18799  0C34  0846               	movf	___flmul@temp,w
 18800  0C35  00B6               	movwf	??___flmul
 18801  0C36  0836               	movf	??___flmul,w
 18802  0C37  00C1               	movwf	___flmul@bexp
 18803  0C38  30FF               	movlw	255
 18804  0C39  05C2               	andwf	___flmul@prod,f
 18805  0C3A  30FF               	movlw	255
 18806  0C3B  05C3               	andwf	___flmul@prod+1,f
 18807  0C3C  307F               	movlw	127
 18808  0C3D  05C4               	andwf	___flmul@prod+2,f
 18809  0C3E  3000               	movlw	0
 18810  0C3F  05C5               	andwf	___flmul@prod+3,f
 18811  0C40  1841               	btfsc	___flmul@bexp,0
 18812  0C41  17C4               	bsf	___flmul@prod+2,7
 18813  0C42  3641               	lsrf	___flmul@bexp,w
 18814  0C43  00B6               	movwf	??___flmul
 18815  0C44  0836               	movf	??___flmul,w
 18816  0C45  00C5               	movwf	___flmul@prod+3
 18817  0C46                     l1348:	
 18818  0C46  083B               	movf	___flmul@sign,w
 18819  0C47  00B6               	movwf	??___flmul
 18820  0C48  0836               	movf	??___flmul,w
 18821  0C49  04C5               	iorwf	___flmul@prod+3,f
 18822  0C4A  0845               	movf	___flmul@prod+3,w
 18823  0C4B  00B1               	movwf	?___flmul+3
 18824  0C4C  0844               	movf	___flmul@prod+2,w
 18825  0C4D  00B0               	movwf	?___flmul+2
 18826  0C4E  0843               	movf	___flmul@prod+1,w
 18827  0C4F  00AF               	movwf	?___flmul+1
 18828  0C50  0842               	movf	___flmul@prod,w
 18829  0C51  00AE               	movwf	?___flmul
 18830  0C52  0008               	return
 18831  0C53                     __end_of___flmul:	
 18832                           
 18833                           	psect	text62
 18834  2B38                     __ptext62:	
 18835 ;; *************** function __Umul8_16 *****************
 18836 ;; Defined at:
 18837 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\Umul8_16.c"
 18838 ;; Parameters:    Size  Location     Type
 18839 ;;  multiplier      1    wreg     unsigned char 
 18840 ;;  multiplicand    1    0[BANK0 ] unsigned char 
 18841 ;; Auto vars:     Size  Location     Type
 18842 ;;  multiplier      1    8[BANK0 ] unsigned char 
 18843 ;;  word_mpld       2    6[BANK0 ] unsigned int 
 18844 ;;  product         2    4[BANK0 ] unsigned int 
 18845 ;; Return value:  Size  Location     Type
 18846 ;;                  2    0[BANK0 ] unsigned int 
 18847 ;; Registers used:
 18848 ;;		wreg, status,2, status,0
 18849 ;; Tracked objects:
 18850 ;;		On entry : 0/0
 18851 ;;		On exit  : 0/0
 18852 ;;		Unchanged: 0/0
 18853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18854 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18855 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18856 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18857 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18858 ;;Total ram usage:        9 bytes
 18859 ;; Hardware stack levels used:    1
 18860 ;; Hardware stack levels required when called:    3
 18861 ;; This function calls:
 18862 ;;		Nothing
 18863 ;; This function is called by:
 18864 ;;		___flmul
 18865 ;; This function uses a non-reentrant model
 18866 ;;
 18867                           
 18868                           
 18869                           ;psect for function __Umul8_16
 18870  2B38                     __Umul8_16:	
 18871                           
 18872                           ;incstack = 0
 18873                           ; Regs used in __Umul8_16: [wreg+status,2+status,0]
 18874                           ;__Umul8_16@multiplier stored from wreg
 18875  2B38  0140               	movlb	0	; select bank0
 18876  2B39  00A8               	movwf	__Umul8_16@multiplier
 18877  2B3A  01A4               	clrf	__Umul8_16@product
 18878  2B3B  01A5               	clrf	__Umul8_16@product+1
 18879  2B3C  0820               	movf	__Umul8_16@multiplicand,w
 18880  2B3D  00A2               	movwf	??__Umul8_16
 18881  2B3E  01A3               	clrf	??__Umul8_16+1
 18882  2B3F  0822               	movf	??__Umul8_16,w
 18883  2B40  00A6               	movwf	__Umul8_16@word_mpld
 18884  2B41  0823               	movf	??__Umul8_16+1,w
 18885  2B42  00A7               	movwf	__Umul8_16@word_mpld+1
 18886  2B43                     l7088:	
 18887  2B43  1C28               	btfss	__Umul8_16@multiplier,0
 18888  2B44  2B49               	goto	l1556
 18889  2B45  0826               	movf	__Umul8_16@word_mpld,w
 18890  2B46  07A4               	addwf	__Umul8_16@product,f
 18891  2B47  0827               	movf	__Umul8_16@word_mpld+1,w
 18892  2B48  3DA5               	addwfc	__Umul8_16@product+1,f
 18893  2B49                     l1556:	
 18894  2B49  3001               	movlw	1
 18895  2B4A                     u9155:	
 18896  2B4A  35A6               	lslf	__Umul8_16@word_mpld,f
 18897  2B4B  0DA7               	rlf	__Umul8_16@word_mpld+1,f
 18898  2B4C  0B89               	decfsz	9,f
 18899  2B4D  2B4A               	goto	u9155
 18900  2B4E  1003               	clrc
 18901  2B4F  0CA8               	rrf	__Umul8_16@multiplier,f
 18902  2B50  0828               	movf	__Umul8_16@multiplier,w
 18903  2B51  1D03               	btfss	3,2
 18904  2B52  2B43               	goto	l7088
 18905  2B53  0825               	movf	__Umul8_16@product+1,w
 18906  2B54  00A1               	movwf	?__Umul8_16+1
 18907  2B55  0824               	movf	__Umul8_16@product,w
 18908  2B56  00A0               	movwf	?__Umul8_16
 18909  2B57  0008               	return
 18910  2B58                     __end_of__Umul8_16:	
 18911                           
 18912                           	psect	text63
 18913  11D0                     __ptext63:	
 18914 ;; *************** function ___fldiv *****************
 18915 ;; Defined at:
 18916 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcdiv.c"
 18917 ;; Parameters:    Size  Location     Type
 18918 ;;  a               4   40[BANK0 ] unsigned int 
 18919 ;;  b               4   44[BANK0 ] unsigned int 
 18920 ;; Auto vars:     Size  Location     Type
 18921 ;;  grs             4   60[BANK0 ] unsigned long 
 18922 ;;  rem             4   53[BANK0 ] unsigned long 
 18923 ;;  new_exp         2   58[BANK0 ] int 
 18924 ;;  aexp            1   65[BANK0 ] unsigned char 
 18925 ;;  bexp            1   64[BANK0 ] unsigned char 
 18926 ;;  sign            1   57[BANK0 ] unsigned char 
 18927 ;; Return value:  Size  Location     Type
 18928 ;;                  4   40[BANK0 ] unsigned char 
 18929 ;; Registers used:
 18930 ;;		wreg, status,2, status,0
 18931 ;; Tracked objects:
 18932 ;;		On entry : 0/0
 18933 ;;		On exit  : 0/0
 18934 ;;		Unchanged: 0/0
 18935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 18936 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18937 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18938 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18939 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 18940 ;;Total ram usage:       26 bytes
 18941 ;; Hardware stack levels used:    1
 18942 ;; Hardware stack levels required when called:    3
 18943 ;; This function calls:
 18944 ;;		Nothing
 18945 ;; This function is called by:
 18946 ;;		_convertAnalogValues
 18947 ;;		_efgtoa
 18948 ;;		_calcRequiredPower
 18949 ;;		_getAvgChannelCurrents
 18950 ;; This function uses a non-reentrant model
 18951 ;;
 18952                           
 18953                           
 18954                           ;psect for function ___fldiv
 18955  11D0                     ___fldiv:	
 18956                           
 18957                           ;incstack = 0
 18958                           ; Regs used in ___fldiv: [wreg+status,2+status,0]
 18959  11D0  0140               	movlb	0	; select bank0
 18960  11D1  084F               	movf	___fldiv@b+3,w
 18961  11D2  3980               	andlw	128
 18962  11D3  00D0               	movwf	??___fldiv
 18963  11D4  0850               	movf	??___fldiv,w
 18964  11D5  00D9               	movwf	___fldiv@sign
 18965  11D6  354F               	lslf	___fldiv@b+3,w
 18966  11D7  00D0               	movwf	??___fldiv
 18967  11D8  0850               	movf	??___fldiv,w
 18968  11D9  00E0               	movwf	___fldiv@bexp
 18969  11DA  1BCE               	btfsc	___fldiv@b+2,7
 18970  11DB  1460               	bsf	___fldiv@bexp,0
 18971  11DC  0860               	movf	___fldiv@bexp,w
 18972  11DD  1903               	btfsc	3,2
 18973  11DE  29ED               	goto	l7466
 18974  11DF  0A60               	incf	___fldiv@bexp,w
 18975  11E0  1D03               	btfss	3,2
 18976  11E1  29EA               	goto	l7462
 18977  11E2  3000               	movlw	0
 18978  11E3  00CF               	movwf	___fldiv@b+3
 18979  11E4  3000               	movlw	0
 18980  11E5  00CE               	movwf	___fldiv@b+2
 18981  11E6  3000               	movlw	0
 18982  11E7  00CD               	movwf	___fldiv@b+1
 18983  11E8  3000               	movlw	0
 18984  11E9  00CC               	movwf	___fldiv@b
 18985  11EA                     l7462:	
 18986  11EA  17CE               	bsf	___fldiv@b+2,7
 18987  11EB  01CF               	clrf	___fldiv@b+3
 18988  11EC  29F5               	goto	l7468
 18989  11ED                     l7466:	
 18990  11ED  3000               	movlw	0
 18991  11EE  00CF               	movwf	___fldiv@b+3
 18992  11EF  3000               	movlw	0
 18993  11F0  00CE               	movwf	___fldiv@b+2
 18994  11F1  3000               	movlw	0
 18995  11F2  00CD               	movwf	___fldiv@b+1
 18996  11F3  3000               	movlw	0
 18997  11F4  00CC               	movwf	___fldiv@b
 18998  11F5                     l7468:	
 18999  11F5  084B               	movf	___fldiv@a+3,w
 19000  11F6  3980               	andlw	128
 19001  11F7  00D0               	movwf	??___fldiv
 19002  11F8  0850               	movf	??___fldiv,w
 19003  11F9  06D9               	xorwf	___fldiv@sign,f
 19004  11FA  354B               	lslf	___fldiv@a+3,w
 19005  11FB  00D0               	movwf	??___fldiv
 19006  11FC  0850               	movf	??___fldiv,w
 19007  11FD  00E1               	movwf	___fldiv@aexp
 19008  11FE  1BCA               	btfsc	___fldiv@a+2,7
 19009  11FF  1461               	bsf	___fldiv@aexp,0
 19010  1200  0861               	movf	___fldiv@aexp,w
 19011  1201  1903               	btfsc	3,2
 19012  1202  2A11               	goto	l7486
 19013  1203  0A61               	incf	___fldiv@aexp,w
 19014  1204  1D03               	btfss	3,2
 19015  1205  2A0E               	goto	l7482
 19016  1206  3000               	movlw	0
 19017  1207  00CB               	movwf	___fldiv@a+3
 19018  1208  3000               	movlw	0
 19019  1209  00CA               	movwf	___fldiv@a+2
 19020  120A  3000               	movlw	0
 19021  120B  00C9               	movwf	___fldiv@a+1
 19022  120C  3000               	movlw	0
 19023  120D  00C8               	movwf	___fldiv@a
 19024  120E                     l7482:	
 19025  120E  17CA               	bsf	___fldiv@a+2,7
 19026  120F  01CB               	clrf	___fldiv@a+3
 19027  1210  2A19               	goto	l1296
 19028  1211                     l7486:	
 19029  1211  3000               	movlw	0
 19030  1212  00CB               	movwf	___fldiv@a+3
 19031  1213  3000               	movlw	0
 19032  1214  00CA               	movwf	___fldiv@a+2
 19033  1215  3000               	movlw	0
 19034  1216  00C9               	movwf	___fldiv@a+1
 19035  1217  3000               	movlw	0
 19036  1218  00C8               	movwf	___fldiv@a
 19037  1219                     l1296:	
 19038  1219  084B               	movf	___fldiv@a+3,w
 19039  121A  044A               	iorwf	___fldiv@a+2,w
 19040  121B  0449               	iorwf	___fldiv@a+1,w
 19041  121C  0448               	iorwf	___fldiv@a,w
 19042  121D  1D03               	skipz
 19043  121E  2A38               	goto	l7496
 19044  121F  3000               	movlw	0
 19045  1220  00CF               	movwf	___fldiv@b+3
 19046  1221  3000               	movlw	0
 19047  1222  00CE               	movwf	___fldiv@b+2
 19048  1223  3000               	movlw	0
 19049  1224  00CD               	movwf	___fldiv@b+1
 19050  1225  3000               	movlw	0
 19051  1226  00CC               	movwf	___fldiv@b
 19052  1227  3080               	movlw	128
 19053  1228  04CE               	iorwf	___fldiv@b+2,f
 19054  1229  307F               	movlw	127
 19055  122A  04CF               	iorwf	___fldiv@b+3,f
 19056  122B                     L18:	
 19057  122B  0859               	movf	___fldiv@sign,w
 19058  122C  00D0               	movwf	??___fldiv
 19059  122D  0850               	movf	??___fldiv,w
 19060  122E  04CF               	iorwf	___fldiv@b+3,f
 19061  122F  084F               	movf	___fldiv@b+3,w
 19062  1230  00CB               	movwf	?___fldiv+3
 19063  1231  084E               	movf	___fldiv@b+2,w
 19064  1232  00CA               	movwf	?___fldiv+2
 19065  1233  084D               	movf	___fldiv@b+1,w
 19066  1234  00C9               	movwf	?___fldiv+1
 19067  1235  084C               	movf	___fldiv@b,w
 19068  1236  00C8               	movwf	?___fldiv
 19069  1237  0008               	return
 19070  1238                     l7496:	
 19071  1238  0860               	movf	___fldiv@bexp,w
 19072  1239  1D03               	btfss	3,2
 19073  123A  2A44               	goto	l7502
 19074  123B  3000               	movlw	0
 19075  123C  00CB               	movwf	?___fldiv+3
 19076  123D  3000               	movlw	0
 19077  123E  00CA               	movwf	?___fldiv+2
 19078  123F  3000               	movlw	0
 19079  1240  00C9               	movwf	?___fldiv+1
 19080  1241  3000               	movlw	0
 19081  1242  00C8               	movwf	?___fldiv
 19082  1243  0008               	return
 19083  1244                     l7502:	
 19084  1244  0860               	movf	___fldiv@bexp,w
 19085  1245  00D0               	movwf	??___fldiv
 19086  1246  01D1               	clrf	??___fldiv+1
 19087  1247  0851               	movf	??___fldiv+1,w
 19088  1248  00D3               	movwf	??___fldiv+3
 19089  1249  0861               	movf	___fldiv@aexp,w
 19090  124A  0250               	subwf	??___fldiv,w
 19091  124B  00D2               	movwf	??___fldiv+2
 19092  124C  1C03               	skipc
 19093  124D  03D3               	decf	??___fldiv+3,f
 19094  124E  0852               	movf	??___fldiv+2,w
 19095  124F  3E7F               	addlw	127
 19096  1250  00DA               	movwf	___fldiv@new_exp
 19097  1251  3000               	movlw	0
 19098  1252  3D53               	addwfc	??___fldiv+3,w
 19099  1253  00DB               	movwf	___fldiv@new_exp+1
 19100  1254  084F               	movf	___fldiv@b+3,w
 19101  1255  00D8               	movwf	___fldiv@rem+3
 19102  1256  084E               	movf	___fldiv@b+2,w
 19103  1257  00D7               	movwf	___fldiv@rem+2
 19104  1258  084D               	movf	___fldiv@b+1,w
 19105  1259  00D6               	movwf	___fldiv@rem+1
 19106  125A  084C               	movf	___fldiv@b,w
 19107  125B  00D5               	movwf	___fldiv@rem
 19108  125C  3000               	movlw	0
 19109  125D  00CF               	movwf	___fldiv@b+3
 19110  125E  3000               	movlw	0
 19111  125F  00CE               	movwf	___fldiv@b+2
 19112  1260  3000               	movlw	0
 19113  1261  00CD               	movwf	___fldiv@b+1
 19114  1262  3000               	movlw	0
 19115  1263  00CC               	movwf	___fldiv@b
 19116  1264  3000               	movlw	0
 19117  1265  00DF               	movwf	___fldiv@grs+3
 19118  1266  3000               	movlw	0
 19119  1267  00DE               	movwf	___fldiv@grs+2
 19120  1268  3000               	movlw	0
 19121  1269  00DD               	movwf	___fldiv@grs+1
 19122  126A  3000               	movlw	0
 19123  126B  00DC               	movwf	___fldiv@grs
 19124  126C  01E1               	clrf	___fldiv@aexp
 19125  126D                     l7530:	
 19126  126D  301A               	movlw	26
 19127  126E  0261               	subwf	___fldiv@aexp,w
 19128  126F  1803               	btfsc	3,0
 19129  1270  2AA9               	goto	l7532
 19130  1271  0861               	movf	___fldiv@aexp,w
 19131  1272  1903               	btfsc	3,2
 19132  1273  2A8B               	goto	l7522
 19133  1274  3001               	movlw	1
 19134  1275                     u10225:	
 19135  1275  35D5               	lslf	___fldiv@rem,f
 19136  1276  0DD6               	rlf	___fldiv@rem+1,f
 19137  1277  0DD7               	rlf	___fldiv@rem+2,f
 19138  1278  0DD8               	rlf	___fldiv@rem+3,f
 19139  1279  0B89               	decfsz	9,f
 19140  127A  2A75               	goto	u10225
 19141  127B  3001               	movlw	1
 19142  127C                     u10235:	
 19143  127C  35CC               	lslf	___fldiv@b,f
 19144  127D  0DCD               	rlf	___fldiv@b+1,f
 19145  127E  0DCE               	rlf	___fldiv@b+2,f
 19146  127F  0DCF               	rlf	___fldiv@b+3,f
 19147  1280  0B89               	decfsz	9,f
 19148  1281  2A7C               	goto	u10235
 19149  1282  1BDF               	btfsc	___fldiv@grs+3,7
 19150  1283  144C               	bsf	___fldiv@b,0
 19151  1284  3001               	movlw	1
 19152  1285                     u10255:	
 19153  1285  35DC               	lslf	___fldiv@grs,f
 19154  1286  0DDD               	rlf	___fldiv@grs+1,f
 19155  1287  0DDE               	rlf	___fldiv@grs+2,f
 19156  1288  0DDF               	rlf	___fldiv@grs+3,f
 19157  1289  0B89               	decfsz	9,f
 19158  128A  2A85               	goto	u10255
 19159  128B                     l7522:	
 19160  128B  084B               	movf	___fldiv@a+3,w
 19161  128C  0258               	subwf	___fldiv@rem+3,w
 19162  128D  1D03               	skipz
 19163  128E  2A99               	goto	u10265
 19164  128F  084A               	movf	___fldiv@a+2,w
 19165  1290  0257               	subwf	___fldiv@rem+2,w
 19166  1291  1D03               	skipz
 19167  1292  2A99               	goto	u10265
 19168  1293  0849               	movf	___fldiv@a+1,w
 19169  1294  0256               	subwf	___fldiv@rem+1,w
 19170  1295  1D03               	skipz
 19171  1296  2A99               	goto	u10265
 19172  1297  0848               	movf	___fldiv@a,w
 19173  1298  0255               	subwf	___fldiv@rem,w
 19174  1299                     u10265:	
 19175  1299  1C03               	skipc
 19176  129A  2AA4               	goto	l7528
 19177  129B  175F               	bsf	___fldiv@grs+3,6
 19178  129C  0848               	movf	___fldiv@a,w
 19179  129D  02D5               	subwf	___fldiv@rem,f
 19180  129E  0849               	movf	___fldiv@a+1,w
 19181  129F  3BD6               	subwfb	___fldiv@rem+1,f
 19182  12A0  084A               	movf	___fldiv@a+2,w
 19183  12A1  3BD7               	subwfb	___fldiv@rem+2,f
 19184  12A2  084B               	movf	___fldiv@a+3,w
 19185  12A3  3BD8               	subwfb	___fldiv@rem+3,f
 19186  12A4                     l7528:	
 19187  12A4  3001               	movlw	1
 19188  12A5  00D0               	movwf	??___fldiv
 19189  12A6  0850               	movf	??___fldiv,w
 19190  12A7  07E1               	addwf	___fldiv@aexp,f
 19191  12A8  2A6D               	goto	l7530
 19192  12A9                     l7532:	
 19193  12A9  0858               	movf	___fldiv@rem+3,w
 19194  12AA  0457               	iorwf	___fldiv@rem+2,w
 19195  12AB  0456               	iorwf	___fldiv@rem+1,w
 19196  12AC  0455               	iorwf	___fldiv@rem,w
 19197  12AD  1D03               	btfss	3,2
 19198  12AE  145C               	bsf	___fldiv@grs,0
 19199  12AF                     l7546:	
 19200  12AF  1BCE               	btfsc	___fldiv@b+2,7
 19201  12B0  2AC6               	goto	l7548
 19202  12B1  3001               	movlw	1
 19203  12B2                     u10295:	
 19204  12B2  35CC               	lslf	___fldiv@b,f
 19205  12B3  0DCD               	rlf	___fldiv@b+1,f
 19206  12B4  0DCE               	rlf	___fldiv@b+2,f
 19207  12B5  0DCF               	rlf	___fldiv@b+3,f
 19208  12B6  0B89               	decfsz	9,f
 19209  12B7  2AB2               	goto	u10295
 19210  12B8  1BDF               	btfsc	___fldiv@grs+3,7
 19211  12B9  144C               	bsf	___fldiv@b,0
 19212  12BA  3001               	movlw	1
 19213  12BB                     u10315:	
 19214  12BB  35DC               	lslf	___fldiv@grs,f
 19215  12BC  0DDD               	rlf	___fldiv@grs+1,f
 19216  12BD  0DDE               	rlf	___fldiv@grs+2,f
 19217  12BE  0DDF               	rlf	___fldiv@grs+3,f
 19218  12BF  0B89               	decfsz	9,f
 19219  12C0  2ABB               	goto	u10315
 19220  12C1  30FF               	movlw	255
 19221  12C2  07DA               	addwf	___fldiv@new_exp,f
 19222  12C3  30FF               	movlw	255
 19223  12C4  3DDB               	addwfc	___fldiv@new_exp+1,f
 19224  12C5  2AAF               	goto	l7546
 19225  12C6                     l7548:	
 19226  12C6  01E1               	clrf	___fldiv@aexp
 19227  12C7  1FDF               	btfss	___fldiv@grs+3,7
 19228  12C8  2ADF               	goto	l7558
 19229  12C9  30FF               	movlw	255
 19230  12CA  055C               	andwf	___fldiv@grs,w
 19231  12CB  00D0               	movwf	??___fldiv
 19232  12CC  30FF               	movlw	255
 19233  12CD  055D               	andwf	___fldiv@grs+1,w
 19234  12CE  00D1               	movwf	??___fldiv+1
 19235  12CF  30FF               	movlw	255
 19236  12D0  055E               	andwf	___fldiv@grs+2,w
 19237  12D1  00D2               	movwf	??___fldiv+2
 19238  12D2  307F               	movlw	127
 19239  12D3  055F               	andwf	___fldiv@grs+3,w
 19240  12D4  00D3               	movwf	??___fldiv+3
 19241  12D5  0853               	movf	??___fldiv+3,w
 19242  12D6  0452               	iorwf	??___fldiv+2,w
 19243  12D7  0451               	iorwf	??___fldiv+1,w
 19244  12D8  0450               	iorwf	??___fldiv,w
 19245  12D9  1903               	skipnz
 19246  12DA  184C               	btfsc	___fldiv@b,0
 19247  12DB  2ADD               	goto	l7554
 19248  12DC  2ADF               	goto	l7558
 19249  12DD                     l7554:	
 19250  12DD  01E1               	clrf	___fldiv@aexp
 19251  12DE  0AE1               	incf	___fldiv@aexp,f
 19252  12DF                     l7558:	
 19253  12DF  0861               	movf	___fldiv@aexp,w
 19254  12E0  1903               	btfsc	3,2
 19255  12E1  2B08               	goto	l7568
 19256  12E2  3001               	movlw	1
 19257  12E3  07CC               	addwf	___fldiv@b,f
 19258  12E4  3000               	movlw	0
 19259  12E5  3DCD               	addwfc	___fldiv@b+1,f
 19260  12E6  3000               	movlw	0
 19261  12E7  3DCE               	addwfc	___fldiv@b+2,f
 19262  12E8  3000               	movlw	0
 19263  12E9  3DCF               	addwfc	___fldiv@b+3,f
 19264  12EA  1C4F               	btfss	___fldiv@b+3,0
 19265  12EB  2B08               	goto	l7568
 19266  12EC  084C               	movf	___fldiv@b,w
 19267  12ED  00D0               	movwf	??___fldiv
 19268  12EE  084D               	movf	___fldiv@b+1,w
 19269  12EF  00D1               	movwf	??___fldiv+1
 19270  12F0  084E               	movf	___fldiv@b+2,w
 19271  12F1  00D2               	movwf	??___fldiv+2
 19272  12F2  084F               	movf	___fldiv@b+3,w
 19273  12F3  00D3               	movwf	??___fldiv+3
 19274  12F4  3001               	movlw	1
 19275  12F5  00D4               	movwf	??___fldiv+4
 19276  12F6                     u10385:	
 19277  12F6  37D3               	asrf	??___fldiv+3,f
 19278  12F7  0CD2               	rrf	??___fldiv+2,f
 19279  12F8  0CD1               	rrf	??___fldiv+1,f
 19280  12F9  0CD0               	rrf	??___fldiv,f
 19281  12FA  0BD4               	decfsz	??___fldiv+4,f
 19282  12FB  2AF6               	goto	u10385
 19283  12FC  0853               	movf	??___fldiv+3,w
 19284  12FD  00CF               	movwf	___fldiv@b+3
 19285  12FE  0852               	movf	??___fldiv+2,w
 19286  12FF  00CE               	movwf	___fldiv@b+2
 19287  1300  0851               	movf	??___fldiv+1,w
 19288  1301  00CD               	movwf	___fldiv@b+1
 19289  1302  0850               	movf	??___fldiv,w
 19290  1303  00CC               	movwf	___fldiv@b
 19291  1304  3001               	movlw	1
 19292  1305  07DA               	addwf	___fldiv@new_exp,f
 19293  1306  3000               	movlw	0
 19294  1307  3DDB               	addwfc	___fldiv@new_exp+1,f
 19295  1308                     l7568:	
 19296  1308  085B               	movf	___fldiv@new_exp+1,w
 19297  1309  3A80               	xorlw	128
 19298  130A  00D0               	movwf	??___fldiv
 19299  130B  3080               	movlw	128
 19300  130C  0250               	subwf	??___fldiv,w
 19301  130D  1D03               	skipz
 19302  130E  2B11               	goto	u10395
 19303  130F  30FF               	movlw	255
 19304  1310  025A               	subwf	___fldiv@new_exp,w
 19305  1311                     u10395:	
 19306  1311  1C03               	skipc
 19307  1312  2B20               	goto	l1317
 19308  1313  30FF               	movlw	255
 19309  1314  0140               	movlb	0	; select bank0
 19310  1315  00DA               	movwf	___fldiv@new_exp
 19311  1316  3000               	movlw	0
 19312  1317  00DB               	movwf	___fldiv@new_exp+1
 19313  1318  3000               	movlw	0
 19314  1319  00CF               	movwf	___fldiv@b+3
 19315  131A  3000               	movlw	0
 19316  131B  00CE               	movwf	___fldiv@b+2
 19317  131C  3000               	movlw	0
 19318  131D  00CD               	movwf	___fldiv@b+1
 19319  131E  3000               	movlw	0
 19320  131F  00CC               	movwf	___fldiv@b
 19321  1320                     l1317:	
 19322  1320  0140               	movlb	0	; select bank0
 19323  1321  085B               	movf	___fldiv@new_exp+1,w
 19324  1322  3A80               	xorlw	128
 19325  1323  00D0               	movwf	??___fldiv
 19326  1324  3080               	movlw	128
 19327  1325  0250               	subwf	??___fldiv,w
 19328  1326  1D03               	skipz
 19329  1327  2B2A               	goto	u10405
 19330  1328  3001               	movlw	1
 19331  1329  025A               	subwf	___fldiv@new_exp,w
 19332  132A                     u10405:	
 19333  132A  1803               	skipnc
 19334  132B  2B38               	goto	l1318
 19335  132C  0140               	movlb	0	; select bank0
 19336  132D  01DA               	clrf	___fldiv@new_exp
 19337  132E  01DB               	clrf	___fldiv@new_exp+1
 19338  132F  3000               	movlw	0
 19339  1330  00CF               	movwf	___fldiv@b+3
 19340  1331  3000               	movlw	0
 19341  1332  00CE               	movwf	___fldiv@b+2
 19342  1333  3000               	movlw	0
 19343  1334  00CD               	movwf	___fldiv@b+1
 19344  1335  3000               	movlw	0
 19345  1336  00CC               	movwf	___fldiv@b
 19346  1337  01D9               	clrf	___fldiv@sign
 19347  1338                     l1318:	
 19348  1338  0140               	movlb	0	; select bank0
 19349  1339  085A               	movf	___fldiv@new_exp,w
 19350  133A  00D0               	movwf	??___fldiv
 19351  133B  0850               	movf	??___fldiv,w
 19352  133C  00E0               	movwf	___fldiv@bexp
 19353  133D  1C60               	btfss	___fldiv@bexp,0
 19354  133E  2B41               	goto	l7582
 19355  133F  17CE               	bsf	___fldiv@b+2,7
 19356  1340  2B45               	goto	l1320
 19357  1341                     l7582:	
 19358  1341  307F               	movlw	127
 19359  1342  00D0               	movwf	??___fldiv
 19360  1343  0850               	movf	??___fldiv,w
 19361  1344  05CE               	andwf	___fldiv@b+2,f
 19362  1345                     l1320:	
 19363  1345  3660               	lsrf	___fldiv@bexp,w
 19364  1346  00D0               	movwf	??___fldiv
 19365  1347  0850               	movf	??___fldiv,w
 19366  1348  00CF               	movwf	___fldiv@b+3
 19367  1349  2A2B               	goto	L18
 19368  134A                     __end_of___fldiv:	
 19369                           
 19370                           	psect	text64
 19371  0845                     __ptext64:	
 19372 ;; *************** function ___fladd *****************
 19373 ;; Defined at:
 19374 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\sprcadd.c"
 19375 ;; Parameters:    Size  Location     Type
 19376 ;;  b               4   40[BANK0 ] unsigned char 
 19377 ;;  a               4   44[BANK0 ] unsigned char 
 19378 ;; Auto vars:     Size  Location     Type
 19379 ;;  grs             1   59[BANK0 ] unsigned char 
 19380 ;;  bexp            1   58[BANK0 ] unsigned char 
 19381 ;;  aexp            1   57[BANK0 ] unsigned char 
 19382 ;;  signs           1   56[BANK0 ] unsigned char 
 19383 ;; Return value:  Size  Location     Type
 19384 ;;                  4   40[BANK0 ] unsigned char 
 19385 ;; Registers used:
 19386 ;;		wreg, status,2, status,0
 19387 ;; Tracked objects:
 19388 ;;		On entry : 0/0
 19389 ;;		On exit  : 0/0
 19390 ;;		Unchanged: 0/0
 19391 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19392 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19393 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19394 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19395 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19396 ;;Total ram usage:       20 bytes
 19397 ;; Hardware stack levels used:    1
 19398 ;; Hardware stack levels required when called:    3
 19399 ;; This function calls:
 19400 ;;		Nothing
 19401 ;; This function is called by:
 19402 ;;		_convertAnalogValues
 19403 ;;		_spinInput
 19404 ;;		_efgtoa
 19405 ;;		___flsub
 19406 ;;		_calcRequiredPower
 19407 ;; This function uses a non-reentrant model
 19408 ;;
 19409                           
 19410                           
 19411                           ;psect for function ___fladd
 19412  0845                     ___fladd:	
 19413                           
 19414                           ;incstack = 0
 19415                           ; Regs used in ___fladd: [wreg+status,2+status,0]
 19416  0845  0140               	movlb	0	; select bank0
 19417  0846  084B               	movf	___fladd@b+3,w
 19418  0847  3980               	andlw	128
 19419  0848  00D0               	movwf	??___fladd
 19420  0849  0850               	movf	??___fladd,w
 19421  084A  00D8               	movwf	___fladd@signs
 19422  084B  354B               	lslf	___fladd@b+3,w
 19423  084C  00D0               	movwf	??___fladd
 19424  084D  0850               	movf	??___fladd,w
 19425  084E  00DA               	movwf	___fladd@bexp
 19426  084F  1BCA               	btfsc	___fladd@b+2,7
 19427  0850  145A               	bsf	___fladd@bexp,0
 19428  0851  085A               	movf	___fladd@bexp,w
 19429  0852  1903               	btfsc	3,2
 19430  0853  2862               	goto	l6908
 19431  0854  0A5A               	incf	___fladd@bexp,w
 19432  0855  1D03               	btfss	3,2
 19433  0856  285F               	goto	l6904
 19434  0857  3000               	movlw	0
 19435  0858  00CB               	movwf	___fladd@b+3
 19436  0859  3000               	movlw	0
 19437  085A  00CA               	movwf	___fladd@b+2
 19438  085B  3000               	movlw	0
 19439  085C  00C9               	movwf	___fladd@b+1
 19440  085D  3000               	movlw	0
 19441  085E  00C8               	movwf	___fladd@b
 19442  085F                     l6904:	
 19443  085F  17CA               	bsf	___fladd@b+2,7
 19444  0860  01CB               	clrf	___fladd@b+3
 19445  0861  286A               	goto	l6910
 19446  0862                     l6908:	
 19447  0862  3000               	movlw	0
 19448  0863  00CB               	movwf	___fladd@b+3
 19449  0864  3000               	movlw	0
 19450  0865  00CA               	movwf	___fladd@b+2
 19451  0866  3000               	movlw	0
 19452  0867  00C9               	movwf	___fladd@b+1
 19453  0868  3000               	movlw	0
 19454  0869  00C8               	movwf	___fladd@b
 19455  086A                     l6910:	
 19456  086A  084F               	movf	___fladd@a+3,w
 19457  086B  3980               	andlw	128
 19458  086C  00D0               	movwf	??___fladd
 19459  086D  0850               	movf	??___fladd,w
 19460  086E  00D9               	movwf	___fladd@aexp
 19461  086F  0859               	movf	___fladd@aexp,w
 19462  0870  0658               	xorwf	___fladd@signs,w
 19463  0871  1D03               	btfss	3,2
 19464  0872  1758               	bsf	___fladd@signs,6
 19465  0873  354F               	lslf	___fladd@a+3,w
 19466  0874  00D0               	movwf	??___fladd
 19467  0875  0850               	movf	??___fladd,w
 19468  0876  00D9               	movwf	___fladd@aexp
 19469  0877  1BCE               	btfsc	___fladd@a+2,7
 19470  0878  1459               	bsf	___fladd@aexp,0
 19471  0879  0859               	movf	___fladd@aexp,w
 19472  087A  1903               	btfsc	3,2
 19473  087B  288A               	goto	l6932
 19474  087C  0A59               	incf	___fladd@aexp,w
 19475  087D  1D03               	btfss	3,2
 19476  087E  2887               	goto	l6928
 19477  087F  3000               	movlw	0
 19478  0880  00CF               	movwf	___fladd@a+3
 19479  0881  3000               	movlw	0
 19480  0882  00CE               	movwf	___fladd@a+2
 19481  0883  3000               	movlw	0
 19482  0884  00CD               	movwf	___fladd@a+1
 19483  0885  3000               	movlw	0
 19484  0886  00CC               	movwf	___fladd@a
 19485  0887                     l6928:	
 19486  0887  17CE               	bsf	___fladd@a+2,7
 19487  0888  01CF               	clrf	___fladd@a+3
 19488  0889  2892               	goto	l1240
 19489  088A                     l6932:	
 19490  088A  3000               	movlw	0
 19491  088B  00CF               	movwf	___fladd@a+3
 19492  088C  3000               	movlw	0
 19493  088D  00CE               	movwf	___fladd@a+2
 19494  088E  3000               	movlw	0
 19495  088F  00CD               	movwf	___fladd@a+1
 19496  0890  3000               	movlw	0
 19497  0891  00CC               	movwf	___fladd@a
 19498  0892                     l1240:	
 19499  0892  085A               	movf	___fladd@bexp,w
 19500  0893  0259               	subwf	___fladd@aexp,w
 19501  0894  1803               	skipnc
 19502  0895  28D8               	goto	l6968
 19503  0896  1F58               	btfss	___fladd@signs,6
 19504  0897  289C               	goto	l6938
 19505  0898  3080               	movlw	128
 19506  0899  00D0               	movwf	??___fladd
 19507  089A  0850               	movf	??___fladd,w
 19508  089B  06D8               	xorwf	___fladd@signs,f
 19509  089C                     l6938:	
 19510  089C  085A               	movf	___fladd@bexp,w
 19511  089D  00D0               	movwf	??___fladd
 19512  089E  0850               	movf	??___fladd,w
 19513  089F  00DB               	movwf	___fladd@grs
 19514  08A0  0859               	movf	___fladd@aexp,w
 19515  08A1  00D0               	movwf	??___fladd
 19516  08A2  0850               	movf	??___fladd,w
 19517  08A3  00DA               	movwf	___fladd@bexp
 19518  08A4  085B               	movf	___fladd@grs,w
 19519  08A5  00D0               	movwf	??___fladd
 19520  08A6  0850               	movf	??___fladd,w
 19521  08A7  00D9               	movwf	___fladd@aexp
 19522  08A8  0848               	movf	___fladd@b,w
 19523  08A9  00D0               	movwf	??___fladd
 19524  08AA  0850               	movf	??___fladd,w
 19525  08AB  00DB               	movwf	___fladd@grs
 19526  08AC  084C               	movf	___fladd@a,w
 19527  08AD  00D0               	movwf	??___fladd
 19528  08AE  0850               	movf	??___fladd,w
 19529  08AF  00C8               	movwf	___fladd@b
 19530  08B0  085B               	movf	___fladd@grs,w
 19531  08B1  00D0               	movwf	??___fladd
 19532  08B2  0850               	movf	??___fladd,w
 19533  08B3  00CC               	movwf	___fladd@a
 19534  08B4  0849               	movf	___fladd@b+1,w
 19535  08B5  00D0               	movwf	??___fladd
 19536  08B6  0850               	movf	??___fladd,w
 19537  08B7  00DB               	movwf	___fladd@grs
 19538  08B8  084D               	movf	___fladd@a+1,w
 19539  08B9  00D0               	movwf	??___fladd
 19540  08BA  0850               	movf	??___fladd,w
 19541  08BB  00C9               	movwf	___fladd@b+1
 19542  08BC  085B               	movf	___fladd@grs,w
 19543  08BD  00D0               	movwf	??___fladd
 19544  08BE  0850               	movf	??___fladd,w
 19545  08BF  00CD               	movwf	___fladd@a+1
 19546  08C0  084A               	movf	___fladd@b+2,w
 19547  08C1  00D0               	movwf	??___fladd
 19548  08C2  0850               	movf	??___fladd,w
 19549  08C3  00DB               	movwf	___fladd@grs
 19550  08C4  084E               	movf	___fladd@a+2,w
 19551  08C5  00D0               	movwf	??___fladd
 19552  08C6  0850               	movf	??___fladd,w
 19553  08C7  00CA               	movwf	___fladd@b+2
 19554  08C8  085B               	movf	___fladd@grs,w
 19555  08C9  00D0               	movwf	??___fladd
 19556  08CA  0850               	movf	??___fladd,w
 19557  08CB  00CE               	movwf	___fladd@a+2
 19558  08CC  084B               	movf	___fladd@b+3,w
 19559  08CD  00D0               	movwf	??___fladd
 19560  08CE  0850               	movf	??___fladd,w
 19561  08CF  00DB               	movwf	___fladd@grs
 19562  08D0  084F               	movf	___fladd@a+3,w
 19563  08D1  00D0               	movwf	??___fladd
 19564  08D2  0850               	movf	??___fladd,w
 19565  08D3  00CB               	movwf	___fladd@b+3
 19566  08D4  085B               	movf	___fladd@grs,w
 19567  08D5  00D0               	movwf	??___fladd
 19568  08D6  0850               	movf	??___fladd,w
 19569  08D7  00CF               	movwf	___fladd@a+3
 19570  08D8                     l6968:	
 19571  08D8  01DB               	clrf	___fladd@grs
 19572  08D9  0859               	movf	___fladd@aexp,w
 19573  08DA  00D0               	movwf	??___fladd
 19574  08DB  01D1               	clrf	??___fladd+1
 19575  08DC  0851               	movf	??___fladd+1,w
 19576  08DD  00D3               	movwf	??___fladd+3
 19577  08DE  085A               	movf	___fladd@bexp,w
 19578  08DF  0250               	subwf	??___fladd,w
 19579  08E0  00D2               	movwf	??___fladd+2
 19580  08E1  1C03               	skipc
 19581  08E2  03D3               	decf	??___fladd+3,f
 19582  08E3  0853               	movf	??___fladd+3,w
 19583  08E4  3A80               	xorlw	128
 19584  08E5  00D4               	movwf	??___fladd+4
 19585  08E6  3080               	movlw	128
 19586  08E7  0254               	subwf	??___fladd+4,w
 19587  08E8  1D03               	skipz
 19588  08E9  28EC               	goto	u8805
 19589  08EA  301A               	movlw	26
 19590  08EB  0252               	subwf	??___fladd+2,w
 19591  08EC                     u8805:	
 19592  08EC  1C03               	skipc
 19593  08ED  2920               	goto	l6986
 19594  08EE  0140               	movlb	0	; select bank0
 19595  08EF  084B               	movf	___fladd@b+3,w
 19596  08F0  044A               	iorwf	___fladd@b+2,w
 19597  08F1  0449               	iorwf	___fladd@b+1,w
 19598  08F2  0448               	iorwf	___fladd@b,w
 19599  08F3  1903               	btfsc	3,2
 19600  08F4  28F7               	goto	u8810
 19601  08F5  3001               	movlw	1
 19602  08F6  28F8               	goto	u8820
 19603  08F7                     u8810:	
 19604  08F7  3000               	movlw	0
 19605  08F8                     u8820:	
 19606  08F8  00D0               	movwf	??___fladd
 19607  08F9  0850               	movf	??___fladd,w
 19608  08FA  00DB               	movwf	___fladd@grs
 19609  08FB  3000               	movlw	0
 19610  08FC  00CB               	movwf	___fladd@b+3
 19611  08FD  3000               	movlw	0
 19612  08FE  00CA               	movwf	___fladd@b+2
 19613  08FF  3000               	movlw	0
 19614  0900  00C9               	movwf	___fladd@b+1
 19615  0901  3000               	movlw	0
 19616  0902  00C8               	movwf	___fladd@b
 19617  0903  0859               	movf	___fladd@aexp,w
 19618  0904  00D0               	movwf	??___fladd
 19619  0905  0850               	movf	??___fladd,w
 19620  0906  00DA               	movwf	___fladd@bexp
 19621  0907  2925               	goto	l1244
 19622  0908                     l1246:	
 19623  0908  1C5B               	btfss	___fladd@grs,0
 19624  0909  2910               	goto	l6976
 19625  090A  365B               	lsrf	___fladd@grs,w
 19626  090B  3801               	iorlw	1
 19627  090C  00D0               	movwf	??___fladd
 19628  090D  0850               	movf	??___fladd,w
 19629  090E  00DB               	movwf	___fladd@grs
 19630  090F  2912               	goto	l6978
 19631  0910                     l6976:	
 19632  0910  1003               	clrc
 19633  0911  0CDB               	rrf	___fladd@grs,f
 19634  0912                     l6978:	
 19635  0912  1848               	btfsc	___fladd@b,0
 19636  0913  17DB               	bsf	___fladd@grs,7
 19637  0914  3001               	movlw	1
 19638  0915  00D0               	movwf	??___fladd
 19639  0916                     u8855:	
 19640  0916  37CB               	asrf	___fladd@b+3,f
 19641  0917  0CCA               	rrf	___fladd@b+2,f
 19642  0918  0CC9               	rrf	___fladd@b+1,f
 19643  0919  0CC8               	rrf	___fladd@b,f
 19644  091A  0BD0               	decfsz	??___fladd& (0+127),f
 19645  091B  2916               	goto	u8855
 19646  091C  3001               	movlw	1
 19647  091D  00D0               	movwf	??___fladd
 19648  091E  0850               	movf	??___fladd,w
 19649  091F  07DA               	addwf	___fladd@bexp,f
 19650  0920                     l6986:	
 19651  0920  0140               	movlb	0	; select bank0
 19652  0921  0859               	movf	___fladd@aexp,w
 19653  0922  025A               	subwf	___fladd@bexp,w
 19654  0923  1C03               	skipc
 19655  0924  2908               	goto	l1246
 19656  0925                     l1244:	
 19657  0925  1B58               	btfsc	___fladd@signs,6
 19658  0926  2956               	goto	l7012
 19659  0927  085A               	movf	___fladd@bexp,w
 19660  0928  1D03               	btfss	3,2
 19661  0929  2933               	goto	l6994
 19662  092A  3000               	movlw	0
 19663  092B  00CB               	movwf	?___fladd+3
 19664  092C  3000               	movlw	0
 19665  092D  00CA               	movwf	?___fladd+2
 19666  092E  3000               	movlw	0
 19667  092F  00C9               	movwf	?___fladd+1
 19668  0930  3000               	movlw	0
 19669  0931  00C8               	movwf	?___fladd
 19670  0932  0008               	return
 19671  0933                     l6994:	
 19672  0933  084C               	movf	___fladd@a,w
 19673  0934  07C8               	addwf	___fladd@b,f
 19674  0935  084D               	movf	___fladd@a+1,w
 19675  0936  3DC9               	addwfc	___fladd@b+1,f
 19676  0937  084E               	movf	___fladd@a+2,w
 19677  0938  3DCA               	addwfc	___fladd@b+2,f
 19678  0939  084F               	movf	___fladd@a+3,w
 19679  093A  3DCB               	addwfc	___fladd@b+3,f
 19680  093B  1C4B               	btfss	___fladd@b+3,0
 19681  093C  29D0               	goto	l7046
 19682  093D  1C5B               	btfss	___fladd@grs,0
 19683  093E  2945               	goto	l7002
 19684  093F  365B               	lsrf	___fladd@grs,w
 19685  0940  3801               	iorlw	1
 19686  0941  00D0               	movwf	??___fladd
 19687  0942  0850               	movf	??___fladd,w
 19688  0943  00DB               	movwf	___fladd@grs
 19689  0944  2947               	goto	l7004
 19690  0945                     l7002:	
 19691  0945  1003               	clrc
 19692  0946  0CDB               	rrf	___fladd@grs,f
 19693  0947                     l7004:	
 19694  0947  1848               	btfsc	___fladd@b,0
 19695  0948  17DB               	bsf	___fladd@grs,7
 19696  0949  3001               	movlw	1
 19697  094A  00D0               	movwf	??___fladd
 19698  094B                     u8925:	
 19699  094B  37CB               	asrf	___fladd@b+3,f
 19700  094C  0CCA               	rrf	___fladd@b+2,f
 19701  094D  0CC9               	rrf	___fladd@b+1,f
 19702  094E  0CC8               	rrf	___fladd@b,f
 19703  094F  0BD0               	decfsz	??___fladd& (0+127),f
 19704  0950  294B               	goto	u8925
 19705  0951  3001               	movlw	1
 19706  0952  00D0               	movwf	??___fladd
 19707  0953  0850               	movf	??___fladd,w
 19708  0954  07DA               	addwf	___fladd@bexp,f
 19709  0955  29D0               	goto	l7046
 19710  0956                     l7012:	
 19711  0956  084B               	movf	___fladd@b+3,w
 19712  0957  3A80               	xorlw	128
 19713  0958  00D0               	movwf	??___fladd
 19714  0959  084F               	movf	___fladd@a+3,w
 19715  095A  3A80               	xorlw	128
 19716  095B  0250               	subwf	??___fladd,w
 19717  095C  1D03               	skipz
 19718  095D  2968               	goto	u8933
 19719  095E  084E               	movf	___fladd@a+2,w
 19720  095F  024A               	subwf	___fladd@b+2,w
 19721  0960  1D03               	skipz
 19722  0961  2968               	goto	u8933
 19723  0962  084D               	movf	___fladd@a+1,w
 19724  0963  0249               	subwf	___fladd@b+1,w
 19725  0964  1D03               	skipz
 19726  0965  2968               	goto	u8933
 19727  0966  084C               	movf	___fladd@a,w
 19728  0967  0248               	subwf	___fladd@b,w
 19729  0968                     u8933:	
 19730  0968  1803               	skipnc
 19731  0969  29A0               	goto	l7022
 19732  096A  30FF               	movlw	255
 19733  096B  00D0               	movwf	??___fladd
 19734  096C  30FF               	movlw	255
 19735  096D  00D1               	movwf	??___fladd+1
 19736  096E  30FF               	movlw	255
 19737  096F  00D2               	movwf	??___fladd+2
 19738  0970  30FF               	movlw	255
 19739  0971  00D3               	movwf	??___fladd+3
 19740  0972  0848               	movf	___fladd@b,w
 19741  0973  024C               	subwf	___fladd@a,w
 19742  0974  00D4               	movwf	??___fladd+4
 19743  0975  0849               	movf	___fladd@b+1,w
 19744  0976  3B4D               	subwfb	___fladd@a+1,w
 19745  0977  00D5               	movwf	??___fladd+5
 19746  0978  084A               	movf	___fladd@b+2,w
 19747  0979  3B4E               	subwfb	___fladd@a+2,w
 19748  097A  00D6               	movwf	??___fladd+6
 19749  097B  084B               	movf	___fladd@b+3,w
 19750  097C  3B4F               	subwfb	___fladd@a+3,w
 19751  097D  00D7               	movwf	??___fladd+7
 19752  097E  0854               	movf	??___fladd+4,w
 19753  097F  07D0               	addwf	??___fladd,f
 19754  0980  0855               	movf	??___fladd+5,w
 19755  0981  3DD1               	addwfc	??___fladd+1,f
 19756  0982  0856               	movf	??___fladd+6,w
 19757  0983  3DD2               	addwfc	??___fladd+2,f
 19758  0984  0857               	movf	??___fladd+7,w
 19759  0985  3DD3               	addwfc	??___fladd+3,f
 19760  0986  0853               	movf	??___fladd+3,w
 19761  0987  00CB               	movwf	___fladd@b+3
 19762  0988  0852               	movf	??___fladd+2,w
 19763  0989  00CA               	movwf	___fladd@b+2
 19764  098A  0851               	movf	??___fladd+1,w
 19765  098B  00C9               	movwf	___fladd@b+1
 19766  098C  0850               	movf	??___fladd,w
 19767  098D  00C8               	movwf	___fladd@b
 19768  098E  3080               	movlw	128
 19769  098F  00D0               	movwf	??___fladd
 19770  0990  0850               	movf	??___fladd,w
 19771  0991  06D8               	xorwf	___fladd@signs,f
 19772  0992  09DB               	comf	___fladd@grs,f
 19773  0993  0ADB               	incf	___fladd@grs,f
 19774  0994  085B               	movf	___fladd@grs,w
 19775  0995  1D03               	btfss	3,2
 19776  0996  29A8               	goto	l1261
 19777  0997  3001               	movlw	1
 19778  0998  07C8               	addwf	___fladd@b,f
 19779  0999  3000               	movlw	0
 19780  099A  3DC9               	addwfc	___fladd@b+1,f
 19781  099B  3000               	movlw	0
 19782  099C  3DCA               	addwfc	___fladd@b+2,f
 19783  099D  3000               	movlw	0
 19784  099E  3DCB               	addwfc	___fladd@b+3,f
 19785  099F  29A8               	goto	l1261
 19786  09A0                     l7022:	
 19787  09A0  084C               	movf	___fladd@a,w
 19788  09A1  02C8               	subwf	___fladd@b,f
 19789  09A2  084D               	movf	___fladd@a+1,w
 19790  09A3  3BC9               	subwfb	___fladd@b+1,f
 19791  09A4  084E               	movf	___fladd@a+2,w
 19792  09A5  3BCA               	subwfb	___fladd@b+2,f
 19793  09A6  084F               	movf	___fladd@a+3,w
 19794  09A7  3BCB               	subwfb	___fladd@b+3,f
 19795  09A8                     l1261:	
 19796  09A8  084B               	movf	___fladd@b+3,w
 19797  09A9  044A               	iorwf	___fladd@b+2,w
 19798  09AA  0449               	iorwf	___fladd@b+1,w
 19799  09AB  0448               	iorwf	___fladd@b,w
 19800  09AC  1D03               	skipz
 19801  09AD  29CE               	goto	l7044
 19802  09AE  085B               	movf	___fladd@grs,w
 19803  09AF  1D03               	btfss	3,2
 19804  09B0  29CE               	goto	l7044
 19805  09B1  3000               	movlw	0
 19806  09B2  00CB               	movwf	?___fladd+3
 19807  09B3  3000               	movlw	0
 19808  09B4  00CA               	movwf	?___fladd+2
 19809  09B5  3000               	movlw	0
 19810  09B6  00C9               	movwf	?___fladd+1
 19811  09B7  3000               	movlw	0
 19812  09B8  00C8               	movwf	?___fladd
 19813  09B9  0008               	return
 19814  09BA                     l7030:	
 19815  09BA  3001               	movlw	1
 19816  09BB                     u8975:	
 19817  09BB  35C8               	lslf	___fladd@b,f
 19818  09BC  0DC9               	rlf	___fladd@b+1,f
 19819  09BD  0DCA               	rlf	___fladd@b+2,f
 19820  09BE  0DCB               	rlf	___fladd@b+3,f
 19821  09BF  0B89               	decfsz	9,f
 19822  09C0  29BB               	goto	u8975
 19823  09C1  1BDB               	btfsc	___fladd@grs,7
 19824  09C2  1448               	bsf	___fladd@b,0
 19825  09C3  1C5B               	btfss	___fladd@grs,0
 19826  09C4  29C7               	goto	l7038
 19827  09C5  1403               	setc
 19828  09C6  29C8               	goto	L19
 19829  09C7                     l7038:	
 19830  09C7  1003               	clrc
 19831  09C8                     L19:	
 19832  09C8  0DDB               	rlf	___fladd@grs,f
 19833  09C9  085A               	movf	___fladd@bexp,w
 19834  09CA  1903               	btfsc	3,2
 19835  09CB  29CE               	goto	l7044
 19836  09CC  3001               	movlw	1
 19837  09CD  02DA               	subwf	___fladd@bexp,f
 19838  09CE                     l7044:	
 19839  09CE  1FCA               	btfss	___fladd@b+2,7
 19840  09CF  29BA               	goto	l7030
 19841  09D0                     l7046:	
 19842  09D0  01D9               	clrf	___fladd@aexp
 19843  09D1  1FDB               	btfss	___fladd@grs,7
 19844  09D2  29DB               	goto	l7056
 19845  09D3  085B               	movf	___fladd@grs,w
 19846  09D4  397F               	andlw	127
 19847  09D5  1903               	btfsc	3,2
 19848  09D6  1848               	btfsc	___fladd@b,0
 19849  09D7  29D9               	goto	l7052
 19850  09D8  29DB               	goto	l7056
 19851  09D9                     l7052:	
 19852  09D9  01D9               	clrf	___fladd@aexp
 19853  09DA  0AD9               	incf	___fladd@aexp,f
 19854  09DB                     l7056:	
 19855  09DB  0859               	movf	___fladd@aexp,w
 19856  09DC  1903               	btfsc	3,2
 19857  09DD  2A07               	goto	l1274
 19858  09DE  3001               	movlw	1
 19859  09DF  07C8               	addwf	___fladd@b,f
 19860  09E0  3000               	movlw	0
 19861  09E1  3DC9               	addwfc	___fladd@b+1,f
 19862  09E2  3000               	movlw	0
 19863  09E3  3DCA               	addwfc	___fladd@b+2,f
 19864  09E4  3000               	movlw	0
 19865  09E5  3DCB               	addwfc	___fladd@b+3,f
 19866  09E6  1C4B               	btfss	___fladd@b+3,0
 19867  09E7  2A07               	goto	l1274
 19868  09E8  0848               	movf	___fladd@b,w
 19869  09E9  00D0               	movwf	??___fladd
 19870  09EA  0849               	movf	___fladd@b+1,w
 19871  09EB  00D1               	movwf	??___fladd+1
 19872  09EC  084A               	movf	___fladd@b+2,w
 19873  09ED  00D2               	movwf	??___fladd+2
 19874  09EE  084B               	movf	___fladd@b+3,w
 19875  09EF  00D3               	movwf	??___fladd+3
 19876  09F0  3001               	movlw	1
 19877  09F1  00D4               	movwf	??___fladd+4
 19878  09F2                     u9075:	
 19879  09F2  37D3               	asrf	??___fladd+3,f
 19880  09F3  0CD2               	rrf	??___fladd+2,f
 19881  09F4  0CD1               	rrf	??___fladd+1,f
 19882  09F5  0CD0               	rrf	??___fladd,f
 19883  09F6  0BD4               	decfsz	??___fladd+4,f
 19884  09F7  29F2               	goto	u9075
 19885  09F8  0853               	movf	??___fladd+3,w
 19886  09F9  00CB               	movwf	___fladd@b+3
 19887  09FA  0852               	movf	??___fladd+2,w
 19888  09FB  00CA               	movwf	___fladd@b+2
 19889  09FC  0851               	movf	??___fladd+1,w
 19890  09FD  00C9               	movwf	___fladd@b+1
 19891  09FE  0850               	movf	??___fladd,w
 19892  09FF  00C8               	movwf	___fladd@b
 19893  0A00  0A5A               	incf	___fladd@bexp,w
 19894  0A01  1903               	btfsc	3,2
 19895  0A02  2A07               	goto	l1274
 19896  0A03  3001               	movlw	1
 19897  0A04  00D0               	movwf	??___fladd
 19898  0A05  0850               	movf	??___fladd,w
 19899  0A06  07DA               	addwf	___fladd@bexp,f
 19900  0A07                     l1274:	
 19901  0A07  0A5A               	incf	___fladd@bexp,w
 19902  0A08  1D03               	btfss	3,2
 19903  0A09  085A               	movf	___fladd@bexp,w
 19904  0A0A  1D03               	btfss	3,2
 19905  0A0B  2A17               	goto	l7074
 19906  0A0C  3000               	movlw	0
 19907  0A0D  00CB               	movwf	___fladd@b+3
 19908  0A0E  3000               	movlw	0
 19909  0A0F  00CA               	movwf	___fladd@b+2
 19910  0A10  3000               	movlw	0
 19911  0A11  00C9               	movwf	___fladd@b+1
 19912  0A12  3000               	movlw	0
 19913  0A13  00C8               	movwf	___fladd@b
 19914  0A14  085A               	movf	___fladd@bexp,w
 19915  0A15  1903               	btfsc	3,2
 19916  0A16  01D8               	clrf	___fladd@signs
 19917  0A17                     l7074:	
 19918  0A17  1C5A               	btfss	___fladd@bexp,0
 19919  0A18  2A1B               	goto	l7078
 19920  0A19  17CA               	bsf	___fladd@b+2,7
 19921  0A1A  2A1F               	goto	l1282
 19922  0A1B                     l7078:	
 19923  0A1B  307F               	movlw	127
 19924  0A1C  00D0               	movwf	??___fladd
 19925  0A1D  0850               	movf	??___fladd,w
 19926  0A1E  05CA               	andwf	___fladd@b+2,f
 19927  0A1F                     l1282:	
 19928  0A1F  365A               	lsrf	___fladd@bexp,w
 19929  0A20  00D0               	movwf	??___fladd
 19930  0A21  0850               	movf	??___fladd,w
 19931  0A22  00CB               	movwf	___fladd@b+3
 19932  0A23  1FD8               	btfss	___fladd@signs,7
 19933  0A24  0008               	return
 19934  0A25  17CB               	bsf	___fladd@b+3,7
 19935  0A26  0008               	return
 19936  0A27                     __end_of___fladd:	
 19937                           
 19938                           	psect	text65
 19939  1072                     __ptext65:	
 19940 ;; *************** function _checkSensor *****************
 19941 ;; Defined at:
 19942 ;;		line 206 in file "main.c"
 19943 ;; Parameters:    Size  Location     Type
 19944 ;;  data            2   52[BANK0 ] PTR struct .
 19945 ;;		 -> data(157), 
 19946 ;; Auto vars:     Size  Location     Type
 19947 ;;  dp              1   58[BANK0 ] PTR struct .
 19948 ;;		 -> dataPacket(15), 
 19949 ;; Return value:  Size  Location     Type
 19950 ;;                  1    wreg      void 
 19951 ;; Registers used:
 19952 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 19953 ;; Tracked objects:
 19954 ;;		On entry : 0/0
 19955 ;;		On exit  : 0/0
 19956 ;;		Unchanged: 0/0
 19957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 19958 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19959 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19960 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19961 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 19962 ;;Total ram usage:        7 bytes
 19963 ;; Hardware stack levels used:    1
 19964 ;; Hardware stack levels required when called:    5
 19965 ;; This function calls:
 19966 ;;		___flge
 19967 ;;		___xxtofl
 19968 ;;		_getDataPacket
 19969 ;;		_timeNow
 19970 ;;		_timeSince
 19971 ;;		_uartIsDataReady
 19972 ;;		_uartSendByte
 19973 ;; This function is called by:
 19974 ;;		_main
 19975 ;; This function uses a non-reentrant model
 19976 ;;
 19977                           
 19978                           
 19979                           ;psect for function _checkSensor
 19980  1072                     _checkSensor:	
 19981                           
 19982                           ;main.c: 206: void checkSensor(t_globalData *data);main.c: 207: {;main.c: 208:  t_dataPa
      +                          cket *dp;;main.c: 209:  static uint32_t sensorUpdateInterval = 0;;main.c: 210:  static u
      +                          int32_t sensorTimeout = 0;;main.c: 211:  static uint8_t state = 0;;main.c: 214:  if ((da
      +                          ta->tempAux < -30) || (data->tempAux > 100)) {
 19983                           
 19984                           ;incstack = 0
 19985                           ; Regs used in _checkSensor: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 19986  1072  0140               	movlb	0	; select bank0
 19987  1073  0854               	movf	checkSensor@data,w
 19988  1074  0086               	movwf	6
 19989  1075  0855               	movf	checkSensor@data+1,w
 19990  1076  0087               	movwf	7
 19991  1077  3150               	addfsr 1,16
 19992  1078  3F40               	moviw [0]fsr1
 19993  1079  00C8               	movwf	___flge@ff1
 19994  107A  3F41               	moviw [1]fsr1
 19995  107B  00C9               	movwf	___flge@ff1+1
 19996  107C  3F42               	moviw [2]fsr1
 19997  107D  00CA               	movwf	___flge@ff1+2
 19998  107E  3F43               	moviw [3]fsr1
 19999  107F  00CB               	movwf	___flge@ff1+3
 20000  1080  30C1               	movlw	193
 20001  1081  00CF               	movwf	___flge@ff2+3
 20002  1082  30F0               	movlw	240
 20003  1083  00CE               	movwf	___flge@ff2+2
 20004  1084  3000               	movlw	0
 20005  1085  00CD               	movwf	___flge@ff2+1
 20006  1086  3000               	movlw	0
 20007  1087  00CC               	movwf	___flge@ff2
 20008  1088  31A3  2365  3190   	fcall	___flge
 20009  108B  1C03               	btfss	3,0
 20010  108C  28A8               	goto	l9032
 20011  108D  3042               	movlw	66
 20012  108E  0140               	movlb	0	; select bank0
 20013  108F  00CB               	movwf	___flge@ff1+3
 20014  1090  30C8               	movlw	200
 20015  1091  00CA               	movwf	___flge@ff1+2
 20016  1092  3000               	movlw	0
 20017  1093  00C9               	movwf	___flge@ff1+1
 20018  1094  3000               	movlw	0
 20019  1095  00C8               	movwf	___flge@ff1
 20020  1096  0854               	movf	checkSensor@data,w
 20021  1097  0086               	movwf	6
 20022  1098  0855               	movf	checkSensor@data+1,w
 20023  1099  0087               	movwf	7
 20024  109A  3150               	addfsr 1,16
 20025  109B  3F40               	moviw [0]fsr1
 20026  109C  00CC               	movwf	___flge@ff2
 20027  109D  3F41               	moviw [1]fsr1
 20028  109E  00CD               	movwf	___flge@ff2+1
 20029  109F  3F42               	moviw [2]fsr1
 20030  10A0  00CE               	movwf	___flge@ff2+2
 20031  10A1  3F43               	moviw [3]fsr1
 20032  10A2  00CF               	movwf	___flge@ff2+3
 20033  10A3  31A3  2365  3190   	fcall	___flge
 20034  10A6  1803               	btfsc	3,0
 20035  10A7  28B1               	goto	l9034
 20036  10A8                     l9032:	
 20037                           
 20038                           ;main.c: 215:   data->status.AUX_SENSOR_OK = 0;
 20039  10A8  0140               	movlb	0	; select bank0
 20040  10A9  0854               	movf	checkSensor@data,w
 20041  10AA  3E2C               	addlw	44
 20042  10AB  0086               	movwf	6
 20043  10AC  3000               	movlw	0
 20044  10AD  3D55               	addwfc	checkSensor@data+1,w
 20045  10AE  0087               	movwf	7
 20046  10AF  1101               	bcf	1,2
 20047                           
 20048                           ;main.c: 216:  } else
 20049  10B0  29BD               	goto	l9070
 20050  10B1                     l9034:	
 20051                           
 20052                           ;main.c: 217:   data->status.AUX_SENSOR_OK = 1;
 20053  10B1  0140               	movlb	0	; select bank0
 20054  10B2  0854               	movf	checkSensor@data,w
 20055  10B3  3E2C               	addlw	44
 20056  10B4  0086               	movwf	6
 20057  10B5  3000               	movlw	0
 20058  10B6  3D55               	addwfc	checkSensor@data+1,w
 20059  10B7  0087               	movwf	7
 20060  10B8  1501               	bsf	1,2
 20061  10B9  29BD               	goto	l9070
 20062  10BA                     l9036:	
 20063                           
 20064                           ;main.c: 222:    if (timeSince(sensorUpdateInterval) >= 50) {
 20065  10BA  0143               	movlb	3	; select bank3
 20066  10BB  082B               	movf	(checkSensor@sensorUpdateInterval+3)^(0+384),w
 20067  10BC  0140               	movlb	0	; select bank0
 20068  10BD  00A7               	movwf	timeSince@since+3
 20069  10BE  0143               	movlb	3	; select bank3
 20070  10BF  082A               	movf	(checkSensor@sensorUpdateInterval+2)^(0+384),w
 20071  10C0  0140               	movlb	0	; select bank0
 20072  10C1  00A6               	movwf	timeSince@since+2
 20073  10C2  0143               	movlb	3	; select bank3
 20074  10C3  0829               	movf	(checkSensor@sensorUpdateInterval+1)^(0+384),w
 20075  10C4  0140               	movlb	0	; select bank0
 20076  10C5  00A5               	movwf	timeSince@since+1
 20077  10C6  0143               	movlb	3	; select bank3
 20078  10C7  0828               	movf	checkSensor@sensorUpdateInterval^(0+384),w
 20079  10C8  0140               	movlb	0	; select bank0
 20080  10C9  00A4               	movwf	timeSince@since
 20081  10CA  31A0  2002  3190   	fcall	_timeSince
 20082  10CD  0140               	movlb	0	; select bank0
 20083  10CE  0827               	movf	?_timeSince+3,w
 20084  10CF  1D03               	btfss	3,2
 20085  10D0  28DB               	goto	l9038
 20086  10D1  0826               	movf	?_timeSince+2,w
 20087  10D2  1D03               	btfss	3,2
 20088  10D3  28DB               	goto	l9038
 20089  10D4  0825               	movf	?_timeSince+1,w
 20090  10D5  1D03               	btfss	3,2
 20091  10D6  28DB               	goto	l9038
 20092  10D7  3032               	movlw	50
 20093  10D8  0224               	subwf	?_timeSince,w
 20094  10D9  1C03               	btfss	3,0
 20095  10DA  0008               	return
 20096  10DB                     l9038:	
 20097                           
 20098                           ;main.c: 223:     sensorUpdateInterval = sensorTimeout = timeNow();
 20099  10DB  31A9  21F5  3190   	fcall	_timeNow
 20100  10DE  0140               	movlb	0	; select bank0
 20101  10DF  0823               	movf	?_timeNow+3,w
 20102  10E0  0143               	movlb	3	; select bank3
 20103  10E1  00A7               	movwf	(checkSensor@sensorTimeout+3)^(0+384)
 20104  10E2  0140               	movlb	0	; select bank0
 20105  10E3  0822               	movf	?_timeNow+2,w
 20106  10E4  0143               	movlb	3	; select bank3
 20107  10E5  00A6               	movwf	(checkSensor@sensorTimeout+2)^(0+384)
 20108  10E6  0140               	movlb	0	; select bank0
 20109  10E7  0821               	movf	?_timeNow+1,w
 20110  10E8  0143               	movlb	3	; select bank3
 20111  10E9  00A5               	movwf	(checkSensor@sensorTimeout+1)^(0+384)
 20112  10EA  0140               	movlb	0	; select bank0
 20113  10EB  0820               	movf	?_timeNow,w
 20114  10EC  0143               	movlb	3	; select bank3
 20115  10ED  00A4               	movwf	checkSensor@sensorTimeout^(0+384)
 20116  10EE  0827               	movf	(checkSensor@sensorTimeout+3)^(0+384),w
 20117  10EF  00AB               	movwf	(checkSensor@sensorUpdateInterval+3)^(0+384)
 20118  10F0  0826               	movf	(checkSensor@sensorTimeout+2)^(0+384),w
 20119  10F1  00AA               	movwf	(checkSensor@sensorUpdateInterval+2)^(0+384)
 20120  10F2  0825               	movf	(checkSensor@sensorTimeout+1)^(0+384),w
 20121  10F3  00A9               	movwf	(checkSensor@sensorUpdateInterval+1)^(0+384)
 20122  10F4  0824               	movf	checkSensor@sensorTimeout^(0+384),w
 20123  10F5  00A8               	movwf	checkSensor@sensorUpdateInterval^(0+384)
 20124                           
 20125                           ;main.c: 224:     uartSendByte('?');
 20126  10F6  303F               	movlw	63
 20127  10F7  31A9  219D         	fcall	_uartSendByte
 20128                           
 20129                           ;main.c: 225:     state = 1;
 20130  10F9  0143               	movlb	3	; select bank3
 20131  10FA  01CD               	clrf	checkSensor@state^(0+384)
 20132  10FB  0ACD               	incf	checkSensor@state^(0+384),f
 20133  10FC  0008               	return
 20134  10FD                     l9044:	
 20135                           
 20136                           ;main.c: 230:    if (timeSince(sensorTimeout) > 20) {
 20137  10FD  0143               	movlb	3	; select bank3
 20138  10FE  0827               	movf	(checkSensor@sensorTimeout+3)^(0+384),w
 20139  10FF  0140               	movlb	0	; select bank0
 20140  1100  00A7               	movwf	timeSince@since+3
 20141  1101  0143               	movlb	3	; select bank3
 20142  1102  0826               	movf	(checkSensor@sensorTimeout+2)^(0+384),w
 20143  1103  0140               	movlb	0	; select bank0
 20144  1104  00A6               	movwf	timeSince@since+2
 20145  1105  0143               	movlb	3	; select bank3
 20146  1106  0825               	movf	(checkSensor@sensorTimeout+1)^(0+384),w
 20147  1107  0140               	movlb	0	; select bank0
 20148  1108  00A5               	movwf	timeSince@since+1
 20149  1109  0143               	movlb	3	; select bank3
 20150  110A  0824               	movf	checkSensor@sensorTimeout^(0+384),w
 20151  110B  0140               	movlb	0	; select bank0
 20152  110C  00A4               	movwf	timeSince@since
 20153  110D  31A0  2002  3190   	fcall	_timeSince
 20154  1110  0140               	movlb	0	; select bank0
 20155  1111  0827               	movf	?_timeSince+3,w
 20156  1112  1D03               	btfss	3,2
 20157  1113  29B5               	goto	l9064
 20158  1114  0826               	movf	?_timeSince+2,w
 20159  1115  1D03               	btfss	3,2
 20160  1116  29B5               	goto	l9064
 20161  1117  0825               	movf	?_timeSince+1,w
 20162  1118  1D03               	btfss	3,2
 20163  1119  29B5               	goto	l9064
 20164  111A  3015               	movlw	21
 20165  111B  0224               	subwf	?_timeSince,w
 20166  111C  1C03               	btfss	3,0
 20167  111D  29A0               	goto	l9050
 20168  111E  29B5               	goto	l9064
 20169  111F                     l9056:	
 20170                           ;main.c: 231:     data->status.SENSOR_OK = 0;
 20171                           
 20172  111F  085A               	movf	checkSensor@dp,w
 20173  1120  3E02               	addlw	2
 20174  1121  0086               	movwf	6
 20175  1122  3002               	movlw	2	; select bank4/5
 20176  1123  0087               	movwf	7
 20177  1124  0301               	decf	1,w
 20178  1125  1D03               	btfss	3,2
 20179  1126  29B5               	goto	l9064
 20180                           
 20181                           ;main.c: 236:      data->tempC = dp->tempC;
 20182  1127  085A               	movf	checkSensor@dp,w
 20183  1128  3E03               	addlw	3
 20184  1129  0086               	movwf	6
 20185  112A  3002               	movlw	2	; select bank4/5
 20186  112B  0087               	movwf	7
 20187  112C  3F40               	moviw [0]fsr1
 20188  112D  00D6               	movwf	??_checkSensor
 20189  112E  3F41               	moviw [1]fsr1
 20190  112F  00D7               	movwf	??_checkSensor+1
 20191  1130  3F42               	moviw [2]fsr1
 20192  1131  00D8               	movwf	??_checkSensor+2
 20193  1132  3F43               	moviw [3]fsr1
 20194  1133  00D9               	movwf	??_checkSensor+3
 20195  1134  0854               	movf	checkSensor@data,w
 20196  1135  0086               	movwf	6
 20197  1136  0855               	movf	checkSensor@data+1,w
 20198  1137  0087               	movwf	7
 20199  1138  0856               	movf	??_checkSensor,w
 20200  1139  3FC0               	movwi [0]fsr1
 20201  113A  0857               	movf	??_checkSensor+1,w
 20202  113B  3FC1               	movwi [1]fsr1
 20203  113C  0858               	movf	??_checkSensor+2,w
 20204  113D  3FC2               	movwi [2]fsr1
 20205  113E  0859               	movf	??_checkSensor+3,w
 20206  113F  3FC3               	movwi [3]fsr1
 20207                           
 20208                           ;main.c: 237:      data->relHum = dp->relHum;
 20209  1140  085A               	movf	checkSensor@dp,w
 20210  1141  3E07               	addlw	7
 20211  1142  0086               	movwf	6
 20212  1143  3002               	movlw	2	; select bank4/5
 20213  1144  0087               	movwf	7
 20214  1145  3F40               	moviw [0]fsr1
 20215  1146  00D6               	movwf	??_checkSensor
 20216  1147  3F41               	moviw [1]fsr1
 20217  1148  00D7               	movwf	??_checkSensor+1
 20218  1149  3F42               	moviw [2]fsr1
 20219  114A  00D8               	movwf	??_checkSensor+2
 20220  114B  3F43               	moviw [3]fsr1
 20221  114C  00D9               	movwf	??_checkSensor+3
 20222  114D  0854               	movf	checkSensor@data,w
 20223  114E  0086               	movwf	6
 20224  114F  0855               	movf	checkSensor@data+1,w
 20225  1150  0087               	movwf	7
 20226  1151  3144               	addfsr 1,4
 20227  1152  0856               	movf	??_checkSensor,w
 20228  1153  3FC0               	movwi [0]fsr1
 20229  1154  0857               	movf	??_checkSensor+1,w
 20230  1155  3FC1               	movwi [1]fsr1
 20231  1156  0858               	movf	??_checkSensor+2,w
 20232  1157  3FC2               	movwi [2]fsr1
 20233  1158  0859               	movf	??_checkSensor+3,w
 20234  1159  3FC3               	movwi [3]fsr1
 20235                           
 20236                           ;main.c: 238:      data->dewPointC = dp->dewPointC;
 20237  115A  085A               	movf	checkSensor@dp,w
 20238  115B  3E0B               	addlw	11
 20239  115C  0086               	movwf	6
 20240  115D  3002               	movlw	2	; select bank4/5
 20241  115E  0087               	movwf	7
 20242  115F  3F40               	moviw [0]fsr1
 20243  1160  00D6               	movwf	??_checkSensor
 20244  1161  3F41               	moviw [1]fsr1
 20245  1162  00D7               	movwf	??_checkSensor+1
 20246  1163  3F42               	moviw [2]fsr1
 20247  1164  00D8               	movwf	??_checkSensor+2
 20248  1165  3F43               	moviw [3]fsr1
 20249  1166  00D9               	movwf	??_checkSensor+3
 20250  1167  0854               	movf	checkSensor@data,w
 20251  1168  0086               	movwf	6
 20252  1169  0855               	movf	checkSensor@data+1,w
 20253  116A  0087               	movwf	7
 20254  116B  3148               	addfsr 1,8
 20255  116C  0856               	movf	??_checkSensor,w
 20256  116D  3FC0               	movwi [0]fsr1
 20257  116E  0857               	movf	??_checkSensor+1,w
 20258  116F  3FC1               	movwi [1]fsr1
 20259  1170  0858               	movf	??_checkSensor+2,w
 20260  1171  3FC2               	movwi [2]fsr1
 20261  1172  0859               	movf	??_checkSensor+3,w
 20262  1173  3FC3               	movwi [3]fsr1
 20263                           
 20264                           ;main.c: 239:      data->sensorVersion = dp->version;
 20265  1174  0A5A               	incf	checkSensor@dp,w
 20266  1175  0086               	movwf	6
 20267  1176  3002               	movlw	2	; select bank4/5
 20268  1177  0087               	movwf	7
 20269  1178  0801               	movf	1,w
 20270  1179  00D6               	movwf	??_checkSensor
 20271  117A  01D7               	clrf	??_checkSensor+1
 20272  117B  01D8               	clrf	??_checkSensor+2
 20273  117C  01D9               	clrf	??_checkSensor+3
 20274  117D  0859               	movf	??_checkSensor+3,w
 20275  117E  00A3               	movwf	___xxtofl@val+3
 20276  117F  0858               	movf	??_checkSensor+2,w
 20277  1180  00A2               	movwf	___xxtofl@val+2
 20278  1181  0857               	movf	??_checkSensor+1,w
 20279  1182  00A1               	movwf	___xxtofl@val+1
 20280  1183  0856               	movf	??_checkSensor,w
 20281  1184  00A0               	movwf	___xxtofl@val
 20282  1185  3000               	movlw	0
 20283  1186  31A5  257D         	fcall	___xxtofl
 20284  1188  0140               	movlb	0	; select bank0
 20285  1189  0854               	movf	checkSensor@data,w
 20286  118A  0086               	movwf	6
 20287  118B  0855               	movf	checkSensor@data+1,w
 20288  118C  0087               	movwf	7
 20289  118D  314C               	addfsr 1,12
 20290  118E  0820               	movf	?___xxtofl,w
 20291  118F  3FC0               	movwi [0]fsr1
 20292  1190  0821               	movf	?___xxtofl+1,w
 20293  1191  3FC1               	movwi [1]fsr1
 20294  1192  0822               	movf	?___xxtofl+2,w
 20295  1193  3FC2               	movwi [2]fsr1
 20296  1194  0823               	movf	?___xxtofl+3,w
 20297  1195  3FC3               	movwi [3]fsr1
 20298                           
 20299                           ;main.c: 240:      data->status.SENSOR_OK = 1;
 20300  1196  0854               	movf	checkSensor@data,w
 20301  1197  3E2C               	addlw	44
 20302  1198  0086               	movwf	6
 20303  1199  3000               	movlw	0
 20304  119A  3D55               	addwfc	checkSensor@data+1,w
 20305  119B  0087               	movwf	7
 20306  119C  1481               	bsf	1,1
 20307  119D                     l9048:	
 20308                           ;main.c: 241:     } else {
 20309                           
 20310                           
 20311                           ;main.c: 232:     state = 0;
 20312  119D  0143               	movlb	3	; select bank3
 20313  119E  01CD               	clrf	checkSensor@state^(0+384)
 20314                           
 20315                           ;main.c: 233:    } else if (uartIsDataReady()) {
 20316  119F  0008               	return
 20317  11A0                     l9050:	
 20318  11A0  31A9  21BC  3190   	fcall	_uartIsDataReady
 20319  11A3  3A00               	xorlw	0
 20320  11A4  1903               	skipnz
 20321  11A5  0008               	return
 20322                           
 20323                           ;main.c: 234:     dp = getDataPacket();
 20324  11A6  3180  2002  3190   	fcall	_getDataPacket
 20325  11A9  0140               	movlb	0	; select bank0
 20326  11AA  00D6               	movwf	??_checkSensor
 20327  11AB  0856               	movf	??_checkSensor,w
 20328  11AC  00DA               	movwf	checkSensor@dp
 20329                           
 20330                           ;main.c: 235:     if ((dp->header == 0xAA) && (dp->status == 1)) {
 20331  11AD  085A               	movf	checkSensor@dp,w
 20332  11AE  0086               	movwf	6
 20333  11AF  3002               	movlw	2	; select bank4/5
 20334  11B0  0087               	movwf	7
 20335  11B1  30AA               	movlw	170
 20336  11B2  0601               	xorwf	1,w
 20337  11B3  1903               	btfsc	3,2
 20338  11B4  291F               	goto	l9056
 20339  11B5                     l9064:	
 20340                           
 20341                           ;main.c: 243:      data->status.SENSOR_OK = 0;
 20342  11B5  0854               	movf	checkSensor@data,w
 20343  11B6  3E2C               	addlw	44
 20344  11B7  0086               	movwf	6
 20345  11B8  3000               	movlw	0
 20346  11B9  3D55               	addwfc	checkSensor@data+1,w
 20347  11BA  0087               	movwf	7
 20348  11BB  1081               	bcf	1,1
 20349  11BC  299D               	goto	l9048
 20350  11BD                     l9070:	
 20351  11BD  0143               	movlb	3	; select bank3
 20352  11BE  084D               	movf	checkSensor@state^(0+384),w
 20353  11BF  0140               	movlb	0	; select bank0
 20354  11C0  00D6               	movwf	??_checkSensor
 20355  11C1  01D7               	clrf	??_checkSensor+1
 20356                           
 20357                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 20358                           ; Switch size 1, requested type "simple"
 20359                           ; Number of cases is 1, Range of values is 0 to 0
 20360                           ; switch strategies available:
 20361                           ; Name         Instructions Cycles
 20362                           ; simple_byte            4     3 (average)
 20363                           ; direct_byte            8     6 (fixed)
 20364                           ; jumptable            260     6 (fixed)
 20365                           ;	Chosen strategy is simple_byte
 20366  11C2  0857               	movf	??_checkSensor+1,w
 20367  11C3  3A00               	xorlw	0	; case 0
 20368  11C4  1903               	skipnz
 20369  11C5  29C7               	goto	l9328
 20370  11C6  299D               	goto	l9048
 20371  11C7                     l9328:	
 20372                           
 20373                           ; Switch size 1, requested type "simple"
 20374                           ; Number of cases is 2, Range of values is 0 to 1
 20375                           ; switch strategies available:
 20376                           ; Name         Instructions Cycles
 20377                           ; simple_byte            7     4 (average)
 20378                           ; direct_byte           10     6 (fixed)
 20379                           ; jumptable            260     6 (fixed)
 20380                           ;	Chosen strategy is simple_byte
 20381  11C7  0856               	movf	??_checkSensor,w
 20382  11C8  3A00               	xorlw	0	; case 0
 20383  11C9  1903               	skipnz
 20384  11CA  28BA               	goto	l9036
 20385  11CB  3A01               	xorlw	1	; case 1
 20386  11CC  1903               	skipnz
 20387  11CD  28FD               	goto	l9044
 20388  11CE  299D               	goto	l9048
 20389  11CF  0008               	return
 20390  11D0                     __end_of_checkSensor:	
 20391                           
 20392                           	psect	text66
 20393  299D                     __ptext66:	
 20394 ;; *************** function _uartSendByte *****************
 20395 ;; Defined at:
 20396 ;;		line 25 in file "uart.c"
 20397 ;; Parameters:    Size  Location     Type
 20398 ;;  s               1    wreg     unsigned char 
 20399 ;; Auto vars:     Size  Location     Type
 20400 ;;  s               1    0[BANK0 ] unsigned char 
 20401 ;; Return value:  Size  Location     Type
 20402 ;;                  1    wreg      void 
 20403 ;; Registers used:
 20404 ;;		wreg
 20405 ;; Tracked objects:
 20406 ;;		On entry : 0/0
 20407 ;;		On exit  : 0/0
 20408 ;;		Unchanged: 0/0
 20409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20413 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20414 ;;Total ram usage:        1 bytes
 20415 ;; Hardware stack levels used:    1
 20416 ;; Hardware stack levels required when called:    3
 20417 ;; This function calls:
 20418 ;;		Nothing
 20419 ;; This function is called by:
 20420 ;;		_checkSensor
 20421 ;; This function uses a non-reentrant model
 20422 ;;
 20423                           
 20424                           
 20425                           ;psect for function _uartSendByte
 20426  299D                     _uartSendByte:	
 20427                           
 20428                           ;incstack = 0
 20429                           ; Regs used in _uartSendByte: [wreg]
 20430                           ;uartSendByte@s stored from wreg
 20431  299D  0140               	movlb	0	; select bank0
 20432  299E  00A0               	movwf	uartSendByte@s
 20433                           
 20434                           ;uart.c: 25: void uartSendByte(char s);uart.c: 26: {;uart.c: 27:  TX1REG = s;
 20435  299F  0820               	movf	uartSendByte@s,w
 20436  29A0  0142               	movlb	2	; select bank2
 20437  29A1  009A               	movwf	26	;volatile
 20438                           
 20439                           ;uart.c: 28:  __nop();
 20440  29A2  0000               	nop
 20441  29A3                     l424:	
 20442                           ;uart.c: 29:  while (!PIR3bits.TX1IF);
 20443                           
 20444  29A3  014E               	movlb	14	; select bank14
 20445  29A4  1A0F               	btfsc	15,4	;volatile
 20446  29A5  0008               	return
 20447  29A6  29A3               	goto	l424
 20448  29A7                     __end_of_uartSendByte:	
 20449                           
 20450                           	psect	text67
 20451  29BC                     __ptext67:	
 20452 ;; *************** function _uartIsDataReady *****************
 20453 ;; Defined at:
 20454 ;;		line 11 in file "uart.c"
 20455 ;; Parameters:    Size  Location     Type
 20456 ;;		None
 20457 ;; Auto vars:     Size  Location     Type
 20458 ;;  ret             1    1[BANK0 ] unsigned char 
 20459 ;; Return value:  Size  Location     Type
 20460 ;;                  1    wreg      unsigned char 
 20461 ;; Registers used:
 20462 ;;		wreg, status,2
 20463 ;; Tracked objects:
 20464 ;;		On entry : 0/0
 20465 ;;		On exit  : 0/0
 20466 ;;		Unchanged: 0/0
 20467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20469 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20470 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20471 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20472 ;;Total ram usage:        2 bytes
 20473 ;; Hardware stack levels used:    1
 20474 ;; Hardware stack levels required when called:    3
 20475 ;; This function calls:
 20476 ;;		Nothing
 20477 ;; This function is called by:
 20478 ;;		_checkSensor
 20479 ;; This function uses a non-reentrant model
 20480 ;;
 20481                           
 20482                           
 20483                           ;psect for function _uartIsDataReady
 20484  29BC                     _uartIsDataReady:	
 20485                           
 20486                           ;uart.c: 13:  uint8_t ret = dataReadyFlag;
 20487                           
 20488                           ;incstack = 0
 20489                           ; Regs used in _uartIsDataReady: [wreg+status,2]
 20490  29BC  0143               	movlb	3	; select bank3
 20491  29BD  0845               	movf	_dataReadyFlag^(0+384),w	;volatile
 20492  29BE  0140               	movlb	0	; select bank0
 20493  29BF  00A0               	movwf	??_uartIsDataReady
 20494  29C0  0820               	movf	??_uartIsDataReady,w
 20495  29C1  00A1               	movwf	uartIsDataReady@ret
 20496                           
 20497                           ;uart.c: 14:  dataReadyFlag = 0;
 20498  29C2  0143               	movlb	3	; select bank3
 20499  29C3  01C5               	clrf	_dataReadyFlag^(0+384)	;volatile
 20500                           
 20501                           ;uart.c: 15:  return ret;
 20502  29C4  0140               	movlb	0	; select bank0
 20503  29C5  0821               	movf	uartIsDataReady@ret,w
 20504  29C6  0008               	return
 20505  29C7                     __end_of_uartIsDataReady:	
 20506                           
 20507                           	psect	text68
 20508  2002                     __ptext68:	
 20509 ;; *************** function _timeSince *****************
 20510 ;; Defined at:
 20511 ;;		line 21 in file "interrupt.c"
 20512 ;; Parameters:    Size  Location     Type
 20513 ;;  since           4    4[BANK0 ] unsigned long 
 20514 ;; Auto vars:     Size  Location     Type
 20515 ;;  now             4   16[BANK0 ] unsigned long 
 20516 ;; Return value:  Size  Location     Type
 20517 ;;                  4    4[BANK0 ] unsigned long 
 20518 ;; Registers used:
 20519 ;;		wreg, pclath, cstack
 20520 ;; Tracked objects:
 20521 ;;		On entry : 0/0
 20522 ;;		On exit  : 0/0
 20523 ;;		Unchanged: 0/0
 20524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20525 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20526 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20527 ;;      Temps:          0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20528 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20529 ;;Total ram usage:       16 bytes
 20530 ;; Hardware stack levels used:    1
 20531 ;; Hardware stack levels required when called:    4
 20532 ;; This function calls:
 20533 ;;		_timeNow
 20534 ;; This function is called by:
 20535 ;;		_main
 20536 ;;		_checkSensor
 20537 ;; This function uses a non-reentrant model
 20538 ;;
 20539                           
 20540                           
 20541                           ;psect for function _timeSince
 20542  2002                     _timeSince:	
 20543                           
 20544                           ;interrupt.c: 21: uint32_t timeSince(uint32_t since);interrupt.c: 22: {;interrupt.c: 23:
      +                            uint32_t now = timeNow();
 20545                           
 20546                           ;incstack = 0
 20547                           ; Regs used in _timeSince: [wreg+pclath+cstack]
 20548  2002  31A9  21F5  31A0   	fcall	_timeNow
 20549  2005  0140               	movlb	0	; select bank0
 20550  2006  0823               	movf	?_timeNow+3,w
 20551  2007  00B3               	movwf	timeSince@now+3
 20552  2008  0822               	movf	?_timeNow+2,w
 20553  2009  00B2               	movwf	timeSince@now+2
 20554  200A  0821               	movf	?_timeNow+1,w
 20555  200B  00B1               	movwf	timeSince@now+1
 20556  200C  0820               	movf	?_timeNow,w
 20557  200D  00B0               	movwf	timeSince@now
 20558                           
 20559                           ;interrupt.c: 24:  if (now >= since)
 20560  200E  0827               	movf	timeSince@since+3,w
 20561  200F  0233               	subwf	timeSince@now+3,w
 20562  2010  1D03               	skipz
 20563  2011  281C               	goto	u12025
 20564  2012  0826               	movf	timeSince@since+2,w
 20565  2013  0232               	subwf	timeSince@now+2,w
 20566  2014  1D03               	skipz
 20567  2015  281C               	goto	u12025
 20568  2016  0825               	movf	timeSince@since+1,w
 20569  2017  0231               	subwf	timeSince@now+1,w
 20570  2018  1D03               	skipz
 20571  2019  281C               	goto	u12025
 20572  201A  0824               	movf	timeSince@since,w
 20573  201B  0230               	subwf	timeSince@now,w
 20574  201C                     u12025:	
 20575  201C  1C03               	skipc
 20576  201D  2833               	goto	l8534
 20577                           
 20578                           ;interrupt.c: 25:   return (now - since);
 20579  201E  0824               	movf	timeSince@since,w
 20580  201F  0230               	subwf	timeSince@now,w
 20581  2020  00A8               	movwf	??_timeSince
 20582  2021  0825               	movf	timeSince@since+1,w
 20583  2022  3B31               	subwfb	timeSince@now+1,w
 20584  2023  00A9               	movwf	??_timeSince+1
 20585  2024  0826               	movf	timeSince@since+2,w
 20586  2025  3B32               	subwfb	timeSince@now+2,w
 20587  2026  00AA               	movwf	??_timeSince+2
 20588  2027  0827               	movf	timeSince@since+3,w
 20589  2028  3B33               	subwfb	timeSince@now+3,w
 20590  2029  00AB               	movwf	??_timeSince+3
 20591  202A  082B               	movf	??_timeSince+3,w
 20592  202B  00A7               	movwf	?_timeSince+3
 20593  202C  082A               	movf	??_timeSince+2,w
 20594  202D  00A6               	movwf	?_timeSince+2
 20595  202E  0829               	movf	??_timeSince+1,w
 20596  202F  00A5               	movwf	?_timeSince+1
 20597  2030  0828               	movf	??_timeSince,w
 20598  2031  00A4               	movwf	?_timeSince
 20599  2032  0008               	return
 20600  2033                     l8534:	
 20601                           
 20602                           ;interrupt.c: 27:  return (now + (1 + 1000000000UL - since));
 20603  2033  3001               	movlw	1
 20604  2034  00A8               	movwf	??_timeSince
 20605  2035  30CA               	movlw	202
 20606  2036  00A9               	movwf	??_timeSince+1
 20607  2037  309A               	movlw	154
 20608  2038  00AA               	movwf	??_timeSince+2
 20609  2039  303B               	movlw	59
 20610  203A  00AB               	movwf	??_timeSince+3
 20611  203B  0824               	movf	timeSince@since,w
 20612  203C  0230               	subwf	timeSince@now,w
 20613  203D  00AC               	movwf	??_timeSince+4
 20614  203E  0825               	movf	timeSince@since+1,w
 20615  203F  3B31               	subwfb	timeSince@now+1,w
 20616  2040  00AD               	movwf	??_timeSince+5
 20617  2041  0826               	movf	timeSince@since+2,w
 20618  2042  3B32               	subwfb	timeSince@now+2,w
 20619  2043  00AE               	movwf	??_timeSince+6
 20620  2044  0827               	movf	timeSince@since+3,w
 20621  2045  3B33               	subwfb	timeSince@now+3,w
 20622  2046  00AF               	movwf	??_timeSince+7
 20623  2047  082C               	movf	??_timeSince+4,w
 20624  2048  07A8               	addwf	??_timeSince,f
 20625  2049  082D               	movf	??_timeSince+5,w
 20626  204A  3DA9               	addwfc	??_timeSince+1,f
 20627  204B  082E               	movf	??_timeSince+6,w
 20628  204C  3DAA               	addwfc	??_timeSince+2,f
 20629  204D  082F               	movf	??_timeSince+7,w
 20630  204E  3DAB               	addwfc	??_timeSince+3,f
 20631  204F  082B               	movf	??_timeSince+3,w
 20632  2050  00A7               	movwf	?_timeSince+3
 20633  2051  082A               	movf	??_timeSince+2,w
 20634  2052  00A6               	movwf	?_timeSince+2
 20635  2053  0829               	movf	??_timeSince+1,w
 20636  2054  00A5               	movwf	?_timeSince+1
 20637  2055  0828               	movf	??_timeSince,w
 20638  2056  00A4               	movwf	?_timeSince
 20639  2057  0008               	return
 20640  2058                     __end_of_timeSince:	
 20641                           
 20642                           	psect	text69
 20643  29F5                     __ptext69:	
 20644 ;; *************** function _timeNow *****************
 20645 ;; Defined at:
 20646 ;;		line 13 in file "interrupt.c"
 20647 ;; Parameters:    Size  Location     Type
 20648 ;;		None
 20649 ;; Auto vars:     Size  Location     Type
 20650 ;;		None
 20651 ;; Return value:  Size  Location     Type
 20652 ;;                  4    0[BANK0 ] unsigned long 
 20653 ;; Registers used:
 20654 ;;		wreg
 20655 ;; Tracked objects:
 20656 ;;		On entry : 0/0
 20657 ;;		On exit  : 0/0
 20658 ;;		Unchanged: 0/0
 20659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20660 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20661 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20662 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20663 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20664 ;;Total ram usage:        4 bytes
 20665 ;; Hardware stack levels used:    1
 20666 ;; Hardware stack levels required when called:    3
 20667 ;; This function calls:
 20668 ;;		Nothing
 20669 ;; This function is called by:
 20670 ;;		_main
 20671 ;;		_checkSensor
 20672 ;;		_timeSince
 20673 ;; This function uses a non-reentrant model
 20674 ;;
 20675                           
 20676                           
 20677                           ;psect for function _timeNow
 20678  29F5                     _timeNow:	
 20679                           
 20680                           ;interrupt.c: 15:  return tick100ms;
 20681                           
 20682                           ;incstack = 0
 20683                           ; Regs used in _timeNow: [wreg]
 20684  29F5  0143               	movlb	3	; select bank3
 20685  29F6  0823               	movf	(_tick100ms+3)^(0+384),w	;volatile
 20686  29F7  0140               	movlb	0	; select bank0
 20687  29F8  00A3               	movwf	?_timeNow+3
 20688  29F9  0143               	movlb	3	; select bank3
 20689  29FA  0822               	movf	(_tick100ms+2)^(0+384),w	;volatile
 20690  29FB  0140               	movlb	0	; select bank0
 20691  29FC  00A2               	movwf	?_timeNow+2
 20692  29FD  0143               	movlb	3	; select bank3
 20693  29FE  0821               	movf	(_tick100ms+1)^(0+384),w	;volatile
 20694  29FF  0140               	movlb	0	; select bank0
 20695  2A00  00A1               	movwf	?_timeNow+1
 20696  2A01  0143               	movlb	3	; select bank3
 20697  2A02  0820               	movf	_tick100ms^(0+384),w	;volatile
 20698  2A03  0140               	movlb	0	; select bank0
 20699  2A04  00A0               	movwf	?_timeNow
 20700  2A05  0008               	return
 20701  2A06                     __end_of_timeNow:	
 20702                           
 20703                           	psect	text70
 20704  0002                     __ptext70:	
 20705 ;; *************** function _getDataPacket *****************
 20706 ;; Defined at:
 20707 ;;		line 18 in file "uart.c"
 20708 ;; Parameters:    Size  Location     Type
 20709 ;;		None
 20710 ;; Auto vars:     Size  Location     Type
 20711 ;;		None
 20712 ;; Return value:  Size  Location     Type
 20713 ;;                  1    wreg      PTR struct .
 20714 ;; Registers used:
 20715 ;;		wreg
 20716 ;; Tracked objects:
 20717 ;;		On entry : 0/0
 20718 ;;		On exit  : 0/0
 20719 ;;		Unchanged: 0/0
 20720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20725 ;;Total ram usage:        0 bytes
 20726 ;; Hardware stack levels used:    1
 20727 ;; Hardware stack levels required when called:    3
 20728 ;; This function calls:
 20729 ;;		Nothing
 20730 ;; This function is called by:
 20731 ;;		_checkSensor
 20732 ;; This function uses a non-reentrant model
 20733 ;;
 20734                           
 20735                           
 20736                           ;psect for function _getDataPacket
 20737  0002                     _getDataPacket:	
 20738                           
 20739                           ;uart.c: 20:  return &dataPacket;
 20740                           
 20741                           ;incstack = 0
 20742                           ; Regs used in _getDataPacket: [wreg]
 20743  0002  303C               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 20744  0003  0008               	return
 20745  0004                     __end_of_getDataPacket:	
 20746                           
 20747                           	psect	text71
 20748  257D                     __ptext71:	
 20749 ;; *************** function ___xxtofl *****************
 20750 ;; Defined at:
 20751 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\xxtofl.c"
 20752 ;; Parameters:    Size  Location     Type
 20753 ;;  sign            1    wreg     unsigned char 
 20754 ;;  val             4    0[BANK0 ] long 
 20755 ;; Auto vars:     Size  Location     Type
 20756 ;;  sign            1    8[BANK0 ] unsigned char 
 20757 ;;  arg             4   10[BANK0 ] unsigned long 
 20758 ;;  exp             1    9[BANK0 ] unsigned char 
 20759 ;; Return value:  Size  Location     Type
 20760 ;;                  4    0[BANK0 ] unsigned char 
 20761 ;; Registers used:
 20762 ;;		wreg, status,2, status,0
 20763 ;; Tracked objects:
 20764 ;;		On entry : 0/0
 20765 ;;		On exit  : 0/0
 20766 ;;		Unchanged: 0/0
 20767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20768 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20769 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20770 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20771 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20772 ;;Total ram usage:       14 bytes
 20773 ;; Hardware stack levels used:    1
 20774 ;; Hardware stack levels required when called:    3
 20775 ;; This function calls:
 20776 ;;		Nothing
 20777 ;; This function is called by:
 20778 ;;		_checkSensor
 20779 ;;		_convertAnalogValues
 20780 ;;		_getAvgChannelCurrents
 20781 ;; This function uses a non-reentrant model
 20782 ;;
 20783                           
 20784                           
 20785                           ;psect for function ___xxtofl
 20786  257D                     ___xxtofl:	
 20787                           
 20788                           ;incstack = 0
 20789                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
 20790                           ;___xxtofl@sign stored from wreg
 20791  257D  0140               	movlb	0	; select bank0
 20792  257E  00A8               	movwf	___xxtofl@sign
 20793  257F  0828               	movf	___xxtofl@sign,w
 20794  2580  1D03               	btfss	3,2
 20795  2581  1FA3               	btfss	___xxtofl@val+3,7
 20796  2582  2D93               	goto	l8858
 20797  2583  0920               	comf	___xxtofl@val,w
 20798  2584  00AA               	movwf	___xxtofl@arg
 20799  2585  0921               	comf	___xxtofl@val+1,w
 20800  2586  00AB               	movwf	___xxtofl@arg+1
 20801  2587  0922               	comf	___xxtofl@val+2,w
 20802  2588  00AC               	movwf	___xxtofl@arg+2
 20803  2589  0923               	comf	___xxtofl@val+3,w
 20804  258A  00AD               	movwf	___xxtofl@arg+3
 20805  258B  0AAA               	incf	___xxtofl@arg,f
 20806  258C  1903               	skipnz
 20807  258D  0AAB               	incf	___xxtofl@arg+1,f
 20808  258E  1903               	skipnz
 20809  258F  0AAC               	incf	___xxtofl@arg+2,f
 20810  2590  1903               	skipnz
 20811  2591  0AAD               	incf	___xxtofl@arg+3,f
 20812  2592  2D9B               	goto	l1374
 20813  2593                     l8858:	
 20814  2593  0823               	movf	___xxtofl@val+3,w
 20815  2594  00AD               	movwf	___xxtofl@arg+3
 20816  2595  0822               	movf	___xxtofl@val+2,w
 20817  2596  00AC               	movwf	___xxtofl@arg+2
 20818  2597  0821               	movf	___xxtofl@val+1,w
 20819  2598  00AB               	movwf	___xxtofl@arg+1
 20820  2599  0820               	movf	___xxtofl@val,w
 20821  259A  00AA               	movwf	___xxtofl@arg
 20822  259B                     l1374:	
 20823  259B  0823               	movf	___xxtofl@val+3,w
 20824  259C  0422               	iorwf	___xxtofl@val+2,w
 20825  259D  0421               	iorwf	___xxtofl@val+1,w
 20826  259E  0420               	iorwf	___xxtofl@val,w
 20827  259F  1D03               	skipz
 20828  25A0  2DAA               	goto	l8864
 20829  25A1  3000               	movlw	0
 20830  25A2  00A3               	movwf	?___xxtofl+3
 20831  25A3  3000               	movlw	0
 20832  25A4  00A2               	movwf	?___xxtofl+2
 20833  25A5  3000               	movlw	0
 20834  25A6  00A1               	movwf	?___xxtofl+1
 20835  25A7  3000               	movlw	0
 20836  25A8  00A0               	movwf	?___xxtofl
 20837  25A9  0008               	return
 20838  25AA                     l8864:	
 20839  25AA  3096               	movlw	150
 20840  25AB  00A4               	movwf	??___xxtofl
 20841  25AC  0824               	movf	??___xxtofl,w
 20842  25AD  00A9               	movwf	___xxtofl@exp
 20843  25AE                     l8868:	
 20844  25AE  30FE               	movlw	254
 20845  25AF  052D               	andwf	___xxtofl@arg+3,w
 20846  25B0  1903               	btfsc	3,2
 20847  25B1  2DD1               	goto	l1380
 20848  25B2  3001               	movlw	1
 20849  25B3  00A4               	movwf	??___xxtofl
 20850  25B4  0824               	movf	??___xxtofl,w
 20851  25B5  07A9               	addwf	___xxtofl@exp,f
 20852  25B6  3001               	movlw	1
 20853  25B7                     u12275:	
 20854  25B7  36AD               	lsrf	___xxtofl@arg+3,f
 20855  25B8  0CAC               	rrf	___xxtofl@arg+2,f
 20856  25B9  0CAB               	rrf	___xxtofl@arg+1,f
 20857  25BA  0CAA               	rrf	___xxtofl@arg,f
 20858  25BB  0B89               	decfsz	9,f
 20859  25BC  2DB7               	goto	u12275
 20860  25BD  2DAE               	goto	l8868
 20861  25BE                     l8870:	
 20862  25BE  3001               	movlw	1
 20863  25BF  00A4               	movwf	??___xxtofl
 20864  25C0  0824               	movf	??___xxtofl,w
 20865  25C1  07A9               	addwf	___xxtofl@exp,f
 20866  25C2  3001               	movlw	1
 20867  25C3  07AA               	addwf	___xxtofl@arg,f
 20868  25C4  3000               	movlw	0
 20869  25C5  3DAB               	addwfc	___xxtofl@arg+1,f
 20870  25C6  3000               	movlw	0
 20871  25C7  3DAC               	addwfc	___xxtofl@arg+2,f
 20872  25C8  3000               	movlw	0
 20873  25C9  3DAD               	addwfc	___xxtofl@arg+3,f
 20874  25CA  3001               	movlw	1
 20875  25CB                     u12295:	
 20876  25CB  36AD               	lsrf	___xxtofl@arg+3,f
 20877  25CC  0CAC               	rrf	___xxtofl@arg+2,f
 20878  25CD  0CAB               	rrf	___xxtofl@arg+1,f
 20879  25CE  0CAA               	rrf	___xxtofl@arg,f
 20880  25CF  0B89               	decfsz	9,f
 20881  25D0  2DCB               	goto	u12295
 20882  25D1                     l1380:	
 20883  25D1  30FF               	movlw	255
 20884  25D2  052D               	andwf	___xxtofl@arg+3,w
 20885  25D3  1903               	btfsc	3,2
 20886  25D4  2DE3               	goto	l8878
 20887  25D5  2DBE               	goto	l8870
 20888  25D6                     l8880:	
 20889  25D6  3002               	movlw	2
 20890  25D7  0229               	subwf	___xxtofl@exp,w
 20891  25D8  1C03               	btfss	3,0
 20892  25D9  2DE5               	goto	l1387
 20893  25DA  3001               	movlw	1
 20894  25DB  02A9               	subwf	___xxtofl@exp,f
 20895  25DC  3001               	movlw	1
 20896  25DD                     u12315:	
 20897  25DD  35AA               	lslf	___xxtofl@arg,f
 20898  25DE  0DAB               	rlf	___xxtofl@arg+1,f
 20899  25DF  0DAC               	rlf	___xxtofl@arg+2,f
 20900  25E0  0DAD               	rlf	___xxtofl@arg+3,f
 20901  25E1  0B89               	decfsz	9,f
 20902  25E2  2DDD               	goto	u12315
 20903  25E3                     l8878:	
 20904  25E3  1FAC               	btfss	___xxtofl@arg+2,7
 20905  25E4  2DD6               	goto	l8880
 20906  25E5                     l1387:	
 20907  25E5  1829               	btfsc	___xxtofl@exp,0
 20908  25E6  2DEF               	goto	l1388
 20909  25E7  30FF               	movlw	255
 20910  25E8  05AA               	andwf	___xxtofl@arg,f
 20911  25E9  30FF               	movlw	255
 20912  25EA  05AB               	andwf	___xxtofl@arg+1,f
 20913  25EB  307F               	movlw	127
 20914  25EC  05AC               	andwf	___xxtofl@arg+2,f
 20915  25ED  30FF               	movlw	255
 20916  25EE  05AD               	andwf	___xxtofl@arg+3,f
 20917  25EF                     l1388:	
 20918  25EF  1003               	clrc
 20919  25F0  0CA9               	rrf	___xxtofl@exp,f
 20920  25F1  0829               	movf	___xxtofl@exp,w
 20921  25F2  00A4               	movwf	??___xxtofl
 20922  25F3  01A5               	clrf	??___xxtofl+1
 20923  25F4  01A6               	clrf	??___xxtofl+2
 20924  25F5  01A7               	clrf	??___xxtofl+3
 20925  25F6  3018               	movlw	24
 20926  25F7                     u12355:	
 20927  25F7  35A4               	lslf	??___xxtofl,f
 20928  25F8  0DA5               	rlf	??___xxtofl+1,f
 20929  25F9  0DA6               	rlf	??___xxtofl+2,f
 20930  25FA  0DA7               	rlf	??___xxtofl+3,f
 20931  25FB  0B89               	decfsz	9,f
 20932  25FC  2DF7               	goto	u12355
 20933  25FD  0824               	movf	??___xxtofl,w
 20934  25FE  04AA               	iorwf	___xxtofl@arg,f
 20935  25FF  0825               	movf	??___xxtofl+1,w
 20936  2600  04AB               	iorwf	___xxtofl@arg+1,f
 20937  2601  0826               	movf	??___xxtofl+2,w
 20938  2602  04AC               	iorwf	___xxtofl@arg+2,f
 20939  2603  0827               	movf	??___xxtofl+3,w
 20940  2604  04AD               	iorwf	___xxtofl@arg+3,f
 20941  2605  0828               	movf	___xxtofl@sign,w
 20942  2606  1D03               	btfss	3,2
 20943  2607  1FA3               	btfss	___xxtofl@val+3,7
 20944  2608  2E0A               	goto	l8892
 20945  2609  17AD               	bsf	___xxtofl@arg+3,7
 20946  260A                     l8892:	
 20947  260A  082D               	movf	___xxtofl@arg+3,w
 20948  260B  00A3               	movwf	?___xxtofl+3
 20949  260C  082C               	movf	___xxtofl@arg+2,w
 20950  260D  00A2               	movwf	?___xxtofl+2
 20951  260E  082B               	movf	___xxtofl@arg+1,w
 20952  260F  00A1               	movwf	?___xxtofl+1
 20953  2610  082A               	movf	___xxtofl@arg,w
 20954  2611  00A0               	movwf	?___xxtofl
 20955  2612  0008               	return
 20956  2613                     __end_of___xxtofl:	
 20957                           
 20958                           	psect	text72
 20959  2365                     __ptext72:	
 20960 ;; *************** function ___flge *****************
 20961 ;; Defined at:
 20962 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\flge.c"
 20963 ;; Parameters:    Size  Location     Type
 20964 ;;  ff1             4   40[BANK0 ] unsigned char 
 20965 ;;  ff2             4   44[BANK0 ] unsigned char 
 20966 ;; Auto vars:     Size  Location     Type
 20967 ;;		None
 20968 ;; Return value:  Size  Location     Type
 20969 ;;		None               void
 20970 ;; Registers used:
 20971 ;;		wreg, status,2, status,0
 20972 ;; Tracked objects:
 20973 ;;		On entry : 0/0
 20974 ;;		On exit  : 0/0
 20975 ;;		Unchanged: 0/0
 20976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 20977 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20979 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20980 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 20981 ;;Total ram usage:       12 bytes
 20982 ;; Hardware stack levels used:    1
 20983 ;; Hardware stack levels required when called:    3
 20984 ;; This function calls:
 20985 ;;		Nothing
 20986 ;; This function is called by:
 20987 ;;		_checkSensor
 20988 ;;		_spinInput
 20989 ;;		_efgtoa
 20990 ;;		_systemCheck
 20991 ;;		_getAvgChannelCurrents
 20992 ;; This function uses a non-reentrant model
 20993 ;;
 20994                           
 20995                           
 20996                           ;psect for function ___flge
 20997  2365                     ___flge:	
 20998                           
 20999                           ;incstack = 0
 21000                           ; Regs used in ___flge: [wreg+status,2+status,0]
 21001  2365  3000               	movlw	0
 21002  2366  0140               	movlb	0	; select bank0
 21003  2367  0548               	andwf	___flge@ff1,w
 21004  2368  00D0               	movwf	??___flge
 21005  2369  3000               	movlw	0
 21006  236A  0549               	andwf	___flge@ff1+1,w
 21007  236B  00D1               	movwf	??___flge+1
 21008  236C  3080               	movlw	128
 21009  236D  054A               	andwf	___flge@ff1+2,w
 21010  236E  00D2               	movwf	??___flge+2
 21011  236F  307F               	movlw	127
 21012  2370  054B               	andwf	___flge@ff1+3,w
 21013  2371  00D3               	movwf	??___flge+3
 21014  2372  0853               	movf	??___flge+3,w
 21015  2373  0452               	iorwf	??___flge+2,w
 21016  2374  0451               	iorwf	??___flge+1,w
 21017  2375  0450               	iorwf	??___flge,w
 21018  2376  1D03               	skipz
 21019  2377  2B80               	goto	l1117
 21020  2378  3000               	movlw	0
 21021  2379  00CB               	movwf	___flge@ff1+3
 21022  237A  3000               	movlw	0
 21023  237B  00CA               	movwf	___flge@ff1+2
 21024  237C  3000               	movlw	0
 21025  237D  00C9               	movwf	___flge@ff1+1
 21026  237E  3000               	movlw	0
 21027  237F  00C8               	movwf	___flge@ff1
 21028  2380                     l1117:	
 21029  2380  3000               	movlw	0
 21030  2381  054C               	andwf	___flge@ff2,w
 21031  2382  00D0               	movwf	??___flge
 21032  2383  3000               	movlw	0
 21033  2384  054D               	andwf	___flge@ff2+1,w
 21034  2385  00D1               	movwf	??___flge+1
 21035  2386  3080               	movlw	128
 21036  2387  054E               	andwf	___flge@ff2+2,w
 21037  2388  00D2               	movwf	??___flge+2
 21038  2389  307F               	movlw	127
 21039  238A  054F               	andwf	___flge@ff2+3,w
 21040  238B  00D3               	movwf	??___flge+3
 21041  238C  0853               	movf	??___flge+3,w
 21042  238D  0452               	iorwf	??___flge+2,w
 21043  238E  0451               	iorwf	??___flge+1,w
 21044  238F  0450               	iorwf	??___flge,w
 21045  2390  1D03               	skipz
 21046  2391  2B9A               	goto	l7384
 21047  2392  3000               	movlw	0
 21048  2393  00CF               	movwf	___flge@ff2+3
 21049  2394  3000               	movlw	0
 21050  2395  00CE               	movwf	___flge@ff2+2
 21051  2396  3000               	movlw	0
 21052  2397  00CD               	movwf	___flge@ff2+1
 21053  2398  3000               	movlw	0
 21054  2399  00CC               	movwf	___flge@ff2
 21055  239A                     l7384:	
 21056  239A  1FCB               	btfss	___flge@ff1+3,7
 21057  239B  2BB4               	goto	l7388
 21058  239C  3000               	movlw	0
 21059  239D  00D0               	movwf	??___flge
 21060  239E  3000               	movlw	0
 21061  239F  00D1               	movwf	??___flge+1
 21062  23A0  3000               	movlw	0
 21063  23A1  00D2               	movwf	??___flge+2
 21064  23A2  3080               	movlw	128
 21065  23A3  00D3               	movwf	??___flge+3
 21066  23A4  0848               	movf	___flge@ff1,w
 21067  23A5  02D0               	subwf	??___flge,f
 21068  23A6  0849               	movf	___flge@ff1+1,w
 21069  23A7  3BD1               	subwfb	??___flge+1,f
 21070  23A8  084A               	movf	___flge@ff1+2,w
 21071  23A9  3BD2               	subwfb	??___flge+2,f
 21072  23AA  084B               	movf	___flge@ff1+3,w
 21073  23AB  3BD3               	subwfb	??___flge+3,f
 21074  23AC  0853               	movf	??___flge+3,w
 21075  23AD  00CB               	movwf	___flge@ff1+3
 21076  23AE  0852               	movf	??___flge+2,w
 21077  23AF  00CA               	movwf	___flge@ff1+2
 21078  23B0  0851               	movf	??___flge+1,w
 21079  23B1  00C9               	movwf	___flge@ff1+1
 21080  23B2  0850               	movf	??___flge,w
 21081  23B3  00C8               	movwf	___flge@ff1
 21082  23B4                     l7388:	
 21083  23B4  1FCF               	btfss	___flge@ff2+3,7
 21084  23B5  2BCE               	goto	l1120
 21085  23B6  3000               	movlw	0
 21086  23B7  00D0               	movwf	??___flge
 21087  23B8  3000               	movlw	0
 21088  23B9  00D1               	movwf	??___flge+1
 21089  23BA  3000               	movlw	0
 21090  23BB  00D2               	movwf	??___flge+2
 21091  23BC  3080               	movlw	128
 21092  23BD  00D3               	movwf	??___flge+3
 21093  23BE  084C               	movf	___flge@ff2,w
 21094  23BF  02D0               	subwf	??___flge,f
 21095  23C0  084D               	movf	___flge@ff2+1,w
 21096  23C1  3BD1               	subwfb	??___flge+1,f
 21097  23C2  084E               	movf	___flge@ff2+2,w
 21098  23C3  3BD2               	subwfb	??___flge+2,f
 21099  23C4  084F               	movf	___flge@ff2+3,w
 21100  23C5  3BD3               	subwfb	??___flge+3,f
 21101  23C6  0853               	movf	??___flge+3,w
 21102  23C7  00CF               	movwf	___flge@ff2+3
 21103  23C8  0852               	movf	??___flge+2,w
 21104  23C9  00CE               	movwf	___flge@ff2+2
 21105  23CA  0851               	movf	??___flge+1,w
 21106  23CB  00CD               	movwf	___flge@ff2+1
 21107  23CC  0850               	movf	??___flge,w
 21108  23CD  00CC               	movwf	___flge@ff2
 21109  23CE                     l1120:	
 21110  23CE  3080               	movlw	128
 21111  23CF  06CB               	xorwf	___flge@ff1+3,f
 21112  23D0  3080               	movlw	128
 21113  23D1  06CF               	xorwf	___flge@ff2+3,f
 21114  23D2  084F               	movf	___flge@ff2+3,w
 21115  23D3  024B               	subwf	___flge@ff1+3,w
 21116  23D4  1D03               	skipz
 21117  23D5  0008               	return
 21118  23D6  084E               	movf	___flge@ff2+2,w
 21119  23D7  024A               	subwf	___flge@ff1+2,w
 21120  23D8  1D03               	skipz
 21121  23D9  0008               	return
 21122  23DA  084D               	movf	___flge@ff2+1,w
 21123  23DB  0249               	subwf	___flge@ff1+1,w
 21124  23DC  1D03               	skipz
 21125  23DD  0008               	return
 21126  23DE  084C               	movf	___flge@ff2,w
 21127  23DF  0248               	subwf	___flge@ff1,w
 21128  23E0  0008               	return
 21129  23E1                     __end_of___flge:	
 21130                           
 21131                           	psect	text73
 21132  2C0C                     __ptext73:	
 21133 ;; *************** function _OLED_loadSpecialChars *****************
 21134 ;; Defined at:
 21135 ;;		line 177 in file "oled.c"
 21136 ;; Parameters:    Size  Location     Type
 21137 ;;		None
 21138 ;; Auto vars:     Size  Location     Type
 21139 ;;  special        24    8[BANK0 ] unsigned char [24]
 21140 ;;  n               1   32[BANK0 ] unsigned char 
 21141 ;; Return value:  Size  Location     Type
 21142 ;;                  1    wreg      void 
 21143 ;; Registers used:
 21144 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21145 ;; Tracked objects:
 21146 ;;		On entry : 0/0
 21147 ;;		On exit  : 0/0
 21148 ;;		Unchanged: 0/0
 21149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21150 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21151 ;;      Locals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21152 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21153 ;;      Totals:         0      26       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21154 ;;Total ram usage:       26 bytes
 21155 ;; Hardware stack levels used:    1
 21156 ;; Hardware stack levels required when called:    7
 21157 ;; This function calls:
 21158 ;;		_OLED_command
 21159 ;;		_OLED_write
 21160 ;; This function is called by:
 21161 ;;		_main
 21162 ;; This function uses a non-reentrant model
 21163 ;;
 21164                           
 21165                           
 21166                           ;psect for function _OLED_loadSpecialChars
 21167  2C0C                     _OLED_loadSpecialChars:	
 21168                           
 21169                           ;oled.c: 179:  uint8_t special[] = {0x18, 0x18, 0x03, 0x04, 0x04, 0x04, 0x03, 0x00,
 21170                           
 21171                           ;incstack = 0
 21172                           ; Regs used in _OLED_loadSpecialChars: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21173  2C0C  30D1               	movlw	low OLED_loadSpecialChars@F7930
 21174  2C0D  0086               	movwf	6
 21175  2C0E  3002               	movlw	high OLED_loadSpecialChars@F7930
 21176  2C0F  0087               	movwf	7
 21177  2C10  3028               	movlw	low OLED_loadSpecialChars@special
 21178  2C11  0084               	movwf	4
 21179  2C12  3000               	movlw	high OLED_loadSpecialChars@special
 21180  2C13  0085               	movwf	5
 21181  2C14  3018               	movlw	24
 21182  2C15  0140               	movlb	0	; select bank0
 21183  2C16  00A7               	movwf	??_OLED_loadSpecialChars
 21184  2C17                     u12390:	
 21185  2C17  0016               	moviw fsr1++
 21186  2C18  001A               	movwi fsr0++
 21187  2C19  0BA7               	decfsz	??_OLED_loadSpecialChars,f
 21188  2C1A  2C17               	goto	u12390
 21189                           
 21190                           ;oled.c: 182:  uint8_t n;;oled.c: 184:  OLED_command(0x40 + 8);
 21191  2C1B  3048               	movlw	72
 21192  2C1C  31A9  2193  31AC   	fcall	_OLED_command
 21193                           
 21194                           ;oled.c: 185:  for(n = 0; n < sizeof(special); n++) {
 21195  2C1F  0140               	movlb	0	; select bank0
 21196  2C20  01C0               	clrf	OLED_loadSpecialChars@n
 21197  2C21                     l9002:	
 21198                           
 21199                           ;oled.c: 186:   OLED_write(special[n]);
 21200  2C21  0840               	movf	OLED_loadSpecialChars@n,w
 21201  2C22  3E28               	addlw	(low (OLED_loadSpecialChars@special| 0))& (0+255)
 21202  2C23  0086               	movwf	6
 21203  2C24  0187               	clrf	7
 21204  2C25  0801               	movf	1,w
 21205  2C26  31A9  21B1  31AC   	fcall	_OLED_write
 21206                           
 21207                           ;oled.c: 187:  }
 21208  2C29  3001               	movlw	1
 21209  2C2A  0140               	movlb	0	; select bank0
 21210  2C2B  00A7               	movwf	??_OLED_loadSpecialChars
 21211  2C2C  0827               	movf	??_OLED_loadSpecialChars,w
 21212  2C2D  07C0               	addwf	OLED_loadSpecialChars@n,f
 21213  2C2E  3018               	movlw	24
 21214  2C2F  0240               	subwf	OLED_loadSpecialChars@n,w
 21215  2C30  1803               	btfsc	3,0
 21216  2C31  0008               	return
 21217  2C32  2C21               	goto	l9002
 21218  2C33                     __end_of_OLED_loadSpecialChars:	
 21219                           
 21220                           	psect	text74
 21221  29B1                     __ptext74:	
 21222 ;; *************** function _OLED_write *****************
 21223 ;; Defined at:
 21224 ;;		line 79 in file "oled.c"
 21225 ;; Parameters:    Size  Location     Type
 21226 ;;  value           1    wreg     unsigned char 
 21227 ;; Auto vars:     Size  Location     Type
 21228 ;;  value           1    6[BANK0 ] unsigned char 
 21229 ;; Return value:  Size  Location     Type
 21230 ;;                  1    wreg      void 
 21231 ;; Registers used:
 21232 ;;		wreg, status,2, status,0, pclath, cstack
 21233 ;; Tracked objects:
 21234 ;;		On entry : 0/0
 21235 ;;		On exit  : 0/0
 21236 ;;		Unchanged: 0/0
 21237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21238 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21239 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21240 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21241 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21242 ;;Total ram usage:        1 bytes
 21243 ;; Hardware stack levels used:    1
 21244 ;; Hardware stack levels required when called:    6
 21245 ;; This function calls:
 21246 ;;		_OLED_send
 21247 ;;		_OLED_waitForReady
 21248 ;; This function is called by:
 21249 ;;		_OLED_print_xy
 21250 ;;		_OLED_loadSpecialChars
 21251 ;;		_OLED_print
 21252 ;; This function uses a non-reentrant model
 21253 ;;
 21254                           
 21255                           
 21256                           ;psect for function _OLED_write
 21257  29B1                     _OLED_write:	
 21258                           
 21259                           ;incstack = 0
 21260                           ; Regs used in _OLED_write: [wreg+status,2+status,0+pclath+cstack]
 21261                           ;OLED_write@value stored from wreg
 21262  29B1  0140               	movlb	0	; select bank0
 21263  29B2  00A6               	movwf	OLED_write@value
 21264                           
 21265                           ;oled.c: 79: void OLED_write(uint8_t value);oled.c: 80: {;oled.c: 81:  OLED_send(value, 
      +                          1);
 21266  29B3  01A3               	clrf	OLED_send@mode
 21267  29B4  0AA3               	incf	OLED_send@mode,f
 21268  29B5  0826               	movf	OLED_write@value,w
 21269  29B6  31AA  2217  31A9   	fcall	_OLED_send
 21270                           
 21271                           ;oled.c: 82:  OLED_waitForReady();
 21272  29B9  31AA  22FA         	fcall	_OLED_waitForReady
 21273  29BB  0008               	return
 21274  29BC                     __end_of_OLED_write:	
 21275                           
 21276                           	psect	text75
 21277  245D                     __ptext75:	
 21278 ;; *************** function _OLED_init *****************
 21279 ;; Defined at:
 21280 ;;		line 85 in file "oled.c"
 21281 ;; Parameters:    Size  Location     Type
 21282 ;;		None
 21283 ;; Auto vars:     Size  Location     Type
 21284 ;;		None
 21285 ;; Return value:  Size  Location     Type
 21286 ;;                  1    wreg      void 
 21287 ;; Registers used:
 21288 ;;		wreg, status,2, status,0, pclath, cstack
 21289 ;; Tracked objects:
 21290 ;;		On entry : 0/0
 21291 ;;		On exit  : 0/0
 21292 ;;		Unchanged: 0/0
 21293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21295 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21296 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21297 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21298 ;;Total ram usage:        1 bytes
 21299 ;; Hardware stack levels used:    1
 21300 ;; Hardware stack levels required when called:    7
 21301 ;; This function calls:
 21302 ;;		_OLED_command
 21303 ;;		_OLED_write4bits
 21304 ;; This function is called by:
 21305 ;;		_main
 21306 ;; This function uses a non-reentrant model
 21307 ;;
 21308                           
 21309                           
 21310                           ;psect for function _OLED_init
 21311  245D                     _OLED_init:	
 21312                           
 21313                           ;oled.c: 87:  LATBbits.LATB4 = 0;
 21314                           
 21315                           ;incstack = 0
 21316                           ; Regs used in _OLED_init: [wreg+status,2+status,0+pclath+cstack]
 21317  245D  0140               	movlb	0	; select bank0
 21318  245E  1219               	bcf	25,4	;volatile
 21319                           
 21320                           ;oled.c: 88:  LATBbits.LATB2 = 0;
 21321  245F  1119               	bcf	25,2	;volatile
 21322                           
 21323                           ;oled.c: 89:  LATBbits.LATB3 = 0;
 21324  2460  1199               	bcf	25,3	;volatile
 21325                           
 21326                           ;oled.c: 91:  _delay((unsigned long)((50)*(4000000/4000.0)));
 21327  2461  3041               	movlw	65
 21328  2462  0140               	movlb	0	; select bank0
 21329  2463  00A7               	movwf	??_OLED_init
 21330  2464  30EE               	movlw	238
 21331  2465                     u12697:	
 21332  2465  0B89               	decfsz	9,f
 21333  2466  2C65               	goto	u12697
 21334  2467  0BA7               	decfsz	??_OLED_init,f
 21335  2468  2C65               	goto	u12697
 21336  2469  0000               	nop
 21337                           
 21338                           ;oled.c: 95:  LATBbits.LATB1 = 0;
 21339  246A  0140               	movlb	0	; select bank0
 21340  246B  1099               	bcf	25,1	;volatile
 21341                           
 21342                           ;oled.c: 96:  LATBbits.LATB0 = 0;
 21343  246C  1019               	bcf	25,0	;volatile
 21344                           
 21345                           ;oled.c: 97:  LATCbits.LATC5 = 0;
 21346  246D  129A               	bcf	26,5	;volatile
 21347                           
 21348                           ;oled.c: 98:  LATCbits.LATC4 = 0;
 21349  246E  121A               	bcf	26,4	;volatile
 21350                           
 21351                           ;oled.c: 109:  OLED_write4bits(0x03);
 21352  246F  3003               	movlw	3
 21353  2470  31AD  2555  31A4   	fcall	_OLED_write4bits
 21354                           
 21355                           ;oled.c: 110:  _delay((unsigned long)((5)*(4000000/4000.0)));
 21356  2473  3007               	movlw	7
 21357  2474  0140               	movlb	0	; select bank0
 21358  2475  00A7               	movwf	??_OLED_init
 21359  2476  307D               	movlw	125
 21360  2477                     u12707:	
 21361  2477  0B89               	decfsz	9,f
 21362  2478  2C77               	goto	u12707
 21363  2479  0BA7               	decfsz	??_OLED_init,f
 21364  247A  2C77               	goto	u12707
 21365                           
 21366                           ;oled.c: 111:  OLED_write4bits(0x08);
 21367  247B  3008               	movlw	8
 21368  247C  31AD  2555  31A4   	fcall	_OLED_write4bits
 21369                           
 21370                           ;oled.c: 112:  _delay((unsigned long)((5)*(4000000/4000.0)));
 21371  247F  3007               	movlw	7
 21372  2480  0140               	movlb	0	; select bank0
 21373  2481  00A7               	movwf	??_OLED_init
 21374  2482  307D               	movlw	125
 21375  2483                     u12717:	
 21376  2483  0B89               	decfsz	9,f
 21377  2484  2C83               	goto	u12717
 21378  2485  0BA7               	decfsz	??_OLED_init,f
 21379  2486  2C83               	goto	u12717
 21380                           
 21381                           ;oled.c: 114:  OLED_write4bits(0x02);
 21382  2487  3002               	movlw	2
 21383  2488  31AD  2555  31A4   	fcall	_OLED_write4bits
 21384                           
 21385                           ;oled.c: 115:  _delay((unsigned long)((5)*(4000000/4000.0)));
 21386  248B  3007               	movlw	7
 21387  248C  0140               	movlb	0	; select bank0
 21388  248D  00A7               	movwf	??_OLED_init
 21389  248E  307D               	movlw	125
 21390  248F                     u12727:	
 21391  248F  0B89               	decfsz	9,f
 21392  2490  2C8F               	goto	u12727
 21393  2491  0BA7               	decfsz	??_OLED_init,f
 21394  2492  2C8F               	goto	u12727
 21395                           
 21396                           ;oled.c: 116:  OLED_write4bits(0x02);
 21397  2493  3002               	movlw	2
 21398  2494  31AD  2555  31A4   	fcall	_OLED_write4bits
 21399                           
 21400                           ;oled.c: 117:  _delay((unsigned long)((5)*(4000000/4000.0)));
 21401  2497  3007               	movlw	7
 21402  2498  0140               	movlb	0	; select bank0
 21403  2499  00A7               	movwf	??_OLED_init
 21404  249A  307D               	movlw	125
 21405  249B                     u12737:	
 21406  249B  0B89               	decfsz	9,f
 21407  249C  2C9B               	goto	u12737
 21408  249D  0BA7               	decfsz	??_OLED_init,f
 21409  249E  2C9B               	goto	u12737
 21410                           
 21411                           ;oled.c: 118:  OLED_write4bits(0x08);
 21412  249F  3008               	movlw	8
 21413  24A0  31AD  2555  31A4   	fcall	_OLED_write4bits
 21414                           
 21415                           ;oled.c: 119:  _delay((unsigned long)((5)*(4000000/4000.0)));
 21416  24A3  3007               	movlw	7
 21417  24A4  0140               	movlb	0	; select bank0
 21418  24A5  00A7               	movwf	??_OLED_init
 21419  24A6  307D               	movlw	125
 21420  24A7                     u12747:	
 21421  24A7  0B89               	decfsz	9,f
 21422  24A8  2CA7               	goto	u12747
 21423  24A9  0BA7               	decfsz	??_OLED_init,f
 21424  24AA  2CA7               	goto	u12747
 21425                           
 21426                           ;oled.c: 121:  OLED_command(0x08);
 21427  24AB  3008               	movlw	8
 21428  24AC  31A9  2193  31A4   	fcall	_OLED_command
 21429                           
 21430                           ;oled.c: 122:  _delay((unsigned long)((5)*(4000000/4000.0)));
 21431  24AF  3007               	movlw	7
 21432  24B0  0140               	movlb	0	; select bank0
 21433  24B1  00A7               	movwf	??_OLED_init
 21434  24B2  307D               	movlw	125
 21435  24B3                     u12757:	
 21436  24B3  0B89               	decfsz	9,f
 21437  24B4  2CB3               	goto	u12757
 21438  24B5  0BA7               	decfsz	??_OLED_init,f
 21439  24B6  2CB3               	goto	u12757
 21440                           
 21441                           ;oled.c: 123:  OLED_command(0x01);
 21442  24B7  3001               	movlw	1
 21443  24B8  31A9  2193  31A4   	fcall	_OLED_command
 21444                           
 21445                           ;oled.c: 124:  _delay((unsigned long)((5)*(4000000/4000.0)));
 21446  24BB  3007               	movlw	7
 21447  24BC  0140               	movlb	0	; select bank0
 21448  24BD  00A7               	movwf	??_OLED_init
 21449  24BE  307D               	movlw	125
 21450  24BF                     u12767:	
 21451  24BF  0B89               	decfsz	9,f
 21452  24C0  2CBF               	goto	u12767
 21453  24C1  0BA7               	decfsz	??_OLED_init,f
 21454  24C2  2CBF               	goto	u12767
 21455                           
 21456                           ;oled.c: 125:  OLED_command(0x06);
 21457  24C3  3006               	movlw	6
 21458  24C4  31A9  2193  31A4   	fcall	_OLED_command
 21459                           
 21460                           ;oled.c: 126:  _delay((unsigned long)((5)*(4000000/4000.0)));
 21461  24C7  3007               	movlw	7
 21462  24C8  0140               	movlb	0	; select bank0
 21463  24C9  00A7               	movwf	??_OLED_init
 21464  24CA  307D               	movlw	125
 21465  24CB                     u12777:	
 21466  24CB  0B89               	decfsz	9,f
 21467  24CC  2CCB               	goto	u12777
 21468  24CD  0BA7               	decfsz	??_OLED_init,f
 21469  24CE  2CCB               	goto	u12777
 21470                           
 21471                           ;oled.c: 127:  OLED_command(0x02);
 21472  24CF  3002               	movlw	2
 21473  24D0  31A9  2193  31A4   	fcall	_OLED_command
 21474                           
 21475                           ;oled.c: 128:  _delay((unsigned long)((5)*(4000000/4000.0)));
 21476  24D3  3007               	movlw	7
 21477  24D4  0140               	movlb	0	; select bank0
 21478  24D5  00A7               	movwf	??_OLED_init
 21479  24D6  307D               	movlw	125
 21480  24D7                     u12787:	
 21481  24D7  0B89               	decfsz	9,f
 21482  24D8  2CD7               	goto	u12787
 21483  24D9  0BA7               	decfsz	??_OLED_init,f
 21484  24DA  2CD7               	goto	u12787
 21485                           
 21486                           ;oled.c: 129:  OLED_command(0x0C);
 21487  24DB  300C               	movlw	12
 21488  24DC  31A9  2193  31A4   	fcall	_OLED_command
 21489                           
 21490                           ;oled.c: 130:  _delay((unsigned long)((5)*(4000000/4000.0)));
 21491  24DF  3007               	movlw	7
 21492  24E0  0140               	movlb	0	; select bank0
 21493  24E1  00A7               	movwf	??_OLED_init
 21494  24E2  307D               	movlw	125
 21495  24E3                     u12797:	
 21496  24E3  0B89               	decfsz	9,f
 21497  24E4  2CE3               	goto	u12797
 21498  24E5  0BA7               	decfsz	??_OLED_init,f
 21499  24E6  2CE3               	goto	u12797
 21500  24E7  0008               	return
 21501  24E8                     __end_of_OLED_init:	
 21502                           
 21503                           	psect	text76
 21504  2993                     __ptext76:	
 21505 ;; *************** function _OLED_command *****************
 21506 ;; Defined at:
 21507 ;;		line 73 in file "oled.c"
 21508 ;; Parameters:    Size  Location     Type
 21509 ;;  value           1    wreg     unsigned char 
 21510 ;; Auto vars:     Size  Location     Type
 21511 ;;  value           1    6[BANK0 ] unsigned char 
 21512 ;; Return value:  Size  Location     Type
 21513 ;;                  1    wreg      void 
 21514 ;; Registers used:
 21515 ;;		wreg, status,2, status,0, pclath, cstack
 21516 ;; Tracked objects:
 21517 ;;		On entry : 0/0
 21518 ;;		On exit  : 0/0
 21519 ;;		Unchanged: 0/0
 21520 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21522 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21524 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21525 ;;Total ram usage:        1 bytes
 21526 ;; Hardware stack levels used:    1
 21527 ;; Hardware stack levels required when called:    6
 21528 ;; This function calls:
 21529 ;;		_OLED_send
 21530 ;;		_OLED_waitForReady
 21531 ;; This function is called by:
 21532 ;;		_OLED_init
 21533 ;;		_OLED_scrollDisplayLeft
 21534 ;;		_OLED_scrollDisplayRight
 21535 ;;		_OLED_print_xy
 21536 ;;		_OLED_returnHome
 21537 ;;		_OLED_clearDisplay
 21538 ;;		_OLED_loadSpecialChars
 21539 ;;		_returnToPage
 21540 ;;		_OLED_Off
 21541 ;;		_OLED_setCursor
 21542 ;; This function uses a non-reentrant model
 21543 ;;
 21544                           
 21545                           
 21546                           ;psect for function _OLED_command
 21547  2993                     _OLED_command:	
 21548                           
 21549                           ;incstack = 0
 21550                           ; Regs used in _OLED_command: [wreg+status,2+status,0+pclath+cstack]
 21551                           ;OLED_command@value stored from wreg
 21552  2993  0140               	movlb	0	; select bank0
 21553  2994  00A6               	movwf	OLED_command@value
 21554                           
 21555                           ;oled.c: 73: void OLED_command(uint8_t value);oled.c: 74: {;oled.c: 75:  OLED_send(value
      +                          , 0);
 21556  2995  01A3               	clrf	OLED_send@mode
 21557  2996  0826               	movf	OLED_command@value,w
 21558  2997  31AA  2217  31A9   	fcall	_OLED_send
 21559                           
 21560                           ;oled.c: 76:  OLED_waitForReady();
 21561  299A  31AA  22FA         	fcall	_OLED_waitForReady
 21562  299C  0008               	return
 21563  299D                     __end_of_OLED_command:	
 21564                           
 21565                           	psect	text77
 21566  2AFA                     __ptext77:	
 21567 ;; *************** function _OLED_waitForReady *****************
 21568 ;; Defined at:
 21569 ;;		line 48 in file "oled.c"
 21570 ;; Parameters:    Size  Location     Type
 21571 ;;		None
 21572 ;; Auto vars:     Size  Location     Type
 21573 ;;  busy            1    0[BANK0 ] unsigned char 
 21574 ;; Return value:  Size  Location     Type
 21575 ;;                  1    wreg      void 
 21576 ;; Registers used:
 21577 ;;		wreg, status,2, status,0, pclath, cstack
 21578 ;; Tracked objects:
 21579 ;;		On entry : 0/0
 21580 ;;		On exit  : 0/0
 21581 ;;		Unchanged: 0/0
 21582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21584 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21586 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21587 ;;Total ram usage:        1 bytes
 21588 ;; Hardware stack levels used:    1
 21589 ;; Hardware stack levels required when called:    4
 21590 ;; This function calls:
 21591 ;;		_OLED_pulseEnable
 21592 ;; This function is called by:
 21593 ;;		_OLED_command
 21594 ;;		_OLED_write
 21595 ;; This function uses a non-reentrant model
 21596 ;;
 21597                           
 21598                           
 21599                           ;psect for function _OLED_waitForReady
 21600  2AFA                     _OLED_waitForReady:	
 21601                           
 21602                           ;oled.c: 52:  TRISCbits.TRISC4 = 1;
 21603                           
 21604                           ;incstack = 0
 21605                           ; Regs used in _OLED_waitForReady: [wreg+status,2+status,0+pclath+cstack]
 21606  2AFA  0140               	movlb	0	; select bank0
 21607  2AFB  1614               	bsf	20,4	;volatile
 21608                           
 21609                           ;oled.c: 53:  LATBbits.LATB4 = 0;
 21610  2AFC  1219               	bcf	25,4	;volatile
 21611                           
 21612                           ;oled.c: 54:  LATBbits.LATB3 = 1;
 21613  2AFD  1599               	bsf	25,3	;volatile
 21614  2AFE                     l246:	
 21615                           ;oled.c: 56:  do {
 21616                           
 21617                           
 21618                           ;oled.c: 57:   LATBbits.LATB2 = 0;
 21619  2AFE  1119               	bcf	25,2	;volatile
 21620                           
 21621                           ;oled.c: 58:   _delay((unsigned long)((10)*(4000000/4000000.0)));
 21622  2AFF  3003               	movlw	3
 21623  2B00                     u12807:	
 21624  2B00  0B89               	decfsz	9,f
 21625  2B01  2B00               	goto	u12807
 21626  2B02  0000               	nop
 21627                           
 21628                           ;oled.c: 59:   LATBbits.LATB2 = 1;
 21629  2B03  0140               	movlb	0	; select bank0
 21630  2B04  1519               	bsf	25,2	;volatile
 21631                           
 21632                           ;oled.c: 61:   _delay((unsigned long)((10)*(4000000/4000000.0)));
 21633  2B05  3003               	movlw	3
 21634  2B06                     u12817:	
 21635  2B06  0B89               	decfsz	9,f
 21636  2B07  2B06               	goto	u12817
 21637  2B08  0000               	nop
 21638                           
 21639                           ;oled.c: 62:   busy = PORTCbits.RC4;
 21640  2B09  3000               	movlw	0
 21641  2B0A  0140               	movlb	0	; select bank0
 21642  2B0B  1A0E               	btfsc	14,4	;volatile
 21643  2B0C  3001               	movlw	1
 21644  2B0D  00A0               	movwf	OLED_waitForReady@busy
 21645                           
 21646                           ;oled.c: 64:   LATBbits.LATB2 = 0;
 21647  2B0E  1119               	bcf	25,2	;volatile
 21648                           
 21649                           ;oled.c: 66:   OLED_pulseEnable();
 21650  2B0F  31A9  218A  31AA   	fcall	_OLED_pulseEnable
 21651                           
 21652                           ;oled.c: 67:  } while (busy);
 21653  2B12  0140               	movlb	0	; select bank0
 21654  2B13  0820               	movf	OLED_waitForReady@busy,w
 21655  2B14  1D03               	btfss	3,2
 21656  2B15  2AFE               	goto	l246
 21657                           
 21658                           ;oled.c: 69:  TRISCbits.TRISC4 = 0;
 21659  2B16  1214               	bcf	20,4	;volatile
 21660                           
 21661                           ;oled.c: 70:  LATBbits.LATB3 = 0;
 21662  2B17  1199               	bcf	25,3	;volatile
 21663  2B18  0008               	return
 21664  2B19                     __end_of_OLED_waitForReady:	
 21665                           
 21666                           	psect	text78
 21667  2A17                     __ptext78:	
 21668 ;; *************** function _OLED_send *****************
 21669 ;; Defined at:
 21670 ;;		line 37 in file "oled.c"
 21671 ;; Parameters:    Size  Location     Type
 21672 ;;  value           1    wreg     unsigned char 
 21673 ;;  mode            1    3[BANK0 ] unsigned char 
 21674 ;; Auto vars:     Size  Location     Type
 21675 ;;  value           1    5[BANK0 ] unsigned char 
 21676 ;; Return value:  Size  Location     Type
 21677 ;;                  1    wreg      void 
 21678 ;; Registers used:
 21679 ;;		wreg, status,2, status,0, pclath, cstack
 21680 ;; Tracked objects:
 21681 ;;		On entry : 0/0
 21682 ;;		On exit  : 0/0
 21683 ;;		Unchanged: 0/0
 21684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21685 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21686 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21687 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21688 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21689 ;;Total ram usage:        3 bytes
 21690 ;; Hardware stack levels used:    1
 21691 ;; Hardware stack levels required when called:    5
 21692 ;; This function calls:
 21693 ;;		_OLED_write4bits
 21694 ;; This function is called by:
 21695 ;;		_OLED_command
 21696 ;;		_OLED_write
 21697 ;; This function uses a non-reentrant model
 21698 ;;
 21699                           
 21700                           
 21701                           ;psect for function _OLED_send
 21702  2A17                     _OLED_send:	
 21703                           
 21704                           ;incstack = 0
 21705                           ; Regs used in _OLED_send: [wreg+status,2+status,0+pclath+cstack]
 21706                           ;OLED_send@value stored from wreg
 21707  2A17  0140               	movlb	0	; select bank0
 21708  2A18  00A5               	movwf	OLED_send@value
 21709                           
 21710                           ;oled.c: 37: void OLED_send(uint8_t value, uint8_t mode);oled.c: 38: {;oled.c: 39:  LATB
      +                          bits.LATB4 = mode;
 21711  2A19  0C23               	rrf	OLED_send@mode,w
 21712  2A1A  1C03               	skipc
 21713  2A1B  1219               	bcf	25,4	;volatile
 21714  2A1C  1803               	skipnc
 21715  2A1D  1619               	bsf	25,4	;volatile
 21716                           
 21717                           ;oled.c: 40:  LATBbits.LATB3 = 0;
 21718  2A1E  1199               	bcf	25,3	;volatile
 21719                           
 21720                           ;oled.c: 42:  OLED_write4bits(value >> 4);
 21721  2A1F  0825               	movf	OLED_send@value,w
 21722  2A20  00A4               	movwf	??_OLED_send
 21723  2A21  3004               	movlw	4
 21724  2A22                     u10705:	
 21725  2A22  36A4               	lsrf	??_OLED_send,f
 21726  2A23  0B89               	decfsz	9,f
 21727  2A24  2A22               	goto	u10705
 21728  2A25  0824               	movf	??_OLED_send,w
 21729  2A26  31AD  2555  31AA   	fcall	_OLED_write4bits
 21730                           
 21731                           ;oled.c: 43:  OLED_write4bits(value);
 21732  2A29  0140               	movlb	0	; select bank0
 21733  2A2A  0825               	movf	OLED_send@value,w
 21734  2A2B  31AD  2555         	fcall	_OLED_write4bits
 21735  2A2D  0008               	return
 21736  2A2E                     __end_of_OLED_send:	
 21737                           
 21738                           	psect	text79
 21739  2D55                     __ptext79:	
 21740 ;; *************** function _OLED_write4bits *****************
 21741 ;; Defined at:
 21742 ;;		line 26 in file "oled.c"
 21743 ;; Parameters:    Size  Location     Type
 21744 ;;  value           1    wreg     unsigned char 
 21745 ;; Auto vars:     Size  Location     Type
 21746 ;;  value           1    2[BANK0 ] unsigned char 
 21747 ;; Return value:  Size  Location     Type
 21748 ;;                  1    wreg      void 
 21749 ;; Registers used:
 21750 ;;		wreg, status,2, status,0, pclath, cstack
 21751 ;; Tracked objects:
 21752 ;;		On entry : 0/0
 21753 ;;		On exit  : 0/0
 21754 ;;		Unchanged: 0/0
 21755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21758 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21759 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21760 ;;Total ram usage:        3 bytes
 21761 ;; Hardware stack levels used:    1
 21762 ;; Hardware stack levels required when called:    4
 21763 ;; This function calls:
 21764 ;;		_OLED_pulseEnable
 21765 ;; This function is called by:
 21766 ;;		_OLED_send
 21767 ;;		_OLED_init
 21768 ;; This function uses a non-reentrant model
 21769 ;;
 21770                           
 21771                           
 21772                           ;psect for function _OLED_write4bits
 21773  2D55                     _OLED_write4bits:	
 21774                           
 21775                           ;incstack = 0
 21776                           ; Regs used in _OLED_write4bits: [wreg+status,2+status,0+pclath+cstack]
 21777                           ;OLED_write4bits@value stored from wreg
 21778  2D55  0140               	movlb	0	; select bank0
 21779  2D56  00A2               	movwf	OLED_write4bits@value
 21780                           
 21781                           ;oled.c: 26: void OLED_write4bits(uint8_t value);oled.c: 27: {;oled.c: 28:  LATBbits.LAT
      +                          B1 = (value >> 0) & 0x01;
 21782  2D57  0822               	movf	OLED_write4bits@value,w
 21783  2D58  3901               	andlw	1
 21784  2D59  00A0               	movwf	??_OLED_write4bits
 21785  2D5A  0DA0               	rlf	??_OLED_write4bits,f
 21786  2D5B  0819               	movf	25,w	;volatile
 21787  2D5C  0620               	xorwf	??_OLED_write4bits,w
 21788  2D5D  39FD               	andlw	-3
 21789  2D5E  0620               	xorwf	??_OLED_write4bits,w
 21790  2D5F  0099               	movwf	25	;volatile
 21791                           
 21792                           ;oled.c: 29:  LATBbits.LATB0 = (value >> 1) & 0x01;
 21793  2D60  0822               	movf	OLED_write4bits@value,w
 21794  2D61  00A0               	movwf	??_OLED_write4bits
 21795  2D62  3001               	movlw	1
 21796  2D63                     u9175:	
 21797  2D63  36A0               	lsrf	??_OLED_write4bits,f
 21798  2D64  0B89               	decfsz	9,f
 21799  2D65  2D63               	goto	u9175
 21800  2D66  3001               	movlw	1
 21801  2D67  0520               	andwf	??_OLED_write4bits,w
 21802  2D68  00A1               	movwf	??_OLED_write4bits+1
 21803  2D69  0819               	movf	25,w	;volatile
 21804  2D6A  0621               	xorwf	??_OLED_write4bits+1,w
 21805  2D6B  39FE               	andlw	-2
 21806  2D6C  0621               	xorwf	??_OLED_write4bits+1,w
 21807  2D6D  0099               	movwf	25	;volatile
 21808                           
 21809                           ;oled.c: 30:  LATCbits.LATC5 = (value >> 2) & 0x01;
 21810  2D6E  0822               	movf	OLED_write4bits@value,w
 21811  2D6F  00A0               	movwf	??_OLED_write4bits
 21812  2D70  3002               	movlw	2
 21813  2D71                     u9185:	
 21814  2D71  36A0               	lsrf	??_OLED_write4bits,f
 21815  2D72  0B89               	decfsz	9,f
 21816  2D73  2D71               	goto	u9185
 21817  2D74  0820               	movf	??_OLED_write4bits,w
 21818  2D75  3901               	andlw	1
 21819  2D76  00A1               	movwf	??_OLED_write4bits+1
 21820  2D77  0EA1               	swapf	??_OLED_write4bits+1,f
 21821  2D78  0DA1               	rlf	??_OLED_write4bits+1,f
 21822  2D79  081A               	movf	26,w	;volatile
 21823  2D7A  0621               	xorwf	??_OLED_write4bits+1,w
 21824  2D7B  39DF               	andlw	-33
 21825  2D7C  0621               	xorwf	??_OLED_write4bits+1,w
 21826  2D7D  009A               	movwf	26	;volatile
 21827                           
 21828                           ;oled.c: 31:  LATCbits.LATC4 = (value >> 3) & 0x01;
 21829  2D7E  0822               	movf	OLED_write4bits@value,w
 21830  2D7F  00A0               	movwf	??_OLED_write4bits
 21831  2D80  3003               	movlw	3
 21832  2D81                     u9195:	
 21833  2D81  36A0               	lsrf	??_OLED_write4bits,f
 21834  2D82  0B89               	decfsz	9,f
 21835  2D83  2D81               	goto	u9195
 21836  2D84  0820               	movf	??_OLED_write4bits,w
 21837  2D85  3901               	andlw	1
 21838  2D86  00A1               	movwf	??_OLED_write4bits+1
 21839  2D87  0EA1               	swapf	??_OLED_write4bits+1,f
 21840  2D88  081A               	movf	26,w	;volatile
 21841  2D89  0621               	xorwf	??_OLED_write4bits+1,w
 21842  2D8A  39EF               	andlw	-17
 21843  2D8B  0621               	xorwf	??_OLED_write4bits+1,w
 21844  2D8C  009A               	movwf	26	;volatile
 21845                           
 21846                           ;oled.c: 33:  _delay((unsigned long)((50)*(4000000/4000000.0)));
 21847  2D8D  3010               	movlw	16
 21848  2D8E                     u12827:	
 21849  2D8E  0B89               	decfsz	9,f
 21850  2D8F  2D8E               	goto	u12827
 21851  2D90  3200               	nop2
 21852                           
 21853                           ;oled.c: 34:  OLED_pulseEnable();
 21854  2D91  31A9  218A         	fcall	_OLED_pulseEnable
 21855  2D93  0008               	return
 21856  2D94                     __end_of_OLED_write4bits:	
 21857                           
 21858                           	psect	text80
 21859  298A                     __ptext80:	
 21860 ;; *************** function _OLED_pulseEnable *****************
 21861 ;; Defined at:
 21862 ;;		line 19 in file "oled.c"
 21863 ;; Parameters:    Size  Location     Type
 21864 ;;		None
 21865 ;; Auto vars:     Size  Location     Type
 21866 ;;		None
 21867 ;; Return value:  Size  Location     Type
 21868 ;;                  1    wreg      void 
 21869 ;; Registers used:
 21870 ;;		wreg
 21871 ;; Tracked objects:
 21872 ;;		On entry : 0/0
 21873 ;;		On exit  : 0/0
 21874 ;;		Unchanged: 0/0
 21875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21876 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21877 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21878 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21879 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21880 ;;Total ram usage:        0 bytes
 21881 ;; Hardware stack levels used:    1
 21882 ;; Hardware stack levels required when called:    3
 21883 ;; This function calls:
 21884 ;;		Nothing
 21885 ;; This function is called by:
 21886 ;;		_OLED_write4bits
 21887 ;;		_OLED_waitForReady
 21888 ;; This function uses a non-reentrant model
 21889 ;;
 21890                           
 21891                           
 21892                           ;psect for function _OLED_pulseEnable
 21893  298A                     _OLED_pulseEnable:	
 21894                           
 21895                           ;oled.c: 21:  LATBbits.LATB2 = 1;
 21896                           
 21897                           ;incstack = 0
 21898                           ; Regs used in _OLED_pulseEnable: [wreg]
 21899  298A  0140               	movlb	0	; select bank0
 21900  298B  1519               	bsf	25,2	;volatile
 21901                           
 21902                           ;oled.c: 22:  _delay((unsigned long)((50)*(4000000/4000000.0)));
 21903  298C  3010               	movlw	16
 21904  298D                     u12837:	
 21905  298D  0B89               	decfsz	9,f
 21906  298E  298D               	goto	u12837
 21907  298F  3200               	nop2
 21908                           
 21909                           ;oled.c: 23:  LATBbits.LATB2 = 0;
 21910  2990  0140               	movlb	0	; select bank0
 21911  2991  1119               	bcf	25,2	;volatile
 21912  2992  0008               	return
 21913  2993                     __end_of_OLED_pulseEnable:	
 21914                           
 21915                           	psect	intentry
 21916  0004                     __pintentry:	
 21917 ;; *************** function _ISR *****************
 21918 ;; Defined at:
 21919 ;;		line 48 in file "interrupt.c"
 21920 ;; Parameters:    Size  Location     Type
 21921 ;;		None
 21922 ;; Auto vars:     Size  Location     Type
 21923 ;;		None
 21924 ;; Return value:  Size  Location     Type
 21925 ;;                  1    wreg      void 
 21926 ;; Registers used:
 21927 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 21928 ;; Tracked objects:
 21929 ;;		On entry : 0/0
 21930 ;;		On exit  : 0/0
 21931 ;;		Unchanged: 0/0
 21932 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 21933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21935 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21936 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 21937 ;;Total ram usage:        4 bytes
 21938 ;; Hardware stack levels used:    1
 21939 ;; Hardware stack levels required when called:    2
 21940 ;; This function calls:
 21941 ;;		_pushButtonISR
 21942 ;;		_rotISR
 21943 ;;		_uartReceiveISR
 21944 ;; This function is called by:
 21945 ;;		Interrupt level 1
 21946 ;; This function uses a non-reentrant model
 21947 ;;
 21948                           
 21949  0004                     _ISR:	
 21950                           
 21951                           ;incstack = 0
 21952  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 21953                           
 21954                           ; Regs used in _ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 21955  0005  3180               	pagesel	$
 21956                           
 21957                           ;interrupt.c: 50:  if (PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1) {
 21958  0006  014E               	movlb	14	; select bank14
 21959  0007  1A96               	btfsc	22,5	;volatile
 21960  0008  1E8C               	btfss	12,5	;volatile
 21961  0009  2815               	goto	i1l343
 21962                           
 21963                           ;interrupt.c: 53:   tick10ms++;
 21964  000A  3001               	movlw	1
 21965  000B  00F8               	movwf	??_ISR
 21966  000C  0878               	movf	??_ISR,w
 21967  000D  0143               	movlb	3	; select bank3
 21968  000E  07CA               	addwf	_tick10ms^(0+384),f	;volatile
 21969                           
 21970                           ;interrupt.c: 54:   TMR0 = 178;
 21971  000F  30B2               	movlw	178
 21972  0010  014B               	movlb	11	; select bank11
 21973  0011  009C               	movwf	28	;volatile
 21974                           
 21975                           ;interrupt.c: 55:   PIR0bits.TMR0IF = 0;
 21976  0012  014E               	movlb	14	; select bank14
 21977  0013  128C               	bcf	12,5	;volatile
 21978                           
 21979                           ;interrupt.c: 56:  } else if (PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1) {
 21980  0014  2866               	goto	i1l355
 21981  0015                     i1l343:	
 21982  0015  1A16               	btfsc	22,4	;volatile
 21983  0016  1E0C               	btfss	12,4	;volatile
 21984  0017  2831               	goto	i1l345
 21985                           
 21986                           ;interrupt.c: 58:   if (IOCAFbits.IOCAF7 == 1) {
 21987  0018  017E               	movlb	62	; select bank62
 21988  0019  1FBF               	btfss	63,7	;volatile
 21989  001A  2820               	goto	i1l6730
 21990                           
 21991                           ;interrupt.c: 59:    pushButtonISR();
 21992  001B  31AC  2433  3180   	fcall	_pushButtonISR
 21993                           
 21994                           ;interrupt.c: 60:    IOCAFbits.IOCAF7 = 0;
 21995  001E  017E               	movlb	62	; select bank62
 21996  001F  13BF               	bcf	63,7	;volatile
 21997  0020                     i1l6730:	
 21998                           
 21999                           ;interrupt.c: 62:   if (IOCAFbits.IOCAF4 == 1) {
 22000  0020  1E3F               	btfss	63,4	;volatile
 22001  0021  2827               	goto	i1l6736
 22002                           
 22003                           ;interrupt.c: 63:    rotISR();
 22004  0022  3198  2001  3180   	fcall	_rotISR
 22005                           
 22006                           ;interrupt.c: 64:    IOCAFbits.IOCAF4 = 0;
 22007  0025  017E               	movlb	62	; select bank62
 22008  0026  123F               	bcf	63,4	;volatile
 22009  0027                     i1l6736:	
 22010                           
 22011                           ;interrupt.c: 66:   if (IOCAFbits.IOCAF5 == 1) {
 22012  0027  1EBF               	btfss	63,5	;volatile
 22013  0028  282E               	goto	i1l6742
 22014                           
 22015                           ;interrupt.c: 67:    rotISR();
 22016  0029  3198  2001  3180   	fcall	_rotISR
 22017                           
 22018                           ;interrupt.c: 68:    IOCAFbits.IOCAF5 = 0;
 22019  002C  017E               	movlb	62	; select bank62
 22020  002D  12BF               	bcf	63,5	;volatile
 22021  002E                     i1l6742:	
 22022                           
 22023                           ;interrupt.c: 70:   PIR0bits.IOCIF = 0;
 22024  002E  014E               	movlb	14	; select bank14
 22025  002F  120C               	bcf	12,4	;volatile
 22026                           
 22027                           ;interrupt.c: 71:  } else if (INTCONbits.PEIE == 1) {
 22028  0030  2866               	goto	i1l355
 22029  0031                     i1l345:	
 22030  0031  1F0B               	btfss	11,6	;volatile
 22031  0032  2866               	goto	i1l355
 22032                           
 22033                           ;interrupt.c: 72:   if (PIE4bits.TMR1IE == 1 && PIR4bits.TMR1IF == 1) {
 22034  0033  181A               	btfsc	26,0	;volatile
 22035  0034  1C10               	btfss	16,0	;volatile
 22036  0035  285F               	goto	i1l351
 22037                           
 22038                           ;interrupt.c: 75:    if (tick100ms++ >= 1000000000UL)
 22039  0036  0143               	movlb	3	; select bank3
 22040  0037  0823               	movf	(_tick100ms+3)^(0+384),w	;volatile
 22041  0038  00FB               	movwf	??_ISR+3
 22042  0039  0822               	movf	(_tick100ms+2)^(0+384),w	;volatile
 22043  003A  00FA               	movwf	??_ISR+2
 22044  003B  0821               	movf	(_tick100ms+1)^(0+384),w	;volatile
 22045  003C  00F9               	movwf	??_ISR+1
 22046  003D  0820               	movf	_tick100ms^(0+384),w	;volatile
 22047  003E  00F8               	movwf	??_ISR
 22048  003F  3001               	movlw	1
 22049  0040  07A0               	addwf	_tick100ms^(0+384),f	;volatile
 22050  0041  3000               	movlw	0
 22051  0042  3DA1               	addwfc	(_tick100ms+1)^(0+384),f	;volatile
 22052  0043  3DA2               	addwfc	(_tick100ms+2)^(0+384),f	;volatile
 22053  0044  3DA3               	addwfc	(_tick100ms+3)^(0+384),f	;volatile
 22054  0045  3000               	movlw	0
 22055  0046  0278               	subwf	??_ISR,w
 22056  0047  30CA               	movlw	202
 22057  0048  3B79               	subwfb	??_ISR+1,w
 22058  0049  309A               	movlw	154
 22059  004A  3B7A               	subwfb	??_ISR+2,w
 22060  004B  303B               	movlw	59
 22061  004C  3B7B               	subwfb	??_ISR+3,w
 22062  004D  1C03               	btfss	3,0
 22063  004E  2857               	goto	i1l6752
 22064                           
 22065                           ;interrupt.c: 76:     tick100ms = 0;
 22066  004F  3000               	movlw	0
 22067  0050  00A3               	movwf	(_tick100ms+3)^(0+384)	;volatile
 22068  0051  3000               	movlw	0
 22069  0052  00A2               	movwf	(_tick100ms+2)^(0+384)	;volatile
 22070  0053  3000               	movlw	0
 22071  0054  00A1               	movwf	(_tick100ms+1)^(0+384)	;volatile
 22072  0055  3000               	movlw	0
 22073  0056  00A0               	movwf	_tick100ms^(0+384)	;volatile
 22074  0057                     i1l6752:	
 22075                           
 22076                           ;interrupt.c: 77:    TMR1 = 53035;
 22077  0057  30CF               	movlw	207
 22078  0058  0144               	movlb	4	; select bank4
 22079  0059  008D               	movwf	13	;volatile
 22080  005A  302B               	movlw	43
 22081  005B  008C               	movwf	12	;volatile
 22082                           
 22083                           ;interrupt.c: 78:    PIR4bits.TMR1IF = 0;
 22084  005C  014E               	movlb	14	; select bank14
 22085  005D  1010               	bcf	16,0	;volatile
 22086                           
 22087                           ;interrupt.c: 79:   } else if (PIE3bits.RC1IE == 1 && PIR3bits.RC1IF == 1) {
 22088  005E  2866               	goto	i1l355
 22089  005F                     i1l351:	
 22090  005F  1A99               	btfsc	25,5	;volatile
 22091  0060  1E8F               	btfss	15,5	;volatile
 22092  0061  2866               	goto	i1l355
 22093                           
 22094                           ;interrupt.c: 80:    uartReceiveISR();
 22095  0062  31AE  266B         	fcall	_uartReceiveISR
 22096                           
 22097                           ;interrupt.c: 81:    PIR3bits.RC1IF = 0;
 22098  0064  014E               	movlb	14	; select bank14
 22099  0065  128F               	bcf	15,5	;volatile
 22100  0066                     i1l355:	
 22101  0066  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 22102  0067  0009               	retfie
 22103  0068                     __end_of_ISR:	
 22104                           
 22105                           	psect	text82
 22106  2E6B                     __ptext82:	
 22107 ;; *************** function _uartReceiveISR *****************
 22108 ;; Defined at:
 22109 ;;		line 35 in file "uart.c"
 22110 ;; Parameters:    Size  Location     Type
 22111 ;;		None
 22112 ;; Auto vars:     Size  Location     Type
 22113 ;;		None
 22114 ;; Return value:  Size  Location     Type
 22115 ;;                  1    wreg      void 
 22116 ;; Registers used:
 22117 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 22118 ;; Tracked objects:
 22119 ;;		On entry : 0/0
 22120 ;;		On exit  : 0/0
 22121 ;;		Unchanged: 0/0
 22122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22123 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22124 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22125 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22126 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22127 ;;Total ram usage:        1 bytes
 22128 ;; Hardware stack levels used:    1
 22129 ;; Hardware stack levels required when called:    1
 22130 ;; This function calls:
 22131 ;;		_strncpy
 22132 ;; This function is called by:
 22133 ;;		_ISR
 22134 ;; This function uses a non-reentrant model
 22135 ;;
 22136                           
 22137                           
 22138                           ;psect for function _uartReceiveISR
 22139  2E6B                     _uartReceiveISR:	
 22140                           
 22141                           ;uart.c: 37:  static char buffer[20];;uart.c: 38:  static uint8_t rxCount = 0;;uart.c: 3
      +                          9:  static uint8_t checksum = 0;;uart.c: 41:  if (RC1STAbits.OERR)
 22142                           
 22143                           ;incstack = 0
 22144                           ; Regs used in _uartReceiveISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 22145  2E6B  0142               	movlb	2	; select bank2
 22146  2E6C  1C9D               	btfss	29,1	;volatile
 22147  2E6D  2E75               	goto	i1l6526
 22148                           
 22149                           ;uart.c: 42:  {;uart.c: 43:   RC1STAbits.CREN = 0;
 22150  2E6E  121D               	bcf	29,4	;volatile
 22151                           
 22152                           ;uart.c: 44:   RC1STAbits.CREN = 1;
 22153  2E6F  161D               	bsf	29,4	;volatile
 22154                           
 22155                           ;uart.c: 45:   rxOErrCount++;
 22156  2E70  3001               	movlw	1
 22157  2E71  00F6               	movwf	??_uartReceiveISR
 22158  2E72  0876               	movf	??_uartReceiveISR,w
 22159  2E73  0143               	movlb	3	; select bank3
 22160  2E74  07C6               	addwf	_rxOErrCount^(0+384),f	;volatile
 22161  2E75                     i1l6526:	
 22162                           
 22163                           ;uart.c: 47:  if (RC1STAbits.FERR)
 22164  2E75  0142               	movlb	2	; select bank2
 22165  2E76  1D1D               	btfss	29,2	;volatile
 22166  2E77  2E7F               	goto	i1l6532
 22167                           
 22168                           ;uart.c: 48:  {;uart.c: 49:   RC1STAbits.SPEN = 0;
 22169  2E78  139D               	bcf	29,7	;volatile
 22170                           
 22171                           ;uart.c: 50:   RC1STAbits.SPEN = 1;
 22172  2E79  179D               	bsf	29,7	;volatile
 22173                           
 22174                           ;uart.c: 51:   rxFErrCount++;
 22175  2E7A  3001               	movlw	1
 22176  2E7B  00F6               	movwf	??_uartReceiveISR
 22177  2E7C  0876               	movf	??_uartReceiveISR,w
 22178  2E7D  0143               	movlb	3	; select bank3
 22179  2E7E  07C7               	addwf	_rxFErrCount^(0+384),f	;volatile
 22180  2E7F                     i1l6532:	
 22181                           
 22182                           ;uart.c: 55:  if (rxCount < sizeof(dataPacket)) {
 22183  2E7F  300F               	movlw	15
 22184  2E80  0143               	movlb	3	; select bank3
 22185  2E81  0244               	subwf	uartReceiveISR@rxCount^(0+384),w
 22186  2E82  1803               	skipnc
 22187  2E83  2E9D               	goto	i1l6538
 22188                           
 22189                           ;uart.c: 56:   buffer[rxCount] = RC1REG;
 22190  2E84  0142               	movlb	2	; select bank2
 22191  2E85  0819               	movf	25,w	;volatile
 22192  2E86  00F6               	movwf	??_uartReceiveISR
 22193  2E87  0143               	movlb	3	; select bank3
 22194  2E88  0844               	movf	uartReceiveISR@rxCount^(0+384),w
 22195  2E89  3E28               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 22196  2E8A  0086               	movwf	6
 22197  2E8B  3002               	movlw	2	; select bank4/5
 22198  2E8C  0087               	movwf	7
 22199  2E8D  0876               	movf	??_uartReceiveISR,w
 22200  2E8E  0081               	movwf	1
 22201                           
 22202                           ;uart.c: 57:   checksum ^= buffer[rxCount];
 22203  2E8F  0844               	movf	uartReceiveISR@rxCount^(0+384),w
 22204  2E90  3E28               	addlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 22205  2E91  0086               	movwf	6
 22206  2E92  3002               	movlw	2	; select bank4/5
 22207  2E93  0087               	movwf	7
 22208  2E94  0801               	movf	1,w
 22209  2E95  00F6               	movwf	??_uartReceiveISR
 22210  2E96  0876               	movf	??_uartReceiveISR,w
 22211  2E97  06C3               	xorwf	uartReceiveISR@checksum^(0+384),f
 22212                           
 22213                           ;uart.c: 58:   rxCount++;
 22214  2E98  3001               	movlw	1
 22215  2E99  00F6               	movwf	??_uartReceiveISR
 22216  2E9A  0876               	movf	??_uartReceiveISR,w
 22217  2E9B  07C4               	addwf	uartReceiveISR@rxCount^(0+384),f
 22218                           
 22219                           ;uart.c: 59:  } else {
 22220  2E9C  0008               	return
 22221  2E9D                     i1l6538:	
 22222                           
 22223                           ;uart.c: 61:   if (RC1REG == checksum) {
 22224  2E9D  0142               	movlb	2	; select bank2
 22225  2E9E  0819               	movf	25,w	;volatile
 22226  2E9F  0143               	movlb	3	; select bank3
 22227  2EA0  0643               	xorwf	uartReceiveISR@checksum^(0+384),w
 22228  2EA1  1D03               	skipz
 22229  2EA2  2EB2               	goto	i1l6544
 22230                           
 22231                           ;uart.c: 63:    dataReadyFlag = 1;
 22232  2EA3  3001               	movlw	1
 22233  2EA4  00F6               	movwf	??_uartReceiveISR
 22234  2EA5  0876               	movf	??_uartReceiveISR,w
 22235  2EA6  00C5               	movwf	_dataReadyFlag^(0+384)	;volatile
 22236                           
 22237                           ;uart.c: 64:    strncpy((char *) &dataPacket, buffer, sizeof(dataPacket));
 22238  2EA7  3028               	movlw	(low (uartReceiveISR@buffer| (0+512)))& (0+255)
 22239  2EA8  00F6               	movwf	??_uartReceiveISR
 22240  2EA9  0876               	movf	??_uartReceiveISR,w
 22241  2EAA  00F0               	movwf	strncpy@s
 22242  2EAB  300F               	movlw	15
 22243  2EAC  00F1               	movwf	strncpy@n
 22244  2EAD  3000               	movlw	0
 22245  2EAE  00F2               	movwf	strncpy@n+1
 22246  2EAF  303C               	movlw	(low (_dataPacket| (0+512)))& (0+255)
 22247  2EB0  31AC  24BF         	fcall	_strncpy
 22248  2EB2                     i1l6544:	
 22249                           
 22250                           ;uart.c: 66:   checksum = 0;
 22251  2EB2  0143               	movlb	3	; select bank3
 22252  2EB3  01C3               	clrf	uartReceiveISR@checksum^(0+384)
 22253                           
 22254                           ;uart.c: 67:   rxCount = 0;
 22255  2EB4  01C4               	clrf	uartReceiveISR@rxCount^(0+384)
 22256  2EB5  0008               	return
 22257  2EB6                     __end_of_uartReceiveISR:	
 22258                           
 22259                           	psect	text83
 22260  2CBF                     __ptext83:	
 22261 ;; *************** function _strncpy *****************
 22262 ;; Defined at:
 22263 ;;		line 3 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c99\common\strncpy.c"
 22264 ;; Parameters:    Size  Location     Type
 22265 ;;  d               1    wreg     PTR unsigned char 
 22266 ;;		 -> dataPacket(15), 
 22267 ;;  s               1    0[COMMON] PTR const unsigned char 
 22268 ;;		 -> uartReceiveISR@buffer(20), 
 22269 ;;  n               2    1[COMMON] unsigned int 
 22270 ;; Auto vars:     Size  Location     Type
 22271 ;;  d               1    4[COMMON] PTR unsigned char 
 22272 ;;		 -> dataPacket(15), 
 22273 ;;  cp              1    5[COMMON] PTR unsigned char 
 22274 ;;		 -> dataPacket(15), 
 22275 ;; Return value:  Size  Location     Type
 22276 ;;                  1    wreg      PTR unsigned char 
 22277 ;; Registers used:
 22278 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0
 22279 ;; Tracked objects:
 22280 ;;		On entry : 0/0
 22281 ;;		On exit  : 0/0
 22282 ;;		Unchanged: 0/0
 22283 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22284 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22285 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22286 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22287 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22288 ;;Total ram usage:        6 bytes
 22289 ;; Hardware stack levels used:    1
 22290 ;; This function calls:
 22291 ;;		Nothing
 22292 ;; This function is called by:
 22293 ;;		_uartReceiveISR
 22294 ;; This function uses a non-reentrant model
 22295 ;;
 22296                           
 22297                           
 22298                           ;psect for function _strncpy
 22299  2CBF                     _strncpy:	
 22300                           
 22301                           ;incstack = 0
 22302                           ; Regs used in _strncpy: [wreg-fsr1h+status,2+status,0]
 22303                           ;strncpy@d stored from wreg
 22304  2CBF  00F4               	movwf	strncpy@d
 22305  2CC0  0874               	movf	strncpy@d,w
 22306  2CC1  00F3               	movwf	??_strncpy
 22307  2CC2  0873               	movf	??_strncpy,w
 22308  2CC3  00F5               	movwf	strncpy@cp
 22309  2CC4                     i1l5942:	
 22310  2CC4  0871               	movf	strncpy@n,w
 22311  2CC5  0472               	iorwf	strncpy@n+1,w
 22312  2CC6  1903               	btfsc	3,2
 22313  2CC7  2CE5               	goto	i1l5948
 22314  2CC8  3001               	movlw	1
 22315  2CC9  02F1               	subwf	strncpy@n,f
 22316  2CCA  3000               	movlw	0
 22317  2CCB  3BF2               	subwfb	strncpy@n+1,f
 22318  2CCC  0875               	movf	strncpy@cp,w
 22319  2CCD  0086               	movwf	6
 22320  2CCE  3002               	movlw	2	; select bank4/5
 22321  2CCF  0087               	movwf	7
 22322  2CD0  0AF5               	incf	strncpy@cp,f
 22323  2CD1  0870               	movf	strncpy@s,w
 22324  2CD2  0084               	movwf	4
 22325  2CD3  3002               	movlw	2	; select bank4/5
 22326  2CD4  0085               	movwf	5
 22327  2CD5  0AF0               	incf	strncpy@s,f
 22328  2CD6  0800               	movf	0,w
 22329  2CD7  3FC0               	movwi [0]fsr1
 22330  2CD8  0889               	movf	9,f
 22331  2CD9  1903               	btfsc	3,2
 22332  2CDA  2CE5               	goto	i1l5948
 22333  2CDB  2CC4               	goto	i1l5942
 22334  2CDC                     i1l5944:	
 22335  2CDC  0875               	movf	strncpy@cp,w
 22336  2CDD  0086               	movwf	6
 22337  2CDE  3002               	movlw	2	; select bank4/5
 22338  2CDF  0087               	movwf	7
 22339  2CE0  0181               	clrf	1
 22340  2CE1  3001               	movlw	1
 22341  2CE2  00F3               	movwf	??_strncpy
 22342  2CE3  0873               	movf	??_strncpy,w
 22343  2CE4  07F5               	addwf	strncpy@cp,f
 22344  2CE5                     i1l5948:	
 22345  2CE5  3001               	movlw	1
 22346  2CE6  02F1               	subwf	strncpy@n,f
 22347  2CE7  3000               	movlw	0
 22348  2CE8  3BF2               	subwfb	strncpy@n+1,f
 22349  2CE9  0A71               	incf	strncpy@n,w
 22350  2CEA  1D03               	skipz
 22351  2CEB  2CDC               	goto	i1l5944
 22352  2CEC  0A72               	incf	strncpy@n+1,w
 22353  2CED  1903               	btfsc	3,2
 22354  2CEE  0008               	return
 22355  2CEF  2CDC               	goto	i1l5944
 22356  2CF0                     __end_of_strncpy:	
 22357                           
 22358                           	psect	text84
 22359  1801                     __ptext84:	
 22360 ;; *************** function _rotISR *****************
 22361 ;; Defined at:
 22362 ;;		line 35 in file "inputs.c"
 22363 ;; Parameters:    Size  Location     Type
 22364 ;;		None
 22365 ;; Auto vars:     Size  Location     Type
 22366 ;;  input           1    7[COMMON] unsigned char 
 22367 ;; Return value:  Size  Location     Type
 22368 ;;                  1    wreg      void 
 22369 ;; Registers used:
 22370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
 22371 ;; Tracked objects:
 22372 ;;		On entry : 0/0
 22373 ;;		On exit  : 0/0
 22374 ;;		Unchanged: 0/0
 22375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22376 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22377 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22378 ;;      Temps:          7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22379 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22380 ;;Total ram usage:        8 bytes
 22381 ;; Hardware stack levels used:    1
 22382 ;; This function calls:
 22383 ;;		Nothing
 22384 ;; This function is called by:
 22385 ;;		_ISR
 22386 ;; This function uses a non-reentrant model
 22387 ;;
 22388                           
 22389                           
 22390                           ;psect for function _rotISR
 22391  1801                     _rotISR:	
 22392                           
 22393                           ;inputs.c: 37:  uint8_t input;;inputs.c: 39:  input = (PORTAbits.RA5 << 1) | PORTAbits.R
      +                          A4;
 22394                           
 22395                           ;incstack = 0
 22396                           ; Regs used in _rotISR: [wreg-fsr0h+status,2+status,0+pclath]
 22397  1801  0140               	movlb	0	; select bank0
 22398  1802  0E0C               	swapf	12,w	;volatile
 22399  1803  3901               	andlw	1
 22400  1804  00F0               	movwf	??_rotISR
 22401  1805  0E0C               	swapf	12,w	;volatile
 22402  1806  0C89               	rrf	9,f
 22403  1807  3901               	andlw	1
 22404  1808  0709               	addwf	9,w
 22405  1809  0470               	iorwf	??_rotISR,w
 22406  180A  00F1               	movwf	??_rotISR+1
 22407  180B  0871               	movf	??_rotISR+1,w
 22408  180C  00F7               	movwf	rotISR@input
 22409                           
 22410                           ;inputs.c: 42:  curRotState = transition_table[curRotState & 0b00000111][input];
 22411  180D  087C               	movf	_curRotState,w	;volatile
 22412  180E  3907               	andlw	7
 22413  180F  00F0               	movwf	??_rotISR
 22414  1810  01F1               	clrf	??_rotISR+1
 22415  1811  35F0               	lslf	??_rotISR,f
 22416  1812  0DF1               	rlf	??_rotISR+1,f
 22417  1813  35F0               	lslf	??_rotISR,f
 22418  1814  0DF1               	rlf	??_rotISR+1,f
 22419  1815  3010               	movlw	low (_transition_table| (0+32768))
 22420  1816  00F2               	movwf	??_rotISR+2
 22421  1817  30B1               	movlw	high (_transition_table| (0+32768))
 22422  1818  00F3               	movwf	??_rotISR+3
 22423  1819  0870               	movf	??_rotISR,w
 22424  181A  0772               	addwf	??_rotISR+2,w
 22425  181B  00F4               	movwf	??_rotISR+4
 22426  181C  0871               	movf	??_rotISR+1,w
 22427  181D  3D73               	addwfc	??_rotISR+3,w
 22428  181E  00F5               	movwf	??_rotISR+5
 22429  181F  0877               	movf	rotISR@input,w
 22430  1820  0774               	addwf	??_rotISR+4,w
 22431  1821  0084               	movwf	4
 22432  1822  0875               	movf	??_rotISR+5,w
 22433  1823  1803               	skipnc
 22434  1824  0A75               	incf	??_rotISR+5,w
 22435  1825  0085               	movwf	5
 22436  1826  0800               	movf	0,w	;code access
 22437  1827  00F6               	movwf	??_rotISR+6
 22438  1828  0876               	movf	??_rotISR+6,w
 22439  1829  00FC               	movwf	_curRotState	;volatile
 22440                           
 22441                           ;inputs.c: 45:  if (curRotState & CW_FLAG) rotDir = ROT_CW;
 22442  182A  1FFC               	btfss	_curRotState,7	;volatile
 22443  182B  2831               	goto	i1l6516
 22444  182C  3001               	movlw	1
 22445  182D  00F0               	movwf	??_rotISR
 22446  182E  0870               	movf	??_rotISR,w
 22447  182F  0143               	movlb	3	; select bank3
 22448  1830  00C9               	movwf	_rotDir^(0+384)	;volatile
 22449  1831                     i1l6516:	
 22450                           
 22451                           ;inputs.c: 46:  if (curRotState & CCW_FLAG) rotDir = ROT_CCW;
 22452  1831  1F7C               	btfss	_curRotState,6	;volatile
 22453  1832  0008               	return
 22454  1833  3002               	movlw	2
 22455  1834  00F0               	movwf	??_rotISR
 22456  1835  0870               	movf	??_rotISR,w
 22457  1836  0143               	movlb	3	; select bank3
 22458  1837  00C9               	movwf	_rotDir^(0+384)	;volatile
 22459  1838  0008               	return
 22460  1839                     __end_of_rotISR:	
 22461                           
 22462                           	psect	text85
 22463  2C33                     __ptext85:	
 22464 ;; *************** function _pushButtonISR *****************
 22465 ;; Defined at:
 22466 ;;		line 53 in file "inputs.c"
 22467 ;; Parameters:    Size  Location     Type
 22468 ;;		None
 22469 ;; Auto vars:     Size  Location     Type
 22470 ;;  time            1    1[COMMON] unsigned char 
 22471 ;; Return value:  Size  Location     Type
 22472 ;;                  1    wreg      void 
 22473 ;; Registers used:
 22474 ;;		wreg, status,2, status,0, pclath, cstack
 22475 ;; Tracked objects:
 22476 ;;		On entry : 0/0
 22477 ;;		On exit  : 0/0
 22478 ;;		Unchanged: 0/0
 22479 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22481 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22482 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22483 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22484 ;;Total ram usage:        2 bytes
 22485 ;; Hardware stack levels used:    1
 22486 ;; Hardware stack levels required when called:    1
 22487 ;; This function calls:
 22488 ;;		_get10msTick
 22489 ;;		_reset10msTick
 22490 ;; This function is called by:
 22491 ;;		_ISR
 22492 ;; This function uses a non-reentrant model
 22493 ;;
 22494                           
 22495                           
 22496                           ;psect for function _pushButtonISR
 22497  2C33                     _pushButtonISR:	
 22498                           
 22499                           ;inputs.c: 55:  uint8_t time;;inputs.c: 57:  if (!PORTAbits.RA7) {
 22500                           
 22501                           ;incstack = 0
 22502                           ; Regs used in _pushButtonISR: [wreg+status,2+status,0+pclath+cstack]
 22503  2C33  0140               	movlb	0	; select bank0
 22504  2C34  1B8C               	btfsc	12,7	;volatile
 22505  2C35  2C39               	goto	i1l6492
 22506                           
 22507                           ;inputs.c: 58:   reset10msTick();
 22508  2C36  3190  2000         	fcall	_reset10msTick
 22509                           
 22510                           ;inputs.c: 59:  } else {
 22511  2C38  0008               	return
 22512  2C39                     i1l6492:	
 22513                           
 22514                           ;inputs.c: 60:   time = get10msTick();
 22515  2C39  31A9  217B  31AC   	fcall	_get10msTick
 22516  2C3C  00F0               	movwf	??_pushButtonISR
 22517  2C3D  0870               	movf	??_pushButtonISR,w
 22518  2C3E  00F1               	movwf	pushButtonISR@time
 22519                           
 22520                           ;inputs.c: 61:   if ((time > 5) & (time <= 50))
 22521  2C3F  3006               	movlw	6
 22522  2C40  0271               	subwf	pushButtonISR@time,w
 22523  2C41  1C03               	skipc
 22524  2C42  2C4D               	goto	i1l6500
 22525  2C43  3033               	movlw	51
 22526  2C44  0271               	subwf	pushButtonISR@time,w
 22527  2C45  1803               	skipnc
 22528  2C46  2C4D               	goto	i1l6500
 22529                           
 22530                           ;inputs.c: 63:    pbState = PB_SHORT;
 22531  2C47  3001               	movlw	1
 22532  2C48  00F0               	movwf	??_pushButtonISR
 22533  2C49  0870               	movf	??_pushButtonISR,w
 22534  2C4A  0143               	movlb	3	; select bank3
 22535  2C4B  00C8               	movwf	_pbState^(0+384)	;volatile
 22536  2C4C  0008               	return
 22537  2C4D                     i1l6500:	
 22538  2C4D  3033               	movlw	51
 22539  2C4E  0271               	subwf	pushButtonISR@time,w
 22540  2C4F  1C03               	skipc
 22541  2C50  2C5B               	goto	i1l6506
 22542  2C51  3097               	movlw	151
 22543  2C52  0271               	subwf	pushButtonISR@time,w
 22544  2C53  1803               	skipnc
 22545  2C54  2C5B               	goto	i1l6506
 22546                           
 22547                           ;inputs.c: 66:    pbState = PB_LONG;
 22548  2C55  3002               	movlw	2
 22549  2C56  00F0               	movwf	??_pushButtonISR
 22550  2C57  0870               	movf	??_pushButtonISR,w
 22551  2C58  0143               	movlb	3	; select bank3
 22552  2C59  00C8               	movwf	_pbState^(0+384)	;volatile
 22553  2C5A  0008               	return
 22554  2C5B                     i1l6506:	
 22555                           
 22556                           ;inputs.c: 69:    pbState = PB_ABORT;
 22557  2C5B  3003               	movlw	3
 22558  2C5C  00F0               	movwf	??_pushButtonISR
 22559  2C5D  0870               	movf	??_pushButtonISR,w
 22560  2C5E  0143               	movlb	3	; select bank3
 22561  2C5F  00C8               	movwf	_pbState^(0+384)	;volatile
 22562  2C60  0008               	return
 22563  2C61                     __end_of_pushButtonISR:	
 22564                           
 22565                           	psect	text86
 22566  1000                     __ptext86:	
 22567 ;; *************** function _reset10msTick *****************
 22568 ;; Defined at:
 22569 ;;		line 41 in file "interrupt.c"
 22570 ;; Parameters:    Size  Location     Type
 22571 ;;		None
 22572 ;; Auto vars:     Size  Location     Type
 22573 ;;		None
 22574 ;; Return value:  Size  Location     Type
 22575 ;;                  1    wreg      void 
 22576 ;; Registers used:
 22577 ;;		status,2
 22578 ;; Tracked objects:
 22579 ;;		On entry : 0/0
 22580 ;;		On exit  : 0/0
 22581 ;;		Unchanged: 0/0
 22582 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22583 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22584 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22586 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22587 ;;Total ram usage:        0 bytes
 22588 ;; Hardware stack levels used:    1
 22589 ;; This function calls:
 22590 ;;		Nothing
 22591 ;; This function is called by:
 22592 ;;		_pushButtonISR
 22593 ;; This function uses a non-reentrant model
 22594 ;;
 22595                           
 22596                           
 22597                           ;psect for function _reset10msTick
 22598  1000                     _reset10msTick:	
 22599                           
 22600                           ;interrupt.c: 42:  tick10ms = 0;
 22601                           
 22602                           ;incstack = 0
 22603                           ; Regs used in _reset10msTick: [status,2]
 22604  1000  0143               	movlb	3	; select bank3
 22605  1001  01CA               	clrf	_tick10ms^(0+384)	;volatile
 22606  1002  0008               	return
 22607  1003                     __end_of_reset10msTick:	
 22608                           
 22609                           	psect	text87
 22610  297B                     __ptext87:	
 22611 ;; *************** function _get10msTick *****************
 22612 ;; Defined at:
 22613 ;;		line 33 in file "interrupt.c"
 22614 ;; Parameters:    Size  Location     Type
 22615 ;;		None
 22616 ;; Auto vars:     Size  Location     Type
 22617 ;;		None
 22618 ;; Return value:  Size  Location     Type
 22619 ;;                  1    wreg      unsigned char 
 22620 ;; Registers used:
 22621 ;;		wreg
 22622 ;; Tracked objects:
 22623 ;;		On entry : 0/0
 22624 ;;		On exit  : 0/0
 22625 ;;		Unchanged: 0/0
 22626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25
 22627 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22628 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22629 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22630 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0
 22631 ;;Total ram usage:        0 bytes
 22632 ;; Hardware stack levels used:    1
 22633 ;; This function calls:
 22634 ;;		Nothing
 22635 ;; This function is called by:
 22636 ;;		_pushButtonISR
 22637 ;; This function uses a non-reentrant model
 22638 ;;
 22639                           
 22640                           
 22641                           ;psect for function _get10msTick
 22642  297B                     _get10msTick:	
 22643                           
 22644                           ;interrupt.c: 35:  return tick10ms;
 22645                           
 22646                           ;incstack = 0
 22647                           ; Regs used in _get10msTick: [wreg]
 22648  297B  0143               	movlb	3	; select bank3
 22649  297C  084A               	movf	_tick10ms^(0+384),w	;volatile
 22650  297D  0008               	return
 22651  297E                     __end_of_get10msTick:	
 22652  007E                     btemp	set	126	;btemp
 22653  007E                     int$flags	set	126
 22654  007E                     wtemp0	set	126


Data Sizes:
    Strings     540
    Constant    115
    Data        58
    BSS         233
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     12      14
    BANK0            80     80      80
    BANK1            80     80      80
    BANK2            80     78      78
    BANK3            80     20      80
    BANK4            80      4      80
    BANK5            80      0      73
    BANK6            80      0      80
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           80      0       0
    BANK13           80      0       0
    BANK14           80      0       0
    BANK15           80      0       0
    BANK16           80      0       0
    BANK17           80      0       0
    BANK18           80      0       0
    BANK19           80      0       0
    BANK20           80      0       0
    BANK21           80      0       0
    BANK22           80      0       0
    BANK23           35      0       0
    BANK24            0      0       0
    BANK25            0      0       0

Pointer List with Targets:

    p_fct$0	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    S1444$1$0	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    sp__getStateFunc$0	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    func$0	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    strncpy@s	PTR const unsigned char  size(1) Largest target is 20
		 -> uartReceiveISR@buffer(BANK4[20]), 

    strncpy@d	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    strncpy@cp	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    strncmp@_r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_47(CODE[3]), 

    strncmp@r	PTR const unsigned char  size(2) Largest target is 3
		 -> STR_47(CODE[3]), 

    strncmp@_l	PTR const unsigned char  size(1) Largest target is 3
		 -> vfpfcnvrt@ct(BANK2[3]), 

    strncmp@l	PTR const unsigned char  size(1) Largest target is 3
		 -> vfpfcnvrt@ct(BANK2[3]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 80
		 -> ?_sprintf(BANK2[2]), stoa@nuls(BANK0[7]), dbuf(BANK6[80]), STR_12(CODE[7]), 
		 -> STR_11(CODE[7]), lBuf(BANK5[49]), sBuf(BANK3[13]), 

    strlen@a	PTR const unsigned char  size(2) Largest target is 80
		 -> ?_sprintf(BANK2[2]), stoa@nuls(BANK0[7]), dbuf(BANK6[80]), STR_12(CODE[7]), 
		 -> STR_11(CODE[7]), lBuf(BANK5[49]), sBuf(BANK3[13]), 

    strcpy@dest	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK6[80]), lBuf(BANK5[49]), sBuf(BANK3[13]), 

    strcpy@d	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK6[80]), lBuf(BANK5[49]), sBuf(BANK3[13]), 

    strcpy@src	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_42(CODE[4]), STR_41(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> dbuf(BANK6[80]), STR_16(CODE[13]), STR_15(CODE[13]), STR_14(CODE[13]), 
		 -> STR_13(CODE[13]), STR_9(CODE[13]), sBuf(BANK3[13]), 

    strcpy@s	PTR const unsigned char  size(2) Largest target is 80
		 -> STR_42(CODE[4]), STR_41(CODE[4]), STR_38(CODE[4]), STR_37(CODE[4]), 
		 -> dbuf(BANK6[80]), STR_16(CODE[13]), STR_15(CODE[13]), STR_14(CODE[13]), 
		 -> STR_13(CODE[13]), STR_9(CODE[13]), sBuf(BANK3[13]), 

    strcat@src	PTR const unsigned char  size(1) Largest target is 13
		 -> sBuf(BANK3[13]), 

    strcat@dest	PTR unsigned char  size(1) Largest target is 49
		 -> lBuf(BANK5[49]), 

    sprintf@fmt	PTR const unsigned char  size(2) Largest target is 53
		 -> STR_35(CODE[15]), STR_33(CODE[15]), STR_31(CODE[13]), STR_29(CODE[53]), 
		 -> STR_27(CODE[14]), STR_25(CODE[14]), STR_24(CODE[15]), STR_23(CODE[15]), 
		 -> STR_21(CODE[14]), STR_20(CODE[13]), STR_19(CODE[15]), STR_18(CODE[15]), 
		 -> STR_10(CODE[10]), STR_8(CODE[16]), STR_7(CODE[7]), STR_5(CODE[42]), 
		 -> STR_4(CODE[13]), STR_3(CODE[14]), 

    sprintf@s	PTR unsigned char  size(2) Largest target is 49
		 -> lBuf(BANK5[49]), sBuf(BANK3[13]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK2[2]), 

    f.buffer	PTR unsigned char  size(2) Largest target is 49
		 -> lBuf(BANK5[49]), sBuf(BANK3[13]), 

    fputs@s	PTR const unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK6[80]), 

    fputs@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    S2102_IO_FILE$buffer	PTR unsigned char  size(2) Largest target is 49
		 -> lBuf(BANK5[49]), sBuf(BANK3[13]), 

    fputc@fp.buffer	PTR unsigned char  size(2) Largest target is 49
		 -> lBuf(BANK5[49]), sBuf(BANK3[13]), 

    fputc@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    atoi@s	PTR const unsigned char  size(2) Largest target is 53
		 -> STR_35(CODE[15]), STR_33(CODE[15]), STR_31(CODE[13]), STR_29(CODE[53]), 
		 -> STR_27(CODE[14]), STR_25(CODE[14]), STR_24(CODE[15]), STR_23(CODE[15]), 
		 -> STR_21(CODE[14]), STR_20(CODE[13]), STR_19(CODE[15]), STR_18(CODE[15]), 
		 -> STR_10(CODE[10]), STR_8(CODE[16]), STR_7(CODE[7]), STR_5(CODE[42]), 
		 -> STR_4(CODE[13]), STR_3(CODE[14]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK2[1]), 

    vfprintf@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    vfprintf@fmt	PTR const unsigned char  size(2) Largest target is 53
		 -> STR_35(CODE[15]), STR_33(CODE[15]), STR_31(CODE[13]), STR_29(CODE[53]), 
		 -> STR_27(CODE[14]), STR_25(CODE[14]), STR_24(CODE[15]), STR_23(CODE[15]), 
		 -> STR_21(CODE[14]), STR_20(CODE[13]), STR_19(CODE[15]), STR_18(CODE[15]), 
		 -> STR_10(CODE[10]), STR_8(CODE[16]), STR_7(CODE[7]), STR_5(CODE[42]), 
		 -> STR_4(CODE[13]), STR_3(CODE[14]), 

    vfprintf@cfmt	PTR unsigned char  size(2) Largest target is 53
		 -> STR_35(CODE[15]), STR_33(CODE[15]), STR_31(CODE[13]), STR_29(CODE[53]), 
		 -> STR_27(CODE[14]), STR_25(CODE[14]), STR_24(CODE[15]), STR_23(CODE[15]), 
		 -> STR_21(CODE[14]), STR_20(CODE[13]), STR_19(CODE[15]), STR_18(CODE[15]), 
		 -> STR_10(CODE[10]), STR_8(CODE[16]), STR_7(CODE[7]), STR_5(CODE[42]), 
		 -> STR_4(CODE[13]), STR_3(CODE[14]), 

    vfpfcnvrt@cp	PTR unsigned char  size(2) Largest target is 13
		 -> ?_sprintf(BANK2[2]), STR_12(CODE[7]), STR_11(CODE[7]), sBuf(BANK3[13]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK2[1]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 2
		 -> vfprintf@cfmt(BANK2[2]), 

    stoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    stoa@s	PTR unsigned char  size(2) Largest target is 13
		 -> ?_sprintf(BANK2[2]), STR_12(CODE[7]), STR_11(CODE[7]), sBuf(BANK3[13]), 

    stoa@cp	PTR unsigned char  size(2) Largest target is 13
		 -> ?_sprintf(BANK2[2]), stoa@nuls(BANK0[7]), STR_12(CODE[7]), STR_11(CODE[7]), 
		 -> sBuf(BANK3[13]), 

    efgtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    dtoa@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    pad@fp	PTR struct _IO_FILE size(1) Largest target is 6
		 -> sprintf@f(BANK2[6]), 

    pad@buf	PTR unsigned char  size(1) Largest target is 80
		 -> dbuf(BANK6[80]), 

    menu@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    sp__getStateFunc	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    menu@func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), NULL(NULL[0]), 

    S1444$func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    stateFuncTbl.func	PTR FTN(PTR struct .,)unsigned char  size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    p_fct	PTR FTN(PTR struct .,)unsigned char [9] size(2) Largest target is 1
		 -> setFudgeFactor(), setSkyTemp(), setDPOffset(), setup(), 
		 -> setLensDia(), setOutputPower(), channelSetup(), channelView(), 
		 -> statusView(), 

    setFudgeFactor@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    setSkyTemp@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    setDPOffset@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    setup@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    setLensDia@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    setOutputPower@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    setOutputPower@chData	PTR struct . size(2) Largest target is 157
		 -> data.chData(BIGRAM[112]), data(BIGRAM[157]), 

    channelSetup@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    channelSetup@chData	PTR struct . size(2) Largest target is 157
		 -> data.chData(BIGRAM[112]), data(BIGRAM[157]), 

    channelView$1190	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_12(CODE[7]), STR_11(CODE[7]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 80
		 -> dbuf(BANK6[80]), lBuf(BANK5[49]), sBuf(BANK3[13]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 49
		 -> lBuf(BANK5[49]), 

    channelView@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    statusView@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    sp__strncpy	PTR unsigned char  size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    spinInput@input	PTR float  size(2) Largest target is 157
		 -> data.chData(BIGRAM[112]), data(BIGRAM[157]), 

    OLED_print_xy@s	PTR unsigned char  size(2) Largest target is 49
		 -> STR_36(CODE[11]), STR_34(CODE[13]), STR_32(CODE[13]), STR_30(CODE[13]), 
		 -> STR_28(CODE[41]), STR_26(CODE[13]), STR_22(CODE[13]), STR_17(CODE[25]), 
		 -> STR_6(CODE[13]), lBuf(BANK5[49]), sBuf(BANK3[13]), STR_2(CODE[49]), 
		 -> STR_1(CODE[9]), 

    convertAnalogValues@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    sp__getDataPacket	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    checkSensor@dp	PTR struct . size(1) Largest target is 15
		 -> dataPacket(BANK4[15]), 

    checkSensor@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 

    initGlobalData@data	PTR struct . size(2) Largest target is 157
		 -> data(BIGRAM[157]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_rotISR
    _uartReceiveISR->_strncpy

Critical Paths under _main in BANK0

    _spinInput->___flsub
    _menuError->_OLED_print_xy
    _OLED_returnHome->_OLED_command
    _OLED_clearDisplay->_OLED_command
    _getStateFunc->___wmul
    _getNextState->___wmul
    _strcat->_strcpy
    _vfpfcnvrt->_efgtoa
    _stoa->_fputc
    _efgtoa->_floorf
    _tolower->_isupper
    _strcpy->_strlen
    _floorf->___fldiv
    ___flsub->___fladd
    _dtoa->___aodiv
    _pad->_fputs
    _fputs->_fputc
    _abs->___aomod
    _atoi->___wmul
    _atoi->_isdigit
    _returnToPage->_OLED_command
    _OLED_scrollDisplayRight->_OLED_command
    _OLED_scrollDisplayLeft->_OLED_command
    _OLED_print_xy->_OLED_command
    _OLED_print_xy->_OLED_write
    _initGlobalData->___wmul
    _convertAnalogValues->___fldiv
    _ema->___lmul
    ___flmul->___xxtofl
    ___fldiv->___flmul
    ___fladd->___flmul
    _checkSensor->___flge
    _timeSince->_timeNow
    ___flge->___flmul
    _OLED_loadSpecialChars->_OLED_command
    _OLED_loadSpecialChars->_OLED_write
    _OLED_write->_OLED_send
    _OLED_init->_OLED_command
    _OLED_command->_OLED_send
    _OLED_send->_OLED_write4bits

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _vfprintf->_vfpfcnvrt
    _vfpfcnvrt->_efgtoa
    _efgtoa->_floorf

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_menu
    _menu->_setLensDia
    _statusView->_sprintf
    _setup->_sprintf
    _setSkyTemp->_sprintf
    _setOutputPower->_sprintf
    _setLensDia->_sprintf
    _setFudgeFactor->_sprintf
    _setDPOffset->_sprintf
    _channelView->_sprintf
    _channelSetup->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_menu
    _menu->_channelView

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _ISR in BANK25

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0  885359
                                             77 BANK2      1     1      0
                                              0 BANK4      4     4      0
                  _OLED_clearDisplay
                          _OLED_init
              _OLED_loadSpecialChars
                    _OLED_returnHome
                        _checkSensor
                _convertAnalogValues
                     _initGlobalData
                         _initialize
                               _menu
                            _timeNow
                          _timeSince
 ---------------------------------------------------------------------------------
 (1) _menu                                                11     9      2  850932
                                             75 BANK2      2     0      2
                                             11 BANK3      9     9      0
                       _channelSetup *
                        _channelView *
                       _getNextState
                              _getPB
                       _getStateFunc
                          _menuError
                        _setDPOffset *
                     _setFudgeFactor *
                         _setLensDia *
                     _setOutputPower *
                         _setSkyTemp *
                              _setup *
                         _statusView *
 ---------------------------------------------------------------------------------
 (2) _statusView                                           8     6      2   82243
                                             65 BANK2      8     6      2
                      _OLED_print_xy
                    _OLED_returnHome
                             _paging
                       _returnToPage
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setup                                                4     2      2   81558
                                             65 BANK2      4     2      2
                      _OLED_print_xy
                             _paging
                       _returnToPage
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setSkyTemp                                           2     0      2   94174
                                             65 BANK2      2     0      2
                      _OLED_print_xy
                       _returnToPage
                          _spinInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setOutputPower                                       8     6      2  101648
                                             65 BANK2      8     6      2
                      _OLED_print_xy
                             ___fleq
                             ___wmul
                       _returnToPage
                          _spinInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setLensDia                                          10     8      2  100314
                                             65 BANK2     10     8      2
                      _OLED_print_xy
                             ___wmul
                       _returnToPage
                          _spinInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setFudgeFactor                                       2     0      2   94239
                                             65 BANK2      2     0      2
                      _OLED_print_xy
                       _returnToPage
                          _spinInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (2) _setDPOffset                                          2     0      2   94174
                                             65 BANK2      2     0      2
                      _OLED_print_xy
                       _returnToPage
                          _spinInput
                            _sprintf
 ---------------------------------------------------------------------------------
 (3) _spinInput                                           16     2     14   14364
                                             68 BANK0      2     2      0
                                              0 BANK1     14     0     14
                            ___fladd
                             ___flge
                            ___flsub
                             ___wmul (ARG)
                          _getRotDir
 ---------------------------------------------------------------------------------
 (2) _menuError                                            0     0      0    5984
                  _OLED_clearDisplay
                      _OLED_print_xy
                    _OLED_returnHome
 ---------------------------------------------------------------------------------
 (3) _OLED_returnHome                                      0     0      0     465
                       _OLED_command
 ---------------------------------------------------------------------------------
 (3) _OLED_clearDisplay                                    0     0      0     465
                       _OLED_command
 ---------------------------------------------------------------------------------
 (2) _getStateFunc                                         7     5      2    6267
                                              6 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _getPB                                                2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _getNextState                                         7     5      2    6633
                                              6 BANK0      7     5      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _channelView                                         19    17      2   92001
                                             65 BANK2      8     6      2
                                              0 BANK3     11    11      0
                      _OLED_print_xy
                             ___wmul
                             _paging
                       _returnToPage
                            _sprintf
                             _strcat
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _channelSetup                                         8     6      2   91313
                                             65 BANK2      8     6      2
                      _OLED_print_xy
                             ___fleq
                             ___wmul
                             _paging
                       _returnToPage
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (3) _strcat                                               4     3      1    2343
                                             17 BANK0      4     3      1
                             _strcpy
                             _strlen
 ---------------------------------------------------------------------------------
 (3) _sprintf                                             32    10     22   68055
                                             33 BANK2     32    10     22
                           _vfprintf
 ---------------------------------------------------------------------------------
 (4) _vfprintf                                             8     5      3   65373
                                             25 BANK2      8     5      3
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (5) _vfpfcnvrt                                           47    45      2   64855
                                             72 BANK1      8     6      2
                                              0 BANK2     25    25      0
                               _atoi
                               _dtoa
                             _efgtoa
                              _fputc
                            _isdigit
                            _isupper
                               _stoa
                            _strncmp
                            _tolower
 ---------------------------------------------------------------------------------
 (6) _strncmp                                              9     5      4     541
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (6) _stoa                                                23    21      2    2673
                                              8 BANK0     23    21      2
                              _fputc
                             _strlen
 ---------------------------------------------------------------------------------
 (6) _efgtoa                                              66    61      5   41103
                                             76 BANK0      4     4      0
                                             10 BANK1     62    57      5
                            ___awdiv
                            ___awmod
                            ___fladd
                            ___fldiv
                             ___fleq
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                            ___fltol
                      ___fpclassifyf
                             _floorf
                            _isupper
                                _pad
                             _strcpy
                            _tolower
 ---------------------------------------------------------------------------------
 (6) _tolower                                              8     6      2    1142
                                              6 BANK0      8     6      2
                            _isupper
 ---------------------------------------------------------------------------------
 (7) _isupper                                              6     4      2     551
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (7) _strcpy                                              12     8      4    1567
                                              5 BANK0     12     8      4
                             _strlen (ARG)
 ---------------------------------------------------------------------------------
 (7) _floorf                                              20    16      4     669
                                             66 BANK0     10     6      4
                                              0 BANK1     10    10      0
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (7) ___fpclassifyf                                       16    12      4     375
                                              0 BANK0     16    12      4
 ---------------------------------------------------------------------------------
 (7) ___fltol                                             11     7      4     787
                                              0 BANK0     11     7      4
 ---------------------------------------------------------------------------------
 (7) ___flsub                                              8     0      8    5167
                                             60 BANK0      8     0      8
                            ___fladd
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (7) ___flneg                                              4     0      4     155
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (7) ___fleq                                              12     4      8    1210
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (7) ___awmod                                              7     3      4     613
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              9     5      4     625
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (6) _dtoa                                                30    22      8    7273
                                             27 BANK0     30    22      8
                            ___aodiv
                            ___aomod
                                _abs
                                _pad
 ---------------------------------------------------------------------------------
 (7) _pad                                                  9     6      3    5061
                                             16 BANK0      9     6      3
                              _fputc
                              _fputs
                             _strlen
 ---------------------------------------------------------------------------------
 (7) _strlen                                               5     3      2     298
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (8) _fputs                                                8     7      1    1969
                                              8 BANK0      8     7      1
                              _fputc
 ---------------------------------------------------------------------------------
 (7) _fputc                                                8     5      3    1577
                                              0 BANK0      8     5      3
                              _putch
 ---------------------------------------------------------------------------------
 (8) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (7) _abs                                                  4     2      2     183
                                             19 BANK0      4     2      2
                            ___aomod (ARG)
 ---------------------------------------------------------------------------------
 (7) ___aomod                                             19     3     16     613
                                              0 BANK0     19     3     16
 ---------------------------------------------------------------------------------
 (7) ___aodiv                                             27    11     16     625
                                              0 BANK0     27    11     16
 ---------------------------------------------------------------------------------
 (6) _atoi                                                15    13      2    7389
                                              6 BANK0     15    13      2
                             ___wmul
                            _isdigit
                            _isspace
 ---------------------------------------------------------------------------------
 (7) _isspace                                              5     3      2     259
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (6) _isdigit                                              6     4      2     371
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _returnToPage                                         4     4      0    6639
                                              7 BANK0      4     4      0
                       _OLED_command
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _paging                                               6     5      1    1717
                                              7 BANK0      6     5      1
             _OLED_scrollDisplayLeft
            _OLED_scrollDisplayRight
                          _getRotDir
 ---------------------------------------------------------------------------------
 (4) _getRotDir                                            2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayRight                              0     0      0     465
                       _OLED_command
 ---------------------------------------------------------------------------------
 (4) _OLED_scrollDisplayLeft                               0     0      0     465
                       _OLED_command
 ---------------------------------------------------------------------------------
 (3) _OLED_print_xy                                        9     6      3    5054
                                              7 BANK0      9     6      3
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (1) _initialize                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initGlobalData                                       9     7      2    7039
                                              6 BANK0      9     7      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (7) ___wmul                                               6     2      4    6106
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _convertAnalogValues                                  8     6      2   19451
                                             66 BANK0      8     6      2
                            ___fladd
                            ___fldiv
                            ___flmul
                           ___xxtofl
                   _adcGetConversion
                                _ema
 ---------------------------------------------------------------------------------
 (2) _ema                                                 20    12      8    1734
                                             12 BANK0     20    12      8
                             ___lmul
 ---------------------------------------------------------------------------------
 (3) ___lmul                                              12     4      8     496
                                              0 BANK0     12     4      8
 ---------------------------------------------------------------------------------
 (2) _adcGetConversion                                     4     2      2      31
                                              0 BANK0      4     2      2
 ---------------------------------------------------------------------------------
 (7) ___flmul                                             26    18      8    8393
                                             14 BANK0     26    18      8
                          __Umul8_16
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (8) __Umul8_16                                            9     7      2     980
                                              0 BANK0      9     7      2
 ---------------------------------------------------------------------------------
 (7) ___fldiv                                             26    18      8    3663
                                             40 BANK0     26    18      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (8) ___fladd                                             20    12      8    4202
                                             40 BANK0     20    12      8
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _checkSensor                                          7     5      2    4856
                                             52 BANK0      7     5      2
                             ___flge
                           ___xxtofl
                      _getDataPacket
                            _timeNow
                          _timeSince
                    _uartIsDataReady
                       _uartSendByte
 ---------------------------------------------------------------------------------
 (2) _uartSendByte                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _uartIsDataReady                                      2     2      0      34
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _timeSince                                           16    12      4     459
                                              4 BANK0     16    12      4
                            _timeNow
 ---------------------------------------------------------------------------------
 (2) _timeNow                                              4     0      4       0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) _getDataPacket                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     926
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (7) ___flge                                              12     4      8    2786
                                             40 BANK0     12     4      8
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (1) _OLED_loadSpecialChars                               26    26      0    1066
                                              7 BANK0     26    26      0
                       _OLED_command
                         _OLED_write
 ---------------------------------------------------------------------------------
 (4) _OLED_write                                           1     1      0     465
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (1) _OLED_init                                            1     1      0     589
                                              7 BANK0      1     1      0
                       _OLED_command
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (4) _OLED_command                                         1     1      0     465
                                              6 BANK0      1     1      0
                          _OLED_send
                  _OLED_waitForReady
 ---------------------------------------------------------------------------------
 (5) _OLED_waitForReady                                    1     1      0      37
                                              0 BANK0      1     1      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (5) _OLED_send                                            3     2      1     397
                                              3 BANK0      3     2      1
                    _OLED_write4bits
 ---------------------------------------------------------------------------------
 (6) _OLED_write4bits                                      3     3      0     124
                                              0 BANK0      3     3      0
                   _OLED_pulseEnable
 ---------------------------------------------------------------------------------
 (6) _OLED_pulseEnable                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR                                                 4     4      0     438
                                              8 COMMON     4     4      0
                      _pushButtonISR
                             _rotISR
                     _uartReceiveISR
 ---------------------------------------------------------------------------------
 (12) _uartReceiveISR                                      1     1      0     326
                                              6 COMMON     1     1      0
                            _strncpy
 ---------------------------------------------------------------------------------
 (13) _strncpy                                             6     3      3     326
                                              0 COMMON     6     3      3
 ---------------------------------------------------------------------------------
 (12) _rotISR                                              8     8      0      23
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 (12) _pushButtonISR                                       2     2      0      89
                                              0 COMMON     2     2      0
                        _get10msTick
                      _reset10msTick
 ---------------------------------------------------------------------------------
 (13) _reset10msTick                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _get10msTick                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _OLED_clearDisplay
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_init
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write4bits
       _OLED_pulseEnable
   _OLED_loadSpecialChars
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
     _OLED_write
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _OLED_returnHome
     _OLED_command
       _OLED_send
         _OLED_write4bits
           _OLED_pulseEnable
       _OLED_waitForReady
         _OLED_pulseEnable
   _checkSensor
     ___flge
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
     ___xxtofl
     _getDataPacket
     _timeNow
     _timeSince
       _timeNow
     _uartIsDataReady
     _uartSendByte
   _convertAnalogValues
     ___fladd
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___fldiv
       ___flmul (ARG)
         __Umul8_16
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     ___flmul
       __Umul8_16
       ___xxtofl (ARG)
     ___xxtofl
     _adcGetConversion
     _ema
       ___lmul
   _initGlobalData
     ___wmul
   _initialize
   _menu
     _channelSetup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       ___fleq
       ___wmul
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
       _strcat
         _strcpy
           _strlen (ARG)
         _strlen
     _channelView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       ___wmul
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
       _strcat
         _strcpy
           _strlen (ARG)
         _strlen
       _strcpy
         _strlen (ARG)
     _getNextState *
       ___wmul
     _getPB *
     _getStateFunc *
       ___wmul
     _menuError *
       _OLED_clearDisplay
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _OLED_returnHome
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
     _setDPOffset *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flge
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___wmul (ARG)
         _getRotDir (ARG)
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
     _setFudgeFactor *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flge
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___wmul (ARG)
         _getRotDir (ARG)
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
     _setLensDia *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       ___wmul
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flge
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___wmul (ARG)
         _getRotDir (ARG)
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
     _setOutputPower *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       ___fleq
       ___wmul
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flge
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___wmul (ARG)
         _getRotDir (ARG)
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
     _setSkyTemp *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _spinInput
         ___fladd
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
           ___xxtofl (ARG)
         ___flge
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___flsub
           ___fladd
             ___flmul (ARG)
               __Umul8_16
               ___xxtofl (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             __Umul8_16
             ___xxtofl (ARG)
         ___wmul (ARG)
         _getRotDir (ARG)
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
     _setup *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
     _statusView *
       _OLED_print_xy
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         _OLED_write
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _OLED_returnHome
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
       _paging
         _OLED_scrollDisplayLeft
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _OLED_scrollDisplayRight
           _OLED_command
             _OLED_send
               _OLED_write4bits
                 _OLED_pulseEnable
             _OLED_waitForReady
               _OLED_pulseEnable
         _getRotDir
       _returnToPage
         _OLED_command
           _OLED_send
             _OLED_write4bits
               _OLED_pulseEnable
           _OLED_waitForReady
             _OLED_pulseEnable
         ___wmul
       _sprintf
         _vfprintf
           _vfpfcnvrt
             _atoi
               ___wmul
               _isdigit
               _isspace
             _dtoa
               ___aodiv
               ___aomod
               _abs
                 ___aomod (ARG)
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
             _efgtoa
               ___awdiv
               ___awmod
               ___fladd
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fldiv
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
                 ___xxtofl (ARG)
               ___fleq
               ___flge
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___flmul
                 __Umul8_16
                 ___xxtofl (ARG)
               ___flneg
               ___flsub
                 ___fladd
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
                 ___flmul (ARG)
                   __Umul8_16
                   ___xxtofl (ARG)
               ___fltol
               ___fpclassifyf
               _floorf
                 ___fldiv (ARG)
                   ___flmul (ARG)
                     __Umul8_16
                     ___xxtofl (ARG)
                   ___xxtofl (ARG)
               _isupper
               _pad
                 _fputc
                   _putch
                 _fputs
                   _fputc
                     _putch
                 _strlen
               _strcpy
                 _strlen (ARG)
               _tolower
                 _isupper
             _fputc
               _putch
             _isdigit
             _isupper
             _stoa
               _fputc
                 _putch
               _strlen
             _strncmp
             _tolower
               _isupper
   _timeNow
   _timeSince
     _timeNow

 _ISR (ROOT)
   _pushButtonISR
     _get10msTick
     _reset10msTick
   _rotISR
   _uartReceiveISR
     _strncpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      C       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     50      50       5      100.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50     50      50       7      100.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
ABS                  0      0     235       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50     4E      4E      10       97.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50     14      50      12      100.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               50      4      50      14      100.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BANK5               50      0      49      16       91.3%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITBANK6            50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BANK6               50      0      50      18      100.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITBANK7            50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BANK7               50      0       0      20        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           50      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              50      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITBANK13           50      0       0      31        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BANK13              50      0       0      32        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%
BITBANK14           50      0       0      33        0.0%
BITSFR32             0      0       0      33        0.0%
SFR32                0      0       0      33        0.0%
BANK14              50      0       0      34        0.0%
BITSFR33             0      0       0      34        0.0%
SFR33                0      0       0      34        0.0%
BITBANK15           50      0       0      35        0.0%
BITSFR34             0      0       0      35        0.0%
SFR34                0      0       0      35        0.0%
BANK15              50      0       0      36        0.0%
BITSFR35             0      0       0      36        0.0%
SFR35                0      0       0      36        0.0%
BITBANK16           50      0       0      37        0.0%
BITSFR36             0      0       0      37        0.0%
SFR36                0      0       0      37        0.0%
BANK16              50      0       0      38        0.0%
BITSFR37             0      0       0      38        0.0%
SFR37                0      0       0      38        0.0%
BITBANK17           50      0       0      39        0.0%
BITSFR38             0      0       0      39        0.0%
SFR38                0      0       0      39        0.0%
BANK17              50      0       0      40        0.0%
BITSFR39             0      0       0      40        0.0%
SFR39                0      0       0      40        0.0%
BITBANK18           50      0       0      41        0.0%
BITSFR40             0      0       0      41        0.0%
SFR40                0      0       0      41        0.0%
BANK18              50      0       0      42        0.0%
BITSFR41             0      0       0      42        0.0%
SFR41                0      0       0      42        0.0%
BITBANK19           50      0       0      43        0.0%
BITSFR42             0      0       0      43        0.0%
SFR42                0      0       0      43        0.0%
BANK19              50      0       0      44        0.0%
BITSFR43             0      0       0      44        0.0%
SFR43                0      0       0      44        0.0%
BITBANK20           50      0       0      45        0.0%
BITSFR44             0      0       0      45        0.0%
SFR44                0      0       0      45        0.0%
BANK20              50      0       0      46        0.0%
BITSFR45             0      0       0      46        0.0%
SFR45                0      0       0      46        0.0%
BITBANK21           50      0       0      47        0.0%
BITSFR46             0      0       0      47        0.0%
SFR46                0      0       0      47        0.0%
BANK21              50      0       0      48        0.0%
BITSFR47             0      0       0      48        0.0%
SFR47                0      0       0      48        0.0%
BITBANK22           50      0       0      49        0.0%
BITSFR48             0      0       0      49        0.0%
SFR48                0      0       0      49        0.0%
BANK22              50      0       0      50        0.0%
BITSFR49             0      0       0      50        0.0%
SFR49                0      0       0      50        0.0%
BITBANK23           50      0       0      51        0.0%
BITSFR50             0      0       0      51        0.0%
SFR50                0      0       0      51        0.0%
BANK23              23      0       0      52        0.0%
BITSFR51             0      0       0      52        0.0%
SFR51                0      0       0      52        0.0%
BITBANK24           50      0       0      53        0.0%
BITSFR52             0      0       0      53        0.0%
SFR52                0      0       0      53        0.0%
BITSFR53             0      0       0      54        0.0%
SFR53                0      0       0      54        0.0%
BANK24               0      0       0      54        0.0%
BITBANK25           20      0       0      55        0.0%
BITSFR54             0      0       0      55        0.0%
SFR54                0      0       0      55        0.0%
BITSFR55             0      0       0      56        0.0%
SFR55                0      0       0      56        0.0%
BANK25               0      0       0      56        0.0%
BITSFR56             0      0       0      57        0.0%
SFR56                0      0       0      57        0.0%
DATA                 0      0     235      57        0.0%
BITSFR57             0      0       0      58        0.0%
SFR57                0      0       0      58        0.0%
BITSFR58             0      0       0      59        0.0%
SFR58                0      0       0      59        0.0%
BITSFR59             0      0       0      60        0.0%
SFR59                0      0       0      60        0.0%
BITSFR60             0      0       0      61        0.0%
SFR60                0      0       0      61        0.0%
BITSFR61             0      0       0      62        0.0%
SFR61                0      0       0      62        0.0%
BITSFR62             0      0       0      63        0.0%
SFR62                0      0       0      63        0.0%
BITSFR63             0      0       0      64        0.0%
SFR63                0      0       0      64        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Mon Jan 27 13:28:05 2020

                   _pushButtonISR 2C33                     returnToPage@n 002A          __end_of_transition_table 312C  
                    _stateFuncTbl 3000                      ___fldiv@aexp 0061                      ___fldiv@bexp 0060  
                    ___fldiv@sign 0059                       __CFG_CP$OFF 0000                      ___awdiv@sign 0026  
             ___wmul@multiplicand 0022                    ??_getStateFunc 0028           ??_OLED_loadSpecialChars 0027  
             __Umul8_16@word_mpld 0026                       __CFG_LVP$ON 0000                               l115 2406  
                             l216 2DDF                               l246 2AFE                               l424 29A3  
                             l178 2AF0                               l810 032A                               l820 037B  
                             l745 2FC5                               l753 1EF5                               l809 033D  
                             l762 1FC1                               l754 1EFC                               l748 2FE5  
                             l597 2A16                               l758 1F17                               l838 0567  
                             l759 1F2B                               l939 2ACA                               l876 187C  
                             l885 18D7                               _ISR 0004                               _abs 2A8E  
                             _ema 2284                               _pad 2FAD                      ___awmod@sign 0026  
                    __CFG_BORV$LO 0000                               wreg 0009                  returnToPage@page 0029  
                    ___flmul@aexp 003C                      ___flmul@bexp 0041                      ___flmul@sign 003B  
                    ___flmul@temp 0046                      ___flmul@prod 0042                     __CFG_BBEN$OFF 0000  
                            ?_ISR 0070                      __CFG_ZCD$OFF 0000                      ___fltol@exp1 002A  
                            l1120 23CE                              ?_abs 0033                              l1052 1AA9  
                            l1108 2E3D                              l1140 2268                              l1117 2380  
                            l1109 2E57                              l1039 1D6F                              l1240 0892  
                            l1320 1345                              l1244 0925                              l1261 09A8  
                            l1317 1320                              l1246 0908                              l1318 1338  
                            l1425 2715                              l1282 0A1F                              l1274 0A07  
                            l1380 25D1                              l1348 0C46                              l1374 259B  
                            ?_ema 002C                              l1296 1219                              l1448 1E9E  
                            l1387 25E5              __end_of_channelSetup 1BA0                              l1388 25EF  
                            l1556 2B49                              l7002 0945                              l7004 0947  
                            l7012 0956                              l7030 09BA                              l7022 09A0  
                            ?_pad 0030                              l7112 2FBB                              l7122 2FC7  
                            l7106 2BA4                              l7052 09D9                              l7044 09CE  
                            l7204 2AC4                              l7116 2FC3                              l8100 07A3  
                            l8020 0616                              l7038 09C7                              l7046 09D0  
                            l7222 1CB6                              l7126 2FF1                              l7310 2EE0  
                            l7056 09DB                              l7240 1D09                              l7320 2EFB  
                            l7144 2338                              l8120 1855                              l9002 2C21  
                            l7074 0A17                              l7250 1D4E                              l7226 1CDE  
                            l7154 2360                              l8018 05F8                              l8026 062C  
                            l8034 06AE                              l7228 1CE3                              l7260 1A08  
                            l7324 2F03                              l7316 2EF2                              l7308 2ED4  
                            l7340 2DA6                              l7412 2231                              l7148 233D  
                            l8108 07C8                              l8140 18AB                              l8220 2F44  
                            l8300 0E15                              l7078 0A1B                              l7502 1244  
                            l7238 1CFA                              l7350 2DB8                              l7430 2264  
                            l8062 0707                              l8046 06E5                              l8038 06CC  
                            l8134 188D                              l8222 2F1F                              l9032 10A8  
                            l7088 2B43                              l9016 13DD                              l7248 1D42  
                            l7272 1A3D                              l7280 1A88                              l7264 1A30  
                            l7336 2D9F                              l7408 2228                              l7192 1E78  
                            l8064 070F                              l8152 18DB                              l8320 0EBB  
                            l9050 11A0                              l9034 10B1                              l7522 128B  
                            l7530 126D                              l7602 0A41                              l7274 1A4C  
                            l7362 2DD5                              l7354 2DC4                              l7186 1E37  
                            l8074 070B                              l8138 189E                              l8330 0F21  
                            l9044 10FD                              l9036 10BA                              l7532 12A9  
                            l7620 0A64                              l7604 0A43                              l8180 26DD  
                            l7292 2EC1                              l7348 2DAC                              l7428 2256  
                            l7188 1E57                              l8084 0769                              l8076 0751  
                            l8156 18EC                              l8148 18AE                              l8228 2F4B  
                            l8308 0E68                              l9124 2438                              l9038 10DB  
                            l9070 11BD                              l6910 086A                              l7462 11EA  
                            l7710 0C1C                              l7622 0A66                              l7606 0A4B  
                            l8414 2D0C                              l8502 1067                              l8182 26E2  
                            l8174 26CD                              l8166 26B1                              l7278 1A7C  
                            l7358 2DCD                              l7374 2E69                              l7438 2275  
                            l8158 18F9                              l8254 0CAA                              l9126 244B  
                            l7384 239A                              l9056 111F                              l9064 11B5  
                            l9048 119D                              l6904 085F                              l7528 12A4  
                            l7632 0A7C                              l7624 0A6E                              l8184 26F6  
                            l8280 0D5A                              l8256 0CBF                              l8264 0CF4  
                            l8424 27AA                              l7554 12DD                              l7546 12AF  
                            l7482 120E                              l7466 11ED                              l7706 0C07  
                            l8514 2C98                              l8442 2C6D                              l7802 1FCD  
                            l7298 2ECC                              l8354 0FC3                              l8338 0F5F  
                            l8258 0CC9                              l9082 2184                              l7388 23B4  
                            l6932 088A                              l6908 0862                              l7548 12C6  
                            l7468 11F5                              l7716 0C33                              l8188 2719  
                            l6852 2F64                              l7812 1FE0                              l7900 02B0  
                            l8348 0F9C                              l8276 0D3B                              l8364 0FD5  
                            l8604 1C87                              l9324 17CC                              l9084 2187  
                            l8534 2033                              l7582 1341                              l7558 12DF  
                            l7486 1211                              l8518 2CA2                              l8198 2748  
                            l9326 26EE                              l7806 1FD5                              l7830 0116  
                            l8358 0FC9                              l8278 0D50                              l8286 0D85  
                            l8630 16D9                              l9328 11C7                              l6928 0887  
                            l7568 1308                              l7496 1238                              l7736 07F7  
                            l6856 2F8B                              l6880 2A4B                              l7816 1FED  
                            l7904 02E0                              l8296 0DF4                              l8392 2D2B  
                            l8800 0804                              l8640 16E7                              l8712 1981  
                            l6938 089C                              l8474 1031                              l8482 1047  
                            l6874 2BC4                              l6882 2A57                              l7906 0305  
                            l7842 012F                              l7850 0142                              l8394 2D4C  
                            l8650 1770                              l8618 166B                              l7692 0BDC  
                            l7684 0BAE                              l7780 1F26                              l7940 0388  
                            l7932 0375                              l7924 0348                              l7916 0337  
                            l7860 0184                              l8652 1779                              l8644 173D  
                            l8660 178E                              l8716 19B7                              l7686 0BC5  
                            l8494 1052                              l7774 1F0F                              l7950 039C  
                            l7942 038C                              l7918 0340                              l7838 0128  
                            l8830 253C                              l8806 083A                              l8654 1782  
                            l8638 16DE                              l6976 0910                              l6968 08D8  
                            l7696 0BDE                              l7784 1F58                              l8824 24EB  
                            l8592 1C5A                              l8648 1767                              l6994 0933  
                            l6978 0912                              l6986 0920                              l7794 1F33  
                            l7970 04F1                              l7954 03A4                              l8666 17DE  
                            l8658 17A2                              l8690 1B12                              l7964 03B6  
                            l7868 01B0                              l8844 2573                              l8588 1BE3  
                            l8870 25BE                              l7966 049E                              l7894 0246  
                            l7878 01F2                              l7886 021E                              l8838 2557  
                            l8694 1B48                              l8880 25D6                              l8864 25AA  
                            l7984 0565                              l7976 0521                              l8858 2593  
                            l7986 056E                              l7898 0276                              l8892 260A  
                            l8868 25AE                              l8878 25E3                              l7998 05D9  
                            STR_1 326C                              STR_2 308C                              STR_3 3191  
                            STR_4 31C8                              STR_5 30BD                              STR_6 30B0  
                            STR_7 3275                              STR_8 3145                              STR_9 31D5  
                            _PIE0 0716                              _PIE3 0719                              _PIE4 071A  
                            u9320 2358                              u9400 1DE7                              u9330 2359  
                            u9075 09F2                              u9155 2B4A                              u9235 2FD1  
                            u9315 234A                              u8700 2A6F                              u9340 2B89  
                            u9405 1DE3                              u9350 2B8A                              u9175 2D63  
                            u9255 2A98                              u9185 2D71                              u9265 230E  
                            u9425 1E22                              u8810 08F7                              u9195 2D81  
                            u9515 2ACB                              u8820 08F8                              u8805 08EC  
                            u9525 2AD0                              u9285 2327                              u9445 1E67  
                            u9615 1D2F                              u9375 1DB1                              u9480 2A3E  
                            u8665 2F89                              u9465 1E89                              u9385 1DD1  
                            u9490 2A3F                              u8690 2A6E                              u9715 1A6A  
                            u9580 1CEB                              u8933 0968                              u8925 094B  
                            u9805 2EE1                              u8855 0916                              u9815 2EEB  
                            u9825 2EF3                              u9905 2DBE                              u9915 2DC5  
                            u8975 09BB                              _TMR0 059C                              u9785 2ED7  
                            _TMR1 020C                              u9885 2DAF                              u9965 2E65  
       __size_of_OLED_pulseEnable 0009              __size_of_get10msTick 0003                     __CFG_FCMEN$ON 0000  
                   OLED_send@mode 0023                              _lBuf 02A0                              abs@a 0033  
                            _data 2753                              _sBuf 01CE                              _dbuf 0320  
                            _atoi 26AC                              _main 23E1                              _dtoa 1EAF  
                            _menu 2163                  channelSetup@data 0161                              _prec 01B0  
                            _nout 01AC                              pad@i 0034                              pad@p 0031  
                            fsr0h 0005                              fsr1h 0007                              indf0 0000  
                            fsr0l 0004                              indf1 0001                              fsr1l 0006  
                            pad@w 0036                              _stoa 1839                  channelSetup@page 01BF  
                            btemp 007E                     __CFG_BOREN$ON 0000                     ___fpclassifyf 22ED  
                            start 0068                       ?_OLED_write 0070                      spinInput@dir 0065  
                 ___fldiv@new_exp 005A                      spinInput@max 00A6                      spinInput@min 00A2  
                  ?_pushButtonISR 0070                      _tolower$2187 002C                     __CFG_CSWEN$ON 0000  
                   __CFG_MCLRE$ON 0000                      main@checkInt 026C                             ??_ISR 0078  
                           ??_abs 0035                             ??_ema 0034                             ??_pad 0033  
              __size_of_OLED_init 008B                __size_of_OLED_send 0017                    _setFudgeFactor 210A  
                   ___fltol@sign1 0029                   __end_of___aodiv 1D81                             ?_atoi 0026  
                 __end_of___fladd 0A27                             ?_main 0070                             ?_dtoa 003B  
                 __end_of___aomod 1ABB                             ?_menu 016B                   __end_of___fldiv 134A  
                 __end_of___awdiv 2F08                   __end_of___flneg 29B1                             STR_10 3262  
                           STR_11 318A                             STR_12 3236                             STR_20 3230  
                           STR_13 3216                             STR_21 319F                             STR_22 323D  
                           STR_30 31FC                             STR_14 31E2                             STR_23 3173  
                           STR_15 3209                             STR_31 31BB                             STR_24 3182  
                           STR_16 3223                             STR_32 31EF                             STR_41 3280  
                           STR_25 31AD                             STR_33 3155                             STR_17 312C  
                   __CFG_WDTE$OFF 0000                             STR_26 3138                             STR_42 3288  
                           STR_34 324A                             STR_18 3173                             STR_27 319F  
                           STR_19 3182                             STR_35 3164                             STR_36 3257  
                           STR_28 30E7                   __end_of___awmod 2DDA                             STR_45 328C  
                           STR_37 327C                             STR_29 301B                             STR_38 3284  
                           STR_47 328C                   __end_of___flmul 0C53   checkSensor@sensorUpdateInterval 01A8  
                 __end_of___flsub 2B38                   __end_of___fltol 2284                             ?_stoa 0028  
                           u10105 226C                             u10045 223A                             u10225 1275  
                           u10315 12BB                             u10235 127C                             u10075 2257  
                           u10405 132A                             u12005 2CAA                             u10255 1285  
                           u11055 0335                             _T1CLK 0211                             u11400 1845  
                           u12025 201C                             u10265 1299                             u10505 0AF2  
                           u10515 0B21                   ___awdiv@divisor 0020                             u10525 0B77  
                           u12045 22E2                             u11165 03C4                             u11085 0357  
                           u10295 12B2                             u10535 0B8E                             u11095 0371  
                           u11520 272D                             u10720 1ECB                             _T1CON 020E  
                           u10705 2A22                             u10385 12F6                             u10545 0B9D  
                           u11530 272E                             u10730 1ECC                             u11370 0793  
                           u12315 25DD                             u10395 1311                             u10555 0BB1  
                           u11355 075C                             u11435 1875                             u11380 0794  
                           u11700 0D78                             u10645 0BF5                             u10805 1FCB  
                           u11285 06BC                             u10655 0C10                             u10575 0BBA  
                           u11295 06CA                             u11455 18A9                             u11640 0CE6  
                           u10665 0C26                             u10825 1F47                             u11465 18B8  
                           u10930 016C                             u11650 0CE7                             u12355 25F7  
                           u12275 25B7                             u10835 1F53                             u12515 21B4  
                           u10940 016D                             u11485 18F7                             u12390 2C17  
                           u12295 25CB                             u10775 1F07                             u11905 2C83  
                           u10970 01DA                             u11690 0D77                             u12707 2477  
                           u10980 01DB                             u11780 0EFF                             u12717 2483  
                           u11790 0F00                             u12807 2B00                             u12727 248F  
                           u11935 1029                             u12817 2B06                             u12737 249B  
                           u12827 2D8E                             u12747 24A7                             u12667 2457  
                           u12837 298D                             u12757 24B3                             u12677 1038  
                           u12767 24BF                             u12687 1059                             u12777 24CB  
                           u12697 2465                             u12787 24D7                             u11995 2CA3  
                           _IOCAN 1F3E                             u12797 24E3                             _IOCAP 1F3D  
                           _IOCCN 1F54                             i1l351 005F                             i1l343 0015  
                           i1l345 0031                             i1l355 0066                   ___awdiv@counter 0025  
                    vfpfcnvrt@fmt 00E8             __end_of_reset10msTick 1003                             _TRISA 0012  
                           _TRISB 0013                             _TRISC 0014            uartReceiveISR@checksum 01C3  
             ___lmul@multiplicand 0024              __size_of_checkSensor 015E                      ?_setDPOffset 0161  
                   __CFG_WRTB$OFF 0000                     __CFG_WRTC$OFF 0000                    OLED_send@value 0025  
                           _getPB 29D2                    statusView@data 0161                             _flags 01B2  
                  statusView@page 01C1                             _p_fct 024B                             ema@in 002C  
                ?_uartIsDataReady 0070                             _fputc 2F5A                             _fputs 2BC0  
                 __end_of_isdigit 2A46                             _setup 21BD                             atoi@n 0033  
                           pad@fp 0038                             atoi@s 0026                             _width 01AE  
                           _putch 0800                             dtoa@d 003B                             dtoa@i 0057  
                           dtoa@n 004F                             dtoa@p 0049                             dtoa@s 004D  
                           dtoa@w 004B                   __end_of_isspace 07FF                    setSkyTemp@data 0161  
                 __end_of_isupper 2A76                             pclath 000A                   __end_of_timeNow 2A06  
            __size_of_channelView 01A2                             stoa@i 0034                             stoa@l 003D  
                           stoa@p 003B                             stoa@s 0028                             stoa@w 0036  
                           status 0003                             wtemp0 007E                   __end_of_sprintf 2C0C  
                  ?___fpclassifyf 0020                   __end_of_tolower 2B9B                   __end_of_strncmp 2F5A  
                 __end_of_strncpy 2CF0                     spinInput@step 00AA                   __initialization 006A  
                    __end_of_atoi 274D                      __end_of_main 245D                      __end_of_dtoa 2000  
                    __end_of_menu 21BD                      __end_of_stoa 18FF            __end_of_setFudgeFactor 2163  
                  __CFG_SAFEN$OFF 0000                            ??_atoi 0028                            ??_main 016D  
                          ??_dtoa 0043                            ??_menu 01E6                            ??_stoa 002A  
               ?_adcGetConversion 0020                    OLED_print_xy@s 0028              __end_of_getNextState 257D  
         __size_of_setOutputPower 00DD                ??_adcGetConversion 0022      __size_of_convertAnalogValues 018C  
             __size_of_OLED_write 000B                setOutputPower@data 0161                   _setLensDia$2426 0167  
                          ?_getPB 0070           _OLED_scrollDisplayRight 2982                            _ADCON1 009E  
                          ?_fputc 0020                            ?_fputs 0028                            _ADRESH 009C  
                          _ADRESL 009B                  ___awdiv@dividend 0022                            ?_setup 0161  
                          _ANSELA 1F38                            ?_putch 0070                            _ANSELB 1F43  
                          _ANSELC 1F4E                __CFG_RSTOSC$HFINT1 0000                            _T0CON0 059E  
                          _T0CON1 059F                            _RC1REG 0119                            _RC1STA 011D  
                          _RC6PPS 1F26                    __CFG_WDTCCS$SC 0000                            i1l6500 2C4D  
                          i1l6506 2C5B                            i1l6516 1831                            i1l6532 2E7F  
                          i1l6526 2E75                            i1l6544 2EB2                            i1l6538 2E9D  
                          i1l6730 0020                            i1l6492 2C39             __end_of_getDataPacket 0004  
                          i1l5942 2CC4                            i1l6742 002E                            i1l5944 2CDC  
                          i1l6752 0057                            i1l6736 0027                            i1l5948 2CE5  
                          _INTCON 000B                 __end_of_OLED_init 24E8                 __end_of_OLED_send 2A2E  
                          _OSCFRQ 0893                            _SPBRGL 011B                            _TX1REG 011A  
                          _TX1STA 011E              __end_of_getStateFunc 0845                  __end_of___xxtofl 2613  
                          u955lld 1CB3                            u966lld 1A05                   ??_pushButtonISR 0070  
                  __CFG_PWRTE$OFF 0000                      vfprintf@cfmt 013F                            ___flge 2365  
                          ___fleq 2E22                            ___lmul 2C8F        OLED_loadSpecialChars@F7930 02D1  
                       ??___aodiv 0030                         ??___fladd 0050                         ??___aomod 0030  
                          ___wmul 2AC1                         ??___fldiv 0050                         ??___awdiv 0024  
                       ??___flneg 0024                    __CFG_STVREN$ON 0000                         ??___awmod 0024  
                       ??___flmul 0036                         ??___flsub 0064                         ??___fltol 0024  
                 ?_setFudgeFactor 0161                            _efgtoa 00C7                channelSetup@chData 0167  
        __size_of_OLED_returnHome 0004                            _floorf 1D81                            _paging 1007  
                ___awdiv@quotient 0027                   ___awmod@divisor 0020                            _rotISR 1801  
                          _rotDir 01C9           __size_of_initGlobalData 0188                     ?_OLED_command 0070  
                 ___awmod@counter 0025                            pad@buf 0030                            _strcat 2AA7  
                          dtoa@fp 0046                            _strcpy 2B9B                            _strlen 2A46  
                          menu@pb 01EB                            fputc@c 0020                            fputs@c 002C  
                          fputs@i 002D                            fputs@s 002F                         ??_isdigit 0022  
              __size_of__Umul8_16 0020             __size_of_channelSetup 00E5                   ___fpclassifyf@e 002A  
                 ___fpclassifyf@u 002C                   ___fpclassifyf@x 0020           adcGetConversion@channel 0023  
           OLED_waitForReady@busy 0020                         ??_isspace 0022                         ??_isupper 0022  
                       ??_timeNow 0024                 OLED_command@value 0026                            stoa@cp 0039  
                          stoa@fp 0038                            putch@c 0070                  __end_of_vfprintf 2D55  
                       ??_sprintf 0157                         ??_tolower 0028                         ??_strncmp 0024  
                       ??_strncpy 0073                  _OLED_pulseEnable 298A                        ___flge@ff1 0048  
                      ___flge@ff2 004C                   ??___fpclassifyf 0024                     checkSensor@dp 005A  
                    ___xxtofl@arg 002A                      ___xxtofl@exp 0029                      ___xxtofl@val 0020  
                      ___fleq@ff1 0020                        ___fleq@ff2 0024                    spinInput@input 00A0  
         __end_of__initialization 00C3                        ___flneg@f1 0020                        ___fltol@f1 0020  
        __size_of_OLED_write4bits 003F                    __pcstackCOMMON 0070                      __pidataBANK3 07FF  
                    __pidataBANK4 2B58                      __pidataBANK5 2A76                     __end_of_getPB 29DD  
         convertAnalogValues@data 0062           convertAnalogValues@avgI 01B4           convertAnalogValues@avgT 01B8  
         convertAnalogValues@avgV 01B6      getAvgChannelCurrents@channel 007D              uartReceiveISR@buffer 0228  
                   __end_of_fputc 2FAD                     __end_of_fputs 2BE6                      _channelSetup 1ABB  
                   __end_of_setup 221E                     __end_of_putch 0801                    ??_OLED_command 0026  
  __size_of_OLED_loadSpecialChars 0027                setFudgeFactor@data 0161     __end_of_OLED_loadSpecialChars 2C33  
    getAvgChannelCurrents@samples 01CC                __size_of_getRotDir 000B         ??_OLED_scrollDisplayRight 0027  
                         ??_getPB 0020            __size_of_OLED_print_xy 0032                           ??_fputc 0023  
                         ??_fputs 0029                        _dataPacket 023C                           ??_setup 0163  
            __size_of_setDPOffset 0059                           ??_putch 0020                        __pbssBANK3 01A0  
                      __pbssBANK4 0220                        __pbssBANK5 02A0                        __pbssBANK6 0320  
              uartIsDataReady@ret 0021           __size_of_uartReceiveISR 004B                __size_of_menuError 0011  
                    ??_OLED_write 0026                 __end_of__Umul8_16 2B58                        __pmaintext 23E1  
                         ?___flge 0048                           ?___fleq 0020                           ?___lmul 0020  
                         ?___wmul 0020                 getStateFunc@state 002B                   __CFG_PPS1WAY$ON 0000  
                      __pintentry 0004                           ?_efgtoa 00AA             __size_of_getNextState 0095  
                         ?_floorf 0062                           ?_paging 0027                 _OLED_waitForReady 2AFA  
                  ___lmul@product 0028                           ?_rotISR 0070          ??_OLED_scrollDisplayLeft 0027  
                         ?_strcat 0031                           ?_strcpy 0025                           ?_strlen 0020  
              __size_of_timeSince 0056                ?_OLED_waitForReady 0070                    _setOutputPower 18FF  
               ??_OLED_returnHome 0027                         ?___xxtofl 0020                __size_of_spinInput 00B3  
                         _OSCCON1 088D                __size_of_vfpfcnvrt 03AD                __end_of_OLED_write 29BC  
                   ??_get10msTick 0070               ??_OLED_waitForReady 0020             __size_of_getStateFunc 0044  
               pushButtonISR@time 0071                       rotISR@input 0077                      _getNextState 24E8  
               __end_of_getRotDir 29D2               _convertAnalogValues 14D2                        ema@average 002E  
                   _OLED_print_xy 2CF0         __end_of_OLED_waitForReady 2B19                   __size_of___flge 007C  
                 __size_of___fleq 0049                           ___aodiv 1C8A                           ___fladd 0845  
                         ___aomod 19DC                           ___fldiv 11D0                           ___awdiv 2EB6  
                         ___flneg 29A7                   __size_of___lmul 0030                           ___awmod 2D94  
                         ___flmul 0A27                           ___flsub 2B19                           ___fltol 221E  
                 __size_of___wmul 001C                   OLED_write@value 0026                         ?_vfprintf 0139  
                 __size_of_efgtoa 071B                     ?_uartSendByte 0070                   __size_of_floorf 012E  
                  _initGlobalData 134A                   __size_of_paging 006B                 ??_OLED_write4bits 0020  
                      _initialize 2DDA                   __size_of_rotISR 0038            __end_of_setOutputPower 19DC  
                         __ptext1 2163                           __ptext2 210A                           __ptext3 20B1  
                         __ptext4 2058                           __ptext5 21BD                           __ptext6 2613  
                         __ptext7 18FF                           __ptext8 1ABB                           __ptext9 165E  
                   ??_checkSensor 0056                           _pbState 01C8                      _getStateFunc 0801  
                 __size_of_strcat 001A                   __CFG_WRTAPP$OFF 0000                   __size_of_strcpy 0025  
                 __size_of_strlen 0018                      __size_of_ISR 0064                  _channelView$1190 01E3  
                _channelView$2425 01DF                 __end_of_menuError 2A17                           ema@tmp0 003C  
                    __size_of_abs 0019                      __size_of_ema 0069                      __size_of_pad 0053  
                         _isdigit 2A2E                        ??___xxtofl 0024                  ___awmod@dividend 0022  
            ?_convertAnalogValues 0062                           _isspace 07E2                         _IOCAFbits 1F3F  
                 __CFG_WRTSAF$OFF 0000                           _isupper 2A5E                           efgtoa@c 00AE  
                         efgtoa@d 00C7                           efgtoa@e 00E0                           efgtoa@f 00AA  
                         efgtoa@g 00DC                           efgtoa@h 00D2                           efgtoa@i 00DA  
                         efgtoa@l 00D6                           efgtoa@m 00C3                           efgtoa@n 00E2  
                         efgtoa@p 00CC                           efgtoa@t 00BF                           efgtoa@u 00E4  
                         efgtoa@w 00CF                           _timeNow 29F5                     ??_channelView 0163  
                         atoi@neg 002C                           _sprintf 2BE6                           _tolower 2B79  
                         clrloop0 29DE                           _strncmp 2F08                           _strncpy 2CBF  
            end_of_initialization 00C3                        _setLensDia 2613                           floorf@e 00A4  
                         floorf@m 00A0                           floorf@u 00A6                           floorf@x 0062  
                         paging@n 002C                    paging@lastPage 0027              __end_of_OLED_command 299D  
                         fputc@fp 0022                           init_ram 29E9         __size_of_adcGetConversion 001D  
                         fputs@fp 0028                           initloop 29EA               __end_of_get10msTick 297E  
                      _setSkyTemp 20B1                 __end_of_timeSince 2058          __size_of_uartIsDataReady 000B  
                ??_setFudgeFactor 0070                         _OLED_init 245D                         _OLED_send 2A17  
          __size_of_reset10msTick 0003               OLED_setCursor@F7917 0268                     ?_returnToPage 0070  
               __end_of_spinInput 2800                    ?_OLED_print_xy 0027                OLED_print_xy@F7925 0264  
               __end_of_vfpfcnvrt 1000                        efgtoa@mode 00D1                        efgtoa@sign 00CA  
          __end_of_initGlobalData 14D2                     _dataReadyFlag 01C5                    ??_uartSendByte 0020  
                      ??_vfprintf 013C             __CFG_WDTCPS$WDTCPS_31 0000          __end_of_OLED_pulseEnable 2993  
                         strcpy@d 002F                           strlen@a 0023                           strcpy@s 002D  
                         strlen@s 0020                         _PORTAbits 000C                         _PORTCbits 000E  
                 ?_setOutputPower 0161   __size_of_OLED_scrollDisplayLeft 0004                   _selectedChannel 01C2  
                     ___fladd@grs 005B             ??_convertAnalogValues 0064                     ___xxtofl@sign 0028  
                       _TRISCbits 0014                       ___fldiv@grs 005C                       ___fldiv@rem 0055  
             __end_of_checkSensor 11D0                  __CFG_FEXTOSC$OFF 0000      OLED_loadSpecialChars@special 0028  
                  _uartReceiveISR 2E6B                       ___flmul@grs 003D                        _statusView 1BA0  
             __end_of_channelView 1800                   channelView@data 0161                 getNextState@state 002B  
                 channelView@page 01C0                   channelView@tmp0 01DB                        ?_OLED_init 0070  
                  ??_returnToPage 0027                        ?_OLED_send 0023             __end_of_pushButtonISR 2C61  
      __size_of_OLED_waitForReady 001F                   ?_initGlobalData 0026                    __end_of___flge 23E1  
            __end_of_nextStateTbl 308C                    __end_of___fleq 2E6B                    __end_of___lmul 2CBF  
                     vfpfcnvrt@ap 00E9                       vfpfcnvrt@cp 0128                       vfpfcnvrt@ct 0134  
                     vfpfcnvrt@fp 0138                       vfpfcnvrt@ll 0120                    __end_of___wmul 2ADD  
                  __end_of_efgtoa 07E2                       ?_initialize 0070                    __end_of_floorf 1EAF  
          __size_of_getDataPacket 0002                    __end_of_paging 1072                        floorf@F524 0220  
                  __end_of_rotISR 1839                    __end_of_strcat 2AC1                    __end_of_strcpy 2BC0  
                  __end_of_strlen 2A5E               start_initialization 006A                     _reset10msTick 1000  
           uartReceiveISR@rxCount 01C4                       __end_of_ISR 0068                       __end_of_abs 2AA7  
                     __end_of_ema 22ED                       __end_of_pad 3000          OLED_print_xy@row_offsets 002B  
          __end_of_uartReceiveISR 2EB6                       _get10msTick 297B          getAvgChannelCurrents@avg 01BA  
                     ?_setLensDia 0161            _OLED_scrollDisplayLeft 297E             __end_of___fpclassifyf 2365  
                     ?_setSkyTemp 0161                   ??_OLED_print_xy 002A                  __CFG_LPBOREN$OFF 0000  
                     vfprintf@fmt 0139                          ??___flge 0050                          ??___fleq 0028  
                  timeSince@since 0024                          ??___lmul 0028                   _OLED_returnHome 1003  
                        ??___wmul 0024                          ??_efgtoa 006C                         __Umul8_16 2B38  
               ??_uartIsDataReady 0020                       __pdataBANK3 01EF                       __pdataBANK4 024B  
                     __pdataBANK5 02D1                          ??_floorf 0066                          ??_paging 0028  
                        ??_rotISR 0070                          ??_strcat 0032                          ??_strcpy 0029  
                        ??_strlen 0022                  OLED_print_xy@col 002F                       _checkSensor 1072  
                       ___fladd@a 004C                         ___fladd@b 0048                  OLED_print_xy@row 0027  
                       ___fldiv@a 0048                         ___fldiv@b 004C                    ?_reset10msTick 0070  
                     __pbssBIGRAM 2753                         ___flmul@a 0032                         ___flmul@b 002E  
                     __pbssCOMMON 007C                         ___flsub@a 005C                         ___flsub@b 0060  
                       ___latbits 0003                     ??_setDPOffset 0070                     __pcstackBANK0 0020  
                   __pcstackBANK1 00A0                     __pcstackBANK2 0120                     __pcstackBANK3 01DB  
                   __pcstackBANK4 026C                  ___aodiv@dividend 0028             _OLED_loadSpecialChars 2C0C  
           __size_of_OLED_command 000A            convertAnalogValues@adc 0068                 __size_of___xxtofl 0096  
               paging@currentPage 002A                       _channelView 165E                   ?_uartReceiveISR 0070  
            __end_of_uartSendByte 29A7                       ?_statusView 0161                     _getDataPacket 0002  
                _adcGetConversion 2ADD               __size_of_initialize 0048                         _atoi$2060 0030  
                       _atoi$2058 002E                         _atoi$2059 0032              setOutputPower@chData 0167  
                 _OLED_write4bits 2D55                       ??_OLED_init 0027                       ??_OLED_send 0024  
                     _efgtoa$1710 00B7                       _efgtoa$1705 00B3                       _efgtoa$1714 00B9  
                     _efgtoa$1706 00B5                       _efgtoa$1715 00BB                       _efgtoa$1716 00BD  
                       _dtoa$1681 0047                          ?___aodiv 0020                          ?___fladd 0048  
                        ?___aomod 0020                          ?___fldiv 0048                          ?___awdiv 0020  
                ___aodiv@quotient 0033                          ?___flneg 0020                          ?___awmod 0020  
                        ?___flmul 002E                          ?___flsub 005C                          ?___fltol 0020  
                  _g_updateScreen 01EF                         _getRotDir 29C7                        ?__Umul8_16 0020  
             __size_of_setLensDia 0099          ?_OLED_scrollDisplayRight 0070                      _OLED_command 2993  
               __size_of_vfprintf 0033                          _BAUD1CON 011F                    getNextState@pb 0027  
                    channelView@n 01E5          _convertAnalogValues$2424 0064               __size_of_setSkyTemp 0059  
                        ?_isdigit 0020                          ?_isspace 0020              __end_of_returnToPage 2C8F  
                        ?_isupper 0020                          ?_timeNow 0020                    __size_of_getPB 000B  
                       _menuError 2A06                          ?_sprintf 0141                          ?_tolower 0026  
                  __size_of_fputc 0053                         _tick100ms 01A0                    __size_of_fputs 0026  
                        ?_strncmp 0020                          ?_strncpy 0070                    __size_of_setup 0061  
                  __size_of_putch 0001                    ?_getDataPacket 0070               __end_of_setDPOffset 20B1  
                  ___wmul@product 0024                          _LATAbits 0018                          _LATBbits 0019  
                        _LATCbits 001A           __end_of_OLED_returnHome 1007                         clear_ram0 29DD  
                   paging@lastDir 01BC                          _PIE0bits 0716                          _PIE3bits 0719  
                        _PIE4bits 071A                    setLensDia@data 0161                          _PIR0bits 070C  
                        _PIR3bits 070F                          _PIR4bits 0710                         _timeSince 2002  
                 initGlobalData@n 002E                 __CFG_BBSIZE$BB512 0000                  ??_setOutputPower 0163  
       getAvgChannelCurrents@busy 01CB                        ?_getRotDir 0070                         _spinInput 274D  
                       _vfpfcnvrt 0C53                 ?_OLED_pulseEnable 0070                   ??_reset10msTick 0070  
                      _ADCON0bits 009D                 ___wmul@multiplier 0020                      _RX1DTPPSbits 1ECB  
             __size_of_statusView 00EA                   setDPOffset@data 0161                ??_OLED_pulseEnable 0020  
          ?_OLED_loadSpecialChars 0070                  getNextState@page 0026                     menu@nextState 01EE  
            OLED_write4bits@value 0022                       _curRotState 007C                      _isspace$2089 0024  
                _transition_table 3110              __end_of_stateFuncTbl 301B                        ?_menuError 0070  
                      vfpfcnvrt@c 0137                        vfpfcnvrt@f 0130                 ___lmul@multiplier 0020  
         __end_of_OLED_write4bits 2D94                      _nextStateTbl 3050                  ??_initGlobalData 0028  
                       paging@dir 002B                 _OLED_clearDisplay 2986                     uartSendByte@s 0020  
                       menu@state 01BD                        vfprintf@ap 013B                        vfprintf@fp 013E  
                      ?_timeSince 0024   __end_of_OLED_scrollDisplayRight 2986                ?_OLED_clearDisplay 0070  
                     ??__Umul8_16 0022                     ?_channelSetup 0161                  __size_of___aodiv 00F7  
                __size_of___fladd 01E2                  __size_of___aomod 00DF                  __size_of___fldiv 017A  
                __size_of___awdiv 0052                  __size_of___flneg 000A       __end_of_convertAnalogValues 165E  
                __size_of___awmod 0046                        ?_spinInput 00A0                  __size_of___flmul 022C  
                __size_of___flsub 001F                  __size_of___fltol 0066                        ?_vfpfcnvrt 00E8  
          OLED_loadSpecialChars@n 0040                      ??_initialize 0020                   ___aodiv@divisor 0020  
             ??_OLED_clearDisplay 0027                   ___aodiv@counter 0031                ___fpclassifyf@F463 0224  
                      sprintf@fmt 0143                          ___xxtofl 257D                        strcat@dest 0034  
                __size_of_isdigit 0018                       _rxFErrCount 01C7             __size_of_uartSendByte 000A  
                     _setDPOffset 2058          checkSensor@sensorTimeout 01A4                  __size_of_isspace 001D  
                        __ptext10 1BA0                          __ptext11 274D                          __ptext20 2D22  
                        __ptext12 2A06                          __ptext21 0C53                          __ptext13 1003  
                        __ptext30 221E                          __ptext22 2F08                          __ptext14 2986  
                        __ptext31 2B19                          __ptext23 1839                          __ptext15 0801  
                        __ptext40 2F5A                          __ptext32 29A7                          __ptext24 00C7  
                        __ptext16 29D2                          __ptext41 0800                          __ptext33 2E22  
                        __ptext25 2B79                          __ptext17 24E8                          __ptext50 29C7  
                        __ptext42 2A8E                          __ptext34 2D94                          __ptext26 2A5E  
                        __ptext18 2AA7                          __ptext51 2982                          __ptext43 19DC  
                        __ptext35 2EB6                          __ptext27 2B9B                          __ptext19 2BE6  
                        __ptext60 2ADD                          __ptext52 297E                          __ptext44 1C8A  
                        __ptext36 1EAF                          __ptext28 1D81                          __ptext61 0A27  
                        __ptext53 2CF0                          __ptext45 26AC                          __ptext37 2FAD  
                        __ptext29 22ED                          __ptext70 0002                          __ptext62 2B38  
                        __ptext54 2DDA                          __ptext46 07E2                          __ptext38 2A46  
                        __ptext71 257D                          __ptext63 11D0                          __ptext55 134A  
                        __ptext47 2A2E                          __ptext39 2BC0                          __ptext80 298A  
                        __ptext72 2365                          __ptext64 0845                          __ptext56 2AC1  
                        __ptext48 2C61                          __ptext73 2C0C                          __ptext65 1072  
                        __ptext57 14D2                          __ptext49 1007                          __ptext82 2E6B  
                        __ptext74 29B1                          __ptext66 299D                          __ptext58 2284  
                        __ptext83 2CBF                          __ptext75 245D                          __ptext67 29BC  
                        __ptext59 2C8F                          __ptext84 1801                          __ptext76 2993  
                        __ptext68 2002                          __ptext85 2C33                          __ptext77 2AFA  
                        __ptext69 29F5                          __ptext86 1000                          __ptext78 2A17  
                        __ptext87 297B                          __ptext79 2D55                  __size_of_isupper 0018  
                    ?_get10msTick 0070                  __size_of_timeNow 0011                   ??_getDataPacket 0020  
         ?_OLED_scrollDisplayLeft 0070                      ??_setLensDia 0163                  __size_of_sprintf 0026  
                __size_of_tolower 0022                     getNextState@n 002C                       _OSCCON3bits 088F  
                      strcpy@dest 0025                  __size_of_strncmp 0052                  __size_of_strncpy 0031  
                        ema@alpha 0030                     __size_of_atoi 00A1                     __size_of_main 007C  
                   __size_of_dtoa 0151         __end_of_OLED_clearDisplay 298A                     __size_of_menu 005A  
                    ??_setSkyTemp 0070                   _uartIsDataReady 29BC                          getPB@ret 0021  
                   __size_of_stoa 00C6                          _tick10ms 01CA                  ?_OLED_returnHome 0070  
              __end_of_initialize 2E22              __CFG_WDTCWS$WDTCWS_7 0000                        _RC1STAbits 011D  
                        efgtoa@fp 00C9                          efgtoa@ne 00C5                          efgtoa@pp 00C1  
                        efgtoa@ou 00AF                         stoa@F1161 025D                       _rxOErrCount 01C6  
                  ??_channelSetup 0163                         setup@data 0161                          int$flags 007E  
                       setup@page 01BE                       ??_getRotDir 0020                          _vfprintf 2D22  
                    _uartSendByte 299D             __size_of_returnToPage 002E                __end_of_setLensDia 26AC  
        __end_of_adcGetConversion 2AFA           __size_of_setFudgeFactor 0059                  ___aomod@dividend 0028  
                    ?_checkSensor 0054                  ??_uartReceiveISR 0076                    _vfpfcnvrt$1740 012A  
                  _vfpfcnvrt$1741 012C                    _vfpfcnvrt$1746 012E                        _INTCONbits 000B  
              __end_of_setSkyTemp 210A                          menu@data 016B                initGlobalData@data 0026  
                        menu@page 01EA                          menu@func 01EC    __end_of_OLED_scrollDisplayLeft 2982  
                    timeSince@now 0030                    __pstringtext10 3164                    __pstringtext11 3173  
                  __pstringtext20 31EF                    __pstringtext12 3182                    __pstringtext21 31FC  
                  __pstringtext13 3191                    __pstringtext30 326C                    __pstringtext22 3209  
                  __pstringtext14 319F                    __pstringtext31 3275                    __pstringtext23 3216  
                  __pstringtext15 31AD                    __pstringtext32 327C                    __pstringtext24 3223  
                  __pstringtext16 31BB                    __pstringtext33 3280                    __pstringtext25 3230  
                  __pstringtext17 31C8                    __pstringtext34 3284                    __pstringtext26 323D  
                  __pstringtext18 31D5                    __pstringtext35 3288                    __pstringtext27 324A  
                  __pstringtext19 31E2                    __pstringtext36 328C                    __pstringtext28 3257  
                  __pstringtext37 0000                    __pstringtext29 3262            __size_of_pushButtonISR 002E  
                        isdigit@c 0020                       ??_menuError 0030                      ?_channelView 0161  
                ?_OLED_write4bits 0070                          intlevel1 0000                         sprintf@ap 015A  
                       strcat@src 0031                      ??_statusView 0163                          isspace@c 0020  
               __CFG_CLKOUTEN$OFF 0000                         strcpy@src 0027                     ?_getNextState 0026  
                        isupper@c 0020                        _OLED_write 29B1                         strncmp@_l 0025  
                       strncmp@_r 0020                         strncpy@cp 0075             __end_of_OLED_print_xy 2D22  
                    _returnToPage 2C61                       ??_timeSince 0028                       efgtoa@nmode 00CE  
                 ___aomod@divisor 0020                       ??_spinInput 0064                       ??_vfpfcnvrt 00EA  
                    getRotDir@ret 0021                          stoa@nuls 002D                   ___aomod@counter 0031  
                   __pstringtext1 3050                     __pstringtext2 3110                     __pstringtext3 3000  
                   __pstringtext4 308C                     __pstringtext5 30BD                     __pstringtext6 30E7  
                   __pstringtext7 312C                     __pstringtext8 3145                     __pstringtext9 3155  
                   ?_getStateFunc 0026            __Umul8_16@multiplicand 0020                          sprintf@f 015B  
                        tolower@c 0026                          sprintf@s 0141                     getStateFunc@n 002C  
          __size_of___fpclassifyf 0078                __end_of_statusView 1C8A                          strncmp@l 0028  
                        strncmp@n 0022                          strncmp@r 0026                          strncpy@d 0074  
                        strncpy@n 0071                          strncpy@s 0070           __end_of_uartIsDataReady 29C7  
                   ___fladd@signs 0058  __size_of_OLED_scrollDisplayRight 0004                      ___aodiv@sign 0032  
                checkSensor@state 01CD                      ___fladd@aexp 0059                      ___fladd@bexp 005A  
      __size_of_OLED_clearDisplay 0004                   checkSensor@data 0054                    ??_getNextState 0028  
            __Umul8_16@multiplier 0028                      ___aomod@sign 0032                 __Umul8_16@product 0024  
